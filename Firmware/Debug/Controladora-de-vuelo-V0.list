
Controladora-de-vuelo-V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012060  080002b0  080002b0  000012b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e00  08012310  08012310  00013310  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013110  08013110  00014110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013118  08013118  00014118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801311c  0801311c  0001411c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000bc  24000000  08013120  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002a50  240000bc  080131dc  000150bc  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24002b0c  080131dc  00015b0c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000150bc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002774b  00000000  00000000  000150ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004f18  00000000  00000000  0003c835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e78  00000000  00000000  00041750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000017bd  00000000  00000000  000435c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000372ba  00000000  00000000  00044d85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000302ca  00000000  00000000  0007c03f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015431c  00000000  00000000  000ac309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00200625  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000083a4  00000000  00000000  00200668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  00208a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240000bc 	.word	0x240000bc
 80002cc:	00000000 	.word	0x00000000
 80002d0:	080122f8 	.word	0x080122f8

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240000c0 	.word	0x240000c0
 80002ec:	080122f8 	.word	0x080122f8

080002f0 <__aeabi_ldivmod>:
 80002f0:	b97b      	cbnz	r3, 8000312 <__aeabi_ldivmod+0x22>
 80002f2:	b972      	cbnz	r2, 8000312 <__aeabi_ldivmod+0x22>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bfbe      	ittt	lt
 80002f8:	2000      	movlt	r0, #0
 80002fa:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002fe:	e006      	blt.n	800030e <__aeabi_ldivmod+0x1e>
 8000300:	bf08      	it	eq
 8000302:	2800      	cmpeq	r0, #0
 8000304:	bf1c      	itt	ne
 8000306:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800030a:	f04f 30ff 	movne.w	r0, #4294967295
 800030e:	f000 b9b5 	b.w	800067c <__aeabi_idiv0>
 8000312:	f1ad 0c08 	sub.w	ip, sp, #8
 8000316:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031a:	2900      	cmp	r1, #0
 800031c:	db09      	blt.n	8000332 <__aeabi_ldivmod+0x42>
 800031e:	2b00      	cmp	r3, #0
 8000320:	db1a      	blt.n	8000358 <__aeabi_ldivmod+0x68>
 8000322:	f000 f84d 	bl	80003c0 <__udivmoddi4>
 8000326:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032e:	b004      	add	sp, #16
 8000330:	4770      	bx	lr
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	db1b      	blt.n	8000374 <__aeabi_ldivmod+0x84>
 800033c:	f000 f840 	bl	80003c0 <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	4252      	negs	r2, r2
 8000352:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000356:	4770      	bx	lr
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	f000 f82f 	bl	80003c0 <__udivmoddi4>
 8000362:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036a:	b004      	add	sp, #16
 800036c:	4240      	negs	r0, r0
 800036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000372:	4770      	bx	lr
 8000374:	4252      	negs	r2, r2
 8000376:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037a:	f000 f821 	bl	80003c0 <__udivmoddi4>
 800037e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000386:	b004      	add	sp, #16
 8000388:	4252      	negs	r2, r2
 800038a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <BMP280_write>:
uint16_t dig_T1, dig_P1;
int16_t  dig_T2, dig_T3, dig_P2,dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;

int32_t T_raw, P_raw, t_fine;

void BMP280_write(uint8_t Address, uint8_t Data){
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	460a      	mov	r2, r1
 800068a:	71fb      	strb	r3, [r7, #7]
 800068c:	4613      	mov	r3, r2
 800068e:	71bb      	strb	r3, [r7, #6]
	BMP280_select();
 8000690:	2200      	movs	r2, #0
 8000692:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000696:	480f      	ldr	r0, [pc, #60]	@ (80006d4 <BMP280_write+0x54>)
 8000698:	f006 fb06 	bl	8006ca8 <HAL_GPIO_WritePin>
	Address &= 0x7F;
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80006a6:	1df9      	adds	r1, r7, #7
 80006a8:	2364      	movs	r3, #100	@ 0x64
 80006aa:	2201      	movs	r2, #1
 80006ac:	480a      	ldr	r0, [pc, #40]	@ (80006d8 <BMP280_write+0x58>)
 80006ae:	f009 fb45 	bl	8009d3c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BMP280, &Data, 1, 100);
 80006b2:	1db9      	adds	r1, r7, #6
 80006b4:	2364      	movs	r3, #100	@ 0x64
 80006b6:	2201      	movs	r2, #1
 80006b8:	4807      	ldr	r0, [pc, #28]	@ (80006d8 <BMP280_write+0x58>)
 80006ba:	f009 fb3f 	bl	8009d3c <HAL_SPI_Transmit>

	BMP280_unselect();
 80006be:	2201      	movs	r2, #1
 80006c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006c4:	4803      	ldr	r0, [pc, #12]	@ (80006d4 <BMP280_write+0x54>)
 80006c6:	f006 faef 	bl	8006ca8 <HAL_GPIO_WritePin>
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	58020400 	.word	0x58020400
 80006d8:	24002318 	.word	0x24002318

080006dc <BMP280_read>:

uint8_t BMP280_read(uint8_t Address){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer = (Address|0x80);
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	73fb      	strb	r3, [r7, #15]
	BMP280_select();
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006f6:	480e      	ldr	r0, [pc, #56]	@ (8000730 <BMP280_read+0x54>)
 80006f8:	f006 fad6 	bl	8006ca8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Buffer, 1, 100);
 80006fc:	f107 010f 	add.w	r1, r7, #15
 8000700:	2364      	movs	r3, #100	@ 0x64
 8000702:	2201      	movs	r2, #1
 8000704:	480b      	ldr	r0, [pc, #44]	@ (8000734 <BMP280_read+0x58>)
 8000706:	f009 fb19 	bl	8009d3c <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, &Buffer, 1, 100);
 800070a:	f107 010f 	add.w	r1, r7, #15
 800070e:	2364      	movs	r3, #100	@ 0x64
 8000710:	2201      	movs	r2, #1
 8000712:	4808      	ldr	r0, [pc, #32]	@ (8000734 <BMP280_read+0x58>)
 8000714:	f009 fd00 	bl	800a118 <HAL_SPI_Receive>
	BMP280_unselect();
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800071e:	4804      	ldr	r0, [pc, #16]	@ (8000730 <BMP280_read+0x54>)
 8000720:	f006 fac2 	bl	8006ca8 <HAL_GPIO_WritePin>

	return Buffer;
 8000724:	7bfb      	ldrb	r3, [r7, #15]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	58020400 	.word	0x58020400
 8000734:	24002318 	.word	0x24002318

08000738 <BMP280_config>:

void BMP280_config(void){
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	BMP280_write(ctrl_meas, 0x57);
 800073c:	2157      	movs	r1, #87	@ 0x57
 800073e:	20f4      	movs	r0, #244	@ 0xf4
 8000740:	f7ff ff9e 	bl	8000680 <BMP280_write>
	BMP280_write(config, 0x10);
 8000744:	2110      	movs	r1, #16
 8000746:	20f5      	movs	r0, #245	@ 0xf5
 8000748:	f7ff ff9a 	bl	8000680 <BMP280_write>
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}

08000750 <BMP280_calibrationData>:

void BMP280_reset(void){
	BMP280_write(reset, 0xB6);
}

void BMP280_calibrationData(void){
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0
	uint8_t Address = 0x88;
 8000756:	2388      	movs	r3, #136	@ 0x88
 8000758:	77fb      	strb	r3, [r7, #31]
	uint8_t Buffer[24] = {0};
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	f107 0308 	add.w	r3, r7, #8
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]
	BMP280_select();
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000774:	4843      	ldr	r0, [pc, #268]	@ (8000884 <BMP280_calibrationData+0x134>)
 8000776:	f006 fa97 	bl	8006ca8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 800077a:	f107 011f 	add.w	r1, r7, #31
 800077e:	2364      	movs	r3, #100	@ 0x64
 8000780:	2201      	movs	r2, #1
 8000782:	4841      	ldr	r0, [pc, #260]	@ (8000888 <BMP280_calibrationData+0x138>)
 8000784:	f009 fada 	bl	8009d3c <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 24, 100);
 8000788:	1d39      	adds	r1, r7, #4
 800078a:	2364      	movs	r3, #100	@ 0x64
 800078c:	2218      	movs	r2, #24
 800078e:	483e      	ldr	r0, [pc, #248]	@ (8000888 <BMP280_calibrationData+0x138>)
 8000790:	f009 fcc2 	bl	800a118 <HAL_SPI_Receive>
	BMP280_unselect();
 8000794:	2201      	movs	r2, #1
 8000796:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800079a:	483a      	ldr	r0, [pc, #232]	@ (8000884 <BMP280_calibrationData+0x134>)
 800079c:	f006 fa84 	bl	8006ca8 <HAL_GPIO_WritePin>

	dig_T1 = (Buffer[1]<<8)|Buffer[0];
 80007a0:	797b      	ldrb	r3, [r7, #5]
 80007a2:	021b      	lsls	r3, r3, #8
 80007a4:	b21a      	sxth	r2, r3
 80007a6:	793b      	ldrb	r3, [r7, #4]
 80007a8:	b21b      	sxth	r3, r3
 80007aa:	4313      	orrs	r3, r2
 80007ac:	b21b      	sxth	r3, r3
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	4b36      	ldr	r3, [pc, #216]	@ (800088c <BMP280_calibrationData+0x13c>)
 80007b2:	801a      	strh	r2, [r3, #0]
	dig_T2 = (Buffer[3]<<8)|Buffer[2];
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	021b      	lsls	r3, r3, #8
 80007b8:	b21a      	sxth	r2, r3
 80007ba:	79bb      	ldrb	r3, [r7, #6]
 80007bc:	b21b      	sxth	r3, r3
 80007be:	4313      	orrs	r3, r2
 80007c0:	b21a      	sxth	r2, r3
 80007c2:	4b33      	ldr	r3, [pc, #204]	@ (8000890 <BMP280_calibrationData+0x140>)
 80007c4:	801a      	strh	r2, [r3, #0]
	dig_T3 = (Buffer[5]<<8)|Buffer[4];
 80007c6:	7a7b      	ldrb	r3, [r7, #9]
 80007c8:	021b      	lsls	r3, r3, #8
 80007ca:	b21a      	sxth	r2, r3
 80007cc:	7a3b      	ldrb	r3, [r7, #8]
 80007ce:	b21b      	sxth	r3, r3
 80007d0:	4313      	orrs	r3, r2
 80007d2:	b21a      	sxth	r2, r3
 80007d4:	4b2f      	ldr	r3, [pc, #188]	@ (8000894 <BMP280_calibrationData+0x144>)
 80007d6:	801a      	strh	r2, [r3, #0]

	dig_P1 = (Buffer[7]<<8)|Buffer[6];
 80007d8:	7afb      	ldrb	r3, [r7, #11]
 80007da:	021b      	lsls	r3, r3, #8
 80007dc:	b21a      	sxth	r2, r3
 80007de:	7abb      	ldrb	r3, [r7, #10]
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	4313      	orrs	r3, r2
 80007e4:	b21b      	sxth	r3, r3
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000898 <BMP280_calibrationData+0x148>)
 80007ea:	801a      	strh	r2, [r3, #0]
	dig_P2 = (Buffer[9]<<8)|Buffer[8];
 80007ec:	7b7b      	ldrb	r3, [r7, #13]
 80007ee:	021b      	lsls	r3, r3, #8
 80007f0:	b21a      	sxth	r2, r3
 80007f2:	7b3b      	ldrb	r3, [r7, #12]
 80007f4:	b21b      	sxth	r3, r3
 80007f6:	4313      	orrs	r3, r2
 80007f8:	b21a      	sxth	r2, r3
 80007fa:	4b28      	ldr	r3, [pc, #160]	@ (800089c <BMP280_calibrationData+0x14c>)
 80007fc:	801a      	strh	r2, [r3, #0]
	dig_P3 = (Buffer[11]<<8)|Buffer[10];
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	021b      	lsls	r3, r3, #8
 8000802:	b21a      	sxth	r2, r3
 8000804:	7bbb      	ldrb	r3, [r7, #14]
 8000806:	b21b      	sxth	r3, r3
 8000808:	4313      	orrs	r3, r2
 800080a:	b21a      	sxth	r2, r3
 800080c:	4b24      	ldr	r3, [pc, #144]	@ (80008a0 <BMP280_calibrationData+0x150>)
 800080e:	801a      	strh	r2, [r3, #0]
	dig_P4 = (Buffer[13]<<8)|Buffer[12];
 8000810:	7c7b      	ldrb	r3, [r7, #17]
 8000812:	021b      	lsls	r3, r3, #8
 8000814:	b21a      	sxth	r2, r3
 8000816:	7c3b      	ldrb	r3, [r7, #16]
 8000818:	b21b      	sxth	r3, r3
 800081a:	4313      	orrs	r3, r2
 800081c:	b21a      	sxth	r2, r3
 800081e:	4b21      	ldr	r3, [pc, #132]	@ (80008a4 <BMP280_calibrationData+0x154>)
 8000820:	801a      	strh	r2, [r3, #0]
	dig_P5 = (Buffer[15]<<8)|Buffer[14];
 8000822:	7cfb      	ldrb	r3, [r7, #19]
 8000824:	021b      	lsls	r3, r3, #8
 8000826:	b21a      	sxth	r2, r3
 8000828:	7cbb      	ldrb	r3, [r7, #18]
 800082a:	b21b      	sxth	r3, r3
 800082c:	4313      	orrs	r3, r2
 800082e:	b21a      	sxth	r2, r3
 8000830:	4b1d      	ldr	r3, [pc, #116]	@ (80008a8 <BMP280_calibrationData+0x158>)
 8000832:	801a      	strh	r2, [r3, #0]
	dig_P6 = (Buffer[17]<<8)|Buffer[16];
 8000834:	7d7b      	ldrb	r3, [r7, #21]
 8000836:	021b      	lsls	r3, r3, #8
 8000838:	b21a      	sxth	r2, r3
 800083a:	7d3b      	ldrb	r3, [r7, #20]
 800083c:	b21b      	sxth	r3, r3
 800083e:	4313      	orrs	r3, r2
 8000840:	b21a      	sxth	r2, r3
 8000842:	4b1a      	ldr	r3, [pc, #104]	@ (80008ac <BMP280_calibrationData+0x15c>)
 8000844:	801a      	strh	r2, [r3, #0]
	dig_P7 = (Buffer[19]<<8)|Buffer[18];
 8000846:	7dfb      	ldrb	r3, [r7, #23]
 8000848:	021b      	lsls	r3, r3, #8
 800084a:	b21a      	sxth	r2, r3
 800084c:	7dbb      	ldrb	r3, [r7, #22]
 800084e:	b21b      	sxth	r3, r3
 8000850:	4313      	orrs	r3, r2
 8000852:	b21a      	sxth	r2, r3
 8000854:	4b16      	ldr	r3, [pc, #88]	@ (80008b0 <BMP280_calibrationData+0x160>)
 8000856:	801a      	strh	r2, [r3, #0]
	dig_P8 = (Buffer[21]<<8)|Buffer[20];
 8000858:	7e7b      	ldrb	r3, [r7, #25]
 800085a:	021b      	lsls	r3, r3, #8
 800085c:	b21a      	sxth	r2, r3
 800085e:	7e3b      	ldrb	r3, [r7, #24]
 8000860:	b21b      	sxth	r3, r3
 8000862:	4313      	orrs	r3, r2
 8000864:	b21a      	sxth	r2, r3
 8000866:	4b13      	ldr	r3, [pc, #76]	@ (80008b4 <BMP280_calibrationData+0x164>)
 8000868:	801a      	strh	r2, [r3, #0]
	dig_P9 = (Buffer[23]<<8)|Buffer[22];
 800086a:	7efb      	ldrb	r3, [r7, #27]
 800086c:	021b      	lsls	r3, r3, #8
 800086e:	b21a      	sxth	r2, r3
 8000870:	7ebb      	ldrb	r3, [r7, #26]
 8000872:	b21b      	sxth	r3, r3
 8000874:	4313      	orrs	r3, r2
 8000876:	b21a      	sxth	r2, r3
 8000878:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <BMP280_calibrationData+0x168>)
 800087a:	801a      	strh	r2, [r3, #0]
}
 800087c:	bf00      	nop
 800087e:	3720      	adds	r7, #32
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	58020400 	.word	0x58020400
 8000888:	24002318 	.word	0x24002318
 800088c:	240000ec 	.word	0x240000ec
 8000890:	240000f0 	.word	0x240000f0
 8000894:	240000f2 	.word	0x240000f2
 8000898:	240000ee 	.word	0x240000ee
 800089c:	240000f4 	.word	0x240000f4
 80008a0:	240000f6 	.word	0x240000f6
 80008a4:	240000f8 	.word	0x240000f8
 80008a8:	240000fa 	.word	0x240000fa
 80008ac:	240000fc 	.word	0x240000fc
 80008b0:	240000fe 	.word	0x240000fe
 80008b4:	24000100 	.word	0x24000100
 80008b8:	24000102 	.word	0x24000102

080008bc <BMP280_readRawValues>:

void BMP280_readRawValues(void){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
	uint8_t Address = press_msb;
 80008c2:	23f7      	movs	r3, #247	@ 0xf7
 80008c4:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[6] = {0};
 80008c6:	2300      	movs	r3, #0
 80008c8:	603b      	str	r3, [r7, #0]
 80008ca:	2300      	movs	r3, #0
 80008cc:	80bb      	strh	r3, [r7, #4]
	BMP280_select();
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008d4:	4817      	ldr	r0, [pc, #92]	@ (8000934 <BMP280_readRawValues+0x78>)
 80008d6:	f006 f9e7 	bl	8006ca8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80008da:	1df9      	adds	r1, r7, #7
 80008dc:	2364      	movs	r3, #100	@ 0x64
 80008de:	2201      	movs	r2, #1
 80008e0:	4815      	ldr	r0, [pc, #84]	@ (8000938 <BMP280_readRawValues+0x7c>)
 80008e2:	f009 fa2b 	bl	8009d3c <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 6, 100);
 80008e6:	4639      	mov	r1, r7
 80008e8:	2364      	movs	r3, #100	@ 0x64
 80008ea:	2206      	movs	r2, #6
 80008ec:	4812      	ldr	r0, [pc, #72]	@ (8000938 <BMP280_readRawValues+0x7c>)
 80008ee:	f009 fc13 	bl	800a118 <HAL_SPI_Receive>
	BMP280_unselect();
 80008f2:	2201      	movs	r2, #1
 80008f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008f8:	480e      	ldr	r0, [pc, #56]	@ (8000934 <BMP280_readRawValues+0x78>)
 80008fa:	f006 f9d5 	bl	8006ca8 <HAL_GPIO_WritePin>

	P_raw = (Buffer[0]<<12)|(Buffer[1]<<4)|(Buffer[2]>>4);
 80008fe:	783b      	ldrb	r3, [r7, #0]
 8000900:	031a      	lsls	r2, r3, #12
 8000902:	787b      	ldrb	r3, [r7, #1]
 8000904:	011b      	lsls	r3, r3, #4
 8000906:	4313      	orrs	r3, r2
 8000908:	78ba      	ldrb	r2, [r7, #2]
 800090a:	0912      	lsrs	r2, r2, #4
 800090c:	b2d2      	uxtb	r2, r2
 800090e:	4313      	orrs	r3, r2
 8000910:	4a0a      	ldr	r2, [pc, #40]	@ (800093c <BMP280_readRawValues+0x80>)
 8000912:	6013      	str	r3, [r2, #0]
	T_raw = (Buffer[3]<<12)|(Buffer[4]<<4)|(Buffer[5]>>4);
 8000914:	78fb      	ldrb	r3, [r7, #3]
 8000916:	031a      	lsls	r2, r3, #12
 8000918:	793b      	ldrb	r3, [r7, #4]
 800091a:	011b      	lsls	r3, r3, #4
 800091c:	4313      	orrs	r3, r2
 800091e:	797a      	ldrb	r2, [r7, #5]
 8000920:	0912      	lsrs	r2, r2, #4
 8000922:	b2d2      	uxtb	r2, r2
 8000924:	4313      	orrs	r3, r2
 8000926:	4a06      	ldr	r2, [pc, #24]	@ (8000940 <BMP280_readRawValues+0x84>)
 8000928:	6013      	str	r3, [r2, #0]
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	58020400 	.word	0x58020400
 8000938:	24002318 	.word	0x24002318
 800093c:	24000108 	.word	0x24000108
 8000940:	24000104 	.word	0x24000104

08000944 <BMP280_measureT>:

int32_t BMP280_measureT(int32_t adc_T){
 8000944:	b480      	push	{r7}
 8000946:	b087      	sub	sp, #28
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 =  ((((T_raw>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 800094c:	4b1a      	ldr	r3, [pc, #104]	@ (80009b8 <BMP280_measureT+0x74>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	10da      	asrs	r2, r3, #3
 8000952:	4b1a      	ldr	r3, [pc, #104]	@ (80009bc <BMP280_measureT+0x78>)
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	4a19      	ldr	r2, [pc, #100]	@ (80009c0 <BMP280_measureT+0x7c>)
 800095c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000960:	fb02 f303 	mul.w	r3, r2, r3
 8000964:	12db      	asrs	r3, r3, #11
 8000966:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	111b      	asrs	r3, r3, #4
 800096c:	4a13      	ldr	r2, [pc, #76]	@ (80009bc <BMP280_measureT+0x78>)
 800096e:	8812      	ldrh	r2, [r2, #0]
 8000970:	1a9b      	subs	r3, r3, r2
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	1112      	asrs	r2, r2, #4
 8000976:	4911      	ldr	r1, [pc, #68]	@ (80009bc <BMP280_measureT+0x78>)
 8000978:	8809      	ldrh	r1, [r1, #0]
 800097a:	1a52      	subs	r2, r2, r1
 800097c:	fb02 f303 	mul.w	r3, r2, r3
 8000980:	131b      	asrs	r3, r3, #12
 8000982:	4a10      	ldr	r2, [pc, #64]	@ (80009c4 <BMP280_measureT+0x80>)
 8000984:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000988:	fb02 f303 	mul.w	r3, r2, r3
 800098c:	139b      	asrs	r3, r3, #14
 800098e:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8000990:	697a      	ldr	r2, [r7, #20]
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	4413      	add	r3, r2
 8000996:	4a0c      	ldr	r2, [pc, #48]	@ (80009c8 <BMP280_measureT+0x84>)
 8000998:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800099a:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <BMP280_measureT+0x84>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	4613      	mov	r3, r2
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	4413      	add	r3, r2
 80009a4:	3380      	adds	r3, #128	@ 0x80
 80009a6:	121b      	asrs	r3, r3, #8
 80009a8:	60fb      	str	r3, [r7, #12]
	return T;
 80009aa:	68fb      	ldr	r3, [r7, #12]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	371c      	adds	r7, #28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	24000104 	.word	0x24000104
 80009bc:	240000ec 	.word	0x240000ec
 80009c0:	240000f0 	.word	0x240000f0
 80009c4:	240000f2 	.word	0x240000f2
 80009c8:	2400010c 	.word	0x2400010c

080009cc <BMP280_measureP>:

uint32_t BMP280_measureP(int32_t adc_P){
 80009cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80009d0:	b0ca      	sub	sp, #296	@ 0x128
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 80009d8:	4baf      	ldr	r3, [pc, #700]	@ (8000c98 <BMP280_measureP+0x2cc>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	17da      	asrs	r2, r3, #31
 80009de:	461c      	mov	r4, r3
 80009e0:	4615      	mov	r5, r2
 80009e2:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 80009e6:	f145 3bff 	adc.w	fp, r5, #4294967295
 80009ea:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 80009ee:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80009f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80009f6:	fb03 f102 	mul.w	r1, r3, r2
 80009fa:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80009fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a02:	fb02 f303 	mul.w	r3, r2, r3
 8000a06:	18ca      	adds	r2, r1, r3
 8000a08:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a0c:	fba3 8903 	umull	r8, r9, r3, r3
 8000a10:	eb02 0309 	add.w	r3, r2, r9
 8000a14:	4699      	mov	r9, r3
 8000a16:	4ba1      	ldr	r3, [pc, #644]	@ (8000c9c <BMP280_measureP+0x2d0>)
 8000a18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a1c:	b21b      	sxth	r3, r3
 8000a1e:	17da      	asrs	r2, r3, #31
 8000a20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000a24:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8000a28:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	fb03 f209 	mul.w	r2, r3, r9
 8000a32:	460b      	mov	r3, r1
 8000a34:	fb08 f303 	mul.w	r3, r8, r3
 8000a38:	4413      	add	r3, r2
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	fba8 1202 	umull	r1, r2, r8, r2
 8000a40:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8000a44:	460a      	mov	r2, r1
 8000a46:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8000a4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000a4e:	4413      	add	r3, r2
 8000a50:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000a54:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8000a58:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8000a5c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8000a60:	4b8f      	ldr	r3, [pc, #572]	@ (8000ca0 <BMP280_measureP+0x2d4>)
 8000a62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a66:	b21b      	sxth	r3, r3
 8000a68:	17da      	asrs	r2, r3, #31
 8000a6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000a6e:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8000a72:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a76:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8000a7a:	462a      	mov	r2, r5
 8000a7c:	fb02 f203 	mul.w	r2, r2, r3
 8000a80:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000a84:	4621      	mov	r1, r4
 8000a86:	fb01 f303 	mul.w	r3, r1, r3
 8000a8a:	441a      	add	r2, r3
 8000a8c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a90:	4621      	mov	r1, r4
 8000a92:	fba3 1301 	umull	r1, r3, r3, r1
 8000a96:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000a9a:	460b      	mov	r3, r1
 8000a9c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000aa4:	18d3      	adds	r3, r2, r3
 8000aa6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000aaa:	f04f 0000 	mov.w	r0, #0
 8000aae:	f04f 0100 	mov.w	r1, #0
 8000ab2:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8000ab6:	462b      	mov	r3, r5
 8000ab8:	0459      	lsls	r1, r3, #17
 8000aba:	4623      	mov	r3, r4
 8000abc:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000ac0:	4623      	mov	r3, r4
 8000ac2:	0458      	lsls	r0, r3, #17
 8000ac4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ac8:	1814      	adds	r4, r2, r0
 8000aca:	643c      	str	r4, [r7, #64]	@ 0x40
 8000acc:	414b      	adcs	r3, r1
 8000ace:	647b      	str	r3, [r7, #68]	@ 0x44
 8000ad0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8000ad4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8000ad8:	4b72      	ldr	r3, [pc, #456]	@ (8000ca4 <BMP280_measureP+0x2d8>)
 8000ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ade:	b21b      	sxth	r3, r3
 8000ae0:	17da      	asrs	r2, r3, #31
 8000ae2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000ae6:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	f04f 0100 	mov.w	r1, #0
 8000af2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000af6:	00d9      	lsls	r1, r3, #3
 8000af8:	2000      	movs	r0, #0
 8000afa:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000afe:	1814      	adds	r4, r2, r0
 8000b00:	63bc      	str	r4, [r7, #56]	@ 0x38
 8000b02:	414b      	adcs	r3, r1
 8000b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b06:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8000b0a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8000b0e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000b12:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b16:	fb03 f102 	mul.w	r1, r3, r2
 8000b1a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000b1e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b22:	fb02 f303 	mul.w	r3, r2, r3
 8000b26:	18ca      	adds	r2, r1, r3
 8000b28:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b2c:	fba3 1303 	umull	r1, r3, r3, r3
 8000b30:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000b34:	460b      	mov	r3, r1
 8000b36:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000b3e:	18d3      	adds	r3, r2, r3
 8000b40:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000b44:	4b58      	ldr	r3, [pc, #352]	@ (8000ca8 <BMP280_measureP+0x2dc>)
 8000b46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b4a:	b21b      	sxth	r3, r3
 8000b4c:	17da      	asrs	r2, r3, #31
 8000b4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000b52:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000b56:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8000b5a:	462b      	mov	r3, r5
 8000b5c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8000b60:	4642      	mov	r2, r8
 8000b62:	fb02 f203 	mul.w	r2, r2, r3
 8000b66:	464b      	mov	r3, r9
 8000b68:	4621      	mov	r1, r4
 8000b6a:	fb01 f303 	mul.w	r3, r1, r3
 8000b6e:	4413      	add	r3, r2
 8000b70:	4622      	mov	r2, r4
 8000b72:	4641      	mov	r1, r8
 8000b74:	fba2 1201 	umull	r1, r2, r2, r1
 8000b78:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8000b7c:	460a      	mov	r2, r1
 8000b7e:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8000b82:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000b86:	4413      	add	r3, r2
 8000b88:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	f04f 0100 	mov.w	r1, #0
 8000b94:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8000b98:	4623      	mov	r3, r4
 8000b9a:	0a18      	lsrs	r0, r3, #8
 8000b9c:	462b      	mov	r3, r5
 8000b9e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000ba2:	462b      	mov	r3, r5
 8000ba4:	1219      	asrs	r1, r3, #8
 8000ba6:	4b41      	ldr	r3, [pc, #260]	@ (8000cac <BMP280_measureP+0x2e0>)
 8000ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bac:	b21b      	sxth	r3, r3
 8000bae:	17da      	asrs	r2, r3, #31
 8000bb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000bb4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8000bb8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000bbc:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8000bc0:	464a      	mov	r2, r9
 8000bc2:	fb02 f203 	mul.w	r2, r2, r3
 8000bc6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000bca:	4644      	mov	r4, r8
 8000bcc:	fb04 f303 	mul.w	r3, r4, r3
 8000bd0:	441a      	add	r2, r3
 8000bd2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000bd6:	4644      	mov	r4, r8
 8000bd8:	fba3 4304 	umull	r4, r3, r3, r4
 8000bdc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000be0:	4623      	mov	r3, r4
 8000be2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8000be6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000bea:	18d3      	adds	r3, r2, r3
 8000bec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000bf0:	f04f 0200 	mov.w	r2, #0
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8000bfc:	464c      	mov	r4, r9
 8000bfe:	0323      	lsls	r3, r4, #12
 8000c00:	4644      	mov	r4, r8
 8000c02:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000c06:	4644      	mov	r4, r8
 8000c08:	0322      	lsls	r2, r4, #12
 8000c0a:	1884      	adds	r4, r0, r2
 8000c0c:	633c      	str	r4, [r7, #48]	@ 0x30
 8000c0e:	eb41 0303 	adc.w	r3, r1, r3
 8000c12:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c14:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8000c18:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8000c1c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000c20:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8000c24:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8000c28:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8000c2c:	4b20      	ldr	r3, [pc, #128]	@ (8000cb0 <BMP280_measureP+0x2e4>)
 8000c2e:	881b      	ldrh	r3, [r3, #0]
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	2200      	movs	r2, #0
 8000c34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000c38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8000c3c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8000c40:	462b      	mov	r3, r5
 8000c42:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8000c46:	4642      	mov	r2, r8
 8000c48:	fb02 f203 	mul.w	r2, r2, r3
 8000c4c:	464b      	mov	r3, r9
 8000c4e:	4621      	mov	r1, r4
 8000c50:	fb01 f303 	mul.w	r3, r1, r3
 8000c54:	4413      	add	r3, r2
 8000c56:	4622      	mov	r2, r4
 8000c58:	4641      	mov	r1, r8
 8000c5a:	fba2 1201 	umull	r1, r2, r2, r1
 8000c5e:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8000c62:	460a      	mov	r2, r1
 8000c64:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8000c68:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000c6c:	4413      	add	r3, r2
 8000c6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8000c72:	f04f 0200 	mov.w	r2, #0
 8000c76:	f04f 0300 	mov.w	r3, #0
 8000c7a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8000c7e:	4629      	mov	r1, r5
 8000c80:	104a      	asrs	r2, r1, #1
 8000c82:	4629      	mov	r1, r5
 8000c84:	17cb      	asrs	r3, r1, #31
 8000c86:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 8000c8a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	d110      	bne.n	8000cb4 <BMP280_measureP+0x2e8>
	{
	return 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	e154      	b.n	8000f40 <BMP280_measureP+0x574>
 8000c96:	bf00      	nop
 8000c98:	2400010c 	.word	0x2400010c
 8000c9c:	240000fc 	.word	0x240000fc
 8000ca0:	240000fa 	.word	0x240000fa
 8000ca4:	240000f8 	.word	0x240000f8
 8000ca8:	240000f6 	.word	0x240000f6
 8000cac:	240000f4 	.word	0x240000f4
 8000cb0:	240000ee 	.word	0x240000ee
	}
	p = 1048576-adc_P;
 8000cb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000cb8:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8000cbc:	17da      	asrs	r2, r3, #31
 8000cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000cc2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8000cc6:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8000cca:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000cce:	105b      	asrs	r3, r3, #1
 8000cd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000cd4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000cd8:	07db      	lsls	r3, r3, #31
 8000cda:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000cde:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ce2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8000ce6:	4621      	mov	r1, r4
 8000ce8:	1a89      	subs	r1, r1, r2
 8000cea:	67b9      	str	r1, [r7, #120]	@ 0x78
 8000cec:	4629      	mov	r1, r5
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000cf4:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8000cf8:	4622      	mov	r2, r4
 8000cfa:	462b      	mov	r3, r5
 8000cfc:	1891      	adds	r1, r2, r2
 8000cfe:	6239      	str	r1, [r7, #32]
 8000d00:	415b      	adcs	r3, r3
 8000d02:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d04:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000d08:	4621      	mov	r1, r4
 8000d0a:	1851      	adds	r1, r2, r1
 8000d0c:	61b9      	str	r1, [r7, #24]
 8000d0e:	4629      	mov	r1, r5
 8000d10:	414b      	adcs	r3, r1
 8000d12:	61fb      	str	r3, [r7, #28]
 8000d14:	f04f 0200 	mov.w	r2, #0
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000d20:	4649      	mov	r1, r9
 8000d22:	018b      	lsls	r3, r1, #6
 8000d24:	4641      	mov	r1, r8
 8000d26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000d2a:	4641      	mov	r1, r8
 8000d2c:	018a      	lsls	r2, r1, #6
 8000d2e:	4641      	mov	r1, r8
 8000d30:	1889      	adds	r1, r1, r2
 8000d32:	6139      	str	r1, [r7, #16]
 8000d34:	4649      	mov	r1, r9
 8000d36:	eb43 0101 	adc.w	r1, r3, r1
 8000d3a:	6179      	str	r1, [r7, #20]
 8000d3c:	f04f 0200 	mov.w	r2, #0
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000d48:	4649      	mov	r1, r9
 8000d4a:	008b      	lsls	r3, r1, #2
 8000d4c:	4641      	mov	r1, r8
 8000d4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d52:	4641      	mov	r1, r8
 8000d54:	008a      	lsls	r2, r1, #2
 8000d56:	4610      	mov	r0, r2
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	4622      	mov	r2, r4
 8000d5e:	189b      	adds	r3, r3, r2
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	460b      	mov	r3, r1
 8000d64:	462a      	mov	r2, r5
 8000d66:	eb42 0303 	adc.w	r3, r2, r3
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	f04f 0200 	mov.w	r2, #0
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000d78:	4649      	mov	r1, r9
 8000d7a:	008b      	lsls	r3, r1, #2
 8000d7c:	4641      	mov	r1, r8
 8000d7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d82:	4641      	mov	r1, r8
 8000d84:	008a      	lsls	r2, r1, #2
 8000d86:	4610      	mov	r0, r2
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	4622      	mov	r2, r4
 8000d8e:	189b      	adds	r3, r3, r2
 8000d90:	673b      	str	r3, [r7, #112]	@ 0x70
 8000d92:	462b      	mov	r3, r5
 8000d94:	460a      	mov	r2, r1
 8000d96:	eb42 0303 	adc.w	r3, r2, r3
 8000d9a:	677b      	str	r3, [r7, #116]	@ 0x74
 8000d9c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000da0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8000da4:	f7ff faa4 	bl	80002f0 <__aeabi_ldivmod>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8000db0:	4b66      	ldr	r3, [pc, #408]	@ (8000f4c <BMP280_measureP+0x580>)
 8000db2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000db6:	b21b      	sxth	r3, r3
 8000db8:	17da      	asrs	r2, r3, #31
 8000dba:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000dbc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000dbe:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000dc2:	f04f 0000 	mov.w	r0, #0
 8000dc6:	f04f 0100 	mov.w	r1, #0
 8000dca:	0b50      	lsrs	r0, r2, #13
 8000dcc:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000dd0:	1359      	asrs	r1, r3, #13
 8000dd2:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8000dd6:	462b      	mov	r3, r5
 8000dd8:	fb00 f203 	mul.w	r2, r0, r3
 8000ddc:	4623      	mov	r3, r4
 8000dde:	fb03 f301 	mul.w	r3, r3, r1
 8000de2:	4413      	add	r3, r2
 8000de4:	4622      	mov	r2, r4
 8000de6:	fba2 1200 	umull	r1, r2, r2, r0
 8000dea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8000dee:	460a      	mov	r2, r1
 8000df0:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8000df4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000df8:	4413      	add	r3, r2
 8000dfa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000dfe:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000e02:	f04f 0000 	mov.w	r0, #0
 8000e06:	f04f 0100 	mov.w	r1, #0
 8000e0a:	0b50      	lsrs	r0, r2, #13
 8000e0c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000e10:	1359      	asrs	r1, r3, #13
 8000e12:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8000e16:	462b      	mov	r3, r5
 8000e18:	fb00 f203 	mul.w	r2, r0, r3
 8000e1c:	4623      	mov	r3, r4
 8000e1e:	fb03 f301 	mul.w	r3, r3, r1
 8000e22:	4413      	add	r3, r2
 8000e24:	4622      	mov	r2, r4
 8000e26:	fba2 1200 	umull	r1, r2, r2, r0
 8000e2a:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8000e2e:	460a      	mov	r2, r1
 8000e30:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8000e34:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8000e38:	4413      	add	r3, r2
 8000e3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000e3e:	f04f 0200 	mov.w	r2, #0
 8000e42:	f04f 0300 	mov.w	r3, #0
 8000e46:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8000e4a:	4621      	mov	r1, r4
 8000e4c:	0e4a      	lsrs	r2, r1, #25
 8000e4e:	4629      	mov	r1, r5
 8000e50:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8000e54:	4629      	mov	r1, r5
 8000e56:	164b      	asrs	r3, r1, #25
 8000e58:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8000e5c:	4b3c      	ldr	r3, [pc, #240]	@ (8000f50 <BMP280_measureP+0x584>)
 8000e5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e62:	b21b      	sxth	r3, r3
 8000e64:	17da      	asrs	r2, r3, #31
 8000e66:	663b      	str	r3, [r7, #96]	@ 0x60
 8000e68:	667a      	str	r2, [r7, #100]	@ 0x64
 8000e6a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000e6e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8000e72:	462a      	mov	r2, r5
 8000e74:	fb02 f203 	mul.w	r2, r2, r3
 8000e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e7c:	4621      	mov	r1, r4
 8000e7e:	fb01 f303 	mul.w	r3, r1, r3
 8000e82:	4413      	add	r3, r2
 8000e84:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000e88:	4621      	mov	r1, r4
 8000e8a:	fba2 1201 	umull	r1, r2, r2, r1
 8000e8e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8000e92:	460a      	mov	r2, r1
 8000e94:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8000e98:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8000e9c:	4413      	add	r3, r2
 8000e9e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000ea2:	f04f 0200 	mov.w	r2, #0
 8000ea6:	f04f 0300 	mov.w	r3, #0
 8000eaa:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8000eae:	4621      	mov	r1, r4
 8000eb0:	0cca      	lsrs	r2, r1, #19
 8000eb2:	4629      	mov	r1, r5
 8000eb4:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8000eb8:	4629      	mov	r1, r5
 8000eba:	14cb      	asrs	r3, r1, #19
 8000ebc:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8000ec0:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8000ec4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000ec8:	1884      	adds	r4, r0, r2
 8000eca:	65bc      	str	r4, [r7, #88]	@ 0x58
 8000ecc:	eb41 0303 	adc.w	r3, r1, r3
 8000ed0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000ed2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ed6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8000eda:	4621      	mov	r1, r4
 8000edc:	1889      	adds	r1, r1, r2
 8000ede:	6539      	str	r1, [r7, #80]	@ 0x50
 8000ee0:	4629      	mov	r1, r5
 8000ee2:	eb43 0101 	adc.w	r1, r3, r1
 8000ee6:	6579      	str	r1, [r7, #84]	@ 0x54
 8000ee8:	f04f 0000 	mov.w	r0, #0
 8000eec:	f04f 0100 	mov.w	r1, #0
 8000ef0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8000ef4:	4623      	mov	r3, r4
 8000ef6:	0a18      	lsrs	r0, r3, #8
 8000ef8:	462b      	mov	r3, r5
 8000efa:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000efe:	462b      	mov	r3, r5
 8000f00:	1219      	asrs	r1, r3, #8
 8000f02:	4b14      	ldr	r3, [pc, #80]	@ (8000f54 <BMP280_measureP+0x588>)
 8000f04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f08:	b21b      	sxth	r3, r3
 8000f0a:	17da      	asrs	r2, r3, #31
 8000f0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000f0e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8000f10:	f04f 0200 	mov.w	r2, #0
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8000f1c:	464c      	mov	r4, r9
 8000f1e:	0123      	lsls	r3, r4, #4
 8000f20:	4644      	mov	r4, r8
 8000f22:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000f26:	4644      	mov	r4, r8
 8000f28:	0122      	lsls	r2, r4, #4
 8000f2a:	1884      	adds	r4, r0, r2
 8000f2c:	603c      	str	r4, [r7, #0]
 8000f2e:	eb41 0303 	adc.w	r3, r1, r3
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000f38:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 8000f3c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8000f46:	46bd      	mov	sp, r7
 8000f48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000f4c:	24000102 	.word	0x24000102
 8000f50:	24000100 	.word	0x24000100
 8000f54:	240000fe 	.word	0x240000fe

08000f58 <BMP280_measureH>:

uint16_t BMP280_measureH(uint32_t Pres, int32_t Temp){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
	double var1, var2, h;

	if(Pres == 0) return 0;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d101      	bne.n	8000f6c <BMP280_measureH+0x14>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	e03d      	b.n	8000fe8 <BMP280_measureH+0x90>
	var1 = -log(((double)Pres)/101325);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	ee07 3a90 	vmov	s15, r3
 8000f72:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000f76:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8000ff0 <BMP280_measureH+0x98>
 8000f7a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000f7e:	eeb0 0b46 	vmov.f64	d0, d6
 8000f82:	f011 f88d 	bl	80120a0 <log>
 8000f86:	eeb0 7b40 	vmov.f64	d7, d0
 8000f8a:	eeb1 7b47 	vneg.f64	d7, d7
 8000f8e:	ed87 7b06 	vstr	d7, [r7, #24]

	if(var1 == 0) return 0;
 8000f92:	ed97 7b06 	vldr	d7, [r7, #24]
 8000f96:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f9e:	d101      	bne.n	8000fa4 <BMP280_measureH+0x4c>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	e021      	b.n	8000fe8 <BMP280_measureH+0x90>
	var2 = 0.0341663/((((double)Temp)/100)+273.15);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	ee07 3a90 	vmov	s15, r3
 8000faa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000fae:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8000ff8 <BMP280_measureH+0xa0>
 8000fb2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fb6:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 8001000 <BMP280_measureH+0xa8>
 8000fba:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000fbe:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8001008 <BMP280_measureH+0xb0>
 8000fc2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000fc6:	ed87 7b04 	vstr	d7, [r7, #16]
	h = var1/var2;
 8000fca:	ed97 5b06 	vldr	d5, [r7, #24]
 8000fce:	ed97 6b04 	vldr	d6, [r7, #16]
 8000fd2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000fd6:	ed87 7b02 	vstr	d7, [r7, #8]
	return (uint16_t)h;
 8000fda:	ed97 7b02 	vldr	d7, [r7, #8]
 8000fde:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fe2:	ee17 3a90 	vmov	r3, s15
 8000fe6:	b29b      	uxth	r3, r3
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3720      	adds	r7, #32
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	00000000 	.word	0x00000000
 8000ff4:	40f8bcd0 	.word	0x40f8bcd0
 8000ff8:	00000000 	.word	0x00000000
 8000ffc:	40590000 	.word	0x40590000
 8001000:	66666666 	.word	0x66666666
 8001004:	40711266 	.word	0x40711266
 8001008:	ca402a92 	.word	0xca402a92
 800100c:	3fa17e3e 	.word	0x3fa17e3e

08001010 <BMP280_init>:

void BMP280_init(void){
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	BMP280_unselect();
 8001014:	2201      	movs	r2, #1
 8001016:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800101a:	480d      	ldr	r0, [pc, #52]	@ (8001050 <BMP280_init+0x40>)
 800101c:	f005 fe44 	bl	8006ca8 <HAL_GPIO_WritePin>
	BMP280_config();
 8001020:	f7ff fb8a 	bl	8000738 <BMP280_config>
	BMP280.ID = BMP280_read(0x89);
 8001024:	2089      	movs	r0, #137	@ 0x89
 8001026:	f7ff fb59 	bl	80006dc <BMP280_read>
 800102a:	4603      	mov	r3, r0
 800102c:	461a      	mov	r2, r3
 800102e:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <BMP280_init+0x44>)
 8001030:	701a      	strb	r2, [r3, #0]
	BMP280_calibrationData();
 8001032:	f7ff fb8d 	bl	8000750 <BMP280_calibrationData>
	BMP280_readRawValues();
 8001036:	f7ff fc41 	bl	80008bc <BMP280_readRawValues>
	BMP280.Temp_inicial = BMP280_measureT(T_raw);
 800103a:	4b07      	ldr	r3, [pc, #28]	@ (8001058 <BMP280_init+0x48>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fc80 	bl	8000944 <BMP280_measureT>
 8001044:	4603      	mov	r3, r0
 8001046:	4a03      	ldr	r2, [pc, #12]	@ (8001054 <BMP280_init+0x44>)
 8001048:	6093      	str	r3, [r2, #8]
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	58020400 	.word	0x58020400
 8001054:	240000d8 	.word	0x240000d8
 8001058:	24000104 	.word	0x24000104

0800105c <BMP280_calculate>:

void BMP280_calculate(void){
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	//BMP280.ID = 0;
	BMP280.ID = BMP280_read(0x89);
 8001060:	2089      	movs	r0, #137	@ 0x89
 8001062:	f7ff fb3b 	bl	80006dc <BMP280_read>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	4b16      	ldr	r3, [pc, #88]	@ (80010c4 <BMP280_calculate+0x68>)
 800106c:	701a      	strb	r2, [r3, #0]
	BMP280_readRawValues();
 800106e:	f7ff fc25 	bl	80008bc <BMP280_readRawValues>
	BMP280.Temp = BMP280_measureT(T_raw);
 8001072:	4b15      	ldr	r3, [pc, #84]	@ (80010c8 <BMP280_calculate+0x6c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fc64 	bl	8000944 <BMP280_measureT>
 800107c:	4603      	mov	r3, r0
 800107e:	4a11      	ldr	r2, [pc, #68]	@ (80010c4 <BMP280_calculate+0x68>)
 8001080:	6053      	str	r3, [r2, #4]
	BMP280.Pressure    		= BMP280_measureP(P_raw)/256;
 8001082:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <BMP280_calculate+0x70>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fca0 	bl	80009cc <BMP280_measureP>
 800108c:	4603      	mov	r3, r0
 800108e:	0a1b      	lsrs	r3, r3, #8
 8001090:	4a0c      	ldr	r2, [pc, #48]	@ (80010c4 <BMP280_calculate+0x68>)
 8001092:	60d3      	str	r3, [r2, #12]
	BMP280.Barometric_Altitude = BMP280_measureH(BMP280.Pressure, BMP280.Temp_inicial);
 8001094:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <BMP280_calculate+0x68>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	4a0a      	ldr	r2, [pc, #40]	@ (80010c4 <BMP280_calculate+0x68>)
 800109a:	6892      	ldr	r2, [r2, #8]
 800109c:	4611      	mov	r1, r2
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff5a 	bl	8000f58 <BMP280_measureH>
 80010a4:	4603      	mov	r3, r0
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <BMP280_calculate+0x68>)
 80010aa:	821a      	strh	r2, [r3, #16]

	if(BMP280.Barometric_Altitude > BMP280.Max_Altitude) BMP280.Max_Altitude = BMP280.Barometric_Altitude;
 80010ac:	4b05      	ldr	r3, [pc, #20]	@ (80010c4 <BMP280_calculate+0x68>)
 80010ae:	8a1a      	ldrh	r2, [r3, #16]
 80010b0:	4b04      	ldr	r3, [pc, #16]	@ (80010c4 <BMP280_calculate+0x68>)
 80010b2:	8a5b      	ldrh	r3, [r3, #18]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d903      	bls.n	80010c0 <BMP280_calculate+0x64>
 80010b8:	4b02      	ldr	r3, [pc, #8]	@ (80010c4 <BMP280_calculate+0x68>)
 80010ba:	8a1a      	ldrh	r2, [r3, #16]
 80010bc:	4b01      	ldr	r3, [pc, #4]	@ (80010c4 <BMP280_calculate+0x68>)
 80010be:	825a      	strh	r2, [r3, #18]
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	240000d8 	.word	0x240000d8
 80010c8:	24000104 	.word	0x24000104
 80010cc:	24000108 	.word	0x24000108

080010d0 <PWM_Assing>:
		.Canal_8  = 1500,
		.Canal_9  = 1500,
		.Canal_10 = 1500,
};

void PWM_Assing(void){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	TIM2->CCR1 = PWM_Output.Canal_1;
 80010d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001180 <PWM_Assing+0xb0>)
 80010d6:	881a      	ldrh	r2, [r3, #0]
 80010d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010dc:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2->CCR2 = PWM_Output.Canal_2;
 80010de:	4b28      	ldr	r3, [pc, #160]	@ (8001180 <PWM_Assing+0xb0>)
 80010e0:	885a      	ldrh	r2, [r3, #2]
 80010e2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010e6:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM3->CCR1 = PWM_Output.Canal_3;
 80010e8:	4b25      	ldr	r3, [pc, #148]	@ (8001180 <PWM_Assing+0xb0>)
 80010ea:	889a      	ldrh	r2, [r3, #4]
 80010ec:	4b25      	ldr	r3, [pc, #148]	@ (8001184 <PWM_Assing+0xb4>)
 80010ee:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = PWM_Output.Canal_4;
 80010f0:	4b23      	ldr	r3, [pc, #140]	@ (8001180 <PWM_Assing+0xb0>)
 80010f2:	88da      	ldrh	r2, [r3, #6]
 80010f4:	4b23      	ldr	r3, [pc, #140]	@ (8001184 <PWM_Assing+0xb4>)
 80010f6:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM4->CCR1 = PWM_Output.Canal_5;
 80010f8:	4b21      	ldr	r3, [pc, #132]	@ (8001180 <PWM_Assing+0xb0>)
 80010fa:	891a      	ldrh	r2, [r3, #8]
 80010fc:	4b22      	ldr	r3, [pc, #136]	@ (8001188 <PWM_Assing+0xb8>)
 80010fe:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM4->CCR2 = PWM_Output.Canal_6;
 8001100:	4b1f      	ldr	r3, [pc, #124]	@ (8001180 <PWM_Assing+0xb0>)
 8001102:	895a      	ldrh	r2, [r3, #10]
 8001104:	4b20      	ldr	r3, [pc, #128]	@ (8001188 <PWM_Assing+0xb8>)
 8001106:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM4->CCR3 = PWM_Output.Canal_7;
 8001108:	4b1d      	ldr	r3, [pc, #116]	@ (8001180 <PWM_Assing+0xb0>)
 800110a:	899a      	ldrh	r2, [r3, #12]
 800110c:	4b1e      	ldr	r3, [pc, #120]	@ (8001188 <PWM_Assing+0xb8>)
 800110e:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM4->CCR4 = PWM_Output.Canal_8;
 8001110:	4b1b      	ldr	r3, [pc, #108]	@ (8001180 <PWM_Assing+0xb0>)
 8001112:	89da      	ldrh	r2, [r3, #14]
 8001114:	4b1c      	ldr	r3, [pc, #112]	@ (8001188 <PWM_Assing+0xb8>)
 8001116:	641a      	str	r2, [r3, #64]	@ 0x40

	TIM2->CCR4 = PWM_Output.Canal_9;
 8001118:	4b19      	ldr	r3, [pc, #100]	@ (8001180 <PWM_Assing+0xb0>)
 800111a:	8a1a      	ldrh	r2, [r3, #16]
 800111c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001120:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM2->CCR3 = PWM_Output.Canal_10;
 8001122:	4b17      	ldr	r3, [pc, #92]	@ (8001180 <PWM_Assing+0xb0>)
 8001124:	8a5a      	ldrh	r2, [r3, #18]
 8001126:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800112a:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800112c:	2100      	movs	r1, #0
 800112e:	4817      	ldr	r0, [pc, #92]	@ (800118c <PWM_Assing+0xbc>)
 8001130:	f009 ff36 	bl	800afa0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001134:	2104      	movs	r1, #4
 8001136:	4815      	ldr	r0, [pc, #84]	@ (800118c <PWM_Assing+0xbc>)
 8001138:	f009 ff32 	bl	800afa0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800113c:	2108      	movs	r1, #8
 800113e:	4813      	ldr	r0, [pc, #76]	@ (800118c <PWM_Assing+0xbc>)
 8001140:	f009 ff2e 	bl	800afa0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001144:	210c      	movs	r1, #12
 8001146:	4811      	ldr	r0, [pc, #68]	@ (800118c <PWM_Assing+0xbc>)
 8001148:	f009 ff2a 	bl	800afa0 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800114c:	2100      	movs	r1, #0
 800114e:	4810      	ldr	r0, [pc, #64]	@ (8001190 <PWM_Assing+0xc0>)
 8001150:	f009 ff26 	bl	800afa0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001154:	2104      	movs	r1, #4
 8001156:	480e      	ldr	r0, [pc, #56]	@ (8001190 <PWM_Assing+0xc0>)
 8001158:	f009 ff22 	bl	800afa0 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800115c:	2100      	movs	r1, #0
 800115e:	480d      	ldr	r0, [pc, #52]	@ (8001194 <PWM_Assing+0xc4>)
 8001160:	f009 ff1e 	bl	800afa0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001164:	2104      	movs	r1, #4
 8001166:	480b      	ldr	r0, [pc, #44]	@ (8001194 <PWM_Assing+0xc4>)
 8001168:	f009 ff1a 	bl	800afa0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800116c:	2108      	movs	r1, #8
 800116e:	4809      	ldr	r0, [pc, #36]	@ (8001194 <PWM_Assing+0xc4>)
 8001170:	f009 ff16 	bl	800afa0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001174:	210c      	movs	r1, #12
 8001176:	4807      	ldr	r0, [pc, #28]	@ (8001194 <PWM_Assing+0xc4>)
 8001178:	f009 ff12 	bl	800afa0 <HAL_TIM_PWM_Start>
}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}
 8001180:	24000000 	.word	0x24000000
 8001184:	40000400 	.word	0x40000400
 8001188:	40000800 	.word	0x40000800
 800118c:	24002428 	.word	0x24002428
 8001190:	24002474 	.word	0x24002474
 8001194:	240024c0 	.word	0x240024c0

08001198 <SBUS_init>:

extern UART_HandleTypeDef huart1;
#define SBUS_UART_handler &huart1


void SBUS_init(void){
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(SBUS_UART_handler, &SBUS_RxBuffer, 1);
 800119c:	2201      	movs	r2, #1
 800119e:	4903      	ldr	r1, [pc, #12]	@ (80011ac <SBUS_init+0x14>)
 80011a0:	4803      	ldr	r0, [pc, #12]	@ (80011b0 <SBUS_init+0x18>)
 80011a2:	f00a fd9f 	bl	800bce4 <HAL_UART_Receive_DMA>

}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	24000129 	.word	0x24000129
 80011b0:	240025ec 	.word	0x240025ec

080011b4 <SBUS_Receive>:

void SBUS_Receive(uint8_t SBUS_RxBuffer){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
	static uint8_t Actual_status = 0;
	static uint8_t RxCount;

	switch (Actual_status) {
 80011be:	4b20      	ldr	r3, [pc, #128]	@ (8001240 <SBUS_Receive+0x8c>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d002      	beq.n	80011cc <SBUS_Receive+0x18>
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d017      	beq.n	80011fa <SBUS_Receive+0x46>
 80011ca:	e02f      	b.n	800122c <SBUS_Receive+0x78>
		case 0:
			if(SBUS_RxBuffer == 0x0F){
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	2b0f      	cmp	r3, #15
 80011d0:	d10f      	bne.n	80011f2 <SBUS_Receive+0x3e>
				SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 80011d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001244 <SBUS_Receive+0x90>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	4619      	mov	r1, r3
 80011d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001248 <SBUS_Receive+0x94>)
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	5453      	strb	r3, [r2, r1]
				Actual_status = 1;
 80011de:	4b18      	ldr	r3, [pc, #96]	@ (8001240 <SBUS_Receive+0x8c>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	701a      	strb	r2, [r3, #0]
				RxCount++;
 80011e4:	4b17      	ldr	r3, [pc, #92]	@ (8001244 <SBUS_Receive+0x90>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	3301      	adds	r3, #1
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	4b15      	ldr	r3, [pc, #84]	@ (8001244 <SBUS_Receive+0x90>)
 80011ee:	701a      	strb	r2, [r3, #0]
			}
			else{
				RxCount = 0;
			}
			break;
 80011f0:	e021      	b.n	8001236 <SBUS_Receive+0x82>
				RxCount = 0;
 80011f2:	4b14      	ldr	r3, [pc, #80]	@ (8001244 <SBUS_Receive+0x90>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	701a      	strb	r2, [r3, #0]
			break;
 80011f8:	e01d      	b.n	8001236 <SBUS_Receive+0x82>
		case 1:
			SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 80011fa:	4b12      	ldr	r3, [pc, #72]	@ (8001244 <SBUS_Receive+0x90>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	4619      	mov	r1, r3
 8001200:	4a11      	ldr	r2, [pc, #68]	@ (8001248 <SBUS_Receive+0x94>)
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	5453      	strb	r3, [r2, r1]
			RxCount++;
 8001206:	4b0f      	ldr	r3, [pc, #60]	@ (8001244 <SBUS_Receive+0x90>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	3301      	adds	r3, #1
 800120c:	b2da      	uxtb	r2, r3
 800120e:	4b0d      	ldr	r3, [pc, #52]	@ (8001244 <SBUS_Receive+0x90>)
 8001210:	701a      	strb	r2, [r3, #0]
			if(RxCount == 24){
 8001212:	4b0c      	ldr	r3, [pc, #48]	@ (8001244 <SBUS_Receive+0x90>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b18      	cmp	r3, #24
 8001218:	d10c      	bne.n	8001234 <SBUS_Receive+0x80>
				RxCount = 0;
 800121a:	4b0a      	ldr	r3, [pc, #40]	@ (8001244 <SBUS_Receive+0x90>)
 800121c:	2200      	movs	r2, #0
 800121e:	701a      	strb	r2, [r3, #0]
				Actual_status = 0;
 8001220:	4b07      	ldr	r3, [pc, #28]	@ (8001240 <SBUS_Receive+0x8c>)
 8001222:	2200      	movs	r2, #0
 8001224:	701a      	strb	r2, [r3, #0]
				SBUS_getData();
 8001226:	f000 f843 	bl	80012b0 <SBUS_getData>
			}
			break;
 800122a:	e003      	b.n	8001234 <SBUS_Receive+0x80>
		default:
			Actual_status = 0;
 800122c:	4b04      	ldr	r3, [pc, #16]	@ (8001240 <SBUS_Receive+0x8c>)
 800122e:	2200      	movs	r2, #0
 8001230:	701a      	strb	r2, [r3, #0]
			break;
 8001232:	e000      	b.n	8001236 <SBUS_Receive+0x82>
			break;
 8001234:	bf00      	nop
	}
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	2400012a 	.word	0x2400012a
 8001244:	2400012b 	.word	0x2400012b
 8001248:	24000110 	.word	0x24000110

0800124c <Temp_BypassFunct>:

void Temp_BypassFunct (void){
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
	PWM_Output.Canal_1 = Radio_input.Canal_1;
 8001250:	4b15      	ldr	r3, [pc, #84]	@ (80012a8 <Temp_BypassFunct+0x5c>)
 8001252:	881a      	ldrh	r2, [r3, #0]
 8001254:	4b15      	ldr	r3, [pc, #84]	@ (80012ac <Temp_BypassFunct+0x60>)
 8001256:	801a      	strh	r2, [r3, #0]
	PWM_Output.Canal_2 = Radio_input.Canal_2;
 8001258:	4b13      	ldr	r3, [pc, #76]	@ (80012a8 <Temp_BypassFunct+0x5c>)
 800125a:	885a      	ldrh	r2, [r3, #2]
 800125c:	4b13      	ldr	r3, [pc, #76]	@ (80012ac <Temp_BypassFunct+0x60>)
 800125e:	805a      	strh	r2, [r3, #2]
	PWM_Output.Canal_3 = Radio_input.Canal_3;
 8001260:	4b11      	ldr	r3, [pc, #68]	@ (80012a8 <Temp_BypassFunct+0x5c>)
 8001262:	889a      	ldrh	r2, [r3, #4]
 8001264:	4b11      	ldr	r3, [pc, #68]	@ (80012ac <Temp_BypassFunct+0x60>)
 8001266:	809a      	strh	r2, [r3, #4]
	PWM_Output.Canal_4 = Radio_input.Canal_4;
 8001268:	4b0f      	ldr	r3, [pc, #60]	@ (80012a8 <Temp_BypassFunct+0x5c>)
 800126a:	88da      	ldrh	r2, [r3, #6]
 800126c:	4b0f      	ldr	r3, [pc, #60]	@ (80012ac <Temp_BypassFunct+0x60>)
 800126e:	80da      	strh	r2, [r3, #6]
	PWM_Output.Canal_5 = Radio_input.Canal_5;
 8001270:	4b0d      	ldr	r3, [pc, #52]	@ (80012a8 <Temp_BypassFunct+0x5c>)
 8001272:	891a      	ldrh	r2, [r3, #8]
 8001274:	4b0d      	ldr	r3, [pc, #52]	@ (80012ac <Temp_BypassFunct+0x60>)
 8001276:	811a      	strh	r2, [r3, #8]
	PWM_Output.Canal_6 = Radio_input.Canal_6;
 8001278:	4b0b      	ldr	r3, [pc, #44]	@ (80012a8 <Temp_BypassFunct+0x5c>)
 800127a:	895a      	ldrh	r2, [r3, #10]
 800127c:	4b0b      	ldr	r3, [pc, #44]	@ (80012ac <Temp_BypassFunct+0x60>)
 800127e:	815a      	strh	r2, [r3, #10]
	PWM_Output.Canal_7 = Radio_input.Canal_7;
 8001280:	4b09      	ldr	r3, [pc, #36]	@ (80012a8 <Temp_BypassFunct+0x5c>)
 8001282:	899a      	ldrh	r2, [r3, #12]
 8001284:	4b09      	ldr	r3, [pc, #36]	@ (80012ac <Temp_BypassFunct+0x60>)
 8001286:	819a      	strh	r2, [r3, #12]
	PWM_Output.Canal_8 = Radio_input.Canal_8;
 8001288:	4b07      	ldr	r3, [pc, #28]	@ (80012a8 <Temp_BypassFunct+0x5c>)
 800128a:	89da      	ldrh	r2, [r3, #14]
 800128c:	4b07      	ldr	r3, [pc, #28]	@ (80012ac <Temp_BypassFunct+0x60>)
 800128e:	81da      	strh	r2, [r3, #14]
	PWM_Output.Canal_9 = Radio_input.Canal_9;
 8001290:	4b05      	ldr	r3, [pc, #20]	@ (80012a8 <Temp_BypassFunct+0x5c>)
 8001292:	8a1a      	ldrh	r2, [r3, #16]
 8001294:	4b05      	ldr	r3, [pc, #20]	@ (80012ac <Temp_BypassFunct+0x60>)
 8001296:	821a      	strh	r2, [r3, #16]
	PWM_Output.Canal_10 = Radio_input.Canal_10;
 8001298:	4b03      	ldr	r3, [pc, #12]	@ (80012a8 <Temp_BypassFunct+0x5c>)
 800129a:	8a5a      	ldrh	r2, [r3, #18]
 800129c:	4b03      	ldr	r3, [pc, #12]	@ (80012ac <Temp_BypassFunct+0x60>)
 800129e:	825a      	strh	r2, [r3, #18]

	PWM_Assing();
 80012a0:	f7ff ff16 	bl	80010d0 <PWM_Assing>
}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	24000014 	.word	0x24000014
 80012ac:	24000000 	.word	0x24000000

080012b0 <SBUS_getData>:

void SBUS_getData(void){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
	//Se hace el corrimiento de bits para dar la estructura de los 16 canales, donde cada canal esta compuesto por 11 bits
	//pero cada paquete es de 1 byte. Para cada canal se utilizan los 8 bits (O los que correspondan) de el byte 1
	//(O el que corresponda) como los bits menos significativos del canal 1, y los tres bits faltantes se toman los 3 bits
	// menos significativos (O los que correspondan) del byte 2 y se colocan como los 3 bits más significativos del canal 1.
	Radio_input.Canal_1 = ((SBUS_UART_Rx[1] | SBUS_UART_Rx[2] << 8) & 0x07FF);
 80012b4:	4b95      	ldr	r3, [pc, #596]	@ (800150c <SBUS_getData+0x25c>)
 80012b6:	785b      	ldrb	r3, [r3, #1]
 80012b8:	b21a      	sxth	r2, r3
 80012ba:	4b94      	ldr	r3, [pc, #592]	@ (800150c <SBUS_getData+0x25c>)
 80012bc:	789b      	ldrb	r3, [r3, #2]
 80012be:	021b      	lsls	r3, r3, #8
 80012c0:	b21b      	sxth	r3, r3
 80012c2:	4313      	orrs	r3, r2
 80012c4:	b21b      	sxth	r3, r3
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	4b90      	ldr	r3, [pc, #576]	@ (8001510 <SBUS_getData+0x260>)
 80012d0:	801a      	strh	r2, [r3, #0]
	Radio_input.Canal_2 = ((SBUS_UART_Rx[2] >> 3 | SBUS_UART_Rx[3] << 5) & 0x07FF);
 80012d2:	4b8e      	ldr	r3, [pc, #568]	@ (800150c <SBUS_getData+0x25c>)
 80012d4:	789b      	ldrb	r3, [r3, #2]
 80012d6:	08db      	lsrs	r3, r3, #3
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	b21a      	sxth	r2, r3
 80012dc:	4b8b      	ldr	r3, [pc, #556]	@ (800150c <SBUS_getData+0x25c>)
 80012de:	78db      	ldrb	r3, [r3, #3]
 80012e0:	015b      	lsls	r3, r3, #5
 80012e2:	b21b      	sxth	r3, r3
 80012e4:	4313      	orrs	r3, r2
 80012e6:	b21b      	sxth	r3, r3
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	4b87      	ldr	r3, [pc, #540]	@ (8001510 <SBUS_getData+0x260>)
 80012f2:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_3 = ((SBUS_UART_Rx[3] >> 6 | SBUS_UART_Rx[4] << 2 | SBUS_UART_Rx[5] << 10) & 0x07FF);
 80012f4:	4b85      	ldr	r3, [pc, #532]	@ (800150c <SBUS_getData+0x25c>)
 80012f6:	78db      	ldrb	r3, [r3, #3]
 80012f8:	099b      	lsrs	r3, r3, #6
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	b21a      	sxth	r2, r3
 80012fe:	4b83      	ldr	r3, [pc, #524]	@ (800150c <SBUS_getData+0x25c>)
 8001300:	791b      	ldrb	r3, [r3, #4]
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	b21b      	sxth	r3, r3
 8001306:	4313      	orrs	r3, r2
 8001308:	b21a      	sxth	r2, r3
 800130a:	4b80      	ldr	r3, [pc, #512]	@ (800150c <SBUS_getData+0x25c>)
 800130c:	795b      	ldrb	r3, [r3, #5]
 800130e:	029b      	lsls	r3, r3, #10
 8001310:	b21b      	sxth	r3, r3
 8001312:	4313      	orrs	r3, r2
 8001314:	b21b      	sxth	r3, r3
 8001316:	b29b      	uxth	r3, r3
 8001318:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800131c:	b29a      	uxth	r2, r3
 800131e:	4b7c      	ldr	r3, [pc, #496]	@ (8001510 <SBUS_getData+0x260>)
 8001320:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_4 = ((SBUS_UART_Rx[5] >> 1 | SBUS_UART_Rx[6] << 7) & 0x07FF);
 8001322:	4b7a      	ldr	r3, [pc, #488]	@ (800150c <SBUS_getData+0x25c>)
 8001324:	795b      	ldrb	r3, [r3, #5]
 8001326:	085b      	lsrs	r3, r3, #1
 8001328:	b2db      	uxtb	r3, r3
 800132a:	b21a      	sxth	r2, r3
 800132c:	4b77      	ldr	r3, [pc, #476]	@ (800150c <SBUS_getData+0x25c>)
 800132e:	799b      	ldrb	r3, [r3, #6]
 8001330:	01db      	lsls	r3, r3, #7
 8001332:	b21b      	sxth	r3, r3
 8001334:	4313      	orrs	r3, r2
 8001336:	b21b      	sxth	r3, r3
 8001338:	b29b      	uxth	r3, r3
 800133a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800133e:	b29a      	uxth	r2, r3
 8001340:	4b73      	ldr	r3, [pc, #460]	@ (8001510 <SBUS_getData+0x260>)
 8001342:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_5 = ((SBUS_UART_Rx[6] >> 4 | SBUS_UART_Rx[7] << 4) & 0x07FF);
 8001344:	4b71      	ldr	r3, [pc, #452]	@ (800150c <SBUS_getData+0x25c>)
 8001346:	799b      	ldrb	r3, [r3, #6]
 8001348:	091b      	lsrs	r3, r3, #4
 800134a:	b2db      	uxtb	r3, r3
 800134c:	b21a      	sxth	r2, r3
 800134e:	4b6f      	ldr	r3, [pc, #444]	@ (800150c <SBUS_getData+0x25c>)
 8001350:	79db      	ldrb	r3, [r3, #7]
 8001352:	011b      	lsls	r3, r3, #4
 8001354:	b21b      	sxth	r3, r3
 8001356:	4313      	orrs	r3, r2
 8001358:	b21b      	sxth	r3, r3
 800135a:	b29b      	uxth	r3, r3
 800135c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001360:	b29a      	uxth	r2, r3
 8001362:	4b6b      	ldr	r3, [pc, #428]	@ (8001510 <SBUS_getData+0x260>)
 8001364:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_6 = ((SBUS_UART_Rx[7] >> 7 | SBUS_UART_Rx[8] << 1 | SBUS_UART_Rx[9] << 9) & 0x07FF);
 8001366:	4b69      	ldr	r3, [pc, #420]	@ (800150c <SBUS_getData+0x25c>)
 8001368:	79db      	ldrb	r3, [r3, #7]
 800136a:	09db      	lsrs	r3, r3, #7
 800136c:	b2db      	uxtb	r3, r3
 800136e:	b21a      	sxth	r2, r3
 8001370:	4b66      	ldr	r3, [pc, #408]	@ (800150c <SBUS_getData+0x25c>)
 8001372:	7a1b      	ldrb	r3, [r3, #8]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	b21b      	sxth	r3, r3
 8001378:	4313      	orrs	r3, r2
 800137a:	b21a      	sxth	r2, r3
 800137c:	4b63      	ldr	r3, [pc, #396]	@ (800150c <SBUS_getData+0x25c>)
 800137e:	7a5b      	ldrb	r3, [r3, #9]
 8001380:	025b      	lsls	r3, r3, #9
 8001382:	b21b      	sxth	r3, r3
 8001384:	4313      	orrs	r3, r2
 8001386:	b21b      	sxth	r3, r3
 8001388:	b29b      	uxth	r3, r3
 800138a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800138e:	b29a      	uxth	r2, r3
 8001390:	4b5f      	ldr	r3, [pc, #380]	@ (8001510 <SBUS_getData+0x260>)
 8001392:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_7 = ((SBUS_UART_Rx[9] >> 2 | SBUS_UART_Rx[10] << 6) & 0x07FF);
 8001394:	4b5d      	ldr	r3, [pc, #372]	@ (800150c <SBUS_getData+0x25c>)
 8001396:	7a5b      	ldrb	r3, [r3, #9]
 8001398:	089b      	lsrs	r3, r3, #2
 800139a:	b2db      	uxtb	r3, r3
 800139c:	b21a      	sxth	r2, r3
 800139e:	4b5b      	ldr	r3, [pc, #364]	@ (800150c <SBUS_getData+0x25c>)
 80013a0:	7a9b      	ldrb	r3, [r3, #10]
 80013a2:	019b      	lsls	r3, r3, #6
 80013a4:	b21b      	sxth	r3, r3
 80013a6:	4313      	orrs	r3, r2
 80013a8:	b21b      	sxth	r3, r3
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	4b57      	ldr	r3, [pc, #348]	@ (8001510 <SBUS_getData+0x260>)
 80013b4:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_8 = ((SBUS_UART_Rx[10] >> 5 | SBUS_UART_Rx[11] << 3) & 0x07FF);
 80013b6:	4b55      	ldr	r3, [pc, #340]	@ (800150c <SBUS_getData+0x25c>)
 80013b8:	7a9b      	ldrb	r3, [r3, #10]
 80013ba:	095b      	lsrs	r3, r3, #5
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	b21a      	sxth	r2, r3
 80013c0:	4b52      	ldr	r3, [pc, #328]	@ (800150c <SBUS_getData+0x25c>)
 80013c2:	7adb      	ldrb	r3, [r3, #11]
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	b21b      	sxth	r3, r3
 80013c8:	4313      	orrs	r3, r2
 80013ca:	b21b      	sxth	r3, r3
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	4b4e      	ldr	r3, [pc, #312]	@ (8001510 <SBUS_getData+0x260>)
 80013d6:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_9 = ((SBUS_UART_Rx[12] | SBUS_UART_Rx[13] << 8) & 0x07FF);
 80013d8:	4b4c      	ldr	r3, [pc, #304]	@ (800150c <SBUS_getData+0x25c>)
 80013da:	7b1b      	ldrb	r3, [r3, #12]
 80013dc:	b21a      	sxth	r2, r3
 80013de:	4b4b      	ldr	r3, [pc, #300]	@ (800150c <SBUS_getData+0x25c>)
 80013e0:	7b5b      	ldrb	r3, [r3, #13]
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	b21b      	sxth	r3, r3
 80013e6:	4313      	orrs	r3, r2
 80013e8:	b21b      	sxth	r3, r3
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	4b47      	ldr	r3, [pc, #284]	@ (8001510 <SBUS_getData+0x260>)
 80013f4:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_10 = ((SBUS_UART_Rx[13] >> 3 | SBUS_UART_Rx[14] << 5) & 0x07FF);
 80013f6:	4b45      	ldr	r3, [pc, #276]	@ (800150c <SBUS_getData+0x25c>)
 80013f8:	7b5b      	ldrb	r3, [r3, #13]
 80013fa:	08db      	lsrs	r3, r3, #3
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	b21a      	sxth	r2, r3
 8001400:	4b42      	ldr	r3, [pc, #264]	@ (800150c <SBUS_getData+0x25c>)
 8001402:	7b9b      	ldrb	r3, [r3, #14]
 8001404:	015b      	lsls	r3, r3, #5
 8001406:	b21b      	sxth	r3, r3
 8001408:	4313      	orrs	r3, r2
 800140a:	b21b      	sxth	r3, r3
 800140c:	b29b      	uxth	r3, r3
 800140e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001412:	b29a      	uxth	r2, r3
 8001414:	4b3e      	ldr	r3, [pc, #248]	@ (8001510 <SBUS_getData+0x260>)
 8001416:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_11 = ((SBUS_UART_Rx[14] >> 6 | SBUS_UART_Rx[15] << 2 | SBUS_UART_Rx[16] << 10) & 0x07FF);
 8001418:	4b3c      	ldr	r3, [pc, #240]	@ (800150c <SBUS_getData+0x25c>)
 800141a:	7b9b      	ldrb	r3, [r3, #14]
 800141c:	099b      	lsrs	r3, r3, #6
 800141e:	b2db      	uxtb	r3, r3
 8001420:	b21a      	sxth	r2, r3
 8001422:	4b3a      	ldr	r3, [pc, #232]	@ (800150c <SBUS_getData+0x25c>)
 8001424:	7bdb      	ldrb	r3, [r3, #15]
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	b21b      	sxth	r3, r3
 800142a:	4313      	orrs	r3, r2
 800142c:	b21a      	sxth	r2, r3
 800142e:	4b37      	ldr	r3, [pc, #220]	@ (800150c <SBUS_getData+0x25c>)
 8001430:	7c1b      	ldrb	r3, [r3, #16]
 8001432:	029b      	lsls	r3, r3, #10
 8001434:	b21b      	sxth	r3, r3
 8001436:	4313      	orrs	r3, r2
 8001438:	b21b      	sxth	r3, r3
 800143a:	b29b      	uxth	r3, r3
 800143c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001440:	b29a      	uxth	r2, r3
 8001442:	4b33      	ldr	r3, [pc, #204]	@ (8001510 <SBUS_getData+0x260>)
 8001444:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_12 = ((SBUS_UART_Rx[16] >> 1 | SBUS_UART_Rx[17] << 7) & 0x07FF);
 8001446:	4b31      	ldr	r3, [pc, #196]	@ (800150c <SBUS_getData+0x25c>)
 8001448:	7c1b      	ldrb	r3, [r3, #16]
 800144a:	085b      	lsrs	r3, r3, #1
 800144c:	b2db      	uxtb	r3, r3
 800144e:	b21a      	sxth	r2, r3
 8001450:	4b2e      	ldr	r3, [pc, #184]	@ (800150c <SBUS_getData+0x25c>)
 8001452:	7c5b      	ldrb	r3, [r3, #17]
 8001454:	01db      	lsls	r3, r3, #7
 8001456:	b21b      	sxth	r3, r3
 8001458:	4313      	orrs	r3, r2
 800145a:	b21b      	sxth	r3, r3
 800145c:	b29b      	uxth	r3, r3
 800145e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001462:	b29a      	uxth	r2, r3
 8001464:	4b2a      	ldr	r3, [pc, #168]	@ (8001510 <SBUS_getData+0x260>)
 8001466:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_13 = ((SBUS_UART_Rx[17] >> 4 | SBUS_UART_Rx[18] << 4) & 0x07FF);
 8001468:	4b28      	ldr	r3, [pc, #160]	@ (800150c <SBUS_getData+0x25c>)
 800146a:	7c5b      	ldrb	r3, [r3, #17]
 800146c:	091b      	lsrs	r3, r3, #4
 800146e:	b2db      	uxtb	r3, r3
 8001470:	b21a      	sxth	r2, r3
 8001472:	4b26      	ldr	r3, [pc, #152]	@ (800150c <SBUS_getData+0x25c>)
 8001474:	7c9b      	ldrb	r3, [r3, #18]
 8001476:	011b      	lsls	r3, r3, #4
 8001478:	b21b      	sxth	r3, r3
 800147a:	4313      	orrs	r3, r2
 800147c:	b21b      	sxth	r3, r3
 800147e:	b29b      	uxth	r3, r3
 8001480:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001484:	b29a      	uxth	r2, r3
 8001486:	4b22      	ldr	r3, [pc, #136]	@ (8001510 <SBUS_getData+0x260>)
 8001488:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_14 = ((SBUS_UART_Rx[18] >> 7 | SBUS_UART_Rx[19] << 1 | SBUS_UART_Rx[20] << 9) & 0x07FF);
 800148a:	4b20      	ldr	r3, [pc, #128]	@ (800150c <SBUS_getData+0x25c>)
 800148c:	7c9b      	ldrb	r3, [r3, #18]
 800148e:	09db      	lsrs	r3, r3, #7
 8001490:	b2db      	uxtb	r3, r3
 8001492:	b21a      	sxth	r2, r3
 8001494:	4b1d      	ldr	r3, [pc, #116]	@ (800150c <SBUS_getData+0x25c>)
 8001496:	7cdb      	ldrb	r3, [r3, #19]
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	b21b      	sxth	r3, r3
 800149c:	4313      	orrs	r3, r2
 800149e:	b21a      	sxth	r2, r3
 80014a0:	4b1a      	ldr	r3, [pc, #104]	@ (800150c <SBUS_getData+0x25c>)
 80014a2:	7d1b      	ldrb	r3, [r3, #20]
 80014a4:	025b      	lsls	r3, r3, #9
 80014a6:	b21b      	sxth	r3, r3
 80014a8:	4313      	orrs	r3, r2
 80014aa:	b21b      	sxth	r3, r3
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	4b16      	ldr	r3, [pc, #88]	@ (8001510 <SBUS_getData+0x260>)
 80014b6:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_15 = ((SBUS_UART_Rx[20] >> 2 | SBUS_UART_Rx[21] << 6) & 0x07FF);
 80014b8:	4b14      	ldr	r3, [pc, #80]	@ (800150c <SBUS_getData+0x25c>)
 80014ba:	7d1b      	ldrb	r3, [r3, #20]
 80014bc:	089b      	lsrs	r3, r3, #2
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	b21a      	sxth	r2, r3
 80014c2:	4b12      	ldr	r3, [pc, #72]	@ (800150c <SBUS_getData+0x25c>)
 80014c4:	7d5b      	ldrb	r3, [r3, #21]
 80014c6:	019b      	lsls	r3, r3, #6
 80014c8:	b21b      	sxth	r3, r3
 80014ca:	4313      	orrs	r3, r2
 80014cc:	b21b      	sxth	r3, r3
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001510 <SBUS_getData+0x260>)
 80014d8:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_16 = ((SBUS_UART_Rx[21] >> 5 | SBUS_UART_Rx[22] << 3) & 0x07FF);
 80014da:	4b0c      	ldr	r3, [pc, #48]	@ (800150c <SBUS_getData+0x25c>)
 80014dc:	7d5b      	ldrb	r3, [r3, #21]
 80014de:	095b      	lsrs	r3, r3, #5
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	b21a      	sxth	r2, r3
 80014e4:	4b09      	ldr	r3, [pc, #36]	@ (800150c <SBUS_getData+0x25c>)
 80014e6:	7d9b      	ldrb	r3, [r3, #22]
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	b21b      	sxth	r3, r3
 80014ec:	4313      	orrs	r3, r2
 80014ee:	b21b      	sxth	r3, r3
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	4b05      	ldr	r3, [pc, #20]	@ (8001510 <SBUS_getData+0x260>)
 80014fa:	83da      	strh	r2, [r3, #30]

	Radio_input.Canal_1 = (uint16_t)((((float)Radio_input.Canal_1 - 352) /1344 ) * 1000) + 1000;
 80014fc:	4b04      	ldr	r3, [pc, #16]	@ (8001510 <SBUS_getData+0x260>)
 80014fe:	881b      	ldrh	r3, [r3, #0]
 8001500:	ee07 3a90 	vmov	s15, r3
 8001504:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001508:	e00a      	b.n	8001520 <SBUS_getData+0x270>
 800150a:	bf00      	nop
 800150c:	24000110 	.word	0x24000110
 8001510:	24000014 	.word	0x24000014
 8001514:	43b00000 	.word	0x43b00000
 8001518:	44a80000 	.word	0x44a80000
 800151c:	447a0000 	.word	0x447a0000
 8001520:	ed1f 7a04 	vldr	s14, [pc, #-16]	@ 8001514 <SBUS_getData+0x264>
 8001524:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001528:	ed5f 6a05 	vldr	s13, [pc, #-20]	@ 8001518 <SBUS_getData+0x268>
 800152c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001530:	ed1f 7a06 	vldr	s14, [pc, #-24]	@ 800151c <SBUS_getData+0x26c>
 8001534:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001538:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800153c:	ee17 3a90 	vmov	r3, s15
 8001540:	b29b      	uxth	r3, r3
 8001542:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001546:	b29a      	uxth	r2, r3
 8001548:	4bd1      	ldr	r3, [pc, #836]	@ (8001890 <SBUS_getData+0x5e0>)
 800154a:	801a      	strh	r2, [r3, #0]
	Radio_input.Canal_2 = (uint16_t)((((float)Radio_input.Canal_2 - 352) /1344 ) * 1000) + 1000;
 800154c:	4bd0      	ldr	r3, [pc, #832]	@ (8001890 <SBUS_getData+0x5e0>)
 800154e:	885b      	ldrh	r3, [r3, #2]
 8001550:	ee07 3a90 	vmov	s15, r3
 8001554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001558:	ed9f 7ace 	vldr	s14, [pc, #824]	@ 8001894 <SBUS_getData+0x5e4>
 800155c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001560:	eddf 6acd 	vldr	s13, [pc, #820]	@ 8001898 <SBUS_getData+0x5e8>
 8001564:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001568:	ed9f 7acc 	vldr	s14, [pc, #816]	@ 800189c <SBUS_getData+0x5ec>
 800156c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001570:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001574:	ee17 3a90 	vmov	r3, s15
 8001578:	b29b      	uxth	r3, r3
 800157a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800157e:	b29a      	uxth	r2, r3
 8001580:	4bc3      	ldr	r3, [pc, #780]	@ (8001890 <SBUS_getData+0x5e0>)
 8001582:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_3 = (uint16_t)((((float)Radio_input.Canal_3 - 352) /1344 ) * 1000) + 1000;
 8001584:	4bc2      	ldr	r3, [pc, #776]	@ (8001890 <SBUS_getData+0x5e0>)
 8001586:	889b      	ldrh	r3, [r3, #4]
 8001588:	ee07 3a90 	vmov	s15, r3
 800158c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001590:	ed9f 7ac0 	vldr	s14, [pc, #768]	@ 8001894 <SBUS_getData+0x5e4>
 8001594:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001598:	eddf 6abf 	vldr	s13, [pc, #764]	@ 8001898 <SBUS_getData+0x5e8>
 800159c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015a0:	ed9f 7abe 	vldr	s14, [pc, #760]	@ 800189c <SBUS_getData+0x5ec>
 80015a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015ac:	ee17 3a90 	vmov	r3, s15
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	4bb5      	ldr	r3, [pc, #724]	@ (8001890 <SBUS_getData+0x5e0>)
 80015ba:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_4 = (uint16_t)((((float)Radio_input.Canal_4 - 352) /1344 ) * 1000) + 1000;
 80015bc:	4bb4      	ldr	r3, [pc, #720]	@ (8001890 <SBUS_getData+0x5e0>)
 80015be:	88db      	ldrh	r3, [r3, #6]
 80015c0:	ee07 3a90 	vmov	s15, r3
 80015c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015c8:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 8001894 <SBUS_getData+0x5e4>
 80015cc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80015d0:	eddf 6ab1 	vldr	s13, [pc, #708]	@ 8001898 <SBUS_getData+0x5e8>
 80015d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015d8:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 800189c <SBUS_getData+0x5ec>
 80015dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015e4:	ee17 3a90 	vmov	r3, s15
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	4ba7      	ldr	r3, [pc, #668]	@ (8001890 <SBUS_getData+0x5e0>)
 80015f2:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_5 = (uint16_t)((((float)Radio_input.Canal_5 - 352) /1344 ) * 1000) + 1000;
 80015f4:	4ba6      	ldr	r3, [pc, #664]	@ (8001890 <SBUS_getData+0x5e0>)
 80015f6:	891b      	ldrh	r3, [r3, #8]
 80015f8:	ee07 3a90 	vmov	s15, r3
 80015fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001600:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 8001894 <SBUS_getData+0x5e4>
 8001604:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001608:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8001898 <SBUS_getData+0x5e8>
 800160c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001610:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 800189c <SBUS_getData+0x5ec>
 8001614:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001618:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800161c:	ee17 3a90 	vmov	r3, s15
 8001620:	b29b      	uxth	r3, r3
 8001622:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001626:	b29a      	uxth	r2, r3
 8001628:	4b99      	ldr	r3, [pc, #612]	@ (8001890 <SBUS_getData+0x5e0>)
 800162a:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_6 = (uint16_t)((((float)Radio_input.Canal_6 - 352) /1344 ) * 1000) + 1000;
 800162c:	4b98      	ldr	r3, [pc, #608]	@ (8001890 <SBUS_getData+0x5e0>)
 800162e:	895b      	ldrh	r3, [r3, #10]
 8001630:	ee07 3a90 	vmov	s15, r3
 8001634:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001638:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8001894 <SBUS_getData+0x5e4>
 800163c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001640:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8001898 <SBUS_getData+0x5e8>
 8001644:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001648:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 800189c <SBUS_getData+0x5ec>
 800164c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001650:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001654:	ee17 3a90 	vmov	r3, s15
 8001658:	b29b      	uxth	r3, r3
 800165a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800165e:	b29a      	uxth	r2, r3
 8001660:	4b8b      	ldr	r3, [pc, #556]	@ (8001890 <SBUS_getData+0x5e0>)
 8001662:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_7 = (uint16_t)((((float)Radio_input.Canal_7 - 352) /1344 ) * 1000) + 1000;
 8001664:	4b8a      	ldr	r3, [pc, #552]	@ (8001890 <SBUS_getData+0x5e0>)
 8001666:	899b      	ldrh	r3, [r3, #12]
 8001668:	ee07 3a90 	vmov	s15, r3
 800166c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001670:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8001894 <SBUS_getData+0x5e4>
 8001674:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001678:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8001898 <SBUS_getData+0x5e8>
 800167c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001680:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 800189c <SBUS_getData+0x5ec>
 8001684:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001688:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800168c:	ee17 3a90 	vmov	r3, s15
 8001690:	b29b      	uxth	r3, r3
 8001692:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001696:	b29a      	uxth	r2, r3
 8001698:	4b7d      	ldr	r3, [pc, #500]	@ (8001890 <SBUS_getData+0x5e0>)
 800169a:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_8 = (uint16_t)((((float)Radio_input.Canal_8 - 352) /1344 ) * 1000) + 1000;
 800169c:	4b7c      	ldr	r3, [pc, #496]	@ (8001890 <SBUS_getData+0x5e0>)
 800169e:	89db      	ldrh	r3, [r3, #14]
 80016a0:	ee07 3a90 	vmov	s15, r3
 80016a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016a8:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8001894 <SBUS_getData+0x5e4>
 80016ac:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80016b0:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8001898 <SBUS_getData+0x5e8>
 80016b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016b8:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 800189c <SBUS_getData+0x5ec>
 80016bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016c4:	ee17 3a90 	vmov	r3, s15
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	4b6f      	ldr	r3, [pc, #444]	@ (8001890 <SBUS_getData+0x5e0>)
 80016d2:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_9 = (uint16_t)((((float)Radio_input.Canal_9 - 352) /1344 ) * 1000) + 1000;
 80016d4:	4b6e      	ldr	r3, [pc, #440]	@ (8001890 <SBUS_getData+0x5e0>)
 80016d6:	8a1b      	ldrh	r3, [r3, #16]
 80016d8:	ee07 3a90 	vmov	s15, r3
 80016dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016e0:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8001894 <SBUS_getData+0x5e4>
 80016e4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80016e8:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8001898 <SBUS_getData+0x5e8>
 80016ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016f0:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 800189c <SBUS_getData+0x5ec>
 80016f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016fc:	ee17 3a90 	vmov	r3, s15
 8001700:	b29b      	uxth	r3, r3
 8001702:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001706:	b29a      	uxth	r2, r3
 8001708:	4b61      	ldr	r3, [pc, #388]	@ (8001890 <SBUS_getData+0x5e0>)
 800170a:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_10 = (uint16_t)((((float)Radio_input.Canal_10 - 352) /1344 ) * 1000) + 1000;
 800170c:	4b60      	ldr	r3, [pc, #384]	@ (8001890 <SBUS_getData+0x5e0>)
 800170e:	8a5b      	ldrh	r3, [r3, #18]
 8001710:	ee07 3a90 	vmov	s15, r3
 8001714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001718:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8001894 <SBUS_getData+0x5e4>
 800171c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001720:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8001898 <SBUS_getData+0x5e8>
 8001724:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001728:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 800189c <SBUS_getData+0x5ec>
 800172c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001730:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001734:	ee17 3a90 	vmov	r3, s15
 8001738:	b29b      	uxth	r3, r3
 800173a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800173e:	b29a      	uxth	r2, r3
 8001740:	4b53      	ldr	r3, [pc, #332]	@ (8001890 <SBUS_getData+0x5e0>)
 8001742:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_11 = (uint16_t)((((float)Radio_input.Canal_11 - 352) /1344 ) * 1000) + 1000;
 8001744:	4b52      	ldr	r3, [pc, #328]	@ (8001890 <SBUS_getData+0x5e0>)
 8001746:	8a9b      	ldrh	r3, [r3, #20]
 8001748:	ee07 3a90 	vmov	s15, r3
 800174c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001750:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8001894 <SBUS_getData+0x5e4>
 8001754:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001758:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8001898 <SBUS_getData+0x5e8>
 800175c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001760:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 800189c <SBUS_getData+0x5ec>
 8001764:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001768:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800176c:	ee17 3a90 	vmov	r3, s15
 8001770:	b29b      	uxth	r3, r3
 8001772:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001776:	b29a      	uxth	r2, r3
 8001778:	4b45      	ldr	r3, [pc, #276]	@ (8001890 <SBUS_getData+0x5e0>)
 800177a:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_12 = (uint16_t)((((float)Radio_input.Canal_12 - 352) /1344 ) * 1000) + 1000;
 800177c:	4b44      	ldr	r3, [pc, #272]	@ (8001890 <SBUS_getData+0x5e0>)
 800177e:	8adb      	ldrh	r3, [r3, #22]
 8001780:	ee07 3a90 	vmov	s15, r3
 8001784:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001788:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8001894 <SBUS_getData+0x5e4>
 800178c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001790:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8001898 <SBUS_getData+0x5e8>
 8001794:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001798:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 800189c <SBUS_getData+0x5ec>
 800179c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017a4:	ee17 3a90 	vmov	r3, s15
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	4b37      	ldr	r3, [pc, #220]	@ (8001890 <SBUS_getData+0x5e0>)
 80017b2:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_13 = (uint16_t)((((float)Radio_input.Canal_13 - 352) /1344 ) * 1000) + 1000;
 80017b4:	4b36      	ldr	r3, [pc, #216]	@ (8001890 <SBUS_getData+0x5e0>)
 80017b6:	8b1b      	ldrh	r3, [r3, #24]
 80017b8:	ee07 3a90 	vmov	s15, r3
 80017bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017c0:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001894 <SBUS_getData+0x5e4>
 80017c4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80017c8:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8001898 <SBUS_getData+0x5e8>
 80017cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017d0:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800189c <SBUS_getData+0x5ec>
 80017d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017dc:	ee17 3a90 	vmov	r3, s15
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	4b29      	ldr	r3, [pc, #164]	@ (8001890 <SBUS_getData+0x5e0>)
 80017ea:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_14 = (uint16_t)((((float)Radio_input.Canal_14 - 352) /1344 ) * 1000) + 1000;
 80017ec:	4b28      	ldr	r3, [pc, #160]	@ (8001890 <SBUS_getData+0x5e0>)
 80017ee:	8b5b      	ldrh	r3, [r3, #26]
 80017f0:	ee07 3a90 	vmov	s15, r3
 80017f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017f8:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001894 <SBUS_getData+0x5e4>
 80017fc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001800:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8001898 <SBUS_getData+0x5e8>
 8001804:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001808:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 800189c <SBUS_getData+0x5ec>
 800180c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001810:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001814:	ee17 3a90 	vmov	r3, s15
 8001818:	b29b      	uxth	r3, r3
 800181a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800181e:	b29a      	uxth	r2, r3
 8001820:	4b1b      	ldr	r3, [pc, #108]	@ (8001890 <SBUS_getData+0x5e0>)
 8001822:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_15 = (uint16_t)((((float)Radio_input.Canal_15 - 352) /1344 ) * 1000) + 1000;
 8001824:	4b1a      	ldr	r3, [pc, #104]	@ (8001890 <SBUS_getData+0x5e0>)
 8001826:	8b9b      	ldrh	r3, [r3, #28]
 8001828:	ee07 3a90 	vmov	s15, r3
 800182c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001830:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001894 <SBUS_getData+0x5e4>
 8001834:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001838:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8001898 <SBUS_getData+0x5e8>
 800183c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001840:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800189c <SBUS_getData+0x5ec>
 8001844:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001848:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800184c:	ee17 3a90 	vmov	r3, s15
 8001850:	b29b      	uxth	r3, r3
 8001852:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001856:	b29a      	uxth	r2, r3
 8001858:	4b0d      	ldr	r3, [pc, #52]	@ (8001890 <SBUS_getData+0x5e0>)
 800185a:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_16 = (uint16_t)((((float)Radio_input.Canal_16 - 352) /1344 ) * 1000) + 1000;
 800185c:	4b0c      	ldr	r3, [pc, #48]	@ (8001890 <SBUS_getData+0x5e0>)
 800185e:	8bdb      	ldrh	r3, [r3, #30]
 8001860:	ee07 3a90 	vmov	s15, r3
 8001864:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001868:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001894 <SBUS_getData+0x5e4>
 800186c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001870:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8001898 <SBUS_getData+0x5e8>
 8001874:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001878:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800189c <SBUS_getData+0x5ec>
 800187c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001880:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001884:	ee17 3a90 	vmov	r3, s15
 8001888:	b29b      	uxth	r3, r3
 800188a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800188e:	e007      	b.n	80018a0 <SBUS_getData+0x5f0>
 8001890:	24000014 	.word	0x24000014
 8001894:	43b00000 	.word	0x43b00000
 8001898:	44a80000 	.word	0x44a80000
 800189c:	447a0000 	.word	0x447a0000
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	4b22      	ldr	r3, [pc, #136]	@ (800192c <SBUS_getData+0x67c>)
 80018a4:	83da      	strh	r2, [r3, #30]

	//En el caso del byte 24, el primer bit menos significativo corresponde al canal 17, el segundo al canal 18, el tercero a el fail safe y
	//el cuarto a la perdida de paquetes. Los 4 restantes no se utilizan.
	if(SBUS_UART_Rx[23]>=8){
 80018a6:	4b22      	ldr	r3, [pc, #136]	@ (8001930 <SBUS_getData+0x680>)
 80018a8:	7ddb      	ldrb	r3, [r3, #23]
 80018aa:	2b07      	cmp	r3, #7
 80018ac:	d90a      	bls.n	80018c4 <SBUS_getData+0x614>
		SBUS_UART_Rx[23]-=8;
 80018ae:	4b20      	ldr	r3, [pc, #128]	@ (8001930 <SBUS_getData+0x680>)
 80018b0:	7ddb      	ldrb	r3, [r3, #23]
 80018b2:	3b08      	subs	r3, #8
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001930 <SBUS_getData+0x680>)
 80018b8:	75da      	strb	r2, [r3, #23]
		Radio_input.fail_safe = 1;
 80018ba:	4b1c      	ldr	r3, [pc, #112]	@ (800192c <SBUS_getData+0x67c>)
 80018bc:	2201      	movs	r2, #1
 80018be:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 80018c2:	e003      	b.n	80018cc <SBUS_getData+0x61c>
	}else Radio_input.fail_safe= 0;
 80018c4:	4b19      	ldr	r3, [pc, #100]	@ (800192c <SBUS_getData+0x67c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

	if(SBUS_UART_Rx[23]>=4){
 80018cc:	4b18      	ldr	r3, [pc, #96]	@ (8001930 <SBUS_getData+0x680>)
 80018ce:	7ddb      	ldrb	r3, [r3, #23]
 80018d0:	2b03      	cmp	r3, #3
 80018d2:	d90a      	bls.n	80018ea <SBUS_getData+0x63a>
		SBUS_UART_Rx[23]-=4;
 80018d4:	4b16      	ldr	r3, [pc, #88]	@ (8001930 <SBUS_getData+0x680>)
 80018d6:	7ddb      	ldrb	r3, [r3, #23]
 80018d8:	3b04      	subs	r3, #4
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	4b14      	ldr	r3, [pc, #80]	@ (8001930 <SBUS_getData+0x680>)
 80018de:	75da      	strb	r2, [r3, #23]
		Radio_input.pkg_lost = 1;
 80018e0:	4b12      	ldr	r3, [pc, #72]	@ (800192c <SBUS_getData+0x67c>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 80018e8:	e003      	b.n	80018f2 <SBUS_getData+0x642>
	}else Radio_input.pkg_lost=0;
 80018ea:	4b10      	ldr	r3, [pc, #64]	@ (800192c <SBUS_getData+0x67c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

	if(SBUS_UART_Rx[23]>=2){
 80018f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001930 <SBUS_getData+0x680>)
 80018f4:	7ddb      	ldrb	r3, [r3, #23]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d90a      	bls.n	8001910 <SBUS_getData+0x660>
		SBUS_UART_Rx[23]-=2;
 80018fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001930 <SBUS_getData+0x680>)
 80018fc:	7ddb      	ldrb	r3, [r3, #23]
 80018fe:	3b02      	subs	r3, #2
 8001900:	b2da      	uxtb	r2, r3
 8001902:	4b0b      	ldr	r3, [pc, #44]	@ (8001930 <SBUS_getData+0x680>)
 8001904:	75da      	strb	r2, [r3, #23]
		Radio_input.Interruptor_2=1;
 8001906:	4b09      	ldr	r3, [pc, #36]	@ (800192c <SBUS_getData+0x67c>)
 8001908:	2201      	movs	r2, #1
 800190a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 800190e:	e003      	b.n	8001918 <SBUS_getData+0x668>
	}else Radio_input.Interruptor_2=0;
 8001910:	4b06      	ldr	r3, [pc, #24]	@ (800192c <SBUS_getData+0x67c>)
 8001912:	2200      	movs	r2, #0
 8001914:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21


	Radio_input.Interruptor_1=SBUS_UART_Rx[23];
 8001918:	4b05      	ldr	r3, [pc, #20]	@ (8001930 <SBUS_getData+0x680>)
 800191a:	7dda      	ldrb	r2, [r3, #23]
 800191c:	4b03      	ldr	r3, [pc, #12]	@ (800192c <SBUS_getData+0x67c>)
 800191e:	f883 2020 	strb.w	r2, [r3, #32]


	Temp_BypassFunct();
 8001922:	f7ff fc93 	bl	800124c <Temp_BypassFunct>

}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	24000014 	.word	0x24000014
 8001930:	24000110 	.word	0x24000110

08001934 <SD_init>:
UINT br, bw;  // File read/write count

char pahtName[7] = "Data000";
char fileName[] = "FD000.csv";

void SD_init(void){
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
	  fresult = f_mount(&fs, "/", 1);
 8001938:	2201      	movs	r2, #1
 800193a:	4910      	ldr	r1, [pc, #64]	@ (800197c <SD_init+0x48>)
 800193c:	4810      	ldr	r0, [pc, #64]	@ (8001980 <SD_init+0x4c>)
 800193e:	f00f f947 	bl	8010bd0 <f_mount>
 8001942:	4603      	mov	r3, r0
 8001944:	461a      	mov	r2, r3
 8001946:	4b0f      	ldr	r3, [pc, #60]	@ (8001984 <SD_init+0x50>)
 8001948:	701a      	strb	r2, [r3, #0]
	  //Get_NewDir();
	  f_open(&fil, fileName, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800194a:	2213      	movs	r2, #19
 800194c:	490e      	ldr	r1, [pc, #56]	@ (8001988 <SD_init+0x54>)
 800194e:	480f      	ldr	r0, [pc, #60]	@ (800198c <SD_init+0x58>)
 8001950:	f00f f984 	bl	8010c5c <f_open>
	  fresult = f_lseek(&fil , f_size(&fil));
 8001954:	4b0d      	ldr	r3, [pc, #52]	@ (800198c <SD_init+0x58>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	4619      	mov	r1, r3
 800195a:	480c      	ldr	r0, [pc, #48]	@ (800198c <SD_init+0x58>)
 800195c:	f00f fd82 	bl	8011464 <f_lseek>
 8001960:	4603      	mov	r3, r0
 8001962:	461a      	mov	r2, r3
 8001964:	4b07      	ldr	r3, [pc, #28]	@ (8001984 <SD_init+0x50>)
 8001966:	701a      	strb	r2, [r3, #0]
	  f_printf(&fil,"Nmsg,AccX,AccY,AccZ,GyroX,GyroY,GyroZ,AngX,AngY,Alt,Pressure,Temp,Parachute,Peripheral\n");
 8001968:	4909      	ldr	r1, [pc, #36]	@ (8001990 <SD_init+0x5c>)
 800196a:	4808      	ldr	r0, [pc, #32]	@ (800198c <SD_init+0x58>)
 800196c:	f010 f816 	bl	801199c <f_printf>
	  f_close(&fil);
 8001970:	4806      	ldr	r0, [pc, #24]	@ (800198c <SD_init+0x58>)
 8001972:	f00f fd4d 	bl	8011410 <f_close>

	  }
	  else{
		  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, SET);
	  }
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	08012310 	.word	0x08012310
 8001980:	2400012c 	.word	0x2400012c
 8001984:	24002198 	.word	0x24002198
 8001988:	24000038 	.word	0x24000038
 800198c:	24001168 	.word	0x24001168
 8001990:	08012314 	.word	0x08012314

08001994 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800199a:	4b0d      	ldr	r3, [pc, #52]	@ (80019d0 <MX_DMA_Init+0x3c>)
 800199c:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80019a0:	4a0b      	ldr	r2, [pc, #44]	@ (80019d0 <MX_DMA_Init+0x3c>)
 80019a2:	f043 0301 	orr.w	r3, r3, #1
 80019a6:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 80019aa:	4b09      	ldr	r3, [pc, #36]	@ (80019d0 <MX_DMA_Init+0x3c>)
 80019ac:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	607b      	str	r3, [r7, #4]
 80019b6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80019b8:	2200      	movs	r2, #0
 80019ba:	2100      	movs	r1, #0
 80019bc:	200b      	movs	r0, #11
 80019be:	f001 fcd4 	bl	800336a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80019c2:	200b      	movs	r0, #11
 80019c4:	f001 fceb 	bl	800339e <HAL_NVIC_EnableIRQ>

}
 80019c8:	bf00      	nop
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	58024400 	.word	0x58024400

080019d4 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80019d8:	4b2e      	ldr	r3, [pc, #184]	@ (8001a94 <MX_FDCAN1_Init+0xc0>)
 80019da:	4a2f      	ldr	r2, [pc, #188]	@ (8001a98 <MX_FDCAN1_Init+0xc4>)
 80019dc:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80019de:	4b2d      	ldr	r3, [pc, #180]	@ (8001a94 <MX_FDCAN1_Init+0xc0>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80019e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001a94 <MX_FDCAN1_Init+0xc0>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80019ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001a94 <MX_FDCAN1_Init+0xc0>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80019f0:	4b28      	ldr	r3, [pc, #160]	@ (8001a94 <MX_FDCAN1_Init+0xc0>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80019f6:	4b27      	ldr	r3, [pc, #156]	@ (8001a94 <MX_FDCAN1_Init+0xc0>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 80019fc:	4b25      	ldr	r3, [pc, #148]	@ (8001a94 <MX_FDCAN1_Init+0xc0>)
 80019fe:	2210      	movs	r2, #16
 8001a00:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001a02:	4b24      	ldr	r3, [pc, #144]	@ (8001a94 <MX_FDCAN1_Init+0xc0>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001a08:	4b22      	ldr	r3, [pc, #136]	@ (8001a94 <MX_FDCAN1_Init+0xc0>)
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001a0e:	4b21      	ldr	r3, [pc, #132]	@ (8001a94 <MX_FDCAN1_Init+0xc0>)
 8001a10:	2202      	movs	r2, #2
 8001a12:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001a14:	4b1f      	ldr	r3, [pc, #124]	@ (8001a94 <MX_FDCAN1_Init+0xc0>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001a1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001a94 <MX_FDCAN1_Init+0xc0>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001a20:	4b1c      	ldr	r3, [pc, #112]	@ (8001a94 <MX_FDCAN1_Init+0xc0>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001a26:	4b1b      	ldr	r3, [pc, #108]	@ (8001a94 <MX_FDCAN1_Init+0xc0>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001a2c:	4b19      	ldr	r3, [pc, #100]	@ (8001a94 <MX_FDCAN1_Init+0xc0>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8001a32:	4b18      	ldr	r3, [pc, #96]	@ (8001a94 <MX_FDCAN1_Init+0xc0>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001a38:	4b16      	ldr	r3, [pc, #88]	@ (8001a94 <MX_FDCAN1_Init+0xc0>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8001a3e:	4b15      	ldr	r3, [pc, #84]	@ (8001a94 <MX_FDCAN1_Init+0xc0>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001a44:	4b13      	ldr	r3, [pc, #76]	@ (8001a94 <MX_FDCAN1_Init+0xc0>)
 8001a46:	2204      	movs	r2, #4
 8001a48:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001a4a:	4b12      	ldr	r3, [pc, #72]	@ (8001a94 <MX_FDCAN1_Init+0xc0>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001a50:	4b10      	ldr	r3, [pc, #64]	@ (8001a94 <MX_FDCAN1_Init+0xc0>)
 8001a52:	2204      	movs	r2, #4
 8001a54:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001a56:	4b0f      	ldr	r3, [pc, #60]	@ (8001a94 <MX_FDCAN1_Init+0xc0>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001a5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001a94 <MX_FDCAN1_Init+0xc0>)
 8001a5e:	2204      	movs	r2, #4
 8001a60:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001a62:	4b0c      	ldr	r3, [pc, #48]	@ (8001a94 <MX_FDCAN1_Init+0xc0>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001a68:	4b0a      	ldr	r3, [pc, #40]	@ (8001a94 <MX_FDCAN1_Init+0xc0>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8001a6e:	4b09      	ldr	r3, [pc, #36]	@ (8001a94 <MX_FDCAN1_Init+0xc0>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001a74:	4b07      	ldr	r3, [pc, #28]	@ (8001a94 <MX_FDCAN1_Init+0xc0>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001a7a:	4b06      	ldr	r3, [pc, #24]	@ (8001a94 <MX_FDCAN1_Init+0xc0>)
 8001a7c:	2204      	movs	r2, #4
 8001a7e:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001a80:	4804      	ldr	r0, [pc, #16]	@ (8001a94 <MX_FDCAN1_Init+0xc0>)
 8001a82:	f004 fbfd 	bl	8006280 <HAL_FDCAN_Init>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8001a8c:	f000 faec 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001a90:	bf00      	nop
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	2400219c 	.word	0x2400219c
 8001a98:	4000a000 	.word	0x4000a000

08001a9c <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b0ba      	sub	sp, #232	@ 0xe8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ab4:	f107 0310 	add.w	r3, r7, #16
 8001ab8:	22c0      	movs	r2, #192	@ 0xc0
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f010 faad 	bl	801201c <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a2f      	ldr	r2, [pc, #188]	@ (8001b84 <HAL_FDCAN_MspInit+0xe8>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d157      	bne.n	8001b7c <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001acc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001ad0:	f04f 0300 	mov.w	r3, #0
 8001ad4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001ad8:	2304      	movs	r3, #4
 8001ada:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 8;
 8001adc:	2308      	movs	r3, #8
 8001ade:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001aec:	23c0      	movs	r3, #192	@ 0xc0
 8001aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001af0:	2300      	movs	r3, #0
 8001af2:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001af4:	2300      	movs	r3, #0
 8001af6:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8001af8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001afc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b00:	f107 0310 	add.w	r3, r7, #16
 8001b04:	4618      	mov	r0, r3
 8001b06:	f006 fa15 	bl	8007f34 <HAL_RCCEx_PeriphCLKConfig>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 8001b10:	f000 faaa 	bl	8002068 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001b14:	4b1c      	ldr	r3, [pc, #112]	@ (8001b88 <HAL_FDCAN_MspInit+0xec>)
 8001b16:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8001b1a:	4a1b      	ldr	r2, [pc, #108]	@ (8001b88 <HAL_FDCAN_MspInit+0xec>)
 8001b1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b20:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 8001b24:	4b18      	ldr	r3, [pc, #96]	@ (8001b88 <HAL_FDCAN_MspInit+0xec>)
 8001b26:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8001b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b32:	4b15      	ldr	r3, [pc, #84]	@ (8001b88 <HAL_FDCAN_MspInit+0xec>)
 8001b34:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001b38:	4a13      	ldr	r2, [pc, #76]	@ (8001b88 <HAL_FDCAN_MspInit+0xec>)
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001b42:	4b11      	ldr	r3, [pc, #68]	@ (8001b88 <HAL_FDCAN_MspInit+0xec>)
 8001b44:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b50:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001b54:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b64:	2300      	movs	r3, #0
 8001b66:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001b6a:	2309      	movs	r3, #9
 8001b6c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b70:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001b74:	4619      	mov	r1, r3
 8001b76:	4805      	ldr	r0, [pc, #20]	@ (8001b8c <HAL_FDCAN_MspInit+0xf0>)
 8001b78:	f004 fee6 	bl	8006948 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001b7c:	bf00      	nop
 8001b7e:	37e8      	adds	r7, #232	@ 0xe8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	4000a000 	.word	0x4000a000
 8001b88:	58024400 	.word	0x58024400
 8001b8c:	58020000 	.word	0x58020000

08001b90 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08a      	sub	sp, #40	@ 0x28
 8001b94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b96:	f107 0314 	add.w	r3, r7, #20
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	605a      	str	r2, [r3, #4]
 8001ba0:	609a      	str	r2, [r3, #8]
 8001ba2:	60da      	str	r2, [r3, #12]
 8001ba4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ba6:	4b48      	ldr	r3, [pc, #288]	@ (8001cc8 <MX_GPIO_Init+0x138>)
 8001ba8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001bac:	4a46      	ldr	r2, [pc, #280]	@ (8001cc8 <MX_GPIO_Init+0x138>)
 8001bae:	f043 0304 	orr.w	r3, r3, #4
 8001bb2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001bb6:	4b44      	ldr	r3, [pc, #272]	@ (8001cc8 <MX_GPIO_Init+0x138>)
 8001bb8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	613b      	str	r3, [r7, #16]
 8001bc2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc4:	4b40      	ldr	r3, [pc, #256]	@ (8001cc8 <MX_GPIO_Init+0x138>)
 8001bc6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001bca:	4a3f      	ldr	r2, [pc, #252]	@ (8001cc8 <MX_GPIO_Init+0x138>)
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001bd4:	4b3c      	ldr	r3, [pc, #240]	@ (8001cc8 <MX_GPIO_Init+0x138>)
 8001bd6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be2:	4b39      	ldr	r3, [pc, #228]	@ (8001cc8 <MX_GPIO_Init+0x138>)
 8001be4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001be8:	4a37      	ldr	r2, [pc, #220]	@ (8001cc8 <MX_GPIO_Init+0x138>)
 8001bea:	f043 0302 	orr.w	r3, r3, #2
 8001bee:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001bf2:	4b35      	ldr	r3, [pc, #212]	@ (8001cc8 <MX_GPIO_Init+0x138>)
 8001bf4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	60bb      	str	r3, [r7, #8]
 8001bfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c00:	4b31      	ldr	r3, [pc, #196]	@ (8001cc8 <MX_GPIO_Init+0x138>)
 8001c02:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001c06:	4a30      	ldr	r2, [pc, #192]	@ (8001cc8 <MX_GPIO_Init+0x138>)
 8001c08:	f043 0308 	orr.w	r3, r3, #8
 8001c0c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001c10:	4b2d      	ldr	r3, [pc, #180]	@ (8001cc8 <MX_GPIO_Init+0x138>)
 8001c12:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001c16:	f003 0308 	and.w	r3, r3, #8
 8001c1a:	607b      	str	r3, [r7, #4]
 8001c1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f242 010f 	movw	r1, #8207	@ 0x200f
 8001c24:	4829      	ldr	r0, [pc, #164]	@ (8001ccc <MX_GPIO_Init+0x13c>)
 8001c26:	f005 f83f 	bl	8006ca8 <HAL_GPIO_WritePin>
                          |LED_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_NSS_GPIO_Port, SD_NSS_Pin, GPIO_PIN_RESET);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2110      	movs	r1, #16
 8001c2e:	4828      	ldr	r0, [pc, #160]	@ (8001cd0 <MX_GPIO_Init+0x140>)
 8001c30:	f005 f83a 	bl	8006ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BME_NSS_GPIO_Port, BME_NSS_Pin, GPIO_PIN_RESET);
 8001c34:	2200      	movs	r2, #0
 8001c36:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c3a:	4826      	ldr	r0, [pc, #152]	@ (8001cd4 <MX_GPIO_Init+0x144>)
 8001c3c:	f005 f834 	bl	8006ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_INT_GPIO_Port, IMU_INT_Pin, GPIO_PIN_RESET);
 8001c40:	2200      	movs	r2, #0
 8001c42:	2104      	movs	r1, #4
 8001c44:	4824      	ldr	r0, [pc, #144]	@ (8001cd8 <MX_GPIO_Init+0x148>)
 8001c46:	f005 f82f 	bl	8006ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8001c4a:	f242 030f 	movw	r3, #8207	@ 0x200f
 8001c4e:	617b      	str	r3, [r7, #20]
                          |LED_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c50:	2301      	movs	r3, #1
 8001c52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c5c:	f107 0314 	add.w	r3, r7, #20
 8001c60:	4619      	mov	r1, r3
 8001c62:	481a      	ldr	r0, [pc, #104]	@ (8001ccc <MX_GPIO_Init+0x13c>)
 8001c64:	f004 fe70 	bl	8006948 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_NSS_Pin;
 8001c68:	2310      	movs	r3, #16
 8001c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c74:	2300      	movs	r3, #0
 8001c76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_NSS_GPIO_Port, &GPIO_InitStruct);
 8001c78:	f107 0314 	add.w	r3, r7, #20
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4814      	ldr	r0, [pc, #80]	@ (8001cd0 <MX_GPIO_Init+0x140>)
 8001c80:	f004 fe62 	bl	8006948 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BME_NSS_Pin;
 8001c84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c92:	2300      	movs	r3, #0
 8001c94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BME_NSS_GPIO_Port, &GPIO_InitStruct);
 8001c96:	f107 0314 	add.w	r3, r7, #20
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	480d      	ldr	r0, [pc, #52]	@ (8001cd4 <MX_GPIO_Init+0x144>)
 8001c9e:	f004 fe53 	bl	8006948 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8001ca2:	2304      	movs	r3, #4
 8001ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8001cb2:	f107 0314 	add.w	r3, r7, #20
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4807      	ldr	r0, [pc, #28]	@ (8001cd8 <MX_GPIO_Init+0x148>)
 8001cba:	f004 fe45 	bl	8006948 <HAL_GPIO_Init>

}
 8001cbe:	bf00      	nop
 8001cc0:	3728      	adds	r7, #40	@ 0x28
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	58024400 	.word	0x58024400
 8001ccc:	58020800 	.word	0x58020800
 8001cd0:	58020000 	.word	0x58020000
 8001cd4:	58020400 	.word	0x58020400
 8001cd8:	58020c00 	.word	0x58020c00

08001cdc <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d50 <MX_I2C3_Init+0x74>)
 8001ce2:	4a1c      	ldr	r2, [pc, #112]	@ (8001d54 <MX_I2C3_Init+0x78>)
 8001ce4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20B0CCFF;
 8001ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d50 <MX_I2C3_Init+0x74>)
 8001ce8:	4a1b      	ldr	r2, [pc, #108]	@ (8001d58 <MX_I2C3_Init+0x7c>)
 8001cea:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001cec:	4b18      	ldr	r3, [pc, #96]	@ (8001d50 <MX_I2C3_Init+0x74>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cf2:	4b17      	ldr	r3, [pc, #92]	@ (8001d50 <MX_I2C3_Init+0x74>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cf8:	4b15      	ldr	r3, [pc, #84]	@ (8001d50 <MX_I2C3_Init+0x74>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001cfe:	4b14      	ldr	r3, [pc, #80]	@ (8001d50 <MX_I2C3_Init+0x74>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d04:	4b12      	ldr	r3, [pc, #72]	@ (8001d50 <MX_I2C3_Init+0x74>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d0a:	4b11      	ldr	r3, [pc, #68]	@ (8001d50 <MX_I2C3_Init+0x74>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d10:	4b0f      	ldr	r3, [pc, #60]	@ (8001d50 <MX_I2C3_Init+0x74>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001d16:	480e      	ldr	r0, [pc, #56]	@ (8001d50 <MX_I2C3_Init+0x74>)
 8001d18:	f004 ffe0 	bl	8006cdc <HAL_I2C_Init>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001d22:	f000 f9a1 	bl	8002068 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d26:	2100      	movs	r1, #0
 8001d28:	4809      	ldr	r0, [pc, #36]	@ (8001d50 <MX_I2C3_Init+0x74>)
 8001d2a:	f005 f873 	bl	8006e14 <HAL_I2CEx_ConfigAnalogFilter>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001d34:	f000 f998 	bl	8002068 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001d38:	2100      	movs	r1, #0
 8001d3a:	4805      	ldr	r0, [pc, #20]	@ (8001d50 <MX_I2C3_Init+0x74>)
 8001d3c:	f005 f8b5 	bl	8006eaa <HAL_I2CEx_ConfigDigitalFilter>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001d46:	f000 f98f 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	2400223c 	.word	0x2400223c
 8001d54:	40005c00 	.word	0x40005c00
 8001d58:	20b0ccff 	.word	0x20b0ccff

08001d5c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b0bc      	sub	sp, #240	@ 0xf0
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d64:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d74:	f107 0318 	add.w	r3, r7, #24
 8001d78:	22c0      	movs	r2, #192	@ 0xc0
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f010 f94d 	bl	801201c <memset>
  if(i2cHandle->Instance==I2C3)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a39      	ldr	r2, [pc, #228]	@ (8001e6c <HAL_I2C_MspInit+0x110>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d16b      	bne.n	8001e64 <HAL_I2C_MspInit+0x108>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001d8c:	f04f 0208 	mov.w	r2, #8
 8001d90:	f04f 0300 	mov.w	r3, #0
 8001d94:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d9e:	f107 0318 	add.w	r3, r7, #24
 8001da2:	4618      	mov	r0, r3
 8001da4:	f006 f8c6 	bl	8007f34 <HAL_RCCEx_PeriphCLKConfig>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001dae:	f000 f95b 	bl	8002068 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db2:	4b2f      	ldr	r3, [pc, #188]	@ (8001e70 <HAL_I2C_MspInit+0x114>)
 8001db4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001db8:	4a2d      	ldr	r2, [pc, #180]	@ (8001e70 <HAL_I2C_MspInit+0x114>)
 8001dba:	f043 0304 	orr.w	r3, r3, #4
 8001dbe:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001dc2:	4b2b      	ldr	r3, [pc, #172]	@ (8001e70 <HAL_I2C_MspInit+0x114>)
 8001dc4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	617b      	str	r3, [r7, #20]
 8001dce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd0:	4b27      	ldr	r3, [pc, #156]	@ (8001e70 <HAL_I2C_MspInit+0x114>)
 8001dd2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001dd6:	4a26      	ldr	r2, [pc, #152]	@ (8001e70 <HAL_I2C_MspInit+0x114>)
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001de0:	4b23      	ldr	r3, [pc, #140]	@ (8001e70 <HAL_I2C_MspInit+0x114>)
 8001de2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	613b      	str	r3, [r7, #16]
 8001dec:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001dee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001df2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001df6:	2312      	movs	r3, #18
 8001df8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e02:	2300      	movs	r3, #0
 8001e04:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e08:	2304      	movs	r3, #4
 8001e0a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e0e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001e12:	4619      	mov	r1, r3
 8001e14:	4817      	ldr	r0, [pc, #92]	@ (8001e74 <HAL_I2C_MspInit+0x118>)
 8001e16:	f004 fd97 	bl	8006948 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e22:	2312      	movs	r3, #18
 8001e24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e34:	2304      	movs	r3, #4
 8001e36:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001e3e:	4619      	mov	r1, r3
 8001e40:	480d      	ldr	r0, [pc, #52]	@ (8001e78 <HAL_I2C_MspInit+0x11c>)
 8001e42:	f004 fd81 	bl	8006948 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001e46:	4b0a      	ldr	r3, [pc, #40]	@ (8001e70 <HAL_I2C_MspInit+0x114>)
 8001e48:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001e4c:	4a08      	ldr	r2, [pc, #32]	@ (8001e70 <HAL_I2C_MspInit+0x114>)
 8001e4e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e52:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001e56:	4b06      	ldr	r3, [pc, #24]	@ (8001e70 <HAL_I2C_MspInit+0x114>)
 8001e58:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001e5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001e64:	bf00      	nop
 8001e66:	37f0      	adds	r7, #240	@ 0xf0
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40005c00 	.word	0x40005c00
 8001e70:	58024400 	.word	0x58024400
 8001e74:	58020800 	.word	0x58020800
 8001e78:	58020000 	.word	0x58020000

08001e7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001e80:	f000 f8c6 	bl	8002010 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e84:	f001 f8e0 	bl	8003048 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e88:	f000 f82c 	bl	8001ee4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e8c:	f7ff fe80 	bl	8001b90 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e90:	f7ff fd80 	bl	8001994 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8001e94:	f7ff fd9e 	bl	80019d4 <MX_FDCAN1_Init>
  MX_I2C3_Init();
 8001e98:	f7ff ff20 	bl	8001cdc <MX_I2C3_Init>
  MX_SPI1_Init();
 8001e9c:	f000 f8ea 	bl	8002074 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001ea0:	f000 f93e 	bl	8002120 <MX_SPI2_Init>
  MX_SPI3_Init();
 8001ea4:	f000 f992 	bl	80021cc <MX_SPI3_Init>
  MX_TIM2_Init();
 8001ea8:	f000 fbde 	bl	8002668 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001eac:	f000 fc58 	bl	8002760 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001eb0:	f000 fcbc 	bl	800282c <MX_TIM4_Init>
  MX_UART4_Init();
 8001eb4:	f000 fe74 	bl	8002ba0 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8001eb8:	f000 febe 	bl	8002c38 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001ebc:	f000 ff0c 	bl	8002cd8 <MX_USART6_UART_Init>
  MX_TIM13_Init();
 8001ec0:	f000 fd30 	bl	8002924 <MX_TIM13_Init>
  MX_FATFS_Init();
 8001ec4:	f00b ff08 	bl	800dcd8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  BMP280_init();
 8001ec8:	f7ff f8a2 	bl	8001010 <BMP280_init>
  SD_init();
 8001ecc:	f7ff fd32 	bl	8001934 <SD_init>
  SBUS_init();
 8001ed0:	f7ff f962 	bl	8001198 <SBUS_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BMP280_calculate();
 8001ed4:	f7ff f8c2 	bl	800105c <BMP280_calculate>


	  HAL_Delay(50);
 8001ed8:	2032      	movs	r0, #50	@ 0x32
 8001eda:	f001 f947 	bl	800316c <HAL_Delay>
	  BMP280_calculate();
 8001ede:	bf00      	nop
 8001ee0:	e7f8      	b.n	8001ed4 <main+0x58>
	...

08001ee4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b09c      	sub	sp, #112	@ 0x70
 8001ee8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001eee:	224c      	movs	r2, #76	@ 0x4c
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f010 f892 	bl	801201c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ef8:	1d3b      	adds	r3, r7, #4
 8001efa:	2220      	movs	r2, #32
 8001efc:	2100      	movs	r1, #0
 8001efe:	4618      	mov	r0, r3
 8001f00:	f010 f88c 	bl	801201c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8001f04:	4b30      	ldr	r3, [pc, #192]	@ (8001fc8 <SystemClock_Config+0xe4>)
 8001f06:	f04f 32ff 	mov.w	r2, #4294967295
 8001f0a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001f0e:	2002      	movs	r0, #2
 8001f10:	f005 f818 	bl	8006f44 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001f14:	2300      	movs	r3, #0
 8001f16:	603b      	str	r3, [r7, #0]
 8001f18:	4b2c      	ldr	r3, [pc, #176]	@ (8001fcc <SystemClock_Config+0xe8>)
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	4a2b      	ldr	r2, [pc, #172]	@ (8001fcc <SystemClock_Config+0xe8>)
 8001f1e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f22:	6193      	str	r3, [r2, #24]
 8001f24:	4b29      	ldr	r3, [pc, #164]	@ (8001fcc <SystemClock_Config+0xe8>)
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001f2c:	603b      	str	r3, [r7, #0]
 8001f2e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001f30:	bf00      	nop
 8001f32:	4b26      	ldr	r3, [pc, #152]	@ (8001fcc <SystemClock_Config+0xe8>)
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f3e:	d1f8      	bne.n	8001f32 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f40:	2302      	movs	r3, #2
 8001f42:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001f44:	2301      	movs	r3, #1
 8001f46:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001f48:	2340      	movs	r3, #64	@ 0x40
 8001f4a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f50:	2300      	movs	r3, #0
 8001f52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001f54:	2304      	movs	r3, #4
 8001f56:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8001f58:	2323      	movs	r3, #35	@ 0x23
 8001f5a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001f60:	2302      	movs	r3, #2
 8001f62:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f64:	2302      	movs	r3, #2
 8001f66:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001f68:	230c      	movs	r3, #12
 8001f6a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001f70:	2300      	movs	r3, #0
 8001f72:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f005 f81d 	bl	8006fb8 <HAL_RCC_OscConfig>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001f84:	f000 f870 	bl	8002068 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f88:	233f      	movs	r3, #63	@ 0x3f
 8001f8a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001f90:	2300      	movs	r3, #0
 8001f92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001f94:	2300      	movs	r3, #0
 8001f96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001f98:	2340      	movs	r3, #64	@ 0x40
 8001f9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001f9c:	2340      	movs	r3, #64	@ 0x40
 8001f9e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001fa0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fa4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001fa6:	2340      	movs	r3, #64	@ 0x40
 8001fa8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001faa:	1d3b      	adds	r3, r7, #4
 8001fac:	2106      	movs	r1, #6
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f005 fc34 	bl	800781c <HAL_RCC_ClockConfig>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <SystemClock_Config+0xda>
  {
    Error_Handler();
 8001fba:	f000 f855 	bl	8002068 <Error_Handler>
  }
}
 8001fbe:	bf00      	nop
 8001fc0:	3770      	adds	r7, #112	@ 0x70
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	58024400 	.word	0x58024400
 8001fcc:	58024800 	.word	0x58024800

08001fd0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART1){
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a09      	ldr	r2, [pc, #36]	@ (8002004 <HAL_UART_RxCpltCallback+0x34>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d10b      	bne.n	8001ffa <HAL_UART_RxCpltCallback+0x2a>
		SBUS_Receive(SBUS_RxBuffer);
 8001fe2:	4b09      	ldr	r3, [pc, #36]	@ (8002008 <HAL_UART_RxCpltCallback+0x38>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff f8e4 	bl	80011b4 <SBUS_Receive>
		HAL_UART_Receive_DMA(&huart1, SBUS_RxBuffer, 1);
 8001fec:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <HAL_UART_RxCpltCallback+0x38>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4805      	ldr	r0, [pc, #20]	@ (800200c <HAL_UART_RxCpltCallback+0x3c>)
 8001ff6:	f009 fe75 	bl	800bce4 <HAL_UART_Receive_DMA>
	}


}
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40011000 	.word	0x40011000
 8002008:	24000129 	.word	0x24000129
 800200c:	240025ec 	.word	0x240025ec

08002010 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002016:	463b      	mov	r3, r7
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002022:	f001 f9d7 	bl	80033d4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002026:	2301      	movs	r3, #1
 8002028:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800202a:	2300      	movs	r3, #0
 800202c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800202e:	2300      	movs	r3, #0
 8002030:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8002032:	231f      	movs	r3, #31
 8002034:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8002036:	2387      	movs	r3, #135	@ 0x87
 8002038:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800203a:	2300      	movs	r3, #0
 800203c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800203e:	2300      	movs	r3, #0
 8002040:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002042:	2301      	movs	r3, #1
 8002044:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002046:	2301      	movs	r3, #1
 8002048:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800204a:	2300      	movs	r3, #0
 800204c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800204e:	2300      	movs	r3, #0
 8002050:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002052:	463b      	mov	r3, r7
 8002054:	4618      	mov	r0, r3
 8002056:	f001 f9f5 	bl	8003444 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800205a:	2004      	movs	r0, #4
 800205c:	f001 f9d2 	bl	8003404 <HAL_MPU_Enable>

}
 8002060:	bf00      	nop
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800206c:	b672      	cpsid	i
}
 800206e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002070:	bf00      	nop
 8002072:	e7fd      	b.n	8002070 <Error_Handler+0x8>

08002074 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002078:	4b27      	ldr	r3, [pc, #156]	@ (8002118 <MX_SPI1_Init+0xa4>)
 800207a:	4a28      	ldr	r2, [pc, #160]	@ (800211c <MX_SPI1_Init+0xa8>)
 800207c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800207e:	4b26      	ldr	r3, [pc, #152]	@ (8002118 <MX_SPI1_Init+0xa4>)
 8002080:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002084:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002086:	4b24      	ldr	r3, [pc, #144]	@ (8002118 <MX_SPI1_Init+0xa4>)
 8002088:	2200      	movs	r2, #0
 800208a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800208c:	4b22      	ldr	r3, [pc, #136]	@ (8002118 <MX_SPI1_Init+0xa4>)
 800208e:	2207      	movs	r2, #7
 8002090:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002092:	4b21      	ldr	r3, [pc, #132]	@ (8002118 <MX_SPI1_Init+0xa4>)
 8002094:	2200      	movs	r2, #0
 8002096:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002098:	4b1f      	ldr	r3, [pc, #124]	@ (8002118 <MX_SPI1_Init+0xa4>)
 800209a:	2200      	movs	r2, #0
 800209c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800209e:	4b1e      	ldr	r3, [pc, #120]	@ (8002118 <MX_SPI1_Init+0xa4>)
 80020a0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80020a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80020a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002118 <MX_SPI1_Init+0xa4>)
 80020a8:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 80020ac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002118 <MX_SPI1_Init+0xa4>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80020b4:	4b18      	ldr	r3, [pc, #96]	@ (8002118 <MX_SPI1_Init+0xa4>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020ba:	4b17      	ldr	r3, [pc, #92]	@ (8002118 <MX_SPI1_Init+0xa4>)
 80020bc:	2200      	movs	r2, #0
 80020be:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80020c0:	4b15      	ldr	r3, [pc, #84]	@ (8002118 <MX_SPI1_Init+0xa4>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80020c6:	4b14      	ldr	r3, [pc, #80]	@ (8002118 <MX_SPI1_Init+0xa4>)
 80020c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80020cc:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80020ce:	4b12      	ldr	r3, [pc, #72]	@ (8002118 <MX_SPI1_Init+0xa4>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80020d4:	4b10      	ldr	r3, [pc, #64]	@ (8002118 <MX_SPI1_Init+0xa4>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80020da:	4b0f      	ldr	r3, [pc, #60]	@ (8002118 <MX_SPI1_Init+0xa4>)
 80020dc:	2200      	movs	r2, #0
 80020de:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80020e0:	4b0d      	ldr	r3, [pc, #52]	@ (8002118 <MX_SPI1_Init+0xa4>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80020e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002118 <MX_SPI1_Init+0xa4>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80020ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002118 <MX_SPI1_Init+0xa4>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80020f2:	4b09      	ldr	r3, [pc, #36]	@ (8002118 <MX_SPI1_Init+0xa4>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80020f8:	4b07      	ldr	r3, [pc, #28]	@ (8002118 <MX_SPI1_Init+0xa4>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80020fe:	4b06      	ldr	r3, [pc, #24]	@ (8002118 <MX_SPI1_Init+0xa4>)
 8002100:	2200      	movs	r2, #0
 8002102:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002104:	4804      	ldr	r0, [pc, #16]	@ (8002118 <MX_SPI1_Init+0xa4>)
 8002106:	f007 fcf5 	bl	8009af4 <HAL_SPI_Init>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8002110:	f7ff ffaa 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002114:	bf00      	nop
 8002116:	bd80      	pop	{r7, pc}
 8002118:	24002290 	.word	0x24002290
 800211c:	40013000 	.word	0x40013000

08002120 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002124:	4b27      	ldr	r3, [pc, #156]	@ (80021c4 <MX_SPI2_Init+0xa4>)
 8002126:	4a28      	ldr	r2, [pc, #160]	@ (80021c8 <MX_SPI2_Init+0xa8>)
 8002128:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800212a:	4b26      	ldr	r3, [pc, #152]	@ (80021c4 <MX_SPI2_Init+0xa4>)
 800212c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002130:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002132:	4b24      	ldr	r3, [pc, #144]	@ (80021c4 <MX_SPI2_Init+0xa4>)
 8002134:	2200      	movs	r2, #0
 8002136:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002138:	4b22      	ldr	r3, [pc, #136]	@ (80021c4 <MX_SPI2_Init+0xa4>)
 800213a:	2207      	movs	r2, #7
 800213c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800213e:	4b21      	ldr	r3, [pc, #132]	@ (80021c4 <MX_SPI2_Init+0xa4>)
 8002140:	2200      	movs	r2, #0
 8002142:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002144:	4b1f      	ldr	r3, [pc, #124]	@ (80021c4 <MX_SPI2_Init+0xa4>)
 8002146:	2200      	movs	r2, #0
 8002148:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800214a:	4b1e      	ldr	r3, [pc, #120]	@ (80021c4 <MX_SPI2_Init+0xa4>)
 800214c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002150:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002152:	4b1c      	ldr	r3, [pc, #112]	@ (80021c4 <MX_SPI2_Init+0xa4>)
 8002154:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8002158:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800215a:	4b1a      	ldr	r3, [pc, #104]	@ (80021c4 <MX_SPI2_Init+0xa4>)
 800215c:	2200      	movs	r2, #0
 800215e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002160:	4b18      	ldr	r3, [pc, #96]	@ (80021c4 <MX_SPI2_Init+0xa4>)
 8002162:	2200      	movs	r2, #0
 8002164:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002166:	4b17      	ldr	r3, [pc, #92]	@ (80021c4 <MX_SPI2_Init+0xa4>)
 8002168:	2200      	movs	r2, #0
 800216a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800216c:	4b15      	ldr	r3, [pc, #84]	@ (80021c4 <MX_SPI2_Init+0xa4>)
 800216e:	2200      	movs	r2, #0
 8002170:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002172:	4b14      	ldr	r3, [pc, #80]	@ (80021c4 <MX_SPI2_Init+0xa4>)
 8002174:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002178:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800217a:	4b12      	ldr	r3, [pc, #72]	@ (80021c4 <MX_SPI2_Init+0xa4>)
 800217c:	2200      	movs	r2, #0
 800217e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002180:	4b10      	ldr	r3, [pc, #64]	@ (80021c4 <MX_SPI2_Init+0xa4>)
 8002182:	2200      	movs	r2, #0
 8002184:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002186:	4b0f      	ldr	r3, [pc, #60]	@ (80021c4 <MX_SPI2_Init+0xa4>)
 8002188:	2200      	movs	r2, #0
 800218a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800218c:	4b0d      	ldr	r3, [pc, #52]	@ (80021c4 <MX_SPI2_Init+0xa4>)
 800218e:	2200      	movs	r2, #0
 8002190:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002192:	4b0c      	ldr	r3, [pc, #48]	@ (80021c4 <MX_SPI2_Init+0xa4>)
 8002194:	2200      	movs	r2, #0
 8002196:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002198:	4b0a      	ldr	r3, [pc, #40]	@ (80021c4 <MX_SPI2_Init+0xa4>)
 800219a:	2200      	movs	r2, #0
 800219c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800219e:	4b09      	ldr	r3, [pc, #36]	@ (80021c4 <MX_SPI2_Init+0xa4>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80021a4:	4b07      	ldr	r3, [pc, #28]	@ (80021c4 <MX_SPI2_Init+0xa4>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80021aa:	4b06      	ldr	r3, [pc, #24]	@ (80021c4 <MX_SPI2_Init+0xa4>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80021b0:	4804      	ldr	r0, [pc, #16]	@ (80021c4 <MX_SPI2_Init+0xa4>)
 80021b2:	f007 fc9f 	bl	8009af4 <HAL_SPI_Init>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 80021bc:	f7ff ff54 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80021c0:	bf00      	nop
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	24002318 	.word	0x24002318
 80021c8:	40003800 	.word	0x40003800

080021cc <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80021d0:	4b27      	ldr	r3, [pc, #156]	@ (8002270 <MX_SPI3_Init+0xa4>)
 80021d2:	4a28      	ldr	r2, [pc, #160]	@ (8002274 <MX_SPI3_Init+0xa8>)
 80021d4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80021d6:	4b26      	ldr	r3, [pc, #152]	@ (8002270 <MX_SPI3_Init+0xa4>)
 80021d8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80021dc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80021de:	4b24      	ldr	r3, [pc, #144]	@ (8002270 <MX_SPI3_Init+0xa4>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80021e4:	4b22      	ldr	r3, [pc, #136]	@ (8002270 <MX_SPI3_Init+0xa4>)
 80021e6:	2207      	movs	r2, #7
 80021e8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021ea:	4b21      	ldr	r3, [pc, #132]	@ (8002270 <MX_SPI3_Init+0xa4>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002270 <MX_SPI3_Init+0xa4>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80021f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002270 <MX_SPI3_Init+0xa4>)
 80021f8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80021fc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80021fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002270 <MX_SPI3_Init+0xa4>)
 8002200:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8002204:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002206:	4b1a      	ldr	r3, [pc, #104]	@ (8002270 <MX_SPI3_Init+0xa4>)
 8002208:	2200      	movs	r2, #0
 800220a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800220c:	4b18      	ldr	r3, [pc, #96]	@ (8002270 <MX_SPI3_Init+0xa4>)
 800220e:	2200      	movs	r2, #0
 8002210:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002212:	4b17      	ldr	r3, [pc, #92]	@ (8002270 <MX_SPI3_Init+0xa4>)
 8002214:	2200      	movs	r2, #0
 8002216:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8002218:	4b15      	ldr	r3, [pc, #84]	@ (8002270 <MX_SPI3_Init+0xa4>)
 800221a:	2200      	movs	r2, #0
 800221c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800221e:	4b14      	ldr	r3, [pc, #80]	@ (8002270 <MX_SPI3_Init+0xa4>)
 8002220:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002224:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002226:	4b12      	ldr	r3, [pc, #72]	@ (8002270 <MX_SPI3_Init+0xa4>)
 8002228:	2200      	movs	r2, #0
 800222a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800222c:	4b10      	ldr	r3, [pc, #64]	@ (8002270 <MX_SPI3_Init+0xa4>)
 800222e:	2200      	movs	r2, #0
 8002230:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002232:	4b0f      	ldr	r3, [pc, #60]	@ (8002270 <MX_SPI3_Init+0xa4>)
 8002234:	2200      	movs	r2, #0
 8002236:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002238:	4b0d      	ldr	r3, [pc, #52]	@ (8002270 <MX_SPI3_Init+0xa4>)
 800223a:	2200      	movs	r2, #0
 800223c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800223e:	4b0c      	ldr	r3, [pc, #48]	@ (8002270 <MX_SPI3_Init+0xa4>)
 8002240:	2200      	movs	r2, #0
 8002242:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002244:	4b0a      	ldr	r3, [pc, #40]	@ (8002270 <MX_SPI3_Init+0xa4>)
 8002246:	2200      	movs	r2, #0
 8002248:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800224a:	4b09      	ldr	r3, [pc, #36]	@ (8002270 <MX_SPI3_Init+0xa4>)
 800224c:	2200      	movs	r2, #0
 800224e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002250:	4b07      	ldr	r3, [pc, #28]	@ (8002270 <MX_SPI3_Init+0xa4>)
 8002252:	2200      	movs	r2, #0
 8002254:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002256:	4b06      	ldr	r3, [pc, #24]	@ (8002270 <MX_SPI3_Init+0xa4>)
 8002258:	2200      	movs	r2, #0
 800225a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800225c:	4804      	ldr	r0, [pc, #16]	@ (8002270 <MX_SPI3_Init+0xa4>)
 800225e:	f007 fc49 	bl	8009af4 <HAL_SPI_Init>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8002268:	f7ff fefe 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800226c:	bf00      	nop
 800226e:	bd80      	pop	{r7, pc}
 8002270:	240023a0 	.word	0x240023a0
 8002274:	40003c00 	.word	0x40003c00

08002278 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b0be      	sub	sp, #248	@ 0xf8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002280:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002290:	f107 0320 	add.w	r3, r7, #32
 8002294:	22c0      	movs	r2, #192	@ 0xc0
 8002296:	2100      	movs	r1, #0
 8002298:	4618      	mov	r0, r3
 800229a:	f00f febf 	bl	801201c <memset>
  if(spiHandle->Instance==SPI1)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a73      	ldr	r2, [pc, #460]	@ (8002470 <HAL_SPI_MspInit+0x1f8>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d146      	bne.n	8002336 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80022a8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80022ac:	f04f 0300 	mov.w	r3, #0
 80022b0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022ba:	f107 0320 	add.w	r3, r7, #32
 80022be:	4618      	mov	r0, r3
 80022c0:	f005 fe38 	bl	8007f34 <HAL_RCCEx_PeriphCLKConfig>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80022ca:	f7ff fecd 	bl	8002068 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022ce:	4b69      	ldr	r3, [pc, #420]	@ (8002474 <HAL_SPI_MspInit+0x1fc>)
 80022d0:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80022d4:	4a67      	ldr	r2, [pc, #412]	@ (8002474 <HAL_SPI_MspInit+0x1fc>)
 80022d6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80022da:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80022de:	4b65      	ldr	r3, [pc, #404]	@ (8002474 <HAL_SPI_MspInit+0x1fc>)
 80022e0:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80022e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022e8:	61fb      	str	r3, [r7, #28]
 80022ea:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ec:	4b61      	ldr	r3, [pc, #388]	@ (8002474 <HAL_SPI_MspInit+0x1fc>)
 80022ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80022f2:	4a60      	ldr	r2, [pc, #384]	@ (8002474 <HAL_SPI_MspInit+0x1fc>)
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80022fc:	4b5d      	ldr	r3, [pc, #372]	@ (8002474 <HAL_SPI_MspInit+0x1fc>)
 80022fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	61bb      	str	r3, [r7, #24]
 8002308:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 800230a:	23e0      	movs	r3, #224	@ 0xe0
 800230c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002310:	2302      	movs	r3, #2
 8002312:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002316:	2300      	movs	r3, #0
 8002318:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231c:	2300      	movs	r3, #0
 800231e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002322:	2305      	movs	r3, #5
 8002324:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002328:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800232c:	4619      	mov	r1, r3
 800232e:	4852      	ldr	r0, [pc, #328]	@ (8002478 <HAL_SPI_MspInit+0x200>)
 8002330:	f004 fb0a 	bl	8006948 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002334:	e098      	b.n	8002468 <HAL_SPI_MspInit+0x1f0>
  else if(spiHandle->Instance==SPI2)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a50      	ldr	r2, [pc, #320]	@ (800247c <HAL_SPI_MspInit+0x204>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d147      	bne.n	80023d0 <HAL_SPI_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002340:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002344:	f04f 0300 	mov.w	r3, #0
 8002348:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800234c:	2300      	movs	r3, #0
 800234e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002352:	f107 0320 	add.w	r3, r7, #32
 8002356:	4618      	mov	r0, r3
 8002358:	f005 fdec 	bl	8007f34 <HAL_RCCEx_PeriphCLKConfig>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <HAL_SPI_MspInit+0xee>
      Error_Handler();
 8002362:	f7ff fe81 	bl	8002068 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002366:	4b43      	ldr	r3, [pc, #268]	@ (8002474 <HAL_SPI_MspInit+0x1fc>)
 8002368:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800236c:	4a41      	ldr	r2, [pc, #260]	@ (8002474 <HAL_SPI_MspInit+0x1fc>)
 800236e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002372:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002376:	4b3f      	ldr	r3, [pc, #252]	@ (8002474 <HAL_SPI_MspInit+0x1fc>)
 8002378:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800237c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002380:	617b      	str	r3, [r7, #20]
 8002382:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002384:	4b3b      	ldr	r3, [pc, #236]	@ (8002474 <HAL_SPI_MspInit+0x1fc>)
 8002386:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800238a:	4a3a      	ldr	r2, [pc, #232]	@ (8002474 <HAL_SPI_MspInit+0x1fc>)
 800238c:	f043 0302 	orr.w	r3, r3, #2
 8002390:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002394:	4b37      	ldr	r3, [pc, #220]	@ (8002474 <HAL_SPI_MspInit+0x1fc>)
 8002396:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	613b      	str	r3, [r7, #16]
 80023a0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BMP_SCK_Pin|BMP_MISO_Pin|BMP_MOSI_Pin;
 80023a2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80023a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023aa:	2302      	movs	r3, #2
 80023ac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b0:	2300      	movs	r3, #0
 80023b2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b6:	2300      	movs	r3, #0
 80023b8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023bc:	2305      	movs	r3, #5
 80023be:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80023c6:	4619      	mov	r1, r3
 80023c8:	482d      	ldr	r0, [pc, #180]	@ (8002480 <HAL_SPI_MspInit+0x208>)
 80023ca:	f004 fabd 	bl	8006948 <HAL_GPIO_Init>
}
 80023ce:	e04b      	b.n	8002468 <HAL_SPI_MspInit+0x1f0>
  else if(spiHandle->Instance==SPI3)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a2b      	ldr	r2, [pc, #172]	@ (8002484 <HAL_SPI_MspInit+0x20c>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d146      	bne.n	8002468 <HAL_SPI_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80023da:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80023de:	f04f 0300 	mov.w	r3, #0
 80023e2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023ec:	f107 0320 	add.w	r3, r7, #32
 80023f0:	4618      	mov	r0, r3
 80023f2:	f005 fd9f 	bl	8007f34 <HAL_RCCEx_PeriphCLKConfig>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <HAL_SPI_MspInit+0x188>
      Error_Handler();
 80023fc:	f7ff fe34 	bl	8002068 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002400:	4b1c      	ldr	r3, [pc, #112]	@ (8002474 <HAL_SPI_MspInit+0x1fc>)
 8002402:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002406:	4a1b      	ldr	r2, [pc, #108]	@ (8002474 <HAL_SPI_MspInit+0x1fc>)
 8002408:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800240c:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002410:	4b18      	ldr	r3, [pc, #96]	@ (8002474 <HAL_SPI_MspInit+0x1fc>)
 8002412:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002416:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800241e:	4b15      	ldr	r3, [pc, #84]	@ (8002474 <HAL_SPI_MspInit+0x1fc>)
 8002420:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002424:	4a13      	ldr	r2, [pc, #76]	@ (8002474 <HAL_SPI_MspInit+0x1fc>)
 8002426:	f043 0304 	orr.w	r3, r3, #4
 800242a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800242e:	4b11      	ldr	r3, [pc, #68]	@ (8002474 <HAL_SPI_MspInit+0x1fc>)
 8002430:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	60bb      	str	r3, [r7, #8]
 800243a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IMU_SCK_Pin|IMU_MISO_Pin|IMU_MOSI_Pin;
 800243c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002440:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002444:	2302      	movs	r3, #2
 8002446:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244a:	2300      	movs	r3, #0
 800244c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002450:	2300      	movs	r3, #0
 8002452:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002456:	2306      	movs	r3, #6
 8002458:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800245c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002460:	4619      	mov	r1, r3
 8002462:	4809      	ldr	r0, [pc, #36]	@ (8002488 <HAL_SPI_MspInit+0x210>)
 8002464:	f004 fa70 	bl	8006948 <HAL_GPIO_Init>
}
 8002468:	bf00      	nop
 800246a:	37f8      	adds	r7, #248	@ 0xf8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40013000 	.word	0x40013000
 8002474:	58024400 	.word	0x58024400
 8002478:	58020000 	.word	0x58020000
 800247c:	40003800 	.word	0x40003800
 8002480:	58020400 	.word	0x58020400
 8002484:	40003c00 	.word	0x40003c00
 8002488:	58020800 	.word	0x58020800

0800248c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002492:	4b0a      	ldr	r3, [pc, #40]	@ (80024bc <HAL_MspInit+0x30>)
 8002494:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002498:	4a08      	ldr	r2, [pc, #32]	@ (80024bc <HAL_MspInit+0x30>)
 800249a:	f043 0302 	orr.w	r3, r3, #2
 800249e:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80024a2:	4b06      	ldr	r3, [pc, #24]	@ (80024bc <HAL_MspInit+0x30>)
 80024a4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	607b      	str	r3, [r7, #4]
 80024ae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	58024400 	.word	0x58024400

080024c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024c4:	bf00      	nop
 80024c6:	e7fd      	b.n	80024c4 <NMI_Handler+0x4>

080024c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024cc:	bf00      	nop
 80024ce:	e7fd      	b.n	80024cc <HardFault_Handler+0x4>

080024d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024d4:	bf00      	nop
 80024d6:	e7fd      	b.n	80024d4 <MemManage_Handler+0x4>

080024d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024dc:	bf00      	nop
 80024de:	e7fd      	b.n	80024dc <BusFault_Handler+0x4>

080024e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024e4:	bf00      	nop
 80024e6:	e7fd      	b.n	80024e4 <UsageFault_Handler+0x4>

080024e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024ec:	bf00      	nop
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024f6:	b480      	push	{r7}
 80024f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024fa:	bf00      	nop
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002508:	bf00      	nop
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
	...

08002514 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  if(Timer1 > 0)
 8002518:	4b0b      	ldr	r3, [pc, #44]	@ (8002548 <SysTick_Handler+0x34>)
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d005      	beq.n	800252c <SysTick_Handler+0x18>
	    Timer1--;
 8002520:	4b09      	ldr	r3, [pc, #36]	@ (8002548 <SysTick_Handler+0x34>)
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	3b01      	subs	r3, #1
 8002526:	b29a      	uxth	r2, r3
 8002528:	4b07      	ldr	r3, [pc, #28]	@ (8002548 <SysTick_Handler+0x34>)
 800252a:	801a      	strh	r2, [r3, #0]
	  if(Timer2 > 0)
 800252c:	4b07      	ldr	r3, [pc, #28]	@ (800254c <SysTick_Handler+0x38>)
 800252e:	881b      	ldrh	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d005      	beq.n	8002540 <SysTick_Handler+0x2c>
	    Timer2--;
 8002534:	4b05      	ldr	r3, [pc, #20]	@ (800254c <SysTick_Handler+0x38>)
 8002536:	881b      	ldrh	r3, [r3, #0]
 8002538:	3b01      	subs	r3, #1
 800253a:	b29a      	uxth	r2, r3
 800253c:	4b03      	ldr	r3, [pc, #12]	@ (800254c <SysTick_Handler+0x38>)
 800253e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002540:	f000 fdf4 	bl	800312c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002544:	bf00      	nop
 8002546:	bd80      	pop	{r7, pc}
 8002548:	24002798 	.word	0x24002798
 800254c:	2400279a 	.word	0x2400279a

08002550 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002554:	4802      	ldr	r0, [pc, #8]	@ (8002560 <DMA1_Stream0_IRQHandler+0x10>)
 8002556:	f002 fb11 	bl	8004b7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	24002714 	.word	0x24002714

08002564 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002568:	4802      	ldr	r0, [pc, #8]	@ (8002574 <USART1_IRQHandler+0x10>)
 800256a:	f009 fc07 	bl	800bd7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	240025ec 	.word	0x240025ec

08002578 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800257c:	4b32      	ldr	r3, [pc, #200]	@ (8002648 <SystemInit+0xd0>)
 800257e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002582:	4a31      	ldr	r2, [pc, #196]	@ (8002648 <SystemInit+0xd0>)
 8002584:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002588:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800258c:	4b2f      	ldr	r3, [pc, #188]	@ (800264c <SystemInit+0xd4>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 030f 	and.w	r3, r3, #15
 8002594:	2b02      	cmp	r3, #2
 8002596:	d807      	bhi.n	80025a8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002598:	4b2c      	ldr	r3, [pc, #176]	@ (800264c <SystemInit+0xd4>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f023 030f 	bic.w	r3, r3, #15
 80025a0:	4a2a      	ldr	r2, [pc, #168]	@ (800264c <SystemInit+0xd4>)
 80025a2:	f043 0303 	orr.w	r3, r3, #3
 80025a6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80025a8:	4b29      	ldr	r3, [pc, #164]	@ (8002650 <SystemInit+0xd8>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a28      	ldr	r2, [pc, #160]	@ (8002650 <SystemInit+0xd8>)
 80025ae:	f043 0301 	orr.w	r3, r3, #1
 80025b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80025b4:	4b26      	ldr	r3, [pc, #152]	@ (8002650 <SystemInit+0xd8>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80025ba:	4b25      	ldr	r3, [pc, #148]	@ (8002650 <SystemInit+0xd8>)
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	4924      	ldr	r1, [pc, #144]	@ (8002650 <SystemInit+0xd8>)
 80025c0:	4b24      	ldr	r3, [pc, #144]	@ (8002654 <SystemInit+0xdc>)
 80025c2:	4013      	ands	r3, r2
 80025c4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80025c6:	4b21      	ldr	r3, [pc, #132]	@ (800264c <SystemInit+0xd4>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 030c 	and.w	r3, r3, #12
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d007      	beq.n	80025e2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80025d2:	4b1e      	ldr	r3, [pc, #120]	@ (800264c <SystemInit+0xd4>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f023 030f 	bic.w	r3, r3, #15
 80025da:	4a1c      	ldr	r2, [pc, #112]	@ (800264c <SystemInit+0xd4>)
 80025dc:	f043 0303 	orr.w	r3, r3, #3
 80025e0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80025e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002650 <SystemInit+0xd8>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80025e8:	4b19      	ldr	r3, [pc, #100]	@ (8002650 <SystemInit+0xd8>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80025ee:	4b18      	ldr	r3, [pc, #96]	@ (8002650 <SystemInit+0xd8>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80025f4:	4b16      	ldr	r3, [pc, #88]	@ (8002650 <SystemInit+0xd8>)
 80025f6:	4a18      	ldr	r2, [pc, #96]	@ (8002658 <SystemInit+0xe0>)
 80025f8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80025fa:	4b15      	ldr	r3, [pc, #84]	@ (8002650 <SystemInit+0xd8>)
 80025fc:	4a17      	ldr	r2, [pc, #92]	@ (800265c <SystemInit+0xe4>)
 80025fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002600:	4b13      	ldr	r3, [pc, #76]	@ (8002650 <SystemInit+0xd8>)
 8002602:	4a17      	ldr	r2, [pc, #92]	@ (8002660 <SystemInit+0xe8>)
 8002604:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002606:	4b12      	ldr	r3, [pc, #72]	@ (8002650 <SystemInit+0xd8>)
 8002608:	2200      	movs	r2, #0
 800260a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800260c:	4b10      	ldr	r3, [pc, #64]	@ (8002650 <SystemInit+0xd8>)
 800260e:	4a14      	ldr	r2, [pc, #80]	@ (8002660 <SystemInit+0xe8>)
 8002610:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002612:	4b0f      	ldr	r3, [pc, #60]	@ (8002650 <SystemInit+0xd8>)
 8002614:	2200      	movs	r2, #0
 8002616:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002618:	4b0d      	ldr	r3, [pc, #52]	@ (8002650 <SystemInit+0xd8>)
 800261a:	4a11      	ldr	r2, [pc, #68]	@ (8002660 <SystemInit+0xe8>)
 800261c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800261e:	4b0c      	ldr	r3, [pc, #48]	@ (8002650 <SystemInit+0xd8>)
 8002620:	2200      	movs	r2, #0
 8002622:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002624:	4b0a      	ldr	r3, [pc, #40]	@ (8002650 <SystemInit+0xd8>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a09      	ldr	r2, [pc, #36]	@ (8002650 <SystemInit+0xd8>)
 800262a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800262e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002630:	4b07      	ldr	r3, [pc, #28]	@ (8002650 <SystemInit+0xd8>)
 8002632:	2200      	movs	r2, #0
 8002634:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002636:	4b0b      	ldr	r3, [pc, #44]	@ (8002664 <SystemInit+0xec>)
 8002638:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800263c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800263e:	bf00      	nop
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	e000ed00 	.word	0xe000ed00
 800264c:	52002000 	.word	0x52002000
 8002650:	58024400 	.word	0x58024400
 8002654:	eaf6ed7f 	.word	0xeaf6ed7f
 8002658:	02020200 	.word	0x02020200
 800265c:	01ff0000 	.word	0x01ff0000
 8002660:	01010280 	.word	0x01010280
 8002664:	52004000 	.word	0x52004000

08002668 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b08a      	sub	sp, #40	@ 0x28
 800266c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800266e:	f107 031c 	add.w	r3, r7, #28
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	605a      	str	r2, [r3, #4]
 8002678:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800267a:	463b      	mov	r3, r7
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	605a      	str	r2, [r3, #4]
 8002682:	609a      	str	r2, [r3, #8]
 8002684:	60da      	str	r2, [r3, #12]
 8002686:	611a      	str	r2, [r3, #16]
 8002688:	615a      	str	r2, [r3, #20]
 800268a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800268c:	4b33      	ldr	r3, [pc, #204]	@ (800275c <MX_TIM2_Init+0xf4>)
 800268e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002692:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 280-1;
 8002694:	4b31      	ldr	r3, [pc, #196]	@ (800275c <MX_TIM2_Init+0xf4>)
 8002696:	f240 1217 	movw	r2, #279	@ 0x117
 800269a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800269c:	4b2f      	ldr	r3, [pc, #188]	@ (800275c <MX_TIM2_Init+0xf4>)
 800269e:	2200      	movs	r2, #0
 80026a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7000;
 80026a2:	4b2e      	ldr	r3, [pc, #184]	@ (800275c <MX_TIM2_Init+0xf4>)
 80026a4:	f641 3258 	movw	r2, #7000	@ 0x1b58
 80026a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026aa:	4b2c      	ldr	r3, [pc, #176]	@ (800275c <MX_TIM2_Init+0xf4>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80026b0:	4b2a      	ldr	r3, [pc, #168]	@ (800275c <MX_TIM2_Init+0xf4>)
 80026b2:	2280      	movs	r2, #128	@ 0x80
 80026b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80026b6:	4829      	ldr	r0, [pc, #164]	@ (800275c <MX_TIM2_Init+0xf4>)
 80026b8:	f008 fc1a 	bl	800aef0 <HAL_TIM_PWM_Init>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 80026c2:	f7ff fcd1 	bl	8002068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026c6:	2300      	movs	r3, #0
 80026c8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ca:	2300      	movs	r3, #0
 80026cc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026ce:	f107 031c 	add.w	r3, r7, #28
 80026d2:	4619      	mov	r1, r3
 80026d4:	4821      	ldr	r0, [pc, #132]	@ (800275c <MX_TIM2_Init+0xf4>)
 80026d6:	f009 fa27 	bl	800bb28 <HAL_TIMEx_MasterConfigSynchronization>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80026e0:	f7ff fcc2 	bl	8002068 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026e4:	2360      	movs	r3, #96	@ 0x60
 80026e6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80026e8:	2300      	movs	r3, #0
 80026ea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026ec:	2300      	movs	r3, #0
 80026ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026f0:	2300      	movs	r3, #0
 80026f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026f4:	463b      	mov	r3, r7
 80026f6:	2200      	movs	r2, #0
 80026f8:	4619      	mov	r1, r3
 80026fa:	4818      	ldr	r0, [pc, #96]	@ (800275c <MX_TIM2_Init+0xf4>)
 80026fc:	f008 fd5e 	bl	800b1bc <HAL_TIM_PWM_ConfigChannel>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8002706:	f7ff fcaf 	bl	8002068 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800270a:	463b      	mov	r3, r7
 800270c:	2204      	movs	r2, #4
 800270e:	4619      	mov	r1, r3
 8002710:	4812      	ldr	r0, [pc, #72]	@ (800275c <MX_TIM2_Init+0xf4>)
 8002712:	f008 fd53 	bl	800b1bc <HAL_TIM_PWM_ConfigChannel>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 800271c:	f7ff fca4 	bl	8002068 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002720:	463b      	mov	r3, r7
 8002722:	2208      	movs	r2, #8
 8002724:	4619      	mov	r1, r3
 8002726:	480d      	ldr	r0, [pc, #52]	@ (800275c <MX_TIM2_Init+0xf4>)
 8002728:	f008 fd48 	bl	800b1bc <HAL_TIM_PWM_ConfigChannel>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 8002732:	f7ff fc99 	bl	8002068 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002736:	463b      	mov	r3, r7
 8002738:	220c      	movs	r2, #12
 800273a:	4619      	mov	r1, r3
 800273c:	4807      	ldr	r0, [pc, #28]	@ (800275c <MX_TIM2_Init+0xf4>)
 800273e:	f008 fd3d 	bl	800b1bc <HAL_TIM_PWM_ConfigChannel>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 8002748:	f7ff fc8e 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800274c:	4803      	ldr	r0, [pc, #12]	@ (800275c <MX_TIM2_Init+0xf4>)
 800274e:	f000 f97d 	bl	8002a4c <HAL_TIM_MspPostInit>

}
 8002752:	bf00      	nop
 8002754:	3728      	adds	r7, #40	@ 0x28
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	24002428 	.word	0x24002428

08002760 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b08a      	sub	sp, #40	@ 0x28
 8002764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002766:	f107 031c 	add.w	r3, r7, #28
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	605a      	str	r2, [r3, #4]
 8002770:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002772:	463b      	mov	r3, r7
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	605a      	str	r2, [r3, #4]
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	60da      	str	r2, [r3, #12]
 800277e:	611a      	str	r2, [r3, #16]
 8002780:	615a      	str	r2, [r3, #20]
 8002782:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002784:	4b27      	ldr	r3, [pc, #156]	@ (8002824 <MX_TIM3_Init+0xc4>)
 8002786:	4a28      	ldr	r2, [pc, #160]	@ (8002828 <MX_TIM3_Init+0xc8>)
 8002788:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 280-1;
 800278a:	4b26      	ldr	r3, [pc, #152]	@ (8002824 <MX_TIM3_Init+0xc4>)
 800278c:	f240 1217 	movw	r2, #279	@ 0x117
 8002790:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002792:	4b24      	ldr	r3, [pc, #144]	@ (8002824 <MX_TIM3_Init+0xc4>)
 8002794:	2200      	movs	r2, #0
 8002796:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7000;
 8002798:	4b22      	ldr	r3, [pc, #136]	@ (8002824 <MX_TIM3_Init+0xc4>)
 800279a:	f641 3258 	movw	r2, #7000	@ 0x1b58
 800279e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027a0:	4b20      	ldr	r3, [pc, #128]	@ (8002824 <MX_TIM3_Init+0xc4>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80027a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002824 <MX_TIM3_Init+0xc4>)
 80027a8:	2280      	movs	r2, #128	@ 0x80
 80027aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80027ac:	481d      	ldr	r0, [pc, #116]	@ (8002824 <MX_TIM3_Init+0xc4>)
 80027ae:	f008 fb9f 	bl	800aef0 <HAL_TIM_PWM_Init>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 80027b8:	f7ff fc56 	bl	8002068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027bc:	2300      	movs	r3, #0
 80027be:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027c0:	2300      	movs	r3, #0
 80027c2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80027c4:	f107 031c 	add.w	r3, r7, #28
 80027c8:	4619      	mov	r1, r3
 80027ca:	4816      	ldr	r0, [pc, #88]	@ (8002824 <MX_TIM3_Init+0xc4>)
 80027cc:	f009 f9ac 	bl	800bb28 <HAL_TIMEx_MasterConfigSynchronization>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80027d6:	f7ff fc47 	bl	8002068 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027da:	2360      	movs	r3, #96	@ 0x60
 80027dc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80027de:	2300      	movs	r3, #0
 80027e0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027e2:	2300      	movs	r3, #0
 80027e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027e6:	2300      	movs	r3, #0
 80027e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027ea:	463b      	mov	r3, r7
 80027ec:	2200      	movs	r2, #0
 80027ee:	4619      	mov	r1, r3
 80027f0:	480c      	ldr	r0, [pc, #48]	@ (8002824 <MX_TIM3_Init+0xc4>)
 80027f2:	f008 fce3 	bl	800b1bc <HAL_TIM_PWM_ConfigChannel>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 80027fc:	f7ff fc34 	bl	8002068 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002800:	463b      	mov	r3, r7
 8002802:	2204      	movs	r2, #4
 8002804:	4619      	mov	r1, r3
 8002806:	4807      	ldr	r0, [pc, #28]	@ (8002824 <MX_TIM3_Init+0xc4>)
 8002808:	f008 fcd8 	bl	800b1bc <HAL_TIM_PWM_ConfigChannel>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8002812:	f7ff fc29 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002816:	4803      	ldr	r0, [pc, #12]	@ (8002824 <MX_TIM3_Init+0xc4>)
 8002818:	f000 f918 	bl	8002a4c <HAL_TIM_MspPostInit>

}
 800281c:	bf00      	nop
 800281e:	3728      	adds	r7, #40	@ 0x28
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	24002474 	.word	0x24002474
 8002828:	40000400 	.word	0x40000400

0800282c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b08a      	sub	sp, #40	@ 0x28
 8002830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002832:	f107 031c 	add.w	r3, r7, #28
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	605a      	str	r2, [r3, #4]
 800283c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800283e:	463b      	mov	r3, r7
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	609a      	str	r2, [r3, #8]
 8002848:	60da      	str	r2, [r3, #12]
 800284a:	611a      	str	r2, [r3, #16]
 800284c:	615a      	str	r2, [r3, #20]
 800284e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002850:	4b32      	ldr	r3, [pc, #200]	@ (800291c <MX_TIM4_Init+0xf0>)
 8002852:	4a33      	ldr	r2, [pc, #204]	@ (8002920 <MX_TIM4_Init+0xf4>)
 8002854:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 280-1;
 8002856:	4b31      	ldr	r3, [pc, #196]	@ (800291c <MX_TIM4_Init+0xf0>)
 8002858:	f240 1217 	movw	r2, #279	@ 0x117
 800285c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800285e:	4b2f      	ldr	r3, [pc, #188]	@ (800291c <MX_TIM4_Init+0xf0>)
 8002860:	2200      	movs	r2, #0
 8002862:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7000;
 8002864:	4b2d      	ldr	r3, [pc, #180]	@ (800291c <MX_TIM4_Init+0xf0>)
 8002866:	f641 3258 	movw	r2, #7000	@ 0x1b58
 800286a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800286c:	4b2b      	ldr	r3, [pc, #172]	@ (800291c <MX_TIM4_Init+0xf0>)
 800286e:	2200      	movs	r2, #0
 8002870:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002872:	4b2a      	ldr	r3, [pc, #168]	@ (800291c <MX_TIM4_Init+0xf0>)
 8002874:	2280      	movs	r2, #128	@ 0x80
 8002876:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002878:	4828      	ldr	r0, [pc, #160]	@ (800291c <MX_TIM4_Init+0xf0>)
 800287a:	f008 fb39 	bl	800aef0 <HAL_TIM_PWM_Init>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8002884:	f7ff fbf0 	bl	8002068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002888:	2300      	movs	r3, #0
 800288a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800288c:	2300      	movs	r3, #0
 800288e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002890:	f107 031c 	add.w	r3, r7, #28
 8002894:	4619      	mov	r1, r3
 8002896:	4821      	ldr	r0, [pc, #132]	@ (800291c <MX_TIM4_Init+0xf0>)
 8002898:	f009 f946 	bl	800bb28 <HAL_TIMEx_MasterConfigSynchronization>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 80028a2:	f7ff fbe1 	bl	8002068 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028a6:	2360      	movs	r3, #96	@ 0x60
 80028a8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80028aa:	2300      	movs	r3, #0
 80028ac:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028ae:	2300      	movs	r3, #0
 80028b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028b2:	2300      	movs	r3, #0
 80028b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028b6:	463b      	mov	r3, r7
 80028b8:	2200      	movs	r2, #0
 80028ba:	4619      	mov	r1, r3
 80028bc:	4817      	ldr	r0, [pc, #92]	@ (800291c <MX_TIM4_Init+0xf0>)
 80028be:	f008 fc7d 	bl	800b1bc <HAL_TIM_PWM_ConfigChannel>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 80028c8:	f7ff fbce 	bl	8002068 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028cc:	463b      	mov	r3, r7
 80028ce:	2204      	movs	r2, #4
 80028d0:	4619      	mov	r1, r3
 80028d2:	4812      	ldr	r0, [pc, #72]	@ (800291c <MX_TIM4_Init+0xf0>)
 80028d4:	f008 fc72 	bl	800b1bc <HAL_TIM_PWM_ConfigChannel>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 80028de:	f7ff fbc3 	bl	8002068 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80028e2:	463b      	mov	r3, r7
 80028e4:	2208      	movs	r2, #8
 80028e6:	4619      	mov	r1, r3
 80028e8:	480c      	ldr	r0, [pc, #48]	@ (800291c <MX_TIM4_Init+0xf0>)
 80028ea:	f008 fc67 	bl	800b1bc <HAL_TIM_PWM_ConfigChannel>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 80028f4:	f7ff fbb8 	bl	8002068 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80028f8:	463b      	mov	r3, r7
 80028fa:	220c      	movs	r2, #12
 80028fc:	4619      	mov	r1, r3
 80028fe:	4807      	ldr	r0, [pc, #28]	@ (800291c <MX_TIM4_Init+0xf0>)
 8002900:	f008 fc5c 	bl	800b1bc <HAL_TIM_PWM_ConfigChannel>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 800290a:	f7ff fbad 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800290e:	4803      	ldr	r0, [pc, #12]	@ (800291c <MX_TIM4_Init+0xf0>)
 8002910:	f000 f89c 	bl	8002a4c <HAL_TIM_MspPostInit>

}
 8002914:	bf00      	nop
 8002916:	3728      	adds	r7, #40	@ 0x28
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	240024c0 	.word	0x240024c0
 8002920:	40000800 	.word	0x40000800

08002924 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002928:	4b0e      	ldr	r3, [pc, #56]	@ (8002964 <MX_TIM13_Init+0x40>)
 800292a:	4a0f      	ldr	r2, [pc, #60]	@ (8002968 <MX_TIM13_Init+0x44>)
 800292c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 280-1;
 800292e:	4b0d      	ldr	r3, [pc, #52]	@ (8002964 <MX_TIM13_Init+0x40>)
 8002930:	f240 1217 	movw	r2, #279	@ 0x117
 8002934:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002936:	4b0b      	ldr	r3, [pc, #44]	@ (8002964 <MX_TIM13_Init+0x40>)
 8002938:	2200      	movs	r2, #0
 800293a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 800293c:	4b09      	ldr	r3, [pc, #36]	@ (8002964 <MX_TIM13_Init+0x40>)
 800293e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002942:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002944:	4b07      	ldr	r3, [pc, #28]	@ (8002964 <MX_TIM13_Init+0x40>)
 8002946:	2200      	movs	r2, #0
 8002948:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800294a:	4b06      	ldr	r3, [pc, #24]	@ (8002964 <MX_TIM13_Init+0x40>)
 800294c:	2280      	movs	r2, #128	@ 0x80
 800294e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002950:	4804      	ldr	r0, [pc, #16]	@ (8002964 <MX_TIM13_Init+0x40>)
 8002952:	f008 fa76 	bl	800ae42 <HAL_TIM_Base_Init>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 800295c:	f7ff fb84 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002960:	bf00      	nop
 8002962:	bd80      	pop	{r7, pc}
 8002964:	2400250c 	.word	0x2400250c
 8002968:	40001c00 	.word	0x40001c00

0800296c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800296c:	b480      	push	{r7}
 800296e:	b087      	sub	sp, #28
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800297c:	d10f      	bne.n	800299e <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800297e:	4b1f      	ldr	r3, [pc, #124]	@ (80029fc <HAL_TIM_PWM_MspInit+0x90>)
 8002980:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002984:	4a1d      	ldr	r2, [pc, #116]	@ (80029fc <HAL_TIM_PWM_MspInit+0x90>)
 8002986:	f043 0301 	orr.w	r3, r3, #1
 800298a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800298e:	4b1b      	ldr	r3, [pc, #108]	@ (80029fc <HAL_TIM_PWM_MspInit+0x90>)
 8002990:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	617b      	str	r3, [r7, #20]
 800299a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800299c:	e028      	b.n	80029f0 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM3)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a17      	ldr	r2, [pc, #92]	@ (8002a00 <HAL_TIM_PWM_MspInit+0x94>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d10f      	bne.n	80029c8 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029a8:	4b14      	ldr	r3, [pc, #80]	@ (80029fc <HAL_TIM_PWM_MspInit+0x90>)
 80029aa:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80029ae:	4a13      	ldr	r2, [pc, #76]	@ (80029fc <HAL_TIM_PWM_MspInit+0x90>)
 80029b0:	f043 0302 	orr.w	r3, r3, #2
 80029b4:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80029b8:	4b10      	ldr	r3, [pc, #64]	@ (80029fc <HAL_TIM_PWM_MspInit+0x90>)
 80029ba:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	613b      	str	r3, [r7, #16]
 80029c4:	693b      	ldr	r3, [r7, #16]
}
 80029c6:	e013      	b.n	80029f0 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM4)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002a04 <HAL_TIM_PWM_MspInit+0x98>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d10e      	bne.n	80029f0 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80029d2:	4b0a      	ldr	r3, [pc, #40]	@ (80029fc <HAL_TIM_PWM_MspInit+0x90>)
 80029d4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80029d8:	4a08      	ldr	r2, [pc, #32]	@ (80029fc <HAL_TIM_PWM_MspInit+0x90>)
 80029da:	f043 0304 	orr.w	r3, r3, #4
 80029de:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80029e2:	4b06      	ldr	r3, [pc, #24]	@ (80029fc <HAL_TIM_PWM_MspInit+0x90>)
 80029e4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	68fb      	ldr	r3, [r7, #12]
}
 80029f0:	bf00      	nop
 80029f2:	371c      	adds	r7, #28
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	58024400 	.word	0x58024400
 8002a00:	40000400 	.word	0x40000400
 8002a04:	40000800 	.word	0x40000800

08002a08 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a0b      	ldr	r2, [pc, #44]	@ (8002a44 <HAL_TIM_Base_MspInit+0x3c>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d10e      	bne.n	8002a38 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a48 <HAL_TIM_Base_MspInit+0x40>)
 8002a1c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002a20:	4a09      	ldr	r2, [pc, #36]	@ (8002a48 <HAL_TIM_Base_MspInit+0x40>)
 8002a22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a26:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002a2a:	4b07      	ldr	r3, [pc, #28]	@ (8002a48 <HAL_TIM_Base_MspInit+0x40>)
 8002a2c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002a30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8002a38:	bf00      	nop
 8002a3a:	3714      	adds	r7, #20
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	40001c00 	.word	0x40001c00
 8002a48:	58024400 	.word	0x58024400

08002a4c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b08c      	sub	sp, #48	@ 0x30
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a54:	f107 031c 	add.w	r3, r7, #28
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	605a      	str	r2, [r3, #4]
 8002a5e:	609a      	str	r2, [r3, #8]
 8002a60:	60da      	str	r2, [r3, #12]
 8002a62:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a6c:	d13f      	bne.n	8002aee <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a6e:	4b47      	ldr	r3, [pc, #284]	@ (8002b8c <HAL_TIM_MspPostInit+0x140>)
 8002a70:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002a74:	4a45      	ldr	r2, [pc, #276]	@ (8002b8c <HAL_TIM_MspPostInit+0x140>)
 8002a76:	f043 0301 	orr.w	r3, r3, #1
 8002a7a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002a7e:	4b43      	ldr	r3, [pc, #268]	@ (8002b8c <HAL_TIM_MspPostInit+0x140>)
 8002a80:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	61bb      	str	r3, [r7, #24]
 8002a8a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a8c:	4b3f      	ldr	r3, [pc, #252]	@ (8002b8c <HAL_TIM_MspPostInit+0x140>)
 8002a8e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002a92:	4a3e      	ldr	r2, [pc, #248]	@ (8002b8c <HAL_TIM_MspPostInit+0x140>)
 8002a94:	f043 0302 	orr.w	r3, r3, #2
 8002a98:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002a9c:	4b3b      	ldr	r3, [pc, #236]	@ (8002b8c <HAL_TIM_MspPostInit+0x140>)
 8002a9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	617b      	str	r3, [r7, #20]
 8002aa8:	697b      	ldr	r3, [r7, #20]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8002aaa:	f248 030c 	movw	r3, #32780	@ 0x800c
 8002aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002abc:	2301      	movs	r3, #1
 8002abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac0:	f107 031c 	add.w	r3, r7, #28
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4832      	ldr	r0, [pc, #200]	@ (8002b90 <HAL_TIM_MspPostInit+0x144>)
 8002ac8:	f003 ff3e 	bl	8006948 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002acc:	2308      	movs	r3, #8
 8002ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002adc:	2301      	movs	r3, #1
 8002ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ae0:	f107 031c 	add.w	r3, r7, #28
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	482b      	ldr	r0, [pc, #172]	@ (8002b94 <HAL_TIM_MspPostInit+0x148>)
 8002ae8:	f003 ff2e 	bl	8006948 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002aec:	e049      	b.n	8002b82 <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM3)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a29      	ldr	r2, [pc, #164]	@ (8002b98 <HAL_TIM_MspPostInit+0x14c>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d11f      	bne.n	8002b38 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002af8:	4b24      	ldr	r3, [pc, #144]	@ (8002b8c <HAL_TIM_MspPostInit+0x140>)
 8002afa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002afe:	4a23      	ldr	r2, [pc, #140]	@ (8002b8c <HAL_TIM_MspPostInit+0x140>)
 8002b00:	f043 0302 	orr.w	r3, r3, #2
 8002b04:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002b08:	4b20      	ldr	r3, [pc, #128]	@ (8002b8c <HAL_TIM_MspPostInit+0x140>)
 8002b0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	613b      	str	r3, [r7, #16]
 8002b14:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002b16:	2330      	movs	r3, #48	@ 0x30
 8002b18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b22:	2300      	movs	r3, #0
 8002b24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b26:	2302      	movs	r3, #2
 8002b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b2a:	f107 031c 	add.w	r3, r7, #28
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4818      	ldr	r0, [pc, #96]	@ (8002b94 <HAL_TIM_MspPostInit+0x148>)
 8002b32:	f003 ff09 	bl	8006948 <HAL_GPIO_Init>
}
 8002b36:	e024      	b.n	8002b82 <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM4)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a17      	ldr	r2, [pc, #92]	@ (8002b9c <HAL_TIM_MspPostInit+0x150>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d11f      	bne.n	8002b82 <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b42:	4b12      	ldr	r3, [pc, #72]	@ (8002b8c <HAL_TIM_MspPostInit+0x140>)
 8002b44:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002b48:	4a10      	ldr	r2, [pc, #64]	@ (8002b8c <HAL_TIM_MspPostInit+0x140>)
 8002b4a:	f043 0302 	orr.w	r3, r3, #2
 8002b4e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002b52:	4b0e      	ldr	r3, [pc, #56]	@ (8002b8c <HAL_TIM_MspPostInit+0x140>)
 8002b54:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002b60:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b66:	2302      	movs	r3, #2
 8002b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b72:	2302      	movs	r3, #2
 8002b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b76:	f107 031c 	add.w	r3, r7, #28
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	4805      	ldr	r0, [pc, #20]	@ (8002b94 <HAL_TIM_MspPostInit+0x148>)
 8002b7e:	f003 fee3 	bl	8006948 <HAL_GPIO_Init>
}
 8002b82:	bf00      	nop
 8002b84:	3730      	adds	r7, #48	@ 0x30
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	58024400 	.word	0x58024400
 8002b90:	58020000 	.word	0x58020000
 8002b94:	58020400 	.word	0x58020400
 8002b98:	40000400 	.word	0x40000400
 8002b9c:	40000800 	.word	0x40000800

08002ba0 <MX_UART4_Init>:
UART_HandleTypeDef huart6;
DMA_HandleTypeDef hdma_usart1_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002ba4:	4b22      	ldr	r3, [pc, #136]	@ (8002c30 <MX_UART4_Init+0x90>)
 8002ba6:	4a23      	ldr	r2, [pc, #140]	@ (8002c34 <MX_UART4_Init+0x94>)
 8002ba8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002baa:	4b21      	ldr	r3, [pc, #132]	@ (8002c30 <MX_UART4_Init+0x90>)
 8002bac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002bb0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002bb2:	4b1f      	ldr	r3, [pc, #124]	@ (8002c30 <MX_UART4_Init+0x90>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002bb8:	4b1d      	ldr	r3, [pc, #116]	@ (8002c30 <MX_UART4_Init+0x90>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8002c30 <MX_UART4_Init+0x90>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8002c30 <MX_UART4_Init+0x90>)
 8002bc6:	220c      	movs	r2, #12
 8002bc8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bca:	4b19      	ldr	r3, [pc, #100]	@ (8002c30 <MX_UART4_Init+0x90>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bd0:	4b17      	ldr	r3, [pc, #92]	@ (8002c30 <MX_UART4_Init+0x90>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bd6:	4b16      	ldr	r3, [pc, #88]	@ (8002c30 <MX_UART4_Init+0x90>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002bdc:	4b14      	ldr	r3, [pc, #80]	@ (8002c30 <MX_UART4_Init+0x90>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002be2:	4b13      	ldr	r3, [pc, #76]	@ (8002c30 <MX_UART4_Init+0x90>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002be8:	4811      	ldr	r0, [pc, #68]	@ (8002c30 <MX_UART4_Init+0x90>)
 8002bea:	f009 f82b 	bl	800bc44 <HAL_UART_Init>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002bf4:	f7ff fa38 	bl	8002068 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	480d      	ldr	r0, [pc, #52]	@ (8002c30 <MX_UART4_Init+0x90>)
 8002bfc:	f00a ffa1 	bl	800db42 <HAL_UARTEx_SetTxFifoThreshold>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002c06:	f7ff fa2f 	bl	8002068 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	4808      	ldr	r0, [pc, #32]	@ (8002c30 <MX_UART4_Init+0x90>)
 8002c0e:	f00a ffd6 	bl	800dbbe <HAL_UARTEx_SetRxFifoThreshold>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002c18:	f7ff fa26 	bl	8002068 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002c1c:	4804      	ldr	r0, [pc, #16]	@ (8002c30 <MX_UART4_Init+0x90>)
 8002c1e:	f00a ff57 	bl	800dad0 <HAL_UARTEx_DisableFifoMode>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002c28:	f7ff fa1e 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002c2c:	bf00      	nop
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	24002558 	.word	0x24002558
 8002c34:	40004c00 	.word	0x40004c00

08002c38 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c3c:	4b23      	ldr	r3, [pc, #140]	@ (8002ccc <MX_USART1_UART_Init+0x94>)
 8002c3e:	4a24      	ldr	r2, [pc, #144]	@ (8002cd0 <MX_USART1_UART_Init+0x98>)
 8002c40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8002c42:	4b22      	ldr	r3, [pc, #136]	@ (8002ccc <MX_USART1_UART_Init+0x94>)
 8002c44:	4a23      	ldr	r2, [pc, #140]	@ (8002cd4 <MX_USART1_UART_Init+0x9c>)
 8002c46:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8002c48:	4b20      	ldr	r3, [pc, #128]	@ (8002ccc <MX_USART1_UART_Init+0x94>)
 8002c4a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002c4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c50:	4b1e      	ldr	r3, [pc, #120]	@ (8002ccc <MX_USART1_UART_Init+0x94>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8002c56:	4b1d      	ldr	r3, [pc, #116]	@ (8002ccc <MX_USART1_UART_Init+0x94>)
 8002c58:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c5c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c5e:	4b1b      	ldr	r3, [pc, #108]	@ (8002ccc <MX_USART1_UART_Init+0x94>)
 8002c60:	220c      	movs	r2, #12
 8002c62:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c64:	4b19      	ldr	r3, [pc, #100]	@ (8002ccc <MX_USART1_UART_Init+0x94>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c6a:	4b18      	ldr	r3, [pc, #96]	@ (8002ccc <MX_USART1_UART_Init+0x94>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c70:	4b16      	ldr	r3, [pc, #88]	@ (8002ccc <MX_USART1_UART_Init+0x94>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c76:	4b15      	ldr	r3, [pc, #84]	@ (8002ccc <MX_USART1_UART_Init+0x94>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c7c:	4b13      	ldr	r3, [pc, #76]	@ (8002ccc <MX_USART1_UART_Init+0x94>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c82:	4812      	ldr	r0, [pc, #72]	@ (8002ccc <MX_USART1_UART_Init+0x94>)
 8002c84:	f008 ffde 	bl	800bc44 <HAL_UART_Init>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002c8e:	f7ff f9eb 	bl	8002068 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c92:	2100      	movs	r1, #0
 8002c94:	480d      	ldr	r0, [pc, #52]	@ (8002ccc <MX_USART1_UART_Init+0x94>)
 8002c96:	f00a ff54 	bl	800db42 <HAL_UARTEx_SetTxFifoThreshold>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002ca0:	f7ff f9e2 	bl	8002068 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	4809      	ldr	r0, [pc, #36]	@ (8002ccc <MX_USART1_UART_Init+0x94>)
 8002ca8:	f00a ff89 	bl	800dbbe <HAL_UARTEx_SetRxFifoThreshold>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002cb2:	f7ff f9d9 	bl	8002068 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002cb6:	4805      	ldr	r0, [pc, #20]	@ (8002ccc <MX_USART1_UART_Init+0x94>)
 8002cb8:	f00a ff0a 	bl	800dad0 <HAL_UARTEx_DisableFifoMode>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002cc2:	f7ff f9d1 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002cc6:	bf00      	nop
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	240025ec 	.word	0x240025ec
 8002cd0:	40011000 	.word	0x40011000
 8002cd4:	000186a0 	.word	0x000186a0

08002cd8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002cdc:	4b22      	ldr	r3, [pc, #136]	@ (8002d68 <MX_USART6_UART_Init+0x90>)
 8002cde:	4a23      	ldr	r2, [pc, #140]	@ (8002d6c <MX_USART6_UART_Init+0x94>)
 8002ce0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002ce2:	4b21      	ldr	r3, [pc, #132]	@ (8002d68 <MX_USART6_UART_Init+0x90>)
 8002ce4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ce8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002cea:	4b1f      	ldr	r3, [pc, #124]	@ (8002d68 <MX_USART6_UART_Init+0x90>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8002d68 <MX_USART6_UART_Init+0x90>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8002d68 <MX_USART6_UART_Init+0x90>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8002d68 <MX_USART6_UART_Init+0x90>)
 8002cfe:	220c      	movs	r2, #12
 8002d00:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d02:	4b19      	ldr	r3, [pc, #100]	@ (8002d68 <MX_USART6_UART_Init+0x90>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d08:	4b17      	ldr	r3, [pc, #92]	@ (8002d68 <MX_USART6_UART_Init+0x90>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d0e:	4b16      	ldr	r3, [pc, #88]	@ (8002d68 <MX_USART6_UART_Init+0x90>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d14:	4b14      	ldr	r3, [pc, #80]	@ (8002d68 <MX_USART6_UART_Init+0x90>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d1a:	4b13      	ldr	r3, [pc, #76]	@ (8002d68 <MX_USART6_UART_Init+0x90>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002d20:	4811      	ldr	r0, [pc, #68]	@ (8002d68 <MX_USART6_UART_Init+0x90>)
 8002d22:	f008 ff8f 	bl	800bc44 <HAL_UART_Init>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8002d2c:	f7ff f99c 	bl	8002068 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d30:	2100      	movs	r1, #0
 8002d32:	480d      	ldr	r0, [pc, #52]	@ (8002d68 <MX_USART6_UART_Init+0x90>)
 8002d34:	f00a ff05 	bl	800db42 <HAL_UARTEx_SetTxFifoThreshold>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8002d3e:	f7ff f993 	bl	8002068 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d42:	2100      	movs	r1, #0
 8002d44:	4808      	ldr	r0, [pc, #32]	@ (8002d68 <MX_USART6_UART_Init+0x90>)
 8002d46:	f00a ff3a 	bl	800dbbe <HAL_UARTEx_SetRxFifoThreshold>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8002d50:	f7ff f98a 	bl	8002068 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8002d54:	4804      	ldr	r0, [pc, #16]	@ (8002d68 <MX_USART6_UART_Init+0x90>)
 8002d56:	f00a febb 	bl	800dad0 <HAL_UARTEx_DisableFifoMode>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8002d60:	f7ff f982 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002d64:	bf00      	nop
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	24002680 	.word	0x24002680
 8002d6c:	40011400 	.word	0x40011400

08002d70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b0be      	sub	sp, #248	@ 0xf8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d78:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	605a      	str	r2, [r3, #4]
 8002d82:	609a      	str	r2, [r3, #8]
 8002d84:	60da      	str	r2, [r3, #12]
 8002d86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d88:	f107 0320 	add.w	r3, r7, #32
 8002d8c:	22c0      	movs	r2, #192	@ 0xc0
 8002d8e:	2100      	movs	r1, #0
 8002d90:	4618      	mov	r0, r3
 8002d92:	f00f f943 	bl	801201c <memset>
  if(uartHandle->Instance==UART4)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a8e      	ldr	r2, [pc, #568]	@ (8002fd4 <HAL_UART_MspInit+0x264>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d146      	bne.n	8002e2e <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002da0:	f04f 0202 	mov.w	r2, #2
 8002da4:	f04f 0300 	mov.w	r3, #0
 8002da8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002dac:	2300      	movs	r3, #0
 8002dae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002db2:	f107 0320 	add.w	r3, r7, #32
 8002db6:	4618      	mov	r0, r3
 8002db8:	f005 f8bc 	bl	8007f34 <HAL_RCCEx_PeriphCLKConfig>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002dc2:	f7ff f951 	bl	8002068 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002dc6:	4b84      	ldr	r3, [pc, #528]	@ (8002fd8 <HAL_UART_MspInit+0x268>)
 8002dc8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002dcc:	4a82      	ldr	r2, [pc, #520]	@ (8002fd8 <HAL_UART_MspInit+0x268>)
 8002dce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002dd2:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002dd6:	4b80      	ldr	r3, [pc, #512]	@ (8002fd8 <HAL_UART_MspInit+0x268>)
 8002dd8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002ddc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002de0:	61fb      	str	r3, [r7, #28]
 8002de2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de4:	4b7c      	ldr	r3, [pc, #496]	@ (8002fd8 <HAL_UART_MspInit+0x268>)
 8002de6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002dea:	4a7b      	ldr	r2, [pc, #492]	@ (8002fd8 <HAL_UART_MspInit+0x268>)
 8002dec:	f043 0301 	orr.w	r3, r3, #1
 8002df0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002df4:	4b78      	ldr	r3, [pc, #480]	@ (8002fd8 <HAL_UART_MspInit+0x268>)
 8002df6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	61bb      	str	r3, [r7, #24]
 8002e00:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002e02:	2303      	movs	r3, #3
 8002e04:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e08:	2302      	movs	r3, #2
 8002e0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e14:	2300      	movs	r3, #0
 8002e16:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002e1a:	2308      	movs	r3, #8
 8002e1c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e20:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002e24:	4619      	mov	r1, r3
 8002e26:	486d      	ldr	r0, [pc, #436]	@ (8002fdc <HAL_UART_MspInit+0x26c>)
 8002e28:	f003 fd8e 	bl	8006948 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002e2c:	e0ce      	b.n	8002fcc <HAL_UART_MspInit+0x25c>
  else if(uartHandle->Instance==USART1)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a6b      	ldr	r2, [pc, #428]	@ (8002fe0 <HAL_UART_MspInit+0x270>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d17e      	bne.n	8002f36 <HAL_UART_MspInit+0x1c6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002e38:	f04f 0201 	mov.w	r2, #1
 8002e3c:	f04f 0300 	mov.w	r3, #0
 8002e40:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002e44:	2300      	movs	r3, #0
 8002e46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e4a:	f107 0320 	add.w	r3, r7, #32
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f005 f870 	bl	8007f34 <HAL_RCCEx_PeriphCLKConfig>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <HAL_UART_MspInit+0xee>
      Error_Handler();
 8002e5a:	f7ff f905 	bl	8002068 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e5e:	4b5e      	ldr	r3, [pc, #376]	@ (8002fd8 <HAL_UART_MspInit+0x268>)
 8002e60:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002e64:	4a5c      	ldr	r2, [pc, #368]	@ (8002fd8 <HAL_UART_MspInit+0x268>)
 8002e66:	f043 0310 	orr.w	r3, r3, #16
 8002e6a:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8002e6e:	4b5a      	ldr	r3, [pc, #360]	@ (8002fd8 <HAL_UART_MspInit+0x268>)
 8002e70:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002e74:	f003 0310 	and.w	r3, r3, #16
 8002e78:	617b      	str	r3, [r7, #20]
 8002e7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e7c:	4b56      	ldr	r3, [pc, #344]	@ (8002fd8 <HAL_UART_MspInit+0x268>)
 8002e7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002e82:	4a55      	ldr	r2, [pc, #340]	@ (8002fd8 <HAL_UART_MspInit+0x268>)
 8002e84:	f043 0301 	orr.w	r3, r3, #1
 8002e88:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002e8c:	4b52      	ldr	r3, [pc, #328]	@ (8002fd8 <HAL_UART_MspInit+0x268>)
 8002e8e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	613b      	str	r3, [r7, #16]
 8002e98:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|SBUS_RX_Pin;
 8002e9a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002e9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002eb4:	2307      	movs	r3, #7
 8002eb6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eba:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4846      	ldr	r0, [pc, #280]	@ (8002fdc <HAL_UART_MspInit+0x26c>)
 8002ec2:	f003 fd41 	bl	8006948 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8002ec6:	4b47      	ldr	r3, [pc, #284]	@ (8002fe4 <HAL_UART_MspInit+0x274>)
 8002ec8:	4a47      	ldr	r2, [pc, #284]	@ (8002fe8 <HAL_UART_MspInit+0x278>)
 8002eca:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002ecc:	4b45      	ldr	r3, [pc, #276]	@ (8002fe4 <HAL_UART_MspInit+0x274>)
 8002ece:	2229      	movs	r2, #41	@ 0x29
 8002ed0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ed2:	4b44      	ldr	r3, [pc, #272]	@ (8002fe4 <HAL_UART_MspInit+0x274>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ed8:	4b42      	ldr	r3, [pc, #264]	@ (8002fe4 <HAL_UART_MspInit+0x274>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ede:	4b41      	ldr	r3, [pc, #260]	@ (8002fe4 <HAL_UART_MspInit+0x274>)
 8002ee0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ee4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ee6:	4b3f      	ldr	r3, [pc, #252]	@ (8002fe4 <HAL_UART_MspInit+0x274>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002eec:	4b3d      	ldr	r3, [pc, #244]	@ (8002fe4 <HAL_UART_MspInit+0x274>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002ef2:	4b3c      	ldr	r3, [pc, #240]	@ (8002fe4 <HAL_UART_MspInit+0x274>)
 8002ef4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ef8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002efa:	4b3a      	ldr	r3, [pc, #232]	@ (8002fe4 <HAL_UART_MspInit+0x274>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f00:	4b38      	ldr	r3, [pc, #224]	@ (8002fe4 <HAL_UART_MspInit+0x274>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002f06:	4837      	ldr	r0, [pc, #220]	@ (8002fe4 <HAL_UART_MspInit+0x274>)
 8002f08:	f000 fadc 	bl	80034c4 <HAL_DMA_Init>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <HAL_UART_MspInit+0x1a6>
      Error_Handler();
 8002f12:	f7ff f8a9 	bl	8002068 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a32      	ldr	r2, [pc, #200]	@ (8002fe4 <HAL_UART_MspInit+0x274>)
 8002f1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002f1e:	4a31      	ldr	r2, [pc, #196]	@ (8002fe4 <HAL_UART_MspInit+0x274>)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002f24:	2200      	movs	r2, #0
 8002f26:	2100      	movs	r1, #0
 8002f28:	2025      	movs	r0, #37	@ 0x25
 8002f2a:	f000 fa1e 	bl	800336a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f2e:	2025      	movs	r0, #37	@ 0x25
 8002f30:	f000 fa35 	bl	800339e <HAL_NVIC_EnableIRQ>
}
 8002f34:	e04a      	b.n	8002fcc <HAL_UART_MspInit+0x25c>
  else if(uartHandle->Instance==USART6)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a2c      	ldr	r2, [pc, #176]	@ (8002fec <HAL_UART_MspInit+0x27c>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d145      	bne.n	8002fcc <HAL_UART_MspInit+0x25c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002f40:	f04f 0201 	mov.w	r2, #1
 8002f44:	f04f 0300 	mov.w	r3, #0
 8002f48:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f52:	f107 0320 	add.w	r3, r7, #32
 8002f56:	4618      	mov	r0, r3
 8002f58:	f004 ffec 	bl	8007f34 <HAL_RCCEx_PeriphCLKConfig>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <HAL_UART_MspInit+0x1f6>
      Error_Handler();
 8002f62:	f7ff f881 	bl	8002068 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002f66:	4b1c      	ldr	r3, [pc, #112]	@ (8002fd8 <HAL_UART_MspInit+0x268>)
 8002f68:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002f6c:	4a1a      	ldr	r2, [pc, #104]	@ (8002fd8 <HAL_UART_MspInit+0x268>)
 8002f6e:	f043 0320 	orr.w	r3, r3, #32
 8002f72:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8002f76:	4b18      	ldr	r3, [pc, #96]	@ (8002fd8 <HAL_UART_MspInit+0x268>)
 8002f78:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002f7c:	f003 0320 	and.w	r3, r3, #32
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f84:	4b14      	ldr	r3, [pc, #80]	@ (8002fd8 <HAL_UART_MspInit+0x268>)
 8002f86:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002f8a:	4a13      	ldr	r2, [pc, #76]	@ (8002fd8 <HAL_UART_MspInit+0x268>)
 8002f8c:	f043 0304 	orr.w	r3, r3, #4
 8002f90:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002f94:	4b10      	ldr	r3, [pc, #64]	@ (8002fd8 <HAL_UART_MspInit+0x268>)
 8002f96:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002f9a:	f003 0304 	and.w	r3, r3, #4
 8002f9e:	60bb      	str	r3, [r7, #8]
 8002fa0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002fa2:	23c0      	movs	r3, #192	@ 0xc0
 8002fa4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa8:	2302      	movs	r3, #2
 8002faa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8002fba:	2307      	movs	r3, #7
 8002fbc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fc0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	480a      	ldr	r0, [pc, #40]	@ (8002ff0 <HAL_UART_MspInit+0x280>)
 8002fc8:	f003 fcbe 	bl	8006948 <HAL_GPIO_Init>
}
 8002fcc:	bf00      	nop
 8002fce:	37f8      	adds	r7, #248	@ 0xf8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40004c00 	.word	0x40004c00
 8002fd8:	58024400 	.word	0x58024400
 8002fdc:	58020000 	.word	0x58020000
 8002fe0:	40011000 	.word	0x40011000
 8002fe4:	24002714 	.word	0x24002714
 8002fe8:	40020010 	.word	0x40020010
 8002fec:	40011400 	.word	0x40011400
 8002ff0:	58020800 	.word	0x58020800

08002ff4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ff4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800302c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ff8:	f7ff fabe 	bl	8002578 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ffc:	480c      	ldr	r0, [pc, #48]	@ (8003030 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ffe:	490d      	ldr	r1, [pc, #52]	@ (8003034 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003000:	4a0d      	ldr	r2, [pc, #52]	@ (8003038 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003002:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003004:	e002      	b.n	800300c <LoopCopyDataInit>

08003006 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003006:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003008:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800300a:	3304      	adds	r3, #4

0800300c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 800300c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800300e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003010:	d3f9      	bcc.n	8003006 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003012:	4a0a      	ldr	r2, [pc, #40]	@ (800303c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003014:	4c0a      	ldr	r4, [pc, #40]	@ (8003040 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003016:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003018:	e001      	b.n	800301e <LoopFillZerobss>

0800301a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800301a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800301c:	3204      	adds	r2, #4

0800301e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800301e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003020:	d3fb      	bcc.n	800301a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003022:	f00f f809 	bl	8012038 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003026:	f7fe ff29 	bl	8001e7c <main>
  bx  lr
 800302a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800302c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8003030:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003034:	240000bc 	.word	0x240000bc
  ldr r2, =_sidata
 8003038:	08013120 	.word	0x08013120
  ldr r2, =_sbss
 800303c:	240000bc 	.word	0x240000bc
  ldr r4, =_ebss
 8003040:	24002b0c 	.word	0x24002b0c

08003044 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003044:	e7fe      	b.n	8003044 <ADC_IRQHandler>
	...

08003048 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800304e:	2003      	movs	r0, #3
 8003050:	f000 f980 	bl	8003354 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003054:	f004 fd98 	bl	8007b88 <HAL_RCC_GetSysClockFreq>
 8003058:	4602      	mov	r2, r0
 800305a:	4b15      	ldr	r3, [pc, #84]	@ (80030b0 <HAL_Init+0x68>)
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	0a1b      	lsrs	r3, r3, #8
 8003060:	f003 030f 	and.w	r3, r3, #15
 8003064:	4913      	ldr	r1, [pc, #76]	@ (80030b4 <HAL_Init+0x6c>)
 8003066:	5ccb      	ldrb	r3, [r1, r3]
 8003068:	f003 031f 	and.w	r3, r3, #31
 800306c:	fa22 f303 	lsr.w	r3, r2, r3
 8003070:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003072:	4b0f      	ldr	r3, [pc, #60]	@ (80030b0 <HAL_Init+0x68>)
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	f003 030f 	and.w	r3, r3, #15
 800307a:	4a0e      	ldr	r2, [pc, #56]	@ (80030b4 <HAL_Init+0x6c>)
 800307c:	5cd3      	ldrb	r3, [r2, r3]
 800307e:	f003 031f 	and.w	r3, r3, #31
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	fa22 f303 	lsr.w	r3, r2, r3
 8003088:	4a0b      	ldr	r2, [pc, #44]	@ (80030b8 <HAL_Init+0x70>)
 800308a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800308c:	4a0b      	ldr	r2, [pc, #44]	@ (80030bc <HAL_Init+0x74>)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003092:	200f      	movs	r0, #15
 8003094:	f000 f814 	bl	80030c0 <HAL_InitTick>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e002      	b.n	80030a8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80030a2:	f7ff f9f3 	bl	800248c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	58024400 	.word	0x58024400
 80030b4:	08012400 	.word	0x08012400
 80030b8:	24000048 	.word	0x24000048
 80030bc:	24000044 	.word	0x24000044

080030c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80030c8:	4b15      	ldr	r3, [pc, #84]	@ (8003120 <HAL_InitTick+0x60>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e021      	b.n	8003118 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80030d4:	4b13      	ldr	r3, [pc, #76]	@ (8003124 <HAL_InitTick+0x64>)
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	4b11      	ldr	r3, [pc, #68]	@ (8003120 <HAL_InitTick+0x60>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	4619      	mov	r1, r3
 80030de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80030e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ea:	4618      	mov	r0, r3
 80030ec:	f000 f965 	bl	80033ba <HAL_SYSTICK_Config>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e00e      	b.n	8003118 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b0f      	cmp	r3, #15
 80030fe:	d80a      	bhi.n	8003116 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003100:	2200      	movs	r2, #0
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	f04f 30ff 	mov.w	r0, #4294967295
 8003108:	f000 f92f 	bl	800336a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800310c:	4a06      	ldr	r2, [pc, #24]	@ (8003128 <HAL_InitTick+0x68>)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003112:	2300      	movs	r3, #0
 8003114:	e000      	b.n	8003118 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
}
 8003118:	4618      	mov	r0, r3
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	24000050 	.word	0x24000050
 8003124:	24000044 	.word	0x24000044
 8003128:	2400004c 	.word	0x2400004c

0800312c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003130:	4b06      	ldr	r3, [pc, #24]	@ (800314c <HAL_IncTick+0x20>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	461a      	mov	r2, r3
 8003136:	4b06      	ldr	r3, [pc, #24]	@ (8003150 <HAL_IncTick+0x24>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4413      	add	r3, r2
 800313c:	4a04      	ldr	r2, [pc, #16]	@ (8003150 <HAL_IncTick+0x24>)
 800313e:	6013      	str	r3, [r2, #0]
}
 8003140:	bf00      	nop
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	24000050 	.word	0x24000050
 8003150:	2400278c 	.word	0x2400278c

08003154 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  return uwTick;
 8003158:	4b03      	ldr	r3, [pc, #12]	@ (8003168 <HAL_GetTick+0x14>)
 800315a:	681b      	ldr	r3, [r3, #0]
}
 800315c:	4618      	mov	r0, r3
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	2400278c 	.word	0x2400278c

0800316c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003174:	f7ff ffee 	bl	8003154 <HAL_GetTick>
 8003178:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003184:	d005      	beq.n	8003192 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003186:	4b0a      	ldr	r3, [pc, #40]	@ (80031b0 <HAL_Delay+0x44>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	461a      	mov	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4413      	add	r3, r2
 8003190:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003192:	bf00      	nop
 8003194:	f7ff ffde 	bl	8003154 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d8f7      	bhi.n	8003194 <HAL_Delay+0x28>
  {
  }
}
 80031a4:	bf00      	nop
 80031a6:	bf00      	nop
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	24000050 	.word	0x24000050

080031b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031c4:	4b0b      	ldr	r3, [pc, #44]	@ (80031f4 <__NVIC_SetPriorityGrouping+0x40>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031d0:	4013      	ands	r3, r2
 80031d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80031dc:	4b06      	ldr	r3, [pc, #24]	@ (80031f8 <__NVIC_SetPriorityGrouping+0x44>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031e2:	4a04      	ldr	r2, [pc, #16]	@ (80031f4 <__NVIC_SetPriorityGrouping+0x40>)
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	60d3      	str	r3, [r2, #12]
}
 80031e8:	bf00      	nop
 80031ea:	3714      	adds	r7, #20
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	e000ed00 	.word	0xe000ed00
 80031f8:	05fa0000 	.word	0x05fa0000

080031fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003200:	4b04      	ldr	r3, [pc, #16]	@ (8003214 <__NVIC_GetPriorityGrouping+0x18>)
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	0a1b      	lsrs	r3, r3, #8
 8003206:	f003 0307 	and.w	r3, r3, #7
}
 800320a:	4618      	mov	r0, r3
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	e000ed00 	.word	0xe000ed00

08003218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	4603      	mov	r3, r0
 8003220:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003222:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003226:	2b00      	cmp	r3, #0
 8003228:	db0b      	blt.n	8003242 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800322a:	88fb      	ldrh	r3, [r7, #6]
 800322c:	f003 021f 	and.w	r2, r3, #31
 8003230:	4907      	ldr	r1, [pc, #28]	@ (8003250 <__NVIC_EnableIRQ+0x38>)
 8003232:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003236:	095b      	lsrs	r3, r3, #5
 8003238:	2001      	movs	r0, #1
 800323a:	fa00 f202 	lsl.w	r2, r0, r2
 800323e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	e000e100 	.word	0xe000e100

08003254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	4603      	mov	r3, r0
 800325c:	6039      	str	r1, [r7, #0]
 800325e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003260:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003264:	2b00      	cmp	r3, #0
 8003266:	db0a      	blt.n	800327e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	b2da      	uxtb	r2, r3
 800326c:	490c      	ldr	r1, [pc, #48]	@ (80032a0 <__NVIC_SetPriority+0x4c>)
 800326e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003272:	0112      	lsls	r2, r2, #4
 8003274:	b2d2      	uxtb	r2, r2
 8003276:	440b      	add	r3, r1
 8003278:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800327c:	e00a      	b.n	8003294 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	b2da      	uxtb	r2, r3
 8003282:	4908      	ldr	r1, [pc, #32]	@ (80032a4 <__NVIC_SetPriority+0x50>)
 8003284:	88fb      	ldrh	r3, [r7, #6]
 8003286:	f003 030f 	and.w	r3, r3, #15
 800328a:	3b04      	subs	r3, #4
 800328c:	0112      	lsls	r2, r2, #4
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	440b      	add	r3, r1
 8003292:	761a      	strb	r2, [r3, #24]
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr
 80032a0:	e000e100 	.word	0xe000e100
 80032a4:	e000ed00 	.word	0xe000ed00

080032a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b089      	sub	sp, #36	@ 0x24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	f1c3 0307 	rsb	r3, r3, #7
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	bf28      	it	cs
 80032c6:	2304      	movcs	r3, #4
 80032c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	3304      	adds	r3, #4
 80032ce:	2b06      	cmp	r3, #6
 80032d0:	d902      	bls.n	80032d8 <NVIC_EncodePriority+0x30>
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	3b03      	subs	r3, #3
 80032d6:	e000      	b.n	80032da <NVIC_EncodePriority+0x32>
 80032d8:	2300      	movs	r3, #0
 80032da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032dc:	f04f 32ff 	mov.w	r2, #4294967295
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	fa02 f303 	lsl.w	r3, r2, r3
 80032e6:	43da      	mvns	r2, r3
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	401a      	ands	r2, r3
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032f0:	f04f 31ff 	mov.w	r1, #4294967295
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	fa01 f303 	lsl.w	r3, r1, r3
 80032fa:	43d9      	mvns	r1, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003300:	4313      	orrs	r3, r2
         );
}
 8003302:	4618      	mov	r0, r3
 8003304:	3724      	adds	r7, #36	@ 0x24
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
	...

08003310 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3b01      	subs	r3, #1
 800331c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003320:	d301      	bcc.n	8003326 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003322:	2301      	movs	r3, #1
 8003324:	e00f      	b.n	8003346 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003326:	4a0a      	ldr	r2, [pc, #40]	@ (8003350 <SysTick_Config+0x40>)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3b01      	subs	r3, #1
 800332c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800332e:	210f      	movs	r1, #15
 8003330:	f04f 30ff 	mov.w	r0, #4294967295
 8003334:	f7ff ff8e 	bl	8003254 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003338:	4b05      	ldr	r3, [pc, #20]	@ (8003350 <SysTick_Config+0x40>)
 800333a:	2200      	movs	r2, #0
 800333c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800333e:	4b04      	ldr	r3, [pc, #16]	@ (8003350 <SysTick_Config+0x40>)
 8003340:	2207      	movs	r2, #7
 8003342:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	e000e010 	.word	0xe000e010

08003354 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f7ff ff29 	bl	80031b4 <__NVIC_SetPriorityGrouping>
}
 8003362:	bf00      	nop
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b086      	sub	sp, #24
 800336e:	af00      	add	r7, sp, #0
 8003370:	4603      	mov	r3, r0
 8003372:	60b9      	str	r1, [r7, #8]
 8003374:	607a      	str	r2, [r7, #4]
 8003376:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003378:	f7ff ff40 	bl	80031fc <__NVIC_GetPriorityGrouping>
 800337c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	68b9      	ldr	r1, [r7, #8]
 8003382:	6978      	ldr	r0, [r7, #20]
 8003384:	f7ff ff90 	bl	80032a8 <NVIC_EncodePriority>
 8003388:	4602      	mov	r2, r0
 800338a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800338e:	4611      	mov	r1, r2
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff ff5f 	bl	8003254 <__NVIC_SetPriority>
}
 8003396:	bf00      	nop
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b082      	sub	sp, #8
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	4603      	mov	r3, r0
 80033a6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff ff33 	bl	8003218 <__NVIC_EnableIRQ>
}
 80033b2:	bf00      	nop
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b082      	sub	sp, #8
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7ff ffa4 	bl	8003310 <SysTick_Config>
 80033c8:	4603      	mov	r3, r0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
	...

080033d4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80033d8:	f3bf 8f5f 	dmb	sy
}
 80033dc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80033de:	4b07      	ldr	r3, [pc, #28]	@ (80033fc <HAL_MPU_Disable+0x28>)
 80033e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e2:	4a06      	ldr	r2, [pc, #24]	@ (80033fc <HAL_MPU_Disable+0x28>)
 80033e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033e8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80033ea:	4b05      	ldr	r3, [pc, #20]	@ (8003400 <HAL_MPU_Disable+0x2c>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	605a      	str	r2, [r3, #4]
}
 80033f0:	bf00      	nop
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	e000ed00 	.word	0xe000ed00
 8003400:	e000ed90 	.word	0xe000ed90

08003404 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800340c:	4a0b      	ldr	r2, [pc, #44]	@ (800343c <HAL_MPU_Enable+0x38>)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f043 0301 	orr.w	r3, r3, #1
 8003414:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003416:	4b0a      	ldr	r3, [pc, #40]	@ (8003440 <HAL_MPU_Enable+0x3c>)
 8003418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341a:	4a09      	ldr	r2, [pc, #36]	@ (8003440 <HAL_MPU_Enable+0x3c>)
 800341c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003420:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003422:	f3bf 8f4f 	dsb	sy
}
 8003426:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003428:	f3bf 8f6f 	isb	sy
}
 800342c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800342e:	bf00      	nop
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	e000ed90 	.word	0xe000ed90
 8003440:	e000ed00 	.word	0xe000ed00

08003444 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	785a      	ldrb	r2, [r3, #1]
 8003450:	4b1b      	ldr	r3, [pc, #108]	@ (80034c0 <HAL_MPU_ConfigRegion+0x7c>)
 8003452:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003454:	4b1a      	ldr	r3, [pc, #104]	@ (80034c0 <HAL_MPU_ConfigRegion+0x7c>)
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	4a19      	ldr	r2, [pc, #100]	@ (80034c0 <HAL_MPU_ConfigRegion+0x7c>)
 800345a:	f023 0301 	bic.w	r3, r3, #1
 800345e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003460:	4a17      	ldr	r2, [pc, #92]	@ (80034c0 <HAL_MPU_ConfigRegion+0x7c>)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	7b1b      	ldrb	r3, [r3, #12]
 800346c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	7adb      	ldrb	r3, [r3, #11]
 8003472:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003474:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	7a9b      	ldrb	r3, [r3, #10]
 800347a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800347c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	7b5b      	ldrb	r3, [r3, #13]
 8003482:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003484:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	7b9b      	ldrb	r3, [r3, #14]
 800348a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800348c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	7bdb      	ldrb	r3, [r3, #15]
 8003492:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003494:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	7a5b      	ldrb	r3, [r3, #9]
 800349a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800349c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	7a1b      	ldrb	r3, [r3, #8]
 80034a2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80034a4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	7812      	ldrb	r2, [r2, #0]
 80034aa:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80034ac:	4a04      	ldr	r2, [pc, #16]	@ (80034c0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80034ae:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80034b0:	6113      	str	r3, [r2, #16]
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	e000ed90 	.word	0xe000ed90

080034c4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80034cc:	f7ff fe42 	bl	8003154 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e37d      	b.n	8003bd8 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a66      	ldr	r2, [pc, #408]	@ (800367c <HAL_DMA_Init+0x1b8>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d04a      	beq.n	800357c <HAL_DMA_Init+0xb8>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a65      	ldr	r2, [pc, #404]	@ (8003680 <HAL_DMA_Init+0x1bc>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d045      	beq.n	800357c <HAL_DMA_Init+0xb8>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a63      	ldr	r2, [pc, #396]	@ (8003684 <HAL_DMA_Init+0x1c0>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d040      	beq.n	800357c <HAL_DMA_Init+0xb8>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a62      	ldr	r2, [pc, #392]	@ (8003688 <HAL_DMA_Init+0x1c4>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d03b      	beq.n	800357c <HAL_DMA_Init+0xb8>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a60      	ldr	r2, [pc, #384]	@ (800368c <HAL_DMA_Init+0x1c8>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d036      	beq.n	800357c <HAL_DMA_Init+0xb8>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a5f      	ldr	r2, [pc, #380]	@ (8003690 <HAL_DMA_Init+0x1cc>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d031      	beq.n	800357c <HAL_DMA_Init+0xb8>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a5d      	ldr	r2, [pc, #372]	@ (8003694 <HAL_DMA_Init+0x1d0>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d02c      	beq.n	800357c <HAL_DMA_Init+0xb8>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a5c      	ldr	r2, [pc, #368]	@ (8003698 <HAL_DMA_Init+0x1d4>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d027      	beq.n	800357c <HAL_DMA_Init+0xb8>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a5a      	ldr	r2, [pc, #360]	@ (800369c <HAL_DMA_Init+0x1d8>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d022      	beq.n	800357c <HAL_DMA_Init+0xb8>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a59      	ldr	r2, [pc, #356]	@ (80036a0 <HAL_DMA_Init+0x1dc>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d01d      	beq.n	800357c <HAL_DMA_Init+0xb8>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a57      	ldr	r2, [pc, #348]	@ (80036a4 <HAL_DMA_Init+0x1e0>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d018      	beq.n	800357c <HAL_DMA_Init+0xb8>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a56      	ldr	r2, [pc, #344]	@ (80036a8 <HAL_DMA_Init+0x1e4>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d013      	beq.n	800357c <HAL_DMA_Init+0xb8>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a54      	ldr	r2, [pc, #336]	@ (80036ac <HAL_DMA_Init+0x1e8>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d00e      	beq.n	800357c <HAL_DMA_Init+0xb8>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a53      	ldr	r2, [pc, #332]	@ (80036b0 <HAL_DMA_Init+0x1ec>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d009      	beq.n	800357c <HAL_DMA_Init+0xb8>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a51      	ldr	r2, [pc, #324]	@ (80036b4 <HAL_DMA_Init+0x1f0>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d004      	beq.n	800357c <HAL_DMA_Init+0xb8>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a50      	ldr	r2, [pc, #320]	@ (80036b8 <HAL_DMA_Init+0x1f4>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d101      	bne.n	8003580 <HAL_DMA_Init+0xbc>
 800357c:	2301      	movs	r3, #1
 800357e:	e000      	b.n	8003582 <HAL_DMA_Init+0xbe>
 8003580:	2300      	movs	r3, #0
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 813c 	beq.w	8003800 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2202      	movs	r2, #2
 800358c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a37      	ldr	r2, [pc, #220]	@ (800367c <HAL_DMA_Init+0x1b8>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d04a      	beq.n	8003638 <HAL_DMA_Init+0x174>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a36      	ldr	r2, [pc, #216]	@ (8003680 <HAL_DMA_Init+0x1bc>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d045      	beq.n	8003638 <HAL_DMA_Init+0x174>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a34      	ldr	r2, [pc, #208]	@ (8003684 <HAL_DMA_Init+0x1c0>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d040      	beq.n	8003638 <HAL_DMA_Init+0x174>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a33      	ldr	r2, [pc, #204]	@ (8003688 <HAL_DMA_Init+0x1c4>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d03b      	beq.n	8003638 <HAL_DMA_Init+0x174>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a31      	ldr	r2, [pc, #196]	@ (800368c <HAL_DMA_Init+0x1c8>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d036      	beq.n	8003638 <HAL_DMA_Init+0x174>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a30      	ldr	r2, [pc, #192]	@ (8003690 <HAL_DMA_Init+0x1cc>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d031      	beq.n	8003638 <HAL_DMA_Init+0x174>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a2e      	ldr	r2, [pc, #184]	@ (8003694 <HAL_DMA_Init+0x1d0>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d02c      	beq.n	8003638 <HAL_DMA_Init+0x174>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a2d      	ldr	r2, [pc, #180]	@ (8003698 <HAL_DMA_Init+0x1d4>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d027      	beq.n	8003638 <HAL_DMA_Init+0x174>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a2b      	ldr	r2, [pc, #172]	@ (800369c <HAL_DMA_Init+0x1d8>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d022      	beq.n	8003638 <HAL_DMA_Init+0x174>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a2a      	ldr	r2, [pc, #168]	@ (80036a0 <HAL_DMA_Init+0x1dc>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d01d      	beq.n	8003638 <HAL_DMA_Init+0x174>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a28      	ldr	r2, [pc, #160]	@ (80036a4 <HAL_DMA_Init+0x1e0>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d018      	beq.n	8003638 <HAL_DMA_Init+0x174>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a27      	ldr	r2, [pc, #156]	@ (80036a8 <HAL_DMA_Init+0x1e4>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d013      	beq.n	8003638 <HAL_DMA_Init+0x174>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a25      	ldr	r2, [pc, #148]	@ (80036ac <HAL_DMA_Init+0x1e8>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d00e      	beq.n	8003638 <HAL_DMA_Init+0x174>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a24      	ldr	r2, [pc, #144]	@ (80036b0 <HAL_DMA_Init+0x1ec>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d009      	beq.n	8003638 <HAL_DMA_Init+0x174>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a22      	ldr	r2, [pc, #136]	@ (80036b4 <HAL_DMA_Init+0x1f0>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d004      	beq.n	8003638 <HAL_DMA_Init+0x174>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a21      	ldr	r2, [pc, #132]	@ (80036b8 <HAL_DMA_Init+0x1f4>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d108      	bne.n	800364a <HAL_DMA_Init+0x186>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 0201 	bic.w	r2, r2, #1
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	e007      	b.n	800365a <HAL_DMA_Init+0x196>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0201 	bic.w	r2, r2, #1
 8003658:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800365a:	e02f      	b.n	80036bc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800365c:	f7ff fd7a 	bl	8003154 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b05      	cmp	r3, #5
 8003668:	d928      	bls.n	80036bc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2220      	movs	r2, #32
 800366e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2203      	movs	r2, #3
 8003674:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e2ad      	b.n	8003bd8 <HAL_DMA_Init+0x714>
 800367c:	40020010 	.word	0x40020010
 8003680:	40020028 	.word	0x40020028
 8003684:	40020040 	.word	0x40020040
 8003688:	40020058 	.word	0x40020058
 800368c:	40020070 	.word	0x40020070
 8003690:	40020088 	.word	0x40020088
 8003694:	400200a0 	.word	0x400200a0
 8003698:	400200b8 	.word	0x400200b8
 800369c:	40020410 	.word	0x40020410
 80036a0:	40020428 	.word	0x40020428
 80036a4:	40020440 	.word	0x40020440
 80036a8:	40020458 	.word	0x40020458
 80036ac:	40020470 	.word	0x40020470
 80036b0:	40020488 	.word	0x40020488
 80036b4:	400204a0 	.word	0x400204a0
 80036b8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1c8      	bne.n	800365c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	4b73      	ldr	r3, [pc, #460]	@ (80038a4 <HAL_DMA_Init+0x3e0>)
 80036d6:	4013      	ands	r3, r2
 80036d8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80036e2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036ee:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036fa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	4313      	orrs	r3, r2
 8003706:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370c:	2b04      	cmp	r3, #4
 800370e:	d107      	bne.n	8003720 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003718:	4313      	orrs	r3, r2
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	4313      	orrs	r3, r2
 800371e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2b28      	cmp	r3, #40	@ 0x28
 8003726:	d903      	bls.n	8003730 <HAL_DMA_Init+0x26c>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	2b2e      	cmp	r3, #46	@ 0x2e
 800372e:	d91f      	bls.n	8003770 <HAL_DMA_Init+0x2ac>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	2b3e      	cmp	r3, #62	@ 0x3e
 8003736:	d903      	bls.n	8003740 <HAL_DMA_Init+0x27c>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	2b42      	cmp	r3, #66	@ 0x42
 800373e:	d917      	bls.n	8003770 <HAL_DMA_Init+0x2ac>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	2b46      	cmp	r3, #70	@ 0x46
 8003746:	d903      	bls.n	8003750 <HAL_DMA_Init+0x28c>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	2b48      	cmp	r3, #72	@ 0x48
 800374e:	d90f      	bls.n	8003770 <HAL_DMA_Init+0x2ac>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2b4e      	cmp	r3, #78	@ 0x4e
 8003756:	d903      	bls.n	8003760 <HAL_DMA_Init+0x29c>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	2b52      	cmp	r3, #82	@ 0x52
 800375e:	d907      	bls.n	8003770 <HAL_DMA_Init+0x2ac>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	2b73      	cmp	r3, #115	@ 0x73
 8003766:	d905      	bls.n	8003774 <HAL_DMA_Init+0x2b0>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	2b77      	cmp	r3, #119	@ 0x77
 800376e:	d801      	bhi.n	8003774 <HAL_DMA_Init+0x2b0>
 8003770:	2301      	movs	r3, #1
 8003772:	e000      	b.n	8003776 <HAL_DMA_Init+0x2b2>
 8003774:	2300      	movs	r3, #0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003780:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f023 0307 	bic.w	r3, r3, #7
 8003798:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a8:	2b04      	cmp	r3, #4
 80037aa:	d117      	bne.n	80037dc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00e      	beq.n	80037dc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f002 fbd4 	bl	8005f6c <DMA_CheckFifoParam>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d008      	beq.n	80037dc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2240      	movs	r2, #64	@ 0x40
 80037ce:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e1fd      	b.n	8003bd8 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f002 fb0f 	bl	8005e08 <DMA_CalcBaseAndBitshift>
 80037ea:	4603      	mov	r3, r0
 80037ec:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037f2:	f003 031f 	and.w	r3, r3, #31
 80037f6:	223f      	movs	r2, #63	@ 0x3f
 80037f8:	409a      	lsls	r2, r3
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	609a      	str	r2, [r3, #8]
 80037fe:	e0fd      	b.n	80039fc <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a28      	ldr	r2, [pc, #160]	@ (80038a8 <HAL_DMA_Init+0x3e4>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d04a      	beq.n	80038a0 <HAL_DMA_Init+0x3dc>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a27      	ldr	r2, [pc, #156]	@ (80038ac <HAL_DMA_Init+0x3e8>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d045      	beq.n	80038a0 <HAL_DMA_Init+0x3dc>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a25      	ldr	r2, [pc, #148]	@ (80038b0 <HAL_DMA_Init+0x3ec>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d040      	beq.n	80038a0 <HAL_DMA_Init+0x3dc>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a24      	ldr	r2, [pc, #144]	@ (80038b4 <HAL_DMA_Init+0x3f0>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d03b      	beq.n	80038a0 <HAL_DMA_Init+0x3dc>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a22      	ldr	r2, [pc, #136]	@ (80038b8 <HAL_DMA_Init+0x3f4>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d036      	beq.n	80038a0 <HAL_DMA_Init+0x3dc>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a21      	ldr	r2, [pc, #132]	@ (80038bc <HAL_DMA_Init+0x3f8>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d031      	beq.n	80038a0 <HAL_DMA_Init+0x3dc>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a1f      	ldr	r2, [pc, #124]	@ (80038c0 <HAL_DMA_Init+0x3fc>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d02c      	beq.n	80038a0 <HAL_DMA_Init+0x3dc>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a1e      	ldr	r2, [pc, #120]	@ (80038c4 <HAL_DMA_Init+0x400>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d027      	beq.n	80038a0 <HAL_DMA_Init+0x3dc>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a1c      	ldr	r2, [pc, #112]	@ (80038c8 <HAL_DMA_Init+0x404>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d022      	beq.n	80038a0 <HAL_DMA_Init+0x3dc>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a1b      	ldr	r2, [pc, #108]	@ (80038cc <HAL_DMA_Init+0x408>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d01d      	beq.n	80038a0 <HAL_DMA_Init+0x3dc>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a19      	ldr	r2, [pc, #100]	@ (80038d0 <HAL_DMA_Init+0x40c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d018      	beq.n	80038a0 <HAL_DMA_Init+0x3dc>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a18      	ldr	r2, [pc, #96]	@ (80038d4 <HAL_DMA_Init+0x410>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d013      	beq.n	80038a0 <HAL_DMA_Init+0x3dc>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a16      	ldr	r2, [pc, #88]	@ (80038d8 <HAL_DMA_Init+0x414>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d00e      	beq.n	80038a0 <HAL_DMA_Init+0x3dc>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a15      	ldr	r2, [pc, #84]	@ (80038dc <HAL_DMA_Init+0x418>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d009      	beq.n	80038a0 <HAL_DMA_Init+0x3dc>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a13      	ldr	r2, [pc, #76]	@ (80038e0 <HAL_DMA_Init+0x41c>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d004      	beq.n	80038a0 <HAL_DMA_Init+0x3dc>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a12      	ldr	r2, [pc, #72]	@ (80038e4 <HAL_DMA_Init+0x420>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d123      	bne.n	80038e8 <HAL_DMA_Init+0x424>
 80038a0:	2301      	movs	r3, #1
 80038a2:	e022      	b.n	80038ea <HAL_DMA_Init+0x426>
 80038a4:	fe10803f 	.word	0xfe10803f
 80038a8:	48022c08 	.word	0x48022c08
 80038ac:	48022c1c 	.word	0x48022c1c
 80038b0:	48022c30 	.word	0x48022c30
 80038b4:	48022c44 	.word	0x48022c44
 80038b8:	48022c58 	.word	0x48022c58
 80038bc:	48022c6c 	.word	0x48022c6c
 80038c0:	48022c80 	.word	0x48022c80
 80038c4:	48022c94 	.word	0x48022c94
 80038c8:	58025408 	.word	0x58025408
 80038cc:	5802541c 	.word	0x5802541c
 80038d0:	58025430 	.word	0x58025430
 80038d4:	58025444 	.word	0x58025444
 80038d8:	58025458 	.word	0x58025458
 80038dc:	5802546c 	.word	0x5802546c
 80038e0:	58025480 	.word	0x58025480
 80038e4:	58025494 	.word	0x58025494
 80038e8:	2300      	movs	r3, #0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d07d      	beq.n	80039ea <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a7f      	ldr	r2, [pc, #508]	@ (8003af0 <HAL_DMA_Init+0x62c>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d021      	beq.n	800393c <HAL_DMA_Init+0x478>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a7d      	ldr	r2, [pc, #500]	@ (8003af4 <HAL_DMA_Init+0x630>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d01c      	beq.n	800393c <HAL_DMA_Init+0x478>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a7c      	ldr	r2, [pc, #496]	@ (8003af8 <HAL_DMA_Init+0x634>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d017      	beq.n	800393c <HAL_DMA_Init+0x478>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a7a      	ldr	r2, [pc, #488]	@ (8003afc <HAL_DMA_Init+0x638>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d012      	beq.n	800393c <HAL_DMA_Init+0x478>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a79      	ldr	r2, [pc, #484]	@ (8003b00 <HAL_DMA_Init+0x63c>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d00d      	beq.n	800393c <HAL_DMA_Init+0x478>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a77      	ldr	r2, [pc, #476]	@ (8003b04 <HAL_DMA_Init+0x640>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d008      	beq.n	800393c <HAL_DMA_Init+0x478>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a76      	ldr	r2, [pc, #472]	@ (8003b08 <HAL_DMA_Init+0x644>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d003      	beq.n	800393c <HAL_DMA_Init+0x478>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a74      	ldr	r2, [pc, #464]	@ (8003b0c <HAL_DMA_Init+0x648>)
 800393a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2202      	movs	r2, #2
 8003940:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	4b6e      	ldr	r3, [pc, #440]	@ (8003b10 <HAL_DMA_Init+0x64c>)
 8003958:	4013      	ands	r3, r2
 800395a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	2b40      	cmp	r3, #64	@ 0x40
 8003962:	d008      	beq.n	8003976 <HAL_DMA_Init+0x4b2>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	2b80      	cmp	r3, #128	@ 0x80
 800396a:	d102      	bne.n	8003972 <HAL_DMA_Init+0x4ae>
 800396c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003970:	e002      	b.n	8003978 <HAL_DMA_Init+0x4b4>
 8003972:	2300      	movs	r3, #0
 8003974:	e000      	b.n	8003978 <HAL_DMA_Init+0x4b4>
 8003976:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	68d2      	ldr	r2, [r2, #12]
 800397c:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800397e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003986:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	695b      	ldr	r3, [r3, #20]
 800398c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800398e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003996:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	69db      	ldr	r3, [r3, #28]
 800399c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800399e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80039a6:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	461a      	mov	r2, r3
 80039bc:	4b55      	ldr	r3, [pc, #340]	@ (8003b14 <HAL_DMA_Init+0x650>)
 80039be:	4413      	add	r3, r2
 80039c0:	4a55      	ldr	r2, [pc, #340]	@ (8003b18 <HAL_DMA_Init+0x654>)
 80039c2:	fba2 2303 	umull	r2, r3, r2, r3
 80039c6:	091b      	lsrs	r3, r3, #4
 80039c8:	009a      	lsls	r2, r3, #2
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f002 fa1a 	bl	8005e08 <DMA_CalcBaseAndBitshift>
 80039d4:	4603      	mov	r3, r0
 80039d6:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039dc:	f003 031f 	and.w	r3, r3, #31
 80039e0:	2201      	movs	r2, #1
 80039e2:	409a      	lsls	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	605a      	str	r2, [r3, #4]
 80039e8:	e008      	b.n	80039fc <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2240      	movs	r2, #64	@ 0x40
 80039ee:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2203      	movs	r2, #3
 80039f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e0ed      	b.n	8003bd8 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a46      	ldr	r2, [pc, #280]	@ (8003b1c <HAL_DMA_Init+0x658>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d072      	beq.n	8003aec <HAL_DMA_Init+0x628>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a45      	ldr	r2, [pc, #276]	@ (8003b20 <HAL_DMA_Init+0x65c>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d06d      	beq.n	8003aec <HAL_DMA_Init+0x628>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a43      	ldr	r2, [pc, #268]	@ (8003b24 <HAL_DMA_Init+0x660>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d068      	beq.n	8003aec <HAL_DMA_Init+0x628>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a42      	ldr	r2, [pc, #264]	@ (8003b28 <HAL_DMA_Init+0x664>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d063      	beq.n	8003aec <HAL_DMA_Init+0x628>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a40      	ldr	r2, [pc, #256]	@ (8003b2c <HAL_DMA_Init+0x668>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d05e      	beq.n	8003aec <HAL_DMA_Init+0x628>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a3f      	ldr	r2, [pc, #252]	@ (8003b30 <HAL_DMA_Init+0x66c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d059      	beq.n	8003aec <HAL_DMA_Init+0x628>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a3d      	ldr	r2, [pc, #244]	@ (8003b34 <HAL_DMA_Init+0x670>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d054      	beq.n	8003aec <HAL_DMA_Init+0x628>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a3c      	ldr	r2, [pc, #240]	@ (8003b38 <HAL_DMA_Init+0x674>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d04f      	beq.n	8003aec <HAL_DMA_Init+0x628>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a3a      	ldr	r2, [pc, #232]	@ (8003b3c <HAL_DMA_Init+0x678>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d04a      	beq.n	8003aec <HAL_DMA_Init+0x628>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a39      	ldr	r2, [pc, #228]	@ (8003b40 <HAL_DMA_Init+0x67c>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d045      	beq.n	8003aec <HAL_DMA_Init+0x628>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a37      	ldr	r2, [pc, #220]	@ (8003b44 <HAL_DMA_Init+0x680>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d040      	beq.n	8003aec <HAL_DMA_Init+0x628>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a36      	ldr	r2, [pc, #216]	@ (8003b48 <HAL_DMA_Init+0x684>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d03b      	beq.n	8003aec <HAL_DMA_Init+0x628>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a34      	ldr	r2, [pc, #208]	@ (8003b4c <HAL_DMA_Init+0x688>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d036      	beq.n	8003aec <HAL_DMA_Init+0x628>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a33      	ldr	r2, [pc, #204]	@ (8003b50 <HAL_DMA_Init+0x68c>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d031      	beq.n	8003aec <HAL_DMA_Init+0x628>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a31      	ldr	r2, [pc, #196]	@ (8003b54 <HAL_DMA_Init+0x690>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d02c      	beq.n	8003aec <HAL_DMA_Init+0x628>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a30      	ldr	r2, [pc, #192]	@ (8003b58 <HAL_DMA_Init+0x694>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d027      	beq.n	8003aec <HAL_DMA_Init+0x628>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a13      	ldr	r2, [pc, #76]	@ (8003af0 <HAL_DMA_Init+0x62c>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d022      	beq.n	8003aec <HAL_DMA_Init+0x628>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a12      	ldr	r2, [pc, #72]	@ (8003af4 <HAL_DMA_Init+0x630>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d01d      	beq.n	8003aec <HAL_DMA_Init+0x628>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a10      	ldr	r2, [pc, #64]	@ (8003af8 <HAL_DMA_Init+0x634>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d018      	beq.n	8003aec <HAL_DMA_Init+0x628>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a0f      	ldr	r2, [pc, #60]	@ (8003afc <HAL_DMA_Init+0x638>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d013      	beq.n	8003aec <HAL_DMA_Init+0x628>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a0d      	ldr	r2, [pc, #52]	@ (8003b00 <HAL_DMA_Init+0x63c>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d00e      	beq.n	8003aec <HAL_DMA_Init+0x628>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a0c      	ldr	r2, [pc, #48]	@ (8003b04 <HAL_DMA_Init+0x640>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d009      	beq.n	8003aec <HAL_DMA_Init+0x628>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a0a      	ldr	r2, [pc, #40]	@ (8003b08 <HAL_DMA_Init+0x644>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d004      	beq.n	8003aec <HAL_DMA_Init+0x628>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a09      	ldr	r2, [pc, #36]	@ (8003b0c <HAL_DMA_Init+0x648>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d137      	bne.n	8003b5c <HAL_DMA_Init+0x698>
 8003aec:	2301      	movs	r3, #1
 8003aee:	e036      	b.n	8003b5e <HAL_DMA_Init+0x69a>
 8003af0:	58025408 	.word	0x58025408
 8003af4:	5802541c 	.word	0x5802541c
 8003af8:	58025430 	.word	0x58025430
 8003afc:	58025444 	.word	0x58025444
 8003b00:	58025458 	.word	0x58025458
 8003b04:	5802546c 	.word	0x5802546c
 8003b08:	58025480 	.word	0x58025480
 8003b0c:	58025494 	.word	0x58025494
 8003b10:	fffe000f 	.word	0xfffe000f
 8003b14:	a7fdabf8 	.word	0xa7fdabf8
 8003b18:	cccccccd 	.word	0xcccccccd
 8003b1c:	40020010 	.word	0x40020010
 8003b20:	40020028 	.word	0x40020028
 8003b24:	40020040 	.word	0x40020040
 8003b28:	40020058 	.word	0x40020058
 8003b2c:	40020070 	.word	0x40020070
 8003b30:	40020088 	.word	0x40020088
 8003b34:	400200a0 	.word	0x400200a0
 8003b38:	400200b8 	.word	0x400200b8
 8003b3c:	40020410 	.word	0x40020410
 8003b40:	40020428 	.word	0x40020428
 8003b44:	40020440 	.word	0x40020440
 8003b48:	40020458 	.word	0x40020458
 8003b4c:	40020470 	.word	0x40020470
 8003b50:	40020488 	.word	0x40020488
 8003b54:	400204a0 	.word	0x400204a0
 8003b58:	400204b8 	.word	0x400204b8
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d032      	beq.n	8003bc8 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f002 fa7e 	bl	8006064 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	2b80      	cmp	r3, #128	@ 0x80
 8003b6e:	d102      	bne.n	8003b76 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685a      	ldr	r2, [r3, #4]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003b8a:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d010      	beq.n	8003bb6 <HAL_DMA_Init+0x6f2>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	2b08      	cmp	r3, #8
 8003b9a:	d80c      	bhi.n	8003bb6 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f002 fafb 	bl	8006198 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003bb2:	605a      	str	r2, [r3, #4]
 8003bb4:	e008      	b.n	8003bc8 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3718      	adds	r7, #24
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
 8003bec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d101      	bne.n	8003bfc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e226      	b.n	800404a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d101      	bne.n	8003c0a <HAL_DMA_Start_IT+0x2a>
 8003c06:	2302      	movs	r3, #2
 8003c08:	e21f      	b.n	800404a <HAL_DMA_Start_IT+0x46a>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	f040 820a 	bne.w	8004034 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a68      	ldr	r2, [pc, #416]	@ (8003dd4 <HAL_DMA_Start_IT+0x1f4>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d04a      	beq.n	8003cce <HAL_DMA_Start_IT+0xee>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a66      	ldr	r2, [pc, #408]	@ (8003dd8 <HAL_DMA_Start_IT+0x1f8>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d045      	beq.n	8003cce <HAL_DMA_Start_IT+0xee>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a65      	ldr	r2, [pc, #404]	@ (8003ddc <HAL_DMA_Start_IT+0x1fc>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d040      	beq.n	8003cce <HAL_DMA_Start_IT+0xee>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a63      	ldr	r2, [pc, #396]	@ (8003de0 <HAL_DMA_Start_IT+0x200>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d03b      	beq.n	8003cce <HAL_DMA_Start_IT+0xee>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a62      	ldr	r2, [pc, #392]	@ (8003de4 <HAL_DMA_Start_IT+0x204>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d036      	beq.n	8003cce <HAL_DMA_Start_IT+0xee>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a60      	ldr	r2, [pc, #384]	@ (8003de8 <HAL_DMA_Start_IT+0x208>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d031      	beq.n	8003cce <HAL_DMA_Start_IT+0xee>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a5f      	ldr	r2, [pc, #380]	@ (8003dec <HAL_DMA_Start_IT+0x20c>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d02c      	beq.n	8003cce <HAL_DMA_Start_IT+0xee>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a5d      	ldr	r2, [pc, #372]	@ (8003df0 <HAL_DMA_Start_IT+0x210>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d027      	beq.n	8003cce <HAL_DMA_Start_IT+0xee>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a5c      	ldr	r2, [pc, #368]	@ (8003df4 <HAL_DMA_Start_IT+0x214>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d022      	beq.n	8003cce <HAL_DMA_Start_IT+0xee>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a5a      	ldr	r2, [pc, #360]	@ (8003df8 <HAL_DMA_Start_IT+0x218>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d01d      	beq.n	8003cce <HAL_DMA_Start_IT+0xee>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a59      	ldr	r2, [pc, #356]	@ (8003dfc <HAL_DMA_Start_IT+0x21c>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d018      	beq.n	8003cce <HAL_DMA_Start_IT+0xee>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a57      	ldr	r2, [pc, #348]	@ (8003e00 <HAL_DMA_Start_IT+0x220>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d013      	beq.n	8003cce <HAL_DMA_Start_IT+0xee>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a56      	ldr	r2, [pc, #344]	@ (8003e04 <HAL_DMA_Start_IT+0x224>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d00e      	beq.n	8003cce <HAL_DMA_Start_IT+0xee>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a54      	ldr	r2, [pc, #336]	@ (8003e08 <HAL_DMA_Start_IT+0x228>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d009      	beq.n	8003cce <HAL_DMA_Start_IT+0xee>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a53      	ldr	r2, [pc, #332]	@ (8003e0c <HAL_DMA_Start_IT+0x22c>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d004      	beq.n	8003cce <HAL_DMA_Start_IT+0xee>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a51      	ldr	r2, [pc, #324]	@ (8003e10 <HAL_DMA_Start_IT+0x230>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d108      	bne.n	8003ce0 <HAL_DMA_Start_IT+0x100>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 0201 	bic.w	r2, r2, #1
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	e007      	b.n	8003cf0 <HAL_DMA_Start_IT+0x110>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 0201 	bic.w	r2, r2, #1
 8003cee:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	68b9      	ldr	r1, [r7, #8]
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f001 fea2 	bl	8005a40 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a34      	ldr	r2, [pc, #208]	@ (8003dd4 <HAL_DMA_Start_IT+0x1f4>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d04a      	beq.n	8003d9c <HAL_DMA_Start_IT+0x1bc>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a33      	ldr	r2, [pc, #204]	@ (8003dd8 <HAL_DMA_Start_IT+0x1f8>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d045      	beq.n	8003d9c <HAL_DMA_Start_IT+0x1bc>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a31      	ldr	r2, [pc, #196]	@ (8003ddc <HAL_DMA_Start_IT+0x1fc>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d040      	beq.n	8003d9c <HAL_DMA_Start_IT+0x1bc>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a30      	ldr	r2, [pc, #192]	@ (8003de0 <HAL_DMA_Start_IT+0x200>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d03b      	beq.n	8003d9c <HAL_DMA_Start_IT+0x1bc>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a2e      	ldr	r2, [pc, #184]	@ (8003de4 <HAL_DMA_Start_IT+0x204>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d036      	beq.n	8003d9c <HAL_DMA_Start_IT+0x1bc>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a2d      	ldr	r2, [pc, #180]	@ (8003de8 <HAL_DMA_Start_IT+0x208>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d031      	beq.n	8003d9c <HAL_DMA_Start_IT+0x1bc>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a2b      	ldr	r2, [pc, #172]	@ (8003dec <HAL_DMA_Start_IT+0x20c>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d02c      	beq.n	8003d9c <HAL_DMA_Start_IT+0x1bc>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a2a      	ldr	r2, [pc, #168]	@ (8003df0 <HAL_DMA_Start_IT+0x210>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d027      	beq.n	8003d9c <HAL_DMA_Start_IT+0x1bc>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a28      	ldr	r2, [pc, #160]	@ (8003df4 <HAL_DMA_Start_IT+0x214>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d022      	beq.n	8003d9c <HAL_DMA_Start_IT+0x1bc>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a27      	ldr	r2, [pc, #156]	@ (8003df8 <HAL_DMA_Start_IT+0x218>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d01d      	beq.n	8003d9c <HAL_DMA_Start_IT+0x1bc>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a25      	ldr	r2, [pc, #148]	@ (8003dfc <HAL_DMA_Start_IT+0x21c>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d018      	beq.n	8003d9c <HAL_DMA_Start_IT+0x1bc>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a24      	ldr	r2, [pc, #144]	@ (8003e00 <HAL_DMA_Start_IT+0x220>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d013      	beq.n	8003d9c <HAL_DMA_Start_IT+0x1bc>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a22      	ldr	r2, [pc, #136]	@ (8003e04 <HAL_DMA_Start_IT+0x224>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d00e      	beq.n	8003d9c <HAL_DMA_Start_IT+0x1bc>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a21      	ldr	r2, [pc, #132]	@ (8003e08 <HAL_DMA_Start_IT+0x228>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d009      	beq.n	8003d9c <HAL_DMA_Start_IT+0x1bc>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a1f      	ldr	r2, [pc, #124]	@ (8003e0c <HAL_DMA_Start_IT+0x22c>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d004      	beq.n	8003d9c <HAL_DMA_Start_IT+0x1bc>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a1e      	ldr	r2, [pc, #120]	@ (8003e10 <HAL_DMA_Start_IT+0x230>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d101      	bne.n	8003da0 <HAL_DMA_Start_IT+0x1c0>
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e000      	b.n	8003da2 <HAL_DMA_Start_IT+0x1c2>
 8003da0:	2300      	movs	r3, #0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d036      	beq.n	8003e14 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f023 021e 	bic.w	r2, r3, #30
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f042 0216 	orr.w	r2, r2, #22
 8003db8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d03e      	beq.n	8003e40 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f042 0208 	orr.w	r2, r2, #8
 8003dd0:	601a      	str	r2, [r3, #0]
 8003dd2:	e035      	b.n	8003e40 <HAL_DMA_Start_IT+0x260>
 8003dd4:	40020010 	.word	0x40020010
 8003dd8:	40020028 	.word	0x40020028
 8003ddc:	40020040 	.word	0x40020040
 8003de0:	40020058 	.word	0x40020058
 8003de4:	40020070 	.word	0x40020070
 8003de8:	40020088 	.word	0x40020088
 8003dec:	400200a0 	.word	0x400200a0
 8003df0:	400200b8 	.word	0x400200b8
 8003df4:	40020410 	.word	0x40020410
 8003df8:	40020428 	.word	0x40020428
 8003dfc:	40020440 	.word	0x40020440
 8003e00:	40020458 	.word	0x40020458
 8003e04:	40020470 	.word	0x40020470
 8003e08:	40020488 	.word	0x40020488
 8003e0c:	400204a0 	.word	0x400204a0
 8003e10:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f023 020e 	bic.w	r2, r3, #14
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f042 020a 	orr.w	r2, r2, #10
 8003e26:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d007      	beq.n	8003e40 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f042 0204 	orr.w	r2, r2, #4
 8003e3e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a83      	ldr	r2, [pc, #524]	@ (8004054 <HAL_DMA_Start_IT+0x474>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d072      	beq.n	8003f30 <HAL_DMA_Start_IT+0x350>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a82      	ldr	r2, [pc, #520]	@ (8004058 <HAL_DMA_Start_IT+0x478>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d06d      	beq.n	8003f30 <HAL_DMA_Start_IT+0x350>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a80      	ldr	r2, [pc, #512]	@ (800405c <HAL_DMA_Start_IT+0x47c>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d068      	beq.n	8003f30 <HAL_DMA_Start_IT+0x350>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a7f      	ldr	r2, [pc, #508]	@ (8004060 <HAL_DMA_Start_IT+0x480>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d063      	beq.n	8003f30 <HAL_DMA_Start_IT+0x350>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a7d      	ldr	r2, [pc, #500]	@ (8004064 <HAL_DMA_Start_IT+0x484>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d05e      	beq.n	8003f30 <HAL_DMA_Start_IT+0x350>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a7c      	ldr	r2, [pc, #496]	@ (8004068 <HAL_DMA_Start_IT+0x488>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d059      	beq.n	8003f30 <HAL_DMA_Start_IT+0x350>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a7a      	ldr	r2, [pc, #488]	@ (800406c <HAL_DMA_Start_IT+0x48c>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d054      	beq.n	8003f30 <HAL_DMA_Start_IT+0x350>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a79      	ldr	r2, [pc, #484]	@ (8004070 <HAL_DMA_Start_IT+0x490>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d04f      	beq.n	8003f30 <HAL_DMA_Start_IT+0x350>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a77      	ldr	r2, [pc, #476]	@ (8004074 <HAL_DMA_Start_IT+0x494>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d04a      	beq.n	8003f30 <HAL_DMA_Start_IT+0x350>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a76      	ldr	r2, [pc, #472]	@ (8004078 <HAL_DMA_Start_IT+0x498>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d045      	beq.n	8003f30 <HAL_DMA_Start_IT+0x350>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a74      	ldr	r2, [pc, #464]	@ (800407c <HAL_DMA_Start_IT+0x49c>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d040      	beq.n	8003f30 <HAL_DMA_Start_IT+0x350>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a73      	ldr	r2, [pc, #460]	@ (8004080 <HAL_DMA_Start_IT+0x4a0>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d03b      	beq.n	8003f30 <HAL_DMA_Start_IT+0x350>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a71      	ldr	r2, [pc, #452]	@ (8004084 <HAL_DMA_Start_IT+0x4a4>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d036      	beq.n	8003f30 <HAL_DMA_Start_IT+0x350>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a70      	ldr	r2, [pc, #448]	@ (8004088 <HAL_DMA_Start_IT+0x4a8>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d031      	beq.n	8003f30 <HAL_DMA_Start_IT+0x350>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a6e      	ldr	r2, [pc, #440]	@ (800408c <HAL_DMA_Start_IT+0x4ac>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d02c      	beq.n	8003f30 <HAL_DMA_Start_IT+0x350>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a6d      	ldr	r2, [pc, #436]	@ (8004090 <HAL_DMA_Start_IT+0x4b0>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d027      	beq.n	8003f30 <HAL_DMA_Start_IT+0x350>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a6b      	ldr	r2, [pc, #428]	@ (8004094 <HAL_DMA_Start_IT+0x4b4>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d022      	beq.n	8003f30 <HAL_DMA_Start_IT+0x350>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a6a      	ldr	r2, [pc, #424]	@ (8004098 <HAL_DMA_Start_IT+0x4b8>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d01d      	beq.n	8003f30 <HAL_DMA_Start_IT+0x350>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a68      	ldr	r2, [pc, #416]	@ (800409c <HAL_DMA_Start_IT+0x4bc>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d018      	beq.n	8003f30 <HAL_DMA_Start_IT+0x350>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a67      	ldr	r2, [pc, #412]	@ (80040a0 <HAL_DMA_Start_IT+0x4c0>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d013      	beq.n	8003f30 <HAL_DMA_Start_IT+0x350>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a65      	ldr	r2, [pc, #404]	@ (80040a4 <HAL_DMA_Start_IT+0x4c4>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d00e      	beq.n	8003f30 <HAL_DMA_Start_IT+0x350>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a64      	ldr	r2, [pc, #400]	@ (80040a8 <HAL_DMA_Start_IT+0x4c8>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d009      	beq.n	8003f30 <HAL_DMA_Start_IT+0x350>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a62      	ldr	r2, [pc, #392]	@ (80040ac <HAL_DMA_Start_IT+0x4cc>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d004      	beq.n	8003f30 <HAL_DMA_Start_IT+0x350>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a61      	ldr	r2, [pc, #388]	@ (80040b0 <HAL_DMA_Start_IT+0x4d0>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d101      	bne.n	8003f34 <HAL_DMA_Start_IT+0x354>
 8003f30:	2301      	movs	r3, #1
 8003f32:	e000      	b.n	8003f36 <HAL_DMA_Start_IT+0x356>
 8003f34:	2300      	movs	r3, #0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d01a      	beq.n	8003f70 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d007      	beq.n	8003f58 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f56:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d007      	beq.n	8003f70 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f6e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a37      	ldr	r2, [pc, #220]	@ (8004054 <HAL_DMA_Start_IT+0x474>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d04a      	beq.n	8004010 <HAL_DMA_Start_IT+0x430>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a36      	ldr	r2, [pc, #216]	@ (8004058 <HAL_DMA_Start_IT+0x478>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d045      	beq.n	8004010 <HAL_DMA_Start_IT+0x430>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a34      	ldr	r2, [pc, #208]	@ (800405c <HAL_DMA_Start_IT+0x47c>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d040      	beq.n	8004010 <HAL_DMA_Start_IT+0x430>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a33      	ldr	r2, [pc, #204]	@ (8004060 <HAL_DMA_Start_IT+0x480>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d03b      	beq.n	8004010 <HAL_DMA_Start_IT+0x430>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a31      	ldr	r2, [pc, #196]	@ (8004064 <HAL_DMA_Start_IT+0x484>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d036      	beq.n	8004010 <HAL_DMA_Start_IT+0x430>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a30      	ldr	r2, [pc, #192]	@ (8004068 <HAL_DMA_Start_IT+0x488>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d031      	beq.n	8004010 <HAL_DMA_Start_IT+0x430>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a2e      	ldr	r2, [pc, #184]	@ (800406c <HAL_DMA_Start_IT+0x48c>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d02c      	beq.n	8004010 <HAL_DMA_Start_IT+0x430>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a2d      	ldr	r2, [pc, #180]	@ (8004070 <HAL_DMA_Start_IT+0x490>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d027      	beq.n	8004010 <HAL_DMA_Start_IT+0x430>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a2b      	ldr	r2, [pc, #172]	@ (8004074 <HAL_DMA_Start_IT+0x494>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d022      	beq.n	8004010 <HAL_DMA_Start_IT+0x430>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a2a      	ldr	r2, [pc, #168]	@ (8004078 <HAL_DMA_Start_IT+0x498>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d01d      	beq.n	8004010 <HAL_DMA_Start_IT+0x430>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a28      	ldr	r2, [pc, #160]	@ (800407c <HAL_DMA_Start_IT+0x49c>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d018      	beq.n	8004010 <HAL_DMA_Start_IT+0x430>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a27      	ldr	r2, [pc, #156]	@ (8004080 <HAL_DMA_Start_IT+0x4a0>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d013      	beq.n	8004010 <HAL_DMA_Start_IT+0x430>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a25      	ldr	r2, [pc, #148]	@ (8004084 <HAL_DMA_Start_IT+0x4a4>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d00e      	beq.n	8004010 <HAL_DMA_Start_IT+0x430>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a24      	ldr	r2, [pc, #144]	@ (8004088 <HAL_DMA_Start_IT+0x4a8>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d009      	beq.n	8004010 <HAL_DMA_Start_IT+0x430>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a22      	ldr	r2, [pc, #136]	@ (800408c <HAL_DMA_Start_IT+0x4ac>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d004      	beq.n	8004010 <HAL_DMA_Start_IT+0x430>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a21      	ldr	r2, [pc, #132]	@ (8004090 <HAL_DMA_Start_IT+0x4b0>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d108      	bne.n	8004022 <HAL_DMA_Start_IT+0x442>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0201 	orr.w	r2, r2, #1
 800401e:	601a      	str	r2, [r3, #0]
 8004020:	e012      	b.n	8004048 <HAL_DMA_Start_IT+0x468>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f042 0201 	orr.w	r2, r2, #1
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	e009      	b.n	8004048 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800403a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004048:	7dfb      	ldrb	r3, [r7, #23]
}
 800404a:	4618      	mov	r0, r3
 800404c:	3718      	adds	r7, #24
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	40020010 	.word	0x40020010
 8004058:	40020028 	.word	0x40020028
 800405c:	40020040 	.word	0x40020040
 8004060:	40020058 	.word	0x40020058
 8004064:	40020070 	.word	0x40020070
 8004068:	40020088 	.word	0x40020088
 800406c:	400200a0 	.word	0x400200a0
 8004070:	400200b8 	.word	0x400200b8
 8004074:	40020410 	.word	0x40020410
 8004078:	40020428 	.word	0x40020428
 800407c:	40020440 	.word	0x40020440
 8004080:	40020458 	.word	0x40020458
 8004084:	40020470 	.word	0x40020470
 8004088:	40020488 	.word	0x40020488
 800408c:	400204a0 	.word	0x400204a0
 8004090:	400204b8 	.word	0x400204b8
 8004094:	58025408 	.word	0x58025408
 8004098:	5802541c 	.word	0x5802541c
 800409c:	58025430 	.word	0x58025430
 80040a0:	58025444 	.word	0x58025444
 80040a4:	58025458 	.word	0x58025458
 80040a8:	5802546c 	.word	0x5802546c
 80040ac:	58025480 	.word	0x58025480
 80040b0:	58025494 	.word	0x58025494

080040b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80040bc:	f7ff f84a 	bl	8003154 <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d101      	bne.n	80040cc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e2dc      	b.n	8004686 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d008      	beq.n	80040ea <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2280      	movs	r2, #128	@ 0x80
 80040dc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e2cd      	b.n	8004686 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a76      	ldr	r2, [pc, #472]	@ (80042c8 <HAL_DMA_Abort+0x214>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d04a      	beq.n	800418a <HAL_DMA_Abort+0xd6>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a74      	ldr	r2, [pc, #464]	@ (80042cc <HAL_DMA_Abort+0x218>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d045      	beq.n	800418a <HAL_DMA_Abort+0xd6>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a73      	ldr	r2, [pc, #460]	@ (80042d0 <HAL_DMA_Abort+0x21c>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d040      	beq.n	800418a <HAL_DMA_Abort+0xd6>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a71      	ldr	r2, [pc, #452]	@ (80042d4 <HAL_DMA_Abort+0x220>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d03b      	beq.n	800418a <HAL_DMA_Abort+0xd6>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a70      	ldr	r2, [pc, #448]	@ (80042d8 <HAL_DMA_Abort+0x224>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d036      	beq.n	800418a <HAL_DMA_Abort+0xd6>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a6e      	ldr	r2, [pc, #440]	@ (80042dc <HAL_DMA_Abort+0x228>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d031      	beq.n	800418a <HAL_DMA_Abort+0xd6>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a6d      	ldr	r2, [pc, #436]	@ (80042e0 <HAL_DMA_Abort+0x22c>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d02c      	beq.n	800418a <HAL_DMA_Abort+0xd6>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a6b      	ldr	r2, [pc, #428]	@ (80042e4 <HAL_DMA_Abort+0x230>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d027      	beq.n	800418a <HAL_DMA_Abort+0xd6>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a6a      	ldr	r2, [pc, #424]	@ (80042e8 <HAL_DMA_Abort+0x234>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d022      	beq.n	800418a <HAL_DMA_Abort+0xd6>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a68      	ldr	r2, [pc, #416]	@ (80042ec <HAL_DMA_Abort+0x238>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d01d      	beq.n	800418a <HAL_DMA_Abort+0xd6>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a67      	ldr	r2, [pc, #412]	@ (80042f0 <HAL_DMA_Abort+0x23c>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d018      	beq.n	800418a <HAL_DMA_Abort+0xd6>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a65      	ldr	r2, [pc, #404]	@ (80042f4 <HAL_DMA_Abort+0x240>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d013      	beq.n	800418a <HAL_DMA_Abort+0xd6>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a64      	ldr	r2, [pc, #400]	@ (80042f8 <HAL_DMA_Abort+0x244>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d00e      	beq.n	800418a <HAL_DMA_Abort+0xd6>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a62      	ldr	r2, [pc, #392]	@ (80042fc <HAL_DMA_Abort+0x248>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d009      	beq.n	800418a <HAL_DMA_Abort+0xd6>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a61      	ldr	r2, [pc, #388]	@ (8004300 <HAL_DMA_Abort+0x24c>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d004      	beq.n	800418a <HAL_DMA_Abort+0xd6>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a5f      	ldr	r2, [pc, #380]	@ (8004304 <HAL_DMA_Abort+0x250>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d101      	bne.n	800418e <HAL_DMA_Abort+0xda>
 800418a:	2301      	movs	r3, #1
 800418c:	e000      	b.n	8004190 <HAL_DMA_Abort+0xdc>
 800418e:	2300      	movs	r3, #0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d013      	beq.n	80041bc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f022 021e 	bic.w	r2, r2, #30
 80041a2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	695a      	ldr	r2, [r3, #20]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80041b2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	617b      	str	r3, [r7, #20]
 80041ba:	e00a      	b.n	80041d2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 020e 	bic.w	r2, r2, #14
 80041ca:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a3c      	ldr	r2, [pc, #240]	@ (80042c8 <HAL_DMA_Abort+0x214>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d072      	beq.n	80042c2 <HAL_DMA_Abort+0x20e>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a3a      	ldr	r2, [pc, #232]	@ (80042cc <HAL_DMA_Abort+0x218>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d06d      	beq.n	80042c2 <HAL_DMA_Abort+0x20e>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a39      	ldr	r2, [pc, #228]	@ (80042d0 <HAL_DMA_Abort+0x21c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d068      	beq.n	80042c2 <HAL_DMA_Abort+0x20e>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a37      	ldr	r2, [pc, #220]	@ (80042d4 <HAL_DMA_Abort+0x220>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d063      	beq.n	80042c2 <HAL_DMA_Abort+0x20e>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a36      	ldr	r2, [pc, #216]	@ (80042d8 <HAL_DMA_Abort+0x224>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d05e      	beq.n	80042c2 <HAL_DMA_Abort+0x20e>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a34      	ldr	r2, [pc, #208]	@ (80042dc <HAL_DMA_Abort+0x228>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d059      	beq.n	80042c2 <HAL_DMA_Abort+0x20e>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a33      	ldr	r2, [pc, #204]	@ (80042e0 <HAL_DMA_Abort+0x22c>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d054      	beq.n	80042c2 <HAL_DMA_Abort+0x20e>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a31      	ldr	r2, [pc, #196]	@ (80042e4 <HAL_DMA_Abort+0x230>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d04f      	beq.n	80042c2 <HAL_DMA_Abort+0x20e>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a30      	ldr	r2, [pc, #192]	@ (80042e8 <HAL_DMA_Abort+0x234>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d04a      	beq.n	80042c2 <HAL_DMA_Abort+0x20e>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a2e      	ldr	r2, [pc, #184]	@ (80042ec <HAL_DMA_Abort+0x238>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d045      	beq.n	80042c2 <HAL_DMA_Abort+0x20e>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a2d      	ldr	r2, [pc, #180]	@ (80042f0 <HAL_DMA_Abort+0x23c>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d040      	beq.n	80042c2 <HAL_DMA_Abort+0x20e>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a2b      	ldr	r2, [pc, #172]	@ (80042f4 <HAL_DMA_Abort+0x240>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d03b      	beq.n	80042c2 <HAL_DMA_Abort+0x20e>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a2a      	ldr	r2, [pc, #168]	@ (80042f8 <HAL_DMA_Abort+0x244>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d036      	beq.n	80042c2 <HAL_DMA_Abort+0x20e>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a28      	ldr	r2, [pc, #160]	@ (80042fc <HAL_DMA_Abort+0x248>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d031      	beq.n	80042c2 <HAL_DMA_Abort+0x20e>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a27      	ldr	r2, [pc, #156]	@ (8004300 <HAL_DMA_Abort+0x24c>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d02c      	beq.n	80042c2 <HAL_DMA_Abort+0x20e>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a25      	ldr	r2, [pc, #148]	@ (8004304 <HAL_DMA_Abort+0x250>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d027      	beq.n	80042c2 <HAL_DMA_Abort+0x20e>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a24      	ldr	r2, [pc, #144]	@ (8004308 <HAL_DMA_Abort+0x254>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d022      	beq.n	80042c2 <HAL_DMA_Abort+0x20e>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a22      	ldr	r2, [pc, #136]	@ (800430c <HAL_DMA_Abort+0x258>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d01d      	beq.n	80042c2 <HAL_DMA_Abort+0x20e>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a21      	ldr	r2, [pc, #132]	@ (8004310 <HAL_DMA_Abort+0x25c>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d018      	beq.n	80042c2 <HAL_DMA_Abort+0x20e>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a1f      	ldr	r2, [pc, #124]	@ (8004314 <HAL_DMA_Abort+0x260>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d013      	beq.n	80042c2 <HAL_DMA_Abort+0x20e>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a1e      	ldr	r2, [pc, #120]	@ (8004318 <HAL_DMA_Abort+0x264>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d00e      	beq.n	80042c2 <HAL_DMA_Abort+0x20e>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a1c      	ldr	r2, [pc, #112]	@ (800431c <HAL_DMA_Abort+0x268>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d009      	beq.n	80042c2 <HAL_DMA_Abort+0x20e>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a1b      	ldr	r2, [pc, #108]	@ (8004320 <HAL_DMA_Abort+0x26c>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d004      	beq.n	80042c2 <HAL_DMA_Abort+0x20e>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a19      	ldr	r2, [pc, #100]	@ (8004324 <HAL_DMA_Abort+0x270>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d132      	bne.n	8004328 <HAL_DMA_Abort+0x274>
 80042c2:	2301      	movs	r3, #1
 80042c4:	e031      	b.n	800432a <HAL_DMA_Abort+0x276>
 80042c6:	bf00      	nop
 80042c8:	40020010 	.word	0x40020010
 80042cc:	40020028 	.word	0x40020028
 80042d0:	40020040 	.word	0x40020040
 80042d4:	40020058 	.word	0x40020058
 80042d8:	40020070 	.word	0x40020070
 80042dc:	40020088 	.word	0x40020088
 80042e0:	400200a0 	.word	0x400200a0
 80042e4:	400200b8 	.word	0x400200b8
 80042e8:	40020410 	.word	0x40020410
 80042ec:	40020428 	.word	0x40020428
 80042f0:	40020440 	.word	0x40020440
 80042f4:	40020458 	.word	0x40020458
 80042f8:	40020470 	.word	0x40020470
 80042fc:	40020488 	.word	0x40020488
 8004300:	400204a0 	.word	0x400204a0
 8004304:	400204b8 	.word	0x400204b8
 8004308:	58025408 	.word	0x58025408
 800430c:	5802541c 	.word	0x5802541c
 8004310:	58025430 	.word	0x58025430
 8004314:	58025444 	.word	0x58025444
 8004318:	58025458 	.word	0x58025458
 800431c:	5802546c 	.word	0x5802546c
 8004320:	58025480 	.word	0x58025480
 8004324:	58025494 	.word	0x58025494
 8004328:	2300      	movs	r3, #0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d007      	beq.n	800433e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004338:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800433c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a6d      	ldr	r2, [pc, #436]	@ (80044f8 <HAL_DMA_Abort+0x444>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d04a      	beq.n	80043de <HAL_DMA_Abort+0x32a>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a6b      	ldr	r2, [pc, #428]	@ (80044fc <HAL_DMA_Abort+0x448>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d045      	beq.n	80043de <HAL_DMA_Abort+0x32a>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a6a      	ldr	r2, [pc, #424]	@ (8004500 <HAL_DMA_Abort+0x44c>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d040      	beq.n	80043de <HAL_DMA_Abort+0x32a>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a68      	ldr	r2, [pc, #416]	@ (8004504 <HAL_DMA_Abort+0x450>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d03b      	beq.n	80043de <HAL_DMA_Abort+0x32a>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a67      	ldr	r2, [pc, #412]	@ (8004508 <HAL_DMA_Abort+0x454>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d036      	beq.n	80043de <HAL_DMA_Abort+0x32a>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a65      	ldr	r2, [pc, #404]	@ (800450c <HAL_DMA_Abort+0x458>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d031      	beq.n	80043de <HAL_DMA_Abort+0x32a>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a64      	ldr	r2, [pc, #400]	@ (8004510 <HAL_DMA_Abort+0x45c>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d02c      	beq.n	80043de <HAL_DMA_Abort+0x32a>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a62      	ldr	r2, [pc, #392]	@ (8004514 <HAL_DMA_Abort+0x460>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d027      	beq.n	80043de <HAL_DMA_Abort+0x32a>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a61      	ldr	r2, [pc, #388]	@ (8004518 <HAL_DMA_Abort+0x464>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d022      	beq.n	80043de <HAL_DMA_Abort+0x32a>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a5f      	ldr	r2, [pc, #380]	@ (800451c <HAL_DMA_Abort+0x468>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d01d      	beq.n	80043de <HAL_DMA_Abort+0x32a>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a5e      	ldr	r2, [pc, #376]	@ (8004520 <HAL_DMA_Abort+0x46c>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d018      	beq.n	80043de <HAL_DMA_Abort+0x32a>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a5c      	ldr	r2, [pc, #368]	@ (8004524 <HAL_DMA_Abort+0x470>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d013      	beq.n	80043de <HAL_DMA_Abort+0x32a>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a5b      	ldr	r2, [pc, #364]	@ (8004528 <HAL_DMA_Abort+0x474>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d00e      	beq.n	80043de <HAL_DMA_Abort+0x32a>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a59      	ldr	r2, [pc, #356]	@ (800452c <HAL_DMA_Abort+0x478>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d009      	beq.n	80043de <HAL_DMA_Abort+0x32a>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a58      	ldr	r2, [pc, #352]	@ (8004530 <HAL_DMA_Abort+0x47c>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d004      	beq.n	80043de <HAL_DMA_Abort+0x32a>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a56      	ldr	r2, [pc, #344]	@ (8004534 <HAL_DMA_Abort+0x480>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d108      	bne.n	80043f0 <HAL_DMA_Abort+0x33c>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 0201 	bic.w	r2, r2, #1
 80043ec:	601a      	str	r2, [r3, #0]
 80043ee:	e007      	b.n	8004400 <HAL_DMA_Abort+0x34c>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f022 0201 	bic.w	r2, r2, #1
 80043fe:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004400:	e013      	b.n	800442a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004402:	f7fe fea7 	bl	8003154 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b05      	cmp	r3, #5
 800440e:	d90c      	bls.n	800442a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2220      	movs	r2, #32
 8004414:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2203      	movs	r2, #3
 800441a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e12d      	b.n	8004686 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1e5      	bne.n	8004402 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a2f      	ldr	r2, [pc, #188]	@ (80044f8 <HAL_DMA_Abort+0x444>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d04a      	beq.n	80044d6 <HAL_DMA_Abort+0x422>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a2d      	ldr	r2, [pc, #180]	@ (80044fc <HAL_DMA_Abort+0x448>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d045      	beq.n	80044d6 <HAL_DMA_Abort+0x422>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a2c      	ldr	r2, [pc, #176]	@ (8004500 <HAL_DMA_Abort+0x44c>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d040      	beq.n	80044d6 <HAL_DMA_Abort+0x422>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a2a      	ldr	r2, [pc, #168]	@ (8004504 <HAL_DMA_Abort+0x450>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d03b      	beq.n	80044d6 <HAL_DMA_Abort+0x422>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a29      	ldr	r2, [pc, #164]	@ (8004508 <HAL_DMA_Abort+0x454>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d036      	beq.n	80044d6 <HAL_DMA_Abort+0x422>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a27      	ldr	r2, [pc, #156]	@ (800450c <HAL_DMA_Abort+0x458>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d031      	beq.n	80044d6 <HAL_DMA_Abort+0x422>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a26      	ldr	r2, [pc, #152]	@ (8004510 <HAL_DMA_Abort+0x45c>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d02c      	beq.n	80044d6 <HAL_DMA_Abort+0x422>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a24      	ldr	r2, [pc, #144]	@ (8004514 <HAL_DMA_Abort+0x460>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d027      	beq.n	80044d6 <HAL_DMA_Abort+0x422>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a23      	ldr	r2, [pc, #140]	@ (8004518 <HAL_DMA_Abort+0x464>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d022      	beq.n	80044d6 <HAL_DMA_Abort+0x422>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a21      	ldr	r2, [pc, #132]	@ (800451c <HAL_DMA_Abort+0x468>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d01d      	beq.n	80044d6 <HAL_DMA_Abort+0x422>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a20      	ldr	r2, [pc, #128]	@ (8004520 <HAL_DMA_Abort+0x46c>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d018      	beq.n	80044d6 <HAL_DMA_Abort+0x422>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a1e      	ldr	r2, [pc, #120]	@ (8004524 <HAL_DMA_Abort+0x470>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d013      	beq.n	80044d6 <HAL_DMA_Abort+0x422>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a1d      	ldr	r2, [pc, #116]	@ (8004528 <HAL_DMA_Abort+0x474>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d00e      	beq.n	80044d6 <HAL_DMA_Abort+0x422>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a1b      	ldr	r2, [pc, #108]	@ (800452c <HAL_DMA_Abort+0x478>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d009      	beq.n	80044d6 <HAL_DMA_Abort+0x422>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a1a      	ldr	r2, [pc, #104]	@ (8004530 <HAL_DMA_Abort+0x47c>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d004      	beq.n	80044d6 <HAL_DMA_Abort+0x422>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a18      	ldr	r2, [pc, #96]	@ (8004534 <HAL_DMA_Abort+0x480>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d101      	bne.n	80044da <HAL_DMA_Abort+0x426>
 80044d6:	2301      	movs	r3, #1
 80044d8:	e000      	b.n	80044dc <HAL_DMA_Abort+0x428>
 80044da:	2300      	movs	r3, #0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d02b      	beq.n	8004538 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044e4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044ea:	f003 031f 	and.w	r3, r3, #31
 80044ee:	223f      	movs	r2, #63	@ 0x3f
 80044f0:	409a      	lsls	r2, r3
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	609a      	str	r2, [r3, #8]
 80044f6:	e02a      	b.n	800454e <HAL_DMA_Abort+0x49a>
 80044f8:	40020010 	.word	0x40020010
 80044fc:	40020028 	.word	0x40020028
 8004500:	40020040 	.word	0x40020040
 8004504:	40020058 	.word	0x40020058
 8004508:	40020070 	.word	0x40020070
 800450c:	40020088 	.word	0x40020088
 8004510:	400200a0 	.word	0x400200a0
 8004514:	400200b8 	.word	0x400200b8
 8004518:	40020410 	.word	0x40020410
 800451c:	40020428 	.word	0x40020428
 8004520:	40020440 	.word	0x40020440
 8004524:	40020458 	.word	0x40020458
 8004528:	40020470 	.word	0x40020470
 800452c:	40020488 	.word	0x40020488
 8004530:	400204a0 	.word	0x400204a0
 8004534:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800453c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004542:	f003 031f 	and.w	r3, r3, #31
 8004546:	2201      	movs	r2, #1
 8004548:	409a      	lsls	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a4f      	ldr	r2, [pc, #316]	@ (8004690 <HAL_DMA_Abort+0x5dc>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d072      	beq.n	800463e <HAL_DMA_Abort+0x58a>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a4d      	ldr	r2, [pc, #308]	@ (8004694 <HAL_DMA_Abort+0x5e0>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d06d      	beq.n	800463e <HAL_DMA_Abort+0x58a>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a4c      	ldr	r2, [pc, #304]	@ (8004698 <HAL_DMA_Abort+0x5e4>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d068      	beq.n	800463e <HAL_DMA_Abort+0x58a>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a4a      	ldr	r2, [pc, #296]	@ (800469c <HAL_DMA_Abort+0x5e8>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d063      	beq.n	800463e <HAL_DMA_Abort+0x58a>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a49      	ldr	r2, [pc, #292]	@ (80046a0 <HAL_DMA_Abort+0x5ec>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d05e      	beq.n	800463e <HAL_DMA_Abort+0x58a>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a47      	ldr	r2, [pc, #284]	@ (80046a4 <HAL_DMA_Abort+0x5f0>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d059      	beq.n	800463e <HAL_DMA_Abort+0x58a>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a46      	ldr	r2, [pc, #280]	@ (80046a8 <HAL_DMA_Abort+0x5f4>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d054      	beq.n	800463e <HAL_DMA_Abort+0x58a>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a44      	ldr	r2, [pc, #272]	@ (80046ac <HAL_DMA_Abort+0x5f8>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d04f      	beq.n	800463e <HAL_DMA_Abort+0x58a>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a43      	ldr	r2, [pc, #268]	@ (80046b0 <HAL_DMA_Abort+0x5fc>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d04a      	beq.n	800463e <HAL_DMA_Abort+0x58a>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a41      	ldr	r2, [pc, #260]	@ (80046b4 <HAL_DMA_Abort+0x600>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d045      	beq.n	800463e <HAL_DMA_Abort+0x58a>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a40      	ldr	r2, [pc, #256]	@ (80046b8 <HAL_DMA_Abort+0x604>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d040      	beq.n	800463e <HAL_DMA_Abort+0x58a>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a3e      	ldr	r2, [pc, #248]	@ (80046bc <HAL_DMA_Abort+0x608>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d03b      	beq.n	800463e <HAL_DMA_Abort+0x58a>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a3d      	ldr	r2, [pc, #244]	@ (80046c0 <HAL_DMA_Abort+0x60c>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d036      	beq.n	800463e <HAL_DMA_Abort+0x58a>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a3b      	ldr	r2, [pc, #236]	@ (80046c4 <HAL_DMA_Abort+0x610>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d031      	beq.n	800463e <HAL_DMA_Abort+0x58a>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a3a      	ldr	r2, [pc, #232]	@ (80046c8 <HAL_DMA_Abort+0x614>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d02c      	beq.n	800463e <HAL_DMA_Abort+0x58a>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a38      	ldr	r2, [pc, #224]	@ (80046cc <HAL_DMA_Abort+0x618>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d027      	beq.n	800463e <HAL_DMA_Abort+0x58a>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a37      	ldr	r2, [pc, #220]	@ (80046d0 <HAL_DMA_Abort+0x61c>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d022      	beq.n	800463e <HAL_DMA_Abort+0x58a>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a35      	ldr	r2, [pc, #212]	@ (80046d4 <HAL_DMA_Abort+0x620>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d01d      	beq.n	800463e <HAL_DMA_Abort+0x58a>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a34      	ldr	r2, [pc, #208]	@ (80046d8 <HAL_DMA_Abort+0x624>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d018      	beq.n	800463e <HAL_DMA_Abort+0x58a>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a32      	ldr	r2, [pc, #200]	@ (80046dc <HAL_DMA_Abort+0x628>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d013      	beq.n	800463e <HAL_DMA_Abort+0x58a>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a31      	ldr	r2, [pc, #196]	@ (80046e0 <HAL_DMA_Abort+0x62c>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d00e      	beq.n	800463e <HAL_DMA_Abort+0x58a>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a2f      	ldr	r2, [pc, #188]	@ (80046e4 <HAL_DMA_Abort+0x630>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d009      	beq.n	800463e <HAL_DMA_Abort+0x58a>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a2e      	ldr	r2, [pc, #184]	@ (80046e8 <HAL_DMA_Abort+0x634>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d004      	beq.n	800463e <HAL_DMA_Abort+0x58a>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a2c      	ldr	r2, [pc, #176]	@ (80046ec <HAL_DMA_Abort+0x638>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d101      	bne.n	8004642 <HAL_DMA_Abort+0x58e>
 800463e:	2301      	movs	r3, #1
 8004640:	e000      	b.n	8004644 <HAL_DMA_Abort+0x590>
 8004642:	2300      	movs	r3, #0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d015      	beq.n	8004674 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004650:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00c      	beq.n	8004674 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004664:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004668:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004672:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3718      	adds	r7, #24
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	40020010 	.word	0x40020010
 8004694:	40020028 	.word	0x40020028
 8004698:	40020040 	.word	0x40020040
 800469c:	40020058 	.word	0x40020058
 80046a0:	40020070 	.word	0x40020070
 80046a4:	40020088 	.word	0x40020088
 80046a8:	400200a0 	.word	0x400200a0
 80046ac:	400200b8 	.word	0x400200b8
 80046b0:	40020410 	.word	0x40020410
 80046b4:	40020428 	.word	0x40020428
 80046b8:	40020440 	.word	0x40020440
 80046bc:	40020458 	.word	0x40020458
 80046c0:	40020470 	.word	0x40020470
 80046c4:	40020488 	.word	0x40020488
 80046c8:	400204a0 	.word	0x400204a0
 80046cc:	400204b8 	.word	0x400204b8
 80046d0:	58025408 	.word	0x58025408
 80046d4:	5802541c 	.word	0x5802541c
 80046d8:	58025430 	.word	0x58025430
 80046dc:	58025444 	.word	0x58025444
 80046e0:	58025458 	.word	0x58025458
 80046e4:	5802546c 	.word	0x5802546c
 80046e8:	58025480 	.word	0x58025480
 80046ec:	58025494 	.word	0x58025494

080046f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e237      	b.n	8004b72 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d004      	beq.n	8004718 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2280      	movs	r2, #128	@ 0x80
 8004712:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e22c      	b.n	8004b72 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a5c      	ldr	r2, [pc, #368]	@ (8004890 <HAL_DMA_Abort_IT+0x1a0>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d04a      	beq.n	80047b8 <HAL_DMA_Abort_IT+0xc8>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a5b      	ldr	r2, [pc, #364]	@ (8004894 <HAL_DMA_Abort_IT+0x1a4>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d045      	beq.n	80047b8 <HAL_DMA_Abort_IT+0xc8>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a59      	ldr	r2, [pc, #356]	@ (8004898 <HAL_DMA_Abort_IT+0x1a8>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d040      	beq.n	80047b8 <HAL_DMA_Abort_IT+0xc8>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a58      	ldr	r2, [pc, #352]	@ (800489c <HAL_DMA_Abort_IT+0x1ac>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d03b      	beq.n	80047b8 <HAL_DMA_Abort_IT+0xc8>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a56      	ldr	r2, [pc, #344]	@ (80048a0 <HAL_DMA_Abort_IT+0x1b0>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d036      	beq.n	80047b8 <HAL_DMA_Abort_IT+0xc8>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a55      	ldr	r2, [pc, #340]	@ (80048a4 <HAL_DMA_Abort_IT+0x1b4>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d031      	beq.n	80047b8 <HAL_DMA_Abort_IT+0xc8>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a53      	ldr	r2, [pc, #332]	@ (80048a8 <HAL_DMA_Abort_IT+0x1b8>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d02c      	beq.n	80047b8 <HAL_DMA_Abort_IT+0xc8>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a52      	ldr	r2, [pc, #328]	@ (80048ac <HAL_DMA_Abort_IT+0x1bc>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d027      	beq.n	80047b8 <HAL_DMA_Abort_IT+0xc8>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a50      	ldr	r2, [pc, #320]	@ (80048b0 <HAL_DMA_Abort_IT+0x1c0>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d022      	beq.n	80047b8 <HAL_DMA_Abort_IT+0xc8>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a4f      	ldr	r2, [pc, #316]	@ (80048b4 <HAL_DMA_Abort_IT+0x1c4>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d01d      	beq.n	80047b8 <HAL_DMA_Abort_IT+0xc8>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a4d      	ldr	r2, [pc, #308]	@ (80048b8 <HAL_DMA_Abort_IT+0x1c8>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d018      	beq.n	80047b8 <HAL_DMA_Abort_IT+0xc8>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a4c      	ldr	r2, [pc, #304]	@ (80048bc <HAL_DMA_Abort_IT+0x1cc>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d013      	beq.n	80047b8 <HAL_DMA_Abort_IT+0xc8>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a4a      	ldr	r2, [pc, #296]	@ (80048c0 <HAL_DMA_Abort_IT+0x1d0>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d00e      	beq.n	80047b8 <HAL_DMA_Abort_IT+0xc8>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a49      	ldr	r2, [pc, #292]	@ (80048c4 <HAL_DMA_Abort_IT+0x1d4>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d009      	beq.n	80047b8 <HAL_DMA_Abort_IT+0xc8>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a47      	ldr	r2, [pc, #284]	@ (80048c8 <HAL_DMA_Abort_IT+0x1d8>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d004      	beq.n	80047b8 <HAL_DMA_Abort_IT+0xc8>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a46      	ldr	r2, [pc, #280]	@ (80048cc <HAL_DMA_Abort_IT+0x1dc>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d101      	bne.n	80047bc <HAL_DMA_Abort_IT+0xcc>
 80047b8:	2301      	movs	r3, #1
 80047ba:	e000      	b.n	80047be <HAL_DMA_Abort_IT+0xce>
 80047bc:	2300      	movs	r3, #0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f000 8086 	beq.w	80048d0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2204      	movs	r2, #4
 80047c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a2f      	ldr	r2, [pc, #188]	@ (8004890 <HAL_DMA_Abort_IT+0x1a0>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d04a      	beq.n	800486c <HAL_DMA_Abort_IT+0x17c>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a2e      	ldr	r2, [pc, #184]	@ (8004894 <HAL_DMA_Abort_IT+0x1a4>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d045      	beq.n	800486c <HAL_DMA_Abort_IT+0x17c>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a2c      	ldr	r2, [pc, #176]	@ (8004898 <HAL_DMA_Abort_IT+0x1a8>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d040      	beq.n	800486c <HAL_DMA_Abort_IT+0x17c>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a2b      	ldr	r2, [pc, #172]	@ (800489c <HAL_DMA_Abort_IT+0x1ac>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d03b      	beq.n	800486c <HAL_DMA_Abort_IT+0x17c>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a29      	ldr	r2, [pc, #164]	@ (80048a0 <HAL_DMA_Abort_IT+0x1b0>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d036      	beq.n	800486c <HAL_DMA_Abort_IT+0x17c>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a28      	ldr	r2, [pc, #160]	@ (80048a4 <HAL_DMA_Abort_IT+0x1b4>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d031      	beq.n	800486c <HAL_DMA_Abort_IT+0x17c>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a26      	ldr	r2, [pc, #152]	@ (80048a8 <HAL_DMA_Abort_IT+0x1b8>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d02c      	beq.n	800486c <HAL_DMA_Abort_IT+0x17c>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a25      	ldr	r2, [pc, #148]	@ (80048ac <HAL_DMA_Abort_IT+0x1bc>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d027      	beq.n	800486c <HAL_DMA_Abort_IT+0x17c>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a23      	ldr	r2, [pc, #140]	@ (80048b0 <HAL_DMA_Abort_IT+0x1c0>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d022      	beq.n	800486c <HAL_DMA_Abort_IT+0x17c>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a22      	ldr	r2, [pc, #136]	@ (80048b4 <HAL_DMA_Abort_IT+0x1c4>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d01d      	beq.n	800486c <HAL_DMA_Abort_IT+0x17c>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a20      	ldr	r2, [pc, #128]	@ (80048b8 <HAL_DMA_Abort_IT+0x1c8>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d018      	beq.n	800486c <HAL_DMA_Abort_IT+0x17c>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a1f      	ldr	r2, [pc, #124]	@ (80048bc <HAL_DMA_Abort_IT+0x1cc>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d013      	beq.n	800486c <HAL_DMA_Abort_IT+0x17c>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a1d      	ldr	r2, [pc, #116]	@ (80048c0 <HAL_DMA_Abort_IT+0x1d0>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d00e      	beq.n	800486c <HAL_DMA_Abort_IT+0x17c>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a1c      	ldr	r2, [pc, #112]	@ (80048c4 <HAL_DMA_Abort_IT+0x1d4>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d009      	beq.n	800486c <HAL_DMA_Abort_IT+0x17c>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a1a      	ldr	r2, [pc, #104]	@ (80048c8 <HAL_DMA_Abort_IT+0x1d8>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d004      	beq.n	800486c <HAL_DMA_Abort_IT+0x17c>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a19      	ldr	r2, [pc, #100]	@ (80048cc <HAL_DMA_Abort_IT+0x1dc>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d108      	bne.n	800487e <HAL_DMA_Abort_IT+0x18e>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 0201 	bic.w	r2, r2, #1
 800487a:	601a      	str	r2, [r3, #0]
 800487c:	e178      	b.n	8004b70 <HAL_DMA_Abort_IT+0x480>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 0201 	bic.w	r2, r2, #1
 800488c:	601a      	str	r2, [r3, #0]
 800488e:	e16f      	b.n	8004b70 <HAL_DMA_Abort_IT+0x480>
 8004890:	40020010 	.word	0x40020010
 8004894:	40020028 	.word	0x40020028
 8004898:	40020040 	.word	0x40020040
 800489c:	40020058 	.word	0x40020058
 80048a0:	40020070 	.word	0x40020070
 80048a4:	40020088 	.word	0x40020088
 80048a8:	400200a0 	.word	0x400200a0
 80048ac:	400200b8 	.word	0x400200b8
 80048b0:	40020410 	.word	0x40020410
 80048b4:	40020428 	.word	0x40020428
 80048b8:	40020440 	.word	0x40020440
 80048bc:	40020458 	.word	0x40020458
 80048c0:	40020470 	.word	0x40020470
 80048c4:	40020488 	.word	0x40020488
 80048c8:	400204a0 	.word	0x400204a0
 80048cc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 020e 	bic.w	r2, r2, #14
 80048de:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a6c      	ldr	r2, [pc, #432]	@ (8004a98 <HAL_DMA_Abort_IT+0x3a8>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d04a      	beq.n	8004980 <HAL_DMA_Abort_IT+0x290>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a6b      	ldr	r2, [pc, #428]	@ (8004a9c <HAL_DMA_Abort_IT+0x3ac>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d045      	beq.n	8004980 <HAL_DMA_Abort_IT+0x290>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a69      	ldr	r2, [pc, #420]	@ (8004aa0 <HAL_DMA_Abort_IT+0x3b0>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d040      	beq.n	8004980 <HAL_DMA_Abort_IT+0x290>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a68      	ldr	r2, [pc, #416]	@ (8004aa4 <HAL_DMA_Abort_IT+0x3b4>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d03b      	beq.n	8004980 <HAL_DMA_Abort_IT+0x290>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a66      	ldr	r2, [pc, #408]	@ (8004aa8 <HAL_DMA_Abort_IT+0x3b8>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d036      	beq.n	8004980 <HAL_DMA_Abort_IT+0x290>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a65      	ldr	r2, [pc, #404]	@ (8004aac <HAL_DMA_Abort_IT+0x3bc>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d031      	beq.n	8004980 <HAL_DMA_Abort_IT+0x290>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a63      	ldr	r2, [pc, #396]	@ (8004ab0 <HAL_DMA_Abort_IT+0x3c0>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d02c      	beq.n	8004980 <HAL_DMA_Abort_IT+0x290>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a62      	ldr	r2, [pc, #392]	@ (8004ab4 <HAL_DMA_Abort_IT+0x3c4>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d027      	beq.n	8004980 <HAL_DMA_Abort_IT+0x290>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a60      	ldr	r2, [pc, #384]	@ (8004ab8 <HAL_DMA_Abort_IT+0x3c8>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d022      	beq.n	8004980 <HAL_DMA_Abort_IT+0x290>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a5f      	ldr	r2, [pc, #380]	@ (8004abc <HAL_DMA_Abort_IT+0x3cc>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d01d      	beq.n	8004980 <HAL_DMA_Abort_IT+0x290>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a5d      	ldr	r2, [pc, #372]	@ (8004ac0 <HAL_DMA_Abort_IT+0x3d0>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d018      	beq.n	8004980 <HAL_DMA_Abort_IT+0x290>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a5c      	ldr	r2, [pc, #368]	@ (8004ac4 <HAL_DMA_Abort_IT+0x3d4>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d013      	beq.n	8004980 <HAL_DMA_Abort_IT+0x290>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a5a      	ldr	r2, [pc, #360]	@ (8004ac8 <HAL_DMA_Abort_IT+0x3d8>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d00e      	beq.n	8004980 <HAL_DMA_Abort_IT+0x290>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a59      	ldr	r2, [pc, #356]	@ (8004acc <HAL_DMA_Abort_IT+0x3dc>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d009      	beq.n	8004980 <HAL_DMA_Abort_IT+0x290>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a57      	ldr	r2, [pc, #348]	@ (8004ad0 <HAL_DMA_Abort_IT+0x3e0>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d004      	beq.n	8004980 <HAL_DMA_Abort_IT+0x290>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a56      	ldr	r2, [pc, #344]	@ (8004ad4 <HAL_DMA_Abort_IT+0x3e4>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d108      	bne.n	8004992 <HAL_DMA_Abort_IT+0x2a2>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f022 0201 	bic.w	r2, r2, #1
 800498e:	601a      	str	r2, [r3, #0]
 8004990:	e007      	b.n	80049a2 <HAL_DMA_Abort_IT+0x2b2>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 0201 	bic.w	r2, r2, #1
 80049a0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a3c      	ldr	r2, [pc, #240]	@ (8004a98 <HAL_DMA_Abort_IT+0x3a8>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d072      	beq.n	8004a92 <HAL_DMA_Abort_IT+0x3a2>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a3a      	ldr	r2, [pc, #232]	@ (8004a9c <HAL_DMA_Abort_IT+0x3ac>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d06d      	beq.n	8004a92 <HAL_DMA_Abort_IT+0x3a2>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a39      	ldr	r2, [pc, #228]	@ (8004aa0 <HAL_DMA_Abort_IT+0x3b0>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d068      	beq.n	8004a92 <HAL_DMA_Abort_IT+0x3a2>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a37      	ldr	r2, [pc, #220]	@ (8004aa4 <HAL_DMA_Abort_IT+0x3b4>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d063      	beq.n	8004a92 <HAL_DMA_Abort_IT+0x3a2>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a36      	ldr	r2, [pc, #216]	@ (8004aa8 <HAL_DMA_Abort_IT+0x3b8>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d05e      	beq.n	8004a92 <HAL_DMA_Abort_IT+0x3a2>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a34      	ldr	r2, [pc, #208]	@ (8004aac <HAL_DMA_Abort_IT+0x3bc>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d059      	beq.n	8004a92 <HAL_DMA_Abort_IT+0x3a2>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a33      	ldr	r2, [pc, #204]	@ (8004ab0 <HAL_DMA_Abort_IT+0x3c0>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d054      	beq.n	8004a92 <HAL_DMA_Abort_IT+0x3a2>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a31      	ldr	r2, [pc, #196]	@ (8004ab4 <HAL_DMA_Abort_IT+0x3c4>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d04f      	beq.n	8004a92 <HAL_DMA_Abort_IT+0x3a2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a30      	ldr	r2, [pc, #192]	@ (8004ab8 <HAL_DMA_Abort_IT+0x3c8>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d04a      	beq.n	8004a92 <HAL_DMA_Abort_IT+0x3a2>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a2e      	ldr	r2, [pc, #184]	@ (8004abc <HAL_DMA_Abort_IT+0x3cc>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d045      	beq.n	8004a92 <HAL_DMA_Abort_IT+0x3a2>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a2d      	ldr	r2, [pc, #180]	@ (8004ac0 <HAL_DMA_Abort_IT+0x3d0>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d040      	beq.n	8004a92 <HAL_DMA_Abort_IT+0x3a2>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a2b      	ldr	r2, [pc, #172]	@ (8004ac4 <HAL_DMA_Abort_IT+0x3d4>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d03b      	beq.n	8004a92 <HAL_DMA_Abort_IT+0x3a2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a2a      	ldr	r2, [pc, #168]	@ (8004ac8 <HAL_DMA_Abort_IT+0x3d8>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d036      	beq.n	8004a92 <HAL_DMA_Abort_IT+0x3a2>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a28      	ldr	r2, [pc, #160]	@ (8004acc <HAL_DMA_Abort_IT+0x3dc>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d031      	beq.n	8004a92 <HAL_DMA_Abort_IT+0x3a2>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a27      	ldr	r2, [pc, #156]	@ (8004ad0 <HAL_DMA_Abort_IT+0x3e0>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d02c      	beq.n	8004a92 <HAL_DMA_Abort_IT+0x3a2>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a25      	ldr	r2, [pc, #148]	@ (8004ad4 <HAL_DMA_Abort_IT+0x3e4>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d027      	beq.n	8004a92 <HAL_DMA_Abort_IT+0x3a2>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a24      	ldr	r2, [pc, #144]	@ (8004ad8 <HAL_DMA_Abort_IT+0x3e8>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d022      	beq.n	8004a92 <HAL_DMA_Abort_IT+0x3a2>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a22      	ldr	r2, [pc, #136]	@ (8004adc <HAL_DMA_Abort_IT+0x3ec>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d01d      	beq.n	8004a92 <HAL_DMA_Abort_IT+0x3a2>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a21      	ldr	r2, [pc, #132]	@ (8004ae0 <HAL_DMA_Abort_IT+0x3f0>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d018      	beq.n	8004a92 <HAL_DMA_Abort_IT+0x3a2>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a1f      	ldr	r2, [pc, #124]	@ (8004ae4 <HAL_DMA_Abort_IT+0x3f4>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d013      	beq.n	8004a92 <HAL_DMA_Abort_IT+0x3a2>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ae8 <HAL_DMA_Abort_IT+0x3f8>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d00e      	beq.n	8004a92 <HAL_DMA_Abort_IT+0x3a2>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a1c      	ldr	r2, [pc, #112]	@ (8004aec <HAL_DMA_Abort_IT+0x3fc>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d009      	beq.n	8004a92 <HAL_DMA_Abort_IT+0x3a2>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a1b      	ldr	r2, [pc, #108]	@ (8004af0 <HAL_DMA_Abort_IT+0x400>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d004      	beq.n	8004a92 <HAL_DMA_Abort_IT+0x3a2>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a19      	ldr	r2, [pc, #100]	@ (8004af4 <HAL_DMA_Abort_IT+0x404>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d132      	bne.n	8004af8 <HAL_DMA_Abort_IT+0x408>
 8004a92:	2301      	movs	r3, #1
 8004a94:	e031      	b.n	8004afa <HAL_DMA_Abort_IT+0x40a>
 8004a96:	bf00      	nop
 8004a98:	40020010 	.word	0x40020010
 8004a9c:	40020028 	.word	0x40020028
 8004aa0:	40020040 	.word	0x40020040
 8004aa4:	40020058 	.word	0x40020058
 8004aa8:	40020070 	.word	0x40020070
 8004aac:	40020088 	.word	0x40020088
 8004ab0:	400200a0 	.word	0x400200a0
 8004ab4:	400200b8 	.word	0x400200b8
 8004ab8:	40020410 	.word	0x40020410
 8004abc:	40020428 	.word	0x40020428
 8004ac0:	40020440 	.word	0x40020440
 8004ac4:	40020458 	.word	0x40020458
 8004ac8:	40020470 	.word	0x40020470
 8004acc:	40020488 	.word	0x40020488
 8004ad0:	400204a0 	.word	0x400204a0
 8004ad4:	400204b8 	.word	0x400204b8
 8004ad8:	58025408 	.word	0x58025408
 8004adc:	5802541c 	.word	0x5802541c
 8004ae0:	58025430 	.word	0x58025430
 8004ae4:	58025444 	.word	0x58025444
 8004ae8:	58025458 	.word	0x58025458
 8004aec:	5802546c 	.word	0x5802546c
 8004af0:	58025480 	.word	0x58025480
 8004af4:	58025494 	.word	0x58025494
 8004af8:	2300      	movs	r3, #0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d028      	beq.n	8004b50 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b0c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b12:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b18:	f003 031f 	and.w	r3, r3, #31
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	409a      	lsls	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004b2c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00c      	beq.n	8004b50 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b44:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004b4e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d003      	beq.n	8004b70 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop

08004b7c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b08a      	sub	sp, #40	@ 0x28
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004b84:	2300      	movs	r3, #0
 8004b86:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004b88:	4b67      	ldr	r3, [pc, #412]	@ (8004d28 <HAL_DMA_IRQHandler+0x1ac>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a67      	ldr	r2, [pc, #412]	@ (8004d2c <HAL_DMA_IRQHandler+0x1b0>)
 8004b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b92:	0a9b      	lsrs	r3, r3, #10
 8004b94:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b9a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ba0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004ba2:	6a3b      	ldr	r3, [r7, #32]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a5f      	ldr	r2, [pc, #380]	@ (8004d30 <HAL_DMA_IRQHandler+0x1b4>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d04a      	beq.n	8004c4e <HAL_DMA_IRQHandler+0xd2>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a5d      	ldr	r2, [pc, #372]	@ (8004d34 <HAL_DMA_IRQHandler+0x1b8>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d045      	beq.n	8004c4e <HAL_DMA_IRQHandler+0xd2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a5c      	ldr	r2, [pc, #368]	@ (8004d38 <HAL_DMA_IRQHandler+0x1bc>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d040      	beq.n	8004c4e <HAL_DMA_IRQHandler+0xd2>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a5a      	ldr	r2, [pc, #360]	@ (8004d3c <HAL_DMA_IRQHandler+0x1c0>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d03b      	beq.n	8004c4e <HAL_DMA_IRQHandler+0xd2>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a59      	ldr	r2, [pc, #356]	@ (8004d40 <HAL_DMA_IRQHandler+0x1c4>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d036      	beq.n	8004c4e <HAL_DMA_IRQHandler+0xd2>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a57      	ldr	r2, [pc, #348]	@ (8004d44 <HAL_DMA_IRQHandler+0x1c8>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d031      	beq.n	8004c4e <HAL_DMA_IRQHandler+0xd2>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a56      	ldr	r2, [pc, #344]	@ (8004d48 <HAL_DMA_IRQHandler+0x1cc>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d02c      	beq.n	8004c4e <HAL_DMA_IRQHandler+0xd2>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a54      	ldr	r2, [pc, #336]	@ (8004d4c <HAL_DMA_IRQHandler+0x1d0>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d027      	beq.n	8004c4e <HAL_DMA_IRQHandler+0xd2>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a53      	ldr	r2, [pc, #332]	@ (8004d50 <HAL_DMA_IRQHandler+0x1d4>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d022      	beq.n	8004c4e <HAL_DMA_IRQHandler+0xd2>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a51      	ldr	r2, [pc, #324]	@ (8004d54 <HAL_DMA_IRQHandler+0x1d8>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d01d      	beq.n	8004c4e <HAL_DMA_IRQHandler+0xd2>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a50      	ldr	r2, [pc, #320]	@ (8004d58 <HAL_DMA_IRQHandler+0x1dc>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d018      	beq.n	8004c4e <HAL_DMA_IRQHandler+0xd2>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a4e      	ldr	r2, [pc, #312]	@ (8004d5c <HAL_DMA_IRQHandler+0x1e0>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d013      	beq.n	8004c4e <HAL_DMA_IRQHandler+0xd2>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a4d      	ldr	r2, [pc, #308]	@ (8004d60 <HAL_DMA_IRQHandler+0x1e4>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d00e      	beq.n	8004c4e <HAL_DMA_IRQHandler+0xd2>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a4b      	ldr	r2, [pc, #300]	@ (8004d64 <HAL_DMA_IRQHandler+0x1e8>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d009      	beq.n	8004c4e <HAL_DMA_IRQHandler+0xd2>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a4a      	ldr	r2, [pc, #296]	@ (8004d68 <HAL_DMA_IRQHandler+0x1ec>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d004      	beq.n	8004c4e <HAL_DMA_IRQHandler+0xd2>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a48      	ldr	r2, [pc, #288]	@ (8004d6c <HAL_DMA_IRQHandler+0x1f0>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d101      	bne.n	8004c52 <HAL_DMA_IRQHandler+0xd6>
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e000      	b.n	8004c54 <HAL_DMA_IRQHandler+0xd8>
 8004c52:	2300      	movs	r3, #0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 842b 	beq.w	80054b0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c5e:	f003 031f 	and.w	r3, r3, #31
 8004c62:	2208      	movs	r2, #8
 8004c64:	409a      	lsls	r2, r3
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	4013      	ands	r3, r2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f000 80a2 	beq.w	8004db4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a2e      	ldr	r2, [pc, #184]	@ (8004d30 <HAL_DMA_IRQHandler+0x1b4>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d04a      	beq.n	8004d10 <HAL_DMA_IRQHandler+0x194>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a2d      	ldr	r2, [pc, #180]	@ (8004d34 <HAL_DMA_IRQHandler+0x1b8>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d045      	beq.n	8004d10 <HAL_DMA_IRQHandler+0x194>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a2b      	ldr	r2, [pc, #172]	@ (8004d38 <HAL_DMA_IRQHandler+0x1bc>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d040      	beq.n	8004d10 <HAL_DMA_IRQHandler+0x194>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a2a      	ldr	r2, [pc, #168]	@ (8004d3c <HAL_DMA_IRQHandler+0x1c0>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d03b      	beq.n	8004d10 <HAL_DMA_IRQHandler+0x194>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a28      	ldr	r2, [pc, #160]	@ (8004d40 <HAL_DMA_IRQHandler+0x1c4>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d036      	beq.n	8004d10 <HAL_DMA_IRQHandler+0x194>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a27      	ldr	r2, [pc, #156]	@ (8004d44 <HAL_DMA_IRQHandler+0x1c8>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d031      	beq.n	8004d10 <HAL_DMA_IRQHandler+0x194>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a25      	ldr	r2, [pc, #148]	@ (8004d48 <HAL_DMA_IRQHandler+0x1cc>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d02c      	beq.n	8004d10 <HAL_DMA_IRQHandler+0x194>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a24      	ldr	r2, [pc, #144]	@ (8004d4c <HAL_DMA_IRQHandler+0x1d0>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d027      	beq.n	8004d10 <HAL_DMA_IRQHandler+0x194>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a22      	ldr	r2, [pc, #136]	@ (8004d50 <HAL_DMA_IRQHandler+0x1d4>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d022      	beq.n	8004d10 <HAL_DMA_IRQHandler+0x194>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a21      	ldr	r2, [pc, #132]	@ (8004d54 <HAL_DMA_IRQHandler+0x1d8>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d01d      	beq.n	8004d10 <HAL_DMA_IRQHandler+0x194>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a1f      	ldr	r2, [pc, #124]	@ (8004d58 <HAL_DMA_IRQHandler+0x1dc>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d018      	beq.n	8004d10 <HAL_DMA_IRQHandler+0x194>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a1e      	ldr	r2, [pc, #120]	@ (8004d5c <HAL_DMA_IRQHandler+0x1e0>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d013      	beq.n	8004d10 <HAL_DMA_IRQHandler+0x194>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a1c      	ldr	r2, [pc, #112]	@ (8004d60 <HAL_DMA_IRQHandler+0x1e4>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d00e      	beq.n	8004d10 <HAL_DMA_IRQHandler+0x194>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a1b      	ldr	r2, [pc, #108]	@ (8004d64 <HAL_DMA_IRQHandler+0x1e8>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d009      	beq.n	8004d10 <HAL_DMA_IRQHandler+0x194>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a19      	ldr	r2, [pc, #100]	@ (8004d68 <HAL_DMA_IRQHandler+0x1ec>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d004      	beq.n	8004d10 <HAL_DMA_IRQHandler+0x194>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a18      	ldr	r2, [pc, #96]	@ (8004d6c <HAL_DMA_IRQHandler+0x1f0>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d12f      	bne.n	8004d70 <HAL_DMA_IRQHandler+0x1f4>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0304 	and.w	r3, r3, #4
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	bf14      	ite	ne
 8004d1e:	2301      	movne	r3, #1
 8004d20:	2300      	moveq	r3, #0
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	e02e      	b.n	8004d84 <HAL_DMA_IRQHandler+0x208>
 8004d26:	bf00      	nop
 8004d28:	24000044 	.word	0x24000044
 8004d2c:	1b4e81b5 	.word	0x1b4e81b5
 8004d30:	40020010 	.word	0x40020010
 8004d34:	40020028 	.word	0x40020028
 8004d38:	40020040 	.word	0x40020040
 8004d3c:	40020058 	.word	0x40020058
 8004d40:	40020070 	.word	0x40020070
 8004d44:	40020088 	.word	0x40020088
 8004d48:	400200a0 	.word	0x400200a0
 8004d4c:	400200b8 	.word	0x400200b8
 8004d50:	40020410 	.word	0x40020410
 8004d54:	40020428 	.word	0x40020428
 8004d58:	40020440 	.word	0x40020440
 8004d5c:	40020458 	.word	0x40020458
 8004d60:	40020470 	.word	0x40020470
 8004d64:	40020488 	.word	0x40020488
 8004d68:	400204a0 	.word	0x400204a0
 8004d6c:	400204b8 	.word	0x400204b8
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0308 	and.w	r3, r3, #8
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	bf14      	ite	ne
 8004d7e:	2301      	movne	r3, #1
 8004d80:	2300      	moveq	r3, #0
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d015      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f022 0204 	bic.w	r2, r2, #4
 8004d96:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d9c:	f003 031f 	and.w	r3, r3, #31
 8004da0:	2208      	movs	r2, #8
 8004da2:	409a      	lsls	r2, r3
 8004da4:	6a3b      	ldr	r3, [r7, #32]
 8004da6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dac:	f043 0201 	orr.w	r2, r3, #1
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004db8:	f003 031f 	and.w	r3, r3, #31
 8004dbc:	69ba      	ldr	r2, [r7, #24]
 8004dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d06e      	beq.n	8004ea8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a69      	ldr	r2, [pc, #420]	@ (8004f74 <HAL_DMA_IRQHandler+0x3f8>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d04a      	beq.n	8004e6a <HAL_DMA_IRQHandler+0x2ee>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a67      	ldr	r2, [pc, #412]	@ (8004f78 <HAL_DMA_IRQHandler+0x3fc>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d045      	beq.n	8004e6a <HAL_DMA_IRQHandler+0x2ee>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a66      	ldr	r2, [pc, #408]	@ (8004f7c <HAL_DMA_IRQHandler+0x400>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d040      	beq.n	8004e6a <HAL_DMA_IRQHandler+0x2ee>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a64      	ldr	r2, [pc, #400]	@ (8004f80 <HAL_DMA_IRQHandler+0x404>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d03b      	beq.n	8004e6a <HAL_DMA_IRQHandler+0x2ee>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a63      	ldr	r2, [pc, #396]	@ (8004f84 <HAL_DMA_IRQHandler+0x408>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d036      	beq.n	8004e6a <HAL_DMA_IRQHandler+0x2ee>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a61      	ldr	r2, [pc, #388]	@ (8004f88 <HAL_DMA_IRQHandler+0x40c>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d031      	beq.n	8004e6a <HAL_DMA_IRQHandler+0x2ee>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a60      	ldr	r2, [pc, #384]	@ (8004f8c <HAL_DMA_IRQHandler+0x410>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d02c      	beq.n	8004e6a <HAL_DMA_IRQHandler+0x2ee>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a5e      	ldr	r2, [pc, #376]	@ (8004f90 <HAL_DMA_IRQHandler+0x414>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d027      	beq.n	8004e6a <HAL_DMA_IRQHandler+0x2ee>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a5d      	ldr	r2, [pc, #372]	@ (8004f94 <HAL_DMA_IRQHandler+0x418>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d022      	beq.n	8004e6a <HAL_DMA_IRQHandler+0x2ee>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a5b      	ldr	r2, [pc, #364]	@ (8004f98 <HAL_DMA_IRQHandler+0x41c>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d01d      	beq.n	8004e6a <HAL_DMA_IRQHandler+0x2ee>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a5a      	ldr	r2, [pc, #360]	@ (8004f9c <HAL_DMA_IRQHandler+0x420>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d018      	beq.n	8004e6a <HAL_DMA_IRQHandler+0x2ee>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a58      	ldr	r2, [pc, #352]	@ (8004fa0 <HAL_DMA_IRQHandler+0x424>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d013      	beq.n	8004e6a <HAL_DMA_IRQHandler+0x2ee>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a57      	ldr	r2, [pc, #348]	@ (8004fa4 <HAL_DMA_IRQHandler+0x428>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d00e      	beq.n	8004e6a <HAL_DMA_IRQHandler+0x2ee>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a55      	ldr	r2, [pc, #340]	@ (8004fa8 <HAL_DMA_IRQHandler+0x42c>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d009      	beq.n	8004e6a <HAL_DMA_IRQHandler+0x2ee>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a54      	ldr	r2, [pc, #336]	@ (8004fac <HAL_DMA_IRQHandler+0x430>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d004      	beq.n	8004e6a <HAL_DMA_IRQHandler+0x2ee>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a52      	ldr	r2, [pc, #328]	@ (8004fb0 <HAL_DMA_IRQHandler+0x434>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d10a      	bne.n	8004e80 <HAL_DMA_IRQHandler+0x304>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	bf14      	ite	ne
 8004e78:	2301      	movne	r3, #1
 8004e7a:	2300      	moveq	r3, #0
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	e003      	b.n	8004e88 <HAL_DMA_IRQHandler+0x30c>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2300      	movs	r3, #0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00d      	beq.n	8004ea8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e90:	f003 031f 	and.w	r3, r3, #31
 8004e94:	2201      	movs	r2, #1
 8004e96:	409a      	lsls	r2, r3
 8004e98:	6a3b      	ldr	r3, [r7, #32]
 8004e9a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ea0:	f043 0202 	orr.w	r2, r3, #2
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eac:	f003 031f 	and.w	r3, r3, #31
 8004eb0:	2204      	movs	r2, #4
 8004eb2:	409a      	lsls	r2, r3
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f000 808f 	beq.w	8004fdc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a2c      	ldr	r2, [pc, #176]	@ (8004f74 <HAL_DMA_IRQHandler+0x3f8>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d04a      	beq.n	8004f5e <HAL_DMA_IRQHandler+0x3e2>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a2a      	ldr	r2, [pc, #168]	@ (8004f78 <HAL_DMA_IRQHandler+0x3fc>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d045      	beq.n	8004f5e <HAL_DMA_IRQHandler+0x3e2>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a29      	ldr	r2, [pc, #164]	@ (8004f7c <HAL_DMA_IRQHandler+0x400>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d040      	beq.n	8004f5e <HAL_DMA_IRQHandler+0x3e2>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a27      	ldr	r2, [pc, #156]	@ (8004f80 <HAL_DMA_IRQHandler+0x404>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d03b      	beq.n	8004f5e <HAL_DMA_IRQHandler+0x3e2>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a26      	ldr	r2, [pc, #152]	@ (8004f84 <HAL_DMA_IRQHandler+0x408>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d036      	beq.n	8004f5e <HAL_DMA_IRQHandler+0x3e2>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a24      	ldr	r2, [pc, #144]	@ (8004f88 <HAL_DMA_IRQHandler+0x40c>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d031      	beq.n	8004f5e <HAL_DMA_IRQHandler+0x3e2>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a23      	ldr	r2, [pc, #140]	@ (8004f8c <HAL_DMA_IRQHandler+0x410>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d02c      	beq.n	8004f5e <HAL_DMA_IRQHandler+0x3e2>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a21      	ldr	r2, [pc, #132]	@ (8004f90 <HAL_DMA_IRQHandler+0x414>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d027      	beq.n	8004f5e <HAL_DMA_IRQHandler+0x3e2>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a20      	ldr	r2, [pc, #128]	@ (8004f94 <HAL_DMA_IRQHandler+0x418>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d022      	beq.n	8004f5e <HAL_DMA_IRQHandler+0x3e2>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a1e      	ldr	r2, [pc, #120]	@ (8004f98 <HAL_DMA_IRQHandler+0x41c>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d01d      	beq.n	8004f5e <HAL_DMA_IRQHandler+0x3e2>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a1d      	ldr	r2, [pc, #116]	@ (8004f9c <HAL_DMA_IRQHandler+0x420>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d018      	beq.n	8004f5e <HAL_DMA_IRQHandler+0x3e2>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a1b      	ldr	r2, [pc, #108]	@ (8004fa0 <HAL_DMA_IRQHandler+0x424>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d013      	beq.n	8004f5e <HAL_DMA_IRQHandler+0x3e2>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a1a      	ldr	r2, [pc, #104]	@ (8004fa4 <HAL_DMA_IRQHandler+0x428>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d00e      	beq.n	8004f5e <HAL_DMA_IRQHandler+0x3e2>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a18      	ldr	r2, [pc, #96]	@ (8004fa8 <HAL_DMA_IRQHandler+0x42c>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d009      	beq.n	8004f5e <HAL_DMA_IRQHandler+0x3e2>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a17      	ldr	r2, [pc, #92]	@ (8004fac <HAL_DMA_IRQHandler+0x430>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d004      	beq.n	8004f5e <HAL_DMA_IRQHandler+0x3e2>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a15      	ldr	r2, [pc, #84]	@ (8004fb0 <HAL_DMA_IRQHandler+0x434>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d12a      	bne.n	8004fb4 <HAL_DMA_IRQHandler+0x438>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0302 	and.w	r3, r3, #2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	bf14      	ite	ne
 8004f6c:	2301      	movne	r3, #1
 8004f6e:	2300      	moveq	r3, #0
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	e023      	b.n	8004fbc <HAL_DMA_IRQHandler+0x440>
 8004f74:	40020010 	.word	0x40020010
 8004f78:	40020028 	.word	0x40020028
 8004f7c:	40020040 	.word	0x40020040
 8004f80:	40020058 	.word	0x40020058
 8004f84:	40020070 	.word	0x40020070
 8004f88:	40020088 	.word	0x40020088
 8004f8c:	400200a0 	.word	0x400200a0
 8004f90:	400200b8 	.word	0x400200b8
 8004f94:	40020410 	.word	0x40020410
 8004f98:	40020428 	.word	0x40020428
 8004f9c:	40020440 	.word	0x40020440
 8004fa0:	40020458 	.word	0x40020458
 8004fa4:	40020470 	.word	0x40020470
 8004fa8:	40020488 	.word	0x40020488
 8004fac:	400204a0 	.word	0x400204a0
 8004fb0:	400204b8 	.word	0x400204b8
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2300      	movs	r3, #0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00d      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fc4:	f003 031f 	and.w	r3, r3, #31
 8004fc8:	2204      	movs	r2, #4
 8004fca:	409a      	lsls	r2, r3
 8004fcc:	6a3b      	ldr	r3, [r7, #32]
 8004fce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fd4:	f043 0204 	orr.w	r2, r3, #4
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fe0:	f003 031f 	and.w	r3, r3, #31
 8004fe4:	2210      	movs	r2, #16
 8004fe6:	409a      	lsls	r2, r3
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	4013      	ands	r3, r2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f000 80a6 	beq.w	800513e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a85      	ldr	r2, [pc, #532]	@ (800520c <HAL_DMA_IRQHandler+0x690>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d04a      	beq.n	8005092 <HAL_DMA_IRQHandler+0x516>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a83      	ldr	r2, [pc, #524]	@ (8005210 <HAL_DMA_IRQHandler+0x694>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d045      	beq.n	8005092 <HAL_DMA_IRQHandler+0x516>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a82      	ldr	r2, [pc, #520]	@ (8005214 <HAL_DMA_IRQHandler+0x698>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d040      	beq.n	8005092 <HAL_DMA_IRQHandler+0x516>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a80      	ldr	r2, [pc, #512]	@ (8005218 <HAL_DMA_IRQHandler+0x69c>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d03b      	beq.n	8005092 <HAL_DMA_IRQHandler+0x516>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a7f      	ldr	r2, [pc, #508]	@ (800521c <HAL_DMA_IRQHandler+0x6a0>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d036      	beq.n	8005092 <HAL_DMA_IRQHandler+0x516>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a7d      	ldr	r2, [pc, #500]	@ (8005220 <HAL_DMA_IRQHandler+0x6a4>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d031      	beq.n	8005092 <HAL_DMA_IRQHandler+0x516>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a7c      	ldr	r2, [pc, #496]	@ (8005224 <HAL_DMA_IRQHandler+0x6a8>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d02c      	beq.n	8005092 <HAL_DMA_IRQHandler+0x516>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a7a      	ldr	r2, [pc, #488]	@ (8005228 <HAL_DMA_IRQHandler+0x6ac>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d027      	beq.n	8005092 <HAL_DMA_IRQHandler+0x516>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a79      	ldr	r2, [pc, #484]	@ (800522c <HAL_DMA_IRQHandler+0x6b0>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d022      	beq.n	8005092 <HAL_DMA_IRQHandler+0x516>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a77      	ldr	r2, [pc, #476]	@ (8005230 <HAL_DMA_IRQHandler+0x6b4>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d01d      	beq.n	8005092 <HAL_DMA_IRQHandler+0x516>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a76      	ldr	r2, [pc, #472]	@ (8005234 <HAL_DMA_IRQHandler+0x6b8>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d018      	beq.n	8005092 <HAL_DMA_IRQHandler+0x516>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a74      	ldr	r2, [pc, #464]	@ (8005238 <HAL_DMA_IRQHandler+0x6bc>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d013      	beq.n	8005092 <HAL_DMA_IRQHandler+0x516>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a73      	ldr	r2, [pc, #460]	@ (800523c <HAL_DMA_IRQHandler+0x6c0>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d00e      	beq.n	8005092 <HAL_DMA_IRQHandler+0x516>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a71      	ldr	r2, [pc, #452]	@ (8005240 <HAL_DMA_IRQHandler+0x6c4>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d009      	beq.n	8005092 <HAL_DMA_IRQHandler+0x516>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a70      	ldr	r2, [pc, #448]	@ (8005244 <HAL_DMA_IRQHandler+0x6c8>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d004      	beq.n	8005092 <HAL_DMA_IRQHandler+0x516>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a6e      	ldr	r2, [pc, #440]	@ (8005248 <HAL_DMA_IRQHandler+0x6cc>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d10a      	bne.n	80050a8 <HAL_DMA_IRQHandler+0x52c>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0308 	and.w	r3, r3, #8
 800509c:	2b00      	cmp	r3, #0
 800509e:	bf14      	ite	ne
 80050a0:	2301      	movne	r3, #1
 80050a2:	2300      	moveq	r3, #0
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	e009      	b.n	80050bc <HAL_DMA_IRQHandler+0x540>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0304 	and.w	r3, r3, #4
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	bf14      	ite	ne
 80050b6:	2301      	movne	r3, #1
 80050b8:	2300      	moveq	r3, #0
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d03e      	beq.n	800513e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050c4:	f003 031f 	and.w	r3, r3, #31
 80050c8:	2210      	movs	r2, #16
 80050ca:	409a      	lsls	r2, r3
 80050cc:	6a3b      	ldr	r3, [r7, #32]
 80050ce:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d018      	beq.n	8005110 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d108      	bne.n	80050fe <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d024      	beq.n	800513e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	4798      	blx	r3
 80050fc:	e01f      	b.n	800513e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005102:	2b00      	cmp	r3, #0
 8005104:	d01b      	beq.n	800513e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	4798      	blx	r3
 800510e:	e016      	b.n	800513e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800511a:	2b00      	cmp	r3, #0
 800511c:	d107      	bne.n	800512e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f022 0208 	bic.w	r2, r2, #8
 800512c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005132:	2b00      	cmp	r3, #0
 8005134:	d003      	beq.n	800513e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005142:	f003 031f 	and.w	r3, r3, #31
 8005146:	2220      	movs	r2, #32
 8005148:	409a      	lsls	r2, r3
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	4013      	ands	r3, r2
 800514e:	2b00      	cmp	r3, #0
 8005150:	f000 8110 	beq.w	8005374 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a2c      	ldr	r2, [pc, #176]	@ (800520c <HAL_DMA_IRQHandler+0x690>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d04a      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x678>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a2b      	ldr	r2, [pc, #172]	@ (8005210 <HAL_DMA_IRQHandler+0x694>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d045      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x678>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a29      	ldr	r2, [pc, #164]	@ (8005214 <HAL_DMA_IRQHandler+0x698>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d040      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x678>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a28      	ldr	r2, [pc, #160]	@ (8005218 <HAL_DMA_IRQHandler+0x69c>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d03b      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x678>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a26      	ldr	r2, [pc, #152]	@ (800521c <HAL_DMA_IRQHandler+0x6a0>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d036      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x678>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a25      	ldr	r2, [pc, #148]	@ (8005220 <HAL_DMA_IRQHandler+0x6a4>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d031      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x678>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a23      	ldr	r2, [pc, #140]	@ (8005224 <HAL_DMA_IRQHandler+0x6a8>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d02c      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x678>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a22      	ldr	r2, [pc, #136]	@ (8005228 <HAL_DMA_IRQHandler+0x6ac>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d027      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x678>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a20      	ldr	r2, [pc, #128]	@ (800522c <HAL_DMA_IRQHandler+0x6b0>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d022      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x678>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a1f      	ldr	r2, [pc, #124]	@ (8005230 <HAL_DMA_IRQHandler+0x6b4>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d01d      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x678>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a1d      	ldr	r2, [pc, #116]	@ (8005234 <HAL_DMA_IRQHandler+0x6b8>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d018      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x678>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a1c      	ldr	r2, [pc, #112]	@ (8005238 <HAL_DMA_IRQHandler+0x6bc>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d013      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x678>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a1a      	ldr	r2, [pc, #104]	@ (800523c <HAL_DMA_IRQHandler+0x6c0>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d00e      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x678>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a19      	ldr	r2, [pc, #100]	@ (8005240 <HAL_DMA_IRQHandler+0x6c4>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d009      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x678>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a17      	ldr	r2, [pc, #92]	@ (8005244 <HAL_DMA_IRQHandler+0x6c8>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d004      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x678>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a16      	ldr	r2, [pc, #88]	@ (8005248 <HAL_DMA_IRQHandler+0x6cc>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d12b      	bne.n	800524c <HAL_DMA_IRQHandler+0x6d0>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0310 	and.w	r3, r3, #16
 80051fe:	2b00      	cmp	r3, #0
 8005200:	bf14      	ite	ne
 8005202:	2301      	movne	r3, #1
 8005204:	2300      	moveq	r3, #0
 8005206:	b2db      	uxtb	r3, r3
 8005208:	e02a      	b.n	8005260 <HAL_DMA_IRQHandler+0x6e4>
 800520a:	bf00      	nop
 800520c:	40020010 	.word	0x40020010
 8005210:	40020028 	.word	0x40020028
 8005214:	40020040 	.word	0x40020040
 8005218:	40020058 	.word	0x40020058
 800521c:	40020070 	.word	0x40020070
 8005220:	40020088 	.word	0x40020088
 8005224:	400200a0 	.word	0x400200a0
 8005228:	400200b8 	.word	0x400200b8
 800522c:	40020410 	.word	0x40020410
 8005230:	40020428 	.word	0x40020428
 8005234:	40020440 	.word	0x40020440
 8005238:	40020458 	.word	0x40020458
 800523c:	40020470 	.word	0x40020470
 8005240:	40020488 	.word	0x40020488
 8005244:	400204a0 	.word	0x400204a0
 8005248:	400204b8 	.word	0x400204b8
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	2b00      	cmp	r3, #0
 8005258:	bf14      	ite	ne
 800525a:	2301      	movne	r3, #1
 800525c:	2300      	moveq	r3, #0
 800525e:	b2db      	uxtb	r3, r3
 8005260:	2b00      	cmp	r3, #0
 8005262:	f000 8087 	beq.w	8005374 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800526a:	f003 031f 	and.w	r3, r3, #31
 800526e:	2220      	movs	r2, #32
 8005270:	409a      	lsls	r2, r3
 8005272:	6a3b      	ldr	r3, [r7, #32]
 8005274:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b04      	cmp	r3, #4
 8005280:	d139      	bne.n	80052f6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f022 0216 	bic.w	r2, r2, #22
 8005290:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	695a      	ldr	r2, [r3, #20]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80052a0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d103      	bne.n	80052b2 <HAL_DMA_IRQHandler+0x736>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d007      	beq.n	80052c2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f022 0208 	bic.w	r2, r2, #8
 80052c0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052c6:	f003 031f 	and.w	r3, r3, #31
 80052ca:	223f      	movs	r2, #63	@ 0x3f
 80052cc:	409a      	lsls	r2, r3
 80052ce:	6a3b      	ldr	r3, [r7, #32]
 80052d0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	f000 8382 	beq.w	80059f0 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	4798      	blx	r3
          }
          return;
 80052f4:	e37c      	b.n	80059f0 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d018      	beq.n	8005336 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d108      	bne.n	8005324 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005316:	2b00      	cmp	r3, #0
 8005318:	d02c      	beq.n	8005374 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	4798      	blx	r3
 8005322:	e027      	b.n	8005374 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005328:	2b00      	cmp	r3, #0
 800532a:	d023      	beq.n	8005374 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	4798      	blx	r3
 8005334:	e01e      	b.n	8005374 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005340:	2b00      	cmp	r3, #0
 8005342:	d10f      	bne.n	8005364 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f022 0210 	bic.w	r2, r2, #16
 8005352:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005368:	2b00      	cmp	r3, #0
 800536a:	d003      	beq.n	8005374 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005378:	2b00      	cmp	r3, #0
 800537a:	f000 833e 	beq.w	80059fa <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b00      	cmp	r3, #0
 8005388:	f000 8088 	beq.w	800549c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2204      	movs	r2, #4
 8005390:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a89      	ldr	r2, [pc, #548]	@ (80055c0 <HAL_DMA_IRQHandler+0xa44>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d04a      	beq.n	8005434 <HAL_DMA_IRQHandler+0x8b8>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a88      	ldr	r2, [pc, #544]	@ (80055c4 <HAL_DMA_IRQHandler+0xa48>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d045      	beq.n	8005434 <HAL_DMA_IRQHandler+0x8b8>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a86      	ldr	r2, [pc, #536]	@ (80055c8 <HAL_DMA_IRQHandler+0xa4c>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d040      	beq.n	8005434 <HAL_DMA_IRQHandler+0x8b8>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a85      	ldr	r2, [pc, #532]	@ (80055cc <HAL_DMA_IRQHandler+0xa50>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d03b      	beq.n	8005434 <HAL_DMA_IRQHandler+0x8b8>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a83      	ldr	r2, [pc, #524]	@ (80055d0 <HAL_DMA_IRQHandler+0xa54>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d036      	beq.n	8005434 <HAL_DMA_IRQHandler+0x8b8>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a82      	ldr	r2, [pc, #520]	@ (80055d4 <HAL_DMA_IRQHandler+0xa58>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d031      	beq.n	8005434 <HAL_DMA_IRQHandler+0x8b8>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a80      	ldr	r2, [pc, #512]	@ (80055d8 <HAL_DMA_IRQHandler+0xa5c>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d02c      	beq.n	8005434 <HAL_DMA_IRQHandler+0x8b8>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a7f      	ldr	r2, [pc, #508]	@ (80055dc <HAL_DMA_IRQHandler+0xa60>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d027      	beq.n	8005434 <HAL_DMA_IRQHandler+0x8b8>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a7d      	ldr	r2, [pc, #500]	@ (80055e0 <HAL_DMA_IRQHandler+0xa64>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d022      	beq.n	8005434 <HAL_DMA_IRQHandler+0x8b8>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a7c      	ldr	r2, [pc, #496]	@ (80055e4 <HAL_DMA_IRQHandler+0xa68>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d01d      	beq.n	8005434 <HAL_DMA_IRQHandler+0x8b8>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a7a      	ldr	r2, [pc, #488]	@ (80055e8 <HAL_DMA_IRQHandler+0xa6c>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d018      	beq.n	8005434 <HAL_DMA_IRQHandler+0x8b8>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a79      	ldr	r2, [pc, #484]	@ (80055ec <HAL_DMA_IRQHandler+0xa70>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d013      	beq.n	8005434 <HAL_DMA_IRQHandler+0x8b8>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a77      	ldr	r2, [pc, #476]	@ (80055f0 <HAL_DMA_IRQHandler+0xa74>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d00e      	beq.n	8005434 <HAL_DMA_IRQHandler+0x8b8>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a76      	ldr	r2, [pc, #472]	@ (80055f4 <HAL_DMA_IRQHandler+0xa78>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d009      	beq.n	8005434 <HAL_DMA_IRQHandler+0x8b8>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a74      	ldr	r2, [pc, #464]	@ (80055f8 <HAL_DMA_IRQHandler+0xa7c>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d004      	beq.n	8005434 <HAL_DMA_IRQHandler+0x8b8>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a73      	ldr	r2, [pc, #460]	@ (80055fc <HAL_DMA_IRQHandler+0xa80>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d108      	bne.n	8005446 <HAL_DMA_IRQHandler+0x8ca>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f022 0201 	bic.w	r2, r2, #1
 8005442:	601a      	str	r2, [r3, #0]
 8005444:	e007      	b.n	8005456 <HAL_DMA_IRQHandler+0x8da>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f022 0201 	bic.w	r2, r2, #1
 8005454:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	3301      	adds	r3, #1
 800545a:	60fb      	str	r3, [r7, #12]
 800545c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800545e:	429a      	cmp	r2, r3
 8005460:	d307      	bcc.n	8005472 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0301 	and.w	r3, r3, #1
 800546c:	2b00      	cmp	r3, #0
 800546e:	d1f2      	bne.n	8005456 <HAL_DMA_IRQHandler+0x8da>
 8005470:	e000      	b.n	8005474 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005472:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	2b00      	cmp	r3, #0
 8005480:	d004      	beq.n	800548c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2203      	movs	r2, #3
 8005486:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800548a:	e003      	b.n	8005494 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f000 82aa 	beq.w	80059fa <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	4798      	blx	r3
 80054ae:	e2a4      	b.n	80059fa <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a52      	ldr	r2, [pc, #328]	@ (8005600 <HAL_DMA_IRQHandler+0xa84>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d04a      	beq.n	8005550 <HAL_DMA_IRQHandler+0x9d4>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a51      	ldr	r2, [pc, #324]	@ (8005604 <HAL_DMA_IRQHandler+0xa88>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d045      	beq.n	8005550 <HAL_DMA_IRQHandler+0x9d4>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a4f      	ldr	r2, [pc, #316]	@ (8005608 <HAL_DMA_IRQHandler+0xa8c>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d040      	beq.n	8005550 <HAL_DMA_IRQHandler+0x9d4>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a4e      	ldr	r2, [pc, #312]	@ (800560c <HAL_DMA_IRQHandler+0xa90>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d03b      	beq.n	8005550 <HAL_DMA_IRQHandler+0x9d4>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a4c      	ldr	r2, [pc, #304]	@ (8005610 <HAL_DMA_IRQHandler+0xa94>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d036      	beq.n	8005550 <HAL_DMA_IRQHandler+0x9d4>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a4b      	ldr	r2, [pc, #300]	@ (8005614 <HAL_DMA_IRQHandler+0xa98>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d031      	beq.n	8005550 <HAL_DMA_IRQHandler+0x9d4>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a49      	ldr	r2, [pc, #292]	@ (8005618 <HAL_DMA_IRQHandler+0xa9c>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d02c      	beq.n	8005550 <HAL_DMA_IRQHandler+0x9d4>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a48      	ldr	r2, [pc, #288]	@ (800561c <HAL_DMA_IRQHandler+0xaa0>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d027      	beq.n	8005550 <HAL_DMA_IRQHandler+0x9d4>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a46      	ldr	r2, [pc, #280]	@ (8005620 <HAL_DMA_IRQHandler+0xaa4>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d022      	beq.n	8005550 <HAL_DMA_IRQHandler+0x9d4>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a45      	ldr	r2, [pc, #276]	@ (8005624 <HAL_DMA_IRQHandler+0xaa8>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d01d      	beq.n	8005550 <HAL_DMA_IRQHandler+0x9d4>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a43      	ldr	r2, [pc, #268]	@ (8005628 <HAL_DMA_IRQHandler+0xaac>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d018      	beq.n	8005550 <HAL_DMA_IRQHandler+0x9d4>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a42      	ldr	r2, [pc, #264]	@ (800562c <HAL_DMA_IRQHandler+0xab0>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d013      	beq.n	8005550 <HAL_DMA_IRQHandler+0x9d4>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a40      	ldr	r2, [pc, #256]	@ (8005630 <HAL_DMA_IRQHandler+0xab4>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d00e      	beq.n	8005550 <HAL_DMA_IRQHandler+0x9d4>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a3f      	ldr	r2, [pc, #252]	@ (8005634 <HAL_DMA_IRQHandler+0xab8>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d009      	beq.n	8005550 <HAL_DMA_IRQHandler+0x9d4>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a3d      	ldr	r2, [pc, #244]	@ (8005638 <HAL_DMA_IRQHandler+0xabc>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d004      	beq.n	8005550 <HAL_DMA_IRQHandler+0x9d4>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a3c      	ldr	r2, [pc, #240]	@ (800563c <HAL_DMA_IRQHandler+0xac0>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d101      	bne.n	8005554 <HAL_DMA_IRQHandler+0x9d8>
 8005550:	2301      	movs	r3, #1
 8005552:	e000      	b.n	8005556 <HAL_DMA_IRQHandler+0x9da>
 8005554:	2300      	movs	r3, #0
 8005556:	2b00      	cmp	r3, #0
 8005558:	f000 824f 	beq.w	80059fa <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005568:	f003 031f 	and.w	r3, r3, #31
 800556c:	2204      	movs	r2, #4
 800556e:	409a      	lsls	r2, r3
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	4013      	ands	r3, r2
 8005574:	2b00      	cmp	r3, #0
 8005576:	f000 80dd 	beq.w	8005734 <HAL_DMA_IRQHandler+0xbb8>
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	f003 0304 	and.w	r3, r3, #4
 8005580:	2b00      	cmp	r3, #0
 8005582:	f000 80d7 	beq.w	8005734 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800558a:	f003 031f 	and.w	r3, r3, #31
 800558e:	2204      	movs	r2, #4
 8005590:	409a      	lsls	r2, r3
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d059      	beq.n	8005654 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d14a      	bne.n	8005640 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f000 8220 	beq.w	80059f4 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055bc:	e21a      	b.n	80059f4 <HAL_DMA_IRQHandler+0xe78>
 80055be:	bf00      	nop
 80055c0:	40020010 	.word	0x40020010
 80055c4:	40020028 	.word	0x40020028
 80055c8:	40020040 	.word	0x40020040
 80055cc:	40020058 	.word	0x40020058
 80055d0:	40020070 	.word	0x40020070
 80055d4:	40020088 	.word	0x40020088
 80055d8:	400200a0 	.word	0x400200a0
 80055dc:	400200b8 	.word	0x400200b8
 80055e0:	40020410 	.word	0x40020410
 80055e4:	40020428 	.word	0x40020428
 80055e8:	40020440 	.word	0x40020440
 80055ec:	40020458 	.word	0x40020458
 80055f0:	40020470 	.word	0x40020470
 80055f4:	40020488 	.word	0x40020488
 80055f8:	400204a0 	.word	0x400204a0
 80055fc:	400204b8 	.word	0x400204b8
 8005600:	48022c08 	.word	0x48022c08
 8005604:	48022c1c 	.word	0x48022c1c
 8005608:	48022c30 	.word	0x48022c30
 800560c:	48022c44 	.word	0x48022c44
 8005610:	48022c58 	.word	0x48022c58
 8005614:	48022c6c 	.word	0x48022c6c
 8005618:	48022c80 	.word	0x48022c80
 800561c:	48022c94 	.word	0x48022c94
 8005620:	58025408 	.word	0x58025408
 8005624:	5802541c 	.word	0x5802541c
 8005628:	58025430 	.word	0x58025430
 800562c:	58025444 	.word	0x58025444
 8005630:	58025458 	.word	0x58025458
 8005634:	5802546c 	.word	0x5802546c
 8005638:	58025480 	.word	0x58025480
 800563c:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 81d5 	beq.w	80059f4 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005652:	e1cf      	b.n	80059f4 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	f003 0320 	and.w	r3, r3, #32
 800565a:	2b00      	cmp	r3, #0
 800565c:	d160      	bne.n	8005720 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a7f      	ldr	r2, [pc, #508]	@ (8005860 <HAL_DMA_IRQHandler+0xce4>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d04a      	beq.n	80056fe <HAL_DMA_IRQHandler+0xb82>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a7d      	ldr	r2, [pc, #500]	@ (8005864 <HAL_DMA_IRQHandler+0xce8>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d045      	beq.n	80056fe <HAL_DMA_IRQHandler+0xb82>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a7c      	ldr	r2, [pc, #496]	@ (8005868 <HAL_DMA_IRQHandler+0xcec>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d040      	beq.n	80056fe <HAL_DMA_IRQHandler+0xb82>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a7a      	ldr	r2, [pc, #488]	@ (800586c <HAL_DMA_IRQHandler+0xcf0>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d03b      	beq.n	80056fe <HAL_DMA_IRQHandler+0xb82>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a79      	ldr	r2, [pc, #484]	@ (8005870 <HAL_DMA_IRQHandler+0xcf4>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d036      	beq.n	80056fe <HAL_DMA_IRQHandler+0xb82>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a77      	ldr	r2, [pc, #476]	@ (8005874 <HAL_DMA_IRQHandler+0xcf8>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d031      	beq.n	80056fe <HAL_DMA_IRQHandler+0xb82>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a76      	ldr	r2, [pc, #472]	@ (8005878 <HAL_DMA_IRQHandler+0xcfc>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d02c      	beq.n	80056fe <HAL_DMA_IRQHandler+0xb82>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a74      	ldr	r2, [pc, #464]	@ (800587c <HAL_DMA_IRQHandler+0xd00>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d027      	beq.n	80056fe <HAL_DMA_IRQHandler+0xb82>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a73      	ldr	r2, [pc, #460]	@ (8005880 <HAL_DMA_IRQHandler+0xd04>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d022      	beq.n	80056fe <HAL_DMA_IRQHandler+0xb82>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a71      	ldr	r2, [pc, #452]	@ (8005884 <HAL_DMA_IRQHandler+0xd08>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d01d      	beq.n	80056fe <HAL_DMA_IRQHandler+0xb82>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a70      	ldr	r2, [pc, #448]	@ (8005888 <HAL_DMA_IRQHandler+0xd0c>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d018      	beq.n	80056fe <HAL_DMA_IRQHandler+0xb82>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a6e      	ldr	r2, [pc, #440]	@ (800588c <HAL_DMA_IRQHandler+0xd10>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d013      	beq.n	80056fe <HAL_DMA_IRQHandler+0xb82>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a6d      	ldr	r2, [pc, #436]	@ (8005890 <HAL_DMA_IRQHandler+0xd14>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d00e      	beq.n	80056fe <HAL_DMA_IRQHandler+0xb82>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a6b      	ldr	r2, [pc, #428]	@ (8005894 <HAL_DMA_IRQHandler+0xd18>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d009      	beq.n	80056fe <HAL_DMA_IRQHandler+0xb82>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a6a      	ldr	r2, [pc, #424]	@ (8005898 <HAL_DMA_IRQHandler+0xd1c>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d004      	beq.n	80056fe <HAL_DMA_IRQHandler+0xb82>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a68      	ldr	r2, [pc, #416]	@ (800589c <HAL_DMA_IRQHandler+0xd20>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d108      	bne.n	8005710 <HAL_DMA_IRQHandler+0xb94>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f022 0208 	bic.w	r2, r2, #8
 800570c:	601a      	str	r2, [r3, #0]
 800570e:	e007      	b.n	8005720 <HAL_DMA_IRQHandler+0xba4>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f022 0204 	bic.w	r2, r2, #4
 800571e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005724:	2b00      	cmp	r3, #0
 8005726:	f000 8165 	beq.w	80059f4 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005732:	e15f      	b.n	80059f4 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005738:	f003 031f 	and.w	r3, r3, #31
 800573c:	2202      	movs	r2, #2
 800573e:	409a      	lsls	r2, r3
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	4013      	ands	r3, r2
 8005744:	2b00      	cmp	r3, #0
 8005746:	f000 80c5 	beq.w	80058d4 <HAL_DMA_IRQHandler+0xd58>
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	f003 0302 	and.w	r3, r3, #2
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 80bf 	beq.w	80058d4 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800575a:	f003 031f 	and.w	r3, r3, #31
 800575e:	2202      	movs	r2, #2
 8005760:	409a      	lsls	r2, r3
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d018      	beq.n	80057a2 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d109      	bne.n	800578e <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800577e:	2b00      	cmp	r3, #0
 8005780:	f000 813a 	beq.w	80059f8 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800578c:	e134      	b.n	80059f8 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005792:	2b00      	cmp	r3, #0
 8005794:	f000 8130 	beq.w	80059f8 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057a0:	e12a      	b.n	80059f8 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	f003 0320 	and.w	r3, r3, #32
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f040 8089 	bne.w	80058c0 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a2b      	ldr	r2, [pc, #172]	@ (8005860 <HAL_DMA_IRQHandler+0xce4>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d04a      	beq.n	800584e <HAL_DMA_IRQHandler+0xcd2>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a29      	ldr	r2, [pc, #164]	@ (8005864 <HAL_DMA_IRQHandler+0xce8>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d045      	beq.n	800584e <HAL_DMA_IRQHandler+0xcd2>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a28      	ldr	r2, [pc, #160]	@ (8005868 <HAL_DMA_IRQHandler+0xcec>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d040      	beq.n	800584e <HAL_DMA_IRQHandler+0xcd2>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a26      	ldr	r2, [pc, #152]	@ (800586c <HAL_DMA_IRQHandler+0xcf0>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d03b      	beq.n	800584e <HAL_DMA_IRQHandler+0xcd2>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a25      	ldr	r2, [pc, #148]	@ (8005870 <HAL_DMA_IRQHandler+0xcf4>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d036      	beq.n	800584e <HAL_DMA_IRQHandler+0xcd2>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a23      	ldr	r2, [pc, #140]	@ (8005874 <HAL_DMA_IRQHandler+0xcf8>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d031      	beq.n	800584e <HAL_DMA_IRQHandler+0xcd2>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a22      	ldr	r2, [pc, #136]	@ (8005878 <HAL_DMA_IRQHandler+0xcfc>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d02c      	beq.n	800584e <HAL_DMA_IRQHandler+0xcd2>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a20      	ldr	r2, [pc, #128]	@ (800587c <HAL_DMA_IRQHandler+0xd00>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d027      	beq.n	800584e <HAL_DMA_IRQHandler+0xcd2>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a1f      	ldr	r2, [pc, #124]	@ (8005880 <HAL_DMA_IRQHandler+0xd04>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d022      	beq.n	800584e <HAL_DMA_IRQHandler+0xcd2>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a1d      	ldr	r2, [pc, #116]	@ (8005884 <HAL_DMA_IRQHandler+0xd08>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d01d      	beq.n	800584e <HAL_DMA_IRQHandler+0xcd2>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a1c      	ldr	r2, [pc, #112]	@ (8005888 <HAL_DMA_IRQHandler+0xd0c>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d018      	beq.n	800584e <HAL_DMA_IRQHandler+0xcd2>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a1a      	ldr	r2, [pc, #104]	@ (800588c <HAL_DMA_IRQHandler+0xd10>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d013      	beq.n	800584e <HAL_DMA_IRQHandler+0xcd2>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a19      	ldr	r2, [pc, #100]	@ (8005890 <HAL_DMA_IRQHandler+0xd14>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d00e      	beq.n	800584e <HAL_DMA_IRQHandler+0xcd2>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a17      	ldr	r2, [pc, #92]	@ (8005894 <HAL_DMA_IRQHandler+0xd18>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d009      	beq.n	800584e <HAL_DMA_IRQHandler+0xcd2>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a16      	ldr	r2, [pc, #88]	@ (8005898 <HAL_DMA_IRQHandler+0xd1c>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d004      	beq.n	800584e <HAL_DMA_IRQHandler+0xcd2>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a14      	ldr	r2, [pc, #80]	@ (800589c <HAL_DMA_IRQHandler+0xd20>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d128      	bne.n	80058a0 <HAL_DMA_IRQHandler+0xd24>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f022 0214 	bic.w	r2, r2, #20
 800585c:	601a      	str	r2, [r3, #0]
 800585e:	e027      	b.n	80058b0 <HAL_DMA_IRQHandler+0xd34>
 8005860:	40020010 	.word	0x40020010
 8005864:	40020028 	.word	0x40020028
 8005868:	40020040 	.word	0x40020040
 800586c:	40020058 	.word	0x40020058
 8005870:	40020070 	.word	0x40020070
 8005874:	40020088 	.word	0x40020088
 8005878:	400200a0 	.word	0x400200a0
 800587c:	400200b8 	.word	0x400200b8
 8005880:	40020410 	.word	0x40020410
 8005884:	40020428 	.word	0x40020428
 8005888:	40020440 	.word	0x40020440
 800588c:	40020458 	.word	0x40020458
 8005890:	40020470 	.word	0x40020470
 8005894:	40020488 	.word	0x40020488
 8005898:	400204a0 	.word	0x400204a0
 800589c:	400204b8 	.word	0x400204b8
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f022 020a 	bic.w	r2, r2, #10
 80058ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f000 8097 	beq.w	80059f8 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058d2:	e091      	b.n	80059f8 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058d8:	f003 031f 	and.w	r3, r3, #31
 80058dc:	2208      	movs	r2, #8
 80058de:	409a      	lsls	r2, r3
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	4013      	ands	r3, r2
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f000 8088 	beq.w	80059fa <HAL_DMA_IRQHandler+0xe7e>
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	f003 0308 	and.w	r3, r3, #8
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f000 8082 	beq.w	80059fa <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a41      	ldr	r2, [pc, #260]	@ (8005a00 <HAL_DMA_IRQHandler+0xe84>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d04a      	beq.n	8005996 <HAL_DMA_IRQHandler+0xe1a>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a3f      	ldr	r2, [pc, #252]	@ (8005a04 <HAL_DMA_IRQHandler+0xe88>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d045      	beq.n	8005996 <HAL_DMA_IRQHandler+0xe1a>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a3e      	ldr	r2, [pc, #248]	@ (8005a08 <HAL_DMA_IRQHandler+0xe8c>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d040      	beq.n	8005996 <HAL_DMA_IRQHandler+0xe1a>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a3c      	ldr	r2, [pc, #240]	@ (8005a0c <HAL_DMA_IRQHandler+0xe90>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d03b      	beq.n	8005996 <HAL_DMA_IRQHandler+0xe1a>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a3b      	ldr	r2, [pc, #236]	@ (8005a10 <HAL_DMA_IRQHandler+0xe94>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d036      	beq.n	8005996 <HAL_DMA_IRQHandler+0xe1a>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a39      	ldr	r2, [pc, #228]	@ (8005a14 <HAL_DMA_IRQHandler+0xe98>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d031      	beq.n	8005996 <HAL_DMA_IRQHandler+0xe1a>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a38      	ldr	r2, [pc, #224]	@ (8005a18 <HAL_DMA_IRQHandler+0xe9c>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d02c      	beq.n	8005996 <HAL_DMA_IRQHandler+0xe1a>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a36      	ldr	r2, [pc, #216]	@ (8005a1c <HAL_DMA_IRQHandler+0xea0>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d027      	beq.n	8005996 <HAL_DMA_IRQHandler+0xe1a>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a35      	ldr	r2, [pc, #212]	@ (8005a20 <HAL_DMA_IRQHandler+0xea4>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d022      	beq.n	8005996 <HAL_DMA_IRQHandler+0xe1a>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a33      	ldr	r2, [pc, #204]	@ (8005a24 <HAL_DMA_IRQHandler+0xea8>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d01d      	beq.n	8005996 <HAL_DMA_IRQHandler+0xe1a>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a32      	ldr	r2, [pc, #200]	@ (8005a28 <HAL_DMA_IRQHandler+0xeac>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d018      	beq.n	8005996 <HAL_DMA_IRQHandler+0xe1a>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a30      	ldr	r2, [pc, #192]	@ (8005a2c <HAL_DMA_IRQHandler+0xeb0>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d013      	beq.n	8005996 <HAL_DMA_IRQHandler+0xe1a>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a2f      	ldr	r2, [pc, #188]	@ (8005a30 <HAL_DMA_IRQHandler+0xeb4>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d00e      	beq.n	8005996 <HAL_DMA_IRQHandler+0xe1a>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a2d      	ldr	r2, [pc, #180]	@ (8005a34 <HAL_DMA_IRQHandler+0xeb8>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d009      	beq.n	8005996 <HAL_DMA_IRQHandler+0xe1a>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a2c      	ldr	r2, [pc, #176]	@ (8005a38 <HAL_DMA_IRQHandler+0xebc>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d004      	beq.n	8005996 <HAL_DMA_IRQHandler+0xe1a>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a2a      	ldr	r2, [pc, #168]	@ (8005a3c <HAL_DMA_IRQHandler+0xec0>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d108      	bne.n	80059a8 <HAL_DMA_IRQHandler+0xe2c>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f022 021c 	bic.w	r2, r2, #28
 80059a4:	601a      	str	r2, [r3, #0]
 80059a6:	e007      	b.n	80059b8 <HAL_DMA_IRQHandler+0xe3c>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f022 020e 	bic.w	r2, r2, #14
 80059b6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059bc:	f003 031f 	and.w	r3, r3, #31
 80059c0:	2201      	movs	r2, #1
 80059c2:	409a      	lsls	r2, r3
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d009      	beq.n	80059fa <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	4798      	blx	r3
 80059ee:	e004      	b.n	80059fa <HAL_DMA_IRQHandler+0xe7e>
          return;
 80059f0:	bf00      	nop
 80059f2:	e002      	b.n	80059fa <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80059f4:	bf00      	nop
 80059f6:	e000      	b.n	80059fa <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80059f8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80059fa:	3728      	adds	r7, #40	@ 0x28
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	40020010 	.word	0x40020010
 8005a04:	40020028 	.word	0x40020028
 8005a08:	40020040 	.word	0x40020040
 8005a0c:	40020058 	.word	0x40020058
 8005a10:	40020070 	.word	0x40020070
 8005a14:	40020088 	.word	0x40020088
 8005a18:	400200a0 	.word	0x400200a0
 8005a1c:	400200b8 	.word	0x400200b8
 8005a20:	40020410 	.word	0x40020410
 8005a24:	40020428 	.word	0x40020428
 8005a28:	40020440 	.word	0x40020440
 8005a2c:	40020458 	.word	0x40020458
 8005a30:	40020470 	.word	0x40020470
 8005a34:	40020488 	.word	0x40020488
 8005a38:	400204a0 	.word	0x400204a0
 8005a3c:	400204b8 	.word	0x400204b8

08005a40 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
 8005a4c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a52:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a58:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a7f      	ldr	r2, [pc, #508]	@ (8005c5c <DMA_SetConfig+0x21c>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d072      	beq.n	8005b4a <DMA_SetConfig+0x10a>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a7d      	ldr	r2, [pc, #500]	@ (8005c60 <DMA_SetConfig+0x220>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d06d      	beq.n	8005b4a <DMA_SetConfig+0x10a>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a7c      	ldr	r2, [pc, #496]	@ (8005c64 <DMA_SetConfig+0x224>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d068      	beq.n	8005b4a <DMA_SetConfig+0x10a>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a7a      	ldr	r2, [pc, #488]	@ (8005c68 <DMA_SetConfig+0x228>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d063      	beq.n	8005b4a <DMA_SetConfig+0x10a>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a79      	ldr	r2, [pc, #484]	@ (8005c6c <DMA_SetConfig+0x22c>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d05e      	beq.n	8005b4a <DMA_SetConfig+0x10a>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a77      	ldr	r2, [pc, #476]	@ (8005c70 <DMA_SetConfig+0x230>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d059      	beq.n	8005b4a <DMA_SetConfig+0x10a>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a76      	ldr	r2, [pc, #472]	@ (8005c74 <DMA_SetConfig+0x234>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d054      	beq.n	8005b4a <DMA_SetConfig+0x10a>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a74      	ldr	r2, [pc, #464]	@ (8005c78 <DMA_SetConfig+0x238>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d04f      	beq.n	8005b4a <DMA_SetConfig+0x10a>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a73      	ldr	r2, [pc, #460]	@ (8005c7c <DMA_SetConfig+0x23c>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d04a      	beq.n	8005b4a <DMA_SetConfig+0x10a>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a71      	ldr	r2, [pc, #452]	@ (8005c80 <DMA_SetConfig+0x240>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d045      	beq.n	8005b4a <DMA_SetConfig+0x10a>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a70      	ldr	r2, [pc, #448]	@ (8005c84 <DMA_SetConfig+0x244>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d040      	beq.n	8005b4a <DMA_SetConfig+0x10a>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a6e      	ldr	r2, [pc, #440]	@ (8005c88 <DMA_SetConfig+0x248>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d03b      	beq.n	8005b4a <DMA_SetConfig+0x10a>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a6d      	ldr	r2, [pc, #436]	@ (8005c8c <DMA_SetConfig+0x24c>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d036      	beq.n	8005b4a <DMA_SetConfig+0x10a>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a6b      	ldr	r2, [pc, #428]	@ (8005c90 <DMA_SetConfig+0x250>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d031      	beq.n	8005b4a <DMA_SetConfig+0x10a>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a6a      	ldr	r2, [pc, #424]	@ (8005c94 <DMA_SetConfig+0x254>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d02c      	beq.n	8005b4a <DMA_SetConfig+0x10a>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a68      	ldr	r2, [pc, #416]	@ (8005c98 <DMA_SetConfig+0x258>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d027      	beq.n	8005b4a <DMA_SetConfig+0x10a>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a67      	ldr	r2, [pc, #412]	@ (8005c9c <DMA_SetConfig+0x25c>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d022      	beq.n	8005b4a <DMA_SetConfig+0x10a>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a65      	ldr	r2, [pc, #404]	@ (8005ca0 <DMA_SetConfig+0x260>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d01d      	beq.n	8005b4a <DMA_SetConfig+0x10a>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a64      	ldr	r2, [pc, #400]	@ (8005ca4 <DMA_SetConfig+0x264>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d018      	beq.n	8005b4a <DMA_SetConfig+0x10a>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a62      	ldr	r2, [pc, #392]	@ (8005ca8 <DMA_SetConfig+0x268>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d013      	beq.n	8005b4a <DMA_SetConfig+0x10a>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a61      	ldr	r2, [pc, #388]	@ (8005cac <DMA_SetConfig+0x26c>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d00e      	beq.n	8005b4a <DMA_SetConfig+0x10a>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a5f      	ldr	r2, [pc, #380]	@ (8005cb0 <DMA_SetConfig+0x270>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d009      	beq.n	8005b4a <DMA_SetConfig+0x10a>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a5e      	ldr	r2, [pc, #376]	@ (8005cb4 <DMA_SetConfig+0x274>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d004      	beq.n	8005b4a <DMA_SetConfig+0x10a>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a5c      	ldr	r2, [pc, #368]	@ (8005cb8 <DMA_SetConfig+0x278>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d101      	bne.n	8005b4e <DMA_SetConfig+0x10e>
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e000      	b.n	8005b50 <DMA_SetConfig+0x110>
 8005b4e:	2300      	movs	r3, #0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00d      	beq.n	8005b70 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005b5c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d004      	beq.n	8005b70 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005b6e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a39      	ldr	r2, [pc, #228]	@ (8005c5c <DMA_SetConfig+0x21c>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d04a      	beq.n	8005c10 <DMA_SetConfig+0x1d0>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a38      	ldr	r2, [pc, #224]	@ (8005c60 <DMA_SetConfig+0x220>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d045      	beq.n	8005c10 <DMA_SetConfig+0x1d0>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a36      	ldr	r2, [pc, #216]	@ (8005c64 <DMA_SetConfig+0x224>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d040      	beq.n	8005c10 <DMA_SetConfig+0x1d0>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a35      	ldr	r2, [pc, #212]	@ (8005c68 <DMA_SetConfig+0x228>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d03b      	beq.n	8005c10 <DMA_SetConfig+0x1d0>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a33      	ldr	r2, [pc, #204]	@ (8005c6c <DMA_SetConfig+0x22c>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d036      	beq.n	8005c10 <DMA_SetConfig+0x1d0>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a32      	ldr	r2, [pc, #200]	@ (8005c70 <DMA_SetConfig+0x230>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d031      	beq.n	8005c10 <DMA_SetConfig+0x1d0>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a30      	ldr	r2, [pc, #192]	@ (8005c74 <DMA_SetConfig+0x234>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d02c      	beq.n	8005c10 <DMA_SetConfig+0x1d0>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a2f      	ldr	r2, [pc, #188]	@ (8005c78 <DMA_SetConfig+0x238>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d027      	beq.n	8005c10 <DMA_SetConfig+0x1d0>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a2d      	ldr	r2, [pc, #180]	@ (8005c7c <DMA_SetConfig+0x23c>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d022      	beq.n	8005c10 <DMA_SetConfig+0x1d0>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a2c      	ldr	r2, [pc, #176]	@ (8005c80 <DMA_SetConfig+0x240>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d01d      	beq.n	8005c10 <DMA_SetConfig+0x1d0>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a2a      	ldr	r2, [pc, #168]	@ (8005c84 <DMA_SetConfig+0x244>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d018      	beq.n	8005c10 <DMA_SetConfig+0x1d0>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a29      	ldr	r2, [pc, #164]	@ (8005c88 <DMA_SetConfig+0x248>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d013      	beq.n	8005c10 <DMA_SetConfig+0x1d0>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a27      	ldr	r2, [pc, #156]	@ (8005c8c <DMA_SetConfig+0x24c>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d00e      	beq.n	8005c10 <DMA_SetConfig+0x1d0>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a26      	ldr	r2, [pc, #152]	@ (8005c90 <DMA_SetConfig+0x250>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d009      	beq.n	8005c10 <DMA_SetConfig+0x1d0>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a24      	ldr	r2, [pc, #144]	@ (8005c94 <DMA_SetConfig+0x254>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d004      	beq.n	8005c10 <DMA_SetConfig+0x1d0>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a23      	ldr	r2, [pc, #140]	@ (8005c98 <DMA_SetConfig+0x258>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d101      	bne.n	8005c14 <DMA_SetConfig+0x1d4>
 8005c10:	2301      	movs	r3, #1
 8005c12:	e000      	b.n	8005c16 <DMA_SetConfig+0x1d6>
 8005c14:	2300      	movs	r3, #0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d059      	beq.n	8005cce <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c1e:	f003 031f 	and.w	r3, r3, #31
 8005c22:	223f      	movs	r2, #63	@ 0x3f
 8005c24:	409a      	lsls	r2, r3
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005c38:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	683a      	ldr	r2, [r7, #0]
 8005c40:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	2b40      	cmp	r3, #64	@ 0x40
 8005c48:	d138      	bne.n	8005cbc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005c5a:	e0ae      	b.n	8005dba <DMA_SetConfig+0x37a>
 8005c5c:	40020010 	.word	0x40020010
 8005c60:	40020028 	.word	0x40020028
 8005c64:	40020040 	.word	0x40020040
 8005c68:	40020058 	.word	0x40020058
 8005c6c:	40020070 	.word	0x40020070
 8005c70:	40020088 	.word	0x40020088
 8005c74:	400200a0 	.word	0x400200a0
 8005c78:	400200b8 	.word	0x400200b8
 8005c7c:	40020410 	.word	0x40020410
 8005c80:	40020428 	.word	0x40020428
 8005c84:	40020440 	.word	0x40020440
 8005c88:	40020458 	.word	0x40020458
 8005c8c:	40020470 	.word	0x40020470
 8005c90:	40020488 	.word	0x40020488
 8005c94:	400204a0 	.word	0x400204a0
 8005c98:	400204b8 	.word	0x400204b8
 8005c9c:	58025408 	.word	0x58025408
 8005ca0:	5802541c 	.word	0x5802541c
 8005ca4:	58025430 	.word	0x58025430
 8005ca8:	58025444 	.word	0x58025444
 8005cac:	58025458 	.word	0x58025458
 8005cb0:	5802546c 	.word	0x5802546c
 8005cb4:	58025480 	.word	0x58025480
 8005cb8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68ba      	ldr	r2, [r7, #8]
 8005cc2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	60da      	str	r2, [r3, #12]
}
 8005ccc:	e075      	b.n	8005dba <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a3d      	ldr	r2, [pc, #244]	@ (8005dc8 <DMA_SetConfig+0x388>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d04a      	beq.n	8005d6e <DMA_SetConfig+0x32e>
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a3b      	ldr	r2, [pc, #236]	@ (8005dcc <DMA_SetConfig+0x38c>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d045      	beq.n	8005d6e <DMA_SetConfig+0x32e>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a3a      	ldr	r2, [pc, #232]	@ (8005dd0 <DMA_SetConfig+0x390>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d040      	beq.n	8005d6e <DMA_SetConfig+0x32e>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a38      	ldr	r2, [pc, #224]	@ (8005dd4 <DMA_SetConfig+0x394>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d03b      	beq.n	8005d6e <DMA_SetConfig+0x32e>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a37      	ldr	r2, [pc, #220]	@ (8005dd8 <DMA_SetConfig+0x398>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d036      	beq.n	8005d6e <DMA_SetConfig+0x32e>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a35      	ldr	r2, [pc, #212]	@ (8005ddc <DMA_SetConfig+0x39c>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d031      	beq.n	8005d6e <DMA_SetConfig+0x32e>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a34      	ldr	r2, [pc, #208]	@ (8005de0 <DMA_SetConfig+0x3a0>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d02c      	beq.n	8005d6e <DMA_SetConfig+0x32e>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a32      	ldr	r2, [pc, #200]	@ (8005de4 <DMA_SetConfig+0x3a4>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d027      	beq.n	8005d6e <DMA_SetConfig+0x32e>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a31      	ldr	r2, [pc, #196]	@ (8005de8 <DMA_SetConfig+0x3a8>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d022      	beq.n	8005d6e <DMA_SetConfig+0x32e>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a2f      	ldr	r2, [pc, #188]	@ (8005dec <DMA_SetConfig+0x3ac>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d01d      	beq.n	8005d6e <DMA_SetConfig+0x32e>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a2e      	ldr	r2, [pc, #184]	@ (8005df0 <DMA_SetConfig+0x3b0>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d018      	beq.n	8005d6e <DMA_SetConfig+0x32e>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a2c      	ldr	r2, [pc, #176]	@ (8005df4 <DMA_SetConfig+0x3b4>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d013      	beq.n	8005d6e <DMA_SetConfig+0x32e>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a2b      	ldr	r2, [pc, #172]	@ (8005df8 <DMA_SetConfig+0x3b8>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d00e      	beq.n	8005d6e <DMA_SetConfig+0x32e>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a29      	ldr	r2, [pc, #164]	@ (8005dfc <DMA_SetConfig+0x3bc>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d009      	beq.n	8005d6e <DMA_SetConfig+0x32e>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a28      	ldr	r2, [pc, #160]	@ (8005e00 <DMA_SetConfig+0x3c0>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d004      	beq.n	8005d6e <DMA_SetConfig+0x32e>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a26      	ldr	r2, [pc, #152]	@ (8005e04 <DMA_SetConfig+0x3c4>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d101      	bne.n	8005d72 <DMA_SetConfig+0x332>
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e000      	b.n	8005d74 <DMA_SetConfig+0x334>
 8005d72:	2300      	movs	r3, #0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d020      	beq.n	8005dba <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d7c:	f003 031f 	and.w	r3, r3, #31
 8005d80:	2201      	movs	r2, #1
 8005d82:	409a      	lsls	r2, r3
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	683a      	ldr	r2, [r7, #0]
 8005d8e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	2b40      	cmp	r3, #64	@ 0x40
 8005d96:	d108      	bne.n	8005daa <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68ba      	ldr	r2, [r7, #8]
 8005da6:	60da      	str	r2, [r3, #12]
}
 8005da8:	e007      	b.n	8005dba <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	60da      	str	r2, [r3, #12]
}
 8005dba:	bf00      	nop
 8005dbc:	371c      	adds	r7, #28
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	48022c08 	.word	0x48022c08
 8005dcc:	48022c1c 	.word	0x48022c1c
 8005dd0:	48022c30 	.word	0x48022c30
 8005dd4:	48022c44 	.word	0x48022c44
 8005dd8:	48022c58 	.word	0x48022c58
 8005ddc:	48022c6c 	.word	0x48022c6c
 8005de0:	48022c80 	.word	0x48022c80
 8005de4:	48022c94 	.word	0x48022c94
 8005de8:	58025408 	.word	0x58025408
 8005dec:	5802541c 	.word	0x5802541c
 8005df0:	58025430 	.word	0x58025430
 8005df4:	58025444 	.word	0x58025444
 8005df8:	58025458 	.word	0x58025458
 8005dfc:	5802546c 	.word	0x5802546c
 8005e00:	58025480 	.word	0x58025480
 8005e04:	58025494 	.word	0x58025494

08005e08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a42      	ldr	r2, [pc, #264]	@ (8005f20 <DMA_CalcBaseAndBitshift+0x118>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d04a      	beq.n	8005eb0 <DMA_CalcBaseAndBitshift+0xa8>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a41      	ldr	r2, [pc, #260]	@ (8005f24 <DMA_CalcBaseAndBitshift+0x11c>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d045      	beq.n	8005eb0 <DMA_CalcBaseAndBitshift+0xa8>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a3f      	ldr	r2, [pc, #252]	@ (8005f28 <DMA_CalcBaseAndBitshift+0x120>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d040      	beq.n	8005eb0 <DMA_CalcBaseAndBitshift+0xa8>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a3e      	ldr	r2, [pc, #248]	@ (8005f2c <DMA_CalcBaseAndBitshift+0x124>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d03b      	beq.n	8005eb0 <DMA_CalcBaseAndBitshift+0xa8>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a3c      	ldr	r2, [pc, #240]	@ (8005f30 <DMA_CalcBaseAndBitshift+0x128>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d036      	beq.n	8005eb0 <DMA_CalcBaseAndBitshift+0xa8>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a3b      	ldr	r2, [pc, #236]	@ (8005f34 <DMA_CalcBaseAndBitshift+0x12c>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d031      	beq.n	8005eb0 <DMA_CalcBaseAndBitshift+0xa8>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a39      	ldr	r2, [pc, #228]	@ (8005f38 <DMA_CalcBaseAndBitshift+0x130>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d02c      	beq.n	8005eb0 <DMA_CalcBaseAndBitshift+0xa8>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a38      	ldr	r2, [pc, #224]	@ (8005f3c <DMA_CalcBaseAndBitshift+0x134>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d027      	beq.n	8005eb0 <DMA_CalcBaseAndBitshift+0xa8>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a36      	ldr	r2, [pc, #216]	@ (8005f40 <DMA_CalcBaseAndBitshift+0x138>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d022      	beq.n	8005eb0 <DMA_CalcBaseAndBitshift+0xa8>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a35      	ldr	r2, [pc, #212]	@ (8005f44 <DMA_CalcBaseAndBitshift+0x13c>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d01d      	beq.n	8005eb0 <DMA_CalcBaseAndBitshift+0xa8>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a33      	ldr	r2, [pc, #204]	@ (8005f48 <DMA_CalcBaseAndBitshift+0x140>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d018      	beq.n	8005eb0 <DMA_CalcBaseAndBitshift+0xa8>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a32      	ldr	r2, [pc, #200]	@ (8005f4c <DMA_CalcBaseAndBitshift+0x144>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d013      	beq.n	8005eb0 <DMA_CalcBaseAndBitshift+0xa8>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a30      	ldr	r2, [pc, #192]	@ (8005f50 <DMA_CalcBaseAndBitshift+0x148>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d00e      	beq.n	8005eb0 <DMA_CalcBaseAndBitshift+0xa8>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a2f      	ldr	r2, [pc, #188]	@ (8005f54 <DMA_CalcBaseAndBitshift+0x14c>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d009      	beq.n	8005eb0 <DMA_CalcBaseAndBitshift+0xa8>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a2d      	ldr	r2, [pc, #180]	@ (8005f58 <DMA_CalcBaseAndBitshift+0x150>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d004      	beq.n	8005eb0 <DMA_CalcBaseAndBitshift+0xa8>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a2c      	ldr	r2, [pc, #176]	@ (8005f5c <DMA_CalcBaseAndBitshift+0x154>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d101      	bne.n	8005eb4 <DMA_CalcBaseAndBitshift+0xac>
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e000      	b.n	8005eb6 <DMA_CalcBaseAndBitshift+0xae>
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d024      	beq.n	8005f04 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	3b10      	subs	r3, #16
 8005ec2:	4a27      	ldr	r2, [pc, #156]	@ (8005f60 <DMA_CalcBaseAndBitshift+0x158>)
 8005ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec8:	091b      	lsrs	r3, r3, #4
 8005eca:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f003 0307 	and.w	r3, r3, #7
 8005ed2:	4a24      	ldr	r2, [pc, #144]	@ (8005f64 <DMA_CalcBaseAndBitshift+0x15c>)
 8005ed4:	5cd3      	ldrb	r3, [r2, r3]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2b03      	cmp	r3, #3
 8005ee0:	d908      	bls.n	8005ef4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	4b1f      	ldr	r3, [pc, #124]	@ (8005f68 <DMA_CalcBaseAndBitshift+0x160>)
 8005eea:	4013      	ands	r3, r2
 8005eec:	1d1a      	adds	r2, r3, #4
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	659a      	str	r2, [r3, #88]	@ 0x58
 8005ef2:	e00d      	b.n	8005f10 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	461a      	mov	r2, r3
 8005efa:	4b1b      	ldr	r3, [pc, #108]	@ (8005f68 <DMA_CalcBaseAndBitshift+0x160>)
 8005efc:	4013      	ands	r3, r2
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f02:	e005      	b.n	8005f10 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3714      	adds	r7, #20
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr
 8005f20:	40020010 	.word	0x40020010
 8005f24:	40020028 	.word	0x40020028
 8005f28:	40020040 	.word	0x40020040
 8005f2c:	40020058 	.word	0x40020058
 8005f30:	40020070 	.word	0x40020070
 8005f34:	40020088 	.word	0x40020088
 8005f38:	400200a0 	.word	0x400200a0
 8005f3c:	400200b8 	.word	0x400200b8
 8005f40:	40020410 	.word	0x40020410
 8005f44:	40020428 	.word	0x40020428
 8005f48:	40020440 	.word	0x40020440
 8005f4c:	40020458 	.word	0x40020458
 8005f50:	40020470 	.word	0x40020470
 8005f54:	40020488 	.word	0x40020488
 8005f58:	400204a0 	.word	0x400204a0
 8005f5c:	400204b8 	.word	0x400204b8
 8005f60:	aaaaaaab 	.word	0xaaaaaaab
 8005f64:	08012410 	.word	0x08012410
 8005f68:	fffffc00 	.word	0xfffffc00

08005f6c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f74:	2300      	movs	r3, #0
 8005f76:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d120      	bne.n	8005fc2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f84:	2b03      	cmp	r3, #3
 8005f86:	d858      	bhi.n	800603a <DMA_CheckFifoParam+0xce>
 8005f88:	a201      	add	r2, pc, #4	@ (adr r2, 8005f90 <DMA_CheckFifoParam+0x24>)
 8005f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f8e:	bf00      	nop
 8005f90:	08005fa1 	.word	0x08005fa1
 8005f94:	08005fb3 	.word	0x08005fb3
 8005f98:	08005fa1 	.word	0x08005fa1
 8005f9c:	0800603b 	.word	0x0800603b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fa4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d048      	beq.n	800603e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005fb0:	e045      	b.n	800603e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fb6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005fba:	d142      	bne.n	8006042 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005fc0:	e03f      	b.n	8006042 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fca:	d123      	bne.n	8006014 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fd0:	2b03      	cmp	r3, #3
 8005fd2:	d838      	bhi.n	8006046 <DMA_CheckFifoParam+0xda>
 8005fd4:	a201      	add	r2, pc, #4	@ (adr r2, 8005fdc <DMA_CheckFifoParam+0x70>)
 8005fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fda:	bf00      	nop
 8005fdc:	08005fed 	.word	0x08005fed
 8005fe0:	08005ff3 	.word	0x08005ff3
 8005fe4:	08005fed 	.word	0x08005fed
 8005fe8:	08006005 	.word	0x08006005
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	73fb      	strb	r3, [r7, #15]
        break;
 8005ff0:	e030      	b.n	8006054 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ff6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d025      	beq.n	800604a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006002:	e022      	b.n	800604a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006008:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800600c:	d11f      	bne.n	800604e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006012:	e01c      	b.n	800604e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006018:	2b02      	cmp	r3, #2
 800601a:	d902      	bls.n	8006022 <DMA_CheckFifoParam+0xb6>
 800601c:	2b03      	cmp	r3, #3
 800601e:	d003      	beq.n	8006028 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006020:	e018      	b.n	8006054 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	73fb      	strb	r3, [r7, #15]
        break;
 8006026:	e015      	b.n	8006054 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800602c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00e      	beq.n	8006052 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	73fb      	strb	r3, [r7, #15]
    break;
 8006038:	e00b      	b.n	8006052 <DMA_CheckFifoParam+0xe6>
        break;
 800603a:	bf00      	nop
 800603c:	e00a      	b.n	8006054 <DMA_CheckFifoParam+0xe8>
        break;
 800603e:	bf00      	nop
 8006040:	e008      	b.n	8006054 <DMA_CheckFifoParam+0xe8>
        break;
 8006042:	bf00      	nop
 8006044:	e006      	b.n	8006054 <DMA_CheckFifoParam+0xe8>
        break;
 8006046:	bf00      	nop
 8006048:	e004      	b.n	8006054 <DMA_CheckFifoParam+0xe8>
        break;
 800604a:	bf00      	nop
 800604c:	e002      	b.n	8006054 <DMA_CheckFifoParam+0xe8>
        break;
 800604e:	bf00      	nop
 8006050:	e000      	b.n	8006054 <DMA_CheckFifoParam+0xe8>
    break;
 8006052:	bf00      	nop
    }
  }

  return status;
 8006054:	7bfb      	ldrb	r3, [r7, #15]
}
 8006056:	4618      	mov	r0, r3
 8006058:	3714      	adds	r7, #20
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop

08006064 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a38      	ldr	r2, [pc, #224]	@ (8006158 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d022      	beq.n	80060c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a36      	ldr	r2, [pc, #216]	@ (800615c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d01d      	beq.n	80060c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a35      	ldr	r2, [pc, #212]	@ (8006160 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d018      	beq.n	80060c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a33      	ldr	r2, [pc, #204]	@ (8006164 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d013      	beq.n	80060c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a32      	ldr	r2, [pc, #200]	@ (8006168 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d00e      	beq.n	80060c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a30      	ldr	r2, [pc, #192]	@ (800616c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d009      	beq.n	80060c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a2f      	ldr	r2, [pc, #188]	@ (8006170 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d004      	beq.n	80060c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a2d      	ldr	r2, [pc, #180]	@ (8006174 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d101      	bne.n	80060c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80060c2:	2301      	movs	r3, #1
 80060c4:	e000      	b.n	80060c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80060c6:	2300      	movs	r3, #0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d01a      	beq.n	8006102 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	3b08      	subs	r3, #8
 80060d4:	4a28      	ldr	r2, [pc, #160]	@ (8006178 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80060d6:	fba2 2303 	umull	r2, r3, r2, r3
 80060da:	091b      	lsrs	r3, r3, #4
 80060dc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	4b26      	ldr	r3, [pc, #152]	@ (800617c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80060e2:	4413      	add	r3, r2
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	461a      	mov	r2, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a24      	ldr	r2, [pc, #144]	@ (8006180 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80060f0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f003 031f 	and.w	r3, r3, #31
 80060f8:	2201      	movs	r2, #1
 80060fa:	409a      	lsls	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006100:	e024      	b.n	800614c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	b2db      	uxtb	r3, r3
 8006108:	3b10      	subs	r3, #16
 800610a:	4a1e      	ldr	r2, [pc, #120]	@ (8006184 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800610c:	fba2 2303 	umull	r2, r3, r2, r3
 8006110:	091b      	lsrs	r3, r3, #4
 8006112:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	4a1c      	ldr	r2, [pc, #112]	@ (8006188 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d806      	bhi.n	800612a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	4a1b      	ldr	r2, [pc, #108]	@ (800618c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d902      	bls.n	800612a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	3308      	adds	r3, #8
 8006128:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	4b18      	ldr	r3, [pc, #96]	@ (8006190 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800612e:	4413      	add	r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	461a      	mov	r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a16      	ldr	r2, [pc, #88]	@ (8006194 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800613c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f003 031f 	and.w	r3, r3, #31
 8006144:	2201      	movs	r2, #1
 8006146:	409a      	lsls	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800614c:	bf00      	nop
 800614e:	3714      	adds	r7, #20
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr
 8006158:	58025408 	.word	0x58025408
 800615c:	5802541c 	.word	0x5802541c
 8006160:	58025430 	.word	0x58025430
 8006164:	58025444 	.word	0x58025444
 8006168:	58025458 	.word	0x58025458
 800616c:	5802546c 	.word	0x5802546c
 8006170:	58025480 	.word	0x58025480
 8006174:	58025494 	.word	0x58025494
 8006178:	cccccccd 	.word	0xcccccccd
 800617c:	16009600 	.word	0x16009600
 8006180:	58025880 	.word	0x58025880
 8006184:	aaaaaaab 	.word	0xaaaaaaab
 8006188:	400204b8 	.word	0x400204b8
 800618c:	4002040f 	.word	0x4002040f
 8006190:	10008200 	.word	0x10008200
 8006194:	40020880 	.word	0x40020880

08006198 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d04a      	beq.n	8006244 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2b08      	cmp	r3, #8
 80061b2:	d847      	bhi.n	8006244 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a25      	ldr	r2, [pc, #148]	@ (8006250 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d022      	beq.n	8006204 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a24      	ldr	r2, [pc, #144]	@ (8006254 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d01d      	beq.n	8006204 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a22      	ldr	r2, [pc, #136]	@ (8006258 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d018      	beq.n	8006204 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a21      	ldr	r2, [pc, #132]	@ (800625c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d013      	beq.n	8006204 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a1f      	ldr	r2, [pc, #124]	@ (8006260 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d00e      	beq.n	8006204 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a1e      	ldr	r2, [pc, #120]	@ (8006264 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d009      	beq.n	8006204 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a1c      	ldr	r2, [pc, #112]	@ (8006268 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d004      	beq.n	8006204 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a1b      	ldr	r2, [pc, #108]	@ (800626c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d101      	bne.n	8006208 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006204:	2301      	movs	r3, #1
 8006206:	e000      	b.n	800620a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006208:	2300      	movs	r3, #0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00a      	beq.n	8006224 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	4b17      	ldr	r3, [pc, #92]	@ (8006270 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006212:	4413      	add	r3, r2
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	461a      	mov	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a15      	ldr	r2, [pc, #84]	@ (8006274 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006220:	671a      	str	r2, [r3, #112]	@ 0x70
 8006222:	e009      	b.n	8006238 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	4b14      	ldr	r3, [pc, #80]	@ (8006278 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006228:	4413      	add	r3, r2
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	461a      	mov	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a11      	ldr	r2, [pc, #68]	@ (800627c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006236:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	3b01      	subs	r3, #1
 800623c:	2201      	movs	r2, #1
 800623e:	409a      	lsls	r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006244:	bf00      	nop
 8006246:	3714      	adds	r7, #20
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr
 8006250:	58025408 	.word	0x58025408
 8006254:	5802541c 	.word	0x5802541c
 8006258:	58025430 	.word	0x58025430
 800625c:	58025444 	.word	0x58025444
 8006260:	58025458 	.word	0x58025458
 8006264:	5802546c 	.word	0x5802546c
 8006268:	58025480 	.word	0x58025480
 800626c:	58025494 	.word	0x58025494
 8006270:	1600963f 	.word	0x1600963f
 8006274:	58025940 	.word	0x58025940
 8006278:	1000823f 	.word	0x1000823f
 800627c:	40020940 	.word	0x40020940

08006280 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b098      	sub	sp, #96	@ 0x60
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8006288:	4a84      	ldr	r2, [pc, #528]	@ (800649c <HAL_FDCAN_Init+0x21c>)
 800628a:	f107 030c 	add.w	r3, r7, #12
 800628e:	4611      	mov	r1, r2
 8006290:	224c      	movs	r2, #76	@ 0x4c
 8006292:	4618      	mov	r0, r3
 8006294:	f00b fef4 	bl	8012080 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e1c6      	b.n	8006630 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a7e      	ldr	r2, [pc, #504]	@ (80064a0 <HAL_FDCAN_Init+0x220>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d106      	bne.n	80062ba <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80062b4:	461a      	mov	r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d106      	bne.n	80062d4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f7fb fbe4 	bl	8001a9c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	699a      	ldr	r2, [r3, #24]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f022 0210 	bic.w	r2, r2, #16
 80062e2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80062e4:	f7fc ff36 	bl	8003154 <HAL_GetTick>
 80062e8:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80062ea:	e014      	b.n	8006316 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80062ec:	f7fc ff32 	bl	8003154 <HAL_GetTick>
 80062f0:	4602      	mov	r2, r0
 80062f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	2b0a      	cmp	r3, #10
 80062f8:	d90d      	bls.n	8006316 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006300:	f043 0201 	orr.w	r2, r3, #1
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2203      	movs	r2, #3
 800630e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e18c      	b.n	8006630 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	f003 0308 	and.w	r3, r3, #8
 8006320:	2b08      	cmp	r3, #8
 8006322:	d0e3      	beq.n	80062ec <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	699a      	ldr	r2, [r3, #24]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f042 0201 	orr.w	r2, r2, #1
 8006332:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006334:	f7fc ff0e 	bl	8003154 <HAL_GetTick>
 8006338:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800633a:	e014      	b.n	8006366 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800633c:	f7fc ff0a 	bl	8003154 <HAL_GetTick>
 8006340:	4602      	mov	r2, r0
 8006342:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	2b0a      	cmp	r3, #10
 8006348:	d90d      	bls.n	8006366 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006350:	f043 0201 	orr.w	r2, r3, #1
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2203      	movs	r2, #3
 800635e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e164      	b.n	8006630 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	699b      	ldr	r3, [r3, #24]
 800636c:	f003 0301 	and.w	r3, r3, #1
 8006370:	2b00      	cmp	r3, #0
 8006372:	d0e3      	beq.n	800633c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	699a      	ldr	r2, [r3, #24]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f042 0202 	orr.w	r2, r2, #2
 8006382:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	7c1b      	ldrb	r3, [r3, #16]
 8006388:	2b01      	cmp	r3, #1
 800638a:	d108      	bne.n	800639e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	699a      	ldr	r2, [r3, #24]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800639a:	619a      	str	r2, [r3, #24]
 800639c:	e007      	b.n	80063ae <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	699a      	ldr	r2, [r3, #24]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80063ac:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	7c5b      	ldrb	r3, [r3, #17]
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d108      	bne.n	80063c8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	699a      	ldr	r2, [r3, #24]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063c4:	619a      	str	r2, [r3, #24]
 80063c6:	e007      	b.n	80063d8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	699a      	ldr	r2, [r3, #24]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80063d6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	7c9b      	ldrb	r3, [r3, #18]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d108      	bne.n	80063f2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	699a      	ldr	r2, [r3, #24]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80063ee:	619a      	str	r2, [r3, #24]
 80063f0:	e007      	b.n	8006402 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	699a      	ldr	r2, [r3, #24]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006400:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	689a      	ldr	r2, [r3, #8]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	430a      	orrs	r2, r1
 8006416:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	699a      	ldr	r2, [r3, #24]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8006426:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	691a      	ldr	r2, [r3, #16]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f022 0210 	bic.w	r2, r2, #16
 8006436:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	2b01      	cmp	r3, #1
 800643e:	d108      	bne.n	8006452 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	699a      	ldr	r2, [r3, #24]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f042 0204 	orr.w	r2, r2, #4
 800644e:	619a      	str	r2, [r3, #24]
 8006450:	e030      	b.n	80064b4 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d02c      	beq.n	80064b4 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	2b02      	cmp	r3, #2
 8006460:	d020      	beq.n	80064a4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	699a      	ldr	r2, [r3, #24]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006470:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	691a      	ldr	r2, [r3, #16]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f042 0210 	orr.w	r2, r2, #16
 8006480:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	2b03      	cmp	r3, #3
 8006488:	d114      	bne.n	80064b4 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	699a      	ldr	r2, [r3, #24]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f042 0220 	orr.w	r2, r2, #32
 8006498:	619a      	str	r2, [r3, #24]
 800649a:	e00b      	b.n	80064b4 <HAL_FDCAN_Init+0x234>
 800649c:	0801236c 	.word	0x0801236c
 80064a0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	699a      	ldr	r2, [r3, #24]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f042 0220 	orr.w	r2, r2, #32
 80064b2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	699b      	ldr	r3, [r3, #24]
 80064b8:	3b01      	subs	r3, #1
 80064ba:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	69db      	ldr	r3, [r3, #28]
 80064c0:	3b01      	subs	r3, #1
 80064c2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80064c4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80064cc:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	695b      	ldr	r3, [r3, #20]
 80064d4:	3b01      	subs	r3, #1
 80064d6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80064dc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80064de:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064e8:	d115      	bne.n	8006516 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ee:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064f4:	3b01      	subs	r3, #1
 80064f6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80064f8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064fe:	3b01      	subs	r3, #1
 8006500:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006502:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800650a:	3b01      	subs	r3, #1
 800650c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006512:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006514:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00a      	beq.n	8006534 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	430a      	orrs	r2, r1
 8006530:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800653c:	4413      	add	r3, r2
 800653e:	2b00      	cmp	r3, #0
 8006540:	d011      	beq.n	8006566 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800654a:	f023 0107 	bic.w	r1, r3, #7
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	3360      	adds	r3, #96	@ 0x60
 8006556:	443b      	add	r3, r7
 8006558:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	430a      	orrs	r2, r1
 8006562:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800656a:	2b00      	cmp	r3, #0
 800656c:	d011      	beq.n	8006592 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006576:	f023 0107 	bic.w	r1, r3, #7
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	3360      	adds	r3, #96	@ 0x60
 8006582:	443b      	add	r3, r7
 8006584:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	430a      	orrs	r2, r1
 800658e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006596:	2b00      	cmp	r3, #0
 8006598:	d012      	beq.n	80065c0 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80065a2:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	3360      	adds	r3, #96	@ 0x60
 80065ae:	443b      	add	r3, r7
 80065b0:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80065b4:	011a      	lsls	r2, r3, #4
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	430a      	orrs	r2, r1
 80065bc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d012      	beq.n	80065ee <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80065d0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	3360      	adds	r3, #96	@ 0x60
 80065dc:	443b      	add	r3, r7
 80065de:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80065e2:	021a      	lsls	r2, r3, #8
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	430a      	orrs	r2, r1
 80065ea:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a11      	ldr	r2, [pc, #68]	@ (8006638 <HAL_FDCAN_Init+0x3b8>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d107      	bne.n	8006608 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	689a      	ldr	r2, [r3, #8]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	f022 0203 	bic.w	r2, r2, #3
 8006606:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 f80b 	bl	800663c <FDCAN_CalcultateRamBlockAddresses>
 8006626:	4603      	mov	r3, r0
 8006628:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 800662c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8006630:	4618      	mov	r0, r3
 8006632:	3760      	adds	r7, #96	@ 0x60
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	4000a000 	.word	0x4000a000

0800663c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006648:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8006652:	4ba7      	ldr	r3, [pc, #668]	@ (80068f0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006654:	4013      	ands	r3, r2
 8006656:	68ba      	ldr	r2, [r7, #8]
 8006658:	0091      	lsls	r1, r2, #2
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	6812      	ldr	r2, [r2, #0]
 800665e:	430b      	orrs	r3, r1
 8006660:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800666c:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006674:	041a      	lsls	r2, r3, #16
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	430a      	orrs	r2, r1
 800667c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006684:	68ba      	ldr	r2, [r7, #8]
 8006686:	4413      	add	r3, r2
 8006688:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006692:	4b97      	ldr	r3, [pc, #604]	@ (80068f0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006694:	4013      	ands	r3, r2
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	0091      	lsls	r1, r2, #2
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	6812      	ldr	r2, [r2, #0]
 800669e:	430b      	orrs	r3, r1
 80066a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066ac:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066b4:	041a      	lsls	r2, r3, #16
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	430a      	orrs	r2, r1
 80066bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066c4:	005b      	lsls	r3, r3, #1
 80066c6:	68ba      	ldr	r2, [r7, #8]
 80066c8:	4413      	add	r3, r2
 80066ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80066d4:	4b86      	ldr	r3, [pc, #536]	@ (80068f0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80066d6:	4013      	ands	r3, r2
 80066d8:	68ba      	ldr	r2, [r7, #8]
 80066da:	0091      	lsls	r1, r2, #2
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	6812      	ldr	r2, [r2, #0]
 80066e0:	430b      	orrs	r3, r1
 80066e2:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80066ee:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066f6:	041a      	lsls	r2, r3, #16
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	430a      	orrs	r2, r1
 80066fe:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800670a:	fb02 f303 	mul.w	r3, r2, r3
 800670e:	68ba      	ldr	r2, [r7, #8]
 8006710:	4413      	add	r3, r2
 8006712:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800671c:	4b74      	ldr	r3, [pc, #464]	@ (80068f0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800671e:	4013      	ands	r3, r2
 8006720:	68ba      	ldr	r2, [r7, #8]
 8006722:	0091      	lsls	r1, r2, #2
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	6812      	ldr	r2, [r2, #0]
 8006728:	430b      	orrs	r3, r1
 800672a:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006736:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800673e:	041a      	lsls	r2, r3, #16
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	430a      	orrs	r2, r1
 8006746:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006752:	fb02 f303 	mul.w	r3, r2, r3
 8006756:	68ba      	ldr	r2, [r7, #8]
 8006758:	4413      	add	r3, r2
 800675a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8006764:	4b62      	ldr	r3, [pc, #392]	@ (80068f0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006766:	4013      	ands	r3, r2
 8006768:	68ba      	ldr	r2, [r7, #8]
 800676a:	0091      	lsls	r1, r2, #2
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	6812      	ldr	r2, [r2, #0]
 8006770:	430b      	orrs	r3, r1
 8006772:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800677e:	fb02 f303 	mul.w	r3, r2, r3
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	4413      	add	r3, r2
 8006786:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8006790:	4b57      	ldr	r3, [pc, #348]	@ (80068f0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006792:	4013      	ands	r3, r2
 8006794:	68ba      	ldr	r2, [r7, #8]
 8006796:	0091      	lsls	r1, r2, #2
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	6812      	ldr	r2, [r2, #0]
 800679c:	430b      	orrs	r3, r1
 800679e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80067aa:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067b2:	041a      	lsls	r2, r3, #16
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	430a      	orrs	r2, r1
 80067ba:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067c2:	005b      	lsls	r3, r3, #1
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	4413      	add	r3, r2
 80067c8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80067d2:	4b47      	ldr	r3, [pc, #284]	@ (80068f0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80067d4:	4013      	ands	r3, r2
 80067d6:	68ba      	ldr	r2, [r7, #8]
 80067d8:	0091      	lsls	r1, r2, #2
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	6812      	ldr	r2, [r2, #0]
 80067de:	430b      	orrs	r3, r1
 80067e0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80067ec:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067f4:	041a      	lsls	r2, r3, #16
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	430a      	orrs	r2, r1
 80067fc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006808:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006810:	061a      	lsls	r2, r3, #24
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	430a      	orrs	r2, r1
 8006818:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006820:	4b34      	ldr	r3, [pc, #208]	@ (80068f4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8006822:	4413      	add	r3, r2
 8006824:	009a      	lsls	r2, r3, #2
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	441a      	add	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006842:	00db      	lsls	r3, r3, #3
 8006844:	441a      	add	r2, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006852:	6879      	ldr	r1, [r7, #4]
 8006854:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8006856:	fb01 f303 	mul.w	r3, r1, r3
 800685a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800685c:	441a      	add	r2, r3
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800686a:	6879      	ldr	r1, [r7, #4]
 800686c:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 800686e:	fb01 f303 	mul.w	r3, r1, r3
 8006872:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8006874:	441a      	add	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006882:	6879      	ldr	r1, [r7, #4]
 8006884:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8006886:	fb01 f303 	mul.w	r3, r1, r3
 800688a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800688c:	441a      	add	r2, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800689e:	00db      	lsls	r3, r3, #3
 80068a0:	441a      	add	r2, r3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068b2:	6879      	ldr	r1, [r7, #4]
 80068b4:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80068b6:	fb01 f303 	mul.w	r3, r1, r3
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	441a      	add	r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068ce:	6879      	ldr	r1, [r7, #4]
 80068d0:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80068d2:	fb01 f303 	mul.w	r3, r1, r3
 80068d6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80068d8:	441a      	add	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068e6:	4a04      	ldr	r2, [pc, #16]	@ (80068f8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d915      	bls.n	8006918 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80068ec:	e006      	b.n	80068fc <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80068ee:	bf00      	nop
 80068f0:	ffff0003 	.word	0xffff0003
 80068f4:	10002b00 	.word	0x10002b00
 80068f8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006902:	f043 0220 	orr.w	r2, r3, #32
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2203      	movs	r2, #3
 8006910:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e010      	b.n	800693a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800691c:	60fb      	str	r3, [r7, #12]
 800691e:	e005      	b.n	800692c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2200      	movs	r2, #0
 8006924:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	3304      	adds	r3, #4
 800692a:	60fb      	str	r3, [r7, #12]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	429a      	cmp	r2, r3
 8006936:	d3f3      	bcc.n	8006920 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3714      	adds	r7, #20
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr
 8006946:	bf00      	nop

08006948 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006948:	b480      	push	{r7}
 800694a:	b089      	sub	sp, #36	@ 0x24
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006952:	2300      	movs	r3, #0
 8006954:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006956:	4b89      	ldr	r3, [pc, #548]	@ (8006b7c <HAL_GPIO_Init+0x234>)
 8006958:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800695a:	e194      	b.n	8006c86 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	2101      	movs	r1, #1
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	fa01 f303 	lsl.w	r3, r1, r3
 8006968:	4013      	ands	r3, r2
 800696a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	2b00      	cmp	r3, #0
 8006970:	f000 8186 	beq.w	8006c80 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f003 0303 	and.w	r3, r3, #3
 800697c:	2b01      	cmp	r3, #1
 800697e:	d005      	beq.n	800698c <HAL_GPIO_Init+0x44>
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	f003 0303 	and.w	r3, r3, #3
 8006988:	2b02      	cmp	r3, #2
 800698a:	d130      	bne.n	80069ee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	005b      	lsls	r3, r3, #1
 8006996:	2203      	movs	r2, #3
 8006998:	fa02 f303 	lsl.w	r3, r2, r3
 800699c:	43db      	mvns	r3, r3
 800699e:	69ba      	ldr	r2, [r7, #24]
 80069a0:	4013      	ands	r3, r2
 80069a2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	68da      	ldr	r2, [r3, #12]
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	005b      	lsls	r3, r3, #1
 80069ac:	fa02 f303 	lsl.w	r3, r2, r3
 80069b0:	69ba      	ldr	r2, [r7, #24]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	69ba      	ldr	r2, [r7, #24]
 80069ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80069c2:	2201      	movs	r2, #1
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ca:	43db      	mvns	r3, r3
 80069cc:	69ba      	ldr	r2, [r7, #24]
 80069ce:	4013      	ands	r3, r2
 80069d0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	091b      	lsrs	r3, r3, #4
 80069d8:	f003 0201 	and.w	r2, r3, #1
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	fa02 f303 	lsl.w	r3, r2, r3
 80069e2:	69ba      	ldr	r2, [r7, #24]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	69ba      	ldr	r2, [r7, #24]
 80069ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	f003 0303 	and.w	r3, r3, #3
 80069f6:	2b03      	cmp	r3, #3
 80069f8:	d017      	beq.n	8006a2a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006a00:	69fb      	ldr	r3, [r7, #28]
 8006a02:	005b      	lsls	r3, r3, #1
 8006a04:	2203      	movs	r2, #3
 8006a06:	fa02 f303 	lsl.w	r3, r2, r3
 8006a0a:	43db      	mvns	r3, r3
 8006a0c:	69ba      	ldr	r2, [r7, #24]
 8006a0e:	4013      	ands	r3, r2
 8006a10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	689a      	ldr	r2, [r3, #8]
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	005b      	lsls	r3, r3, #1
 8006a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a1e:	69ba      	ldr	r2, [r7, #24]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	69ba      	ldr	r2, [r7, #24]
 8006a28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	f003 0303 	and.w	r3, r3, #3
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d123      	bne.n	8006a7e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	08da      	lsrs	r2, r3, #3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	3208      	adds	r2, #8
 8006a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	f003 0307 	and.w	r3, r3, #7
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	220f      	movs	r2, #15
 8006a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a52:	43db      	mvns	r3, r3
 8006a54:	69ba      	ldr	r2, [r7, #24]
 8006a56:	4013      	ands	r3, r2
 8006a58:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	691a      	ldr	r2, [r3, #16]
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	f003 0307 	and.w	r3, r3, #7
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6a:	69ba      	ldr	r2, [r7, #24]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	08da      	lsrs	r2, r3, #3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	3208      	adds	r2, #8
 8006a78:	69b9      	ldr	r1, [r7, #24]
 8006a7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	005b      	lsls	r3, r3, #1
 8006a88:	2203      	movs	r2, #3
 8006a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a8e:	43db      	mvns	r3, r3
 8006a90:	69ba      	ldr	r2, [r7, #24]
 8006a92:	4013      	ands	r3, r2
 8006a94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	f003 0203 	and.w	r2, r3, #3
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	005b      	lsls	r3, r3, #1
 8006aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa6:	69ba      	ldr	r2, [r7, #24]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	69ba      	ldr	r2, [r7, #24]
 8006ab0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f000 80e0 	beq.w	8006c80 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ac0:	4b2f      	ldr	r3, [pc, #188]	@ (8006b80 <HAL_GPIO_Init+0x238>)
 8006ac2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8006ac6:	4a2e      	ldr	r2, [pc, #184]	@ (8006b80 <HAL_GPIO_Init+0x238>)
 8006ac8:	f043 0302 	orr.w	r3, r3, #2
 8006acc:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8006ad0:	4b2b      	ldr	r3, [pc, #172]	@ (8006b80 <HAL_GPIO_Init+0x238>)
 8006ad2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8006ad6:	f003 0302 	and.w	r3, r3, #2
 8006ada:	60fb      	str	r3, [r7, #12]
 8006adc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006ade:	4a29      	ldr	r2, [pc, #164]	@ (8006b84 <HAL_GPIO_Init+0x23c>)
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	089b      	lsrs	r3, r3, #2
 8006ae4:	3302      	adds	r3, #2
 8006ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	f003 0303 	and.w	r3, r3, #3
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	220f      	movs	r2, #15
 8006af6:	fa02 f303 	lsl.w	r3, r2, r3
 8006afa:	43db      	mvns	r3, r3
 8006afc:	69ba      	ldr	r2, [r7, #24]
 8006afe:	4013      	ands	r3, r2
 8006b00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a20      	ldr	r2, [pc, #128]	@ (8006b88 <HAL_GPIO_Init+0x240>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d052      	beq.n	8006bb0 <HAL_GPIO_Init+0x268>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a1f      	ldr	r2, [pc, #124]	@ (8006b8c <HAL_GPIO_Init+0x244>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d031      	beq.n	8006b76 <HAL_GPIO_Init+0x22e>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a1e      	ldr	r2, [pc, #120]	@ (8006b90 <HAL_GPIO_Init+0x248>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d02b      	beq.n	8006b72 <HAL_GPIO_Init+0x22a>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a1d      	ldr	r2, [pc, #116]	@ (8006b94 <HAL_GPIO_Init+0x24c>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d025      	beq.n	8006b6e <HAL_GPIO_Init+0x226>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a1c      	ldr	r2, [pc, #112]	@ (8006b98 <HAL_GPIO_Init+0x250>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d01f      	beq.n	8006b6a <HAL_GPIO_Init+0x222>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a1b      	ldr	r2, [pc, #108]	@ (8006b9c <HAL_GPIO_Init+0x254>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d019      	beq.n	8006b66 <HAL_GPIO_Init+0x21e>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a1a      	ldr	r2, [pc, #104]	@ (8006ba0 <HAL_GPIO_Init+0x258>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d013      	beq.n	8006b62 <HAL_GPIO_Init+0x21a>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a19      	ldr	r2, [pc, #100]	@ (8006ba4 <HAL_GPIO_Init+0x25c>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d00d      	beq.n	8006b5e <HAL_GPIO_Init+0x216>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a18      	ldr	r2, [pc, #96]	@ (8006ba8 <HAL_GPIO_Init+0x260>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d007      	beq.n	8006b5a <HAL_GPIO_Init+0x212>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4a17      	ldr	r2, [pc, #92]	@ (8006bac <HAL_GPIO_Init+0x264>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d101      	bne.n	8006b56 <HAL_GPIO_Init+0x20e>
 8006b52:	2309      	movs	r3, #9
 8006b54:	e02d      	b.n	8006bb2 <HAL_GPIO_Init+0x26a>
 8006b56:	230a      	movs	r3, #10
 8006b58:	e02b      	b.n	8006bb2 <HAL_GPIO_Init+0x26a>
 8006b5a:	2308      	movs	r3, #8
 8006b5c:	e029      	b.n	8006bb2 <HAL_GPIO_Init+0x26a>
 8006b5e:	2307      	movs	r3, #7
 8006b60:	e027      	b.n	8006bb2 <HAL_GPIO_Init+0x26a>
 8006b62:	2306      	movs	r3, #6
 8006b64:	e025      	b.n	8006bb2 <HAL_GPIO_Init+0x26a>
 8006b66:	2305      	movs	r3, #5
 8006b68:	e023      	b.n	8006bb2 <HAL_GPIO_Init+0x26a>
 8006b6a:	2304      	movs	r3, #4
 8006b6c:	e021      	b.n	8006bb2 <HAL_GPIO_Init+0x26a>
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e01f      	b.n	8006bb2 <HAL_GPIO_Init+0x26a>
 8006b72:	2302      	movs	r3, #2
 8006b74:	e01d      	b.n	8006bb2 <HAL_GPIO_Init+0x26a>
 8006b76:	2301      	movs	r3, #1
 8006b78:	e01b      	b.n	8006bb2 <HAL_GPIO_Init+0x26a>
 8006b7a:	bf00      	nop
 8006b7c:	58000080 	.word	0x58000080
 8006b80:	58024400 	.word	0x58024400
 8006b84:	58000400 	.word	0x58000400
 8006b88:	58020000 	.word	0x58020000
 8006b8c:	58020400 	.word	0x58020400
 8006b90:	58020800 	.word	0x58020800
 8006b94:	58020c00 	.word	0x58020c00
 8006b98:	58021000 	.word	0x58021000
 8006b9c:	58021400 	.word	0x58021400
 8006ba0:	58021800 	.word	0x58021800
 8006ba4:	58021c00 	.word	0x58021c00
 8006ba8:	58022000 	.word	0x58022000
 8006bac:	58022400 	.word	0x58022400
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	69fa      	ldr	r2, [r7, #28]
 8006bb4:	f002 0203 	and.w	r2, r2, #3
 8006bb8:	0092      	lsls	r2, r2, #2
 8006bba:	4093      	lsls	r3, r2
 8006bbc:	69ba      	ldr	r2, [r7, #24]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006bc2:	4938      	ldr	r1, [pc, #224]	@ (8006ca4 <HAL_GPIO_Init+0x35c>)
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	089b      	lsrs	r3, r3, #2
 8006bc8:	3302      	adds	r3, #2
 8006bca:	69ba      	ldr	r2, [r7, #24]
 8006bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006bd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	43db      	mvns	r3, r3
 8006bdc:	69ba      	ldr	r2, [r7, #24]
 8006bde:	4013      	ands	r3, r2
 8006be0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d003      	beq.n	8006bf6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006bee:	69ba      	ldr	r2, [r7, #24]
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006bf6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006bfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	43db      	mvns	r3, r3
 8006c0a:	69ba      	ldr	r2, [r7, #24]
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d003      	beq.n	8006c24 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006c1c:	69ba      	ldr	r2, [r7, #24]
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006c24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	43db      	mvns	r3, r3
 8006c36:	69ba      	ldr	r2, [r7, #24]
 8006c38:	4013      	ands	r3, r2
 8006c3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d003      	beq.n	8006c50 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006c48:	69ba      	ldr	r2, [r7, #24]
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	69ba      	ldr	r2, [r7, #24]
 8006c54:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	43db      	mvns	r3, r3
 8006c60:	69ba      	ldr	r2, [r7, #24]
 8006c62:	4013      	ands	r3, r2
 8006c64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d003      	beq.n	8006c7a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006c72:	69ba      	ldr	r2, [r7, #24]
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	69ba      	ldr	r2, [r7, #24]
 8006c7e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	3301      	adds	r3, #1
 8006c84:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	f47f ae63 	bne.w	800695c <HAL_GPIO_Init+0x14>
  }
}
 8006c96:	bf00      	nop
 8006c98:	bf00      	nop
 8006c9a:	3724      	adds	r7, #36	@ 0x24
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr
 8006ca4:	58000400 	.word	0x58000400

08006ca8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	807b      	strh	r3, [r7, #2]
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006cb8:	787b      	ldrb	r3, [r7, #1]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d003      	beq.n	8006cc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006cbe:	887a      	ldrh	r2, [r7, #2]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006cc4:	e003      	b.n	8006cce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006cc6:	887b      	ldrh	r3, [r7, #2]
 8006cc8:	041a      	lsls	r2, r3, #16
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	619a      	str	r2, [r3, #24]
}
 8006cce:	bf00      	nop
 8006cd0:	370c      	adds	r7, #12
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr
	...

08006cdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d101      	bne.n	8006cee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e08b      	b.n	8006e06 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d106      	bne.n	8006d08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f7fb f82a 	bl	8001d5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2224      	movs	r2, #36	@ 0x24
 8006d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f022 0201 	bic.w	r2, r2, #1
 8006d1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	685a      	ldr	r2, [r3, #4]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006d2c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	689a      	ldr	r2, [r3, #8]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006d3c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d107      	bne.n	8006d56 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	689a      	ldr	r2, [r3, #8]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d52:	609a      	str	r2, [r3, #8]
 8006d54:	e006      	b.n	8006d64 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	689a      	ldr	r2, [r3, #8]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006d62:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d108      	bne.n	8006d7e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	685a      	ldr	r2, [r3, #4]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d7a:	605a      	str	r2, [r3, #4]
 8006d7c:	e007      	b.n	8006d8e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	685a      	ldr	r2, [r3, #4]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006d8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	6859      	ldr	r1, [r3, #4]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	4b1d      	ldr	r3, [pc, #116]	@ (8006e10 <HAL_I2C_Init+0x134>)
 8006d9a:	430b      	orrs	r3, r1
 8006d9c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68da      	ldr	r2, [r3, #12]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006dac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	691a      	ldr	r2, [r3, #16]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	695b      	ldr	r3, [r3, #20]
 8006db6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	699b      	ldr	r3, [r3, #24]
 8006dbe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	430a      	orrs	r2, r1
 8006dc6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	69d9      	ldr	r1, [r3, #28]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6a1a      	ldr	r2, [r3, #32]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	430a      	orrs	r2, r1
 8006dd6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f042 0201 	orr.w	r2, r2, #1
 8006de6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2220      	movs	r2, #32
 8006df2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3708      	adds	r7, #8
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	02008000 	.word	0x02008000

08006e14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b20      	cmp	r3, #32
 8006e28:	d138      	bne.n	8006e9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d101      	bne.n	8006e38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006e34:	2302      	movs	r3, #2
 8006e36:	e032      	b.n	8006e9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2224      	movs	r2, #36	@ 0x24
 8006e44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f022 0201 	bic.w	r2, r2, #1
 8006e56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006e66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	6819      	ldr	r1, [r3, #0]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	683a      	ldr	r2, [r7, #0]
 8006e74:	430a      	orrs	r2, r1
 8006e76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f042 0201 	orr.w	r2, r2, #1
 8006e86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2220      	movs	r2, #32
 8006e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	e000      	b.n	8006e9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006e9c:	2302      	movs	r3, #2
  }
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	370c      	adds	r7, #12
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr

08006eaa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006eaa:	b480      	push	{r7}
 8006eac:	b085      	sub	sp, #20
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
 8006eb2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	2b20      	cmp	r3, #32
 8006ebe:	d139      	bne.n	8006f34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d101      	bne.n	8006ece <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006eca:	2302      	movs	r3, #2
 8006ecc:	e033      	b.n	8006f36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2224      	movs	r2, #36	@ 0x24
 8006eda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f022 0201 	bic.w	r2, r2, #1
 8006eec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006efc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	021b      	lsls	r3, r3, #8
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	4313      	orrs	r3, r2
 8006f06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f042 0201 	orr.w	r2, r2, #1
 8006f1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2220      	movs	r2, #32
 8006f24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006f30:	2300      	movs	r3, #0
 8006f32:	e000      	b.n	8006f36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006f34:	2302      	movs	r3, #2
  }
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3714      	adds	r7, #20
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
	...

08006f44 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006f4c:	4b19      	ldr	r3, [pc, #100]	@ (8006fb4 <HAL_PWREx_ConfigSupply+0x70>)
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	f003 0304 	and.w	r3, r3, #4
 8006f54:	2b04      	cmp	r3, #4
 8006f56:	d00a      	beq.n	8006f6e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006f58:	4b16      	ldr	r3, [pc, #88]	@ (8006fb4 <HAL_PWREx_ConfigSupply+0x70>)
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	f003 0307 	and.w	r3, r3, #7
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d001      	beq.n	8006f6a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e01f      	b.n	8006faa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	e01d      	b.n	8006faa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006f6e:	4b11      	ldr	r3, [pc, #68]	@ (8006fb4 <HAL_PWREx_ConfigSupply+0x70>)
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	f023 0207 	bic.w	r2, r3, #7
 8006f76:	490f      	ldr	r1, [pc, #60]	@ (8006fb4 <HAL_PWREx_ConfigSupply+0x70>)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006f7e:	f7fc f8e9 	bl	8003154 <HAL_GetTick>
 8006f82:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006f84:	e009      	b.n	8006f9a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006f86:	f7fc f8e5 	bl	8003154 <HAL_GetTick>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	1ad3      	subs	r3, r2, r3
 8006f90:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006f94:	d901      	bls.n	8006f9a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e007      	b.n	8006faa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006f9a:	4b06      	ldr	r3, [pc, #24]	@ (8006fb4 <HAL_PWREx_ConfigSupply+0x70>)
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006fa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fa6:	d1ee      	bne.n	8006f86 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3710      	adds	r7, #16
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	58024800 	.word	0x58024800

08006fb8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b08c      	sub	sp, #48	@ 0x30
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d102      	bne.n	8006fcc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	f000 bc1f 	b.w	800780a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 0301 	and.w	r3, r3, #1
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f000 80b3 	beq.w	8007140 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fda:	4b95      	ldr	r3, [pc, #596]	@ (8007230 <HAL_RCC_OscConfig+0x278>)
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006fe4:	4b92      	ldr	r3, [pc, #584]	@ (8007230 <HAL_RCC_OscConfig+0x278>)
 8006fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fec:	2b10      	cmp	r3, #16
 8006fee:	d007      	beq.n	8007000 <HAL_RCC_OscConfig+0x48>
 8006ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ff2:	2b18      	cmp	r3, #24
 8006ff4:	d112      	bne.n	800701c <HAL_RCC_OscConfig+0x64>
 8006ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff8:	f003 0303 	and.w	r3, r3, #3
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d10d      	bne.n	800701c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007000:	4b8b      	ldr	r3, [pc, #556]	@ (8007230 <HAL_RCC_OscConfig+0x278>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007008:	2b00      	cmp	r3, #0
 800700a:	f000 8098 	beq.w	800713e <HAL_RCC_OscConfig+0x186>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	2b00      	cmp	r3, #0
 8007014:	f040 8093 	bne.w	800713e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e3f6      	b.n	800780a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007024:	d106      	bne.n	8007034 <HAL_RCC_OscConfig+0x7c>
 8007026:	4b82      	ldr	r3, [pc, #520]	@ (8007230 <HAL_RCC_OscConfig+0x278>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a81      	ldr	r2, [pc, #516]	@ (8007230 <HAL_RCC_OscConfig+0x278>)
 800702c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007030:	6013      	str	r3, [r2, #0]
 8007032:	e058      	b.n	80070e6 <HAL_RCC_OscConfig+0x12e>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d112      	bne.n	8007062 <HAL_RCC_OscConfig+0xaa>
 800703c:	4b7c      	ldr	r3, [pc, #496]	@ (8007230 <HAL_RCC_OscConfig+0x278>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a7b      	ldr	r2, [pc, #492]	@ (8007230 <HAL_RCC_OscConfig+0x278>)
 8007042:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007046:	6013      	str	r3, [r2, #0]
 8007048:	4b79      	ldr	r3, [pc, #484]	@ (8007230 <HAL_RCC_OscConfig+0x278>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a78      	ldr	r2, [pc, #480]	@ (8007230 <HAL_RCC_OscConfig+0x278>)
 800704e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007052:	6013      	str	r3, [r2, #0]
 8007054:	4b76      	ldr	r3, [pc, #472]	@ (8007230 <HAL_RCC_OscConfig+0x278>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a75      	ldr	r2, [pc, #468]	@ (8007230 <HAL_RCC_OscConfig+0x278>)
 800705a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800705e:	6013      	str	r3, [r2, #0]
 8007060:	e041      	b.n	80070e6 <HAL_RCC_OscConfig+0x12e>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800706a:	d112      	bne.n	8007092 <HAL_RCC_OscConfig+0xda>
 800706c:	4b70      	ldr	r3, [pc, #448]	@ (8007230 <HAL_RCC_OscConfig+0x278>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a6f      	ldr	r2, [pc, #444]	@ (8007230 <HAL_RCC_OscConfig+0x278>)
 8007072:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007076:	6013      	str	r3, [r2, #0]
 8007078:	4b6d      	ldr	r3, [pc, #436]	@ (8007230 <HAL_RCC_OscConfig+0x278>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a6c      	ldr	r2, [pc, #432]	@ (8007230 <HAL_RCC_OscConfig+0x278>)
 800707e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007082:	6013      	str	r3, [r2, #0]
 8007084:	4b6a      	ldr	r3, [pc, #424]	@ (8007230 <HAL_RCC_OscConfig+0x278>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a69      	ldr	r2, [pc, #420]	@ (8007230 <HAL_RCC_OscConfig+0x278>)
 800708a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800708e:	6013      	str	r3, [r2, #0]
 8007090:	e029      	b.n	80070e6 <HAL_RCC_OscConfig+0x12e>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800709a:	d112      	bne.n	80070c2 <HAL_RCC_OscConfig+0x10a>
 800709c:	4b64      	ldr	r3, [pc, #400]	@ (8007230 <HAL_RCC_OscConfig+0x278>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a63      	ldr	r2, [pc, #396]	@ (8007230 <HAL_RCC_OscConfig+0x278>)
 80070a2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80070a6:	6013      	str	r3, [r2, #0]
 80070a8:	4b61      	ldr	r3, [pc, #388]	@ (8007230 <HAL_RCC_OscConfig+0x278>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a60      	ldr	r2, [pc, #384]	@ (8007230 <HAL_RCC_OscConfig+0x278>)
 80070ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80070b2:	6013      	str	r3, [r2, #0]
 80070b4:	4b5e      	ldr	r3, [pc, #376]	@ (8007230 <HAL_RCC_OscConfig+0x278>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a5d      	ldr	r2, [pc, #372]	@ (8007230 <HAL_RCC_OscConfig+0x278>)
 80070ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070be:	6013      	str	r3, [r2, #0]
 80070c0:	e011      	b.n	80070e6 <HAL_RCC_OscConfig+0x12e>
 80070c2:	4b5b      	ldr	r3, [pc, #364]	@ (8007230 <HAL_RCC_OscConfig+0x278>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a5a      	ldr	r2, [pc, #360]	@ (8007230 <HAL_RCC_OscConfig+0x278>)
 80070c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070cc:	6013      	str	r3, [r2, #0]
 80070ce:	4b58      	ldr	r3, [pc, #352]	@ (8007230 <HAL_RCC_OscConfig+0x278>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a57      	ldr	r2, [pc, #348]	@ (8007230 <HAL_RCC_OscConfig+0x278>)
 80070d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80070d8:	6013      	str	r3, [r2, #0]
 80070da:	4b55      	ldr	r3, [pc, #340]	@ (8007230 <HAL_RCC_OscConfig+0x278>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a54      	ldr	r2, [pc, #336]	@ (8007230 <HAL_RCC_OscConfig+0x278>)
 80070e0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80070e4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d013      	beq.n	8007116 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070ee:	f7fc f831 	bl	8003154 <HAL_GetTick>
 80070f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80070f4:	e008      	b.n	8007108 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070f6:	f7fc f82d 	bl	8003154 <HAL_GetTick>
 80070fa:	4602      	mov	r2, r0
 80070fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	2b64      	cmp	r3, #100	@ 0x64
 8007102:	d901      	bls.n	8007108 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8007104:	2303      	movs	r3, #3
 8007106:	e380      	b.n	800780a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007108:	4b49      	ldr	r3, [pc, #292]	@ (8007230 <HAL_RCC_OscConfig+0x278>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007110:	2b00      	cmp	r3, #0
 8007112:	d0f0      	beq.n	80070f6 <HAL_RCC_OscConfig+0x13e>
 8007114:	e014      	b.n	8007140 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007116:	f7fc f81d 	bl	8003154 <HAL_GetTick>
 800711a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800711c:	e008      	b.n	8007130 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800711e:	f7fc f819 	bl	8003154 <HAL_GetTick>
 8007122:	4602      	mov	r2, r0
 8007124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007126:	1ad3      	subs	r3, r2, r3
 8007128:	2b64      	cmp	r3, #100	@ 0x64
 800712a:	d901      	bls.n	8007130 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800712c:	2303      	movs	r3, #3
 800712e:	e36c      	b.n	800780a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007130:	4b3f      	ldr	r3, [pc, #252]	@ (8007230 <HAL_RCC_OscConfig+0x278>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1f0      	bne.n	800711e <HAL_RCC_OscConfig+0x166>
 800713c:	e000      	b.n	8007140 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800713e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 0302 	and.w	r3, r3, #2
 8007148:	2b00      	cmp	r3, #0
 800714a:	f000 808c 	beq.w	8007266 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800714e:	4b38      	ldr	r3, [pc, #224]	@ (8007230 <HAL_RCC_OscConfig+0x278>)
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007156:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007158:	4b35      	ldr	r3, [pc, #212]	@ (8007230 <HAL_RCC_OscConfig+0x278>)
 800715a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800715c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800715e:	6a3b      	ldr	r3, [r7, #32]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d007      	beq.n	8007174 <HAL_RCC_OscConfig+0x1bc>
 8007164:	6a3b      	ldr	r3, [r7, #32]
 8007166:	2b18      	cmp	r3, #24
 8007168:	d137      	bne.n	80071da <HAL_RCC_OscConfig+0x222>
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	f003 0303 	and.w	r3, r3, #3
 8007170:	2b00      	cmp	r3, #0
 8007172:	d132      	bne.n	80071da <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007174:	4b2e      	ldr	r3, [pc, #184]	@ (8007230 <HAL_RCC_OscConfig+0x278>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f003 0304 	and.w	r3, r3, #4
 800717c:	2b00      	cmp	r3, #0
 800717e:	d005      	beq.n	800718c <HAL_RCC_OscConfig+0x1d4>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d101      	bne.n	800718c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e33e      	b.n	800780a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800718c:	4b28      	ldr	r3, [pc, #160]	@ (8007230 <HAL_RCC_OscConfig+0x278>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f023 0219 	bic.w	r2, r3, #25
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	4925      	ldr	r1, [pc, #148]	@ (8007230 <HAL_RCC_OscConfig+0x278>)
 800719a:	4313      	orrs	r3, r2
 800719c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800719e:	f7fb ffd9 	bl	8003154 <HAL_GetTick>
 80071a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80071a4:	e008      	b.n	80071b8 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071a6:	f7fb ffd5 	bl	8003154 <HAL_GetTick>
 80071aa:	4602      	mov	r2, r0
 80071ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ae:	1ad3      	subs	r3, r2, r3
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d901      	bls.n	80071b8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80071b4:	2303      	movs	r3, #3
 80071b6:	e328      	b.n	800780a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80071b8:	4b1d      	ldr	r3, [pc, #116]	@ (8007230 <HAL_RCC_OscConfig+0x278>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 0304 	and.w	r3, r3, #4
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d0f0      	beq.n	80071a6 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071c4:	4b1a      	ldr	r3, [pc, #104]	@ (8007230 <HAL_RCC_OscConfig+0x278>)
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	061b      	lsls	r3, r3, #24
 80071d2:	4917      	ldr	r1, [pc, #92]	@ (8007230 <HAL_RCC_OscConfig+0x278>)
 80071d4:	4313      	orrs	r3, r2
 80071d6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071d8:	e045      	b.n	8007266 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d028      	beq.n	8007234 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80071e2:	4b13      	ldr	r3, [pc, #76]	@ (8007230 <HAL_RCC_OscConfig+0x278>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f023 0219 	bic.w	r2, r3, #25
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	4910      	ldr	r1, [pc, #64]	@ (8007230 <HAL_RCC_OscConfig+0x278>)
 80071f0:	4313      	orrs	r3, r2
 80071f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071f4:	f7fb ffae 	bl	8003154 <HAL_GetTick>
 80071f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80071fa:	e008      	b.n	800720e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071fc:	f7fb ffaa 	bl	8003154 <HAL_GetTick>
 8007200:	4602      	mov	r2, r0
 8007202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	2b02      	cmp	r3, #2
 8007208:	d901      	bls.n	800720e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800720a:	2303      	movs	r3, #3
 800720c:	e2fd      	b.n	800780a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800720e:	4b08      	ldr	r3, [pc, #32]	@ (8007230 <HAL_RCC_OscConfig+0x278>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 0304 	and.w	r3, r3, #4
 8007216:	2b00      	cmp	r3, #0
 8007218:	d0f0      	beq.n	80071fc <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800721a:	4b05      	ldr	r3, [pc, #20]	@ (8007230 <HAL_RCC_OscConfig+0x278>)
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	061b      	lsls	r3, r3, #24
 8007228:	4901      	ldr	r1, [pc, #4]	@ (8007230 <HAL_RCC_OscConfig+0x278>)
 800722a:	4313      	orrs	r3, r2
 800722c:	604b      	str	r3, [r1, #4]
 800722e:	e01a      	b.n	8007266 <HAL_RCC_OscConfig+0x2ae>
 8007230:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007234:	4b97      	ldr	r3, [pc, #604]	@ (8007494 <HAL_RCC_OscConfig+0x4dc>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a96      	ldr	r2, [pc, #600]	@ (8007494 <HAL_RCC_OscConfig+0x4dc>)
 800723a:	f023 0301 	bic.w	r3, r3, #1
 800723e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007240:	f7fb ff88 	bl	8003154 <HAL_GetTick>
 8007244:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007246:	e008      	b.n	800725a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007248:	f7fb ff84 	bl	8003154 <HAL_GetTick>
 800724c:	4602      	mov	r2, r0
 800724e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	2b02      	cmp	r3, #2
 8007254:	d901      	bls.n	800725a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	e2d7      	b.n	800780a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800725a:	4b8e      	ldr	r3, [pc, #568]	@ (8007494 <HAL_RCC_OscConfig+0x4dc>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 0304 	and.w	r3, r3, #4
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1f0      	bne.n	8007248 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 0310 	and.w	r3, r3, #16
 800726e:	2b00      	cmp	r3, #0
 8007270:	d06a      	beq.n	8007348 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007272:	4b88      	ldr	r3, [pc, #544]	@ (8007494 <HAL_RCC_OscConfig+0x4dc>)
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800727a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800727c:	4b85      	ldr	r3, [pc, #532]	@ (8007494 <HAL_RCC_OscConfig+0x4dc>)
 800727e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007280:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	2b08      	cmp	r3, #8
 8007286:	d007      	beq.n	8007298 <HAL_RCC_OscConfig+0x2e0>
 8007288:	69bb      	ldr	r3, [r7, #24]
 800728a:	2b18      	cmp	r3, #24
 800728c:	d11b      	bne.n	80072c6 <HAL_RCC_OscConfig+0x30e>
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	f003 0303 	and.w	r3, r3, #3
 8007294:	2b01      	cmp	r3, #1
 8007296:	d116      	bne.n	80072c6 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007298:	4b7e      	ldr	r3, [pc, #504]	@ (8007494 <HAL_RCC_OscConfig+0x4dc>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d005      	beq.n	80072b0 <HAL_RCC_OscConfig+0x2f8>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	69db      	ldr	r3, [r3, #28]
 80072a8:	2b80      	cmp	r3, #128	@ 0x80
 80072aa:	d001      	beq.n	80072b0 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	e2ac      	b.n	800780a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80072b0:	4b78      	ldr	r3, [pc, #480]	@ (8007494 <HAL_RCC_OscConfig+0x4dc>)
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6a1b      	ldr	r3, [r3, #32]
 80072bc:	061b      	lsls	r3, r3, #24
 80072be:	4975      	ldr	r1, [pc, #468]	@ (8007494 <HAL_RCC_OscConfig+0x4dc>)
 80072c0:	4313      	orrs	r3, r2
 80072c2:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80072c4:	e040      	b.n	8007348 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	69db      	ldr	r3, [r3, #28]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d023      	beq.n	8007316 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80072ce:	4b71      	ldr	r3, [pc, #452]	@ (8007494 <HAL_RCC_OscConfig+0x4dc>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a70      	ldr	r2, [pc, #448]	@ (8007494 <HAL_RCC_OscConfig+0x4dc>)
 80072d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072da:	f7fb ff3b 	bl	8003154 <HAL_GetTick>
 80072de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80072e0:	e008      	b.n	80072f4 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80072e2:	f7fb ff37 	bl	8003154 <HAL_GetTick>
 80072e6:	4602      	mov	r2, r0
 80072e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ea:	1ad3      	subs	r3, r2, r3
 80072ec:	2b02      	cmp	r3, #2
 80072ee:	d901      	bls.n	80072f4 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80072f0:	2303      	movs	r3, #3
 80072f2:	e28a      	b.n	800780a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80072f4:	4b67      	ldr	r3, [pc, #412]	@ (8007494 <HAL_RCC_OscConfig+0x4dc>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d0f0      	beq.n	80072e2 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007300:	4b64      	ldr	r3, [pc, #400]	@ (8007494 <HAL_RCC_OscConfig+0x4dc>)
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6a1b      	ldr	r3, [r3, #32]
 800730c:	061b      	lsls	r3, r3, #24
 800730e:	4961      	ldr	r1, [pc, #388]	@ (8007494 <HAL_RCC_OscConfig+0x4dc>)
 8007310:	4313      	orrs	r3, r2
 8007312:	60cb      	str	r3, [r1, #12]
 8007314:	e018      	b.n	8007348 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007316:	4b5f      	ldr	r3, [pc, #380]	@ (8007494 <HAL_RCC_OscConfig+0x4dc>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a5e      	ldr	r2, [pc, #376]	@ (8007494 <HAL_RCC_OscConfig+0x4dc>)
 800731c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007320:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007322:	f7fb ff17 	bl	8003154 <HAL_GetTick>
 8007326:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007328:	e008      	b.n	800733c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800732a:	f7fb ff13 	bl	8003154 <HAL_GetTick>
 800732e:	4602      	mov	r2, r0
 8007330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007332:	1ad3      	subs	r3, r2, r3
 8007334:	2b02      	cmp	r3, #2
 8007336:	d901      	bls.n	800733c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8007338:	2303      	movs	r3, #3
 800733a:	e266      	b.n	800780a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800733c:	4b55      	ldr	r3, [pc, #340]	@ (8007494 <HAL_RCC_OscConfig+0x4dc>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007344:	2b00      	cmp	r3, #0
 8007346:	d1f0      	bne.n	800732a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 0308 	and.w	r3, r3, #8
 8007350:	2b00      	cmp	r3, #0
 8007352:	d036      	beq.n	80073c2 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	695b      	ldr	r3, [r3, #20]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d019      	beq.n	8007390 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800735c:	4b4d      	ldr	r3, [pc, #308]	@ (8007494 <HAL_RCC_OscConfig+0x4dc>)
 800735e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007360:	4a4c      	ldr	r2, [pc, #304]	@ (8007494 <HAL_RCC_OscConfig+0x4dc>)
 8007362:	f043 0301 	orr.w	r3, r3, #1
 8007366:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007368:	f7fb fef4 	bl	8003154 <HAL_GetTick>
 800736c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800736e:	e008      	b.n	8007382 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007370:	f7fb fef0 	bl	8003154 <HAL_GetTick>
 8007374:	4602      	mov	r2, r0
 8007376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	2b02      	cmp	r3, #2
 800737c:	d901      	bls.n	8007382 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800737e:	2303      	movs	r3, #3
 8007380:	e243      	b.n	800780a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007382:	4b44      	ldr	r3, [pc, #272]	@ (8007494 <HAL_RCC_OscConfig+0x4dc>)
 8007384:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007386:	f003 0302 	and.w	r3, r3, #2
 800738a:	2b00      	cmp	r3, #0
 800738c:	d0f0      	beq.n	8007370 <HAL_RCC_OscConfig+0x3b8>
 800738e:	e018      	b.n	80073c2 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007390:	4b40      	ldr	r3, [pc, #256]	@ (8007494 <HAL_RCC_OscConfig+0x4dc>)
 8007392:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007394:	4a3f      	ldr	r2, [pc, #252]	@ (8007494 <HAL_RCC_OscConfig+0x4dc>)
 8007396:	f023 0301 	bic.w	r3, r3, #1
 800739a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800739c:	f7fb feda 	bl	8003154 <HAL_GetTick>
 80073a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80073a2:	e008      	b.n	80073b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073a4:	f7fb fed6 	bl	8003154 <HAL_GetTick>
 80073a8:	4602      	mov	r2, r0
 80073aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ac:	1ad3      	subs	r3, r2, r3
 80073ae:	2b02      	cmp	r3, #2
 80073b0:	d901      	bls.n	80073b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80073b2:	2303      	movs	r3, #3
 80073b4:	e229      	b.n	800780a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80073b6:	4b37      	ldr	r3, [pc, #220]	@ (8007494 <HAL_RCC_OscConfig+0x4dc>)
 80073b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073ba:	f003 0302 	and.w	r3, r3, #2
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1f0      	bne.n	80073a4 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f003 0320 	and.w	r3, r3, #32
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d036      	beq.n	800743c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	699b      	ldr	r3, [r3, #24]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d019      	beq.n	800740a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80073d6:	4b2f      	ldr	r3, [pc, #188]	@ (8007494 <HAL_RCC_OscConfig+0x4dc>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a2e      	ldr	r2, [pc, #184]	@ (8007494 <HAL_RCC_OscConfig+0x4dc>)
 80073dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80073e0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80073e2:	f7fb feb7 	bl	8003154 <HAL_GetTick>
 80073e6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80073e8:	e008      	b.n	80073fc <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80073ea:	f7fb feb3 	bl	8003154 <HAL_GetTick>
 80073ee:	4602      	mov	r2, r0
 80073f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d901      	bls.n	80073fc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80073f8:	2303      	movs	r3, #3
 80073fa:	e206      	b.n	800780a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80073fc:	4b25      	ldr	r3, [pc, #148]	@ (8007494 <HAL_RCC_OscConfig+0x4dc>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007404:	2b00      	cmp	r3, #0
 8007406:	d0f0      	beq.n	80073ea <HAL_RCC_OscConfig+0x432>
 8007408:	e018      	b.n	800743c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800740a:	4b22      	ldr	r3, [pc, #136]	@ (8007494 <HAL_RCC_OscConfig+0x4dc>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a21      	ldr	r2, [pc, #132]	@ (8007494 <HAL_RCC_OscConfig+0x4dc>)
 8007410:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007414:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007416:	f7fb fe9d 	bl	8003154 <HAL_GetTick>
 800741a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800741c:	e008      	b.n	8007430 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800741e:	f7fb fe99 	bl	8003154 <HAL_GetTick>
 8007422:	4602      	mov	r2, r0
 8007424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007426:	1ad3      	subs	r3, r2, r3
 8007428:	2b02      	cmp	r3, #2
 800742a:	d901      	bls.n	8007430 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800742c:	2303      	movs	r3, #3
 800742e:	e1ec      	b.n	800780a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007430:	4b18      	ldr	r3, [pc, #96]	@ (8007494 <HAL_RCC_OscConfig+0x4dc>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1f0      	bne.n	800741e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f003 0304 	and.w	r3, r3, #4
 8007444:	2b00      	cmp	r3, #0
 8007446:	f000 80af 	beq.w	80075a8 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800744a:	4b13      	ldr	r3, [pc, #76]	@ (8007498 <HAL_RCC_OscConfig+0x4e0>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a12      	ldr	r2, [pc, #72]	@ (8007498 <HAL_RCC_OscConfig+0x4e0>)
 8007450:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007454:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007456:	f7fb fe7d 	bl	8003154 <HAL_GetTick>
 800745a:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800745c:	e008      	b.n	8007470 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800745e:	f7fb fe79 	bl	8003154 <HAL_GetTick>
 8007462:	4602      	mov	r2, r0
 8007464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	2b64      	cmp	r3, #100	@ 0x64
 800746a:	d901      	bls.n	8007470 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800746c:	2303      	movs	r3, #3
 800746e:	e1cc      	b.n	800780a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007470:	4b09      	ldr	r3, [pc, #36]	@ (8007498 <HAL_RCC_OscConfig+0x4e0>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007478:	2b00      	cmp	r3, #0
 800747a:	d0f0      	beq.n	800745e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	2b01      	cmp	r3, #1
 8007482:	d10b      	bne.n	800749c <HAL_RCC_OscConfig+0x4e4>
 8007484:	4b03      	ldr	r3, [pc, #12]	@ (8007494 <HAL_RCC_OscConfig+0x4dc>)
 8007486:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007488:	4a02      	ldr	r2, [pc, #8]	@ (8007494 <HAL_RCC_OscConfig+0x4dc>)
 800748a:	f043 0301 	orr.w	r3, r3, #1
 800748e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007490:	e05b      	b.n	800754a <HAL_RCC_OscConfig+0x592>
 8007492:	bf00      	nop
 8007494:	58024400 	.word	0x58024400
 8007498:	58024800 	.word	0x58024800
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d112      	bne.n	80074ca <HAL_RCC_OscConfig+0x512>
 80074a4:	4b9d      	ldr	r3, [pc, #628]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 80074a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074a8:	4a9c      	ldr	r2, [pc, #624]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 80074aa:	f023 0301 	bic.w	r3, r3, #1
 80074ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80074b0:	4b9a      	ldr	r3, [pc, #616]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 80074b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074b4:	4a99      	ldr	r2, [pc, #612]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 80074b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80074bc:	4b97      	ldr	r3, [pc, #604]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 80074be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074c0:	4a96      	ldr	r2, [pc, #600]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 80074c2:	f023 0304 	bic.w	r3, r3, #4
 80074c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80074c8:	e03f      	b.n	800754a <HAL_RCC_OscConfig+0x592>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	2b05      	cmp	r3, #5
 80074d0:	d112      	bne.n	80074f8 <HAL_RCC_OscConfig+0x540>
 80074d2:	4b92      	ldr	r3, [pc, #584]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 80074d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074d6:	4a91      	ldr	r2, [pc, #580]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 80074d8:	f043 0304 	orr.w	r3, r3, #4
 80074dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80074de:	4b8f      	ldr	r3, [pc, #572]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 80074e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074e2:	4a8e      	ldr	r2, [pc, #568]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 80074e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80074ea:	4b8c      	ldr	r3, [pc, #560]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 80074ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074ee:	4a8b      	ldr	r2, [pc, #556]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 80074f0:	f043 0301 	orr.w	r3, r3, #1
 80074f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80074f6:	e028      	b.n	800754a <HAL_RCC_OscConfig+0x592>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	2b85      	cmp	r3, #133	@ 0x85
 80074fe:	d112      	bne.n	8007526 <HAL_RCC_OscConfig+0x56e>
 8007500:	4b86      	ldr	r3, [pc, #536]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 8007502:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007504:	4a85      	ldr	r2, [pc, #532]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 8007506:	f043 0304 	orr.w	r3, r3, #4
 800750a:	6713      	str	r3, [r2, #112]	@ 0x70
 800750c:	4b83      	ldr	r3, [pc, #524]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 800750e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007510:	4a82      	ldr	r2, [pc, #520]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 8007512:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007516:	6713      	str	r3, [r2, #112]	@ 0x70
 8007518:	4b80      	ldr	r3, [pc, #512]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 800751a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800751c:	4a7f      	ldr	r2, [pc, #508]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 800751e:	f043 0301 	orr.w	r3, r3, #1
 8007522:	6713      	str	r3, [r2, #112]	@ 0x70
 8007524:	e011      	b.n	800754a <HAL_RCC_OscConfig+0x592>
 8007526:	4b7d      	ldr	r3, [pc, #500]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 8007528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800752a:	4a7c      	ldr	r2, [pc, #496]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 800752c:	f023 0301 	bic.w	r3, r3, #1
 8007530:	6713      	str	r3, [r2, #112]	@ 0x70
 8007532:	4b7a      	ldr	r3, [pc, #488]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 8007534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007536:	4a79      	ldr	r2, [pc, #484]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 8007538:	f023 0304 	bic.w	r3, r3, #4
 800753c:	6713      	str	r3, [r2, #112]	@ 0x70
 800753e:	4b77      	ldr	r3, [pc, #476]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 8007540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007542:	4a76      	ldr	r2, [pc, #472]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 8007544:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007548:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d015      	beq.n	800757e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007552:	f7fb fdff 	bl	8003154 <HAL_GetTick>
 8007556:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007558:	e00a      	b.n	8007570 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800755a:	f7fb fdfb 	bl	8003154 <HAL_GetTick>
 800755e:	4602      	mov	r2, r0
 8007560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007562:	1ad3      	subs	r3, r2, r3
 8007564:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007568:	4293      	cmp	r3, r2
 800756a:	d901      	bls.n	8007570 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800756c:	2303      	movs	r3, #3
 800756e:	e14c      	b.n	800780a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007570:	4b6a      	ldr	r3, [pc, #424]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 8007572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007574:	f003 0302 	and.w	r3, r3, #2
 8007578:	2b00      	cmp	r3, #0
 800757a:	d0ee      	beq.n	800755a <HAL_RCC_OscConfig+0x5a2>
 800757c:	e014      	b.n	80075a8 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800757e:	f7fb fde9 	bl	8003154 <HAL_GetTick>
 8007582:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007584:	e00a      	b.n	800759c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007586:	f7fb fde5 	bl	8003154 <HAL_GetTick>
 800758a:	4602      	mov	r2, r0
 800758c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800758e:	1ad3      	subs	r3, r2, r3
 8007590:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007594:	4293      	cmp	r3, r2
 8007596:	d901      	bls.n	800759c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8007598:	2303      	movs	r3, #3
 800759a:	e136      	b.n	800780a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800759c:	4b5f      	ldr	r3, [pc, #380]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 800759e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075a0:	f003 0302 	and.w	r3, r3, #2
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d1ee      	bne.n	8007586 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	f000 812b 	beq.w	8007808 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80075b2:	4b5a      	ldr	r3, [pc, #360]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80075ba:	2b18      	cmp	r3, #24
 80075bc:	f000 80bb 	beq.w	8007736 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	f040 8095 	bne.w	80076f4 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075ca:	4b54      	ldr	r3, [pc, #336]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a53      	ldr	r2, [pc, #332]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 80075d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80075d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075d6:	f7fb fdbd 	bl	8003154 <HAL_GetTick>
 80075da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80075dc:	e008      	b.n	80075f0 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075de:	f7fb fdb9 	bl	8003154 <HAL_GetTick>
 80075e2:	4602      	mov	r2, r0
 80075e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e6:	1ad3      	subs	r3, r2, r3
 80075e8:	2b02      	cmp	r3, #2
 80075ea:	d901      	bls.n	80075f0 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80075ec:	2303      	movs	r3, #3
 80075ee:	e10c      	b.n	800780a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80075f0:	4b4a      	ldr	r3, [pc, #296]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d1f0      	bne.n	80075de <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80075fc:	4b47      	ldr	r3, [pc, #284]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 80075fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007600:	4b47      	ldr	r3, [pc, #284]	@ (8007720 <HAL_RCC_OscConfig+0x768>)
 8007602:	4013      	ands	r3, r2
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800760c:	0112      	lsls	r2, r2, #4
 800760e:	430a      	orrs	r2, r1
 8007610:	4942      	ldr	r1, [pc, #264]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 8007612:	4313      	orrs	r3, r2
 8007614:	628b      	str	r3, [r1, #40]	@ 0x28
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800761a:	3b01      	subs	r3, #1
 800761c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007624:	3b01      	subs	r3, #1
 8007626:	025b      	lsls	r3, r3, #9
 8007628:	b29b      	uxth	r3, r3
 800762a:	431a      	orrs	r2, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007630:	3b01      	subs	r3, #1
 8007632:	041b      	lsls	r3, r3, #16
 8007634:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007638:	431a      	orrs	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800763e:	3b01      	subs	r3, #1
 8007640:	061b      	lsls	r3, r3, #24
 8007642:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007646:	4935      	ldr	r1, [pc, #212]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 8007648:	4313      	orrs	r3, r2
 800764a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800764c:	4b33      	ldr	r3, [pc, #204]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 800764e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007650:	4a32      	ldr	r2, [pc, #200]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 8007652:	f023 0301 	bic.w	r3, r3, #1
 8007656:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007658:	4b30      	ldr	r3, [pc, #192]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 800765a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800765c:	4b31      	ldr	r3, [pc, #196]	@ (8007724 <HAL_RCC_OscConfig+0x76c>)
 800765e:	4013      	ands	r3, r2
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007664:	00d2      	lsls	r2, r2, #3
 8007666:	492d      	ldr	r1, [pc, #180]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 8007668:	4313      	orrs	r3, r2
 800766a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800766c:	4b2b      	ldr	r3, [pc, #172]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 800766e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007670:	f023 020c 	bic.w	r2, r3, #12
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007678:	4928      	ldr	r1, [pc, #160]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 800767a:	4313      	orrs	r3, r2
 800767c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800767e:	4b27      	ldr	r3, [pc, #156]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 8007680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007682:	f023 0202 	bic.w	r2, r3, #2
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800768a:	4924      	ldr	r1, [pc, #144]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 800768c:	4313      	orrs	r3, r2
 800768e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007690:	4b22      	ldr	r3, [pc, #136]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 8007692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007694:	4a21      	ldr	r2, [pc, #132]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 8007696:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800769a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800769c:	4b1f      	ldr	r3, [pc, #124]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 800769e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a0:	4a1e      	ldr	r2, [pc, #120]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 80076a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80076a8:	4b1c      	ldr	r3, [pc, #112]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 80076aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ac:	4a1b      	ldr	r2, [pc, #108]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 80076ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80076b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80076b4:	4b19      	ldr	r3, [pc, #100]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 80076b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076b8:	4a18      	ldr	r2, [pc, #96]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 80076ba:	f043 0301 	orr.w	r3, r3, #1
 80076be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076c0:	4b16      	ldr	r3, [pc, #88]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a15      	ldr	r2, [pc, #84]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 80076c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80076ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076cc:	f7fb fd42 	bl	8003154 <HAL_GetTick>
 80076d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80076d2:	e008      	b.n	80076e6 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076d4:	f7fb fd3e 	bl	8003154 <HAL_GetTick>
 80076d8:	4602      	mov	r2, r0
 80076da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076dc:	1ad3      	subs	r3, r2, r3
 80076de:	2b02      	cmp	r3, #2
 80076e0:	d901      	bls.n	80076e6 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80076e2:	2303      	movs	r3, #3
 80076e4:	e091      	b.n	800780a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80076e6:	4b0d      	ldr	r3, [pc, #52]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d0f0      	beq.n	80076d4 <HAL_RCC_OscConfig+0x71c>
 80076f2:	e089      	b.n	8007808 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076f4:	4b09      	ldr	r3, [pc, #36]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a08      	ldr	r2, [pc, #32]	@ (800771c <HAL_RCC_OscConfig+0x764>)
 80076fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80076fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007700:	f7fb fd28 	bl	8003154 <HAL_GetTick>
 8007704:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007706:	e00f      	b.n	8007728 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007708:	f7fb fd24 	bl	8003154 <HAL_GetTick>
 800770c:	4602      	mov	r2, r0
 800770e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007710:	1ad3      	subs	r3, r2, r3
 8007712:	2b02      	cmp	r3, #2
 8007714:	d908      	bls.n	8007728 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8007716:	2303      	movs	r3, #3
 8007718:	e077      	b.n	800780a <HAL_RCC_OscConfig+0x852>
 800771a:	bf00      	nop
 800771c:	58024400 	.word	0x58024400
 8007720:	fffffc0c 	.word	0xfffffc0c
 8007724:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007728:	4b3a      	ldr	r3, [pc, #232]	@ (8007814 <HAL_RCC_OscConfig+0x85c>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007730:	2b00      	cmp	r3, #0
 8007732:	d1e9      	bne.n	8007708 <HAL_RCC_OscConfig+0x750>
 8007734:	e068      	b.n	8007808 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007736:	4b37      	ldr	r3, [pc, #220]	@ (8007814 <HAL_RCC_OscConfig+0x85c>)
 8007738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800773a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800773c:	4b35      	ldr	r3, [pc, #212]	@ (8007814 <HAL_RCC_OscConfig+0x85c>)
 800773e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007740:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007746:	2b01      	cmp	r3, #1
 8007748:	d031      	beq.n	80077ae <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	f003 0203 	and.w	r2, r3, #3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007754:	429a      	cmp	r2, r3
 8007756:	d12a      	bne.n	80077ae <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	091b      	lsrs	r3, r3, #4
 800775c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007764:	429a      	cmp	r2, r3
 8007766:	d122      	bne.n	80077ae <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007772:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007774:	429a      	cmp	r2, r3
 8007776:	d11a      	bne.n	80077ae <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	0a5b      	lsrs	r3, r3, #9
 800777c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007784:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007786:	429a      	cmp	r2, r3
 8007788:	d111      	bne.n	80077ae <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	0c1b      	lsrs	r3, r3, #16
 800778e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007796:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007798:	429a      	cmp	r2, r3
 800779a:	d108      	bne.n	80077ae <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	0e1b      	lsrs	r3, r3, #24
 80077a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d001      	beq.n	80077b2 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e02b      	b.n	800780a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80077b2:	4b18      	ldr	r3, [pc, #96]	@ (8007814 <HAL_RCC_OscConfig+0x85c>)
 80077b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077b6:	08db      	lsrs	r3, r3, #3
 80077b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077bc:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077c2:	693a      	ldr	r2, [r7, #16]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d01f      	beq.n	8007808 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80077c8:	4b12      	ldr	r3, [pc, #72]	@ (8007814 <HAL_RCC_OscConfig+0x85c>)
 80077ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077cc:	4a11      	ldr	r2, [pc, #68]	@ (8007814 <HAL_RCC_OscConfig+0x85c>)
 80077ce:	f023 0301 	bic.w	r3, r3, #1
 80077d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80077d4:	f7fb fcbe 	bl	8003154 <HAL_GetTick>
 80077d8:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80077da:	bf00      	nop
 80077dc:	f7fb fcba 	bl	8003154 <HAL_GetTick>
 80077e0:	4602      	mov	r2, r0
 80077e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d0f9      	beq.n	80077dc <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80077e8:	4b0a      	ldr	r3, [pc, #40]	@ (8007814 <HAL_RCC_OscConfig+0x85c>)
 80077ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077ec:	4b0a      	ldr	r3, [pc, #40]	@ (8007818 <HAL_RCC_OscConfig+0x860>)
 80077ee:	4013      	ands	r3, r2
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80077f4:	00d2      	lsls	r2, r2, #3
 80077f6:	4907      	ldr	r1, [pc, #28]	@ (8007814 <HAL_RCC_OscConfig+0x85c>)
 80077f8:	4313      	orrs	r3, r2
 80077fa:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80077fc:	4b05      	ldr	r3, [pc, #20]	@ (8007814 <HAL_RCC_OscConfig+0x85c>)
 80077fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007800:	4a04      	ldr	r2, [pc, #16]	@ (8007814 <HAL_RCC_OscConfig+0x85c>)
 8007802:	f043 0301 	orr.w	r3, r3, #1
 8007806:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007808:	2300      	movs	r3, #0
}
 800780a:	4618      	mov	r0, r3
 800780c:	3730      	adds	r7, #48	@ 0x30
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop
 8007814:	58024400 	.word	0x58024400
 8007818:	ffff0007 	.word	0xffff0007

0800781c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b086      	sub	sp, #24
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d101      	bne.n	8007830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	e19c      	b.n	8007b6a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007830:	4b8a      	ldr	r3, [pc, #552]	@ (8007a5c <HAL_RCC_ClockConfig+0x240>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 030f 	and.w	r3, r3, #15
 8007838:	683a      	ldr	r2, [r7, #0]
 800783a:	429a      	cmp	r2, r3
 800783c:	d910      	bls.n	8007860 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800783e:	4b87      	ldr	r3, [pc, #540]	@ (8007a5c <HAL_RCC_ClockConfig+0x240>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f023 020f 	bic.w	r2, r3, #15
 8007846:	4985      	ldr	r1, [pc, #532]	@ (8007a5c <HAL_RCC_ClockConfig+0x240>)
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	4313      	orrs	r3, r2
 800784c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800784e:	4b83      	ldr	r3, [pc, #524]	@ (8007a5c <HAL_RCC_ClockConfig+0x240>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f003 030f 	and.w	r3, r3, #15
 8007856:	683a      	ldr	r2, [r7, #0]
 8007858:	429a      	cmp	r2, r3
 800785a:	d001      	beq.n	8007860 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e184      	b.n	8007b6a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 0304 	and.w	r3, r3, #4
 8007868:	2b00      	cmp	r3, #0
 800786a:	d010      	beq.n	800788e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	691a      	ldr	r2, [r3, #16]
 8007870:	4b7b      	ldr	r3, [pc, #492]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 8007872:	699b      	ldr	r3, [r3, #24]
 8007874:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007878:	429a      	cmp	r2, r3
 800787a:	d908      	bls.n	800788e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800787c:	4b78      	ldr	r3, [pc, #480]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 800787e:	699b      	ldr	r3, [r3, #24]
 8007880:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	4975      	ldr	r1, [pc, #468]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 800788a:	4313      	orrs	r3, r2
 800788c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 0308 	and.w	r3, r3, #8
 8007896:	2b00      	cmp	r3, #0
 8007898:	d010      	beq.n	80078bc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	695a      	ldr	r2, [r3, #20]
 800789e:	4b70      	ldr	r3, [pc, #448]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 80078a0:	69db      	ldr	r3, [r3, #28]
 80078a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d908      	bls.n	80078bc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80078aa:	4b6d      	ldr	r3, [pc, #436]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 80078ac:	69db      	ldr	r3, [r3, #28]
 80078ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	695b      	ldr	r3, [r3, #20]
 80078b6:	496a      	ldr	r1, [pc, #424]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 80078b8:	4313      	orrs	r3, r2
 80078ba:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 0310 	and.w	r3, r3, #16
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d010      	beq.n	80078ea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	699a      	ldr	r2, [r3, #24]
 80078cc:	4b64      	ldr	r3, [pc, #400]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 80078ce:	69db      	ldr	r3, [r3, #28]
 80078d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d908      	bls.n	80078ea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80078d8:	4b61      	ldr	r3, [pc, #388]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 80078da:	69db      	ldr	r3, [r3, #28]
 80078dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	699b      	ldr	r3, [r3, #24]
 80078e4:	495e      	ldr	r1, [pc, #376]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 80078e6:	4313      	orrs	r3, r2
 80078e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 0320 	and.w	r3, r3, #32
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d010      	beq.n	8007918 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	69da      	ldr	r2, [r3, #28]
 80078fa:	4b59      	ldr	r3, [pc, #356]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 80078fc:	6a1b      	ldr	r3, [r3, #32]
 80078fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007902:	429a      	cmp	r2, r3
 8007904:	d908      	bls.n	8007918 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007906:	4b56      	ldr	r3, [pc, #344]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 8007908:	6a1b      	ldr	r3, [r3, #32]
 800790a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	69db      	ldr	r3, [r3, #28]
 8007912:	4953      	ldr	r1, [pc, #332]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 8007914:	4313      	orrs	r3, r2
 8007916:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 0302 	and.w	r3, r3, #2
 8007920:	2b00      	cmp	r3, #0
 8007922:	d010      	beq.n	8007946 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	68da      	ldr	r2, [r3, #12]
 8007928:	4b4d      	ldr	r3, [pc, #308]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 800792a:	699b      	ldr	r3, [r3, #24]
 800792c:	f003 030f 	and.w	r3, r3, #15
 8007930:	429a      	cmp	r2, r3
 8007932:	d908      	bls.n	8007946 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007934:	4b4a      	ldr	r3, [pc, #296]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 8007936:	699b      	ldr	r3, [r3, #24]
 8007938:	f023 020f 	bic.w	r2, r3, #15
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	4947      	ldr	r1, [pc, #284]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 8007942:	4313      	orrs	r3, r2
 8007944:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f003 0301 	and.w	r3, r3, #1
 800794e:	2b00      	cmp	r3, #0
 8007950:	d055      	beq.n	80079fe <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007952:	4b43      	ldr	r3, [pc, #268]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 8007954:	699b      	ldr	r3, [r3, #24]
 8007956:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	4940      	ldr	r1, [pc, #256]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 8007960:	4313      	orrs	r3, r2
 8007962:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	2b02      	cmp	r3, #2
 800796a:	d107      	bne.n	800797c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800796c:	4b3c      	ldr	r3, [pc, #240]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007974:	2b00      	cmp	r3, #0
 8007976:	d121      	bne.n	80079bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007978:	2301      	movs	r3, #1
 800797a:	e0f6      	b.n	8007b6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	2b03      	cmp	r3, #3
 8007982:	d107      	bne.n	8007994 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007984:	4b36      	ldr	r3, [pc, #216]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800798c:	2b00      	cmp	r3, #0
 800798e:	d115      	bne.n	80079bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e0ea      	b.n	8007b6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	2b01      	cmp	r3, #1
 800799a:	d107      	bne.n	80079ac <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800799c:	4b30      	ldr	r3, [pc, #192]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d109      	bne.n	80079bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	e0de      	b.n	8007b6a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079ac:	4b2c      	ldr	r3, [pc, #176]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 0304 	and.w	r3, r3, #4
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d101      	bne.n	80079bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80079b8:	2301      	movs	r3, #1
 80079ba:	e0d6      	b.n	8007b6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80079bc:	4b28      	ldr	r3, [pc, #160]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	f023 0207 	bic.w	r2, r3, #7
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	4925      	ldr	r1, [pc, #148]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 80079ca:	4313      	orrs	r3, r2
 80079cc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079ce:	f7fb fbc1 	bl	8003154 <HAL_GetTick>
 80079d2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079d4:	e00a      	b.n	80079ec <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079d6:	f7fb fbbd 	bl	8003154 <HAL_GetTick>
 80079da:	4602      	mov	r2, r0
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	1ad3      	subs	r3, r2, r3
 80079e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d901      	bls.n	80079ec <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80079e8:	2303      	movs	r3, #3
 80079ea:	e0be      	b.n	8007b6a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079ec:	4b1c      	ldr	r3, [pc, #112]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 80079ee:	691b      	ldr	r3, [r3, #16]
 80079f0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	00db      	lsls	r3, r3, #3
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d1eb      	bne.n	80079d6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 0302 	and.w	r3, r3, #2
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d010      	beq.n	8007a2c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	68da      	ldr	r2, [r3, #12]
 8007a0e:	4b14      	ldr	r3, [pc, #80]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 8007a10:	699b      	ldr	r3, [r3, #24]
 8007a12:	f003 030f 	and.w	r3, r3, #15
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d208      	bcs.n	8007a2c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a1a:	4b11      	ldr	r3, [pc, #68]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 8007a1c:	699b      	ldr	r3, [r3, #24]
 8007a1e:	f023 020f 	bic.w	r2, r3, #15
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	490e      	ldr	r1, [pc, #56]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8007a5c <HAL_RCC_ClockConfig+0x240>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 030f 	and.w	r3, r3, #15
 8007a34:	683a      	ldr	r2, [r7, #0]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d214      	bcs.n	8007a64 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a3a:	4b08      	ldr	r3, [pc, #32]	@ (8007a5c <HAL_RCC_ClockConfig+0x240>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f023 020f 	bic.w	r2, r3, #15
 8007a42:	4906      	ldr	r1, [pc, #24]	@ (8007a5c <HAL_RCC_ClockConfig+0x240>)
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a4a:	4b04      	ldr	r3, [pc, #16]	@ (8007a5c <HAL_RCC_ClockConfig+0x240>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f003 030f 	and.w	r3, r3, #15
 8007a52:	683a      	ldr	r2, [r7, #0]
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d005      	beq.n	8007a64 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e086      	b.n	8007b6a <HAL_RCC_ClockConfig+0x34e>
 8007a5c:	52002000 	.word	0x52002000
 8007a60:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f003 0304 	and.w	r3, r3, #4
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d010      	beq.n	8007a92 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	691a      	ldr	r2, [r3, #16]
 8007a74:	4b3f      	ldr	r3, [pc, #252]	@ (8007b74 <HAL_RCC_ClockConfig+0x358>)
 8007a76:	699b      	ldr	r3, [r3, #24]
 8007a78:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d208      	bcs.n	8007a92 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007a80:	4b3c      	ldr	r3, [pc, #240]	@ (8007b74 <HAL_RCC_ClockConfig+0x358>)
 8007a82:	699b      	ldr	r3, [r3, #24]
 8007a84:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	691b      	ldr	r3, [r3, #16]
 8007a8c:	4939      	ldr	r1, [pc, #228]	@ (8007b74 <HAL_RCC_ClockConfig+0x358>)
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f003 0308 	and.w	r3, r3, #8
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d010      	beq.n	8007ac0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	695a      	ldr	r2, [r3, #20]
 8007aa2:	4b34      	ldr	r3, [pc, #208]	@ (8007b74 <HAL_RCC_ClockConfig+0x358>)
 8007aa4:	69db      	ldr	r3, [r3, #28]
 8007aa6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d208      	bcs.n	8007ac0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007aae:	4b31      	ldr	r3, [pc, #196]	@ (8007b74 <HAL_RCC_ClockConfig+0x358>)
 8007ab0:	69db      	ldr	r3, [r3, #28]
 8007ab2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	695b      	ldr	r3, [r3, #20]
 8007aba:	492e      	ldr	r1, [pc, #184]	@ (8007b74 <HAL_RCC_ClockConfig+0x358>)
 8007abc:	4313      	orrs	r3, r2
 8007abe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 0310 	and.w	r3, r3, #16
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d010      	beq.n	8007aee <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	699a      	ldr	r2, [r3, #24]
 8007ad0:	4b28      	ldr	r3, [pc, #160]	@ (8007b74 <HAL_RCC_ClockConfig+0x358>)
 8007ad2:	69db      	ldr	r3, [r3, #28]
 8007ad4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d208      	bcs.n	8007aee <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007adc:	4b25      	ldr	r3, [pc, #148]	@ (8007b74 <HAL_RCC_ClockConfig+0x358>)
 8007ade:	69db      	ldr	r3, [r3, #28]
 8007ae0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	699b      	ldr	r3, [r3, #24]
 8007ae8:	4922      	ldr	r1, [pc, #136]	@ (8007b74 <HAL_RCC_ClockConfig+0x358>)
 8007aea:	4313      	orrs	r3, r2
 8007aec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f003 0320 	and.w	r3, r3, #32
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d010      	beq.n	8007b1c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	69da      	ldr	r2, [r3, #28]
 8007afe:	4b1d      	ldr	r3, [pc, #116]	@ (8007b74 <HAL_RCC_ClockConfig+0x358>)
 8007b00:	6a1b      	ldr	r3, [r3, #32]
 8007b02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d208      	bcs.n	8007b1c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007b0a:	4b1a      	ldr	r3, [pc, #104]	@ (8007b74 <HAL_RCC_ClockConfig+0x358>)
 8007b0c:	6a1b      	ldr	r3, [r3, #32]
 8007b0e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	69db      	ldr	r3, [r3, #28]
 8007b16:	4917      	ldr	r1, [pc, #92]	@ (8007b74 <HAL_RCC_ClockConfig+0x358>)
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8007b1c:	f000 f834 	bl	8007b88 <HAL_RCC_GetSysClockFreq>
 8007b20:	4602      	mov	r2, r0
 8007b22:	4b14      	ldr	r3, [pc, #80]	@ (8007b74 <HAL_RCC_ClockConfig+0x358>)
 8007b24:	699b      	ldr	r3, [r3, #24]
 8007b26:	0a1b      	lsrs	r3, r3, #8
 8007b28:	f003 030f 	and.w	r3, r3, #15
 8007b2c:	4912      	ldr	r1, [pc, #72]	@ (8007b78 <HAL_RCC_ClockConfig+0x35c>)
 8007b2e:	5ccb      	ldrb	r3, [r1, r3]
 8007b30:	f003 031f 	and.w	r3, r3, #31
 8007b34:	fa22 f303 	lsr.w	r3, r2, r3
 8007b38:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8007b74 <HAL_RCC_ClockConfig+0x358>)
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	f003 030f 	and.w	r3, r3, #15
 8007b42:	4a0d      	ldr	r2, [pc, #52]	@ (8007b78 <HAL_RCC_ClockConfig+0x35c>)
 8007b44:	5cd3      	ldrb	r3, [r2, r3]
 8007b46:	f003 031f 	and.w	r3, r3, #31
 8007b4a:	693a      	ldr	r2, [r7, #16]
 8007b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8007b50:	4a0a      	ldr	r2, [pc, #40]	@ (8007b7c <HAL_RCC_ClockConfig+0x360>)
 8007b52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007b54:	4a0a      	ldr	r2, [pc, #40]	@ (8007b80 <HAL_RCC_ClockConfig+0x364>)
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8007b84 <HAL_RCC_ClockConfig+0x368>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7fb faae 	bl	80030c0 <HAL_InitTick>
 8007b64:	4603      	mov	r3, r0
 8007b66:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3718      	adds	r7, #24
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop
 8007b74:	58024400 	.word	0x58024400
 8007b78:	08012400 	.word	0x08012400
 8007b7c:	24000048 	.word	0x24000048
 8007b80:	24000044 	.word	0x24000044
 8007b84:	2400004c 	.word	0x2400004c

08007b88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b089      	sub	sp, #36	@ 0x24
 8007b8c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007b8e:	4bb3      	ldr	r3, [pc, #716]	@ (8007e5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b90:	691b      	ldr	r3, [r3, #16]
 8007b92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b96:	2b18      	cmp	r3, #24
 8007b98:	f200 8155 	bhi.w	8007e46 <HAL_RCC_GetSysClockFreq+0x2be>
 8007b9c:	a201      	add	r2, pc, #4	@ (adr r2, 8007ba4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba2:	bf00      	nop
 8007ba4:	08007c09 	.word	0x08007c09
 8007ba8:	08007e47 	.word	0x08007e47
 8007bac:	08007e47 	.word	0x08007e47
 8007bb0:	08007e47 	.word	0x08007e47
 8007bb4:	08007e47 	.word	0x08007e47
 8007bb8:	08007e47 	.word	0x08007e47
 8007bbc:	08007e47 	.word	0x08007e47
 8007bc0:	08007e47 	.word	0x08007e47
 8007bc4:	08007c2f 	.word	0x08007c2f
 8007bc8:	08007e47 	.word	0x08007e47
 8007bcc:	08007e47 	.word	0x08007e47
 8007bd0:	08007e47 	.word	0x08007e47
 8007bd4:	08007e47 	.word	0x08007e47
 8007bd8:	08007e47 	.word	0x08007e47
 8007bdc:	08007e47 	.word	0x08007e47
 8007be0:	08007e47 	.word	0x08007e47
 8007be4:	08007c35 	.word	0x08007c35
 8007be8:	08007e47 	.word	0x08007e47
 8007bec:	08007e47 	.word	0x08007e47
 8007bf0:	08007e47 	.word	0x08007e47
 8007bf4:	08007e47 	.word	0x08007e47
 8007bf8:	08007e47 	.word	0x08007e47
 8007bfc:	08007e47 	.word	0x08007e47
 8007c00:	08007e47 	.word	0x08007e47
 8007c04:	08007c3b 	.word	0x08007c3b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c08:	4b94      	ldr	r3, [pc, #592]	@ (8007e5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 0320 	and.w	r3, r3, #32
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d009      	beq.n	8007c28 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c14:	4b91      	ldr	r3, [pc, #580]	@ (8007e5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	08db      	lsrs	r3, r3, #3
 8007c1a:	f003 0303 	and.w	r3, r3, #3
 8007c1e:	4a90      	ldr	r2, [pc, #576]	@ (8007e60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007c20:	fa22 f303 	lsr.w	r3, r2, r3
 8007c24:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007c26:	e111      	b.n	8007e4c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007c28:	4b8d      	ldr	r3, [pc, #564]	@ (8007e60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007c2a:	61bb      	str	r3, [r7, #24]
      break;
 8007c2c:	e10e      	b.n	8007e4c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007c2e:	4b8d      	ldr	r3, [pc, #564]	@ (8007e64 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007c30:	61bb      	str	r3, [r7, #24]
      break;
 8007c32:	e10b      	b.n	8007e4c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007c34:	4b8c      	ldr	r3, [pc, #560]	@ (8007e68 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007c36:	61bb      	str	r3, [r7, #24]
      break;
 8007c38:	e108      	b.n	8007e4c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c3a:	4b88      	ldr	r3, [pc, #544]	@ (8007e5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c3e:	f003 0303 	and.w	r3, r3, #3
 8007c42:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007c44:	4b85      	ldr	r3, [pc, #532]	@ (8007e5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c48:	091b      	lsrs	r3, r3, #4
 8007c4a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c4e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007c50:	4b82      	ldr	r3, [pc, #520]	@ (8007e5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c54:	f003 0301 	and.w	r3, r3, #1
 8007c58:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007c5a:	4b80      	ldr	r3, [pc, #512]	@ (8007e5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c5e:	08db      	lsrs	r3, r3, #3
 8007c60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c64:	68fa      	ldr	r2, [r7, #12]
 8007c66:	fb02 f303 	mul.w	r3, r2, r3
 8007c6a:	ee07 3a90 	vmov	s15, r3
 8007c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c72:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f000 80e1 	beq.w	8007e40 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	f000 8083 	beq.w	8007d8c <HAL_RCC_GetSysClockFreq+0x204>
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	f200 80a1 	bhi.w	8007dd0 <HAL_RCC_GetSysClockFreq+0x248>
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d003      	beq.n	8007c9c <HAL_RCC_GetSysClockFreq+0x114>
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d056      	beq.n	8007d48 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007c9a:	e099      	b.n	8007dd0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c9c:	4b6f      	ldr	r3, [pc, #444]	@ (8007e5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f003 0320 	and.w	r3, r3, #32
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d02d      	beq.n	8007d04 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ca8:	4b6c      	ldr	r3, [pc, #432]	@ (8007e5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	08db      	lsrs	r3, r3, #3
 8007cae:	f003 0303 	and.w	r3, r3, #3
 8007cb2:	4a6b      	ldr	r2, [pc, #428]	@ (8007e60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8007cb8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	ee07 3a90 	vmov	s15, r3
 8007cc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	ee07 3a90 	vmov	s15, r3
 8007cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cd2:	4b62      	ldr	r3, [pc, #392]	@ (8007e5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cda:	ee07 3a90 	vmov	s15, r3
 8007cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ce2:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ce6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007e6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cfe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007d02:	e087      	b.n	8007e14 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	ee07 3a90 	vmov	s15, r3
 8007d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d0e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007e70 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d16:	4b51      	ldr	r3, [pc, #324]	@ (8007e5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d1e:	ee07 3a90 	vmov	s15, r3
 8007d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d26:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d2a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007e6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007d46:	e065      	b.n	8007e14 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	ee07 3a90 	vmov	s15, r3
 8007d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d52:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007e74 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d5a:	4b40      	ldr	r3, [pc, #256]	@ (8007e5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d62:	ee07 3a90 	vmov	s15, r3
 8007d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d6e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007e6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007d8a:	e043      	b.n	8007e14 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	ee07 3a90 	vmov	s15, r3
 8007d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d96:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007e78 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d9e:	4b2f      	ldr	r3, [pc, #188]	@ (8007e5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007da6:	ee07 3a90 	vmov	s15, r3
 8007daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dae:	ed97 6a02 	vldr	s12, [r7, #8]
 8007db2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007e6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007dce:	e021      	b.n	8007e14 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	ee07 3a90 	vmov	s15, r3
 8007dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dda:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007e74 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007de2:	4b1e      	ldr	r3, [pc, #120]	@ (8007e5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dea:	ee07 3a90 	vmov	s15, r3
 8007dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007df2:	ed97 6a02 	vldr	s12, [r7, #8]
 8007df6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007e6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e0e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007e12:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007e14:	4b11      	ldr	r3, [pc, #68]	@ (8007e5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e18:	0a5b      	lsrs	r3, r3, #9
 8007e1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e1e:	3301      	adds	r3, #1
 8007e20:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	ee07 3a90 	vmov	s15, r3
 8007e28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007e2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e38:	ee17 3a90 	vmov	r3, s15
 8007e3c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007e3e:	e005      	b.n	8007e4c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007e40:	2300      	movs	r3, #0
 8007e42:	61bb      	str	r3, [r7, #24]
      break;
 8007e44:	e002      	b.n	8007e4c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007e46:	4b07      	ldr	r3, [pc, #28]	@ (8007e64 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007e48:	61bb      	str	r3, [r7, #24]
      break;
 8007e4a:	bf00      	nop
  }

  return sysclockfreq;
 8007e4c:	69bb      	ldr	r3, [r7, #24]
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3724      	adds	r7, #36	@ 0x24
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop
 8007e5c:	58024400 	.word	0x58024400
 8007e60:	03d09000 	.word	0x03d09000
 8007e64:	003d0900 	.word	0x003d0900
 8007e68:	016e3600 	.word	0x016e3600
 8007e6c:	46000000 	.word	0x46000000
 8007e70:	4c742400 	.word	0x4c742400
 8007e74:	4a742400 	.word	0x4a742400
 8007e78:	4bb71b00 	.word	0x4bb71b00

08007e7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8007e82:	f7ff fe81 	bl	8007b88 <HAL_RCC_GetSysClockFreq>
 8007e86:	4602      	mov	r2, r0
 8007e88:	4b10      	ldr	r3, [pc, #64]	@ (8007ecc <HAL_RCC_GetHCLKFreq+0x50>)
 8007e8a:	699b      	ldr	r3, [r3, #24]
 8007e8c:	0a1b      	lsrs	r3, r3, #8
 8007e8e:	f003 030f 	and.w	r3, r3, #15
 8007e92:	490f      	ldr	r1, [pc, #60]	@ (8007ed0 <HAL_RCC_GetHCLKFreq+0x54>)
 8007e94:	5ccb      	ldrb	r3, [r1, r3]
 8007e96:	f003 031f 	and.w	r3, r3, #31
 8007e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e9e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8007ecc <HAL_RCC_GetHCLKFreq+0x50>)
 8007ea2:	699b      	ldr	r3, [r3, #24]
 8007ea4:	f003 030f 	and.w	r3, r3, #15
 8007ea8:	4a09      	ldr	r2, [pc, #36]	@ (8007ed0 <HAL_RCC_GetHCLKFreq+0x54>)
 8007eaa:	5cd3      	ldrb	r3, [r2, r3]
 8007eac:	f003 031f 	and.w	r3, r3, #31
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8007eb6:	4a07      	ldr	r2, [pc, #28]	@ (8007ed4 <HAL_RCC_GetHCLKFreq+0x58>)
 8007eb8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007eba:	4a07      	ldr	r2, [pc, #28]	@ (8007ed8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007ec0:	4b04      	ldr	r3, [pc, #16]	@ (8007ed4 <HAL_RCC_GetHCLKFreq+0x58>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3708      	adds	r7, #8
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}
 8007ecc:	58024400 	.word	0x58024400
 8007ed0:	08012400 	.word	0x08012400
 8007ed4:	24000048 	.word	0x24000048
 8007ed8:	24000044 	.word	0x24000044

08007edc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8007ee0:	f7ff ffcc 	bl	8007e7c <HAL_RCC_GetHCLKFreq>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	4b06      	ldr	r3, [pc, #24]	@ (8007f00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ee8:	69db      	ldr	r3, [r3, #28]
 8007eea:	091b      	lsrs	r3, r3, #4
 8007eec:	f003 0307 	and.w	r3, r3, #7
 8007ef0:	4904      	ldr	r1, [pc, #16]	@ (8007f04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007ef2:	5ccb      	ldrb	r3, [r1, r3]
 8007ef4:	f003 031f 	and.w	r3, r3, #31
 8007ef8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	58024400 	.word	0x58024400
 8007f04:	08012400 	.word	0x08012400

08007f08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8007f0c:	f7ff ffb6 	bl	8007e7c <HAL_RCC_GetHCLKFreq>
 8007f10:	4602      	mov	r2, r0
 8007f12:	4b06      	ldr	r3, [pc, #24]	@ (8007f2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f14:	69db      	ldr	r3, [r3, #28]
 8007f16:	0a1b      	lsrs	r3, r3, #8
 8007f18:	f003 0307 	and.w	r3, r3, #7
 8007f1c:	4904      	ldr	r1, [pc, #16]	@ (8007f30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007f1e:	5ccb      	ldrb	r3, [r1, r3]
 8007f20:	f003 031f 	and.w	r3, r3, #31
 8007f24:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	58024400 	.word	0x58024400
 8007f30:	08012400 	.word	0x08012400

08007f34 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f38:	b0c8      	sub	sp, #288	@ 0x120
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007f40:	2300      	movs	r3, #0
 8007f42:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007f46:	2300      	movs	r3, #0
 8007f48:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007f4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f54:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007f58:	2500      	movs	r5, #0
 8007f5a:	ea54 0305 	orrs.w	r3, r4, r5
 8007f5e:	d049      	beq.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f66:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007f6a:	d02f      	beq.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007f6c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007f70:	d828      	bhi.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007f72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f76:	d01a      	beq.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007f78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f7c:	d822      	bhi.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d003      	beq.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007f82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f86:	d007      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007f88:	e01c      	b.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f8a:	4ba7      	ldr	r3, [pc, #668]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f8e:	4aa6      	ldr	r2, [pc, #664]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007f96:	e01a      	b.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007f98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f9c:	3308      	adds	r3, #8
 8007f9e:	2102      	movs	r1, #2
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f001 fc43 	bl	800982c <RCCEx_PLL2_Config>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007fac:	e00f      	b.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007fae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fb2:	3328      	adds	r3, #40	@ 0x28
 8007fb4:	2102      	movs	r1, #2
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f001 fcea 	bl	8009990 <RCCEx_PLL3_Config>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007fc2:	e004      	b.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007fca:	e000      	b.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007fcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d10a      	bne.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007fd6:	4b94      	ldr	r3, [pc, #592]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fda:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007fde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fe2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fe4:	4a90      	ldr	r2, [pc, #576]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fe6:	430b      	orrs	r3, r1
 8007fe8:	6513      	str	r3, [r2, #80]	@ 0x50
 8007fea:	e003      	b.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ff0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007ff4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008000:	f04f 0900 	mov.w	r9, #0
 8008004:	ea58 0309 	orrs.w	r3, r8, r9
 8008008:	d047      	beq.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800800a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800800e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008010:	2b04      	cmp	r3, #4
 8008012:	d82a      	bhi.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008014:	a201      	add	r2, pc, #4	@ (adr r2, 800801c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800801a:	bf00      	nop
 800801c:	08008031 	.word	0x08008031
 8008020:	0800803f 	.word	0x0800803f
 8008024:	08008055 	.word	0x08008055
 8008028:	08008073 	.word	0x08008073
 800802c:	08008073 	.word	0x08008073
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008030:	4b7d      	ldr	r3, [pc, #500]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008034:	4a7c      	ldr	r2, [pc, #496]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008036:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800803a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800803c:	e01a      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800803e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008042:	3308      	adds	r3, #8
 8008044:	2100      	movs	r1, #0
 8008046:	4618      	mov	r0, r3
 8008048:	f001 fbf0 	bl	800982c <RCCEx_PLL2_Config>
 800804c:	4603      	mov	r3, r0
 800804e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008052:	e00f      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008054:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008058:	3328      	adds	r3, #40	@ 0x28
 800805a:	2100      	movs	r1, #0
 800805c:	4618      	mov	r0, r3
 800805e:	f001 fc97 	bl	8009990 <RCCEx_PLL3_Config>
 8008062:	4603      	mov	r3, r0
 8008064:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008068:	e004      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008070:	e000      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008072:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008074:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008078:	2b00      	cmp	r3, #0
 800807a:	d10a      	bne.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800807c:	4b6a      	ldr	r3, [pc, #424]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800807e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008080:	f023 0107 	bic.w	r1, r3, #7
 8008084:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800808a:	4a67      	ldr	r2, [pc, #412]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800808c:	430b      	orrs	r3, r1
 800808e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008090:	e003      	b.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008092:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008096:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800809a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800809e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80080a6:	f04f 0b00 	mov.w	fp, #0
 80080aa:	ea5a 030b 	orrs.w	r3, sl, fp
 80080ae:	d054      	beq.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80080b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080b6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80080ba:	d036      	beq.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80080bc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80080c0:	d82f      	bhi.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80080c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080c6:	d032      	beq.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80080c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080cc:	d829      	bhi.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80080ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80080d0:	d02f      	beq.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80080d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80080d4:	d825      	bhi.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80080d6:	2b80      	cmp	r3, #128	@ 0x80
 80080d8:	d018      	beq.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80080da:	2b80      	cmp	r3, #128	@ 0x80
 80080dc:	d821      	bhi.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d002      	beq.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80080e2:	2b40      	cmp	r3, #64	@ 0x40
 80080e4:	d007      	beq.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80080e6:	e01c      	b.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080e8:	4b4f      	ldr	r3, [pc, #316]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ec:	4a4e      	ldr	r2, [pc, #312]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80080f4:	e01e      	b.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080fa:	3308      	adds	r3, #8
 80080fc:	2100      	movs	r1, #0
 80080fe:	4618      	mov	r0, r3
 8008100:	f001 fb94 	bl	800982c <RCCEx_PLL2_Config>
 8008104:	4603      	mov	r3, r0
 8008106:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800810a:	e013      	b.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800810c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008110:	3328      	adds	r3, #40	@ 0x28
 8008112:	2100      	movs	r1, #0
 8008114:	4618      	mov	r0, r3
 8008116:	f001 fc3b 	bl	8009990 <RCCEx_PLL3_Config>
 800811a:	4603      	mov	r3, r0
 800811c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8008120:	e008      	b.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008128:	e004      	b.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800812a:	bf00      	nop
 800812c:	e002      	b.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800812e:	bf00      	nop
 8008130:	e000      	b.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8008132:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008134:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008138:	2b00      	cmp	r3, #0
 800813a:	d10a      	bne.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800813c:	4b3a      	ldr	r3, [pc, #232]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800813e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008140:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008144:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800814a:	4a37      	ldr	r2, [pc, #220]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800814c:	430b      	orrs	r3, r1
 800814e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008150:	e003      	b.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008152:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008156:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800815a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800815e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008162:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8008166:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800816a:	2300      	movs	r3, #0
 800816c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008170:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008174:	460b      	mov	r3, r1
 8008176:	4313      	orrs	r3, r2
 8008178:	d05c      	beq.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800817a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800817e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008180:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008184:	d03b      	beq.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008186:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800818a:	d834      	bhi.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800818c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008190:	d037      	beq.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8008192:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008196:	d82e      	bhi.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008198:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800819c:	d033      	beq.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800819e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80081a2:	d828      	bhi.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80081a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081a8:	d01a      	beq.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80081aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081ae:	d822      	bhi.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d003      	beq.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x288>
 80081b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081b8:	d007      	beq.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x296>
 80081ba:	e01c      	b.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081bc:	4b1a      	ldr	r3, [pc, #104]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80081be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081c0:	4a19      	ldr	r2, [pc, #100]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80081c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80081c8:	e01e      	b.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80081ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081ce:	3308      	adds	r3, #8
 80081d0:	2100      	movs	r1, #0
 80081d2:	4618      	mov	r0, r3
 80081d4:	f001 fb2a 	bl	800982c <RCCEx_PLL2_Config>
 80081d8:	4603      	mov	r3, r0
 80081da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80081de:	e013      	b.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80081e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081e4:	3328      	adds	r3, #40	@ 0x28
 80081e6:	2100      	movs	r1, #0
 80081e8:	4618      	mov	r0, r3
 80081ea:	f001 fbd1 	bl	8009990 <RCCEx_PLL3_Config>
 80081ee:	4603      	mov	r3, r0
 80081f0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80081f4:	e008      	b.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80081fc:	e004      	b.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80081fe:	bf00      	nop
 8008200:	e002      	b.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8008202:	bf00      	nop
 8008204:	e000      	b.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8008206:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008208:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800820c:	2b00      	cmp	r3, #0
 800820e:	d10d      	bne.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8008210:	4b05      	ldr	r3, [pc, #20]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008212:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008214:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8008218:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800821c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800821e:	4a02      	ldr	r2, [pc, #8]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008220:	430b      	orrs	r3, r1
 8008222:	6513      	str	r3, [r2, #80]	@ 0x50
 8008224:	e006      	b.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8008226:	bf00      	nop
 8008228:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800822c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008230:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008234:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008240:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008244:	2300      	movs	r3, #0
 8008246:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800824a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800824e:	460b      	mov	r3, r1
 8008250:	4313      	orrs	r3, r2
 8008252:	d03a      	beq.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8008254:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800825a:	2b30      	cmp	r3, #48	@ 0x30
 800825c:	d01f      	beq.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800825e:	2b30      	cmp	r3, #48	@ 0x30
 8008260:	d819      	bhi.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8008262:	2b20      	cmp	r3, #32
 8008264:	d00c      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8008266:	2b20      	cmp	r3, #32
 8008268:	d815      	bhi.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800826a:	2b00      	cmp	r3, #0
 800826c:	d019      	beq.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800826e:	2b10      	cmp	r3, #16
 8008270:	d111      	bne.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008272:	4bae      	ldr	r3, [pc, #696]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008276:	4aad      	ldr	r2, [pc, #692]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008278:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800827c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800827e:	e011      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008280:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008284:	3308      	adds	r3, #8
 8008286:	2102      	movs	r1, #2
 8008288:	4618      	mov	r0, r3
 800828a:	f001 facf 	bl	800982c <RCCEx_PLL2_Config>
 800828e:	4603      	mov	r3, r0
 8008290:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008294:	e006      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800829c:	e002      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800829e:	bf00      	nop
 80082a0:	e000      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80082a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d10a      	bne.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80082ac:	4b9f      	ldr	r3, [pc, #636]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80082ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082b0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80082b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082ba:	4a9c      	ldr	r2, [pc, #624]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80082bc:	430b      	orrs	r3, r1
 80082be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80082c0:	e003      	b.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80082c6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80082ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80082d6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80082da:	2300      	movs	r3, #0
 80082dc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80082e0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80082e4:	460b      	mov	r3, r1
 80082e6:	4313      	orrs	r3, r2
 80082e8:	d051      	beq.n	800838e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80082ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082f4:	d035      	beq.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80082f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082fa:	d82e      	bhi.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80082fc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008300:	d031      	beq.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8008302:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008306:	d828      	bhi.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008308:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800830c:	d01a      	beq.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800830e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008312:	d822      	bhi.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008314:	2b00      	cmp	r3, #0
 8008316:	d003      	beq.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8008318:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800831c:	d007      	beq.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800831e:	e01c      	b.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008320:	4b82      	ldr	r3, [pc, #520]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008324:	4a81      	ldr	r2, [pc, #516]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008326:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800832a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800832c:	e01c      	b.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800832e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008332:	3308      	adds	r3, #8
 8008334:	2100      	movs	r1, #0
 8008336:	4618      	mov	r0, r3
 8008338:	f001 fa78 	bl	800982c <RCCEx_PLL2_Config>
 800833c:	4603      	mov	r3, r0
 800833e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008342:	e011      	b.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008344:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008348:	3328      	adds	r3, #40	@ 0x28
 800834a:	2100      	movs	r1, #0
 800834c:	4618      	mov	r0, r3
 800834e:	f001 fb1f 	bl	8009990 <RCCEx_PLL3_Config>
 8008352:	4603      	mov	r3, r0
 8008354:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008358:	e006      	b.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008360:	e002      	b.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8008362:	bf00      	nop
 8008364:	e000      	b.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8008366:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008368:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800836c:	2b00      	cmp	r3, #0
 800836e:	d10a      	bne.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008370:	4b6e      	ldr	r3, [pc, #440]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008372:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008374:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008378:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800837c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800837e:	4a6b      	ldr	r2, [pc, #428]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008380:	430b      	orrs	r3, r1
 8008382:	6513      	str	r3, [r2, #80]	@ 0x50
 8008384:	e003      	b.n	800838e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008386:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800838a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800838e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008396:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800839a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800839e:	2300      	movs	r3, #0
 80083a0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80083a4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80083a8:	460b      	mov	r3, r1
 80083aa:	4313      	orrs	r3, r2
 80083ac:	d053      	beq.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80083ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80083b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80083b8:	d033      	beq.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80083ba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80083be:	d82c      	bhi.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80083c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80083c4:	d02f      	beq.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80083c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80083ca:	d826      	bhi.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80083cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80083d0:	d02b      	beq.n	800842a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80083d2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80083d6:	d820      	bhi.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80083d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083dc:	d012      	beq.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80083de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083e2:	d81a      	bhi.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d022      	beq.n	800842e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80083e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083ec:	d115      	bne.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80083ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083f2:	3308      	adds	r3, #8
 80083f4:	2101      	movs	r1, #1
 80083f6:	4618      	mov	r0, r3
 80083f8:	f001 fa18 	bl	800982c <RCCEx_PLL2_Config>
 80083fc:	4603      	mov	r3, r0
 80083fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008402:	e015      	b.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008404:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008408:	3328      	adds	r3, #40	@ 0x28
 800840a:	2101      	movs	r1, #1
 800840c:	4618      	mov	r0, r3
 800840e:	f001 fabf 	bl	8009990 <RCCEx_PLL3_Config>
 8008412:	4603      	mov	r3, r0
 8008414:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008418:	e00a      	b.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008420:	e006      	b.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008422:	bf00      	nop
 8008424:	e004      	b.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008426:	bf00      	nop
 8008428:	e002      	b.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800842a:	bf00      	nop
 800842c:	e000      	b.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800842e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008430:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008434:	2b00      	cmp	r3, #0
 8008436:	d10a      	bne.n	800844e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008438:	4b3c      	ldr	r3, [pc, #240]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800843a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800843c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008440:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008444:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008446:	4a39      	ldr	r2, [pc, #228]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008448:	430b      	orrs	r3, r1
 800844a:	6513      	str	r3, [r2, #80]	@ 0x50
 800844c:	e003      	b.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800844e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008452:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008456:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800845a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008462:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008466:	2300      	movs	r3, #0
 8008468:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800846c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008470:	460b      	mov	r3, r1
 8008472:	4313      	orrs	r3, r2
 8008474:	d060      	beq.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008476:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800847a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800847e:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8008482:	d039      	beq.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8008484:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8008488:	d832      	bhi.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800848a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800848e:	d035      	beq.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8008490:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008494:	d82c      	bhi.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008496:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800849a:	d031      	beq.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800849c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084a0:	d826      	bhi.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80084a2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80084a6:	d02d      	beq.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80084a8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80084ac:	d820      	bhi.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80084ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084b2:	d012      	beq.n	80084da <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80084b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084b8:	d81a      	bhi.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d024      	beq.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80084be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80084c2:	d115      	bne.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80084c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084c8:	3308      	adds	r3, #8
 80084ca:	2101      	movs	r1, #1
 80084cc:	4618      	mov	r0, r3
 80084ce:	f001 f9ad 	bl	800982c <RCCEx_PLL2_Config>
 80084d2:	4603      	mov	r3, r0
 80084d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80084d8:	e017      	b.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80084da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084de:	3328      	adds	r3, #40	@ 0x28
 80084e0:	2101      	movs	r1, #1
 80084e2:	4618      	mov	r0, r3
 80084e4:	f001 fa54 	bl	8009990 <RCCEx_PLL3_Config>
 80084e8:	4603      	mov	r3, r0
 80084ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80084ee:	e00c      	b.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80084f6:	e008      	b.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80084f8:	bf00      	nop
 80084fa:	e006      	b.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80084fc:	bf00      	nop
 80084fe:	e004      	b.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008500:	bf00      	nop
 8008502:	e002      	b.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008504:	bf00      	nop
 8008506:	e000      	b.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008508:	bf00      	nop
    }

    if (ret == HAL_OK)
 800850a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800850e:	2b00      	cmp	r3, #0
 8008510:	d10e      	bne.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008512:	4b06      	ldr	r3, [pc, #24]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008516:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800851a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800851e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008522:	4a02      	ldr	r2, [pc, #8]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008524:	430b      	orrs	r3, r1
 8008526:	6593      	str	r3, [r2, #88]	@ 0x58
 8008528:	e006      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800852a:	bf00      	nop
 800852c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008530:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008534:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008538:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800853c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008540:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008544:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008548:	2300      	movs	r3, #0
 800854a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800854e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008552:	460b      	mov	r3, r1
 8008554:	4313      	orrs	r3, r2
 8008556:	d037      	beq.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008558:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800855c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800855e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008562:	d00e      	beq.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8008564:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008568:	d816      	bhi.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800856a:	2b00      	cmp	r3, #0
 800856c:	d018      	beq.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800856e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008572:	d111      	bne.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008574:	4bc4      	ldr	r3, [pc, #784]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008578:	4ac3      	ldr	r2, [pc, #780]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800857a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800857e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008580:	e00f      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008582:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008586:	3308      	adds	r3, #8
 8008588:	2101      	movs	r1, #1
 800858a:	4618      	mov	r0, r3
 800858c:	f001 f94e 	bl	800982c <RCCEx_PLL2_Config>
 8008590:	4603      	mov	r3, r0
 8008592:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008596:	e004      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800859e:	e000      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80085a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085a2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d10a      	bne.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80085aa:	4bb7      	ldr	r3, [pc, #732]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085ae:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80085b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80085b8:	4ab3      	ldr	r2, [pc, #716]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085ba:	430b      	orrs	r3, r1
 80085bc:	6513      	str	r3, [r2, #80]	@ 0x50
 80085be:	e003      	b.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80085c4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80085c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80085d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80085d8:	2300      	movs	r3, #0
 80085da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80085de:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80085e2:	460b      	mov	r3, r1
 80085e4:	4313      	orrs	r3, r2
 80085e6:	d039      	beq.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80085e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085ee:	2b03      	cmp	r3, #3
 80085f0:	d81c      	bhi.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80085f2:	a201      	add	r2, pc, #4	@ (adr r2, 80085f8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80085f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f8:	08008635 	.word	0x08008635
 80085fc:	08008609 	.word	0x08008609
 8008600:	08008617 	.word	0x08008617
 8008604:	08008635 	.word	0x08008635
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008608:	4b9f      	ldr	r3, [pc, #636]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800860a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800860c:	4a9e      	ldr	r2, [pc, #632]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800860e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008612:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008614:	e00f      	b.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008616:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800861a:	3308      	adds	r3, #8
 800861c:	2102      	movs	r1, #2
 800861e:	4618      	mov	r0, r3
 8008620:	f001 f904 	bl	800982c <RCCEx_PLL2_Config>
 8008624:	4603      	mov	r3, r0
 8008626:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800862a:	e004      	b.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800862c:	2301      	movs	r3, #1
 800862e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008632:	e000      	b.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8008634:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008636:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800863a:	2b00      	cmp	r3, #0
 800863c:	d10a      	bne.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800863e:	4b92      	ldr	r3, [pc, #584]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008642:	f023 0103 	bic.w	r1, r3, #3
 8008646:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800864a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800864c:	4a8e      	ldr	r2, [pc, #568]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800864e:	430b      	orrs	r3, r1
 8008650:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008652:	e003      	b.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008654:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008658:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800865c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008664:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008668:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800866c:	2300      	movs	r3, #0
 800866e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008672:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008676:	460b      	mov	r3, r1
 8008678:	4313      	orrs	r3, r2
 800867a:	f000 8099 	beq.w	80087b0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800867e:	4b83      	ldr	r3, [pc, #524]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a82      	ldr	r2, [pc, #520]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008684:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008688:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800868a:	f7fa fd63 	bl	8003154 <HAL_GetTick>
 800868e:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008692:	e00b      	b.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008694:	f7fa fd5e 	bl	8003154 <HAL_GetTick>
 8008698:	4602      	mov	r2, r0
 800869a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800869e:	1ad3      	subs	r3, r2, r3
 80086a0:	2b64      	cmp	r3, #100	@ 0x64
 80086a2:	d903      	bls.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80086a4:	2303      	movs	r3, #3
 80086a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80086aa:	e005      	b.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80086ac:	4b77      	ldr	r3, [pc, #476]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d0ed      	beq.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80086b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d173      	bne.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80086c0:	4b71      	ldr	r3, [pc, #452]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086c2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80086c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80086cc:	4053      	eors	r3, r2
 80086ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d015      	beq.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80086d6:	4b6c      	ldr	r3, [pc, #432]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086de:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80086e2:	4b69      	ldr	r3, [pc, #420]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086e6:	4a68      	ldr	r2, [pc, #416]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80086ec:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80086ee:	4b66      	ldr	r3, [pc, #408]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086f2:	4a65      	ldr	r2, [pc, #404]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086f8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80086fa:	4a63      	ldr	r2, [pc, #396]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008700:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008702:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008706:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800870a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800870e:	d118      	bne.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008710:	f7fa fd20 	bl	8003154 <HAL_GetTick>
 8008714:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008718:	e00d      	b.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800871a:	f7fa fd1b 	bl	8003154 <HAL_GetTick>
 800871e:	4602      	mov	r2, r0
 8008720:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8008724:	1ad2      	subs	r2, r2, r3
 8008726:	f241 3388 	movw	r3, #5000	@ 0x1388
 800872a:	429a      	cmp	r2, r3
 800872c:	d903      	bls.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800872e:	2303      	movs	r3, #3
 8008730:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8008734:	e005      	b.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008736:	4b54      	ldr	r3, [pc, #336]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800873a:	f003 0302 	and.w	r3, r3, #2
 800873e:	2b00      	cmp	r3, #0
 8008740:	d0eb      	beq.n	800871a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8008742:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008746:	2b00      	cmp	r3, #0
 8008748:	d129      	bne.n	800879e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800874a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800874e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008752:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008756:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800875a:	d10e      	bne.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800875c:	4b4a      	ldr	r3, [pc, #296]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800875e:	691b      	ldr	r3, [r3, #16]
 8008760:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008764:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008768:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800876c:	091a      	lsrs	r2, r3, #4
 800876e:	4b48      	ldr	r3, [pc, #288]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8008770:	4013      	ands	r3, r2
 8008772:	4a45      	ldr	r2, [pc, #276]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008774:	430b      	orrs	r3, r1
 8008776:	6113      	str	r3, [r2, #16]
 8008778:	e005      	b.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800877a:	4b43      	ldr	r3, [pc, #268]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800877c:	691b      	ldr	r3, [r3, #16]
 800877e:	4a42      	ldr	r2, [pc, #264]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008780:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008784:	6113      	str	r3, [r2, #16]
 8008786:	4b40      	ldr	r3, [pc, #256]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008788:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800878a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800878e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008792:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008796:	4a3c      	ldr	r2, [pc, #240]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008798:	430b      	orrs	r3, r1
 800879a:	6713      	str	r3, [r2, #112]	@ 0x70
 800879c:	e008      	b.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800879e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80087a2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80087a6:	e003      	b.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80087ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80087b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b8:	f002 0301 	and.w	r3, r2, #1
 80087bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80087c0:	2300      	movs	r3, #0
 80087c2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80087c6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80087ca:	460b      	mov	r3, r1
 80087cc:	4313      	orrs	r3, r2
 80087ce:	f000 8090 	beq.w	80088f2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80087d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087da:	2b28      	cmp	r3, #40	@ 0x28
 80087dc:	d870      	bhi.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80087de:	a201      	add	r2, pc, #4	@ (adr r2, 80087e4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80087e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e4:	080088c9 	.word	0x080088c9
 80087e8:	080088c1 	.word	0x080088c1
 80087ec:	080088c1 	.word	0x080088c1
 80087f0:	080088c1 	.word	0x080088c1
 80087f4:	080088c1 	.word	0x080088c1
 80087f8:	080088c1 	.word	0x080088c1
 80087fc:	080088c1 	.word	0x080088c1
 8008800:	080088c1 	.word	0x080088c1
 8008804:	08008895 	.word	0x08008895
 8008808:	080088c1 	.word	0x080088c1
 800880c:	080088c1 	.word	0x080088c1
 8008810:	080088c1 	.word	0x080088c1
 8008814:	080088c1 	.word	0x080088c1
 8008818:	080088c1 	.word	0x080088c1
 800881c:	080088c1 	.word	0x080088c1
 8008820:	080088c1 	.word	0x080088c1
 8008824:	080088ab 	.word	0x080088ab
 8008828:	080088c1 	.word	0x080088c1
 800882c:	080088c1 	.word	0x080088c1
 8008830:	080088c1 	.word	0x080088c1
 8008834:	080088c1 	.word	0x080088c1
 8008838:	080088c1 	.word	0x080088c1
 800883c:	080088c1 	.word	0x080088c1
 8008840:	080088c1 	.word	0x080088c1
 8008844:	080088c9 	.word	0x080088c9
 8008848:	080088c1 	.word	0x080088c1
 800884c:	080088c1 	.word	0x080088c1
 8008850:	080088c1 	.word	0x080088c1
 8008854:	080088c1 	.word	0x080088c1
 8008858:	080088c1 	.word	0x080088c1
 800885c:	080088c1 	.word	0x080088c1
 8008860:	080088c1 	.word	0x080088c1
 8008864:	080088c9 	.word	0x080088c9
 8008868:	080088c1 	.word	0x080088c1
 800886c:	080088c1 	.word	0x080088c1
 8008870:	080088c1 	.word	0x080088c1
 8008874:	080088c1 	.word	0x080088c1
 8008878:	080088c1 	.word	0x080088c1
 800887c:	080088c1 	.word	0x080088c1
 8008880:	080088c1 	.word	0x080088c1
 8008884:	080088c9 	.word	0x080088c9
 8008888:	58024400 	.word	0x58024400
 800888c:	58024800 	.word	0x58024800
 8008890:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008894:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008898:	3308      	adds	r3, #8
 800889a:	2101      	movs	r1, #1
 800889c:	4618      	mov	r0, r3
 800889e:	f000 ffc5 	bl	800982c <RCCEx_PLL2_Config>
 80088a2:	4603      	mov	r3, r0
 80088a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80088a8:	e00f      	b.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80088aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088ae:	3328      	adds	r3, #40	@ 0x28
 80088b0:	2101      	movs	r1, #1
 80088b2:	4618      	mov	r0, r3
 80088b4:	f001 f86c 	bl	8009990 <RCCEx_PLL3_Config>
 80088b8:	4603      	mov	r3, r0
 80088ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80088be:	e004      	b.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088c0:	2301      	movs	r3, #1
 80088c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80088c6:	e000      	b.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80088c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088ca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d10b      	bne.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80088d2:	4bc0      	ldr	r3, [pc, #768]	@ (8008bd4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80088d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088d6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80088da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088e2:	4abc      	ldr	r2, [pc, #752]	@ (8008bd4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80088e4:	430b      	orrs	r3, r1
 80088e6:	6553      	str	r3, [r2, #84]	@ 0x54
 80088e8:	e003      	b.n	80088f2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80088ee:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80088f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088fa:	f002 0302 	and.w	r3, r2, #2
 80088fe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008902:	2300      	movs	r3, #0
 8008904:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008908:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800890c:	460b      	mov	r3, r1
 800890e:	4313      	orrs	r3, r2
 8008910:	d043      	beq.n	800899a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008912:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008916:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800891a:	2b05      	cmp	r3, #5
 800891c:	d824      	bhi.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800891e:	a201      	add	r2, pc, #4	@ (adr r2, 8008924 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8008920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008924:	08008971 	.word	0x08008971
 8008928:	0800893d 	.word	0x0800893d
 800892c:	08008953 	.word	0x08008953
 8008930:	08008971 	.word	0x08008971
 8008934:	08008971 	.word	0x08008971
 8008938:	08008971 	.word	0x08008971
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800893c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008940:	3308      	adds	r3, #8
 8008942:	2101      	movs	r1, #1
 8008944:	4618      	mov	r0, r3
 8008946:	f000 ff71 	bl	800982c <RCCEx_PLL2_Config>
 800894a:	4603      	mov	r3, r0
 800894c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008950:	e00f      	b.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008952:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008956:	3328      	adds	r3, #40	@ 0x28
 8008958:	2101      	movs	r1, #1
 800895a:	4618      	mov	r0, r3
 800895c:	f001 f818 	bl	8009990 <RCCEx_PLL3_Config>
 8008960:	4603      	mov	r3, r0
 8008962:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008966:	e004      	b.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008968:	2301      	movs	r3, #1
 800896a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800896e:	e000      	b.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8008970:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008972:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008976:	2b00      	cmp	r3, #0
 8008978:	d10b      	bne.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800897a:	4b96      	ldr	r3, [pc, #600]	@ (8008bd4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800897c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800897e:	f023 0107 	bic.w	r1, r3, #7
 8008982:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008986:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800898a:	4a92      	ldr	r2, [pc, #584]	@ (8008bd4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800898c:	430b      	orrs	r3, r1
 800898e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008990:	e003      	b.n	800899a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008992:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008996:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800899a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800899e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a2:	f002 0304 	and.w	r3, r2, #4
 80089a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80089aa:	2300      	movs	r3, #0
 80089ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80089b0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80089b4:	460b      	mov	r3, r1
 80089b6:	4313      	orrs	r3, r2
 80089b8:	d043      	beq.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80089ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80089c2:	2b05      	cmp	r3, #5
 80089c4:	d824      	bhi.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80089c6:	a201      	add	r2, pc, #4	@ (adr r2, 80089cc <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80089c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089cc:	08008a19 	.word	0x08008a19
 80089d0:	080089e5 	.word	0x080089e5
 80089d4:	080089fb 	.word	0x080089fb
 80089d8:	08008a19 	.word	0x08008a19
 80089dc:	08008a19 	.word	0x08008a19
 80089e0:	08008a19 	.word	0x08008a19
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80089e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089e8:	3308      	adds	r3, #8
 80089ea:	2101      	movs	r1, #1
 80089ec:	4618      	mov	r0, r3
 80089ee:	f000 ff1d 	bl	800982c <RCCEx_PLL2_Config>
 80089f2:	4603      	mov	r3, r0
 80089f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80089f8:	e00f      	b.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80089fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089fe:	3328      	adds	r3, #40	@ 0x28
 8008a00:	2101      	movs	r1, #1
 8008a02:	4618      	mov	r0, r3
 8008a04:	f000 ffc4 	bl	8009990 <RCCEx_PLL3_Config>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008a0e:	e004      	b.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a10:	2301      	movs	r3, #1
 8008a12:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008a16:	e000      	b.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8008a18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a1a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d10b      	bne.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008a22:	4b6c      	ldr	r3, [pc, #432]	@ (8008bd4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a26:	f023 0107 	bic.w	r1, r3, #7
 8008a2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008a32:	4a68      	ldr	r2, [pc, #416]	@ (8008bd4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008a34:	430b      	orrs	r3, r1
 8008a36:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a38:	e003      	b.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a3a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a3e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008a42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a4a:	f002 0320 	and.w	r3, r2, #32
 8008a4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008a52:	2300      	movs	r3, #0
 8008a54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008a58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008a5c:	460b      	mov	r3, r1
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	d055      	beq.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008a62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008a6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008a6e:	d033      	beq.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8008a70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008a74:	d82c      	bhi.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008a76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a7a:	d02f      	beq.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8008a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a80:	d826      	bhi.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008a82:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008a86:	d02b      	beq.n	8008ae0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8008a88:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008a8c:	d820      	bhi.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008a8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a92:	d012      	beq.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8008a94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a98:	d81a      	bhi.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d022      	beq.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8008a9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008aa2:	d115      	bne.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008aa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008aa8:	3308      	adds	r3, #8
 8008aaa:	2100      	movs	r1, #0
 8008aac:	4618      	mov	r0, r3
 8008aae:	f000 febd 	bl	800982c <RCCEx_PLL2_Config>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008ab8:	e015      	b.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008aba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008abe:	3328      	adds	r3, #40	@ 0x28
 8008ac0:	2102      	movs	r1, #2
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f000 ff64 	bl	8009990 <RCCEx_PLL3_Config>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008ace:	e00a      	b.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008ad6:	e006      	b.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008ad8:	bf00      	nop
 8008ada:	e004      	b.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008adc:	bf00      	nop
 8008ade:	e002      	b.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008ae0:	bf00      	nop
 8008ae2:	e000      	b.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008ae4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ae6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d10b      	bne.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008aee:	4b39      	ldr	r3, [pc, #228]	@ (8008bd4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008af2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008af6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008afa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008afe:	4a35      	ldr	r2, [pc, #212]	@ (8008bd4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008b00:	430b      	orrs	r3, r1
 8008b02:	6553      	str	r3, [r2, #84]	@ 0x54
 8008b04:	e003      	b.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b06:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b0a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008b0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b16:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008b1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008b1e:	2300      	movs	r3, #0
 8008b20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008b24:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008b28:	460b      	mov	r3, r1
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	d058      	beq.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008b2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008b36:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008b3a:	d033      	beq.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008b3c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008b40:	d82c      	bhi.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008b42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b46:	d02f      	beq.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008b48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b4c:	d826      	bhi.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008b4e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008b52:	d02b      	beq.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8008b54:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008b58:	d820      	bhi.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008b5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b5e:	d012      	beq.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8008b60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b64:	d81a      	bhi.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d022      	beq.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8008b6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b6e:	d115      	bne.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b74:	3308      	adds	r3, #8
 8008b76:	2100      	movs	r1, #0
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f000 fe57 	bl	800982c <RCCEx_PLL2_Config>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008b84:	e015      	b.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b8a:	3328      	adds	r3, #40	@ 0x28
 8008b8c:	2102      	movs	r1, #2
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f000 fefe 	bl	8009990 <RCCEx_PLL3_Config>
 8008b94:	4603      	mov	r3, r0
 8008b96:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008b9a:	e00a      	b.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008ba2:	e006      	b.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008ba4:	bf00      	nop
 8008ba6:	e004      	b.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008ba8:	bf00      	nop
 8008baa:	e002      	b.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008bac:	bf00      	nop
 8008bae:	e000      	b.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008bb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bb2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d10e      	bne.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008bba:	4b06      	ldr	r3, [pc, #24]	@ (8008bd4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bbe:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008bc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bc6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008bca:	4a02      	ldr	r2, [pc, #8]	@ (8008bd4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008bcc:	430b      	orrs	r3, r1
 8008bce:	6593      	str	r3, [r2, #88]	@ 0x58
 8008bd0:	e006      	b.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8008bd2:	bf00      	nop
 8008bd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bd8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008bdc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008be0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008bec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008bf6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	d055      	beq.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008c00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c04:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008c08:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008c0c:	d033      	beq.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8008c0e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008c12:	d82c      	bhi.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008c14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c18:	d02f      	beq.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8008c1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c1e:	d826      	bhi.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008c20:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008c24:	d02b      	beq.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008c26:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008c2a:	d820      	bhi.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008c2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c30:	d012      	beq.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8008c32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c36:	d81a      	bhi.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d022      	beq.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8008c3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c40:	d115      	bne.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c46:	3308      	adds	r3, #8
 8008c48:	2100      	movs	r1, #0
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f000 fdee 	bl	800982c <RCCEx_PLL2_Config>
 8008c50:	4603      	mov	r3, r0
 8008c52:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008c56:	e015      	b.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008c58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c5c:	3328      	adds	r3, #40	@ 0x28
 8008c5e:	2102      	movs	r1, #2
 8008c60:	4618      	mov	r0, r3
 8008c62:	f000 fe95 	bl	8009990 <RCCEx_PLL3_Config>
 8008c66:	4603      	mov	r3, r0
 8008c68:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008c6c:	e00a      	b.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008c74:	e006      	b.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008c76:	bf00      	nop
 8008c78:	e004      	b.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008c7a:	bf00      	nop
 8008c7c:	e002      	b.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008c7e:	bf00      	nop
 8008c80:	e000      	b.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008c82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c84:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d10b      	bne.n	8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008c8c:	4ba1      	ldr	r3, [pc, #644]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c90:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008c94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c98:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008c9c:	4a9d      	ldr	r2, [pc, #628]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c9e:	430b      	orrs	r3, r1
 8008ca0:	6593      	str	r3, [r2, #88]	@ 0x58
 8008ca2:	e003      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ca4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ca8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008cac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb4:	f002 0308 	and.w	r3, r2, #8
 8008cb8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008cc2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	d01e      	beq.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008ccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008cd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cd8:	d10c      	bne.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008cda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cde:	3328      	adds	r3, #40	@ 0x28
 8008ce0:	2102      	movs	r1, #2
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f000 fe54 	bl	8009990 <RCCEx_PLL3_Config>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d002      	beq.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008cf4:	4b87      	ldr	r3, [pc, #540]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008cf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cf8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008cfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d04:	4a83      	ldr	r2, [pc, #524]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008d06:	430b      	orrs	r3, r1
 8008d08:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008d0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d12:	f002 0310 	and.w	r3, r2, #16
 8008d16:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008d20:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008d24:	460b      	mov	r3, r1
 8008d26:	4313      	orrs	r3, r2
 8008d28:	d01e      	beq.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008d2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008d32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d36:	d10c      	bne.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008d38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d3c:	3328      	adds	r3, #40	@ 0x28
 8008d3e:	2102      	movs	r1, #2
 8008d40:	4618      	mov	r0, r3
 8008d42:	f000 fe25 	bl	8009990 <RCCEx_PLL3_Config>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d002      	beq.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008d52:	4b70      	ldr	r3, [pc, #448]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d56:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008d5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008d62:	4a6c      	ldr	r2, [pc, #432]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008d64:	430b      	orrs	r3, r1
 8008d66:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008d68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d70:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008d74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008d78:	2300      	movs	r3, #0
 8008d7a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008d7e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008d82:	460b      	mov	r3, r1
 8008d84:	4313      	orrs	r3, r2
 8008d86:	d03e      	beq.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008d88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d8c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008d90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d94:	d022      	beq.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8008d96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d9a:	d81b      	bhi.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d003      	beq.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8008da0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008da4:	d00b      	beq.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8008da6:	e015      	b.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008da8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dac:	3308      	adds	r3, #8
 8008dae:	2100      	movs	r1, #0
 8008db0:	4618      	mov	r0, r3
 8008db2:	f000 fd3b 	bl	800982c <RCCEx_PLL2_Config>
 8008db6:	4603      	mov	r3, r0
 8008db8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008dbc:	e00f      	b.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008dbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dc2:	3328      	adds	r3, #40	@ 0x28
 8008dc4:	2102      	movs	r1, #2
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f000 fde2 	bl	8009990 <RCCEx_PLL3_Config>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008dd2:	e004      	b.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008dda:	e000      	b.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8008ddc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dde:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d10b      	bne.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008de6:	4b4b      	ldr	r3, [pc, #300]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dea:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008dee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008df2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008df6:	4a47      	ldr	r2, [pc, #284]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008df8:	430b      	orrs	r3, r1
 8008dfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8008dfc:	e003      	b.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dfe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e02:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008e06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e0e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008e12:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008e14:	2300      	movs	r3, #0
 8008e16:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008e18:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	d03b      	beq.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008e22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e2a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008e2e:	d01f      	beq.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8008e30:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008e34:	d818      	bhi.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8008e36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e3a:	d003      	beq.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8008e3c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e40:	d007      	beq.n	8008e52 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8008e42:	e011      	b.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e44:	4b33      	ldr	r3, [pc, #204]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e48:	4a32      	ldr	r2, [pc, #200]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008e4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008e50:	e00f      	b.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008e52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e56:	3328      	adds	r3, #40	@ 0x28
 8008e58:	2101      	movs	r1, #1
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f000 fd98 	bl	8009990 <RCCEx_PLL3_Config>
 8008e60:	4603      	mov	r3, r0
 8008e62:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8008e66:	e004      	b.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008e6e:	e000      	b.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8008e70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e72:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d10b      	bne.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008e7a:	4b26      	ldr	r3, [pc, #152]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e7e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008e82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e8a:	4a22      	ldr	r2, [pc, #136]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008e8c:	430b      	orrs	r3, r1
 8008e8e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008e90:	e003      	b.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e92:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e96:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008e9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008ea6:	673b      	str	r3, [r7, #112]	@ 0x70
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	677b      	str	r3, [r7, #116]	@ 0x74
 8008eac:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	d034      	beq.n	8008f20 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008eb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008eba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d003      	beq.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8008ec0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ec4:	d007      	beq.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8008ec6:	e011      	b.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ec8:	4b12      	ldr	r3, [pc, #72]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ecc:	4a11      	ldr	r2, [pc, #68]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008ece:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ed2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008ed4:	e00e      	b.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008ed6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008eda:	3308      	adds	r3, #8
 8008edc:	2102      	movs	r1, #2
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f000 fca4 	bl	800982c <RCCEx_PLL2_Config>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008eea:	e003      	b.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8008eec:	2301      	movs	r3, #1
 8008eee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008ef2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ef4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d10d      	bne.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008efc:	4b05      	ldr	r3, [pc, #20]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008efe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f00:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008f04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f0a:	4a02      	ldr	r2, [pc, #8]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008f0c:	430b      	orrs	r3, r1
 8008f0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008f10:	e006      	b.n	8008f20 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8008f12:	bf00      	nop
 8008f14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f18:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f1c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008f20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f28:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008f2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008f2e:	2300      	movs	r3, #0
 8008f30:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008f32:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008f36:	460b      	mov	r3, r1
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	d00c      	beq.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008f3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f40:	3328      	adds	r3, #40	@ 0x28
 8008f42:	2102      	movs	r1, #2
 8008f44:	4618      	mov	r0, r3
 8008f46:	f000 fd23 	bl	8009990 <RCCEx_PLL3_Config>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d002      	beq.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8008f50:	2301      	movs	r3, #1
 8008f52:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008f56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f5e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008f62:	663b      	str	r3, [r7, #96]	@ 0x60
 8008f64:	2300      	movs	r3, #0
 8008f66:	667b      	str	r3, [r7, #100]	@ 0x64
 8008f68:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	d038      	beq.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008f72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f7e:	d018      	beq.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8008f80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f84:	d811      	bhi.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008f86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f8a:	d014      	beq.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8008f8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f90:	d80b      	bhi.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d011      	beq.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8008f96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f9a:	d106      	bne.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f9c:	4bc3      	ldr	r3, [pc, #780]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fa0:	4ac2      	ldr	r2, [pc, #776]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008fa2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008fa6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008fa8:	e008      	b.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008faa:	2301      	movs	r3, #1
 8008fac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008fb0:	e004      	b.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008fb2:	bf00      	nop
 8008fb4:	e002      	b.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008fb6:	bf00      	nop
 8008fb8:	e000      	b.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008fba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fbc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d10b      	bne.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008fc4:	4bb9      	ldr	r3, [pc, #740]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008fc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fc8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008fcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fd4:	4ab5      	ldr	r2, [pc, #724]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008fd6:	430b      	orrs	r3, r1
 8008fd8:	6553      	str	r3, [r2, #84]	@ 0x54
 8008fda:	e003      	b.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fdc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008fe0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008fe4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fec:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008ff0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ff6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008ffa:	460b      	mov	r3, r1
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	d009      	beq.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009000:	4baa      	ldr	r3, [pc, #680]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009002:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009004:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009008:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800900c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800900e:	4aa7      	ldr	r2, [pc, #668]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009010:	430b      	orrs	r3, r1
 8009012:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009014:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009020:	653b      	str	r3, [r7, #80]	@ 0x50
 8009022:	2300      	movs	r3, #0
 8009024:	657b      	str	r3, [r7, #84]	@ 0x54
 8009026:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800902a:	460b      	mov	r3, r1
 800902c:	4313      	orrs	r3, r2
 800902e:	d009      	beq.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009030:	4b9e      	ldr	r3, [pc, #632]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009032:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009034:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009038:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800903c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800903e:	4a9b      	ldr	r2, [pc, #620]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009040:	430b      	orrs	r3, r1
 8009042:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8009044:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009050:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009052:	2300      	movs	r3, #0
 8009054:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009056:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800905a:	460b      	mov	r3, r1
 800905c:	4313      	orrs	r3, r2
 800905e:	d009      	beq.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8009060:	4b92      	ldr	r3, [pc, #584]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009064:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8009068:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800906c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800906e:	4a8f      	ldr	r2, [pc, #572]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009070:	430b      	orrs	r3, r1
 8009072:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009074:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800907c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009080:	643b      	str	r3, [r7, #64]	@ 0x40
 8009082:	2300      	movs	r3, #0
 8009084:	647b      	str	r3, [r7, #68]	@ 0x44
 8009086:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800908a:	460b      	mov	r3, r1
 800908c:	4313      	orrs	r3, r2
 800908e:	d00e      	beq.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009090:	4b86      	ldr	r3, [pc, #536]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009092:	691b      	ldr	r3, [r3, #16]
 8009094:	4a85      	ldr	r2, [pc, #532]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009096:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800909a:	6113      	str	r3, [r2, #16]
 800909c:	4b83      	ldr	r3, [pc, #524]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800909e:	6919      	ldr	r1, [r3, #16]
 80090a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80090a8:	4a80      	ldr	r2, [pc, #512]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80090aa:	430b      	orrs	r3, r1
 80090ac:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80090ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80090ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80090bc:	2300      	movs	r3, #0
 80090be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090c0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80090c4:	460b      	mov	r3, r1
 80090c6:	4313      	orrs	r3, r2
 80090c8:	d009      	beq.n	80090de <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80090ca:	4b78      	ldr	r3, [pc, #480]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80090cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090ce:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80090d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090d8:	4a74      	ldr	r2, [pc, #464]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80090da:	430b      	orrs	r3, r1
 80090dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80090de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80090ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80090ec:	2300      	movs	r3, #0
 80090ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80090f0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80090f4:	460b      	mov	r3, r1
 80090f6:	4313      	orrs	r3, r2
 80090f8:	d00a      	beq.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80090fa:	4b6c      	ldr	r3, [pc, #432]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80090fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090fe:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009102:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009106:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800910a:	4a68      	ldr	r2, [pc, #416]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800910c:	430b      	orrs	r3, r1
 800910e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009110:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009118:	2100      	movs	r1, #0
 800911a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800911c:	f003 0301 	and.w	r3, r3, #1
 8009120:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009122:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009126:	460b      	mov	r3, r1
 8009128:	4313      	orrs	r3, r2
 800912a:	d011      	beq.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800912c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009130:	3308      	adds	r3, #8
 8009132:	2100      	movs	r1, #0
 8009134:	4618      	mov	r0, r3
 8009136:	f000 fb79 	bl	800982c <RCCEx_PLL2_Config>
 800913a:	4603      	mov	r3, r0
 800913c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009140:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009144:	2b00      	cmp	r3, #0
 8009146:	d003      	beq.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009148:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800914c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009150:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009158:	2100      	movs	r1, #0
 800915a:	6239      	str	r1, [r7, #32]
 800915c:	f003 0302 	and.w	r3, r3, #2
 8009160:	627b      	str	r3, [r7, #36]	@ 0x24
 8009162:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009166:	460b      	mov	r3, r1
 8009168:	4313      	orrs	r3, r2
 800916a:	d011      	beq.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800916c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009170:	3308      	adds	r3, #8
 8009172:	2101      	movs	r1, #1
 8009174:	4618      	mov	r0, r3
 8009176:	f000 fb59 	bl	800982c <RCCEx_PLL2_Config>
 800917a:	4603      	mov	r3, r0
 800917c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009180:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009184:	2b00      	cmp	r3, #0
 8009186:	d003      	beq.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009188:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800918c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009190:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009198:	2100      	movs	r1, #0
 800919a:	61b9      	str	r1, [r7, #24]
 800919c:	f003 0304 	and.w	r3, r3, #4
 80091a0:	61fb      	str	r3, [r7, #28]
 80091a2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80091a6:	460b      	mov	r3, r1
 80091a8:	4313      	orrs	r3, r2
 80091aa:	d011      	beq.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80091ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091b0:	3308      	adds	r3, #8
 80091b2:	2102      	movs	r1, #2
 80091b4:	4618      	mov	r0, r3
 80091b6:	f000 fb39 	bl	800982c <RCCEx_PLL2_Config>
 80091ba:	4603      	mov	r3, r0
 80091bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80091c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d003      	beq.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80091cc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80091d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d8:	2100      	movs	r1, #0
 80091da:	6139      	str	r1, [r7, #16]
 80091dc:	f003 0308 	and.w	r3, r3, #8
 80091e0:	617b      	str	r3, [r7, #20]
 80091e2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80091e6:	460b      	mov	r3, r1
 80091e8:	4313      	orrs	r3, r2
 80091ea:	d011      	beq.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80091ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091f0:	3328      	adds	r3, #40	@ 0x28
 80091f2:	2100      	movs	r1, #0
 80091f4:	4618      	mov	r0, r3
 80091f6:	f000 fbcb 	bl	8009990 <RCCEx_PLL3_Config>
 80091fa:	4603      	mov	r3, r0
 80091fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8009200:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009204:	2b00      	cmp	r3, #0
 8009206:	d003      	beq.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009208:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800920c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009210:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009218:	2100      	movs	r1, #0
 800921a:	60b9      	str	r1, [r7, #8]
 800921c:	f003 0310 	and.w	r3, r3, #16
 8009220:	60fb      	str	r3, [r7, #12]
 8009222:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009226:	460b      	mov	r3, r1
 8009228:	4313      	orrs	r3, r2
 800922a:	d011      	beq.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800922c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009230:	3328      	adds	r3, #40	@ 0x28
 8009232:	2101      	movs	r1, #1
 8009234:	4618      	mov	r0, r3
 8009236:	f000 fbab 	bl	8009990 <RCCEx_PLL3_Config>
 800923a:	4603      	mov	r3, r0
 800923c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009240:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009244:	2b00      	cmp	r3, #0
 8009246:	d003      	beq.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009248:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800924c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009250:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009258:	2100      	movs	r1, #0
 800925a:	6039      	str	r1, [r7, #0]
 800925c:	f003 0320 	and.w	r3, r3, #32
 8009260:	607b      	str	r3, [r7, #4]
 8009262:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009266:	460b      	mov	r3, r1
 8009268:	4313      	orrs	r3, r2
 800926a:	d011      	beq.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800926c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009270:	3328      	adds	r3, #40	@ 0x28
 8009272:	2102      	movs	r1, #2
 8009274:	4618      	mov	r0, r3
 8009276:	f000 fb8b 	bl	8009990 <RCCEx_PLL3_Config>
 800927a:	4603      	mov	r3, r0
 800927c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009280:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009284:	2b00      	cmp	r3, #0
 8009286:	d003      	beq.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009288:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800928c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8009290:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8009294:	2b00      	cmp	r3, #0
 8009296:	d101      	bne.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8009298:	2300      	movs	r3, #0
 800929a:	e000      	b.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800929c:	2301      	movs	r3, #1
}
 800929e:	4618      	mov	r0, r3
 80092a0:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80092a4:	46bd      	mov	sp, r7
 80092a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80092aa:	bf00      	nop
 80092ac:	58024400 	.word	0x58024400

080092b0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80092b4:	f7fe fde2 	bl	8007e7c <HAL_RCC_GetHCLKFreq>
 80092b8:	4602      	mov	r2, r0
 80092ba:	4b06      	ldr	r3, [pc, #24]	@ (80092d4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80092bc:	6a1b      	ldr	r3, [r3, #32]
 80092be:	091b      	lsrs	r3, r3, #4
 80092c0:	f003 0307 	and.w	r3, r3, #7
 80092c4:	4904      	ldr	r1, [pc, #16]	@ (80092d8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80092c6:	5ccb      	ldrb	r3, [r1, r3]
 80092c8:	f003 031f 	and.w	r3, r3, #31
 80092cc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	58024400 	.word	0x58024400
 80092d8:	08012400 	.word	0x08012400

080092dc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80092dc:	b480      	push	{r7}
 80092de:	b089      	sub	sp, #36	@ 0x24
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80092e4:	4ba1      	ldr	r3, [pc, #644]	@ (800956c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092e8:	f003 0303 	and.w	r3, r3, #3
 80092ec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80092ee:	4b9f      	ldr	r3, [pc, #636]	@ (800956c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092f2:	0b1b      	lsrs	r3, r3, #12
 80092f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80092f8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80092fa:	4b9c      	ldr	r3, [pc, #624]	@ (800956c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092fe:	091b      	lsrs	r3, r3, #4
 8009300:	f003 0301 	and.w	r3, r3, #1
 8009304:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009306:	4b99      	ldr	r3, [pc, #612]	@ (800956c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800930a:	08db      	lsrs	r3, r3, #3
 800930c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009310:	693a      	ldr	r2, [r7, #16]
 8009312:	fb02 f303 	mul.w	r3, r2, r3
 8009316:	ee07 3a90 	vmov	s15, r3
 800931a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800931e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	2b00      	cmp	r3, #0
 8009326:	f000 8111 	beq.w	800954c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800932a:	69bb      	ldr	r3, [r7, #24]
 800932c:	2b02      	cmp	r3, #2
 800932e:	f000 8083 	beq.w	8009438 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	2b02      	cmp	r3, #2
 8009336:	f200 80a1 	bhi.w	800947c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800933a:	69bb      	ldr	r3, [r7, #24]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d003      	beq.n	8009348 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009340:	69bb      	ldr	r3, [r7, #24]
 8009342:	2b01      	cmp	r3, #1
 8009344:	d056      	beq.n	80093f4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009346:	e099      	b.n	800947c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009348:	4b88      	ldr	r3, [pc, #544]	@ (800956c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f003 0320 	and.w	r3, r3, #32
 8009350:	2b00      	cmp	r3, #0
 8009352:	d02d      	beq.n	80093b0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009354:	4b85      	ldr	r3, [pc, #532]	@ (800956c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	08db      	lsrs	r3, r3, #3
 800935a:	f003 0303 	and.w	r3, r3, #3
 800935e:	4a84      	ldr	r2, [pc, #528]	@ (8009570 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009360:	fa22 f303 	lsr.w	r3, r2, r3
 8009364:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	ee07 3a90 	vmov	s15, r3
 800936c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	ee07 3a90 	vmov	s15, r3
 8009376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800937a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800937e:	4b7b      	ldr	r3, [pc, #492]	@ (800956c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009386:	ee07 3a90 	vmov	s15, r3
 800938a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800938e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009392:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009574 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800939a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800939e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80093ae:	e087      	b.n	80094c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	ee07 3a90 	vmov	s15, r3
 80093b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ba:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009578 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80093be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093c2:	4b6a      	ldr	r3, [pc, #424]	@ (800956c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ca:	ee07 3a90 	vmov	s15, r3
 80093ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80093d6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009574 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80093da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093f2:	e065      	b.n	80094c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	ee07 3a90 	vmov	s15, r3
 80093fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093fe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800957c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009406:	4b59      	ldr	r3, [pc, #356]	@ (800956c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800940a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800940e:	ee07 3a90 	vmov	s15, r3
 8009412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009416:	ed97 6a03 	vldr	s12, [r7, #12]
 800941a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009574 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800941e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009426:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800942a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800942e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009432:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009436:	e043      	b.n	80094c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	ee07 3a90 	vmov	s15, r3
 800943e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009442:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009580 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800944a:	4b48      	ldr	r3, [pc, #288]	@ (800956c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800944c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800944e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009452:	ee07 3a90 	vmov	s15, r3
 8009456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800945a:	ed97 6a03 	vldr	s12, [r7, #12]
 800945e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009574 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800946a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800946e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009476:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800947a:	e021      	b.n	80094c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	ee07 3a90 	vmov	s15, r3
 8009482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009486:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800957c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800948a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800948e:	4b37      	ldr	r3, [pc, #220]	@ (800956c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009496:	ee07 3a90 	vmov	s15, r3
 800949a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800949e:	ed97 6a03 	vldr	s12, [r7, #12]
 80094a2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009574 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80094a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094be:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80094c0:	4b2a      	ldr	r3, [pc, #168]	@ (800956c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094c4:	0a5b      	lsrs	r3, r3, #9
 80094c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094ca:	ee07 3a90 	vmov	s15, r3
 80094ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094da:	edd7 6a07 	vldr	s13, [r7, #28]
 80094de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094e6:	ee17 2a90 	vmov	r2, s15
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80094ee:	4b1f      	ldr	r3, [pc, #124]	@ (800956c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094f2:	0c1b      	lsrs	r3, r3, #16
 80094f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094f8:	ee07 3a90 	vmov	s15, r3
 80094fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009500:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009504:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009508:	edd7 6a07 	vldr	s13, [r7, #28]
 800950c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009510:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009514:	ee17 2a90 	vmov	r2, s15
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800951c:	4b13      	ldr	r3, [pc, #76]	@ (800956c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800951e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009520:	0e1b      	lsrs	r3, r3, #24
 8009522:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009526:	ee07 3a90 	vmov	s15, r3
 800952a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800952e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009532:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009536:	edd7 6a07 	vldr	s13, [r7, #28]
 800953a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800953e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009542:	ee17 2a90 	vmov	r2, s15
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800954a:	e008      	b.n	800955e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2200      	movs	r2, #0
 8009556:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	609a      	str	r2, [r3, #8]
}
 800955e:	bf00      	nop
 8009560:	3724      	adds	r7, #36	@ 0x24
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr
 800956a:	bf00      	nop
 800956c:	58024400 	.word	0x58024400
 8009570:	03d09000 	.word	0x03d09000
 8009574:	46000000 	.word	0x46000000
 8009578:	4c742400 	.word	0x4c742400
 800957c:	4a742400 	.word	0x4a742400
 8009580:	4bb71b00 	.word	0x4bb71b00

08009584 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009584:	b480      	push	{r7}
 8009586:	b089      	sub	sp, #36	@ 0x24
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800958c:	4ba1      	ldr	r3, [pc, #644]	@ (8009814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800958e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009590:	f003 0303 	and.w	r3, r3, #3
 8009594:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009596:	4b9f      	ldr	r3, [pc, #636]	@ (8009814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800959a:	0d1b      	lsrs	r3, r3, #20
 800959c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80095a0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80095a2:	4b9c      	ldr	r3, [pc, #624]	@ (8009814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095a6:	0a1b      	lsrs	r3, r3, #8
 80095a8:	f003 0301 	and.w	r3, r3, #1
 80095ac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80095ae:	4b99      	ldr	r3, [pc, #612]	@ (8009814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095b2:	08db      	lsrs	r3, r3, #3
 80095b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80095b8:	693a      	ldr	r2, [r7, #16]
 80095ba:	fb02 f303 	mul.w	r3, r2, r3
 80095be:	ee07 3a90 	vmov	s15, r3
 80095c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	f000 8111 	beq.w	80097f4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80095d2:	69bb      	ldr	r3, [r7, #24]
 80095d4:	2b02      	cmp	r3, #2
 80095d6:	f000 8083 	beq.w	80096e0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80095da:	69bb      	ldr	r3, [r7, #24]
 80095dc:	2b02      	cmp	r3, #2
 80095de:	f200 80a1 	bhi.w	8009724 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80095e2:	69bb      	ldr	r3, [r7, #24]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d003      	beq.n	80095f0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80095e8:	69bb      	ldr	r3, [r7, #24]
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	d056      	beq.n	800969c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80095ee:	e099      	b.n	8009724 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095f0:	4b88      	ldr	r3, [pc, #544]	@ (8009814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f003 0320 	and.w	r3, r3, #32
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d02d      	beq.n	8009658 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80095fc:	4b85      	ldr	r3, [pc, #532]	@ (8009814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	08db      	lsrs	r3, r3, #3
 8009602:	f003 0303 	and.w	r3, r3, #3
 8009606:	4a84      	ldr	r2, [pc, #528]	@ (8009818 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009608:	fa22 f303 	lsr.w	r3, r2, r3
 800960c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	ee07 3a90 	vmov	s15, r3
 8009614:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	ee07 3a90 	vmov	s15, r3
 800961e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009626:	4b7b      	ldr	r3, [pc, #492]	@ (8009814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800962a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800962e:	ee07 3a90 	vmov	s15, r3
 8009632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009636:	ed97 6a03 	vldr	s12, [r7, #12]
 800963a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800981c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800963e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009646:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800964a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800964e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009652:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009656:	e087      	b.n	8009768 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	ee07 3a90 	vmov	s15, r3
 800965e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009662:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009820 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800966a:	4b6a      	ldr	r3, [pc, #424]	@ (8009814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800966c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800966e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009672:	ee07 3a90 	vmov	s15, r3
 8009676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800967a:	ed97 6a03 	vldr	s12, [r7, #12]
 800967e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800981c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800968a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800968e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009696:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800969a:	e065      	b.n	8009768 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	ee07 3a90 	vmov	s15, r3
 80096a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096a6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009824 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80096aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096ae:	4b59      	ldr	r3, [pc, #356]	@ (8009814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096b6:	ee07 3a90 	vmov	s15, r3
 80096ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096be:	ed97 6a03 	vldr	s12, [r7, #12]
 80096c2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800981c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80096c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096de:	e043      	b.n	8009768 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	ee07 3a90 	vmov	s15, r3
 80096e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ea:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80096ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096f2:	4b48      	ldr	r3, [pc, #288]	@ (8009814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096fa:	ee07 3a90 	vmov	s15, r3
 80096fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009702:	ed97 6a03 	vldr	s12, [r7, #12]
 8009706:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800981c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800970a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800970e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009712:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800971a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800971e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009722:	e021      	b.n	8009768 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	ee07 3a90 	vmov	s15, r3
 800972a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800972e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009824 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009736:	4b37      	ldr	r3, [pc, #220]	@ (8009814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800973a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800973e:	ee07 3a90 	vmov	s15, r3
 8009742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009746:	ed97 6a03 	vldr	s12, [r7, #12]
 800974a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800981c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800974e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009756:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800975a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800975e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009762:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009766:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009768:	4b2a      	ldr	r3, [pc, #168]	@ (8009814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800976a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800976c:	0a5b      	lsrs	r3, r3, #9
 800976e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009772:	ee07 3a90 	vmov	s15, r3
 8009776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800977a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800977e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009782:	edd7 6a07 	vldr	s13, [r7, #28]
 8009786:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800978a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800978e:	ee17 2a90 	vmov	r2, s15
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009796:	4b1f      	ldr	r3, [pc, #124]	@ (8009814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800979a:	0c1b      	lsrs	r3, r3, #16
 800979c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097a0:	ee07 3a90 	vmov	s15, r3
 80097a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80097ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80097b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097bc:	ee17 2a90 	vmov	r2, s15
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80097c4:	4b13      	ldr	r3, [pc, #76]	@ (8009814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097c8:	0e1b      	lsrs	r3, r3, #24
 80097ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097ce:	ee07 3a90 	vmov	s15, r3
 80097d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80097da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097de:	edd7 6a07 	vldr	s13, [r7, #28]
 80097e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097ea:	ee17 2a90 	vmov	r2, s15
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80097f2:	e008      	b.n	8009806 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2200      	movs	r2, #0
 80097f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	609a      	str	r2, [r3, #8]
}
 8009806:	bf00      	nop
 8009808:	3724      	adds	r7, #36	@ 0x24
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr
 8009812:	bf00      	nop
 8009814:	58024400 	.word	0x58024400
 8009818:	03d09000 	.word	0x03d09000
 800981c:	46000000 	.word	0x46000000
 8009820:	4c742400 	.word	0x4c742400
 8009824:	4a742400 	.word	0x4a742400
 8009828:	4bb71b00 	.word	0x4bb71b00

0800982c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009836:	2300      	movs	r3, #0
 8009838:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800983a:	4b53      	ldr	r3, [pc, #332]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 800983c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800983e:	f003 0303 	and.w	r3, r3, #3
 8009842:	2b03      	cmp	r3, #3
 8009844:	d101      	bne.n	800984a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009846:	2301      	movs	r3, #1
 8009848:	e099      	b.n	800997e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800984a:	4b4f      	ldr	r3, [pc, #316]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4a4e      	ldr	r2, [pc, #312]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 8009850:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009854:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009856:	f7f9 fc7d 	bl	8003154 <HAL_GetTick>
 800985a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800985c:	e008      	b.n	8009870 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800985e:	f7f9 fc79 	bl	8003154 <HAL_GetTick>
 8009862:	4602      	mov	r2, r0
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	1ad3      	subs	r3, r2, r3
 8009868:	2b02      	cmp	r3, #2
 800986a:	d901      	bls.n	8009870 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800986c:	2303      	movs	r3, #3
 800986e:	e086      	b.n	800997e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009870:	4b45      	ldr	r3, [pc, #276]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009878:	2b00      	cmp	r3, #0
 800987a:	d1f0      	bne.n	800985e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800987c:	4b42      	ldr	r3, [pc, #264]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 800987e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009880:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	031b      	lsls	r3, r3, #12
 800988a:	493f      	ldr	r1, [pc, #252]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 800988c:	4313      	orrs	r3, r2
 800988e:	628b      	str	r3, [r1, #40]	@ 0x28
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	3b01      	subs	r3, #1
 8009896:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	3b01      	subs	r3, #1
 80098a0:	025b      	lsls	r3, r3, #9
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	431a      	orrs	r2, r3
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	68db      	ldr	r3, [r3, #12]
 80098aa:	3b01      	subs	r3, #1
 80098ac:	041b      	lsls	r3, r3, #16
 80098ae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80098b2:	431a      	orrs	r2, r3
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	691b      	ldr	r3, [r3, #16]
 80098b8:	3b01      	subs	r3, #1
 80098ba:	061b      	lsls	r3, r3, #24
 80098bc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80098c0:	4931      	ldr	r1, [pc, #196]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 80098c2:	4313      	orrs	r3, r2
 80098c4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80098c6:	4b30      	ldr	r3, [pc, #192]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 80098c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	695b      	ldr	r3, [r3, #20]
 80098d2:	492d      	ldr	r1, [pc, #180]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 80098d4:	4313      	orrs	r3, r2
 80098d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80098d8:	4b2b      	ldr	r3, [pc, #172]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 80098da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098dc:	f023 0220 	bic.w	r2, r3, #32
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	699b      	ldr	r3, [r3, #24]
 80098e4:	4928      	ldr	r1, [pc, #160]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 80098e6:	4313      	orrs	r3, r2
 80098e8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80098ea:	4b27      	ldr	r3, [pc, #156]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 80098ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ee:	4a26      	ldr	r2, [pc, #152]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 80098f0:	f023 0310 	bic.w	r3, r3, #16
 80098f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80098f6:	4b24      	ldr	r3, [pc, #144]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 80098f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80098fa:	4b24      	ldr	r3, [pc, #144]	@ (800998c <RCCEx_PLL2_Config+0x160>)
 80098fc:	4013      	ands	r3, r2
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	69d2      	ldr	r2, [r2, #28]
 8009902:	00d2      	lsls	r2, r2, #3
 8009904:	4920      	ldr	r1, [pc, #128]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 8009906:	4313      	orrs	r3, r2
 8009908:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800990a:	4b1f      	ldr	r3, [pc, #124]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 800990c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800990e:	4a1e      	ldr	r2, [pc, #120]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 8009910:	f043 0310 	orr.w	r3, r3, #16
 8009914:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d106      	bne.n	800992a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800991c:	4b1a      	ldr	r3, [pc, #104]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 800991e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009920:	4a19      	ldr	r2, [pc, #100]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 8009922:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009926:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009928:	e00f      	b.n	800994a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	2b01      	cmp	r3, #1
 800992e:	d106      	bne.n	800993e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009930:	4b15      	ldr	r3, [pc, #84]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 8009932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009934:	4a14      	ldr	r2, [pc, #80]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 8009936:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800993a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800993c:	e005      	b.n	800994a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800993e:	4b12      	ldr	r3, [pc, #72]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 8009940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009942:	4a11      	ldr	r2, [pc, #68]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 8009944:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009948:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800994a:	4b0f      	ldr	r3, [pc, #60]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a0e      	ldr	r2, [pc, #56]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 8009950:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009954:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009956:	f7f9 fbfd 	bl	8003154 <HAL_GetTick>
 800995a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800995c:	e008      	b.n	8009970 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800995e:	f7f9 fbf9 	bl	8003154 <HAL_GetTick>
 8009962:	4602      	mov	r2, r0
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	1ad3      	subs	r3, r2, r3
 8009968:	2b02      	cmp	r3, #2
 800996a:	d901      	bls.n	8009970 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800996c:	2303      	movs	r3, #3
 800996e:	e006      	b.n	800997e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009970:	4b05      	ldr	r3, [pc, #20]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009978:	2b00      	cmp	r3, #0
 800997a:	d0f0      	beq.n	800995e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800997c:	7bfb      	ldrb	r3, [r7, #15]
}
 800997e:	4618      	mov	r0, r3
 8009980:	3710      	adds	r7, #16
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	58024400 	.word	0x58024400
 800998c:	ffff0007 	.word	0xffff0007

08009990 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800999a:	2300      	movs	r3, #0
 800999c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800999e:	4b53      	ldr	r3, [pc, #332]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 80099a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099a2:	f003 0303 	and.w	r3, r3, #3
 80099a6:	2b03      	cmp	r3, #3
 80099a8:	d101      	bne.n	80099ae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80099aa:	2301      	movs	r3, #1
 80099ac:	e099      	b.n	8009ae2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80099ae:	4b4f      	ldr	r3, [pc, #316]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4a4e      	ldr	r2, [pc, #312]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 80099b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80099b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099ba:	f7f9 fbcb 	bl	8003154 <HAL_GetTick>
 80099be:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80099c0:	e008      	b.n	80099d4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80099c2:	f7f9 fbc7 	bl	8003154 <HAL_GetTick>
 80099c6:	4602      	mov	r2, r0
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	1ad3      	subs	r3, r2, r3
 80099cc:	2b02      	cmp	r3, #2
 80099ce:	d901      	bls.n	80099d4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80099d0:	2303      	movs	r3, #3
 80099d2:	e086      	b.n	8009ae2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80099d4:	4b45      	ldr	r3, [pc, #276]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d1f0      	bne.n	80099c2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80099e0:	4b42      	ldr	r3, [pc, #264]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 80099e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099e4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	051b      	lsls	r3, r3, #20
 80099ee:	493f      	ldr	r1, [pc, #252]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 80099f0:	4313      	orrs	r3, r2
 80099f2:	628b      	str	r3, [r1, #40]	@ 0x28
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	3b01      	subs	r3, #1
 80099fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	689b      	ldr	r3, [r3, #8]
 8009a02:	3b01      	subs	r3, #1
 8009a04:	025b      	lsls	r3, r3, #9
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	431a      	orrs	r2, r3
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	68db      	ldr	r3, [r3, #12]
 8009a0e:	3b01      	subs	r3, #1
 8009a10:	041b      	lsls	r3, r3, #16
 8009a12:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009a16:	431a      	orrs	r2, r3
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	691b      	ldr	r3, [r3, #16]
 8009a1c:	3b01      	subs	r3, #1
 8009a1e:	061b      	lsls	r3, r3, #24
 8009a20:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009a24:	4931      	ldr	r1, [pc, #196]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009a26:	4313      	orrs	r3, r2
 8009a28:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009a2a:	4b30      	ldr	r3, [pc, #192]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a2e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	695b      	ldr	r3, [r3, #20]
 8009a36:	492d      	ldr	r1, [pc, #180]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009a3c:	4b2b      	ldr	r3, [pc, #172]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a40:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	699b      	ldr	r3, [r3, #24]
 8009a48:	4928      	ldr	r1, [pc, #160]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009a4e:	4b27      	ldr	r3, [pc, #156]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a52:	4a26      	ldr	r2, [pc, #152]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009a54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a58:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009a5a:	4b24      	ldr	r3, [pc, #144]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009a5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a5e:	4b24      	ldr	r3, [pc, #144]	@ (8009af0 <RCCEx_PLL3_Config+0x160>)
 8009a60:	4013      	ands	r3, r2
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	69d2      	ldr	r2, [r2, #28]
 8009a66:	00d2      	lsls	r2, r2, #3
 8009a68:	4920      	ldr	r1, [pc, #128]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009a6e:	4b1f      	ldr	r3, [pc, #124]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a72:	4a1e      	ldr	r2, [pc, #120]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009a74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a78:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d106      	bne.n	8009a8e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009a80:	4b1a      	ldr	r3, [pc, #104]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a84:	4a19      	ldr	r2, [pc, #100]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009a86:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009a8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009a8c:	e00f      	b.n	8009aae <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d106      	bne.n	8009aa2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009a94:	4b15      	ldr	r3, [pc, #84]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a98:	4a14      	ldr	r2, [pc, #80]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009a9a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009a9e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009aa0:	e005      	b.n	8009aae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009aa2:	4b12      	ldr	r3, [pc, #72]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aa6:	4a11      	ldr	r2, [pc, #68]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009aa8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009aac:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009aae:	4b0f      	ldr	r3, [pc, #60]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4a0e      	ldr	r2, [pc, #56]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009ab4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009ab8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009aba:	f7f9 fb4b 	bl	8003154 <HAL_GetTick>
 8009abe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009ac0:	e008      	b.n	8009ad4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009ac2:	f7f9 fb47 	bl	8003154 <HAL_GetTick>
 8009ac6:	4602      	mov	r2, r0
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	1ad3      	subs	r3, r2, r3
 8009acc:	2b02      	cmp	r3, #2
 8009ace:	d901      	bls.n	8009ad4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009ad0:	2303      	movs	r3, #3
 8009ad2:	e006      	b.n	8009ae2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009ad4:	4b05      	ldr	r3, [pc, #20]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d0f0      	beq.n	8009ac2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3710      	adds	r7, #16
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	58024400 	.word	0x58024400
 8009af0:	ffff0007 	.word	0xffff0007

08009af4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b084      	sub	sp, #16
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d101      	bne.n	8009b06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009b02:	2301      	movs	r3, #1
 8009b04:	e10f      	b.n	8009d26 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a87      	ldr	r2, [pc, #540]	@ (8009d30 <HAL_SPI_Init+0x23c>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d00f      	beq.n	8009b36 <HAL_SPI_Init+0x42>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4a86      	ldr	r2, [pc, #536]	@ (8009d34 <HAL_SPI_Init+0x240>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d00a      	beq.n	8009b36 <HAL_SPI_Init+0x42>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a84      	ldr	r2, [pc, #528]	@ (8009d38 <HAL_SPI_Init+0x244>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d005      	beq.n	8009b36 <HAL_SPI_Init+0x42>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	68db      	ldr	r3, [r3, #12]
 8009b2e:	2b0f      	cmp	r3, #15
 8009b30:	d901      	bls.n	8009b36 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009b32:	2301      	movs	r3, #1
 8009b34:	e0f7      	b.n	8009d26 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f001 f968 	bl	800ae0c <SPI_GetPacketSize>
 8009b3c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	4a7b      	ldr	r2, [pc, #492]	@ (8009d30 <HAL_SPI_Init+0x23c>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d00c      	beq.n	8009b62 <HAL_SPI_Init+0x6e>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4a79      	ldr	r2, [pc, #484]	@ (8009d34 <HAL_SPI_Init+0x240>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d007      	beq.n	8009b62 <HAL_SPI_Init+0x6e>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4a78      	ldr	r2, [pc, #480]	@ (8009d38 <HAL_SPI_Init+0x244>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d002      	beq.n	8009b62 <HAL_SPI_Init+0x6e>
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2b08      	cmp	r3, #8
 8009b60:	d811      	bhi.n	8009b86 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009b66:	4a72      	ldr	r2, [pc, #456]	@ (8009d30 <HAL_SPI_Init+0x23c>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d009      	beq.n	8009b80 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a70      	ldr	r2, [pc, #448]	@ (8009d34 <HAL_SPI_Init+0x240>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d004      	beq.n	8009b80 <HAL_SPI_Init+0x8c>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a6f      	ldr	r2, [pc, #444]	@ (8009d38 <HAL_SPI_Init+0x244>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d104      	bne.n	8009b8a <HAL_SPI_Init+0x96>
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	2b10      	cmp	r3, #16
 8009b84:	d901      	bls.n	8009b8a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009b86:	2301      	movs	r3, #1
 8009b88:	e0cd      	b.n	8009d26 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d106      	bne.n	8009ba4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f7f8 fb6a 	bl	8002278 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2202      	movs	r2, #2
 8009ba8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f022 0201 	bic.w	r2, r2, #1
 8009bba:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	689b      	ldr	r3, [r3, #8]
 8009bc2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8009bc6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	699b      	ldr	r3, [r3, #24]
 8009bcc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009bd0:	d119      	bne.n	8009c06 <HAL_SPI_Init+0x112>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009bda:	d103      	bne.n	8009be4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d008      	beq.n	8009bf6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d10c      	bne.n	8009c06 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009bf0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009bf4:	d107      	bne.n	8009c06 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	681a      	ldr	r2, [r3, #0]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009c04:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	685b      	ldr	r3, [r3, #4]
 8009c0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d00f      	beq.n	8009c32 <HAL_SPI_Init+0x13e>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	68db      	ldr	r3, [r3, #12]
 8009c16:	2b06      	cmp	r3, #6
 8009c18:	d90b      	bls.n	8009c32 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	430a      	orrs	r2, r1
 8009c2e:	601a      	str	r2, [r3, #0]
 8009c30:	e007      	b.n	8009c42 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009c40:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	69da      	ldr	r2, [r3, #28]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c4a:	431a      	orrs	r2, r3
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	431a      	orrs	r2, r3
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c54:	ea42 0103 	orr.w	r1, r2, r3
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	68da      	ldr	r2, [r3, #12]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	430a      	orrs	r2, r1
 8009c62:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c6c:	431a      	orrs	r2, r3
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c72:	431a      	orrs	r2, r3
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	699b      	ldr	r3, [r3, #24]
 8009c78:	431a      	orrs	r2, r3
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	691b      	ldr	r3, [r3, #16]
 8009c7e:	431a      	orrs	r2, r3
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	695b      	ldr	r3, [r3, #20]
 8009c84:	431a      	orrs	r2, r3
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6a1b      	ldr	r3, [r3, #32]
 8009c8a:	431a      	orrs	r2, r3
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	431a      	orrs	r2, r3
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c96:	431a      	orrs	r2, r3
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	689b      	ldr	r3, [r3, #8]
 8009c9c:	431a      	orrs	r2, r3
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ca2:	ea42 0103 	orr.w	r1, r2, r3
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	430a      	orrs	r2, r1
 8009cb0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d113      	bne.n	8009ce2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009ccc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	689b      	ldr	r3, [r3, #8]
 8009cd4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009ce0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f022 0201 	bic.w	r2, r2, #1
 8009cf0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d00a      	beq.n	8009d14 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	68db      	ldr	r3, [r3, #12]
 8009d04:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	430a      	orrs	r2, r1
 8009d12:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2200      	movs	r2, #0
 8009d18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8009d24:	2300      	movs	r3, #0
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3710      	adds	r7, #16
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop
 8009d30:	40013000 	.word	0x40013000
 8009d34:	40003800 	.word	0x40003800
 8009d38:	40003c00 	.word	0x40003c00

08009d3c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b088      	sub	sp, #32
 8009d40:	af02      	add	r7, sp, #8
 8009d42:	60f8      	str	r0, [r7, #12]
 8009d44:	60b9      	str	r1, [r7, #8]
 8009d46:	603b      	str	r3, [r7, #0]
 8009d48:	4613      	mov	r3, r2
 8009d4a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	3320      	adds	r3, #32
 8009d52:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009d54:	f7f9 f9fe 	bl	8003154 <HAL_GetTick>
 8009d58:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	d001      	beq.n	8009d6a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8009d66:	2302      	movs	r3, #2
 8009d68:	e1d1      	b.n	800a10e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d002      	beq.n	8009d76 <HAL_SPI_Transmit+0x3a>
 8009d70:	88fb      	ldrh	r3, [r7, #6]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d101      	bne.n	8009d7a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8009d76:	2301      	movs	r3, #1
 8009d78:	e1c9      	b.n	800a10e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d101      	bne.n	8009d88 <HAL_SPI_Transmit+0x4c>
 8009d84:	2302      	movs	r3, #2
 8009d86:	e1c2      	b.n	800a10e <HAL_SPI_Transmit+0x3d2>
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2203      	movs	r2, #3
 8009d94:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	68ba      	ldr	r2, [r7, #8]
 8009da4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	88fa      	ldrh	r2, [r7, #6]
 8009daa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	88fa      	ldrh	r2, [r7, #6]
 8009db2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	2200      	movs	r2, #0
 8009dba:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	689b      	ldr	r3, [r3, #8]
 8009ddc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009de0:	d108      	bne.n	8009df4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	681a      	ldr	r2, [r3, #0]
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009df0:	601a      	str	r2, [r3, #0]
 8009df2:	e009      	b.n	8009e08 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	68db      	ldr	r3, [r3, #12]
 8009dfa:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8009e06:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	685a      	ldr	r2, [r3, #4]
 8009e0e:	4b96      	ldr	r3, [pc, #600]	@ (800a068 <HAL_SPI_Transmit+0x32c>)
 8009e10:	4013      	ands	r3, r2
 8009e12:	88f9      	ldrh	r1, [r7, #6]
 8009e14:	68fa      	ldr	r2, [r7, #12]
 8009e16:	6812      	ldr	r2, [r2, #0]
 8009e18:	430b      	orrs	r3, r1
 8009e1a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f042 0201 	orr.w	r2, r2, #1
 8009e2a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009e34:	d107      	bne.n	8009e46 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009e44:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	68db      	ldr	r3, [r3, #12]
 8009e4a:	2b0f      	cmp	r3, #15
 8009e4c:	d947      	bls.n	8009ede <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009e4e:	e03f      	b.n	8009ed0 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	695b      	ldr	r3, [r3, #20]
 8009e56:	f003 0302 	and.w	r3, r3, #2
 8009e5a:	2b02      	cmp	r3, #2
 8009e5c:	d114      	bne.n	8009e88 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	6812      	ldr	r2, [r2, #0]
 8009e68:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e6e:	1d1a      	adds	r2, r3, #4
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009e7a:	b29b      	uxth	r3, r3
 8009e7c:	3b01      	subs	r3, #1
 8009e7e:	b29a      	uxth	r2, r3
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009e86:	e023      	b.n	8009ed0 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e88:	f7f9 f964 	bl	8003154 <HAL_GetTick>
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	1ad3      	subs	r3, r2, r3
 8009e92:	683a      	ldr	r2, [r7, #0]
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d803      	bhi.n	8009ea0 <HAL_SPI_Transmit+0x164>
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e9e:	d102      	bne.n	8009ea6 <HAL_SPI_Transmit+0x16a>
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d114      	bne.n	8009ed0 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009ea6:	68f8      	ldr	r0, [r7, #12]
 8009ea8:	f000 fee2 	bl	800ac70 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009eb2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2201      	movs	r2, #1
 8009ec0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009ecc:	2303      	movs	r3, #3
 8009ece:	e11e      	b.n	800a10e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d1b9      	bne.n	8009e50 <HAL_SPI_Transmit+0x114>
 8009edc:	e0f1      	b.n	800a0c2 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	68db      	ldr	r3, [r3, #12]
 8009ee2:	2b07      	cmp	r3, #7
 8009ee4:	f240 80e6 	bls.w	800a0b4 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009ee8:	e05d      	b.n	8009fa6 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	695b      	ldr	r3, [r3, #20]
 8009ef0:	f003 0302 	and.w	r3, r3, #2
 8009ef4:	2b02      	cmp	r3, #2
 8009ef6:	d132      	bne.n	8009f5e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d918      	bls.n	8009f36 <HAL_SPI_Transmit+0x1fa>
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d014      	beq.n	8009f36 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	6812      	ldr	r2, [r2, #0]
 8009f16:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f1c:	1d1a      	adds	r2, r3, #4
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	3b02      	subs	r3, #2
 8009f2c:	b29a      	uxth	r2, r3
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009f34:	e037      	b.n	8009fa6 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f3a:	881a      	ldrh	r2, [r3, #0]
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f44:	1c9a      	adds	r2, r3, #2
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009f50:	b29b      	uxth	r3, r3
 8009f52:	3b01      	subs	r3, #1
 8009f54:	b29a      	uxth	r2, r3
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009f5c:	e023      	b.n	8009fa6 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009f5e:	f7f9 f8f9 	bl	8003154 <HAL_GetTick>
 8009f62:	4602      	mov	r2, r0
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	1ad3      	subs	r3, r2, r3
 8009f68:	683a      	ldr	r2, [r7, #0]
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d803      	bhi.n	8009f76 <HAL_SPI_Transmit+0x23a>
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f74:	d102      	bne.n	8009f7c <HAL_SPI_Transmit+0x240>
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d114      	bne.n	8009fa6 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009f7c:	68f8      	ldr	r0, [r7, #12]
 8009f7e:	f000 fe77 	bl	800ac70 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009f88:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2201      	movs	r2, #1
 8009f96:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009fa2:	2303      	movs	r3, #3
 8009fa4:	e0b3      	b.n	800a10e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009fac:	b29b      	uxth	r3, r3
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d19b      	bne.n	8009eea <HAL_SPI_Transmit+0x1ae>
 8009fb2:	e086      	b.n	800a0c2 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	695b      	ldr	r3, [r3, #20]
 8009fba:	f003 0302 	and.w	r3, r3, #2
 8009fbe:	2b02      	cmp	r3, #2
 8009fc0:	d154      	bne.n	800a06c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009fc8:	b29b      	uxth	r3, r3
 8009fca:	2b03      	cmp	r3, #3
 8009fcc:	d918      	bls.n	800a000 <HAL_SPI_Transmit+0x2c4>
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fd2:	2b40      	cmp	r3, #64	@ 0x40
 8009fd4:	d914      	bls.n	800a000 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	6812      	ldr	r2, [r2, #0]
 8009fe0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009fe6:	1d1a      	adds	r2, r3, #4
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	3b04      	subs	r3, #4
 8009ff6:	b29a      	uxth	r2, r3
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009ffe:	e059      	b.n	800a0b4 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a006:	b29b      	uxth	r3, r3
 800a008:	2b01      	cmp	r3, #1
 800a00a:	d917      	bls.n	800a03c <HAL_SPI_Transmit+0x300>
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a010:	2b00      	cmp	r3, #0
 800a012:	d013      	beq.n	800a03c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a018:	881a      	ldrh	r2, [r3, #0]
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a022:	1c9a      	adds	r2, r3, #2
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a02e:	b29b      	uxth	r3, r3
 800a030:	3b02      	subs	r3, #2
 800a032:	b29a      	uxth	r2, r3
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a03a:	e03b      	b.n	800a0b4 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	3320      	adds	r3, #32
 800a046:	7812      	ldrb	r2, [r2, #0]
 800a048:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a04e:	1c5a      	adds	r2, r3, #1
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	3b01      	subs	r3, #1
 800a05e:	b29a      	uxth	r2, r3
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a066:	e025      	b.n	800a0b4 <HAL_SPI_Transmit+0x378>
 800a068:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a06c:	f7f9 f872 	bl	8003154 <HAL_GetTick>
 800a070:	4602      	mov	r2, r0
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	1ad3      	subs	r3, r2, r3
 800a076:	683a      	ldr	r2, [r7, #0]
 800a078:	429a      	cmp	r2, r3
 800a07a:	d803      	bhi.n	800a084 <HAL_SPI_Transmit+0x348>
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a082:	d102      	bne.n	800a08a <HAL_SPI_Transmit+0x34e>
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d114      	bne.n	800a0b4 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a08a:	68f8      	ldr	r0, [r7, #12]
 800a08c:	f000 fdf0 	bl	800ac70 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a096:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a0b0:	2303      	movs	r3, #3
 800a0b2:	e02c      	b.n	800a10e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a0ba:	b29b      	uxth	r3, r3
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	f47f af79 	bne.w	8009fb4 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	9300      	str	r3, [sp, #0]
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	2108      	movs	r1, #8
 800a0cc:	68f8      	ldr	r0, [r7, #12]
 800a0ce:	f000 fe6f 	bl	800adb0 <SPI_WaitOnFlagUntilTimeout>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d007      	beq.n	800a0e8 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a0de:	f043 0220 	orr.w	r2, r3, #32
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a0e8:	68f8      	ldr	r0, [r7, #12]
 800a0ea:	f000 fdc1 	bl	800ac70 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a104:	2b00      	cmp	r3, #0
 800a106:	d001      	beq.n	800a10c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800a108:	2301      	movs	r3, #1
 800a10a:	e000      	b.n	800a10e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800a10c:	2300      	movs	r3, #0
  }
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3718      	adds	r7, #24
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
 800a116:	bf00      	nop

0800a118 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b088      	sub	sp, #32
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	60b9      	str	r1, [r7, #8]
 800a122:	603b      	str	r3, [r7, #0]
 800a124:	4613      	mov	r3, r2
 800a126:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a12c:	095b      	lsrs	r3, r3, #5
 800a12e:	b29b      	uxth	r3, r3
 800a130:	3301      	adds	r3, #1
 800a132:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	3330      	adds	r3, #48	@ 0x30
 800a13a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a13c:	f7f9 f80a 	bl	8003154 <HAL_GetTick>
 800a140:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a148:	b2db      	uxtb	r3, r3
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d001      	beq.n	800a152 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800a14e:	2302      	movs	r3, #2
 800a150:	e250      	b.n	800a5f4 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d002      	beq.n	800a15e <HAL_SPI_Receive+0x46>
 800a158:	88fb      	ldrh	r3, [r7, #6]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d101      	bne.n	800a162 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800a15e:	2301      	movs	r3, #1
 800a160:	e248      	b.n	800a5f4 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a168:	2b01      	cmp	r3, #1
 800a16a:	d101      	bne.n	800a170 <HAL_SPI_Receive+0x58>
 800a16c:	2302      	movs	r3, #2
 800a16e:	e241      	b.n	800a5f4 <HAL_SPI_Receive+0x4dc>
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2201      	movs	r2, #1
 800a174:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2204      	movs	r2, #4
 800a17c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2200      	movs	r2, #0
 800a184:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	68ba      	ldr	r2, [r7, #8]
 800a18c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	88fa      	ldrh	r2, [r7, #6]
 800a192:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	88fa      	ldrh	r2, [r7, #6]
 800a19a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	689b      	ldr	r3, [r3, #8]
 800a1c4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a1c8:	d108      	bne.n	800a1dc <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a1d8:	601a      	str	r2, [r3, #0]
 800a1da:	e009      	b.n	800a1f0 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	68db      	ldr	r3, [r3, #12]
 800a1e2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800a1ee:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	685a      	ldr	r2, [r3, #4]
 800a1f6:	4b95      	ldr	r3, [pc, #596]	@ (800a44c <HAL_SPI_Receive+0x334>)
 800a1f8:	4013      	ands	r3, r2
 800a1fa:	88f9      	ldrh	r1, [r7, #6]
 800a1fc:	68fa      	ldr	r2, [r7, #12]
 800a1fe:	6812      	ldr	r2, [r2, #0]
 800a200:	430b      	orrs	r3, r1
 800a202:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	681a      	ldr	r2, [r3, #0]
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f042 0201 	orr.w	r2, r2, #1
 800a212:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a21c:	d107      	bne.n	800a22e <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	681a      	ldr	r2, [r3, #0]
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a22c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	68db      	ldr	r3, [r3, #12]
 800a232:	2b0f      	cmp	r3, #15
 800a234:	d96c      	bls.n	800a310 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a236:	e064      	b.n	800a302 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	695b      	ldr	r3, [r3, #20]
 800a23e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	695b      	ldr	r3, [r3, #20]
 800a246:	f003 0301 	and.w	r3, r3, #1
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	d114      	bne.n	800a278 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681a      	ldr	r2, [r3, #0]
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a256:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a258:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a25e:	1d1a      	adds	r2, r3, #4
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a26a:	b29b      	uxth	r3, r3
 800a26c:	3b01      	subs	r3, #1
 800a26e:	b29a      	uxth	r2, r3
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a276:	e044      	b.n	800a302 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a27e:	b29b      	uxth	r3, r3
 800a280:	8bfa      	ldrh	r2, [r7, #30]
 800a282:	429a      	cmp	r2, r3
 800a284:	d919      	bls.n	800a2ba <HAL_SPI_Receive+0x1a2>
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d014      	beq.n	800a2ba <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681a      	ldr	r2, [r3, #0]
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a298:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a29a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2a0:	1d1a      	adds	r2, r3, #4
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	3b01      	subs	r3, #1
 800a2b0:	b29a      	uxth	r2, r3
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a2b8:	e023      	b.n	800a302 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a2ba:	f7f8 ff4b 	bl	8003154 <HAL_GetTick>
 800a2be:	4602      	mov	r2, r0
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	1ad3      	subs	r3, r2, r3
 800a2c4:	683a      	ldr	r2, [r7, #0]
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d803      	bhi.n	800a2d2 <HAL_SPI_Receive+0x1ba>
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2d0:	d102      	bne.n	800a2d8 <HAL_SPI_Receive+0x1c0>
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d114      	bne.n	800a302 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a2d8:	68f8      	ldr	r0, [r7, #12]
 800a2da:	f000 fcc9 	bl	800ac70 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a2e4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2201      	movs	r2, #1
 800a2f2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a2fe:	2303      	movs	r3, #3
 800a300:	e178      	b.n	800a5f4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a308:	b29b      	uxth	r3, r3
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d194      	bne.n	800a238 <HAL_SPI_Receive+0x120>
 800a30e:	e15e      	b.n	800a5ce <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	68db      	ldr	r3, [r3, #12]
 800a314:	2b07      	cmp	r3, #7
 800a316:	f240 8153 	bls.w	800a5c0 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a31a:	e08f      	b.n	800a43c <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	695b      	ldr	r3, [r3, #20]
 800a322:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	695b      	ldr	r3, [r3, #20]
 800a32a:	f003 0301 	and.w	r3, r3, #1
 800a32e:	2b01      	cmp	r3, #1
 800a330:	d114      	bne.n	800a35c <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a336:	69ba      	ldr	r2, [r7, #24]
 800a338:	8812      	ldrh	r2, [r2, #0]
 800a33a:	b292      	uxth	r2, r2
 800a33c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a342:	1c9a      	adds	r2, r3, #2
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a34e:	b29b      	uxth	r3, r3
 800a350:	3b01      	subs	r3, #1
 800a352:	b29a      	uxth	r2, r3
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a35a:	e06f      	b.n	800a43c <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a362:	b29b      	uxth	r3, r3
 800a364:	8bfa      	ldrh	r2, [r7, #30]
 800a366:	429a      	cmp	r2, r3
 800a368:	d924      	bls.n	800a3b4 <HAL_SPI_Receive+0x29c>
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a370:	2b00      	cmp	r3, #0
 800a372:	d01f      	beq.n	800a3b4 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a378:	69ba      	ldr	r2, [r7, #24]
 800a37a:	8812      	ldrh	r2, [r2, #0]
 800a37c:	b292      	uxth	r2, r2
 800a37e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a384:	1c9a      	adds	r2, r3, #2
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a38e:	69ba      	ldr	r2, [r7, #24]
 800a390:	8812      	ldrh	r2, [r2, #0]
 800a392:	b292      	uxth	r2, r2
 800a394:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a39a:	1c9a      	adds	r2, r3, #2
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	3b02      	subs	r3, #2
 800a3aa:	b29a      	uxth	r2, r3
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a3b2:	e043      	b.n	800a43c <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a3ba:	b29b      	uxth	r3, r3
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d119      	bne.n	800a3f4 <HAL_SPI_Receive+0x2dc>
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d014      	beq.n	800a3f4 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3ce:	69ba      	ldr	r2, [r7, #24]
 800a3d0:	8812      	ldrh	r2, [r2, #0]
 800a3d2:	b292      	uxth	r2, r2
 800a3d4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3da:	1c9a      	adds	r2, r3, #2
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a3e6:	b29b      	uxth	r3, r3
 800a3e8:	3b01      	subs	r3, #1
 800a3ea:	b29a      	uxth	r2, r3
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a3f2:	e023      	b.n	800a43c <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a3f4:	f7f8 feae 	bl	8003154 <HAL_GetTick>
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	1ad3      	subs	r3, r2, r3
 800a3fe:	683a      	ldr	r2, [r7, #0]
 800a400:	429a      	cmp	r2, r3
 800a402:	d803      	bhi.n	800a40c <HAL_SPI_Receive+0x2f4>
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a40a:	d102      	bne.n	800a412 <HAL_SPI_Receive+0x2fa>
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d114      	bne.n	800a43c <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a412:	68f8      	ldr	r0, [r7, #12]
 800a414:	f000 fc2c 	bl	800ac70 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a41e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2201      	movs	r2, #1
 800a42c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2200      	movs	r2, #0
 800a434:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a438:	2303      	movs	r3, #3
 800a43a:	e0db      	b.n	800a5f4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a442:	b29b      	uxth	r3, r3
 800a444:	2b00      	cmp	r3, #0
 800a446:	f47f af69 	bne.w	800a31c <HAL_SPI_Receive+0x204>
 800a44a:	e0c0      	b.n	800a5ce <HAL_SPI_Receive+0x4b6>
 800a44c:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	695b      	ldr	r3, [r3, #20]
 800a456:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	695b      	ldr	r3, [r3, #20]
 800a45e:	f003 0301 	and.w	r3, r3, #1
 800a462:	2b01      	cmp	r3, #1
 800a464:	d117      	bne.n	800a496 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a472:	7812      	ldrb	r2, [r2, #0]
 800a474:	b2d2      	uxtb	r2, r2
 800a476:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a47c:	1c5a      	adds	r2, r3, #1
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a488:	b29b      	uxth	r3, r3
 800a48a:	3b01      	subs	r3, #1
 800a48c:	b29a      	uxth	r2, r3
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a494:	e094      	b.n	800a5c0 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a49c:	b29b      	uxth	r3, r3
 800a49e:	8bfa      	ldrh	r2, [r7, #30]
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	d946      	bls.n	800a532 <HAL_SPI_Receive+0x41a>
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d041      	beq.n	800a532 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a4ba:	7812      	ldrb	r2, [r2, #0]
 800a4bc:	b2d2      	uxtb	r2, r2
 800a4be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a4c4:	1c5a      	adds	r2, r3, #1
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a4d6:	7812      	ldrb	r2, [r2, #0]
 800a4d8:	b2d2      	uxtb	r2, r2
 800a4da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a4e0:	1c5a      	adds	r2, r3, #1
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a4f2:	7812      	ldrb	r2, [r2, #0]
 800a4f4:	b2d2      	uxtb	r2, r2
 800a4f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a4fc:	1c5a      	adds	r2, r3, #1
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a50e:	7812      	ldrb	r2, [r2, #0]
 800a510:	b2d2      	uxtb	r2, r2
 800a512:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a518:	1c5a      	adds	r2, r3, #1
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a524:	b29b      	uxth	r3, r3
 800a526:	3b04      	subs	r3, #4
 800a528:	b29a      	uxth	r2, r3
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a530:	e046      	b.n	800a5c0 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a538:	b29b      	uxth	r3, r3
 800a53a:	2b03      	cmp	r3, #3
 800a53c:	d81c      	bhi.n	800a578 <HAL_SPI_Receive+0x460>
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800a544:	2b00      	cmp	r3, #0
 800a546:	d017      	beq.n	800a578 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a554:	7812      	ldrb	r2, [r2, #0]
 800a556:	b2d2      	uxtb	r2, r2
 800a558:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a55e:	1c5a      	adds	r2, r3, #1
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a56a:	b29b      	uxth	r3, r3
 800a56c:	3b01      	subs	r3, #1
 800a56e:	b29a      	uxth	r2, r3
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a576:	e023      	b.n	800a5c0 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a578:	f7f8 fdec 	bl	8003154 <HAL_GetTick>
 800a57c:	4602      	mov	r2, r0
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	1ad3      	subs	r3, r2, r3
 800a582:	683a      	ldr	r2, [r7, #0]
 800a584:	429a      	cmp	r2, r3
 800a586:	d803      	bhi.n	800a590 <HAL_SPI_Receive+0x478>
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a58e:	d102      	bne.n	800a596 <HAL_SPI_Receive+0x47e>
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d114      	bne.n	800a5c0 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a596:	68f8      	ldr	r0, [r7, #12]
 800a598:	f000 fb6a 	bl	800ac70 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a5a2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a5bc:	2303      	movs	r3, #3
 800a5be:	e019      	b.n	800a5f4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a5c6:	b29b      	uxth	r3, r3
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	f47f af41 	bne.w	800a450 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a5ce:	68f8      	ldr	r0, [r7, #12]
 800a5d0:	f000 fb4e 	bl	800ac70 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d001      	beq.n	800a5f2 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	e000      	b.n	800a5f4 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800a5f2:	2300      	movs	r3, #0
  }
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3720      	adds	r7, #32
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b08e      	sub	sp, #56	@ 0x38
 800a600:	af02      	add	r7, sp, #8
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	60b9      	str	r1, [r7, #8]
 800a606:	607a      	str	r2, [r7, #4]
 800a608:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	3320      	adds	r3, #32
 800a610:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	3330      	adds	r3, #48	@ 0x30
 800a618:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a61e:	095b      	lsrs	r3, r3, #5
 800a620:	b29b      	uxth	r3, r3
 800a622:	3301      	adds	r3, #1
 800a624:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a626:	f7f8 fd95 	bl	8003154 <HAL_GetTick>
 800a62a:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800a62c:	887b      	ldrh	r3, [r7, #2]
 800a62e:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800a630:	887b      	ldrh	r3, [r7, #2]
 800a632:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a63a:	b2db      	uxtb	r3, r3
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	d001      	beq.n	800a644 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800a640:	2302      	movs	r3, #2
 800a642:	e310      	b.n	800ac66 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d005      	beq.n	800a656 <HAL_SPI_TransmitReceive+0x5a>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d002      	beq.n	800a656 <HAL_SPI_TransmitReceive+0x5a>
 800a650:	887b      	ldrh	r3, [r7, #2]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d101      	bne.n	800a65a <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800a656:	2301      	movs	r3, #1
 800a658:	e305      	b.n	800ac66 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a660:	2b01      	cmp	r3, #1
 800a662:	d101      	bne.n	800a668 <HAL_SPI_TransmitReceive+0x6c>
 800a664:	2302      	movs	r3, #2
 800a666:	e2fe      	b.n	800ac66 <HAL_SPI_TransmitReceive+0x66a>
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2201      	movs	r2, #1
 800a66c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	2205      	movs	r2, #5
 800a674:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2200      	movs	r2, #0
 800a67c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	687a      	ldr	r2, [r7, #4]
 800a684:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	887a      	ldrh	r2, [r7, #2]
 800a68a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	887a      	ldrh	r2, [r7, #2]
 800a692:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	68ba      	ldr	r2, [r7, #8]
 800a69a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	887a      	ldrh	r2, [r7, #2]
 800a6a0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	887a      	ldrh	r2, [r7, #2]
 800a6a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	68da      	ldr	r2, [r3, #12]
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800a6c6:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a70      	ldr	r2, [pc, #448]	@ (800a890 <HAL_SPI_TransmitReceive+0x294>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d009      	beq.n	800a6e6 <HAL_SPI_TransmitReceive+0xea>
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4a6f      	ldr	r2, [pc, #444]	@ (800a894 <HAL_SPI_TransmitReceive+0x298>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d004      	beq.n	800a6e6 <HAL_SPI_TransmitReceive+0xea>
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4a6d      	ldr	r2, [pc, #436]	@ (800a898 <HAL_SPI_TransmitReceive+0x29c>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d102      	bne.n	800a6ec <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800a6e6:	2310      	movs	r3, #16
 800a6e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a6ea:	e001      	b.n	800a6f0 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800a6ec:	2308      	movs	r3, #8
 800a6ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	685a      	ldr	r2, [r3, #4]
 800a6f6:	4b69      	ldr	r3, [pc, #420]	@ (800a89c <HAL_SPI_TransmitReceive+0x2a0>)
 800a6f8:	4013      	ands	r3, r2
 800a6fa:	8879      	ldrh	r1, [r7, #2]
 800a6fc:	68fa      	ldr	r2, [r7, #12]
 800a6fe:	6812      	ldr	r2, [r2, #0]
 800a700:	430b      	orrs	r3, r1
 800a702:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	681a      	ldr	r2, [r3, #0]
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f042 0201 	orr.w	r2, r2, #1
 800a712:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	685b      	ldr	r3, [r3, #4]
 800a718:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a71c:	d107      	bne.n	800a72e <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	681a      	ldr	r2, [r3, #0]
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a72c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	68db      	ldr	r3, [r3, #12]
 800a732:	2b0f      	cmp	r3, #15
 800a734:	f240 80a2 	bls.w	800a87c <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800a738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a73a:	089b      	lsrs	r3, r3, #2
 800a73c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a73e:	e094      	b.n	800a86a <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	695b      	ldr	r3, [r3, #20]
 800a746:	f003 0302 	and.w	r3, r3, #2
 800a74a:	2b02      	cmp	r3, #2
 800a74c:	d120      	bne.n	800a790 <HAL_SPI_TransmitReceive+0x194>
 800a74e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a750:	2b00      	cmp	r3, #0
 800a752:	d01d      	beq.n	800a790 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800a754:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a756:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800a758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a75a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a75c:	429a      	cmp	r2, r3
 800a75e:	d217      	bcs.n	800a790 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	6812      	ldr	r2, [r2, #0]
 800a76a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a770:	1d1a      	adds	r2, r3, #4
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a77c:	b29b      	uxth	r3, r3
 800a77e:	3b01      	subs	r3, #1
 800a780:	b29a      	uxth	r2, r3
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a78e:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	695b      	ldr	r3, [r3, #20]
 800a796:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800a798:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d065      	beq.n	800a86a <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	695b      	ldr	r3, [r3, #20]
 800a7a4:	f003 0301 	and.w	r3, r3, #1
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d118      	bne.n	800a7de <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681a      	ldr	r2, [r3, #0]
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7b4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a7b6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7bc:	1d1a      	adds	r2, r3, #4
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a7c8:	b29b      	uxth	r3, r3
 800a7ca:	3b01      	subs	r3, #1
 800a7cc:	b29a      	uxth	r2, r3
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a7da:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a7dc:	e045      	b.n	800a86a <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a7de:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a7e0:	8bfb      	ldrh	r3, [r7, #30]
 800a7e2:	429a      	cmp	r2, r3
 800a7e4:	d21d      	bcs.n	800a822 <HAL_SPI_TransmitReceive+0x226>
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d018      	beq.n	800a822 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681a      	ldr	r2, [r3, #0]
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7f8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a7fa:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a800:	1d1a      	adds	r2, r3, #4
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a80c:	b29b      	uxth	r3, r3
 800a80e:	3b01      	subs	r3, #1
 800a810:	b29a      	uxth	r2, r3
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a81e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a820:	e023      	b.n	800a86a <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a822:	f7f8 fc97 	bl	8003154 <HAL_GetTick>
 800a826:	4602      	mov	r2, r0
 800a828:	69bb      	ldr	r3, [r7, #24]
 800a82a:	1ad3      	subs	r3, r2, r3
 800a82c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a82e:	429a      	cmp	r2, r3
 800a830:	d803      	bhi.n	800a83a <HAL_SPI_TransmitReceive+0x23e>
 800a832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a834:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a838:	d102      	bne.n	800a840 <HAL_SPI_TransmitReceive+0x244>
 800a83a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d114      	bne.n	800a86a <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800a840:	68f8      	ldr	r0, [r7, #12]
 800a842:	f000 fa15 	bl	800ac70 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a84c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2201      	movs	r2, #1
 800a85a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2200      	movs	r2, #0
 800a862:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800a866:	2303      	movs	r3, #3
 800a868:	e1fd      	b.n	800ac66 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a86a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	f47f af67 	bne.w	800a740 <HAL_SPI_TransmitReceive+0x144>
 800a872:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a874:	2b00      	cmp	r3, #0
 800a876:	f47f af63 	bne.w	800a740 <HAL_SPI_TransmitReceive+0x144>
 800a87a:	e1ce      	b.n	800ac1a <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	68db      	ldr	r3, [r3, #12]
 800a880:	2b07      	cmp	r3, #7
 800a882:	f240 81c2 	bls.w	800ac0a <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800a886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a888:	085b      	lsrs	r3, r3, #1
 800a88a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a88c:	e0c9      	b.n	800aa22 <HAL_SPI_TransmitReceive+0x426>
 800a88e:	bf00      	nop
 800a890:	40013000 	.word	0x40013000
 800a894:	40003800 	.word	0x40003800
 800a898:	40003c00 	.word	0x40003c00
 800a89c:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	695b      	ldr	r3, [r3, #20]
 800a8a6:	f003 0302 	and.w	r3, r3, #2
 800a8aa:	2b02      	cmp	r3, #2
 800a8ac:	d11f      	bne.n	800a8ee <HAL_SPI_TransmitReceive+0x2f2>
 800a8ae:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d01c      	beq.n	800a8ee <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800a8b4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a8b6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800a8b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8ba:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d216      	bcs.n	800a8ee <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a8c4:	881a      	ldrh	r2, [r3, #0]
 800a8c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8c8:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a8ce:	1c9a      	adds	r2, r3, #2
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a8da:	b29b      	uxth	r3, r3
 800a8dc:	3b01      	subs	r3, #1
 800a8de:	b29a      	uxth	r2, r3
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a8ec:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	695b      	ldr	r3, [r3, #20]
 800a8f4:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800a8f6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	f000 8092 	beq.w	800aa22 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	695b      	ldr	r3, [r3, #20]
 800a904:	f003 0301 	and.w	r3, r3, #1
 800a908:	2b01      	cmp	r3, #1
 800a90a:	d118      	bne.n	800a93e <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a910:	6a3a      	ldr	r2, [r7, #32]
 800a912:	8812      	ldrh	r2, [r2, #0]
 800a914:	b292      	uxth	r2, r2
 800a916:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a91c:	1c9a      	adds	r2, r3, #2
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a928:	b29b      	uxth	r3, r3
 800a92a:	3b01      	subs	r3, #1
 800a92c:	b29a      	uxth	r2, r3
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a93a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a93c:	e071      	b.n	800aa22 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a93e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a940:	8bfb      	ldrh	r3, [r7, #30]
 800a942:	429a      	cmp	r2, r3
 800a944:	d228      	bcs.n	800a998 <HAL_SPI_TransmitReceive+0x39c>
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d023      	beq.n	800a998 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a954:	6a3a      	ldr	r2, [r7, #32]
 800a956:	8812      	ldrh	r2, [r2, #0]
 800a958:	b292      	uxth	r2, r2
 800a95a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a960:	1c9a      	adds	r2, r3, #2
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a96a:	6a3a      	ldr	r2, [r7, #32]
 800a96c:	8812      	ldrh	r2, [r2, #0]
 800a96e:	b292      	uxth	r2, r2
 800a970:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a976:	1c9a      	adds	r2, r3, #2
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a982:	b29b      	uxth	r3, r3
 800a984:	3b02      	subs	r3, #2
 800a986:	b29a      	uxth	r2, r3
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a994:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a996:	e044      	b.n	800aa22 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800a998:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a99a:	2b01      	cmp	r3, #1
 800a99c:	d11d      	bne.n	800a9da <HAL_SPI_TransmitReceive+0x3de>
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d018      	beq.n	800a9da <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9ac:	6a3a      	ldr	r2, [r7, #32]
 800a9ae:	8812      	ldrh	r2, [r2, #0]
 800a9b0:	b292      	uxth	r2, r2
 800a9b2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9b8:	1c9a      	adds	r2, r3, #2
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a9c4:	b29b      	uxth	r3, r3
 800a9c6:	3b01      	subs	r3, #1
 800a9c8:	b29a      	uxth	r2, r3
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a9d6:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a9d8:	e023      	b.n	800aa22 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a9da:	f7f8 fbbb 	bl	8003154 <HAL_GetTick>
 800a9de:	4602      	mov	r2, r0
 800a9e0:	69bb      	ldr	r3, [r7, #24]
 800a9e2:	1ad3      	subs	r3, r2, r3
 800a9e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a9e6:	429a      	cmp	r2, r3
 800a9e8:	d803      	bhi.n	800a9f2 <HAL_SPI_TransmitReceive+0x3f6>
 800a9ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9f0:	d102      	bne.n	800a9f8 <HAL_SPI_TransmitReceive+0x3fc>
 800a9f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d114      	bne.n	800aa22 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800a9f8:	68f8      	ldr	r0, [r7, #12]
 800a9fa:	f000 f939 	bl	800ac70 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa04:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	2201      	movs	r2, #1
 800aa12:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800aa1e:	2303      	movs	r3, #3
 800aa20:	e121      	b.n	800ac66 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800aa22:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	f47f af3b 	bne.w	800a8a0 <HAL_SPI_TransmitReceive+0x2a4>
 800aa2a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	f47f af37 	bne.w	800a8a0 <HAL_SPI_TransmitReceive+0x2a4>
 800aa32:	e0f2      	b.n	800ac1a <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	695b      	ldr	r3, [r3, #20]
 800aa3a:	f003 0302 	and.w	r3, r3, #2
 800aa3e:	2b02      	cmp	r3, #2
 800aa40:	d121      	bne.n	800aa86 <HAL_SPI_TransmitReceive+0x48a>
 800aa42:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d01e      	beq.n	800aa86 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800aa48:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800aa4a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800aa4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa4e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d218      	bcs.n	800aa86 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	3320      	adds	r3, #32
 800aa5e:	7812      	ldrb	r2, [r2, #0]
 800aa60:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aa66:	1c5a      	adds	r2, r3, #1
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800aa72:	b29b      	uxth	r3, r3
 800aa74:	3b01      	subs	r3, #1
 800aa76:	b29a      	uxth	r2, r3
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800aa84:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	695b      	ldr	r3, [r3, #20]
 800aa8c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800aa8e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	f000 80ba 	beq.w	800ac0a <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	695b      	ldr	r3, [r3, #20]
 800aa9c:	f003 0301 	and.w	r3, r3, #1
 800aaa0:	2b01      	cmp	r3, #1
 800aaa2:	d11b      	bne.n	800aadc <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aab0:	7812      	ldrb	r2, [r2, #0]
 800aab2:	b2d2      	uxtb	r2, r2
 800aab4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aaba:	1c5a      	adds	r2, r3, #1
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aac6:	b29b      	uxth	r3, r3
 800aac8:	3b01      	subs	r3, #1
 800aaca:	b29a      	uxth	r2, r3
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aad8:	853b      	strh	r3, [r7, #40]	@ 0x28
 800aada:	e096      	b.n	800ac0a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800aadc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800aade:	8bfb      	ldrh	r3, [r7, #30]
 800aae0:	429a      	cmp	r2, r3
 800aae2:	d24a      	bcs.n	800ab7a <HAL_SPI_TransmitReceive+0x57e>
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d045      	beq.n	800ab7a <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aafa:	7812      	ldrb	r2, [r2, #0]
 800aafc:	b2d2      	uxtb	r2, r2
 800aafe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab04:	1c5a      	adds	r2, r3, #1
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab16:	7812      	ldrb	r2, [r2, #0]
 800ab18:	b2d2      	uxtb	r2, r2
 800ab1a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab20:	1c5a      	adds	r2, r3, #1
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab32:	7812      	ldrb	r2, [r2, #0]
 800ab34:	b2d2      	uxtb	r2, r2
 800ab36:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab3c:	1c5a      	adds	r2, r3, #1
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab4e:	7812      	ldrb	r2, [r2, #0]
 800ab50:	b2d2      	uxtb	r2, r2
 800ab52:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab58:	1c5a      	adds	r2, r3, #1
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ab64:	b29b      	uxth	r3, r3
 800ab66:	3b04      	subs	r3, #4
 800ab68:	b29a      	uxth	r2, r3
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ab76:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ab78:	e047      	b.n	800ac0a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800ab7a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ab7c:	2b03      	cmp	r3, #3
 800ab7e:	d820      	bhi.n	800abc2 <HAL_SPI_TransmitReceive+0x5c6>
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d01b      	beq.n	800abc2 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab96:	7812      	ldrb	r2, [r2, #0]
 800ab98:	b2d2      	uxtb	r2, r2
 800ab9a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aba0:	1c5a      	adds	r2, r3, #1
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800abac:	b29b      	uxth	r3, r3
 800abae:	3b01      	subs	r3, #1
 800abb0:	b29a      	uxth	r2, r3
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800abbe:	853b      	strh	r3, [r7, #40]	@ 0x28
 800abc0:	e023      	b.n	800ac0a <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800abc2:	f7f8 fac7 	bl	8003154 <HAL_GetTick>
 800abc6:	4602      	mov	r2, r0
 800abc8:	69bb      	ldr	r3, [r7, #24]
 800abca:	1ad3      	subs	r3, r2, r3
 800abcc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800abce:	429a      	cmp	r2, r3
 800abd0:	d803      	bhi.n	800abda <HAL_SPI_TransmitReceive+0x5de>
 800abd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abd8:	d102      	bne.n	800abe0 <HAL_SPI_TransmitReceive+0x5e4>
 800abda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d114      	bne.n	800ac0a <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800abe0:	68f8      	ldr	r0, [r7, #12]
 800abe2:	f000 f845 	bl	800ac70 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800abec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2201      	movs	r2, #1
 800abfa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	2200      	movs	r2, #0
 800ac02:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800ac06:	2303      	movs	r3, #3
 800ac08:	e02d      	b.n	800ac66 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ac0a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	f47f af11 	bne.w	800aa34 <HAL_SPI_TransmitReceive+0x438>
 800ac12:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	f47f af0d 	bne.w	800aa34 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800ac1a:	69bb      	ldr	r3, [r7, #24]
 800ac1c:	9300      	str	r3, [sp, #0]
 800ac1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac20:	2200      	movs	r2, #0
 800ac22:	2108      	movs	r1, #8
 800ac24:	68f8      	ldr	r0, [r7, #12]
 800ac26:	f000 f8c3 	bl	800adb0 <SPI_WaitOnFlagUntilTimeout>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d007      	beq.n	800ac40 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac36:	f043 0220 	orr.w	r2, r3, #32
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ac40:	68f8      	ldr	r0, [r7, #12]
 800ac42:	f000 f815 	bl	800ac70 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	2201      	movs	r2, #1
 800ac4a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	2200      	movs	r2, #0
 800ac52:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d001      	beq.n	800ac64 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800ac60:	2301      	movs	r3, #1
 800ac62:	e000      	b.n	800ac66 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800ac64:	2300      	movs	r3, #0
  }
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3730      	adds	r7, #48	@ 0x30
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}
 800ac6e:	bf00      	nop

0800ac70 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800ac70:	b480      	push	{r7}
 800ac72:	b085      	sub	sp, #20
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	695b      	ldr	r3, [r3, #20]
 800ac7e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	699a      	ldr	r2, [r3, #24]
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f042 0208 	orr.w	r2, r2, #8
 800ac8e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	699a      	ldr	r2, [r3, #24]
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f042 0210 	orr.w	r2, r2, #16
 800ac9e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	681a      	ldr	r2, [r3, #0]
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f022 0201 	bic.w	r2, r2, #1
 800acae:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	6919      	ldr	r1, [r3, #16]
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681a      	ldr	r2, [r3, #0]
 800acba:	4b3c      	ldr	r3, [pc, #240]	@ (800adac <SPI_CloseTransfer+0x13c>)
 800acbc:	400b      	ands	r3, r1
 800acbe:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	689a      	ldr	r2, [r3, #8]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800acce:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800acd6:	b2db      	uxtb	r3, r3
 800acd8:	2b04      	cmp	r3, #4
 800acda:	d014      	beq.n	800ad06 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	f003 0320 	and.w	r3, r3, #32
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d00f      	beq.n	800ad06 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800acec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	699a      	ldr	r2, [r3, #24]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f042 0220 	orr.w	r2, r2, #32
 800ad04:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ad0c:	b2db      	uxtb	r3, r3
 800ad0e:	2b03      	cmp	r3, #3
 800ad10:	d014      	beq.n	800ad3c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d00f      	beq.n	800ad3c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad22:	f043 0204 	orr.w	r2, r3, #4
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	699a      	ldr	r2, [r3, #24]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ad3a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d00f      	beq.n	800ad66 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad4c:	f043 0201 	orr.w	r2, r3, #1
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	699a      	ldr	r2, [r3, #24]
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ad64:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d00f      	beq.n	800ad90 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad76:	f043 0208 	orr.w	r2, r3, #8
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	699a      	ldr	r2, [r3, #24]
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ad8e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2200      	movs	r2, #0
 800ad94:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800ada0:	bf00      	nop
 800ada2:	3714      	adds	r7, #20
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr
 800adac:	fffffc90 	.word	0xfffffc90

0800adb0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b084      	sub	sp, #16
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	60f8      	str	r0, [r7, #12]
 800adb8:	60b9      	str	r1, [r7, #8]
 800adba:	603b      	str	r3, [r7, #0]
 800adbc:	4613      	mov	r3, r2
 800adbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800adc0:	e010      	b.n	800ade4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800adc2:	f7f8 f9c7 	bl	8003154 <HAL_GetTick>
 800adc6:	4602      	mov	r2, r0
 800adc8:	69bb      	ldr	r3, [r7, #24]
 800adca:	1ad3      	subs	r3, r2, r3
 800adcc:	683a      	ldr	r2, [r7, #0]
 800adce:	429a      	cmp	r2, r3
 800add0:	d803      	bhi.n	800adda <SPI_WaitOnFlagUntilTimeout+0x2a>
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800add8:	d102      	bne.n	800ade0 <SPI_WaitOnFlagUntilTimeout+0x30>
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d101      	bne.n	800ade4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800ade0:	2303      	movs	r3, #3
 800ade2:	e00f      	b.n	800ae04 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	695a      	ldr	r2, [r3, #20]
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	4013      	ands	r3, r2
 800adee:	68ba      	ldr	r2, [r7, #8]
 800adf0:	429a      	cmp	r2, r3
 800adf2:	bf0c      	ite	eq
 800adf4:	2301      	moveq	r3, #1
 800adf6:	2300      	movne	r3, #0
 800adf8:	b2db      	uxtb	r3, r3
 800adfa:	461a      	mov	r2, r3
 800adfc:	79fb      	ldrb	r3, [r7, #7]
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d0df      	beq.n	800adc2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800ae02:	2300      	movs	r3, #0
}
 800ae04:	4618      	mov	r0, r3
 800ae06:	3710      	adds	r7, #16
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}

0800ae0c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b085      	sub	sp, #20
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae18:	095b      	lsrs	r3, r3, #5
 800ae1a:	3301      	adds	r3, #1
 800ae1c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	68db      	ldr	r3, [r3, #12]
 800ae22:	3301      	adds	r3, #1
 800ae24:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	3307      	adds	r3, #7
 800ae2a:	08db      	lsrs	r3, r3, #3
 800ae2c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	68fa      	ldr	r2, [r7, #12]
 800ae32:	fb02 f303 	mul.w	r3, r2, r3
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3714      	adds	r7, #20
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae40:	4770      	bx	lr

0800ae42 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ae42:	b580      	push	{r7, lr}
 800ae44:	b082      	sub	sp, #8
 800ae46:	af00      	add	r7, sp, #0
 800ae48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d101      	bne.n	800ae54 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ae50:	2301      	movs	r3, #1
 800ae52:	e049      	b.n	800aee8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ae5a:	b2db      	uxtb	r3, r3
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d106      	bne.n	800ae6e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2200      	movs	r2, #0
 800ae64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f7f7 fdcd 	bl	8002a08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2202      	movs	r2, #2
 800ae72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681a      	ldr	r2, [r3, #0]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	3304      	adds	r3, #4
 800ae7e:	4619      	mov	r1, r3
 800ae80:	4610      	mov	r0, r2
 800ae82:	f000 faaf 	bl	800b3e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2201      	movs	r2, #1
 800ae8a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2201      	movs	r2, #1
 800ae92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2201      	movs	r2, #1
 800ae9a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2201      	movs	r2, #1
 800aea2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2201      	movs	r2, #1
 800aeaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2201      	movs	r2, #1
 800aeb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2201      	movs	r2, #1
 800aeba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2201      	movs	r2, #1
 800aec2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2201      	movs	r2, #1
 800aeca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2201      	movs	r2, #1
 800aed2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2201      	movs	r2, #1
 800aeda:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2201      	movs	r2, #1
 800aee2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aee6:	2300      	movs	r3, #0
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	3708      	adds	r7, #8
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}

0800aef0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b082      	sub	sp, #8
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d101      	bne.n	800af02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800aefe:	2301      	movs	r3, #1
 800af00:	e049      	b.n	800af96 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800af08:	b2db      	uxtb	r3, r3
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d106      	bne.n	800af1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2200      	movs	r2, #0
 800af12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f7f7 fd28 	bl	800296c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2202      	movs	r2, #2
 800af20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681a      	ldr	r2, [r3, #0]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	3304      	adds	r3, #4
 800af2c:	4619      	mov	r1, r3
 800af2e:	4610      	mov	r0, r2
 800af30:	f000 fa58 	bl	800b3e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2201      	movs	r2, #1
 800af38:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2201      	movs	r2, #1
 800af40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2201      	movs	r2, #1
 800af48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2201      	movs	r2, #1
 800af50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2201      	movs	r2, #1
 800af58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2201      	movs	r2, #1
 800af60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2201      	movs	r2, #1
 800af68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2201      	movs	r2, #1
 800af70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2201      	movs	r2, #1
 800af78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2201      	movs	r2, #1
 800af80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2201      	movs	r2, #1
 800af88:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2201      	movs	r2, #1
 800af90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800af94:	2300      	movs	r3, #0
}
 800af96:	4618      	mov	r0, r3
 800af98:	3708      	adds	r7, #8
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}
	...

0800afa0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b084      	sub	sp, #16
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d109      	bne.n	800afc4 <HAL_TIM_PWM_Start+0x24>
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800afb6:	b2db      	uxtb	r3, r3
 800afb8:	2b01      	cmp	r3, #1
 800afba:	bf14      	ite	ne
 800afbc:	2301      	movne	r3, #1
 800afbe:	2300      	moveq	r3, #0
 800afc0:	b2db      	uxtb	r3, r3
 800afc2:	e03c      	b.n	800b03e <HAL_TIM_PWM_Start+0x9e>
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	2b04      	cmp	r3, #4
 800afc8:	d109      	bne.n	800afde <HAL_TIM_PWM_Start+0x3e>
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800afd0:	b2db      	uxtb	r3, r3
 800afd2:	2b01      	cmp	r3, #1
 800afd4:	bf14      	ite	ne
 800afd6:	2301      	movne	r3, #1
 800afd8:	2300      	moveq	r3, #0
 800afda:	b2db      	uxtb	r3, r3
 800afdc:	e02f      	b.n	800b03e <HAL_TIM_PWM_Start+0x9e>
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	2b08      	cmp	r3, #8
 800afe2:	d109      	bne.n	800aff8 <HAL_TIM_PWM_Start+0x58>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800afea:	b2db      	uxtb	r3, r3
 800afec:	2b01      	cmp	r3, #1
 800afee:	bf14      	ite	ne
 800aff0:	2301      	movne	r3, #1
 800aff2:	2300      	moveq	r3, #0
 800aff4:	b2db      	uxtb	r3, r3
 800aff6:	e022      	b.n	800b03e <HAL_TIM_PWM_Start+0x9e>
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	2b0c      	cmp	r3, #12
 800affc:	d109      	bne.n	800b012 <HAL_TIM_PWM_Start+0x72>
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b004:	b2db      	uxtb	r3, r3
 800b006:	2b01      	cmp	r3, #1
 800b008:	bf14      	ite	ne
 800b00a:	2301      	movne	r3, #1
 800b00c:	2300      	moveq	r3, #0
 800b00e:	b2db      	uxtb	r3, r3
 800b010:	e015      	b.n	800b03e <HAL_TIM_PWM_Start+0x9e>
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	2b10      	cmp	r3, #16
 800b016:	d109      	bne.n	800b02c <HAL_TIM_PWM_Start+0x8c>
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b01e:	b2db      	uxtb	r3, r3
 800b020:	2b01      	cmp	r3, #1
 800b022:	bf14      	ite	ne
 800b024:	2301      	movne	r3, #1
 800b026:	2300      	moveq	r3, #0
 800b028:	b2db      	uxtb	r3, r3
 800b02a:	e008      	b.n	800b03e <HAL_TIM_PWM_Start+0x9e>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b032:	b2db      	uxtb	r3, r3
 800b034:	2b01      	cmp	r3, #1
 800b036:	bf14      	ite	ne
 800b038:	2301      	movne	r3, #1
 800b03a:	2300      	moveq	r3, #0
 800b03c:	b2db      	uxtb	r3, r3
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d001      	beq.n	800b046 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b042:	2301      	movs	r3, #1
 800b044:	e0a1      	b.n	800b18a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d104      	bne.n	800b056 <HAL_TIM_PWM_Start+0xb6>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2202      	movs	r2, #2
 800b050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b054:	e023      	b.n	800b09e <HAL_TIM_PWM_Start+0xfe>
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	2b04      	cmp	r3, #4
 800b05a:	d104      	bne.n	800b066 <HAL_TIM_PWM_Start+0xc6>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2202      	movs	r2, #2
 800b060:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b064:	e01b      	b.n	800b09e <HAL_TIM_PWM_Start+0xfe>
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	2b08      	cmp	r3, #8
 800b06a:	d104      	bne.n	800b076 <HAL_TIM_PWM_Start+0xd6>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2202      	movs	r2, #2
 800b070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b074:	e013      	b.n	800b09e <HAL_TIM_PWM_Start+0xfe>
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	2b0c      	cmp	r3, #12
 800b07a:	d104      	bne.n	800b086 <HAL_TIM_PWM_Start+0xe6>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2202      	movs	r2, #2
 800b080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b084:	e00b      	b.n	800b09e <HAL_TIM_PWM_Start+0xfe>
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	2b10      	cmp	r3, #16
 800b08a:	d104      	bne.n	800b096 <HAL_TIM_PWM_Start+0xf6>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2202      	movs	r2, #2
 800b090:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b094:	e003      	b.n	800b09e <HAL_TIM_PWM_Start+0xfe>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2202      	movs	r2, #2
 800b09a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	6839      	ldr	r1, [r7, #0]
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f000 fd18 	bl	800badc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	4a38      	ldr	r2, [pc, #224]	@ (800b194 <HAL_TIM_PWM_Start+0x1f4>)
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d013      	beq.n	800b0de <HAL_TIM_PWM_Start+0x13e>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4a37      	ldr	r2, [pc, #220]	@ (800b198 <HAL_TIM_PWM_Start+0x1f8>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d00e      	beq.n	800b0de <HAL_TIM_PWM_Start+0x13e>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	4a35      	ldr	r2, [pc, #212]	@ (800b19c <HAL_TIM_PWM_Start+0x1fc>)
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	d009      	beq.n	800b0de <HAL_TIM_PWM_Start+0x13e>
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	4a34      	ldr	r2, [pc, #208]	@ (800b1a0 <HAL_TIM_PWM_Start+0x200>)
 800b0d0:	4293      	cmp	r3, r2
 800b0d2:	d004      	beq.n	800b0de <HAL_TIM_PWM_Start+0x13e>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	4a32      	ldr	r2, [pc, #200]	@ (800b1a4 <HAL_TIM_PWM_Start+0x204>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d101      	bne.n	800b0e2 <HAL_TIM_PWM_Start+0x142>
 800b0de:	2301      	movs	r3, #1
 800b0e0:	e000      	b.n	800b0e4 <HAL_TIM_PWM_Start+0x144>
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d007      	beq.n	800b0f8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b0f6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	4a25      	ldr	r2, [pc, #148]	@ (800b194 <HAL_TIM_PWM_Start+0x1f4>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d022      	beq.n	800b148 <HAL_TIM_PWM_Start+0x1a8>
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b10a:	d01d      	beq.n	800b148 <HAL_TIM_PWM_Start+0x1a8>
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4a25      	ldr	r2, [pc, #148]	@ (800b1a8 <HAL_TIM_PWM_Start+0x208>)
 800b112:	4293      	cmp	r3, r2
 800b114:	d018      	beq.n	800b148 <HAL_TIM_PWM_Start+0x1a8>
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	4a24      	ldr	r2, [pc, #144]	@ (800b1ac <HAL_TIM_PWM_Start+0x20c>)
 800b11c:	4293      	cmp	r3, r2
 800b11e:	d013      	beq.n	800b148 <HAL_TIM_PWM_Start+0x1a8>
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	4a22      	ldr	r2, [pc, #136]	@ (800b1b0 <HAL_TIM_PWM_Start+0x210>)
 800b126:	4293      	cmp	r3, r2
 800b128:	d00e      	beq.n	800b148 <HAL_TIM_PWM_Start+0x1a8>
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	4a1a      	ldr	r2, [pc, #104]	@ (800b198 <HAL_TIM_PWM_Start+0x1f8>)
 800b130:	4293      	cmp	r3, r2
 800b132:	d009      	beq.n	800b148 <HAL_TIM_PWM_Start+0x1a8>
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	4a1e      	ldr	r2, [pc, #120]	@ (800b1b4 <HAL_TIM_PWM_Start+0x214>)
 800b13a:	4293      	cmp	r3, r2
 800b13c:	d004      	beq.n	800b148 <HAL_TIM_PWM_Start+0x1a8>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	4a16      	ldr	r2, [pc, #88]	@ (800b19c <HAL_TIM_PWM_Start+0x1fc>)
 800b144:	4293      	cmp	r3, r2
 800b146:	d115      	bne.n	800b174 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	689a      	ldr	r2, [r3, #8]
 800b14e:	4b1a      	ldr	r3, [pc, #104]	@ (800b1b8 <HAL_TIM_PWM_Start+0x218>)
 800b150:	4013      	ands	r3, r2
 800b152:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	2b06      	cmp	r3, #6
 800b158:	d015      	beq.n	800b186 <HAL_TIM_PWM_Start+0x1e6>
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b160:	d011      	beq.n	800b186 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	681a      	ldr	r2, [r3, #0]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f042 0201 	orr.w	r2, r2, #1
 800b170:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b172:	e008      	b.n	800b186 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	681a      	ldr	r2, [r3, #0]
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f042 0201 	orr.w	r2, r2, #1
 800b182:	601a      	str	r2, [r3, #0]
 800b184:	e000      	b.n	800b188 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b186:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b188:	2300      	movs	r3, #0
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3710      	adds	r7, #16
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
 800b192:	bf00      	nop
 800b194:	40010000 	.word	0x40010000
 800b198:	40010400 	.word	0x40010400
 800b19c:	40014000 	.word	0x40014000
 800b1a0:	40014400 	.word	0x40014400
 800b1a4:	40014800 	.word	0x40014800
 800b1a8:	40000400 	.word	0x40000400
 800b1ac:	40000800 	.word	0x40000800
 800b1b0:	40000c00 	.word	0x40000c00
 800b1b4:	40001800 	.word	0x40001800
 800b1b8:	00010007 	.word	0x00010007

0800b1bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b086      	sub	sp, #24
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	60f8      	str	r0, [r7, #12]
 800b1c4:	60b9      	str	r1, [r7, #8]
 800b1c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b1d2:	2b01      	cmp	r3, #1
 800b1d4:	d101      	bne.n	800b1da <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b1d6:	2302      	movs	r3, #2
 800b1d8:	e0ff      	b.n	800b3da <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	2201      	movs	r2, #1
 800b1de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2b14      	cmp	r3, #20
 800b1e6:	f200 80f0 	bhi.w	800b3ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b1ea:	a201      	add	r2, pc, #4	@ (adr r2, 800b1f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b1ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1f0:	0800b245 	.word	0x0800b245
 800b1f4:	0800b3cb 	.word	0x0800b3cb
 800b1f8:	0800b3cb 	.word	0x0800b3cb
 800b1fc:	0800b3cb 	.word	0x0800b3cb
 800b200:	0800b285 	.word	0x0800b285
 800b204:	0800b3cb 	.word	0x0800b3cb
 800b208:	0800b3cb 	.word	0x0800b3cb
 800b20c:	0800b3cb 	.word	0x0800b3cb
 800b210:	0800b2c7 	.word	0x0800b2c7
 800b214:	0800b3cb 	.word	0x0800b3cb
 800b218:	0800b3cb 	.word	0x0800b3cb
 800b21c:	0800b3cb 	.word	0x0800b3cb
 800b220:	0800b307 	.word	0x0800b307
 800b224:	0800b3cb 	.word	0x0800b3cb
 800b228:	0800b3cb 	.word	0x0800b3cb
 800b22c:	0800b3cb 	.word	0x0800b3cb
 800b230:	0800b349 	.word	0x0800b349
 800b234:	0800b3cb 	.word	0x0800b3cb
 800b238:	0800b3cb 	.word	0x0800b3cb
 800b23c:	0800b3cb 	.word	0x0800b3cb
 800b240:	0800b389 	.word	0x0800b389
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	68b9      	ldr	r1, [r7, #8]
 800b24a:	4618      	mov	r0, r3
 800b24c:	f000 f970 	bl	800b530 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	699a      	ldr	r2, [r3, #24]
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f042 0208 	orr.w	r2, r2, #8
 800b25e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	699a      	ldr	r2, [r3, #24]
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f022 0204 	bic.w	r2, r2, #4
 800b26e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	6999      	ldr	r1, [r3, #24]
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	691a      	ldr	r2, [r3, #16]
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	430a      	orrs	r2, r1
 800b280:	619a      	str	r2, [r3, #24]
      break;
 800b282:	e0a5      	b.n	800b3d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	68b9      	ldr	r1, [r7, #8]
 800b28a:	4618      	mov	r0, r3
 800b28c:	f000 f9e0 	bl	800b650 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	699a      	ldr	r2, [r3, #24]
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b29e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	699a      	ldr	r2, [r3, #24]
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b2ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	6999      	ldr	r1, [r3, #24]
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	691b      	ldr	r3, [r3, #16]
 800b2ba:	021a      	lsls	r2, r3, #8
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	430a      	orrs	r2, r1
 800b2c2:	619a      	str	r2, [r3, #24]
      break;
 800b2c4:	e084      	b.n	800b3d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	68b9      	ldr	r1, [r7, #8]
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f000 fa49 	bl	800b764 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	69da      	ldr	r2, [r3, #28]
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f042 0208 	orr.w	r2, r2, #8
 800b2e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	69da      	ldr	r2, [r3, #28]
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f022 0204 	bic.w	r2, r2, #4
 800b2f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	69d9      	ldr	r1, [r3, #28]
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	691a      	ldr	r2, [r3, #16]
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	430a      	orrs	r2, r1
 800b302:	61da      	str	r2, [r3, #28]
      break;
 800b304:	e064      	b.n	800b3d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	68b9      	ldr	r1, [r7, #8]
 800b30c:	4618      	mov	r0, r3
 800b30e:	f000 fab1 	bl	800b874 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	69da      	ldr	r2, [r3, #28]
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b320:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	69da      	ldr	r2, [r3, #28]
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b330:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	69d9      	ldr	r1, [r3, #28]
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	691b      	ldr	r3, [r3, #16]
 800b33c:	021a      	lsls	r2, r3, #8
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	430a      	orrs	r2, r1
 800b344:	61da      	str	r2, [r3, #28]
      break;
 800b346:	e043      	b.n	800b3d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	68b9      	ldr	r1, [r7, #8]
 800b34e:	4618      	mov	r0, r3
 800b350:	f000 fafa 	bl	800b948 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f042 0208 	orr.w	r2, r2, #8
 800b362:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f022 0204 	bic.w	r2, r2, #4
 800b372:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	691a      	ldr	r2, [r3, #16]
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	430a      	orrs	r2, r1
 800b384:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b386:	e023      	b.n	800b3d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	68b9      	ldr	r1, [r7, #8]
 800b38e:	4618      	mov	r0, r3
 800b390:	f000 fb3e 	bl	800ba10 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b3a2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b3b2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	691b      	ldr	r3, [r3, #16]
 800b3be:	021a      	lsls	r2, r3, #8
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	430a      	orrs	r2, r1
 800b3c6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b3c8:	e002      	b.n	800b3d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	75fb      	strb	r3, [r7, #23]
      break;
 800b3ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b3d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3718      	adds	r7, #24
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}
 800b3e2:	bf00      	nop

0800b3e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b085      	sub	sp, #20
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
 800b3ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	4a46      	ldr	r2, [pc, #280]	@ (800b510 <TIM_Base_SetConfig+0x12c>)
 800b3f8:	4293      	cmp	r3, r2
 800b3fa:	d013      	beq.n	800b424 <TIM_Base_SetConfig+0x40>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b402:	d00f      	beq.n	800b424 <TIM_Base_SetConfig+0x40>
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	4a43      	ldr	r2, [pc, #268]	@ (800b514 <TIM_Base_SetConfig+0x130>)
 800b408:	4293      	cmp	r3, r2
 800b40a:	d00b      	beq.n	800b424 <TIM_Base_SetConfig+0x40>
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	4a42      	ldr	r2, [pc, #264]	@ (800b518 <TIM_Base_SetConfig+0x134>)
 800b410:	4293      	cmp	r3, r2
 800b412:	d007      	beq.n	800b424 <TIM_Base_SetConfig+0x40>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	4a41      	ldr	r2, [pc, #260]	@ (800b51c <TIM_Base_SetConfig+0x138>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d003      	beq.n	800b424 <TIM_Base_SetConfig+0x40>
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	4a40      	ldr	r2, [pc, #256]	@ (800b520 <TIM_Base_SetConfig+0x13c>)
 800b420:	4293      	cmp	r3, r2
 800b422:	d108      	bne.n	800b436 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b42a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	68fa      	ldr	r2, [r7, #12]
 800b432:	4313      	orrs	r3, r2
 800b434:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	4a35      	ldr	r2, [pc, #212]	@ (800b510 <TIM_Base_SetConfig+0x12c>)
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d01f      	beq.n	800b47e <TIM_Base_SetConfig+0x9a>
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b444:	d01b      	beq.n	800b47e <TIM_Base_SetConfig+0x9a>
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	4a32      	ldr	r2, [pc, #200]	@ (800b514 <TIM_Base_SetConfig+0x130>)
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d017      	beq.n	800b47e <TIM_Base_SetConfig+0x9a>
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	4a31      	ldr	r2, [pc, #196]	@ (800b518 <TIM_Base_SetConfig+0x134>)
 800b452:	4293      	cmp	r3, r2
 800b454:	d013      	beq.n	800b47e <TIM_Base_SetConfig+0x9a>
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	4a30      	ldr	r2, [pc, #192]	@ (800b51c <TIM_Base_SetConfig+0x138>)
 800b45a:	4293      	cmp	r3, r2
 800b45c:	d00f      	beq.n	800b47e <TIM_Base_SetConfig+0x9a>
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	4a2f      	ldr	r2, [pc, #188]	@ (800b520 <TIM_Base_SetConfig+0x13c>)
 800b462:	4293      	cmp	r3, r2
 800b464:	d00b      	beq.n	800b47e <TIM_Base_SetConfig+0x9a>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	4a2e      	ldr	r2, [pc, #184]	@ (800b524 <TIM_Base_SetConfig+0x140>)
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d007      	beq.n	800b47e <TIM_Base_SetConfig+0x9a>
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	4a2d      	ldr	r2, [pc, #180]	@ (800b528 <TIM_Base_SetConfig+0x144>)
 800b472:	4293      	cmp	r3, r2
 800b474:	d003      	beq.n	800b47e <TIM_Base_SetConfig+0x9a>
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	4a2c      	ldr	r2, [pc, #176]	@ (800b52c <TIM_Base_SetConfig+0x148>)
 800b47a:	4293      	cmp	r3, r2
 800b47c:	d108      	bne.n	800b490 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b484:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	68db      	ldr	r3, [r3, #12]
 800b48a:	68fa      	ldr	r2, [r7, #12]
 800b48c:	4313      	orrs	r3, r2
 800b48e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	695b      	ldr	r3, [r3, #20]
 800b49a:	4313      	orrs	r3, r2
 800b49c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	68fa      	ldr	r2, [r7, #12]
 800b4a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	689a      	ldr	r2, [r3, #8]
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	681a      	ldr	r2, [r3, #0]
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	4a16      	ldr	r2, [pc, #88]	@ (800b510 <TIM_Base_SetConfig+0x12c>)
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d00f      	beq.n	800b4dc <TIM_Base_SetConfig+0xf8>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	4a18      	ldr	r2, [pc, #96]	@ (800b520 <TIM_Base_SetConfig+0x13c>)
 800b4c0:	4293      	cmp	r3, r2
 800b4c2:	d00b      	beq.n	800b4dc <TIM_Base_SetConfig+0xf8>
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	4a17      	ldr	r2, [pc, #92]	@ (800b524 <TIM_Base_SetConfig+0x140>)
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	d007      	beq.n	800b4dc <TIM_Base_SetConfig+0xf8>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	4a16      	ldr	r2, [pc, #88]	@ (800b528 <TIM_Base_SetConfig+0x144>)
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d003      	beq.n	800b4dc <TIM_Base_SetConfig+0xf8>
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	4a15      	ldr	r2, [pc, #84]	@ (800b52c <TIM_Base_SetConfig+0x148>)
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	d103      	bne.n	800b4e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	691a      	ldr	r2, [r3, #16]
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	691b      	ldr	r3, [r3, #16]
 800b4ee:	f003 0301 	and.w	r3, r3, #1
 800b4f2:	2b01      	cmp	r3, #1
 800b4f4:	d105      	bne.n	800b502 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	691b      	ldr	r3, [r3, #16]
 800b4fa:	f023 0201 	bic.w	r2, r3, #1
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	611a      	str	r2, [r3, #16]
  }
}
 800b502:	bf00      	nop
 800b504:	3714      	adds	r7, #20
 800b506:	46bd      	mov	sp, r7
 800b508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50c:	4770      	bx	lr
 800b50e:	bf00      	nop
 800b510:	40010000 	.word	0x40010000
 800b514:	40000400 	.word	0x40000400
 800b518:	40000800 	.word	0x40000800
 800b51c:	40000c00 	.word	0x40000c00
 800b520:	40010400 	.word	0x40010400
 800b524:	40014000 	.word	0x40014000
 800b528:	40014400 	.word	0x40014400
 800b52c:	40014800 	.word	0x40014800

0800b530 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b530:	b480      	push	{r7}
 800b532:	b087      	sub	sp, #28
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
 800b538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6a1b      	ldr	r3, [r3, #32]
 800b53e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6a1b      	ldr	r3, [r3, #32]
 800b544:	f023 0201 	bic.w	r2, r3, #1
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	685b      	ldr	r3, [r3, #4]
 800b550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	699b      	ldr	r3, [r3, #24]
 800b556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b558:	68fa      	ldr	r2, [r7, #12]
 800b55a:	4b37      	ldr	r3, [pc, #220]	@ (800b638 <TIM_OC1_SetConfig+0x108>)
 800b55c:	4013      	ands	r3, r2
 800b55e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	f023 0303 	bic.w	r3, r3, #3
 800b566:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	68fa      	ldr	r2, [r7, #12]
 800b56e:	4313      	orrs	r3, r2
 800b570:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	f023 0302 	bic.w	r3, r3, #2
 800b578:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	689b      	ldr	r3, [r3, #8]
 800b57e:	697a      	ldr	r2, [r7, #20]
 800b580:	4313      	orrs	r3, r2
 800b582:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	4a2d      	ldr	r2, [pc, #180]	@ (800b63c <TIM_OC1_SetConfig+0x10c>)
 800b588:	4293      	cmp	r3, r2
 800b58a:	d00f      	beq.n	800b5ac <TIM_OC1_SetConfig+0x7c>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	4a2c      	ldr	r2, [pc, #176]	@ (800b640 <TIM_OC1_SetConfig+0x110>)
 800b590:	4293      	cmp	r3, r2
 800b592:	d00b      	beq.n	800b5ac <TIM_OC1_SetConfig+0x7c>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	4a2b      	ldr	r2, [pc, #172]	@ (800b644 <TIM_OC1_SetConfig+0x114>)
 800b598:	4293      	cmp	r3, r2
 800b59a:	d007      	beq.n	800b5ac <TIM_OC1_SetConfig+0x7c>
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	4a2a      	ldr	r2, [pc, #168]	@ (800b648 <TIM_OC1_SetConfig+0x118>)
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d003      	beq.n	800b5ac <TIM_OC1_SetConfig+0x7c>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	4a29      	ldr	r2, [pc, #164]	@ (800b64c <TIM_OC1_SetConfig+0x11c>)
 800b5a8:	4293      	cmp	r3, r2
 800b5aa:	d10c      	bne.n	800b5c6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b5ac:	697b      	ldr	r3, [r7, #20]
 800b5ae:	f023 0308 	bic.w	r3, r3, #8
 800b5b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	68db      	ldr	r3, [r3, #12]
 800b5b8:	697a      	ldr	r2, [r7, #20]
 800b5ba:	4313      	orrs	r3, r2
 800b5bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b5be:	697b      	ldr	r3, [r7, #20]
 800b5c0:	f023 0304 	bic.w	r3, r3, #4
 800b5c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	4a1c      	ldr	r2, [pc, #112]	@ (800b63c <TIM_OC1_SetConfig+0x10c>)
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d00f      	beq.n	800b5ee <TIM_OC1_SetConfig+0xbe>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	4a1b      	ldr	r2, [pc, #108]	@ (800b640 <TIM_OC1_SetConfig+0x110>)
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d00b      	beq.n	800b5ee <TIM_OC1_SetConfig+0xbe>
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	4a1a      	ldr	r2, [pc, #104]	@ (800b644 <TIM_OC1_SetConfig+0x114>)
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	d007      	beq.n	800b5ee <TIM_OC1_SetConfig+0xbe>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	4a19      	ldr	r2, [pc, #100]	@ (800b648 <TIM_OC1_SetConfig+0x118>)
 800b5e2:	4293      	cmp	r3, r2
 800b5e4:	d003      	beq.n	800b5ee <TIM_OC1_SetConfig+0xbe>
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	4a18      	ldr	r2, [pc, #96]	@ (800b64c <TIM_OC1_SetConfig+0x11c>)
 800b5ea:	4293      	cmp	r3, r2
 800b5ec:	d111      	bne.n	800b612 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b5f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b5f6:	693b      	ldr	r3, [r7, #16]
 800b5f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b5fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	695b      	ldr	r3, [r3, #20]
 800b602:	693a      	ldr	r2, [r7, #16]
 800b604:	4313      	orrs	r3, r2
 800b606:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	699b      	ldr	r3, [r3, #24]
 800b60c:	693a      	ldr	r2, [r7, #16]
 800b60e:	4313      	orrs	r3, r2
 800b610:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	693a      	ldr	r2, [r7, #16]
 800b616:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	68fa      	ldr	r2, [r7, #12]
 800b61c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	685a      	ldr	r2, [r3, #4]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	697a      	ldr	r2, [r7, #20]
 800b62a:	621a      	str	r2, [r3, #32]
}
 800b62c:	bf00      	nop
 800b62e:	371c      	adds	r7, #28
 800b630:	46bd      	mov	sp, r7
 800b632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b636:	4770      	bx	lr
 800b638:	fffeff8f 	.word	0xfffeff8f
 800b63c:	40010000 	.word	0x40010000
 800b640:	40010400 	.word	0x40010400
 800b644:	40014000 	.word	0x40014000
 800b648:	40014400 	.word	0x40014400
 800b64c:	40014800 	.word	0x40014800

0800b650 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b650:	b480      	push	{r7}
 800b652:	b087      	sub	sp, #28
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6a1b      	ldr	r3, [r3, #32]
 800b65e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6a1b      	ldr	r3, [r3, #32]
 800b664:	f023 0210 	bic.w	r2, r3, #16
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	685b      	ldr	r3, [r3, #4]
 800b670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	699b      	ldr	r3, [r3, #24]
 800b676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b678:	68fa      	ldr	r2, [r7, #12]
 800b67a:	4b34      	ldr	r3, [pc, #208]	@ (800b74c <TIM_OC2_SetConfig+0xfc>)
 800b67c:	4013      	ands	r3, r2
 800b67e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b686:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	021b      	lsls	r3, r3, #8
 800b68e:	68fa      	ldr	r2, [r7, #12]
 800b690:	4313      	orrs	r3, r2
 800b692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	f023 0320 	bic.w	r3, r3, #32
 800b69a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	689b      	ldr	r3, [r3, #8]
 800b6a0:	011b      	lsls	r3, r3, #4
 800b6a2:	697a      	ldr	r2, [r7, #20]
 800b6a4:	4313      	orrs	r3, r2
 800b6a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	4a29      	ldr	r2, [pc, #164]	@ (800b750 <TIM_OC2_SetConfig+0x100>)
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	d003      	beq.n	800b6b8 <TIM_OC2_SetConfig+0x68>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	4a28      	ldr	r2, [pc, #160]	@ (800b754 <TIM_OC2_SetConfig+0x104>)
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d10d      	bne.n	800b6d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b6be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	68db      	ldr	r3, [r3, #12]
 800b6c4:	011b      	lsls	r3, r3, #4
 800b6c6:	697a      	ldr	r2, [r7, #20]
 800b6c8:	4313      	orrs	r3, r2
 800b6ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b6d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	4a1e      	ldr	r2, [pc, #120]	@ (800b750 <TIM_OC2_SetConfig+0x100>)
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	d00f      	beq.n	800b6fc <TIM_OC2_SetConfig+0xac>
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	4a1d      	ldr	r2, [pc, #116]	@ (800b754 <TIM_OC2_SetConfig+0x104>)
 800b6e0:	4293      	cmp	r3, r2
 800b6e2:	d00b      	beq.n	800b6fc <TIM_OC2_SetConfig+0xac>
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	4a1c      	ldr	r2, [pc, #112]	@ (800b758 <TIM_OC2_SetConfig+0x108>)
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	d007      	beq.n	800b6fc <TIM_OC2_SetConfig+0xac>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	4a1b      	ldr	r2, [pc, #108]	@ (800b75c <TIM_OC2_SetConfig+0x10c>)
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d003      	beq.n	800b6fc <TIM_OC2_SetConfig+0xac>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	4a1a      	ldr	r2, [pc, #104]	@ (800b760 <TIM_OC2_SetConfig+0x110>)
 800b6f8:	4293      	cmp	r3, r2
 800b6fa:	d113      	bne.n	800b724 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b702:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b70a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	695b      	ldr	r3, [r3, #20]
 800b710:	009b      	lsls	r3, r3, #2
 800b712:	693a      	ldr	r2, [r7, #16]
 800b714:	4313      	orrs	r3, r2
 800b716:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	699b      	ldr	r3, [r3, #24]
 800b71c:	009b      	lsls	r3, r3, #2
 800b71e:	693a      	ldr	r2, [r7, #16]
 800b720:	4313      	orrs	r3, r2
 800b722:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	693a      	ldr	r2, [r7, #16]
 800b728:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	68fa      	ldr	r2, [r7, #12]
 800b72e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	685a      	ldr	r2, [r3, #4]
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	697a      	ldr	r2, [r7, #20]
 800b73c:	621a      	str	r2, [r3, #32]
}
 800b73e:	bf00      	nop
 800b740:	371c      	adds	r7, #28
 800b742:	46bd      	mov	sp, r7
 800b744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b748:	4770      	bx	lr
 800b74a:	bf00      	nop
 800b74c:	feff8fff 	.word	0xfeff8fff
 800b750:	40010000 	.word	0x40010000
 800b754:	40010400 	.word	0x40010400
 800b758:	40014000 	.word	0x40014000
 800b75c:	40014400 	.word	0x40014400
 800b760:	40014800 	.word	0x40014800

0800b764 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b764:	b480      	push	{r7}
 800b766:	b087      	sub	sp, #28
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
 800b76c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6a1b      	ldr	r3, [r3, #32]
 800b772:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6a1b      	ldr	r3, [r3, #32]
 800b778:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	685b      	ldr	r3, [r3, #4]
 800b784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	69db      	ldr	r3, [r3, #28]
 800b78a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b78c:	68fa      	ldr	r2, [r7, #12]
 800b78e:	4b33      	ldr	r3, [pc, #204]	@ (800b85c <TIM_OC3_SetConfig+0xf8>)
 800b790:	4013      	ands	r3, r2
 800b792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	f023 0303 	bic.w	r3, r3, #3
 800b79a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	68fa      	ldr	r2, [r7, #12]
 800b7a2:	4313      	orrs	r3, r2
 800b7a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b7ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	689b      	ldr	r3, [r3, #8]
 800b7b2:	021b      	lsls	r3, r3, #8
 800b7b4:	697a      	ldr	r2, [r7, #20]
 800b7b6:	4313      	orrs	r3, r2
 800b7b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	4a28      	ldr	r2, [pc, #160]	@ (800b860 <TIM_OC3_SetConfig+0xfc>)
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	d003      	beq.n	800b7ca <TIM_OC3_SetConfig+0x66>
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	4a27      	ldr	r2, [pc, #156]	@ (800b864 <TIM_OC3_SetConfig+0x100>)
 800b7c6:	4293      	cmp	r3, r2
 800b7c8:	d10d      	bne.n	800b7e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b7d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	68db      	ldr	r3, [r3, #12]
 800b7d6:	021b      	lsls	r3, r3, #8
 800b7d8:	697a      	ldr	r2, [r7, #20]
 800b7da:	4313      	orrs	r3, r2
 800b7dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b7e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	4a1d      	ldr	r2, [pc, #116]	@ (800b860 <TIM_OC3_SetConfig+0xfc>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d00f      	beq.n	800b80e <TIM_OC3_SetConfig+0xaa>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	4a1c      	ldr	r2, [pc, #112]	@ (800b864 <TIM_OC3_SetConfig+0x100>)
 800b7f2:	4293      	cmp	r3, r2
 800b7f4:	d00b      	beq.n	800b80e <TIM_OC3_SetConfig+0xaa>
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	4a1b      	ldr	r2, [pc, #108]	@ (800b868 <TIM_OC3_SetConfig+0x104>)
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	d007      	beq.n	800b80e <TIM_OC3_SetConfig+0xaa>
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	4a1a      	ldr	r2, [pc, #104]	@ (800b86c <TIM_OC3_SetConfig+0x108>)
 800b802:	4293      	cmp	r3, r2
 800b804:	d003      	beq.n	800b80e <TIM_OC3_SetConfig+0xaa>
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	4a19      	ldr	r2, [pc, #100]	@ (800b870 <TIM_OC3_SetConfig+0x10c>)
 800b80a:	4293      	cmp	r3, r2
 800b80c:	d113      	bne.n	800b836 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b80e:	693b      	ldr	r3, [r7, #16]
 800b810:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b814:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b816:	693b      	ldr	r3, [r7, #16]
 800b818:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b81c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	695b      	ldr	r3, [r3, #20]
 800b822:	011b      	lsls	r3, r3, #4
 800b824:	693a      	ldr	r2, [r7, #16]
 800b826:	4313      	orrs	r3, r2
 800b828:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	699b      	ldr	r3, [r3, #24]
 800b82e:	011b      	lsls	r3, r3, #4
 800b830:	693a      	ldr	r2, [r7, #16]
 800b832:	4313      	orrs	r3, r2
 800b834:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	693a      	ldr	r2, [r7, #16]
 800b83a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	68fa      	ldr	r2, [r7, #12]
 800b840:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	685a      	ldr	r2, [r3, #4]
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	697a      	ldr	r2, [r7, #20]
 800b84e:	621a      	str	r2, [r3, #32]
}
 800b850:	bf00      	nop
 800b852:	371c      	adds	r7, #28
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr
 800b85c:	fffeff8f 	.word	0xfffeff8f
 800b860:	40010000 	.word	0x40010000
 800b864:	40010400 	.word	0x40010400
 800b868:	40014000 	.word	0x40014000
 800b86c:	40014400 	.word	0x40014400
 800b870:	40014800 	.word	0x40014800

0800b874 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b874:	b480      	push	{r7}
 800b876:	b087      	sub	sp, #28
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6a1b      	ldr	r3, [r3, #32]
 800b882:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	6a1b      	ldr	r3, [r3, #32]
 800b888:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	685b      	ldr	r3, [r3, #4]
 800b894:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	69db      	ldr	r3, [r3, #28]
 800b89a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b89c:	68fa      	ldr	r2, [r7, #12]
 800b89e:	4b24      	ldr	r3, [pc, #144]	@ (800b930 <TIM_OC4_SetConfig+0xbc>)
 800b8a0:	4013      	ands	r3, r2
 800b8a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b8aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	021b      	lsls	r3, r3, #8
 800b8b2:	68fa      	ldr	r2, [r7, #12]
 800b8b4:	4313      	orrs	r3, r2
 800b8b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b8be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	689b      	ldr	r3, [r3, #8]
 800b8c4:	031b      	lsls	r3, r3, #12
 800b8c6:	693a      	ldr	r2, [r7, #16]
 800b8c8:	4313      	orrs	r3, r2
 800b8ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	4a19      	ldr	r2, [pc, #100]	@ (800b934 <TIM_OC4_SetConfig+0xc0>)
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d00f      	beq.n	800b8f4 <TIM_OC4_SetConfig+0x80>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	4a18      	ldr	r2, [pc, #96]	@ (800b938 <TIM_OC4_SetConfig+0xc4>)
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d00b      	beq.n	800b8f4 <TIM_OC4_SetConfig+0x80>
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	4a17      	ldr	r2, [pc, #92]	@ (800b93c <TIM_OC4_SetConfig+0xc8>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d007      	beq.n	800b8f4 <TIM_OC4_SetConfig+0x80>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	4a16      	ldr	r2, [pc, #88]	@ (800b940 <TIM_OC4_SetConfig+0xcc>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d003      	beq.n	800b8f4 <TIM_OC4_SetConfig+0x80>
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	4a15      	ldr	r2, [pc, #84]	@ (800b944 <TIM_OC4_SetConfig+0xd0>)
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d109      	bne.n	800b908 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b8fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	695b      	ldr	r3, [r3, #20]
 800b900:	019b      	lsls	r3, r3, #6
 800b902:	697a      	ldr	r2, [r7, #20]
 800b904:	4313      	orrs	r3, r2
 800b906:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	697a      	ldr	r2, [r7, #20]
 800b90c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	68fa      	ldr	r2, [r7, #12]
 800b912:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	685a      	ldr	r2, [r3, #4]
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	693a      	ldr	r2, [r7, #16]
 800b920:	621a      	str	r2, [r3, #32]
}
 800b922:	bf00      	nop
 800b924:	371c      	adds	r7, #28
 800b926:	46bd      	mov	sp, r7
 800b928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92c:	4770      	bx	lr
 800b92e:	bf00      	nop
 800b930:	feff8fff 	.word	0xfeff8fff
 800b934:	40010000 	.word	0x40010000
 800b938:	40010400 	.word	0x40010400
 800b93c:	40014000 	.word	0x40014000
 800b940:	40014400 	.word	0x40014400
 800b944:	40014800 	.word	0x40014800

0800b948 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b948:	b480      	push	{r7}
 800b94a:	b087      	sub	sp, #28
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
 800b950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6a1b      	ldr	r3, [r3, #32]
 800b956:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6a1b      	ldr	r3, [r3, #32]
 800b95c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	685b      	ldr	r3, [r3, #4]
 800b968:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b96e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b970:	68fa      	ldr	r2, [r7, #12]
 800b972:	4b21      	ldr	r3, [pc, #132]	@ (800b9f8 <TIM_OC5_SetConfig+0xb0>)
 800b974:	4013      	ands	r3, r2
 800b976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	68fa      	ldr	r2, [r7, #12]
 800b97e:	4313      	orrs	r3, r2
 800b980:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b982:	693b      	ldr	r3, [r7, #16]
 800b984:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b988:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	689b      	ldr	r3, [r3, #8]
 800b98e:	041b      	lsls	r3, r3, #16
 800b990:	693a      	ldr	r2, [r7, #16]
 800b992:	4313      	orrs	r3, r2
 800b994:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	4a18      	ldr	r2, [pc, #96]	@ (800b9fc <TIM_OC5_SetConfig+0xb4>)
 800b99a:	4293      	cmp	r3, r2
 800b99c:	d00f      	beq.n	800b9be <TIM_OC5_SetConfig+0x76>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	4a17      	ldr	r2, [pc, #92]	@ (800ba00 <TIM_OC5_SetConfig+0xb8>)
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d00b      	beq.n	800b9be <TIM_OC5_SetConfig+0x76>
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	4a16      	ldr	r2, [pc, #88]	@ (800ba04 <TIM_OC5_SetConfig+0xbc>)
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	d007      	beq.n	800b9be <TIM_OC5_SetConfig+0x76>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	4a15      	ldr	r2, [pc, #84]	@ (800ba08 <TIM_OC5_SetConfig+0xc0>)
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	d003      	beq.n	800b9be <TIM_OC5_SetConfig+0x76>
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	4a14      	ldr	r2, [pc, #80]	@ (800ba0c <TIM_OC5_SetConfig+0xc4>)
 800b9ba:	4293      	cmp	r3, r2
 800b9bc:	d109      	bne.n	800b9d2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b9be:	697b      	ldr	r3, [r7, #20]
 800b9c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b9c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	695b      	ldr	r3, [r3, #20]
 800b9ca:	021b      	lsls	r3, r3, #8
 800b9cc:	697a      	ldr	r2, [r7, #20]
 800b9ce:	4313      	orrs	r3, r2
 800b9d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	697a      	ldr	r2, [r7, #20]
 800b9d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	68fa      	ldr	r2, [r7, #12]
 800b9dc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	685a      	ldr	r2, [r3, #4]
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	693a      	ldr	r2, [r7, #16]
 800b9ea:	621a      	str	r2, [r3, #32]
}
 800b9ec:	bf00      	nop
 800b9ee:	371c      	adds	r7, #28
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f6:	4770      	bx	lr
 800b9f8:	fffeff8f 	.word	0xfffeff8f
 800b9fc:	40010000 	.word	0x40010000
 800ba00:	40010400 	.word	0x40010400
 800ba04:	40014000 	.word	0x40014000
 800ba08:	40014400 	.word	0x40014400
 800ba0c:	40014800 	.word	0x40014800

0800ba10 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ba10:	b480      	push	{r7}
 800ba12:	b087      	sub	sp, #28
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6a1b      	ldr	r3, [r3, #32]
 800ba1e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6a1b      	ldr	r3, [r3, #32]
 800ba24:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	685b      	ldr	r3, [r3, #4]
 800ba30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ba38:	68fa      	ldr	r2, [r7, #12]
 800ba3a:	4b22      	ldr	r3, [pc, #136]	@ (800bac4 <TIM_OC6_SetConfig+0xb4>)
 800ba3c:	4013      	ands	r3, r2
 800ba3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	021b      	lsls	r3, r3, #8
 800ba46:	68fa      	ldr	r2, [r7, #12]
 800ba48:	4313      	orrs	r3, r2
 800ba4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ba4c:	693b      	ldr	r3, [r7, #16]
 800ba4e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ba52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	689b      	ldr	r3, [r3, #8]
 800ba58:	051b      	lsls	r3, r3, #20
 800ba5a:	693a      	ldr	r2, [r7, #16]
 800ba5c:	4313      	orrs	r3, r2
 800ba5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	4a19      	ldr	r2, [pc, #100]	@ (800bac8 <TIM_OC6_SetConfig+0xb8>)
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d00f      	beq.n	800ba88 <TIM_OC6_SetConfig+0x78>
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	4a18      	ldr	r2, [pc, #96]	@ (800bacc <TIM_OC6_SetConfig+0xbc>)
 800ba6c:	4293      	cmp	r3, r2
 800ba6e:	d00b      	beq.n	800ba88 <TIM_OC6_SetConfig+0x78>
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	4a17      	ldr	r2, [pc, #92]	@ (800bad0 <TIM_OC6_SetConfig+0xc0>)
 800ba74:	4293      	cmp	r3, r2
 800ba76:	d007      	beq.n	800ba88 <TIM_OC6_SetConfig+0x78>
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	4a16      	ldr	r2, [pc, #88]	@ (800bad4 <TIM_OC6_SetConfig+0xc4>)
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	d003      	beq.n	800ba88 <TIM_OC6_SetConfig+0x78>
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	4a15      	ldr	r2, [pc, #84]	@ (800bad8 <TIM_OC6_SetConfig+0xc8>)
 800ba84:	4293      	cmp	r3, r2
 800ba86:	d109      	bne.n	800ba9c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ba8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	695b      	ldr	r3, [r3, #20]
 800ba94:	029b      	lsls	r3, r3, #10
 800ba96:	697a      	ldr	r2, [r7, #20]
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	697a      	ldr	r2, [r7, #20]
 800baa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	68fa      	ldr	r2, [r7, #12]
 800baa6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	685a      	ldr	r2, [r3, #4]
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	693a      	ldr	r2, [r7, #16]
 800bab4:	621a      	str	r2, [r3, #32]
}
 800bab6:	bf00      	nop
 800bab8:	371c      	adds	r7, #28
 800baba:	46bd      	mov	sp, r7
 800babc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac0:	4770      	bx	lr
 800bac2:	bf00      	nop
 800bac4:	feff8fff 	.word	0xfeff8fff
 800bac8:	40010000 	.word	0x40010000
 800bacc:	40010400 	.word	0x40010400
 800bad0:	40014000 	.word	0x40014000
 800bad4:	40014400 	.word	0x40014400
 800bad8:	40014800 	.word	0x40014800

0800badc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800badc:	b480      	push	{r7}
 800bade:	b087      	sub	sp, #28
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	60f8      	str	r0, [r7, #12]
 800bae4:	60b9      	str	r1, [r7, #8]
 800bae6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	f003 031f 	and.w	r3, r3, #31
 800baee:	2201      	movs	r2, #1
 800baf0:	fa02 f303 	lsl.w	r3, r2, r3
 800baf4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	6a1a      	ldr	r2, [r3, #32]
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	43db      	mvns	r3, r3
 800bafe:	401a      	ands	r2, r3
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	6a1a      	ldr	r2, [r3, #32]
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	f003 031f 	and.w	r3, r3, #31
 800bb0e:	6879      	ldr	r1, [r7, #4]
 800bb10:	fa01 f303 	lsl.w	r3, r1, r3
 800bb14:	431a      	orrs	r2, r3
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	621a      	str	r2, [r3, #32]
}
 800bb1a:	bf00      	nop
 800bb1c:	371c      	adds	r7, #28
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb24:	4770      	bx	lr
	...

0800bb28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bb28:	b480      	push	{r7}
 800bb2a:	b085      	sub	sp, #20
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
 800bb30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bb38:	2b01      	cmp	r3, #1
 800bb3a:	d101      	bne.n	800bb40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bb3c:	2302      	movs	r3, #2
 800bb3e:	e06d      	b.n	800bc1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2201      	movs	r2, #1
 800bb44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2202      	movs	r2, #2
 800bb4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	685b      	ldr	r3, [r3, #4]
 800bb56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	689b      	ldr	r3, [r3, #8]
 800bb5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	4a30      	ldr	r2, [pc, #192]	@ (800bc28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bb66:	4293      	cmp	r3, r2
 800bb68:	d004      	beq.n	800bb74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	4a2f      	ldr	r2, [pc, #188]	@ (800bc2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bb70:	4293      	cmp	r3, r2
 800bb72:	d108      	bne.n	800bb86 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bb7a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	685b      	ldr	r3, [r3, #4]
 800bb80:	68fa      	ldr	r2, [r7, #12]
 800bb82:	4313      	orrs	r3, r2
 800bb84:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb8c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	68fa      	ldr	r2, [r7, #12]
 800bb94:	4313      	orrs	r3, r2
 800bb96:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	68fa      	ldr	r2, [r7, #12]
 800bb9e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	4a20      	ldr	r2, [pc, #128]	@ (800bc28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bba6:	4293      	cmp	r3, r2
 800bba8:	d022      	beq.n	800bbf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bbb2:	d01d      	beq.n	800bbf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	4a1d      	ldr	r2, [pc, #116]	@ (800bc30 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bbba:	4293      	cmp	r3, r2
 800bbbc:	d018      	beq.n	800bbf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	4a1c      	ldr	r2, [pc, #112]	@ (800bc34 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	d013      	beq.n	800bbf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	4a1a      	ldr	r2, [pc, #104]	@ (800bc38 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d00e      	beq.n	800bbf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	4a15      	ldr	r2, [pc, #84]	@ (800bc2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bbd8:	4293      	cmp	r3, r2
 800bbda:	d009      	beq.n	800bbf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	4a16      	ldr	r2, [pc, #88]	@ (800bc3c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	d004      	beq.n	800bbf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	4a15      	ldr	r2, [pc, #84]	@ (800bc40 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bbec:	4293      	cmp	r3, r2
 800bbee:	d10c      	bne.n	800bc0a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bbf6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	689b      	ldr	r3, [r3, #8]
 800bbfc:	68ba      	ldr	r2, [r7, #8]
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	68ba      	ldr	r2, [r7, #8]
 800bc08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2201      	movs	r2, #1
 800bc0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2200      	movs	r2, #0
 800bc16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bc1a:	2300      	movs	r3, #0
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3714      	adds	r7, #20
 800bc20:	46bd      	mov	sp, r7
 800bc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc26:	4770      	bx	lr
 800bc28:	40010000 	.word	0x40010000
 800bc2c:	40010400 	.word	0x40010400
 800bc30:	40000400 	.word	0x40000400
 800bc34:	40000800 	.word	0x40000800
 800bc38:	40000c00 	.word	0x40000c00
 800bc3c:	40001800 	.word	0x40001800
 800bc40:	40014000 	.word	0x40014000

0800bc44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b082      	sub	sp, #8
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d101      	bne.n	800bc56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bc52:	2301      	movs	r3, #1
 800bc54:	e042      	b.n	800bcdc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d106      	bne.n	800bc6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2200      	movs	r2, #0
 800bc64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f7f7 f881 	bl	8002d70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2224      	movs	r2, #36	@ 0x24
 800bc72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	681a      	ldr	r2, [r3, #0]
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	f022 0201 	bic.w	r2, r2, #1
 800bc84:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d002      	beq.n	800bc94 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f001 fac4 	bl	800d21c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f000 fc55 	bl	800c544 <UART_SetConfig>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	2b01      	cmp	r3, #1
 800bc9e:	d101      	bne.n	800bca4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800bca0:	2301      	movs	r3, #1
 800bca2:	e01b      	b.n	800bcdc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	685a      	ldr	r2, [r3, #4]
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bcb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	689a      	ldr	r2, [r3, #8]
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bcc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	681a      	ldr	r2, [r3, #0]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f042 0201 	orr.w	r2, r2, #1
 800bcd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f001 fb43 	bl	800d360 <UART_CheckIdleState>
 800bcda:	4603      	mov	r3, r0
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3708      	adds	r7, #8
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}

0800bce4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b08a      	sub	sp, #40	@ 0x28
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	60f8      	str	r0, [r7, #12]
 800bcec:	60b9      	str	r1, [r7, #8]
 800bcee:	4613      	mov	r3, r2
 800bcf0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bcf8:	2b20      	cmp	r3, #32
 800bcfa:	d137      	bne.n	800bd6c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d002      	beq.n	800bd08 <HAL_UART_Receive_DMA+0x24>
 800bd02:	88fb      	ldrh	r3, [r7, #6]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d101      	bne.n	800bd0c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800bd08:	2301      	movs	r3, #1
 800bd0a:	e030      	b.n	800bd6e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	4a18      	ldr	r2, [pc, #96]	@ (800bd78 <HAL_UART_Receive_DMA+0x94>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d01f      	beq.n	800bd5c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	685b      	ldr	r3, [r3, #4]
 800bd22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d018      	beq.n	800bd5c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	e853 3f00 	ldrex	r3, [r3]
 800bd36:	613b      	str	r3, [r7, #16]
   return(result);
 800bd38:	693b      	ldr	r3, [r7, #16]
 800bd3a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bd3e:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	461a      	mov	r2, r3
 800bd46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd48:	623b      	str	r3, [r7, #32]
 800bd4a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd4c:	69f9      	ldr	r1, [r7, #28]
 800bd4e:	6a3a      	ldr	r2, [r7, #32]
 800bd50:	e841 2300 	strex	r3, r2, [r1]
 800bd54:	61bb      	str	r3, [r7, #24]
   return(result);
 800bd56:	69bb      	ldr	r3, [r7, #24]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d1e6      	bne.n	800bd2a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800bd5c:	88fb      	ldrh	r3, [r7, #6]
 800bd5e:	461a      	mov	r2, r3
 800bd60:	68b9      	ldr	r1, [r7, #8]
 800bd62:	68f8      	ldr	r0, [r7, #12]
 800bd64:	f001 fc14 	bl	800d590 <UART_Start_Receive_DMA>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	e000      	b.n	800bd6e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bd6c:	2302      	movs	r3, #2
  }
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	3728      	adds	r7, #40	@ 0x28
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}
 800bd76:	bf00      	nop
 800bd78:	58000c00 	.word	0x58000c00

0800bd7c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b0ba      	sub	sp, #232	@ 0xe8
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	69db      	ldr	r3, [r3, #28]
 800bd8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	689b      	ldr	r3, [r3, #8]
 800bd9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bda2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800bda6:	f640 030f 	movw	r3, #2063	@ 0x80f
 800bdaa:	4013      	ands	r3, r2
 800bdac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800bdb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d11b      	bne.n	800bdf0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bdb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bdbc:	f003 0320 	and.w	r3, r3, #32
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d015      	beq.n	800bdf0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bdc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bdc8:	f003 0320 	and.w	r3, r3, #32
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d105      	bne.n	800bddc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bdd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bdd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d009      	beq.n	800bdf0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	f000 8377 	beq.w	800c4d4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	4798      	blx	r3
      }
      return;
 800bdee:	e371      	b.n	800c4d4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bdf0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	f000 8123 	beq.w	800c040 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bdfa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800bdfe:	4b8d      	ldr	r3, [pc, #564]	@ (800c034 <HAL_UART_IRQHandler+0x2b8>)
 800be00:	4013      	ands	r3, r2
 800be02:	2b00      	cmp	r3, #0
 800be04:	d106      	bne.n	800be14 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800be06:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800be0a:	4b8b      	ldr	r3, [pc, #556]	@ (800c038 <HAL_UART_IRQHandler+0x2bc>)
 800be0c:	4013      	ands	r3, r2
 800be0e:	2b00      	cmp	r3, #0
 800be10:	f000 8116 	beq.w	800c040 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800be14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be18:	f003 0301 	and.w	r3, r3, #1
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d011      	beq.n	800be44 <HAL_UART_IRQHandler+0xc8>
 800be20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d00b      	beq.n	800be44 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	2201      	movs	r2, #1
 800be32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be3a:	f043 0201 	orr.w	r2, r3, #1
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800be44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be48:	f003 0302 	and.w	r3, r3, #2
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d011      	beq.n	800be74 <HAL_UART_IRQHandler+0xf8>
 800be50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be54:	f003 0301 	and.w	r3, r3, #1
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d00b      	beq.n	800be74 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	2202      	movs	r2, #2
 800be62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be6a:	f043 0204 	orr.w	r2, r3, #4
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800be74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be78:	f003 0304 	and.w	r3, r3, #4
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d011      	beq.n	800bea4 <HAL_UART_IRQHandler+0x128>
 800be80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be84:	f003 0301 	and.w	r3, r3, #1
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d00b      	beq.n	800bea4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	2204      	movs	r2, #4
 800be92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be9a:	f043 0202 	orr.w	r2, r3, #2
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bea8:	f003 0308 	and.w	r3, r3, #8
 800beac:	2b00      	cmp	r3, #0
 800beae:	d017      	beq.n	800bee0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800beb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800beb4:	f003 0320 	and.w	r3, r3, #32
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d105      	bne.n	800bec8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bebc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800bec0:	4b5c      	ldr	r3, [pc, #368]	@ (800c034 <HAL_UART_IRQHandler+0x2b8>)
 800bec2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d00b      	beq.n	800bee0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	2208      	movs	r2, #8
 800bece:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bed6:	f043 0208 	orr.w	r2, r3, #8
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bee4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d012      	beq.n	800bf12 <HAL_UART_IRQHandler+0x196>
 800beec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bef0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d00c      	beq.n	800bf12 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bf00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf08:	f043 0220 	orr.w	r2, r3, #32
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	f000 82dd 	beq.w	800c4d8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bf1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf22:	f003 0320 	and.w	r3, r3, #32
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d013      	beq.n	800bf52 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bf2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf2e:	f003 0320 	and.w	r3, r3, #32
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d105      	bne.n	800bf42 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bf36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bf3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d007      	beq.n	800bf52 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d003      	beq.n	800bf52 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf58:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	689b      	ldr	r3, [r3, #8]
 800bf62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf66:	2b40      	cmp	r3, #64	@ 0x40
 800bf68:	d005      	beq.n	800bf76 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bf6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bf6e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d054      	beq.n	800c020 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f001 fbf2 	bl	800d760 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	689b      	ldr	r3, [r3, #8]
 800bf82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf86:	2b40      	cmp	r3, #64	@ 0x40
 800bf88:	d146      	bne.n	800c018 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	3308      	adds	r3, #8
 800bf90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bf98:	e853 3f00 	ldrex	r3, [r3]
 800bf9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800bfa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bfa4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bfa8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	3308      	adds	r3, #8
 800bfb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800bfb6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800bfba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800bfc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800bfc6:	e841 2300 	strex	r3, r2, [r1]
 800bfca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800bfce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d1d9      	bne.n	800bf8a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d017      	beq.n	800c010 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bfe6:	4a15      	ldr	r2, [pc, #84]	@ (800c03c <HAL_UART_IRQHandler+0x2c0>)
 800bfe8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bff0:	4618      	mov	r0, r3
 800bff2:	f7f8 fb7d 	bl	80046f0 <HAL_DMA_Abort_IT>
 800bff6:	4603      	mov	r3, r0
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d019      	beq.n	800c030 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c002:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c004:	687a      	ldr	r2, [r7, #4]
 800c006:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c00a:	4610      	mov	r0, r2
 800c00c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c00e:	e00f      	b.n	800c030 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f000 fa81 	bl	800c518 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c016:	e00b      	b.n	800c030 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f000 fa7d 	bl	800c518 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c01e:	e007      	b.n	800c030 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	f000 fa79 	bl	800c518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2200      	movs	r2, #0
 800c02a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c02e:	e253      	b.n	800c4d8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c030:	bf00      	nop
    return;
 800c032:	e251      	b.n	800c4d8 <HAL_UART_IRQHandler+0x75c>
 800c034:	10000001 	.word	0x10000001
 800c038:	04000120 	.word	0x04000120
 800c03c:	0800da13 	.word	0x0800da13

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c044:	2b01      	cmp	r3, #1
 800c046:	f040 81e7 	bne.w	800c418 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c04a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c04e:	f003 0310 	and.w	r3, r3, #16
 800c052:	2b00      	cmp	r3, #0
 800c054:	f000 81e0 	beq.w	800c418 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c05c:	f003 0310 	and.w	r3, r3, #16
 800c060:	2b00      	cmp	r3, #0
 800c062:	f000 81d9 	beq.w	800c418 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	2210      	movs	r2, #16
 800c06c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	689b      	ldr	r3, [r3, #8]
 800c074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c078:	2b40      	cmp	r3, #64	@ 0x40
 800c07a:	f040 8151 	bne.w	800c320 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	4a96      	ldr	r2, [pc, #600]	@ (800c2e0 <HAL_UART_IRQHandler+0x564>)
 800c088:	4293      	cmp	r3, r2
 800c08a:	d068      	beq.n	800c15e <HAL_UART_IRQHandler+0x3e2>
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	4a93      	ldr	r2, [pc, #588]	@ (800c2e4 <HAL_UART_IRQHandler+0x568>)
 800c096:	4293      	cmp	r3, r2
 800c098:	d061      	beq.n	800c15e <HAL_UART_IRQHandler+0x3e2>
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	4a91      	ldr	r2, [pc, #580]	@ (800c2e8 <HAL_UART_IRQHandler+0x56c>)
 800c0a4:	4293      	cmp	r3, r2
 800c0a6:	d05a      	beq.n	800c15e <HAL_UART_IRQHandler+0x3e2>
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	4a8e      	ldr	r2, [pc, #568]	@ (800c2ec <HAL_UART_IRQHandler+0x570>)
 800c0b2:	4293      	cmp	r3, r2
 800c0b4:	d053      	beq.n	800c15e <HAL_UART_IRQHandler+0x3e2>
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	4a8c      	ldr	r2, [pc, #560]	@ (800c2f0 <HAL_UART_IRQHandler+0x574>)
 800c0c0:	4293      	cmp	r3, r2
 800c0c2:	d04c      	beq.n	800c15e <HAL_UART_IRQHandler+0x3e2>
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	4a89      	ldr	r2, [pc, #548]	@ (800c2f4 <HAL_UART_IRQHandler+0x578>)
 800c0ce:	4293      	cmp	r3, r2
 800c0d0:	d045      	beq.n	800c15e <HAL_UART_IRQHandler+0x3e2>
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	4a87      	ldr	r2, [pc, #540]	@ (800c2f8 <HAL_UART_IRQHandler+0x57c>)
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	d03e      	beq.n	800c15e <HAL_UART_IRQHandler+0x3e2>
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	4a84      	ldr	r2, [pc, #528]	@ (800c2fc <HAL_UART_IRQHandler+0x580>)
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	d037      	beq.n	800c15e <HAL_UART_IRQHandler+0x3e2>
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	4a82      	ldr	r2, [pc, #520]	@ (800c300 <HAL_UART_IRQHandler+0x584>)
 800c0f8:	4293      	cmp	r3, r2
 800c0fa:	d030      	beq.n	800c15e <HAL_UART_IRQHandler+0x3e2>
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	4a7f      	ldr	r2, [pc, #508]	@ (800c304 <HAL_UART_IRQHandler+0x588>)
 800c106:	4293      	cmp	r3, r2
 800c108:	d029      	beq.n	800c15e <HAL_UART_IRQHandler+0x3e2>
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	4a7d      	ldr	r2, [pc, #500]	@ (800c308 <HAL_UART_IRQHandler+0x58c>)
 800c114:	4293      	cmp	r3, r2
 800c116:	d022      	beq.n	800c15e <HAL_UART_IRQHandler+0x3e2>
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	4a7a      	ldr	r2, [pc, #488]	@ (800c30c <HAL_UART_IRQHandler+0x590>)
 800c122:	4293      	cmp	r3, r2
 800c124:	d01b      	beq.n	800c15e <HAL_UART_IRQHandler+0x3e2>
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	4a78      	ldr	r2, [pc, #480]	@ (800c310 <HAL_UART_IRQHandler+0x594>)
 800c130:	4293      	cmp	r3, r2
 800c132:	d014      	beq.n	800c15e <HAL_UART_IRQHandler+0x3e2>
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	4a75      	ldr	r2, [pc, #468]	@ (800c314 <HAL_UART_IRQHandler+0x598>)
 800c13e:	4293      	cmp	r3, r2
 800c140:	d00d      	beq.n	800c15e <HAL_UART_IRQHandler+0x3e2>
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	4a73      	ldr	r2, [pc, #460]	@ (800c318 <HAL_UART_IRQHandler+0x59c>)
 800c14c:	4293      	cmp	r3, r2
 800c14e:	d006      	beq.n	800c15e <HAL_UART_IRQHandler+0x3e2>
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	4a70      	ldr	r2, [pc, #448]	@ (800c31c <HAL_UART_IRQHandler+0x5a0>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d106      	bne.n	800c16c <HAL_UART_IRQHandler+0x3f0>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	685b      	ldr	r3, [r3, #4]
 800c168:	b29b      	uxth	r3, r3
 800c16a:	e005      	b.n	800c178 <HAL_UART_IRQHandler+0x3fc>
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	685b      	ldr	r3, [r3, #4]
 800c176:	b29b      	uxth	r3, r3
 800c178:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c17c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c180:	2b00      	cmp	r3, #0
 800c182:	f000 81ab 	beq.w	800c4dc <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c18c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c190:	429a      	cmp	r2, r3
 800c192:	f080 81a3 	bcs.w	800c4dc <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c19c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c1a6:	69db      	ldr	r3, [r3, #28]
 800c1a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c1ac:	f000 8087 	beq.w	800c2be <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c1bc:	e853 3f00 	ldrex	r3, [r3]
 800c1c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c1c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c1c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c1cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	461a      	mov	r2, r3
 800c1d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c1da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c1de:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c1e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c1ea:	e841 2300 	strex	r3, r2, [r1]
 800c1ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c1f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d1da      	bne.n	800c1b0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	3308      	adds	r3, #8
 800c200:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c202:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c204:	e853 3f00 	ldrex	r3, [r3]
 800c208:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c20a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c20c:	f023 0301 	bic.w	r3, r3, #1
 800c210:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	3308      	adds	r3, #8
 800c21a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c21e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c222:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c224:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c226:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c22a:	e841 2300 	strex	r3, r2, [r1]
 800c22e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c230:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c232:	2b00      	cmp	r3, #0
 800c234:	d1e1      	bne.n	800c1fa <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	3308      	adds	r3, #8
 800c23c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c23e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c240:	e853 3f00 	ldrex	r3, [r3]
 800c244:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c246:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c248:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c24c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	3308      	adds	r3, #8
 800c256:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c25a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c25c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c25e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c260:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c262:	e841 2300 	strex	r3, r2, [r1]
 800c266:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c268:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d1e3      	bne.n	800c236 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2220      	movs	r2, #32
 800c272:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2200      	movs	r2, #0
 800c27a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c282:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c284:	e853 3f00 	ldrex	r3, [r3]
 800c288:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c28a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c28c:	f023 0310 	bic.w	r3, r3, #16
 800c290:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	461a      	mov	r2, r3
 800c29a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c29e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c2a0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c2a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c2a6:	e841 2300 	strex	r3, r2, [r1]
 800c2aa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c2ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d1e4      	bne.n	800c27c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f7f7 fefb 	bl	80040b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2202      	movs	r2, #2
 800c2c2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c2d0:	b29b      	uxth	r3, r3
 800c2d2:	1ad3      	subs	r3, r2, r3
 800c2d4:	b29b      	uxth	r3, r3
 800c2d6:	4619      	mov	r1, r3
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f000 f927 	bl	800c52c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c2de:	e0fd      	b.n	800c4dc <HAL_UART_IRQHandler+0x760>
 800c2e0:	40020010 	.word	0x40020010
 800c2e4:	40020028 	.word	0x40020028
 800c2e8:	40020040 	.word	0x40020040
 800c2ec:	40020058 	.word	0x40020058
 800c2f0:	40020070 	.word	0x40020070
 800c2f4:	40020088 	.word	0x40020088
 800c2f8:	400200a0 	.word	0x400200a0
 800c2fc:	400200b8 	.word	0x400200b8
 800c300:	40020410 	.word	0x40020410
 800c304:	40020428 	.word	0x40020428
 800c308:	40020440 	.word	0x40020440
 800c30c:	40020458 	.word	0x40020458
 800c310:	40020470 	.word	0x40020470
 800c314:	40020488 	.word	0x40020488
 800c318:	400204a0 	.word	0x400204a0
 800c31c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c32c:	b29b      	uxth	r3, r3
 800c32e:	1ad3      	subs	r3, r2, r3
 800c330:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c33a:	b29b      	uxth	r3, r3
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	f000 80cf 	beq.w	800c4e0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800c342:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c346:	2b00      	cmp	r3, #0
 800c348:	f000 80ca 	beq.w	800c4e0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c354:	e853 3f00 	ldrex	r3, [r3]
 800c358:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c35a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c35c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c360:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	461a      	mov	r2, r3
 800c36a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c36e:	647b      	str	r3, [r7, #68]	@ 0x44
 800c370:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c372:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c374:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c376:	e841 2300 	strex	r3, r2, [r1]
 800c37a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c37c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d1e4      	bne.n	800c34c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	3308      	adds	r3, #8
 800c388:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c38a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c38c:	e853 3f00 	ldrex	r3, [r3]
 800c390:	623b      	str	r3, [r7, #32]
   return(result);
 800c392:	6a3a      	ldr	r2, [r7, #32]
 800c394:	4b55      	ldr	r3, [pc, #340]	@ (800c4ec <HAL_UART_IRQHandler+0x770>)
 800c396:	4013      	ands	r3, r2
 800c398:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	3308      	adds	r3, #8
 800c3a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c3a6:	633a      	str	r2, [r7, #48]	@ 0x30
 800c3a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c3ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c3ae:	e841 2300 	strex	r3, r2, [r1]
 800c3b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c3b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d1e3      	bne.n	800c382 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2220      	movs	r2, #32
 800c3be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3d4:	693b      	ldr	r3, [r7, #16]
 800c3d6:	e853 3f00 	ldrex	r3, [r3]
 800c3da:	60fb      	str	r3, [r7, #12]
   return(result);
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	f023 0310 	bic.w	r3, r3, #16
 800c3e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	461a      	mov	r2, r3
 800c3ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c3f0:	61fb      	str	r3, [r7, #28]
 800c3f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3f4:	69b9      	ldr	r1, [r7, #24]
 800c3f6:	69fa      	ldr	r2, [r7, #28]
 800c3f8:	e841 2300 	strex	r3, r2, [r1]
 800c3fc:	617b      	str	r3, [r7, #20]
   return(result);
 800c3fe:	697b      	ldr	r3, [r7, #20]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d1e4      	bne.n	800c3ce <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2202      	movs	r2, #2
 800c408:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c40a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c40e:	4619      	mov	r1, r3
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f000 f88b 	bl	800c52c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c416:	e063      	b.n	800c4e0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c41c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c420:	2b00      	cmp	r3, #0
 800c422:	d00e      	beq.n	800c442 <HAL_UART_IRQHandler+0x6c6>
 800c424:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c428:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d008      	beq.n	800c442 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800c438:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f001 fb2a 	bl	800da94 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c440:	e051      	b.n	800c4e6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d014      	beq.n	800c478 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c44e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c452:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c456:	2b00      	cmp	r3, #0
 800c458:	d105      	bne.n	800c466 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c45a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c45e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c462:	2b00      	cmp	r3, #0
 800c464:	d008      	beq.n	800c478 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d03a      	beq.n	800c4e4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	4798      	blx	r3
    }
    return;
 800c476:	e035      	b.n	800c4e4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c47c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c480:	2b00      	cmp	r3, #0
 800c482:	d009      	beq.n	800c498 <HAL_UART_IRQHandler+0x71c>
 800c484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c488:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d003      	beq.n	800c498 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f001 fad4 	bl	800da3e <UART_EndTransmit_IT>
    return;
 800c496:	e026      	b.n	800c4e6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c49c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d009      	beq.n	800c4b8 <HAL_UART_IRQHandler+0x73c>
 800c4a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c4a8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d003      	beq.n	800c4b8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f001 fb03 	bl	800dabc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c4b6:	e016      	b.n	800c4e6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c4b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d010      	beq.n	800c4e6 <HAL_UART_IRQHandler+0x76a>
 800c4c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	da0c      	bge.n	800c4e6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f001 faeb 	bl	800daa8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c4d2:	e008      	b.n	800c4e6 <HAL_UART_IRQHandler+0x76a>
      return;
 800c4d4:	bf00      	nop
 800c4d6:	e006      	b.n	800c4e6 <HAL_UART_IRQHandler+0x76a>
    return;
 800c4d8:	bf00      	nop
 800c4da:	e004      	b.n	800c4e6 <HAL_UART_IRQHandler+0x76a>
      return;
 800c4dc:	bf00      	nop
 800c4de:	e002      	b.n	800c4e6 <HAL_UART_IRQHandler+0x76a>
      return;
 800c4e0:	bf00      	nop
 800c4e2:	e000      	b.n	800c4e6 <HAL_UART_IRQHandler+0x76a>
    return;
 800c4e4:	bf00      	nop
  }
}
 800c4e6:	37e8      	adds	r7, #232	@ 0xe8
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}
 800c4ec:	effffffe 	.word	0xeffffffe

0800c4f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	b083      	sub	sp, #12
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c4f8:	bf00      	nop
 800c4fa:	370c      	adds	r7, #12
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c502:	4770      	bx	lr

0800c504 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c504:	b480      	push	{r7}
 800c506:	b083      	sub	sp, #12
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c50c:	bf00      	nop
 800c50e:	370c      	adds	r7, #12
 800c510:	46bd      	mov	sp, r7
 800c512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c516:	4770      	bx	lr

0800c518 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c518:	b480      	push	{r7}
 800c51a:	b083      	sub	sp, #12
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c520:	bf00      	nop
 800c522:	370c      	adds	r7, #12
 800c524:	46bd      	mov	sp, r7
 800c526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52a:	4770      	bx	lr

0800c52c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c52c:	b480      	push	{r7}
 800c52e:	b083      	sub	sp, #12
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	460b      	mov	r3, r1
 800c536:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c538:	bf00      	nop
 800c53a:	370c      	adds	r7, #12
 800c53c:	46bd      	mov	sp, r7
 800c53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c542:	4770      	bx	lr

0800c544 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c548:	b092      	sub	sp, #72	@ 0x48
 800c54a:	af00      	add	r7, sp, #0
 800c54c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c54e:	2300      	movs	r3, #0
 800c550:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c554:	697b      	ldr	r3, [r7, #20]
 800c556:	689a      	ldr	r2, [r3, #8]
 800c558:	697b      	ldr	r3, [r7, #20]
 800c55a:	691b      	ldr	r3, [r3, #16]
 800c55c:	431a      	orrs	r2, r3
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	695b      	ldr	r3, [r3, #20]
 800c562:	431a      	orrs	r2, r3
 800c564:	697b      	ldr	r3, [r7, #20]
 800c566:	69db      	ldr	r3, [r3, #28]
 800c568:	4313      	orrs	r3, r2
 800c56a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	681a      	ldr	r2, [r3, #0]
 800c572:	4bbe      	ldr	r3, [pc, #760]	@ (800c86c <UART_SetConfig+0x328>)
 800c574:	4013      	ands	r3, r2
 800c576:	697a      	ldr	r2, [r7, #20]
 800c578:	6812      	ldr	r2, [r2, #0]
 800c57a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c57c:	430b      	orrs	r3, r1
 800c57e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	685b      	ldr	r3, [r3, #4]
 800c586:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c58a:	697b      	ldr	r3, [r7, #20]
 800c58c:	68da      	ldr	r2, [r3, #12]
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	430a      	orrs	r2, r1
 800c594:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	699b      	ldr	r3, [r3, #24]
 800c59a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c59c:	697b      	ldr	r3, [r7, #20]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	4ab3      	ldr	r2, [pc, #716]	@ (800c870 <UART_SetConfig+0x32c>)
 800c5a2:	4293      	cmp	r3, r2
 800c5a4:	d004      	beq.n	800c5b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c5a6:	697b      	ldr	r3, [r7, #20]
 800c5a8:	6a1b      	ldr	r3, [r3, #32]
 800c5aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c5ac:	4313      	orrs	r3, r2
 800c5ae:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	689a      	ldr	r2, [r3, #8]
 800c5b6:	4baf      	ldr	r3, [pc, #700]	@ (800c874 <UART_SetConfig+0x330>)
 800c5b8:	4013      	ands	r3, r2
 800c5ba:	697a      	ldr	r2, [r7, #20]
 800c5bc:	6812      	ldr	r2, [r2, #0]
 800c5be:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c5c0:	430b      	orrs	r3, r1
 800c5c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c5c4:	697b      	ldr	r3, [r7, #20]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5ca:	f023 010f 	bic.w	r1, r3, #15
 800c5ce:	697b      	ldr	r3, [r7, #20]
 800c5d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	430a      	orrs	r2, r1
 800c5d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c5da:	697b      	ldr	r3, [r7, #20]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	4aa6      	ldr	r2, [pc, #664]	@ (800c878 <UART_SetConfig+0x334>)
 800c5e0:	4293      	cmp	r3, r2
 800c5e2:	d177      	bne.n	800c6d4 <UART_SetConfig+0x190>
 800c5e4:	4ba5      	ldr	r3, [pc, #660]	@ (800c87c <UART_SetConfig+0x338>)
 800c5e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c5ec:	2b28      	cmp	r3, #40	@ 0x28
 800c5ee:	d86d      	bhi.n	800c6cc <UART_SetConfig+0x188>
 800c5f0:	a201      	add	r2, pc, #4	@ (adr r2, 800c5f8 <UART_SetConfig+0xb4>)
 800c5f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5f6:	bf00      	nop
 800c5f8:	0800c69d 	.word	0x0800c69d
 800c5fc:	0800c6cd 	.word	0x0800c6cd
 800c600:	0800c6cd 	.word	0x0800c6cd
 800c604:	0800c6cd 	.word	0x0800c6cd
 800c608:	0800c6cd 	.word	0x0800c6cd
 800c60c:	0800c6cd 	.word	0x0800c6cd
 800c610:	0800c6cd 	.word	0x0800c6cd
 800c614:	0800c6cd 	.word	0x0800c6cd
 800c618:	0800c6a5 	.word	0x0800c6a5
 800c61c:	0800c6cd 	.word	0x0800c6cd
 800c620:	0800c6cd 	.word	0x0800c6cd
 800c624:	0800c6cd 	.word	0x0800c6cd
 800c628:	0800c6cd 	.word	0x0800c6cd
 800c62c:	0800c6cd 	.word	0x0800c6cd
 800c630:	0800c6cd 	.word	0x0800c6cd
 800c634:	0800c6cd 	.word	0x0800c6cd
 800c638:	0800c6ad 	.word	0x0800c6ad
 800c63c:	0800c6cd 	.word	0x0800c6cd
 800c640:	0800c6cd 	.word	0x0800c6cd
 800c644:	0800c6cd 	.word	0x0800c6cd
 800c648:	0800c6cd 	.word	0x0800c6cd
 800c64c:	0800c6cd 	.word	0x0800c6cd
 800c650:	0800c6cd 	.word	0x0800c6cd
 800c654:	0800c6cd 	.word	0x0800c6cd
 800c658:	0800c6b5 	.word	0x0800c6b5
 800c65c:	0800c6cd 	.word	0x0800c6cd
 800c660:	0800c6cd 	.word	0x0800c6cd
 800c664:	0800c6cd 	.word	0x0800c6cd
 800c668:	0800c6cd 	.word	0x0800c6cd
 800c66c:	0800c6cd 	.word	0x0800c6cd
 800c670:	0800c6cd 	.word	0x0800c6cd
 800c674:	0800c6cd 	.word	0x0800c6cd
 800c678:	0800c6bd 	.word	0x0800c6bd
 800c67c:	0800c6cd 	.word	0x0800c6cd
 800c680:	0800c6cd 	.word	0x0800c6cd
 800c684:	0800c6cd 	.word	0x0800c6cd
 800c688:	0800c6cd 	.word	0x0800c6cd
 800c68c:	0800c6cd 	.word	0x0800c6cd
 800c690:	0800c6cd 	.word	0x0800c6cd
 800c694:	0800c6cd 	.word	0x0800c6cd
 800c698:	0800c6c5 	.word	0x0800c6c5
 800c69c:	2301      	movs	r3, #1
 800c69e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6a2:	e326      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c6a4:	2304      	movs	r3, #4
 800c6a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6aa:	e322      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c6ac:	2308      	movs	r3, #8
 800c6ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6b2:	e31e      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c6b4:	2310      	movs	r3, #16
 800c6b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6ba:	e31a      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c6bc:	2320      	movs	r3, #32
 800c6be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6c2:	e316      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c6c4:	2340      	movs	r3, #64	@ 0x40
 800c6c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6ca:	e312      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c6cc:	2380      	movs	r3, #128	@ 0x80
 800c6ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6d2:	e30e      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c6d4:	697b      	ldr	r3, [r7, #20]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	4a69      	ldr	r2, [pc, #420]	@ (800c880 <UART_SetConfig+0x33c>)
 800c6da:	4293      	cmp	r3, r2
 800c6dc:	d130      	bne.n	800c740 <UART_SetConfig+0x1fc>
 800c6de:	4b67      	ldr	r3, [pc, #412]	@ (800c87c <UART_SetConfig+0x338>)
 800c6e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6e2:	f003 0307 	and.w	r3, r3, #7
 800c6e6:	2b05      	cmp	r3, #5
 800c6e8:	d826      	bhi.n	800c738 <UART_SetConfig+0x1f4>
 800c6ea:	a201      	add	r2, pc, #4	@ (adr r2, 800c6f0 <UART_SetConfig+0x1ac>)
 800c6ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6f0:	0800c709 	.word	0x0800c709
 800c6f4:	0800c711 	.word	0x0800c711
 800c6f8:	0800c719 	.word	0x0800c719
 800c6fc:	0800c721 	.word	0x0800c721
 800c700:	0800c729 	.word	0x0800c729
 800c704:	0800c731 	.word	0x0800c731
 800c708:	2300      	movs	r3, #0
 800c70a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c70e:	e2f0      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c710:	2304      	movs	r3, #4
 800c712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c716:	e2ec      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c718:	2308      	movs	r3, #8
 800c71a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c71e:	e2e8      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c720:	2310      	movs	r3, #16
 800c722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c726:	e2e4      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c728:	2320      	movs	r3, #32
 800c72a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c72e:	e2e0      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c730:	2340      	movs	r3, #64	@ 0x40
 800c732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c736:	e2dc      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c738:	2380      	movs	r3, #128	@ 0x80
 800c73a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c73e:	e2d8      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c740:	697b      	ldr	r3, [r7, #20]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	4a4f      	ldr	r2, [pc, #316]	@ (800c884 <UART_SetConfig+0x340>)
 800c746:	4293      	cmp	r3, r2
 800c748:	d130      	bne.n	800c7ac <UART_SetConfig+0x268>
 800c74a:	4b4c      	ldr	r3, [pc, #304]	@ (800c87c <UART_SetConfig+0x338>)
 800c74c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c74e:	f003 0307 	and.w	r3, r3, #7
 800c752:	2b05      	cmp	r3, #5
 800c754:	d826      	bhi.n	800c7a4 <UART_SetConfig+0x260>
 800c756:	a201      	add	r2, pc, #4	@ (adr r2, 800c75c <UART_SetConfig+0x218>)
 800c758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c75c:	0800c775 	.word	0x0800c775
 800c760:	0800c77d 	.word	0x0800c77d
 800c764:	0800c785 	.word	0x0800c785
 800c768:	0800c78d 	.word	0x0800c78d
 800c76c:	0800c795 	.word	0x0800c795
 800c770:	0800c79d 	.word	0x0800c79d
 800c774:	2300      	movs	r3, #0
 800c776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c77a:	e2ba      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c77c:	2304      	movs	r3, #4
 800c77e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c782:	e2b6      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c784:	2308      	movs	r3, #8
 800c786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c78a:	e2b2      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c78c:	2310      	movs	r3, #16
 800c78e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c792:	e2ae      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c794:	2320      	movs	r3, #32
 800c796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c79a:	e2aa      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c79c:	2340      	movs	r3, #64	@ 0x40
 800c79e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7a2:	e2a6      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c7a4:	2380      	movs	r3, #128	@ 0x80
 800c7a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7aa:	e2a2      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c7ac:	697b      	ldr	r3, [r7, #20]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	4a35      	ldr	r2, [pc, #212]	@ (800c888 <UART_SetConfig+0x344>)
 800c7b2:	4293      	cmp	r3, r2
 800c7b4:	d130      	bne.n	800c818 <UART_SetConfig+0x2d4>
 800c7b6:	4b31      	ldr	r3, [pc, #196]	@ (800c87c <UART_SetConfig+0x338>)
 800c7b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c7ba:	f003 0307 	and.w	r3, r3, #7
 800c7be:	2b05      	cmp	r3, #5
 800c7c0:	d826      	bhi.n	800c810 <UART_SetConfig+0x2cc>
 800c7c2:	a201      	add	r2, pc, #4	@ (adr r2, 800c7c8 <UART_SetConfig+0x284>)
 800c7c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7c8:	0800c7e1 	.word	0x0800c7e1
 800c7cc:	0800c7e9 	.word	0x0800c7e9
 800c7d0:	0800c7f1 	.word	0x0800c7f1
 800c7d4:	0800c7f9 	.word	0x0800c7f9
 800c7d8:	0800c801 	.word	0x0800c801
 800c7dc:	0800c809 	.word	0x0800c809
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7e6:	e284      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c7e8:	2304      	movs	r3, #4
 800c7ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7ee:	e280      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c7f0:	2308      	movs	r3, #8
 800c7f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7f6:	e27c      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c7f8:	2310      	movs	r3, #16
 800c7fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7fe:	e278      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c800:	2320      	movs	r3, #32
 800c802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c806:	e274      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c808:	2340      	movs	r3, #64	@ 0x40
 800c80a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c80e:	e270      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c810:	2380      	movs	r3, #128	@ 0x80
 800c812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c816:	e26c      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c818:	697b      	ldr	r3, [r7, #20]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	4a1b      	ldr	r2, [pc, #108]	@ (800c88c <UART_SetConfig+0x348>)
 800c81e:	4293      	cmp	r3, r2
 800c820:	d142      	bne.n	800c8a8 <UART_SetConfig+0x364>
 800c822:	4b16      	ldr	r3, [pc, #88]	@ (800c87c <UART_SetConfig+0x338>)
 800c824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c826:	f003 0307 	and.w	r3, r3, #7
 800c82a:	2b05      	cmp	r3, #5
 800c82c:	d838      	bhi.n	800c8a0 <UART_SetConfig+0x35c>
 800c82e:	a201      	add	r2, pc, #4	@ (adr r2, 800c834 <UART_SetConfig+0x2f0>)
 800c830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c834:	0800c84d 	.word	0x0800c84d
 800c838:	0800c855 	.word	0x0800c855
 800c83c:	0800c85d 	.word	0x0800c85d
 800c840:	0800c865 	.word	0x0800c865
 800c844:	0800c891 	.word	0x0800c891
 800c848:	0800c899 	.word	0x0800c899
 800c84c:	2300      	movs	r3, #0
 800c84e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c852:	e24e      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c854:	2304      	movs	r3, #4
 800c856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c85a:	e24a      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c85c:	2308      	movs	r3, #8
 800c85e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c862:	e246      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c864:	2310      	movs	r3, #16
 800c866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c86a:	e242      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c86c:	cfff69f3 	.word	0xcfff69f3
 800c870:	58000c00 	.word	0x58000c00
 800c874:	11fff4ff 	.word	0x11fff4ff
 800c878:	40011000 	.word	0x40011000
 800c87c:	58024400 	.word	0x58024400
 800c880:	40004400 	.word	0x40004400
 800c884:	40004800 	.word	0x40004800
 800c888:	40004c00 	.word	0x40004c00
 800c88c:	40005000 	.word	0x40005000
 800c890:	2320      	movs	r3, #32
 800c892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c896:	e22c      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c898:	2340      	movs	r3, #64	@ 0x40
 800c89a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c89e:	e228      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c8a0:	2380      	movs	r3, #128	@ 0x80
 800c8a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8a6:	e224      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c8a8:	697b      	ldr	r3, [r7, #20]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	4ab1      	ldr	r2, [pc, #708]	@ (800cb74 <UART_SetConfig+0x630>)
 800c8ae:	4293      	cmp	r3, r2
 800c8b0:	d176      	bne.n	800c9a0 <UART_SetConfig+0x45c>
 800c8b2:	4bb1      	ldr	r3, [pc, #708]	@ (800cb78 <UART_SetConfig+0x634>)
 800c8b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c8b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c8ba:	2b28      	cmp	r3, #40	@ 0x28
 800c8bc:	d86c      	bhi.n	800c998 <UART_SetConfig+0x454>
 800c8be:	a201      	add	r2, pc, #4	@ (adr r2, 800c8c4 <UART_SetConfig+0x380>)
 800c8c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8c4:	0800c969 	.word	0x0800c969
 800c8c8:	0800c999 	.word	0x0800c999
 800c8cc:	0800c999 	.word	0x0800c999
 800c8d0:	0800c999 	.word	0x0800c999
 800c8d4:	0800c999 	.word	0x0800c999
 800c8d8:	0800c999 	.word	0x0800c999
 800c8dc:	0800c999 	.word	0x0800c999
 800c8e0:	0800c999 	.word	0x0800c999
 800c8e4:	0800c971 	.word	0x0800c971
 800c8e8:	0800c999 	.word	0x0800c999
 800c8ec:	0800c999 	.word	0x0800c999
 800c8f0:	0800c999 	.word	0x0800c999
 800c8f4:	0800c999 	.word	0x0800c999
 800c8f8:	0800c999 	.word	0x0800c999
 800c8fc:	0800c999 	.word	0x0800c999
 800c900:	0800c999 	.word	0x0800c999
 800c904:	0800c979 	.word	0x0800c979
 800c908:	0800c999 	.word	0x0800c999
 800c90c:	0800c999 	.word	0x0800c999
 800c910:	0800c999 	.word	0x0800c999
 800c914:	0800c999 	.word	0x0800c999
 800c918:	0800c999 	.word	0x0800c999
 800c91c:	0800c999 	.word	0x0800c999
 800c920:	0800c999 	.word	0x0800c999
 800c924:	0800c981 	.word	0x0800c981
 800c928:	0800c999 	.word	0x0800c999
 800c92c:	0800c999 	.word	0x0800c999
 800c930:	0800c999 	.word	0x0800c999
 800c934:	0800c999 	.word	0x0800c999
 800c938:	0800c999 	.word	0x0800c999
 800c93c:	0800c999 	.word	0x0800c999
 800c940:	0800c999 	.word	0x0800c999
 800c944:	0800c989 	.word	0x0800c989
 800c948:	0800c999 	.word	0x0800c999
 800c94c:	0800c999 	.word	0x0800c999
 800c950:	0800c999 	.word	0x0800c999
 800c954:	0800c999 	.word	0x0800c999
 800c958:	0800c999 	.word	0x0800c999
 800c95c:	0800c999 	.word	0x0800c999
 800c960:	0800c999 	.word	0x0800c999
 800c964:	0800c991 	.word	0x0800c991
 800c968:	2301      	movs	r3, #1
 800c96a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c96e:	e1c0      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c970:	2304      	movs	r3, #4
 800c972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c976:	e1bc      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c978:	2308      	movs	r3, #8
 800c97a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c97e:	e1b8      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c980:	2310      	movs	r3, #16
 800c982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c986:	e1b4      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c988:	2320      	movs	r3, #32
 800c98a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c98e:	e1b0      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c990:	2340      	movs	r3, #64	@ 0x40
 800c992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c996:	e1ac      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c998:	2380      	movs	r3, #128	@ 0x80
 800c99a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c99e:	e1a8      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	4a75      	ldr	r2, [pc, #468]	@ (800cb7c <UART_SetConfig+0x638>)
 800c9a6:	4293      	cmp	r3, r2
 800c9a8:	d130      	bne.n	800ca0c <UART_SetConfig+0x4c8>
 800c9aa:	4b73      	ldr	r3, [pc, #460]	@ (800cb78 <UART_SetConfig+0x634>)
 800c9ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c9ae:	f003 0307 	and.w	r3, r3, #7
 800c9b2:	2b05      	cmp	r3, #5
 800c9b4:	d826      	bhi.n	800ca04 <UART_SetConfig+0x4c0>
 800c9b6:	a201      	add	r2, pc, #4	@ (adr r2, 800c9bc <UART_SetConfig+0x478>)
 800c9b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9bc:	0800c9d5 	.word	0x0800c9d5
 800c9c0:	0800c9dd 	.word	0x0800c9dd
 800c9c4:	0800c9e5 	.word	0x0800c9e5
 800c9c8:	0800c9ed 	.word	0x0800c9ed
 800c9cc:	0800c9f5 	.word	0x0800c9f5
 800c9d0:	0800c9fd 	.word	0x0800c9fd
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9da:	e18a      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c9dc:	2304      	movs	r3, #4
 800c9de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9e2:	e186      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c9e4:	2308      	movs	r3, #8
 800c9e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9ea:	e182      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c9ec:	2310      	movs	r3, #16
 800c9ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9f2:	e17e      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c9f4:	2320      	movs	r3, #32
 800c9f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9fa:	e17a      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800c9fc:	2340      	movs	r3, #64	@ 0x40
 800c9fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca02:	e176      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800ca04:	2380      	movs	r3, #128	@ 0x80
 800ca06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca0a:	e172      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	4a5b      	ldr	r2, [pc, #364]	@ (800cb80 <UART_SetConfig+0x63c>)
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d130      	bne.n	800ca78 <UART_SetConfig+0x534>
 800ca16:	4b58      	ldr	r3, [pc, #352]	@ (800cb78 <UART_SetConfig+0x634>)
 800ca18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca1a:	f003 0307 	and.w	r3, r3, #7
 800ca1e:	2b05      	cmp	r3, #5
 800ca20:	d826      	bhi.n	800ca70 <UART_SetConfig+0x52c>
 800ca22:	a201      	add	r2, pc, #4	@ (adr r2, 800ca28 <UART_SetConfig+0x4e4>)
 800ca24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca28:	0800ca41 	.word	0x0800ca41
 800ca2c:	0800ca49 	.word	0x0800ca49
 800ca30:	0800ca51 	.word	0x0800ca51
 800ca34:	0800ca59 	.word	0x0800ca59
 800ca38:	0800ca61 	.word	0x0800ca61
 800ca3c:	0800ca69 	.word	0x0800ca69
 800ca40:	2300      	movs	r3, #0
 800ca42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca46:	e154      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800ca48:	2304      	movs	r3, #4
 800ca4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca4e:	e150      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800ca50:	2308      	movs	r3, #8
 800ca52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca56:	e14c      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800ca58:	2310      	movs	r3, #16
 800ca5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca5e:	e148      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800ca60:	2320      	movs	r3, #32
 800ca62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca66:	e144      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800ca68:	2340      	movs	r3, #64	@ 0x40
 800ca6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca6e:	e140      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800ca70:	2380      	movs	r3, #128	@ 0x80
 800ca72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca76:	e13c      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	4a41      	ldr	r2, [pc, #260]	@ (800cb84 <UART_SetConfig+0x640>)
 800ca7e:	4293      	cmp	r3, r2
 800ca80:	f040 8082 	bne.w	800cb88 <UART_SetConfig+0x644>
 800ca84:	4b3c      	ldr	r3, [pc, #240]	@ (800cb78 <UART_SetConfig+0x634>)
 800ca86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ca8c:	2b28      	cmp	r3, #40	@ 0x28
 800ca8e:	d86d      	bhi.n	800cb6c <UART_SetConfig+0x628>
 800ca90:	a201      	add	r2, pc, #4	@ (adr r2, 800ca98 <UART_SetConfig+0x554>)
 800ca92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca96:	bf00      	nop
 800ca98:	0800cb3d 	.word	0x0800cb3d
 800ca9c:	0800cb6d 	.word	0x0800cb6d
 800caa0:	0800cb6d 	.word	0x0800cb6d
 800caa4:	0800cb6d 	.word	0x0800cb6d
 800caa8:	0800cb6d 	.word	0x0800cb6d
 800caac:	0800cb6d 	.word	0x0800cb6d
 800cab0:	0800cb6d 	.word	0x0800cb6d
 800cab4:	0800cb6d 	.word	0x0800cb6d
 800cab8:	0800cb45 	.word	0x0800cb45
 800cabc:	0800cb6d 	.word	0x0800cb6d
 800cac0:	0800cb6d 	.word	0x0800cb6d
 800cac4:	0800cb6d 	.word	0x0800cb6d
 800cac8:	0800cb6d 	.word	0x0800cb6d
 800cacc:	0800cb6d 	.word	0x0800cb6d
 800cad0:	0800cb6d 	.word	0x0800cb6d
 800cad4:	0800cb6d 	.word	0x0800cb6d
 800cad8:	0800cb4d 	.word	0x0800cb4d
 800cadc:	0800cb6d 	.word	0x0800cb6d
 800cae0:	0800cb6d 	.word	0x0800cb6d
 800cae4:	0800cb6d 	.word	0x0800cb6d
 800cae8:	0800cb6d 	.word	0x0800cb6d
 800caec:	0800cb6d 	.word	0x0800cb6d
 800caf0:	0800cb6d 	.word	0x0800cb6d
 800caf4:	0800cb6d 	.word	0x0800cb6d
 800caf8:	0800cb55 	.word	0x0800cb55
 800cafc:	0800cb6d 	.word	0x0800cb6d
 800cb00:	0800cb6d 	.word	0x0800cb6d
 800cb04:	0800cb6d 	.word	0x0800cb6d
 800cb08:	0800cb6d 	.word	0x0800cb6d
 800cb0c:	0800cb6d 	.word	0x0800cb6d
 800cb10:	0800cb6d 	.word	0x0800cb6d
 800cb14:	0800cb6d 	.word	0x0800cb6d
 800cb18:	0800cb5d 	.word	0x0800cb5d
 800cb1c:	0800cb6d 	.word	0x0800cb6d
 800cb20:	0800cb6d 	.word	0x0800cb6d
 800cb24:	0800cb6d 	.word	0x0800cb6d
 800cb28:	0800cb6d 	.word	0x0800cb6d
 800cb2c:	0800cb6d 	.word	0x0800cb6d
 800cb30:	0800cb6d 	.word	0x0800cb6d
 800cb34:	0800cb6d 	.word	0x0800cb6d
 800cb38:	0800cb65 	.word	0x0800cb65
 800cb3c:	2301      	movs	r3, #1
 800cb3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb42:	e0d6      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800cb44:	2304      	movs	r3, #4
 800cb46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb4a:	e0d2      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800cb4c:	2308      	movs	r3, #8
 800cb4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb52:	e0ce      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800cb54:	2310      	movs	r3, #16
 800cb56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb5a:	e0ca      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800cb5c:	2320      	movs	r3, #32
 800cb5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb62:	e0c6      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800cb64:	2340      	movs	r3, #64	@ 0x40
 800cb66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb6a:	e0c2      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800cb6c:	2380      	movs	r3, #128	@ 0x80
 800cb6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb72:	e0be      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800cb74:	40011400 	.word	0x40011400
 800cb78:	58024400 	.word	0x58024400
 800cb7c:	40007800 	.word	0x40007800
 800cb80:	40007c00 	.word	0x40007c00
 800cb84:	40011800 	.word	0x40011800
 800cb88:	697b      	ldr	r3, [r7, #20]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	4aad      	ldr	r2, [pc, #692]	@ (800ce44 <UART_SetConfig+0x900>)
 800cb8e:	4293      	cmp	r3, r2
 800cb90:	d176      	bne.n	800cc80 <UART_SetConfig+0x73c>
 800cb92:	4bad      	ldr	r3, [pc, #692]	@ (800ce48 <UART_SetConfig+0x904>)
 800cb94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cb9a:	2b28      	cmp	r3, #40	@ 0x28
 800cb9c:	d86c      	bhi.n	800cc78 <UART_SetConfig+0x734>
 800cb9e:	a201      	add	r2, pc, #4	@ (adr r2, 800cba4 <UART_SetConfig+0x660>)
 800cba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cba4:	0800cc49 	.word	0x0800cc49
 800cba8:	0800cc79 	.word	0x0800cc79
 800cbac:	0800cc79 	.word	0x0800cc79
 800cbb0:	0800cc79 	.word	0x0800cc79
 800cbb4:	0800cc79 	.word	0x0800cc79
 800cbb8:	0800cc79 	.word	0x0800cc79
 800cbbc:	0800cc79 	.word	0x0800cc79
 800cbc0:	0800cc79 	.word	0x0800cc79
 800cbc4:	0800cc51 	.word	0x0800cc51
 800cbc8:	0800cc79 	.word	0x0800cc79
 800cbcc:	0800cc79 	.word	0x0800cc79
 800cbd0:	0800cc79 	.word	0x0800cc79
 800cbd4:	0800cc79 	.word	0x0800cc79
 800cbd8:	0800cc79 	.word	0x0800cc79
 800cbdc:	0800cc79 	.word	0x0800cc79
 800cbe0:	0800cc79 	.word	0x0800cc79
 800cbe4:	0800cc59 	.word	0x0800cc59
 800cbe8:	0800cc79 	.word	0x0800cc79
 800cbec:	0800cc79 	.word	0x0800cc79
 800cbf0:	0800cc79 	.word	0x0800cc79
 800cbf4:	0800cc79 	.word	0x0800cc79
 800cbf8:	0800cc79 	.word	0x0800cc79
 800cbfc:	0800cc79 	.word	0x0800cc79
 800cc00:	0800cc79 	.word	0x0800cc79
 800cc04:	0800cc61 	.word	0x0800cc61
 800cc08:	0800cc79 	.word	0x0800cc79
 800cc0c:	0800cc79 	.word	0x0800cc79
 800cc10:	0800cc79 	.word	0x0800cc79
 800cc14:	0800cc79 	.word	0x0800cc79
 800cc18:	0800cc79 	.word	0x0800cc79
 800cc1c:	0800cc79 	.word	0x0800cc79
 800cc20:	0800cc79 	.word	0x0800cc79
 800cc24:	0800cc69 	.word	0x0800cc69
 800cc28:	0800cc79 	.word	0x0800cc79
 800cc2c:	0800cc79 	.word	0x0800cc79
 800cc30:	0800cc79 	.word	0x0800cc79
 800cc34:	0800cc79 	.word	0x0800cc79
 800cc38:	0800cc79 	.word	0x0800cc79
 800cc3c:	0800cc79 	.word	0x0800cc79
 800cc40:	0800cc79 	.word	0x0800cc79
 800cc44:	0800cc71 	.word	0x0800cc71
 800cc48:	2301      	movs	r3, #1
 800cc4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc4e:	e050      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800cc50:	2304      	movs	r3, #4
 800cc52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc56:	e04c      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800cc58:	2308      	movs	r3, #8
 800cc5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc5e:	e048      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800cc60:	2310      	movs	r3, #16
 800cc62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc66:	e044      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800cc68:	2320      	movs	r3, #32
 800cc6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc6e:	e040      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800cc70:	2340      	movs	r3, #64	@ 0x40
 800cc72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc76:	e03c      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800cc78:	2380      	movs	r3, #128	@ 0x80
 800cc7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc7e:	e038      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800cc80:	697b      	ldr	r3, [r7, #20]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	4a71      	ldr	r2, [pc, #452]	@ (800ce4c <UART_SetConfig+0x908>)
 800cc86:	4293      	cmp	r3, r2
 800cc88:	d130      	bne.n	800ccec <UART_SetConfig+0x7a8>
 800cc8a:	4b6f      	ldr	r3, [pc, #444]	@ (800ce48 <UART_SetConfig+0x904>)
 800cc8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cc8e:	f003 0307 	and.w	r3, r3, #7
 800cc92:	2b05      	cmp	r3, #5
 800cc94:	d826      	bhi.n	800cce4 <UART_SetConfig+0x7a0>
 800cc96:	a201      	add	r2, pc, #4	@ (adr r2, 800cc9c <UART_SetConfig+0x758>)
 800cc98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc9c:	0800ccb5 	.word	0x0800ccb5
 800cca0:	0800ccbd 	.word	0x0800ccbd
 800cca4:	0800ccc5 	.word	0x0800ccc5
 800cca8:	0800cccd 	.word	0x0800cccd
 800ccac:	0800ccd5 	.word	0x0800ccd5
 800ccb0:	0800ccdd 	.word	0x0800ccdd
 800ccb4:	2302      	movs	r3, #2
 800ccb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccba:	e01a      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800ccbc:	2304      	movs	r3, #4
 800ccbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccc2:	e016      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800ccc4:	2308      	movs	r3, #8
 800ccc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccca:	e012      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800cccc:	2310      	movs	r3, #16
 800ccce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccd2:	e00e      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800ccd4:	2320      	movs	r3, #32
 800ccd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccda:	e00a      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800ccdc:	2340      	movs	r3, #64	@ 0x40
 800ccde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cce2:	e006      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800cce4:	2380      	movs	r3, #128	@ 0x80
 800cce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccea:	e002      	b.n	800ccf2 <UART_SetConfig+0x7ae>
 800ccec:	2380      	movs	r3, #128	@ 0x80
 800ccee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ccf2:	697b      	ldr	r3, [r7, #20]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	4a55      	ldr	r2, [pc, #340]	@ (800ce4c <UART_SetConfig+0x908>)
 800ccf8:	4293      	cmp	r3, r2
 800ccfa:	f040 80f8 	bne.w	800ceee <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ccfe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cd02:	2b20      	cmp	r3, #32
 800cd04:	dc46      	bgt.n	800cd94 <UART_SetConfig+0x850>
 800cd06:	2b02      	cmp	r3, #2
 800cd08:	db75      	blt.n	800cdf6 <UART_SetConfig+0x8b2>
 800cd0a:	3b02      	subs	r3, #2
 800cd0c:	2b1e      	cmp	r3, #30
 800cd0e:	d872      	bhi.n	800cdf6 <UART_SetConfig+0x8b2>
 800cd10:	a201      	add	r2, pc, #4	@ (adr r2, 800cd18 <UART_SetConfig+0x7d4>)
 800cd12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd16:	bf00      	nop
 800cd18:	0800cd9b 	.word	0x0800cd9b
 800cd1c:	0800cdf7 	.word	0x0800cdf7
 800cd20:	0800cda3 	.word	0x0800cda3
 800cd24:	0800cdf7 	.word	0x0800cdf7
 800cd28:	0800cdf7 	.word	0x0800cdf7
 800cd2c:	0800cdf7 	.word	0x0800cdf7
 800cd30:	0800cdb3 	.word	0x0800cdb3
 800cd34:	0800cdf7 	.word	0x0800cdf7
 800cd38:	0800cdf7 	.word	0x0800cdf7
 800cd3c:	0800cdf7 	.word	0x0800cdf7
 800cd40:	0800cdf7 	.word	0x0800cdf7
 800cd44:	0800cdf7 	.word	0x0800cdf7
 800cd48:	0800cdf7 	.word	0x0800cdf7
 800cd4c:	0800cdf7 	.word	0x0800cdf7
 800cd50:	0800cdc3 	.word	0x0800cdc3
 800cd54:	0800cdf7 	.word	0x0800cdf7
 800cd58:	0800cdf7 	.word	0x0800cdf7
 800cd5c:	0800cdf7 	.word	0x0800cdf7
 800cd60:	0800cdf7 	.word	0x0800cdf7
 800cd64:	0800cdf7 	.word	0x0800cdf7
 800cd68:	0800cdf7 	.word	0x0800cdf7
 800cd6c:	0800cdf7 	.word	0x0800cdf7
 800cd70:	0800cdf7 	.word	0x0800cdf7
 800cd74:	0800cdf7 	.word	0x0800cdf7
 800cd78:	0800cdf7 	.word	0x0800cdf7
 800cd7c:	0800cdf7 	.word	0x0800cdf7
 800cd80:	0800cdf7 	.word	0x0800cdf7
 800cd84:	0800cdf7 	.word	0x0800cdf7
 800cd88:	0800cdf7 	.word	0x0800cdf7
 800cd8c:	0800cdf7 	.word	0x0800cdf7
 800cd90:	0800cde9 	.word	0x0800cde9
 800cd94:	2b40      	cmp	r3, #64	@ 0x40
 800cd96:	d02a      	beq.n	800cdee <UART_SetConfig+0x8aa>
 800cd98:	e02d      	b.n	800cdf6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cd9a:	f7fc fa89 	bl	80092b0 <HAL_RCCEx_GetD3PCLK1Freq>
 800cd9e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cda0:	e02f      	b.n	800ce02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cda2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cda6:	4618      	mov	r0, r3
 800cda8:	f7fc fa98 	bl	80092dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cdac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cdb0:	e027      	b.n	800ce02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cdb2:	f107 0318 	add.w	r3, r7, #24
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f7fc fbe4 	bl	8009584 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cdbc:	69fb      	ldr	r3, [r7, #28]
 800cdbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cdc0:	e01f      	b.n	800ce02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cdc2:	4b21      	ldr	r3, [pc, #132]	@ (800ce48 <UART_SetConfig+0x904>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	f003 0320 	and.w	r3, r3, #32
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d009      	beq.n	800cde2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cdce:	4b1e      	ldr	r3, [pc, #120]	@ (800ce48 <UART_SetConfig+0x904>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	08db      	lsrs	r3, r3, #3
 800cdd4:	f003 0303 	and.w	r3, r3, #3
 800cdd8:	4a1d      	ldr	r2, [pc, #116]	@ (800ce50 <UART_SetConfig+0x90c>)
 800cdda:	fa22 f303 	lsr.w	r3, r2, r3
 800cdde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cde0:	e00f      	b.n	800ce02 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800cde2:	4b1b      	ldr	r3, [pc, #108]	@ (800ce50 <UART_SetConfig+0x90c>)
 800cde4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cde6:	e00c      	b.n	800ce02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cde8:	4b1a      	ldr	r3, [pc, #104]	@ (800ce54 <UART_SetConfig+0x910>)
 800cdea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cdec:	e009      	b.n	800ce02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cdee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cdf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cdf4:	e005      	b.n	800ce02 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800cdfa:	2301      	movs	r3, #1
 800cdfc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ce00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ce02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	f000 81ee 	beq.w	800d1e6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ce0a:	697b      	ldr	r3, [r7, #20]
 800ce0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce0e:	4a12      	ldr	r2, [pc, #72]	@ (800ce58 <UART_SetConfig+0x914>)
 800ce10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce14:	461a      	mov	r2, r3
 800ce16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce18:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce1c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ce1e:	697b      	ldr	r3, [r7, #20]
 800ce20:	685a      	ldr	r2, [r3, #4]
 800ce22:	4613      	mov	r3, r2
 800ce24:	005b      	lsls	r3, r3, #1
 800ce26:	4413      	add	r3, r2
 800ce28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce2a:	429a      	cmp	r2, r3
 800ce2c:	d305      	bcc.n	800ce3a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ce2e:	697b      	ldr	r3, [r7, #20]
 800ce30:	685b      	ldr	r3, [r3, #4]
 800ce32:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ce34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce36:	429a      	cmp	r2, r3
 800ce38:	d910      	bls.n	800ce5c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ce40:	e1d1      	b.n	800d1e6 <UART_SetConfig+0xca2>
 800ce42:	bf00      	nop
 800ce44:	40011c00 	.word	0x40011c00
 800ce48:	58024400 	.word	0x58024400
 800ce4c:	58000c00 	.word	0x58000c00
 800ce50:	03d09000 	.word	0x03d09000
 800ce54:	003d0900 	.word	0x003d0900
 800ce58:	08012418 	.word	0x08012418
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ce5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce5e:	2200      	movs	r2, #0
 800ce60:	60bb      	str	r3, [r7, #8]
 800ce62:	60fa      	str	r2, [r7, #12]
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce68:	4ac0      	ldr	r2, [pc, #768]	@ (800d16c <UART_SetConfig+0xc28>)
 800ce6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce6e:	b29b      	uxth	r3, r3
 800ce70:	2200      	movs	r2, #0
 800ce72:	603b      	str	r3, [r7, #0]
 800ce74:	607a      	str	r2, [r7, #4]
 800ce76:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ce7e:	f7f3 fa87 	bl	8000390 <__aeabi_uldivmod>
 800ce82:	4602      	mov	r2, r0
 800ce84:	460b      	mov	r3, r1
 800ce86:	4610      	mov	r0, r2
 800ce88:	4619      	mov	r1, r3
 800ce8a:	f04f 0200 	mov.w	r2, #0
 800ce8e:	f04f 0300 	mov.w	r3, #0
 800ce92:	020b      	lsls	r3, r1, #8
 800ce94:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ce98:	0202      	lsls	r2, r0, #8
 800ce9a:	6979      	ldr	r1, [r7, #20]
 800ce9c:	6849      	ldr	r1, [r1, #4]
 800ce9e:	0849      	lsrs	r1, r1, #1
 800cea0:	2000      	movs	r0, #0
 800cea2:	460c      	mov	r4, r1
 800cea4:	4605      	mov	r5, r0
 800cea6:	eb12 0804 	adds.w	r8, r2, r4
 800ceaa:	eb43 0905 	adc.w	r9, r3, r5
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	685b      	ldr	r3, [r3, #4]
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	469a      	mov	sl, r3
 800ceb6:	4693      	mov	fp, r2
 800ceb8:	4652      	mov	r2, sl
 800ceba:	465b      	mov	r3, fp
 800cebc:	4640      	mov	r0, r8
 800cebe:	4649      	mov	r1, r9
 800cec0:	f7f3 fa66 	bl	8000390 <__aeabi_uldivmod>
 800cec4:	4602      	mov	r2, r0
 800cec6:	460b      	mov	r3, r1
 800cec8:	4613      	mov	r3, r2
 800ceca:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cece:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ced2:	d308      	bcc.n	800cee6 <UART_SetConfig+0x9a2>
 800ced4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ced6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ceda:	d204      	bcs.n	800cee6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800cedc:	697b      	ldr	r3, [r7, #20]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cee2:	60da      	str	r2, [r3, #12]
 800cee4:	e17f      	b.n	800d1e6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800cee6:	2301      	movs	r3, #1
 800cee8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ceec:	e17b      	b.n	800d1e6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ceee:	697b      	ldr	r3, [r7, #20]
 800cef0:	69db      	ldr	r3, [r3, #28]
 800cef2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cef6:	f040 80bd 	bne.w	800d074 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800cefa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cefe:	2b20      	cmp	r3, #32
 800cf00:	dc48      	bgt.n	800cf94 <UART_SetConfig+0xa50>
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	db7b      	blt.n	800cffe <UART_SetConfig+0xaba>
 800cf06:	2b20      	cmp	r3, #32
 800cf08:	d879      	bhi.n	800cffe <UART_SetConfig+0xaba>
 800cf0a:	a201      	add	r2, pc, #4	@ (adr r2, 800cf10 <UART_SetConfig+0x9cc>)
 800cf0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf10:	0800cf9b 	.word	0x0800cf9b
 800cf14:	0800cfa3 	.word	0x0800cfa3
 800cf18:	0800cfff 	.word	0x0800cfff
 800cf1c:	0800cfff 	.word	0x0800cfff
 800cf20:	0800cfab 	.word	0x0800cfab
 800cf24:	0800cfff 	.word	0x0800cfff
 800cf28:	0800cfff 	.word	0x0800cfff
 800cf2c:	0800cfff 	.word	0x0800cfff
 800cf30:	0800cfbb 	.word	0x0800cfbb
 800cf34:	0800cfff 	.word	0x0800cfff
 800cf38:	0800cfff 	.word	0x0800cfff
 800cf3c:	0800cfff 	.word	0x0800cfff
 800cf40:	0800cfff 	.word	0x0800cfff
 800cf44:	0800cfff 	.word	0x0800cfff
 800cf48:	0800cfff 	.word	0x0800cfff
 800cf4c:	0800cfff 	.word	0x0800cfff
 800cf50:	0800cfcb 	.word	0x0800cfcb
 800cf54:	0800cfff 	.word	0x0800cfff
 800cf58:	0800cfff 	.word	0x0800cfff
 800cf5c:	0800cfff 	.word	0x0800cfff
 800cf60:	0800cfff 	.word	0x0800cfff
 800cf64:	0800cfff 	.word	0x0800cfff
 800cf68:	0800cfff 	.word	0x0800cfff
 800cf6c:	0800cfff 	.word	0x0800cfff
 800cf70:	0800cfff 	.word	0x0800cfff
 800cf74:	0800cfff 	.word	0x0800cfff
 800cf78:	0800cfff 	.word	0x0800cfff
 800cf7c:	0800cfff 	.word	0x0800cfff
 800cf80:	0800cfff 	.word	0x0800cfff
 800cf84:	0800cfff 	.word	0x0800cfff
 800cf88:	0800cfff 	.word	0x0800cfff
 800cf8c:	0800cfff 	.word	0x0800cfff
 800cf90:	0800cff1 	.word	0x0800cff1
 800cf94:	2b40      	cmp	r3, #64	@ 0x40
 800cf96:	d02e      	beq.n	800cff6 <UART_SetConfig+0xab2>
 800cf98:	e031      	b.n	800cffe <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cf9a:	f7fa ff9f 	bl	8007edc <HAL_RCC_GetPCLK1Freq>
 800cf9e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cfa0:	e033      	b.n	800d00a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cfa2:	f7fa ffb1 	bl	8007f08 <HAL_RCC_GetPCLK2Freq>
 800cfa6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cfa8:	e02f      	b.n	800d00a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cfaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cfae:	4618      	mov	r0, r3
 800cfb0:	f7fc f994 	bl	80092dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cfb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cfb8:	e027      	b.n	800d00a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cfba:	f107 0318 	add.w	r3, r7, #24
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f7fc fae0 	bl	8009584 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cfc4:	69fb      	ldr	r3, [r7, #28]
 800cfc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cfc8:	e01f      	b.n	800d00a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cfca:	4b69      	ldr	r3, [pc, #420]	@ (800d170 <UART_SetConfig+0xc2c>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	f003 0320 	and.w	r3, r3, #32
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d009      	beq.n	800cfea <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cfd6:	4b66      	ldr	r3, [pc, #408]	@ (800d170 <UART_SetConfig+0xc2c>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	08db      	lsrs	r3, r3, #3
 800cfdc:	f003 0303 	and.w	r3, r3, #3
 800cfe0:	4a64      	ldr	r2, [pc, #400]	@ (800d174 <UART_SetConfig+0xc30>)
 800cfe2:	fa22 f303 	lsr.w	r3, r2, r3
 800cfe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cfe8:	e00f      	b.n	800d00a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800cfea:	4b62      	ldr	r3, [pc, #392]	@ (800d174 <UART_SetConfig+0xc30>)
 800cfec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cfee:	e00c      	b.n	800d00a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cff0:	4b61      	ldr	r3, [pc, #388]	@ (800d178 <UART_SetConfig+0xc34>)
 800cff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cff4:	e009      	b.n	800d00a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cff6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cffc:	e005      	b.n	800d00a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800cffe:	2300      	movs	r3, #0
 800d000:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d002:	2301      	movs	r3, #1
 800d004:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d008:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d00a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	f000 80ea 	beq.w	800d1e6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d012:	697b      	ldr	r3, [r7, #20]
 800d014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d016:	4a55      	ldr	r2, [pc, #340]	@ (800d16c <UART_SetConfig+0xc28>)
 800d018:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d01c:	461a      	mov	r2, r3
 800d01e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d020:	fbb3 f3f2 	udiv	r3, r3, r2
 800d024:	005a      	lsls	r2, r3, #1
 800d026:	697b      	ldr	r3, [r7, #20]
 800d028:	685b      	ldr	r3, [r3, #4]
 800d02a:	085b      	lsrs	r3, r3, #1
 800d02c:	441a      	add	r2, r3
 800d02e:	697b      	ldr	r3, [r7, #20]
 800d030:	685b      	ldr	r3, [r3, #4]
 800d032:	fbb2 f3f3 	udiv	r3, r2, r3
 800d036:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d03a:	2b0f      	cmp	r3, #15
 800d03c:	d916      	bls.n	800d06c <UART_SetConfig+0xb28>
 800d03e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d040:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d044:	d212      	bcs.n	800d06c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d048:	b29b      	uxth	r3, r3
 800d04a:	f023 030f 	bic.w	r3, r3, #15
 800d04e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d052:	085b      	lsrs	r3, r3, #1
 800d054:	b29b      	uxth	r3, r3
 800d056:	f003 0307 	and.w	r3, r3, #7
 800d05a:	b29a      	uxth	r2, r3
 800d05c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d05e:	4313      	orrs	r3, r2
 800d060:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d068:	60da      	str	r2, [r3, #12]
 800d06a:	e0bc      	b.n	800d1e6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d06c:	2301      	movs	r3, #1
 800d06e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d072:	e0b8      	b.n	800d1e6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d074:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d078:	2b20      	cmp	r3, #32
 800d07a:	dc4b      	bgt.n	800d114 <UART_SetConfig+0xbd0>
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	f2c0 8087 	blt.w	800d190 <UART_SetConfig+0xc4c>
 800d082:	2b20      	cmp	r3, #32
 800d084:	f200 8084 	bhi.w	800d190 <UART_SetConfig+0xc4c>
 800d088:	a201      	add	r2, pc, #4	@ (adr r2, 800d090 <UART_SetConfig+0xb4c>)
 800d08a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d08e:	bf00      	nop
 800d090:	0800d11b 	.word	0x0800d11b
 800d094:	0800d123 	.word	0x0800d123
 800d098:	0800d191 	.word	0x0800d191
 800d09c:	0800d191 	.word	0x0800d191
 800d0a0:	0800d12b 	.word	0x0800d12b
 800d0a4:	0800d191 	.word	0x0800d191
 800d0a8:	0800d191 	.word	0x0800d191
 800d0ac:	0800d191 	.word	0x0800d191
 800d0b0:	0800d13b 	.word	0x0800d13b
 800d0b4:	0800d191 	.word	0x0800d191
 800d0b8:	0800d191 	.word	0x0800d191
 800d0bc:	0800d191 	.word	0x0800d191
 800d0c0:	0800d191 	.word	0x0800d191
 800d0c4:	0800d191 	.word	0x0800d191
 800d0c8:	0800d191 	.word	0x0800d191
 800d0cc:	0800d191 	.word	0x0800d191
 800d0d0:	0800d14b 	.word	0x0800d14b
 800d0d4:	0800d191 	.word	0x0800d191
 800d0d8:	0800d191 	.word	0x0800d191
 800d0dc:	0800d191 	.word	0x0800d191
 800d0e0:	0800d191 	.word	0x0800d191
 800d0e4:	0800d191 	.word	0x0800d191
 800d0e8:	0800d191 	.word	0x0800d191
 800d0ec:	0800d191 	.word	0x0800d191
 800d0f0:	0800d191 	.word	0x0800d191
 800d0f4:	0800d191 	.word	0x0800d191
 800d0f8:	0800d191 	.word	0x0800d191
 800d0fc:	0800d191 	.word	0x0800d191
 800d100:	0800d191 	.word	0x0800d191
 800d104:	0800d191 	.word	0x0800d191
 800d108:	0800d191 	.word	0x0800d191
 800d10c:	0800d191 	.word	0x0800d191
 800d110:	0800d183 	.word	0x0800d183
 800d114:	2b40      	cmp	r3, #64	@ 0x40
 800d116:	d037      	beq.n	800d188 <UART_SetConfig+0xc44>
 800d118:	e03a      	b.n	800d190 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d11a:	f7fa fedf 	bl	8007edc <HAL_RCC_GetPCLK1Freq>
 800d11e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d120:	e03c      	b.n	800d19c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d122:	f7fa fef1 	bl	8007f08 <HAL_RCC_GetPCLK2Freq>
 800d126:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d128:	e038      	b.n	800d19c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d12a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d12e:	4618      	mov	r0, r3
 800d130:	f7fc f8d4 	bl	80092dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d136:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d138:	e030      	b.n	800d19c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d13a:	f107 0318 	add.w	r3, r7, #24
 800d13e:	4618      	mov	r0, r3
 800d140:	f7fc fa20 	bl	8009584 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d144:	69fb      	ldr	r3, [r7, #28]
 800d146:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d148:	e028      	b.n	800d19c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d14a:	4b09      	ldr	r3, [pc, #36]	@ (800d170 <UART_SetConfig+0xc2c>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	f003 0320 	and.w	r3, r3, #32
 800d152:	2b00      	cmp	r3, #0
 800d154:	d012      	beq.n	800d17c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d156:	4b06      	ldr	r3, [pc, #24]	@ (800d170 <UART_SetConfig+0xc2c>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	08db      	lsrs	r3, r3, #3
 800d15c:	f003 0303 	and.w	r3, r3, #3
 800d160:	4a04      	ldr	r2, [pc, #16]	@ (800d174 <UART_SetConfig+0xc30>)
 800d162:	fa22 f303 	lsr.w	r3, r2, r3
 800d166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d168:	e018      	b.n	800d19c <UART_SetConfig+0xc58>
 800d16a:	bf00      	nop
 800d16c:	08012418 	.word	0x08012418
 800d170:	58024400 	.word	0x58024400
 800d174:	03d09000 	.word	0x03d09000
 800d178:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800d17c:	4b24      	ldr	r3, [pc, #144]	@ (800d210 <UART_SetConfig+0xccc>)
 800d17e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d180:	e00c      	b.n	800d19c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d182:	4b24      	ldr	r3, [pc, #144]	@ (800d214 <UART_SetConfig+0xcd0>)
 800d184:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d186:	e009      	b.n	800d19c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d188:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d18c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d18e:	e005      	b.n	800d19c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800d190:	2300      	movs	r3, #0
 800d192:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d194:	2301      	movs	r3, #1
 800d196:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d19a:	bf00      	nop
    }

    if (pclk != 0U)
 800d19c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d021      	beq.n	800d1e6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d1a2:	697b      	ldr	r3, [r7, #20]
 800d1a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1a6:	4a1c      	ldr	r2, [pc, #112]	@ (800d218 <UART_SetConfig+0xcd4>)
 800d1a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d1ac:	461a      	mov	r2, r3
 800d1ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1b0:	fbb3 f2f2 	udiv	r2, r3, r2
 800d1b4:	697b      	ldr	r3, [r7, #20]
 800d1b6:	685b      	ldr	r3, [r3, #4]
 800d1b8:	085b      	lsrs	r3, r3, #1
 800d1ba:	441a      	add	r2, r3
 800d1bc:	697b      	ldr	r3, [r7, #20]
 800d1be:	685b      	ldr	r3, [r3, #4]
 800d1c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1c4:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d1c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1c8:	2b0f      	cmp	r3, #15
 800d1ca:	d909      	bls.n	800d1e0 <UART_SetConfig+0xc9c>
 800d1cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d1d2:	d205      	bcs.n	800d1e0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d1d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1d6:	b29a      	uxth	r2, r3
 800d1d8:	697b      	ldr	r3, [r7, #20]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	60da      	str	r2, [r3, #12]
 800d1de:	e002      	b.n	800d1e6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d1e6:	697b      	ldr	r3, [r7, #20]
 800d1e8:	2201      	movs	r2, #1
 800d1ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d1ee:	697b      	ldr	r3, [r7, #20]
 800d1f0:	2201      	movs	r2, #1
 800d1f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d1f6:	697b      	ldr	r3, [r7, #20]
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d1fc:	697b      	ldr	r3, [r7, #20]
 800d1fe:	2200      	movs	r2, #0
 800d200:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d202:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800d206:	4618      	mov	r0, r3
 800d208:	3748      	adds	r7, #72	@ 0x48
 800d20a:	46bd      	mov	sp, r7
 800d20c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d210:	03d09000 	.word	0x03d09000
 800d214:	003d0900 	.word	0x003d0900
 800d218:	08012418 	.word	0x08012418

0800d21c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d21c:	b480      	push	{r7}
 800d21e:	b083      	sub	sp, #12
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d228:	f003 0308 	and.w	r3, r3, #8
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d00a      	beq.n	800d246 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	685b      	ldr	r3, [r3, #4]
 800d236:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	430a      	orrs	r2, r1
 800d244:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d24a:	f003 0301 	and.w	r3, r3, #1
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d00a      	beq.n	800d268 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	685b      	ldr	r3, [r3, #4]
 800d258:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	430a      	orrs	r2, r1
 800d266:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d26c:	f003 0302 	and.w	r3, r3, #2
 800d270:	2b00      	cmp	r3, #0
 800d272:	d00a      	beq.n	800d28a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	685b      	ldr	r3, [r3, #4]
 800d27a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	430a      	orrs	r2, r1
 800d288:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d28e:	f003 0304 	and.w	r3, r3, #4
 800d292:	2b00      	cmp	r3, #0
 800d294:	d00a      	beq.n	800d2ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	685b      	ldr	r3, [r3, #4]
 800d29c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	430a      	orrs	r2, r1
 800d2aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2b0:	f003 0310 	and.w	r3, r3, #16
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d00a      	beq.n	800d2ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	689b      	ldr	r3, [r3, #8]
 800d2be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	430a      	orrs	r2, r1
 800d2cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2d2:	f003 0320 	and.w	r3, r3, #32
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d00a      	beq.n	800d2f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	689b      	ldr	r3, [r3, #8]
 800d2e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	430a      	orrs	r2, r1
 800d2ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d01a      	beq.n	800d332 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	685b      	ldr	r3, [r3, #4]
 800d302:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	430a      	orrs	r2, r1
 800d310:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d316:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d31a:	d10a      	bne.n	800d332 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	685b      	ldr	r3, [r3, #4]
 800d322:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	430a      	orrs	r2, r1
 800d330:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d00a      	beq.n	800d354 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	685b      	ldr	r3, [r3, #4]
 800d344:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	430a      	orrs	r2, r1
 800d352:	605a      	str	r2, [r3, #4]
  }
}
 800d354:	bf00      	nop
 800d356:	370c      	adds	r7, #12
 800d358:	46bd      	mov	sp, r7
 800d35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35e:	4770      	bx	lr

0800d360 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b098      	sub	sp, #96	@ 0x60
 800d364:	af02      	add	r7, sp, #8
 800d366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	2200      	movs	r2, #0
 800d36c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d370:	f7f5 fef0 	bl	8003154 <HAL_GetTick>
 800d374:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	f003 0308 	and.w	r3, r3, #8
 800d380:	2b08      	cmp	r3, #8
 800d382:	d12f      	bne.n	800d3e4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d384:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d388:	9300      	str	r3, [sp, #0]
 800d38a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d38c:	2200      	movs	r2, #0
 800d38e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d392:	6878      	ldr	r0, [r7, #4]
 800d394:	f000 f88e 	bl	800d4b4 <UART_WaitOnFlagUntilTimeout>
 800d398:	4603      	mov	r3, r0
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d022      	beq.n	800d3e4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3a6:	e853 3f00 	ldrex	r3, [r3]
 800d3aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d3ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d3b2:	653b      	str	r3, [r7, #80]	@ 0x50
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	461a      	mov	r2, r3
 800d3ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3bc:	647b      	str	r3, [r7, #68]	@ 0x44
 800d3be:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d3c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d3c4:	e841 2300 	strex	r3, r2, [r1]
 800d3c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d3ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d1e6      	bne.n	800d39e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2220      	movs	r2, #32
 800d3d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2200      	movs	r2, #0
 800d3dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d3e0:	2303      	movs	r3, #3
 800d3e2:	e063      	b.n	800d4ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	f003 0304 	and.w	r3, r3, #4
 800d3ee:	2b04      	cmp	r3, #4
 800d3f0:	d149      	bne.n	800d486 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d3f2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d3f6:	9300      	str	r3, [sp, #0]
 800d3f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f000 f857 	bl	800d4b4 <UART_WaitOnFlagUntilTimeout>
 800d406:	4603      	mov	r3, r0
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d03c      	beq.n	800d486 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d414:	e853 3f00 	ldrex	r3, [r3]
 800d418:	623b      	str	r3, [r7, #32]
   return(result);
 800d41a:	6a3b      	ldr	r3, [r7, #32]
 800d41c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d420:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	461a      	mov	r2, r3
 800d428:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d42a:	633b      	str	r3, [r7, #48]	@ 0x30
 800d42c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d42e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d430:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d432:	e841 2300 	strex	r3, r2, [r1]
 800d436:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d1e6      	bne.n	800d40c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	3308      	adds	r3, #8
 800d444:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d446:	693b      	ldr	r3, [r7, #16]
 800d448:	e853 3f00 	ldrex	r3, [r3]
 800d44c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	f023 0301 	bic.w	r3, r3, #1
 800d454:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	3308      	adds	r3, #8
 800d45c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d45e:	61fa      	str	r2, [r7, #28]
 800d460:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d462:	69b9      	ldr	r1, [r7, #24]
 800d464:	69fa      	ldr	r2, [r7, #28]
 800d466:	e841 2300 	strex	r3, r2, [r1]
 800d46a:	617b      	str	r3, [r7, #20]
   return(result);
 800d46c:	697b      	ldr	r3, [r7, #20]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d1e5      	bne.n	800d43e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2220      	movs	r2, #32
 800d476:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	2200      	movs	r2, #0
 800d47e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d482:	2303      	movs	r3, #3
 800d484:	e012      	b.n	800d4ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	2220      	movs	r2, #32
 800d48a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	2220      	movs	r2, #32
 800d492:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	2200      	movs	r2, #0
 800d49a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	2200      	movs	r2, #0
 800d4a0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d4aa:	2300      	movs	r3, #0
}
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	3758      	adds	r7, #88	@ 0x58
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	bd80      	pop	{r7, pc}

0800d4b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b084      	sub	sp, #16
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	60f8      	str	r0, [r7, #12]
 800d4bc:	60b9      	str	r1, [r7, #8]
 800d4be:	603b      	str	r3, [r7, #0]
 800d4c0:	4613      	mov	r3, r2
 800d4c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d4c4:	e04f      	b.n	800d566 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d4c6:	69bb      	ldr	r3, [r7, #24]
 800d4c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4cc:	d04b      	beq.n	800d566 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d4ce:	f7f5 fe41 	bl	8003154 <HAL_GetTick>
 800d4d2:	4602      	mov	r2, r0
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	1ad3      	subs	r3, r2, r3
 800d4d8:	69ba      	ldr	r2, [r7, #24]
 800d4da:	429a      	cmp	r2, r3
 800d4dc:	d302      	bcc.n	800d4e4 <UART_WaitOnFlagUntilTimeout+0x30>
 800d4de:	69bb      	ldr	r3, [r7, #24]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d101      	bne.n	800d4e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d4e4:	2303      	movs	r3, #3
 800d4e6:	e04e      	b.n	800d586 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	f003 0304 	and.w	r3, r3, #4
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d037      	beq.n	800d566 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d4f6:	68bb      	ldr	r3, [r7, #8]
 800d4f8:	2b80      	cmp	r3, #128	@ 0x80
 800d4fa:	d034      	beq.n	800d566 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d4fc:	68bb      	ldr	r3, [r7, #8]
 800d4fe:	2b40      	cmp	r3, #64	@ 0x40
 800d500:	d031      	beq.n	800d566 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	69db      	ldr	r3, [r3, #28]
 800d508:	f003 0308 	and.w	r3, r3, #8
 800d50c:	2b08      	cmp	r3, #8
 800d50e:	d110      	bne.n	800d532 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	2208      	movs	r2, #8
 800d516:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d518:	68f8      	ldr	r0, [r7, #12]
 800d51a:	f000 f921 	bl	800d760 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	2208      	movs	r2, #8
 800d522:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	2200      	movs	r2, #0
 800d52a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d52e:	2301      	movs	r3, #1
 800d530:	e029      	b.n	800d586 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	69db      	ldr	r3, [r3, #28]
 800d538:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d53c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d540:	d111      	bne.n	800d566 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d54a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d54c:	68f8      	ldr	r0, [r7, #12]
 800d54e:	f000 f907 	bl	800d760 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	2220      	movs	r2, #32
 800d556:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	2200      	movs	r2, #0
 800d55e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d562:	2303      	movs	r3, #3
 800d564:	e00f      	b.n	800d586 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	69da      	ldr	r2, [r3, #28]
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	4013      	ands	r3, r2
 800d570:	68ba      	ldr	r2, [r7, #8]
 800d572:	429a      	cmp	r2, r3
 800d574:	bf0c      	ite	eq
 800d576:	2301      	moveq	r3, #1
 800d578:	2300      	movne	r3, #0
 800d57a:	b2db      	uxtb	r3, r3
 800d57c:	461a      	mov	r2, r3
 800d57e:	79fb      	ldrb	r3, [r7, #7]
 800d580:	429a      	cmp	r2, r3
 800d582:	d0a0      	beq.n	800d4c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d584:	2300      	movs	r3, #0
}
 800d586:	4618      	mov	r0, r3
 800d588:	3710      	adds	r7, #16
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}
	...

0800d590 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b096      	sub	sp, #88	@ 0x58
 800d594:	af00      	add	r7, sp, #0
 800d596:	60f8      	str	r0, [r7, #12]
 800d598:	60b9      	str	r1, [r7, #8]
 800d59a:	4613      	mov	r3, r2
 800d59c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	68ba      	ldr	r2, [r7, #8]
 800d5a2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	88fa      	ldrh	r2, [r7, #6]
 800d5a8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	2222      	movs	r2, #34	@ 0x22
 800d5b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d02d      	beq.n	800d622 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5cc:	4a40      	ldr	r2, [pc, #256]	@ (800d6d0 <UART_Start_Receive_DMA+0x140>)
 800d5ce:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5d6:	4a3f      	ldr	r2, [pc, #252]	@ (800d6d4 <UART_Start_Receive_DMA+0x144>)
 800d5d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5e0:	4a3d      	ldr	r2, [pc, #244]	@ (800d6d8 <UART_Start_Receive_DMA+0x148>)
 800d5e2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	3324      	adds	r3, #36	@ 0x24
 800d5fa:	4619      	mov	r1, r3
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d600:	461a      	mov	r2, r3
 800d602:	88fb      	ldrh	r3, [r7, #6]
 800d604:	f7f6 faec 	bl	8003be0 <HAL_DMA_Start_IT>
 800d608:	4603      	mov	r3, r0
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d009      	beq.n	800d622 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	2210      	movs	r2, #16
 800d612:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	2220      	movs	r2, #32
 800d61a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800d61e:	2301      	movs	r3, #1
 800d620:	e051      	b.n	800d6c6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	691b      	ldr	r3, [r3, #16]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d018      	beq.n	800d65c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d630:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d632:	e853 3f00 	ldrex	r3, [r3]
 800d636:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d63a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d63e:	657b      	str	r3, [r7, #84]	@ 0x54
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	461a      	mov	r2, r3
 800d646:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d648:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d64a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d64c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d64e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d650:	e841 2300 	strex	r3, r2, [r1]
 800d654:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d656:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d1e6      	bne.n	800d62a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	3308      	adds	r3, #8
 800d662:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d666:	e853 3f00 	ldrex	r3, [r3]
 800d66a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d66c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d66e:	f043 0301 	orr.w	r3, r3, #1
 800d672:	653b      	str	r3, [r7, #80]	@ 0x50
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	3308      	adds	r3, #8
 800d67a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d67c:	637a      	str	r2, [r7, #52]	@ 0x34
 800d67e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d680:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d682:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d684:	e841 2300 	strex	r3, r2, [r1]
 800d688:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d68a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d1e5      	bne.n	800d65c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	3308      	adds	r3, #8
 800d696:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d698:	697b      	ldr	r3, [r7, #20]
 800d69a:	e853 3f00 	ldrex	r3, [r3]
 800d69e:	613b      	str	r3, [r7, #16]
   return(result);
 800d6a0:	693b      	ldr	r3, [r7, #16]
 800d6a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	3308      	adds	r3, #8
 800d6ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d6b0:	623a      	str	r2, [r7, #32]
 800d6b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6b4:	69f9      	ldr	r1, [r7, #28]
 800d6b6:	6a3a      	ldr	r2, [r7, #32]
 800d6b8:	e841 2300 	strex	r3, r2, [r1]
 800d6bc:	61bb      	str	r3, [r7, #24]
   return(result);
 800d6be:	69bb      	ldr	r3, [r7, #24]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d1e5      	bne.n	800d690 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800d6c4:	2300      	movs	r3, #0
}
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	3758      	adds	r7, #88	@ 0x58
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}
 800d6ce:	bf00      	nop
 800d6d0:	0800d82d 	.word	0x0800d82d
 800d6d4:	0800d955 	.word	0x0800d955
 800d6d8:	0800d993 	.word	0x0800d993

0800d6dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b08f      	sub	sp, #60	@ 0x3c
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6ea:	6a3b      	ldr	r3, [r7, #32]
 800d6ec:	e853 3f00 	ldrex	r3, [r3]
 800d6f0:	61fb      	str	r3, [r7, #28]
   return(result);
 800d6f2:	69fb      	ldr	r3, [r7, #28]
 800d6f4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d6f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	461a      	mov	r2, r3
 800d700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d702:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d704:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d706:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d708:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d70a:	e841 2300 	strex	r3, r2, [r1]
 800d70e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d712:	2b00      	cmp	r3, #0
 800d714:	d1e6      	bne.n	800d6e4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	3308      	adds	r3, #8
 800d71c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	e853 3f00 	ldrex	r3, [r3]
 800d724:	60bb      	str	r3, [r7, #8]
   return(result);
 800d726:	68bb      	ldr	r3, [r7, #8]
 800d728:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800d72c:	633b      	str	r3, [r7, #48]	@ 0x30
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	3308      	adds	r3, #8
 800d734:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d736:	61ba      	str	r2, [r7, #24]
 800d738:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d73a:	6979      	ldr	r1, [r7, #20]
 800d73c:	69ba      	ldr	r2, [r7, #24]
 800d73e:	e841 2300 	strex	r3, r2, [r1]
 800d742:	613b      	str	r3, [r7, #16]
   return(result);
 800d744:	693b      	ldr	r3, [r7, #16]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d1e5      	bne.n	800d716 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	2220      	movs	r2, #32
 800d74e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800d752:	bf00      	nop
 800d754:	373c      	adds	r7, #60	@ 0x3c
 800d756:	46bd      	mov	sp, r7
 800d758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75c:	4770      	bx	lr
	...

0800d760 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d760:	b480      	push	{r7}
 800d762:	b095      	sub	sp, #84	@ 0x54
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d76e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d770:	e853 3f00 	ldrex	r3, [r3]
 800d774:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d778:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d77c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	461a      	mov	r2, r3
 800d784:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d786:	643b      	str	r3, [r7, #64]	@ 0x40
 800d788:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d78a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d78c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d78e:	e841 2300 	strex	r3, r2, [r1]
 800d792:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d796:	2b00      	cmp	r3, #0
 800d798:	d1e6      	bne.n	800d768 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	3308      	adds	r3, #8
 800d7a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7a2:	6a3b      	ldr	r3, [r7, #32]
 800d7a4:	e853 3f00 	ldrex	r3, [r3]
 800d7a8:	61fb      	str	r3, [r7, #28]
   return(result);
 800d7aa:	69fa      	ldr	r2, [r7, #28]
 800d7ac:	4b1e      	ldr	r3, [pc, #120]	@ (800d828 <UART_EndRxTransfer+0xc8>)
 800d7ae:	4013      	ands	r3, r2
 800d7b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	3308      	adds	r3, #8
 800d7b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d7ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d7bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d7c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d7c2:	e841 2300 	strex	r3, r2, [r1]
 800d7c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d7c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d1e5      	bne.n	800d79a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d7d2:	2b01      	cmp	r3, #1
 800d7d4:	d118      	bne.n	800d808 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	e853 3f00 	ldrex	r3, [r3]
 800d7e2:	60bb      	str	r3, [r7, #8]
   return(result);
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	f023 0310 	bic.w	r3, r3, #16
 800d7ea:	647b      	str	r3, [r7, #68]	@ 0x44
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	461a      	mov	r2, r3
 800d7f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7f4:	61bb      	str	r3, [r7, #24]
 800d7f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7f8:	6979      	ldr	r1, [r7, #20]
 800d7fa:	69ba      	ldr	r2, [r7, #24]
 800d7fc:	e841 2300 	strex	r3, r2, [r1]
 800d800:	613b      	str	r3, [r7, #16]
   return(result);
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d1e6      	bne.n	800d7d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2220      	movs	r2, #32
 800d80c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2200      	movs	r2, #0
 800d814:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2200      	movs	r2, #0
 800d81a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d81c:	bf00      	nop
 800d81e:	3754      	adds	r7, #84	@ 0x54
 800d820:	46bd      	mov	sp, r7
 800d822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d826:	4770      	bx	lr
 800d828:	effffffe 	.word	0xeffffffe

0800d82c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b09c      	sub	sp, #112	@ 0x70
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d838:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	69db      	ldr	r3, [r3, #28]
 800d83e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d842:	d071      	beq.n	800d928 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800d844:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d846:	2200      	movs	r2, #0
 800d848:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d84c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d852:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d854:	e853 3f00 	ldrex	r3, [r3]
 800d858:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d85a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d85c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d860:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d862:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	461a      	mov	r2, r3
 800d868:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d86a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d86c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d86e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d870:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d872:	e841 2300 	strex	r3, r2, [r1]
 800d876:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d878:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d1e6      	bne.n	800d84c <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d87e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	3308      	adds	r3, #8
 800d884:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d888:	e853 3f00 	ldrex	r3, [r3]
 800d88c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d88e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d890:	f023 0301 	bic.w	r3, r3, #1
 800d894:	667b      	str	r3, [r7, #100]	@ 0x64
 800d896:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	3308      	adds	r3, #8
 800d89c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d89e:	647a      	str	r2, [r7, #68]	@ 0x44
 800d8a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d8a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d8a6:	e841 2300 	strex	r3, r2, [r1]
 800d8aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d8ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d1e5      	bne.n	800d87e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d8b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	3308      	adds	r3, #8
 800d8b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8bc:	e853 3f00 	ldrex	r3, [r3]
 800d8c0:	623b      	str	r3, [r7, #32]
   return(result);
 800d8c2:	6a3b      	ldr	r3, [r7, #32]
 800d8c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d8c8:	663b      	str	r3, [r7, #96]	@ 0x60
 800d8ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	3308      	adds	r3, #8
 800d8d0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d8d2:	633a      	str	r2, [r7, #48]	@ 0x30
 800d8d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d8d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8da:	e841 2300 	strex	r3, r2, [r1]
 800d8de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d8e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d1e5      	bne.n	800d8b2 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d8e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d8e8:	2220      	movs	r2, #32
 800d8ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d8ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d8f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d8f2:	2b01      	cmp	r3, #1
 800d8f4:	d118      	bne.n	800d928 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d8f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8fc:	693b      	ldr	r3, [r7, #16]
 800d8fe:	e853 3f00 	ldrex	r3, [r3]
 800d902:	60fb      	str	r3, [r7, #12]
   return(result);
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	f023 0310 	bic.w	r3, r3, #16
 800d90a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d90c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	461a      	mov	r2, r3
 800d912:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d914:	61fb      	str	r3, [r7, #28]
 800d916:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d918:	69b9      	ldr	r1, [r7, #24]
 800d91a:	69fa      	ldr	r2, [r7, #28]
 800d91c:	e841 2300 	strex	r3, r2, [r1]
 800d920:	617b      	str	r3, [r7, #20]
   return(result);
 800d922:	697b      	ldr	r3, [r7, #20]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d1e6      	bne.n	800d8f6 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d928:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d92a:	2200      	movs	r2, #0
 800d92c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d92e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d930:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d932:	2b01      	cmp	r3, #1
 800d934:	d107      	bne.n	800d946 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d936:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d938:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d93c:	4619      	mov	r1, r3
 800d93e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d940:	f7fe fdf4 	bl	800c52c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d944:	e002      	b.n	800d94c <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800d946:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d948:	f7f4 fb42 	bl	8001fd0 <HAL_UART_RxCpltCallback>
}
 800d94c:	bf00      	nop
 800d94e:	3770      	adds	r7, #112	@ 0x70
 800d950:	46bd      	mov	sp, r7
 800d952:	bd80      	pop	{r7, pc}

0800d954 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b084      	sub	sp, #16
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d960:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	2201      	movs	r2, #1
 800d966:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d96c:	2b01      	cmp	r3, #1
 800d96e:	d109      	bne.n	800d984 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d976:	085b      	lsrs	r3, r3, #1
 800d978:	b29b      	uxth	r3, r3
 800d97a:	4619      	mov	r1, r3
 800d97c:	68f8      	ldr	r0, [r7, #12]
 800d97e:	f7fe fdd5 	bl	800c52c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d982:	e002      	b.n	800d98a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800d984:	68f8      	ldr	r0, [r7, #12]
 800d986:	f7fe fdbd 	bl	800c504 <HAL_UART_RxHalfCpltCallback>
}
 800d98a:	bf00      	nop
 800d98c:	3710      	adds	r7, #16
 800d98e:	46bd      	mov	sp, r7
 800d990:	bd80      	pop	{r7, pc}

0800d992 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d992:	b580      	push	{r7, lr}
 800d994:	b086      	sub	sp, #24
 800d996:	af00      	add	r7, sp, #0
 800d998:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d99e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d9a0:	697b      	ldr	r3, [r7, #20]
 800d9a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d9a6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d9a8:	697b      	ldr	r3, [r7, #20]
 800d9aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d9ae:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d9b0:	697b      	ldr	r3, [r7, #20]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	689b      	ldr	r3, [r3, #8]
 800d9b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d9ba:	2b80      	cmp	r3, #128	@ 0x80
 800d9bc:	d109      	bne.n	800d9d2 <UART_DMAError+0x40>
 800d9be:	693b      	ldr	r3, [r7, #16]
 800d9c0:	2b21      	cmp	r3, #33	@ 0x21
 800d9c2:	d106      	bne.n	800d9d2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d9c4:	697b      	ldr	r3, [r7, #20]
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800d9cc:	6978      	ldr	r0, [r7, #20]
 800d9ce:	f7ff fe85 	bl	800d6dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d9d2:	697b      	ldr	r3, [r7, #20]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	689b      	ldr	r3, [r3, #8]
 800d9d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9dc:	2b40      	cmp	r3, #64	@ 0x40
 800d9de:	d109      	bne.n	800d9f4 <UART_DMAError+0x62>
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	2b22      	cmp	r3, #34	@ 0x22
 800d9e4:	d106      	bne.n	800d9f4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d9e6:	697b      	ldr	r3, [r7, #20]
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800d9ee:	6978      	ldr	r0, [r7, #20]
 800d9f0:	f7ff feb6 	bl	800d760 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d9f4:	697b      	ldr	r3, [r7, #20]
 800d9f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d9fa:	f043 0210 	orr.w	r2, r3, #16
 800d9fe:	697b      	ldr	r3, [r7, #20]
 800da00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800da04:	6978      	ldr	r0, [r7, #20]
 800da06:	f7fe fd87 	bl	800c518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800da0a:	bf00      	nop
 800da0c:	3718      	adds	r7, #24
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}

0800da12 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800da12:	b580      	push	{r7, lr}
 800da14:	b084      	sub	sp, #16
 800da16:	af00      	add	r7, sp, #0
 800da18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	2200      	movs	r2, #0
 800da24:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	2200      	movs	r2, #0
 800da2c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800da30:	68f8      	ldr	r0, [r7, #12]
 800da32:	f7fe fd71 	bl	800c518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800da36:	bf00      	nop
 800da38:	3710      	adds	r7, #16
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}

0800da3e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800da3e:	b580      	push	{r7, lr}
 800da40:	b088      	sub	sp, #32
 800da42:	af00      	add	r7, sp, #0
 800da44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	e853 3f00 	ldrex	r3, [r3]
 800da52:	60bb      	str	r3, [r7, #8]
   return(result);
 800da54:	68bb      	ldr	r3, [r7, #8]
 800da56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800da5a:	61fb      	str	r3, [r7, #28]
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	461a      	mov	r2, r3
 800da62:	69fb      	ldr	r3, [r7, #28]
 800da64:	61bb      	str	r3, [r7, #24]
 800da66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da68:	6979      	ldr	r1, [r7, #20]
 800da6a:	69ba      	ldr	r2, [r7, #24]
 800da6c:	e841 2300 	strex	r3, r2, [r1]
 800da70:	613b      	str	r3, [r7, #16]
   return(result);
 800da72:	693b      	ldr	r3, [r7, #16]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d1e6      	bne.n	800da46 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	2220      	movs	r2, #32
 800da7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	2200      	movs	r2, #0
 800da84:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800da86:	6878      	ldr	r0, [r7, #4]
 800da88:	f7fe fd32 	bl	800c4f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800da8c:	bf00      	nop
 800da8e:	3720      	adds	r7, #32
 800da90:	46bd      	mov	sp, r7
 800da92:	bd80      	pop	{r7, pc}

0800da94 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800da94:	b480      	push	{r7}
 800da96:	b083      	sub	sp, #12
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800da9c:	bf00      	nop
 800da9e:	370c      	adds	r7, #12
 800daa0:	46bd      	mov	sp, r7
 800daa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa6:	4770      	bx	lr

0800daa8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800daa8:	b480      	push	{r7}
 800daaa:	b083      	sub	sp, #12
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800dab0:	bf00      	nop
 800dab2:	370c      	adds	r7, #12
 800dab4:	46bd      	mov	sp, r7
 800dab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daba:	4770      	bx	lr

0800dabc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800dabc:	b480      	push	{r7}
 800dabe:	b083      	sub	sp, #12
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800dac4:	bf00      	nop
 800dac6:	370c      	adds	r7, #12
 800dac8:	46bd      	mov	sp, r7
 800daca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dace:	4770      	bx	lr

0800dad0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dad0:	b480      	push	{r7}
 800dad2:	b085      	sub	sp, #20
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dade:	2b01      	cmp	r3, #1
 800dae0:	d101      	bne.n	800dae6 <HAL_UARTEx_DisableFifoMode+0x16>
 800dae2:	2302      	movs	r3, #2
 800dae4:	e027      	b.n	800db36 <HAL_UARTEx_DisableFifoMode+0x66>
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2201      	movs	r2, #1
 800daea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2224      	movs	r2, #36	@ 0x24
 800daf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	681a      	ldr	r2, [r3, #0]
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	f022 0201 	bic.w	r2, r2, #1
 800db0c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800db14:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	2200      	movs	r2, #0
 800db1a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	68fa      	ldr	r2, [r7, #12]
 800db22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	2220      	movs	r2, #32
 800db28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2200      	movs	r2, #0
 800db30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800db34:	2300      	movs	r3, #0
}
 800db36:	4618      	mov	r0, r3
 800db38:	3714      	adds	r7, #20
 800db3a:	46bd      	mov	sp, r7
 800db3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db40:	4770      	bx	lr

0800db42 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800db42:	b580      	push	{r7, lr}
 800db44:	b084      	sub	sp, #16
 800db46:	af00      	add	r7, sp, #0
 800db48:	6078      	str	r0, [r7, #4]
 800db4a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800db52:	2b01      	cmp	r3, #1
 800db54:	d101      	bne.n	800db5a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800db56:	2302      	movs	r3, #2
 800db58:	e02d      	b.n	800dbb6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2201      	movs	r2, #1
 800db5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	2224      	movs	r2, #36	@ 0x24
 800db66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	681a      	ldr	r2, [r3, #0]
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	f022 0201 	bic.w	r2, r2, #1
 800db80:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	689b      	ldr	r3, [r3, #8]
 800db88:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	683a      	ldr	r2, [r7, #0]
 800db92:	430a      	orrs	r2, r1
 800db94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	f000 f850 	bl	800dc3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	68fa      	ldr	r2, [r7, #12]
 800dba2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2220      	movs	r2, #32
 800dba8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	2200      	movs	r2, #0
 800dbb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dbb4:	2300      	movs	r3, #0
}
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	3710      	adds	r7, #16
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bd80      	pop	{r7, pc}

0800dbbe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dbbe:	b580      	push	{r7, lr}
 800dbc0:	b084      	sub	sp, #16
 800dbc2:	af00      	add	r7, sp, #0
 800dbc4:	6078      	str	r0, [r7, #4]
 800dbc6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dbce:	2b01      	cmp	r3, #1
 800dbd0:	d101      	bne.n	800dbd6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dbd2:	2302      	movs	r3, #2
 800dbd4:	e02d      	b.n	800dc32 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	2201      	movs	r2, #1
 800dbda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	2224      	movs	r2, #36	@ 0x24
 800dbe2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	681a      	ldr	r2, [r3, #0]
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	f022 0201 	bic.w	r2, r2, #1
 800dbfc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	689b      	ldr	r3, [r3, #8]
 800dc04:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	683a      	ldr	r2, [r7, #0]
 800dc0e:	430a      	orrs	r2, r1
 800dc10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f000 f812 	bl	800dc3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	68fa      	ldr	r2, [r7, #12]
 800dc1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2220      	movs	r2, #32
 800dc24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dc30:	2300      	movs	r3, #0
}
 800dc32:	4618      	mov	r0, r3
 800dc34:	3710      	adds	r7, #16
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}
	...

0800dc3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dc3c:	b480      	push	{r7}
 800dc3e:	b085      	sub	sp, #20
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d108      	bne.n	800dc5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2201      	movs	r2, #1
 800dc50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	2201      	movs	r2, #1
 800dc58:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dc5c:	e031      	b.n	800dcc2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dc5e:	2310      	movs	r3, #16
 800dc60:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dc62:	2310      	movs	r3, #16
 800dc64:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	689b      	ldr	r3, [r3, #8]
 800dc6c:	0e5b      	lsrs	r3, r3, #25
 800dc6e:	b2db      	uxtb	r3, r3
 800dc70:	f003 0307 	and.w	r3, r3, #7
 800dc74:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	689b      	ldr	r3, [r3, #8]
 800dc7c:	0f5b      	lsrs	r3, r3, #29
 800dc7e:	b2db      	uxtb	r3, r3
 800dc80:	f003 0307 	and.w	r3, r3, #7
 800dc84:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dc86:	7bbb      	ldrb	r3, [r7, #14]
 800dc88:	7b3a      	ldrb	r2, [r7, #12]
 800dc8a:	4911      	ldr	r1, [pc, #68]	@ (800dcd0 <UARTEx_SetNbDataToProcess+0x94>)
 800dc8c:	5c8a      	ldrb	r2, [r1, r2]
 800dc8e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dc92:	7b3a      	ldrb	r2, [r7, #12]
 800dc94:	490f      	ldr	r1, [pc, #60]	@ (800dcd4 <UARTEx_SetNbDataToProcess+0x98>)
 800dc96:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dc98:	fb93 f3f2 	sdiv	r3, r3, r2
 800dc9c:	b29a      	uxth	r2, r3
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dca4:	7bfb      	ldrb	r3, [r7, #15]
 800dca6:	7b7a      	ldrb	r2, [r7, #13]
 800dca8:	4909      	ldr	r1, [pc, #36]	@ (800dcd0 <UARTEx_SetNbDataToProcess+0x94>)
 800dcaa:	5c8a      	ldrb	r2, [r1, r2]
 800dcac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dcb0:	7b7a      	ldrb	r2, [r7, #13]
 800dcb2:	4908      	ldr	r1, [pc, #32]	@ (800dcd4 <UARTEx_SetNbDataToProcess+0x98>)
 800dcb4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dcb6:	fb93 f3f2 	sdiv	r3, r3, r2
 800dcba:	b29a      	uxth	r2, r3
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800dcc2:	bf00      	nop
 800dcc4:	3714      	adds	r7, #20
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dccc:	4770      	bx	lr
 800dcce:	bf00      	nop
 800dcd0:	08012430 	.word	0x08012430
 800dcd4:	08012438 	.word	0x08012438

0800dcd8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800dcdc:	4904      	ldr	r1, [pc, #16]	@ (800dcf0 <MX_FATFS_Init+0x18>)
 800dcde:	4805      	ldr	r0, [pc, #20]	@ (800dcf4 <MX_FATFS_Init+0x1c>)
 800dce0:	f004 f8c6 	bl	8011e70 <FATFS_LinkDriver>
 800dce4:	4603      	mov	r3, r0
 800dce6:	461a      	mov	r2, r3
 800dce8:	4b03      	ldr	r3, [pc, #12]	@ (800dcf8 <MX_FATFS_Init+0x20>)
 800dcea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800dcec:	bf00      	nop
 800dcee:	bd80      	pop	{r7, pc}
 800dcf0:	24002794 	.word	0x24002794
 800dcf4:	24000054 	.word	0x24000054
 800dcf8:	24002790 	.word	0x24002790

0800dcfc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800dcfc:	b480      	push	{r7}
 800dcfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800dd00:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800dd02:	4618      	mov	r0, r3
 800dd04:	46bd      	mov	sp, r7
 800dd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0a:	4770      	bx	lr

0800dd0c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b082      	sub	sp, #8
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	4603      	mov	r3, r0
 800dd14:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800dd16:	79fb      	ldrb	r3, [r7, #7]
 800dd18:	4618      	mov	r0, r3
 800dd1a:	f000 f9fd 	bl	800e118 <SD_disk_initialize>
 800dd1e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800dd20:	4618      	mov	r0, r3
 800dd22:	3708      	adds	r7, #8
 800dd24:	46bd      	mov	sp, r7
 800dd26:	bd80      	pop	{r7, pc}

0800dd28 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b082      	sub	sp, #8
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	4603      	mov	r3, r0
 800dd30:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800dd32:	79fb      	ldrb	r3, [r7, #7]
 800dd34:	4618      	mov	r0, r3
 800dd36:	f000 fad5 	bl	800e2e4 <SD_disk_status>
 800dd3a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	3708      	adds	r7, #8
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}

0800dd44 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b084      	sub	sp, #16
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	60b9      	str	r1, [r7, #8]
 800dd4c:	607a      	str	r2, [r7, #4]
 800dd4e:	603b      	str	r3, [r7, #0]
 800dd50:	4603      	mov	r3, r0
 800dd52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800dd54:	7bf8      	ldrb	r0, [r7, #15]
 800dd56:	683b      	ldr	r3, [r7, #0]
 800dd58:	687a      	ldr	r2, [r7, #4]
 800dd5a:	68b9      	ldr	r1, [r7, #8]
 800dd5c:	f000 fad8 	bl	800e310 <SD_disk_read>
 800dd60:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800dd62:	4618      	mov	r0, r3
 800dd64:	3710      	adds	r7, #16
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}

0800dd6a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800dd6a:	b580      	push	{r7, lr}
 800dd6c:	b084      	sub	sp, #16
 800dd6e:	af00      	add	r7, sp, #0
 800dd70:	60b9      	str	r1, [r7, #8]
 800dd72:	607a      	str	r2, [r7, #4]
 800dd74:	603b      	str	r3, [r7, #0]
 800dd76:	4603      	mov	r3, r0
 800dd78:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800dd7a:	7bf8      	ldrb	r0, [r7, #15]
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	687a      	ldr	r2, [r7, #4]
 800dd80:	68b9      	ldr	r1, [r7, #8]
 800dd82:	f000 fb2f 	bl	800e3e4 <SD_disk_write>
 800dd86:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800dd88:	4618      	mov	r0, r3
 800dd8a:	3710      	adds	r7, #16
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}

0800dd90 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b082      	sub	sp, #8
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	4603      	mov	r3, r0
 800dd98:	603a      	str	r2, [r7, #0]
 800dd9a:	71fb      	strb	r3, [r7, #7]
 800dd9c:	460b      	mov	r3, r1
 800dd9e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 800dda0:	79b9      	ldrb	r1, [r7, #6]
 800dda2:	79fb      	ldrb	r3, [r7, #7]
 800dda4:	683a      	ldr	r2, [r7, #0]
 800dda6:	4618      	mov	r0, r3
 800dda8:	f000 fba0 	bl	800e4ec <SD_disk_ioctl>
 800ddac:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800ddae:	4618      	mov	r0, r3
 800ddb0:	3708      	adds	r7, #8
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd80      	pop	{r7, pc}
	...

0800ddb8 <SELECT>:

//-----[ SPI Functions ]-----

/* slave select */
static void SELECT(void)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	2110      	movs	r1, #16
 800ddc0:	4802      	ldr	r0, [pc, #8]	@ (800ddcc <SELECT+0x14>)
 800ddc2:	f7f8 ff71 	bl	8006ca8 <HAL_GPIO_WritePin>
}
 800ddc6:	bf00      	nop
 800ddc8:	bd80      	pop	{r7, pc}
 800ddca:	bf00      	nop
 800ddcc:	58020000 	.word	0x58020000

0800ddd0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800ddd4:	2201      	movs	r2, #1
 800ddd6:	2110      	movs	r1, #16
 800ddd8:	4802      	ldr	r0, [pc, #8]	@ (800dde4 <DESELECT+0x14>)
 800ddda:	f7f8 ff65 	bl	8006ca8 <HAL_GPIO_WritePin>
}
 800ddde:	bf00      	nop
 800dde0:	bd80      	pop	{r7, pc}
 800dde2:	bf00      	nop
 800dde4:	58020000 	.word	0x58020000

0800dde8 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b082      	sub	sp, #8
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	4603      	mov	r3, r0
 800ddf0:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800ddf2:	bf00      	nop
 800ddf4:	4b08      	ldr	r3, [pc, #32]	@ (800de18 <SPI_TxByte+0x30>)
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	695b      	ldr	r3, [r3, #20]
 800ddfa:	f003 0302 	and.w	r3, r3, #2
 800ddfe:	2b02      	cmp	r3, #2
 800de00:	d1f8      	bne.n	800ddf4 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800de02:	1df9      	adds	r1, r7, #7
 800de04:	2364      	movs	r3, #100	@ 0x64
 800de06:	2201      	movs	r2, #1
 800de08:	4803      	ldr	r0, [pc, #12]	@ (800de18 <SPI_TxByte+0x30>)
 800de0a:	f7fb ff97 	bl	8009d3c <HAL_SPI_Transmit>
}
 800de0e:	bf00      	nop
 800de10:	3708      	adds	r7, #8
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}
 800de16:	bf00      	nop
 800de18:	24002290 	.word	0x24002290

0800de1c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b082      	sub	sp, #8
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
 800de24:	460b      	mov	r3, r1
 800de26:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800de28:	bf00      	nop
 800de2a:	4b08      	ldr	r3, [pc, #32]	@ (800de4c <SPI_TxBuffer+0x30>)
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	695b      	ldr	r3, [r3, #20]
 800de30:	f003 0302 	and.w	r3, r3, #2
 800de34:	2b02      	cmp	r3, #2
 800de36:	d1f8      	bne.n	800de2a <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800de38:	887a      	ldrh	r2, [r7, #2]
 800de3a:	2364      	movs	r3, #100	@ 0x64
 800de3c:	6879      	ldr	r1, [r7, #4]
 800de3e:	4803      	ldr	r0, [pc, #12]	@ (800de4c <SPI_TxBuffer+0x30>)
 800de40:	f7fb ff7c 	bl	8009d3c <HAL_SPI_Transmit>
}
 800de44:	bf00      	nop
 800de46:	3708      	adds	r7, #8
 800de48:	46bd      	mov	sp, r7
 800de4a:	bd80      	pop	{r7, pc}
 800de4c:	24002290 	.word	0x24002290

0800de50 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b084      	sub	sp, #16
 800de54:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800de56:	23ff      	movs	r3, #255	@ 0xff
 800de58:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800de5a:	bf00      	nop
 800de5c:	4b09      	ldr	r3, [pc, #36]	@ (800de84 <SPI_RxByte+0x34>)
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	695b      	ldr	r3, [r3, #20]
 800de62:	f003 0302 	and.w	r3, r3, #2
 800de66:	2b02      	cmp	r3, #2
 800de68:	d1f8      	bne.n	800de5c <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800de6a:	1dba      	adds	r2, r7, #6
 800de6c:	1df9      	adds	r1, r7, #7
 800de6e:	2364      	movs	r3, #100	@ 0x64
 800de70:	9300      	str	r3, [sp, #0]
 800de72:	2301      	movs	r3, #1
 800de74:	4803      	ldr	r0, [pc, #12]	@ (800de84 <SPI_RxByte+0x34>)
 800de76:	f7fc fbc1 	bl	800a5fc <HAL_SPI_TransmitReceive>
  return data;
 800de7a:	79bb      	ldrb	r3, [r7, #6]
}
 800de7c:	4618      	mov	r0, r3
 800de7e:	3708      	adds	r7, #8
 800de80:	46bd      	mov	sp, r7
 800de82:	bd80      	pop	{r7, pc}
 800de84:	24002290 	.word	0x24002290

0800de88 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b082      	sub	sp, #8
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 800de90:	f7ff ffde 	bl	800de50 <SPI_RxByte>
 800de94:	4603      	mov	r3, r0
 800de96:	461a      	mov	r2, r3
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	701a      	strb	r2, [r3, #0]
}
 800de9c:	bf00      	nop
 800de9e:	3708      	adds	r7, #8
 800dea0:	46bd      	mov	sp, r7
 800dea2:	bd80      	pop	{r7, pc}

0800dea4 <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b082      	sub	sp, #8
 800dea8:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 800deaa:	4b0a      	ldr	r3, [pc, #40]	@ (800ded4 <SD_ReadyWait+0x30>)
 800deac:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800deb0:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 800deb2:	f7ff ffcd 	bl	800de50 <SPI_RxByte>
 800deb6:	4603      	mov	r3, r0
 800deb8:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800deba:	79fb      	ldrb	r3, [r7, #7]
 800debc:	2bff      	cmp	r3, #255	@ 0xff
 800debe:	d003      	beq.n	800dec8 <SD_ReadyWait+0x24>
 800dec0:	4b04      	ldr	r3, [pc, #16]	@ (800ded4 <SD_ReadyWait+0x30>)
 800dec2:	881b      	ldrh	r3, [r3, #0]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d1f4      	bne.n	800deb2 <SD_ReadyWait+0xe>
  return res;
 800dec8:	79fb      	ldrb	r3, [r7, #7]
}
 800deca:	4618      	mov	r0, r3
 800decc:	3708      	adds	r7, #8
 800dece:	46bd      	mov	sp, r7
 800ded0:	bd80      	pop	{r7, pc}
 800ded2:	bf00      	nop
 800ded4:	2400279a 	.word	0x2400279a

0800ded8 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b084      	sub	sp, #16
 800dedc:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 800dede:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800dee2:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 800dee4:	f7ff ff74 	bl	800ddd0 <DESELECT>
  for(int i = 0; i < 10; i++)
 800dee8:	2300      	movs	r3, #0
 800deea:	60bb      	str	r3, [r7, #8]
 800deec:	e005      	b.n	800defa <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800deee:	20ff      	movs	r0, #255	@ 0xff
 800def0:	f7ff ff7a 	bl	800dde8 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800def4:	68bb      	ldr	r3, [r7, #8]
 800def6:	3301      	adds	r3, #1
 800def8:	60bb      	str	r3, [r7, #8]
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	2b09      	cmp	r3, #9
 800defe:	ddf6      	ble.n	800deee <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 800df00:	f7ff ff5a 	bl	800ddb8 <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 800df04:	2340      	movs	r3, #64	@ 0x40
 800df06:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 800df08:	2300      	movs	r3, #0
 800df0a:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 800df0c:	2300      	movs	r3, #0
 800df0e:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 800df10:	2300      	movs	r3, #0
 800df12:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 800df14:	2300      	movs	r3, #0
 800df16:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 800df18:	2395      	movs	r3, #149	@ 0x95
 800df1a:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 800df1c:	463b      	mov	r3, r7
 800df1e:	2106      	movs	r1, #6
 800df20:	4618      	mov	r0, r3
 800df22:	f7ff ff7b 	bl	800de1c <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 800df26:	e002      	b.n	800df2e <SD_PowerOn+0x56>
  {
    cnt--;
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	3b01      	subs	r3, #1
 800df2c:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 800df2e:	f7ff ff8f 	bl	800de50 <SPI_RxByte>
 800df32:	4603      	mov	r3, r0
 800df34:	2b01      	cmp	r3, #1
 800df36:	d002      	beq.n	800df3e <SD_PowerOn+0x66>
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d1f4      	bne.n	800df28 <SD_PowerOn+0x50>
  }
  DESELECT();
 800df3e:	f7ff ff47 	bl	800ddd0 <DESELECT>
  SPI_TxByte(0XFF);
 800df42:	20ff      	movs	r0, #255	@ 0xff
 800df44:	f7ff ff50 	bl	800dde8 <SPI_TxByte>
  PowerFlag = 1;
 800df48:	4b03      	ldr	r3, [pc, #12]	@ (800df58 <SD_PowerOn+0x80>)
 800df4a:	2201      	movs	r2, #1
 800df4c:	701a      	strb	r2, [r3, #0]
}
 800df4e:	bf00      	nop
 800df50:	3710      	adds	r7, #16
 800df52:	46bd      	mov	sp, r7
 800df54:	bd80      	pop	{r7, pc}
 800df56:	bf00      	nop
 800df58:	2400279d 	.word	0x2400279d

0800df5c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 800df5c:	b480      	push	{r7}
 800df5e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800df60:	4b03      	ldr	r3, [pc, #12]	@ (800df70 <SD_PowerOff+0x14>)
 800df62:	2200      	movs	r2, #0
 800df64:	701a      	strb	r2, [r3, #0]
}
 800df66:	bf00      	nop
 800df68:	46bd      	mov	sp, r7
 800df6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6e:	4770      	bx	lr
 800df70:	2400279d 	.word	0x2400279d

0800df74 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 800df74:	b480      	push	{r7}
 800df76:	af00      	add	r7, sp, #0
  return PowerFlag;
 800df78:	4b03      	ldr	r3, [pc, #12]	@ (800df88 <SD_CheckPower+0x14>)
 800df7a:	781b      	ldrb	r3, [r3, #0]
}
 800df7c:	4618      	mov	r0, r3
 800df7e:	46bd      	mov	sp, r7
 800df80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df84:	4770      	bx	lr
 800df86:	bf00      	nop
 800df88:	2400279d 	.word	0x2400279d

0800df8c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b084      	sub	sp, #16
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
 800df94:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 800df96:	4b13      	ldr	r3, [pc, #76]	@ (800dfe4 <SD_RxDataBlock+0x58>)
 800df98:	22c8      	movs	r2, #200	@ 0xc8
 800df9a:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 800df9c:	f7ff ff58 	bl	800de50 <SPI_RxByte>
 800dfa0:	4603      	mov	r3, r0
 800dfa2:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 800dfa4:	7bfb      	ldrb	r3, [r7, #15]
 800dfa6:	2bff      	cmp	r3, #255	@ 0xff
 800dfa8:	d103      	bne.n	800dfb2 <SD_RxDataBlock+0x26>
 800dfaa:	4b0e      	ldr	r3, [pc, #56]	@ (800dfe4 <SD_RxDataBlock+0x58>)
 800dfac:	881b      	ldrh	r3, [r3, #0]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d1f4      	bne.n	800df9c <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 800dfb2:	7bfb      	ldrb	r3, [r7, #15]
 800dfb4:	2bfe      	cmp	r3, #254	@ 0xfe
 800dfb6:	d001      	beq.n	800dfbc <SD_RxDataBlock+0x30>
 800dfb8:	2300      	movs	r3, #0
 800dfba:	e00f      	b.n	800dfdc <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	1c5a      	adds	r2, r3, #1
 800dfc0:	607a      	str	r2, [r7, #4]
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f7ff ff60 	bl	800de88 <SPI_RxBytePtr>
  } while(len--);
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	1e5a      	subs	r2, r3, #1
 800dfcc:	603a      	str	r2, [r7, #0]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d1f4      	bne.n	800dfbc <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 800dfd2:	f7ff ff3d 	bl	800de50 <SPI_RxByte>
  SPI_RxByte();
 800dfd6:	f7ff ff3b 	bl	800de50 <SPI_RxByte>
  return TRUE;
 800dfda:	2301      	movs	r3, #1
}
 800dfdc:	4618      	mov	r0, r3
 800dfde:	3710      	adds	r7, #16
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	bd80      	pop	{r7, pc}
 800dfe4:	24002798 	.word	0x24002798

0800dfe8 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b084      	sub	sp, #16
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
 800dff0:	460b      	mov	r3, r1
 800dff2:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 800dff4:	2300      	movs	r3, #0
 800dff6:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 800dff8:	f7ff ff54 	bl	800dea4 <SD_ReadyWait>
 800dffc:	4603      	mov	r3, r0
 800dffe:	2bff      	cmp	r3, #255	@ 0xff
 800e000:	d001      	beq.n	800e006 <SD_TxDataBlock+0x1e>
 800e002:	2300      	movs	r3, #0
 800e004:	e02f      	b.n	800e066 <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 800e006:	78fb      	ldrb	r3, [r7, #3]
 800e008:	4618      	mov	r0, r3
 800e00a:	f7ff feed 	bl	800dde8 <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 800e00e:	78fb      	ldrb	r3, [r7, #3]
 800e010:	2bfd      	cmp	r3, #253	@ 0xfd
 800e012:	d020      	beq.n	800e056 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 800e014:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e018:	6878      	ldr	r0, [r7, #4]
 800e01a:	f7ff feff 	bl	800de1c <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 800e01e:	f7ff ff17 	bl	800de50 <SPI_RxByte>
    SPI_RxByte();
 800e022:	f7ff ff15 	bl	800de50 <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 800e026:	e00b      	b.n	800e040 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 800e028:	f7ff ff12 	bl	800de50 <SPI_RxByte>
 800e02c:	4603      	mov	r3, r0
 800e02e:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 800e030:	7bfb      	ldrb	r3, [r7, #15]
 800e032:	f003 031f 	and.w	r3, r3, #31
 800e036:	2b05      	cmp	r3, #5
 800e038:	d006      	beq.n	800e048 <SD_TxDataBlock+0x60>
      i++;
 800e03a:	7bbb      	ldrb	r3, [r7, #14]
 800e03c:	3301      	adds	r3, #1
 800e03e:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 800e040:	7bbb      	ldrb	r3, [r7, #14]
 800e042:	2b40      	cmp	r3, #64	@ 0x40
 800e044:	d9f0      	bls.n	800e028 <SD_TxDataBlock+0x40>
 800e046:	e000      	b.n	800e04a <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 800e048:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 800e04a:	bf00      	nop
 800e04c:	f7ff ff00 	bl	800de50 <SPI_RxByte>
 800e050:	4603      	mov	r3, r0
 800e052:	2b00      	cmp	r3, #0
 800e054:	d0fa      	beq.n	800e04c <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 800e056:	7bfb      	ldrb	r3, [r7, #15]
 800e058:	f003 031f 	and.w	r3, r3, #31
 800e05c:	2b05      	cmp	r3, #5
 800e05e:	d101      	bne.n	800e064 <SD_TxDataBlock+0x7c>
 800e060:	2301      	movs	r3, #1
 800e062:	e000      	b.n	800e066 <SD_TxDataBlock+0x7e>

  return FALSE;
 800e064:	2300      	movs	r3, #0
}
 800e066:	4618      	mov	r0, r3
 800e068:	3710      	adds	r7, #16
 800e06a:	46bd      	mov	sp, r7
 800e06c:	bd80      	pop	{r7, pc}

0800e06e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800e06e:	b580      	push	{r7, lr}
 800e070:	b084      	sub	sp, #16
 800e072:	af00      	add	r7, sp, #0
 800e074:	4603      	mov	r3, r0
 800e076:	6039      	str	r1, [r7, #0]
 800e078:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 800e07a:	f7ff ff13 	bl	800dea4 <SD_ReadyWait>
 800e07e:	4603      	mov	r3, r0
 800e080:	2bff      	cmp	r3, #255	@ 0xff
 800e082:	d001      	beq.n	800e088 <SD_SendCmd+0x1a>
 800e084:	23ff      	movs	r3, #255	@ 0xff
 800e086:	e042      	b.n	800e10e <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 800e088:	79fb      	ldrb	r3, [r7, #7]
 800e08a:	4618      	mov	r0, r3
 800e08c:	f7ff feac 	bl	800dde8 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 800e090:	683b      	ldr	r3, [r7, #0]
 800e092:	0e1b      	lsrs	r3, r3, #24
 800e094:	b2db      	uxtb	r3, r3
 800e096:	4618      	mov	r0, r3
 800e098:	f7ff fea6 	bl	800dde8 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	0c1b      	lsrs	r3, r3, #16
 800e0a0:	b2db      	uxtb	r3, r3
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f7ff fea0 	bl	800dde8 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 800e0a8:	683b      	ldr	r3, [r7, #0]
 800e0aa:	0a1b      	lsrs	r3, r3, #8
 800e0ac:	b2db      	uxtb	r3, r3
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	f7ff fe9a 	bl	800dde8 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	b2db      	uxtb	r3, r3
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	f7ff fe95 	bl	800dde8 <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 800e0be:	79fb      	ldrb	r3, [r7, #7]
 800e0c0:	2b40      	cmp	r3, #64	@ 0x40
 800e0c2:	d102      	bne.n	800e0ca <SD_SendCmd+0x5c>
 800e0c4:	2395      	movs	r3, #149	@ 0x95
 800e0c6:	73fb      	strb	r3, [r7, #15]
 800e0c8:	e007      	b.n	800e0da <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 800e0ca:	79fb      	ldrb	r3, [r7, #7]
 800e0cc:	2b48      	cmp	r3, #72	@ 0x48
 800e0ce:	d102      	bne.n	800e0d6 <SD_SendCmd+0x68>
 800e0d0:	2387      	movs	r3, #135	@ 0x87
 800e0d2:	73fb      	strb	r3, [r7, #15]
 800e0d4:	e001      	b.n	800e0da <SD_SendCmd+0x6c>
  else crc = 1;
 800e0d6:	2301      	movs	r3, #1
 800e0d8:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 800e0da:	7bfb      	ldrb	r3, [r7, #15]
 800e0dc:	4618      	mov	r0, r3
 800e0de:	f7ff fe83 	bl	800dde8 <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 800e0e2:	79fb      	ldrb	r3, [r7, #7]
 800e0e4:	2b4c      	cmp	r3, #76	@ 0x4c
 800e0e6:	d101      	bne.n	800e0ec <SD_SendCmd+0x7e>
 800e0e8:	f7ff feb2 	bl	800de50 <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 800e0ec:	230a      	movs	r3, #10
 800e0ee:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 800e0f0:	f7ff feae 	bl	800de50 <SPI_RxByte>
 800e0f4:	4603      	mov	r3, r0
 800e0f6:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800e0f8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	da05      	bge.n	800e10c <SD_SendCmd+0x9e>
 800e100:	7bbb      	ldrb	r3, [r7, #14]
 800e102:	3b01      	subs	r3, #1
 800e104:	73bb      	strb	r3, [r7, #14]
 800e106:	7bbb      	ldrb	r3, [r7, #14]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d1f1      	bne.n	800e0f0 <SD_SendCmd+0x82>

  return res;
 800e10c:	7b7b      	ldrb	r3, [r7, #13]
}
 800e10e:	4618      	mov	r0, r3
 800e110:	3710      	adds	r7, #16
 800e112:	46bd      	mov	sp, r7
 800e114:	bd80      	pop	{r7, pc}
	...

0800e118 <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 800e118:	b590      	push	{r4, r7, lr}
 800e11a:	b085      	sub	sp, #20
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	4603      	mov	r3, r0
 800e120:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 800e122:	79fb      	ldrb	r3, [r7, #7]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d001      	beq.n	800e12c <SD_disk_initialize+0x14>
 800e128:	2301      	movs	r3, #1
 800e12a:	e0d1      	b.n	800e2d0 <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 800e12c:	4b6a      	ldr	r3, [pc, #424]	@ (800e2d8 <SD_disk_initialize+0x1c0>)
 800e12e:	781b      	ldrb	r3, [r3, #0]
 800e130:	b2db      	uxtb	r3, r3
 800e132:	f003 0302 	and.w	r3, r3, #2
 800e136:	2b00      	cmp	r3, #0
 800e138:	d003      	beq.n	800e142 <SD_disk_initialize+0x2a>
 800e13a:	4b67      	ldr	r3, [pc, #412]	@ (800e2d8 <SD_disk_initialize+0x1c0>)
 800e13c:	781b      	ldrb	r3, [r3, #0]
 800e13e:	b2db      	uxtb	r3, r3
 800e140:	e0c6      	b.n	800e2d0 <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 800e142:	f7ff fec9 	bl	800ded8 <SD_PowerOn>
  /* slave select */
  SELECT();
 800e146:	f7ff fe37 	bl	800ddb8 <SELECT>
  /* check disk type */
  type = 0;
 800e14a:	2300      	movs	r3, #0
 800e14c:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 800e14e:	2100      	movs	r1, #0
 800e150:	2040      	movs	r0, #64	@ 0x40
 800e152:	f7ff ff8c 	bl	800e06e <SD_SendCmd>
 800e156:	4603      	mov	r3, r0
 800e158:	2b01      	cmp	r3, #1
 800e15a:	f040 80a1 	bne.w	800e2a0 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 800e15e:	4b5f      	ldr	r3, [pc, #380]	@ (800e2dc <SD_disk_initialize+0x1c4>)
 800e160:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e164:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800e166:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800e16a:	2048      	movs	r0, #72	@ 0x48
 800e16c:	f7ff ff7f 	bl	800e06e <SD_SendCmd>
 800e170:	4603      	mov	r3, r0
 800e172:	2b01      	cmp	r3, #1
 800e174:	d155      	bne.n	800e222 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 800e176:	2300      	movs	r3, #0
 800e178:	73fb      	strb	r3, [r7, #15]
 800e17a:	e00c      	b.n	800e196 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 800e17c:	7bfc      	ldrb	r4, [r7, #15]
 800e17e:	f7ff fe67 	bl	800de50 <SPI_RxByte>
 800e182:	4603      	mov	r3, r0
 800e184:	461a      	mov	r2, r3
 800e186:	f104 0310 	add.w	r3, r4, #16
 800e18a:	443b      	add	r3, r7
 800e18c:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800e190:	7bfb      	ldrb	r3, [r7, #15]
 800e192:	3301      	adds	r3, #1
 800e194:	73fb      	strb	r3, [r7, #15]
 800e196:	7bfb      	ldrb	r3, [r7, #15]
 800e198:	2b03      	cmp	r3, #3
 800e19a:	d9ef      	bls.n	800e17c <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800e19c:	7abb      	ldrb	r3, [r7, #10]
 800e19e:	2b01      	cmp	r3, #1
 800e1a0:	d17e      	bne.n	800e2a0 <SD_disk_initialize+0x188>
 800e1a2:	7afb      	ldrb	r3, [r7, #11]
 800e1a4:	2baa      	cmp	r3, #170	@ 0xaa
 800e1a6:	d17b      	bne.n	800e2a0 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800e1a8:	2100      	movs	r1, #0
 800e1aa:	2077      	movs	r0, #119	@ 0x77
 800e1ac:	f7ff ff5f 	bl	800e06e <SD_SendCmd>
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	2b01      	cmp	r3, #1
 800e1b4:	d807      	bhi.n	800e1c6 <SD_disk_initialize+0xae>
 800e1b6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800e1ba:	2069      	movs	r0, #105	@ 0x69
 800e1bc:	f7ff ff57 	bl	800e06e <SD_SendCmd>
 800e1c0:	4603      	mov	r3, r0
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d004      	beq.n	800e1d0 <SD_disk_initialize+0xb8>
        } while (Timer1);
 800e1c6:	4b45      	ldr	r3, [pc, #276]	@ (800e2dc <SD_disk_initialize+0x1c4>)
 800e1c8:	881b      	ldrh	r3, [r3, #0]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d1ec      	bne.n	800e1a8 <SD_disk_initialize+0x90>
 800e1ce:	e000      	b.n	800e1d2 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800e1d0:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800e1d2:	4b42      	ldr	r3, [pc, #264]	@ (800e2dc <SD_disk_initialize+0x1c4>)
 800e1d4:	881b      	ldrh	r3, [r3, #0]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d062      	beq.n	800e2a0 <SD_disk_initialize+0x188>
 800e1da:	2100      	movs	r1, #0
 800e1dc:	207a      	movs	r0, #122	@ 0x7a
 800e1de:	f7ff ff46 	bl	800e06e <SD_SendCmd>
 800e1e2:	4603      	mov	r3, r0
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d15b      	bne.n	800e2a0 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	73fb      	strb	r3, [r7, #15]
 800e1ec:	e00c      	b.n	800e208 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 800e1ee:	7bfc      	ldrb	r4, [r7, #15]
 800e1f0:	f7ff fe2e 	bl	800de50 <SPI_RxByte>
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	461a      	mov	r2, r3
 800e1f8:	f104 0310 	add.w	r3, r4, #16
 800e1fc:	443b      	add	r3, r7
 800e1fe:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800e202:	7bfb      	ldrb	r3, [r7, #15]
 800e204:	3301      	adds	r3, #1
 800e206:	73fb      	strb	r3, [r7, #15]
 800e208:	7bfb      	ldrb	r3, [r7, #15]
 800e20a:	2b03      	cmp	r3, #3
 800e20c:	d9ef      	bls.n	800e1ee <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800e20e:	7a3b      	ldrb	r3, [r7, #8]
 800e210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e214:	2b00      	cmp	r3, #0
 800e216:	d001      	beq.n	800e21c <SD_disk_initialize+0x104>
 800e218:	230c      	movs	r3, #12
 800e21a:	e000      	b.n	800e21e <SD_disk_initialize+0x106>
 800e21c:	2304      	movs	r3, #4
 800e21e:	73bb      	strb	r3, [r7, #14]
 800e220:	e03e      	b.n	800e2a0 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800e222:	2100      	movs	r1, #0
 800e224:	2077      	movs	r0, #119	@ 0x77
 800e226:	f7ff ff22 	bl	800e06e <SD_SendCmd>
 800e22a:	4603      	mov	r3, r0
 800e22c:	2b01      	cmp	r3, #1
 800e22e:	d808      	bhi.n	800e242 <SD_disk_initialize+0x12a>
 800e230:	2100      	movs	r1, #0
 800e232:	2069      	movs	r0, #105	@ 0x69
 800e234:	f7ff ff1b 	bl	800e06e <SD_SendCmd>
 800e238:	4603      	mov	r3, r0
 800e23a:	2b01      	cmp	r3, #1
 800e23c:	d801      	bhi.n	800e242 <SD_disk_initialize+0x12a>
 800e23e:	2302      	movs	r3, #2
 800e240:	e000      	b.n	800e244 <SD_disk_initialize+0x12c>
 800e242:	2301      	movs	r3, #1
 800e244:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 800e246:	7bbb      	ldrb	r3, [r7, #14]
 800e248:	2b02      	cmp	r3, #2
 800e24a:	d10e      	bne.n	800e26a <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800e24c:	2100      	movs	r1, #0
 800e24e:	2077      	movs	r0, #119	@ 0x77
 800e250:	f7ff ff0d 	bl	800e06e <SD_SendCmd>
 800e254:	4603      	mov	r3, r0
 800e256:	2b01      	cmp	r3, #1
 800e258:	d80e      	bhi.n	800e278 <SD_disk_initialize+0x160>
 800e25a:	2100      	movs	r1, #0
 800e25c:	2069      	movs	r0, #105	@ 0x69
 800e25e:	f7ff ff06 	bl	800e06e <SD_SendCmd>
 800e262:	4603      	mov	r3, r0
 800e264:	2b00      	cmp	r3, #0
 800e266:	d107      	bne.n	800e278 <SD_disk_initialize+0x160>
 800e268:	e00c      	b.n	800e284 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800e26a:	2100      	movs	r1, #0
 800e26c:	2041      	movs	r0, #65	@ 0x41
 800e26e:	f7ff fefe 	bl	800e06e <SD_SendCmd>
 800e272:	4603      	mov	r3, r0
 800e274:	2b00      	cmp	r3, #0
 800e276:	d004      	beq.n	800e282 <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 800e278:	4b18      	ldr	r3, [pc, #96]	@ (800e2dc <SD_disk_initialize+0x1c4>)
 800e27a:	881b      	ldrh	r3, [r3, #0]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d1e2      	bne.n	800e246 <SD_disk_initialize+0x12e>
 800e280:	e000      	b.n	800e284 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800e282:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800e284:	4b15      	ldr	r3, [pc, #84]	@ (800e2dc <SD_disk_initialize+0x1c4>)
 800e286:	881b      	ldrh	r3, [r3, #0]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d007      	beq.n	800e29c <SD_disk_initialize+0x184>
 800e28c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e290:	2050      	movs	r0, #80	@ 0x50
 800e292:	f7ff feec 	bl	800e06e <SD_SendCmd>
 800e296:	4603      	mov	r3, r0
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d001      	beq.n	800e2a0 <SD_disk_initialize+0x188>
 800e29c:	2300      	movs	r3, #0
 800e29e:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 800e2a0:	4a0f      	ldr	r2, [pc, #60]	@ (800e2e0 <SD_disk_initialize+0x1c8>)
 800e2a2:	7bbb      	ldrb	r3, [r7, #14]
 800e2a4:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 800e2a6:	f7ff fd93 	bl	800ddd0 <DESELECT>
  SPI_RxByte();
 800e2aa:	f7ff fdd1 	bl	800de50 <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 800e2ae:	7bbb      	ldrb	r3, [r7, #14]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d008      	beq.n	800e2c6 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 800e2b4:	4b08      	ldr	r3, [pc, #32]	@ (800e2d8 <SD_disk_initialize+0x1c0>)
 800e2b6:	781b      	ldrb	r3, [r3, #0]
 800e2b8:	b2db      	uxtb	r3, r3
 800e2ba:	f023 0301 	bic.w	r3, r3, #1
 800e2be:	b2da      	uxtb	r2, r3
 800e2c0:	4b05      	ldr	r3, [pc, #20]	@ (800e2d8 <SD_disk_initialize+0x1c0>)
 800e2c2:	701a      	strb	r2, [r3, #0]
 800e2c4:	e001      	b.n	800e2ca <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800e2c6:	f7ff fe49 	bl	800df5c <SD_PowerOff>
  }
  return Stat;
 800e2ca:	4b03      	ldr	r3, [pc, #12]	@ (800e2d8 <SD_disk_initialize+0x1c0>)
 800e2cc:	781b      	ldrb	r3, [r3, #0]
 800e2ce:	b2db      	uxtb	r3, r3
}
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	3714      	adds	r7, #20
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	bd90      	pop	{r4, r7, pc}
 800e2d8:	24000068 	.word	0x24000068
 800e2dc:	24002798 	.word	0x24002798
 800e2e0:	2400279c 	.word	0x2400279c

0800e2e4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 800e2e4:	b480      	push	{r7}
 800e2e6:	b083      	sub	sp, #12
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	4603      	mov	r3, r0
 800e2ec:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 800e2ee:	79fb      	ldrb	r3, [r7, #7]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d001      	beq.n	800e2f8 <SD_disk_status+0x14>
 800e2f4:	2301      	movs	r3, #1
 800e2f6:	e002      	b.n	800e2fe <SD_disk_status+0x1a>
  return Stat;
 800e2f8:	4b04      	ldr	r3, [pc, #16]	@ (800e30c <SD_disk_status+0x28>)
 800e2fa:	781b      	ldrb	r3, [r3, #0]
 800e2fc:	b2db      	uxtb	r3, r3
}
 800e2fe:	4618      	mov	r0, r3
 800e300:	370c      	adds	r7, #12
 800e302:	46bd      	mov	sp, r7
 800e304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e308:	4770      	bx	lr
 800e30a:	bf00      	nop
 800e30c:	24000068 	.word	0x24000068

0800e310 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b084      	sub	sp, #16
 800e314:	af00      	add	r7, sp, #0
 800e316:	60b9      	str	r1, [r7, #8]
 800e318:	607a      	str	r2, [r7, #4]
 800e31a:	603b      	str	r3, [r7, #0]
 800e31c:	4603      	mov	r3, r0
 800e31e:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800e320:	7bfb      	ldrb	r3, [r7, #15]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d102      	bne.n	800e32c <SD_disk_read+0x1c>
 800e326:	683b      	ldr	r3, [r7, #0]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d101      	bne.n	800e330 <SD_disk_read+0x20>
 800e32c:	2304      	movs	r3, #4
 800e32e:	e051      	b.n	800e3d4 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e330:	4b2a      	ldr	r3, [pc, #168]	@ (800e3dc <SD_disk_read+0xcc>)
 800e332:	781b      	ldrb	r3, [r3, #0]
 800e334:	b2db      	uxtb	r3, r3
 800e336:	f003 0301 	and.w	r3, r3, #1
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d001      	beq.n	800e342 <SD_disk_read+0x32>
 800e33e:	2303      	movs	r3, #3
 800e340:	e048      	b.n	800e3d4 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800e342:	4b27      	ldr	r3, [pc, #156]	@ (800e3e0 <SD_disk_read+0xd0>)
 800e344:	781b      	ldrb	r3, [r3, #0]
 800e346:	f003 0304 	and.w	r3, r3, #4
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d102      	bne.n	800e354 <SD_disk_read+0x44>
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	025b      	lsls	r3, r3, #9
 800e352:	607b      	str	r3, [r7, #4]

  SELECT();
 800e354:	f7ff fd30 	bl	800ddb8 <SELECT>

  if (count == 1)
 800e358:	683b      	ldr	r3, [r7, #0]
 800e35a:	2b01      	cmp	r3, #1
 800e35c:	d111      	bne.n	800e382 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800e35e:	6879      	ldr	r1, [r7, #4]
 800e360:	2051      	movs	r0, #81	@ 0x51
 800e362:	f7ff fe84 	bl	800e06e <SD_SendCmd>
 800e366:	4603      	mov	r3, r0
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d129      	bne.n	800e3c0 <SD_disk_read+0xb0>
 800e36c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e370:	68b8      	ldr	r0, [r7, #8]
 800e372:	f7ff fe0b 	bl	800df8c <SD_RxDataBlock>
 800e376:	4603      	mov	r3, r0
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d021      	beq.n	800e3c0 <SD_disk_read+0xb0>
 800e37c:	2300      	movs	r3, #0
 800e37e:	603b      	str	r3, [r7, #0]
 800e380:	e01e      	b.n	800e3c0 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 800e382:	6879      	ldr	r1, [r7, #4]
 800e384:	2052      	movs	r0, #82	@ 0x52
 800e386:	f7ff fe72 	bl	800e06e <SD_SendCmd>
 800e38a:	4603      	mov	r3, r0
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d117      	bne.n	800e3c0 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 800e390:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e394:	68b8      	ldr	r0, [r7, #8]
 800e396:	f7ff fdf9 	bl	800df8c <SD_RxDataBlock>
 800e39a:	4603      	mov	r3, r0
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d00a      	beq.n	800e3b6 <SD_disk_read+0xa6>
        buff += 512;
 800e3a0:	68bb      	ldr	r3, [r7, #8]
 800e3a2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800e3a6:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800e3a8:	683b      	ldr	r3, [r7, #0]
 800e3aa:	3b01      	subs	r3, #1
 800e3ac:	603b      	str	r3, [r7, #0]
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d1ed      	bne.n	800e390 <SD_disk_read+0x80>
 800e3b4:	e000      	b.n	800e3b8 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 800e3b6:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 800e3b8:	2100      	movs	r1, #0
 800e3ba:	204c      	movs	r0, #76	@ 0x4c
 800e3bc:	f7ff fe57 	bl	800e06e <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 800e3c0:	f7ff fd06 	bl	800ddd0 <DESELECT>
  SPI_RxByte();
 800e3c4:	f7ff fd44 	bl	800de50 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	bf14      	ite	ne
 800e3ce:	2301      	movne	r3, #1
 800e3d0:	2300      	moveq	r3, #0
 800e3d2:	b2db      	uxtb	r3, r3
}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	3710      	adds	r7, #16
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}
 800e3dc:	24000068 	.word	0x24000068
 800e3e0:	2400279c 	.word	0x2400279c

0800e3e4 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b084      	sub	sp, #16
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	60b9      	str	r1, [r7, #8]
 800e3ec:	607a      	str	r2, [r7, #4]
 800e3ee:	603b      	str	r3, [r7, #0]
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800e3f4:	7bfb      	ldrb	r3, [r7, #15]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d102      	bne.n	800e400 <SD_disk_write+0x1c>
 800e3fa:	683b      	ldr	r3, [r7, #0]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d101      	bne.n	800e404 <SD_disk_write+0x20>
 800e400:	2304      	movs	r3, #4
 800e402:	e06b      	b.n	800e4dc <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e404:	4b37      	ldr	r3, [pc, #220]	@ (800e4e4 <SD_disk_write+0x100>)
 800e406:	781b      	ldrb	r3, [r3, #0]
 800e408:	b2db      	uxtb	r3, r3
 800e40a:	f003 0301 	and.w	r3, r3, #1
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d001      	beq.n	800e416 <SD_disk_write+0x32>
 800e412:	2303      	movs	r3, #3
 800e414:	e062      	b.n	800e4dc <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 800e416:	4b33      	ldr	r3, [pc, #204]	@ (800e4e4 <SD_disk_write+0x100>)
 800e418:	781b      	ldrb	r3, [r3, #0]
 800e41a:	b2db      	uxtb	r3, r3
 800e41c:	f003 0304 	and.w	r3, r3, #4
 800e420:	2b00      	cmp	r3, #0
 800e422:	d001      	beq.n	800e428 <SD_disk_write+0x44>
 800e424:	2302      	movs	r3, #2
 800e426:	e059      	b.n	800e4dc <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800e428:	4b2f      	ldr	r3, [pc, #188]	@ (800e4e8 <SD_disk_write+0x104>)
 800e42a:	781b      	ldrb	r3, [r3, #0]
 800e42c:	f003 0304 	and.w	r3, r3, #4
 800e430:	2b00      	cmp	r3, #0
 800e432:	d102      	bne.n	800e43a <SD_disk_write+0x56>
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	025b      	lsls	r3, r3, #9
 800e438:	607b      	str	r3, [r7, #4]

  SELECT();
 800e43a:	f7ff fcbd 	bl	800ddb8 <SELECT>

  if (count == 1)
 800e43e:	683b      	ldr	r3, [r7, #0]
 800e440:	2b01      	cmp	r3, #1
 800e442:	d110      	bne.n	800e466 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800e444:	6879      	ldr	r1, [r7, #4]
 800e446:	2058      	movs	r0, #88	@ 0x58
 800e448:	f7ff fe11 	bl	800e06e <SD_SendCmd>
 800e44c:	4603      	mov	r3, r0
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d13a      	bne.n	800e4c8 <SD_disk_write+0xe4>
 800e452:	21fe      	movs	r1, #254	@ 0xfe
 800e454:	68b8      	ldr	r0, [r7, #8]
 800e456:	f7ff fdc7 	bl	800dfe8 <SD_TxDataBlock>
 800e45a:	4603      	mov	r3, r0
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d033      	beq.n	800e4c8 <SD_disk_write+0xe4>
      count = 0;
 800e460:	2300      	movs	r3, #0
 800e462:	603b      	str	r3, [r7, #0]
 800e464:	e030      	b.n	800e4c8 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 800e466:	4b20      	ldr	r3, [pc, #128]	@ (800e4e8 <SD_disk_write+0x104>)
 800e468:	781b      	ldrb	r3, [r3, #0]
 800e46a:	f003 0302 	and.w	r3, r3, #2
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d007      	beq.n	800e482 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800e472:	2100      	movs	r1, #0
 800e474:	2077      	movs	r0, #119	@ 0x77
 800e476:	f7ff fdfa 	bl	800e06e <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800e47a:	6839      	ldr	r1, [r7, #0]
 800e47c:	2057      	movs	r0, #87	@ 0x57
 800e47e:	f7ff fdf6 	bl	800e06e <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800e482:	6879      	ldr	r1, [r7, #4]
 800e484:	2059      	movs	r0, #89	@ 0x59
 800e486:	f7ff fdf2 	bl	800e06e <SD_SendCmd>
 800e48a:	4603      	mov	r3, r0
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d11b      	bne.n	800e4c8 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 800e490:	21fc      	movs	r1, #252	@ 0xfc
 800e492:	68b8      	ldr	r0, [r7, #8]
 800e494:	f7ff fda8 	bl	800dfe8 <SD_TxDataBlock>
 800e498:	4603      	mov	r3, r0
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d00a      	beq.n	800e4b4 <SD_disk_write+0xd0>
        buff += 512;
 800e49e:	68bb      	ldr	r3, [r7, #8]
 800e4a0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800e4a4:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	3b01      	subs	r3, #1
 800e4aa:	603b      	str	r3, [r7, #0]
 800e4ac:	683b      	ldr	r3, [r7, #0]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d1ee      	bne.n	800e490 <SD_disk_write+0xac>
 800e4b2:	e000      	b.n	800e4b6 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 800e4b4:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 800e4b6:	21fd      	movs	r1, #253	@ 0xfd
 800e4b8:	2000      	movs	r0, #0
 800e4ba:	f7ff fd95 	bl	800dfe8 <SD_TxDataBlock>
 800e4be:	4603      	mov	r3, r0
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d101      	bne.n	800e4c8 <SD_disk_write+0xe4>
      {
        count = 1;
 800e4c4:	2301      	movs	r3, #1
 800e4c6:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 800e4c8:	f7ff fc82 	bl	800ddd0 <DESELECT>
  SPI_RxByte();
 800e4cc:	f7ff fcc0 	bl	800de50 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	bf14      	ite	ne
 800e4d6:	2301      	movne	r3, #1
 800e4d8:	2300      	moveq	r3, #0
 800e4da:	b2db      	uxtb	r3, r3
}
 800e4dc:	4618      	mov	r0, r3
 800e4de:	3710      	adds	r7, #16
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}
 800e4e4:	24000068 	.word	0x24000068
 800e4e8:	2400279c 	.word	0x2400279c

0800e4ec <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 800e4ec:	b590      	push	{r4, r7, lr}
 800e4ee:	b08b      	sub	sp, #44	@ 0x2c
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	603a      	str	r2, [r7, #0]
 800e4f6:	71fb      	strb	r3, [r7, #7]
 800e4f8:	460b      	mov	r3, r1
 800e4fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 800e4fc:	683b      	ldr	r3, [r7, #0]
 800e4fe:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 800e500:	79fb      	ldrb	r3, [r7, #7]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d001      	beq.n	800e50a <SD_disk_ioctl+0x1e>
 800e506:	2304      	movs	r3, #4
 800e508:	e113      	b.n	800e732 <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 800e50a:	2301      	movs	r3, #1
 800e50c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 800e510:	79bb      	ldrb	r3, [r7, #6]
 800e512:	2b05      	cmp	r3, #5
 800e514:	d124      	bne.n	800e560 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 800e516:	6a3b      	ldr	r3, [r7, #32]
 800e518:	781b      	ldrb	r3, [r3, #0]
 800e51a:	2b02      	cmp	r3, #2
 800e51c:	d012      	beq.n	800e544 <SD_disk_ioctl+0x58>
 800e51e:	2b02      	cmp	r3, #2
 800e520:	dc1a      	bgt.n	800e558 <SD_disk_ioctl+0x6c>
 800e522:	2b00      	cmp	r3, #0
 800e524:	d002      	beq.n	800e52c <SD_disk_ioctl+0x40>
 800e526:	2b01      	cmp	r3, #1
 800e528:	d006      	beq.n	800e538 <SD_disk_ioctl+0x4c>
 800e52a:	e015      	b.n	800e558 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 800e52c:	f7ff fd16 	bl	800df5c <SD_PowerOff>
      res = RES_OK;
 800e530:	2300      	movs	r3, #0
 800e532:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800e536:	e0fa      	b.n	800e72e <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 800e538:	f7ff fcce 	bl	800ded8 <SD_PowerOn>
      res = RES_OK;
 800e53c:	2300      	movs	r3, #0
 800e53e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800e542:	e0f4      	b.n	800e72e <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 800e544:	6a3b      	ldr	r3, [r7, #32]
 800e546:	1c5c      	adds	r4, r3, #1
 800e548:	f7ff fd14 	bl	800df74 <SD_CheckPower>
 800e54c:	4603      	mov	r3, r0
 800e54e:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 800e550:	2300      	movs	r3, #0
 800e552:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800e556:	e0ea      	b.n	800e72e <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 800e558:	2304      	movs	r3, #4
 800e55a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e55e:	e0e6      	b.n	800e72e <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 800e560:	4b76      	ldr	r3, [pc, #472]	@ (800e73c <SD_disk_ioctl+0x250>)
 800e562:	781b      	ldrb	r3, [r3, #0]
 800e564:	b2db      	uxtb	r3, r3
 800e566:	f003 0301 	and.w	r3, r3, #1
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d001      	beq.n	800e572 <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 800e56e:	2303      	movs	r3, #3
 800e570:	e0df      	b.n	800e732 <SD_disk_ioctl+0x246>
    }
    SELECT();
 800e572:	f7ff fc21 	bl	800ddb8 <SELECT>
    switch (ctrl)
 800e576:	79bb      	ldrb	r3, [r7, #6]
 800e578:	2b0d      	cmp	r3, #13
 800e57a:	f200 80c9 	bhi.w	800e710 <SD_disk_ioctl+0x224>
 800e57e:	a201      	add	r2, pc, #4	@ (adr r2, 800e584 <SD_disk_ioctl+0x98>)
 800e580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e584:	0800e67b 	.word	0x0800e67b
 800e588:	0800e5bd 	.word	0x0800e5bd
 800e58c:	0800e66b 	.word	0x0800e66b
 800e590:	0800e711 	.word	0x0800e711
 800e594:	0800e711 	.word	0x0800e711
 800e598:	0800e711 	.word	0x0800e711
 800e59c:	0800e711 	.word	0x0800e711
 800e5a0:	0800e711 	.word	0x0800e711
 800e5a4:	0800e711 	.word	0x0800e711
 800e5a8:	0800e711 	.word	0x0800e711
 800e5ac:	0800e711 	.word	0x0800e711
 800e5b0:	0800e68d 	.word	0x0800e68d
 800e5b4:	0800e6b1 	.word	0x0800e6b1
 800e5b8:	0800e6d5 	.word	0x0800e6d5
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800e5bc:	2100      	movs	r1, #0
 800e5be:	2049      	movs	r0, #73	@ 0x49
 800e5c0:	f7ff fd55 	bl	800e06e <SD_SendCmd>
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	f040 80a6 	bne.w	800e718 <SD_disk_ioctl+0x22c>
 800e5cc:	f107 030c 	add.w	r3, r7, #12
 800e5d0:	2110      	movs	r1, #16
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f7ff fcda 	bl	800df8c <SD_RxDataBlock>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	f000 809c 	beq.w	800e718 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 800e5e0:	7b3b      	ldrb	r3, [r7, #12]
 800e5e2:	099b      	lsrs	r3, r3, #6
 800e5e4:	b2db      	uxtb	r3, r3
 800e5e6:	2b01      	cmp	r3, #1
 800e5e8:	d10d      	bne.n	800e606 <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800e5ea:	7d7b      	ldrb	r3, [r7, #21]
 800e5ec:	461a      	mov	r2, r3
 800e5ee:	7d3b      	ldrb	r3, [r7, #20]
 800e5f0:	021b      	lsls	r3, r3, #8
 800e5f2:	b29b      	uxth	r3, r3
 800e5f4:	4413      	add	r3, r2
 800e5f6:	b29b      	uxth	r3, r3
 800e5f8:	3301      	adds	r3, #1
 800e5fa:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 800e5fc:	8bfb      	ldrh	r3, [r7, #30]
 800e5fe:	029a      	lsls	r2, r3, #10
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	601a      	str	r2, [r3, #0]
 800e604:	e02d      	b.n	800e662 <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800e606:	7c7b      	ldrb	r3, [r7, #17]
 800e608:	f003 030f 	and.w	r3, r3, #15
 800e60c:	b2da      	uxtb	r2, r3
 800e60e:	7dbb      	ldrb	r3, [r7, #22]
 800e610:	09db      	lsrs	r3, r3, #7
 800e612:	b2db      	uxtb	r3, r3
 800e614:	4413      	add	r3, r2
 800e616:	b2da      	uxtb	r2, r3
 800e618:	7d7b      	ldrb	r3, [r7, #21]
 800e61a:	005b      	lsls	r3, r3, #1
 800e61c:	b2db      	uxtb	r3, r3
 800e61e:	f003 0306 	and.w	r3, r3, #6
 800e622:	b2db      	uxtb	r3, r3
 800e624:	4413      	add	r3, r2
 800e626:	b2db      	uxtb	r3, r3
 800e628:	3302      	adds	r3, #2
 800e62a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800e62e:	7d3b      	ldrb	r3, [r7, #20]
 800e630:	099b      	lsrs	r3, r3, #6
 800e632:	b2db      	uxtb	r3, r3
 800e634:	461a      	mov	r2, r3
 800e636:	7cfb      	ldrb	r3, [r7, #19]
 800e638:	009b      	lsls	r3, r3, #2
 800e63a:	b29b      	uxth	r3, r3
 800e63c:	4413      	add	r3, r2
 800e63e:	b29a      	uxth	r2, r3
 800e640:	7cbb      	ldrb	r3, [r7, #18]
 800e642:	029b      	lsls	r3, r3, #10
 800e644:	b29b      	uxth	r3, r3
 800e646:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800e64a:	b29b      	uxth	r3, r3
 800e64c:	4413      	add	r3, r2
 800e64e:	b29b      	uxth	r3, r3
 800e650:	3301      	adds	r3, #1
 800e652:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 800e654:	8bfa      	ldrh	r2, [r7, #30]
 800e656:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e65a:	3b09      	subs	r3, #9
 800e65c:	409a      	lsls	r2, r3
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 800e662:	2300      	movs	r3, #0
 800e664:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 800e668:	e056      	b.n	800e718 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e670:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800e672:	2300      	movs	r3, #0
 800e674:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800e678:	e055      	b.n	800e726 <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800e67a:	f7ff fc13 	bl	800dea4 <SD_ReadyWait>
 800e67e:	4603      	mov	r3, r0
 800e680:	2bff      	cmp	r3, #255	@ 0xff
 800e682:	d14b      	bne.n	800e71c <SD_disk_ioctl+0x230>
 800e684:	2300      	movs	r3, #0
 800e686:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800e68a:	e047      	b.n	800e71c <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800e68c:	2100      	movs	r1, #0
 800e68e:	2049      	movs	r0, #73	@ 0x49
 800e690:	f7ff fced 	bl	800e06e <SD_SendCmd>
 800e694:	4603      	mov	r3, r0
 800e696:	2b00      	cmp	r3, #0
 800e698:	d142      	bne.n	800e720 <SD_disk_ioctl+0x234>
 800e69a:	2110      	movs	r1, #16
 800e69c:	6a38      	ldr	r0, [r7, #32]
 800e69e:	f7ff fc75 	bl	800df8c <SD_RxDataBlock>
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d03b      	beq.n	800e720 <SD_disk_ioctl+0x234>
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800e6ae:	e037      	b.n	800e720 <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800e6b0:	2100      	movs	r1, #0
 800e6b2:	204a      	movs	r0, #74	@ 0x4a
 800e6b4:	f7ff fcdb 	bl	800e06e <SD_SendCmd>
 800e6b8:	4603      	mov	r3, r0
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d132      	bne.n	800e724 <SD_disk_ioctl+0x238>
 800e6be:	2110      	movs	r1, #16
 800e6c0:	6a38      	ldr	r0, [r7, #32]
 800e6c2:	f7ff fc63 	bl	800df8c <SD_RxDataBlock>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d02b      	beq.n	800e724 <SD_disk_ioctl+0x238>
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800e6d2:	e027      	b.n	800e724 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 800e6d4:	2100      	movs	r1, #0
 800e6d6:	207a      	movs	r0, #122	@ 0x7a
 800e6d8:	f7ff fcc9 	bl	800e06e <SD_SendCmd>
 800e6dc:	4603      	mov	r3, r0
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d116      	bne.n	800e710 <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e6e8:	e00b      	b.n	800e702 <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 800e6ea:	6a3c      	ldr	r4, [r7, #32]
 800e6ec:	1c63      	adds	r3, r4, #1
 800e6ee:	623b      	str	r3, [r7, #32]
 800e6f0:	f7ff fbae 	bl	800de50 <SPI_RxByte>
 800e6f4:	4603      	mov	r3, r0
 800e6f6:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 800e6f8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e6fc:	3301      	adds	r3, #1
 800e6fe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e702:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e706:	2b03      	cmp	r3, #3
 800e708:	d9ef      	bls.n	800e6ea <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 800e70a:	2300      	movs	r3, #0
 800e70c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 800e710:	2304      	movs	r3, #4
 800e712:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e716:	e006      	b.n	800e726 <SD_disk_ioctl+0x23a>
      break;
 800e718:	bf00      	nop
 800e71a:	e004      	b.n	800e726 <SD_disk_ioctl+0x23a>
      break;
 800e71c:	bf00      	nop
 800e71e:	e002      	b.n	800e726 <SD_disk_ioctl+0x23a>
      break;
 800e720:	bf00      	nop
 800e722:	e000      	b.n	800e726 <SD_disk_ioctl+0x23a>
      break;
 800e724:	bf00      	nop
    }
    DESELECT();
 800e726:	f7ff fb53 	bl	800ddd0 <DESELECT>
    SPI_RxByte();
 800e72a:	f7ff fb91 	bl	800de50 <SPI_RxByte>
  }
  return res;
 800e72e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800e732:	4618      	mov	r0, r3
 800e734:	372c      	adds	r7, #44	@ 0x2c
 800e736:	46bd      	mov	sp, r7
 800e738:	bd90      	pop	{r4, r7, pc}
 800e73a:	bf00      	nop
 800e73c:	24000068 	.word	0x24000068

0800e740 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b084      	sub	sp, #16
 800e744:	af00      	add	r7, sp, #0
 800e746:	4603      	mov	r3, r0
 800e748:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e74a:	79fb      	ldrb	r3, [r7, #7]
 800e74c:	4a08      	ldr	r2, [pc, #32]	@ (800e770 <disk_status+0x30>)
 800e74e:	009b      	lsls	r3, r3, #2
 800e750:	4413      	add	r3, r2
 800e752:	685b      	ldr	r3, [r3, #4]
 800e754:	685b      	ldr	r3, [r3, #4]
 800e756:	79fa      	ldrb	r2, [r7, #7]
 800e758:	4905      	ldr	r1, [pc, #20]	@ (800e770 <disk_status+0x30>)
 800e75a:	440a      	add	r2, r1
 800e75c:	7a12      	ldrb	r2, [r2, #8]
 800e75e:	4610      	mov	r0, r2
 800e760:	4798      	blx	r3
 800e762:	4603      	mov	r3, r0
 800e764:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e766:	7bfb      	ldrb	r3, [r7, #15]
}
 800e768:	4618      	mov	r0, r3
 800e76a:	3710      	adds	r7, #16
 800e76c:	46bd      	mov	sp, r7
 800e76e:	bd80      	pop	{r7, pc}
 800e770:	240029c8 	.word	0x240029c8

0800e774 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b084      	sub	sp, #16
 800e778:	af00      	add	r7, sp, #0
 800e77a:	4603      	mov	r3, r0
 800e77c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e77e:	2300      	movs	r3, #0
 800e780:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e782:	79fb      	ldrb	r3, [r7, #7]
 800e784:	4a0e      	ldr	r2, [pc, #56]	@ (800e7c0 <disk_initialize+0x4c>)
 800e786:	5cd3      	ldrb	r3, [r2, r3]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d114      	bne.n	800e7b6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e78c:	79fb      	ldrb	r3, [r7, #7]
 800e78e:	4a0c      	ldr	r2, [pc, #48]	@ (800e7c0 <disk_initialize+0x4c>)
 800e790:	009b      	lsls	r3, r3, #2
 800e792:	4413      	add	r3, r2
 800e794:	685b      	ldr	r3, [r3, #4]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	79fa      	ldrb	r2, [r7, #7]
 800e79a:	4909      	ldr	r1, [pc, #36]	@ (800e7c0 <disk_initialize+0x4c>)
 800e79c:	440a      	add	r2, r1
 800e79e:	7a12      	ldrb	r2, [r2, #8]
 800e7a0:	4610      	mov	r0, r2
 800e7a2:	4798      	blx	r3
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800e7a8:	7bfb      	ldrb	r3, [r7, #15]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d103      	bne.n	800e7b6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800e7ae:	79fb      	ldrb	r3, [r7, #7]
 800e7b0:	4a03      	ldr	r2, [pc, #12]	@ (800e7c0 <disk_initialize+0x4c>)
 800e7b2:	2101      	movs	r1, #1
 800e7b4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800e7b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	3710      	adds	r7, #16
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	bd80      	pop	{r7, pc}
 800e7c0:	240029c8 	.word	0x240029c8

0800e7c4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e7c4:	b590      	push	{r4, r7, lr}
 800e7c6:	b087      	sub	sp, #28
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	60b9      	str	r1, [r7, #8]
 800e7cc:	607a      	str	r2, [r7, #4]
 800e7ce:	603b      	str	r3, [r7, #0]
 800e7d0:	4603      	mov	r3, r0
 800e7d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e7d4:	7bfb      	ldrb	r3, [r7, #15]
 800e7d6:	4a0a      	ldr	r2, [pc, #40]	@ (800e800 <disk_read+0x3c>)
 800e7d8:	009b      	lsls	r3, r3, #2
 800e7da:	4413      	add	r3, r2
 800e7dc:	685b      	ldr	r3, [r3, #4]
 800e7de:	689c      	ldr	r4, [r3, #8]
 800e7e0:	7bfb      	ldrb	r3, [r7, #15]
 800e7e2:	4a07      	ldr	r2, [pc, #28]	@ (800e800 <disk_read+0x3c>)
 800e7e4:	4413      	add	r3, r2
 800e7e6:	7a18      	ldrb	r0, [r3, #8]
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	687a      	ldr	r2, [r7, #4]
 800e7ec:	68b9      	ldr	r1, [r7, #8]
 800e7ee:	47a0      	blx	r4
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	75fb      	strb	r3, [r7, #23]
  return res;
 800e7f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	371c      	adds	r7, #28
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bd90      	pop	{r4, r7, pc}
 800e7fe:	bf00      	nop
 800e800:	240029c8 	.word	0x240029c8

0800e804 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e804:	b590      	push	{r4, r7, lr}
 800e806:	b087      	sub	sp, #28
 800e808:	af00      	add	r7, sp, #0
 800e80a:	60b9      	str	r1, [r7, #8]
 800e80c:	607a      	str	r2, [r7, #4]
 800e80e:	603b      	str	r3, [r7, #0]
 800e810:	4603      	mov	r3, r0
 800e812:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e814:	7bfb      	ldrb	r3, [r7, #15]
 800e816:	4a0a      	ldr	r2, [pc, #40]	@ (800e840 <disk_write+0x3c>)
 800e818:	009b      	lsls	r3, r3, #2
 800e81a:	4413      	add	r3, r2
 800e81c:	685b      	ldr	r3, [r3, #4]
 800e81e:	68dc      	ldr	r4, [r3, #12]
 800e820:	7bfb      	ldrb	r3, [r7, #15]
 800e822:	4a07      	ldr	r2, [pc, #28]	@ (800e840 <disk_write+0x3c>)
 800e824:	4413      	add	r3, r2
 800e826:	7a18      	ldrb	r0, [r3, #8]
 800e828:	683b      	ldr	r3, [r7, #0]
 800e82a:	687a      	ldr	r2, [r7, #4]
 800e82c:	68b9      	ldr	r1, [r7, #8]
 800e82e:	47a0      	blx	r4
 800e830:	4603      	mov	r3, r0
 800e832:	75fb      	strb	r3, [r7, #23]
  return res;
 800e834:	7dfb      	ldrb	r3, [r7, #23]
}
 800e836:	4618      	mov	r0, r3
 800e838:	371c      	adds	r7, #28
 800e83a:	46bd      	mov	sp, r7
 800e83c:	bd90      	pop	{r4, r7, pc}
 800e83e:	bf00      	nop
 800e840:	240029c8 	.word	0x240029c8

0800e844 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b084      	sub	sp, #16
 800e848:	af00      	add	r7, sp, #0
 800e84a:	4603      	mov	r3, r0
 800e84c:	603a      	str	r2, [r7, #0]
 800e84e:	71fb      	strb	r3, [r7, #7]
 800e850:	460b      	mov	r3, r1
 800e852:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e854:	79fb      	ldrb	r3, [r7, #7]
 800e856:	4a09      	ldr	r2, [pc, #36]	@ (800e87c <disk_ioctl+0x38>)
 800e858:	009b      	lsls	r3, r3, #2
 800e85a:	4413      	add	r3, r2
 800e85c:	685b      	ldr	r3, [r3, #4]
 800e85e:	691b      	ldr	r3, [r3, #16]
 800e860:	79fa      	ldrb	r2, [r7, #7]
 800e862:	4906      	ldr	r1, [pc, #24]	@ (800e87c <disk_ioctl+0x38>)
 800e864:	440a      	add	r2, r1
 800e866:	7a10      	ldrb	r0, [r2, #8]
 800e868:	79b9      	ldrb	r1, [r7, #6]
 800e86a:	683a      	ldr	r2, [r7, #0]
 800e86c:	4798      	blx	r3
 800e86e:	4603      	mov	r3, r0
 800e870:	73fb      	strb	r3, [r7, #15]
  return res;
 800e872:	7bfb      	ldrb	r3, [r7, #15]
}
 800e874:	4618      	mov	r0, r3
 800e876:	3710      	adds	r7, #16
 800e878:	46bd      	mov	sp, r7
 800e87a:	bd80      	pop	{r7, pc}
 800e87c:	240029c8 	.word	0x240029c8

0800e880 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e880:	b480      	push	{r7}
 800e882:	b085      	sub	sp, #20
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	3301      	adds	r3, #1
 800e88c:	781b      	ldrb	r3, [r3, #0]
 800e88e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e890:	89fb      	ldrh	r3, [r7, #14]
 800e892:	021b      	lsls	r3, r3, #8
 800e894:	b21a      	sxth	r2, r3
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	781b      	ldrb	r3, [r3, #0]
 800e89a:	b21b      	sxth	r3, r3
 800e89c:	4313      	orrs	r3, r2
 800e89e:	b21b      	sxth	r3, r3
 800e8a0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e8a2:	89fb      	ldrh	r3, [r7, #14]
}
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	3714      	adds	r7, #20
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ae:	4770      	bx	lr

0800e8b0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e8b0:	b480      	push	{r7}
 800e8b2:	b085      	sub	sp, #20
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	3303      	adds	r3, #3
 800e8bc:	781b      	ldrb	r3, [r3, #0]
 800e8be:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	021b      	lsls	r3, r3, #8
 800e8c4:	687a      	ldr	r2, [r7, #4]
 800e8c6:	3202      	adds	r2, #2
 800e8c8:	7812      	ldrb	r2, [r2, #0]
 800e8ca:	4313      	orrs	r3, r2
 800e8cc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	021b      	lsls	r3, r3, #8
 800e8d2:	687a      	ldr	r2, [r7, #4]
 800e8d4:	3201      	adds	r2, #1
 800e8d6:	7812      	ldrb	r2, [r2, #0]
 800e8d8:	4313      	orrs	r3, r2
 800e8da:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	021b      	lsls	r3, r3, #8
 800e8e0:	687a      	ldr	r2, [r7, #4]
 800e8e2:	7812      	ldrb	r2, [r2, #0]
 800e8e4:	4313      	orrs	r3, r2
 800e8e6:	60fb      	str	r3, [r7, #12]
	return rv;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
}
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	3714      	adds	r7, #20
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f4:	4770      	bx	lr

0800e8f6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e8f6:	b480      	push	{r7}
 800e8f8:	b083      	sub	sp, #12
 800e8fa:	af00      	add	r7, sp, #0
 800e8fc:	6078      	str	r0, [r7, #4]
 800e8fe:	460b      	mov	r3, r1
 800e900:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	1c5a      	adds	r2, r3, #1
 800e906:	607a      	str	r2, [r7, #4]
 800e908:	887a      	ldrh	r2, [r7, #2]
 800e90a:	b2d2      	uxtb	r2, r2
 800e90c:	701a      	strb	r2, [r3, #0]
 800e90e:	887b      	ldrh	r3, [r7, #2]
 800e910:	0a1b      	lsrs	r3, r3, #8
 800e912:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	1c5a      	adds	r2, r3, #1
 800e918:	607a      	str	r2, [r7, #4]
 800e91a:	887a      	ldrh	r2, [r7, #2]
 800e91c:	b2d2      	uxtb	r2, r2
 800e91e:	701a      	strb	r2, [r3, #0]
}
 800e920:	bf00      	nop
 800e922:	370c      	adds	r7, #12
 800e924:	46bd      	mov	sp, r7
 800e926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92a:	4770      	bx	lr

0800e92c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e92c:	b480      	push	{r7}
 800e92e:	b083      	sub	sp, #12
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
 800e934:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	1c5a      	adds	r2, r3, #1
 800e93a:	607a      	str	r2, [r7, #4]
 800e93c:	683a      	ldr	r2, [r7, #0]
 800e93e:	b2d2      	uxtb	r2, r2
 800e940:	701a      	strb	r2, [r3, #0]
 800e942:	683b      	ldr	r3, [r7, #0]
 800e944:	0a1b      	lsrs	r3, r3, #8
 800e946:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	1c5a      	adds	r2, r3, #1
 800e94c:	607a      	str	r2, [r7, #4]
 800e94e:	683a      	ldr	r2, [r7, #0]
 800e950:	b2d2      	uxtb	r2, r2
 800e952:	701a      	strb	r2, [r3, #0]
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	0a1b      	lsrs	r3, r3, #8
 800e958:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	1c5a      	adds	r2, r3, #1
 800e95e:	607a      	str	r2, [r7, #4]
 800e960:	683a      	ldr	r2, [r7, #0]
 800e962:	b2d2      	uxtb	r2, r2
 800e964:	701a      	strb	r2, [r3, #0]
 800e966:	683b      	ldr	r3, [r7, #0]
 800e968:	0a1b      	lsrs	r3, r3, #8
 800e96a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	1c5a      	adds	r2, r3, #1
 800e970:	607a      	str	r2, [r7, #4]
 800e972:	683a      	ldr	r2, [r7, #0]
 800e974:	b2d2      	uxtb	r2, r2
 800e976:	701a      	strb	r2, [r3, #0]
}
 800e978:	bf00      	nop
 800e97a:	370c      	adds	r7, #12
 800e97c:	46bd      	mov	sp, r7
 800e97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e982:	4770      	bx	lr

0800e984 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e984:	b480      	push	{r7}
 800e986:	b087      	sub	sp, #28
 800e988:	af00      	add	r7, sp, #0
 800e98a:	60f8      	str	r0, [r7, #12]
 800e98c:	60b9      	str	r1, [r7, #8]
 800e98e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e994:	68bb      	ldr	r3, [r7, #8]
 800e996:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d00d      	beq.n	800e9ba <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e99e:	693a      	ldr	r2, [r7, #16]
 800e9a0:	1c53      	adds	r3, r2, #1
 800e9a2:	613b      	str	r3, [r7, #16]
 800e9a4:	697b      	ldr	r3, [r7, #20]
 800e9a6:	1c59      	adds	r1, r3, #1
 800e9a8:	6179      	str	r1, [r7, #20]
 800e9aa:	7812      	ldrb	r2, [r2, #0]
 800e9ac:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	3b01      	subs	r3, #1
 800e9b2:	607b      	str	r3, [r7, #4]
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d1f1      	bne.n	800e99e <mem_cpy+0x1a>
	}
}
 800e9ba:	bf00      	nop
 800e9bc:	371c      	adds	r7, #28
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c4:	4770      	bx	lr

0800e9c6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e9c6:	b480      	push	{r7}
 800e9c8:	b087      	sub	sp, #28
 800e9ca:	af00      	add	r7, sp, #0
 800e9cc:	60f8      	str	r0, [r7, #12]
 800e9ce:	60b9      	str	r1, [r7, #8]
 800e9d0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e9d6:	697b      	ldr	r3, [r7, #20]
 800e9d8:	1c5a      	adds	r2, r3, #1
 800e9da:	617a      	str	r2, [r7, #20]
 800e9dc:	68ba      	ldr	r2, [r7, #8]
 800e9de:	b2d2      	uxtb	r2, r2
 800e9e0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	3b01      	subs	r3, #1
 800e9e6:	607b      	str	r3, [r7, #4]
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d1f3      	bne.n	800e9d6 <mem_set+0x10>
}
 800e9ee:	bf00      	nop
 800e9f0:	bf00      	nop
 800e9f2:	371c      	adds	r7, #28
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fa:	4770      	bx	lr

0800e9fc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e9fc:	b480      	push	{r7}
 800e9fe:	b089      	sub	sp, #36	@ 0x24
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	60f8      	str	r0, [r7, #12]
 800ea04:	60b9      	str	r1, [r7, #8]
 800ea06:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	61fb      	str	r3, [r7, #28]
 800ea0c:	68bb      	ldr	r3, [r7, #8]
 800ea0e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ea10:	2300      	movs	r3, #0
 800ea12:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ea14:	69fb      	ldr	r3, [r7, #28]
 800ea16:	1c5a      	adds	r2, r3, #1
 800ea18:	61fa      	str	r2, [r7, #28]
 800ea1a:	781b      	ldrb	r3, [r3, #0]
 800ea1c:	4619      	mov	r1, r3
 800ea1e:	69bb      	ldr	r3, [r7, #24]
 800ea20:	1c5a      	adds	r2, r3, #1
 800ea22:	61ba      	str	r2, [r7, #24]
 800ea24:	781b      	ldrb	r3, [r3, #0]
 800ea26:	1acb      	subs	r3, r1, r3
 800ea28:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	3b01      	subs	r3, #1
 800ea2e:	607b      	str	r3, [r7, #4]
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d002      	beq.n	800ea3c <mem_cmp+0x40>
 800ea36:	697b      	ldr	r3, [r7, #20]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d0eb      	beq.n	800ea14 <mem_cmp+0x18>

	return r;
 800ea3c:	697b      	ldr	r3, [r7, #20]
}
 800ea3e:	4618      	mov	r0, r3
 800ea40:	3724      	adds	r7, #36	@ 0x24
 800ea42:	46bd      	mov	sp, r7
 800ea44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea48:	4770      	bx	lr

0800ea4a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ea4a:	b480      	push	{r7}
 800ea4c:	b083      	sub	sp, #12
 800ea4e:	af00      	add	r7, sp, #0
 800ea50:	6078      	str	r0, [r7, #4]
 800ea52:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ea54:	e002      	b.n	800ea5c <chk_chr+0x12>
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	3301      	adds	r3, #1
 800ea5a:	607b      	str	r3, [r7, #4]
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	781b      	ldrb	r3, [r3, #0]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d005      	beq.n	800ea70 <chk_chr+0x26>
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	781b      	ldrb	r3, [r3, #0]
 800ea68:	461a      	mov	r2, r3
 800ea6a:	683b      	ldr	r3, [r7, #0]
 800ea6c:	4293      	cmp	r3, r2
 800ea6e:	d1f2      	bne.n	800ea56 <chk_chr+0xc>
	return *str;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	781b      	ldrb	r3, [r3, #0]
}
 800ea74:	4618      	mov	r0, r3
 800ea76:	370c      	adds	r7, #12
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7e:	4770      	bx	lr

0800ea80 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ea80:	b480      	push	{r7}
 800ea82:	b085      	sub	sp, #20
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
 800ea88:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	60bb      	str	r3, [r7, #8]
 800ea8e:	68bb      	ldr	r3, [r7, #8]
 800ea90:	60fb      	str	r3, [r7, #12]
 800ea92:	e029      	b.n	800eae8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ea94:	4a27      	ldr	r2, [pc, #156]	@ (800eb34 <chk_lock+0xb4>)
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	011b      	lsls	r3, r3, #4
 800ea9a:	4413      	add	r3, r2
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d01d      	beq.n	800eade <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800eaa2:	4a24      	ldr	r2, [pc, #144]	@ (800eb34 <chk_lock+0xb4>)
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	011b      	lsls	r3, r3, #4
 800eaa8:	4413      	add	r3, r2
 800eaaa:	681a      	ldr	r2, [r3, #0]
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	429a      	cmp	r2, r3
 800eab2:	d116      	bne.n	800eae2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800eab4:	4a1f      	ldr	r2, [pc, #124]	@ (800eb34 <chk_lock+0xb4>)
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	011b      	lsls	r3, r3, #4
 800eaba:	4413      	add	r3, r2
 800eabc:	3304      	adds	r3, #4
 800eabe:	681a      	ldr	r2, [r3, #0]
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800eac4:	429a      	cmp	r2, r3
 800eac6:	d10c      	bne.n	800eae2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800eac8:	4a1a      	ldr	r2, [pc, #104]	@ (800eb34 <chk_lock+0xb4>)
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	011b      	lsls	r3, r3, #4
 800eace:	4413      	add	r3, r2
 800ead0:	3308      	adds	r3, #8
 800ead2:	681a      	ldr	r2, [r3, #0]
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ead8:	429a      	cmp	r2, r3
 800eada:	d102      	bne.n	800eae2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800eadc:	e007      	b.n	800eaee <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800eade:	2301      	movs	r3, #1
 800eae0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	3301      	adds	r3, #1
 800eae6:	60fb      	str	r3, [r7, #12]
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	2b01      	cmp	r3, #1
 800eaec:	d9d2      	bls.n	800ea94 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	2b02      	cmp	r3, #2
 800eaf2:	d109      	bne.n	800eb08 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800eaf4:	68bb      	ldr	r3, [r7, #8]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d102      	bne.n	800eb00 <chk_lock+0x80>
 800eafa:	683b      	ldr	r3, [r7, #0]
 800eafc:	2b02      	cmp	r3, #2
 800eafe:	d101      	bne.n	800eb04 <chk_lock+0x84>
 800eb00:	2300      	movs	r3, #0
 800eb02:	e010      	b.n	800eb26 <chk_lock+0xa6>
 800eb04:	2312      	movs	r3, #18
 800eb06:	e00e      	b.n	800eb26 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d108      	bne.n	800eb20 <chk_lock+0xa0>
 800eb0e:	4a09      	ldr	r2, [pc, #36]	@ (800eb34 <chk_lock+0xb4>)
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	011b      	lsls	r3, r3, #4
 800eb14:	4413      	add	r3, r2
 800eb16:	330c      	adds	r3, #12
 800eb18:	881b      	ldrh	r3, [r3, #0]
 800eb1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eb1e:	d101      	bne.n	800eb24 <chk_lock+0xa4>
 800eb20:	2310      	movs	r3, #16
 800eb22:	e000      	b.n	800eb26 <chk_lock+0xa6>
 800eb24:	2300      	movs	r3, #0
}
 800eb26:	4618      	mov	r0, r3
 800eb28:	3714      	adds	r7, #20
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb30:	4770      	bx	lr
 800eb32:	bf00      	nop
 800eb34:	240027a8 	.word	0x240027a8

0800eb38 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800eb38:	b480      	push	{r7}
 800eb3a:	b083      	sub	sp, #12
 800eb3c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800eb3e:	2300      	movs	r3, #0
 800eb40:	607b      	str	r3, [r7, #4]
 800eb42:	e002      	b.n	800eb4a <enq_lock+0x12>
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	3301      	adds	r3, #1
 800eb48:	607b      	str	r3, [r7, #4]
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	2b01      	cmp	r3, #1
 800eb4e:	d806      	bhi.n	800eb5e <enq_lock+0x26>
 800eb50:	4a09      	ldr	r2, [pc, #36]	@ (800eb78 <enq_lock+0x40>)
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	011b      	lsls	r3, r3, #4
 800eb56:	4413      	add	r3, r2
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d1f2      	bne.n	800eb44 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	2b02      	cmp	r3, #2
 800eb62:	bf14      	ite	ne
 800eb64:	2301      	movne	r3, #1
 800eb66:	2300      	moveq	r3, #0
 800eb68:	b2db      	uxtb	r3, r3
}
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	370c      	adds	r7, #12
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb74:	4770      	bx	lr
 800eb76:	bf00      	nop
 800eb78:	240027a8 	.word	0x240027a8

0800eb7c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800eb7c:	b480      	push	{r7}
 800eb7e:	b085      	sub	sp, #20
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
 800eb84:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800eb86:	2300      	movs	r3, #0
 800eb88:	60fb      	str	r3, [r7, #12]
 800eb8a:	e01f      	b.n	800ebcc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800eb8c:	4a41      	ldr	r2, [pc, #260]	@ (800ec94 <inc_lock+0x118>)
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	011b      	lsls	r3, r3, #4
 800eb92:	4413      	add	r3, r2
 800eb94:	681a      	ldr	r2, [r3, #0]
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	429a      	cmp	r2, r3
 800eb9c:	d113      	bne.n	800ebc6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800eb9e:	4a3d      	ldr	r2, [pc, #244]	@ (800ec94 <inc_lock+0x118>)
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	011b      	lsls	r3, r3, #4
 800eba4:	4413      	add	r3, r2
 800eba6:	3304      	adds	r3, #4
 800eba8:	681a      	ldr	r2, [r3, #0]
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ebae:	429a      	cmp	r2, r3
 800ebb0:	d109      	bne.n	800ebc6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ebb2:	4a38      	ldr	r2, [pc, #224]	@ (800ec94 <inc_lock+0x118>)
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	011b      	lsls	r3, r3, #4
 800ebb8:	4413      	add	r3, r2
 800ebba:	3308      	adds	r3, #8
 800ebbc:	681a      	ldr	r2, [r3, #0]
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ebc2:	429a      	cmp	r2, r3
 800ebc4:	d006      	beq.n	800ebd4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	3301      	adds	r3, #1
 800ebca:	60fb      	str	r3, [r7, #12]
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	2b01      	cmp	r3, #1
 800ebd0:	d9dc      	bls.n	800eb8c <inc_lock+0x10>
 800ebd2:	e000      	b.n	800ebd6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ebd4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	2b02      	cmp	r3, #2
 800ebda:	d132      	bne.n	800ec42 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ebdc:	2300      	movs	r3, #0
 800ebde:	60fb      	str	r3, [r7, #12]
 800ebe0:	e002      	b.n	800ebe8 <inc_lock+0x6c>
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	3301      	adds	r3, #1
 800ebe6:	60fb      	str	r3, [r7, #12]
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	2b01      	cmp	r3, #1
 800ebec:	d806      	bhi.n	800ebfc <inc_lock+0x80>
 800ebee:	4a29      	ldr	r2, [pc, #164]	@ (800ec94 <inc_lock+0x118>)
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	011b      	lsls	r3, r3, #4
 800ebf4:	4413      	add	r3, r2
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d1f2      	bne.n	800ebe2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	2b02      	cmp	r3, #2
 800ec00:	d101      	bne.n	800ec06 <inc_lock+0x8a>
 800ec02:	2300      	movs	r3, #0
 800ec04:	e040      	b.n	800ec88 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681a      	ldr	r2, [r3, #0]
 800ec0a:	4922      	ldr	r1, [pc, #136]	@ (800ec94 <inc_lock+0x118>)
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	011b      	lsls	r3, r3, #4
 800ec10:	440b      	add	r3, r1
 800ec12:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	689a      	ldr	r2, [r3, #8]
 800ec18:	491e      	ldr	r1, [pc, #120]	@ (800ec94 <inc_lock+0x118>)
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	011b      	lsls	r3, r3, #4
 800ec1e:	440b      	add	r3, r1
 800ec20:	3304      	adds	r3, #4
 800ec22:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	695a      	ldr	r2, [r3, #20]
 800ec28:	491a      	ldr	r1, [pc, #104]	@ (800ec94 <inc_lock+0x118>)
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	011b      	lsls	r3, r3, #4
 800ec2e:	440b      	add	r3, r1
 800ec30:	3308      	adds	r3, #8
 800ec32:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ec34:	4a17      	ldr	r2, [pc, #92]	@ (800ec94 <inc_lock+0x118>)
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	011b      	lsls	r3, r3, #4
 800ec3a:	4413      	add	r3, r2
 800ec3c:	330c      	adds	r3, #12
 800ec3e:	2200      	movs	r2, #0
 800ec40:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ec42:	683b      	ldr	r3, [r7, #0]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d009      	beq.n	800ec5c <inc_lock+0xe0>
 800ec48:	4a12      	ldr	r2, [pc, #72]	@ (800ec94 <inc_lock+0x118>)
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	011b      	lsls	r3, r3, #4
 800ec4e:	4413      	add	r3, r2
 800ec50:	330c      	adds	r3, #12
 800ec52:	881b      	ldrh	r3, [r3, #0]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d001      	beq.n	800ec5c <inc_lock+0xe0>
 800ec58:	2300      	movs	r3, #0
 800ec5a:	e015      	b.n	800ec88 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ec5c:	683b      	ldr	r3, [r7, #0]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d108      	bne.n	800ec74 <inc_lock+0xf8>
 800ec62:	4a0c      	ldr	r2, [pc, #48]	@ (800ec94 <inc_lock+0x118>)
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	011b      	lsls	r3, r3, #4
 800ec68:	4413      	add	r3, r2
 800ec6a:	330c      	adds	r3, #12
 800ec6c:	881b      	ldrh	r3, [r3, #0]
 800ec6e:	3301      	adds	r3, #1
 800ec70:	b29a      	uxth	r2, r3
 800ec72:	e001      	b.n	800ec78 <inc_lock+0xfc>
 800ec74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ec78:	4906      	ldr	r1, [pc, #24]	@ (800ec94 <inc_lock+0x118>)
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	011b      	lsls	r3, r3, #4
 800ec7e:	440b      	add	r3, r1
 800ec80:	330c      	adds	r3, #12
 800ec82:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	3301      	adds	r3, #1
}
 800ec88:	4618      	mov	r0, r3
 800ec8a:	3714      	adds	r7, #20
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec92:	4770      	bx	lr
 800ec94:	240027a8 	.word	0x240027a8

0800ec98 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ec98:	b480      	push	{r7}
 800ec9a:	b085      	sub	sp, #20
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	3b01      	subs	r3, #1
 800eca4:	607b      	str	r3, [r7, #4]
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	2b01      	cmp	r3, #1
 800ecaa:	d825      	bhi.n	800ecf8 <dec_lock+0x60>
		n = Files[i].ctr;
 800ecac:	4a17      	ldr	r2, [pc, #92]	@ (800ed0c <dec_lock+0x74>)
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	011b      	lsls	r3, r3, #4
 800ecb2:	4413      	add	r3, r2
 800ecb4:	330c      	adds	r3, #12
 800ecb6:	881b      	ldrh	r3, [r3, #0]
 800ecb8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ecba:	89fb      	ldrh	r3, [r7, #14]
 800ecbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ecc0:	d101      	bne.n	800ecc6 <dec_lock+0x2e>
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ecc6:	89fb      	ldrh	r3, [r7, #14]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d002      	beq.n	800ecd2 <dec_lock+0x3a>
 800eccc:	89fb      	ldrh	r3, [r7, #14]
 800ecce:	3b01      	subs	r3, #1
 800ecd0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ecd2:	4a0e      	ldr	r2, [pc, #56]	@ (800ed0c <dec_lock+0x74>)
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	011b      	lsls	r3, r3, #4
 800ecd8:	4413      	add	r3, r2
 800ecda:	330c      	adds	r3, #12
 800ecdc:	89fa      	ldrh	r2, [r7, #14]
 800ecde:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ece0:	89fb      	ldrh	r3, [r7, #14]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d105      	bne.n	800ecf2 <dec_lock+0x5a>
 800ece6:	4a09      	ldr	r2, [pc, #36]	@ (800ed0c <dec_lock+0x74>)
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	011b      	lsls	r3, r3, #4
 800ecec:	4413      	add	r3, r2
 800ecee:	2200      	movs	r2, #0
 800ecf0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	737b      	strb	r3, [r7, #13]
 800ecf6:	e001      	b.n	800ecfc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ecf8:	2302      	movs	r3, #2
 800ecfa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ecfc:	7b7b      	ldrb	r3, [r7, #13]
}
 800ecfe:	4618      	mov	r0, r3
 800ed00:	3714      	adds	r7, #20
 800ed02:	46bd      	mov	sp, r7
 800ed04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed08:	4770      	bx	lr
 800ed0a:	bf00      	nop
 800ed0c:	240027a8 	.word	0x240027a8

0800ed10 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ed10:	b480      	push	{r7}
 800ed12:	b085      	sub	sp, #20
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ed18:	2300      	movs	r3, #0
 800ed1a:	60fb      	str	r3, [r7, #12]
 800ed1c:	e010      	b.n	800ed40 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ed1e:	4a0d      	ldr	r2, [pc, #52]	@ (800ed54 <clear_lock+0x44>)
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	011b      	lsls	r3, r3, #4
 800ed24:	4413      	add	r3, r2
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	687a      	ldr	r2, [r7, #4]
 800ed2a:	429a      	cmp	r2, r3
 800ed2c:	d105      	bne.n	800ed3a <clear_lock+0x2a>
 800ed2e:	4a09      	ldr	r2, [pc, #36]	@ (800ed54 <clear_lock+0x44>)
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	011b      	lsls	r3, r3, #4
 800ed34:	4413      	add	r3, r2
 800ed36:	2200      	movs	r2, #0
 800ed38:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	3301      	adds	r3, #1
 800ed3e:	60fb      	str	r3, [r7, #12]
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	2b01      	cmp	r3, #1
 800ed44:	d9eb      	bls.n	800ed1e <clear_lock+0xe>
	}
}
 800ed46:	bf00      	nop
 800ed48:	bf00      	nop
 800ed4a:	3714      	adds	r7, #20
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed52:	4770      	bx	lr
 800ed54:	240027a8 	.word	0x240027a8

0800ed58 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b086      	sub	sp, #24
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ed60:	2300      	movs	r3, #0
 800ed62:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	78db      	ldrb	r3, [r3, #3]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d034      	beq.n	800edd6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed70:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	7858      	ldrb	r0, [r3, #1]
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800ed7c:	2301      	movs	r3, #1
 800ed7e:	697a      	ldr	r2, [r7, #20]
 800ed80:	f7ff fd40 	bl	800e804 <disk_write>
 800ed84:	4603      	mov	r3, r0
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d002      	beq.n	800ed90 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ed8a:	2301      	movs	r3, #1
 800ed8c:	73fb      	strb	r3, [r7, #15]
 800ed8e:	e022      	b.n	800edd6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2200      	movs	r2, #0
 800ed94:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed9a:	697a      	ldr	r2, [r7, #20]
 800ed9c:	1ad2      	subs	r2, r2, r3
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eda2:	429a      	cmp	r2, r3
 800eda4:	d217      	bcs.n	800edd6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	789b      	ldrb	r3, [r3, #2]
 800edaa:	613b      	str	r3, [r7, #16]
 800edac:	e010      	b.n	800edd0 <sync_window+0x78>
					wsect += fs->fsize;
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800edb2:	697a      	ldr	r2, [r7, #20]
 800edb4:	4413      	add	r3, r2
 800edb6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	7858      	ldrb	r0, [r3, #1]
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800edc2:	2301      	movs	r3, #1
 800edc4:	697a      	ldr	r2, [r7, #20]
 800edc6:	f7ff fd1d 	bl	800e804 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800edca:	693b      	ldr	r3, [r7, #16]
 800edcc:	3b01      	subs	r3, #1
 800edce:	613b      	str	r3, [r7, #16]
 800edd0:	693b      	ldr	r3, [r7, #16]
 800edd2:	2b01      	cmp	r3, #1
 800edd4:	d8eb      	bhi.n	800edae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800edd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800edd8:	4618      	mov	r0, r3
 800edda:	3718      	adds	r7, #24
 800eddc:	46bd      	mov	sp, r7
 800edde:	bd80      	pop	{r7, pc}

0800ede0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b084      	sub	sp, #16
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
 800ede8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800edea:	2300      	movs	r3, #0
 800edec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edf2:	683a      	ldr	r2, [r7, #0]
 800edf4:	429a      	cmp	r2, r3
 800edf6:	d01b      	beq.n	800ee30 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800edf8:	6878      	ldr	r0, [r7, #4]
 800edfa:	f7ff ffad 	bl	800ed58 <sync_window>
 800edfe:	4603      	mov	r3, r0
 800ee00:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ee02:	7bfb      	ldrb	r3, [r7, #15]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d113      	bne.n	800ee30 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	7858      	ldrb	r0, [r3, #1]
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800ee12:	2301      	movs	r3, #1
 800ee14:	683a      	ldr	r2, [r7, #0]
 800ee16:	f7ff fcd5 	bl	800e7c4 <disk_read>
 800ee1a:	4603      	mov	r3, r0
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d004      	beq.n	800ee2a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ee20:	f04f 33ff 	mov.w	r3, #4294967295
 800ee24:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ee26:	2301      	movs	r3, #1
 800ee28:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	683a      	ldr	r2, [r7, #0]
 800ee2e:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	return res;
 800ee30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee32:	4618      	mov	r0, r3
 800ee34:	3710      	adds	r7, #16
 800ee36:	46bd      	mov	sp, r7
 800ee38:	bd80      	pop	{r7, pc}
	...

0800ee3c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	b084      	sub	sp, #16
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ee44:	6878      	ldr	r0, [r7, #4]
 800ee46:	f7ff ff87 	bl	800ed58 <sync_window>
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ee4e:	7bfb      	ldrb	r3, [r7, #15]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d159      	bne.n	800ef08 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	781b      	ldrb	r3, [r3, #0]
 800ee58:	2b03      	cmp	r3, #3
 800ee5a:	d149      	bne.n	800eef0 <sync_fs+0xb4>
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	791b      	ldrb	r3, [r3, #4]
 800ee60:	2b01      	cmp	r3, #1
 800ee62:	d145      	bne.n	800eef0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	899b      	ldrh	r3, [r3, #12]
 800ee6e:	461a      	mov	r2, r3
 800ee70:	2100      	movs	r1, #0
 800ee72:	f7ff fda8 	bl	800e9c6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	333c      	adds	r3, #60	@ 0x3c
 800ee7a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ee7e:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800ee82:	4618      	mov	r0, r3
 800ee84:	f7ff fd37 	bl	800e8f6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	333c      	adds	r3, #60	@ 0x3c
 800ee8c:	4921      	ldr	r1, [pc, #132]	@ (800ef14 <sync_fs+0xd8>)
 800ee8e:	4618      	mov	r0, r3
 800ee90:	f7ff fd4c 	bl	800e92c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	333c      	adds	r3, #60	@ 0x3c
 800ee98:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800ee9c:	491e      	ldr	r1, [pc, #120]	@ (800ef18 <sync_fs+0xdc>)
 800ee9e:	4618      	mov	r0, r3
 800eea0:	f7ff fd44 	bl	800e92c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	333c      	adds	r3, #60	@ 0x3c
 800eea8:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	699b      	ldr	r3, [r3, #24]
 800eeb0:	4619      	mov	r1, r3
 800eeb2:	4610      	mov	r0, r2
 800eeb4:	f7ff fd3a 	bl	800e92c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	333c      	adds	r3, #60	@ 0x3c
 800eebc:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	695b      	ldr	r3, [r3, #20]
 800eec4:	4619      	mov	r1, r3
 800eec6:	4610      	mov	r0, r2
 800eec8:	f7ff fd30 	bl	800e92c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eed0:	1c5a      	adds	r2, r3, #1
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	639a      	str	r2, [r3, #56]	@ 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	7858      	ldrb	r0, [r3, #1]
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800eee4:	2301      	movs	r3, #1
 800eee6:	f7ff fc8d 	bl	800e804 <disk_write>
			fs->fsi_flag = 0;
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	2200      	movs	r2, #0
 800eeee:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	785b      	ldrb	r3, [r3, #1]
 800eef4:	2200      	movs	r2, #0
 800eef6:	2100      	movs	r1, #0
 800eef8:	4618      	mov	r0, r3
 800eefa:	f7ff fca3 	bl	800e844 <disk_ioctl>
 800eefe:	4603      	mov	r3, r0
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d001      	beq.n	800ef08 <sync_fs+0xcc>
 800ef04:	2301      	movs	r3, #1
 800ef06:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ef08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	3710      	adds	r7, #16
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	bd80      	pop	{r7, pc}
 800ef12:	bf00      	nop
 800ef14:	41615252 	.word	0x41615252
 800ef18:	61417272 	.word	0x61417272

0800ef1c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ef1c:	b480      	push	{r7}
 800ef1e:	b083      	sub	sp, #12
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
 800ef24:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ef26:	683b      	ldr	r3, [r7, #0]
 800ef28:	3b02      	subs	r3, #2
 800ef2a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	6a1b      	ldr	r3, [r3, #32]
 800ef30:	3b02      	subs	r3, #2
 800ef32:	683a      	ldr	r2, [r7, #0]
 800ef34:	429a      	cmp	r2, r3
 800ef36:	d301      	bcc.n	800ef3c <clust2sect+0x20>
 800ef38:	2300      	movs	r3, #0
 800ef3a:	e008      	b.n	800ef4e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	895b      	ldrh	r3, [r3, #10]
 800ef40:	461a      	mov	r2, r3
 800ef42:	683b      	ldr	r3, [r7, #0]
 800ef44:	fb03 f202 	mul.w	r2, r3, r2
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef4c:	4413      	add	r3, r2
}
 800ef4e:	4618      	mov	r0, r3
 800ef50:	370c      	adds	r7, #12
 800ef52:	46bd      	mov	sp, r7
 800ef54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef58:	4770      	bx	lr

0800ef5a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ef5a:	b580      	push	{r7, lr}
 800ef5c:	b086      	sub	sp, #24
 800ef5e:	af00      	add	r7, sp, #0
 800ef60:	6078      	str	r0, [r7, #4]
 800ef62:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ef6a:	683b      	ldr	r3, [r7, #0]
 800ef6c:	2b01      	cmp	r3, #1
 800ef6e:	d904      	bls.n	800ef7a <get_fat+0x20>
 800ef70:	693b      	ldr	r3, [r7, #16]
 800ef72:	6a1b      	ldr	r3, [r3, #32]
 800ef74:	683a      	ldr	r2, [r7, #0]
 800ef76:	429a      	cmp	r2, r3
 800ef78:	d302      	bcc.n	800ef80 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ef7a:	2301      	movs	r3, #1
 800ef7c:	617b      	str	r3, [r7, #20]
 800ef7e:	e0ba      	b.n	800f0f6 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ef80:	f04f 33ff 	mov.w	r3, #4294967295
 800ef84:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ef86:	693b      	ldr	r3, [r7, #16]
 800ef88:	781b      	ldrb	r3, [r3, #0]
 800ef8a:	2b03      	cmp	r3, #3
 800ef8c:	f000 8082 	beq.w	800f094 <get_fat+0x13a>
 800ef90:	2b03      	cmp	r3, #3
 800ef92:	f300 80a6 	bgt.w	800f0e2 <get_fat+0x188>
 800ef96:	2b01      	cmp	r3, #1
 800ef98:	d002      	beq.n	800efa0 <get_fat+0x46>
 800ef9a:	2b02      	cmp	r3, #2
 800ef9c:	d055      	beq.n	800f04a <get_fat+0xf0>
 800ef9e:	e0a0      	b.n	800f0e2 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	60fb      	str	r3, [r7, #12]
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	085b      	lsrs	r3, r3, #1
 800efa8:	68fa      	ldr	r2, [r7, #12]
 800efaa:	4413      	add	r3, r2
 800efac:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800efae:	693b      	ldr	r3, [r7, #16]
 800efb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efb2:	693b      	ldr	r3, [r7, #16]
 800efb4:	899b      	ldrh	r3, [r3, #12]
 800efb6:	4619      	mov	r1, r3
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	fbb3 f3f1 	udiv	r3, r3, r1
 800efbe:	4413      	add	r3, r2
 800efc0:	4619      	mov	r1, r3
 800efc2:	6938      	ldr	r0, [r7, #16]
 800efc4:	f7ff ff0c 	bl	800ede0 <move_window>
 800efc8:	4603      	mov	r3, r0
 800efca:	2b00      	cmp	r3, #0
 800efcc:	f040 808c 	bne.w	800f0e8 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	1c5a      	adds	r2, r3, #1
 800efd4:	60fa      	str	r2, [r7, #12]
 800efd6:	693a      	ldr	r2, [r7, #16]
 800efd8:	8992      	ldrh	r2, [r2, #12]
 800efda:	fbb3 f1f2 	udiv	r1, r3, r2
 800efde:	fb01 f202 	mul.w	r2, r1, r2
 800efe2:	1a9b      	subs	r3, r3, r2
 800efe4:	693a      	ldr	r2, [r7, #16]
 800efe6:	4413      	add	r3, r2
 800efe8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800efec:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800efee:	693b      	ldr	r3, [r7, #16]
 800eff0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eff2:	693b      	ldr	r3, [r7, #16]
 800eff4:	899b      	ldrh	r3, [r3, #12]
 800eff6:	4619      	mov	r1, r3
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	fbb3 f3f1 	udiv	r3, r3, r1
 800effe:	4413      	add	r3, r2
 800f000:	4619      	mov	r1, r3
 800f002:	6938      	ldr	r0, [r7, #16]
 800f004:	f7ff feec 	bl	800ede0 <move_window>
 800f008:	4603      	mov	r3, r0
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d16e      	bne.n	800f0ec <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f00e:	693b      	ldr	r3, [r7, #16]
 800f010:	899b      	ldrh	r3, [r3, #12]
 800f012:	461a      	mov	r2, r3
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	fbb3 f1f2 	udiv	r1, r3, r2
 800f01a:	fb01 f202 	mul.w	r2, r1, r2
 800f01e:	1a9b      	subs	r3, r3, r2
 800f020:	693a      	ldr	r2, [r7, #16]
 800f022:	4413      	add	r3, r2
 800f024:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f028:	021b      	lsls	r3, r3, #8
 800f02a:	68ba      	ldr	r2, [r7, #8]
 800f02c:	4313      	orrs	r3, r2
 800f02e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f030:	683b      	ldr	r3, [r7, #0]
 800f032:	f003 0301 	and.w	r3, r3, #1
 800f036:	2b00      	cmp	r3, #0
 800f038:	d002      	beq.n	800f040 <get_fat+0xe6>
 800f03a:	68bb      	ldr	r3, [r7, #8]
 800f03c:	091b      	lsrs	r3, r3, #4
 800f03e:	e002      	b.n	800f046 <get_fat+0xec>
 800f040:	68bb      	ldr	r3, [r7, #8]
 800f042:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f046:	617b      	str	r3, [r7, #20]
			break;
 800f048:	e055      	b.n	800f0f6 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f04a:	693b      	ldr	r3, [r7, #16]
 800f04c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f04e:	693b      	ldr	r3, [r7, #16]
 800f050:	899b      	ldrh	r3, [r3, #12]
 800f052:	085b      	lsrs	r3, r3, #1
 800f054:	b29b      	uxth	r3, r3
 800f056:	4619      	mov	r1, r3
 800f058:	683b      	ldr	r3, [r7, #0]
 800f05a:	fbb3 f3f1 	udiv	r3, r3, r1
 800f05e:	4413      	add	r3, r2
 800f060:	4619      	mov	r1, r3
 800f062:	6938      	ldr	r0, [r7, #16]
 800f064:	f7ff febc 	bl	800ede0 <move_window>
 800f068:	4603      	mov	r3, r0
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d140      	bne.n	800f0f0 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f06e:	693b      	ldr	r3, [r7, #16]
 800f070:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f074:	683b      	ldr	r3, [r7, #0]
 800f076:	005b      	lsls	r3, r3, #1
 800f078:	693a      	ldr	r2, [r7, #16]
 800f07a:	8992      	ldrh	r2, [r2, #12]
 800f07c:	fbb3 f0f2 	udiv	r0, r3, r2
 800f080:	fb00 f202 	mul.w	r2, r0, r2
 800f084:	1a9b      	subs	r3, r3, r2
 800f086:	440b      	add	r3, r1
 800f088:	4618      	mov	r0, r3
 800f08a:	f7ff fbf9 	bl	800e880 <ld_word>
 800f08e:	4603      	mov	r3, r0
 800f090:	617b      	str	r3, [r7, #20]
			break;
 800f092:	e030      	b.n	800f0f6 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f094:	693b      	ldr	r3, [r7, #16]
 800f096:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f098:	693b      	ldr	r3, [r7, #16]
 800f09a:	899b      	ldrh	r3, [r3, #12]
 800f09c:	089b      	lsrs	r3, r3, #2
 800f09e:	b29b      	uxth	r3, r3
 800f0a0:	4619      	mov	r1, r3
 800f0a2:	683b      	ldr	r3, [r7, #0]
 800f0a4:	fbb3 f3f1 	udiv	r3, r3, r1
 800f0a8:	4413      	add	r3, r2
 800f0aa:	4619      	mov	r1, r3
 800f0ac:	6938      	ldr	r0, [r7, #16]
 800f0ae:	f7ff fe97 	bl	800ede0 <move_window>
 800f0b2:	4603      	mov	r3, r0
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d11d      	bne.n	800f0f4 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f0b8:	693b      	ldr	r3, [r7, #16]
 800f0ba:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f0be:	683b      	ldr	r3, [r7, #0]
 800f0c0:	009b      	lsls	r3, r3, #2
 800f0c2:	693a      	ldr	r2, [r7, #16]
 800f0c4:	8992      	ldrh	r2, [r2, #12]
 800f0c6:	fbb3 f0f2 	udiv	r0, r3, r2
 800f0ca:	fb00 f202 	mul.w	r2, r0, r2
 800f0ce:	1a9b      	subs	r3, r3, r2
 800f0d0:	440b      	add	r3, r1
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	f7ff fbec 	bl	800e8b0 <ld_dword>
 800f0d8:	4603      	mov	r3, r0
 800f0da:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800f0de:	617b      	str	r3, [r7, #20]
			break;
 800f0e0:	e009      	b.n	800f0f6 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f0e2:	2301      	movs	r3, #1
 800f0e4:	617b      	str	r3, [r7, #20]
 800f0e6:	e006      	b.n	800f0f6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f0e8:	bf00      	nop
 800f0ea:	e004      	b.n	800f0f6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f0ec:	bf00      	nop
 800f0ee:	e002      	b.n	800f0f6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f0f0:	bf00      	nop
 800f0f2:	e000      	b.n	800f0f6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f0f4:	bf00      	nop
		}
	}

	return val;
 800f0f6:	697b      	ldr	r3, [r7, #20]
}
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	3718      	adds	r7, #24
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	bd80      	pop	{r7, pc}

0800f100 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f100:	b590      	push	{r4, r7, lr}
 800f102:	b089      	sub	sp, #36	@ 0x24
 800f104:	af00      	add	r7, sp, #0
 800f106:	60f8      	str	r0, [r7, #12]
 800f108:	60b9      	str	r1, [r7, #8]
 800f10a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f10c:	2302      	movs	r3, #2
 800f10e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f110:	68bb      	ldr	r3, [r7, #8]
 800f112:	2b01      	cmp	r3, #1
 800f114:	f240 8109 	bls.w	800f32a <put_fat+0x22a>
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	6a1b      	ldr	r3, [r3, #32]
 800f11c:	68ba      	ldr	r2, [r7, #8]
 800f11e:	429a      	cmp	r2, r3
 800f120:	f080 8103 	bcs.w	800f32a <put_fat+0x22a>
		switch (fs->fs_type) {
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	781b      	ldrb	r3, [r3, #0]
 800f128:	2b03      	cmp	r3, #3
 800f12a:	f000 80b6 	beq.w	800f29a <put_fat+0x19a>
 800f12e:	2b03      	cmp	r3, #3
 800f130:	f300 80fb 	bgt.w	800f32a <put_fat+0x22a>
 800f134:	2b01      	cmp	r3, #1
 800f136:	d003      	beq.n	800f140 <put_fat+0x40>
 800f138:	2b02      	cmp	r3, #2
 800f13a:	f000 8083 	beq.w	800f244 <put_fat+0x144>
 800f13e:	e0f4      	b.n	800f32a <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f140:	68bb      	ldr	r3, [r7, #8]
 800f142:	61bb      	str	r3, [r7, #24]
 800f144:	69bb      	ldr	r3, [r7, #24]
 800f146:	085b      	lsrs	r3, r3, #1
 800f148:	69ba      	ldr	r2, [r7, #24]
 800f14a:	4413      	add	r3, r2
 800f14c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	899b      	ldrh	r3, [r3, #12]
 800f156:	4619      	mov	r1, r3
 800f158:	69bb      	ldr	r3, [r7, #24]
 800f15a:	fbb3 f3f1 	udiv	r3, r3, r1
 800f15e:	4413      	add	r3, r2
 800f160:	4619      	mov	r1, r3
 800f162:	68f8      	ldr	r0, [r7, #12]
 800f164:	f7ff fe3c 	bl	800ede0 <move_window>
 800f168:	4603      	mov	r3, r0
 800f16a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f16c:	7ffb      	ldrb	r3, [r7, #31]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	f040 80d4 	bne.w	800f31c <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f17a:	69bb      	ldr	r3, [r7, #24]
 800f17c:	1c5a      	adds	r2, r3, #1
 800f17e:	61ba      	str	r2, [r7, #24]
 800f180:	68fa      	ldr	r2, [r7, #12]
 800f182:	8992      	ldrh	r2, [r2, #12]
 800f184:	fbb3 f0f2 	udiv	r0, r3, r2
 800f188:	fb00 f202 	mul.w	r2, r0, r2
 800f18c:	1a9b      	subs	r3, r3, r2
 800f18e:	440b      	add	r3, r1
 800f190:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f192:	68bb      	ldr	r3, [r7, #8]
 800f194:	f003 0301 	and.w	r3, r3, #1
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d00d      	beq.n	800f1b8 <put_fat+0xb8>
 800f19c:	697b      	ldr	r3, [r7, #20]
 800f19e:	781b      	ldrb	r3, [r3, #0]
 800f1a0:	b25b      	sxtb	r3, r3
 800f1a2:	f003 030f 	and.w	r3, r3, #15
 800f1a6:	b25a      	sxtb	r2, r3
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	b2db      	uxtb	r3, r3
 800f1ac:	011b      	lsls	r3, r3, #4
 800f1ae:	b25b      	sxtb	r3, r3
 800f1b0:	4313      	orrs	r3, r2
 800f1b2:	b25b      	sxtb	r3, r3
 800f1b4:	b2db      	uxtb	r3, r3
 800f1b6:	e001      	b.n	800f1bc <put_fat+0xbc>
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	b2db      	uxtb	r3, r3
 800f1bc:	697a      	ldr	r2, [r7, #20]
 800f1be:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	2201      	movs	r2, #1
 800f1c4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	899b      	ldrh	r3, [r3, #12]
 800f1ce:	4619      	mov	r1, r3
 800f1d0:	69bb      	ldr	r3, [r7, #24]
 800f1d2:	fbb3 f3f1 	udiv	r3, r3, r1
 800f1d6:	4413      	add	r3, r2
 800f1d8:	4619      	mov	r1, r3
 800f1da:	68f8      	ldr	r0, [r7, #12]
 800f1dc:	f7ff fe00 	bl	800ede0 <move_window>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f1e4:	7ffb      	ldrb	r3, [r7, #31]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	f040 809a 	bne.w	800f320 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	899b      	ldrh	r3, [r3, #12]
 800f1f6:	461a      	mov	r2, r3
 800f1f8:	69bb      	ldr	r3, [r7, #24]
 800f1fa:	fbb3 f0f2 	udiv	r0, r3, r2
 800f1fe:	fb00 f202 	mul.w	r2, r0, r2
 800f202:	1a9b      	subs	r3, r3, r2
 800f204:	440b      	add	r3, r1
 800f206:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f208:	68bb      	ldr	r3, [r7, #8]
 800f20a:	f003 0301 	and.w	r3, r3, #1
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d003      	beq.n	800f21a <put_fat+0x11a>
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	091b      	lsrs	r3, r3, #4
 800f216:	b2db      	uxtb	r3, r3
 800f218:	e00e      	b.n	800f238 <put_fat+0x138>
 800f21a:	697b      	ldr	r3, [r7, #20]
 800f21c:	781b      	ldrb	r3, [r3, #0]
 800f21e:	b25b      	sxtb	r3, r3
 800f220:	f023 030f 	bic.w	r3, r3, #15
 800f224:	b25a      	sxtb	r2, r3
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	0a1b      	lsrs	r3, r3, #8
 800f22a:	b25b      	sxtb	r3, r3
 800f22c:	f003 030f 	and.w	r3, r3, #15
 800f230:	b25b      	sxtb	r3, r3
 800f232:	4313      	orrs	r3, r2
 800f234:	b25b      	sxtb	r3, r3
 800f236:	b2db      	uxtb	r3, r3
 800f238:	697a      	ldr	r2, [r7, #20]
 800f23a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	2201      	movs	r2, #1
 800f240:	70da      	strb	r2, [r3, #3]
			break;
 800f242:	e072      	b.n	800f32a <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	899b      	ldrh	r3, [r3, #12]
 800f24c:	085b      	lsrs	r3, r3, #1
 800f24e:	b29b      	uxth	r3, r3
 800f250:	4619      	mov	r1, r3
 800f252:	68bb      	ldr	r3, [r7, #8]
 800f254:	fbb3 f3f1 	udiv	r3, r3, r1
 800f258:	4413      	add	r3, r2
 800f25a:	4619      	mov	r1, r3
 800f25c:	68f8      	ldr	r0, [r7, #12]
 800f25e:	f7ff fdbf 	bl	800ede0 <move_window>
 800f262:	4603      	mov	r3, r0
 800f264:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f266:	7ffb      	ldrb	r3, [r7, #31]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d15b      	bne.n	800f324 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f272:	68bb      	ldr	r3, [r7, #8]
 800f274:	005b      	lsls	r3, r3, #1
 800f276:	68fa      	ldr	r2, [r7, #12]
 800f278:	8992      	ldrh	r2, [r2, #12]
 800f27a:	fbb3 f0f2 	udiv	r0, r3, r2
 800f27e:	fb00 f202 	mul.w	r2, r0, r2
 800f282:	1a9b      	subs	r3, r3, r2
 800f284:	440b      	add	r3, r1
 800f286:	687a      	ldr	r2, [r7, #4]
 800f288:	b292      	uxth	r2, r2
 800f28a:	4611      	mov	r1, r2
 800f28c:	4618      	mov	r0, r3
 800f28e:	f7ff fb32 	bl	800e8f6 <st_word>
			fs->wflag = 1;
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	2201      	movs	r2, #1
 800f296:	70da      	strb	r2, [r3, #3]
			break;
 800f298:	e047      	b.n	800f32a <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	899b      	ldrh	r3, [r3, #12]
 800f2a2:	089b      	lsrs	r3, r3, #2
 800f2a4:	b29b      	uxth	r3, r3
 800f2a6:	4619      	mov	r1, r3
 800f2a8:	68bb      	ldr	r3, [r7, #8]
 800f2aa:	fbb3 f3f1 	udiv	r3, r3, r1
 800f2ae:	4413      	add	r3, r2
 800f2b0:	4619      	mov	r1, r3
 800f2b2:	68f8      	ldr	r0, [r7, #12]
 800f2b4:	f7ff fd94 	bl	800ede0 <move_window>
 800f2b8:	4603      	mov	r3, r0
 800f2ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f2bc:	7ffb      	ldrb	r3, [r7, #31]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d132      	bne.n	800f328 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f2ce:	68bb      	ldr	r3, [r7, #8]
 800f2d0:	009b      	lsls	r3, r3, #2
 800f2d2:	68fa      	ldr	r2, [r7, #12]
 800f2d4:	8992      	ldrh	r2, [r2, #12]
 800f2d6:	fbb3 f0f2 	udiv	r0, r3, r2
 800f2da:	fb00 f202 	mul.w	r2, r0, r2
 800f2de:	1a9b      	subs	r3, r3, r2
 800f2e0:	440b      	add	r3, r1
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	f7ff fae4 	bl	800e8b0 <ld_dword>
 800f2e8:	4603      	mov	r3, r0
 800f2ea:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800f2ee:	4323      	orrs	r3, r4
 800f2f0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f2f8:	68bb      	ldr	r3, [r7, #8]
 800f2fa:	009b      	lsls	r3, r3, #2
 800f2fc:	68fa      	ldr	r2, [r7, #12]
 800f2fe:	8992      	ldrh	r2, [r2, #12]
 800f300:	fbb3 f0f2 	udiv	r0, r3, r2
 800f304:	fb00 f202 	mul.w	r2, r0, r2
 800f308:	1a9b      	subs	r3, r3, r2
 800f30a:	440b      	add	r3, r1
 800f30c:	6879      	ldr	r1, [r7, #4]
 800f30e:	4618      	mov	r0, r3
 800f310:	f7ff fb0c 	bl	800e92c <st_dword>
			fs->wflag = 1;
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	2201      	movs	r2, #1
 800f318:	70da      	strb	r2, [r3, #3]
			break;
 800f31a:	e006      	b.n	800f32a <put_fat+0x22a>
			if (res != FR_OK) break;
 800f31c:	bf00      	nop
 800f31e:	e004      	b.n	800f32a <put_fat+0x22a>
			if (res != FR_OK) break;
 800f320:	bf00      	nop
 800f322:	e002      	b.n	800f32a <put_fat+0x22a>
			if (res != FR_OK) break;
 800f324:	bf00      	nop
 800f326:	e000      	b.n	800f32a <put_fat+0x22a>
			if (res != FR_OK) break;
 800f328:	bf00      	nop
		}
	}
	return res;
 800f32a:	7ffb      	ldrb	r3, [r7, #31]
}
 800f32c:	4618      	mov	r0, r3
 800f32e:	3724      	adds	r7, #36	@ 0x24
 800f330:	46bd      	mov	sp, r7
 800f332:	bd90      	pop	{r4, r7, pc}

0800f334 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b088      	sub	sp, #32
 800f338:	af00      	add	r7, sp, #0
 800f33a:	60f8      	str	r0, [r7, #12]
 800f33c:	60b9      	str	r1, [r7, #8]
 800f33e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f340:	2300      	movs	r3, #0
 800f342:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f34a:	68bb      	ldr	r3, [r7, #8]
 800f34c:	2b01      	cmp	r3, #1
 800f34e:	d904      	bls.n	800f35a <remove_chain+0x26>
 800f350:	69bb      	ldr	r3, [r7, #24]
 800f352:	6a1b      	ldr	r3, [r3, #32]
 800f354:	68ba      	ldr	r2, [r7, #8]
 800f356:	429a      	cmp	r2, r3
 800f358:	d301      	bcc.n	800f35e <remove_chain+0x2a>
 800f35a:	2302      	movs	r3, #2
 800f35c:	e04b      	b.n	800f3f6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d00c      	beq.n	800f37e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f364:	f04f 32ff 	mov.w	r2, #4294967295
 800f368:	6879      	ldr	r1, [r7, #4]
 800f36a:	69b8      	ldr	r0, [r7, #24]
 800f36c:	f7ff fec8 	bl	800f100 <put_fat>
 800f370:	4603      	mov	r3, r0
 800f372:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f374:	7ffb      	ldrb	r3, [r7, #31]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d001      	beq.n	800f37e <remove_chain+0x4a>
 800f37a:	7ffb      	ldrb	r3, [r7, #31]
 800f37c:	e03b      	b.n	800f3f6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f37e:	68b9      	ldr	r1, [r7, #8]
 800f380:	68f8      	ldr	r0, [r7, #12]
 800f382:	f7ff fdea 	bl	800ef5a <get_fat>
 800f386:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f388:	697b      	ldr	r3, [r7, #20]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d031      	beq.n	800f3f2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f38e:	697b      	ldr	r3, [r7, #20]
 800f390:	2b01      	cmp	r3, #1
 800f392:	d101      	bne.n	800f398 <remove_chain+0x64>
 800f394:	2302      	movs	r3, #2
 800f396:	e02e      	b.n	800f3f6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f398:	697b      	ldr	r3, [r7, #20]
 800f39a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f39e:	d101      	bne.n	800f3a4 <remove_chain+0x70>
 800f3a0:	2301      	movs	r3, #1
 800f3a2:	e028      	b.n	800f3f6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f3a4:	2200      	movs	r2, #0
 800f3a6:	68b9      	ldr	r1, [r7, #8]
 800f3a8:	69b8      	ldr	r0, [r7, #24]
 800f3aa:	f7ff fea9 	bl	800f100 <put_fat>
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f3b2:	7ffb      	ldrb	r3, [r7, #31]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d001      	beq.n	800f3bc <remove_chain+0x88>
 800f3b8:	7ffb      	ldrb	r3, [r7, #31]
 800f3ba:	e01c      	b.n	800f3f6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f3bc:	69bb      	ldr	r3, [r7, #24]
 800f3be:	699a      	ldr	r2, [r3, #24]
 800f3c0:	69bb      	ldr	r3, [r7, #24]
 800f3c2:	6a1b      	ldr	r3, [r3, #32]
 800f3c4:	3b02      	subs	r3, #2
 800f3c6:	429a      	cmp	r2, r3
 800f3c8:	d20b      	bcs.n	800f3e2 <remove_chain+0xae>
			fs->free_clst++;
 800f3ca:	69bb      	ldr	r3, [r7, #24]
 800f3cc:	699b      	ldr	r3, [r3, #24]
 800f3ce:	1c5a      	adds	r2, r3, #1
 800f3d0:	69bb      	ldr	r3, [r7, #24]
 800f3d2:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800f3d4:	69bb      	ldr	r3, [r7, #24]
 800f3d6:	791b      	ldrb	r3, [r3, #4]
 800f3d8:	f043 0301 	orr.w	r3, r3, #1
 800f3dc:	b2da      	uxtb	r2, r3
 800f3de:	69bb      	ldr	r3, [r7, #24]
 800f3e0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f3e2:	697b      	ldr	r3, [r7, #20]
 800f3e4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f3e6:	69bb      	ldr	r3, [r7, #24]
 800f3e8:	6a1b      	ldr	r3, [r3, #32]
 800f3ea:	68ba      	ldr	r2, [r7, #8]
 800f3ec:	429a      	cmp	r2, r3
 800f3ee:	d3c6      	bcc.n	800f37e <remove_chain+0x4a>
 800f3f0:	e000      	b.n	800f3f4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f3f2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f3f4:	2300      	movs	r3, #0
}
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	3720      	adds	r7, #32
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	bd80      	pop	{r7, pc}

0800f3fe <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f3fe:	b580      	push	{r7, lr}
 800f400:	b088      	sub	sp, #32
 800f402:	af00      	add	r7, sp, #0
 800f404:	6078      	str	r0, [r7, #4]
 800f406:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f40e:	683b      	ldr	r3, [r7, #0]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d10d      	bne.n	800f430 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f414:	693b      	ldr	r3, [r7, #16]
 800f416:	695b      	ldr	r3, [r3, #20]
 800f418:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f41a:	69bb      	ldr	r3, [r7, #24]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d004      	beq.n	800f42a <create_chain+0x2c>
 800f420:	693b      	ldr	r3, [r7, #16]
 800f422:	6a1b      	ldr	r3, [r3, #32]
 800f424:	69ba      	ldr	r2, [r7, #24]
 800f426:	429a      	cmp	r2, r3
 800f428:	d31b      	bcc.n	800f462 <create_chain+0x64>
 800f42a:	2301      	movs	r3, #1
 800f42c:	61bb      	str	r3, [r7, #24]
 800f42e:	e018      	b.n	800f462 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f430:	6839      	ldr	r1, [r7, #0]
 800f432:	6878      	ldr	r0, [r7, #4]
 800f434:	f7ff fd91 	bl	800ef5a <get_fat>
 800f438:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	2b01      	cmp	r3, #1
 800f43e:	d801      	bhi.n	800f444 <create_chain+0x46>
 800f440:	2301      	movs	r3, #1
 800f442:	e070      	b.n	800f526 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f44a:	d101      	bne.n	800f450 <create_chain+0x52>
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	e06a      	b.n	800f526 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f450:	693b      	ldr	r3, [r7, #16]
 800f452:	6a1b      	ldr	r3, [r3, #32]
 800f454:	68fa      	ldr	r2, [r7, #12]
 800f456:	429a      	cmp	r2, r3
 800f458:	d201      	bcs.n	800f45e <create_chain+0x60>
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	e063      	b.n	800f526 <create_chain+0x128>
		scl = clst;
 800f45e:	683b      	ldr	r3, [r7, #0]
 800f460:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f462:	69bb      	ldr	r3, [r7, #24]
 800f464:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f466:	69fb      	ldr	r3, [r7, #28]
 800f468:	3301      	adds	r3, #1
 800f46a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f46c:	693b      	ldr	r3, [r7, #16]
 800f46e:	6a1b      	ldr	r3, [r3, #32]
 800f470:	69fa      	ldr	r2, [r7, #28]
 800f472:	429a      	cmp	r2, r3
 800f474:	d307      	bcc.n	800f486 <create_chain+0x88>
				ncl = 2;
 800f476:	2302      	movs	r3, #2
 800f478:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f47a:	69fa      	ldr	r2, [r7, #28]
 800f47c:	69bb      	ldr	r3, [r7, #24]
 800f47e:	429a      	cmp	r2, r3
 800f480:	d901      	bls.n	800f486 <create_chain+0x88>
 800f482:	2300      	movs	r3, #0
 800f484:	e04f      	b.n	800f526 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f486:	69f9      	ldr	r1, [r7, #28]
 800f488:	6878      	ldr	r0, [r7, #4]
 800f48a:	f7ff fd66 	bl	800ef5a <get_fat>
 800f48e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d00e      	beq.n	800f4b4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	2b01      	cmp	r3, #1
 800f49a:	d003      	beq.n	800f4a4 <create_chain+0xa6>
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4a2:	d101      	bne.n	800f4a8 <create_chain+0xaa>
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	e03e      	b.n	800f526 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f4a8:	69fa      	ldr	r2, [r7, #28]
 800f4aa:	69bb      	ldr	r3, [r7, #24]
 800f4ac:	429a      	cmp	r2, r3
 800f4ae:	d1da      	bne.n	800f466 <create_chain+0x68>
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	e038      	b.n	800f526 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f4b4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f4b6:	f04f 32ff 	mov.w	r2, #4294967295
 800f4ba:	69f9      	ldr	r1, [r7, #28]
 800f4bc:	6938      	ldr	r0, [r7, #16]
 800f4be:	f7ff fe1f 	bl	800f100 <put_fat>
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f4c6:	7dfb      	ldrb	r3, [r7, #23]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d109      	bne.n	800f4e0 <create_chain+0xe2>
 800f4cc:	683b      	ldr	r3, [r7, #0]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d006      	beq.n	800f4e0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f4d2:	69fa      	ldr	r2, [r7, #28]
 800f4d4:	6839      	ldr	r1, [r7, #0]
 800f4d6:	6938      	ldr	r0, [r7, #16]
 800f4d8:	f7ff fe12 	bl	800f100 <put_fat>
 800f4dc:	4603      	mov	r3, r0
 800f4de:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f4e0:	7dfb      	ldrb	r3, [r7, #23]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d116      	bne.n	800f514 <create_chain+0x116>
		fs->last_clst = ncl;
 800f4e6:	693b      	ldr	r3, [r7, #16]
 800f4e8:	69fa      	ldr	r2, [r7, #28]
 800f4ea:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f4ec:	693b      	ldr	r3, [r7, #16]
 800f4ee:	699a      	ldr	r2, [r3, #24]
 800f4f0:	693b      	ldr	r3, [r7, #16]
 800f4f2:	6a1b      	ldr	r3, [r3, #32]
 800f4f4:	3b02      	subs	r3, #2
 800f4f6:	429a      	cmp	r2, r3
 800f4f8:	d804      	bhi.n	800f504 <create_chain+0x106>
 800f4fa:	693b      	ldr	r3, [r7, #16]
 800f4fc:	699b      	ldr	r3, [r3, #24]
 800f4fe:	1e5a      	subs	r2, r3, #1
 800f500:	693b      	ldr	r3, [r7, #16]
 800f502:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800f504:	693b      	ldr	r3, [r7, #16]
 800f506:	791b      	ldrb	r3, [r3, #4]
 800f508:	f043 0301 	orr.w	r3, r3, #1
 800f50c:	b2da      	uxtb	r2, r3
 800f50e:	693b      	ldr	r3, [r7, #16]
 800f510:	711a      	strb	r2, [r3, #4]
 800f512:	e007      	b.n	800f524 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f514:	7dfb      	ldrb	r3, [r7, #23]
 800f516:	2b01      	cmp	r3, #1
 800f518:	d102      	bne.n	800f520 <create_chain+0x122>
 800f51a:	f04f 33ff 	mov.w	r3, #4294967295
 800f51e:	e000      	b.n	800f522 <create_chain+0x124>
 800f520:	2301      	movs	r3, #1
 800f522:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f524:	69fb      	ldr	r3, [r7, #28]
}
 800f526:	4618      	mov	r0, r3
 800f528:	3720      	adds	r7, #32
 800f52a:	46bd      	mov	sp, r7
 800f52c:	bd80      	pop	{r7, pc}

0800f52e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f52e:	b480      	push	{r7}
 800f530:	b087      	sub	sp, #28
 800f532:	af00      	add	r7, sp, #0
 800f534:	6078      	str	r0, [r7, #4]
 800f536:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f542:	3304      	adds	r3, #4
 800f544:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	899b      	ldrh	r3, [r3, #12]
 800f54a:	461a      	mov	r2, r3
 800f54c:	683b      	ldr	r3, [r7, #0]
 800f54e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f552:	68fa      	ldr	r2, [r7, #12]
 800f554:	8952      	ldrh	r2, [r2, #10]
 800f556:	fbb3 f3f2 	udiv	r3, r3, r2
 800f55a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f55c:	693b      	ldr	r3, [r7, #16]
 800f55e:	1d1a      	adds	r2, r3, #4
 800f560:	613a      	str	r2, [r7, #16]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f566:	68bb      	ldr	r3, [r7, #8]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d101      	bne.n	800f570 <clmt_clust+0x42>
 800f56c:	2300      	movs	r3, #0
 800f56e:	e010      	b.n	800f592 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800f570:	697a      	ldr	r2, [r7, #20]
 800f572:	68bb      	ldr	r3, [r7, #8]
 800f574:	429a      	cmp	r2, r3
 800f576:	d307      	bcc.n	800f588 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800f578:	697a      	ldr	r2, [r7, #20]
 800f57a:	68bb      	ldr	r3, [r7, #8]
 800f57c:	1ad3      	subs	r3, r2, r3
 800f57e:	617b      	str	r3, [r7, #20]
 800f580:	693b      	ldr	r3, [r7, #16]
 800f582:	3304      	adds	r3, #4
 800f584:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f586:	e7e9      	b.n	800f55c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800f588:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f58a:	693b      	ldr	r3, [r7, #16]
 800f58c:	681a      	ldr	r2, [r3, #0]
 800f58e:	697b      	ldr	r3, [r7, #20]
 800f590:	4413      	add	r3, r2
}
 800f592:	4618      	mov	r0, r3
 800f594:	371c      	adds	r7, #28
 800f596:	46bd      	mov	sp, r7
 800f598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59c:	4770      	bx	lr

0800f59e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f59e:	b580      	push	{r7, lr}
 800f5a0:	b086      	sub	sp, #24
 800f5a2:	af00      	add	r7, sp, #0
 800f5a4:	6078      	str	r0, [r7, #4]
 800f5a6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f5b4:	d204      	bcs.n	800f5c0 <dir_sdi+0x22>
 800f5b6:	683b      	ldr	r3, [r7, #0]
 800f5b8:	f003 031f 	and.w	r3, r3, #31
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d001      	beq.n	800f5c4 <dir_sdi+0x26>
		return FR_INT_ERR;
 800f5c0:	2302      	movs	r3, #2
 800f5c2:	e071      	b.n	800f6a8 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	683a      	ldr	r2, [r7, #0]
 800f5c8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	689b      	ldr	r3, [r3, #8]
 800f5ce:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f5d0:	697b      	ldr	r3, [r7, #20]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d106      	bne.n	800f5e4 <dir_sdi+0x46>
 800f5d6:	693b      	ldr	r3, [r7, #16]
 800f5d8:	781b      	ldrb	r3, [r3, #0]
 800f5da:	2b02      	cmp	r3, #2
 800f5dc:	d902      	bls.n	800f5e4 <dir_sdi+0x46>
		clst = fs->dirbase;
 800f5de:	693b      	ldr	r3, [r7, #16]
 800f5e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f5e2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f5e4:	697b      	ldr	r3, [r7, #20]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d10c      	bne.n	800f604 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f5ea:	683b      	ldr	r3, [r7, #0]
 800f5ec:	095b      	lsrs	r3, r3, #5
 800f5ee:	693a      	ldr	r2, [r7, #16]
 800f5f0:	8912      	ldrh	r2, [r2, #8]
 800f5f2:	4293      	cmp	r3, r2
 800f5f4:	d301      	bcc.n	800f5fa <dir_sdi+0x5c>
 800f5f6:	2302      	movs	r3, #2
 800f5f8:	e056      	b.n	800f6a8 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800f5fa:	693b      	ldr	r3, [r7, #16]
 800f5fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	61da      	str	r2, [r3, #28]
 800f602:	e02d      	b.n	800f660 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f604:	693b      	ldr	r3, [r7, #16]
 800f606:	895b      	ldrh	r3, [r3, #10]
 800f608:	461a      	mov	r2, r3
 800f60a:	693b      	ldr	r3, [r7, #16]
 800f60c:	899b      	ldrh	r3, [r3, #12]
 800f60e:	fb02 f303 	mul.w	r3, r2, r3
 800f612:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f614:	e019      	b.n	800f64a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	6979      	ldr	r1, [r7, #20]
 800f61a:	4618      	mov	r0, r3
 800f61c:	f7ff fc9d 	bl	800ef5a <get_fat>
 800f620:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f622:	697b      	ldr	r3, [r7, #20]
 800f624:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f628:	d101      	bne.n	800f62e <dir_sdi+0x90>
 800f62a:	2301      	movs	r3, #1
 800f62c:	e03c      	b.n	800f6a8 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f62e:	697b      	ldr	r3, [r7, #20]
 800f630:	2b01      	cmp	r3, #1
 800f632:	d904      	bls.n	800f63e <dir_sdi+0xa0>
 800f634:	693b      	ldr	r3, [r7, #16]
 800f636:	6a1b      	ldr	r3, [r3, #32]
 800f638:	697a      	ldr	r2, [r7, #20]
 800f63a:	429a      	cmp	r2, r3
 800f63c:	d301      	bcc.n	800f642 <dir_sdi+0xa4>
 800f63e:	2302      	movs	r3, #2
 800f640:	e032      	b.n	800f6a8 <dir_sdi+0x10a>
			ofs -= csz;
 800f642:	683a      	ldr	r2, [r7, #0]
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	1ad3      	subs	r3, r2, r3
 800f648:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f64a:	683a      	ldr	r2, [r7, #0]
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	429a      	cmp	r2, r3
 800f650:	d2e1      	bcs.n	800f616 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800f652:	6979      	ldr	r1, [r7, #20]
 800f654:	6938      	ldr	r0, [r7, #16]
 800f656:	f7ff fc61 	bl	800ef1c <clust2sect>
 800f65a:	4602      	mov	r2, r0
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	697a      	ldr	r2, [r7, #20]
 800f664:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	69db      	ldr	r3, [r3, #28]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d101      	bne.n	800f672 <dir_sdi+0xd4>
 800f66e:	2302      	movs	r3, #2
 800f670:	e01a      	b.n	800f6a8 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	69da      	ldr	r2, [r3, #28]
 800f676:	693b      	ldr	r3, [r7, #16]
 800f678:	899b      	ldrh	r3, [r3, #12]
 800f67a:	4619      	mov	r1, r3
 800f67c:	683b      	ldr	r3, [r7, #0]
 800f67e:	fbb3 f3f1 	udiv	r3, r3, r1
 800f682:	441a      	add	r2, r3
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f688:	693b      	ldr	r3, [r7, #16]
 800f68a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f68e:	693b      	ldr	r3, [r7, #16]
 800f690:	899b      	ldrh	r3, [r3, #12]
 800f692:	461a      	mov	r2, r3
 800f694:	683b      	ldr	r3, [r7, #0]
 800f696:	fbb3 f0f2 	udiv	r0, r3, r2
 800f69a:	fb00 f202 	mul.w	r2, r0, r2
 800f69e:	1a9b      	subs	r3, r3, r2
 800f6a0:	18ca      	adds	r2, r1, r3
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f6a6:	2300      	movs	r3, #0
}
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	3718      	adds	r7, #24
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	bd80      	pop	{r7, pc}

0800f6b0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	b086      	sub	sp, #24
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	6078      	str	r0, [r7, #4]
 800f6b8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	695b      	ldr	r3, [r3, #20]
 800f6c4:	3320      	adds	r3, #32
 800f6c6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	69db      	ldr	r3, [r3, #28]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d003      	beq.n	800f6d8 <dir_next+0x28>
 800f6d0:	68bb      	ldr	r3, [r7, #8]
 800f6d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f6d6:	d301      	bcc.n	800f6dc <dir_next+0x2c>
 800f6d8:	2304      	movs	r3, #4
 800f6da:	e0bb      	b.n	800f854 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	899b      	ldrh	r3, [r3, #12]
 800f6e0:	461a      	mov	r2, r3
 800f6e2:	68bb      	ldr	r3, [r7, #8]
 800f6e4:	fbb3 f1f2 	udiv	r1, r3, r2
 800f6e8:	fb01 f202 	mul.w	r2, r1, r2
 800f6ec:	1a9b      	subs	r3, r3, r2
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	f040 809d 	bne.w	800f82e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	69db      	ldr	r3, [r3, #28]
 800f6f8:	1c5a      	adds	r2, r3, #1
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	699b      	ldr	r3, [r3, #24]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d10b      	bne.n	800f71e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f706:	68bb      	ldr	r3, [r7, #8]
 800f708:	095b      	lsrs	r3, r3, #5
 800f70a:	68fa      	ldr	r2, [r7, #12]
 800f70c:	8912      	ldrh	r2, [r2, #8]
 800f70e:	4293      	cmp	r3, r2
 800f710:	f0c0 808d 	bcc.w	800f82e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	2200      	movs	r2, #0
 800f718:	61da      	str	r2, [r3, #28]
 800f71a:	2304      	movs	r3, #4
 800f71c:	e09a      	b.n	800f854 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	899b      	ldrh	r3, [r3, #12]
 800f722:	461a      	mov	r2, r3
 800f724:	68bb      	ldr	r3, [r7, #8]
 800f726:	fbb3 f3f2 	udiv	r3, r3, r2
 800f72a:	68fa      	ldr	r2, [r7, #12]
 800f72c:	8952      	ldrh	r2, [r2, #10]
 800f72e:	3a01      	subs	r2, #1
 800f730:	4013      	ands	r3, r2
 800f732:	2b00      	cmp	r3, #0
 800f734:	d17b      	bne.n	800f82e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f736:	687a      	ldr	r2, [r7, #4]
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	699b      	ldr	r3, [r3, #24]
 800f73c:	4619      	mov	r1, r3
 800f73e:	4610      	mov	r0, r2
 800f740:	f7ff fc0b 	bl	800ef5a <get_fat>
 800f744:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f746:	697b      	ldr	r3, [r7, #20]
 800f748:	2b01      	cmp	r3, #1
 800f74a:	d801      	bhi.n	800f750 <dir_next+0xa0>
 800f74c:	2302      	movs	r3, #2
 800f74e:	e081      	b.n	800f854 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f750:	697b      	ldr	r3, [r7, #20]
 800f752:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f756:	d101      	bne.n	800f75c <dir_next+0xac>
 800f758:	2301      	movs	r3, #1
 800f75a:	e07b      	b.n	800f854 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	6a1b      	ldr	r3, [r3, #32]
 800f760:	697a      	ldr	r2, [r7, #20]
 800f762:	429a      	cmp	r2, r3
 800f764:	d359      	bcc.n	800f81a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f766:	683b      	ldr	r3, [r7, #0]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d104      	bne.n	800f776 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	2200      	movs	r2, #0
 800f770:	61da      	str	r2, [r3, #28]
 800f772:	2304      	movs	r3, #4
 800f774:	e06e      	b.n	800f854 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f776:	687a      	ldr	r2, [r7, #4]
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	699b      	ldr	r3, [r3, #24]
 800f77c:	4619      	mov	r1, r3
 800f77e:	4610      	mov	r0, r2
 800f780:	f7ff fe3d 	bl	800f3fe <create_chain>
 800f784:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f786:	697b      	ldr	r3, [r7, #20]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d101      	bne.n	800f790 <dir_next+0xe0>
 800f78c:	2307      	movs	r3, #7
 800f78e:	e061      	b.n	800f854 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f790:	697b      	ldr	r3, [r7, #20]
 800f792:	2b01      	cmp	r3, #1
 800f794:	d101      	bne.n	800f79a <dir_next+0xea>
 800f796:	2302      	movs	r3, #2
 800f798:	e05c      	b.n	800f854 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f79a:	697b      	ldr	r3, [r7, #20]
 800f79c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7a0:	d101      	bne.n	800f7a6 <dir_next+0xf6>
 800f7a2:	2301      	movs	r3, #1
 800f7a4:	e056      	b.n	800f854 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f7a6:	68f8      	ldr	r0, [r7, #12]
 800f7a8:	f7ff fad6 	bl	800ed58 <sync_window>
 800f7ac:	4603      	mov	r3, r0
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d001      	beq.n	800f7b6 <dir_next+0x106>
 800f7b2:	2301      	movs	r3, #1
 800f7b4:	e04e      	b.n	800f854 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	899b      	ldrh	r3, [r3, #12]
 800f7c0:	461a      	mov	r2, r3
 800f7c2:	2100      	movs	r1, #0
 800f7c4:	f7ff f8ff 	bl	800e9c6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	613b      	str	r3, [r7, #16]
 800f7cc:	6979      	ldr	r1, [r7, #20]
 800f7ce:	68f8      	ldr	r0, [r7, #12]
 800f7d0:	f7ff fba4 	bl	800ef1c <clust2sect>
 800f7d4:	4602      	mov	r2, r0
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	639a      	str	r2, [r3, #56]	@ 0x38
 800f7da:	e012      	b.n	800f802 <dir_next+0x152>
						fs->wflag = 1;
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	2201      	movs	r2, #1
 800f7e0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f7e2:	68f8      	ldr	r0, [r7, #12]
 800f7e4:	f7ff fab8 	bl	800ed58 <sync_window>
 800f7e8:	4603      	mov	r3, r0
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d001      	beq.n	800f7f2 <dir_next+0x142>
 800f7ee:	2301      	movs	r3, #1
 800f7f0:	e030      	b.n	800f854 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f7f2:	693b      	ldr	r3, [r7, #16]
 800f7f4:	3301      	adds	r3, #1
 800f7f6:	613b      	str	r3, [r7, #16]
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7fc:	1c5a      	adds	r2, r3, #1
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	639a      	str	r2, [r3, #56]	@ 0x38
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	895b      	ldrh	r3, [r3, #10]
 800f806:	461a      	mov	r2, r3
 800f808:	693b      	ldr	r3, [r7, #16]
 800f80a:	4293      	cmp	r3, r2
 800f80c:	d3e6      	bcc.n	800f7dc <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f812:	693b      	ldr	r3, [r7, #16]
 800f814:	1ad2      	subs	r2, r2, r3
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	639a      	str	r2, [r3, #56]	@ 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	697a      	ldr	r2, [r7, #20]
 800f81e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f820:	6979      	ldr	r1, [r7, #20]
 800f822:	68f8      	ldr	r0, [r7, #12]
 800f824:	f7ff fb7a 	bl	800ef1c <clust2sect>
 800f828:	4602      	mov	r2, r0
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	68ba      	ldr	r2, [r7, #8]
 800f832:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	899b      	ldrh	r3, [r3, #12]
 800f83e:	461a      	mov	r2, r3
 800f840:	68bb      	ldr	r3, [r7, #8]
 800f842:	fbb3 f0f2 	udiv	r0, r3, r2
 800f846:	fb00 f202 	mul.w	r2, r0, r2
 800f84a:	1a9b      	subs	r3, r3, r2
 800f84c:	18ca      	adds	r2, r1, r3
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f852:	2300      	movs	r3, #0
}
 800f854:	4618      	mov	r0, r3
 800f856:	3718      	adds	r7, #24
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd80      	pop	{r7, pc}

0800f85c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b086      	sub	sp, #24
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
 800f864:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f86c:	2100      	movs	r1, #0
 800f86e:	6878      	ldr	r0, [r7, #4]
 800f870:	f7ff fe95 	bl	800f59e <dir_sdi>
 800f874:	4603      	mov	r3, r0
 800f876:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f878:	7dfb      	ldrb	r3, [r7, #23]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d12b      	bne.n	800f8d6 <dir_alloc+0x7a>
		n = 0;
 800f87e:	2300      	movs	r3, #0
 800f880:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	69db      	ldr	r3, [r3, #28]
 800f886:	4619      	mov	r1, r3
 800f888:	68f8      	ldr	r0, [r7, #12]
 800f88a:	f7ff faa9 	bl	800ede0 <move_window>
 800f88e:	4603      	mov	r3, r0
 800f890:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f892:	7dfb      	ldrb	r3, [r7, #23]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d11d      	bne.n	800f8d4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	6a1b      	ldr	r3, [r3, #32]
 800f89c:	781b      	ldrb	r3, [r3, #0]
 800f89e:	2be5      	cmp	r3, #229	@ 0xe5
 800f8a0:	d004      	beq.n	800f8ac <dir_alloc+0x50>
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	6a1b      	ldr	r3, [r3, #32]
 800f8a6:	781b      	ldrb	r3, [r3, #0]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d107      	bne.n	800f8bc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f8ac:	693b      	ldr	r3, [r7, #16]
 800f8ae:	3301      	adds	r3, #1
 800f8b0:	613b      	str	r3, [r7, #16]
 800f8b2:	693a      	ldr	r2, [r7, #16]
 800f8b4:	683b      	ldr	r3, [r7, #0]
 800f8b6:	429a      	cmp	r2, r3
 800f8b8:	d102      	bne.n	800f8c0 <dir_alloc+0x64>
 800f8ba:	e00c      	b.n	800f8d6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f8bc:	2300      	movs	r3, #0
 800f8be:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f8c0:	2101      	movs	r1, #1
 800f8c2:	6878      	ldr	r0, [r7, #4]
 800f8c4:	f7ff fef4 	bl	800f6b0 <dir_next>
 800f8c8:	4603      	mov	r3, r0
 800f8ca:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f8cc:	7dfb      	ldrb	r3, [r7, #23]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d0d7      	beq.n	800f882 <dir_alloc+0x26>
 800f8d2:	e000      	b.n	800f8d6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f8d4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f8d6:	7dfb      	ldrb	r3, [r7, #23]
 800f8d8:	2b04      	cmp	r3, #4
 800f8da:	d101      	bne.n	800f8e0 <dir_alloc+0x84>
 800f8dc:	2307      	movs	r3, #7
 800f8de:	75fb      	strb	r3, [r7, #23]
	return res;
 800f8e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	3718      	adds	r7, #24
 800f8e6:	46bd      	mov	sp, r7
 800f8e8:	bd80      	pop	{r7, pc}

0800f8ea <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f8ea:	b580      	push	{r7, lr}
 800f8ec:	b084      	sub	sp, #16
 800f8ee:	af00      	add	r7, sp, #0
 800f8f0:	6078      	str	r0, [r7, #4]
 800f8f2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f8f4:	683b      	ldr	r3, [r7, #0]
 800f8f6:	331a      	adds	r3, #26
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	f7fe ffc1 	bl	800e880 <ld_word>
 800f8fe:	4603      	mov	r3, r0
 800f900:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	781b      	ldrb	r3, [r3, #0]
 800f906:	2b03      	cmp	r3, #3
 800f908:	d109      	bne.n	800f91e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f90a:	683b      	ldr	r3, [r7, #0]
 800f90c:	3314      	adds	r3, #20
 800f90e:	4618      	mov	r0, r3
 800f910:	f7fe ffb6 	bl	800e880 <ld_word>
 800f914:	4603      	mov	r3, r0
 800f916:	041b      	lsls	r3, r3, #16
 800f918:	68fa      	ldr	r2, [r7, #12]
 800f91a:	4313      	orrs	r3, r2
 800f91c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f91e:	68fb      	ldr	r3, [r7, #12]
}
 800f920:	4618      	mov	r0, r3
 800f922:	3710      	adds	r7, #16
 800f924:	46bd      	mov	sp, r7
 800f926:	bd80      	pop	{r7, pc}

0800f928 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f928:	b580      	push	{r7, lr}
 800f92a:	b084      	sub	sp, #16
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	60f8      	str	r0, [r7, #12]
 800f930:	60b9      	str	r1, [r7, #8]
 800f932:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f934:	68bb      	ldr	r3, [r7, #8]
 800f936:	331a      	adds	r3, #26
 800f938:	687a      	ldr	r2, [r7, #4]
 800f93a:	b292      	uxth	r2, r2
 800f93c:	4611      	mov	r1, r2
 800f93e:	4618      	mov	r0, r3
 800f940:	f7fe ffd9 	bl	800e8f6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	781b      	ldrb	r3, [r3, #0]
 800f948:	2b03      	cmp	r3, #3
 800f94a:	d109      	bne.n	800f960 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f94c:	68bb      	ldr	r3, [r7, #8]
 800f94e:	f103 0214 	add.w	r2, r3, #20
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	0c1b      	lsrs	r3, r3, #16
 800f956:	b29b      	uxth	r3, r3
 800f958:	4619      	mov	r1, r3
 800f95a:	4610      	mov	r0, r2
 800f95c:	f7fe ffcb 	bl	800e8f6 <st_word>
	}
}
 800f960:	bf00      	nop
 800f962:	3710      	adds	r7, #16
 800f964:	46bd      	mov	sp, r7
 800f966:	bd80      	pop	{r7, pc}

0800f968 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800f968:	b590      	push	{r4, r7, lr}
 800f96a:	b087      	sub	sp, #28
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
 800f970:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800f972:	683b      	ldr	r3, [r7, #0]
 800f974:	331a      	adds	r3, #26
 800f976:	4618      	mov	r0, r3
 800f978:	f7fe ff82 	bl	800e880 <ld_word>
 800f97c:	4603      	mov	r3, r0
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d001      	beq.n	800f986 <cmp_lfn+0x1e>
 800f982:	2300      	movs	r3, #0
 800f984:	e059      	b.n	800fa3a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800f986:	683b      	ldr	r3, [r7, #0]
 800f988:	781b      	ldrb	r3, [r3, #0]
 800f98a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f98e:	1e5a      	subs	r2, r3, #1
 800f990:	4613      	mov	r3, r2
 800f992:	005b      	lsls	r3, r3, #1
 800f994:	4413      	add	r3, r2
 800f996:	009b      	lsls	r3, r3, #2
 800f998:	4413      	add	r3, r2
 800f99a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f99c:	2301      	movs	r3, #1
 800f99e:	81fb      	strh	r3, [r7, #14]
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	613b      	str	r3, [r7, #16]
 800f9a4:	e033      	b.n	800fa0e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800f9a6:	4a27      	ldr	r2, [pc, #156]	@ (800fa44 <cmp_lfn+0xdc>)
 800f9a8:	693b      	ldr	r3, [r7, #16]
 800f9aa:	4413      	add	r3, r2
 800f9ac:	781b      	ldrb	r3, [r3, #0]
 800f9ae:	461a      	mov	r2, r3
 800f9b0:	683b      	ldr	r3, [r7, #0]
 800f9b2:	4413      	add	r3, r2
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	f7fe ff63 	bl	800e880 <ld_word>
 800f9ba:	4603      	mov	r3, r0
 800f9bc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800f9be:	89fb      	ldrh	r3, [r7, #14]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d01a      	beq.n	800f9fa <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800f9c4:	697b      	ldr	r3, [r7, #20]
 800f9c6:	2bfe      	cmp	r3, #254	@ 0xfe
 800f9c8:	d812      	bhi.n	800f9f0 <cmp_lfn+0x88>
 800f9ca:	89bb      	ldrh	r3, [r7, #12]
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	f002 fa9b 	bl	8011f08 <ff_wtoupper>
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	461c      	mov	r4, r3
 800f9d6:	697b      	ldr	r3, [r7, #20]
 800f9d8:	1c5a      	adds	r2, r3, #1
 800f9da:	617a      	str	r2, [r7, #20]
 800f9dc:	005b      	lsls	r3, r3, #1
 800f9de:	687a      	ldr	r2, [r7, #4]
 800f9e0:	4413      	add	r3, r2
 800f9e2:	881b      	ldrh	r3, [r3, #0]
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	f002 fa8f 	bl	8011f08 <ff_wtoupper>
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	429c      	cmp	r4, r3
 800f9ee:	d001      	beq.n	800f9f4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	e022      	b.n	800fa3a <cmp_lfn+0xd2>
			}
			wc = uc;
 800f9f4:	89bb      	ldrh	r3, [r7, #12]
 800f9f6:	81fb      	strh	r3, [r7, #14]
 800f9f8:	e006      	b.n	800fa08 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f9fa:	89bb      	ldrh	r3, [r7, #12]
 800f9fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fa00:	4293      	cmp	r3, r2
 800fa02:	d001      	beq.n	800fa08 <cmp_lfn+0xa0>
 800fa04:	2300      	movs	r3, #0
 800fa06:	e018      	b.n	800fa3a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800fa08:	693b      	ldr	r3, [r7, #16]
 800fa0a:	3301      	adds	r3, #1
 800fa0c:	613b      	str	r3, [r7, #16]
 800fa0e:	693b      	ldr	r3, [r7, #16]
 800fa10:	2b0c      	cmp	r3, #12
 800fa12:	d9c8      	bls.n	800f9a6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800fa14:	683b      	ldr	r3, [r7, #0]
 800fa16:	781b      	ldrb	r3, [r3, #0]
 800fa18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d00b      	beq.n	800fa38 <cmp_lfn+0xd0>
 800fa20:	89fb      	ldrh	r3, [r7, #14]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d008      	beq.n	800fa38 <cmp_lfn+0xd0>
 800fa26:	697b      	ldr	r3, [r7, #20]
 800fa28:	005b      	lsls	r3, r3, #1
 800fa2a:	687a      	ldr	r2, [r7, #4]
 800fa2c:	4413      	add	r3, r2
 800fa2e:	881b      	ldrh	r3, [r3, #0]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d001      	beq.n	800fa38 <cmp_lfn+0xd0>
 800fa34:	2300      	movs	r3, #0
 800fa36:	e000      	b.n	800fa3a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800fa38:	2301      	movs	r3, #1
}
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	371c      	adds	r7, #28
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	bd90      	pop	{r4, r7, pc}
 800fa42:	bf00      	nop
 800fa44:	080124c0 	.word	0x080124c0

0800fa48 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b088      	sub	sp, #32
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	60f8      	str	r0, [r7, #12]
 800fa50:	60b9      	str	r1, [r7, #8]
 800fa52:	4611      	mov	r1, r2
 800fa54:	461a      	mov	r2, r3
 800fa56:	460b      	mov	r3, r1
 800fa58:	71fb      	strb	r3, [r7, #7]
 800fa5a:	4613      	mov	r3, r2
 800fa5c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800fa5e:	68bb      	ldr	r3, [r7, #8]
 800fa60:	330d      	adds	r3, #13
 800fa62:	79ba      	ldrb	r2, [r7, #6]
 800fa64:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800fa66:	68bb      	ldr	r3, [r7, #8]
 800fa68:	330b      	adds	r3, #11
 800fa6a:	220f      	movs	r2, #15
 800fa6c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800fa6e:	68bb      	ldr	r3, [r7, #8]
 800fa70:	330c      	adds	r3, #12
 800fa72:	2200      	movs	r2, #0
 800fa74:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800fa76:	68bb      	ldr	r3, [r7, #8]
 800fa78:	331a      	adds	r3, #26
 800fa7a:	2100      	movs	r1, #0
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	f7fe ff3a 	bl	800e8f6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800fa82:	79fb      	ldrb	r3, [r7, #7]
 800fa84:	1e5a      	subs	r2, r3, #1
 800fa86:	4613      	mov	r3, r2
 800fa88:	005b      	lsls	r3, r3, #1
 800fa8a:	4413      	add	r3, r2
 800fa8c:	009b      	lsls	r3, r3, #2
 800fa8e:	4413      	add	r3, r2
 800fa90:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800fa92:	2300      	movs	r3, #0
 800fa94:	82fb      	strh	r3, [r7, #22]
 800fa96:	2300      	movs	r3, #0
 800fa98:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800fa9a:	8afb      	ldrh	r3, [r7, #22]
 800fa9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800faa0:	4293      	cmp	r3, r2
 800faa2:	d007      	beq.n	800fab4 <put_lfn+0x6c>
 800faa4:	69fb      	ldr	r3, [r7, #28]
 800faa6:	1c5a      	adds	r2, r3, #1
 800faa8:	61fa      	str	r2, [r7, #28]
 800faaa:	005b      	lsls	r3, r3, #1
 800faac:	68fa      	ldr	r2, [r7, #12]
 800faae:	4413      	add	r3, r2
 800fab0:	881b      	ldrh	r3, [r3, #0]
 800fab2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800fab4:	4a17      	ldr	r2, [pc, #92]	@ (800fb14 <put_lfn+0xcc>)
 800fab6:	69bb      	ldr	r3, [r7, #24]
 800fab8:	4413      	add	r3, r2
 800faba:	781b      	ldrb	r3, [r3, #0]
 800fabc:	461a      	mov	r2, r3
 800fabe:	68bb      	ldr	r3, [r7, #8]
 800fac0:	4413      	add	r3, r2
 800fac2:	8afa      	ldrh	r2, [r7, #22]
 800fac4:	4611      	mov	r1, r2
 800fac6:	4618      	mov	r0, r3
 800fac8:	f7fe ff15 	bl	800e8f6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800facc:	8afb      	ldrh	r3, [r7, #22]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d102      	bne.n	800fad8 <put_lfn+0x90>
 800fad2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fad6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800fad8:	69bb      	ldr	r3, [r7, #24]
 800fada:	3301      	adds	r3, #1
 800fadc:	61bb      	str	r3, [r7, #24]
 800fade:	69bb      	ldr	r3, [r7, #24]
 800fae0:	2b0c      	cmp	r3, #12
 800fae2:	d9da      	bls.n	800fa9a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800fae4:	8afb      	ldrh	r3, [r7, #22]
 800fae6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800faea:	4293      	cmp	r3, r2
 800faec:	d006      	beq.n	800fafc <put_lfn+0xb4>
 800faee:	69fb      	ldr	r3, [r7, #28]
 800faf0:	005b      	lsls	r3, r3, #1
 800faf2:	68fa      	ldr	r2, [r7, #12]
 800faf4:	4413      	add	r3, r2
 800faf6:	881b      	ldrh	r3, [r3, #0]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d103      	bne.n	800fb04 <put_lfn+0xbc>
 800fafc:	79fb      	ldrb	r3, [r7, #7]
 800fafe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb02:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800fb04:	68bb      	ldr	r3, [r7, #8]
 800fb06:	79fa      	ldrb	r2, [r7, #7]
 800fb08:	701a      	strb	r2, [r3, #0]
}
 800fb0a:	bf00      	nop
 800fb0c:	3720      	adds	r7, #32
 800fb0e:	46bd      	mov	sp, r7
 800fb10:	bd80      	pop	{r7, pc}
 800fb12:	bf00      	nop
 800fb14:	080124c0 	.word	0x080124c0

0800fb18 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b08c      	sub	sp, #48	@ 0x30
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	60f8      	str	r0, [r7, #12]
 800fb20:	60b9      	str	r1, [r7, #8]
 800fb22:	607a      	str	r2, [r7, #4]
 800fb24:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800fb26:	220b      	movs	r2, #11
 800fb28:	68b9      	ldr	r1, [r7, #8]
 800fb2a:	68f8      	ldr	r0, [r7, #12]
 800fb2c:	f7fe ff2a 	bl	800e984 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800fb30:	683b      	ldr	r3, [r7, #0]
 800fb32:	2b05      	cmp	r3, #5
 800fb34:	d929      	bls.n	800fb8a <gen_numname+0x72>
		sr = seq;
 800fb36:	683b      	ldr	r3, [r7, #0]
 800fb38:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800fb3a:	e020      	b.n	800fb7e <gen_numname+0x66>
			wc = *lfn++;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	1c9a      	adds	r2, r3, #2
 800fb40:	607a      	str	r2, [r7, #4]
 800fb42:	881b      	ldrh	r3, [r3, #0]
 800fb44:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800fb46:	2300      	movs	r3, #0
 800fb48:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fb4a:	e015      	b.n	800fb78 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800fb4c:	69fb      	ldr	r3, [r7, #28]
 800fb4e:	005a      	lsls	r2, r3, #1
 800fb50:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fb52:	f003 0301 	and.w	r3, r3, #1
 800fb56:	4413      	add	r3, r2
 800fb58:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800fb5a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fb5c:	085b      	lsrs	r3, r3, #1
 800fb5e:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800fb60:	69fb      	ldr	r3, [r7, #28]
 800fb62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d003      	beq.n	800fb72 <gen_numname+0x5a>
 800fb6a:	69fa      	ldr	r2, [r7, #28]
 800fb6c:	4b30      	ldr	r3, [pc, #192]	@ (800fc30 <gen_numname+0x118>)
 800fb6e:	4053      	eors	r3, r2
 800fb70:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800fb72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb74:	3301      	adds	r3, #1
 800fb76:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fb78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb7a:	2b0f      	cmp	r3, #15
 800fb7c:	d9e6      	bls.n	800fb4c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	881b      	ldrh	r3, [r3, #0]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d1da      	bne.n	800fb3c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800fb86:	69fb      	ldr	r3, [r7, #28]
 800fb88:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800fb8a:	2307      	movs	r3, #7
 800fb8c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800fb8e:	683b      	ldr	r3, [r7, #0]
 800fb90:	b2db      	uxtb	r3, r3
 800fb92:	f003 030f 	and.w	r3, r3, #15
 800fb96:	b2db      	uxtb	r3, r3
 800fb98:	3330      	adds	r3, #48	@ 0x30
 800fb9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800fb9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fba2:	2b39      	cmp	r3, #57	@ 0x39
 800fba4:	d904      	bls.n	800fbb0 <gen_numname+0x98>
 800fba6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fbaa:	3307      	adds	r3, #7
 800fbac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800fbb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbb2:	1e5a      	subs	r2, r3, #1
 800fbb4:	62ba      	str	r2, [r7, #40]	@ 0x28
 800fbb6:	3330      	adds	r3, #48	@ 0x30
 800fbb8:	443b      	add	r3, r7
 800fbba:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800fbbe:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800fbc2:	683b      	ldr	r3, [r7, #0]
 800fbc4:	091b      	lsrs	r3, r3, #4
 800fbc6:	603b      	str	r3, [r7, #0]
	} while (seq);
 800fbc8:	683b      	ldr	r3, [r7, #0]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d1df      	bne.n	800fb8e <gen_numname+0x76>
	ns[i] = '~';
 800fbce:	f107 0214 	add.w	r2, r7, #20
 800fbd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbd4:	4413      	add	r3, r2
 800fbd6:	227e      	movs	r2, #126	@ 0x7e
 800fbd8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800fbda:	2300      	movs	r3, #0
 800fbdc:	627b      	str	r3, [r7, #36]	@ 0x24
 800fbde:	e002      	b.n	800fbe6 <gen_numname+0xce>
 800fbe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbe2:	3301      	adds	r3, #1
 800fbe4:	627b      	str	r3, [r7, #36]	@ 0x24
 800fbe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fbe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbea:	429a      	cmp	r2, r3
 800fbec:	d205      	bcs.n	800fbfa <gen_numname+0xe2>
 800fbee:	68fa      	ldr	r2, [r7, #12]
 800fbf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbf2:	4413      	add	r3, r2
 800fbf4:	781b      	ldrb	r3, [r3, #0]
 800fbf6:	2b20      	cmp	r3, #32
 800fbf8:	d1f2      	bne.n	800fbe0 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800fbfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbfc:	2b07      	cmp	r3, #7
 800fbfe:	d807      	bhi.n	800fc10 <gen_numname+0xf8>
 800fc00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc02:	1c5a      	adds	r2, r3, #1
 800fc04:	62ba      	str	r2, [r7, #40]	@ 0x28
 800fc06:	3330      	adds	r3, #48	@ 0x30
 800fc08:	443b      	add	r3, r7
 800fc0a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800fc0e:	e000      	b.n	800fc12 <gen_numname+0xfa>
 800fc10:	2120      	movs	r1, #32
 800fc12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc14:	1c5a      	adds	r2, r3, #1
 800fc16:	627a      	str	r2, [r7, #36]	@ 0x24
 800fc18:	68fa      	ldr	r2, [r7, #12]
 800fc1a:	4413      	add	r3, r2
 800fc1c:	460a      	mov	r2, r1
 800fc1e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800fc20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc22:	2b07      	cmp	r3, #7
 800fc24:	d9e9      	bls.n	800fbfa <gen_numname+0xe2>
}
 800fc26:	bf00      	nop
 800fc28:	bf00      	nop
 800fc2a:	3730      	adds	r7, #48	@ 0x30
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	bd80      	pop	{r7, pc}
 800fc30:	00011021 	.word	0x00011021

0800fc34 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800fc34:	b480      	push	{r7}
 800fc36:	b085      	sub	sp, #20
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800fc40:	230b      	movs	r3, #11
 800fc42:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800fc44:	7bfb      	ldrb	r3, [r7, #15]
 800fc46:	b2da      	uxtb	r2, r3
 800fc48:	0852      	lsrs	r2, r2, #1
 800fc4a:	01db      	lsls	r3, r3, #7
 800fc4c:	4313      	orrs	r3, r2
 800fc4e:	b2da      	uxtb	r2, r3
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	1c59      	adds	r1, r3, #1
 800fc54:	6079      	str	r1, [r7, #4]
 800fc56:	781b      	ldrb	r3, [r3, #0]
 800fc58:	4413      	add	r3, r2
 800fc5a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800fc5c:	68bb      	ldr	r3, [r7, #8]
 800fc5e:	3b01      	subs	r3, #1
 800fc60:	60bb      	str	r3, [r7, #8]
 800fc62:	68bb      	ldr	r3, [r7, #8]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d1ed      	bne.n	800fc44 <sum_sfn+0x10>
	return sum;
 800fc68:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	3714      	adds	r7, #20
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc74:	4770      	bx	lr

0800fc76 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800fc76:	b580      	push	{r7, lr}
 800fc78:	b086      	sub	sp, #24
 800fc7a:	af00      	add	r7, sp, #0
 800fc7c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800fc84:	2100      	movs	r1, #0
 800fc86:	6878      	ldr	r0, [r7, #4]
 800fc88:	f7ff fc89 	bl	800f59e <dir_sdi>
 800fc8c:	4603      	mov	r3, r0
 800fc8e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800fc90:	7dfb      	ldrb	r3, [r7, #23]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d001      	beq.n	800fc9a <dir_find+0x24>
 800fc96:	7dfb      	ldrb	r3, [r7, #23]
 800fc98:	e0a9      	b.n	800fdee <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800fc9a:	23ff      	movs	r3, #255	@ 0xff
 800fc9c:	753b      	strb	r3, [r7, #20]
 800fc9e:	7d3b      	ldrb	r3, [r7, #20]
 800fca0:	757b      	strb	r3, [r7, #21]
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	f04f 32ff 	mov.w	r2, #4294967295
 800fca8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	69db      	ldr	r3, [r3, #28]
 800fcae:	4619      	mov	r1, r3
 800fcb0:	6938      	ldr	r0, [r7, #16]
 800fcb2:	f7ff f895 	bl	800ede0 <move_window>
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fcba:	7dfb      	ldrb	r3, [r7, #23]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	f040 8090 	bne.w	800fde2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	6a1b      	ldr	r3, [r3, #32]
 800fcc6:	781b      	ldrb	r3, [r3, #0]
 800fcc8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800fcca:	7dbb      	ldrb	r3, [r7, #22]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d102      	bne.n	800fcd6 <dir_find+0x60>
 800fcd0:	2304      	movs	r3, #4
 800fcd2:	75fb      	strb	r3, [r7, #23]
 800fcd4:	e08a      	b.n	800fdec <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	6a1b      	ldr	r3, [r3, #32]
 800fcda:	330b      	adds	r3, #11
 800fcdc:	781b      	ldrb	r3, [r3, #0]
 800fcde:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fce2:	73fb      	strb	r3, [r7, #15]
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	7bfa      	ldrb	r2, [r7, #15]
 800fce8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800fcea:	7dbb      	ldrb	r3, [r7, #22]
 800fcec:	2be5      	cmp	r3, #229	@ 0xe5
 800fcee:	d007      	beq.n	800fd00 <dir_find+0x8a>
 800fcf0:	7bfb      	ldrb	r3, [r7, #15]
 800fcf2:	f003 0308 	and.w	r3, r3, #8
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d009      	beq.n	800fd0e <dir_find+0x98>
 800fcfa:	7bfb      	ldrb	r3, [r7, #15]
 800fcfc:	2b0f      	cmp	r3, #15
 800fcfe:	d006      	beq.n	800fd0e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800fd00:	23ff      	movs	r3, #255	@ 0xff
 800fd02:	757b      	strb	r3, [r7, #21]
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	f04f 32ff 	mov.w	r2, #4294967295
 800fd0a:	631a      	str	r2, [r3, #48]	@ 0x30
 800fd0c:	e05e      	b.n	800fdcc <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800fd0e:	7bfb      	ldrb	r3, [r7, #15]
 800fd10:	2b0f      	cmp	r3, #15
 800fd12:	d136      	bne.n	800fd82 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800fd1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d154      	bne.n	800fdcc <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800fd22:	7dbb      	ldrb	r3, [r7, #22]
 800fd24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d00d      	beq.n	800fd48 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	6a1b      	ldr	r3, [r3, #32]
 800fd30:	7b5b      	ldrb	r3, [r3, #13]
 800fd32:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800fd34:	7dbb      	ldrb	r3, [r7, #22]
 800fd36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fd3a:	75bb      	strb	r3, [r7, #22]
 800fd3c:	7dbb      	ldrb	r3, [r7, #22]
 800fd3e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	695a      	ldr	r2, [r3, #20]
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800fd48:	7dba      	ldrb	r2, [r7, #22]
 800fd4a:	7d7b      	ldrb	r3, [r7, #21]
 800fd4c:	429a      	cmp	r2, r3
 800fd4e:	d115      	bne.n	800fd7c <dir_find+0x106>
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	6a1b      	ldr	r3, [r3, #32]
 800fd54:	330d      	adds	r3, #13
 800fd56:	781b      	ldrb	r3, [r3, #0]
 800fd58:	7d3a      	ldrb	r2, [r7, #20]
 800fd5a:	429a      	cmp	r2, r3
 800fd5c:	d10e      	bne.n	800fd7c <dir_find+0x106>
 800fd5e:	693b      	ldr	r3, [r7, #16]
 800fd60:	691a      	ldr	r2, [r3, #16]
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	6a1b      	ldr	r3, [r3, #32]
 800fd66:	4619      	mov	r1, r3
 800fd68:	4610      	mov	r0, r2
 800fd6a:	f7ff fdfd 	bl	800f968 <cmp_lfn>
 800fd6e:	4603      	mov	r3, r0
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d003      	beq.n	800fd7c <dir_find+0x106>
 800fd74:	7d7b      	ldrb	r3, [r7, #21]
 800fd76:	3b01      	subs	r3, #1
 800fd78:	b2db      	uxtb	r3, r3
 800fd7a:	e000      	b.n	800fd7e <dir_find+0x108>
 800fd7c:	23ff      	movs	r3, #255	@ 0xff
 800fd7e:	757b      	strb	r3, [r7, #21]
 800fd80:	e024      	b.n	800fdcc <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800fd82:	7d7b      	ldrb	r3, [r7, #21]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d109      	bne.n	800fd9c <dir_find+0x126>
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	6a1b      	ldr	r3, [r3, #32]
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	f7ff ff51 	bl	800fc34 <sum_sfn>
 800fd92:	4603      	mov	r3, r0
 800fd94:	461a      	mov	r2, r3
 800fd96:	7d3b      	ldrb	r3, [r7, #20]
 800fd98:	4293      	cmp	r3, r2
 800fd9a:	d024      	beq.n	800fde6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800fda2:	f003 0301 	and.w	r3, r3, #1
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d10a      	bne.n	800fdc0 <dir_find+0x14a>
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	6a18      	ldr	r0, [r3, #32]
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	3324      	adds	r3, #36	@ 0x24
 800fdb2:	220b      	movs	r2, #11
 800fdb4:	4619      	mov	r1, r3
 800fdb6:	f7fe fe21 	bl	800e9fc <mem_cmp>
 800fdba:	4603      	mov	r3, r0
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d014      	beq.n	800fdea <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800fdc0:	23ff      	movs	r3, #255	@ 0xff
 800fdc2:	757b      	strb	r3, [r7, #21]
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	f04f 32ff 	mov.w	r2, #4294967295
 800fdca:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800fdcc:	2100      	movs	r1, #0
 800fdce:	6878      	ldr	r0, [r7, #4]
 800fdd0:	f7ff fc6e 	bl	800f6b0 <dir_next>
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800fdd8:	7dfb      	ldrb	r3, [r7, #23]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	f43f af65 	beq.w	800fcaa <dir_find+0x34>
 800fde0:	e004      	b.n	800fdec <dir_find+0x176>
		if (res != FR_OK) break;
 800fde2:	bf00      	nop
 800fde4:	e002      	b.n	800fdec <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800fde6:	bf00      	nop
 800fde8:	e000      	b.n	800fdec <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800fdea:	bf00      	nop

	return res;
 800fdec:	7dfb      	ldrb	r3, [r7, #23]
}
 800fdee:	4618      	mov	r0, r3
 800fdf0:	3718      	adds	r7, #24
 800fdf2:	46bd      	mov	sp, r7
 800fdf4:	bd80      	pop	{r7, pc}
	...

0800fdf8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	b08c      	sub	sp, #48	@ 0x30
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800fe0c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d001      	beq.n	800fe18 <dir_register+0x20>
 800fe14:	2306      	movs	r3, #6
 800fe16:	e0e0      	b.n	800ffda <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800fe18:	2300      	movs	r3, #0
 800fe1a:	627b      	str	r3, [r7, #36]	@ 0x24
 800fe1c:	e002      	b.n	800fe24 <dir_register+0x2c>
 800fe1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe20:	3301      	adds	r3, #1
 800fe22:	627b      	str	r3, [r7, #36]	@ 0x24
 800fe24:	69fb      	ldr	r3, [r7, #28]
 800fe26:	691a      	ldr	r2, [r3, #16]
 800fe28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe2a:	005b      	lsls	r3, r3, #1
 800fe2c:	4413      	add	r3, r2
 800fe2e:	881b      	ldrh	r3, [r3, #0]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d1f4      	bne.n	800fe1e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800fe3a:	f107 030c 	add.w	r3, r7, #12
 800fe3e:	220c      	movs	r2, #12
 800fe40:	4618      	mov	r0, r3
 800fe42:	f7fe fd9f 	bl	800e984 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800fe46:	7dfb      	ldrb	r3, [r7, #23]
 800fe48:	f003 0301 	and.w	r3, r3, #1
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d032      	beq.n	800feb6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	2240      	movs	r2, #64	@ 0x40
 800fe54:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800fe58:	2301      	movs	r3, #1
 800fe5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fe5c:	e016      	b.n	800fe8c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800fe64:	69fb      	ldr	r3, [r7, #28]
 800fe66:	691a      	ldr	r2, [r3, #16]
 800fe68:	f107 010c 	add.w	r1, r7, #12
 800fe6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe6e:	f7ff fe53 	bl	800fb18 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800fe72:	6878      	ldr	r0, [r7, #4]
 800fe74:	f7ff feff 	bl	800fc76 <dir_find>
 800fe78:	4603      	mov	r3, r0
 800fe7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800fe7e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d106      	bne.n	800fe94 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800fe86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe88:	3301      	adds	r3, #1
 800fe8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fe8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe8e:	2b63      	cmp	r3, #99	@ 0x63
 800fe90:	d9e5      	bls.n	800fe5e <dir_register+0x66>
 800fe92:	e000      	b.n	800fe96 <dir_register+0x9e>
			if (res != FR_OK) break;
 800fe94:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800fe96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe98:	2b64      	cmp	r3, #100	@ 0x64
 800fe9a:	d101      	bne.n	800fea0 <dir_register+0xa8>
 800fe9c:	2307      	movs	r3, #7
 800fe9e:	e09c      	b.n	800ffda <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800fea0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fea4:	2b04      	cmp	r3, #4
 800fea6:	d002      	beq.n	800feae <dir_register+0xb6>
 800fea8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800feac:	e095      	b.n	800ffda <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800feae:	7dfa      	ldrb	r2, [r7, #23]
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800feb6:	7dfb      	ldrb	r3, [r7, #23]
 800feb8:	f003 0302 	and.w	r3, r3, #2
 800febc:	2b00      	cmp	r3, #0
 800febe:	d007      	beq.n	800fed0 <dir_register+0xd8>
 800fec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fec2:	330c      	adds	r3, #12
 800fec4:	4a47      	ldr	r2, [pc, #284]	@ (800ffe4 <dir_register+0x1ec>)
 800fec6:	fba2 2303 	umull	r2, r3, r2, r3
 800feca:	089b      	lsrs	r3, r3, #2
 800fecc:	3301      	adds	r3, #1
 800fece:	e000      	b.n	800fed2 <dir_register+0xda>
 800fed0:	2301      	movs	r3, #1
 800fed2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800fed4:	6a39      	ldr	r1, [r7, #32]
 800fed6:	6878      	ldr	r0, [r7, #4]
 800fed8:	f7ff fcc0 	bl	800f85c <dir_alloc>
 800fedc:	4603      	mov	r3, r0
 800fede:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800fee2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d148      	bne.n	800ff7c <dir_register+0x184>
 800feea:	6a3b      	ldr	r3, [r7, #32]
 800feec:	3b01      	subs	r3, #1
 800feee:	623b      	str	r3, [r7, #32]
 800fef0:	6a3b      	ldr	r3, [r7, #32]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d042      	beq.n	800ff7c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	695a      	ldr	r2, [r3, #20]
 800fefa:	6a3b      	ldr	r3, [r7, #32]
 800fefc:	015b      	lsls	r3, r3, #5
 800fefe:	1ad3      	subs	r3, r2, r3
 800ff00:	4619      	mov	r1, r3
 800ff02:	6878      	ldr	r0, [r7, #4]
 800ff04:	f7ff fb4b 	bl	800f59e <dir_sdi>
 800ff08:	4603      	mov	r3, r0
 800ff0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800ff0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d132      	bne.n	800ff7c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	3324      	adds	r3, #36	@ 0x24
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	f7ff fe8a 	bl	800fc34 <sum_sfn>
 800ff20:	4603      	mov	r3, r0
 800ff22:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	69db      	ldr	r3, [r3, #28]
 800ff28:	4619      	mov	r1, r3
 800ff2a:	69f8      	ldr	r0, [r7, #28]
 800ff2c:	f7fe ff58 	bl	800ede0 <move_window>
 800ff30:	4603      	mov	r3, r0
 800ff32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800ff36:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d11d      	bne.n	800ff7a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800ff3e:	69fb      	ldr	r3, [r7, #28]
 800ff40:	6918      	ldr	r0, [r3, #16]
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	6a19      	ldr	r1, [r3, #32]
 800ff46:	6a3b      	ldr	r3, [r7, #32]
 800ff48:	b2da      	uxtb	r2, r3
 800ff4a:	7efb      	ldrb	r3, [r7, #27]
 800ff4c:	f7ff fd7c 	bl	800fa48 <put_lfn>
				fs->wflag = 1;
 800ff50:	69fb      	ldr	r3, [r7, #28]
 800ff52:	2201      	movs	r2, #1
 800ff54:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800ff56:	2100      	movs	r1, #0
 800ff58:	6878      	ldr	r0, [r7, #4]
 800ff5a:	f7ff fba9 	bl	800f6b0 <dir_next>
 800ff5e:	4603      	mov	r3, r0
 800ff60:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800ff64:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d107      	bne.n	800ff7c <dir_register+0x184>
 800ff6c:	6a3b      	ldr	r3, [r7, #32]
 800ff6e:	3b01      	subs	r3, #1
 800ff70:	623b      	str	r3, [r7, #32]
 800ff72:	6a3b      	ldr	r3, [r7, #32]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d1d5      	bne.n	800ff24 <dir_register+0x12c>
 800ff78:	e000      	b.n	800ff7c <dir_register+0x184>
				if (res != FR_OK) break;
 800ff7a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ff7c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d128      	bne.n	800ffd6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	69db      	ldr	r3, [r3, #28]
 800ff88:	4619      	mov	r1, r3
 800ff8a:	69f8      	ldr	r0, [r7, #28]
 800ff8c:	f7fe ff28 	bl	800ede0 <move_window>
 800ff90:	4603      	mov	r3, r0
 800ff92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800ff96:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d11b      	bne.n	800ffd6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	6a1b      	ldr	r3, [r3, #32]
 800ffa2:	2220      	movs	r2, #32
 800ffa4:	2100      	movs	r1, #0
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	f7fe fd0d 	bl	800e9c6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	6a18      	ldr	r0, [r3, #32]
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	3324      	adds	r3, #36	@ 0x24
 800ffb4:	220b      	movs	r2, #11
 800ffb6:	4619      	mov	r1, r3
 800ffb8:	f7fe fce4 	bl	800e984 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	6a1b      	ldr	r3, [r3, #32]
 800ffc6:	330c      	adds	r3, #12
 800ffc8:	f002 0218 	and.w	r2, r2, #24
 800ffcc:	b2d2      	uxtb	r2, r2
 800ffce:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800ffd0:	69fb      	ldr	r3, [r7, #28]
 800ffd2:	2201      	movs	r2, #1
 800ffd4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ffd6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800ffda:	4618      	mov	r0, r3
 800ffdc:	3730      	adds	r7, #48	@ 0x30
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	bd80      	pop	{r7, pc}
 800ffe2:	bf00      	nop
 800ffe4:	4ec4ec4f 	.word	0x4ec4ec4f

0800ffe8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	b08a      	sub	sp, #40	@ 0x28
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	6078      	str	r0, [r7, #4]
 800fff0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800fff2:	683b      	ldr	r3, [r7, #0]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	613b      	str	r3, [r7, #16]
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	691b      	ldr	r3, [r3, #16]
 800fffe:	60fb      	str	r3, [r7, #12]
 8010000:	2300      	movs	r3, #0
 8010002:	617b      	str	r3, [r7, #20]
 8010004:	697b      	ldr	r3, [r7, #20]
 8010006:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8010008:	69bb      	ldr	r3, [r7, #24]
 801000a:	1c5a      	adds	r2, r3, #1
 801000c:	61ba      	str	r2, [r7, #24]
 801000e:	693a      	ldr	r2, [r7, #16]
 8010010:	4413      	add	r3, r2
 8010012:	781b      	ldrb	r3, [r3, #0]
 8010014:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8010016:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010018:	2b1f      	cmp	r3, #31
 801001a:	d940      	bls.n	801009e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801001c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801001e:	2b2f      	cmp	r3, #47	@ 0x2f
 8010020:	d006      	beq.n	8010030 <create_name+0x48>
 8010022:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010024:	2b5c      	cmp	r3, #92	@ 0x5c
 8010026:	d110      	bne.n	801004a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010028:	e002      	b.n	8010030 <create_name+0x48>
 801002a:	69bb      	ldr	r3, [r7, #24]
 801002c:	3301      	adds	r3, #1
 801002e:	61bb      	str	r3, [r7, #24]
 8010030:	693a      	ldr	r2, [r7, #16]
 8010032:	69bb      	ldr	r3, [r7, #24]
 8010034:	4413      	add	r3, r2
 8010036:	781b      	ldrb	r3, [r3, #0]
 8010038:	2b2f      	cmp	r3, #47	@ 0x2f
 801003a:	d0f6      	beq.n	801002a <create_name+0x42>
 801003c:	693a      	ldr	r2, [r7, #16]
 801003e:	69bb      	ldr	r3, [r7, #24]
 8010040:	4413      	add	r3, r2
 8010042:	781b      	ldrb	r3, [r3, #0]
 8010044:	2b5c      	cmp	r3, #92	@ 0x5c
 8010046:	d0f0      	beq.n	801002a <create_name+0x42>
			break;
 8010048:	e02a      	b.n	80100a0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801004a:	697b      	ldr	r3, [r7, #20]
 801004c:	2bfe      	cmp	r3, #254	@ 0xfe
 801004e:	d901      	bls.n	8010054 <create_name+0x6c>
 8010050:	2306      	movs	r3, #6
 8010052:	e1ca      	b.n	80103ea <create_name+0x402>
#if !_LFN_UNICODE
		w &= 0xFF;
 8010054:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010056:	b2db      	uxtb	r3, r3
 8010058:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801005a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801005c:	2101      	movs	r1, #1
 801005e:	4618      	mov	r0, r3
 8010060:	f001 ff16 	bl	8011e90 <ff_convert>
 8010064:	4603      	mov	r3, r0
 8010066:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8010068:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801006a:	2b00      	cmp	r3, #0
 801006c:	d101      	bne.n	8010072 <create_name+0x8a>
 801006e:	2306      	movs	r3, #6
 8010070:	e1bb      	b.n	80103ea <create_name+0x402>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8010072:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010074:	2b7f      	cmp	r3, #127	@ 0x7f
 8010076:	d809      	bhi.n	801008c <create_name+0xa4>
 8010078:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801007a:	4619      	mov	r1, r3
 801007c:	489e      	ldr	r0, [pc, #632]	@ (80102f8 <create_name+0x310>)
 801007e:	f7fe fce4 	bl	800ea4a <chk_chr>
 8010082:	4603      	mov	r3, r0
 8010084:	2b00      	cmp	r3, #0
 8010086:	d001      	beq.n	801008c <create_name+0xa4>
 8010088:	2306      	movs	r3, #6
 801008a:	e1ae      	b.n	80103ea <create_name+0x402>
		lfn[di++] = w;					/* Store the Unicode character */
 801008c:	697b      	ldr	r3, [r7, #20]
 801008e:	1c5a      	adds	r2, r3, #1
 8010090:	617a      	str	r2, [r7, #20]
 8010092:	005b      	lsls	r3, r3, #1
 8010094:	68fa      	ldr	r2, [r7, #12]
 8010096:	4413      	add	r3, r2
 8010098:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801009a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801009c:	e7b4      	b.n	8010008 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801009e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80100a0:	693a      	ldr	r2, [r7, #16]
 80100a2:	69bb      	ldr	r3, [r7, #24]
 80100a4:	441a      	add	r2, r3
 80100a6:	683b      	ldr	r3, [r7, #0]
 80100a8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80100aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80100ac:	2b1f      	cmp	r3, #31
 80100ae:	d801      	bhi.n	80100b4 <create_name+0xcc>
 80100b0:	2304      	movs	r3, #4
 80100b2:	e000      	b.n	80100b6 <create_name+0xce>
 80100b4:	2300      	movs	r3, #0
 80100b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 80100ba:	697b      	ldr	r3, [r7, #20]
 80100bc:	2b01      	cmp	r3, #1
 80100be:	d109      	bne.n	80100d4 <create_name+0xec>
 80100c0:	697a      	ldr	r2, [r7, #20]
 80100c2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80100c6:	4413      	add	r3, r2
 80100c8:	005b      	lsls	r3, r3, #1
 80100ca:	68fa      	ldr	r2, [r7, #12]
 80100cc:	4413      	add	r3, r2
 80100ce:	881b      	ldrh	r3, [r3, #0]
 80100d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80100d2:	d015      	beq.n	8010100 <create_name+0x118>
 80100d4:	697b      	ldr	r3, [r7, #20]
 80100d6:	2b02      	cmp	r3, #2
 80100d8:	d14d      	bne.n	8010176 <create_name+0x18e>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 80100da:	697a      	ldr	r2, [r7, #20]
 80100dc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80100e0:	4413      	add	r3, r2
 80100e2:	005b      	lsls	r3, r3, #1
 80100e4:	68fa      	ldr	r2, [r7, #12]
 80100e6:	4413      	add	r3, r2
 80100e8:	881b      	ldrh	r3, [r3, #0]
 80100ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80100ec:	d143      	bne.n	8010176 <create_name+0x18e>
 80100ee:	697a      	ldr	r2, [r7, #20]
 80100f0:	4b82      	ldr	r3, [pc, #520]	@ (80102fc <create_name+0x314>)
 80100f2:	4413      	add	r3, r2
 80100f4:	005b      	lsls	r3, r3, #1
 80100f6:	68fa      	ldr	r2, [r7, #12]
 80100f8:	4413      	add	r3, r2
 80100fa:	881b      	ldrh	r3, [r3, #0]
 80100fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80100fe:	d13a      	bne.n	8010176 <create_name+0x18e>
		lfn[di] = 0;
 8010100:	697b      	ldr	r3, [r7, #20]
 8010102:	005b      	lsls	r3, r3, #1
 8010104:	68fa      	ldr	r2, [r7, #12]
 8010106:	4413      	add	r3, r2
 8010108:	2200      	movs	r2, #0
 801010a:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 801010c:	2300      	movs	r3, #0
 801010e:	623b      	str	r3, [r7, #32]
 8010110:	e00f      	b.n	8010132 <create_name+0x14a>
			dp->fn[i] = (i < di) ? '.' : ' ';
 8010112:	6a3a      	ldr	r2, [r7, #32]
 8010114:	697b      	ldr	r3, [r7, #20]
 8010116:	429a      	cmp	r2, r3
 8010118:	d201      	bcs.n	801011e <create_name+0x136>
 801011a:	212e      	movs	r1, #46	@ 0x2e
 801011c:	e000      	b.n	8010120 <create_name+0x138>
 801011e:	2120      	movs	r1, #32
 8010120:	687a      	ldr	r2, [r7, #4]
 8010122:	6a3b      	ldr	r3, [r7, #32]
 8010124:	4413      	add	r3, r2
 8010126:	3324      	adds	r3, #36	@ 0x24
 8010128:	460a      	mov	r2, r1
 801012a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 801012c:	6a3b      	ldr	r3, [r7, #32]
 801012e:	3301      	adds	r3, #1
 8010130:	623b      	str	r3, [r7, #32]
 8010132:	6a3b      	ldr	r3, [r7, #32]
 8010134:	2b0a      	cmp	r3, #10
 8010136:	d9ec      	bls.n	8010112 <create_name+0x12a>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 8010138:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801013c:	f043 0320 	orr.w	r3, r3, #32
 8010140:	b2d9      	uxtb	r1, r3
 8010142:	687a      	ldr	r2, [r7, #4]
 8010144:	6a3b      	ldr	r3, [r7, #32]
 8010146:	4413      	add	r3, r2
 8010148:	3324      	adds	r3, #36	@ 0x24
 801014a:	460a      	mov	r2, r1
 801014c:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 801014e:	2300      	movs	r3, #0
 8010150:	e14b      	b.n	80103ea <create_name+0x402>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 8010152:	697a      	ldr	r2, [r7, #20]
 8010154:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010158:	4413      	add	r3, r2
 801015a:	005b      	lsls	r3, r3, #1
 801015c:	68fa      	ldr	r2, [r7, #12]
 801015e:	4413      	add	r3, r2
 8010160:	881b      	ldrh	r3, [r3, #0]
 8010162:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8010164:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010166:	2b20      	cmp	r3, #32
 8010168:	d002      	beq.n	8010170 <create_name+0x188>
 801016a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801016c:	2b2e      	cmp	r3, #46	@ 0x2e
 801016e:	d106      	bne.n	801017e <create_name+0x196>
		di--;
 8010170:	697b      	ldr	r3, [r7, #20]
 8010172:	3b01      	subs	r3, #1
 8010174:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8010176:	697b      	ldr	r3, [r7, #20]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d1ea      	bne.n	8010152 <create_name+0x16a>
 801017c:	e000      	b.n	8010180 <create_name+0x198>
		if (w != ' ' && w != '.') break;
 801017e:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8010180:	697b      	ldr	r3, [r7, #20]
 8010182:	005b      	lsls	r3, r3, #1
 8010184:	68fa      	ldr	r2, [r7, #12]
 8010186:	4413      	add	r3, r2
 8010188:	2200      	movs	r2, #0
 801018a:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801018c:	697b      	ldr	r3, [r7, #20]
 801018e:	2b00      	cmp	r3, #0
 8010190:	d101      	bne.n	8010196 <create_name+0x1ae>
 8010192:	2306      	movs	r3, #6
 8010194:	e129      	b.n	80103ea <create_name+0x402>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	3324      	adds	r3, #36	@ 0x24
 801019a:	220b      	movs	r2, #11
 801019c:	2120      	movs	r1, #32
 801019e:	4618      	mov	r0, r3
 80101a0:	f7fe fc11 	bl	800e9c6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80101a4:	2300      	movs	r3, #0
 80101a6:	61bb      	str	r3, [r7, #24]
 80101a8:	e002      	b.n	80101b0 <create_name+0x1c8>
 80101aa:	69bb      	ldr	r3, [r7, #24]
 80101ac:	3301      	adds	r3, #1
 80101ae:	61bb      	str	r3, [r7, #24]
 80101b0:	69bb      	ldr	r3, [r7, #24]
 80101b2:	005b      	lsls	r3, r3, #1
 80101b4:	68fa      	ldr	r2, [r7, #12]
 80101b6:	4413      	add	r3, r2
 80101b8:	881b      	ldrh	r3, [r3, #0]
 80101ba:	2b20      	cmp	r3, #32
 80101bc:	d0f5      	beq.n	80101aa <create_name+0x1c2>
 80101be:	69bb      	ldr	r3, [r7, #24]
 80101c0:	005b      	lsls	r3, r3, #1
 80101c2:	68fa      	ldr	r2, [r7, #12]
 80101c4:	4413      	add	r3, r2
 80101c6:	881b      	ldrh	r3, [r3, #0]
 80101c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80101ca:	d0ee      	beq.n	80101aa <create_name+0x1c2>
	if (si) cf |= NS_LOSS | NS_LFN;
 80101cc:	69bb      	ldr	r3, [r7, #24]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d009      	beq.n	80101e6 <create_name+0x1fe>
 80101d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80101d6:	f043 0303 	orr.w	r3, r3, #3
 80101da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80101de:	e002      	b.n	80101e6 <create_name+0x1fe>
 80101e0:	697b      	ldr	r3, [r7, #20]
 80101e2:	3b01      	subs	r3, #1
 80101e4:	617b      	str	r3, [r7, #20]
 80101e6:	697b      	ldr	r3, [r7, #20]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d009      	beq.n	8010200 <create_name+0x218>
 80101ec:	697a      	ldr	r2, [r7, #20]
 80101ee:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80101f2:	4413      	add	r3, r2
 80101f4:	005b      	lsls	r3, r3, #1
 80101f6:	68fa      	ldr	r2, [r7, #12]
 80101f8:	4413      	add	r3, r2
 80101fa:	881b      	ldrh	r3, [r3, #0]
 80101fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80101fe:	d1ef      	bne.n	80101e0 <create_name+0x1f8>

	i = b = 0; ni = 8;
 8010200:	2300      	movs	r3, #0
 8010202:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010206:	2300      	movs	r3, #0
 8010208:	623b      	str	r3, [r7, #32]
 801020a:	2308      	movs	r3, #8
 801020c:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801020e:	69bb      	ldr	r3, [r7, #24]
 8010210:	1c5a      	adds	r2, r3, #1
 8010212:	61ba      	str	r2, [r7, #24]
 8010214:	005b      	lsls	r3, r3, #1
 8010216:	68fa      	ldr	r2, [r7, #12]
 8010218:	4413      	add	r3, r2
 801021a:	881b      	ldrh	r3, [r3, #0]
 801021c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 801021e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010220:	2b00      	cmp	r3, #0
 8010222:	f000 8098 	beq.w	8010356 <create_name+0x36e>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8010226:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010228:	2b20      	cmp	r3, #32
 801022a:	d006      	beq.n	801023a <create_name+0x252>
 801022c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801022e:	2b2e      	cmp	r3, #46	@ 0x2e
 8010230:	d10a      	bne.n	8010248 <create_name+0x260>
 8010232:	69ba      	ldr	r2, [r7, #24]
 8010234:	697b      	ldr	r3, [r7, #20]
 8010236:	429a      	cmp	r2, r3
 8010238:	d006      	beq.n	8010248 <create_name+0x260>
			cf |= NS_LOSS | NS_LFN; continue;
 801023a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801023e:	f043 0303 	orr.w	r3, r3, #3
 8010242:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010246:	e085      	b.n	8010354 <create_name+0x36c>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8010248:	6a3a      	ldr	r2, [r7, #32]
 801024a:	69fb      	ldr	r3, [r7, #28]
 801024c:	429a      	cmp	r2, r3
 801024e:	d203      	bcs.n	8010258 <create_name+0x270>
 8010250:	69ba      	ldr	r2, [r7, #24]
 8010252:	697b      	ldr	r3, [r7, #20]
 8010254:	429a      	cmp	r2, r3
 8010256:	d123      	bne.n	80102a0 <create_name+0x2b8>
			if (ni == 11) {				/* Long extension */
 8010258:	69fb      	ldr	r3, [r7, #28]
 801025a:	2b0b      	cmp	r3, #11
 801025c:	d106      	bne.n	801026c <create_name+0x284>
				cf |= NS_LOSS | NS_LFN; break;
 801025e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010262:	f043 0303 	orr.w	r3, r3, #3
 8010266:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801026a:	e077      	b.n	801035c <create_name+0x374>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801026c:	69ba      	ldr	r2, [r7, #24]
 801026e:	697b      	ldr	r3, [r7, #20]
 8010270:	429a      	cmp	r2, r3
 8010272:	d005      	beq.n	8010280 <create_name+0x298>
 8010274:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010278:	f043 0303 	orr.w	r3, r3, #3
 801027c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8010280:	69ba      	ldr	r2, [r7, #24]
 8010282:	697b      	ldr	r3, [r7, #20]
 8010284:	429a      	cmp	r2, r3
 8010286:	d868      	bhi.n	801035a <create_name+0x372>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8010288:	697b      	ldr	r3, [r7, #20]
 801028a:	61bb      	str	r3, [r7, #24]
 801028c:	2308      	movs	r3, #8
 801028e:	623b      	str	r3, [r7, #32]
 8010290:	230b      	movs	r3, #11
 8010292:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8010294:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010298:	009b      	lsls	r3, r3, #2
 801029a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801029e:	e059      	b.n	8010354 <create_name+0x36c>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80102a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80102a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80102a4:	d914      	bls.n	80102d0 <create_name+0x2e8>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80102a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80102a8:	2100      	movs	r1, #0
 80102aa:	4618      	mov	r0, r3
 80102ac:	f001 fdf0 	bl	8011e90 <ff_convert>
 80102b0:	4603      	mov	r3, r0
 80102b2:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80102b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d004      	beq.n	80102c4 <create_name+0x2dc>
 80102ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80102bc:	3b80      	subs	r3, #128	@ 0x80
 80102be:	4a10      	ldr	r2, [pc, #64]	@ (8010300 <create_name+0x318>)
 80102c0:	5cd3      	ldrb	r3, [r2, r3]
 80102c2:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80102c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80102c8:	f043 0302 	orr.w	r3, r3, #2
 80102cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80102d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d007      	beq.n	80102e6 <create_name+0x2fe>
 80102d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80102d8:	4619      	mov	r1, r3
 80102da:	480a      	ldr	r0, [pc, #40]	@ (8010304 <create_name+0x31c>)
 80102dc:	f7fe fbb5 	bl	800ea4a <chk_chr>
 80102e0:	4603      	mov	r3, r0
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d010      	beq.n	8010308 <create_name+0x320>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80102e6:	235f      	movs	r3, #95	@ 0x5f
 80102e8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80102ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80102ee:	f043 0303 	orr.w	r3, r3, #3
 80102f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80102f6:	e023      	b.n	8010340 <create_name+0x358>
 80102f8:	080123b8 	.word	0x080123b8
 80102fc:	7ffffffe 	.word	0x7ffffffe
 8010300:	08012440 	.word	0x08012440
 8010304:	080123c4 	.word	0x080123c4
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8010308:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801030a:	2b40      	cmp	r3, #64	@ 0x40
 801030c:	d909      	bls.n	8010322 <create_name+0x33a>
 801030e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010310:	2b5a      	cmp	r3, #90	@ 0x5a
 8010312:	d806      	bhi.n	8010322 <create_name+0x33a>
					b |= 2;
 8010314:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010318:	f043 0302 	orr.w	r3, r3, #2
 801031c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010320:	e00e      	b.n	8010340 <create_name+0x358>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8010322:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010324:	2b60      	cmp	r3, #96	@ 0x60
 8010326:	d90b      	bls.n	8010340 <create_name+0x358>
 8010328:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801032a:	2b7a      	cmp	r3, #122	@ 0x7a
 801032c:	d808      	bhi.n	8010340 <create_name+0x358>
						b |= 1; w -= 0x20;
 801032e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010332:	f043 0301 	orr.w	r3, r3, #1
 8010336:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801033a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801033c:	3b20      	subs	r3, #32
 801033e:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8010340:	6a3b      	ldr	r3, [r7, #32]
 8010342:	1c5a      	adds	r2, r3, #1
 8010344:	623a      	str	r2, [r7, #32]
 8010346:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010348:	b2d1      	uxtb	r1, r2
 801034a:	687a      	ldr	r2, [r7, #4]
 801034c:	4413      	add	r3, r2
 801034e:	460a      	mov	r2, r1
 8010350:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8010354:	e75b      	b.n	801020e <create_name+0x226>
		if (!w) break;					/* Break on end of the LFN */
 8010356:	bf00      	nop
 8010358:	e000      	b.n	801035c <create_name+0x374>
			if (si > di) break;			/* No extension */
 801035a:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8010362:	2be5      	cmp	r3, #229	@ 0xe5
 8010364:	d103      	bne.n	801036e <create_name+0x386>
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	2205      	movs	r2, #5
 801036a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 801036e:	69fb      	ldr	r3, [r7, #28]
 8010370:	2b08      	cmp	r3, #8
 8010372:	d104      	bne.n	801037e <create_name+0x396>
 8010374:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010378:	009b      	lsls	r3, r3, #2
 801037a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801037e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010382:	f003 030c 	and.w	r3, r3, #12
 8010386:	2b0c      	cmp	r3, #12
 8010388:	d005      	beq.n	8010396 <create_name+0x3ae>
 801038a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801038e:	f003 0303 	and.w	r3, r3, #3
 8010392:	2b03      	cmp	r3, #3
 8010394:	d105      	bne.n	80103a2 <create_name+0x3ba>
 8010396:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801039a:	f043 0302 	orr.w	r3, r3, #2
 801039e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80103a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80103a6:	f003 0302 	and.w	r3, r3, #2
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d117      	bne.n	80103de <create_name+0x3f6>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80103ae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80103b2:	f003 0303 	and.w	r3, r3, #3
 80103b6:	2b01      	cmp	r3, #1
 80103b8:	d105      	bne.n	80103c6 <create_name+0x3de>
 80103ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80103be:	f043 0310 	orr.w	r3, r3, #16
 80103c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80103c6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80103ca:	f003 030c 	and.w	r3, r3, #12
 80103ce:	2b04      	cmp	r3, #4
 80103d0:	d105      	bne.n	80103de <create_name+0x3f6>
 80103d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80103d6:	f043 0308 	orr.w	r3, r3, #8
 80103da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80103e4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 80103e8:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80103ea:	4618      	mov	r0, r3
 80103ec:	3728      	adds	r7, #40	@ 0x28
 80103ee:	46bd      	mov	sp, r7
 80103f0:	bd80      	pop	{r7, pc}
 80103f2:	bf00      	nop

080103f4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b086      	sub	sp, #24
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]
 80103fc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010402:	693b      	ldr	r3, [r7, #16]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8010408:	683b      	ldr	r3, [r7, #0]
 801040a:	781b      	ldrb	r3, [r3, #0]
 801040c:	2b2f      	cmp	r3, #47	@ 0x2f
 801040e:	d00b      	beq.n	8010428 <follow_path+0x34>
 8010410:	683b      	ldr	r3, [r7, #0]
 8010412:	781b      	ldrb	r3, [r3, #0]
 8010414:	2b5c      	cmp	r3, #92	@ 0x5c
 8010416:	d007      	beq.n	8010428 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	69da      	ldr	r2, [r3, #28]
 801041c:	693b      	ldr	r3, [r7, #16]
 801041e:	609a      	str	r2, [r3, #8]
 8010420:	e00d      	b.n	801043e <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010422:	683b      	ldr	r3, [r7, #0]
 8010424:	3301      	adds	r3, #1
 8010426:	603b      	str	r3, [r7, #0]
 8010428:	683b      	ldr	r3, [r7, #0]
 801042a:	781b      	ldrb	r3, [r3, #0]
 801042c:	2b2f      	cmp	r3, #47	@ 0x2f
 801042e:	d0f8      	beq.n	8010422 <follow_path+0x2e>
 8010430:	683b      	ldr	r3, [r7, #0]
 8010432:	781b      	ldrb	r3, [r3, #0]
 8010434:	2b5c      	cmp	r3, #92	@ 0x5c
 8010436:	d0f4      	beq.n	8010422 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8010438:	693b      	ldr	r3, [r7, #16]
 801043a:	2200      	movs	r2, #0
 801043c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801043e:	683b      	ldr	r3, [r7, #0]
 8010440:	781b      	ldrb	r3, [r3, #0]
 8010442:	2b1f      	cmp	r3, #31
 8010444:	d80a      	bhi.n	801045c <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	2280      	movs	r2, #128	@ 0x80
 801044a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801044e:	2100      	movs	r1, #0
 8010450:	6878      	ldr	r0, [r7, #4]
 8010452:	f7ff f8a4 	bl	800f59e <dir_sdi>
 8010456:	4603      	mov	r3, r0
 8010458:	75fb      	strb	r3, [r7, #23]
 801045a:	e05b      	b.n	8010514 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801045c:	463b      	mov	r3, r7
 801045e:	4619      	mov	r1, r3
 8010460:	6878      	ldr	r0, [r7, #4]
 8010462:	f7ff fdc1 	bl	800ffe8 <create_name>
 8010466:	4603      	mov	r3, r0
 8010468:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801046a:	7dfb      	ldrb	r3, [r7, #23]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d14c      	bne.n	801050a <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010470:	6878      	ldr	r0, [r7, #4]
 8010472:	f7ff fc00 	bl	800fc76 <dir_find>
 8010476:	4603      	mov	r3, r0
 8010478:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010480:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8010482:	7dfb      	ldrb	r3, [r7, #23]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d01b      	beq.n	80104c0 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010488:	7dfb      	ldrb	r3, [r7, #23]
 801048a:	2b04      	cmp	r3, #4
 801048c:	d13f      	bne.n	801050e <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 801048e:	7afb      	ldrb	r3, [r7, #11]
 8010490:	f003 0320 	and.w	r3, r3, #32
 8010494:	2b00      	cmp	r3, #0
 8010496:	d00b      	beq.n	80104b0 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8010498:	7afb      	ldrb	r3, [r7, #11]
 801049a:	f003 0304 	and.w	r3, r3, #4
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d031      	beq.n	8010506 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	2280      	movs	r2, #128	@ 0x80
 80104a6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
						res = FR_OK;
 80104aa:	2300      	movs	r3, #0
 80104ac:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 80104ae:	e02e      	b.n	801050e <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80104b0:	7afb      	ldrb	r3, [r7, #11]
 80104b2:	f003 0304 	and.w	r3, r3, #4
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d129      	bne.n	801050e <follow_path+0x11a>
 80104ba:	2305      	movs	r3, #5
 80104bc:	75fb      	strb	r3, [r7, #23]
				break;
 80104be:	e026      	b.n	801050e <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80104c0:	7afb      	ldrb	r3, [r7, #11]
 80104c2:	f003 0304 	and.w	r3, r3, #4
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d123      	bne.n	8010512 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80104ca:	693b      	ldr	r3, [r7, #16]
 80104cc:	799b      	ldrb	r3, [r3, #6]
 80104ce:	f003 0310 	and.w	r3, r3, #16
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d102      	bne.n	80104dc <follow_path+0xe8>
				res = FR_NO_PATH; break;
 80104d6:	2305      	movs	r3, #5
 80104d8:	75fb      	strb	r3, [r7, #23]
 80104da:	e01b      	b.n	8010514 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	695b      	ldr	r3, [r3, #20]
 80104e6:	68fa      	ldr	r2, [r7, #12]
 80104e8:	8992      	ldrh	r2, [r2, #12]
 80104ea:	fbb3 f0f2 	udiv	r0, r3, r2
 80104ee:	fb00 f202 	mul.w	r2, r0, r2
 80104f2:	1a9b      	subs	r3, r3, r2
 80104f4:	440b      	add	r3, r1
 80104f6:	4619      	mov	r1, r3
 80104f8:	68f8      	ldr	r0, [r7, #12]
 80104fa:	f7ff f9f6 	bl	800f8ea <ld_clust>
 80104fe:	4602      	mov	r2, r0
 8010500:	693b      	ldr	r3, [r7, #16]
 8010502:	609a      	str	r2, [r3, #8]
 8010504:	e7aa      	b.n	801045c <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8010506:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010508:	e7a8      	b.n	801045c <follow_path+0x68>
			if (res != FR_OK) break;
 801050a:	bf00      	nop
 801050c:	e002      	b.n	8010514 <follow_path+0x120>
				break;
 801050e:	bf00      	nop
 8010510:	e000      	b.n	8010514 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010512:	bf00      	nop
			}
		}
	}

	return res;
 8010514:	7dfb      	ldrb	r3, [r7, #23]
}
 8010516:	4618      	mov	r0, r3
 8010518:	3718      	adds	r7, #24
 801051a:	46bd      	mov	sp, r7
 801051c:	bd80      	pop	{r7, pc}

0801051e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801051e:	b480      	push	{r7}
 8010520:	b087      	sub	sp, #28
 8010522:	af00      	add	r7, sp, #0
 8010524:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010526:	f04f 33ff 	mov.w	r3, #4294967295
 801052a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d031      	beq.n	8010598 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	617b      	str	r3, [r7, #20]
 801053a:	e002      	b.n	8010542 <get_ldnumber+0x24>
 801053c:	697b      	ldr	r3, [r7, #20]
 801053e:	3301      	adds	r3, #1
 8010540:	617b      	str	r3, [r7, #20]
 8010542:	697b      	ldr	r3, [r7, #20]
 8010544:	781b      	ldrb	r3, [r3, #0]
 8010546:	2b1f      	cmp	r3, #31
 8010548:	d903      	bls.n	8010552 <get_ldnumber+0x34>
 801054a:	697b      	ldr	r3, [r7, #20]
 801054c:	781b      	ldrb	r3, [r3, #0]
 801054e:	2b3a      	cmp	r3, #58	@ 0x3a
 8010550:	d1f4      	bne.n	801053c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010552:	697b      	ldr	r3, [r7, #20]
 8010554:	781b      	ldrb	r3, [r3, #0]
 8010556:	2b3a      	cmp	r3, #58	@ 0x3a
 8010558:	d11c      	bne.n	8010594 <get_ldnumber+0x76>
			tp = *path;
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	1c5a      	adds	r2, r3, #1
 8010564:	60fa      	str	r2, [r7, #12]
 8010566:	781b      	ldrb	r3, [r3, #0]
 8010568:	3b30      	subs	r3, #48	@ 0x30
 801056a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801056c:	68bb      	ldr	r3, [r7, #8]
 801056e:	2b09      	cmp	r3, #9
 8010570:	d80e      	bhi.n	8010590 <get_ldnumber+0x72>
 8010572:	68fa      	ldr	r2, [r7, #12]
 8010574:	697b      	ldr	r3, [r7, #20]
 8010576:	429a      	cmp	r2, r3
 8010578:	d10a      	bne.n	8010590 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801057a:	68bb      	ldr	r3, [r7, #8]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d107      	bne.n	8010590 <get_ldnumber+0x72>
					vol = (int)i;
 8010580:	68bb      	ldr	r3, [r7, #8]
 8010582:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010584:	697b      	ldr	r3, [r7, #20]
 8010586:	3301      	adds	r3, #1
 8010588:	617b      	str	r3, [r7, #20]
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	697a      	ldr	r2, [r7, #20]
 801058e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010590:	693b      	ldr	r3, [r7, #16]
 8010592:	e002      	b.n	801059a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010594:	2300      	movs	r3, #0
 8010596:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010598:	693b      	ldr	r3, [r7, #16]
}
 801059a:	4618      	mov	r0, r3
 801059c:	371c      	adds	r7, #28
 801059e:	46bd      	mov	sp, r7
 80105a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a4:	4770      	bx	lr
	...

080105a8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80105a8:	b580      	push	{r7, lr}
 80105aa:	b082      	sub	sp, #8
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	6078      	str	r0, [r7, #4]
 80105b0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	2200      	movs	r2, #0
 80105b6:	70da      	strb	r2, [r3, #3]
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	f04f 32ff 	mov.w	r2, #4294967295
 80105be:	639a      	str	r2, [r3, #56]	@ 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80105c0:	6839      	ldr	r1, [r7, #0]
 80105c2:	6878      	ldr	r0, [r7, #4]
 80105c4:	f7fe fc0c 	bl	800ede0 <move_window>
 80105c8:	4603      	mov	r3, r0
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d001      	beq.n	80105d2 <check_fs+0x2a>
 80105ce:	2304      	movs	r3, #4
 80105d0:	e038      	b.n	8010644 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	333c      	adds	r3, #60	@ 0x3c
 80105d6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80105da:	4618      	mov	r0, r3
 80105dc:	f7fe f950 	bl	800e880 <ld_word>
 80105e0:	4603      	mov	r3, r0
 80105e2:	461a      	mov	r2, r3
 80105e4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80105e8:	429a      	cmp	r2, r3
 80105ea:	d001      	beq.n	80105f0 <check_fs+0x48>
 80105ec:	2303      	movs	r3, #3
 80105ee:	e029      	b.n	8010644 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80105f6:	2be9      	cmp	r3, #233	@ 0xe9
 80105f8:	d009      	beq.n	801060e <check_fs+0x66>
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010600:	2beb      	cmp	r3, #235	@ 0xeb
 8010602:	d11e      	bne.n	8010642 <check_fs+0x9a>
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801060a:	2b90      	cmp	r3, #144	@ 0x90
 801060c:	d119      	bne.n	8010642 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	333c      	adds	r3, #60	@ 0x3c
 8010612:	3336      	adds	r3, #54	@ 0x36
 8010614:	4618      	mov	r0, r3
 8010616:	f7fe f94b 	bl	800e8b0 <ld_dword>
 801061a:	4603      	mov	r3, r0
 801061c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8010620:	4a0a      	ldr	r2, [pc, #40]	@ (801064c <check_fs+0xa4>)
 8010622:	4293      	cmp	r3, r2
 8010624:	d101      	bne.n	801062a <check_fs+0x82>
 8010626:	2300      	movs	r3, #0
 8010628:	e00c      	b.n	8010644 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	333c      	adds	r3, #60	@ 0x3c
 801062e:	3352      	adds	r3, #82	@ 0x52
 8010630:	4618      	mov	r0, r3
 8010632:	f7fe f93d 	bl	800e8b0 <ld_dword>
 8010636:	4603      	mov	r3, r0
 8010638:	4a05      	ldr	r2, [pc, #20]	@ (8010650 <check_fs+0xa8>)
 801063a:	4293      	cmp	r3, r2
 801063c:	d101      	bne.n	8010642 <check_fs+0x9a>
 801063e:	2300      	movs	r3, #0
 8010640:	e000      	b.n	8010644 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010642:	2302      	movs	r3, #2
}
 8010644:	4618      	mov	r0, r3
 8010646:	3708      	adds	r7, #8
 8010648:	46bd      	mov	sp, r7
 801064a:	bd80      	pop	{r7, pc}
 801064c:	00544146 	.word	0x00544146
 8010650:	33544146 	.word	0x33544146

08010654 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010654:	b580      	push	{r7, lr}
 8010656:	b096      	sub	sp, #88	@ 0x58
 8010658:	af00      	add	r7, sp, #0
 801065a:	60f8      	str	r0, [r7, #12]
 801065c:	60b9      	str	r1, [r7, #8]
 801065e:	4613      	mov	r3, r2
 8010660:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010662:	68bb      	ldr	r3, [r7, #8]
 8010664:	2200      	movs	r2, #0
 8010666:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010668:	68f8      	ldr	r0, [r7, #12]
 801066a:	f7ff ff58 	bl	801051e <get_ldnumber>
 801066e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010670:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010672:	2b00      	cmp	r3, #0
 8010674:	da01      	bge.n	801067a <find_volume+0x26>
 8010676:	230b      	movs	r3, #11
 8010678:	e268      	b.n	8010b4c <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801067a:	4a9f      	ldr	r2, [pc, #636]	@ (80108f8 <find_volume+0x2a4>)
 801067c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801067e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010682:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010686:	2b00      	cmp	r3, #0
 8010688:	d101      	bne.n	801068e <find_volume+0x3a>
 801068a:	230c      	movs	r3, #12
 801068c:	e25e      	b.n	8010b4c <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801068e:	68bb      	ldr	r3, [r7, #8]
 8010690:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010692:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010694:	79fb      	ldrb	r3, [r7, #7]
 8010696:	f023 0301 	bic.w	r3, r3, #1
 801069a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801069c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801069e:	781b      	ldrb	r3, [r3, #0]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d01a      	beq.n	80106da <find_volume+0x86>
		stat = disk_status(fs->drv);
 80106a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106a6:	785b      	ldrb	r3, [r3, #1]
 80106a8:	4618      	mov	r0, r3
 80106aa:	f7fe f849 	bl	800e740 <disk_status>
 80106ae:	4603      	mov	r3, r0
 80106b0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80106b4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80106b8:	f003 0301 	and.w	r3, r3, #1
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d10c      	bne.n	80106da <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80106c0:	79fb      	ldrb	r3, [r7, #7]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d007      	beq.n	80106d6 <find_volume+0x82>
 80106c6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80106ca:	f003 0304 	and.w	r3, r3, #4
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d001      	beq.n	80106d6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80106d2:	230a      	movs	r3, #10
 80106d4:	e23a      	b.n	8010b4c <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 80106d6:	2300      	movs	r3, #0
 80106d8:	e238      	b.n	8010b4c <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80106da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106dc:	2200      	movs	r2, #0
 80106de:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80106e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80106e2:	b2da      	uxtb	r2, r3
 80106e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106e6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80106e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106ea:	785b      	ldrb	r3, [r3, #1]
 80106ec:	4618      	mov	r0, r3
 80106ee:	f7fe f841 	bl	800e774 <disk_initialize>
 80106f2:	4603      	mov	r3, r0
 80106f4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80106f8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80106fc:	f003 0301 	and.w	r3, r3, #1
 8010700:	2b00      	cmp	r3, #0
 8010702:	d001      	beq.n	8010708 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010704:	2303      	movs	r3, #3
 8010706:	e221      	b.n	8010b4c <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010708:	79fb      	ldrb	r3, [r7, #7]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d007      	beq.n	801071e <find_volume+0xca>
 801070e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010712:	f003 0304 	and.w	r3, r3, #4
 8010716:	2b00      	cmp	r3, #0
 8010718:	d001      	beq.n	801071e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801071a:	230a      	movs	r3, #10
 801071c:	e216      	b.n	8010b4c <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801071e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010720:	7858      	ldrb	r0, [r3, #1]
 8010722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010724:	330c      	adds	r3, #12
 8010726:	461a      	mov	r2, r3
 8010728:	2102      	movs	r1, #2
 801072a:	f7fe f88b 	bl	800e844 <disk_ioctl>
 801072e:	4603      	mov	r3, r0
 8010730:	2b00      	cmp	r3, #0
 8010732:	d001      	beq.n	8010738 <find_volume+0xe4>
 8010734:	2301      	movs	r3, #1
 8010736:	e209      	b.n	8010b4c <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8010738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801073a:	899b      	ldrh	r3, [r3, #12]
 801073c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010740:	d80d      	bhi.n	801075e <find_volume+0x10a>
 8010742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010744:	899b      	ldrh	r3, [r3, #12]
 8010746:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801074a:	d308      	bcc.n	801075e <find_volume+0x10a>
 801074c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801074e:	899b      	ldrh	r3, [r3, #12]
 8010750:	461a      	mov	r2, r3
 8010752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010754:	899b      	ldrh	r3, [r3, #12]
 8010756:	3b01      	subs	r3, #1
 8010758:	4013      	ands	r3, r2
 801075a:	2b00      	cmp	r3, #0
 801075c:	d001      	beq.n	8010762 <find_volume+0x10e>
 801075e:	2301      	movs	r3, #1
 8010760:	e1f4      	b.n	8010b4c <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010762:	2300      	movs	r3, #0
 8010764:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010766:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010768:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801076a:	f7ff ff1d 	bl	80105a8 <check_fs>
 801076e:	4603      	mov	r3, r0
 8010770:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010774:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010778:	2b02      	cmp	r3, #2
 801077a:	d149      	bne.n	8010810 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801077c:	2300      	movs	r3, #0
 801077e:	643b      	str	r3, [r7, #64]	@ 0x40
 8010780:	e01e      	b.n	80107c0 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010784:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8010788:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801078a:	011b      	lsls	r3, r3, #4
 801078c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8010790:	4413      	add	r3, r2
 8010792:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010796:	3304      	adds	r3, #4
 8010798:	781b      	ldrb	r3, [r3, #0]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d006      	beq.n	80107ac <find_volume+0x158>
 801079e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107a0:	3308      	adds	r3, #8
 80107a2:	4618      	mov	r0, r3
 80107a4:	f7fe f884 	bl	800e8b0 <ld_dword>
 80107a8:	4602      	mov	r2, r0
 80107aa:	e000      	b.n	80107ae <find_volume+0x15a>
 80107ac:	2200      	movs	r2, #0
 80107ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80107b0:	009b      	lsls	r3, r3, #2
 80107b2:	3358      	adds	r3, #88	@ 0x58
 80107b4:	443b      	add	r3, r7
 80107b6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80107ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80107bc:	3301      	adds	r3, #1
 80107be:	643b      	str	r3, [r7, #64]	@ 0x40
 80107c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80107c2:	2b03      	cmp	r3, #3
 80107c4:	d9dd      	bls.n	8010782 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80107c6:	2300      	movs	r3, #0
 80107c8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80107ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d002      	beq.n	80107d6 <find_volume+0x182>
 80107d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80107d2:	3b01      	subs	r3, #1
 80107d4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80107d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80107d8:	009b      	lsls	r3, r3, #2
 80107da:	3358      	adds	r3, #88	@ 0x58
 80107dc:	443b      	add	r3, r7
 80107de:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80107e2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80107e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d005      	beq.n	80107f6 <find_volume+0x1a2>
 80107ea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80107ec:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80107ee:	f7ff fedb 	bl	80105a8 <check_fs>
 80107f2:	4603      	mov	r3, r0
 80107f4:	e000      	b.n	80107f8 <find_volume+0x1a4>
 80107f6:	2303      	movs	r3, #3
 80107f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80107fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010800:	2b01      	cmp	r3, #1
 8010802:	d905      	bls.n	8010810 <find_volume+0x1bc>
 8010804:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010806:	3301      	adds	r3, #1
 8010808:	643b      	str	r3, [r7, #64]	@ 0x40
 801080a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801080c:	2b03      	cmp	r3, #3
 801080e:	d9e2      	bls.n	80107d6 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010810:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010814:	2b04      	cmp	r3, #4
 8010816:	d101      	bne.n	801081c <find_volume+0x1c8>
 8010818:	2301      	movs	r3, #1
 801081a:	e197      	b.n	8010b4c <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801081c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010820:	2b01      	cmp	r3, #1
 8010822:	d901      	bls.n	8010828 <find_volume+0x1d4>
 8010824:	230d      	movs	r3, #13
 8010826:	e191      	b.n	8010b4c <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801082a:	333c      	adds	r3, #60	@ 0x3c
 801082c:	330b      	adds	r3, #11
 801082e:	4618      	mov	r0, r3
 8010830:	f7fe f826 	bl	800e880 <ld_word>
 8010834:	4603      	mov	r3, r0
 8010836:	461a      	mov	r2, r3
 8010838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801083a:	899b      	ldrh	r3, [r3, #12]
 801083c:	429a      	cmp	r2, r3
 801083e:	d001      	beq.n	8010844 <find_volume+0x1f0>
 8010840:	230d      	movs	r3, #13
 8010842:	e183      	b.n	8010b4c <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010846:	333c      	adds	r3, #60	@ 0x3c
 8010848:	3316      	adds	r3, #22
 801084a:	4618      	mov	r0, r3
 801084c:	f7fe f818 	bl	800e880 <ld_word>
 8010850:	4603      	mov	r3, r0
 8010852:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010854:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010856:	2b00      	cmp	r3, #0
 8010858:	d106      	bne.n	8010868 <find_volume+0x214>
 801085a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801085c:	333c      	adds	r3, #60	@ 0x3c
 801085e:	3324      	adds	r3, #36	@ 0x24
 8010860:	4618      	mov	r0, r3
 8010862:	f7fe f825 	bl	800e8b0 <ld_dword>
 8010866:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8010868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801086a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801086c:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801086e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010870:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 8010874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010876:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801087a:	789b      	ldrb	r3, [r3, #2]
 801087c:	2b01      	cmp	r3, #1
 801087e:	d005      	beq.n	801088c <find_volume+0x238>
 8010880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010882:	789b      	ldrb	r3, [r3, #2]
 8010884:	2b02      	cmp	r3, #2
 8010886:	d001      	beq.n	801088c <find_volume+0x238>
 8010888:	230d      	movs	r3, #13
 801088a:	e15f      	b.n	8010b4c <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801088c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801088e:	789b      	ldrb	r3, [r3, #2]
 8010890:	461a      	mov	r2, r3
 8010892:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010894:	fb02 f303 	mul.w	r3, r2, r3
 8010898:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801089a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801089c:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80108a0:	461a      	mov	r2, r3
 80108a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108a4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80108a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108a8:	895b      	ldrh	r3, [r3, #10]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d008      	beq.n	80108c0 <find_volume+0x26c>
 80108ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108b0:	895b      	ldrh	r3, [r3, #10]
 80108b2:	461a      	mov	r2, r3
 80108b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108b6:	895b      	ldrh	r3, [r3, #10]
 80108b8:	3b01      	subs	r3, #1
 80108ba:	4013      	ands	r3, r2
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d001      	beq.n	80108c4 <find_volume+0x270>
 80108c0:	230d      	movs	r3, #13
 80108c2:	e143      	b.n	8010b4c <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80108c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108c6:	333c      	adds	r3, #60	@ 0x3c
 80108c8:	3311      	adds	r3, #17
 80108ca:	4618      	mov	r0, r3
 80108cc:	f7fd ffd8 	bl	800e880 <ld_word>
 80108d0:	4603      	mov	r3, r0
 80108d2:	461a      	mov	r2, r3
 80108d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108d6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80108d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108da:	891b      	ldrh	r3, [r3, #8]
 80108dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80108de:	8992      	ldrh	r2, [r2, #12]
 80108e0:	0952      	lsrs	r2, r2, #5
 80108e2:	b292      	uxth	r2, r2
 80108e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80108e8:	fb01 f202 	mul.w	r2, r1, r2
 80108ec:	1a9b      	subs	r3, r3, r2
 80108ee:	b29b      	uxth	r3, r3
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d003      	beq.n	80108fc <find_volume+0x2a8>
 80108f4:	230d      	movs	r3, #13
 80108f6:	e129      	b.n	8010b4c <find_volume+0x4f8>
 80108f8:	240027a0 	.word	0x240027a0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80108fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108fe:	333c      	adds	r3, #60	@ 0x3c
 8010900:	3313      	adds	r3, #19
 8010902:	4618      	mov	r0, r3
 8010904:	f7fd ffbc 	bl	800e880 <ld_word>
 8010908:	4603      	mov	r3, r0
 801090a:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801090c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801090e:	2b00      	cmp	r3, #0
 8010910:	d106      	bne.n	8010920 <find_volume+0x2cc>
 8010912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010914:	333c      	adds	r3, #60	@ 0x3c
 8010916:	3320      	adds	r3, #32
 8010918:	4618      	mov	r0, r3
 801091a:	f7fd ffc9 	bl	800e8b0 <ld_dword>
 801091e:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010922:	333c      	adds	r3, #60	@ 0x3c
 8010924:	330e      	adds	r3, #14
 8010926:	4618      	mov	r0, r3
 8010928:	f7fd ffaa 	bl	800e880 <ld_word>
 801092c:	4603      	mov	r3, r0
 801092e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010930:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010932:	2b00      	cmp	r3, #0
 8010934:	d101      	bne.n	801093a <find_volume+0x2e6>
 8010936:	230d      	movs	r3, #13
 8010938:	e108      	b.n	8010b4c <find_volume+0x4f8>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801093a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801093c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801093e:	4413      	add	r3, r2
 8010940:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010942:	8911      	ldrh	r1, [r2, #8]
 8010944:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010946:	8992      	ldrh	r2, [r2, #12]
 8010948:	0952      	lsrs	r2, r2, #5
 801094a:	b292      	uxth	r2, r2
 801094c:	fbb1 f2f2 	udiv	r2, r1, r2
 8010950:	b292      	uxth	r2, r2
 8010952:	4413      	add	r3, r2
 8010954:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010956:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801095a:	429a      	cmp	r2, r3
 801095c:	d201      	bcs.n	8010962 <find_volume+0x30e>
 801095e:	230d      	movs	r3, #13
 8010960:	e0f4      	b.n	8010b4c <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010962:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010966:	1ad3      	subs	r3, r2, r3
 8010968:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801096a:	8952      	ldrh	r2, [r2, #10]
 801096c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010970:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010974:	2b00      	cmp	r3, #0
 8010976:	d101      	bne.n	801097c <find_volume+0x328>
 8010978:	230d      	movs	r3, #13
 801097a:	e0e7      	b.n	8010b4c <find_volume+0x4f8>
		fmt = FS_FAT32;
 801097c:	2303      	movs	r3, #3
 801097e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010984:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8010988:	4293      	cmp	r3, r2
 801098a:	d802      	bhi.n	8010992 <find_volume+0x33e>
 801098c:	2302      	movs	r3, #2
 801098e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010994:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8010998:	4293      	cmp	r3, r2
 801099a:	d802      	bhi.n	80109a2 <find_volume+0x34e>
 801099c:	2301      	movs	r3, #1
 801099e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80109a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109a4:	1c9a      	adds	r2, r3, #2
 80109a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109a8:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 80109aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109ac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80109ae:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80109b0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80109b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80109b4:	441a      	add	r2, r3
 80109b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109b8:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 80109ba:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80109bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109be:	441a      	add	r2, r3
 80109c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109c2:	635a      	str	r2, [r3, #52]	@ 0x34
		if (fmt == FS_FAT32) {
 80109c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80109c8:	2b03      	cmp	r3, #3
 80109ca:	d11e      	bne.n	8010a0a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80109cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109ce:	333c      	adds	r3, #60	@ 0x3c
 80109d0:	332a      	adds	r3, #42	@ 0x2a
 80109d2:	4618      	mov	r0, r3
 80109d4:	f7fd ff54 	bl	800e880 <ld_word>
 80109d8:	4603      	mov	r3, r0
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d001      	beq.n	80109e2 <find_volume+0x38e>
 80109de:	230d      	movs	r3, #13
 80109e0:	e0b4      	b.n	8010b4c <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80109e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109e4:	891b      	ldrh	r3, [r3, #8]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d001      	beq.n	80109ee <find_volume+0x39a>
 80109ea:	230d      	movs	r3, #13
 80109ec:	e0ae      	b.n	8010b4c <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80109ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109f0:	333c      	adds	r3, #60	@ 0x3c
 80109f2:	332c      	adds	r3, #44	@ 0x2c
 80109f4:	4618      	mov	r0, r3
 80109f6:	f7fd ff5b 	bl	800e8b0 <ld_dword>
 80109fa:	4602      	mov	r2, r0
 80109fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109fe:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a02:	6a1b      	ldr	r3, [r3, #32]
 8010a04:	009b      	lsls	r3, r3, #2
 8010a06:	647b      	str	r3, [r7, #68]	@ 0x44
 8010a08:	e01f      	b.n	8010a4a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a0c:	891b      	ldrh	r3, [r3, #8]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d101      	bne.n	8010a16 <find_volume+0x3c2>
 8010a12:	230d      	movs	r3, #13
 8010a14:	e09a      	b.n	8010b4c <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a1c:	441a      	add	r2, r3
 8010a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a20:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010a22:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010a26:	2b02      	cmp	r3, #2
 8010a28:	d103      	bne.n	8010a32 <find_volume+0x3de>
 8010a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a2c:	6a1b      	ldr	r3, [r3, #32]
 8010a2e:	005b      	lsls	r3, r3, #1
 8010a30:	e00a      	b.n	8010a48 <find_volume+0x3f4>
 8010a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a34:	6a1a      	ldr	r2, [r3, #32]
 8010a36:	4613      	mov	r3, r2
 8010a38:	005b      	lsls	r3, r3, #1
 8010a3a:	4413      	add	r3, r2
 8010a3c:	085a      	lsrs	r2, r3, #1
 8010a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a40:	6a1b      	ldr	r3, [r3, #32]
 8010a42:	f003 0301 	and.w	r3, r3, #1
 8010a46:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010a48:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a50:	899b      	ldrh	r3, [r3, #12]
 8010a52:	4619      	mov	r1, r3
 8010a54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010a56:	440b      	add	r3, r1
 8010a58:	3b01      	subs	r3, #1
 8010a5a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010a5c:	8989      	ldrh	r1, [r1, #12]
 8010a5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010a62:	429a      	cmp	r2, r3
 8010a64:	d201      	bcs.n	8010a6a <find_volume+0x416>
 8010a66:	230d      	movs	r3, #13
 8010a68:	e070      	b.n	8010b4c <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8010a70:	619a      	str	r2, [r3, #24]
 8010a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a74:	699a      	ldr	r2, [r3, #24]
 8010a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a78:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8010a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a7c:	2280      	movs	r2, #128	@ 0x80
 8010a7e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010a80:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010a84:	2b03      	cmp	r3, #3
 8010a86:	d149      	bne.n	8010b1c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a8a:	333c      	adds	r3, #60	@ 0x3c
 8010a8c:	3330      	adds	r3, #48	@ 0x30
 8010a8e:	4618      	mov	r0, r3
 8010a90:	f7fd fef6 	bl	800e880 <ld_word>
 8010a94:	4603      	mov	r3, r0
 8010a96:	2b01      	cmp	r3, #1
 8010a98:	d140      	bne.n	8010b1c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010a9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010a9c:	3301      	adds	r3, #1
 8010a9e:	4619      	mov	r1, r3
 8010aa0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010aa2:	f7fe f99d 	bl	800ede0 <move_window>
 8010aa6:	4603      	mov	r3, r0
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d137      	bne.n	8010b1c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8010aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010aae:	2200      	movs	r2, #0
 8010ab0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ab4:	333c      	adds	r3, #60	@ 0x3c
 8010ab6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010aba:	4618      	mov	r0, r3
 8010abc:	f7fd fee0 	bl	800e880 <ld_word>
 8010ac0:	4603      	mov	r3, r0
 8010ac2:	461a      	mov	r2, r3
 8010ac4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8010ac8:	429a      	cmp	r2, r3
 8010aca:	d127      	bne.n	8010b1c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ace:	333c      	adds	r3, #60	@ 0x3c
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	f7fd feed 	bl	800e8b0 <ld_dword>
 8010ad6:	4603      	mov	r3, r0
 8010ad8:	4a1e      	ldr	r2, [pc, #120]	@ (8010b54 <find_volume+0x500>)
 8010ada:	4293      	cmp	r3, r2
 8010adc:	d11e      	bne.n	8010b1c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ae0:	333c      	adds	r3, #60	@ 0x3c
 8010ae2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	f7fd fee2 	bl	800e8b0 <ld_dword>
 8010aec:	4603      	mov	r3, r0
 8010aee:	4a1a      	ldr	r2, [pc, #104]	@ (8010b58 <find_volume+0x504>)
 8010af0:	4293      	cmp	r3, r2
 8010af2:	d113      	bne.n	8010b1c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010af6:	333c      	adds	r3, #60	@ 0x3c
 8010af8:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8010afc:	4618      	mov	r0, r3
 8010afe:	f7fd fed7 	bl	800e8b0 <ld_dword>
 8010b02:	4602      	mov	r2, r0
 8010b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b06:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b0a:	333c      	adds	r3, #60	@ 0x3c
 8010b0c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8010b10:	4618      	mov	r0, r3
 8010b12:	f7fd fecd 	bl	800e8b0 <ld_dword>
 8010b16:	4602      	mov	r2, r0
 8010b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b1a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b1e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8010b22:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010b24:	4b0d      	ldr	r3, [pc, #52]	@ (8010b5c <find_volume+0x508>)
 8010b26:	881b      	ldrh	r3, [r3, #0]
 8010b28:	3301      	adds	r3, #1
 8010b2a:	b29a      	uxth	r2, r3
 8010b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8010b5c <find_volume+0x508>)
 8010b2e:	801a      	strh	r2, [r3, #0]
 8010b30:	4b0a      	ldr	r3, [pc, #40]	@ (8010b5c <find_volume+0x508>)
 8010b32:	881a      	ldrh	r2, [r3, #0]
 8010b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b36:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8010b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b3a:	4a09      	ldr	r2, [pc, #36]	@ (8010b60 <find_volume+0x50c>)
 8010b3c:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8010b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b40:	2200      	movs	r2, #0
 8010b42:	61da      	str	r2, [r3, #28]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010b44:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010b46:	f7fe f8e3 	bl	800ed10 <clear_lock>
#endif
	return FR_OK;
 8010b4a:	2300      	movs	r3, #0
}
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	3758      	adds	r7, #88	@ 0x58
 8010b50:	46bd      	mov	sp, r7
 8010b52:	bd80      	pop	{r7, pc}
 8010b54:	41615252 	.word	0x41615252
 8010b58:	61417272 	.word	0x61417272
 8010b5c:	240027a4 	.word	0x240027a4
 8010b60:	240027c8 	.word	0x240027c8

08010b64 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010b64:	b580      	push	{r7, lr}
 8010b66:	b084      	sub	sp, #16
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	6078      	str	r0, [r7, #4]
 8010b6c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010b6e:	2309      	movs	r3, #9
 8010b70:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d01c      	beq.n	8010bb2 <validate+0x4e>
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d018      	beq.n	8010bb2 <validate+0x4e>
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	781b      	ldrb	r3, [r3, #0]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d013      	beq.n	8010bb2 <validate+0x4e>
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	889a      	ldrh	r2, [r3, #4]
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	88db      	ldrh	r3, [r3, #6]
 8010b94:	429a      	cmp	r2, r3
 8010b96:	d10c      	bne.n	8010bb2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	785b      	ldrb	r3, [r3, #1]
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	f7fd fdce 	bl	800e740 <disk_status>
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	f003 0301 	and.w	r3, r3, #1
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d101      	bne.n	8010bb2 <validate+0x4e>
			res = FR_OK;
 8010bae:	2300      	movs	r3, #0
 8010bb0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010bb2:	7bfb      	ldrb	r3, [r7, #15]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d102      	bne.n	8010bbe <validate+0x5a>
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	e000      	b.n	8010bc0 <validate+0x5c>
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	683a      	ldr	r2, [r7, #0]
 8010bc2:	6013      	str	r3, [r2, #0]
	return res;
 8010bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	3710      	adds	r7, #16
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	bd80      	pop	{r7, pc}
	...

08010bd0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010bd0:	b580      	push	{r7, lr}
 8010bd2:	b088      	sub	sp, #32
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	60f8      	str	r0, [r7, #12]
 8010bd8:	60b9      	str	r1, [r7, #8]
 8010bda:	4613      	mov	r3, r2
 8010bdc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010bde:	68bb      	ldr	r3, [r7, #8]
 8010be0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010be2:	f107 0310 	add.w	r3, r7, #16
 8010be6:	4618      	mov	r0, r3
 8010be8:	f7ff fc99 	bl	801051e <get_ldnumber>
 8010bec:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010bee:	69fb      	ldr	r3, [r7, #28]
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	da01      	bge.n	8010bf8 <f_mount+0x28>
 8010bf4:	230b      	movs	r3, #11
 8010bf6:	e02b      	b.n	8010c50 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010bf8:	4a17      	ldr	r2, [pc, #92]	@ (8010c58 <f_mount+0x88>)
 8010bfa:	69fb      	ldr	r3, [r7, #28]
 8010bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c00:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010c02:	69bb      	ldr	r3, [r7, #24]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d005      	beq.n	8010c14 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010c08:	69b8      	ldr	r0, [r7, #24]
 8010c0a:	f7fe f881 	bl	800ed10 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010c0e:	69bb      	ldr	r3, [r7, #24]
 8010c10:	2200      	movs	r2, #0
 8010c12:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d002      	beq.n	8010c20 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	2200      	movs	r2, #0
 8010c1e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010c20:	68fa      	ldr	r2, [r7, #12]
 8010c22:	490d      	ldr	r1, [pc, #52]	@ (8010c58 <f_mount+0x88>)
 8010c24:	69fb      	ldr	r3, [r7, #28]
 8010c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d002      	beq.n	8010c36 <f_mount+0x66>
 8010c30:	79fb      	ldrb	r3, [r7, #7]
 8010c32:	2b01      	cmp	r3, #1
 8010c34:	d001      	beq.n	8010c3a <f_mount+0x6a>
 8010c36:	2300      	movs	r3, #0
 8010c38:	e00a      	b.n	8010c50 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010c3a:	f107 010c 	add.w	r1, r7, #12
 8010c3e:	f107 0308 	add.w	r3, r7, #8
 8010c42:	2200      	movs	r2, #0
 8010c44:	4618      	mov	r0, r3
 8010c46:	f7ff fd05 	bl	8010654 <find_volume>
 8010c4a:	4603      	mov	r3, r0
 8010c4c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c50:	4618      	mov	r0, r3
 8010c52:	3720      	adds	r7, #32
 8010c54:	46bd      	mov	sp, r7
 8010c56:	bd80      	pop	{r7, pc}
 8010c58:	240027a0 	.word	0x240027a0

08010c5c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	b09a      	sub	sp, #104	@ 0x68
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	60f8      	str	r0, [r7, #12]
 8010c64:	60b9      	str	r1, [r7, #8]
 8010c66:	4613      	mov	r3, r2
 8010c68:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d101      	bne.n	8010c74 <f_open+0x18>
 8010c70:	2309      	movs	r3, #9
 8010c72:	e1b7      	b.n	8010fe4 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010c74:	79fb      	ldrb	r3, [r7, #7]
 8010c76:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010c7a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010c7c:	79fa      	ldrb	r2, [r7, #7]
 8010c7e:	f107 0114 	add.w	r1, r7, #20
 8010c82:	f107 0308 	add.w	r3, r7, #8
 8010c86:	4618      	mov	r0, r3
 8010c88:	f7ff fce4 	bl	8010654 <find_volume>
 8010c8c:	4603      	mov	r3, r0
 8010c8e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8010c92:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	f040 819b 	bne.w	8010fd2 <f_open+0x376>
		dj.obj.fs = fs;
 8010c9c:	697b      	ldr	r3, [r7, #20]
 8010c9e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010ca0:	68ba      	ldr	r2, [r7, #8]
 8010ca2:	f107 0318 	add.w	r3, r7, #24
 8010ca6:	4611      	mov	r1, r2
 8010ca8:	4618      	mov	r0, r3
 8010caa:	f7ff fba3 	bl	80103f4 <follow_path>
 8010cae:	4603      	mov	r3, r0
 8010cb0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010cb4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d118      	bne.n	8010cee <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010cbc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8010cc0:	b25b      	sxtb	r3, r3
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	da03      	bge.n	8010cce <f_open+0x72>
				res = FR_INVALID_NAME;
 8010cc6:	2306      	movs	r3, #6
 8010cc8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8010ccc:	e00f      	b.n	8010cee <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010cce:	79fb      	ldrb	r3, [r7, #7]
 8010cd0:	2b01      	cmp	r3, #1
 8010cd2:	bf8c      	ite	hi
 8010cd4:	2301      	movhi	r3, #1
 8010cd6:	2300      	movls	r3, #0
 8010cd8:	b2db      	uxtb	r3, r3
 8010cda:	461a      	mov	r2, r3
 8010cdc:	f107 0318 	add.w	r3, r7, #24
 8010ce0:	4611      	mov	r1, r2
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	f7fd fecc 	bl	800ea80 <chk_lock>
 8010ce8:	4603      	mov	r3, r0
 8010cea:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010cee:	79fb      	ldrb	r3, [r7, #7]
 8010cf0:	f003 031c 	and.w	r3, r3, #28
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d07f      	beq.n	8010df8 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8010cf8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d017      	beq.n	8010d30 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010d00:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010d04:	2b04      	cmp	r3, #4
 8010d06:	d10e      	bne.n	8010d26 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010d08:	f7fd ff16 	bl	800eb38 <enq_lock>
 8010d0c:	4603      	mov	r3, r0
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d006      	beq.n	8010d20 <f_open+0xc4>
 8010d12:	f107 0318 	add.w	r3, r7, #24
 8010d16:	4618      	mov	r0, r3
 8010d18:	f7ff f86e 	bl	800fdf8 <dir_register>
 8010d1c:	4603      	mov	r3, r0
 8010d1e:	e000      	b.n	8010d22 <f_open+0xc6>
 8010d20:	2312      	movs	r3, #18
 8010d22:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010d26:	79fb      	ldrb	r3, [r7, #7]
 8010d28:	f043 0308 	orr.w	r3, r3, #8
 8010d2c:	71fb      	strb	r3, [r7, #7]
 8010d2e:	e010      	b.n	8010d52 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010d30:	7fbb      	ldrb	r3, [r7, #30]
 8010d32:	f003 0311 	and.w	r3, r3, #17
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d003      	beq.n	8010d42 <f_open+0xe6>
					res = FR_DENIED;
 8010d3a:	2307      	movs	r3, #7
 8010d3c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8010d40:	e007      	b.n	8010d52 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010d42:	79fb      	ldrb	r3, [r7, #7]
 8010d44:	f003 0304 	and.w	r3, r3, #4
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d002      	beq.n	8010d52 <f_open+0xf6>
 8010d4c:	2308      	movs	r3, #8
 8010d4e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010d52:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d168      	bne.n	8010e2c <f_open+0x1d0>
 8010d5a:	79fb      	ldrb	r3, [r7, #7]
 8010d5c:	f003 0308 	and.w	r3, r3, #8
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d063      	beq.n	8010e2c <f_open+0x1d0>
				dw = GET_FATTIME();
 8010d64:	f7fc ffca 	bl	800dcfc <get_fattime>
 8010d68:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d6c:	330e      	adds	r3, #14
 8010d6e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8010d70:	4618      	mov	r0, r3
 8010d72:	f7fd fddb 	bl	800e92c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d78:	3316      	adds	r3, #22
 8010d7a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	f7fd fdd5 	bl	800e92c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d84:	330b      	adds	r3, #11
 8010d86:	2220      	movs	r2, #32
 8010d88:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010d8a:	697b      	ldr	r3, [r7, #20]
 8010d8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010d8e:	4611      	mov	r1, r2
 8010d90:	4618      	mov	r0, r3
 8010d92:	f7fe fdaa 	bl	800f8ea <ld_clust>
 8010d96:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010d98:	697b      	ldr	r3, [r7, #20]
 8010d9a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	4618      	mov	r0, r3
 8010da0:	f7fe fdc2 	bl	800f928 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010da6:	331c      	adds	r3, #28
 8010da8:	2100      	movs	r1, #0
 8010daa:	4618      	mov	r0, r3
 8010dac:	f7fd fdbe 	bl	800e92c <st_dword>
					fs->wflag = 1;
 8010db0:	697b      	ldr	r3, [r7, #20]
 8010db2:	2201      	movs	r2, #1
 8010db4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010db6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d037      	beq.n	8010e2c <f_open+0x1d0>
						dw = fs->winsect;
 8010dbc:	697b      	ldr	r3, [r7, #20]
 8010dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010dc0:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8010dc2:	f107 0318 	add.w	r3, r7, #24
 8010dc6:	2200      	movs	r2, #0
 8010dc8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010dca:	4618      	mov	r0, r3
 8010dcc:	f7fe fab2 	bl	800f334 <remove_chain>
 8010dd0:	4603      	mov	r3, r0
 8010dd2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8010dd6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d126      	bne.n	8010e2c <f_open+0x1d0>
							res = move_window(fs, dw);
 8010dde:	697b      	ldr	r3, [r7, #20]
 8010de0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8010de2:	4618      	mov	r0, r3
 8010de4:	f7fd fffc 	bl	800ede0 <move_window>
 8010de8:	4603      	mov	r3, r0
 8010dea:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010dee:	697b      	ldr	r3, [r7, #20]
 8010df0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8010df2:	3a01      	subs	r2, #1
 8010df4:	615a      	str	r2, [r3, #20]
 8010df6:	e019      	b.n	8010e2c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010df8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d115      	bne.n	8010e2c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010e00:	7fbb      	ldrb	r3, [r7, #30]
 8010e02:	f003 0310 	and.w	r3, r3, #16
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d003      	beq.n	8010e12 <f_open+0x1b6>
					res = FR_NO_FILE;
 8010e0a:	2304      	movs	r3, #4
 8010e0c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8010e10:	e00c      	b.n	8010e2c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010e12:	79fb      	ldrb	r3, [r7, #7]
 8010e14:	f003 0302 	and.w	r3, r3, #2
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d007      	beq.n	8010e2c <f_open+0x1d0>
 8010e1c:	7fbb      	ldrb	r3, [r7, #30]
 8010e1e:	f003 0301 	and.w	r3, r3, #1
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d002      	beq.n	8010e2c <f_open+0x1d0>
						res = FR_DENIED;
 8010e26:	2307      	movs	r3, #7
 8010e28:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8010e2c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d126      	bne.n	8010e82 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010e34:	79fb      	ldrb	r3, [r7, #7]
 8010e36:	f003 0308 	and.w	r3, r3, #8
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d003      	beq.n	8010e46 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8010e3e:	79fb      	ldrb	r3, [r7, #7]
 8010e40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010e44:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010e46:	697b      	ldr	r3, [r7, #20]
 8010e48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8010e4e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010e54:	79fb      	ldrb	r3, [r7, #7]
 8010e56:	2b01      	cmp	r3, #1
 8010e58:	bf8c      	ite	hi
 8010e5a:	2301      	movhi	r3, #1
 8010e5c:	2300      	movls	r3, #0
 8010e5e:	b2db      	uxtb	r3, r3
 8010e60:	461a      	mov	r2, r3
 8010e62:	f107 0318 	add.w	r3, r7, #24
 8010e66:	4611      	mov	r1, r2
 8010e68:	4618      	mov	r0, r3
 8010e6a:	f7fd fe87 	bl	800eb7c <inc_lock>
 8010e6e:	4602      	mov	r2, r0
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	691b      	ldr	r3, [r3, #16]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d102      	bne.n	8010e82 <f_open+0x226>
 8010e7c:	2302      	movs	r3, #2
 8010e7e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010e82:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	f040 80a3 	bne.w	8010fd2 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010e8c:	697b      	ldr	r3, [r7, #20]
 8010e8e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010e90:	4611      	mov	r1, r2
 8010e92:	4618      	mov	r0, r3
 8010e94:	f7fe fd29 	bl	800f8ea <ld_clust>
 8010e98:	4602      	mov	r2, r0
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ea0:	331c      	adds	r3, #28
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	f7fd fd04 	bl	800e8b0 <ld_dword>
 8010ea8:	4602      	mov	r2, r0
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	2200      	movs	r2, #0
 8010eb2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010eb4:	697a      	ldr	r2, [r7, #20]
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010eba:	697b      	ldr	r3, [r7, #20]
 8010ebc:	88da      	ldrh	r2, [r3, #6]
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	79fa      	ldrb	r2, [r7, #7]
 8010ec6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	2200      	movs	r2, #0
 8010ecc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	2200      	movs	r2, #0
 8010ed2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	2200      	movs	r2, #0
 8010ed8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	3330      	adds	r3, #48	@ 0x30
 8010ede:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8010ee2:	2100      	movs	r1, #0
 8010ee4:	4618      	mov	r0, r3
 8010ee6:	f7fd fd6e 	bl	800e9c6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010eea:	79fb      	ldrb	r3, [r7, #7]
 8010eec:	f003 0320 	and.w	r3, r3, #32
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d06e      	beq.n	8010fd2 <f_open+0x376>
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	68db      	ldr	r3, [r3, #12]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d06a      	beq.n	8010fd2 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	68da      	ldr	r2, [r3, #12]
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010f04:	697b      	ldr	r3, [r7, #20]
 8010f06:	895b      	ldrh	r3, [r3, #10]
 8010f08:	461a      	mov	r2, r3
 8010f0a:	697b      	ldr	r3, [r7, #20]
 8010f0c:	899b      	ldrh	r3, [r3, #12]
 8010f0e:	fb02 f303 	mul.w	r3, r2, r3
 8010f12:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	689b      	ldr	r3, [r3, #8]
 8010f18:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	68db      	ldr	r3, [r3, #12]
 8010f1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010f20:	e016      	b.n	8010f50 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8010f26:	4618      	mov	r0, r3
 8010f28:	f7fe f817 	bl	800ef5a <get_fat>
 8010f2c:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8010f2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010f30:	2b01      	cmp	r3, #1
 8010f32:	d802      	bhi.n	8010f3a <f_open+0x2de>
 8010f34:	2302      	movs	r3, #2
 8010f36:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010f3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f40:	d102      	bne.n	8010f48 <f_open+0x2ec>
 8010f42:	2301      	movs	r3, #1
 8010f44:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010f48:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010f4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010f4c:	1ad3      	subs	r3, r2, r3
 8010f4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010f50:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d103      	bne.n	8010f60 <f_open+0x304>
 8010f58:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010f5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010f5c:	429a      	cmp	r2, r3
 8010f5e:	d8e0      	bhi.n	8010f22 <f_open+0x2c6>
				}
				fp->clust = clst;
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010f64:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010f66:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d131      	bne.n	8010fd2 <f_open+0x376>
 8010f6e:	697b      	ldr	r3, [r7, #20]
 8010f70:	899b      	ldrh	r3, [r3, #12]
 8010f72:	461a      	mov	r2, r3
 8010f74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010f76:	fbb3 f1f2 	udiv	r1, r3, r2
 8010f7a:	fb01 f202 	mul.w	r2, r1, r2
 8010f7e:	1a9b      	subs	r3, r3, r2
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d026      	beq.n	8010fd2 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010f84:	697b      	ldr	r3, [r7, #20]
 8010f86:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8010f88:	4618      	mov	r0, r3
 8010f8a:	f7fd ffc7 	bl	800ef1c <clust2sect>
 8010f8e:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8010f90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d103      	bne.n	8010f9e <f_open+0x342>
						res = FR_INT_ERR;
 8010f96:	2302      	movs	r3, #2
 8010f98:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8010f9c:	e019      	b.n	8010fd2 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010f9e:	697b      	ldr	r3, [r7, #20]
 8010fa0:	899b      	ldrh	r3, [r3, #12]
 8010fa2:	461a      	mov	r2, r3
 8010fa4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010fa6:	fbb3 f2f2 	udiv	r2, r3, r2
 8010faa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010fac:	441a      	add	r2, r3
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010fb2:	697b      	ldr	r3, [r7, #20]
 8010fb4:	7858      	ldrb	r0, [r3, #1]
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	6a1a      	ldr	r2, [r3, #32]
 8010fc0:	2301      	movs	r3, #1
 8010fc2:	f7fd fbff 	bl	800e7c4 <disk_read>
 8010fc6:	4603      	mov	r3, r0
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d002      	beq.n	8010fd2 <f_open+0x376>
 8010fcc:	2301      	movs	r3, #1
 8010fce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010fd2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d002      	beq.n	8010fe0 <f_open+0x384>
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	2200      	movs	r2, #0
 8010fde:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010fe0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	3768      	adds	r7, #104	@ 0x68
 8010fe8:	46bd      	mov	sp, r7
 8010fea:	bd80      	pop	{r7, pc}

08010fec <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b08c      	sub	sp, #48	@ 0x30
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	60f8      	str	r0, [r7, #12]
 8010ff4:	60b9      	str	r1, [r7, #8]
 8010ff6:	607a      	str	r2, [r7, #4]
 8010ff8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010ffa:	68bb      	ldr	r3, [r7, #8]
 8010ffc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010ffe:	683b      	ldr	r3, [r7, #0]
 8011000:	2200      	movs	r2, #0
 8011002:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	f107 0210 	add.w	r2, r7, #16
 801100a:	4611      	mov	r1, r2
 801100c:	4618      	mov	r0, r3
 801100e:	f7ff fda9 	bl	8010b64 <validate>
 8011012:	4603      	mov	r3, r0
 8011014:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011018:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801101c:	2b00      	cmp	r3, #0
 801101e:	d107      	bne.n	8011030 <f_write+0x44>
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	7d5b      	ldrb	r3, [r3, #21]
 8011024:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8011028:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801102c:	2b00      	cmp	r3, #0
 801102e:	d002      	beq.n	8011036 <f_write+0x4a>
 8011030:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011034:	e16a      	b.n	801130c <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	7d1b      	ldrb	r3, [r3, #20]
 801103a:	f003 0302 	and.w	r3, r3, #2
 801103e:	2b00      	cmp	r3, #0
 8011040:	d101      	bne.n	8011046 <f_write+0x5a>
 8011042:	2307      	movs	r3, #7
 8011044:	e162      	b.n	801130c <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	699a      	ldr	r2, [r3, #24]
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	441a      	add	r2, r3
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	699b      	ldr	r3, [r3, #24]
 8011052:	429a      	cmp	r2, r3
 8011054:	f080 814c 	bcs.w	80112f0 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	699b      	ldr	r3, [r3, #24]
 801105c:	43db      	mvns	r3, r3
 801105e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8011060:	e146      	b.n	80112f0 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	699b      	ldr	r3, [r3, #24]
 8011066:	693a      	ldr	r2, [r7, #16]
 8011068:	8992      	ldrh	r2, [r2, #12]
 801106a:	fbb3 f1f2 	udiv	r1, r3, r2
 801106e:	fb01 f202 	mul.w	r2, r1, r2
 8011072:	1a9b      	subs	r3, r3, r2
 8011074:	2b00      	cmp	r3, #0
 8011076:	f040 80f1 	bne.w	801125c <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	699b      	ldr	r3, [r3, #24]
 801107e:	693a      	ldr	r2, [r7, #16]
 8011080:	8992      	ldrh	r2, [r2, #12]
 8011082:	fbb3 f3f2 	udiv	r3, r3, r2
 8011086:	693a      	ldr	r2, [r7, #16]
 8011088:	8952      	ldrh	r2, [r2, #10]
 801108a:	3a01      	subs	r2, #1
 801108c:	4013      	ands	r3, r2
 801108e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8011090:	69bb      	ldr	r3, [r7, #24]
 8011092:	2b00      	cmp	r3, #0
 8011094:	d143      	bne.n	801111e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	699b      	ldr	r3, [r3, #24]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d10c      	bne.n	80110b8 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	689b      	ldr	r3, [r3, #8]
 80110a2:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80110a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d11a      	bne.n	80110e0 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	2100      	movs	r1, #0
 80110ae:	4618      	mov	r0, r3
 80110b0:	f7fe f9a5 	bl	800f3fe <create_chain>
 80110b4:	62b8      	str	r0, [r7, #40]	@ 0x28
 80110b6:	e013      	b.n	80110e0 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d007      	beq.n	80110d0 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	699b      	ldr	r3, [r3, #24]
 80110c4:	4619      	mov	r1, r3
 80110c6:	68f8      	ldr	r0, [r7, #12]
 80110c8:	f7fe fa31 	bl	800f52e <clmt_clust>
 80110cc:	62b8      	str	r0, [r7, #40]	@ 0x28
 80110ce:	e007      	b.n	80110e0 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80110d0:	68fa      	ldr	r2, [r7, #12]
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	69db      	ldr	r3, [r3, #28]
 80110d6:	4619      	mov	r1, r3
 80110d8:	4610      	mov	r0, r2
 80110da:	f7fe f990 	bl	800f3fe <create_chain>
 80110de:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80110e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	f000 8109 	beq.w	80112fa <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80110e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110ea:	2b01      	cmp	r3, #1
 80110ec:	d104      	bne.n	80110f8 <f_write+0x10c>
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	2202      	movs	r2, #2
 80110f2:	755a      	strb	r2, [r3, #21]
 80110f4:	2302      	movs	r3, #2
 80110f6:	e109      	b.n	801130c <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80110f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110fe:	d104      	bne.n	801110a <f_write+0x11e>
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	2201      	movs	r2, #1
 8011104:	755a      	strb	r2, [r3, #21]
 8011106:	2301      	movs	r3, #1
 8011108:	e100      	b.n	801130c <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801110e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	689b      	ldr	r3, [r3, #8]
 8011114:	2b00      	cmp	r3, #0
 8011116:	d102      	bne.n	801111e <f_write+0x132>
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801111c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	7d1b      	ldrb	r3, [r3, #20]
 8011122:	b25b      	sxtb	r3, r3
 8011124:	2b00      	cmp	r3, #0
 8011126:	da18      	bge.n	801115a <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011128:	693b      	ldr	r3, [r7, #16]
 801112a:	7858      	ldrb	r0, [r3, #1]
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	6a1a      	ldr	r2, [r3, #32]
 8011136:	2301      	movs	r3, #1
 8011138:	f7fd fb64 	bl	800e804 <disk_write>
 801113c:	4603      	mov	r3, r0
 801113e:	2b00      	cmp	r3, #0
 8011140:	d004      	beq.n	801114c <f_write+0x160>
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	2201      	movs	r2, #1
 8011146:	755a      	strb	r2, [r3, #21]
 8011148:	2301      	movs	r3, #1
 801114a:	e0df      	b.n	801130c <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	7d1b      	ldrb	r3, [r3, #20]
 8011150:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011154:	b2da      	uxtb	r2, r3
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801115a:	693a      	ldr	r2, [r7, #16]
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	69db      	ldr	r3, [r3, #28]
 8011160:	4619      	mov	r1, r3
 8011162:	4610      	mov	r0, r2
 8011164:	f7fd feda 	bl	800ef1c <clust2sect>
 8011168:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801116a:	697b      	ldr	r3, [r7, #20]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d104      	bne.n	801117a <f_write+0x18e>
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	2202      	movs	r2, #2
 8011174:	755a      	strb	r2, [r3, #21]
 8011176:	2302      	movs	r3, #2
 8011178:	e0c8      	b.n	801130c <f_write+0x320>
			sect += csect;
 801117a:	697a      	ldr	r2, [r7, #20]
 801117c:	69bb      	ldr	r3, [r7, #24]
 801117e:	4413      	add	r3, r2
 8011180:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011182:	693b      	ldr	r3, [r7, #16]
 8011184:	899b      	ldrh	r3, [r3, #12]
 8011186:	461a      	mov	r2, r3
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	fbb3 f3f2 	udiv	r3, r3, r2
 801118e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011190:	6a3b      	ldr	r3, [r7, #32]
 8011192:	2b00      	cmp	r3, #0
 8011194:	d043      	beq.n	801121e <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011196:	69ba      	ldr	r2, [r7, #24]
 8011198:	6a3b      	ldr	r3, [r7, #32]
 801119a:	4413      	add	r3, r2
 801119c:	693a      	ldr	r2, [r7, #16]
 801119e:	8952      	ldrh	r2, [r2, #10]
 80111a0:	4293      	cmp	r3, r2
 80111a2:	d905      	bls.n	80111b0 <f_write+0x1c4>
					cc = fs->csize - csect;
 80111a4:	693b      	ldr	r3, [r7, #16]
 80111a6:	895b      	ldrh	r3, [r3, #10]
 80111a8:	461a      	mov	r2, r3
 80111aa:	69bb      	ldr	r3, [r7, #24]
 80111ac:	1ad3      	subs	r3, r2, r3
 80111ae:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80111b0:	693b      	ldr	r3, [r7, #16]
 80111b2:	7858      	ldrb	r0, [r3, #1]
 80111b4:	6a3b      	ldr	r3, [r7, #32]
 80111b6:	697a      	ldr	r2, [r7, #20]
 80111b8:	69f9      	ldr	r1, [r7, #28]
 80111ba:	f7fd fb23 	bl	800e804 <disk_write>
 80111be:	4603      	mov	r3, r0
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d004      	beq.n	80111ce <f_write+0x1e2>
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	2201      	movs	r2, #1
 80111c8:	755a      	strb	r2, [r3, #21]
 80111ca:	2301      	movs	r3, #1
 80111cc:	e09e      	b.n	801130c <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	6a1a      	ldr	r2, [r3, #32]
 80111d2:	697b      	ldr	r3, [r7, #20]
 80111d4:	1ad3      	subs	r3, r2, r3
 80111d6:	6a3a      	ldr	r2, [r7, #32]
 80111d8:	429a      	cmp	r2, r3
 80111da:	d918      	bls.n	801120e <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	6a1a      	ldr	r2, [r3, #32]
 80111e6:	697b      	ldr	r3, [r7, #20]
 80111e8:	1ad3      	subs	r3, r2, r3
 80111ea:	693a      	ldr	r2, [r7, #16]
 80111ec:	8992      	ldrh	r2, [r2, #12]
 80111ee:	fb02 f303 	mul.w	r3, r2, r3
 80111f2:	69fa      	ldr	r2, [r7, #28]
 80111f4:	18d1      	adds	r1, r2, r3
 80111f6:	693b      	ldr	r3, [r7, #16]
 80111f8:	899b      	ldrh	r3, [r3, #12]
 80111fa:	461a      	mov	r2, r3
 80111fc:	f7fd fbc2 	bl	800e984 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	7d1b      	ldrb	r3, [r3, #20]
 8011204:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011208:	b2da      	uxtb	r2, r3
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801120e:	693b      	ldr	r3, [r7, #16]
 8011210:	899b      	ldrh	r3, [r3, #12]
 8011212:	461a      	mov	r2, r3
 8011214:	6a3b      	ldr	r3, [r7, #32]
 8011216:	fb02 f303 	mul.w	r3, r2, r3
 801121a:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801121c:	e04b      	b.n	80112b6 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	6a1b      	ldr	r3, [r3, #32]
 8011222:	697a      	ldr	r2, [r7, #20]
 8011224:	429a      	cmp	r2, r3
 8011226:	d016      	beq.n	8011256 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	699a      	ldr	r2, [r3, #24]
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011230:	429a      	cmp	r2, r3
 8011232:	d210      	bcs.n	8011256 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011234:	693b      	ldr	r3, [r7, #16]
 8011236:	7858      	ldrb	r0, [r3, #1]
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801123e:	2301      	movs	r3, #1
 8011240:	697a      	ldr	r2, [r7, #20]
 8011242:	f7fd fabf 	bl	800e7c4 <disk_read>
 8011246:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8011248:	2b00      	cmp	r3, #0
 801124a:	d004      	beq.n	8011256 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	2201      	movs	r2, #1
 8011250:	755a      	strb	r2, [r3, #21]
 8011252:	2301      	movs	r3, #1
 8011254:	e05a      	b.n	801130c <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	697a      	ldr	r2, [r7, #20]
 801125a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801125c:	693b      	ldr	r3, [r7, #16]
 801125e:	899b      	ldrh	r3, [r3, #12]
 8011260:	4618      	mov	r0, r3
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	699b      	ldr	r3, [r3, #24]
 8011266:	693a      	ldr	r2, [r7, #16]
 8011268:	8992      	ldrh	r2, [r2, #12]
 801126a:	fbb3 f1f2 	udiv	r1, r3, r2
 801126e:	fb01 f202 	mul.w	r2, r1, r2
 8011272:	1a9b      	subs	r3, r3, r2
 8011274:	1ac3      	subs	r3, r0, r3
 8011276:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8011278:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	429a      	cmp	r2, r3
 801127e:	d901      	bls.n	8011284 <f_write+0x298>
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	699b      	ldr	r3, [r3, #24]
 801128e:	693a      	ldr	r2, [r7, #16]
 8011290:	8992      	ldrh	r2, [r2, #12]
 8011292:	fbb3 f0f2 	udiv	r0, r3, r2
 8011296:	fb00 f202 	mul.w	r2, r0, r2
 801129a:	1a9b      	subs	r3, r3, r2
 801129c:	440b      	add	r3, r1
 801129e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80112a0:	69f9      	ldr	r1, [r7, #28]
 80112a2:	4618      	mov	r0, r3
 80112a4:	f7fd fb6e 	bl	800e984 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	7d1b      	ldrb	r3, [r3, #20]
 80112ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80112b0:	b2da      	uxtb	r2, r3
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80112b6:	69fa      	ldr	r2, [r7, #28]
 80112b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112ba:	4413      	add	r3, r2
 80112bc:	61fb      	str	r3, [r7, #28]
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	699a      	ldr	r2, [r3, #24]
 80112c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112c4:	441a      	add	r2, r3
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	619a      	str	r2, [r3, #24]
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	68da      	ldr	r2, [r3, #12]
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	699b      	ldr	r3, [r3, #24]
 80112d2:	429a      	cmp	r2, r3
 80112d4:	bf38      	it	cc
 80112d6:	461a      	movcc	r2, r3
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	60da      	str	r2, [r3, #12]
 80112dc:	683b      	ldr	r3, [r7, #0]
 80112de:	681a      	ldr	r2, [r3, #0]
 80112e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112e2:	441a      	add	r2, r3
 80112e4:	683b      	ldr	r3, [r7, #0]
 80112e6:	601a      	str	r2, [r3, #0]
 80112e8:	687a      	ldr	r2, [r7, #4]
 80112ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112ec:	1ad3      	subs	r3, r2, r3
 80112ee:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	f47f aeb5 	bne.w	8011062 <f_write+0x76>
 80112f8:	e000      	b.n	80112fc <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80112fa:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	7d1b      	ldrb	r3, [r3, #20]
 8011300:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011304:	b2da      	uxtb	r2, r3
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801130a:	2300      	movs	r3, #0
}
 801130c:	4618      	mov	r0, r3
 801130e:	3730      	adds	r7, #48	@ 0x30
 8011310:	46bd      	mov	sp, r7
 8011312:	bd80      	pop	{r7, pc}

08011314 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011314:	b580      	push	{r7, lr}
 8011316:	b086      	sub	sp, #24
 8011318:	af00      	add	r7, sp, #0
 801131a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	f107 0208 	add.w	r2, r7, #8
 8011322:	4611      	mov	r1, r2
 8011324:	4618      	mov	r0, r3
 8011326:	f7ff fc1d 	bl	8010b64 <validate>
 801132a:	4603      	mov	r3, r0
 801132c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801132e:	7dfb      	ldrb	r3, [r7, #23]
 8011330:	2b00      	cmp	r3, #0
 8011332:	d168      	bne.n	8011406 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	7d1b      	ldrb	r3, [r3, #20]
 8011338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801133c:	2b00      	cmp	r3, #0
 801133e:	d062      	beq.n	8011406 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	7d1b      	ldrb	r3, [r3, #20]
 8011344:	b25b      	sxtb	r3, r3
 8011346:	2b00      	cmp	r3, #0
 8011348:	da15      	bge.n	8011376 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801134a:	68bb      	ldr	r3, [r7, #8]
 801134c:	7858      	ldrb	r0, [r3, #1]
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	6a1a      	ldr	r2, [r3, #32]
 8011358:	2301      	movs	r3, #1
 801135a:	f7fd fa53 	bl	800e804 <disk_write>
 801135e:	4603      	mov	r3, r0
 8011360:	2b00      	cmp	r3, #0
 8011362:	d001      	beq.n	8011368 <f_sync+0x54>
 8011364:	2301      	movs	r3, #1
 8011366:	e04f      	b.n	8011408 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	7d1b      	ldrb	r3, [r3, #20]
 801136c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011370:	b2da      	uxtb	r2, r3
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011376:	f7fc fcc1 	bl	800dcfc <get_fattime>
 801137a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801137c:	68ba      	ldr	r2, [r7, #8]
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011382:	4619      	mov	r1, r3
 8011384:	4610      	mov	r0, r2
 8011386:	f7fd fd2b 	bl	800ede0 <move_window>
 801138a:	4603      	mov	r3, r0
 801138c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801138e:	7dfb      	ldrb	r3, [r7, #23]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d138      	bne.n	8011406 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011398:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	330b      	adds	r3, #11
 801139e:	781a      	ldrb	r2, [r3, #0]
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	330b      	adds	r3, #11
 80113a4:	f042 0220 	orr.w	r2, r2, #32
 80113a8:	b2d2      	uxtb	r2, r2
 80113aa:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	6818      	ldr	r0, [r3, #0]
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	689b      	ldr	r3, [r3, #8]
 80113b4:	461a      	mov	r2, r3
 80113b6:	68f9      	ldr	r1, [r7, #12]
 80113b8:	f7fe fab6 	bl	800f928 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	f103 021c 	add.w	r2, r3, #28
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	68db      	ldr	r3, [r3, #12]
 80113c6:	4619      	mov	r1, r3
 80113c8:	4610      	mov	r0, r2
 80113ca:	f7fd faaf 	bl	800e92c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	3316      	adds	r3, #22
 80113d2:	6939      	ldr	r1, [r7, #16]
 80113d4:	4618      	mov	r0, r3
 80113d6:	f7fd faa9 	bl	800e92c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	3312      	adds	r3, #18
 80113de:	2100      	movs	r1, #0
 80113e0:	4618      	mov	r0, r3
 80113e2:	f7fd fa88 	bl	800e8f6 <st_word>
					fs->wflag = 1;
 80113e6:	68bb      	ldr	r3, [r7, #8]
 80113e8:	2201      	movs	r2, #1
 80113ea:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80113ec:	68bb      	ldr	r3, [r7, #8]
 80113ee:	4618      	mov	r0, r3
 80113f0:	f7fd fd24 	bl	800ee3c <sync_fs>
 80113f4:	4603      	mov	r3, r0
 80113f6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	7d1b      	ldrb	r3, [r3, #20]
 80113fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011400:	b2da      	uxtb	r2, r3
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011406:	7dfb      	ldrb	r3, [r7, #23]
}
 8011408:	4618      	mov	r0, r3
 801140a:	3718      	adds	r7, #24
 801140c:	46bd      	mov	sp, r7
 801140e:	bd80      	pop	{r7, pc}

08011410 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011410:	b580      	push	{r7, lr}
 8011412:	b084      	sub	sp, #16
 8011414:	af00      	add	r7, sp, #0
 8011416:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011418:	6878      	ldr	r0, [r7, #4]
 801141a:	f7ff ff7b 	bl	8011314 <f_sync>
 801141e:	4603      	mov	r3, r0
 8011420:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011422:	7bfb      	ldrb	r3, [r7, #15]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d118      	bne.n	801145a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	f107 0208 	add.w	r2, r7, #8
 801142e:	4611      	mov	r1, r2
 8011430:	4618      	mov	r0, r3
 8011432:	f7ff fb97 	bl	8010b64 <validate>
 8011436:	4603      	mov	r3, r0
 8011438:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801143a:	7bfb      	ldrb	r3, [r7, #15]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d10c      	bne.n	801145a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	691b      	ldr	r3, [r3, #16]
 8011444:	4618      	mov	r0, r3
 8011446:	f7fd fc27 	bl	800ec98 <dec_lock>
 801144a:	4603      	mov	r3, r0
 801144c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801144e:	7bfb      	ldrb	r3, [r7, #15]
 8011450:	2b00      	cmp	r3, #0
 8011452:	d102      	bne.n	801145a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	2200      	movs	r2, #0
 8011458:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801145a:	7bfb      	ldrb	r3, [r7, #15]
}
 801145c:	4618      	mov	r0, r3
 801145e:	3710      	adds	r7, #16
 8011460:	46bd      	mov	sp, r7
 8011462:	bd80      	pop	{r7, pc}

08011464 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8011464:	b580      	push	{r7, lr}
 8011466:	b090      	sub	sp, #64	@ 0x40
 8011468:	af00      	add	r7, sp, #0
 801146a:	6078      	str	r0, [r7, #4]
 801146c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	f107 0208 	add.w	r2, r7, #8
 8011474:	4611      	mov	r1, r2
 8011476:	4618      	mov	r0, r3
 8011478:	f7ff fb74 	bl	8010b64 <validate>
 801147c:	4603      	mov	r3, r0
 801147e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8011482:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011486:	2b00      	cmp	r3, #0
 8011488:	d103      	bne.n	8011492 <f_lseek+0x2e>
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	7d5b      	ldrb	r3, [r3, #21]
 801148e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8011492:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011496:	2b00      	cmp	r3, #0
 8011498:	d002      	beq.n	80114a0 <f_lseek+0x3c>
 801149a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801149e:	e201      	b.n	80118a4 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	f000 80d9 	beq.w	801165c <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80114aa:	683b      	ldr	r3, [r7, #0]
 80114ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114b0:	d15a      	bne.n	8011568 <f_lseek+0x104>
			tbl = fp->cltbl;
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114b6:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80114b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114ba:	1d1a      	adds	r2, r3, #4
 80114bc:	627a      	str	r2, [r7, #36]	@ 0x24
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	617b      	str	r3, [r7, #20]
 80114c2:	2302      	movs	r3, #2
 80114c4:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	689b      	ldr	r3, [r3, #8]
 80114ca:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 80114cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d03a      	beq.n	8011548 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80114d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114d4:	613b      	str	r3, [r7, #16]
 80114d6:	2300      	movs	r3, #0
 80114d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80114da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80114dc:	3302      	adds	r3, #2
 80114de:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 80114e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114e2:	60fb      	str	r3, [r7, #12]
 80114e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114e6:	3301      	adds	r3, #1
 80114e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80114ee:	4618      	mov	r0, r3
 80114f0:	f7fd fd33 	bl	800ef5a <get_fat>
 80114f4:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80114f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114f8:	2b01      	cmp	r3, #1
 80114fa:	d804      	bhi.n	8011506 <f_lseek+0xa2>
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	2202      	movs	r2, #2
 8011500:	755a      	strb	r2, [r3, #21]
 8011502:	2302      	movs	r3, #2
 8011504:	e1ce      	b.n	80118a4 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011508:	f1b3 3fff 	cmp.w	r3, #4294967295
 801150c:	d104      	bne.n	8011518 <f_lseek+0xb4>
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	2201      	movs	r2, #1
 8011512:	755a      	strb	r2, [r3, #21]
 8011514:	2301      	movs	r3, #1
 8011516:	e1c5      	b.n	80118a4 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	3301      	adds	r3, #1
 801151c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801151e:	429a      	cmp	r2, r3
 8011520:	d0de      	beq.n	80114e0 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8011522:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011524:	697b      	ldr	r3, [r7, #20]
 8011526:	429a      	cmp	r2, r3
 8011528:	d809      	bhi.n	801153e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 801152a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801152c:	1d1a      	adds	r2, r3, #4
 801152e:	627a      	str	r2, [r7, #36]	@ 0x24
 8011530:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011532:	601a      	str	r2, [r3, #0]
 8011534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011536:	1d1a      	adds	r2, r3, #4
 8011538:	627a      	str	r2, [r7, #36]	@ 0x24
 801153a:	693a      	ldr	r2, [r7, #16]
 801153c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801153e:	68bb      	ldr	r3, [r7, #8]
 8011540:	6a1b      	ldr	r3, [r3, #32]
 8011542:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011544:	429a      	cmp	r2, r3
 8011546:	d3c4      	bcc.n	80114d2 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801154c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801154e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8011550:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011552:	697b      	ldr	r3, [r7, #20]
 8011554:	429a      	cmp	r2, r3
 8011556:	d803      	bhi.n	8011560 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8011558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801155a:	2200      	movs	r2, #0
 801155c:	601a      	str	r2, [r3, #0]
 801155e:	e19f      	b.n	80118a0 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8011560:	2311      	movs	r3, #17
 8011562:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8011566:	e19b      	b.n	80118a0 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	68db      	ldr	r3, [r3, #12]
 801156c:	683a      	ldr	r2, [r7, #0]
 801156e:	429a      	cmp	r2, r3
 8011570:	d902      	bls.n	8011578 <f_lseek+0x114>
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	68db      	ldr	r3, [r3, #12]
 8011576:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	683a      	ldr	r2, [r7, #0]
 801157c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801157e:	683b      	ldr	r3, [r7, #0]
 8011580:	2b00      	cmp	r3, #0
 8011582:	f000 818d 	beq.w	80118a0 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8011586:	683b      	ldr	r3, [r7, #0]
 8011588:	3b01      	subs	r3, #1
 801158a:	4619      	mov	r1, r3
 801158c:	6878      	ldr	r0, [r7, #4]
 801158e:	f7fd ffce 	bl	800f52e <clmt_clust>
 8011592:	4602      	mov	r2, r0
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8011598:	68ba      	ldr	r2, [r7, #8]
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	69db      	ldr	r3, [r3, #28]
 801159e:	4619      	mov	r1, r3
 80115a0:	4610      	mov	r0, r2
 80115a2:	f7fd fcbb 	bl	800ef1c <clust2sect>
 80115a6:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80115a8:	69bb      	ldr	r3, [r7, #24]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d104      	bne.n	80115b8 <f_lseek+0x154>
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	2202      	movs	r2, #2
 80115b2:	755a      	strb	r2, [r3, #21]
 80115b4:	2302      	movs	r3, #2
 80115b6:	e175      	b.n	80118a4 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80115b8:	683b      	ldr	r3, [r7, #0]
 80115ba:	3b01      	subs	r3, #1
 80115bc:	68ba      	ldr	r2, [r7, #8]
 80115be:	8992      	ldrh	r2, [r2, #12]
 80115c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80115c4:	68ba      	ldr	r2, [r7, #8]
 80115c6:	8952      	ldrh	r2, [r2, #10]
 80115c8:	3a01      	subs	r2, #1
 80115ca:	4013      	ands	r3, r2
 80115cc:	69ba      	ldr	r2, [r7, #24]
 80115ce:	4413      	add	r3, r2
 80115d0:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	699b      	ldr	r3, [r3, #24]
 80115d6:	68ba      	ldr	r2, [r7, #8]
 80115d8:	8992      	ldrh	r2, [r2, #12]
 80115da:	fbb3 f1f2 	udiv	r1, r3, r2
 80115de:	fb01 f202 	mul.w	r2, r1, r2
 80115e2:	1a9b      	subs	r3, r3, r2
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	f000 815b 	beq.w	80118a0 <f_lseek+0x43c>
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	6a1b      	ldr	r3, [r3, #32]
 80115ee:	69ba      	ldr	r2, [r7, #24]
 80115f0:	429a      	cmp	r2, r3
 80115f2:	f000 8155 	beq.w	80118a0 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	7d1b      	ldrb	r3, [r3, #20]
 80115fa:	b25b      	sxtb	r3, r3
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	da18      	bge.n	8011632 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011600:	68bb      	ldr	r3, [r7, #8]
 8011602:	7858      	ldrb	r0, [r3, #1]
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	6a1a      	ldr	r2, [r3, #32]
 801160e:	2301      	movs	r3, #1
 8011610:	f7fd f8f8 	bl	800e804 <disk_write>
 8011614:	4603      	mov	r3, r0
 8011616:	2b00      	cmp	r3, #0
 8011618:	d004      	beq.n	8011624 <f_lseek+0x1c0>
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	2201      	movs	r2, #1
 801161e:	755a      	strb	r2, [r3, #21]
 8011620:	2301      	movs	r3, #1
 8011622:	e13f      	b.n	80118a4 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	7d1b      	ldrb	r3, [r3, #20]
 8011628:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801162c:	b2da      	uxtb	r2, r3
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8011632:	68bb      	ldr	r3, [r7, #8]
 8011634:	7858      	ldrb	r0, [r3, #1]
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801163c:	2301      	movs	r3, #1
 801163e:	69ba      	ldr	r2, [r7, #24]
 8011640:	f7fd f8c0 	bl	800e7c4 <disk_read>
 8011644:	4603      	mov	r3, r0
 8011646:	2b00      	cmp	r3, #0
 8011648:	d004      	beq.n	8011654 <f_lseek+0x1f0>
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	2201      	movs	r2, #1
 801164e:	755a      	strb	r2, [r3, #21]
 8011650:	2301      	movs	r3, #1
 8011652:	e127      	b.n	80118a4 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	69ba      	ldr	r2, [r7, #24]
 8011658:	621a      	str	r2, [r3, #32]
 801165a:	e121      	b.n	80118a0 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	68db      	ldr	r3, [r3, #12]
 8011660:	683a      	ldr	r2, [r7, #0]
 8011662:	429a      	cmp	r2, r3
 8011664:	d908      	bls.n	8011678 <f_lseek+0x214>
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	7d1b      	ldrb	r3, [r3, #20]
 801166a:	f003 0302 	and.w	r3, r3, #2
 801166e:	2b00      	cmp	r3, #0
 8011670:	d102      	bne.n	8011678 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	68db      	ldr	r3, [r3, #12]
 8011676:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	699b      	ldr	r3, [r3, #24]
 801167c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801167e:	2300      	movs	r3, #0
 8011680:	637b      	str	r3, [r7, #52]	@ 0x34
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011686:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8011688:	683b      	ldr	r3, [r7, #0]
 801168a:	2b00      	cmp	r3, #0
 801168c:	f000 80b5 	beq.w	80117fa <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8011690:	68bb      	ldr	r3, [r7, #8]
 8011692:	895b      	ldrh	r3, [r3, #10]
 8011694:	461a      	mov	r2, r3
 8011696:	68bb      	ldr	r3, [r7, #8]
 8011698:	899b      	ldrh	r3, [r3, #12]
 801169a:	fb02 f303 	mul.w	r3, r2, r3
 801169e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80116a0:	6a3b      	ldr	r3, [r7, #32]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d01b      	beq.n	80116de <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80116a6:	683b      	ldr	r3, [r7, #0]
 80116a8:	1e5a      	subs	r2, r3, #1
 80116aa:	69fb      	ldr	r3, [r7, #28]
 80116ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80116b0:	6a3b      	ldr	r3, [r7, #32]
 80116b2:	1e59      	subs	r1, r3, #1
 80116b4:	69fb      	ldr	r3, [r7, #28]
 80116b6:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80116ba:	429a      	cmp	r2, r3
 80116bc:	d30f      	bcc.n	80116de <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80116be:	6a3b      	ldr	r3, [r7, #32]
 80116c0:	1e5a      	subs	r2, r3, #1
 80116c2:	69fb      	ldr	r3, [r7, #28]
 80116c4:	425b      	negs	r3, r3
 80116c6:	401a      	ands	r2, r3
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	699b      	ldr	r3, [r3, #24]
 80116d0:	683a      	ldr	r2, [r7, #0]
 80116d2:	1ad3      	subs	r3, r2, r3
 80116d4:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	69db      	ldr	r3, [r3, #28]
 80116da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80116dc:	e022      	b.n	8011724 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	689b      	ldr	r3, [r3, #8]
 80116e2:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80116e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d119      	bne.n	801171e <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	2100      	movs	r1, #0
 80116ee:	4618      	mov	r0, r3
 80116f0:	f7fd fe85 	bl	800f3fe <create_chain>
 80116f4:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80116f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116f8:	2b01      	cmp	r3, #1
 80116fa:	d104      	bne.n	8011706 <f_lseek+0x2a2>
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	2202      	movs	r2, #2
 8011700:	755a      	strb	r2, [r3, #21]
 8011702:	2302      	movs	r3, #2
 8011704:	e0ce      	b.n	80118a4 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011708:	f1b3 3fff 	cmp.w	r3, #4294967295
 801170c:	d104      	bne.n	8011718 <f_lseek+0x2b4>
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	2201      	movs	r2, #1
 8011712:	755a      	strb	r2, [r3, #21]
 8011714:	2301      	movs	r3, #1
 8011716:	e0c5      	b.n	80118a4 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801171c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011722:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8011724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011726:	2b00      	cmp	r3, #0
 8011728:	d067      	beq.n	80117fa <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 801172a:	e03a      	b.n	80117a2 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 801172c:	683a      	ldr	r2, [r7, #0]
 801172e:	69fb      	ldr	r3, [r7, #28]
 8011730:	1ad3      	subs	r3, r2, r3
 8011732:	603b      	str	r3, [r7, #0]
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	699a      	ldr	r2, [r3, #24]
 8011738:	69fb      	ldr	r3, [r7, #28]
 801173a:	441a      	add	r2, r3
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	7d1b      	ldrb	r3, [r3, #20]
 8011744:	f003 0302 	and.w	r3, r3, #2
 8011748:	2b00      	cmp	r3, #0
 801174a:	d00b      	beq.n	8011764 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011750:	4618      	mov	r0, r3
 8011752:	f7fd fe54 	bl	800f3fe <create_chain>
 8011756:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8011758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801175a:	2b00      	cmp	r3, #0
 801175c:	d108      	bne.n	8011770 <f_lseek+0x30c>
							ofs = 0; break;
 801175e:	2300      	movs	r3, #0
 8011760:	603b      	str	r3, [r7, #0]
 8011762:	e022      	b.n	80117aa <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011768:	4618      	mov	r0, r3
 801176a:	f7fd fbf6 	bl	800ef5a <get_fat>
 801176e:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011776:	d104      	bne.n	8011782 <f_lseek+0x31e>
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	2201      	movs	r2, #1
 801177c:	755a      	strb	r2, [r3, #21]
 801177e:	2301      	movs	r3, #1
 8011780:	e090      	b.n	80118a4 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8011782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011784:	2b01      	cmp	r3, #1
 8011786:	d904      	bls.n	8011792 <f_lseek+0x32e>
 8011788:	68bb      	ldr	r3, [r7, #8]
 801178a:	6a1b      	ldr	r3, [r3, #32]
 801178c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801178e:	429a      	cmp	r2, r3
 8011790:	d304      	bcc.n	801179c <f_lseek+0x338>
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	2202      	movs	r2, #2
 8011796:	755a      	strb	r2, [r3, #21]
 8011798:	2302      	movs	r3, #2
 801179a:	e083      	b.n	80118a4 <f_lseek+0x440>
					fp->clust = clst;
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80117a0:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80117a2:	683a      	ldr	r2, [r7, #0]
 80117a4:	69fb      	ldr	r3, [r7, #28]
 80117a6:	429a      	cmp	r2, r3
 80117a8:	d8c0      	bhi.n	801172c <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	699a      	ldr	r2, [r3, #24]
 80117ae:	683b      	ldr	r3, [r7, #0]
 80117b0:	441a      	add	r2, r3
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80117b6:	68bb      	ldr	r3, [r7, #8]
 80117b8:	899b      	ldrh	r3, [r3, #12]
 80117ba:	461a      	mov	r2, r3
 80117bc:	683b      	ldr	r3, [r7, #0]
 80117be:	fbb3 f1f2 	udiv	r1, r3, r2
 80117c2:	fb01 f202 	mul.w	r2, r1, r2
 80117c6:	1a9b      	subs	r3, r3, r2
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d016      	beq.n	80117fa <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80117cc:	68bb      	ldr	r3, [r7, #8]
 80117ce:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80117d0:	4618      	mov	r0, r3
 80117d2:	f7fd fba3 	bl	800ef1c <clust2sect>
 80117d6:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80117d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d104      	bne.n	80117e8 <f_lseek+0x384>
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	2202      	movs	r2, #2
 80117e2:	755a      	strb	r2, [r3, #21]
 80117e4:	2302      	movs	r3, #2
 80117e6:	e05d      	b.n	80118a4 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 80117e8:	68bb      	ldr	r3, [r7, #8]
 80117ea:	899b      	ldrh	r3, [r3, #12]
 80117ec:	461a      	mov	r2, r3
 80117ee:	683b      	ldr	r3, [r7, #0]
 80117f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80117f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80117f6:	4413      	add	r3, r2
 80117f8:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	699a      	ldr	r2, [r3, #24]
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	68db      	ldr	r3, [r3, #12]
 8011802:	429a      	cmp	r2, r3
 8011804:	d90a      	bls.n	801181c <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	699a      	ldr	r2, [r3, #24]
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	7d1b      	ldrb	r3, [r3, #20]
 8011812:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011816:	b2da      	uxtb	r2, r3
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	699b      	ldr	r3, [r3, #24]
 8011820:	68ba      	ldr	r2, [r7, #8]
 8011822:	8992      	ldrh	r2, [r2, #12]
 8011824:	fbb3 f1f2 	udiv	r1, r3, r2
 8011828:	fb01 f202 	mul.w	r2, r1, r2
 801182c:	1a9b      	subs	r3, r3, r2
 801182e:	2b00      	cmp	r3, #0
 8011830:	d036      	beq.n	80118a0 <f_lseek+0x43c>
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	6a1b      	ldr	r3, [r3, #32]
 8011836:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011838:	429a      	cmp	r2, r3
 801183a:	d031      	beq.n	80118a0 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	7d1b      	ldrb	r3, [r3, #20]
 8011840:	b25b      	sxtb	r3, r3
 8011842:	2b00      	cmp	r3, #0
 8011844:	da18      	bge.n	8011878 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011846:	68bb      	ldr	r3, [r7, #8]
 8011848:	7858      	ldrb	r0, [r3, #1]
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	6a1a      	ldr	r2, [r3, #32]
 8011854:	2301      	movs	r3, #1
 8011856:	f7fc ffd5 	bl	800e804 <disk_write>
 801185a:	4603      	mov	r3, r0
 801185c:	2b00      	cmp	r3, #0
 801185e:	d004      	beq.n	801186a <f_lseek+0x406>
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	2201      	movs	r2, #1
 8011864:	755a      	strb	r2, [r3, #21]
 8011866:	2301      	movs	r3, #1
 8011868:	e01c      	b.n	80118a4 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	7d1b      	ldrb	r3, [r3, #20]
 801186e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011872:	b2da      	uxtb	r2, r3
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011878:	68bb      	ldr	r3, [r7, #8]
 801187a:	7858      	ldrb	r0, [r3, #1]
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011882:	2301      	movs	r3, #1
 8011884:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011886:	f7fc ff9d 	bl	800e7c4 <disk_read>
 801188a:	4603      	mov	r3, r0
 801188c:	2b00      	cmp	r3, #0
 801188e:	d004      	beq.n	801189a <f_lseek+0x436>
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	2201      	movs	r2, #1
 8011894:	755a      	strb	r2, [r3, #21]
 8011896:	2301      	movs	r3, #1
 8011898:	e004      	b.n	80118a4 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801189e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80118a0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80118a4:	4618      	mov	r0, r3
 80118a6:	3740      	adds	r7, #64	@ 0x40
 80118a8:	46bd      	mov	sp, r7
 80118aa:	bd80      	pop	{r7, pc}

080118ac <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80118ac:	b580      	push	{r7, lr}
 80118ae:	b084      	sub	sp, #16
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	6078      	str	r0, [r7, #4]
 80118b4:	460b      	mov	r3, r1
 80118b6:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80118b8:	78fb      	ldrb	r3, [r7, #3]
 80118ba:	2b0a      	cmp	r3, #10
 80118bc:	d103      	bne.n	80118c6 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80118be:	210d      	movs	r1, #13
 80118c0:	6878      	ldr	r0, [r7, #4]
 80118c2:	f7ff fff3 	bl	80118ac <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	685b      	ldr	r3, [r3, #4]
 80118ca:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	db25      	blt.n	801191e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	1c5a      	adds	r2, r3, #1
 80118d6:	60fa      	str	r2, [r7, #12]
 80118d8:	687a      	ldr	r2, [r7, #4]
 80118da:	4413      	add	r3, r2
 80118dc:	78fa      	ldrb	r2, [r7, #3]
 80118de:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	2b3c      	cmp	r3, #60	@ 0x3c
 80118e4:	dd12      	ble.n	801190c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	6818      	ldr	r0, [r3, #0]
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	f103 010c 	add.w	r1, r3, #12
 80118f0:	68fa      	ldr	r2, [r7, #12]
 80118f2:	f107 0308 	add.w	r3, r7, #8
 80118f6:	f7ff fb79 	bl	8010fec <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80118fa:	68ba      	ldr	r2, [r7, #8]
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	429a      	cmp	r2, r3
 8011900:	d101      	bne.n	8011906 <putc_bfd+0x5a>
 8011902:	2300      	movs	r3, #0
 8011904:	e001      	b.n	801190a <putc_bfd+0x5e>
 8011906:	f04f 33ff 	mov.w	r3, #4294967295
 801190a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	68fa      	ldr	r2, [r7, #12]
 8011910:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	689b      	ldr	r3, [r3, #8]
 8011916:	1c5a      	adds	r2, r3, #1
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	609a      	str	r2, [r3, #8]
 801191c:	e000      	b.n	8011920 <putc_bfd+0x74>
	if (i < 0) return;
 801191e:	bf00      	nop
}
 8011920:	3710      	adds	r7, #16
 8011922:	46bd      	mov	sp, r7
 8011924:	bd80      	pop	{r7, pc}

08011926 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8011926:	b580      	push	{r7, lr}
 8011928:	b084      	sub	sp, #16
 801192a:	af00      	add	r7, sp, #0
 801192c:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	685b      	ldr	r3, [r3, #4]
 8011932:	2b00      	cmp	r3, #0
 8011934:	db16      	blt.n	8011964 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	6818      	ldr	r0, [r3, #0]
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	f103 010c 	add.w	r1, r3, #12
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	685b      	ldr	r3, [r3, #4]
 8011944:	461a      	mov	r2, r3
 8011946:	f107 030c 	add.w	r3, r7, #12
 801194a:	f7ff fb4f 	bl	8010fec <f_write>
 801194e:	4603      	mov	r3, r0
 8011950:	2b00      	cmp	r3, #0
 8011952:	d107      	bne.n	8011964 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	685b      	ldr	r3, [r3, #4]
 8011958:	68fa      	ldr	r2, [r7, #12]
 801195a:	4293      	cmp	r3, r2
 801195c:	d102      	bne.n	8011964 <putc_flush+0x3e>
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	689b      	ldr	r3, [r3, #8]
 8011962:	e001      	b.n	8011968 <putc_flush+0x42>
	return EOF;
 8011964:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011968:	4618      	mov	r0, r3
 801196a:	3710      	adds	r7, #16
 801196c:	46bd      	mov	sp, r7
 801196e:	bd80      	pop	{r7, pc}

08011970 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8011970:	b480      	push	{r7}
 8011972:	b083      	sub	sp, #12
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
 8011978:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	683a      	ldr	r2, [r7, #0]
 801197e:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	2200      	movs	r2, #0
 8011984:	605a      	str	r2, [r3, #4]
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	685a      	ldr	r2, [r3, #4]
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	609a      	str	r2, [r3, #8]
}
 801198e:	bf00      	nop
 8011990:	370c      	adds	r7, #12
 8011992:	46bd      	mov	sp, r7
 8011994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011998:	4770      	bx	lr
	...

0801199c <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 801199c:	b40e      	push	{r1, r2, r3}
 801199e:	b580      	push	{r7, lr}
 80119a0:	b0a7      	sub	sp, #156	@ 0x9c
 80119a2:	af00      	add	r7, sp, #0
 80119a4:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 80119a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80119aa:	6879      	ldr	r1, [r7, #4]
 80119ac:	4618      	mov	r0, r3
 80119ae:	f7ff ffdf 	bl	8011970 <putc_init>

	va_start(arp, fmt);
 80119b2:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80119b6:	67bb      	str	r3, [r7, #120]	@ 0x78

	for (;;) {
		c = *fmt++;
 80119b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80119bc:	1c5a      	adds	r2, r3, #1
 80119be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80119c2:	781b      	ldrb	r3, [r3, #0]
 80119c4:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == 0) break;			/* End of string */
 80119c8:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	f000 81f2 	beq.w	8011db6 <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 80119d2:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80119d6:	2b25      	cmp	r3, #37	@ 0x25
 80119d8:	d008      	beq.n	80119ec <f_printf+0x50>
			putc_bfd(&pb, c);
 80119da:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 80119de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80119e2:	4611      	mov	r1, r2
 80119e4:	4618      	mov	r0, r3
 80119e6:	f7ff ff61 	bl	80118ac <putc_bfd>
			continue;
 80119ea:	e1e3      	b.n	8011db4 <f_printf+0x418>
		}
		w = f = 0;
 80119ec:	2300      	movs	r3, #0
 80119ee:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80119f2:	2300      	movs	r3, #0
 80119f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		c = *fmt++;
 80119f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80119fc:	1c5a      	adds	r2, r3, #1
 80119fe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011a02:	781b      	ldrb	r3, [r3, #0]
 8011a04:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8011a08:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011a0c:	2b30      	cmp	r3, #48	@ 0x30
 8011a0e:	d10b      	bne.n	8011a28 <f_printf+0x8c>
			f = 1; c = *fmt++;
 8011a10:	2301      	movs	r3, #1
 8011a12:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8011a16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011a1a:	1c5a      	adds	r2, r3, #1
 8011a1c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011a20:	781b      	ldrb	r3, [r3, #0]
 8011a22:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8011a26:	e024      	b.n	8011a72 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8011a28:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011a2c:	2b2d      	cmp	r3, #45	@ 0x2d
 8011a2e:	d120      	bne.n	8011a72 <f_printf+0xd6>
				f = 2; c = *fmt++;
 8011a30:	2302      	movs	r3, #2
 8011a32:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8011a36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011a3a:	1c5a      	adds	r2, r3, #1
 8011a3c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011a40:	781b      	ldrb	r3, [r3, #0]
 8011a42:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8011a46:	e014      	b.n	8011a72 <f_printf+0xd6>
			w = w * 10 + c - '0';
 8011a48:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8011a4c:	4613      	mov	r3, r2
 8011a4e:	009b      	lsls	r3, r3, #2
 8011a50:	4413      	add	r3, r2
 8011a52:	005b      	lsls	r3, r3, #1
 8011a54:	461a      	mov	r2, r3
 8011a56:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011a5a:	4413      	add	r3, r2
 8011a5c:	3b30      	subs	r3, #48	@ 0x30
 8011a5e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			c = *fmt++;
 8011a62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011a66:	1c5a      	adds	r2, r3, #1
 8011a68:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011a6c:	781b      	ldrb	r3, [r3, #0]
 8011a6e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		while (IsDigit(c)) {		/* Precision */
 8011a72:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011a76:	2b2f      	cmp	r3, #47	@ 0x2f
 8011a78:	d903      	bls.n	8011a82 <f_printf+0xe6>
 8011a7a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011a7e:	2b39      	cmp	r3, #57	@ 0x39
 8011a80:	d9e2      	bls.n	8011a48 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8011a82:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011a86:	2b6c      	cmp	r3, #108	@ 0x6c
 8011a88:	d003      	beq.n	8011a92 <f_printf+0xf6>
 8011a8a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011a8e:	2b4c      	cmp	r3, #76	@ 0x4c
 8011a90:	d10d      	bne.n	8011aae <f_printf+0x112>
			f |= 4; c = *fmt++;
 8011a92:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011a96:	f043 0304 	orr.w	r3, r3, #4
 8011a9a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8011a9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011aa2:	1c5a      	adds	r2, r3, #1
 8011aa4:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011aa8:	781b      	ldrb	r3, [r3, #0]
 8011aaa:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		}
		if (!c) break;
 8011aae:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	f000 8181 	beq.w	8011dba <f_printf+0x41e>
		d = c;
 8011ab8:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011abc:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		if (IsLower(d)) d -= 0x20;
 8011ac0:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011ac4:	2b60      	cmp	r3, #96	@ 0x60
 8011ac6:	d908      	bls.n	8011ada <f_printf+0x13e>
 8011ac8:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011acc:	2b7a      	cmp	r3, #122	@ 0x7a
 8011ace:	d804      	bhi.n	8011ada <f_printf+0x13e>
 8011ad0:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011ad4:	3b20      	subs	r3, #32
 8011ad6:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		switch (d) {				/* Type is... */
 8011ada:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011ade:	3b42      	subs	r3, #66	@ 0x42
 8011ae0:	2b16      	cmp	r3, #22
 8011ae2:	f200 8098 	bhi.w	8011c16 <f_printf+0x27a>
 8011ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8011aec <f_printf+0x150>)
 8011ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011aec:	08011bf7 	.word	0x08011bf7
 8011af0:	08011bdf 	.word	0x08011bdf
 8011af4:	08011c07 	.word	0x08011c07
 8011af8:	08011c17 	.word	0x08011c17
 8011afc:	08011c17 	.word	0x08011c17
 8011b00:	08011c17 	.word	0x08011c17
 8011b04:	08011c17 	.word	0x08011c17
 8011b08:	08011c17 	.word	0x08011c17
 8011b0c:	08011c17 	.word	0x08011c17
 8011b10:	08011c17 	.word	0x08011c17
 8011b14:	08011c17 	.word	0x08011c17
 8011b18:	08011c17 	.word	0x08011c17
 8011b1c:	08011c17 	.word	0x08011c17
 8011b20:	08011bff 	.word	0x08011bff
 8011b24:	08011c17 	.word	0x08011c17
 8011b28:	08011c17 	.word	0x08011c17
 8011b2c:	08011c17 	.word	0x08011c17
 8011b30:	08011b49 	.word	0x08011b49
 8011b34:	08011c17 	.word	0x08011c17
 8011b38:	08011c07 	.word	0x08011c07
 8011b3c:	08011c17 	.word	0x08011c17
 8011b40:	08011c17 	.word	0x08011c17
 8011b44:	08011c0f 	.word	0x08011c0f
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8011b48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011b4a:	1d1a      	adds	r2, r3, #4
 8011b4c:	67ba      	str	r2, [r7, #120]	@ 0x78
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	67fb      	str	r3, [r7, #124]	@ 0x7c
			for (j = 0; p[j]; j++) ;
 8011b52:	2300      	movs	r3, #0
 8011b54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011b58:	e004      	b.n	8011b64 <f_printf+0x1c8>
 8011b5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011b5e:	3301      	adds	r3, #1
 8011b60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011b64:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8011b66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011b6a:	4413      	add	r3, r2
 8011b6c:	781b      	ldrb	r3, [r3, #0]
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d1f3      	bne.n	8011b5a <f_printf+0x1be>
			if (!(f & 2)) {
 8011b72:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011b76:	f003 0302 	and.w	r3, r3, #2
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d11a      	bne.n	8011bb4 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8011b7e:	e005      	b.n	8011b8c <f_printf+0x1f0>
 8011b80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011b84:	2120      	movs	r1, #32
 8011b86:	4618      	mov	r0, r3
 8011b88:	f7ff fe90 	bl	80118ac <putc_bfd>
 8011b8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011b90:	1c5a      	adds	r2, r3, #1
 8011b92:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8011b96:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8011b9a:	429a      	cmp	r2, r3
 8011b9c:	d8f0      	bhi.n	8011b80 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8011b9e:	e009      	b.n	8011bb4 <f_printf+0x218>
 8011ba0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011ba2:	1c5a      	adds	r2, r3, #1
 8011ba4:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8011ba6:	781a      	ldrb	r2, [r3, #0]
 8011ba8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011bac:	4611      	mov	r1, r2
 8011bae:	4618      	mov	r0, r3
 8011bb0:	f7ff fe7c 	bl	80118ac <putc_bfd>
 8011bb4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011bb6:	781b      	ldrb	r3, [r3, #0]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d1f1      	bne.n	8011ba0 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8011bbc:	e005      	b.n	8011bca <f_printf+0x22e>
 8011bbe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011bc2:	2120      	movs	r1, #32
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	f7ff fe71 	bl	80118ac <putc_bfd>
 8011bca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011bce:	1c5a      	adds	r2, r3, #1
 8011bd0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8011bd4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8011bd8:	429a      	cmp	r2, r3
 8011bda:	d8f0      	bhi.n	8011bbe <f_printf+0x222>
			continue;
 8011bdc:	e0ea      	b.n	8011db4 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8011bde:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011be0:	1d1a      	adds	r2, r3, #4
 8011be2:	67ba      	str	r2, [r7, #120]	@ 0x78
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	b2da      	uxtb	r2, r3
 8011be8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011bec:	4611      	mov	r1, r2
 8011bee:	4618      	mov	r0, r3
 8011bf0:	f7ff fe5c 	bl	80118ac <putc_bfd>
 8011bf4:	e0de      	b.n	8011db4 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 8011bf6:	2302      	movs	r3, #2
 8011bf8:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8011bfc:	e014      	b.n	8011c28 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8011bfe:	2308      	movs	r3, #8
 8011c00:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8011c04:	e010      	b.n	8011c28 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8011c06:	230a      	movs	r3, #10
 8011c08:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8011c0c:	e00c      	b.n	8011c28 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8011c0e:	2310      	movs	r3, #16
 8011c10:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8011c14:	e008      	b.n	8011c28 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8011c16:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 8011c1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011c1e:	4611      	mov	r1, r2
 8011c20:	4618      	mov	r0, r3
 8011c22:	f7ff fe43 	bl	80118ac <putc_bfd>
 8011c26:	e0c5      	b.n	8011db4 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8011c28:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011c2c:	f003 0304 	and.w	r3, r3, #4
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d004      	beq.n	8011c3e <f_printf+0x2a2>
 8011c34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011c36:	1d1a      	adds	r2, r3, #4
 8011c38:	67ba      	str	r2, [r7, #120]	@ 0x78
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	e00c      	b.n	8011c58 <f_printf+0x2bc>
 8011c3e:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011c42:	2b44      	cmp	r3, #68	@ 0x44
 8011c44:	d104      	bne.n	8011c50 <f_printf+0x2b4>
 8011c46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011c48:	1d1a      	adds	r2, r3, #4
 8011c4a:	67ba      	str	r2, [r7, #120]	@ 0x78
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	e003      	b.n	8011c58 <f_printf+0x2bc>
 8011c50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011c52:	1d1a      	adds	r2, r3, #4
 8011c54:	67ba      	str	r2, [r7, #120]	@ 0x78
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8011c5c:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011c60:	2b44      	cmp	r3, #68	@ 0x44
 8011c62:	d10e      	bne.n	8011c82 <f_printf+0x2e6>
 8011c64:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	da0a      	bge.n	8011c82 <f_printf+0x2e6>
			v = 0 - v;
 8011c6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011c70:	425b      	negs	r3, r3
 8011c72:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			f |= 8;
 8011c76:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011c7a:	f043 0308 	orr.w	r3, r3, #8
 8011c7e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}
		i = 0;
 8011c82:	2300      	movs	r3, #0
 8011c84:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8011c88:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 8011c8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011c90:	fbb3 f1f2 	udiv	r1, r3, r2
 8011c94:	fb01 f202 	mul.w	r2, r1, r2
 8011c98:	1a9b      	subs	r3, r3, r2
 8011c9a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 8011c9e:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8011ca2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8011ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8011caa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8011cae:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011cb2:	2b09      	cmp	r3, #9
 8011cb4:	d90b      	bls.n	8011cce <f_printf+0x332>
 8011cb6:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011cba:	2b78      	cmp	r3, #120	@ 0x78
 8011cbc:	d101      	bne.n	8011cc2 <f_printf+0x326>
 8011cbe:	2227      	movs	r2, #39	@ 0x27
 8011cc0:	e000      	b.n	8011cc4 <f_printf+0x328>
 8011cc2:	2207      	movs	r2, #7
 8011cc4:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011cc8:	4413      	add	r3, r2
 8011cca:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
			str[i++] = d + '0';
 8011cce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011cd2:	1c5a      	adds	r2, r3, #1
 8011cd4:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8011cd8:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8011cdc:	3230      	adds	r2, #48	@ 0x30
 8011cde:	b2d2      	uxtb	r2, r2
 8011ce0:	3398      	adds	r3, #152	@ 0x98
 8011ce2:	443b      	add	r3, r7
 8011ce4:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8011ce8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d003      	beq.n	8011cf8 <f_printf+0x35c>
 8011cf0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011cf4:	2b1f      	cmp	r3, #31
 8011cf6:	d9c7      	bls.n	8011c88 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8011cf8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011cfc:	f003 0308 	and.w	r3, r3, #8
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d009      	beq.n	8011d18 <f_printf+0x37c>
 8011d04:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011d08:	1c5a      	adds	r2, r3, #1
 8011d0a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8011d0e:	3398      	adds	r3, #152	@ 0x98
 8011d10:	443b      	add	r3, r7
 8011d12:	222d      	movs	r2, #45	@ 0x2d
 8011d14:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8011d18:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011d1c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011d20:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011d24:	f003 0301 	and.w	r3, r3, #1
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d001      	beq.n	8011d30 <f_printf+0x394>
 8011d2c:	2330      	movs	r3, #48	@ 0x30
 8011d2e:	e000      	b.n	8011d32 <f_printf+0x396>
 8011d30:	2320      	movs	r3, #32
 8011d32:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8011d36:	e007      	b.n	8011d48 <f_printf+0x3ac>
 8011d38:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8011d3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011d40:	4611      	mov	r1, r2
 8011d42:	4618      	mov	r0, r3
 8011d44:	f7ff fdb2 	bl	80118ac <putc_bfd>
 8011d48:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011d4c:	f003 0302 	and.w	r3, r3, #2
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d108      	bne.n	8011d66 <f_printf+0x3ca>
 8011d54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011d58:	1c5a      	adds	r2, r3, #1
 8011d5a:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8011d5e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8011d62:	429a      	cmp	r2, r3
 8011d64:	d8e8      	bhi.n	8011d38 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 8011d66:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011d6a:	3b01      	subs	r3, #1
 8011d6c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011d70:	f107 020c 	add.w	r2, r7, #12
 8011d74:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011d78:	4413      	add	r3, r2
 8011d7a:	781a      	ldrb	r2, [r3, #0]
 8011d7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011d80:	4611      	mov	r1, r2
 8011d82:	4618      	mov	r0, r3
 8011d84:	f7ff fd92 	bl	80118ac <putc_bfd>
		} while (i);
 8011d88:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d1ea      	bne.n	8011d66 <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 8011d90:	e007      	b.n	8011da2 <f_printf+0x406>
 8011d92:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8011d96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011d9a:	4611      	mov	r1, r2
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	f7ff fd85 	bl	80118ac <putc_bfd>
 8011da2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011da6:	1c5a      	adds	r2, r3, #1
 8011da8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8011dac:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8011db0:	429a      	cmp	r2, r3
 8011db2:	d8ee      	bhi.n	8011d92 <f_printf+0x3f6>
		c = *fmt++;
 8011db4:	e600      	b.n	80119b8 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 8011db6:	bf00      	nop
 8011db8:	e000      	b.n	8011dbc <f_printf+0x420>
		if (!c) break;
 8011dba:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8011dbc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	f7ff fdb0 	bl	8011926 <putc_flush>
 8011dc6:	4603      	mov	r3, r0
}
 8011dc8:	4618      	mov	r0, r3
 8011dca:	379c      	adds	r7, #156	@ 0x9c
 8011dcc:	46bd      	mov	sp, r7
 8011dce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011dd2:	b003      	add	sp, #12
 8011dd4:	4770      	bx	lr
 8011dd6:	bf00      	nop

08011dd8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011dd8:	b480      	push	{r7}
 8011dda:	b087      	sub	sp, #28
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	60f8      	str	r0, [r7, #12]
 8011de0:	60b9      	str	r1, [r7, #8]
 8011de2:	4613      	mov	r3, r2
 8011de4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011de6:	2301      	movs	r3, #1
 8011de8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011dea:	2300      	movs	r3, #0
 8011dec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011dee:	4b1f      	ldr	r3, [pc, #124]	@ (8011e6c <FATFS_LinkDriverEx+0x94>)
 8011df0:	7a5b      	ldrb	r3, [r3, #9]
 8011df2:	b2db      	uxtb	r3, r3
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d131      	bne.n	8011e5c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011df8:	4b1c      	ldr	r3, [pc, #112]	@ (8011e6c <FATFS_LinkDriverEx+0x94>)
 8011dfa:	7a5b      	ldrb	r3, [r3, #9]
 8011dfc:	b2db      	uxtb	r3, r3
 8011dfe:	461a      	mov	r2, r3
 8011e00:	4b1a      	ldr	r3, [pc, #104]	@ (8011e6c <FATFS_LinkDriverEx+0x94>)
 8011e02:	2100      	movs	r1, #0
 8011e04:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011e06:	4b19      	ldr	r3, [pc, #100]	@ (8011e6c <FATFS_LinkDriverEx+0x94>)
 8011e08:	7a5b      	ldrb	r3, [r3, #9]
 8011e0a:	b2db      	uxtb	r3, r3
 8011e0c:	4a17      	ldr	r2, [pc, #92]	@ (8011e6c <FATFS_LinkDriverEx+0x94>)
 8011e0e:	009b      	lsls	r3, r3, #2
 8011e10:	4413      	add	r3, r2
 8011e12:	68fa      	ldr	r2, [r7, #12]
 8011e14:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011e16:	4b15      	ldr	r3, [pc, #84]	@ (8011e6c <FATFS_LinkDriverEx+0x94>)
 8011e18:	7a5b      	ldrb	r3, [r3, #9]
 8011e1a:	b2db      	uxtb	r3, r3
 8011e1c:	461a      	mov	r2, r3
 8011e1e:	4b13      	ldr	r3, [pc, #76]	@ (8011e6c <FATFS_LinkDriverEx+0x94>)
 8011e20:	4413      	add	r3, r2
 8011e22:	79fa      	ldrb	r2, [r7, #7]
 8011e24:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011e26:	4b11      	ldr	r3, [pc, #68]	@ (8011e6c <FATFS_LinkDriverEx+0x94>)
 8011e28:	7a5b      	ldrb	r3, [r3, #9]
 8011e2a:	b2db      	uxtb	r3, r3
 8011e2c:	1c5a      	adds	r2, r3, #1
 8011e2e:	b2d1      	uxtb	r1, r2
 8011e30:	4a0e      	ldr	r2, [pc, #56]	@ (8011e6c <FATFS_LinkDriverEx+0x94>)
 8011e32:	7251      	strb	r1, [r2, #9]
 8011e34:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011e36:	7dbb      	ldrb	r3, [r7, #22]
 8011e38:	3330      	adds	r3, #48	@ 0x30
 8011e3a:	b2da      	uxtb	r2, r3
 8011e3c:	68bb      	ldr	r3, [r7, #8]
 8011e3e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011e40:	68bb      	ldr	r3, [r7, #8]
 8011e42:	3301      	adds	r3, #1
 8011e44:	223a      	movs	r2, #58	@ 0x3a
 8011e46:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011e48:	68bb      	ldr	r3, [r7, #8]
 8011e4a:	3302      	adds	r3, #2
 8011e4c:	222f      	movs	r2, #47	@ 0x2f
 8011e4e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011e50:	68bb      	ldr	r3, [r7, #8]
 8011e52:	3303      	adds	r3, #3
 8011e54:	2200      	movs	r2, #0
 8011e56:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011e58:	2300      	movs	r3, #0
 8011e5a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e5e:	4618      	mov	r0, r3
 8011e60:	371c      	adds	r7, #28
 8011e62:	46bd      	mov	sp, r7
 8011e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e68:	4770      	bx	lr
 8011e6a:	bf00      	nop
 8011e6c:	240029c8 	.word	0x240029c8

08011e70 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011e70:	b580      	push	{r7, lr}
 8011e72:	b082      	sub	sp, #8
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	6078      	str	r0, [r7, #4]
 8011e78:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011e7a:	2200      	movs	r2, #0
 8011e7c:	6839      	ldr	r1, [r7, #0]
 8011e7e:	6878      	ldr	r0, [r7, #4]
 8011e80:	f7ff ffaa 	bl	8011dd8 <FATFS_LinkDriverEx>
 8011e84:	4603      	mov	r3, r0
}
 8011e86:	4618      	mov	r0, r3
 8011e88:	3708      	adds	r7, #8
 8011e8a:	46bd      	mov	sp, r7
 8011e8c:	bd80      	pop	{r7, pc}
	...

08011e90 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8011e90:	b480      	push	{r7}
 8011e92:	b085      	sub	sp, #20
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	4603      	mov	r3, r0
 8011e98:	6039      	str	r1, [r7, #0]
 8011e9a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8011e9c:	88fb      	ldrh	r3, [r7, #6]
 8011e9e:	2b7f      	cmp	r3, #127	@ 0x7f
 8011ea0:	d802      	bhi.n	8011ea8 <ff_convert+0x18>
		c = chr;
 8011ea2:	88fb      	ldrh	r3, [r7, #6]
 8011ea4:	81fb      	strh	r3, [r7, #14]
 8011ea6:	e025      	b.n	8011ef4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8011ea8:	683b      	ldr	r3, [r7, #0]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d00b      	beq.n	8011ec6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8011eae:	88fb      	ldrh	r3, [r7, #6]
 8011eb0:	2bff      	cmp	r3, #255	@ 0xff
 8011eb2:	d805      	bhi.n	8011ec0 <ff_convert+0x30>
 8011eb4:	88fb      	ldrh	r3, [r7, #6]
 8011eb6:	3b80      	subs	r3, #128	@ 0x80
 8011eb8:	4a12      	ldr	r2, [pc, #72]	@ (8011f04 <ff_convert+0x74>)
 8011eba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011ebe:	e000      	b.n	8011ec2 <ff_convert+0x32>
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	81fb      	strh	r3, [r7, #14]
 8011ec4:	e016      	b.n	8011ef4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8011ec6:	2300      	movs	r3, #0
 8011ec8:	81fb      	strh	r3, [r7, #14]
 8011eca:	e009      	b.n	8011ee0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8011ecc:	89fb      	ldrh	r3, [r7, #14]
 8011ece:	4a0d      	ldr	r2, [pc, #52]	@ (8011f04 <ff_convert+0x74>)
 8011ed0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011ed4:	88fa      	ldrh	r2, [r7, #6]
 8011ed6:	429a      	cmp	r2, r3
 8011ed8:	d006      	beq.n	8011ee8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8011eda:	89fb      	ldrh	r3, [r7, #14]
 8011edc:	3301      	adds	r3, #1
 8011ede:	81fb      	strh	r3, [r7, #14]
 8011ee0:	89fb      	ldrh	r3, [r7, #14]
 8011ee2:	2b7f      	cmp	r3, #127	@ 0x7f
 8011ee4:	d9f2      	bls.n	8011ecc <ff_convert+0x3c>
 8011ee6:	e000      	b.n	8011eea <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8011ee8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8011eea:	89fb      	ldrh	r3, [r7, #14]
 8011eec:	3380      	adds	r3, #128	@ 0x80
 8011eee:	b29b      	uxth	r3, r3
 8011ef0:	b2db      	uxtb	r3, r3
 8011ef2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8011ef4:	89fb      	ldrh	r3, [r7, #14]
}
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	3714      	adds	r7, #20
 8011efa:	46bd      	mov	sp, r7
 8011efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f00:	4770      	bx	lr
 8011f02:	bf00      	nop
 8011f04:	080124d0 	.word	0x080124d0

08011f08 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8011f08:	b480      	push	{r7}
 8011f0a:	b087      	sub	sp, #28
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	4603      	mov	r3, r0
 8011f10:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8011f12:	88fb      	ldrh	r3, [r7, #6]
 8011f14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011f18:	d201      	bcs.n	8011f1e <ff_wtoupper+0x16>
 8011f1a:	4b3e      	ldr	r3, [pc, #248]	@ (8012014 <ff_wtoupper+0x10c>)
 8011f1c:	e000      	b.n	8011f20 <ff_wtoupper+0x18>
 8011f1e:	4b3e      	ldr	r3, [pc, #248]	@ (8012018 <ff_wtoupper+0x110>)
 8011f20:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8011f22:	697b      	ldr	r3, [r7, #20]
 8011f24:	1c9a      	adds	r2, r3, #2
 8011f26:	617a      	str	r2, [r7, #20]
 8011f28:	881b      	ldrh	r3, [r3, #0]
 8011f2a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8011f2c:	8a7b      	ldrh	r3, [r7, #18]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d068      	beq.n	8012004 <ff_wtoupper+0xfc>
 8011f32:	88fa      	ldrh	r2, [r7, #6]
 8011f34:	8a7b      	ldrh	r3, [r7, #18]
 8011f36:	429a      	cmp	r2, r3
 8011f38:	d364      	bcc.n	8012004 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8011f3a:	697b      	ldr	r3, [r7, #20]
 8011f3c:	1c9a      	adds	r2, r3, #2
 8011f3e:	617a      	str	r2, [r7, #20]
 8011f40:	881b      	ldrh	r3, [r3, #0]
 8011f42:	823b      	strh	r3, [r7, #16]
 8011f44:	8a3b      	ldrh	r3, [r7, #16]
 8011f46:	0a1b      	lsrs	r3, r3, #8
 8011f48:	81fb      	strh	r3, [r7, #14]
 8011f4a:	8a3b      	ldrh	r3, [r7, #16]
 8011f4c:	b2db      	uxtb	r3, r3
 8011f4e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8011f50:	88fa      	ldrh	r2, [r7, #6]
 8011f52:	8a79      	ldrh	r1, [r7, #18]
 8011f54:	8a3b      	ldrh	r3, [r7, #16]
 8011f56:	440b      	add	r3, r1
 8011f58:	429a      	cmp	r2, r3
 8011f5a:	da49      	bge.n	8011ff0 <ff_wtoupper+0xe8>
			switch (cmd) {
 8011f5c:	89fb      	ldrh	r3, [r7, #14]
 8011f5e:	2b08      	cmp	r3, #8
 8011f60:	d84f      	bhi.n	8012002 <ff_wtoupper+0xfa>
 8011f62:	a201      	add	r2, pc, #4	@ (adr r2, 8011f68 <ff_wtoupper+0x60>)
 8011f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f68:	08011f8d 	.word	0x08011f8d
 8011f6c:	08011f9f 	.word	0x08011f9f
 8011f70:	08011fb5 	.word	0x08011fb5
 8011f74:	08011fbd 	.word	0x08011fbd
 8011f78:	08011fc5 	.word	0x08011fc5
 8011f7c:	08011fcd 	.word	0x08011fcd
 8011f80:	08011fd5 	.word	0x08011fd5
 8011f84:	08011fdd 	.word	0x08011fdd
 8011f88:	08011fe5 	.word	0x08011fe5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8011f8c:	88fa      	ldrh	r2, [r7, #6]
 8011f8e:	8a7b      	ldrh	r3, [r7, #18]
 8011f90:	1ad3      	subs	r3, r2, r3
 8011f92:	005b      	lsls	r3, r3, #1
 8011f94:	697a      	ldr	r2, [r7, #20]
 8011f96:	4413      	add	r3, r2
 8011f98:	881b      	ldrh	r3, [r3, #0]
 8011f9a:	80fb      	strh	r3, [r7, #6]
 8011f9c:	e027      	b.n	8011fee <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8011f9e:	88fa      	ldrh	r2, [r7, #6]
 8011fa0:	8a7b      	ldrh	r3, [r7, #18]
 8011fa2:	1ad3      	subs	r3, r2, r3
 8011fa4:	b29b      	uxth	r3, r3
 8011fa6:	f003 0301 	and.w	r3, r3, #1
 8011faa:	b29b      	uxth	r3, r3
 8011fac:	88fa      	ldrh	r2, [r7, #6]
 8011fae:	1ad3      	subs	r3, r2, r3
 8011fb0:	80fb      	strh	r3, [r7, #6]
 8011fb2:	e01c      	b.n	8011fee <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8011fb4:	88fb      	ldrh	r3, [r7, #6]
 8011fb6:	3b10      	subs	r3, #16
 8011fb8:	80fb      	strh	r3, [r7, #6]
 8011fba:	e018      	b.n	8011fee <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8011fbc:	88fb      	ldrh	r3, [r7, #6]
 8011fbe:	3b20      	subs	r3, #32
 8011fc0:	80fb      	strh	r3, [r7, #6]
 8011fc2:	e014      	b.n	8011fee <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8011fc4:	88fb      	ldrh	r3, [r7, #6]
 8011fc6:	3b30      	subs	r3, #48	@ 0x30
 8011fc8:	80fb      	strh	r3, [r7, #6]
 8011fca:	e010      	b.n	8011fee <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8011fcc:	88fb      	ldrh	r3, [r7, #6]
 8011fce:	3b1a      	subs	r3, #26
 8011fd0:	80fb      	strh	r3, [r7, #6]
 8011fd2:	e00c      	b.n	8011fee <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8011fd4:	88fb      	ldrh	r3, [r7, #6]
 8011fd6:	3308      	adds	r3, #8
 8011fd8:	80fb      	strh	r3, [r7, #6]
 8011fda:	e008      	b.n	8011fee <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8011fdc:	88fb      	ldrh	r3, [r7, #6]
 8011fde:	3b50      	subs	r3, #80	@ 0x50
 8011fe0:	80fb      	strh	r3, [r7, #6]
 8011fe2:	e004      	b.n	8011fee <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8011fe4:	88fb      	ldrh	r3, [r7, #6]
 8011fe6:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8011fea:	80fb      	strh	r3, [r7, #6]
 8011fec:	bf00      	nop
			}
			break;
 8011fee:	e008      	b.n	8012002 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8011ff0:	89fb      	ldrh	r3, [r7, #14]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d195      	bne.n	8011f22 <ff_wtoupper+0x1a>
 8011ff6:	8a3b      	ldrh	r3, [r7, #16]
 8011ff8:	005b      	lsls	r3, r3, #1
 8011ffa:	697a      	ldr	r2, [r7, #20]
 8011ffc:	4413      	add	r3, r2
 8011ffe:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8012000:	e78f      	b.n	8011f22 <ff_wtoupper+0x1a>
			break;
 8012002:	bf00      	nop
	}

	return chr;
 8012004:	88fb      	ldrh	r3, [r7, #6]
}
 8012006:	4618      	mov	r0, r3
 8012008:	371c      	adds	r7, #28
 801200a:	46bd      	mov	sp, r7
 801200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012010:	4770      	bx	lr
 8012012:	bf00      	nop
 8012014:	080125d0 	.word	0x080125d0
 8012018:	080127c4 	.word	0x080127c4

0801201c <memset>:
 801201c:	4402      	add	r2, r0
 801201e:	4603      	mov	r3, r0
 8012020:	4293      	cmp	r3, r2
 8012022:	d100      	bne.n	8012026 <memset+0xa>
 8012024:	4770      	bx	lr
 8012026:	f803 1b01 	strb.w	r1, [r3], #1
 801202a:	e7f9      	b.n	8012020 <memset+0x4>

0801202c <__errno>:
 801202c:	4b01      	ldr	r3, [pc, #4]	@ (8012034 <__errno+0x8>)
 801202e:	6818      	ldr	r0, [r3, #0]
 8012030:	4770      	bx	lr
 8012032:	bf00      	nop
 8012034:	2400006c 	.word	0x2400006c

08012038 <__libc_init_array>:
 8012038:	b570      	push	{r4, r5, r6, lr}
 801203a:	4d0d      	ldr	r5, [pc, #52]	@ (8012070 <__libc_init_array+0x38>)
 801203c:	4c0d      	ldr	r4, [pc, #52]	@ (8012074 <__libc_init_array+0x3c>)
 801203e:	1b64      	subs	r4, r4, r5
 8012040:	10a4      	asrs	r4, r4, #2
 8012042:	2600      	movs	r6, #0
 8012044:	42a6      	cmp	r6, r4
 8012046:	d109      	bne.n	801205c <__libc_init_array+0x24>
 8012048:	4d0b      	ldr	r5, [pc, #44]	@ (8012078 <__libc_init_array+0x40>)
 801204a:	4c0c      	ldr	r4, [pc, #48]	@ (801207c <__libc_init_array+0x44>)
 801204c:	f000 f954 	bl	80122f8 <_init>
 8012050:	1b64      	subs	r4, r4, r5
 8012052:	10a4      	asrs	r4, r4, #2
 8012054:	2600      	movs	r6, #0
 8012056:	42a6      	cmp	r6, r4
 8012058:	d105      	bne.n	8012066 <__libc_init_array+0x2e>
 801205a:	bd70      	pop	{r4, r5, r6, pc}
 801205c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012060:	4798      	blx	r3
 8012062:	3601      	adds	r6, #1
 8012064:	e7ee      	b.n	8012044 <__libc_init_array+0xc>
 8012066:	f855 3b04 	ldr.w	r3, [r5], #4
 801206a:	4798      	blx	r3
 801206c:	3601      	adds	r6, #1
 801206e:	e7f2      	b.n	8012056 <__libc_init_array+0x1e>
 8012070:	08013118 	.word	0x08013118
 8012074:	08013118 	.word	0x08013118
 8012078:	08013118 	.word	0x08013118
 801207c:	0801311c 	.word	0x0801311c

08012080 <memcpy>:
 8012080:	440a      	add	r2, r1
 8012082:	4291      	cmp	r1, r2
 8012084:	f100 33ff 	add.w	r3, r0, #4294967295
 8012088:	d100      	bne.n	801208c <memcpy+0xc>
 801208a:	4770      	bx	lr
 801208c:	b510      	push	{r4, lr}
 801208e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012092:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012096:	4291      	cmp	r1, r2
 8012098:	d1f9      	bne.n	801208e <memcpy+0xe>
 801209a:	bd10      	pop	{r4, pc}
 801209c:	0000      	movs	r0, r0
	...

080120a0 <log>:
 80120a0:	b4f0      	push	{r4, r5, r6, r7}
 80120a2:	ee10 0a90 	vmov	r0, s1
 80120a6:	ee10 3a10 	vmov	r3, s0
 80120aa:	f04f 34ff 	mov.w	r4, #4294967295
 80120ae:	429c      	cmp	r4, r3
 80120b0:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 80120b4:	4c70      	ldr	r4, [pc, #448]	@ (8012278 <log+0x1d8>)
 80120b6:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 80120ba:	418c      	sbcs	r4, r1
 80120bc:	ed2d 8b02 	vpush	{d8}
 80120c0:	ea4f 4210 	mov.w	r2, r0, lsr #16
 80120c4:	d35a      	bcc.n	801217c <log+0xdc>
 80120c6:	4a6d      	ldr	r2, [pc, #436]	@ (801227c <log+0x1dc>)
 80120c8:	4290      	cmp	r0, r2
 80120ca:	bf08      	it	eq
 80120cc:	2b00      	cmpeq	r3, #0
 80120ce:	f000 80c4 	beq.w	801225a <log+0x1ba>
 80120d2:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 80120d6:	ee30 0b47 	vsub.f64	d0, d0, d7
 80120da:	4b69      	ldr	r3, [pc, #420]	@ (8012280 <log+0x1e0>)
 80120dc:	ee20 2b00 	vmul.f64	d2, d0, d0
 80120e0:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 80120e4:	ee20 4b02 	vmul.f64	d4, d0, d2
 80120e8:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 80120ec:	eea6 7b00 	vfma.f64	d7, d6, d0
 80120f0:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 80120f4:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 80120f8:	eea6 7b02 	vfma.f64	d7, d6, d2
 80120fc:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 8012100:	eea5 6b00 	vfma.f64	d6, d5, d0
 8012104:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 8012108:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 801210c:	eea5 6b02 	vfma.f64	d6, d5, d2
 8012110:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 8012114:	eea3 5b00 	vfma.f64	d5, d3, d0
 8012118:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 801211c:	eea3 5b02 	vfma.f64	d5, d3, d2
 8012120:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 8012124:	eea3 5b04 	vfma.f64	d5, d3, d4
 8012128:	eea5 6b04 	vfma.f64	d6, d5, d4
 801212c:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8012130:	eea6 7b04 	vfma.f64	d7, d6, d4
 8012134:	eeb0 2b47 	vmov.f64	d2, d7
 8012138:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 8012260 <log+0x1c0>
 801213c:	eeb0 6b40 	vmov.f64	d6, d0
 8012140:	eeb0 3b40 	vmov.f64	d3, d0
 8012144:	eea0 6b07 	vfma.f64	d6, d0, d7
 8012148:	eea0 6b47 	vfms.f64	d6, d0, d7
 801214c:	ee30 8b46 	vsub.f64	d8, d0, d6
 8012150:	ee26 1b06 	vmul.f64	d1, d6, d6
 8012154:	eea1 3b05 	vfma.f64	d3, d1, d5
 8012158:	ee30 7b43 	vsub.f64	d7, d0, d3
 801215c:	ee30 0b06 	vadd.f64	d0, d0, d6
 8012160:	eea1 7b05 	vfma.f64	d7, d1, d5
 8012164:	ee25 5b08 	vmul.f64	d5, d5, d8
 8012168:	eea5 7b00 	vfma.f64	d7, d5, d0
 801216c:	eea2 7b04 	vfma.f64	d7, d2, d4
 8012170:	ee33 0b07 	vadd.f64	d0, d3, d7
 8012174:	ecbd 8b02 	vpop	{d8}
 8012178:	bcf0      	pop	{r4, r5, r6, r7}
 801217a:	4770      	bx	lr
 801217c:	f1a2 0410 	sub.w	r4, r2, #16
 8012180:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 8012184:	428c      	cmp	r4, r1
 8012186:	d923      	bls.n	80121d0 <log+0x130>
 8012188:	18d9      	adds	r1, r3, r3
 801218a:	eb40 0400 	adc.w	r4, r0, r0
 801218e:	4321      	orrs	r1, r4
 8012190:	d105      	bne.n	801219e <log+0xfe>
 8012192:	ecbd 8b02 	vpop	{d8}
 8012196:	2001      	movs	r0, #1
 8012198:	bcf0      	pop	{r4, r5, r6, r7}
 801219a:	f000 b885 	b.w	80122a8 <__math_divzero>
 801219e:	4939      	ldr	r1, [pc, #228]	@ (8012284 <log+0x1e4>)
 80121a0:	4288      	cmp	r0, r1
 80121a2:	bf08      	it	eq
 80121a4:	2b00      	cmpeq	r3, #0
 80121a6:	d0e5      	beq.n	8012174 <log+0xd4>
 80121a8:	0413      	lsls	r3, r2, #16
 80121aa:	d403      	bmi.n	80121b4 <log+0x114>
 80121ac:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80121b0:	4393      	bics	r3, r2
 80121b2:	d104      	bne.n	80121be <log+0x11e>
 80121b4:	ecbd 8b02 	vpop	{d8}
 80121b8:	bcf0      	pop	{r4, r5, r6, r7}
 80121ba:	f000 b88d 	b.w	80122d8 <__math_invalid>
 80121be:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8012268 <log+0x1c8>
 80121c2:	ee20 7b07 	vmul.f64	d7, d0, d7
 80121c6:	ec53 2b17 	vmov	r2, r3, d7
 80121ca:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 80121ce:	4613      	mov	r3, r2
 80121d0:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 80121d4:	492a      	ldr	r1, [pc, #168]	@ (8012280 <log+0x1e0>)
 80121d6:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 80121da:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 80121de:	f3c2 3446 	ubfx	r4, r2, #13, #7
 80121e2:	0d15      	lsrs	r5, r2, #20
 80121e4:	eb01 1c04 	add.w	ip, r1, r4, lsl #4
 80121e8:	052d      	lsls	r5, r5, #20
 80121ea:	ed9c 7b24 	vldr	d7, [ip, #144]	@ 0x90
 80121ee:	1e1e      	subs	r6, r3, #0
 80121f0:	1b47      	subs	r7, r0, r5
 80121f2:	ec47 6b16 	vmov	d6, r6, r7
 80121f6:	1512      	asrs	r2, r2, #20
 80121f8:	eea7 5b06 	vfma.f64	d5, d7, d6
 80121fc:	ee07 2a90 	vmov	s15, r2
 8012200:	ee25 2b05 	vmul.f64	d2, d5, d5
 8012204:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8012208:	ed91 4b00 	vldr	d4, [r1]
 801220c:	ee25 1b02 	vmul.f64	d1, d5, d2
 8012210:	ed9c 7b26 	vldr	d7, [ip, #152]	@ 0x98
 8012214:	eea4 7b06 	vfma.f64	d7, d4, d6
 8012218:	ee35 4b07 	vadd.f64	d4, d5, d7
 801221c:	ee37 0b44 	vsub.f64	d0, d7, d4
 8012220:	ed91 7b02 	vldr	d7, [r1, #8]
 8012224:	ee30 0b05 	vadd.f64	d0, d0, d5
 8012228:	eea7 0b06 	vfma.f64	d0, d7, d6
 801222c:	ed91 7b04 	vldr	d7, [r1, #16]
 8012230:	ed91 6b08 	vldr	d6, [r1, #32]
 8012234:	eea7 0b02 	vfma.f64	d0, d7, d2
 8012238:	ed91 7b06 	vldr	d7, [r1, #24]
 801223c:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 8012240:	eea6 7b05 	vfma.f64	d7, d6, d5
 8012244:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 8012248:	eea3 6b05 	vfma.f64	d6, d3, d5
 801224c:	eea6 7b02 	vfma.f64	d7, d6, d2
 8012250:	eea1 0b07 	vfma.f64	d0, d1, d7
 8012254:	ee30 0b04 	vadd.f64	d0, d0, d4
 8012258:	e78c      	b.n	8012174 <log+0xd4>
 801225a:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 8012270 <log+0x1d0>
 801225e:	e789      	b.n	8012174 <log+0xd4>
 8012260:	00000000 	.word	0x00000000
 8012264:	41a00000 	.word	0x41a00000
 8012268:	00000000 	.word	0x00000000
 801226c:	43300000 	.word	0x43300000
	...
 8012278:	000308ff 	.word	0x000308ff
 801227c:	3ff00000 	.word	0x3ff00000
 8012280:	08012880 	.word	0x08012880
 8012284:	7ff00000 	.word	0x7ff00000

08012288 <with_errno>:
 8012288:	b510      	push	{r4, lr}
 801228a:	ed2d 8b02 	vpush	{d8}
 801228e:	eeb0 8b40 	vmov.f64	d8, d0
 8012292:	4604      	mov	r4, r0
 8012294:	f7ff feca 	bl	801202c <__errno>
 8012298:	eeb0 0b48 	vmov.f64	d0, d8
 801229c:	ecbd 8b02 	vpop	{d8}
 80122a0:	6004      	str	r4, [r0, #0]
 80122a2:	bd10      	pop	{r4, pc}
 80122a4:	0000      	movs	r0, r0
	...

080122a8 <__math_divzero>:
 80122a8:	b082      	sub	sp, #8
 80122aa:	2800      	cmp	r0, #0
 80122ac:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 80122b0:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 80122b4:	fe07 7b06 	vseleq.f64	d7, d7, d6
 80122b8:	ed8d 7b00 	vstr	d7, [sp]
 80122bc:	ed9d 0b00 	vldr	d0, [sp]
 80122c0:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 80122d0 <__math_divzero+0x28>
 80122c4:	2022      	movs	r0, #34	@ 0x22
 80122c6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 80122ca:	b002      	add	sp, #8
 80122cc:	f7ff bfdc 	b.w	8012288 <with_errno>
	...

080122d8 <__math_invalid>:
 80122d8:	eeb0 7b40 	vmov.f64	d7, d0
 80122dc:	eeb4 7b47 	vcmp.f64	d7, d7
 80122e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122e4:	ee30 6b40 	vsub.f64	d6, d0, d0
 80122e8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 80122ec:	d602      	bvs.n	80122f4 <__math_invalid+0x1c>
 80122ee:	2021      	movs	r0, #33	@ 0x21
 80122f0:	f7ff bfca 	b.w	8012288 <with_errno>
 80122f4:	4770      	bx	lr
	...

080122f8 <_init>:
 80122f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122fa:	bf00      	nop
 80122fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80122fe:	bc08      	pop	{r3}
 8012300:	469e      	mov	lr, r3
 8012302:	4770      	bx	lr

08012304 <_fini>:
 8012304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012306:	bf00      	nop
 8012308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801230a:	bc08      	pop	{r3}
 801230c:	469e      	mov	lr, r3
 801230e:	4770      	bx	lr
