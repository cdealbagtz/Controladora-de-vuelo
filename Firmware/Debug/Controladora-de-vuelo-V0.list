
Controladora-de-vuelo-V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019740  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e70  080199f0  080199f0  0001a9f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801a860  0801a860  0001b860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801a868  0801a868  0001b868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801a86c  0801a86c  0001b86c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000f8  24000000  0801a870  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000057c0  240000f8  0801a968  0001c0f8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240058b8  0801a968  0001c8b8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001c0f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00035654  00000000  00000000  0001c126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007a5f  00000000  00000000  0005177a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002938  00000000  00000000  000591e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001fc1  00000000  00000000  0005bb18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003cfc7  00000000  00000000  0005dad9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000411c1  00000000  00000000  0009aaa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015fdbd  00000000  00000000  000dbc61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0023ba1e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ac18  00000000  00000000  0023ba64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000075  00000000  00000000  0024667c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240000f8 	.word	0x240000f8
 80002cc:	00000000 	.word	0x00000000
 80002d0:	080199d8 	.word	0x080199d8

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240000fc 	.word	0x240000fc
 80002ec:	080199d8 	.word	0x080199d8

080002f0 <__aeabi_ldivmod>:
 80002f0:	b97b      	cbnz	r3, 8000312 <__aeabi_ldivmod+0x22>
 80002f2:	b972      	cbnz	r2, 8000312 <__aeabi_ldivmod+0x22>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bfbe      	ittt	lt
 80002f8:	2000      	movlt	r0, #0
 80002fa:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002fe:	e006      	blt.n	800030e <__aeabi_ldivmod+0x1e>
 8000300:	bf08      	it	eq
 8000302:	2800      	cmpeq	r0, #0
 8000304:	bf1c      	itt	ne
 8000306:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800030a:	f04f 30ff 	movne.w	r0, #4294967295
 800030e:	f000 b9d3 	b.w	80006b8 <__aeabi_idiv0>
 8000312:	f1ad 0c08 	sub.w	ip, sp, #8
 8000316:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031a:	2900      	cmp	r1, #0
 800031c:	db09      	blt.n	8000332 <__aeabi_ldivmod+0x42>
 800031e:	2b00      	cmp	r3, #0
 8000320:	db1a      	blt.n	8000358 <__aeabi_ldivmod+0x68>
 8000322:	f000 f84d 	bl	80003c0 <__udivmoddi4>
 8000326:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032e:	b004      	add	sp, #16
 8000330:	4770      	bx	lr
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	db1b      	blt.n	8000374 <__aeabi_ldivmod+0x84>
 800033c:	f000 f840 	bl	80003c0 <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	4252      	negs	r2, r2
 8000352:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000356:	4770      	bx	lr
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	f000 f82f 	bl	80003c0 <__udivmoddi4>
 8000362:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036a:	b004      	add	sp, #16
 800036c:	4240      	negs	r0, r0
 800036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000372:	4770      	bx	lr
 8000374:	4252      	negs	r2, r2
 8000376:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037a:	f000 f821 	bl	80003c0 <__udivmoddi4>
 800037e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000386:	b004      	add	sp, #16
 8000388:	4252      	negs	r2, r2
 800038a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <init_PIDs>:
float theta_ref , phi_ref;
float error_phi ,  error_theta ;
float u_phi, u_theta ;

void init_PIDs(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
	//para inicializacion del roll

	pid_roll.Kp = KP_roll;
 80006c0:	4b13      	ldr	r3, [pc, #76]	@ (8000710 <init_PIDs+0x54>)
 80006c2:	4a14      	ldr	r2, [pc, #80]	@ (8000714 <init_PIDs+0x58>)
 80006c4:	601a      	str	r2, [r3, #0]
	pid_roll.Ki = KI_roll;
 80006c6:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <init_PIDs+0x54>)
 80006c8:	f04f 0200 	mov.w	r2, #0
 80006cc:	605a      	str	r2, [r3, #4]
	pid_roll.integrator = 0.0f;
 80006ce:	4b10      	ldr	r3, [pc, #64]	@ (8000710 <init_PIDs+0x54>)
 80006d0:	f04f 0200 	mov.w	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
	pid_roll.out_min = -1.0f;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000710 <init_PIDs+0x54>)
 80006d8:	4a0f      	ldr	r2, [pc, #60]	@ (8000718 <init_PIDs+0x5c>)
 80006da:	60da      	str	r2, [r3, #12]
	pid_roll.out_max = 1.0f;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <init_PIDs+0x54>)
 80006de:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80006e2:	611a      	str	r2, [r3, #16]

	pid_pitch.Kp = KP_pitch;
 80006e4:	4b0d      	ldr	r3, [pc, #52]	@ (800071c <init_PIDs+0x60>)
 80006e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000720 <init_PIDs+0x64>)
 80006e8:	601a      	str	r2, [r3, #0]
	pid_pitch.Ki = KI_pitch;
 80006ea:	4b0c      	ldr	r3, [pc, #48]	@ (800071c <init_PIDs+0x60>)
 80006ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000724 <init_PIDs+0x68>)
 80006ee:	605a      	str	r2, [r3, #4]
	pid_pitch.integrator = 0.0f;
 80006f0:	4b0a      	ldr	r3, [pc, #40]	@ (800071c <init_PIDs+0x60>)
 80006f2:	f04f 0200 	mov.w	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
	pid_pitch.out_min = -1.0f;
 80006f8:	4b08      	ldr	r3, [pc, #32]	@ (800071c <init_PIDs+0x60>)
 80006fa:	4a07      	ldr	r2, [pc, #28]	@ (8000718 <init_PIDs+0x5c>)
 80006fc:	60da      	str	r2, [r3, #12]
	pid_pitch.out_max = 1.0f;
 80006fe:	4b07      	ldr	r3, [pc, #28]	@ (800071c <init_PIDs+0x60>)
 8000700:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000704:	611a      	str	r2, [r3, #16]
}
 8000706:	bf00      	nop
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	24000114 	.word	0x24000114
 8000714:	33d6bf95 	.word	0x33d6bf95
 8000718:	bf800000 	.word	0xbf800000
 800071c:	24000128 	.word	0x24000128
 8000720:	3c23d70a 	.word	0x3c23d70a
 8000724:	358637bd 	.word	0x358637bd

08000728 <attitude_hold_control>:

Cmd_s attitude_hold_control(Cmd_s inputs_norms, Att_s actual_atts , Gyro_s actual_gyro, Cmd_s K)
{
 8000728:	b590      	push	{r4, r7, lr}
 800072a:	b09b      	sub	sp, #108	@ 0x6c
 800072c:	af00      	add	r7, sp, #0
 800072e:	eef0 6a45 	vmov.f32	s13, s10
 8000732:	eeb0 7a65 	vmov.f32	s14, s11
 8000736:	eef0 7a46 	vmov.f32	s15, s12
 800073a:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
 800073e:	edc7 0a0f 	vstr	s1, [r7, #60]	@ 0x3c
 8000742:	ed87 1a10 	vstr	s2, [r7, #64]	@ 0x40
 8000746:	edc7 1a11 	vstr	s3, [r7, #68]	@ 0x44
 800074a:	ed87 2a0c 	vstr	s4, [r7, #48]	@ 0x30
 800074e:	edc7 2a0d 	vstr	s5, [r7, #52]	@ 0x34
 8000752:	ed87 3a09 	vstr	s6, [r7, #36]	@ 0x24
 8000756:	edc7 3a0a 	vstr	s7, [r7, #40]	@ 0x28
 800075a:	ed87 4a0b 	vstr	s8, [r7, #44]	@ 0x2c
 800075e:	edc7 4a05 	vstr	s9, [r7, #20]
 8000762:	edc7 6a06 	vstr	s13, [r7, #24]
 8000766:	ed87 7a07 	vstr	s14, [r7, #28]
 800076a:	edc7 7a08 	vstr	s15, [r7, #32]
	//
	Cmd_s Outs;
	// Attitude reference
	theta_ref = inputs_norms.pitch * pitch_sat ;
 800076e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000772:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8000776:	ee67 7a87 	vmul.f32	s15, s15, s14
 800077a:	4b42      	ldr	r3, [pc, #264]	@ (8000884 <attitude_hold_control+0x15c>)
 800077c:	edc3 7a00 	vstr	s15, [r3]
	phi_ref   = inputs_norms.roll  * roll_sat  ;
 8000780:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000784:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8000888 <attitude_hold_control+0x160>
 8000788:	ee67 7a87 	vmul.f32	s15, s15, s14
 800078c:	4b3f      	ldr	r3, [pc, #252]	@ (800088c <attitude_hold_control+0x164>)
 800078e:	edc3 7a00 	vstr	s15, [r3]

	// Attitude Error
	error_phi 	= phi_ref 	- actual_atts.roll ;
 8000792:	4b3e      	ldr	r3, [pc, #248]	@ (800088c <attitude_hold_control+0x164>)
 8000794:	ed93 7a00 	vldr	s14, [r3]
 8000798:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800079c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80007a0:	4b3b      	ldr	r3, [pc, #236]	@ (8000890 <attitude_hold_control+0x168>)
 80007a2:	edc3 7a00 	vstr	s15, [r3]
	error_theta = theta_ref - actual_atts.pitch ;
 80007a6:	4b37      	ldr	r3, [pc, #220]	@ (8000884 <attitude_hold_control+0x15c>)
 80007a8:	ed93 7a00 	vldr	s14, [r3]
 80007ac:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80007b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80007b4:	4b37      	ldr	r3, [pc, #220]	@ (8000894 <attitude_hold_control+0x16c>)
 80007b6:	edc3 7a00 	vstr	s15, [r3]

	// Ejecucion del PID
	u_phi 	=  PI_Compute(&pid_roll,  error_phi  , SAMPLE_ATT ) ;
 80007ba:	4b35      	ldr	r3, [pc, #212]	@ (8000890 <attitude_hold_control+0x168>)
 80007bc:	edd3 7a00 	vldr	s15, [r3]
 80007c0:	eddf 0a35 	vldr	s1, [pc, #212]	@ 8000898 <attitude_hold_control+0x170>
 80007c4:	eeb0 0a67 	vmov.f32	s0, s15
 80007c8:	4834      	ldr	r0, [pc, #208]	@ (800089c <attitude_hold_control+0x174>)
 80007ca:	f000 fc6b 	bl	80010a4 <PI_Compute>
 80007ce:	eef0 7a40 	vmov.f32	s15, s0
 80007d2:	4b33      	ldr	r3, [pc, #204]	@ (80008a0 <attitude_hold_control+0x178>)
 80007d4:	edc3 7a00 	vstr	s15, [r3]
	u_theta =  PI_Compute(&pid_pitch, error_theta, SAMPLE_ATT ) ;
 80007d8:	4b2e      	ldr	r3, [pc, #184]	@ (8000894 <attitude_hold_control+0x16c>)
 80007da:	edd3 7a00 	vldr	s15, [r3]
 80007de:	eddf 0a2e 	vldr	s1, [pc, #184]	@ 8000898 <attitude_hold_control+0x170>
 80007e2:	eeb0 0a67 	vmov.f32	s0, s15
 80007e6:	482f      	ldr	r0, [pc, #188]	@ (80008a4 <attitude_hold_control+0x17c>)
 80007e8:	f000 fc5c 	bl	80010a4 <PI_Compute>
 80007ec:	eef0 7a40 	vmov.f32	s15, s0
 80007f0:	4b2d      	ldr	r3, [pc, #180]	@ (80008a8 <attitude_hold_control+0x180>)
 80007f2:	edc3 7a00 	vstr	s15, [r3]

	Outs.roll   = u_phi   -  actual_gyro.roll * K.roll  ;
 80007f6:	4b2a      	ldr	r3, [pc, #168]	@ (80008a0 <attitude_hold_control+0x178>)
 80007f8:	ed93 7a00 	vldr	s14, [r3]
 80007fc:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8000800:	edd7 7a05 	vldr	s15, [r7, #20]
 8000804:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000808:	ee77 7a67 	vsub.f32	s15, s14, s15
 800080c:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
	Outs.pitch  = u_theta -  actual_gyro.pitch* K.pitch ;
 8000810:	4b25      	ldr	r3, [pc, #148]	@ (80008a8 <attitude_hold_control+0x180>)
 8000812:	ed93 7a00 	vldr	s14, [r3]
 8000816:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 800081a:	edd7 7a06 	vldr	s15, [r7, #24]
 800081e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000822:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000826:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

	//Yaw Damping
	Outs.yaw    = inputs_norms.yaw   -  actual_gyro.yaw  * K.yaw ;
 800082a:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800082e:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8000832:	edd7 7a07 	vldr	s15, [r7, #28]
 8000836:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800083a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800083e:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
	//Feedforwa
	Outs.thrust = inputs_norms.thrust ;
 8000842:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000844:	657b      	str	r3, [r7, #84]	@ 0x54

	return Outs;
 8000846:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800084a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800084e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000850:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000854:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8000856:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8000858:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800085a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800085c:	ee06 0a10 	vmov	s12, r0
 8000860:	ee06 1a90 	vmov	s13, r1
 8000864:	ee07 2a10 	vmov	s14, r2
 8000868:	ee07 3a90 	vmov	s15, r3
}
 800086c:	eeb0 0a46 	vmov.f32	s0, s12
 8000870:	eef0 0a66 	vmov.f32	s1, s13
 8000874:	eeb0 1a47 	vmov.f32	s2, s14
 8000878:	eef0 1a67 	vmov.f32	s3, s15
 800087c:	376c      	adds	r7, #108	@ 0x6c
 800087e:	46bd      	mov	sp, r7
 8000880:	bd90      	pop	{r4, r7, pc}
 8000882:	bf00      	nop
 8000884:	2400013c 	.word	0x2400013c
 8000888:	42200000 	.word	0x42200000
 800088c:	24000140 	.word	0x24000140
 8000890:	24000144 	.word	0x24000144
 8000894:	24000148 	.word	0x24000148
 8000898:	3c23d70a 	.word	0x3c23d70a
 800089c:	24000114 	.word	0x24000114
 80008a0:	2400014c 	.word	0x2400014c
 80008a4:	24000128 	.word	0x24000128
 80008a8:	24000150 	.word	0x24000150

080008ac <command_filtering>:
Servo_mgmt_s servo_outs ;
FilterState filters[4] = {{0.0f}, {0.0f}, {0.0f}, {0.0f}};


void command_filtering(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
	//
	commands_noise[0] = Command_out.roll   ;
 80008b2:	4b27      	ldr	r3, [pc, #156]	@ (8000950 <command_filtering+0xa4>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a27      	ldr	r2, [pc, #156]	@ (8000954 <command_filtering+0xa8>)
 80008b8:	6013      	str	r3, [r2, #0]
	commands_noise[1] = Command_out.pitch  ;
 80008ba:	4b25      	ldr	r3, [pc, #148]	@ (8000950 <command_filtering+0xa4>)
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	4a25      	ldr	r2, [pc, #148]	@ (8000954 <command_filtering+0xa8>)
 80008c0:	6053      	str	r3, [r2, #4]
	commands_noise[2] = Command_out.yaw    ;
 80008c2:	4b23      	ldr	r3, [pc, #140]	@ (8000950 <command_filtering+0xa4>)
 80008c4:	689b      	ldr	r3, [r3, #8]
 80008c6:	4a23      	ldr	r2, [pc, #140]	@ (8000954 <command_filtering+0xa8>)
 80008c8:	6093      	str	r3, [r2, #8]
	commands_noise[3] = Command_out.thrust ;
 80008ca:	4b21      	ldr	r3, [pc, #132]	@ (8000950 <command_filtering+0xa4>)
 80008cc:	68db      	ldr	r3, [r3, #12]
 80008ce:	4a21      	ldr	r2, [pc, #132]	@ (8000954 <command_filtering+0xa8>)
 80008d0:	60d3      	str	r3, [r2, #12]

	for(int idx = 0; idx < 4; idx++)
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	e023      	b.n	8000920 <command_filtering+0x74>
	{
		//
		ouput_fltr[idx] = filter_step(&filters[idx], commands_noise[idx],COF_cmds[idx],SAMPLE_ATT) ;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	4a1e      	ldr	r2, [pc, #120]	@ (8000958 <command_filtering+0xac>)
 80008de:	441a      	add	r2, r3
 80008e0:	491c      	ldr	r1, [pc, #112]	@ (8000954 <command_filtering+0xa8>)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	440b      	add	r3, r1
 80008e8:	edd3 7a00 	vldr	s15, [r3]
 80008ec:	491b      	ldr	r1, [pc, #108]	@ (800095c <command_filtering+0xb0>)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	440b      	add	r3, r1
 80008f4:	ed93 7a00 	vldr	s14, [r3]
 80008f8:	ed9f 1a19 	vldr	s2, [pc, #100]	@ 8000960 <command_filtering+0xb4>
 80008fc:	eef0 0a47 	vmov.f32	s1, s14
 8000900:	eeb0 0a67 	vmov.f32	s0, s15
 8000904:	4610      	mov	r0, r2
 8000906:	f001 fa4f 	bl	8001da8 <filter_step>
 800090a:	eef0 7a40 	vmov.f32	s15, s0
 800090e:	4a15      	ldr	r2, [pc, #84]	@ (8000964 <command_filtering+0xb8>)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	4413      	add	r3, r2
 8000916:	edc3 7a00 	vstr	s15, [r3]
	for(int idx = 0; idx < 4; idx++)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	3301      	adds	r3, #1
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2b03      	cmp	r3, #3
 8000924:	ddd8      	ble.n	80008d8 <command_filtering+0x2c>
	}
	//
	Commands.roll 		= 	ouput_fltr[0] ;
 8000926:	4b0f      	ldr	r3, [pc, #60]	@ (8000964 <command_filtering+0xb8>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a0f      	ldr	r2, [pc, #60]	@ (8000968 <command_filtering+0xbc>)
 800092c:	6013      	str	r3, [r2, #0]
	Commands.pitch 		= 	ouput_fltr[1] ;
 800092e:	4b0d      	ldr	r3, [pc, #52]	@ (8000964 <command_filtering+0xb8>)
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	4a0d      	ldr	r2, [pc, #52]	@ (8000968 <command_filtering+0xbc>)
 8000934:	6053      	str	r3, [r2, #4]
	Commands.yaw 		= 	ouput_fltr[2] ;
 8000936:	4b0b      	ldr	r3, [pc, #44]	@ (8000964 <command_filtering+0xb8>)
 8000938:	689b      	ldr	r3, [r3, #8]
 800093a:	4a0b      	ldr	r2, [pc, #44]	@ (8000968 <command_filtering+0xbc>)
 800093c:	6093      	str	r3, [r2, #8]
	Commands.thrust 	= 	ouput_fltr[3] ;
 800093e:	4b09      	ldr	r3, [pc, #36]	@ (8000964 <command_filtering+0xb8>)
 8000940:	68db      	ldr	r3, [r3, #12]
 8000942:	4a09      	ldr	r2, [pc, #36]	@ (8000968 <command_filtering+0xbc>)
 8000944:	60d3      	str	r3, [r2, #12]


}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	24000158 	.word	0x24000158
 8000954:	24000188 	.word	0x24000188
 8000958:	240001d8 	.word	0x240001d8
 800095c:	240001a8 	.word	0x240001a8
 8000960:	3c23d70a 	.word	0x3c23d70a
 8000964:	24000198 	.word	0x24000198
 8000968:	24000178 	.word	0x24000178

0800096c <control_allocator>:

void control_allocator(Cmd_s control_cmd, Cmd_s trims )
{
 800096c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800096e:	b093      	sub	sp, #76	@ 0x4c
 8000970:	af02      	add	r7, sp, #8
 8000972:	eeb0 4a40 	vmov.f32	s8, s0
 8000976:	eef0 4a60 	vmov.f32	s9, s1
 800097a:	eeb0 5a41 	vmov.f32	s10, s2
 800097e:	eef0 5a61 	vmov.f32	s11, s3
 8000982:	eeb0 6a42 	vmov.f32	s12, s4
 8000986:	eef0 6a62 	vmov.f32	s13, s5
 800098a:	eeb0 7a43 	vmov.f32	s14, s6
 800098e:	eef0 7a63 	vmov.f32	s15, s7
 8000992:	ed87 4a0a 	vstr	s8, [r7, #40]	@ 0x28
 8000996:	edc7 4a0b 	vstr	s9, [r7, #44]	@ 0x2c
 800099a:	ed87 5a0c 	vstr	s10, [r7, #48]	@ 0x30
 800099e:	edc7 5a0d 	vstr	s11, [r7, #52]	@ 0x34
 80009a2:	ed87 6a06 	vstr	s12, [r7, #24]
 80009a6:	edc7 6a07 	vstr	s13, [r7, #28]
 80009aa:	ed87 7a08 	vstr	s14, [r7, #32]
 80009ae:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	//
	Frame = CONFIGURATION;
 80009b2:	4b7c      	ldr	r3, [pc, #496]	@ (8000ba4 <control_allocator+0x238>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	701a      	strb	r2, [r3, #0]


	switch(Frame){
 80009b8:	4b7a      	ldr	r3, [pc, #488]	@ (8000ba4 <control_allocator+0x238>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b03      	cmp	r3, #3
 80009be:	f200 80c3 	bhi.w	8000b48 <control_allocator+0x1dc>
 80009c2:	a201      	add	r2, pc, #4	@ (adr r2, 80009c8 <control_allocator+0x5c>)
 80009c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009c8:	080009d9 	.word	0x080009d9
 80009cc:	08000a35 	.word	0x08000a35
 80009d0:	08000a91 	.word	0x08000a91
 80009d4:	08000aed 	.word	0x08000aed
		case FIX_WING:
			servo_outs = FIX_WING_MIXER(control_cmd, trims)     ;
 80009d8:	4c73      	ldr	r4, [pc, #460]	@ (8000ba8 <control_allocator+0x23c>)
 80009da:	463b      	mov	r3, r7
 80009dc:	ed97 4a06 	vldr	s8, [r7, #24]
 80009e0:	edd7 4a07 	vldr	s9, [r7, #28]
 80009e4:	ed97 5a08 	vldr	s10, [r7, #32]
 80009e8:	edd7 5a09 	vldr	s11, [r7, #36]	@ 0x24
 80009ec:	ed97 6a0a 	vldr	s12, [r7, #40]	@ 0x28
 80009f0:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 80009f4:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80009f8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80009fc:	eeb0 2a44 	vmov.f32	s4, s8
 8000a00:	eef0 2a64 	vmov.f32	s5, s9
 8000a04:	eeb0 3a45 	vmov.f32	s6, s10
 8000a08:	eef0 3a65 	vmov.f32	s7, s11
 8000a0c:	eeb0 0a46 	vmov.f32	s0, s12
 8000a10:	eef0 0a66 	vmov.f32	s1, s13
 8000a14:	eeb0 1a47 	vmov.f32	s2, s14
 8000a18:	eef0 1a67 	vmov.f32	s3, s15
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f000 fc7d 	bl	800131c <FIX_WING_MIXER>
 8000a22:	463d      	mov	r5, r7
 8000a24:	6828      	ldr	r0, [r5, #0]
 8000a26:	6869      	ldr	r1, [r5, #4]
 8000a28:	68aa      	ldr	r2, [r5, #8]
 8000a2a:	68eb      	ldr	r3, [r5, #12]
 8000a2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a2e:	6928      	ldr	r0, [r5, #16]
 8000a30:	6020      	str	r0, [r4, #0]
			break;
 8000a32:	e098      	b.n	8000b66 <control_allocator+0x1fa>
		case FLYING_WING:
			servo_outs = FLYING_WING_MIXER(control_cmd, trims)  ;
 8000a34:	4c5c      	ldr	r4, [pc, #368]	@ (8000ba8 <control_allocator+0x23c>)
 8000a36:	463b      	mov	r3, r7
 8000a38:	ed97 4a06 	vldr	s8, [r7, #24]
 8000a3c:	edd7 4a07 	vldr	s9, [r7, #28]
 8000a40:	ed97 5a08 	vldr	s10, [r7, #32]
 8000a44:	edd7 5a09 	vldr	s11, [r7, #36]	@ 0x24
 8000a48:	ed97 6a0a 	vldr	s12, [r7, #40]	@ 0x28
 8000a4c:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8000a50:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8000a54:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000a58:	eeb0 2a44 	vmov.f32	s4, s8
 8000a5c:	eef0 2a64 	vmov.f32	s5, s9
 8000a60:	eeb0 3a45 	vmov.f32	s6, s10
 8000a64:	eef0 3a65 	vmov.f32	s7, s11
 8000a68:	eeb0 0a46 	vmov.f32	s0, s12
 8000a6c:	eef0 0a66 	vmov.f32	s1, s13
 8000a70:	eeb0 1a47 	vmov.f32	s2, s14
 8000a74:	eef0 1a67 	vmov.f32	s3, s15
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f000 fd1f 	bl	80014bc <FLYING_WING_MIXER>
 8000a7e:	463d      	mov	r5, r7
 8000a80:	6828      	ldr	r0, [r5, #0]
 8000a82:	6869      	ldr	r1, [r5, #4]
 8000a84:	68aa      	ldr	r2, [r5, #8]
 8000a86:	68eb      	ldr	r3, [r5, #12]
 8000a88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a8a:	6928      	ldr	r0, [r5, #16]
 8000a8c:	6020      	str	r0, [r4, #0]
			break;
 8000a8e:	e06a      	b.n	8000b66 <control_allocator+0x1fa>
		case TANDEM_WING:
			servo_outs = TANDEM_WING_MIXER(control_cmd, trims)  ;
 8000a90:	4c45      	ldr	r4, [pc, #276]	@ (8000ba8 <control_allocator+0x23c>)
 8000a92:	463b      	mov	r3, r7
 8000a94:	ed97 4a06 	vldr	s8, [r7, #24]
 8000a98:	edd7 4a07 	vldr	s9, [r7, #28]
 8000a9c:	ed97 5a08 	vldr	s10, [r7, #32]
 8000aa0:	edd7 5a09 	vldr	s11, [r7, #36]	@ 0x24
 8000aa4:	ed97 6a0a 	vldr	s12, [r7, #40]	@ 0x28
 8000aa8:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8000aac:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8000ab0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000ab4:	eeb0 2a44 	vmov.f32	s4, s8
 8000ab8:	eef0 2a64 	vmov.f32	s5, s9
 8000abc:	eeb0 3a45 	vmov.f32	s6, s10
 8000ac0:	eef0 3a65 	vmov.f32	s7, s11
 8000ac4:	eeb0 0a46 	vmov.f32	s0, s12
 8000ac8:	eef0 0a66 	vmov.f32	s1, s13
 8000acc:	eeb0 1a47 	vmov.f32	s2, s14
 8000ad0:	eef0 1a67 	vmov.f32	s3, s15
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 fddd 	bl	8001694 <TANDEM_WING_MIXER>
 8000ada:	463d      	mov	r5, r7
 8000adc:	6828      	ldr	r0, [r5, #0]
 8000ade:	6869      	ldr	r1, [r5, #4]
 8000ae0:	68aa      	ldr	r2, [r5, #8]
 8000ae2:	68eb      	ldr	r3, [r5, #12]
 8000ae4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ae6:	6928      	ldr	r0, [r5, #16]
 8000ae8:	6020      	str	r0, [r4, #0]
			break;
 8000aea:	e03c      	b.n	8000b66 <control_allocator+0x1fa>
		case CUSTOM_FRAME:
			servo_outs = CUSTOM_FRAME_MIXER(control_cmd, trims) ;
 8000aec:	4c2e      	ldr	r4, [pc, #184]	@ (8000ba8 <control_allocator+0x23c>)
 8000aee:	463b      	mov	r3, r7
 8000af0:	ed97 4a06 	vldr	s8, [r7, #24]
 8000af4:	edd7 4a07 	vldr	s9, [r7, #28]
 8000af8:	ed97 5a08 	vldr	s10, [r7, #32]
 8000afc:	edd7 5a09 	vldr	s11, [r7, #36]	@ 0x24
 8000b00:	ed97 6a0a 	vldr	s12, [r7, #40]	@ 0x28
 8000b04:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8000b08:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8000b0c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000b10:	eeb0 2a44 	vmov.f32	s4, s8
 8000b14:	eef0 2a64 	vmov.f32	s5, s9
 8000b18:	eeb0 3a45 	vmov.f32	s6, s10
 8000b1c:	eef0 3a65 	vmov.f32	s7, s11
 8000b20:	eeb0 0a46 	vmov.f32	s0, s12
 8000b24:	eef0 0a66 	vmov.f32	s1, s13
 8000b28:	eeb0 1a47 	vmov.f32	s2, s14
 8000b2c:	eef0 1a67 	vmov.f32	s3, s15
 8000b30:	4618      	mov	r0, r3
 8000b32:	f000 fe9b 	bl	800186c <CUSTOM_FRAME_MIXER>
 8000b36:	463d      	mov	r5, r7
 8000b38:	6828      	ldr	r0, [r5, #0]
 8000b3a:	6869      	ldr	r1, [r5, #4]
 8000b3c:	68aa      	ldr	r2, [r5, #8]
 8000b3e:	68eb      	ldr	r3, [r5, #12]
 8000b40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b42:	6928      	ldr	r0, [r5, #16]
 8000b44:	6020      	str	r0, [r4, #0]
			break;
 8000b46:	e00e      	b.n	8000b66 <control_allocator+0x1fa>
		default:

			for(int i = 0; i < 10; i++)
 8000b48:	2300      	movs	r3, #0
 8000b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b4c:	e008      	b.n	8000b60 <control_allocator+0x1f4>
			{
				//
				servo_outs.S[i] = 1500 ;
 8000b4e:	4a16      	ldr	r2, [pc, #88]	@ (8000ba8 <control_allocator+0x23c>)
 8000b50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b52:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8000b56:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int i = 0; i < 10; i++)
 8000b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b62:	2b09      	cmp	r3, #9
 8000b64:	ddf3      	ble.n	8000b4e <control_allocator+0x1e2>
			}

		}

	PWM_Output = reverse_servos(servo_outs );
 8000b66:	4e11      	ldr	r6, [pc, #68]	@ (8000bac <control_allocator+0x240>)
 8000b68:	463c      	mov	r4, r7
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba8 <control_allocator+0x23c>)
 8000b6c:	466d      	mov	r5, sp
 8000b6e:	f103 020c 	add.w	r2, r3, #12
 8000b72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b76:	e885 0003 	stmia.w	r5, {r0, r1}
 8000b7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b7c:	4620      	mov	r0, r4
 8000b7e:	f000 f835 	bl	8000bec <reverse_servos>
 8000b82:	4632      	mov	r2, r6
 8000b84:	463b      	mov	r3, r7
 8000b86:	6819      	ldr	r1, [r3, #0]
 8000b88:	685d      	ldr	r5, [r3, #4]
 8000b8a:	689c      	ldr	r4, [r3, #8]
 8000b8c:	68d8      	ldr	r0, [r3, #12]
 8000b8e:	6011      	str	r1, [r2, #0]
 8000b90:	6055      	str	r5, [r2, #4]
 8000b92:	6094      	str	r4, [r2, #8]
 8000b94:	60d0      	str	r0, [r2, #12]
 8000b96:	6919      	ldr	r1, [r3, #16]
 8000b98:	6111      	str	r1, [r2, #16]
}
 8000b9a:	bf00      	nop
 8000b9c:	3744      	adds	r7, #68	@ 0x44
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	24000154 	.word	0x24000154
 8000ba8:	240001c4 	.word	0x240001c4
 8000bac:	24000018 	.word	0x24000018

08000bb0 <reverse_servo_value>:

uint16_t reverse_servo_value(uint16_t input)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	80fb      	strh	r3, [r7, #6]
    // Asegurarnos que el valor esté dentro del rango válido
    if (input < 1000) input = 1000;
 8000bba:	88fb      	ldrh	r3, [r7, #6]
 8000bbc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000bc0:	d202      	bcs.n	8000bc8 <reverse_servo_value+0x18>
 8000bc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bc6:	80fb      	strh	r3, [r7, #6]
    if (input > 2000) input = 2000;
 8000bc8:	88fb      	ldrh	r3, [r7, #6]
 8000bca:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000bce:	d902      	bls.n	8000bd6 <reverse_servo_value+0x26>
 8000bd0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000bd4:	80fb      	strh	r3, [r7, #6]

    // Calcular el valor invertido
    return 3000 - input;
 8000bd6:	88fb      	ldrh	r3, [r7, #6]
 8000bd8:	f5c3 633b 	rsb	r3, r3, #2992	@ 0xbb0
 8000bdc:	3308      	adds	r3, #8
 8000bde:	b29b      	uxth	r3, r3
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <reverse_servos>:


Servo_mgmt_s reverse_servos(Servo_mgmt_s inputs )
{
 8000bec:	b084      	sub	sp, #16
 8000bee:	b5b0      	push	{r4, r5, r7, lr}
 8000bf0:	b088      	sub	sp, #32
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
 8000bf6:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8000bfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//
	Servo_mgmt_s uotputs;

	for(int i = 0; i < 10; i++)
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
 8000c02:	e024      	b.n	8000c4e <reverse_servos+0x62>
	{
		//
		if (Reverse.S[i])
 8000c04:	4a1c      	ldr	r2, [pc, #112]	@ (8000c78 <reverse_servos+0x8c>)
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	4413      	add	r3, r2
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d010      	beq.n	8000c32 <reverse_servos+0x46>
		{
			//
			uotputs.S[i] = reverse_servo_value(inputs.S[i]);
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	3330      	adds	r3, #48	@ 0x30
 8000c16:	443b      	add	r3, r7
 8000c18:	889b      	ldrh	r3, [r3, #4]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff ffc8 	bl	8000bb0 <reverse_servo_value>
 8000c20:	4603      	mov	r3, r0
 8000c22:	461a      	mov	r2, r3
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	3320      	adds	r3, #32
 8000c2a:	443b      	add	r3, r7
 8000c2c:	f823 2c18 	strh.w	r2, [r3, #-24]
 8000c30:	e00a      	b.n	8000c48 <reverse_servos+0x5c>
		}
		else
		{
			//
			uotputs.S[i] = inputs.S[i];
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	3330      	adds	r3, #48	@ 0x30
 8000c38:	443b      	add	r3, r7
 8000c3a:	889a      	ldrh	r2, [r3, #4]
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	3320      	adds	r3, #32
 8000c42:	443b      	add	r3, r7
 8000c44:	f823 2c18 	strh.w	r2, [r3, #-24]
	for(int i = 0; i < 10; i++)
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	61fb      	str	r3, [r7, #28]
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	2b09      	cmp	r3, #9
 8000c52:	ddd7      	ble.n	8000c04 <reverse_servos+0x18>
		}
	}

	return uotputs;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	461d      	mov	r5, r3
 8000c58:	f107 0408 	add.w	r4, r7, #8
 8000c5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c5e:	6028      	str	r0, [r5, #0]
 8000c60:	6069      	str	r1, [r5, #4]
 8000c62:	60aa      	str	r2, [r5, #8]
 8000c64:	60eb      	str	r3, [r5, #12]
 8000c66:	6820      	ldr	r0, [r4, #0]
 8000c68:	6128      	str	r0, [r5, #16]
}
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	3720      	adds	r7, #32
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr
 8000c78:	240001b8 	.word	0x240001b8
 8000c7c:	00000000 	.word	0x00000000

08000c80 <get_commands_rc>:
    }
    return signal_out;
}

Cmd_s get_commands_rc(void)
{
 8000c80:	b490      	push	{r4, r7}
 8000c82:	b08c      	sub	sp, #48	@ 0x30
 8000c84:	af00      	add	r7, sp, #0
	//
	Cmd_s out_norms;

	out_norms.roll 		= ((float)Radio_input.Canal_1 - 1500.0 ) / 500.0 ;
 8000c86:	4b3e      	ldr	r3, [pc, #248]	@ (8000d80 <get_commands_rc+0x100>)
 8000c88:	885b      	ldrh	r3, [r3, #2]
 8000c8a:	ee07 3a90 	vmov	s15, r3
 8000c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c96:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 8000d68 <get_commands_rc+0xe8>
 8000c9a:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000c9e:	ed9f 5b34 	vldr	d5, [pc, #208]	@ 8000d70 <get_commands_rc+0xf0>
 8000ca2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ca6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000caa:	edc7 7a04 	vstr	s15, [r7, #16]

	out_norms.pitch 	= ((float)Radio_input.Canal_2 - 1500.0 ) / 500.0 ;
 8000cae:	4b34      	ldr	r3, [pc, #208]	@ (8000d80 <get_commands_rc+0x100>)
 8000cb0:	889b      	ldrh	r3, [r3, #4]
 8000cb2:	ee07 3a90 	vmov	s15, r3
 8000cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cbe:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 8000d68 <get_commands_rc+0xe8>
 8000cc2:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000cc6:	ed9f 5b2a 	vldr	d5, [pc, #168]	@ 8000d70 <get_commands_rc+0xf0>
 8000cca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000cce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cd2:	edc7 7a05 	vstr	s15, [r7, #20]

	out_norms.yaw 		= ((float)Radio_input.Canal_3 - 1500.0 ) / 500.0 ;
 8000cd6:	4b2a      	ldr	r3, [pc, #168]	@ (8000d80 <get_commands_rc+0x100>)
 8000cd8:	88db      	ldrh	r3, [r3, #6]
 8000cda:	ee07 3a90 	vmov	s15, r3
 8000cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ce2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ce6:	ed9f 6b20 	vldr	d6, [pc, #128]	@ 8000d68 <get_commands_rc+0xe8>
 8000cea:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000cee:	ed9f 5b20 	vldr	d5, [pc, #128]	@ 8000d70 <get_commands_rc+0xf0>
 8000cf2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000cf6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cfa:	edc7 7a06 	vstr	s15, [r7, #24]

	out_norms.thrust 	= ((float)Radio_input.Canal_4 - 1000.0 ) / 1000.0 ;
 8000cfe:	4b20      	ldr	r3, [pc, #128]	@ (8000d80 <get_commands_rc+0x100>)
 8000d00:	891b      	ldrh	r3, [r3, #8]
 8000d02:	ee07 3a90 	vmov	s15, r3
 8000d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d0e:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 8000d78 <get_commands_rc+0xf8>
 8000d12:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000d16:	ed9f 5b18 	vldr	d5, [pc, #96]	@ 8000d78 <get_commands_rc+0xf8>
 8000d1a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d1e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d22:	edc7 7a07 	vstr	s15, [r7, #28]

	return out_norms;
 8000d26:	f107 0420 	add.w	r4, r7, #32
 8000d2a:	f107 0310 	add.w	r3, r7, #16
 8000d2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000d34:	6a38      	ldr	r0, [r7, #32]
 8000d36:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000d38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d3c:	ee06 0a10 	vmov	s12, r0
 8000d40:	ee06 1a90 	vmov	s13, r1
 8000d44:	ee07 2a10 	vmov	s14, r2
 8000d48:	ee07 3a90 	vmov	s15, r3
}
 8000d4c:	eeb0 0a46 	vmov.f32	s0, s12
 8000d50:	eef0 0a66 	vmov.f32	s1, s13
 8000d54:	eeb0 1a47 	vmov.f32	s2, s14
 8000d58:	eef0 1a67 	vmov.f32	s3, s15
 8000d5c:	3730      	adds	r7, #48	@ 0x30
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc90      	pop	{r4, r7}
 8000d62:	4770      	bx	lr
 8000d64:	f3af 8000 	nop.w
 8000d68:	00000000 	.word	0x00000000
 8000d6c:	40977000 	.word	0x40977000
 8000d70:	00000000 	.word	0x00000000
 8000d74:	407f4000 	.word	0x407f4000
 8000d78:	00000000 	.word	0x00000000
 8000d7c:	408f4000 	.word	0x408f4000
 8000d80:	2400002c 	.word	0x2400002c

08000d84 <get_actual_trims>:

void get_actual_trims(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
	//
	Trims.roll 		=  (float)Radio_input.Canal_10 - 1500.0 ;
 8000d88:	4b17      	ldr	r3, [pc, #92]	@ (8000de8 <get_actual_trims+0x64>)
 8000d8a:	8a9b      	ldrh	r3, [r3, #20]
 8000d8c:	ee07 3a90 	vmov	s15, r3
 8000d90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d94:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8000dec <get_actual_trims+0x68>
 8000d98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000d9c:	4b14      	ldr	r3, [pc, #80]	@ (8000df0 <get_actual_trims+0x6c>)
 8000d9e:	edc3 7a00 	vstr	s15, [r3]
	Trims.pitch 	=  (float)Radio_input.Canal_11 - 1500.0 ;
 8000da2:	4b11      	ldr	r3, [pc, #68]	@ (8000de8 <get_actual_trims+0x64>)
 8000da4:	8adb      	ldrh	r3, [r3, #22]
 8000da6:	ee07 3a90 	vmov	s15, r3
 8000daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dae:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8000dec <get_actual_trims+0x68>
 8000db2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000db6:	4b0e      	ldr	r3, [pc, #56]	@ (8000df0 <get_actual_trims+0x6c>)
 8000db8:	edc3 7a01 	vstr	s15, [r3, #4]
	Trims.yaw 		=  (float)Radio_input.Canal_12 - 1500.0 ;
 8000dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000de8 <get_actual_trims+0x64>)
 8000dbe:	8b1b      	ldrh	r3, [r3, #24]
 8000dc0:	ee07 3a90 	vmov	s15, r3
 8000dc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dc8:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8000dec <get_actual_trims+0x68>
 8000dcc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000dd0:	4b07      	ldr	r3, [pc, #28]	@ (8000df0 <get_actual_trims+0x6c>)
 8000dd2:	edc3 7a02 	vstr	s15, [r3, #8]
	Trims.thrust 	=  0.0f ;
 8000dd6:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <get_actual_trims+0x6c>)
 8000dd8:	f04f 0200 	mov.w	r2, #0
 8000ddc:	60da      	str	r2, [r3, #12]
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	2400002c 	.word	0x2400002c
 8000dec:	44bb8000 	.word	0x44bb8000
 8000df0:	24000168 	.word	0x24000168

08000df4 <init_Reverse_Servos>:


void init_Reverse_Servos(Servo_reverse_s *servos)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 10; i++)
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	e007      	b.n	8000e12 <init_Reverse_Servos+0x1e>
    {
    	//
        servos->S[i] = false;
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	4413      	add	r3, r2
 8000e08:	2200      	movs	r2, #0
 8000e0a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 10; i++)
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	2b09      	cmp	r3, #9
 8000e16:	ddf4      	ble.n	8000e02 <init_Reverse_Servos+0xe>
    }
}
 8000e18:	bf00      	nop
 8000e1a:	bf00      	nop
 8000e1c:	3714      	adds	r7, #20
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <FlightControl_inits>:
Cmd_s Command_in;

Cmd_s rates_Gains;

void FlightControl_inits(void)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	af00      	add	r7, sp, #0
	//
	init_PIDs();
 8000e2a:	f7ff fc47 	bl	80006bc <init_PIDs>
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <FlightTaskAttitude>:

void FlightTaskAttitude(void)
{
 8000e34:	b598      	push	{r3, r4, r7, lr}
 8000e36:	af00      	add	r7, sp, #0
	//
	attitude_parameters_refresh();
 8000e38:	f000 f920 	bl	800107c <attitude_parameters_refresh>
	refresh_actual_rates();
 8000e3c:	f000 fa3e 	bl	80012bc <refresh_actual_rates>
	get_actual_attitude();
 8000e40:	f000 fa1a 	bl	8001278 <get_actual_attitude>
	get_flight_mode();
 8000e44:	f000 f90e 	bl	8001064 <get_flight_mode>
	Command_in = get_commands_rc();
 8000e48:	f7ff ff1a 	bl	8000c80 <get_commands_rc>
 8000e4c:	eeb0 6a40 	vmov.f32	s12, s0
 8000e50:	eef0 6a60 	vmov.f32	s13, s1
 8000e54:	eeb0 7a41 	vmov.f32	s14, s2
 8000e58:	eef0 7a61 	vmov.f32	s15, s3
 8000e5c:	4b62      	ldr	r3, [pc, #392]	@ (8000fe8 <FlightTaskAttitude+0x1b4>)
 8000e5e:	ed83 6a00 	vstr	s12, [r3]
 8000e62:	edc3 6a01 	vstr	s13, [r3, #4]
 8000e66:	ed83 7a02 	vstr	s14, [r3, #8]
 8000e6a:	edc3 7a03 	vstr	s15, [r3, #12]


	switch(mode)
 8000e6e:	4b5f      	ldr	r3, [pc, #380]	@ (8000fec <FlightTaskAttitude+0x1b8>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2b03      	cmp	r3, #3
 8000e74:	f300 8083 	bgt.w	8000f7e <FlightTaskAttitude+0x14a>
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	da04      	bge.n	8000e86 <FlightTaskAttitude+0x52>
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d077      	beq.n	8000f70 <FlightTaskAttitude+0x13c>
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d03a      	beq.n	8000efa <FlightTaskAttitude+0xc6>
 8000e84:	e07b      	b.n	8000f7e <FlightTaskAttitude+0x14a>
	{
	case FBW_MODE:
	case ATTITUDE_HOLD_MODE:
		//
		Command_out = attitude_hold_control(Command_in, actual_attitude , actual_rates, rates_Gains);
 8000e86:	4b5a      	ldr	r3, [pc, #360]	@ (8000ff0 <FlightTaskAttitude+0x1bc>)
 8000e88:	edd3 4a00 	vldr	s9, [r3]
 8000e8c:	ed93 5a01 	vldr	s10, [r3, #4]
 8000e90:	edd3 5a02 	vldr	s11, [r3, #8]
 8000e94:	ed93 6a03 	vldr	s12, [r3, #12]
 8000e98:	4b56      	ldr	r3, [pc, #344]	@ (8000ff4 <FlightTaskAttitude+0x1c0>)
 8000e9a:	ed93 3a00 	vldr	s6, [r3]
 8000e9e:	edd3 3a01 	vldr	s7, [r3, #4]
 8000ea2:	ed93 4a02 	vldr	s8, [r3, #8]
 8000ea6:	4b54      	ldr	r3, [pc, #336]	@ (8000ff8 <FlightTaskAttitude+0x1c4>)
 8000ea8:	ed93 2a00 	vldr	s4, [r3]
 8000eac:	edd3 2a01 	vldr	s5, [r3, #4]
 8000eb0:	4b4d      	ldr	r3, [pc, #308]	@ (8000fe8 <FlightTaskAttitude+0x1b4>)
 8000eb2:	edd3 1a00 	vldr	s3, [r3]
 8000eb6:	edd3 6a01 	vldr	s13, [r3, #4]
 8000eba:	ed93 7a02 	vldr	s14, [r3, #8]
 8000ebe:	edd3 7a03 	vldr	s15, [r3, #12]
 8000ec2:	eeb0 0a61 	vmov.f32	s0, s3
 8000ec6:	eef0 0a66 	vmov.f32	s1, s13
 8000eca:	eeb0 1a47 	vmov.f32	s2, s14
 8000ece:	eef0 1a67 	vmov.f32	s3, s15
 8000ed2:	f7ff fc29 	bl	8000728 <attitude_hold_control>
 8000ed6:	eeb0 6a40 	vmov.f32	s12, s0
 8000eda:	eef0 6a60 	vmov.f32	s13, s1
 8000ede:	eeb0 7a41 	vmov.f32	s14, s2
 8000ee2:	eef0 7a61 	vmov.f32	s15, s3
 8000ee6:	4b45      	ldr	r3, [pc, #276]	@ (8000ffc <FlightTaskAttitude+0x1c8>)
 8000ee8:	ed83 6a00 	vstr	s12, [r3]
 8000eec:	edc3 6a01 	vstr	s13, [r3, #4]
 8000ef0:	ed83 7a02 	vstr	s14, [r3, #8]
 8000ef4:	edc3 7a03 	vstr	s15, [r3, #12]

		break;
 8000ef8:	e048      	b.n	8000f8c <FlightTaskAttitude+0x158>
	case RATE_MODE:
		//
		Command_out = rates_control_law(Command_in , actual_rates, rates_Gains) ;
 8000efa:	4b3d      	ldr	r3, [pc, #244]	@ (8000ff0 <FlightTaskAttitude+0x1bc>)
 8000efc:	edd3 3a00 	vldr	s7, [r3]
 8000f00:	ed93 4a01 	vldr	s8, [r3, #4]
 8000f04:	edd3 4a02 	vldr	s9, [r3, #8]
 8000f08:	ed93 5a03 	vldr	s10, [r3, #12]
 8000f0c:	4b39      	ldr	r3, [pc, #228]	@ (8000ff4 <FlightTaskAttitude+0x1c0>)
 8000f0e:	edd3 2a00 	vldr	s5, [r3]
 8000f12:	ed93 3a01 	vldr	s6, [r3, #4]
 8000f16:	edd3 5a02 	vldr	s11, [r3, #8]
 8000f1a:	4b33      	ldr	r3, [pc, #204]	@ (8000fe8 <FlightTaskAttitude+0x1b4>)
 8000f1c:	ed93 6a00 	vldr	s12, [r3]
 8000f20:	edd3 6a01 	vldr	s13, [r3, #4]
 8000f24:	ed93 7a02 	vldr	s14, [r3, #8]
 8000f28:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f2c:	eeb0 2a62 	vmov.f32	s4, s5
 8000f30:	eef0 2a43 	vmov.f32	s5, s6
 8000f34:	eeb0 3a65 	vmov.f32	s6, s11
 8000f38:	eeb0 0a46 	vmov.f32	s0, s12
 8000f3c:	eef0 0a66 	vmov.f32	s1, s13
 8000f40:	eeb0 1a47 	vmov.f32	s2, s14
 8000f44:	eef0 1a67 	vmov.f32	s3, s15
 8000f48:	f000 f92d 	bl	80011a6 <rates_control_law>
 8000f4c:	eeb0 6a40 	vmov.f32	s12, s0
 8000f50:	eef0 6a60 	vmov.f32	s13, s1
 8000f54:	eeb0 7a41 	vmov.f32	s14, s2
 8000f58:	eef0 7a61 	vmov.f32	s15, s3
 8000f5c:	4b27      	ldr	r3, [pc, #156]	@ (8000ffc <FlightTaskAttitude+0x1c8>)
 8000f5e:	ed83 6a00 	vstr	s12, [r3]
 8000f62:	edc3 6a01 	vstr	s13, [r3, #4]
 8000f66:	ed83 7a02 	vstr	s14, [r3, #8]
 8000f6a:	edc3 7a03 	vstr	s15, [r3, #12]

		break;
 8000f6e:	e00d      	b.n	8000f8c <FlightTaskAttitude+0x158>
	case MANUAL_MODE:
		//
		Command_out = Command_in;
 8000f70:	4a22      	ldr	r2, [pc, #136]	@ (8000ffc <FlightTaskAttitude+0x1c8>)
 8000f72:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe8 <FlightTaskAttitude+0x1b4>)
 8000f74:	4614      	mov	r4, r2
 8000f76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		break;
 8000f7c:	e006      	b.n	8000f8c <FlightTaskAttitude+0x158>
	default:
		//
		Command_out = Command_in;
 8000f7e:	4a1f      	ldr	r2, [pc, #124]	@ (8000ffc <FlightTaskAttitude+0x1c8>)
 8000f80:	4b19      	ldr	r3, [pc, #100]	@ (8000fe8 <FlightTaskAttitude+0x1b4>)
 8000f82:	4614      	mov	r4, r2
 8000f84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		break;
 8000f8a:	bf00      	nop
	}

	command_filtering();
 8000f8c:	f7ff fc8e 	bl	80008ac <command_filtering>
	get_actual_trims();
 8000f90:	f7ff fef8 	bl	8000d84 <get_actual_trims>
	init_Reverse_Servos(&Reverse);
 8000f94:	481a      	ldr	r0, [pc, #104]	@ (8001000 <FlightTaskAttitude+0x1cc>)
 8000f96:	f7ff ff2d 	bl	8000df4 <init_Reverse_Servos>
	control_allocator(Commands , Trims );
 8000f9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001004 <FlightTaskAttitude+0x1d0>)
 8000f9c:	ed93 4a00 	vldr	s8, [r3]
 8000fa0:	edd3 4a01 	vldr	s9, [r3, #4]
 8000fa4:	ed93 5a02 	vldr	s10, [r3, #8]
 8000fa8:	edd3 5a03 	vldr	s11, [r3, #12]
 8000fac:	4b16      	ldr	r3, [pc, #88]	@ (8001008 <FlightTaskAttitude+0x1d4>)
 8000fae:	ed93 6a00 	vldr	s12, [r3]
 8000fb2:	edd3 6a01 	vldr	s13, [r3, #4]
 8000fb6:	ed93 7a02 	vldr	s14, [r3, #8]
 8000fba:	edd3 7a03 	vldr	s15, [r3, #12]
 8000fbe:	eeb0 2a44 	vmov.f32	s4, s8
 8000fc2:	eef0 2a64 	vmov.f32	s5, s9
 8000fc6:	eeb0 3a45 	vmov.f32	s6, s10
 8000fca:	eef0 3a65 	vmov.f32	s7, s11
 8000fce:	eeb0 0a46 	vmov.f32	s0, s12
 8000fd2:	eef0 0a66 	vmov.f32	s1, s13
 8000fd6:	eeb0 1a47 	vmov.f32	s2, s14
 8000fda:	eef0 1a67 	vmov.f32	s3, s15
 8000fde:	f7ff fcc5 	bl	800096c <control_allocator>
}
 8000fe2:	bf00      	nop
 8000fe4:	bd98      	pop	{r3, r4, r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	240001e8 	.word	0x240001e8
 8000fec:	24000208 	.word	0x24000208
 8000ff0:	240001f8 	.word	0x240001f8
 8000ff4:	24000218 	.word	0x24000218
 8000ff8:	24000224 	.word	0x24000224
 8000ffc:	24000158 	.word	0x24000158
 8001000:	240001b8 	.word	0x240001b8
 8001004:	24000168 	.word	0x24000168
 8001008:	24000178 	.word	0x24000178

0800100c <rc_three_steps_CurrentMode>:
#include "Flight_Management_Control/modes_management.h"

FlightMode_t mode ;

uint8_t rc_three_steps_CurrentMode(void)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
	//
	uint16_t pwm_value = Radio_input.Canal_5;
 8001012:	4b12      	ldr	r3, [pc, #72]	@ (800105c <rc_three_steps_CurrentMode+0x50>)
 8001014:	895b      	ldrh	r3, [r3, #10]
 8001016:	80fb      	strh	r3, [r7, #6]

	if (pwm_value < (PWM_MID - PWM_DEADZONE))
 8001018:	88fb      	ldrh	r3, [r7, #6]
 800101a:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800101e:	4293      	cmp	r3, r2
 8001020:	d801      	bhi.n	8001026 <rc_three_steps_CurrentMode+0x1a>
	{
	        return MANUAL_MODE;
 8001022:	2300      	movs	r3, #0
 8001024:	e014      	b.n	8001050 <rc_three_steps_CurrentMode+0x44>
	 }
	else if (pwm_value < 1750 && pwm_value > 1350)
 8001026:	88fb      	ldrh	r3, [r7, #6]
 8001028:	f240 62d5 	movw	r2, #1749	@ 0x6d5
 800102c:	4293      	cmp	r3, r2
 800102e:	d806      	bhi.n	800103e <rc_three_steps_CurrentMode+0x32>
 8001030:	88fb      	ldrh	r3, [r7, #6]
 8001032:	f240 5246 	movw	r2, #1350	@ 0x546
 8001036:	4293      	cmp	r3, r2
 8001038:	d901      	bls.n	800103e <rc_three_steps_CurrentMode+0x32>
	 {
	        return RATE_MODE;
 800103a:	2301      	movs	r3, #1
 800103c:	e008      	b.n	8001050 <rc_three_steps_CurrentMode+0x44>
	  }
	else if (pwm_value >= (PWM_MAX - PWM_DEADZONE))
 800103e:	88fb      	ldrh	r3, [r7, #6]
 8001040:	f240 62d5 	movw	r2, #1749	@ 0x6d5
 8001044:	4293      	cmp	r3, r2
 8001046:	d901      	bls.n	800104c <rc_three_steps_CurrentMode+0x40>
	 {
	        return ATTITUDE_HOLD_MODE;
 8001048:	2302      	movs	r3, #2
 800104a:	e001      	b.n	8001050 <rc_three_steps_CurrentMode+0x44>
	  }
	else
	{
	        // Zona muerta → mantener último modo (evita oscilaciones)
	        static FlightMode_t last_mode = MANUAL_MODE;
	        return last_mode;
 800104c:	4b04      	ldr	r3, [pc, #16]	@ (8001060 <rc_three_steps_CurrentMode+0x54>)
 800104e:	781b      	ldrb	r3, [r3, #0]
	 }
}
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	2400002c 	.word	0x2400002c
 8001060:	24000209 	.word	0x24000209

08001064 <get_flight_mode>:

void get_flight_mode(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	//
	mode = (FlightMode_t)rc_three_steps_CurrentMode();
 8001068:	f7ff ffd0 	bl	800100c <rc_three_steps_CurrentMode>
 800106c:	4603      	mov	r3, r0
 800106e:	461a      	mov	r2, r3
 8001070:	4b01      	ldr	r3, [pc, #4]	@ (8001078 <get_flight_mode+0x14>)
 8001072:	701a      	strb	r2, [r3, #0]
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	24000208 	.word	0x24000208

0800107c <attitude_parameters_refresh>:
#include "Flight_Management_Control/parameters_manager.h"
#include "Flight_Management_Control/flight_management.h"


void attitude_parameters_refresh(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
	//
	rates_Gains.roll  = K_P ;
 8001080:	4b06      	ldr	r3, [pc, #24]	@ (800109c <attitude_parameters_refresh+0x20>)
 8001082:	4a07      	ldr	r2, [pc, #28]	@ (80010a0 <attitude_parameters_refresh+0x24>)
 8001084:	601a      	str	r2, [r3, #0]
	rates_Gains.pitch = K_Q ;
 8001086:	4b05      	ldr	r3, [pc, #20]	@ (800109c <attitude_parameters_refresh+0x20>)
 8001088:	4a05      	ldr	r2, [pc, #20]	@ (80010a0 <attitude_parameters_refresh+0x24>)
 800108a:	605a      	str	r2, [r3, #4]
	rates_Gains.yaw   = K_R ;
 800108c:	4b03      	ldr	r3, [pc, #12]	@ (800109c <attitude_parameters_refresh+0x20>)
 800108e:	4a04      	ldr	r2, [pc, #16]	@ (80010a0 <attitude_parameters_refresh+0x24>)
 8001090:	609a      	str	r2, [r3, #8]

}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	240001f8 	.word	0x240001f8
 80010a0:	3ba3d70a 	.word	0x3ba3d70a

080010a4 <PI_Compute>:
    pi->Kp = kp; pi->Ki = ki;
    pi->integrator = 0.0f;
    pi->out_min = out_min; pi->out_max = out_max;
}

float PI_Compute(PI_Controller *pi, float error, float dt) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	ed87 0a02 	vstr	s0, [r7, #8]
 80010b0:	edc7 0a01 	vstr	s1, [r7, #4]
    pi->integrator += 0.0f ; //error * pi->Ki * dt;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80010ba:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001148 <PI_Compute+0xa4>
 80010be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	edc3 7a02 	vstr	s15, [r3, #8]

    // Anti-windup
    if (pi->integrator > pi->out_max) pi->integrator = pi->out_max;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	ed93 7a02 	vldr	s14, [r3, #8]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	edd3 7a04 	vldr	s15, [r3, #16]
 80010d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010dc:	dd04      	ble.n	80010e8 <PI_Compute+0x44>
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	691a      	ldr	r2, [r3, #16]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	e00e      	b.n	8001106 <PI_Compute+0x62>
    else if (pi->integrator < pi->out_min) pi->integrator = pi->out_min;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	ed93 7a02 	vldr	s14, [r3, #8]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	edd3 7a03 	vldr	s15, [r3, #12]
 80010f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010fc:	d503      	bpl.n	8001106 <PI_Compute+0x62>
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	68da      	ldr	r2, [r3, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	609a      	str	r2, [r3, #8]

    float output = pi->Kp * error ; //+ pi->integrator;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	edd3 7a00 	vldr	s15, [r3]
 800110c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001110:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001114:	edc7 7a05 	vstr	s15, [r7, #20]

    // Saturación final
    output = SatComando(output, pi->out_min, pi->out_max);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	edd3 7a03 	vldr	s15, [r3, #12]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	ed93 7a04 	vldr	s14, [r3, #16]
 8001124:	eeb0 1a47 	vmov.f32	s2, s14
 8001128:	eef0 0a67 	vmov.f32	s1, s15
 800112c:	ed97 0a05 	vldr	s0, [r7, #20]
 8001130:	f000 f80c 	bl	800114c <SatComando>
 8001134:	ed87 0a05 	vstr	s0, [r7, #20]

    return output;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	ee07 3a90 	vmov	s15, r3
}
 800113e:	eeb0 0a67 	vmov.f32	s0, s15
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	00000000 	.word	0x00000000

0800114c <SatComando>:

float SatComando(float rc_comando,float sat_min,float sat_max)
{
 800114c:	b480      	push	{r7}
 800114e:	b087      	sub	sp, #28
 8001150:	af00      	add	r7, sp, #0
 8001152:	ed87 0a03 	vstr	s0, [r7, #12]
 8001156:	edc7 0a02 	vstr	s1, [r7, #8]
 800115a:	ed87 1a01 	vstr	s2, [r7, #4]
    float rc_comando_out;
    if (rc_comando < sat_min)
 800115e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001162:	edd7 7a02 	vldr	s15, [r7, #8]
 8001166:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800116a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116e:	d502      	bpl.n	8001176 <SatComando+0x2a>
    {
        rc_comando_out = sat_min;
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	617b      	str	r3, [r7, #20]
 8001174:	e00d      	b.n	8001192 <SatComando+0x46>
    }
    else if (rc_comando > sat_max)
 8001176:	ed97 7a03 	vldr	s14, [r7, #12]
 800117a:	edd7 7a01 	vldr	s15, [r7, #4]
 800117e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001186:	dd02      	ble.n	800118e <SatComando+0x42>
    {
        rc_comando_out = sat_max;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	617b      	str	r3, [r7, #20]
 800118c:	e001      	b.n	8001192 <SatComando+0x46>
    }
    else
    {
        rc_comando_out = rc_comando;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	617b      	str	r3, [r7, #20]
    }
    return rc_comando_out;
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	ee07 3a90 	vmov	s15, r3
}
 8001198:	eeb0 0a67 	vmov.f32	s0, s15
 800119c:	371c      	adds	r7, #28
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <rates_control_law>:
 *      Author: rtrujillo
 */
#include "Flight_Management_Control/rates_mode.h"

Cmd_s rates_control_law(Cmd_s inputs_norms, Gyro_s actual_gyro, Cmd_s K)
{
 80011a6:	b490      	push	{r4, r7}
 80011a8:	b098      	sub	sp, #96	@ 0x60
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	eef0 5a43 	vmov.f32	s11, s6
 80011b0:	eeb0 6a63 	vmov.f32	s12, s7
 80011b4:	eef0 6a44 	vmov.f32	s13, s8
 80011b8:	eeb0 7a64 	vmov.f32	s14, s9
 80011bc:	eef0 7a45 	vmov.f32	s15, s10
 80011c0:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
 80011c4:	edc7 0a0d 	vstr	s1, [r7, #52]	@ 0x34
 80011c8:	ed87 1a0e 	vstr	s2, [r7, #56]	@ 0x38
 80011cc:	edc7 1a0f 	vstr	s3, [r7, #60]	@ 0x3c
 80011d0:	ed87 2a09 	vstr	s4, [r7, #36]	@ 0x24
 80011d4:	edc7 2a0a 	vstr	s5, [r7, #40]	@ 0x28
 80011d8:	edc7 5a0b 	vstr	s11, [r7, #44]	@ 0x2c
 80011dc:	ed87 6a05 	vstr	s12, [r7, #20]
 80011e0:	edc7 6a06 	vstr	s13, [r7, #24]
 80011e4:	ed87 7a07 	vstr	s14, [r7, #28]
 80011e8:	edc7 7a08 	vstr	s15, [r7, #32]
	//
	Cmd_s Outs;

	Outs.roll   = inputs_norms.roll  -  actual_gyro.roll * K.roll ;
 80011ec:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80011f0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80011f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80011f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001200:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	Outs.pitch  = inputs_norms.pitch -  actual_gyro.pitch* K.pitch ;
 8001204:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001208:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 800120c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001210:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001214:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001218:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
	Outs.yaw    = inputs_norms.yaw   -  actual_gyro.yaw  * K.yaw ;
 800121c:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001220:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8001224:	edd7 7a07 	vldr	s15, [r7, #28]
 8001228:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800122c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001230:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
	Outs.thrust = inputs_norms.thrust ;
 8001234:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001236:	64fb      	str	r3, [r7, #76]	@ 0x4c

	return Outs ;
 8001238:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 800123c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001240:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001242:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001246:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001248:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800124a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800124c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800124e:	ee06 0a10 	vmov	s12, r0
 8001252:	ee06 1a90 	vmov	s13, r1
 8001256:	ee07 2a10 	vmov	s14, r2
 800125a:	ee07 3a90 	vmov	s15, r3
}
 800125e:	eeb0 0a46 	vmov.f32	s0, s12
 8001262:	eef0 0a66 	vmov.f32	s1, s13
 8001266:	eeb0 1a47 	vmov.f32	s2, s14
 800126a:	eef0 1a67 	vmov.f32	s3, s15
 800126e:	3760      	adds	r7, #96	@ 0x60
 8001270:	46bd      	mov	sp, r7
 8001272:	bc90      	pop	{r4, r7}
 8001274:	4770      	bx	lr
	...

08001278 <get_actual_attitude>:

	return gyros;
}

Att_s get_actual_attitude(void)
{
 8001278:	b480      	push	{r7}
 800127a:	b087      	sub	sp, #28
 800127c:	af00      	add	r7, sp, #0
	//
	Att_s attitude;

	attitude.roll  = IMU.Roll ;
 800127e:	4b0e      	ldr	r3, [pc, #56]	@ (80012b8 <get_actual_attitude+0x40>)
 8001280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001282:	60bb      	str	r3, [r7, #8]
	attitude.pitch = IMU.Pitch;
 8001284:	4b0c      	ldr	r3, [pc, #48]	@ (80012b8 <get_actual_attitude+0x40>)
 8001286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001288:	60fb      	str	r3, [r7, #12]

	return attitude;
 800128a:	f107 0310 	add.w	r3, r7, #16
 800128e:	f107 0208 	add.w	r2, r7, #8
 8001292:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001296:	e883 0003 	stmia.w	r3, {r0, r1}
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	ee07 2a10 	vmov	s14, r2
 80012a2:	ee07 3a90 	vmov	s15, r3
}
 80012a6:	eeb0 0a47 	vmov.f32	s0, s14
 80012aa:	eef0 0a67 	vmov.f32	s1, s15
 80012ae:	371c      	adds	r7, #28
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	2400152c 	.word	0x2400152c

080012bc <refresh_actual_rates>:

	return acc;
}

void refresh_actual_rates(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
	//
	imu_gyr[0] 			= IMU.GYR.x ;
 80012c0:	4b12      	ldr	r3, [pc, #72]	@ (800130c <refresh_actual_rates+0x50>)
 80012c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012c4:	4a12      	ldr	r2, [pc, #72]	@ (8001310 <refresh_actual_rates+0x54>)
 80012c6:	6013      	str	r3, [r2, #0]
	imu_gyr[1] 			= IMU.GYR.y ;
 80012c8:	4b10      	ldr	r3, [pc, #64]	@ (800130c <refresh_actual_rates+0x50>)
 80012ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012cc:	4a10      	ldr	r2, [pc, #64]	@ (8001310 <refresh_actual_rates+0x54>)
 80012ce:	6053      	str	r3, [r2, #4]
	imu_gyr[2] 			= IMU.GYR.z ;
 80012d0:	4b0e      	ldr	r3, [pc, #56]	@ (800130c <refresh_actual_rates+0x50>)
 80012d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d4:	4a0e      	ldr	r2, [pc, #56]	@ (8001310 <refresh_actual_rates+0x54>)
 80012d6:	6093      	str	r3, [r2, #8]

	actual_rates.roll  	= imu_gyr[0] ;
 80012d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001310 <refresh_actual_rates+0x54>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001314 <refresh_actual_rates+0x58>)
 80012de:	6013      	str	r3, [r2, #0]
	actual_rates.pitch 	= imu_gyr[1] ;
 80012e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001310 <refresh_actual_rates+0x54>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001314 <refresh_actual_rates+0x58>)
 80012e6:	6053      	str	r3, [r2, #4]
	actual_rates.yaw   	= imu_gyr[2] ;
 80012e8:	4b09      	ldr	r3, [pc, #36]	@ (8001310 <refresh_actual_rates+0x54>)
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	4a09      	ldr	r2, [pc, #36]	@ (8001314 <refresh_actual_rates+0x58>)
 80012ee:	6093      	str	r3, [r2, #8]

	actual_attitude.roll   	= IMU.Roll  ;
 80012f0:	4b06      	ldr	r3, [pc, #24]	@ (800130c <refresh_actual_rates+0x50>)
 80012f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012f4:	4a08      	ldr	r2, [pc, #32]	@ (8001318 <refresh_actual_rates+0x5c>)
 80012f6:	6013      	str	r3, [r2, #0]
	actual_attitude.pitch  	= IMU.Pitch ;
 80012f8:	4b04      	ldr	r3, [pc, #16]	@ (800130c <refresh_actual_rates+0x50>)
 80012fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012fc:	4a06      	ldr	r2, [pc, #24]	@ (8001318 <refresh_actual_rates+0x5c>)
 80012fe:	6053      	str	r3, [r2, #4]
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	2400152c 	.word	0x2400152c
 8001310:	2400020c 	.word	0x2400020c
 8001314:	24000218 	.word	0x24000218
 8001318:	24000224 	.word	0x24000224

0800131c <FIX_WING_MIXER>:
#include "Flight_Management_Control/servo_mixers.h"



Servo_mgmt_s FIX_WING_MIXER(Cmd_s control_cmd, Cmd_s trims)
{
 800131c:	b4b0      	push	{r4, r5, r7}
 800131e:	b091      	sub	sp, #68	@ 0x44
 8001320:	af00      	add	r7, sp, #0
 8001322:	6278      	str	r0, [r7, #36]	@ 0x24
 8001324:	eeb0 4a40 	vmov.f32	s8, s0
 8001328:	eef0 4a60 	vmov.f32	s9, s1
 800132c:	eeb0 5a41 	vmov.f32	s10, s2
 8001330:	eef0 5a61 	vmov.f32	s11, s3
 8001334:	eeb0 6a42 	vmov.f32	s12, s4
 8001338:	eef0 6a62 	vmov.f32	s13, s5
 800133c:	eeb0 7a43 	vmov.f32	s14, s6
 8001340:	eef0 7a63 	vmov.f32	s15, s7
 8001344:	ed87 4a05 	vstr	s8, [r7, #20]
 8001348:	edc7 4a06 	vstr	s9, [r7, #24]
 800134c:	ed87 5a07 	vstr	s10, [r7, #28]
 8001350:	edc7 5a08 	vstr	s11, [r7, #32]
 8001354:	ed87 6a01 	vstr	s12, [r7, #4]
 8001358:	edc7 6a02 	vstr	s13, [r7, #8]
 800135c:	ed87 7a03 	vstr	s14, [r7, #12]
 8001360:	edc7 7a04 	vstr	s15, [r7, #16]
	//
	Servo_mgmt_s mixer_output;

	mixer_output.S[0]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (trims.roll  )) ;
 8001364:	edd7 7a05 	vldr	s15, [r7, #20]
 8001368:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 80014b0 <FIX_WING_MIXER+0x194>
 800136c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001370:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 80014b4 <FIX_WING_MIXER+0x198>
 8001374:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001378:	edd7 7a01 	vldr	s15, [r7, #4]
 800137c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001380:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001384:	ee17 3a90 	vmov	r3, s15
 8001388:	b29b      	uxth	r3, r3
 800138a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	mixer_output.S[1]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (trims.roll  )) ;
 800138c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001390:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80014b0 <FIX_WING_MIXER+0x194>
 8001394:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001398:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 80014b4 <FIX_WING_MIXER+0x198>
 800139c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80013a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80013a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013ac:	ee17 3a90 	vmov	r3, s15
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	mixer_output.S[2]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (trims.pitch )) ;
 80013b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80013b8:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 80014b0 <FIX_WING_MIXER+0x194>
 80013bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013c0:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 80014b4 <FIX_WING_MIXER+0x198>
 80013c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80013c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80013cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013d4:	ee17 3a90 	vmov	r3, s15
 80013d8:	b29b      	uxth	r3, r3
 80013da:	863b      	strh	r3, [r7, #48]	@ 0x30
	mixer_output.S[3]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (trims.pitch )) ;
 80013dc:	edd7 7a06 	vldr	s15, [r7, #24]
 80013e0:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80014b0 <FIX_WING_MIXER+0x194>
 80013e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013e8:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80014b4 <FIX_WING_MIXER+0x198>
 80013ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80013f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80013f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013fc:	ee17 3a90 	vmov	r3, s15
 8001400:	b29b      	uxth	r3, r3
 8001402:	867b      	strh	r3, [r7, #50]	@ 0x32
	mixer_output.S[4]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (trims.yaw   )) ;
 8001404:	edd7 7a07 	vldr	s15, [r7, #28]
 8001408:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80014b0 <FIX_WING_MIXER+0x194>
 800140c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001410:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80014b4 <FIX_WING_MIXER+0x198>
 8001414:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001418:	edd7 7a03 	vldr	s15, [r7, #12]
 800141c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001420:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001424:	ee17 3a90 	vmov	r3, s15
 8001428:	b29b      	uxth	r3, r3
 800142a:	86bb      	strh	r3, [r7, #52]	@ 0x34
	mixer_output.S[5]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (trims.yaw   )) ;
 800142c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001430:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80014b0 <FIX_WING_MIXER+0x194>
 8001434:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001438:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80014b4 <FIX_WING_MIXER+0x198>
 800143c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001440:	edd7 7a03 	vldr	s15, [r7, #12]
 8001444:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001448:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800144c:	ee17 3a90 	vmov	r3, s15
 8001450:	b29b      	uxth	r3, r3
 8001452:	86fb      	strh	r3, [r7, #54]	@ 0x36
	mixer_output.S[6]  = (uint16_t)(1000.0f + 500.f * control_cmd.thrust+ (trims.thrust)) ;
 8001454:	edd7 7a08 	vldr	s15, [r7, #32]
 8001458:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80014b0 <FIX_WING_MIXER+0x194>
 800145c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001460:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80014b8 <FIX_WING_MIXER+0x19c>
 8001464:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001468:	edd7 7a04 	vldr	s15, [r7, #16]
 800146c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001470:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001474:	ee17 3a90 	vmov	r3, s15
 8001478:	b29b      	uxth	r3, r3
 800147a:	873b      	strh	r3, [r7, #56]	@ 0x38
	mixer_output.S[7]  = (uint16_t)(1500.0f );
 800147c:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001480:	877b      	strh	r3, [r7, #58]	@ 0x3a
	mixer_output.S[8]  = (uint16_t)(1500.0f );
 8001482:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001486:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	mixer_output.S[9]  = (uint16_t)(1500.0f );
 8001488:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800148c:	87fb      	strh	r3, [r7, #62]	@ 0x3e

	return mixer_output;
 800148e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001490:	461d      	mov	r5, r3
 8001492:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8001496:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001498:	6028      	str	r0, [r5, #0]
 800149a:	6069      	str	r1, [r5, #4]
 800149c:	60aa      	str	r2, [r5, #8]
 800149e:	60eb      	str	r3, [r5, #12]
 80014a0:	6820      	ldr	r0, [r4, #0]
 80014a2:	6128      	str	r0, [r5, #16]
}
 80014a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80014a6:	3744      	adds	r7, #68	@ 0x44
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bcb0      	pop	{r4, r5, r7}
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	43fa0000 	.word	0x43fa0000
 80014b4:	44bb8000 	.word	0x44bb8000
 80014b8:	447a0000 	.word	0x447a0000

080014bc <FLYING_WING_MIXER>:

Servo_mgmt_s FLYING_WING_MIXER(Cmd_s control_cmd, Cmd_s trims)
{
 80014bc:	b4b0      	push	{r4, r5, r7}
 80014be:	b091      	sub	sp, #68	@ 0x44
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6278      	str	r0, [r7, #36]	@ 0x24
 80014c4:	eeb0 4a40 	vmov.f32	s8, s0
 80014c8:	eef0 4a60 	vmov.f32	s9, s1
 80014cc:	eeb0 5a41 	vmov.f32	s10, s2
 80014d0:	eef0 5a61 	vmov.f32	s11, s3
 80014d4:	eeb0 6a42 	vmov.f32	s12, s4
 80014d8:	eef0 6a62 	vmov.f32	s13, s5
 80014dc:	eeb0 7a43 	vmov.f32	s14, s6
 80014e0:	eef0 7a63 	vmov.f32	s15, s7
 80014e4:	ed87 4a05 	vstr	s8, [r7, #20]
 80014e8:	edc7 4a06 	vstr	s9, [r7, #24]
 80014ec:	ed87 5a07 	vstr	s10, [r7, #28]
 80014f0:	edc7 5a08 	vstr	s11, [r7, #32]
 80014f4:	ed87 6a01 	vstr	s12, [r7, #4]
 80014f8:	edc7 6a02 	vstr	s13, [r7, #8]
 80014fc:	ed87 7a03 	vstr	s14, [r7, #12]
 8001500:	edc7 7a04 	vstr	s15, [r7, #16]
	//
	Servo_mgmt_s mixer_output;

	mixer_output.S[0]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (1500 - trims.roll  )) ;
 8001504:	edd7 7a05 	vldr	s15, [r7, #20]
 8001508:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8001688 <FLYING_WING_MIXER+0x1cc>
 800150c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001510:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 800168c <FLYING_WING_MIXER+0x1d0>
 8001514:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001518:	edd7 7a01 	vldr	s15, [r7, #4]
 800151c:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 800168c <FLYING_WING_MIXER+0x1d0>
 8001520:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001524:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001528:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800152c:	ee17 3a90 	vmov	r3, s15
 8001530:	b29b      	uxth	r3, r3
 8001532:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	mixer_output.S[1]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (1500 - trims.roll  )) ;
 8001534:	edd7 7a05 	vldr	s15, [r7, #20]
 8001538:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8001688 <FLYING_WING_MIXER+0x1cc>
 800153c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001540:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 800168c <FLYING_WING_MIXER+0x1d0>
 8001544:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001548:	edd7 7a01 	vldr	s15, [r7, #4]
 800154c:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800168c <FLYING_WING_MIXER+0x1d0>
 8001550:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001554:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001558:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800155c:	ee17 3a90 	vmov	r3, s15
 8001560:	b29b      	uxth	r3, r3
 8001562:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	mixer_output.S[2]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (1500 - trims.pitch )) ;
 8001564:	edd7 7a06 	vldr	s15, [r7, #24]
 8001568:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001688 <FLYING_WING_MIXER+0x1cc>
 800156c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001570:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800168c <FLYING_WING_MIXER+0x1d0>
 8001574:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001578:	edd7 7a02 	vldr	s15, [r7, #8]
 800157c:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800168c <FLYING_WING_MIXER+0x1d0>
 8001580:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001584:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001588:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800158c:	ee17 3a90 	vmov	r3, s15
 8001590:	b29b      	uxth	r3, r3
 8001592:	863b      	strh	r3, [r7, #48]	@ 0x30
	mixer_output.S[3]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (1500 - trims.pitch )) ;
 8001594:	edd7 7a06 	vldr	s15, [r7, #24]
 8001598:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001688 <FLYING_WING_MIXER+0x1cc>
 800159c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015a0:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800168c <FLYING_WING_MIXER+0x1d0>
 80015a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80015a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80015ac:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800168c <FLYING_WING_MIXER+0x1d0>
 80015b0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80015b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015bc:	ee17 3a90 	vmov	r3, s15
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	867b      	strh	r3, [r7, #50]	@ 0x32
	mixer_output.S[4]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (1500 - trims.yaw   )) ;
 80015c4:	edd7 7a07 	vldr	s15, [r7, #28]
 80015c8:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001688 <FLYING_WING_MIXER+0x1cc>
 80015cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015d0:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 800168c <FLYING_WING_MIXER+0x1d0>
 80015d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80015d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80015dc:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 800168c <FLYING_WING_MIXER+0x1d0>
 80015e0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80015e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015ec:	ee17 3a90 	vmov	r3, s15
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	86bb      	strh	r3, [r7, #52]	@ 0x34
	mixer_output.S[5]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (1500 - trims.yaw   )) ;
 80015f4:	edd7 7a07 	vldr	s15, [r7, #28]
 80015f8:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001688 <FLYING_WING_MIXER+0x1cc>
 80015fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001600:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800168c <FLYING_WING_MIXER+0x1d0>
 8001604:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001608:	edd7 7a03 	vldr	s15, [r7, #12]
 800160c:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 800168c <FLYING_WING_MIXER+0x1d0>
 8001610:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001614:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001618:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800161c:	ee17 3a90 	vmov	r3, s15
 8001620:	b29b      	uxth	r3, r3
 8001622:	86fb      	strh	r3, [r7, #54]	@ 0x36
	mixer_output.S[6]  = (uint16_t)(1000.0f + 500.f * control_cmd.thrust+ (1500 - trims.thrust)) ;
 8001624:	edd7 7a08 	vldr	s15, [r7, #32]
 8001628:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001688 <FLYING_WING_MIXER+0x1cc>
 800162c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001630:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001690 <FLYING_WING_MIXER+0x1d4>
 8001634:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001638:	edd7 7a04 	vldr	s15, [r7, #16]
 800163c:	eddf 6a13 	vldr	s13, [pc, #76]	@ 800168c <FLYING_WING_MIXER+0x1d0>
 8001640:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001644:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001648:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800164c:	ee17 3a90 	vmov	r3, s15
 8001650:	b29b      	uxth	r3, r3
 8001652:	873b      	strh	r3, [r7, #56]	@ 0x38
	mixer_output.S[7]  = (uint16_t)(1500.0f );
 8001654:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001658:	877b      	strh	r3, [r7, #58]	@ 0x3a
	mixer_output.S[8]  = (uint16_t)(1500.0f );
 800165a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800165e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	mixer_output.S[9]  = (uint16_t)(1500.0f );
 8001660:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001664:	87fb      	strh	r3, [r7, #62]	@ 0x3e

	return mixer_output;
 8001666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001668:	461d      	mov	r5, r3
 800166a:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 800166e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001670:	6028      	str	r0, [r5, #0]
 8001672:	6069      	str	r1, [r5, #4]
 8001674:	60aa      	str	r2, [r5, #8]
 8001676:	60eb      	str	r3, [r5, #12]
 8001678:	6820      	ldr	r0, [r4, #0]
 800167a:	6128      	str	r0, [r5, #16]
}
 800167c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800167e:	3744      	adds	r7, #68	@ 0x44
 8001680:	46bd      	mov	sp, r7
 8001682:	bcb0      	pop	{r4, r5, r7}
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	43fa0000 	.word	0x43fa0000
 800168c:	44bb8000 	.word	0x44bb8000
 8001690:	447a0000 	.word	0x447a0000

08001694 <TANDEM_WING_MIXER>:

Servo_mgmt_s TANDEM_WING_MIXER(Cmd_s control_cmd, Cmd_s trims)
{
 8001694:	b4b0      	push	{r4, r5, r7}
 8001696:	b091      	sub	sp, #68	@ 0x44
 8001698:	af00      	add	r7, sp, #0
 800169a:	6278      	str	r0, [r7, #36]	@ 0x24
 800169c:	eeb0 4a40 	vmov.f32	s8, s0
 80016a0:	eef0 4a60 	vmov.f32	s9, s1
 80016a4:	eeb0 5a41 	vmov.f32	s10, s2
 80016a8:	eef0 5a61 	vmov.f32	s11, s3
 80016ac:	eeb0 6a42 	vmov.f32	s12, s4
 80016b0:	eef0 6a62 	vmov.f32	s13, s5
 80016b4:	eeb0 7a43 	vmov.f32	s14, s6
 80016b8:	eef0 7a63 	vmov.f32	s15, s7
 80016bc:	ed87 4a05 	vstr	s8, [r7, #20]
 80016c0:	edc7 4a06 	vstr	s9, [r7, #24]
 80016c4:	ed87 5a07 	vstr	s10, [r7, #28]
 80016c8:	edc7 5a08 	vstr	s11, [r7, #32]
 80016cc:	ed87 6a01 	vstr	s12, [r7, #4]
 80016d0:	edc7 6a02 	vstr	s13, [r7, #8]
 80016d4:	ed87 7a03 	vstr	s14, [r7, #12]
 80016d8:	edc7 7a04 	vstr	s15, [r7, #16]
	//
	Servo_mgmt_s mixer_output;

	mixer_output.S[0]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (1500 - trims.roll  )) ;
 80016dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80016e0:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8001860 <TANDEM_WING_MIXER+0x1cc>
 80016e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016e8:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8001864 <TANDEM_WING_MIXER+0x1d0>
 80016ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80016f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80016f4:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 8001864 <TANDEM_WING_MIXER+0x1d0>
 80016f8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80016fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001700:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001704:	ee17 3a90 	vmov	r3, s15
 8001708:	b29b      	uxth	r3, r3
 800170a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	mixer_output.S[1]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (1500 - trims.roll  )) ;
 800170c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001710:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8001860 <TANDEM_WING_MIXER+0x1cc>
 8001714:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001718:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001864 <TANDEM_WING_MIXER+0x1d0>
 800171c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001720:	edd7 7a01 	vldr	s15, [r7, #4]
 8001724:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8001864 <TANDEM_WING_MIXER+0x1d0>
 8001728:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800172c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001730:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001734:	ee17 3a90 	vmov	r3, s15
 8001738:	b29b      	uxth	r3, r3
 800173a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	mixer_output.S[2]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (1500 - trims.pitch )) ;
 800173c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001740:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001860 <TANDEM_WING_MIXER+0x1cc>
 8001744:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001748:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8001864 <TANDEM_WING_MIXER+0x1d0>
 800174c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001750:	edd7 7a02 	vldr	s15, [r7, #8]
 8001754:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8001864 <TANDEM_WING_MIXER+0x1d0>
 8001758:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800175c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001760:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001764:	ee17 3a90 	vmov	r3, s15
 8001768:	b29b      	uxth	r3, r3
 800176a:	863b      	strh	r3, [r7, #48]	@ 0x30
	mixer_output.S[3]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (1500 - trims.pitch )) ;
 800176c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001770:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001860 <TANDEM_WING_MIXER+0x1cc>
 8001774:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001778:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8001864 <TANDEM_WING_MIXER+0x1d0>
 800177c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001780:	edd7 7a02 	vldr	s15, [r7, #8]
 8001784:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8001864 <TANDEM_WING_MIXER+0x1d0>
 8001788:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800178c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001790:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001794:	ee17 3a90 	vmov	r3, s15
 8001798:	b29b      	uxth	r3, r3
 800179a:	867b      	strh	r3, [r7, #50]	@ 0x32
	mixer_output.S[4]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (1500 - trims.yaw   )) ;
 800179c:	edd7 7a07 	vldr	s15, [r7, #28]
 80017a0:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001860 <TANDEM_WING_MIXER+0x1cc>
 80017a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017a8:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001864 <TANDEM_WING_MIXER+0x1d0>
 80017ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80017b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80017b4:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8001864 <TANDEM_WING_MIXER+0x1d0>
 80017b8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80017bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017c4:	ee17 3a90 	vmov	r3, s15
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	86bb      	strh	r3, [r7, #52]	@ 0x34
	mixer_output.S[5]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (1500 - trims.yaw   )) ;
 80017cc:	edd7 7a07 	vldr	s15, [r7, #28]
 80017d0:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001860 <TANDEM_WING_MIXER+0x1cc>
 80017d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017d8:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001864 <TANDEM_WING_MIXER+0x1d0>
 80017dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80017e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80017e4:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8001864 <TANDEM_WING_MIXER+0x1d0>
 80017e8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80017ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017f4:	ee17 3a90 	vmov	r3, s15
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	86fb      	strh	r3, [r7, #54]	@ 0x36
	mixer_output.S[6]  = (uint16_t)(1000.0f + 500.f * control_cmd.thrust+ (1500 - trims.thrust)) ;
 80017fc:	edd7 7a08 	vldr	s15, [r7, #32]
 8001800:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001860 <TANDEM_WING_MIXER+0x1cc>
 8001804:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001808:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001868 <TANDEM_WING_MIXER+0x1d4>
 800180c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001810:	edd7 7a04 	vldr	s15, [r7, #16]
 8001814:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001864 <TANDEM_WING_MIXER+0x1d0>
 8001818:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800181c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001820:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001824:	ee17 3a90 	vmov	r3, s15
 8001828:	b29b      	uxth	r3, r3
 800182a:	873b      	strh	r3, [r7, #56]	@ 0x38
	mixer_output.S[7]  = (uint16_t)(1500.0f );
 800182c:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001830:	877b      	strh	r3, [r7, #58]	@ 0x3a
	mixer_output.S[8]  = (uint16_t)(1500.0f );
 8001832:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001836:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	mixer_output.S[9]  = (uint16_t)(1500.0f );
 8001838:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800183c:	87fb      	strh	r3, [r7, #62]	@ 0x3e

	return mixer_output;
 800183e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001840:	461d      	mov	r5, r3
 8001842:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8001846:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001848:	6028      	str	r0, [r5, #0]
 800184a:	6069      	str	r1, [r5, #4]
 800184c:	60aa      	str	r2, [r5, #8]
 800184e:	60eb      	str	r3, [r5, #12]
 8001850:	6820      	ldr	r0, [r4, #0]
 8001852:	6128      	str	r0, [r5, #16]
}
 8001854:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001856:	3744      	adds	r7, #68	@ 0x44
 8001858:	46bd      	mov	sp, r7
 800185a:	bcb0      	pop	{r4, r5, r7}
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	43fa0000 	.word	0x43fa0000
 8001864:	44bb8000 	.word	0x44bb8000
 8001868:	447a0000 	.word	0x447a0000

0800186c <CUSTOM_FRAME_MIXER>:

Servo_mgmt_s CUSTOM_FRAME_MIXER(Cmd_s control_cmd, Cmd_s trims)
{
 800186c:	b4b0      	push	{r4, r5, r7}
 800186e:	b091      	sub	sp, #68	@ 0x44
 8001870:	af00      	add	r7, sp, #0
 8001872:	6278      	str	r0, [r7, #36]	@ 0x24
 8001874:	eeb0 4a40 	vmov.f32	s8, s0
 8001878:	eef0 4a60 	vmov.f32	s9, s1
 800187c:	eeb0 5a41 	vmov.f32	s10, s2
 8001880:	eef0 5a61 	vmov.f32	s11, s3
 8001884:	eeb0 6a42 	vmov.f32	s12, s4
 8001888:	eef0 6a62 	vmov.f32	s13, s5
 800188c:	eeb0 7a43 	vmov.f32	s14, s6
 8001890:	eef0 7a63 	vmov.f32	s15, s7
 8001894:	ed87 4a05 	vstr	s8, [r7, #20]
 8001898:	edc7 4a06 	vstr	s9, [r7, #24]
 800189c:	ed87 5a07 	vstr	s10, [r7, #28]
 80018a0:	edc7 5a08 	vstr	s11, [r7, #32]
 80018a4:	ed87 6a01 	vstr	s12, [r7, #4]
 80018a8:	edc7 6a02 	vstr	s13, [r7, #8]
 80018ac:	ed87 7a03 	vstr	s14, [r7, #12]
 80018b0:	edc7 7a04 	vstr	s15, [r7, #16]
	//
	Servo_mgmt_s mixer_output;

	mixer_output.S[0]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (1500 - trims.roll  )) ;
 80018b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80018b8:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8001a38 <CUSTOM_FRAME_MIXER+0x1cc>
 80018bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018c0:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8001a3c <CUSTOM_FRAME_MIXER+0x1d0>
 80018c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80018c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80018cc:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 8001a3c <CUSTOM_FRAME_MIXER+0x1d0>
 80018d0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80018d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018dc:	ee17 3a90 	vmov	r3, s15
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	mixer_output.S[1]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (1500 - trims.roll  )) ;
 80018e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80018e8:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8001a38 <CUSTOM_FRAME_MIXER+0x1cc>
 80018ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018f0:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001a3c <CUSTOM_FRAME_MIXER+0x1d0>
 80018f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80018f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80018fc:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8001a3c <CUSTOM_FRAME_MIXER+0x1d0>
 8001900:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001904:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001908:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800190c:	ee17 3a90 	vmov	r3, s15
 8001910:	b29b      	uxth	r3, r3
 8001912:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	mixer_output.S[2]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (1500 - trims.pitch )) ;
 8001914:	edd7 7a06 	vldr	s15, [r7, #24]
 8001918:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001a38 <CUSTOM_FRAME_MIXER+0x1cc>
 800191c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001920:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8001a3c <CUSTOM_FRAME_MIXER+0x1d0>
 8001924:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001928:	edd7 7a02 	vldr	s15, [r7, #8]
 800192c:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8001a3c <CUSTOM_FRAME_MIXER+0x1d0>
 8001930:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001934:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001938:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800193c:	ee17 3a90 	vmov	r3, s15
 8001940:	b29b      	uxth	r3, r3
 8001942:	863b      	strh	r3, [r7, #48]	@ 0x30
	mixer_output.S[3]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (1500 - trims.pitch )) ;
 8001944:	edd7 7a06 	vldr	s15, [r7, #24]
 8001948:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001a38 <CUSTOM_FRAME_MIXER+0x1cc>
 800194c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001950:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8001a3c <CUSTOM_FRAME_MIXER+0x1d0>
 8001954:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001958:	edd7 7a02 	vldr	s15, [r7, #8]
 800195c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8001a3c <CUSTOM_FRAME_MIXER+0x1d0>
 8001960:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001964:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001968:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800196c:	ee17 3a90 	vmov	r3, s15
 8001970:	b29b      	uxth	r3, r3
 8001972:	867b      	strh	r3, [r7, #50]	@ 0x32
	mixer_output.S[4]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (1500 - trims.yaw   )) ;
 8001974:	edd7 7a07 	vldr	s15, [r7, #28]
 8001978:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001a38 <CUSTOM_FRAME_MIXER+0x1cc>
 800197c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001980:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001a3c <CUSTOM_FRAME_MIXER+0x1d0>
 8001984:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001988:	edd7 7a03 	vldr	s15, [r7, #12]
 800198c:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8001a3c <CUSTOM_FRAME_MIXER+0x1d0>
 8001990:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001994:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001998:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800199c:	ee17 3a90 	vmov	r3, s15
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	86bb      	strh	r3, [r7, #52]	@ 0x34
	mixer_output.S[5]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (1500 - trims.yaw   )) ;
 80019a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80019a8:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001a38 <CUSTOM_FRAME_MIXER+0x1cc>
 80019ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019b0:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001a3c <CUSTOM_FRAME_MIXER+0x1d0>
 80019b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80019b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80019bc:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8001a3c <CUSTOM_FRAME_MIXER+0x1d0>
 80019c0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80019c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019cc:	ee17 3a90 	vmov	r3, s15
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	86fb      	strh	r3, [r7, #54]	@ 0x36
	mixer_output.S[6]  = (uint16_t)(1000.0f + 500.f * control_cmd.thrust+ (1500 - trims.thrust)) ;
 80019d4:	edd7 7a08 	vldr	s15, [r7, #32]
 80019d8:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001a38 <CUSTOM_FRAME_MIXER+0x1cc>
 80019dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019e0:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001a40 <CUSTOM_FRAME_MIXER+0x1d4>
 80019e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80019e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80019ec:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001a3c <CUSTOM_FRAME_MIXER+0x1d0>
 80019f0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80019f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019fc:	ee17 3a90 	vmov	r3, s15
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	873b      	strh	r3, [r7, #56]	@ 0x38
	mixer_output.S[7]  = (uint16_t)(1500.0f );
 8001a04:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001a08:	877b      	strh	r3, [r7, #58]	@ 0x3a
	mixer_output.S[8]  = (uint16_t)(1500.0f );
 8001a0a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001a0e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	mixer_output.S[9]  = (uint16_t)(1500.0f );
 8001a10:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001a14:	87fb      	strh	r3, [r7, #62]	@ 0x3e

	return mixer_output;
 8001a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a18:	461d      	mov	r5, r3
 8001a1a:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8001a1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a20:	6028      	str	r0, [r5, #0]
 8001a22:	6069      	str	r1, [r5, #4]
 8001a24:	60aa      	str	r2, [r5, #8]
 8001a26:	60eb      	str	r3, [r5, #12]
 8001a28:	6820      	ldr	r0, [r4, #0]
 8001a2a:	6128      	str	r0, [r5, #16]
}
 8001a2c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001a2e:	3744      	adds	r7, #68	@ 0x44
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bcb0      	pop	{r4, r5, r7}
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	43fa0000 	.word	0x43fa0000
 8001a3c:	44bb8000 	.word	0x44bb8000
 8001a40:	447a0000 	.word	0x447a0000

08001a44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a4a:	4b15      	ldr	r3, [pc, #84]	@ (8001aa0 <MX_DMA_Init+0x5c>)
 8001a4c:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001a50:	4a13      	ldr	r2, [pc, #76]	@ (8001aa0 <MX_DMA_Init+0x5c>)
 8001a52:	f043 0301 	orr.w	r3, r3, #1
 8001a56:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8001a5a:	4b11      	ldr	r3, [pc, #68]	@ (8001aa0 <MX_DMA_Init+0x5c>)
 8001a5c:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	607b      	str	r3, [r7, #4]
 8001a66:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2105      	movs	r1, #5
 8001a6c:	200b      	movs	r0, #11
 8001a6e:	f004 fac7 	bl	8006000 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001a72:	200b      	movs	r0, #11
 8001a74:	f004 fade 	bl	8006034 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	2105      	movs	r1, #5
 8001a7c:	200c      	movs	r0, #12
 8001a7e:	f004 fabf 	bl	8006000 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001a82:	200c      	movs	r0, #12
 8001a84:	f004 fad6 	bl	8006034 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2105      	movs	r1, #5
 8001a8c:	200d      	movs	r0, #13
 8001a8e:	f004 fab7 	bl	8006000 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001a92:	200d      	movs	r0, #13
 8001a94:	f004 face 	bl	8006034 <HAL_NVIC_EnableIRQ>

}
 8001a98:	bf00      	nop
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	58024400 	.word	0x58024400

08001aa4 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001aa8:	4b2e      	ldr	r3, [pc, #184]	@ (8001b64 <MX_FDCAN1_Init+0xc0>)
 8001aaa:	4a2f      	ldr	r2, [pc, #188]	@ (8001b68 <MX_FDCAN1_Init+0xc4>)
 8001aac:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001aae:	4b2d      	ldr	r3, [pc, #180]	@ (8001b64 <MX_FDCAN1_Init+0xc0>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001ab4:	4b2b      	ldr	r3, [pc, #172]	@ (8001b64 <MX_FDCAN1_Init+0xc0>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001aba:	4b2a      	ldr	r3, [pc, #168]	@ (8001b64 <MX_FDCAN1_Init+0xc0>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001ac0:	4b28      	ldr	r3, [pc, #160]	@ (8001b64 <MX_FDCAN1_Init+0xc0>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001ac6:	4b27      	ldr	r3, [pc, #156]	@ (8001b64 <MX_FDCAN1_Init+0xc0>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8001acc:	4b25      	ldr	r3, [pc, #148]	@ (8001b64 <MX_FDCAN1_Init+0xc0>)
 8001ace:	2210      	movs	r2, #16
 8001ad0:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001ad2:	4b24      	ldr	r3, [pc, #144]	@ (8001b64 <MX_FDCAN1_Init+0xc0>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001ad8:	4b22      	ldr	r3, [pc, #136]	@ (8001b64 <MX_FDCAN1_Init+0xc0>)
 8001ada:	2202      	movs	r2, #2
 8001adc:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001ade:	4b21      	ldr	r3, [pc, #132]	@ (8001b64 <MX_FDCAN1_Init+0xc0>)
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001ae4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b64 <MX_FDCAN1_Init+0xc0>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001aea:	4b1e      	ldr	r3, [pc, #120]	@ (8001b64 <MX_FDCAN1_Init+0xc0>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001af0:	4b1c      	ldr	r3, [pc, #112]	@ (8001b64 <MX_FDCAN1_Init+0xc0>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001af6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b64 <MX_FDCAN1_Init+0xc0>)
 8001af8:	2201      	movs	r2, #1
 8001afa:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001afc:	4b19      	ldr	r3, [pc, #100]	@ (8001b64 <MX_FDCAN1_Init+0xc0>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8001b02:	4b18      	ldr	r3, [pc, #96]	@ (8001b64 <MX_FDCAN1_Init+0xc0>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001b08:	4b16      	ldr	r3, [pc, #88]	@ (8001b64 <MX_FDCAN1_Init+0xc0>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8001b0e:	4b15      	ldr	r3, [pc, #84]	@ (8001b64 <MX_FDCAN1_Init+0xc0>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001b14:	4b13      	ldr	r3, [pc, #76]	@ (8001b64 <MX_FDCAN1_Init+0xc0>)
 8001b16:	2204      	movs	r2, #4
 8001b18:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001b1a:	4b12      	ldr	r3, [pc, #72]	@ (8001b64 <MX_FDCAN1_Init+0xc0>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001b20:	4b10      	ldr	r3, [pc, #64]	@ (8001b64 <MX_FDCAN1_Init+0xc0>)
 8001b22:	2204      	movs	r2, #4
 8001b24:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001b26:	4b0f      	ldr	r3, [pc, #60]	@ (8001b64 <MX_FDCAN1_Init+0xc0>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8001b64 <MX_FDCAN1_Init+0xc0>)
 8001b2e:	2204      	movs	r2, #4
 8001b30:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001b32:	4b0c      	ldr	r3, [pc, #48]	@ (8001b64 <MX_FDCAN1_Init+0xc0>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001b38:	4b0a      	ldr	r3, [pc, #40]	@ (8001b64 <MX_FDCAN1_Init+0xc0>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8001b3e:	4b09      	ldr	r3, [pc, #36]	@ (8001b64 <MX_FDCAN1_Init+0xc0>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001b44:	4b07      	ldr	r3, [pc, #28]	@ (8001b64 <MX_FDCAN1_Init+0xc0>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001b4a:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <MX_FDCAN1_Init+0xc0>)
 8001b4c:	2204      	movs	r2, #4
 8001b4e:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001b50:	4804      	ldr	r0, [pc, #16]	@ (8001b64 <MX_FDCAN1_Init+0xc0>)
 8001b52:	f007 f9df 	bl	8008f14 <HAL_FDCAN_Init>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8001b5c:	f000 fe08 	bl	8002770 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	2400022c 	.word	0x2400022c
 8001b68:	4000a000 	.word	0x4000a000

08001b6c <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b0ba      	sub	sp, #232	@ 0xe8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b74:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b84:	f107 0310 	add.w	r3, r7, #16
 8001b88:	22c0      	movs	r2, #192	@ 0xc0
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f017 fdb3 	bl	80196f8 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a2f      	ldr	r2, [pc, #188]	@ (8001c54 <HAL_FDCAN_MspInit+0xe8>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d157      	bne.n	8001c4c <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001b9c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001ba8:	2304      	movs	r3, #4
 8001baa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 8;
 8001bac:	2308      	movs	r3, #8
 8001bae:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001bbc:	23c0      	movs	r3, #192	@ 0xc0
 8001bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8001bc8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001bcc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bd0:	f107 0310 	add.w	r3, r7, #16
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f009 f839 	bl	800ac4c <HAL_RCCEx_PeriphCLKConfig>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 8001be0:	f000 fdc6 	bl	8002770 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001be4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c58 <HAL_FDCAN_MspInit+0xec>)
 8001be6:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8001bea:	4a1b      	ldr	r2, [pc, #108]	@ (8001c58 <HAL_FDCAN_MspInit+0xec>)
 8001bec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bf0:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 8001bf4:	4b18      	ldr	r3, [pc, #96]	@ (8001c58 <HAL_FDCAN_MspInit+0xec>)
 8001bf6:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8001bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c02:	4b15      	ldr	r3, [pc, #84]	@ (8001c58 <HAL_FDCAN_MspInit+0xec>)
 8001c04:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001c08:	4a13      	ldr	r2, [pc, #76]	@ (8001c58 <HAL_FDCAN_MspInit+0xec>)
 8001c0a:	f043 0301 	orr.w	r3, r3, #1
 8001c0e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001c12:	4b11      	ldr	r3, [pc, #68]	@ (8001c58 <HAL_FDCAN_MspInit+0xec>)
 8001c14:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001c20:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001c24:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c34:	2300      	movs	r3, #0
 8001c36:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001c3a:	2309      	movs	r3, #9
 8001c3c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c40:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c44:	4619      	mov	r1, r3
 8001c46:	4805      	ldr	r0, [pc, #20]	@ (8001c5c <HAL_FDCAN_MspInit+0xf0>)
 8001c48:	f007 fcc8 	bl	80095dc <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001c4c:	bf00      	nop
 8001c4e:	37e8      	adds	r7, #232	@ 0xe8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	4000a000 	.word	0x4000a000
 8001c58:	58024400 	.word	0x58024400
 8001c5c:	58020000 	.word	0x58020000

08001c60 <f>:
/* Includes ------------------------------------------------------------------*/
#include "filter.h"
#include <math.h>

// Derivada dx/dt = f(x,u)
float f(float x, float u,float par) {
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	ed87 0a03 	vstr	s0, [r7, #12]
 8001c6a:	edc7 0a02 	vstr	s1, [r7, #8]
 8001c6e:	ed87 1a01 	vstr	s2, [r7, #4]
    return (-x * par ) + (u * par);
 8001c72:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c76:	eeb1 7a67 	vneg.f32	s14, s15
 8001c7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c82:	edd7 6a02 	vldr	s13, [r7, #8]
 8001c86:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c8e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001c92:	eeb0 0a67 	vmov.f32	s0, s15
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <rk4_step>:

// Paso Runge-Kutta 4
void rk4_step(FilterState *state, float u, float dt, float params) {
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b088      	sub	sp, #32
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	ed87 0a02 	vstr	s0, [r7, #8]
 8001cac:	edc7 0a01 	vstr	s1, [r7, #4]
 8001cb0:	ed87 1a00 	vstr	s2, [r7]
    float k1, k2, k3, k4;

    k1 = f(state->x, u,params);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	edd3 7a00 	vldr	s15, [r3]
 8001cba:	ed97 1a00 	vldr	s2, [r7]
 8001cbe:	edd7 0a02 	vldr	s1, [r7, #8]
 8001cc2:	eeb0 0a67 	vmov.f32	s0, s15
 8001cc6:	f7ff ffcb 	bl	8001c60 <f>
 8001cca:	ed87 0a07 	vstr	s0, [r7, #28]
    k2 = f(state->x + 0.5f*dt*k1, u,params);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	ed93 7a00 	vldr	s14, [r3]
 8001cd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cd8:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8001cdc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001ce0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ce4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ce8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cec:	ed97 1a00 	vldr	s2, [r7]
 8001cf0:	edd7 0a02 	vldr	s1, [r7, #8]
 8001cf4:	eeb0 0a67 	vmov.f32	s0, s15
 8001cf8:	f7ff ffb2 	bl	8001c60 <f>
 8001cfc:	ed87 0a06 	vstr	s0, [r7, #24]
    k3 = f(state->x + 0.5f*dt*k2, u,params);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	ed93 7a00 	vldr	s14, [r3]
 8001d06:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d0a:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8001d0e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001d12:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d1e:	ed97 1a00 	vldr	s2, [r7]
 8001d22:	edd7 0a02 	vldr	s1, [r7, #8]
 8001d26:	eeb0 0a67 	vmov.f32	s0, s15
 8001d2a:	f7ff ff99 	bl	8001c60 <f>
 8001d2e:	ed87 0a05 	vstr	s0, [r7, #20]
    k4 = f(state->x + dt*k3, u,params);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	ed93 7a00 	vldr	s14, [r3]
 8001d38:	edd7 6a01 	vldr	s13, [r7, #4]
 8001d3c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d48:	ed97 1a00 	vldr	s2, [r7]
 8001d4c:	edd7 0a02 	vldr	s1, [r7, #8]
 8001d50:	eeb0 0a67 	vmov.f32	s0, s15
 8001d54:	f7ff ff84 	bl	8001c60 <f>
 8001d58:	ed87 0a04 	vstr	s0, [r7, #16]

    state->x += (dt/6.0f)*(k1 + 2*k2 + 2*k3 + k4);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	ed93 7a00 	vldr	s14, [r3]
 8001d62:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d66:	eeb1 6a08 	vmov.f32	s12, #24	@ 0x40c00000  6.0
 8001d6a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001d6e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d72:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8001d76:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d7a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001d7e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d82:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d86:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001d8a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d8e:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001d92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	edc3 7a00 	vstr	s15, [r3]
}
 8001da0:	bf00      	nop
 8001da2:	3720      	adds	r7, #32
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <filter_step>:

// Aplicar filtro
float filter_step(FilterState *state, float u, float cut_off, float DT) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	ed87 0a02 	vstr	s0, [r7, #8]
 8001db4:	edc7 0a01 	vstr	s1, [r7, #4]
 8001db8:	ed87 1a00 	vstr	s2, [r7]
    rk4_step(state, u, DT, cut_off);
 8001dbc:	ed97 1a01 	vldr	s2, [r7, #4]
 8001dc0:	edd7 0a00 	vldr	s1, [r7]
 8001dc4:	ed97 0a02 	vldr	s0, [r7, #8]
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	f7ff ff69 	bl	8001ca0 <rk4_step>
    return state->x;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	ee07 3a90 	vmov	s15, r3
}
 8001dd6:	eeb0 0a67 	vmov.f32	s0, s15
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4a07      	ldr	r2, [pc, #28]	@ (8001e0c <vApplicationGetIdleTaskMemory+0x2c>)
 8001df0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	4a06      	ldr	r2, [pc, #24]	@ (8001e10 <vApplicationGetIdleTaskMemory+0x30>)
 8001df6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001dfe:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001e00:	bf00      	nop
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	240002dc 	.word	0x240002dc
 8001e10:	24000338 	.word	0x24000338

08001e14 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001e14:	b5b0      	push	{r4, r5, r7, lr}
 8001e16:	b09c      	sub	sp, #112	@ 0x70
 8001e18:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task_1ms */
  osThreadDef(Task_1ms, fTask_1ms, osPriorityNormal, 0, 256);
 8001e1a:	4b27      	ldr	r3, [pc, #156]	@ (8001eb8 <MX_FREERTOS_Init+0xa4>)
 8001e1c:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8001e20:	461d      	mov	r5, r3
 8001e22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e26:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001e2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_1msHandle = osThreadCreate(osThread(Task_1ms), NULL);
 8001e2e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e32:	2100      	movs	r1, #0
 8001e34:	4618      	mov	r0, r3
 8001e36:	f015 f820 	bl	8016e7a <osThreadCreate>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	4a1f      	ldr	r2, [pc, #124]	@ (8001ebc <MX_FREERTOS_Init+0xa8>)
 8001e3e:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_10ms */
  osThreadDef(Task_10ms, fTask_10ms, osPriorityNormal, 0, 256);
 8001e40:	4b1f      	ldr	r3, [pc, #124]	@ (8001ec0 <MX_FREERTOS_Init+0xac>)
 8001e42:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001e46:	461d      	mov	r5, r3
 8001e48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e4c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001e50:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_10msHandle = osThreadCreate(osThread(Task_10ms), NULL);
 8001e54:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e58:	2100      	movs	r1, #0
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f015 f80d 	bl	8016e7a <osThreadCreate>
 8001e60:	4603      	mov	r3, r0
 8001e62:	4a18      	ldr	r2, [pc, #96]	@ (8001ec4 <MX_FREERTOS_Init+0xb0>)
 8001e64:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_100ms */
  osThreadDef(Task_100ms, fTask_100ms, osPriorityNormal, 0, 256);
 8001e66:	4b18      	ldr	r3, [pc, #96]	@ (8001ec8 <MX_FREERTOS_Init+0xb4>)
 8001e68:	f107 041c 	add.w	r4, r7, #28
 8001e6c:	461d      	mov	r5, r3
 8001e6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e72:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001e76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_100msHandle = osThreadCreate(osThread(Task_100ms), NULL);
 8001e7a:	f107 031c 	add.w	r3, r7, #28
 8001e7e:	2100      	movs	r1, #0
 8001e80:	4618      	mov	r0, r3
 8001e82:	f014 fffa 	bl	8016e7a <osThreadCreate>
 8001e86:	4603      	mov	r3, r0
 8001e88:	4a10      	ldr	r2, [pc, #64]	@ (8001ecc <MX_FREERTOS_Init+0xb8>)
 8001e8a:	6013      	str	r3, [r2, #0]

  /* definition and creation of taskSd */
  osThreadDef(taskSd, startTaskSd, osPriorityHigh, 0, 512);
 8001e8c:	4b10      	ldr	r3, [pc, #64]	@ (8001ed0 <MX_FREERTOS_Init+0xbc>)
 8001e8e:	463c      	mov	r4, r7
 8001e90:	461d      	mov	r5, r3
 8001e92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e96:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001e9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskSdHandle = osThreadCreate(osThread(taskSd), NULL);
 8001e9e:	463b      	mov	r3, r7
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f014 ffe9 	bl	8016e7a <osThreadCreate>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed4 <MX_FREERTOS_Init+0xc0>)
 8001eac:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001eae:	bf00      	nop
 8001eb0:	3770      	adds	r7, #112	@ 0x70
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bdb0      	pop	{r4, r5, r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	080199fc 	.word	0x080199fc
 8001ebc:	240002cc 	.word	0x240002cc
 8001ec0:	08019a24 	.word	0x08019a24
 8001ec4:	240002d0 	.word	0x240002d0
 8001ec8:	08019a4c 	.word	0x08019a4c
 8001ecc:	240002d4 	.word	0x240002d4
 8001ed0:	08019a70 	.word	0x08019a70
 8001ed4:	240002d8 	.word	0x240002d8

08001ed8 <fTask_1ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTask_1ms */
void fTask_1ms(void const * argument)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTask_1ms */
  /* Infinite loop */

  for(;;)
  {
	TimeOn_Counter++;
 8001ee0:	4b05      	ldr	r3, [pc, #20]	@ (8001ef8 <fTask_1ms+0x20>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	4a04      	ldr	r2, [pc, #16]	@ (8001ef8 <fTask_1ms+0x20>)
 8001ee8:	6013      	str	r3, [r2, #0]
	//LED_Tasks();
	SBUS_IntegrityVerification();
 8001eea:	f003 fca7 	bl	800583c <SBUS_IntegrityVerification>
	//NMEA_process_task();
    osDelay(1);
 8001eee:	2001      	movs	r0, #1
 8001ef0:	f015 f80f 	bl	8016f12 <osDelay>
	TimeOn_Counter++;
 8001ef4:	bf00      	nop
 8001ef6:	e7f3      	b.n	8001ee0 <fTask_1ms+0x8>
 8001ef8:	24000da4 	.word	0x24000da4

08001efc <fTask_10ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTask_10ms */
void fTask_10ms(void const * argument)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTask_10ms */
	FlightControl_inits();
 8001f04:	f7fe ff8f 	bl	8000e26 <FlightControl_inits>
  /* Infinite loop */
  for(;;)
  {
	BNO_Tasks();
 8001f08:	f002 ffcc 	bl	8004ea4 <BNO_Tasks>
	BMP280_calculate();
 8001f0c:	f002 fa02 	bl	8004314 <BMP280_calculate>

	FlightTaskAttitude();
 8001f10:	f7fe ff90 	bl	8000e34 <FlightTaskAttitude>

	PWM_Assign();
 8001f14:	f003 f86a 	bl	8004fec <PWM_Assign>

    osDelay(10);
 8001f18:	200a      	movs	r0, #10
 8001f1a:	f014 fffa 	bl	8016f12 <osDelay>
	BNO_Tasks();
 8001f1e:	bf00      	nop
 8001f20:	e7f2      	b.n	8001f08 <fTask_10ms+0xc>

08001f22 <fTask_100ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTask_100ms */
void fTask_100ms(void const * argument)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTask_100ms */
  /* Infinite loop */
  for(;;)
  {
	LR03_StateMachine();
 8001f2a:	f003 f847 	bl	8004fbc <LR03_StateMachine>
    osDelay(100);
 8001f2e:	2064      	movs	r0, #100	@ 0x64
 8001f30:	f014 ffef 	bl	8016f12 <osDelay>
	LR03_StateMachine();
 8001f34:	bf00      	nop
 8001f36:	e7f8      	b.n	8001f2a <fTask_100ms+0x8>

08001f38 <startTaskSd>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTaskSd */
void startTaskSd(void const * argument)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTaskSd */
  /* Infinite loop */
  for(;;)
  {
	SD_blackbox_write();
 8001f40:	f003 fea2 	bl	8005c88 <SD_blackbox_write>
    osDelay(1000);
 8001f44:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f48:	f014 ffe3 	bl	8016f12 <osDelay>
	SD_blackbox_write();
 8001f4c:	bf00      	nop
 8001f4e:	e7f7      	b.n	8001f40 <startTaskSd+0x8>

08001f50 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08a      	sub	sp, #40	@ 0x28
 8001f54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f56:	f107 0314 	add.w	r3, r7, #20
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	605a      	str	r2, [r3, #4]
 8001f60:	609a      	str	r2, [r3, #8]
 8001f62:	60da      	str	r2, [r3, #12]
 8001f64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f66:	4b4e      	ldr	r3, [pc, #312]	@ (80020a0 <MX_GPIO_Init+0x150>)
 8001f68:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f6c:	4a4c      	ldr	r2, [pc, #304]	@ (80020a0 <MX_GPIO_Init+0x150>)
 8001f6e:	f043 0304 	orr.w	r3, r3, #4
 8001f72:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001f76:	4b4a      	ldr	r3, [pc, #296]	@ (80020a0 <MX_GPIO_Init+0x150>)
 8001f78:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	613b      	str	r3, [r7, #16]
 8001f82:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f84:	4b46      	ldr	r3, [pc, #280]	@ (80020a0 <MX_GPIO_Init+0x150>)
 8001f86:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f8a:	4a45      	ldr	r2, [pc, #276]	@ (80020a0 <MX_GPIO_Init+0x150>)
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001f94:	4b42      	ldr	r3, [pc, #264]	@ (80020a0 <MX_GPIO_Init+0x150>)
 8001f96:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa2:	4b3f      	ldr	r3, [pc, #252]	@ (80020a0 <MX_GPIO_Init+0x150>)
 8001fa4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001fa8:	4a3d      	ldr	r2, [pc, #244]	@ (80020a0 <MX_GPIO_Init+0x150>)
 8001faa:	f043 0302 	orr.w	r3, r3, #2
 8001fae:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001fb2:	4b3b      	ldr	r3, [pc, #236]	@ (80020a0 <MX_GPIO_Init+0x150>)
 8001fb4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	60bb      	str	r3, [r7, #8]
 8001fbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fc0:	4b37      	ldr	r3, [pc, #220]	@ (80020a0 <MX_GPIO_Init+0x150>)
 8001fc2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001fc6:	4a36      	ldr	r2, [pc, #216]	@ (80020a0 <MX_GPIO_Init+0x150>)
 8001fc8:	f043 0308 	orr.w	r3, r3, #8
 8001fcc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001fd0:	4b33      	ldr	r3, [pc, #204]	@ (80020a0 <MX_GPIO_Init+0x150>)
 8001fd2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	607b      	str	r3, [r7, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f242 010f 	movw	r1, #8207	@ 0x200f
 8001fe4:	482f      	ldr	r0, [pc, #188]	@ (80020a4 <MX_GPIO_Init+0x154>)
 8001fe6:	f007 fca9 	bl	800993c <HAL_GPIO_WritePin>
                          |LED_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_NSS_GPIO_Port, SD_NSS_Pin, GPIO_PIN_SET);
 8001fea:	2201      	movs	r2, #1
 8001fec:	2110      	movs	r1, #16
 8001fee:	482e      	ldr	r0, [pc, #184]	@ (80020a8 <MX_GPIO_Init+0x158>)
 8001ff0:	f007 fca4 	bl	800993c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IMU_BOOT_Pin|BME_NSS_Pin, GPIO_PIN_RESET);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8001ffa:	482c      	ldr	r0, [pc, #176]	@ (80020ac <MX_GPIO_Init+0x15c>)
 8001ffc:	f007 fc9e 	bl	800993c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, GPIO_PIN_RESET);
 8002000:	2200      	movs	r2, #0
 8002002:	2104      	movs	r1, #4
 8002004:	482a      	ldr	r0, [pc, #168]	@ (80020b0 <MX_GPIO_Init+0x160>)
 8002006:	f007 fc99 	bl	800993c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 800200a:	f242 030f 	movw	r3, #8207	@ 0x200f
 800200e:	617b      	str	r3, [r7, #20]
                          |LED_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002010:	2301      	movs	r3, #1
 8002012:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002018:	2300      	movs	r3, #0
 800201a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800201c:	f107 0314 	add.w	r3, r7, #20
 8002020:	4619      	mov	r1, r3
 8002022:	4820      	ldr	r0, [pc, #128]	@ (80020a4 <MX_GPIO_Init+0x154>)
 8002024:	f007 fada 	bl	80095dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_NSS_Pin;
 8002028:	2310      	movs	r3, #16
 800202a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800202c:	2301      	movs	r3, #1
 800202e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002030:	2301      	movs	r3, #1
 8002032:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002034:	2300      	movs	r3, #0
 8002036:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_NSS_GPIO_Port, &GPIO_InitStruct);
 8002038:	f107 0314 	add.w	r3, r7, #20
 800203c:	4619      	mov	r1, r3
 800203e:	481a      	ldr	r0, [pc, #104]	@ (80020a8 <MX_GPIO_Init+0x158>)
 8002040:	f007 facc 	bl	80095dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IMU_BOOT_Pin|BME_NSS_Pin;
 8002044:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002048:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800204a:	2301      	movs	r3, #1
 800204c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002052:	2300      	movs	r3, #0
 8002054:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002056:	f107 0314 	add.w	r3, r7, #20
 800205a:	4619      	mov	r1, r3
 800205c:	4813      	ldr	r0, [pc, #76]	@ (80020ac <MX_GPIO_Init+0x15c>)
 800205e:	f007 fabd 	bl	80095dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8002062:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002066:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002068:	2300      	movs	r3, #0
 800206a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8002070:	f107 0314 	add.w	r3, r7, #20
 8002074:	4619      	mov	r1, r3
 8002076:	480b      	ldr	r0, [pc, #44]	@ (80020a4 <MX_GPIO_Init+0x154>)
 8002078:	f007 fab0 	bl	80095dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_RST_Pin;
 800207c:	2304      	movs	r3, #4
 800207e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002080:	2301      	movs	r3, #1
 8002082:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002088:	2300      	movs	r3, #0
 800208a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_RST_GPIO_Port, &GPIO_InitStruct);
 800208c:	f107 0314 	add.w	r3, r7, #20
 8002090:	4619      	mov	r1, r3
 8002092:	4807      	ldr	r0, [pc, #28]	@ (80020b0 <MX_GPIO_Init+0x160>)
 8002094:	f007 faa2 	bl	80095dc <HAL_GPIO_Init>

}
 8002098:	bf00      	nop
 800209a:	3728      	adds	r7, #40	@ 0x28
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	58024400 	.word	0x58024400
 80020a4:	58020800 	.word	0x58020800
 80020a8:	58020000 	.word	0x58020000
 80020ac:	58020400 	.word	0x58020400
 80020b0:	58020c00 	.word	0x58020c00

080020b4 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80020b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002128 <MX_I2C3_Init+0x74>)
 80020ba:	4a1c      	ldr	r2, [pc, #112]	@ (800212c <MX_I2C3_Init+0x78>)
 80020bc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20B0CCFF;
 80020be:	4b1a      	ldr	r3, [pc, #104]	@ (8002128 <MX_I2C3_Init+0x74>)
 80020c0:	4a1b      	ldr	r2, [pc, #108]	@ (8002130 <MX_I2C3_Init+0x7c>)
 80020c2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80020c4:	4b18      	ldr	r3, [pc, #96]	@ (8002128 <MX_I2C3_Init+0x74>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020ca:	4b17      	ldr	r3, [pc, #92]	@ (8002128 <MX_I2C3_Init+0x74>)
 80020cc:	2201      	movs	r2, #1
 80020ce:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020d0:	4b15      	ldr	r3, [pc, #84]	@ (8002128 <MX_I2C3_Init+0x74>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80020d6:	4b14      	ldr	r3, [pc, #80]	@ (8002128 <MX_I2C3_Init+0x74>)
 80020d8:	2200      	movs	r2, #0
 80020da:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80020dc:	4b12      	ldr	r3, [pc, #72]	@ (8002128 <MX_I2C3_Init+0x74>)
 80020de:	2200      	movs	r2, #0
 80020e0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020e2:	4b11      	ldr	r3, [pc, #68]	@ (8002128 <MX_I2C3_Init+0x74>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002128 <MX_I2C3_Init+0x74>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80020ee:	480e      	ldr	r0, [pc, #56]	@ (8002128 <MX_I2C3_Init+0x74>)
 80020f0:	f007 fc3e 	bl	8009970 <HAL_I2C_Init>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80020fa:	f000 fb39 	bl	8002770 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80020fe:	2100      	movs	r1, #0
 8002100:	4809      	ldr	r0, [pc, #36]	@ (8002128 <MX_I2C3_Init+0x74>)
 8002102:	f007 fcd1 	bl	8009aa8 <HAL_I2CEx_ConfigAnalogFilter>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800210c:	f000 fb30 	bl	8002770 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002110:	2100      	movs	r1, #0
 8002112:	4805      	ldr	r0, [pc, #20]	@ (8002128 <MX_I2C3_Init+0x74>)
 8002114:	f007 fd13 	bl	8009b3e <HAL_I2CEx_ConfigDigitalFilter>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800211e:	f000 fb27 	bl	8002770 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	24000738 	.word	0x24000738
 800212c:	40005c00 	.word	0x40005c00
 8002130:	20b0ccff 	.word	0x20b0ccff

08002134 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b0bc      	sub	sp, #240	@ 0xf0
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800213c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	605a      	str	r2, [r3, #4]
 8002146:	609a      	str	r2, [r3, #8]
 8002148:	60da      	str	r2, [r3, #12]
 800214a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800214c:	f107 0318 	add.w	r3, r7, #24
 8002150:	22c0      	movs	r2, #192	@ 0xc0
 8002152:	2100      	movs	r1, #0
 8002154:	4618      	mov	r0, r3
 8002156:	f017 facf 	bl	80196f8 <memset>
  if(i2cHandle->Instance==I2C3)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a39      	ldr	r2, [pc, #228]	@ (8002244 <HAL_I2C_MspInit+0x110>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d16b      	bne.n	800223c <HAL_I2C_MspInit+0x108>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002164:	f04f 0208 	mov.w	r2, #8
 8002168:	f04f 0300 	mov.w	r3, #0
 800216c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002170:	2300      	movs	r3, #0
 8002172:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002176:	f107 0318 	add.w	r3, r7, #24
 800217a:	4618      	mov	r0, r3
 800217c:	f008 fd66 	bl	800ac4c <HAL_RCCEx_PeriphCLKConfig>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002186:	f000 faf3 	bl	8002770 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800218a:	4b2f      	ldr	r3, [pc, #188]	@ (8002248 <HAL_I2C_MspInit+0x114>)
 800218c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002190:	4a2d      	ldr	r2, [pc, #180]	@ (8002248 <HAL_I2C_MspInit+0x114>)
 8002192:	f043 0304 	orr.w	r3, r3, #4
 8002196:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800219a:	4b2b      	ldr	r3, [pc, #172]	@ (8002248 <HAL_I2C_MspInit+0x114>)
 800219c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	617b      	str	r3, [r7, #20]
 80021a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a8:	4b27      	ldr	r3, [pc, #156]	@ (8002248 <HAL_I2C_MspInit+0x114>)
 80021aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80021ae:	4a26      	ldr	r2, [pc, #152]	@ (8002248 <HAL_I2C_MspInit+0x114>)
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80021b8:	4b23      	ldr	r3, [pc, #140]	@ (8002248 <HAL_I2C_MspInit+0x114>)
 80021ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	613b      	str	r3, [r7, #16]
 80021c4:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021ce:	2312      	movs	r3, #18
 80021d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021da:	2300      	movs	r3, #0
 80021dc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80021e0:	2304      	movs	r3, #4
 80021e2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021e6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80021ea:	4619      	mov	r1, r3
 80021ec:	4817      	ldr	r0, [pc, #92]	@ (800224c <HAL_I2C_MspInit+0x118>)
 80021ee:	f007 f9f5 	bl	80095dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80021f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021fa:	2312      	movs	r3, #18
 80021fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002200:	2300      	movs	r3, #0
 8002202:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002206:	2300      	movs	r3, #0
 8002208:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800220c:	2304      	movs	r3, #4
 800220e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002212:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002216:	4619      	mov	r1, r3
 8002218:	480d      	ldr	r0, [pc, #52]	@ (8002250 <HAL_I2C_MspInit+0x11c>)
 800221a:	f007 f9df 	bl	80095dc <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800221e:	4b0a      	ldr	r3, [pc, #40]	@ (8002248 <HAL_I2C_MspInit+0x114>)
 8002220:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002224:	4a08      	ldr	r2, [pc, #32]	@ (8002248 <HAL_I2C_MspInit+0x114>)
 8002226:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800222a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800222e:	4b06      	ldr	r3, [pc, #24]	@ (8002248 <HAL_I2C_MspInit+0x114>)
 8002230:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002234:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800223c:	bf00      	nop
 800223e:	37f0      	adds	r7, #240	@ 0xf0
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40005c00 	.word	0x40005c00
 8002248:	58024400 	.word	0x58024400
 800224c:	58020800 	.word	0x58020800
 8002250:	58020000 	.word	0x58020000

08002254 <NMEA_UART_DMA_get_char>:
 * If buffer overflowes, the oldest NMEA message will be deleted to make space for incoming messages.\n
 * If new line character is detected ('\ n'), the line counter (UART_buffer_lines) increases.
 * @param[in]	DMA_char	character from DMA buffer
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_UART_DMA_get_char(uint8_t DMA_char){
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	71fb      	strb	r3, [r7, #7]
	int position = (UART_buffer_head + 1)%NMEA_UART_BUFFER_SIZE;
 800225e:	4b2d      	ldr	r3, [pc, #180]	@ (8002314 <NMEA_UART_DMA_get_char+0xc0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	3301      	adds	r3, #1
 8002264:	425a      	negs	r2, r3
 8002266:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800226a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800226e:	bf58      	it	pl
 8002270:	4253      	negpl	r3, r2
 8002272:	60bb      	str	r3, [r7, #8]
	NMEA_status stat=NMEA_OK;
 8002274:	2300      	movs	r3, #0
 8002276:	73fb      	strb	r3, [r7, #15]

	if (position == UART_buffer_tail){		//buffer overflowed! make space for new message
 8002278:	4b27      	ldr	r3, [pc, #156]	@ (8002318 <NMEA_UART_DMA_get_char+0xc4>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68ba      	ldr	r2, [r7, #8]
 800227e:	429a      	cmp	r2, r3
 8002280:	d130      	bne.n	80022e4 <NMEA_UART_DMA_get_char+0x90>
		while (NMEA_UART_buffer[UART_buffer_tail]!='\n' && NMEA_UART_buffer[UART_buffer_tail]!=0){
 8002282:	e010      	b.n	80022a6 <NMEA_UART_DMA_get_char+0x52>
			NMEA_UART_buffer[UART_buffer_tail]=0;
 8002284:	4b24      	ldr	r3, [pc, #144]	@ (8002318 <NMEA_UART_DMA_get_char+0xc4>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a24      	ldr	r2, [pc, #144]	@ (800231c <NMEA_UART_DMA_get_char+0xc8>)
 800228a:	2100      	movs	r1, #0
 800228c:	54d1      	strb	r1, [r2, r3]
			UART_buffer_tail=(UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 800228e:	4b22      	ldr	r3, [pc, #136]	@ (8002318 <NMEA_UART_DMA_get_char+0xc4>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	3301      	adds	r3, #1
 8002294:	425a      	negs	r2, r3
 8002296:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800229a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800229e:	bf58      	it	pl
 80022a0:	4253      	negpl	r3, r2
 80022a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002318 <NMEA_UART_DMA_get_char+0xc4>)
 80022a4:	6013      	str	r3, [r2, #0]
		while (NMEA_UART_buffer[UART_buffer_tail]!='\n' && NMEA_UART_buffer[UART_buffer_tail]!=0){
 80022a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002318 <NMEA_UART_DMA_get_char+0xc4>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a1c      	ldr	r2, [pc, #112]	@ (800231c <NMEA_UART_DMA_get_char+0xc8>)
 80022ac:	5cd3      	ldrb	r3, [r2, r3]
 80022ae:	2b0a      	cmp	r3, #10
 80022b0:	d005      	beq.n	80022be <NMEA_UART_DMA_get_char+0x6a>
 80022b2:	4b19      	ldr	r3, [pc, #100]	@ (8002318 <NMEA_UART_DMA_get_char+0xc4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a19      	ldr	r2, [pc, #100]	@ (800231c <NMEA_UART_DMA_get_char+0xc8>)
 80022b8:	5cd3      	ldrb	r3, [r2, r3]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1e2      	bne.n	8002284 <NMEA_UART_DMA_get_char+0x30>
		}
		NMEA_UART_buffer[UART_buffer_tail]=0;
 80022be:	4b16      	ldr	r3, [pc, #88]	@ (8002318 <NMEA_UART_DMA_get_char+0xc4>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a16      	ldr	r2, [pc, #88]	@ (800231c <NMEA_UART_DMA_get_char+0xc8>)
 80022c4:	2100      	movs	r1, #0
 80022c6:	54d1      	strb	r1, [r2, r3]
		UART_buffer_tail=(UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 80022c8:	4b13      	ldr	r3, [pc, #76]	@ (8002318 <NMEA_UART_DMA_get_char+0xc4>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	3301      	adds	r3, #1
 80022ce:	425a      	negs	r2, r3
 80022d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022d4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80022d8:	bf58      	it	pl
 80022da:	4253      	negpl	r3, r2
 80022dc:	4a0e      	ldr	r2, [pc, #56]	@ (8002318 <NMEA_UART_DMA_get_char+0xc4>)
 80022de:	6013      	str	r3, [r2, #0]
		stat=NMEA_BUFFER_OVERFLOWED;
 80022e0:	2301      	movs	r3, #1
 80022e2:	73fb      	strb	r3, [r7, #15]
	}

	NMEA_UART_buffer[UART_buffer_head]=DMA_char;
 80022e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002314 <NMEA_UART_DMA_get_char+0xc0>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	490c      	ldr	r1, [pc, #48]	@ (800231c <NMEA_UART_DMA_get_char+0xc8>)
 80022ea:	79fa      	ldrb	r2, [r7, #7]
 80022ec:	54ca      	strb	r2, [r1, r3]

	UART_buffer_head=position;
 80022ee:	4a09      	ldr	r2, [pc, #36]	@ (8002314 <NMEA_UART_DMA_get_char+0xc0>)
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	6013      	str	r3, [r2, #0]

	if(DMA_char=='\n'){
 80022f4:	79fb      	ldrb	r3, [r7, #7]
 80022f6:	2b0a      	cmp	r3, #10
 80022f8:	d104      	bne.n	8002304 <NMEA_UART_DMA_get_char+0xb0>
		++UART_buffer_lines;	//increment lines counter
 80022fa:	4b09      	ldr	r3, [pc, #36]	@ (8002320 <NMEA_UART_DMA_get_char+0xcc>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	3301      	adds	r3, #1
 8002300:	4a07      	ldr	r2, [pc, #28]	@ (8002320 <NMEA_UART_DMA_get_char+0xcc>)
 8002302:	6013      	str	r3, [r2, #0]
	}

	return stat;
 8002304:	7bfb      	ldrb	r3, [r7, #15]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	24000d8c 	.word	0x24000d8c
 8002318:	24000d90 	.word	0x24000d90
 800231c:	2400098c 	.word	0x2400098c
 8002320:	24000d94 	.word	0x24000d94

08002324 <NMEA_UART_DMA_copy_buffer>:
/**
 * NMEA_UART_DMA_copy_buffer is a function which copies messages from DMA buffer to UART circular buffer.\n
 * To do so, it uses NMEA_UART_DMA_get_char function for every character in NMEA_UART_DMA_buffer from 0 to (NMEA_UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(NMEA_DMA)).
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_UART_DMA_copy_buffer(void){
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0


	NMEA_status stat=NMEA_OK;
 800232a:	2300      	movs	r3, #0
 800232c:	73fb      	strb	r3, [r7, #15]

	int data_length = NMEA_UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(NMEA_DMA);
 800232e:	4b4b      	ldr	r3, [pc, #300]	@ (800245c <NMEA_UART_DMA_copy_buffer+0x138>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a4a      	ldr	r2, [pc, #296]	@ (8002460 <NMEA_UART_DMA_copy_buffer+0x13c>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d059      	beq.n	80023ee <NMEA_UART_DMA_copy_buffer+0xca>
 800233a:	4b48      	ldr	r3, [pc, #288]	@ (800245c <NMEA_UART_DMA_copy_buffer+0x138>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a48      	ldr	r2, [pc, #288]	@ (8002464 <NMEA_UART_DMA_copy_buffer+0x140>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d053      	beq.n	80023ee <NMEA_UART_DMA_copy_buffer+0xca>
 8002346:	4b45      	ldr	r3, [pc, #276]	@ (800245c <NMEA_UART_DMA_copy_buffer+0x138>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a46      	ldr	r2, [pc, #280]	@ (8002468 <NMEA_UART_DMA_copy_buffer+0x144>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d04d      	beq.n	80023ee <NMEA_UART_DMA_copy_buffer+0xca>
 8002352:	4b42      	ldr	r3, [pc, #264]	@ (800245c <NMEA_UART_DMA_copy_buffer+0x138>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a44      	ldr	r2, [pc, #272]	@ (800246c <NMEA_UART_DMA_copy_buffer+0x148>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d047      	beq.n	80023ee <NMEA_UART_DMA_copy_buffer+0xca>
 800235e:	4b3f      	ldr	r3, [pc, #252]	@ (800245c <NMEA_UART_DMA_copy_buffer+0x138>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a42      	ldr	r2, [pc, #264]	@ (8002470 <NMEA_UART_DMA_copy_buffer+0x14c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d041      	beq.n	80023ee <NMEA_UART_DMA_copy_buffer+0xca>
 800236a:	4b3c      	ldr	r3, [pc, #240]	@ (800245c <NMEA_UART_DMA_copy_buffer+0x138>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a40      	ldr	r2, [pc, #256]	@ (8002474 <NMEA_UART_DMA_copy_buffer+0x150>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d03b      	beq.n	80023ee <NMEA_UART_DMA_copy_buffer+0xca>
 8002376:	4b39      	ldr	r3, [pc, #228]	@ (800245c <NMEA_UART_DMA_copy_buffer+0x138>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a3e      	ldr	r2, [pc, #248]	@ (8002478 <NMEA_UART_DMA_copy_buffer+0x154>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d035      	beq.n	80023ee <NMEA_UART_DMA_copy_buffer+0xca>
 8002382:	4b36      	ldr	r3, [pc, #216]	@ (800245c <NMEA_UART_DMA_copy_buffer+0x138>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a3c      	ldr	r2, [pc, #240]	@ (800247c <NMEA_UART_DMA_copy_buffer+0x158>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d02f      	beq.n	80023ee <NMEA_UART_DMA_copy_buffer+0xca>
 800238e:	4b33      	ldr	r3, [pc, #204]	@ (800245c <NMEA_UART_DMA_copy_buffer+0x138>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a3a      	ldr	r2, [pc, #232]	@ (8002480 <NMEA_UART_DMA_copy_buffer+0x15c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d029      	beq.n	80023ee <NMEA_UART_DMA_copy_buffer+0xca>
 800239a:	4b30      	ldr	r3, [pc, #192]	@ (800245c <NMEA_UART_DMA_copy_buffer+0x138>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a38      	ldr	r2, [pc, #224]	@ (8002484 <NMEA_UART_DMA_copy_buffer+0x160>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d023      	beq.n	80023ee <NMEA_UART_DMA_copy_buffer+0xca>
 80023a6:	4b2d      	ldr	r3, [pc, #180]	@ (800245c <NMEA_UART_DMA_copy_buffer+0x138>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a36      	ldr	r2, [pc, #216]	@ (8002488 <NMEA_UART_DMA_copy_buffer+0x164>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d01d      	beq.n	80023ee <NMEA_UART_DMA_copy_buffer+0xca>
 80023b2:	4b2a      	ldr	r3, [pc, #168]	@ (800245c <NMEA_UART_DMA_copy_buffer+0x138>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a34      	ldr	r2, [pc, #208]	@ (800248c <NMEA_UART_DMA_copy_buffer+0x168>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d017      	beq.n	80023ee <NMEA_UART_DMA_copy_buffer+0xca>
 80023be:	4b27      	ldr	r3, [pc, #156]	@ (800245c <NMEA_UART_DMA_copy_buffer+0x138>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a32      	ldr	r2, [pc, #200]	@ (8002490 <NMEA_UART_DMA_copy_buffer+0x16c>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d011      	beq.n	80023ee <NMEA_UART_DMA_copy_buffer+0xca>
 80023ca:	4b24      	ldr	r3, [pc, #144]	@ (800245c <NMEA_UART_DMA_copy_buffer+0x138>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a30      	ldr	r2, [pc, #192]	@ (8002494 <NMEA_UART_DMA_copy_buffer+0x170>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d00b      	beq.n	80023ee <NMEA_UART_DMA_copy_buffer+0xca>
 80023d6:	4b21      	ldr	r3, [pc, #132]	@ (800245c <NMEA_UART_DMA_copy_buffer+0x138>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a2e      	ldr	r2, [pc, #184]	@ (8002498 <NMEA_UART_DMA_copy_buffer+0x174>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d005      	beq.n	80023ee <NMEA_UART_DMA_copy_buffer+0xca>
 80023e2:	4b1e      	ldr	r3, [pc, #120]	@ (800245c <NMEA_UART_DMA_copy_buffer+0x138>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a2c      	ldr	r2, [pc, #176]	@ (800249c <NMEA_UART_DMA_copy_buffer+0x178>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d106      	bne.n	80023fc <NMEA_UART_DMA_copy_buffer+0xd8>
 80023ee:	4b1b      	ldr	r3, [pc, #108]	@ (800245c <NMEA_UART_DMA_copy_buffer+0x138>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80023fa:	e005      	b.n	8002408 <NMEA_UART_DMA_copy_buffer+0xe4>
 80023fc:	4b17      	ldr	r3, [pc, #92]	@ (800245c <NMEA_UART_DMA_copy_buffer+0x138>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8002408:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < data_length; i++){
 800240a:	2300      	movs	r3, #0
 800240c:	60bb      	str	r3, [r7, #8]
 800240e:	e013      	b.n	8002438 <NMEA_UART_DMA_copy_buffer+0x114>
		if (NMEA_UART_DMA_get_char(NMEA_UART_DMA_buffer[i])==NMEA_BUFFER_OVERFLOWED){
 8002410:	4a23      	ldr	r2, [pc, #140]	@ (80024a0 <NMEA_UART_DMA_copy_buffer+0x17c>)
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	4413      	add	r3, r2
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff ff1b 	bl	8002254 <NMEA_UART_DMA_get_char>
 800241e:	4603      	mov	r3, r0
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <NMEA_UART_DMA_copy_buffer+0x104>
			stat=NMEA_BUFFER_OVERFLOWED;
 8002424:	2301      	movs	r3, #1
 8002426:	73fb      	strb	r3, [r7, #15]
		}
		NMEA_UART_DMA_buffer[i]=0;
 8002428:	4a1d      	ldr	r2, [pc, #116]	@ (80024a0 <NMEA_UART_DMA_copy_buffer+0x17c>)
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	4413      	add	r3, r2
 800242e:	2200      	movs	r2, #0
 8002430:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < data_length; i++){
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	3301      	adds	r3, #1
 8002436:	60bb      	str	r3, [r7, #8]
 8002438:	68ba      	ldr	r2, [r7, #8]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	429a      	cmp	r2, r3
 800243e:	dbe7      	blt.n	8002410 <NMEA_UART_DMA_copy_buffer+0xec>
	}

	HAL_UART_Receive_DMA(NMEA_huart, NMEA_UART_DMA_buffer, NMEA_UART_DMA_BUFFER_SIZE);
 8002440:	4b18      	ldr	r3, [pc, #96]	@ (80024a4 <NMEA_UART_DMA_copy_buffer+0x180>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002448:	4915      	ldr	r1, [pc, #84]	@ (80024a0 <NMEA_UART_DMA_copy_buffer+0x17c>)
 800244a:	4618      	mov	r0, r3
 800244c:	f00c fe18 	bl	800f080 <HAL_UART_Receive_DMA>
	return stat;
 8002450:	7bfb      	ldrb	r3, [r7, #15]
}
 8002452:	4618      	mov	r0, r3
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	24000d9c 	.word	0x24000d9c
 8002460:	40020010 	.word	0x40020010
 8002464:	40020028 	.word	0x40020028
 8002468:	40020040 	.word	0x40020040
 800246c:	40020058 	.word	0x40020058
 8002470:	40020070 	.word	0x40020070
 8002474:	40020088 	.word	0x40020088
 8002478:	400200a0 	.word	0x400200a0
 800247c:	400200b8 	.word	0x400200b8
 8002480:	40020410 	.word	0x40020410
 8002484:	40020428 	.word	0x40020428
 8002488:	40020440 	.word	0x40020440
 800248c:	40020458 	.word	0x40020458
 8002490:	40020470 	.word	0x40020470
 8002494:	40020488 	.word	0x40020488
 8002498:	400204a0 	.word	0x400204a0
 800249c:	400204b8 	.word	0x400204b8
 80024a0:	2400078c 	.word	0x2400078c
 80024a4:	24000d98 	.word	0x24000d98

080024a8 <user_UART_IDLE_IT_handler>:
		}else stat = NMEA_CHECKSUM_ERROR;
	}
	return stat;
}

NMEA_status user_UART_IDLE_IT_handler(void){
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
	NMEA_status stat = NMEA_OK;
 80024ae:	2300      	movs	r3, #0
 80024b0:	71fb      	strb	r3, [r7, #7]
	if (__HAL_UART_GET_FLAG(NMEA_huart, UART_FLAG_IDLE) == SET) {
 80024b2:	4b0d      	ldr	r3, [pc, #52]	@ (80024e8 <user_UART_IDLE_IT_handler+0x40>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	f003 0310 	and.w	r3, r3, #16
 80024be:	2b10      	cmp	r3, #16
 80024c0:	d10d      	bne.n	80024de <user_UART_IDLE_IT_handler+0x36>
		__HAL_UART_CLEAR_FLAG(NMEA_huart,UART_FLAG_IDLE);
 80024c2:	4b09      	ldr	r3, [pc, #36]	@ (80024e8 <user_UART_IDLE_IT_handler+0x40>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2210      	movs	r2, #16
 80024ca:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(NMEA_huart);
 80024cc:	4b06      	ldr	r3, [pc, #24]	@ (80024e8 <user_UART_IDLE_IT_handler+0x40>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f00c fe21 	bl	800f118 <HAL_UART_DMAStop>
		stat = NMEA_UART_DMA_copy_buffer();
 80024d6:	f7ff ff25 	bl	8002324 <NMEA_UART_DMA_copy_buffer>
 80024da:	4603      	mov	r3, r0
 80024dc:	71fb      	strb	r3, [r7, #7]
	}
	return stat;
 80024de:	79fb      	ldrb	r3, [r7, #7]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	24000d98 	.word	0x24000d98

080024ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80024f0:	f000 f900 	bl	80026f4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024f4:	f003 fc70 	bl	8005dd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024f8:	f000 f83c 	bl	8002574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024fc:	f7ff fd28 	bl	8001f50 <MX_GPIO_Init>
  MX_DMA_Init();
 8002500:	f7ff faa0 	bl	8001a44 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8002504:	f7ff face 	bl	8001aa4 <MX_FDCAN1_Init>
  MX_I2C3_Init();
 8002508:	f7ff fdd4 	bl	80020b4 <MX_I2C3_Init>
  MX_SPI1_Init();
 800250c:	f000 f936 	bl	800277c <MX_SPI1_Init>
  MX_SPI2_Init();
 8002510:	f000 f98a 	bl	8002828 <MX_SPI2_Init>
  MX_TIM2_Init();
 8002514:	f000 fc10 	bl	8002d38 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002518:	f000 fc8a 	bl	8002e30 <MX_TIM3_Init>
  MX_TIM4_Init();
 800251c:	f000 fcee 	bl	8002efc <MX_TIM4_Init>
  MX_UART4_Init();
 8002520:	f000 fea6 	bl	8003270 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8002524:	f000 fef0 	bl	8003308 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8002528:	f000 ff8a 	bl	8003440 <MX_USART6_UART_Init>
  MX_TIM13_Init();
 800252c:	f000 fd62 	bl	8002ff4 <MX_TIM13_Init>
  MX_USART3_UART_Init();
 8002530:	f000 ff3a 	bl	80033a8 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8002534:	f00f ffe0 	bl	80124f8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  BMP280_init();
 8002538:	f001 fec6 	bl	80042c8 <BMP280_init>
  SD_init();
 800253c:	f003 fc06 	bl	8005d4c <SD_init>
  SBUS_init();
 8002540:	f002 fdb8 	bl	80050b4 <SBUS_init>
  HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 8002544:	2201      	movs	r2, #1
 8002546:	4907      	ldr	r1, [pc, #28]	@ (8002564 <main+0x78>)
 8002548:	4807      	ldr	r0, [pc, #28]	@ (8002568 <main+0x7c>)
 800254a:	f00c fd99 	bl	800f080 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_IT(&huart6, &LR03_RxByte,1);
 800254e:	2201      	movs	r2, #1
 8002550:	4906      	ldr	r1, [pc, #24]	@ (800256c <main+0x80>)
 8002552:	4807      	ldr	r0, [pc, #28]	@ (8002570 <main+0x84>)
 8002554:	f00c fd48 	bl	800efe8 <HAL_UART_Receive_IT>
  //NMEA_init(&huart4, &hdma_uart4_rx);
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002558:	f7ff fc5c 	bl	8001e14 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800255c:	f014 fc86 	bl	8016e6c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002560:	bf00      	nop
 8002562:	e7fd      	b.n	8002560 <main+0x74>
 8002564:	24001523 	.word	0x24001523
 8002568:	2400115c 	.word	0x2400115c
 800256c:	24000da0 	.word	0x24000da0
 8002570:	240011f0 	.word	0x240011f0

08002574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b09c      	sub	sp, #112	@ 0x70
 8002578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800257a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800257e:	224c      	movs	r2, #76	@ 0x4c
 8002580:	2100      	movs	r1, #0
 8002582:	4618      	mov	r0, r3
 8002584:	f017 f8b8 	bl	80196f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002588:	1d3b      	adds	r3, r7, #4
 800258a:	2220      	movs	r2, #32
 800258c:	2100      	movs	r1, #0
 800258e:	4618      	mov	r0, r3
 8002590:	f017 f8b2 	bl	80196f8 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8002594:	4b30      	ldr	r3, [pc, #192]	@ (8002658 <SystemClock_Config+0xe4>)
 8002596:	f04f 32ff 	mov.w	r2, #4294967295
 800259a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800259e:	2002      	movs	r0, #2
 80025a0:	f007 fb1a 	bl	8009bd8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80025a4:	2300      	movs	r3, #0
 80025a6:	603b      	str	r3, [r7, #0]
 80025a8:	4b2c      	ldr	r3, [pc, #176]	@ (800265c <SystemClock_Config+0xe8>)
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	4a2b      	ldr	r2, [pc, #172]	@ (800265c <SystemClock_Config+0xe8>)
 80025ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80025b2:	6193      	str	r3, [r2, #24]
 80025b4:	4b29      	ldr	r3, [pc, #164]	@ (800265c <SystemClock_Config+0xe8>)
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80025bc:	603b      	str	r3, [r7, #0]
 80025be:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80025c0:	bf00      	nop
 80025c2:	4b26      	ldr	r3, [pc, #152]	@ (800265c <SystemClock_Config+0xe8>)
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025ce:	d1f8      	bne.n	80025c2 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80025d0:	2302      	movs	r3, #2
 80025d2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80025d4:	2301      	movs	r3, #1
 80025d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80025d8:	2340      	movs	r3, #64	@ 0x40
 80025da:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025dc:	2302      	movs	r3, #2
 80025de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80025e0:	2300      	movs	r3, #0
 80025e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80025e4:	2304      	movs	r3, #4
 80025e6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 80025e8:	2323      	movs	r3, #35	@ 0x23
 80025ea:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80025ec:	2302      	movs	r3, #2
 80025ee:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80025f0:	2302      	movs	r3, #2
 80025f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80025f4:	2302      	movs	r3, #2
 80025f6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80025f8:	230c      	movs	r3, #12
 80025fa:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80025fc:	2300      	movs	r3, #0
 80025fe:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002600:	2300      	movs	r3, #0
 8002602:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002604:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002608:	4618      	mov	r0, r3
 800260a:	f007 fb1f 	bl	8009c4c <HAL_RCC_OscConfig>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002614:	f000 f8ac 	bl	8002770 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002618:	233f      	movs	r3, #63	@ 0x3f
 800261a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800261c:	2303      	movs	r3, #3
 800261e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002620:	2300      	movs	r3, #0
 8002622:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8002624:	2300      	movs	r3, #0
 8002626:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002628:	2340      	movs	r3, #64	@ 0x40
 800262a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800262c:	2340      	movs	r3, #64	@ 0x40
 800262e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002630:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002634:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002636:	2340      	movs	r3, #64	@ 0x40
 8002638:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800263a:	1d3b      	adds	r3, r7, #4
 800263c:	2106      	movs	r1, #6
 800263e:	4618      	mov	r0, r3
 8002640:	f007 ff36 	bl	800a4b0 <HAL_RCC_ClockConfig>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <SystemClock_Config+0xda>
  {
    Error_Handler();
 800264a:	f000 f891 	bl	8002770 <Error_Handler>
  }
}
 800264e:	bf00      	nop
 8002650:	3770      	adds	r7, #112	@ 0x70
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	58024400 	.word	0x58024400
 800265c:	58024800 	.word	0x58024800

08002660 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART1){
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a18      	ldr	r2, [pc, #96]	@ (80026d0 <HAL_UART_RxCpltCallback+0x70>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d10a      	bne.n	8002688 <HAL_UART_RxCpltCallback+0x28>
		SBUS_Receive(SBUS_RxBuffer);
 8002672:	4b18      	ldr	r3, [pc, #96]	@ (80026d4 <HAL_UART_RxCpltCallback+0x74>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f002 fd2a 	bl	80050d0 <SBUS_Receive>
		HAL_UART_Receive_DMA(&huart1, &SBUS_RxBuffer, 1);
 800267c:	2201      	movs	r2, #1
 800267e:	4915      	ldr	r1, [pc, #84]	@ (80026d4 <HAL_UART_RxCpltCallback+0x74>)
 8002680:	4815      	ldr	r0, [pc, #84]	@ (80026d8 <HAL_UART_RxCpltCallback+0x78>)
 8002682:	f00c fcfd 	bl	800f080 <HAL_UART_Receive_DMA>
    }
    else if(huart -> Instance == USART6){
    	LR03_Receive(LR03_RxByte);
    	HAL_UART_Receive_IT(&huart6, &LR03_RxByte,1);
    }
}
 8002686:	e01e      	b.n	80026c6 <HAL_UART_RxCpltCallback+0x66>
    else if (huart -> Instance == USART3){
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a13      	ldr	r2, [pc, #76]	@ (80026dc <HAL_UART_RxCpltCallback+0x7c>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d10a      	bne.n	80026a8 <HAL_UART_RxCpltCallback+0x48>
        BNO_Receive(BNO_BufferByte);
 8002692:	4b13      	ldr	r3, [pc, #76]	@ (80026e0 <HAL_UART_RxCpltCallback+0x80>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f002 fb64 	bl	8004d64 <BNO_Receive>
        HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 800269c:	2201      	movs	r2, #1
 800269e:	4910      	ldr	r1, [pc, #64]	@ (80026e0 <HAL_UART_RxCpltCallback+0x80>)
 80026a0:	4810      	ldr	r0, [pc, #64]	@ (80026e4 <HAL_UART_RxCpltCallback+0x84>)
 80026a2:	f00c fced 	bl	800f080 <HAL_UART_Receive_DMA>
}
 80026a6:	e00e      	b.n	80026c6 <HAL_UART_RxCpltCallback+0x66>
    else if(huart -> Instance == USART6){
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a0e      	ldr	r2, [pc, #56]	@ (80026e8 <HAL_UART_RxCpltCallback+0x88>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d109      	bne.n	80026c6 <HAL_UART_RxCpltCallback+0x66>
    	LR03_Receive(LR03_RxByte);
 80026b2:	4b0e      	ldr	r3, [pc, #56]	@ (80026ec <HAL_UART_RxCpltCallback+0x8c>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f002 fc64 	bl	8004f84 <LR03_Receive>
    	HAL_UART_Receive_IT(&huart6, &LR03_RxByte,1);
 80026bc:	2201      	movs	r2, #1
 80026be:	490b      	ldr	r1, [pc, #44]	@ (80026ec <HAL_UART_RxCpltCallback+0x8c>)
 80026c0:	480b      	ldr	r0, [pc, #44]	@ (80026f0 <HAL_UART_RxCpltCallback+0x90>)
 80026c2:	f00c fc91 	bl	800efe8 <HAL_UART_Receive_IT>
}
 80026c6:	bf00      	nop
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40011000 	.word	0x40011000
 80026d4:	240016ad 	.word	0x240016ad
 80026d8:	240010c8 	.word	0x240010c8
 80026dc:	40004800 	.word	0x40004800
 80026e0:	24001523 	.word	0x24001523
 80026e4:	2400115c 	.word	0x2400115c
 80026e8:	40011400 	.word	0x40011400
 80026ec:	24000da0 	.word	0x24000da0
 80026f0:	240011f0 	.word	0x240011f0

080026f4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80026fa:	463b      	mov	r3, r7
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	605a      	str	r2, [r3, #4]
 8002702:	609a      	str	r2, [r3, #8]
 8002704:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002706:	f003 fca3 	bl	8006050 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800270a:	2301      	movs	r3, #1
 800270c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800270e:	2300      	movs	r3, #0
 8002710:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8002712:	2300      	movs	r3, #0
 8002714:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8002716:	231f      	movs	r3, #31
 8002718:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800271a:	2387      	movs	r3, #135	@ 0x87
 800271c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800271e:	2300      	movs	r3, #0
 8002720:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8002722:	2300      	movs	r3, #0
 8002724:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002726:	2301      	movs	r3, #1
 8002728:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800272a:	2301      	movs	r3, #1
 800272c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800272e:	2300      	movs	r3, #0
 8002730:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002732:	2300      	movs	r3, #0
 8002734:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002736:	463b      	mov	r3, r7
 8002738:	4618      	mov	r0, r3
 800273a:	f003 fcc1 	bl	80060c0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800273e:	2004      	movs	r0, #4
 8002740:	f003 fc9e 	bl	8006080 <HAL_MPU_Enable>

}
 8002744:	bf00      	nop
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a04      	ldr	r2, [pc, #16]	@ (800276c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d101      	bne.n	8002762 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800275e:	f003 fb77 	bl	8005e50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002762:	bf00      	nop
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40014800 	.word	0x40014800

08002770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002774:	b672      	cpsid	i
}
 8002776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002778:	bf00      	nop
 800277a:	e7fd      	b.n	8002778 <Error_Handler+0x8>

0800277c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002780:	4b27      	ldr	r3, [pc, #156]	@ (8002820 <MX_SPI1_Init+0xa4>)
 8002782:	4a28      	ldr	r2, [pc, #160]	@ (8002824 <MX_SPI1_Init+0xa8>)
 8002784:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002786:	4b26      	ldr	r3, [pc, #152]	@ (8002820 <MX_SPI1_Init+0xa4>)
 8002788:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800278c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800278e:	4b24      	ldr	r3, [pc, #144]	@ (8002820 <MX_SPI1_Init+0xa4>)
 8002790:	2200      	movs	r2, #0
 8002792:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002794:	4b22      	ldr	r3, [pc, #136]	@ (8002820 <MX_SPI1_Init+0xa4>)
 8002796:	2207      	movs	r2, #7
 8002798:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800279a:	4b21      	ldr	r3, [pc, #132]	@ (8002820 <MX_SPI1_Init+0xa4>)
 800279c:	2200      	movs	r2, #0
 800279e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002820 <MX_SPI1_Init+0xa4>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80027a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002820 <MX_SPI1_Init+0xa4>)
 80027a8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80027ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80027ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002820 <MX_SPI1_Init+0xa4>)
 80027b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80027b4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002820 <MX_SPI1_Init+0xa4>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80027bc:	4b18      	ldr	r3, [pc, #96]	@ (8002820 <MX_SPI1_Init+0xa4>)
 80027be:	2200      	movs	r2, #0
 80027c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027c2:	4b17      	ldr	r3, [pc, #92]	@ (8002820 <MX_SPI1_Init+0xa4>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80027c8:	4b15      	ldr	r3, [pc, #84]	@ (8002820 <MX_SPI1_Init+0xa4>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80027ce:	4b14      	ldr	r3, [pc, #80]	@ (8002820 <MX_SPI1_Init+0xa4>)
 80027d0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80027d4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80027d6:	4b12      	ldr	r3, [pc, #72]	@ (8002820 <MX_SPI1_Init+0xa4>)
 80027d8:	2200      	movs	r2, #0
 80027da:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80027dc:	4b10      	ldr	r3, [pc, #64]	@ (8002820 <MX_SPI1_Init+0xa4>)
 80027de:	2200      	movs	r2, #0
 80027e0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80027e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002820 <MX_SPI1_Init+0xa4>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80027e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002820 <MX_SPI1_Init+0xa4>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80027ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002820 <MX_SPI1_Init+0xa4>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80027f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002820 <MX_SPI1_Init+0xa4>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80027fa:	4b09      	ldr	r3, [pc, #36]	@ (8002820 <MX_SPI1_Init+0xa4>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002800:	4b07      	ldr	r3, [pc, #28]	@ (8002820 <MX_SPI1_Init+0xa4>)
 8002802:	2200      	movs	r2, #0
 8002804:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002806:	4b06      	ldr	r3, [pc, #24]	@ (8002820 <MX_SPI1_Init+0xa4>)
 8002808:	2200      	movs	r2, #0
 800280a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800280c:	4804      	ldr	r0, [pc, #16]	@ (8002820 <MX_SPI1_Init+0xa4>)
 800280e:	f009 fffd 	bl	800c80c <HAL_SPI_Init>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8002818:	f7ff ffaa 	bl	8002770 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800281c:	bf00      	nop
 800281e:	bd80      	pop	{r7, pc}
 8002820:	24000da8 	.word	0x24000da8
 8002824:	40013000 	.word	0x40013000

08002828 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800282c:	4b27      	ldr	r3, [pc, #156]	@ (80028cc <MX_SPI2_Init+0xa4>)
 800282e:	4a28      	ldr	r2, [pc, #160]	@ (80028d0 <MX_SPI2_Init+0xa8>)
 8002830:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002832:	4b26      	ldr	r3, [pc, #152]	@ (80028cc <MX_SPI2_Init+0xa4>)
 8002834:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002838:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800283a:	4b24      	ldr	r3, [pc, #144]	@ (80028cc <MX_SPI2_Init+0xa4>)
 800283c:	2200      	movs	r2, #0
 800283e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002840:	4b22      	ldr	r3, [pc, #136]	@ (80028cc <MX_SPI2_Init+0xa4>)
 8002842:	2207      	movs	r2, #7
 8002844:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002846:	4b21      	ldr	r3, [pc, #132]	@ (80028cc <MX_SPI2_Init+0xa4>)
 8002848:	2200      	movs	r2, #0
 800284a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800284c:	4b1f      	ldr	r3, [pc, #124]	@ (80028cc <MX_SPI2_Init+0xa4>)
 800284e:	2200      	movs	r2, #0
 8002850:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002852:	4b1e      	ldr	r3, [pc, #120]	@ (80028cc <MX_SPI2_Init+0xa4>)
 8002854:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002858:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800285a:	4b1c      	ldr	r3, [pc, #112]	@ (80028cc <MX_SPI2_Init+0xa4>)
 800285c:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8002860:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002862:	4b1a      	ldr	r3, [pc, #104]	@ (80028cc <MX_SPI2_Init+0xa4>)
 8002864:	2200      	movs	r2, #0
 8002866:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002868:	4b18      	ldr	r3, [pc, #96]	@ (80028cc <MX_SPI2_Init+0xa4>)
 800286a:	2200      	movs	r2, #0
 800286c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800286e:	4b17      	ldr	r3, [pc, #92]	@ (80028cc <MX_SPI2_Init+0xa4>)
 8002870:	2200      	movs	r2, #0
 8002872:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002874:	4b15      	ldr	r3, [pc, #84]	@ (80028cc <MX_SPI2_Init+0xa4>)
 8002876:	2200      	movs	r2, #0
 8002878:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800287a:	4b14      	ldr	r3, [pc, #80]	@ (80028cc <MX_SPI2_Init+0xa4>)
 800287c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002880:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002882:	4b12      	ldr	r3, [pc, #72]	@ (80028cc <MX_SPI2_Init+0xa4>)
 8002884:	2200      	movs	r2, #0
 8002886:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002888:	4b10      	ldr	r3, [pc, #64]	@ (80028cc <MX_SPI2_Init+0xa4>)
 800288a:	2200      	movs	r2, #0
 800288c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800288e:	4b0f      	ldr	r3, [pc, #60]	@ (80028cc <MX_SPI2_Init+0xa4>)
 8002890:	2200      	movs	r2, #0
 8002892:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002894:	4b0d      	ldr	r3, [pc, #52]	@ (80028cc <MX_SPI2_Init+0xa4>)
 8002896:	2200      	movs	r2, #0
 8002898:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800289a:	4b0c      	ldr	r3, [pc, #48]	@ (80028cc <MX_SPI2_Init+0xa4>)
 800289c:	2200      	movs	r2, #0
 800289e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80028a0:	4b0a      	ldr	r3, [pc, #40]	@ (80028cc <MX_SPI2_Init+0xa4>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80028a6:	4b09      	ldr	r3, [pc, #36]	@ (80028cc <MX_SPI2_Init+0xa4>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80028ac:	4b07      	ldr	r3, [pc, #28]	@ (80028cc <MX_SPI2_Init+0xa4>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80028b2:	4b06      	ldr	r3, [pc, #24]	@ (80028cc <MX_SPI2_Init+0xa4>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80028b8:	4804      	ldr	r0, [pc, #16]	@ (80028cc <MX_SPI2_Init+0xa4>)
 80028ba:	f009 ffa7 	bl	800c80c <HAL_SPI_Init>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 80028c4:	f7ff ff54 	bl	8002770 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80028c8:	bf00      	nop
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	24000e30 	.word	0x24000e30
 80028d0:	40003800 	.word	0x40003800

080028d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b0bc      	sub	sp, #240	@ 0xf0
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028dc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	605a      	str	r2, [r3, #4]
 80028e6:	609a      	str	r2, [r3, #8]
 80028e8:	60da      	str	r2, [r3, #12]
 80028ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028ec:	f107 0318 	add.w	r3, r7, #24
 80028f0:	22c0      	movs	r2, #192	@ 0xc0
 80028f2:	2100      	movs	r1, #0
 80028f4:	4618      	mov	r0, r3
 80028f6:	f016 feff 	bl	80196f8 <memset>
  if(spiHandle->Instance==SPI1)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a56      	ldr	r2, [pc, #344]	@ (8002a58 <HAL_SPI_MspInit+0x184>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d15a      	bne.n	80029ba <HAL_SPI_MspInit+0xe6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002904:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002908:	f04f 0300 	mov.w	r3, #0
 800290c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002910:	2300      	movs	r3, #0
 8002912:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002914:	f107 0318 	add.w	r3, r7, #24
 8002918:	4618      	mov	r0, r3
 800291a:	f008 f997 	bl	800ac4c <HAL_RCCEx_PeriphCLKConfig>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002924:	f7ff ff24 	bl	8002770 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002928:	4b4c      	ldr	r3, [pc, #304]	@ (8002a5c <HAL_SPI_MspInit+0x188>)
 800292a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800292e:	4a4b      	ldr	r2, [pc, #300]	@ (8002a5c <HAL_SPI_MspInit+0x188>)
 8002930:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002934:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8002938:	4b48      	ldr	r3, [pc, #288]	@ (8002a5c <HAL_SPI_MspInit+0x188>)
 800293a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800293e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002942:	617b      	str	r3, [r7, #20]
 8002944:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002946:	4b45      	ldr	r3, [pc, #276]	@ (8002a5c <HAL_SPI_MspInit+0x188>)
 8002948:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800294c:	4a43      	ldr	r2, [pc, #268]	@ (8002a5c <HAL_SPI_MspInit+0x188>)
 800294e:	f043 0301 	orr.w	r3, r3, #1
 8002952:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002956:	4b41      	ldr	r3, [pc, #260]	@ (8002a5c <HAL_SPI_MspInit+0x188>)
 8002958:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin;
 8002964:	2320      	movs	r3, #32
 8002966:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296a:	2302      	movs	r3, #2
 800296c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002970:	2300      	movs	r3, #0
 8002972:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002976:	2303      	movs	r3, #3
 8002978:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800297c:	2305      	movs	r3, #5
 800297e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(SD_SCK_GPIO_Port, &GPIO_InitStruct);
 8002982:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002986:	4619      	mov	r1, r3
 8002988:	4835      	ldr	r0, [pc, #212]	@ (8002a60 <HAL_SPI_MspInit+0x18c>)
 800298a:	f006 fe27 	bl	80095dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_MISO_Pin|SD_MOSI_Pin;
 800298e:	23c0      	movs	r3, #192	@ 0xc0
 8002990:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002994:	2302      	movs	r3, #2
 8002996:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800299a:	2301      	movs	r3, #1
 800299c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a0:	2303      	movs	r3, #3
 80029a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029a6:	2305      	movs	r3, #5
 80029a8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ac:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80029b0:	4619      	mov	r1, r3
 80029b2:	482b      	ldr	r0, [pc, #172]	@ (8002a60 <HAL_SPI_MspInit+0x18c>)
 80029b4:	f006 fe12 	bl	80095dc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80029b8:	e04a      	b.n	8002a50 <HAL_SPI_MspInit+0x17c>
  else if(spiHandle->Instance==SPI2)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a29      	ldr	r2, [pc, #164]	@ (8002a64 <HAL_SPI_MspInit+0x190>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d145      	bne.n	8002a50 <HAL_SPI_MspInit+0x17c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80029c4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80029c8:	f04f 0300 	mov.w	r3, #0
 80029cc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029d4:	f107 0318 	add.w	r3, r7, #24
 80029d8:	4618      	mov	r0, r3
 80029da:	f008 f937 	bl	800ac4c <HAL_RCCEx_PeriphCLKConfig>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <HAL_SPI_MspInit+0x114>
      Error_Handler();
 80029e4:	f7ff fec4 	bl	8002770 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80029e8:	4b1c      	ldr	r3, [pc, #112]	@ (8002a5c <HAL_SPI_MspInit+0x188>)
 80029ea:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80029ee:	4a1b      	ldr	r2, [pc, #108]	@ (8002a5c <HAL_SPI_MspInit+0x188>)
 80029f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029f4:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80029f8:	4b18      	ldr	r3, [pc, #96]	@ (8002a5c <HAL_SPI_MspInit+0x188>)
 80029fa:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80029fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a06:	4b15      	ldr	r3, [pc, #84]	@ (8002a5c <HAL_SPI_MspInit+0x188>)
 8002a08:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002a0c:	4a13      	ldr	r2, [pc, #76]	@ (8002a5c <HAL_SPI_MspInit+0x188>)
 8002a0e:	f043 0302 	orr.w	r3, r3, #2
 8002a12:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002a16:	4b11      	ldr	r3, [pc, #68]	@ (8002a5c <HAL_SPI_MspInit+0x188>)
 8002a18:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	60bb      	str	r3, [r7, #8]
 8002a22:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BMP_SCK_Pin|BMP_MISO_Pin|BMP_MOSI_Pin;
 8002a24:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002a28:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a3e:	2305      	movs	r3, #5
 8002a40:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a44:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4807      	ldr	r0, [pc, #28]	@ (8002a68 <HAL_SPI_MspInit+0x194>)
 8002a4c:	f006 fdc6 	bl	80095dc <HAL_GPIO_Init>
}
 8002a50:	bf00      	nop
 8002a52:	37f0      	adds	r7, #240	@ 0xf0
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40013000 	.word	0x40013000
 8002a5c:	58024400 	.word	0x58024400
 8002a60:	58020000 	.word	0x58020000
 8002a64:	40003800 	.word	0x40003800
 8002a68:	58020400 	.word	0x58020400

08002a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a72:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa4 <HAL_MspInit+0x38>)
 8002a74:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002a78:	4a0a      	ldr	r2, [pc, #40]	@ (8002aa4 <HAL_MspInit+0x38>)
 8002a7a:	f043 0302 	orr.w	r3, r3, #2
 8002a7e:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8002a82:	4b08      	ldr	r3, [pc, #32]	@ (8002aa4 <HAL_MspInit+0x38>)
 8002a84:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	607b      	str	r3, [r7, #4]
 8002a8e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a90:	2200      	movs	r2, #0
 8002a92:	210f      	movs	r1, #15
 8002a94:	f06f 0001 	mvn.w	r0, #1
 8002a98:	f003 fab2 	bl	8006000 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a9c:	bf00      	nop
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	58024400 	.word	0x58024400

08002aa8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08e      	sub	sp, #56	@ 0x38
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b0f      	cmp	r3, #15
 8002ab4:	d844      	bhi.n	8002b40 <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0);
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	2076      	movs	r0, #118	@ 0x76
 8002abc:	f003 faa0 	bl	8006000 <HAL_NVIC_SetPriority>

     /* Enable the TIM17 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002ac0:	2076      	movs	r0, #118	@ 0x76
 8002ac2:	f003 fab7 	bl	8006034 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8002ac6:	4a24      	ldr	r2, [pc, #144]	@ (8002b58 <HAL_InitTick+0xb0>)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8002acc:	4b23      	ldr	r3, [pc, #140]	@ (8002b5c <HAL_InitTick+0xb4>)
 8002ace:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002ad2:	4a22      	ldr	r2, [pc, #136]	@ (8002b5c <HAL_InitTick+0xb4>)
 8002ad4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ad8:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8002adc:	4b1f      	ldr	r3, [pc, #124]	@ (8002b5c <HAL_InitTick+0xb4>)
 8002ade:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002ae2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ae6:	60bb      	str	r3, [r7, #8]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002aea:	f107 020c 	add.w	r2, r7, #12
 8002aee:	f107 0310 	add.w	r3, r7, #16
 8002af2:	4611      	mov	r1, r2
 8002af4:	4618      	mov	r0, r3
 8002af6:	f008 f867 	bl	800abc8 <HAL_RCC_GetClockConfig>
  /* Compute TIM17 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002afa:	f008 f84f 	bl	800ab9c <HAL_RCC_GetPCLK2Freq>
 8002afe:	4603      	mov	r3, r0
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b06:	4a16      	ldr	r2, [pc, #88]	@ (8002b60 <HAL_InitTick+0xb8>)
 8002b08:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0c:	0c9b      	lsrs	r3, r3, #18
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8002b12:	4b14      	ldr	r3, [pc, #80]	@ (8002b64 <HAL_InitTick+0xbc>)
 8002b14:	4a14      	ldr	r2, [pc, #80]	@ (8002b68 <HAL_InitTick+0xc0>)
 8002b16:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8002b18:	4b12      	ldr	r3, [pc, #72]	@ (8002b64 <HAL_InitTick+0xbc>)
 8002b1a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002b1e:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8002b20:	4a10      	ldr	r2, [pc, #64]	@ (8002b64 <HAL_InitTick+0xbc>)
 8002b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b24:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8002b26:	4b0f      	ldr	r3, [pc, #60]	@ (8002b64 <HAL_InitTick+0xbc>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8002b64 <HAL_InitTick+0xbc>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8002b32:	480c      	ldr	r0, [pc, #48]	@ (8002b64 <HAL_InitTick+0xbc>)
 8002b34:	f00b f81f 	bl	800db76 <HAL_TIM_Base_Init>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d107      	bne.n	8002b4e <HAL_InitTick+0xa6>
 8002b3e:	e001      	b.n	8002b44 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e005      	b.n	8002b50 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8002b44:	4807      	ldr	r0, [pc, #28]	@ (8002b64 <HAL_InitTick+0xbc>)
 8002b46:	f00b f86d 	bl	800dc24 <HAL_TIM_Base_Start_IT>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	e000      	b.n	8002b50 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3738      	adds	r7, #56	@ 0x38
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	24000084 	.word	0x24000084
 8002b5c:	58024400 	.word	0x58024400
 8002b60:	431bde83 	.word	0x431bde83
 8002b64:	24000eb8 	.word	0x24000eb8
 8002b68:	40014800 	.word	0x40014800

08002b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b70:	bf00      	nop
 8002b72:	e7fd      	b.n	8002b70 <NMI_Handler+0x4>

08002b74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b78:	bf00      	nop
 8002b7a:	e7fd      	b.n	8002b78 <HardFault_Handler+0x4>

08002b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b80:	bf00      	nop
 8002b82:	e7fd      	b.n	8002b80 <MemManage_Handler+0x4>

08002b84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b88:	bf00      	nop
 8002b8a:	e7fd      	b.n	8002b88 <BusFault_Handler+0x4>

08002b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b90:	bf00      	nop
 8002b92:	e7fd      	b.n	8002b90 <UsageFault_Handler+0x4>

08002b94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b98:	bf00      	nop
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
	...

08002ba4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002ba8:	4802      	ldr	r0, [pc, #8]	@ (8002bb4 <DMA1_Stream0_IRQHandler+0x10>)
 8002baa:	f004 fe25 	bl	80077f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002bae:	bf00      	nop
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	240012fc 	.word	0x240012fc

08002bb8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002bbc:	4802      	ldr	r0, [pc, #8]	@ (8002bc8 <DMA1_Stream1_IRQHandler+0x10>)
 8002bbe:	f004 fe1b 	bl	80077f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002bc2:	bf00      	nop
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	24001374 	.word	0x24001374

08002bcc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002bd0:	4802      	ldr	r0, [pc, #8]	@ (8002bdc <DMA1_Stream2_IRQHandler+0x10>)
 8002bd2:	f004 fe11 	bl	80077f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002bd6:	bf00      	nop
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	24001284 	.word	0x24001284

08002be0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002be4:	4802      	ldr	r0, [pc, #8]	@ (8002bf0 <USART1_IRQHandler+0x10>)
 8002be6:	f00c fc69 	bl	800f4bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002bea:	bf00      	nop
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	240010c8 	.word	0x240010c8

08002bf4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002bf8:	4802      	ldr	r0, [pc, #8]	@ (8002c04 <USART3_IRQHandler+0x10>)
 8002bfa:	f00c fc5f 	bl	800f4bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002bfe:	bf00      	nop
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	2400115c 	.word	0x2400115c

08002c08 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	user_UART_IDLE_IT_handler();
 8002c0c:	f7ff fc4c 	bl	80024a8 <user_UART_IDLE_IT_handler>
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002c10:	4802      	ldr	r0, [pc, #8]	@ (8002c1c <UART4_IRQHandler+0x14>)
 8002c12:	f00c fc53 	bl	800f4bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002c16:	bf00      	nop
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	24001034 	.word	0x24001034

08002c20 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002c24:	4802      	ldr	r0, [pc, #8]	@ (8002c30 <USART6_IRQHandler+0x10>)
 8002c26:	f00c fc49 	bl	800f4bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002c2a:	bf00      	nop
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	240011f0 	.word	0x240011f0

08002c34 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002c38:	4802      	ldr	r0, [pc, #8]	@ (8002c44 <TIM17_IRQHandler+0x10>)
 8002c3a:	f00b f9d1 	bl	800dfe0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8002c3e:	bf00      	nop
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	24000eb8 	.word	0x24000eb8

08002c48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002c4c:	4b32      	ldr	r3, [pc, #200]	@ (8002d18 <SystemInit+0xd0>)
 8002c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c52:	4a31      	ldr	r2, [pc, #196]	@ (8002d18 <SystemInit+0xd0>)
 8002c54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002c5c:	4b2f      	ldr	r3, [pc, #188]	@ (8002d1c <SystemInit+0xd4>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 030f 	and.w	r3, r3, #15
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d807      	bhi.n	8002c78 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002c68:	4b2c      	ldr	r3, [pc, #176]	@ (8002d1c <SystemInit+0xd4>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f023 030f 	bic.w	r3, r3, #15
 8002c70:	4a2a      	ldr	r2, [pc, #168]	@ (8002d1c <SystemInit+0xd4>)
 8002c72:	f043 0303 	orr.w	r3, r3, #3
 8002c76:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002c78:	4b29      	ldr	r3, [pc, #164]	@ (8002d20 <SystemInit+0xd8>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a28      	ldr	r2, [pc, #160]	@ (8002d20 <SystemInit+0xd8>)
 8002c7e:	f043 0301 	orr.w	r3, r3, #1
 8002c82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002c84:	4b26      	ldr	r3, [pc, #152]	@ (8002d20 <SystemInit+0xd8>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002c8a:	4b25      	ldr	r3, [pc, #148]	@ (8002d20 <SystemInit+0xd8>)
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	4924      	ldr	r1, [pc, #144]	@ (8002d20 <SystemInit+0xd8>)
 8002c90:	4b24      	ldr	r3, [pc, #144]	@ (8002d24 <SystemInit+0xdc>)
 8002c92:	4013      	ands	r3, r2
 8002c94:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002c96:	4b21      	ldr	r3, [pc, #132]	@ (8002d1c <SystemInit+0xd4>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 030c 	and.w	r3, r3, #12
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d007      	beq.n	8002cb2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002ca2:	4b1e      	ldr	r3, [pc, #120]	@ (8002d1c <SystemInit+0xd4>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f023 030f 	bic.w	r3, r3, #15
 8002caa:	4a1c      	ldr	r2, [pc, #112]	@ (8002d1c <SystemInit+0xd4>)
 8002cac:	f043 0303 	orr.w	r3, r3, #3
 8002cb0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8002cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8002d20 <SystemInit+0xd8>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8002cb8:	4b19      	ldr	r3, [pc, #100]	@ (8002d20 <SystemInit+0xd8>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8002cbe:	4b18      	ldr	r3, [pc, #96]	@ (8002d20 <SystemInit+0xd8>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002cc4:	4b16      	ldr	r3, [pc, #88]	@ (8002d20 <SystemInit+0xd8>)
 8002cc6:	4a18      	ldr	r2, [pc, #96]	@ (8002d28 <SystemInit+0xe0>)
 8002cc8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002cca:	4b15      	ldr	r3, [pc, #84]	@ (8002d20 <SystemInit+0xd8>)
 8002ccc:	4a17      	ldr	r2, [pc, #92]	@ (8002d2c <SystemInit+0xe4>)
 8002cce:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002cd0:	4b13      	ldr	r3, [pc, #76]	@ (8002d20 <SystemInit+0xd8>)
 8002cd2:	4a17      	ldr	r2, [pc, #92]	@ (8002d30 <SystemInit+0xe8>)
 8002cd4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002cd6:	4b12      	ldr	r3, [pc, #72]	@ (8002d20 <SystemInit+0xd8>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002cdc:	4b10      	ldr	r3, [pc, #64]	@ (8002d20 <SystemInit+0xd8>)
 8002cde:	4a14      	ldr	r2, [pc, #80]	@ (8002d30 <SystemInit+0xe8>)
 8002ce0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002ce2:	4b0f      	ldr	r3, [pc, #60]	@ (8002d20 <SystemInit+0xd8>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002ce8:	4b0d      	ldr	r3, [pc, #52]	@ (8002d20 <SystemInit+0xd8>)
 8002cea:	4a11      	ldr	r2, [pc, #68]	@ (8002d30 <SystemInit+0xe8>)
 8002cec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002cee:	4b0c      	ldr	r3, [pc, #48]	@ (8002d20 <SystemInit+0xd8>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8002d20 <SystemInit+0xd8>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a09      	ldr	r2, [pc, #36]	@ (8002d20 <SystemInit+0xd8>)
 8002cfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cfe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002d00:	4b07      	ldr	r3, [pc, #28]	@ (8002d20 <SystemInit+0xd8>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002d06:	4b0b      	ldr	r3, [pc, #44]	@ (8002d34 <SystemInit+0xec>)
 8002d08:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002d0c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002d0e:	bf00      	nop
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	e000ed00 	.word	0xe000ed00
 8002d1c:	52002000 	.word	0x52002000
 8002d20:	58024400 	.word	0x58024400
 8002d24:	eaf6ed7f 	.word	0xeaf6ed7f
 8002d28:	02020200 	.word	0x02020200
 8002d2c:	01ff0000 	.word	0x01ff0000
 8002d30:	01010280 	.word	0x01010280
 8002d34:	52004000 	.word	0x52004000

08002d38 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08a      	sub	sp, #40	@ 0x28
 8002d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d3e:	f107 031c 	add.w	r3, r7, #28
 8002d42:	2200      	movs	r2, #0
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	605a      	str	r2, [r3, #4]
 8002d48:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d4a:	463b      	mov	r3, r7
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	605a      	str	r2, [r3, #4]
 8002d52:	609a      	str	r2, [r3, #8]
 8002d54:	60da      	str	r2, [r3, #12]
 8002d56:	611a      	str	r2, [r3, #16]
 8002d58:	615a      	str	r2, [r3, #20]
 8002d5a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d5c:	4b33      	ldr	r3, [pc, #204]	@ (8002e2c <MX_TIM2_Init+0xf4>)
 8002d5e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002d62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 280-1;
 8002d64:	4b31      	ldr	r3, [pc, #196]	@ (8002e2c <MX_TIM2_Init+0xf4>)
 8002d66:	f240 1217 	movw	r2, #279	@ 0x117
 8002d6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d6c:	4b2f      	ldr	r3, [pc, #188]	@ (8002e2c <MX_TIM2_Init+0xf4>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7000;
 8002d72:	4b2e      	ldr	r3, [pc, #184]	@ (8002e2c <MX_TIM2_Init+0xf4>)
 8002d74:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8002d78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d7a:	4b2c      	ldr	r3, [pc, #176]	@ (8002e2c <MX_TIM2_Init+0xf4>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d80:	4b2a      	ldr	r3, [pc, #168]	@ (8002e2c <MX_TIM2_Init+0xf4>)
 8002d82:	2280      	movs	r2, #128	@ 0x80
 8002d84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002d86:	4829      	ldr	r0, [pc, #164]	@ (8002e2c <MX_TIM2_Init+0xf4>)
 8002d88:	f00a ffc4 	bl	800dd14 <HAL_TIM_PWM_Init>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8002d92:	f7ff fced 	bl	8002770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d96:	2300      	movs	r3, #0
 8002d98:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d9e:	f107 031c 	add.w	r3, r7, #28
 8002da2:	4619      	mov	r1, r3
 8002da4:	4821      	ldr	r0, [pc, #132]	@ (8002e2c <MX_TIM2_Init+0xf4>)
 8002da6:	f00b ff01 	bl	800ebac <HAL_TIMEx_MasterConfigSynchronization>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8002db0:	f7ff fcde 	bl	8002770 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002db4:	2360      	movs	r3, #96	@ 0x60
 8002db6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002db8:	2300      	movs	r3, #0
 8002dba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002dc4:	463b      	mov	r3, r7
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	4619      	mov	r1, r3
 8002dca:	4818      	ldr	r0, [pc, #96]	@ (8002e2c <MX_TIM2_Init+0xf4>)
 8002dcc:	f00b fa10 	bl	800e1f0 <HAL_TIM_PWM_ConfigChannel>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8002dd6:	f7ff fccb 	bl	8002770 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002dda:	463b      	mov	r3, r7
 8002ddc:	2204      	movs	r2, #4
 8002dde:	4619      	mov	r1, r3
 8002de0:	4812      	ldr	r0, [pc, #72]	@ (8002e2c <MX_TIM2_Init+0xf4>)
 8002de2:	f00b fa05 	bl	800e1f0 <HAL_TIM_PWM_ConfigChannel>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8002dec:	f7ff fcc0 	bl	8002770 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002df0:	463b      	mov	r3, r7
 8002df2:	2208      	movs	r2, #8
 8002df4:	4619      	mov	r1, r3
 8002df6:	480d      	ldr	r0, [pc, #52]	@ (8002e2c <MX_TIM2_Init+0xf4>)
 8002df8:	f00b f9fa 	bl	800e1f0 <HAL_TIM_PWM_ConfigChannel>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 8002e02:	f7ff fcb5 	bl	8002770 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002e06:	463b      	mov	r3, r7
 8002e08:	220c      	movs	r2, #12
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	4807      	ldr	r0, [pc, #28]	@ (8002e2c <MX_TIM2_Init+0xf4>)
 8002e0e:	f00b f9ef 	bl	800e1f0 <HAL_TIM_PWM_ConfigChannel>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 8002e18:	f7ff fcaa 	bl	8002770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002e1c:	4803      	ldr	r0, [pc, #12]	@ (8002e2c <MX_TIM2_Init+0xf4>)
 8002e1e:	f000 f97d 	bl	800311c <HAL_TIM_MspPostInit>

}
 8002e22:	bf00      	nop
 8002e24:	3728      	adds	r7, #40	@ 0x28
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	24000f04 	.word	0x24000f04

08002e30 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08a      	sub	sp, #40	@ 0x28
 8002e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e36:	f107 031c 	add.w	r3, r7, #28
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	605a      	str	r2, [r3, #4]
 8002e40:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e42:	463b      	mov	r3, r7
 8002e44:	2200      	movs	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	605a      	str	r2, [r3, #4]
 8002e4a:	609a      	str	r2, [r3, #8]
 8002e4c:	60da      	str	r2, [r3, #12]
 8002e4e:	611a      	str	r2, [r3, #16]
 8002e50:	615a      	str	r2, [r3, #20]
 8002e52:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002e54:	4b27      	ldr	r3, [pc, #156]	@ (8002ef4 <MX_TIM3_Init+0xc4>)
 8002e56:	4a28      	ldr	r2, [pc, #160]	@ (8002ef8 <MX_TIM3_Init+0xc8>)
 8002e58:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 280-1;
 8002e5a:	4b26      	ldr	r3, [pc, #152]	@ (8002ef4 <MX_TIM3_Init+0xc4>)
 8002e5c:	f240 1217 	movw	r2, #279	@ 0x117
 8002e60:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e62:	4b24      	ldr	r3, [pc, #144]	@ (8002ef4 <MX_TIM3_Init+0xc4>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7000;
 8002e68:	4b22      	ldr	r3, [pc, #136]	@ (8002ef4 <MX_TIM3_Init+0xc4>)
 8002e6a:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8002e6e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e70:	4b20      	ldr	r3, [pc, #128]	@ (8002ef4 <MX_TIM3_Init+0xc4>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e76:	4b1f      	ldr	r3, [pc, #124]	@ (8002ef4 <MX_TIM3_Init+0xc4>)
 8002e78:	2280      	movs	r2, #128	@ 0x80
 8002e7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002e7c:	481d      	ldr	r0, [pc, #116]	@ (8002ef4 <MX_TIM3_Init+0xc4>)
 8002e7e:	f00a ff49 	bl	800dd14 <HAL_TIM_PWM_Init>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8002e88:	f7ff fc72 	bl	8002770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e90:	2300      	movs	r3, #0
 8002e92:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e94:	f107 031c 	add.w	r3, r7, #28
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4816      	ldr	r0, [pc, #88]	@ (8002ef4 <MX_TIM3_Init+0xc4>)
 8002e9c:	f00b fe86 	bl	800ebac <HAL_TIMEx_MasterConfigSynchronization>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8002ea6:	f7ff fc63 	bl	8002770 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002eaa:	2360      	movs	r3, #96	@ 0x60
 8002eac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002eba:	463b      	mov	r3, r7
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	480c      	ldr	r0, [pc, #48]	@ (8002ef4 <MX_TIM3_Init+0xc4>)
 8002ec2:	f00b f995 	bl	800e1f0 <HAL_TIM_PWM_ConfigChannel>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8002ecc:	f7ff fc50 	bl	8002770 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ed0:	463b      	mov	r3, r7
 8002ed2:	2204      	movs	r2, #4
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4807      	ldr	r0, [pc, #28]	@ (8002ef4 <MX_TIM3_Init+0xc4>)
 8002ed8:	f00b f98a 	bl	800e1f0 <HAL_TIM_PWM_ConfigChannel>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8002ee2:	f7ff fc45 	bl	8002770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002ee6:	4803      	ldr	r0, [pc, #12]	@ (8002ef4 <MX_TIM3_Init+0xc4>)
 8002ee8:	f000 f918 	bl	800311c <HAL_TIM_MspPostInit>

}
 8002eec:	bf00      	nop
 8002eee:	3728      	adds	r7, #40	@ 0x28
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	24000f50 	.word	0x24000f50
 8002ef8:	40000400 	.word	0x40000400

08002efc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b08a      	sub	sp, #40	@ 0x28
 8002f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f02:	f107 031c 	add.w	r3, r7, #28
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	605a      	str	r2, [r3, #4]
 8002f0c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f0e:	463b      	mov	r3, r7
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	605a      	str	r2, [r3, #4]
 8002f16:	609a      	str	r2, [r3, #8]
 8002f18:	60da      	str	r2, [r3, #12]
 8002f1a:	611a      	str	r2, [r3, #16]
 8002f1c:	615a      	str	r2, [r3, #20]
 8002f1e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002f20:	4b32      	ldr	r3, [pc, #200]	@ (8002fec <MX_TIM4_Init+0xf0>)
 8002f22:	4a33      	ldr	r2, [pc, #204]	@ (8002ff0 <MX_TIM4_Init+0xf4>)
 8002f24:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 280-1;
 8002f26:	4b31      	ldr	r3, [pc, #196]	@ (8002fec <MX_TIM4_Init+0xf0>)
 8002f28:	f240 1217 	movw	r2, #279	@ 0x117
 8002f2c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f2e:	4b2f      	ldr	r3, [pc, #188]	@ (8002fec <MX_TIM4_Init+0xf0>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7000;
 8002f34:	4b2d      	ldr	r3, [pc, #180]	@ (8002fec <MX_TIM4_Init+0xf0>)
 8002f36:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8002f3a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f3c:	4b2b      	ldr	r3, [pc, #172]	@ (8002fec <MX_TIM4_Init+0xf0>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f42:	4b2a      	ldr	r3, [pc, #168]	@ (8002fec <MX_TIM4_Init+0xf0>)
 8002f44:	2280      	movs	r2, #128	@ 0x80
 8002f46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002f48:	4828      	ldr	r0, [pc, #160]	@ (8002fec <MX_TIM4_Init+0xf0>)
 8002f4a:	f00a fee3 	bl	800dd14 <HAL_TIM_PWM_Init>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8002f54:	f7ff fc0c 	bl	8002770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002f60:	f107 031c 	add.w	r3, r7, #28
 8002f64:	4619      	mov	r1, r3
 8002f66:	4821      	ldr	r0, [pc, #132]	@ (8002fec <MX_TIM4_Init+0xf0>)
 8002f68:	f00b fe20 	bl	800ebac <HAL_TIMEx_MasterConfigSynchronization>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8002f72:	f7ff fbfd 	bl	8002770 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f76:	2360      	movs	r3, #96	@ 0x60
 8002f78:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f82:	2300      	movs	r3, #0
 8002f84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f86:	463b      	mov	r3, r7
 8002f88:	2200      	movs	r2, #0
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4817      	ldr	r0, [pc, #92]	@ (8002fec <MX_TIM4_Init+0xf0>)
 8002f8e:	f00b f92f 	bl	800e1f0 <HAL_TIM_PWM_ConfigChannel>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8002f98:	f7ff fbea 	bl	8002770 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f9c:	463b      	mov	r3, r7
 8002f9e:	2204      	movs	r2, #4
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4812      	ldr	r0, [pc, #72]	@ (8002fec <MX_TIM4_Init+0xf0>)
 8002fa4:	f00b f924 	bl	800e1f0 <HAL_TIM_PWM_ConfigChannel>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8002fae:	f7ff fbdf 	bl	8002770 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002fb2:	463b      	mov	r3, r7
 8002fb4:	2208      	movs	r2, #8
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	480c      	ldr	r0, [pc, #48]	@ (8002fec <MX_TIM4_Init+0xf0>)
 8002fba:	f00b f919 	bl	800e1f0 <HAL_TIM_PWM_ConfigChannel>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8002fc4:	f7ff fbd4 	bl	8002770 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002fc8:	463b      	mov	r3, r7
 8002fca:	220c      	movs	r2, #12
 8002fcc:	4619      	mov	r1, r3
 8002fce:	4807      	ldr	r0, [pc, #28]	@ (8002fec <MX_TIM4_Init+0xf0>)
 8002fd0:	f00b f90e 	bl	800e1f0 <HAL_TIM_PWM_ConfigChannel>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 8002fda:	f7ff fbc9 	bl	8002770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002fde:	4803      	ldr	r0, [pc, #12]	@ (8002fec <MX_TIM4_Init+0xf0>)
 8002fe0:	f000 f89c 	bl	800311c <HAL_TIM_MspPostInit>

}
 8002fe4:	bf00      	nop
 8002fe6:	3728      	adds	r7, #40	@ 0x28
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	24000f9c 	.word	0x24000f9c
 8002ff0:	40000800 	.word	0x40000800

08002ff4 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8003034 <MX_TIM13_Init+0x40>)
 8002ffa:	4a0f      	ldr	r2, [pc, #60]	@ (8003038 <MX_TIM13_Init+0x44>)
 8002ffc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 280-1;
 8002ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8003034 <MX_TIM13_Init+0x40>)
 8003000:	f240 1217 	movw	r2, #279	@ 0x117
 8003004:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003006:	4b0b      	ldr	r3, [pc, #44]	@ (8003034 <MX_TIM13_Init+0x40>)
 8003008:	2200      	movs	r2, #0
 800300a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 800300c:	4b09      	ldr	r3, [pc, #36]	@ (8003034 <MX_TIM13_Init+0x40>)
 800300e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003012:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003014:	4b07      	ldr	r3, [pc, #28]	@ (8003034 <MX_TIM13_Init+0x40>)
 8003016:	2200      	movs	r2, #0
 8003018:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800301a:	4b06      	ldr	r3, [pc, #24]	@ (8003034 <MX_TIM13_Init+0x40>)
 800301c:	2280      	movs	r2, #128	@ 0x80
 800301e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003020:	4804      	ldr	r0, [pc, #16]	@ (8003034 <MX_TIM13_Init+0x40>)
 8003022:	f00a fda8 	bl	800db76 <HAL_TIM_Base_Init>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 800302c:	f7ff fba0 	bl	8002770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8003030:	bf00      	nop
 8003032:	bd80      	pop	{r7, pc}
 8003034:	24000fe8 	.word	0x24000fe8
 8003038:	40001c00 	.word	0x40001c00

0800303c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800303c:	b480      	push	{r7}
 800303e:	b087      	sub	sp, #28
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800304c:	d10f      	bne.n	800306e <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800304e:	4b1f      	ldr	r3, [pc, #124]	@ (80030cc <HAL_TIM_PWM_MspInit+0x90>)
 8003050:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003054:	4a1d      	ldr	r2, [pc, #116]	@ (80030cc <HAL_TIM_PWM_MspInit+0x90>)
 8003056:	f043 0301 	orr.w	r3, r3, #1
 800305a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800305e:	4b1b      	ldr	r3, [pc, #108]	@ (80030cc <HAL_TIM_PWM_MspInit+0x90>)
 8003060:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	617b      	str	r3, [r7, #20]
 800306a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800306c:	e028      	b.n	80030c0 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM3)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a17      	ldr	r2, [pc, #92]	@ (80030d0 <HAL_TIM_PWM_MspInit+0x94>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d10f      	bne.n	8003098 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003078:	4b14      	ldr	r3, [pc, #80]	@ (80030cc <HAL_TIM_PWM_MspInit+0x90>)
 800307a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800307e:	4a13      	ldr	r2, [pc, #76]	@ (80030cc <HAL_TIM_PWM_MspInit+0x90>)
 8003080:	f043 0302 	orr.w	r3, r3, #2
 8003084:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003088:	4b10      	ldr	r3, [pc, #64]	@ (80030cc <HAL_TIM_PWM_MspInit+0x90>)
 800308a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	613b      	str	r3, [r7, #16]
 8003094:	693b      	ldr	r3, [r7, #16]
}
 8003096:	e013      	b.n	80030c0 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM4)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a0d      	ldr	r2, [pc, #52]	@ (80030d4 <HAL_TIM_PWM_MspInit+0x98>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d10e      	bne.n	80030c0 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80030a2:	4b0a      	ldr	r3, [pc, #40]	@ (80030cc <HAL_TIM_PWM_MspInit+0x90>)
 80030a4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80030a8:	4a08      	ldr	r2, [pc, #32]	@ (80030cc <HAL_TIM_PWM_MspInit+0x90>)
 80030aa:	f043 0304 	orr.w	r3, r3, #4
 80030ae:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80030b2:	4b06      	ldr	r3, [pc, #24]	@ (80030cc <HAL_TIM_PWM_MspInit+0x90>)
 80030b4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	60fb      	str	r3, [r7, #12]
 80030be:	68fb      	ldr	r3, [r7, #12]
}
 80030c0:	bf00      	nop
 80030c2:	371c      	adds	r7, #28
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	58024400 	.word	0x58024400
 80030d0:	40000400 	.word	0x40000400
 80030d4:	40000800 	.word	0x40000800

080030d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a0b      	ldr	r2, [pc, #44]	@ (8003114 <HAL_TIM_Base_MspInit+0x3c>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d10e      	bne.n	8003108 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80030ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003118 <HAL_TIM_Base_MspInit+0x40>)
 80030ec:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80030f0:	4a09      	ldr	r2, [pc, #36]	@ (8003118 <HAL_TIM_Base_MspInit+0x40>)
 80030f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030f6:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80030fa:	4b07      	ldr	r3, [pc, #28]	@ (8003118 <HAL_TIM_Base_MspInit+0x40>)
 80030fc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003100:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8003108:	bf00      	nop
 800310a:	3714      	adds	r7, #20
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	40001c00 	.word	0x40001c00
 8003118:	58024400 	.word	0x58024400

0800311c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b08c      	sub	sp, #48	@ 0x30
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003124:	f107 031c 	add.w	r3, r7, #28
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	605a      	str	r2, [r3, #4]
 800312e:	609a      	str	r2, [r3, #8]
 8003130:	60da      	str	r2, [r3, #12]
 8003132:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800313c:	d13f      	bne.n	80031be <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800313e:	4b47      	ldr	r3, [pc, #284]	@ (800325c <HAL_TIM_MspPostInit+0x140>)
 8003140:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003144:	4a45      	ldr	r2, [pc, #276]	@ (800325c <HAL_TIM_MspPostInit+0x140>)
 8003146:	f043 0301 	orr.w	r3, r3, #1
 800314a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800314e:	4b43      	ldr	r3, [pc, #268]	@ (800325c <HAL_TIM_MspPostInit+0x140>)
 8003150:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	61bb      	str	r3, [r7, #24]
 800315a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800315c:	4b3f      	ldr	r3, [pc, #252]	@ (800325c <HAL_TIM_MspPostInit+0x140>)
 800315e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003162:	4a3e      	ldr	r2, [pc, #248]	@ (800325c <HAL_TIM_MspPostInit+0x140>)
 8003164:	f043 0302 	orr.w	r3, r3, #2
 8003168:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800316c:	4b3b      	ldr	r3, [pc, #236]	@ (800325c <HAL_TIM_MspPostInit+0x140>)
 800316e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	617b      	str	r3, [r7, #20]
 8003178:	697b      	ldr	r3, [r7, #20]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 800317a:	f248 030c 	movw	r3, #32780	@ 0x800c
 800317e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003180:	2302      	movs	r3, #2
 8003182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003184:	2300      	movs	r3, #0
 8003186:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003188:	2300      	movs	r3, #0
 800318a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800318c:	2301      	movs	r3, #1
 800318e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003190:	f107 031c 	add.w	r3, r7, #28
 8003194:	4619      	mov	r1, r3
 8003196:	4832      	ldr	r0, [pc, #200]	@ (8003260 <HAL_TIM_MspPostInit+0x144>)
 8003198:	f006 fa20 	bl	80095dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800319c:	2308      	movs	r3, #8
 800319e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a0:	2302      	movs	r3, #2
 80031a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a4:	2300      	movs	r3, #0
 80031a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a8:	2300      	movs	r3, #0
 80031aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80031ac:	2301      	movs	r3, #1
 80031ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031b0:	f107 031c 	add.w	r3, r7, #28
 80031b4:	4619      	mov	r1, r3
 80031b6:	482b      	ldr	r0, [pc, #172]	@ (8003264 <HAL_TIM_MspPostInit+0x148>)
 80031b8:	f006 fa10 	bl	80095dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80031bc:	e049      	b.n	8003252 <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM3)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a29      	ldr	r2, [pc, #164]	@ (8003268 <HAL_TIM_MspPostInit+0x14c>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d11f      	bne.n	8003208 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031c8:	4b24      	ldr	r3, [pc, #144]	@ (800325c <HAL_TIM_MspPostInit+0x140>)
 80031ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80031ce:	4a23      	ldr	r2, [pc, #140]	@ (800325c <HAL_TIM_MspPostInit+0x140>)
 80031d0:	f043 0302 	orr.w	r3, r3, #2
 80031d4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80031d8:	4b20      	ldr	r3, [pc, #128]	@ (800325c <HAL_TIM_MspPostInit+0x140>)
 80031da:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	613b      	str	r3, [r7, #16]
 80031e4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80031e6:	2330      	movs	r3, #48	@ 0x30
 80031e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ea:	2302      	movs	r3, #2
 80031ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ee:	2300      	movs	r3, #0
 80031f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f2:	2300      	movs	r3, #0
 80031f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80031f6:	2302      	movs	r3, #2
 80031f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031fa:	f107 031c 	add.w	r3, r7, #28
 80031fe:	4619      	mov	r1, r3
 8003200:	4818      	ldr	r0, [pc, #96]	@ (8003264 <HAL_TIM_MspPostInit+0x148>)
 8003202:	f006 f9eb 	bl	80095dc <HAL_GPIO_Init>
}
 8003206:	e024      	b.n	8003252 <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM4)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a17      	ldr	r2, [pc, #92]	@ (800326c <HAL_TIM_MspPostInit+0x150>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d11f      	bne.n	8003252 <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003212:	4b12      	ldr	r3, [pc, #72]	@ (800325c <HAL_TIM_MspPostInit+0x140>)
 8003214:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003218:	4a10      	ldr	r2, [pc, #64]	@ (800325c <HAL_TIM_MspPostInit+0x140>)
 800321a:	f043 0302 	orr.w	r3, r3, #2
 800321e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003222:	4b0e      	ldr	r3, [pc, #56]	@ (800325c <HAL_TIM_MspPostInit+0x140>)
 8003224:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003230:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8003234:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003236:	2302      	movs	r3, #2
 8003238:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323a:	2300      	movs	r3, #0
 800323c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800323e:	2300      	movs	r3, #0
 8003240:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003242:	2302      	movs	r3, #2
 8003244:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003246:	f107 031c 	add.w	r3, r7, #28
 800324a:	4619      	mov	r1, r3
 800324c:	4805      	ldr	r0, [pc, #20]	@ (8003264 <HAL_TIM_MspPostInit+0x148>)
 800324e:	f006 f9c5 	bl	80095dc <HAL_GPIO_Init>
}
 8003252:	bf00      	nop
 8003254:	3730      	adds	r7, #48	@ 0x30
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	58024400 	.word	0x58024400
 8003260:	58020000 	.word	0x58020000
 8003264:	58020400 	.word	0x58020400
 8003268:	40000400 	.word	0x40000400
 800326c:	40000800 	.word	0x40000800

08003270 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart3_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003274:	4b22      	ldr	r3, [pc, #136]	@ (8003300 <MX_UART4_Init+0x90>)
 8003276:	4a23      	ldr	r2, [pc, #140]	@ (8003304 <MX_UART4_Init+0x94>)
 8003278:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800327a:	4b21      	ldr	r3, [pc, #132]	@ (8003300 <MX_UART4_Init+0x90>)
 800327c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003280:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003282:	4b1f      	ldr	r3, [pc, #124]	@ (8003300 <MX_UART4_Init+0x90>)
 8003284:	2200      	movs	r2, #0
 8003286:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003288:	4b1d      	ldr	r3, [pc, #116]	@ (8003300 <MX_UART4_Init+0x90>)
 800328a:	2200      	movs	r2, #0
 800328c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800328e:	4b1c      	ldr	r3, [pc, #112]	@ (8003300 <MX_UART4_Init+0x90>)
 8003290:	2200      	movs	r2, #0
 8003292:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003294:	4b1a      	ldr	r3, [pc, #104]	@ (8003300 <MX_UART4_Init+0x90>)
 8003296:	220c      	movs	r2, #12
 8003298:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800329a:	4b19      	ldr	r3, [pc, #100]	@ (8003300 <MX_UART4_Init+0x90>)
 800329c:	2200      	movs	r2, #0
 800329e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80032a0:	4b17      	ldr	r3, [pc, #92]	@ (8003300 <MX_UART4_Init+0x90>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80032a6:	4b16      	ldr	r3, [pc, #88]	@ (8003300 <MX_UART4_Init+0x90>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80032ac:	4b14      	ldr	r3, [pc, #80]	@ (8003300 <MX_UART4_Init+0x90>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80032b2:	4b13      	ldr	r3, [pc, #76]	@ (8003300 <MX_UART4_Init+0x90>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80032b8:	4811      	ldr	r0, [pc, #68]	@ (8003300 <MX_UART4_Init+0x90>)
 80032ba:	f00b fd23 	bl	800ed04 <HAL_UART_Init>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80032c4:	f7ff fa54 	bl	8002770 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032c8:	2100      	movs	r1, #0
 80032ca:	480d      	ldr	r0, [pc, #52]	@ (8003300 <MX_UART4_Init+0x90>)
 80032cc:	f00f f849 	bl	8012362 <HAL_UARTEx_SetTxFifoThreshold>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80032d6:	f7ff fa4b 	bl	8002770 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032da:	2100      	movs	r1, #0
 80032dc:	4808      	ldr	r0, [pc, #32]	@ (8003300 <MX_UART4_Init+0x90>)
 80032de:	f00f f87e 	bl	80123de <HAL_UARTEx_SetRxFifoThreshold>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80032e8:	f7ff fa42 	bl	8002770 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80032ec:	4804      	ldr	r0, [pc, #16]	@ (8003300 <MX_UART4_Init+0x90>)
 80032ee:	f00e ffff 	bl	80122f0 <HAL_UARTEx_DisableFifoMode>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80032f8:	f7ff fa3a 	bl	8002770 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80032fc:	bf00      	nop
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	24001034 	.word	0x24001034
 8003304:	40004c00 	.word	0x40004c00

08003308 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800330c:	4b23      	ldr	r3, [pc, #140]	@ (800339c <MX_USART1_UART_Init+0x94>)
 800330e:	4a24      	ldr	r2, [pc, #144]	@ (80033a0 <MX_USART1_UART_Init+0x98>)
 8003310:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8003312:	4b22      	ldr	r3, [pc, #136]	@ (800339c <MX_USART1_UART_Init+0x94>)
 8003314:	4a23      	ldr	r2, [pc, #140]	@ (80033a4 <MX_USART1_UART_Init+0x9c>)
 8003316:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8003318:	4b20      	ldr	r3, [pc, #128]	@ (800339c <MX_USART1_UART_Init+0x94>)
 800331a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800331e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003320:	4b1e      	ldr	r3, [pc, #120]	@ (800339c <MX_USART1_UART_Init+0x94>)
 8003322:	2200      	movs	r2, #0
 8003324:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8003326:	4b1d      	ldr	r3, [pc, #116]	@ (800339c <MX_USART1_UART_Init+0x94>)
 8003328:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800332c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800332e:	4b1b      	ldr	r3, [pc, #108]	@ (800339c <MX_USART1_UART_Init+0x94>)
 8003330:	220c      	movs	r2, #12
 8003332:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003334:	4b19      	ldr	r3, [pc, #100]	@ (800339c <MX_USART1_UART_Init+0x94>)
 8003336:	2200      	movs	r2, #0
 8003338:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800333a:	4b18      	ldr	r3, [pc, #96]	@ (800339c <MX_USART1_UART_Init+0x94>)
 800333c:	2200      	movs	r2, #0
 800333e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003340:	4b16      	ldr	r3, [pc, #88]	@ (800339c <MX_USART1_UART_Init+0x94>)
 8003342:	2200      	movs	r2, #0
 8003344:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003346:	4b15      	ldr	r3, [pc, #84]	@ (800339c <MX_USART1_UART_Init+0x94>)
 8003348:	2200      	movs	r2, #0
 800334a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800334c:	4b13      	ldr	r3, [pc, #76]	@ (800339c <MX_USART1_UART_Init+0x94>)
 800334e:	2200      	movs	r2, #0
 8003350:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003352:	4812      	ldr	r0, [pc, #72]	@ (800339c <MX_USART1_UART_Init+0x94>)
 8003354:	f00b fcd6 	bl	800ed04 <HAL_UART_Init>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800335e:	f7ff fa07 	bl	8002770 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003362:	2100      	movs	r1, #0
 8003364:	480d      	ldr	r0, [pc, #52]	@ (800339c <MX_USART1_UART_Init+0x94>)
 8003366:	f00e fffc 	bl	8012362 <HAL_UARTEx_SetTxFifoThreshold>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8003370:	f7ff f9fe 	bl	8002770 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003374:	2100      	movs	r1, #0
 8003376:	4809      	ldr	r0, [pc, #36]	@ (800339c <MX_USART1_UART_Init+0x94>)
 8003378:	f00f f831 	bl	80123de <HAL_UARTEx_SetRxFifoThreshold>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8003382:	f7ff f9f5 	bl	8002770 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003386:	4805      	ldr	r0, [pc, #20]	@ (800339c <MX_USART1_UART_Init+0x94>)
 8003388:	f00e ffb2 	bl	80122f0 <HAL_UARTEx_DisableFifoMode>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8003392:	f7ff f9ed 	bl	8002770 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003396:	bf00      	nop
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	240010c8 	.word	0x240010c8
 80033a0:	40011000 	.word	0x40011000
 80033a4:	000186a0 	.word	0x000186a0

080033a8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80033ac:	4b22      	ldr	r3, [pc, #136]	@ (8003438 <MX_USART3_UART_Init+0x90>)
 80033ae:	4a23      	ldr	r2, [pc, #140]	@ (800343c <MX_USART3_UART_Init+0x94>)
 80033b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80033b2:	4b21      	ldr	r3, [pc, #132]	@ (8003438 <MX_USART3_UART_Init+0x90>)
 80033b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80033b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80033ba:	4b1f      	ldr	r3, [pc, #124]	@ (8003438 <MX_USART3_UART_Init+0x90>)
 80033bc:	2200      	movs	r2, #0
 80033be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80033c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003438 <MX_USART3_UART_Init+0x90>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80033c6:	4b1c      	ldr	r3, [pc, #112]	@ (8003438 <MX_USART3_UART_Init+0x90>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80033cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003438 <MX_USART3_UART_Init+0x90>)
 80033ce:	220c      	movs	r2, #12
 80033d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033d2:	4b19      	ldr	r3, [pc, #100]	@ (8003438 <MX_USART3_UART_Init+0x90>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80033d8:	4b17      	ldr	r3, [pc, #92]	@ (8003438 <MX_USART3_UART_Init+0x90>)
 80033da:	2200      	movs	r2, #0
 80033dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033de:	4b16      	ldr	r3, [pc, #88]	@ (8003438 <MX_USART3_UART_Init+0x90>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80033e4:	4b14      	ldr	r3, [pc, #80]	@ (8003438 <MX_USART3_UART_Init+0x90>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033ea:	4b13      	ldr	r3, [pc, #76]	@ (8003438 <MX_USART3_UART_Init+0x90>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80033f0:	4811      	ldr	r0, [pc, #68]	@ (8003438 <MX_USART3_UART_Init+0x90>)
 80033f2:	f00b fc87 	bl	800ed04 <HAL_UART_Init>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80033fc:	f7ff f9b8 	bl	8002770 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003400:	2100      	movs	r1, #0
 8003402:	480d      	ldr	r0, [pc, #52]	@ (8003438 <MX_USART3_UART_Init+0x90>)
 8003404:	f00e ffad 	bl	8012362 <HAL_UARTEx_SetTxFifoThreshold>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800340e:	f7ff f9af 	bl	8002770 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003412:	2100      	movs	r1, #0
 8003414:	4808      	ldr	r0, [pc, #32]	@ (8003438 <MX_USART3_UART_Init+0x90>)
 8003416:	f00e ffe2 	bl	80123de <HAL_UARTEx_SetRxFifoThreshold>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8003420:	f7ff f9a6 	bl	8002770 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003424:	4804      	ldr	r0, [pc, #16]	@ (8003438 <MX_USART3_UART_Init+0x90>)
 8003426:	f00e ff63 	bl	80122f0 <HAL_UARTEx_DisableFifoMode>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8003430:	f7ff f99e 	bl	8002770 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003434:	bf00      	nop
 8003436:	bd80      	pop	{r7, pc}
 8003438:	2400115c 	.word	0x2400115c
 800343c:	40004800 	.word	0x40004800

08003440 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003444:	4b22      	ldr	r3, [pc, #136]	@ (80034d0 <MX_USART6_UART_Init+0x90>)
 8003446:	4a23      	ldr	r2, [pc, #140]	@ (80034d4 <MX_USART6_UART_Init+0x94>)
 8003448:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800344a:	4b21      	ldr	r3, [pc, #132]	@ (80034d0 <MX_USART6_UART_Init+0x90>)
 800344c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003450:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003452:	4b1f      	ldr	r3, [pc, #124]	@ (80034d0 <MX_USART6_UART_Init+0x90>)
 8003454:	2200      	movs	r2, #0
 8003456:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003458:	4b1d      	ldr	r3, [pc, #116]	@ (80034d0 <MX_USART6_UART_Init+0x90>)
 800345a:	2200      	movs	r2, #0
 800345c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800345e:	4b1c      	ldr	r3, [pc, #112]	@ (80034d0 <MX_USART6_UART_Init+0x90>)
 8003460:	2200      	movs	r2, #0
 8003462:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003464:	4b1a      	ldr	r3, [pc, #104]	@ (80034d0 <MX_USART6_UART_Init+0x90>)
 8003466:	220c      	movs	r2, #12
 8003468:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800346a:	4b19      	ldr	r3, [pc, #100]	@ (80034d0 <MX_USART6_UART_Init+0x90>)
 800346c:	2200      	movs	r2, #0
 800346e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003470:	4b17      	ldr	r3, [pc, #92]	@ (80034d0 <MX_USART6_UART_Init+0x90>)
 8003472:	2200      	movs	r2, #0
 8003474:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003476:	4b16      	ldr	r3, [pc, #88]	@ (80034d0 <MX_USART6_UART_Init+0x90>)
 8003478:	2200      	movs	r2, #0
 800347a:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800347c:	4b14      	ldr	r3, [pc, #80]	@ (80034d0 <MX_USART6_UART_Init+0x90>)
 800347e:	2200      	movs	r2, #0
 8003480:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003482:	4b13      	ldr	r3, [pc, #76]	@ (80034d0 <MX_USART6_UART_Init+0x90>)
 8003484:	2200      	movs	r2, #0
 8003486:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003488:	4811      	ldr	r0, [pc, #68]	@ (80034d0 <MX_USART6_UART_Init+0x90>)
 800348a:	f00b fc3b 	bl	800ed04 <HAL_UART_Init>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d001      	beq.n	8003498 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8003494:	f7ff f96c 	bl	8002770 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003498:	2100      	movs	r1, #0
 800349a:	480d      	ldr	r0, [pc, #52]	@ (80034d0 <MX_USART6_UART_Init+0x90>)
 800349c:	f00e ff61 	bl	8012362 <HAL_UARTEx_SetTxFifoThreshold>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80034a6:	f7ff f963 	bl	8002770 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80034aa:	2100      	movs	r1, #0
 80034ac:	4808      	ldr	r0, [pc, #32]	@ (80034d0 <MX_USART6_UART_Init+0x90>)
 80034ae:	f00e ff96 	bl	80123de <HAL_UARTEx_SetRxFifoThreshold>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80034b8:	f7ff f95a 	bl	8002770 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80034bc:	4804      	ldr	r0, [pc, #16]	@ (80034d0 <MX_USART6_UART_Init+0x90>)
 80034be:	f00e ff17 	bl	80122f0 <HAL_UARTEx_DisableFifoMode>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d001      	beq.n	80034cc <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80034c8:	f7ff f952 	bl	8002770 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80034cc:	bf00      	nop
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	240011f0 	.word	0x240011f0
 80034d4:	40011400 	.word	0x40011400

080034d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b0c0      	sub	sp, #256	@ 0x100
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	605a      	str	r2, [r3, #4]
 80034ea:	609a      	str	r2, [r3, #8]
 80034ec:	60da      	str	r2, [r3, #12]
 80034ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80034f0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80034f4:	22c0      	movs	r2, #192	@ 0xc0
 80034f6:	2100      	movs	r1, #0
 80034f8:	4618      	mov	r0, r3
 80034fa:	f016 f8fd 	bl	80196f8 <memset>
  if(uartHandle->Instance==UART4)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a82      	ldr	r2, [pc, #520]	@ (800370c <HAL_UART_MspInit+0x234>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d17c      	bne.n	8003602 <HAL_UART_MspInit+0x12a>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003508:	f04f 0202 	mov.w	r2, #2
 800350c:	f04f 0300 	mov.w	r3, #0
 8003510:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003514:	2300      	movs	r3, #0
 8003516:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800351a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800351e:	4618      	mov	r0, r3
 8003520:	f007 fb94 	bl	800ac4c <HAL_RCCEx_PeriphCLKConfig>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800352a:	f7ff f921 	bl	8002770 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800352e:	4b78      	ldr	r3, [pc, #480]	@ (8003710 <HAL_UART_MspInit+0x238>)
 8003530:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003534:	4a76      	ldr	r2, [pc, #472]	@ (8003710 <HAL_UART_MspInit+0x238>)
 8003536:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800353a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800353e:	4b74      	ldr	r3, [pc, #464]	@ (8003710 <HAL_UART_MspInit+0x238>)
 8003540:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003544:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003548:	627b      	str	r3, [r7, #36]	@ 0x24
 800354a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800354c:	4b70      	ldr	r3, [pc, #448]	@ (8003710 <HAL_UART_MspInit+0x238>)
 800354e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003552:	4a6f      	ldr	r2, [pc, #444]	@ (8003710 <HAL_UART_MspInit+0x238>)
 8003554:	f043 0301 	orr.w	r3, r3, #1
 8003558:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800355c:	4b6c      	ldr	r3, [pc, #432]	@ (8003710 <HAL_UART_MspInit+0x238>)
 800355e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	623b      	str	r3, [r7, #32]
 8003568:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800356a:	2303      	movs	r3, #3
 800356c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003570:	2302      	movs	r3, #2
 8003572:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003576:	2300      	movs	r3, #0
 8003578:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800357c:	2300      	movs	r3, #0
 800357e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003582:	2308      	movs	r3, #8
 8003584:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003588:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800358c:	4619      	mov	r1, r3
 800358e:	4861      	ldr	r0, [pc, #388]	@ (8003714 <HAL_UART_MspInit+0x23c>)
 8003590:	f006 f824 	bl	80095dc <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8003594:	4b60      	ldr	r3, [pc, #384]	@ (8003718 <HAL_UART_MspInit+0x240>)
 8003596:	4a61      	ldr	r2, [pc, #388]	@ (800371c <HAL_UART_MspInit+0x244>)
 8003598:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 800359a:	4b5f      	ldr	r3, [pc, #380]	@ (8003718 <HAL_UART_MspInit+0x240>)
 800359c:	223f      	movs	r2, #63	@ 0x3f
 800359e:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035a0:	4b5d      	ldr	r3, [pc, #372]	@ (8003718 <HAL_UART_MspInit+0x240>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035a6:	4b5c      	ldr	r3, [pc, #368]	@ (8003718 <HAL_UART_MspInit+0x240>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035ac:	4b5a      	ldr	r3, [pc, #360]	@ (8003718 <HAL_UART_MspInit+0x240>)
 80035ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035b2:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035b4:	4b58      	ldr	r3, [pc, #352]	@ (8003718 <HAL_UART_MspInit+0x240>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035ba:	4b57      	ldr	r3, [pc, #348]	@ (8003718 <HAL_UART_MspInit+0x240>)
 80035bc:	2200      	movs	r2, #0
 80035be:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80035c0:	4b55      	ldr	r3, [pc, #340]	@ (8003718 <HAL_UART_MspInit+0x240>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80035c6:	4b54      	ldr	r3, [pc, #336]	@ (8003718 <HAL_UART_MspInit+0x240>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035cc:	4b52      	ldr	r3, [pc, #328]	@ (8003718 <HAL_UART_MspInit+0x240>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80035d2:	4851      	ldr	r0, [pc, #324]	@ (8003718 <HAL_UART_MspInit+0x240>)
 80035d4:	f002 fdb4 	bl	8006140 <HAL_DMA_Init>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 80035de:	f7ff f8c7 	bl	8002770 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a4c      	ldr	r2, [pc, #304]	@ (8003718 <HAL_UART_MspInit+0x240>)
 80035e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80035ea:	4a4b      	ldr	r2, [pc, #300]	@ (8003718 <HAL_UART_MspInit+0x240>)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80035f0:	2200      	movs	r2, #0
 80035f2:	2105      	movs	r1, #5
 80035f4:	2034      	movs	r0, #52	@ 0x34
 80035f6:	f002 fd03 	bl	8006000 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80035fa:	2034      	movs	r0, #52	@ 0x34
 80035fc:	f002 fd1a 	bl	8006034 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003600:	e16a      	b.n	80038d8 <HAL_UART_MspInit+0x400>
  else if(uartHandle->Instance==USART1)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a46      	ldr	r2, [pc, #280]	@ (8003720 <HAL_UART_MspInit+0x248>)
 8003608:	4293      	cmp	r3, r2
 800360a:	f040 808f 	bne.w	800372c <HAL_UART_MspInit+0x254>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800360e:	f04f 0201 	mov.w	r2, #1
 8003612:	f04f 0300 	mov.w	r3, #0
 8003616:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800361a:	2300      	movs	r3, #0
 800361c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003620:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003624:	4618      	mov	r0, r3
 8003626:	f007 fb11 	bl	800ac4c <HAL_RCCEx_PeriphCLKConfig>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <HAL_UART_MspInit+0x15c>
      Error_Handler();
 8003630:	f7ff f89e 	bl	8002770 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003634:	4b36      	ldr	r3, [pc, #216]	@ (8003710 <HAL_UART_MspInit+0x238>)
 8003636:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800363a:	4a35      	ldr	r2, [pc, #212]	@ (8003710 <HAL_UART_MspInit+0x238>)
 800363c:	f043 0310 	orr.w	r3, r3, #16
 8003640:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8003644:	4b32      	ldr	r3, [pc, #200]	@ (8003710 <HAL_UART_MspInit+0x238>)
 8003646:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800364a:	f003 0310 	and.w	r3, r3, #16
 800364e:	61fb      	str	r3, [r7, #28]
 8003650:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003652:	4b2f      	ldr	r3, [pc, #188]	@ (8003710 <HAL_UART_MspInit+0x238>)
 8003654:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003658:	4a2d      	ldr	r2, [pc, #180]	@ (8003710 <HAL_UART_MspInit+0x238>)
 800365a:	f043 0301 	orr.w	r3, r3, #1
 800365e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003662:	4b2b      	ldr	r3, [pc, #172]	@ (8003710 <HAL_UART_MspInit+0x238>)
 8003664:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	61bb      	str	r3, [r7, #24]
 800366e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|SBUS_RX_Pin;
 8003670:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003674:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003678:	2302      	movs	r3, #2
 800367a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367e:	2300      	movs	r3, #0
 8003680:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003684:	2300      	movs	r3, #0
 8003686:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800368a:	2307      	movs	r3, #7
 800368c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003690:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003694:	4619      	mov	r1, r3
 8003696:	481f      	ldr	r0, [pc, #124]	@ (8003714 <HAL_UART_MspInit+0x23c>)
 8003698:	f005 ffa0 	bl	80095dc <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 800369c:	4b21      	ldr	r3, [pc, #132]	@ (8003724 <HAL_UART_MspInit+0x24c>)
 800369e:	4a22      	ldr	r2, [pc, #136]	@ (8003728 <HAL_UART_MspInit+0x250>)
 80036a0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80036a2:	4b20      	ldr	r3, [pc, #128]	@ (8003724 <HAL_UART_MspInit+0x24c>)
 80036a4:	2229      	movs	r2, #41	@ 0x29
 80036a6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036a8:	4b1e      	ldr	r3, [pc, #120]	@ (8003724 <HAL_UART_MspInit+0x24c>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036ae:	4b1d      	ldr	r3, [pc, #116]	@ (8003724 <HAL_UART_MspInit+0x24c>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80036b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003724 <HAL_UART_MspInit+0x24c>)
 80036b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80036ba:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036bc:	4b19      	ldr	r3, [pc, #100]	@ (8003724 <HAL_UART_MspInit+0x24c>)
 80036be:	2200      	movs	r2, #0
 80036c0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036c2:	4b18      	ldr	r3, [pc, #96]	@ (8003724 <HAL_UART_MspInit+0x24c>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80036c8:	4b16      	ldr	r3, [pc, #88]	@ (8003724 <HAL_UART_MspInit+0x24c>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80036ce:	4b15      	ldr	r3, [pc, #84]	@ (8003724 <HAL_UART_MspInit+0x24c>)
 80036d0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80036d4:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036d6:	4b13      	ldr	r3, [pc, #76]	@ (8003724 <HAL_UART_MspInit+0x24c>)
 80036d8:	2200      	movs	r2, #0
 80036da:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80036dc:	4811      	ldr	r0, [pc, #68]	@ (8003724 <HAL_UART_MspInit+0x24c>)
 80036de:	f002 fd2f 	bl	8006140 <HAL_DMA_Init>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <HAL_UART_MspInit+0x214>
      Error_Handler();
 80036e8:	f7ff f842 	bl	8002770 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a0d      	ldr	r2, [pc, #52]	@ (8003724 <HAL_UART_MspInit+0x24c>)
 80036f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80036f4:	4a0b      	ldr	r2, [pc, #44]	@ (8003724 <HAL_UART_MspInit+0x24c>)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80036fa:	2200      	movs	r2, #0
 80036fc:	2105      	movs	r1, #5
 80036fe:	2025      	movs	r0, #37	@ 0x25
 8003700:	f002 fc7e 	bl	8006000 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003704:	2025      	movs	r0, #37	@ 0x25
 8003706:	f002 fc95 	bl	8006034 <HAL_NVIC_EnableIRQ>
}
 800370a:	e0e5      	b.n	80038d8 <HAL_UART_MspInit+0x400>
 800370c:	40004c00 	.word	0x40004c00
 8003710:	58024400 	.word	0x58024400
 8003714:	58020000 	.word	0x58020000
 8003718:	24001284 	.word	0x24001284
 800371c:	40020040 	.word	0x40020040
 8003720:	40011000 	.word	0x40011000
 8003724:	240012fc 	.word	0x240012fc
 8003728:	40020010 	.word	0x40020010
  else if(uartHandle->Instance==USART3)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a6c      	ldr	r2, [pc, #432]	@ (80038e4 <HAL_UART_MspInit+0x40c>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d17d      	bne.n	8003832 <HAL_UART_MspInit+0x35a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003736:	f04f 0202 	mov.w	r2, #2
 800373a:	f04f 0300 	mov.w	r3, #0
 800373e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003742:	2300      	movs	r3, #0
 8003744:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003748:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800374c:	4618      	mov	r0, r3
 800374e:	f007 fa7d 	bl	800ac4c <HAL_RCCEx_PeriphCLKConfig>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <HAL_UART_MspInit+0x284>
      Error_Handler();
 8003758:	f7ff f80a 	bl	8002770 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800375c:	4b62      	ldr	r3, [pc, #392]	@ (80038e8 <HAL_UART_MspInit+0x410>)
 800375e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003762:	4a61      	ldr	r2, [pc, #388]	@ (80038e8 <HAL_UART_MspInit+0x410>)
 8003764:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003768:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800376c:	4b5e      	ldr	r3, [pc, #376]	@ (80038e8 <HAL_UART_MspInit+0x410>)
 800376e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003772:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003776:	617b      	str	r3, [r7, #20]
 8003778:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800377a:	4b5b      	ldr	r3, [pc, #364]	@ (80038e8 <HAL_UART_MspInit+0x410>)
 800377c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003780:	4a59      	ldr	r2, [pc, #356]	@ (80038e8 <HAL_UART_MspInit+0x410>)
 8003782:	f043 0304 	orr.w	r3, r3, #4
 8003786:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800378a:	4b57      	ldr	r3, [pc, #348]	@ (80038e8 <HAL_UART_MspInit+0x410>)
 800378c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003790:	f003 0304 	and.w	r3, r3, #4
 8003794:	613b      	str	r3, [r7, #16]
 8003796:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003798:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800379c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a0:	2302      	movs	r3, #2
 80037a2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a6:	2300      	movs	r3, #0
 80037a8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ac:	2300      	movs	r3, #0
 80037ae:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80037b2:	2307      	movs	r3, #7
 80037b4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037b8:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80037bc:	4619      	mov	r1, r3
 80037be:	484b      	ldr	r0, [pc, #300]	@ (80038ec <HAL_UART_MspInit+0x414>)
 80037c0:	f005 ff0c 	bl	80095dc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80037c4:	4b4a      	ldr	r3, [pc, #296]	@ (80038f0 <HAL_UART_MspInit+0x418>)
 80037c6:	4a4b      	ldr	r2, [pc, #300]	@ (80038f4 <HAL_UART_MspInit+0x41c>)
 80037c8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80037ca:	4b49      	ldr	r3, [pc, #292]	@ (80038f0 <HAL_UART_MspInit+0x418>)
 80037cc:	222d      	movs	r2, #45	@ 0x2d
 80037ce:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037d0:	4b47      	ldr	r3, [pc, #284]	@ (80038f0 <HAL_UART_MspInit+0x418>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037d6:	4b46      	ldr	r3, [pc, #280]	@ (80038f0 <HAL_UART_MspInit+0x418>)
 80037d8:	2200      	movs	r2, #0
 80037da:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037dc:	4b44      	ldr	r3, [pc, #272]	@ (80038f0 <HAL_UART_MspInit+0x418>)
 80037de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037e2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037e4:	4b42      	ldr	r3, [pc, #264]	@ (80038f0 <HAL_UART_MspInit+0x418>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037ea:	4b41      	ldr	r3, [pc, #260]	@ (80038f0 <HAL_UART_MspInit+0x418>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80037f0:	4b3f      	ldr	r3, [pc, #252]	@ (80038f0 <HAL_UART_MspInit+0x418>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80037f6:	4b3e      	ldr	r3, [pc, #248]	@ (80038f0 <HAL_UART_MspInit+0x418>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037fc:	4b3c      	ldr	r3, [pc, #240]	@ (80038f0 <HAL_UART_MspInit+0x418>)
 80037fe:	2200      	movs	r2, #0
 8003800:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003802:	483b      	ldr	r0, [pc, #236]	@ (80038f0 <HAL_UART_MspInit+0x418>)
 8003804:	f002 fc9c 	bl	8006140 <HAL_DMA_Init>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <HAL_UART_MspInit+0x33a>
      Error_Handler();
 800380e:	f7fe ffaf 	bl	8002770 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a36      	ldr	r2, [pc, #216]	@ (80038f0 <HAL_UART_MspInit+0x418>)
 8003816:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800381a:	4a35      	ldr	r2, [pc, #212]	@ (80038f0 <HAL_UART_MspInit+0x418>)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003820:	2200      	movs	r2, #0
 8003822:	2105      	movs	r1, #5
 8003824:	2027      	movs	r0, #39	@ 0x27
 8003826:	f002 fbeb 	bl	8006000 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800382a:	2027      	movs	r0, #39	@ 0x27
 800382c:	f002 fc02 	bl	8006034 <HAL_NVIC_EnableIRQ>
}
 8003830:	e052      	b.n	80038d8 <HAL_UART_MspInit+0x400>
  else if(uartHandle->Instance==USART6)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a30      	ldr	r2, [pc, #192]	@ (80038f8 <HAL_UART_MspInit+0x420>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d14d      	bne.n	80038d8 <HAL_UART_MspInit+0x400>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800383c:	f04f 0201 	mov.w	r2, #1
 8003840:	f04f 0300 	mov.w	r3, #0
 8003844:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003848:	2300      	movs	r3, #0
 800384a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800384e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003852:	4618      	mov	r0, r3
 8003854:	f007 f9fa 	bl	800ac4c <HAL_RCCEx_PeriphCLKConfig>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <HAL_UART_MspInit+0x38a>
      Error_Handler();
 800385e:	f7fe ff87 	bl	8002770 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003862:	4b21      	ldr	r3, [pc, #132]	@ (80038e8 <HAL_UART_MspInit+0x410>)
 8003864:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8003868:	4a1f      	ldr	r2, [pc, #124]	@ (80038e8 <HAL_UART_MspInit+0x410>)
 800386a:	f043 0320 	orr.w	r3, r3, #32
 800386e:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8003872:	4b1d      	ldr	r3, [pc, #116]	@ (80038e8 <HAL_UART_MspInit+0x410>)
 8003874:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8003878:	f003 0320 	and.w	r3, r3, #32
 800387c:	60fb      	str	r3, [r7, #12]
 800387e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003880:	4b19      	ldr	r3, [pc, #100]	@ (80038e8 <HAL_UART_MspInit+0x410>)
 8003882:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003886:	4a18      	ldr	r2, [pc, #96]	@ (80038e8 <HAL_UART_MspInit+0x410>)
 8003888:	f043 0304 	orr.w	r3, r3, #4
 800388c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003890:	4b15      	ldr	r3, [pc, #84]	@ (80038e8 <HAL_UART_MspInit+0x410>)
 8003892:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003896:	f003 0304 	and.w	r3, r3, #4
 800389a:	60bb      	str	r3, [r7, #8]
 800389c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800389e:	23c0      	movs	r3, #192	@ 0xc0
 80038a0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038a4:	2302      	movs	r3, #2
 80038a6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038aa:	2300      	movs	r3, #0
 80038ac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038b0:	2300      	movs	r3, #0
 80038b2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80038b6:	2307      	movs	r3, #7
 80038b8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038bc:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80038c0:	4619      	mov	r1, r3
 80038c2:	480a      	ldr	r0, [pc, #40]	@ (80038ec <HAL_UART_MspInit+0x414>)
 80038c4:	f005 fe8a 	bl	80095dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80038c8:	2200      	movs	r2, #0
 80038ca:	2105      	movs	r1, #5
 80038cc:	2047      	movs	r0, #71	@ 0x47
 80038ce:	f002 fb97 	bl	8006000 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80038d2:	2047      	movs	r0, #71	@ 0x47
 80038d4:	f002 fbae 	bl	8006034 <HAL_NVIC_EnableIRQ>
}
 80038d8:	bf00      	nop
 80038da:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	40004800 	.word	0x40004800
 80038e8:	58024400 	.word	0x58024400
 80038ec:	58020800 	.word	0x58020800
 80038f0:	24001374 	.word	0x24001374
 80038f4:	40020028 	.word	0x40020028
 80038f8:	40011400 	.word	0x40011400

080038fc <Reset_UART>:
  /* USER CODE END USART6_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void Reset_UART(UART_HandleTypeDef *huart) {
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]

      // Clear any pending error flags
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF | UART_CLEAR_FEF | UART_CLEAR_NEF | UART_CLEAR_OREF);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	220f      	movs	r2, #15
 800390a:	621a      	str	r2, [r3, #32]

    // Abort ongoing UART transfer
    if (HAL_UART_Abort_IT(huart) != HAL_OK) {
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f00b fc99 	bl	800f244 <HAL_UART_Abort_IT>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <Reset_UART+0x20>
        // Abort Error
        Error_Handler();
 8003918:	f7fe ff2a 	bl	8002770 <Error_Handler>
    }
     if(huart == &huart3){
    	 MX_USART3_UART_Init();
     }
*/
}
 800391c:	bf00      	nop
 800391e:	3708      	adds	r7, #8
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <BMP280_write>:
uint16_t dig_T1, dig_P1;
int16_t  dig_T2, dig_T3, dig_P2,dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;

int32_t T_raw, P_raw, t_fine;

void BMP280_write(uint8_t Address, uint8_t Data){
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	4603      	mov	r3, r0
 800392c:	460a      	mov	r2, r1
 800392e:	71fb      	strb	r3, [r7, #7]
 8003930:	4613      	mov	r3, r2
 8003932:	71bb      	strb	r3, [r7, #6]
	BMP280_select();
 8003934:	2200      	movs	r2, #0
 8003936:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800393a:	480f      	ldr	r0, [pc, #60]	@ (8003978 <BMP280_write+0x54>)
 800393c:	f005 fffe 	bl	800993c <HAL_GPIO_WritePin>
	Address &= 0x7F;
 8003940:	79fb      	ldrb	r3, [r7, #7]
 8003942:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003946:	b2db      	uxtb	r3, r3
 8003948:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 800394a:	1df9      	adds	r1, r7, #7
 800394c:	2364      	movs	r3, #100	@ 0x64
 800394e:	2201      	movs	r2, #1
 8003950:	480a      	ldr	r0, [pc, #40]	@ (800397c <BMP280_write+0x58>)
 8003952:	f009 f87f 	bl	800ca54 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BMP280, &Data, 1, 100);
 8003956:	1db9      	adds	r1, r7, #6
 8003958:	2364      	movs	r3, #100	@ 0x64
 800395a:	2201      	movs	r2, #1
 800395c:	4807      	ldr	r0, [pc, #28]	@ (800397c <BMP280_write+0x58>)
 800395e:	f009 f879 	bl	800ca54 <HAL_SPI_Transmit>

	BMP280_unselect();
 8003962:	2201      	movs	r2, #1
 8003964:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003968:	4803      	ldr	r0, [pc, #12]	@ (8003978 <BMP280_write+0x54>)
 800396a:	f005 ffe7 	bl	800993c <HAL_GPIO_WritePin>
}
 800396e:	bf00      	nop
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	58020400 	.word	0x58020400
 800397c:	24000e30 	.word	0x24000e30

08003980 <BMP280_read>:

uint8_t BMP280_read(uint8_t Address){
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer = (Address|0x80);
 800398a:	79fb      	ldrb	r3, [r7, #7]
 800398c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003990:	b2db      	uxtb	r3, r3
 8003992:	73fb      	strb	r3, [r7, #15]
	BMP280_select();
 8003994:	2200      	movs	r2, #0
 8003996:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800399a:	480e      	ldr	r0, [pc, #56]	@ (80039d4 <BMP280_read+0x54>)
 800399c:	f005 ffce 	bl	800993c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Buffer, 1, 100);
 80039a0:	f107 010f 	add.w	r1, r7, #15
 80039a4:	2364      	movs	r3, #100	@ 0x64
 80039a6:	2201      	movs	r2, #1
 80039a8:	480b      	ldr	r0, [pc, #44]	@ (80039d8 <BMP280_read+0x58>)
 80039aa:	f009 f853 	bl	800ca54 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, &Buffer, 1, 100);
 80039ae:	f107 010f 	add.w	r1, r7, #15
 80039b2:	2364      	movs	r3, #100	@ 0x64
 80039b4:	2201      	movs	r2, #1
 80039b6:	4808      	ldr	r0, [pc, #32]	@ (80039d8 <BMP280_read+0x58>)
 80039b8:	f009 fa3a 	bl	800ce30 <HAL_SPI_Receive>
	BMP280_unselect();
 80039bc:	2201      	movs	r2, #1
 80039be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80039c2:	4804      	ldr	r0, [pc, #16]	@ (80039d4 <BMP280_read+0x54>)
 80039c4:	f005 ffba 	bl	800993c <HAL_GPIO_WritePin>

	return Buffer;
 80039c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	58020400 	.word	0x58020400
 80039d8:	24000e30 	.word	0x24000e30

080039dc <BMP280_config>:

void BMP280_config(void){
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
	BMP280_write(ctrl_meas, 0x57);
 80039e0:	2157      	movs	r1, #87	@ 0x57
 80039e2:	20f4      	movs	r0, #244	@ 0xf4
 80039e4:	f7ff ff9e 	bl	8003924 <BMP280_write>
	BMP280_write(config, 0x10);
 80039e8:	2110      	movs	r1, #16
 80039ea:	20f5      	movs	r0, #245	@ 0xf5
 80039ec:	f7ff ff9a 	bl	8003924 <BMP280_write>
}
 80039f0:	bf00      	nop
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <BMP280_calibrationData>:

void BMP280_reset(void){
	BMP280_write(reset, 0xB6);
}

void BMP280_calibrationData(void){
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b088      	sub	sp, #32
 80039f8:	af00      	add	r7, sp, #0
	uint8_t Address = 0x88;
 80039fa:	2388      	movs	r3, #136	@ 0x88
 80039fc:	77fb      	strb	r3, [r7, #31]
	uint8_t Buffer[24] = {0};
 80039fe:	1d3b      	adds	r3, r7, #4
 8003a00:	2200      	movs	r2, #0
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	605a      	str	r2, [r3, #4]
 8003a06:	609a      	str	r2, [r3, #8]
 8003a08:	60da      	str	r2, [r3, #12]
 8003a0a:	611a      	str	r2, [r3, #16]
 8003a0c:	615a      	str	r2, [r3, #20]
	BMP280_select();
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003a14:	4849      	ldr	r0, [pc, #292]	@ (8003b3c <BMP280_calibrationData+0x148>)
 8003a16:	f005 ff91 	bl	800993c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8003a1a:	f107 011f 	add.w	r1, r7, #31
 8003a1e:	2364      	movs	r3, #100	@ 0x64
 8003a20:	2201      	movs	r2, #1
 8003a22:	4847      	ldr	r0, [pc, #284]	@ (8003b40 <BMP280_calibrationData+0x14c>)
 8003a24:	f009 f816 	bl	800ca54 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 24, 100);
 8003a28:	1d39      	adds	r1, r7, #4
 8003a2a:	2364      	movs	r3, #100	@ 0x64
 8003a2c:	2218      	movs	r2, #24
 8003a2e:	4844      	ldr	r0, [pc, #272]	@ (8003b40 <BMP280_calibrationData+0x14c>)
 8003a30:	f009 f9fe 	bl	800ce30 <HAL_SPI_Receive>
	BMP280_unselect();
 8003a34:	2201      	movs	r2, #1
 8003a36:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003a3a:	4840      	ldr	r0, [pc, #256]	@ (8003b3c <BMP280_calibrationData+0x148>)
 8003a3c:	f005 ff7e 	bl	800993c <HAL_GPIO_WritePin>

	dig_T1 = (Buffer[1]<<8)|Buffer[0];
 8003a40:	797b      	ldrb	r3, [r7, #5]
 8003a42:	b21b      	sxth	r3, r3
 8003a44:	021b      	lsls	r3, r3, #8
 8003a46:	b21a      	sxth	r2, r3
 8003a48:	793b      	ldrb	r3, [r7, #4]
 8003a4a:	b21b      	sxth	r3, r3
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	b21b      	sxth	r3, r3
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	4b3c      	ldr	r3, [pc, #240]	@ (8003b44 <BMP280_calibrationData+0x150>)
 8003a54:	801a      	strh	r2, [r3, #0]
	dig_T2 = (Buffer[3]<<8)|Buffer[2];
 8003a56:	79fb      	ldrb	r3, [r7, #7]
 8003a58:	b21b      	sxth	r3, r3
 8003a5a:	021b      	lsls	r3, r3, #8
 8003a5c:	b21a      	sxth	r2, r3
 8003a5e:	79bb      	ldrb	r3, [r7, #6]
 8003a60:	b21b      	sxth	r3, r3
 8003a62:	4313      	orrs	r3, r2
 8003a64:	b21a      	sxth	r2, r3
 8003a66:	4b38      	ldr	r3, [pc, #224]	@ (8003b48 <BMP280_calibrationData+0x154>)
 8003a68:	801a      	strh	r2, [r3, #0]
	dig_T3 = (Buffer[5]<<8)|Buffer[4];
 8003a6a:	7a7b      	ldrb	r3, [r7, #9]
 8003a6c:	b21b      	sxth	r3, r3
 8003a6e:	021b      	lsls	r3, r3, #8
 8003a70:	b21a      	sxth	r2, r3
 8003a72:	7a3b      	ldrb	r3, [r7, #8]
 8003a74:	b21b      	sxth	r3, r3
 8003a76:	4313      	orrs	r3, r2
 8003a78:	b21a      	sxth	r2, r3
 8003a7a:	4b34      	ldr	r3, [pc, #208]	@ (8003b4c <BMP280_calibrationData+0x158>)
 8003a7c:	801a      	strh	r2, [r3, #0]

	dig_P1 = (Buffer[7]<<8)|Buffer[6];
 8003a7e:	7afb      	ldrb	r3, [r7, #11]
 8003a80:	b21b      	sxth	r3, r3
 8003a82:	021b      	lsls	r3, r3, #8
 8003a84:	b21a      	sxth	r2, r3
 8003a86:	7abb      	ldrb	r3, [r7, #10]
 8003a88:	b21b      	sxth	r3, r3
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	b21b      	sxth	r3, r3
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	4b2f      	ldr	r3, [pc, #188]	@ (8003b50 <BMP280_calibrationData+0x15c>)
 8003a92:	801a      	strh	r2, [r3, #0]
	dig_P2 = (Buffer[9]<<8)|Buffer[8];
 8003a94:	7b7b      	ldrb	r3, [r7, #13]
 8003a96:	b21b      	sxth	r3, r3
 8003a98:	021b      	lsls	r3, r3, #8
 8003a9a:	b21a      	sxth	r2, r3
 8003a9c:	7b3b      	ldrb	r3, [r7, #12]
 8003a9e:	b21b      	sxth	r3, r3
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	b21a      	sxth	r2, r3
 8003aa4:	4b2b      	ldr	r3, [pc, #172]	@ (8003b54 <BMP280_calibrationData+0x160>)
 8003aa6:	801a      	strh	r2, [r3, #0]
	dig_P3 = (Buffer[11]<<8)|Buffer[10];
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
 8003aaa:	b21b      	sxth	r3, r3
 8003aac:	021b      	lsls	r3, r3, #8
 8003aae:	b21a      	sxth	r2, r3
 8003ab0:	7bbb      	ldrb	r3, [r7, #14]
 8003ab2:	b21b      	sxth	r3, r3
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	b21a      	sxth	r2, r3
 8003ab8:	4b27      	ldr	r3, [pc, #156]	@ (8003b58 <BMP280_calibrationData+0x164>)
 8003aba:	801a      	strh	r2, [r3, #0]
	dig_P4 = (Buffer[13]<<8)|Buffer[12];
 8003abc:	7c7b      	ldrb	r3, [r7, #17]
 8003abe:	b21b      	sxth	r3, r3
 8003ac0:	021b      	lsls	r3, r3, #8
 8003ac2:	b21a      	sxth	r2, r3
 8003ac4:	7c3b      	ldrb	r3, [r7, #16]
 8003ac6:	b21b      	sxth	r3, r3
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	b21a      	sxth	r2, r3
 8003acc:	4b23      	ldr	r3, [pc, #140]	@ (8003b5c <BMP280_calibrationData+0x168>)
 8003ace:	801a      	strh	r2, [r3, #0]
	dig_P5 = (Buffer[15]<<8)|Buffer[14];
 8003ad0:	7cfb      	ldrb	r3, [r7, #19]
 8003ad2:	b21b      	sxth	r3, r3
 8003ad4:	021b      	lsls	r3, r3, #8
 8003ad6:	b21a      	sxth	r2, r3
 8003ad8:	7cbb      	ldrb	r3, [r7, #18]
 8003ada:	b21b      	sxth	r3, r3
 8003adc:	4313      	orrs	r3, r2
 8003ade:	b21a      	sxth	r2, r3
 8003ae0:	4b1f      	ldr	r3, [pc, #124]	@ (8003b60 <BMP280_calibrationData+0x16c>)
 8003ae2:	801a      	strh	r2, [r3, #0]
	dig_P6 = (Buffer[17]<<8)|Buffer[16];
 8003ae4:	7d7b      	ldrb	r3, [r7, #21]
 8003ae6:	b21b      	sxth	r3, r3
 8003ae8:	021b      	lsls	r3, r3, #8
 8003aea:	b21a      	sxth	r2, r3
 8003aec:	7d3b      	ldrb	r3, [r7, #20]
 8003aee:	b21b      	sxth	r3, r3
 8003af0:	4313      	orrs	r3, r2
 8003af2:	b21a      	sxth	r2, r3
 8003af4:	4b1b      	ldr	r3, [pc, #108]	@ (8003b64 <BMP280_calibrationData+0x170>)
 8003af6:	801a      	strh	r2, [r3, #0]
	dig_P7 = (Buffer[19]<<8)|Buffer[18];
 8003af8:	7dfb      	ldrb	r3, [r7, #23]
 8003afa:	b21b      	sxth	r3, r3
 8003afc:	021b      	lsls	r3, r3, #8
 8003afe:	b21a      	sxth	r2, r3
 8003b00:	7dbb      	ldrb	r3, [r7, #22]
 8003b02:	b21b      	sxth	r3, r3
 8003b04:	4313      	orrs	r3, r2
 8003b06:	b21a      	sxth	r2, r3
 8003b08:	4b17      	ldr	r3, [pc, #92]	@ (8003b68 <BMP280_calibrationData+0x174>)
 8003b0a:	801a      	strh	r2, [r3, #0]
	dig_P8 = (Buffer[21]<<8)|Buffer[20];
 8003b0c:	7e7b      	ldrb	r3, [r7, #25]
 8003b0e:	b21b      	sxth	r3, r3
 8003b10:	021b      	lsls	r3, r3, #8
 8003b12:	b21a      	sxth	r2, r3
 8003b14:	7e3b      	ldrb	r3, [r7, #24]
 8003b16:	b21b      	sxth	r3, r3
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	b21a      	sxth	r2, r3
 8003b1c:	4b13      	ldr	r3, [pc, #76]	@ (8003b6c <BMP280_calibrationData+0x178>)
 8003b1e:	801a      	strh	r2, [r3, #0]
	dig_P9 = (Buffer[23]<<8)|Buffer[22];
 8003b20:	7efb      	ldrb	r3, [r7, #27]
 8003b22:	b21b      	sxth	r3, r3
 8003b24:	021b      	lsls	r3, r3, #8
 8003b26:	b21a      	sxth	r2, r3
 8003b28:	7ebb      	ldrb	r3, [r7, #26]
 8003b2a:	b21b      	sxth	r3, r3
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	b21a      	sxth	r2, r3
 8003b30:	4b0f      	ldr	r3, [pc, #60]	@ (8003b70 <BMP280_calibrationData+0x17c>)
 8003b32:	801a      	strh	r2, [r3, #0]
}
 8003b34:	bf00      	nop
 8003b36:	3720      	adds	r7, #32
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	58020400 	.word	0x58020400
 8003b40:	24000e30 	.word	0x24000e30
 8003b44:	24001400 	.word	0x24001400
 8003b48:	24001404 	.word	0x24001404
 8003b4c:	24001406 	.word	0x24001406
 8003b50:	24001402 	.word	0x24001402
 8003b54:	24001408 	.word	0x24001408
 8003b58:	2400140a 	.word	0x2400140a
 8003b5c:	2400140c 	.word	0x2400140c
 8003b60:	2400140e 	.word	0x2400140e
 8003b64:	24001410 	.word	0x24001410
 8003b68:	24001412 	.word	0x24001412
 8003b6c:	24001414 	.word	0x24001414
 8003b70:	24001416 	.word	0x24001416

08003b74 <BMP280_readRawValues>:

void BMP280_readRawValues(void){
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
	uint8_t Address = press_msb;
 8003b7a:	23f7      	movs	r3, #247	@ 0xf7
 8003b7c:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[6] = {0};
 8003b7e:	463b      	mov	r3, r7
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	809a      	strh	r2, [r3, #4]
	BMP280_select();
 8003b86:	2200      	movs	r2, #0
 8003b88:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003b8c:	4817      	ldr	r0, [pc, #92]	@ (8003bec <BMP280_readRawValues+0x78>)
 8003b8e:	f005 fed5 	bl	800993c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8003b92:	1df9      	adds	r1, r7, #7
 8003b94:	2364      	movs	r3, #100	@ 0x64
 8003b96:	2201      	movs	r2, #1
 8003b98:	4815      	ldr	r0, [pc, #84]	@ (8003bf0 <BMP280_readRawValues+0x7c>)
 8003b9a:	f008 ff5b 	bl	800ca54 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 6, 100);
 8003b9e:	4639      	mov	r1, r7
 8003ba0:	2364      	movs	r3, #100	@ 0x64
 8003ba2:	2206      	movs	r2, #6
 8003ba4:	4812      	ldr	r0, [pc, #72]	@ (8003bf0 <BMP280_readRawValues+0x7c>)
 8003ba6:	f009 f943 	bl	800ce30 <HAL_SPI_Receive>
	BMP280_unselect();
 8003baa:	2201      	movs	r2, #1
 8003bac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003bb0:	480e      	ldr	r0, [pc, #56]	@ (8003bec <BMP280_readRawValues+0x78>)
 8003bb2:	f005 fec3 	bl	800993c <HAL_GPIO_WritePin>

	P_raw = (Buffer[0]<<12)|(Buffer[1]<<4)|(Buffer[2]>>4);
 8003bb6:	783b      	ldrb	r3, [r7, #0]
 8003bb8:	031a      	lsls	r2, r3, #12
 8003bba:	787b      	ldrb	r3, [r7, #1]
 8003bbc:	011b      	lsls	r3, r3, #4
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	78ba      	ldrb	r2, [r7, #2]
 8003bc2:	0912      	lsrs	r2, r2, #4
 8003bc4:	b2d2      	uxtb	r2, r2
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	4a0a      	ldr	r2, [pc, #40]	@ (8003bf4 <BMP280_readRawValues+0x80>)
 8003bca:	6013      	str	r3, [r2, #0]
	T_raw = (Buffer[3]<<12)|(Buffer[4]<<4)|(Buffer[5]>>4);
 8003bcc:	78fb      	ldrb	r3, [r7, #3]
 8003bce:	031a      	lsls	r2, r3, #12
 8003bd0:	793b      	ldrb	r3, [r7, #4]
 8003bd2:	011b      	lsls	r3, r3, #4
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	797a      	ldrb	r2, [r7, #5]
 8003bd8:	0912      	lsrs	r2, r2, #4
 8003bda:	b2d2      	uxtb	r2, r2
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	4a06      	ldr	r2, [pc, #24]	@ (8003bf8 <BMP280_readRawValues+0x84>)
 8003be0:	6013      	str	r3, [r2, #0]
}
 8003be2:	bf00      	nop
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	58020400 	.word	0x58020400
 8003bf0:	24000e30 	.word	0x24000e30
 8003bf4:	2400141c 	.word	0x2400141c
 8003bf8:	24001418 	.word	0x24001418

08003bfc <BMP280_measureT>:

int32_t BMP280_measureT(int32_t adc_T){
 8003bfc:	b480      	push	{r7}
 8003bfe:	b087      	sub	sp, #28
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 =  ((((T_raw>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8003c04:	4b1a      	ldr	r3, [pc, #104]	@ (8003c70 <BMP280_measureT+0x74>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	10da      	asrs	r2, r3, #3
 8003c0a:	4b1a      	ldr	r3, [pc, #104]	@ (8003c74 <BMP280_measureT+0x78>)
 8003c0c:	881b      	ldrh	r3, [r3, #0]
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	4a19      	ldr	r2, [pc, #100]	@ (8003c78 <BMP280_measureT+0x7c>)
 8003c14:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003c18:	fb02 f303 	mul.w	r3, r2, r3
 8003c1c:	12db      	asrs	r3, r3, #11
 8003c1e:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	111b      	asrs	r3, r3, #4
 8003c24:	4a13      	ldr	r2, [pc, #76]	@ (8003c74 <BMP280_measureT+0x78>)
 8003c26:	8812      	ldrh	r2, [r2, #0]
 8003c28:	1a9b      	subs	r3, r3, r2
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	1112      	asrs	r2, r2, #4
 8003c2e:	4911      	ldr	r1, [pc, #68]	@ (8003c74 <BMP280_measureT+0x78>)
 8003c30:	8809      	ldrh	r1, [r1, #0]
 8003c32:	1a52      	subs	r2, r2, r1
 8003c34:	fb02 f303 	mul.w	r3, r2, r3
 8003c38:	131b      	asrs	r3, r3, #12
 8003c3a:	4a10      	ldr	r2, [pc, #64]	@ (8003c7c <BMP280_measureT+0x80>)
 8003c3c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003c40:	fb02 f303 	mul.w	r3, r2, r3
 8003c44:	139b      	asrs	r3, r3, #14
 8003c46:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	4a0c      	ldr	r2, [pc, #48]	@ (8003c80 <BMP280_measureT+0x84>)
 8003c50:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8003c52:	4b0b      	ldr	r3, [pc, #44]	@ (8003c80 <BMP280_measureT+0x84>)
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	4613      	mov	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	4413      	add	r3, r2
 8003c5c:	3380      	adds	r3, #128	@ 0x80
 8003c5e:	121b      	asrs	r3, r3, #8
 8003c60:	60fb      	str	r3, [r7, #12]
	return T;
 8003c62:	68fb      	ldr	r3, [r7, #12]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	371c      	adds	r7, #28
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr
 8003c70:	24001418 	.word	0x24001418
 8003c74:	24001400 	.word	0x24001400
 8003c78:	24001404 	.word	0x24001404
 8003c7c:	24001406 	.word	0x24001406
 8003c80:	24001420 	.word	0x24001420

08003c84 <BMP280_measureP>:

uint32_t BMP280_measureP(int32_t adc_P){
 8003c84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c88:	b0ca      	sub	sp, #296	@ 0x128
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8003c90:	4baf      	ldr	r3, [pc, #700]	@ (8003f50 <BMP280_measureP+0x2cc>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	17da      	asrs	r2, r3, #31
 8003c96:	461c      	mov	r4, r3
 8003c98:	4615      	mov	r5, r2
 8003c9a:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8003c9e:	f145 3bff 	adc.w	fp, r5, #4294967295
 8003ca2:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 8003ca6:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8003caa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003cae:	fb03 f102 	mul.w	r1, r3, r2
 8003cb2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8003cb6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003cba:	fb02 f303 	mul.w	r3, r2, r3
 8003cbe:	18ca      	adds	r2, r1, r3
 8003cc0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003cc4:	fba3 8903 	umull	r8, r9, r3, r3
 8003cc8:	eb02 0309 	add.w	r3, r2, r9
 8003ccc:	4699      	mov	r9, r3
 8003cce:	4ba1      	ldr	r3, [pc, #644]	@ (8003f54 <BMP280_measureP+0x2d0>)
 8003cd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cd4:	b21b      	sxth	r3, r3
 8003cd6:	17da      	asrs	r2, r3, #31
 8003cd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003cdc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003ce0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	fb03 f209 	mul.w	r2, r3, r9
 8003cea:	460b      	mov	r3, r1
 8003cec:	fb08 f303 	mul.w	r3, r8, r3
 8003cf0:	4413      	add	r3, r2
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	fba8 1202 	umull	r1, r2, r8, r2
 8003cf8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003cfc:	460a      	mov	r2, r1
 8003cfe:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8003d02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003d06:	4413      	add	r3, r2
 8003d08:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d0c:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8003d10:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8003d14:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8003d18:	4b8f      	ldr	r3, [pc, #572]	@ (8003f58 <BMP280_measureP+0x2d4>)
 8003d1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d1e:	b21b      	sxth	r3, r3
 8003d20:	17da      	asrs	r2, r3, #31
 8003d22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d26:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8003d2a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003d2e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8003d32:	462a      	mov	r2, r5
 8003d34:	fb02 f203 	mul.w	r2, r2, r3
 8003d38:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003d3c:	4621      	mov	r1, r4
 8003d3e:	fb01 f303 	mul.w	r3, r1, r3
 8003d42:	441a      	add	r2, r3
 8003d44:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003d48:	4621      	mov	r1, r4
 8003d4a:	fba3 1301 	umull	r1, r3, r3, r1
 8003d4e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003d52:	460b      	mov	r3, r1
 8003d54:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d5c:	18d3      	adds	r3, r2, r3
 8003d5e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003d62:	f04f 0000 	mov.w	r0, #0
 8003d66:	f04f 0100 	mov.w	r1, #0
 8003d6a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8003d6e:	462b      	mov	r3, r5
 8003d70:	0459      	lsls	r1, r3, #17
 8003d72:	4623      	mov	r3, r4
 8003d74:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8003d78:	4623      	mov	r3, r4
 8003d7a:	0458      	lsls	r0, r3, #17
 8003d7c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8003d80:	1814      	adds	r4, r2, r0
 8003d82:	643c      	str	r4, [r7, #64]	@ 0x40
 8003d84:	414b      	adcs	r3, r1
 8003d86:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d88:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8003d8c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8003d90:	4b72      	ldr	r3, [pc, #456]	@ (8003f5c <BMP280_measureP+0x2d8>)
 8003d92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d96:	b21b      	sxth	r3, r3
 8003d98:	17da      	asrs	r2, r3, #31
 8003d9a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003d9e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003da2:	f04f 0000 	mov.w	r0, #0
 8003da6:	f04f 0100 	mov.w	r1, #0
 8003daa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003dae:	00d9      	lsls	r1, r3, #3
 8003db0:	2000      	movs	r0, #0
 8003db2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8003db6:	1814      	adds	r4, r2, r0
 8003db8:	63bc      	str	r4, [r7, #56]	@ 0x38
 8003dba:	414b      	adcs	r3, r1
 8003dbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003dbe:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8003dc2:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8003dc6:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8003dca:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003dce:	fb03 f102 	mul.w	r1, r3, r2
 8003dd2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8003dd6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003dda:	fb02 f303 	mul.w	r3, r2, r3
 8003dde:	18ca      	adds	r2, r1, r3
 8003de0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003de4:	fba3 1303 	umull	r1, r3, r3, r3
 8003de8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003dec:	460b      	mov	r3, r1
 8003dee:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003df6:	18d3      	adds	r3, r2, r3
 8003df8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003dfc:	4b58      	ldr	r3, [pc, #352]	@ (8003f60 <BMP280_measureP+0x2dc>)
 8003dfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e02:	b21b      	sxth	r3, r3
 8003e04:	17da      	asrs	r2, r3, #31
 8003e06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003e0a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003e0e:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8003e12:	462b      	mov	r3, r5
 8003e14:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003e18:	4642      	mov	r2, r8
 8003e1a:	fb02 f203 	mul.w	r2, r2, r3
 8003e1e:	464b      	mov	r3, r9
 8003e20:	4621      	mov	r1, r4
 8003e22:	fb01 f303 	mul.w	r3, r1, r3
 8003e26:	4413      	add	r3, r2
 8003e28:	4622      	mov	r2, r4
 8003e2a:	4641      	mov	r1, r8
 8003e2c:	fba2 1201 	umull	r1, r2, r2, r1
 8003e30:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8003e34:	460a      	mov	r2, r1
 8003e36:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8003e3a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8003e3e:	4413      	add	r3, r2
 8003e40:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003e44:	f04f 0000 	mov.w	r0, #0
 8003e48:	f04f 0100 	mov.w	r1, #0
 8003e4c:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8003e50:	4623      	mov	r3, r4
 8003e52:	0a18      	lsrs	r0, r3, #8
 8003e54:	462b      	mov	r3, r5
 8003e56:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8003e5a:	462b      	mov	r3, r5
 8003e5c:	1219      	asrs	r1, r3, #8
 8003e5e:	4b41      	ldr	r3, [pc, #260]	@ (8003f64 <BMP280_measureP+0x2e0>)
 8003e60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e64:	b21b      	sxth	r3, r3
 8003e66:	17da      	asrs	r2, r3, #31
 8003e68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003e6c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003e70:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003e74:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8003e78:	464a      	mov	r2, r9
 8003e7a:	fb02 f203 	mul.w	r2, r2, r3
 8003e7e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003e82:	4644      	mov	r4, r8
 8003e84:	fb04 f303 	mul.w	r3, r4, r3
 8003e88:	441a      	add	r2, r3
 8003e8a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003e8e:	4644      	mov	r4, r8
 8003e90:	fba3 4304 	umull	r4, r3, r3, r4
 8003e94:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003e98:	4623      	mov	r3, r4
 8003e9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e9e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003ea2:	18d3      	adds	r3, r2, r3
 8003ea4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003ea8:	f04f 0200 	mov.w	r2, #0
 8003eac:	f04f 0300 	mov.w	r3, #0
 8003eb0:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8003eb4:	464c      	mov	r4, r9
 8003eb6:	0323      	lsls	r3, r4, #12
 8003eb8:	4644      	mov	r4, r8
 8003eba:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8003ebe:	4644      	mov	r4, r8
 8003ec0:	0322      	lsls	r2, r4, #12
 8003ec2:	1884      	adds	r4, r0, r2
 8003ec4:	633c      	str	r4, [r7, #48]	@ 0x30
 8003ec6:	eb41 0303 	adc.w	r3, r1, r3
 8003eca:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ecc:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8003ed0:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8003ed4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8003ed8:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8003edc:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8003ee0:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8003ee4:	4b20      	ldr	r3, [pc, #128]	@ (8003f68 <BMP280_measureP+0x2e4>)
 8003ee6:	881b      	ldrh	r3, [r3, #0]
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	2200      	movs	r2, #0
 8003eec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ef0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003ef4:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003ef8:	462b      	mov	r3, r5
 8003efa:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003efe:	4642      	mov	r2, r8
 8003f00:	fb02 f203 	mul.w	r2, r2, r3
 8003f04:	464b      	mov	r3, r9
 8003f06:	4621      	mov	r1, r4
 8003f08:	fb01 f303 	mul.w	r3, r1, r3
 8003f0c:	4413      	add	r3, r2
 8003f0e:	4622      	mov	r2, r4
 8003f10:	4641      	mov	r1, r8
 8003f12:	fba2 1201 	umull	r1, r2, r2, r1
 8003f16:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8003f1a:	460a      	mov	r2, r1
 8003f1c:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8003f20:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003f24:	4413      	add	r3, r2
 8003f26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003f2a:	f04f 0200 	mov.w	r2, #0
 8003f2e:	f04f 0300 	mov.w	r3, #0
 8003f32:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8003f36:	4629      	mov	r1, r5
 8003f38:	104a      	asrs	r2, r1, #1
 8003f3a:	4629      	mov	r1, r5
 8003f3c:	17cb      	asrs	r3, r1, #31
 8003f3e:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 8003f42:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8003f46:	4313      	orrs	r3, r2
 8003f48:	d110      	bne.n	8003f6c <BMP280_measureP+0x2e8>
	{
	return 0;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	e154      	b.n	80041f8 <BMP280_measureP+0x574>
 8003f4e:	bf00      	nop
 8003f50:	24001420 	.word	0x24001420
 8003f54:	24001410 	.word	0x24001410
 8003f58:	2400140e 	.word	0x2400140e
 8003f5c:	2400140c 	.word	0x2400140c
 8003f60:	2400140a 	.word	0x2400140a
 8003f64:	24001408 	.word	0x24001408
 8003f68:	24001402 	.word	0x24001402
	}
	p = 1048576-adc_P;
 8003f6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f70:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8003f74:	17da      	asrs	r2, r3, #31
 8003f76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f7a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8003f7e:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8003f82:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003f86:	105b      	asrs	r3, r3, #1
 8003f88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003f8c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003f90:	07db      	lsls	r3, r3, #31
 8003f92:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003f96:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8003f9a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8003f9e:	4621      	mov	r1, r4
 8003fa0:	1a89      	subs	r1, r1, r2
 8003fa2:	67b9      	str	r1, [r7, #120]	@ 0x78
 8003fa4:	4629      	mov	r1, r5
 8003fa6:	eb61 0303 	sbc.w	r3, r1, r3
 8003faa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003fac:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003fb0:	4622      	mov	r2, r4
 8003fb2:	462b      	mov	r3, r5
 8003fb4:	1891      	adds	r1, r2, r2
 8003fb6:	6239      	str	r1, [r7, #32]
 8003fb8:	415b      	adcs	r3, r3
 8003fba:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fbc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fc0:	4621      	mov	r1, r4
 8003fc2:	1851      	adds	r1, r2, r1
 8003fc4:	61b9      	str	r1, [r7, #24]
 8003fc6:	4629      	mov	r1, r5
 8003fc8:	414b      	adcs	r3, r1
 8003fca:	61fb      	str	r3, [r7, #28]
 8003fcc:	f04f 0200 	mov.w	r2, #0
 8003fd0:	f04f 0300 	mov.w	r3, #0
 8003fd4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8003fd8:	4649      	mov	r1, r9
 8003fda:	018b      	lsls	r3, r1, #6
 8003fdc:	4641      	mov	r1, r8
 8003fde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fe2:	4641      	mov	r1, r8
 8003fe4:	018a      	lsls	r2, r1, #6
 8003fe6:	4641      	mov	r1, r8
 8003fe8:	1889      	adds	r1, r1, r2
 8003fea:	6139      	str	r1, [r7, #16]
 8003fec:	4649      	mov	r1, r9
 8003fee:	eb43 0101 	adc.w	r1, r3, r1
 8003ff2:	6179      	str	r1, [r7, #20]
 8003ff4:	f04f 0200 	mov.w	r2, #0
 8003ff8:	f04f 0300 	mov.w	r3, #0
 8003ffc:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8004000:	4649      	mov	r1, r9
 8004002:	008b      	lsls	r3, r1, #2
 8004004:	4641      	mov	r1, r8
 8004006:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800400a:	4641      	mov	r1, r8
 800400c:	008a      	lsls	r2, r1, #2
 800400e:	4610      	mov	r0, r2
 8004010:	4619      	mov	r1, r3
 8004012:	4603      	mov	r3, r0
 8004014:	4622      	mov	r2, r4
 8004016:	189b      	adds	r3, r3, r2
 8004018:	60bb      	str	r3, [r7, #8]
 800401a:	460b      	mov	r3, r1
 800401c:	462a      	mov	r2, r5
 800401e:	eb42 0303 	adc.w	r3, r2, r3
 8004022:	60fb      	str	r3, [r7, #12]
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	f04f 0300 	mov.w	r3, #0
 800402c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8004030:	4649      	mov	r1, r9
 8004032:	008b      	lsls	r3, r1, #2
 8004034:	4641      	mov	r1, r8
 8004036:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800403a:	4641      	mov	r1, r8
 800403c:	008a      	lsls	r2, r1, #2
 800403e:	4610      	mov	r0, r2
 8004040:	4619      	mov	r1, r3
 8004042:	4603      	mov	r3, r0
 8004044:	4622      	mov	r2, r4
 8004046:	189b      	adds	r3, r3, r2
 8004048:	673b      	str	r3, [r7, #112]	@ 0x70
 800404a:	462b      	mov	r3, r5
 800404c:	460a      	mov	r2, r1
 800404e:	eb42 0303 	adc.w	r3, r2, r3
 8004052:	677b      	str	r3, [r7, #116]	@ 0x74
 8004054:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8004058:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800405c:	f7fc f948 	bl	80002f0 <__aeabi_ldivmod>
 8004060:	4602      	mov	r2, r0
 8004062:	460b      	mov	r3, r1
 8004064:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8004068:	4b66      	ldr	r3, [pc, #408]	@ (8004204 <BMP280_measureP+0x580>)
 800406a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800406e:	b21b      	sxth	r3, r3
 8004070:	17da      	asrs	r2, r3, #31
 8004072:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004074:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004076:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800407a:	f04f 0000 	mov.w	r0, #0
 800407e:	f04f 0100 	mov.w	r1, #0
 8004082:	0b50      	lsrs	r0, r2, #13
 8004084:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8004088:	1359      	asrs	r1, r3, #13
 800408a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800408e:	462b      	mov	r3, r5
 8004090:	fb00 f203 	mul.w	r2, r0, r3
 8004094:	4623      	mov	r3, r4
 8004096:	fb03 f301 	mul.w	r3, r3, r1
 800409a:	4413      	add	r3, r2
 800409c:	4622      	mov	r2, r4
 800409e:	fba2 1200 	umull	r1, r2, r2, r0
 80040a2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80040a6:	460a      	mov	r2, r1
 80040a8:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 80040ac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80040b0:	4413      	add	r3, r2
 80040b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80040b6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80040ba:	f04f 0000 	mov.w	r0, #0
 80040be:	f04f 0100 	mov.w	r1, #0
 80040c2:	0b50      	lsrs	r0, r2, #13
 80040c4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80040c8:	1359      	asrs	r1, r3, #13
 80040ca:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80040ce:	462b      	mov	r3, r5
 80040d0:	fb00 f203 	mul.w	r2, r0, r3
 80040d4:	4623      	mov	r3, r4
 80040d6:	fb03 f301 	mul.w	r3, r3, r1
 80040da:	4413      	add	r3, r2
 80040dc:	4622      	mov	r2, r4
 80040de:	fba2 1200 	umull	r1, r2, r2, r0
 80040e2:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80040e6:	460a      	mov	r2, r1
 80040e8:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80040ec:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80040f0:	4413      	add	r3, r2
 80040f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80040f6:	f04f 0200 	mov.w	r2, #0
 80040fa:	f04f 0300 	mov.w	r3, #0
 80040fe:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8004102:	4621      	mov	r1, r4
 8004104:	0e4a      	lsrs	r2, r1, #25
 8004106:	4629      	mov	r1, r5
 8004108:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800410c:	4629      	mov	r1, r5
 800410e:	164b      	asrs	r3, r1, #25
 8004110:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8004114:	4b3c      	ldr	r3, [pc, #240]	@ (8004208 <BMP280_measureP+0x584>)
 8004116:	f9b3 3000 	ldrsh.w	r3, [r3]
 800411a:	b21b      	sxth	r3, r3
 800411c:	17da      	asrs	r2, r3, #31
 800411e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004120:	667a      	str	r2, [r7, #100]	@ 0x64
 8004122:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004126:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800412a:	462a      	mov	r2, r5
 800412c:	fb02 f203 	mul.w	r2, r2, r3
 8004130:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004134:	4621      	mov	r1, r4
 8004136:	fb01 f303 	mul.w	r3, r1, r3
 800413a:	4413      	add	r3, r2
 800413c:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8004140:	4621      	mov	r1, r4
 8004142:	fba2 1201 	umull	r1, r2, r2, r1
 8004146:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800414a:	460a      	mov	r2, r1
 800414c:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8004150:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8004154:	4413      	add	r3, r2
 8004156:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800415a:	f04f 0200 	mov.w	r2, #0
 800415e:	f04f 0300 	mov.w	r3, #0
 8004162:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8004166:	4621      	mov	r1, r4
 8004168:	0cca      	lsrs	r2, r1, #19
 800416a:	4629      	mov	r1, r5
 800416c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8004170:	4629      	mov	r1, r5
 8004172:	14cb      	asrs	r3, r1, #19
 8004174:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8004178:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800417c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8004180:	1884      	adds	r4, r0, r2
 8004182:	65bc      	str	r4, [r7, #88]	@ 0x58
 8004184:	eb41 0303 	adc.w	r3, r1, r3
 8004188:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800418a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800418e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8004192:	4621      	mov	r1, r4
 8004194:	1889      	adds	r1, r1, r2
 8004196:	6539      	str	r1, [r7, #80]	@ 0x50
 8004198:	4629      	mov	r1, r5
 800419a:	eb43 0101 	adc.w	r1, r3, r1
 800419e:	6579      	str	r1, [r7, #84]	@ 0x54
 80041a0:	f04f 0000 	mov.w	r0, #0
 80041a4:	f04f 0100 	mov.w	r1, #0
 80041a8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80041ac:	4623      	mov	r3, r4
 80041ae:	0a18      	lsrs	r0, r3, #8
 80041b0:	462b      	mov	r3, r5
 80041b2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80041b6:	462b      	mov	r3, r5
 80041b8:	1219      	asrs	r1, r3, #8
 80041ba:	4b14      	ldr	r3, [pc, #80]	@ (800420c <BMP280_measureP+0x588>)
 80041bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041c0:	b21b      	sxth	r3, r3
 80041c2:	17da      	asrs	r2, r3, #31
 80041c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041c6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80041c8:	f04f 0200 	mov.w	r2, #0
 80041cc:	f04f 0300 	mov.w	r3, #0
 80041d0:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 80041d4:	464c      	mov	r4, r9
 80041d6:	0123      	lsls	r3, r4, #4
 80041d8:	4644      	mov	r4, r8
 80041da:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80041de:	4644      	mov	r4, r8
 80041e0:	0122      	lsls	r2, r4, #4
 80041e2:	1884      	adds	r4, r0, r2
 80041e4:	603c      	str	r4, [r7, #0]
 80041e6:	eb41 0303 	adc.w	r3, r1, r3
 80041ea:	607b      	str	r3, [r7, #4]
 80041ec:	e9d7 3400 	ldrd	r3, r4, [r7]
 80041f0:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 80041f4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80041fe:	46bd      	mov	sp, r7
 8004200:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004204:	24001416 	.word	0x24001416
 8004208:	24001414 	.word	0x24001414
 800420c:	24001412 	.word	0x24001412

08004210 <BMP280_measureH>:

uint16_t BMP280_measureH(uint32_t Pres, int32_t Temp){
 8004210:	b580      	push	{r7, lr}
 8004212:	b088      	sub	sp, #32
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
	double var1, var2, h;

	if(Pres == 0) return 0;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <BMP280_measureH+0x14>
 8004220:	2300      	movs	r3, #0
 8004222:	e03d      	b.n	80042a0 <BMP280_measureH+0x90>
	var1 = -log(((double)Pres)/101325);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	ee07 3a90 	vmov	s15, r3
 800422a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800422e:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 80042a8 <BMP280_measureH+0x98>
 8004232:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004236:	eeb0 0b46 	vmov.f64	d0, d6
 800423a:	f015 fa9d 	bl	8019778 <log>
 800423e:	eeb0 7b40 	vmov.f64	d7, d0
 8004242:	eeb1 7b47 	vneg.f64	d7, d7
 8004246:	ed87 7b06 	vstr	d7, [r7, #24]

	if(var1 == 0) return 0;
 800424a:	ed97 7b06 	vldr	d7, [r7, #24]
 800424e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004256:	d101      	bne.n	800425c <BMP280_measureH+0x4c>
 8004258:	2300      	movs	r3, #0
 800425a:	e021      	b.n	80042a0 <BMP280_measureH+0x90>
	var2 = 0.0341663/((((double)Temp)/100)+273.15);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	ee07 3a90 	vmov	s15, r3
 8004262:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004266:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 80042b0 <BMP280_measureH+0xa0>
 800426a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800426e:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 80042b8 <BMP280_measureH+0xa8>
 8004272:	ee37 6b06 	vadd.f64	d6, d7, d6
 8004276:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 80042c0 <BMP280_measureH+0xb0>
 800427a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800427e:	ed87 7b04 	vstr	d7, [r7, #16]
	h = var1/var2;
 8004282:	ed97 5b06 	vldr	d5, [r7, #24]
 8004286:	ed97 6b04 	vldr	d6, [r7, #16]
 800428a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800428e:	ed87 7b02 	vstr	d7, [r7, #8]
	return (uint16_t)h;
 8004292:	ed97 7b02 	vldr	d7, [r7, #8]
 8004296:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800429a:	ee17 3a90 	vmov	r3, s15
 800429e:	b29b      	uxth	r3, r3
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3720      	adds	r7, #32
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	00000000 	.word	0x00000000
 80042ac:	40f8bcd0 	.word	0x40f8bcd0
 80042b0:	00000000 	.word	0x00000000
 80042b4:	40590000 	.word	0x40590000
 80042b8:	66666666 	.word	0x66666666
 80042bc:	40711266 	.word	0x40711266
 80042c0:	ca402a92 	.word	0xca402a92
 80042c4:	3fa17e3e 	.word	0x3fa17e3e

080042c8 <BMP280_init>:

void BMP280_init(void){
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0
	BMP280_unselect();
 80042cc:	2201      	movs	r2, #1
 80042ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80042d2:	480d      	ldr	r0, [pc, #52]	@ (8004308 <BMP280_init+0x40>)
 80042d4:	f005 fb32 	bl	800993c <HAL_GPIO_WritePin>
	BMP280_config();
 80042d8:	f7ff fb80 	bl	80039dc <BMP280_config>
	BMP280.ID = BMP280_read(0x89);
 80042dc:	2089      	movs	r0, #137	@ 0x89
 80042de:	f7ff fb4f 	bl	8003980 <BMP280_read>
 80042e2:	4603      	mov	r3, r0
 80042e4:	461a      	mov	r2, r3
 80042e6:	4b09      	ldr	r3, [pc, #36]	@ (800430c <BMP280_init+0x44>)
 80042e8:	701a      	strb	r2, [r3, #0]
	BMP280_calibrationData();
 80042ea:	f7ff fb83 	bl	80039f4 <BMP280_calibrationData>
	BMP280_readRawValues();
 80042ee:	f7ff fc41 	bl	8003b74 <BMP280_readRawValues>
	BMP280.Temp_inicial = BMP280_measureT(T_raw);
 80042f2:	4b07      	ldr	r3, [pc, #28]	@ (8004310 <BMP280_init+0x48>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7ff fc80 	bl	8003bfc <BMP280_measureT>
 80042fc:	4603      	mov	r3, r0
 80042fe:	4a03      	ldr	r2, [pc, #12]	@ (800430c <BMP280_init+0x44>)
 8004300:	6093      	str	r3, [r2, #8]
}
 8004302:	bf00      	nop
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	58020400 	.word	0x58020400
 800430c:	240013ec 	.word	0x240013ec
 8004310:	24001418 	.word	0x24001418

08004314 <BMP280_calculate>:

void BMP280_calculate(void){
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
	//BMP280.ID = 0;
	BMP280.ID = BMP280_read(0x89);
 8004318:	2089      	movs	r0, #137	@ 0x89
 800431a:	f7ff fb31 	bl	8003980 <BMP280_read>
 800431e:	4603      	mov	r3, r0
 8004320:	461a      	mov	r2, r3
 8004322:	4b16      	ldr	r3, [pc, #88]	@ (800437c <BMP280_calculate+0x68>)
 8004324:	701a      	strb	r2, [r3, #0]
	BMP280_readRawValues();
 8004326:	f7ff fc25 	bl	8003b74 <BMP280_readRawValues>
	BMP280.Temp = BMP280_measureT(T_raw);
 800432a:	4b15      	ldr	r3, [pc, #84]	@ (8004380 <BMP280_calculate+0x6c>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4618      	mov	r0, r3
 8004330:	f7ff fc64 	bl	8003bfc <BMP280_measureT>
 8004334:	4603      	mov	r3, r0
 8004336:	4a11      	ldr	r2, [pc, #68]	@ (800437c <BMP280_calculate+0x68>)
 8004338:	6053      	str	r3, [r2, #4]
	BMP280.Pressure    		= BMP280_measureP(P_raw)/256;
 800433a:	4b12      	ldr	r3, [pc, #72]	@ (8004384 <BMP280_calculate+0x70>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4618      	mov	r0, r3
 8004340:	f7ff fca0 	bl	8003c84 <BMP280_measureP>
 8004344:	4603      	mov	r3, r0
 8004346:	0a1b      	lsrs	r3, r3, #8
 8004348:	4a0c      	ldr	r2, [pc, #48]	@ (800437c <BMP280_calculate+0x68>)
 800434a:	60d3      	str	r3, [r2, #12]
	BMP280.Barometric_Altitude = BMP280_measureH(BMP280.Pressure, BMP280.Temp_inicial);
 800434c:	4b0b      	ldr	r3, [pc, #44]	@ (800437c <BMP280_calculate+0x68>)
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	4a0a      	ldr	r2, [pc, #40]	@ (800437c <BMP280_calculate+0x68>)
 8004352:	6892      	ldr	r2, [r2, #8]
 8004354:	4611      	mov	r1, r2
 8004356:	4618      	mov	r0, r3
 8004358:	f7ff ff5a 	bl	8004210 <BMP280_measureH>
 800435c:	4603      	mov	r3, r0
 800435e:	461a      	mov	r2, r3
 8004360:	4b06      	ldr	r3, [pc, #24]	@ (800437c <BMP280_calculate+0x68>)
 8004362:	821a      	strh	r2, [r3, #16]

	if(BMP280.Barometric_Altitude > BMP280.Max_Altitude) BMP280.Max_Altitude = BMP280.Barometric_Altitude;
 8004364:	4b05      	ldr	r3, [pc, #20]	@ (800437c <BMP280_calculate+0x68>)
 8004366:	8a1a      	ldrh	r2, [r3, #16]
 8004368:	4b04      	ldr	r3, [pc, #16]	@ (800437c <BMP280_calculate+0x68>)
 800436a:	8a5b      	ldrh	r3, [r3, #18]
 800436c:	429a      	cmp	r2, r3
 800436e:	d903      	bls.n	8004378 <BMP280_calculate+0x64>
 8004370:	4b02      	ldr	r3, [pc, #8]	@ (800437c <BMP280_calculate+0x68>)
 8004372:	8a1a      	ldrh	r2, [r3, #16]
 8004374:	4b01      	ldr	r3, [pc, #4]	@ (800437c <BMP280_calculate+0x68>)
 8004376:	825a      	strh	r2, [r3, #18]
}
 8004378:	bf00      	nop
 800437a:	bd80      	pop	{r7, pc}
 800437c:	240013ec 	.word	0x240013ec
 8004380:	24001418 	.word	0x24001418
 8004384:	2400141c 	.word	0x2400141c

08004388 <bno055_delay>:

BNO_CurrentState_e BNO_CurrentState = Init;

IMU_t IMU;

void bno055_delay(uint8_t time) {
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	4603      	mov	r3, r0
 8004390:	71fb      	strb	r3, [r7, #7]
	BNO_DelayCounter += time;
 8004392:	4b06      	ldr	r3, [pc, #24]	@ (80043ac <bno055_delay+0x24>)
 8004394:	781a      	ldrb	r2, [r3, #0]
 8004396:	79fb      	ldrb	r3, [r7, #7]
 8004398:	4413      	add	r3, r2
 800439a:	b2da      	uxtb	r2, r3
 800439c:	4b03      	ldr	r3, [pc, #12]	@ (80043ac <bno055_delay+0x24>)
 800439e:	701a      	strb	r2, [r3, #0]
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr
 80043ac:	24001527 	.word	0x24001527

080043b0 <BNO_Read>:

HAL_StatusTypeDef BNO_Read(uint8_t Address,uint8_t Size){
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	4603      	mov	r3, r0
 80043b8:	460a      	mov	r2, r1
 80043ba:	71fb      	strb	r3, [r7, #7]
 80043bc:	4613      	mov	r3, r2
 80043be:	71bb      	strb	r3, [r7, #6]
	uint8_t ReadCommand[4] = {0xAA, 0x01, Address, Size};
 80043c0:	23aa      	movs	r3, #170	@ 0xaa
 80043c2:	723b      	strb	r3, [r7, #8]
 80043c4:	2301      	movs	r3, #1
 80043c6:	727b      	strb	r3, [r7, #9]
 80043c8:	79fb      	ldrb	r3, [r7, #7]
 80043ca:	72bb      	strb	r3, [r7, #10]
 80043cc:	79bb      	ldrb	r3, [r7, #6]
 80043ce:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef uartError;

	BNO_RxBuffer[0] = Address;
 80043d0:	4a08      	ldr	r2, [pc, #32]	@ (80043f4 <BNO_Read+0x44>)
 80043d2:	79fb      	ldrb	r3, [r7, #7]
 80043d4:	7013      	strb	r3, [r2, #0]

	uartError = HAL_UART_Transmit(&huart3, ReadCommand, 4,100);
 80043d6:	f107 0108 	add.w	r1, r7, #8
 80043da:	2364      	movs	r3, #100	@ 0x64
 80043dc:	2204      	movs	r2, #4
 80043de:	4806      	ldr	r0, [pc, #24]	@ (80043f8 <BNO_Read+0x48>)
 80043e0:	f00a fce0 	bl	800eda4 <HAL_UART_Transmit>
 80043e4:	4603      	mov	r3, r0
 80043e6:	73fb      	strb	r3, [r7, #15]
	return uartError;
 80043e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3710      	adds	r7, #16
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	24001424 	.word	0x24001424
 80043f8:	2400115c 	.word	0x2400115c

080043fc <BNO_Write>:

HAL_StatusTypeDef BNO_Write(uint8_t Address,uint8_t Data){
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	4603      	mov	r3, r0
 8004404:	460a      	mov	r2, r1
 8004406:	71fb      	strb	r3, [r7, #7]
 8004408:	4613      	mov	r3, r2
 800440a:	71bb      	strb	r3, [r7, #6]
	uint8_t WriteCommand[5];
	HAL_StatusTypeDef uartError;

	WriteCommand[0] = 0xAA;
 800440c:	23aa      	movs	r3, #170	@ 0xaa
 800440e:	723b      	strb	r3, [r7, #8]
	WriteCommand[1] = 0x00;
 8004410:	2300      	movs	r3, #0
 8004412:	727b      	strb	r3, [r7, #9]
	WriteCommand[2] = Address;
 8004414:	79fb      	ldrb	r3, [r7, #7]
 8004416:	72bb      	strb	r3, [r7, #10]
	WriteCommand[3] = 1;
 8004418:	2301      	movs	r3, #1
 800441a:	72fb      	strb	r3, [r7, #11]
	WriteCommand[4] = Data;
 800441c:	79bb      	ldrb	r3, [r7, #6]
 800441e:	733b      	strb	r3, [r7, #12]

	uartError = HAL_UART_Transmit(&huart3, WriteCommand,5,100);
 8004420:	f107 0108 	add.w	r1, r7, #8
 8004424:	2364      	movs	r3, #100	@ 0x64
 8004426:	2205      	movs	r2, #5
 8004428:	4804      	ldr	r0, [pc, #16]	@ (800443c <BNO_Write+0x40>)
 800442a:	f00a fcbb 	bl	800eda4 <HAL_UART_Transmit>
 800442e:	4603      	mov	r3, r0
 8004430:	73fb      	strb	r3, [r7, #15]
	return uartError;
 8004432:	7bfb      	ldrb	r3, [r7, #15]
}
 8004434:	4618      	mov	r0, r3
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	2400115c 	.word	0x2400115c

08004440 <BNO_Write_MB>:

HAL_StatusTypeDef BNO_Write_MB(uint8_t Address,uint8_t Size, uint8_t *pData){
 8004440:	b580      	push	{r7, lr}
 8004442:	b0c4      	sub	sp, #272	@ 0x110
 8004444:	af00      	add	r7, sp, #0
 8004446:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800444a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800444e:	601a      	str	r2, [r3, #0]
 8004450:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004454:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8004458:	4602      	mov	r2, r0
 800445a:	701a      	strb	r2, [r3, #0]
 800445c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004460:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8004464:	460a      	mov	r2, r1
 8004466:	701a      	strb	r2, [r3, #0]
    uint8_t WriteCommand[255];
    HAL_StatusTypeDef uartError;

    WriteCommand[0] = 0xAA;
 8004468:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800446c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004470:	22aa      	movs	r2, #170	@ 0xaa
 8004472:	701a      	strb	r2, [r3, #0]
    WriteCommand[1] = 0x00;
 8004474:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004478:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800447c:	2200      	movs	r2, #0
 800447e:	705a      	strb	r2, [r3, #1]
    WriteCommand[2] = Address;
 8004480:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004484:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004488:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800448c:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 8004490:	7812      	ldrb	r2, [r2, #0]
 8004492:	709a      	strb	r2, [r3, #2]
    WriteCommand[3] = Size;
 8004494:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004498:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800449c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80044a0:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80044a4:	7812      	ldrb	r2, [r2, #0]
 80044a6:	70da      	strb	r2, [r3, #3]

    for (uint8_t n = 0; n < Size; ++n) {
 80044a8:	2300      	movs	r3, #0
 80044aa:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80044ae:	e015      	b.n	80044dc <BNO_Write_MB+0x9c>
        WriteCommand[n + 4] = pData[n];
 80044b0:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80044b4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80044b8:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80044bc:	6812      	ldr	r2, [r2, #0]
 80044be:	441a      	add	r2, r3
 80044c0:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80044c4:	3304      	adds	r3, #4
 80044c6:	7811      	ldrb	r1, [r2, #0]
 80044c8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80044cc:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80044d0:	54d1      	strb	r1, [r2, r3]
    for (uint8_t n = 0; n < Size; ++n) {
 80044d2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80044d6:	3301      	adds	r3, #1
 80044d8:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80044dc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80044e0:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80044e4:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d3e0      	bcc.n	80044b0 <BNO_Write_MB+0x70>
    }

    uartError = HAL_UART_Transmit(&huart3, WriteCommand, (Size + 4),100);
 80044ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80044f2:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	3304      	adds	r3, #4
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	f107 010c 	add.w	r1, r7, #12
 8004502:	2364      	movs	r3, #100	@ 0x64
 8004504:	4806      	ldr	r0, [pc, #24]	@ (8004520 <BNO_Write_MB+0xe0>)
 8004506:	f00a fc4d 	bl	800eda4 <HAL_UART_Transmit>
 800450a:	4603      	mov	r3, r0
 800450c:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
    return uartError;
 8004510:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
}
 8004514:	4618      	mov	r0, r3
 8004516:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	2400115c 	.word	0x2400115c

08004524 <BNO_Page0Adress>:

void BNO_Page0Adress(void){
 8004524:	b480      	push	{r7}
 8004526:	af00      	add	r7, sp, #0
	switch (BNO_RxBuffer[0]) {
 8004528:	4b62      	ldr	r3, [pc, #392]	@ (80046b4 <BNO_Page0Adress+0x190>)
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	2b55      	cmp	r3, #85	@ 0x55
 800452e:	f300 8261 	bgt.w	80049f4 <BNO_Page0Adress+0x4d0>
 8004532:	2b35      	cmp	r3, #53	@ 0x35
 8004534:	da0a      	bge.n	800454c <BNO_Page0Adress+0x28>
 8004536:	2b08      	cmp	r3, #8
 8004538:	f000 8158 	beq.w	80047ec <BNO_Page0Adress+0x2c8>
 800453c:	2b08      	cmp	r3, #8
 800453e:	f300 8259 	bgt.w	80049f4 <BNO_Page0Adress+0x4d0>
 8004542:	2b00      	cmp	r3, #0
 8004544:	d04c      	beq.n	80045e0 <BNO_Page0Adress+0xbc>
 8004546:	2b07      	cmp	r3, #7
 8004548:	d064      	beq.n	8004614 <BNO_Page0Adress+0xf0>
			IMU.Roll = ((float)((int16_t)((BNO_RxBuffer[24] << 8) | BNO_RxBuffer[23])))/16;

			BNO_ErrorHandler = ReadSucces;
			break;
		default:
			break;
 800454a:	e253      	b.n	80049f4 <BNO_Page0Adress+0x4d0>
	switch (BNO_RxBuffer[0]) {
 800454c:	3b35      	subs	r3, #53	@ 0x35
 800454e:	2b20      	cmp	r3, #32
 8004550:	f200 8250 	bhi.w	80049f4 <BNO_Page0Adress+0x4d0>
 8004554:	a201      	add	r2, pc, #4	@ (adr r2, 800455c <BNO_Page0Adress+0x38>)
 8004556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455a:	bf00      	nop
 800455c:	0800465d 	.word	0x0800465d
 8004560:	080049f5 	.word	0x080049f5
 8004564:	080049f5 	.word	0x080049f5
 8004568:	080049f5 	.word	0x080049f5
 800456c:	08004639 	.word	0x08004639
 8004570:	080049f5 	.word	0x080049f5
 8004574:	08004627 	.word	0x08004627
 8004578:	080049f5 	.word	0x080049f5
 800457c:	0800464b 	.word	0x0800464b
 8004580:	080049f5 	.word	0x080049f5
 8004584:	080049f5 	.word	0x080049f5
 8004588:	080049f5 	.word	0x080049f5
 800458c:	080049f5 	.word	0x080049f5
 8004590:	080049f5 	.word	0x080049f5
 8004594:	080049f5 	.word	0x080049f5
 8004598:	080049f5 	.word	0x080049f5
 800459c:	080049f5 	.word	0x080049f5
 80045a0:	080049f5 	.word	0x080049f5
 80045a4:	080049f5 	.word	0x080049f5
 80045a8:	080049f5 	.word	0x080049f5
 80045ac:	080049f5 	.word	0x080049f5
 80045b0:	080049f5 	.word	0x080049f5
 80045b4:	080049f5 	.word	0x080049f5
 80045b8:	080049f5 	.word	0x080049f5
 80045bc:	080049f5 	.word	0x080049f5
 80045c0:	080049f5 	.word	0x080049f5
 80045c4:	080049f5 	.word	0x080049f5
 80045c8:	080049f5 	.word	0x080049f5
 80045cc:	080049f5 	.word	0x080049f5
 80045d0:	080049f5 	.word	0x080049f5
 80045d4:	080049f5 	.word	0x080049f5
 80045d8:	080049f5 	.word	0x080049f5
 80045dc:	080046c1 	.word	0x080046c1
			if(BNO_RxBuffer[1] != 160) return;
 80045e0:	4b34      	ldr	r3, [pc, #208]	@ (80046b4 <BNO_Page0Adress+0x190>)
 80045e2:	785b      	ldrb	r3, [r3, #1]
 80045e4:	2ba0      	cmp	r3, #160	@ 0xa0
 80045e6:	f040 8207 	bne.w	80049f8 <BNO_Page0Adress+0x4d4>
			IMU.ID = BNO_RxBuffer[1];
 80045ea:	4b32      	ldr	r3, [pc, #200]	@ (80046b4 <BNO_Page0Adress+0x190>)
 80045ec:	785a      	ldrb	r2, [r3, #1]
 80045ee:	4b32      	ldr	r3, [pc, #200]	@ (80046b8 <BNO_Page0Adress+0x194>)
 80045f0:	701a      	strb	r2, [r3, #0]
			IMU.ACC.ID = BNO_RxBuffer[2];
 80045f2:	4b30      	ldr	r3, [pc, #192]	@ (80046b4 <BNO_Page0Adress+0x190>)
 80045f4:	789a      	ldrb	r2, [r3, #2]
 80045f6:	4b30      	ldr	r3, [pc, #192]	@ (80046b8 <BNO_Page0Adress+0x194>)
 80045f8:	711a      	strb	r2, [r3, #4]
			IMU.MAG.ID = BNO_RxBuffer[3];
 80045fa:	4b2e      	ldr	r3, [pc, #184]	@ (80046b4 <BNO_Page0Adress+0x190>)
 80045fc:	78da      	ldrb	r2, [r3, #3]
 80045fe:	4b2e      	ldr	r3, [pc, #184]	@ (80046b8 <BNO_Page0Adress+0x194>)
 8004600:	751a      	strb	r2, [r3, #20]
			IMU.GYR.ID = BNO_RxBuffer[4];
 8004602:	4b2c      	ldr	r3, [pc, #176]	@ (80046b4 <BNO_Page0Adress+0x190>)
 8004604:	791a      	ldrb	r2, [r3, #4]
 8004606:	4b2c      	ldr	r3, [pc, #176]	@ (80046b8 <BNO_Page0Adress+0x194>)
 8004608:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			BNO_ErrorHandler = ReadSucces;
 800460c:	4b2b      	ldr	r3, [pc, #172]	@ (80046bc <BNO_Page0Adress+0x198>)
 800460e:	220b      	movs	r2, #11
 8004610:	701a      	strb	r2, [r3, #0]
			break;
 8004612:	e1f2      	b.n	80049fa <BNO_Page0Adress+0x4d6>
			IMU.Page = BNO_RxBuffer[1];
 8004614:	4b27      	ldr	r3, [pc, #156]	@ (80046b4 <BNO_Page0Adress+0x190>)
 8004616:	785a      	ldrb	r2, [r3, #1]
 8004618:	4b27      	ldr	r3, [pc, #156]	@ (80046b8 <BNO_Page0Adress+0x194>)
 800461a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			BNO_ErrorHandler = ReadSucces;
 800461e:	4b27      	ldr	r3, [pc, #156]	@ (80046bc <BNO_Page0Adress+0x198>)
 8004620:	220b      	movs	r2, #11
 8004622:	701a      	strb	r2, [r3, #0]
			break;
 8004624:	e1e9      	b.n	80049fa <BNO_Page0Adress+0x4d6>
			IMU.Unit_Select = BNO_RxBuffer[1];
 8004626:	4b23      	ldr	r3, [pc, #140]	@ (80046b4 <BNO_Page0Adress+0x190>)
 8004628:	785a      	ldrb	r2, [r3, #1]
 800462a:	4b23      	ldr	r3, [pc, #140]	@ (80046b8 <BNO_Page0Adress+0x194>)
 800462c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			BNO_ErrorHandler = ReadSucces;
 8004630:	4b22      	ldr	r3, [pc, #136]	@ (80046bc <BNO_Page0Adress+0x198>)
 8004632:	220b      	movs	r2, #11
 8004634:	701a      	strb	r2, [r3, #0]
			break;
 8004636:	e1e0      	b.n	80049fa <BNO_Page0Adress+0x4d6>
			IMU.System_Status = BNO_RxBuffer[1];
 8004638:	4b1e      	ldr	r3, [pc, #120]	@ (80046b4 <BNO_Page0Adress+0x190>)
 800463a:	785a      	ldrb	r2, [r3, #1]
 800463c:	4b1e      	ldr	r3, [pc, #120]	@ (80046b8 <BNO_Page0Adress+0x194>)
 800463e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
			BNO_ErrorHandler = ReadSucces;
 8004642:	4b1e      	ldr	r3, [pc, #120]	@ (80046bc <BNO_Page0Adress+0x198>)
 8004644:	220b      	movs	r2, #11
 8004646:	701a      	strb	r2, [r3, #0]
			break;
 8004648:	e1d7      	b.n	80049fa <BNO_Page0Adress+0x4d6>
			IMU.Op_Mode = BNO_RxBuffer[1];
 800464a:	4b1a      	ldr	r3, [pc, #104]	@ (80046b4 <BNO_Page0Adress+0x190>)
 800464c:	785a      	ldrb	r2, [r3, #1]
 800464e:	4b1a      	ldr	r3, [pc, #104]	@ (80046b8 <BNO_Page0Adress+0x194>)
 8004650:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
			BNO_ErrorHandler = ReadSucces;
 8004654:	4b19      	ldr	r3, [pc, #100]	@ (80046bc <BNO_Page0Adress+0x198>)
 8004656:	220b      	movs	r2, #11
 8004658:	701a      	strb	r2, [r3, #0]
			break;
 800465a:	e1ce      	b.n	80049fa <BNO_Page0Adress+0x4d6>
			IMU.CalSatus.Full = BNO_RxBuffer[1];
 800465c:	4b15      	ldr	r3, [pc, #84]	@ (80046b4 <BNO_Page0Adress+0x190>)
 800465e:	785a      	ldrb	r2, [r3, #1]
 8004660:	4b15      	ldr	r3, [pc, #84]	@ (80046b8 <BNO_Page0Adress+0x194>)
 8004662:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			IMU.CalSatus.Sys = (BNO_RxBuffer[1] >> 6) & 0x03;
 8004666:	4b13      	ldr	r3, [pc, #76]	@ (80046b4 <BNO_Page0Adress+0x190>)
 8004668:	785b      	ldrb	r3, [r3, #1]
 800466a:	099b      	lsrs	r3, r3, #6
 800466c:	b2da      	uxtb	r2, r3
 800466e:	4b12      	ldr	r3, [pc, #72]	@ (80046b8 <BNO_Page0Adress+0x194>)
 8004670:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			IMU.CalSatus.Gyr = (BNO_RxBuffer[1] >> 4) & 0x03;
 8004674:	4b0f      	ldr	r3, [pc, #60]	@ (80046b4 <BNO_Page0Adress+0x190>)
 8004676:	785b      	ldrb	r3, [r3, #1]
 8004678:	091b      	lsrs	r3, r3, #4
 800467a:	b2db      	uxtb	r3, r3
 800467c:	f003 0303 	and.w	r3, r3, #3
 8004680:	b2da      	uxtb	r2, r3
 8004682:	4b0d      	ldr	r3, [pc, #52]	@ (80046b8 <BNO_Page0Adress+0x194>)
 8004684:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
			IMU.CalSatus.Acc = (BNO_RxBuffer[1] >> 2) & 0x03;
 8004688:	4b0a      	ldr	r3, [pc, #40]	@ (80046b4 <BNO_Page0Adress+0x190>)
 800468a:	785b      	ldrb	r3, [r3, #1]
 800468c:	089b      	lsrs	r3, r3, #2
 800468e:	b2db      	uxtb	r3, r3
 8004690:	f003 0303 	and.w	r3, r3, #3
 8004694:	b2da      	uxtb	r2, r3
 8004696:	4b08      	ldr	r3, [pc, #32]	@ (80046b8 <BNO_Page0Adress+0x194>)
 8004698:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
			IMU.CalSatus.Mag = BNO_RxBuffer[1] & 0x03;
 800469c:	4b05      	ldr	r3, [pc, #20]	@ (80046b4 <BNO_Page0Adress+0x190>)
 800469e:	785b      	ldrb	r3, [r3, #1]
 80046a0:	f003 0303 	and.w	r3, r3, #3
 80046a4:	b2da      	uxtb	r2, r3
 80046a6:	4b04      	ldr	r3, [pc, #16]	@ (80046b8 <BNO_Page0Adress+0x194>)
 80046a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			BNO_ErrorHandler = ReadSucces;
 80046ac:	4b03      	ldr	r3, [pc, #12]	@ (80046bc <BNO_Page0Adress+0x198>)
 80046ae:	220b      	movs	r2, #11
 80046b0:	701a      	strb	r2, [r3, #0]
			break;
 80046b2:	e1a2      	b.n	80049fa <BNO_Page0Adress+0x4d6>
 80046b4:	24001424 	.word	0x24001424
 80046b8:	2400152c 	.word	0x2400152c
 80046bc:	24001525 	.word	0x24001525
			IMU.Calibration_Data.offset.accel.x = (int16_t)((BNO_RxBuffer[2] << 8) | BNO_RxBuffer[1]);
 80046c0:	4b48      	ldr	r3, [pc, #288]	@ (80047e4 <BNO_Page0Adress+0x2c0>)
 80046c2:	789b      	ldrb	r3, [r3, #2]
 80046c4:	b21b      	sxth	r3, r3
 80046c6:	021b      	lsls	r3, r3, #8
 80046c8:	b21a      	sxth	r2, r3
 80046ca:	4b46      	ldr	r3, [pc, #280]	@ (80047e4 <BNO_Page0Adress+0x2c0>)
 80046cc:	785b      	ldrb	r3, [r3, #1]
 80046ce:	b21b      	sxth	r3, r3
 80046d0:	4313      	orrs	r3, r2
 80046d2:	b21a      	sxth	r2, r3
 80046d4:	4b44      	ldr	r3, [pc, #272]	@ (80047e8 <BNO_Page0Adress+0x2c4>)
 80046d6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
			IMU.Calibration_Data.offset.accel.y = (int16_t)((BNO_RxBuffer[4] << 8) | BNO_RxBuffer[3]);
 80046da:	4b42      	ldr	r3, [pc, #264]	@ (80047e4 <BNO_Page0Adress+0x2c0>)
 80046dc:	791b      	ldrb	r3, [r3, #4]
 80046de:	b21b      	sxth	r3, r3
 80046e0:	021b      	lsls	r3, r3, #8
 80046e2:	b21a      	sxth	r2, r3
 80046e4:	4b3f      	ldr	r3, [pc, #252]	@ (80047e4 <BNO_Page0Adress+0x2c0>)
 80046e6:	78db      	ldrb	r3, [r3, #3]
 80046e8:	b21b      	sxth	r3, r3
 80046ea:	4313      	orrs	r3, r2
 80046ec:	b21a      	sxth	r2, r3
 80046ee:	4b3e      	ldr	r3, [pc, #248]	@ (80047e8 <BNO_Page0Adress+0x2c4>)
 80046f0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
			IMU.Calibration_Data.offset.accel.z = (int16_t)((BNO_RxBuffer[6] << 8) | BNO_RxBuffer[5]);
 80046f4:	4b3b      	ldr	r3, [pc, #236]	@ (80047e4 <BNO_Page0Adress+0x2c0>)
 80046f6:	799b      	ldrb	r3, [r3, #6]
 80046f8:	b21b      	sxth	r3, r3
 80046fa:	021b      	lsls	r3, r3, #8
 80046fc:	b21a      	sxth	r2, r3
 80046fe:	4b39      	ldr	r3, [pc, #228]	@ (80047e4 <BNO_Page0Adress+0x2c0>)
 8004700:	795b      	ldrb	r3, [r3, #5]
 8004702:	b21b      	sxth	r3, r3
 8004704:	4313      	orrs	r3, r2
 8004706:	b21a      	sxth	r2, r3
 8004708:	4b37      	ldr	r3, [pc, #220]	@ (80047e8 <BNO_Page0Adress+0x2c4>)
 800470a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
			IMU.Calibration_Data.offset.mag.x = (int16_t)((BNO_RxBuffer[8] << 8) | BNO_RxBuffer[7]);
 800470e:	4b35      	ldr	r3, [pc, #212]	@ (80047e4 <BNO_Page0Adress+0x2c0>)
 8004710:	7a1b      	ldrb	r3, [r3, #8]
 8004712:	b21b      	sxth	r3, r3
 8004714:	021b      	lsls	r3, r3, #8
 8004716:	b21a      	sxth	r2, r3
 8004718:	4b32      	ldr	r3, [pc, #200]	@ (80047e4 <BNO_Page0Adress+0x2c0>)
 800471a:	79db      	ldrb	r3, [r3, #7]
 800471c:	b21b      	sxth	r3, r3
 800471e:	4313      	orrs	r3, r2
 8004720:	b21a      	sxth	r2, r3
 8004722:	4b31      	ldr	r3, [pc, #196]	@ (80047e8 <BNO_Page0Adress+0x2c4>)
 8004724:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
			IMU.Calibration_Data.offset.mag.y = (int16_t)((BNO_RxBuffer[10] << 8) | BNO_RxBuffer[9]);
 8004728:	4b2e      	ldr	r3, [pc, #184]	@ (80047e4 <BNO_Page0Adress+0x2c0>)
 800472a:	7a9b      	ldrb	r3, [r3, #10]
 800472c:	b21b      	sxth	r3, r3
 800472e:	021b      	lsls	r3, r3, #8
 8004730:	b21a      	sxth	r2, r3
 8004732:	4b2c      	ldr	r3, [pc, #176]	@ (80047e4 <BNO_Page0Adress+0x2c0>)
 8004734:	7a5b      	ldrb	r3, [r3, #9]
 8004736:	b21b      	sxth	r3, r3
 8004738:	4313      	orrs	r3, r2
 800473a:	b21a      	sxth	r2, r3
 800473c:	4b2a      	ldr	r3, [pc, #168]	@ (80047e8 <BNO_Page0Adress+0x2c4>)
 800473e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
			IMU.Calibration_Data.offset.mag.z = (int16_t)((BNO_RxBuffer[12] << 8) | BNO_RxBuffer[11]);
 8004742:	4b28      	ldr	r3, [pc, #160]	@ (80047e4 <BNO_Page0Adress+0x2c0>)
 8004744:	7b1b      	ldrb	r3, [r3, #12]
 8004746:	b21b      	sxth	r3, r3
 8004748:	021b      	lsls	r3, r3, #8
 800474a:	b21a      	sxth	r2, r3
 800474c:	4b25      	ldr	r3, [pc, #148]	@ (80047e4 <BNO_Page0Adress+0x2c0>)
 800474e:	7adb      	ldrb	r3, [r3, #11]
 8004750:	b21b      	sxth	r3, r3
 8004752:	4313      	orrs	r3, r2
 8004754:	b21a      	sxth	r2, r3
 8004756:	4b24      	ldr	r3, [pc, #144]	@ (80047e8 <BNO_Page0Adress+0x2c4>)
 8004758:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
			IMU.Calibration_Data.offset.gyro.x = (int16_t)((BNO_RxBuffer[14] << 8) | BNO_RxBuffer[13]);
 800475c:	4b21      	ldr	r3, [pc, #132]	@ (80047e4 <BNO_Page0Adress+0x2c0>)
 800475e:	7b9b      	ldrb	r3, [r3, #14]
 8004760:	b21b      	sxth	r3, r3
 8004762:	021b      	lsls	r3, r3, #8
 8004764:	b21a      	sxth	r2, r3
 8004766:	4b1f      	ldr	r3, [pc, #124]	@ (80047e4 <BNO_Page0Adress+0x2c0>)
 8004768:	7b5b      	ldrb	r3, [r3, #13]
 800476a:	b21b      	sxth	r3, r3
 800476c:	4313      	orrs	r3, r2
 800476e:	b21a      	sxth	r2, r3
 8004770:	4b1d      	ldr	r3, [pc, #116]	@ (80047e8 <BNO_Page0Adress+0x2c4>)
 8004772:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
			IMU.Calibration_Data.offset.gyro.y = (int16_t)((BNO_RxBuffer[16] << 8) | BNO_RxBuffer[15]);
 8004776:	4b1b      	ldr	r3, [pc, #108]	@ (80047e4 <BNO_Page0Adress+0x2c0>)
 8004778:	7c1b      	ldrb	r3, [r3, #16]
 800477a:	b21b      	sxth	r3, r3
 800477c:	021b      	lsls	r3, r3, #8
 800477e:	b21a      	sxth	r2, r3
 8004780:	4b18      	ldr	r3, [pc, #96]	@ (80047e4 <BNO_Page0Adress+0x2c0>)
 8004782:	7bdb      	ldrb	r3, [r3, #15]
 8004784:	b21b      	sxth	r3, r3
 8004786:	4313      	orrs	r3, r2
 8004788:	b21a      	sxth	r2, r3
 800478a:	4b17      	ldr	r3, [pc, #92]	@ (80047e8 <BNO_Page0Adress+0x2c4>)
 800478c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
			IMU.Calibration_Data.offset.gyro.z = (int16_t)((BNO_RxBuffer[18] << 8) | BNO_RxBuffer[17]);
 8004790:	4b14      	ldr	r3, [pc, #80]	@ (80047e4 <BNO_Page0Adress+0x2c0>)
 8004792:	7c9b      	ldrb	r3, [r3, #18]
 8004794:	b21b      	sxth	r3, r3
 8004796:	021b      	lsls	r3, r3, #8
 8004798:	b21a      	sxth	r2, r3
 800479a:	4b12      	ldr	r3, [pc, #72]	@ (80047e4 <BNO_Page0Adress+0x2c0>)
 800479c:	7c5b      	ldrb	r3, [r3, #17]
 800479e:	b21b      	sxth	r3, r3
 80047a0:	4313      	orrs	r3, r2
 80047a2:	b21a      	sxth	r2, r3
 80047a4:	4b10      	ldr	r3, [pc, #64]	@ (80047e8 <BNO_Page0Adress+0x2c4>)
 80047a6:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
			IMU.Calibration_Data.radius.accel = (uint16_t)((BNO_RxBuffer[20] << 8) | BNO_RxBuffer[19]);
 80047aa:	4b0e      	ldr	r3, [pc, #56]	@ (80047e4 <BNO_Page0Adress+0x2c0>)
 80047ac:	7d1b      	ldrb	r3, [r3, #20]
 80047ae:	b21b      	sxth	r3, r3
 80047b0:	021b      	lsls	r3, r3, #8
 80047b2:	b21a      	sxth	r2, r3
 80047b4:	4b0b      	ldr	r3, [pc, #44]	@ (80047e4 <BNO_Page0Adress+0x2c0>)
 80047b6:	7cdb      	ldrb	r3, [r3, #19]
 80047b8:	b21b      	sxth	r3, r3
 80047ba:	4313      	orrs	r3, r2
 80047bc:	b21b      	sxth	r3, r3
 80047be:	b29a      	uxth	r2, r3
 80047c0:	4b09      	ldr	r3, [pc, #36]	@ (80047e8 <BNO_Page0Adress+0x2c4>)
 80047c2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
			IMU.Calibration_Data.radius.mag   = (uint16_t)((BNO_RxBuffer[22] << 8) | BNO_RxBuffer[21]);
 80047c6:	4b07      	ldr	r3, [pc, #28]	@ (80047e4 <BNO_Page0Adress+0x2c0>)
 80047c8:	7d9b      	ldrb	r3, [r3, #22]
 80047ca:	b21b      	sxth	r3, r3
 80047cc:	021b      	lsls	r3, r3, #8
 80047ce:	b21a      	sxth	r2, r3
 80047d0:	4b04      	ldr	r3, [pc, #16]	@ (80047e4 <BNO_Page0Adress+0x2c0>)
 80047d2:	7d5b      	ldrb	r3, [r3, #21]
 80047d4:	b21b      	sxth	r3, r3
 80047d6:	4313      	orrs	r3, r2
 80047d8:	b21b      	sxth	r3, r3
 80047da:	b29a      	uxth	r2, r3
 80047dc:	4b02      	ldr	r3, [pc, #8]	@ (80047e8 <BNO_Page0Adress+0x2c4>)
 80047de:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
			break;
 80047e2:	e10a      	b.n	80049fa <BNO_Page0Adress+0x4d6>
 80047e4:	24001424 	.word	0x24001424
 80047e8:	2400152c 	.word	0x2400152c
			IMU.ACC.x = ((float)((int16_t)((BNO_RxBuffer[2] << 8) | BNO_RxBuffer[1])))/100;
 80047ec:	4b85      	ldr	r3, [pc, #532]	@ (8004a04 <BNO_Page0Adress+0x4e0>)
 80047ee:	789b      	ldrb	r3, [r3, #2]
 80047f0:	b21b      	sxth	r3, r3
 80047f2:	021b      	lsls	r3, r3, #8
 80047f4:	b21a      	sxth	r2, r3
 80047f6:	4b83      	ldr	r3, [pc, #524]	@ (8004a04 <BNO_Page0Adress+0x4e0>)
 80047f8:	785b      	ldrb	r3, [r3, #1]
 80047fa:	b21b      	sxth	r3, r3
 80047fc:	4313      	orrs	r3, r2
 80047fe:	b21b      	sxth	r3, r3
 8004800:	ee07 3a90 	vmov	s15, r3
 8004804:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004808:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8004a08 <BNO_Page0Adress+0x4e4>
 800480c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004810:	4b7e      	ldr	r3, [pc, #504]	@ (8004a0c <BNO_Page0Adress+0x4e8>)
 8004812:	edc3 7a02 	vstr	s15, [r3, #8]
			IMU.ACC.y = ((float)((int16_t)((BNO_RxBuffer[4] << 8) | BNO_RxBuffer[3])))/100;
 8004816:	4b7b      	ldr	r3, [pc, #492]	@ (8004a04 <BNO_Page0Adress+0x4e0>)
 8004818:	791b      	ldrb	r3, [r3, #4]
 800481a:	b21b      	sxth	r3, r3
 800481c:	021b      	lsls	r3, r3, #8
 800481e:	b21a      	sxth	r2, r3
 8004820:	4b78      	ldr	r3, [pc, #480]	@ (8004a04 <BNO_Page0Adress+0x4e0>)
 8004822:	78db      	ldrb	r3, [r3, #3]
 8004824:	b21b      	sxth	r3, r3
 8004826:	4313      	orrs	r3, r2
 8004828:	b21b      	sxth	r3, r3
 800482a:	ee07 3a90 	vmov	s15, r3
 800482e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004832:	eddf 6a75 	vldr	s13, [pc, #468]	@ 8004a08 <BNO_Page0Adress+0x4e4>
 8004836:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800483a:	4b74      	ldr	r3, [pc, #464]	@ (8004a0c <BNO_Page0Adress+0x4e8>)
 800483c:	edc3 7a03 	vstr	s15, [r3, #12]
			IMU.ACC.z = ((float)((int16_t)((BNO_RxBuffer[6] << 8) | BNO_RxBuffer[5])))/100;
 8004840:	4b70      	ldr	r3, [pc, #448]	@ (8004a04 <BNO_Page0Adress+0x4e0>)
 8004842:	799b      	ldrb	r3, [r3, #6]
 8004844:	b21b      	sxth	r3, r3
 8004846:	021b      	lsls	r3, r3, #8
 8004848:	b21a      	sxth	r2, r3
 800484a:	4b6e      	ldr	r3, [pc, #440]	@ (8004a04 <BNO_Page0Adress+0x4e0>)
 800484c:	795b      	ldrb	r3, [r3, #5]
 800484e:	b21b      	sxth	r3, r3
 8004850:	4313      	orrs	r3, r2
 8004852:	b21b      	sxth	r3, r3
 8004854:	ee07 3a90 	vmov	s15, r3
 8004858:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800485c:	eddf 6a6a 	vldr	s13, [pc, #424]	@ 8004a08 <BNO_Page0Adress+0x4e4>
 8004860:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004864:	4b69      	ldr	r3, [pc, #420]	@ (8004a0c <BNO_Page0Adress+0x4e8>)
 8004866:	edc3 7a04 	vstr	s15, [r3, #16]
			IMU.MAG.x = ((float)((int16_t)((BNO_RxBuffer[8] << 8) | BNO_RxBuffer[7])))/16;
 800486a:	4b66      	ldr	r3, [pc, #408]	@ (8004a04 <BNO_Page0Adress+0x4e0>)
 800486c:	7a1b      	ldrb	r3, [r3, #8]
 800486e:	b21b      	sxth	r3, r3
 8004870:	021b      	lsls	r3, r3, #8
 8004872:	b21a      	sxth	r2, r3
 8004874:	4b63      	ldr	r3, [pc, #396]	@ (8004a04 <BNO_Page0Adress+0x4e0>)
 8004876:	79db      	ldrb	r3, [r3, #7]
 8004878:	b21b      	sxth	r3, r3
 800487a:	4313      	orrs	r3, r2
 800487c:	b21b      	sxth	r3, r3
 800487e:	ee07 3a90 	vmov	s15, r3
 8004882:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004886:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800488a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800488e:	4b5f      	ldr	r3, [pc, #380]	@ (8004a0c <BNO_Page0Adress+0x4e8>)
 8004890:	edc3 7a06 	vstr	s15, [r3, #24]
			IMU.MAG.y = ((float)((int16_t)((BNO_RxBuffer[10] << 8) | BNO_RxBuffer[9])))/16;
 8004894:	4b5b      	ldr	r3, [pc, #364]	@ (8004a04 <BNO_Page0Adress+0x4e0>)
 8004896:	7a9b      	ldrb	r3, [r3, #10]
 8004898:	b21b      	sxth	r3, r3
 800489a:	021b      	lsls	r3, r3, #8
 800489c:	b21a      	sxth	r2, r3
 800489e:	4b59      	ldr	r3, [pc, #356]	@ (8004a04 <BNO_Page0Adress+0x4e0>)
 80048a0:	7a5b      	ldrb	r3, [r3, #9]
 80048a2:	b21b      	sxth	r3, r3
 80048a4:	4313      	orrs	r3, r2
 80048a6:	b21b      	sxth	r3, r3
 80048a8:	ee07 3a90 	vmov	s15, r3
 80048ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048b0:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80048b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80048b8:	4b54      	ldr	r3, [pc, #336]	@ (8004a0c <BNO_Page0Adress+0x4e8>)
 80048ba:	edc3 7a07 	vstr	s15, [r3, #28]
			IMU.MAG.z = ((float)((int16_t)((BNO_RxBuffer[12] << 8) | BNO_RxBuffer[11])))/16;
 80048be:	4b51      	ldr	r3, [pc, #324]	@ (8004a04 <BNO_Page0Adress+0x4e0>)
 80048c0:	7b1b      	ldrb	r3, [r3, #12]
 80048c2:	b21b      	sxth	r3, r3
 80048c4:	021b      	lsls	r3, r3, #8
 80048c6:	b21a      	sxth	r2, r3
 80048c8:	4b4e      	ldr	r3, [pc, #312]	@ (8004a04 <BNO_Page0Adress+0x4e0>)
 80048ca:	7adb      	ldrb	r3, [r3, #11]
 80048cc:	b21b      	sxth	r3, r3
 80048ce:	4313      	orrs	r3, r2
 80048d0:	b21b      	sxth	r3, r3
 80048d2:	ee07 3a90 	vmov	s15, r3
 80048d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048da:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80048de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80048e2:	4b4a      	ldr	r3, [pc, #296]	@ (8004a0c <BNO_Page0Adress+0x4e8>)
 80048e4:	edc3 7a08 	vstr	s15, [r3, #32]
			IMU.GYR.x = ((float)((int16_t)((BNO_RxBuffer[14] << 8) | BNO_RxBuffer[13])))/16;
 80048e8:	4b46      	ldr	r3, [pc, #280]	@ (8004a04 <BNO_Page0Adress+0x4e0>)
 80048ea:	7b9b      	ldrb	r3, [r3, #14]
 80048ec:	b21b      	sxth	r3, r3
 80048ee:	021b      	lsls	r3, r3, #8
 80048f0:	b21a      	sxth	r2, r3
 80048f2:	4b44      	ldr	r3, [pc, #272]	@ (8004a04 <BNO_Page0Adress+0x4e0>)
 80048f4:	7b5b      	ldrb	r3, [r3, #13]
 80048f6:	b21b      	sxth	r3, r3
 80048f8:	4313      	orrs	r3, r2
 80048fa:	b21b      	sxth	r3, r3
 80048fc:	ee07 3a90 	vmov	s15, r3
 8004900:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004904:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8004908:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800490c:	4b3f      	ldr	r3, [pc, #252]	@ (8004a0c <BNO_Page0Adress+0x4e8>)
 800490e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
			IMU.GYR.y = -((float)((int16_t)((BNO_RxBuffer[16] << 8) | BNO_RxBuffer[15])))/16;
 8004912:	4b3c      	ldr	r3, [pc, #240]	@ (8004a04 <BNO_Page0Adress+0x4e0>)
 8004914:	7c1b      	ldrb	r3, [r3, #16]
 8004916:	b21b      	sxth	r3, r3
 8004918:	021b      	lsls	r3, r3, #8
 800491a:	b21a      	sxth	r2, r3
 800491c:	4b39      	ldr	r3, [pc, #228]	@ (8004a04 <BNO_Page0Adress+0x4e0>)
 800491e:	7bdb      	ldrb	r3, [r3, #15]
 8004920:	b21b      	sxth	r3, r3
 8004922:	4313      	orrs	r3, r2
 8004924:	b21b      	sxth	r3, r3
 8004926:	ee07 3a90 	vmov	s15, r3
 800492a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800492e:	eeb1 7a67 	vneg.f32	s14, s15
 8004932:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8004936:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800493a:	4b34      	ldr	r3, [pc, #208]	@ (8004a0c <BNO_Page0Adress+0x4e8>)
 800493c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
			IMU.GYR.z = -((float)((int16_t)((BNO_RxBuffer[18] << 8) | BNO_RxBuffer[17])))/16;
 8004940:	4b30      	ldr	r3, [pc, #192]	@ (8004a04 <BNO_Page0Adress+0x4e0>)
 8004942:	7c9b      	ldrb	r3, [r3, #18]
 8004944:	b21b      	sxth	r3, r3
 8004946:	021b      	lsls	r3, r3, #8
 8004948:	b21a      	sxth	r2, r3
 800494a:	4b2e      	ldr	r3, [pc, #184]	@ (8004a04 <BNO_Page0Adress+0x4e0>)
 800494c:	7c5b      	ldrb	r3, [r3, #17]
 800494e:	b21b      	sxth	r3, r3
 8004950:	4313      	orrs	r3, r2
 8004952:	b21b      	sxth	r3, r3
 8004954:	ee07 3a90 	vmov	s15, r3
 8004958:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800495c:	eeb1 7a67 	vneg.f32	s14, s15
 8004960:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8004964:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004968:	4b28      	ldr	r3, [pc, #160]	@ (8004a0c <BNO_Page0Adress+0x4e8>)
 800496a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
			IMU.Heading = ((float)((int16_t)((BNO_RxBuffer[20] << 8) | BNO_RxBuffer[19])))/16;
 800496e:	4b25      	ldr	r3, [pc, #148]	@ (8004a04 <BNO_Page0Adress+0x4e0>)
 8004970:	7d1b      	ldrb	r3, [r3, #20]
 8004972:	b21b      	sxth	r3, r3
 8004974:	021b      	lsls	r3, r3, #8
 8004976:	b21a      	sxth	r2, r3
 8004978:	4b22      	ldr	r3, [pc, #136]	@ (8004a04 <BNO_Page0Adress+0x4e0>)
 800497a:	7cdb      	ldrb	r3, [r3, #19]
 800497c:	b21b      	sxth	r3, r3
 800497e:	4313      	orrs	r3, r2
 8004980:	b21b      	sxth	r3, r3
 8004982:	ee07 3a90 	vmov	s15, r3
 8004986:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800498a:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800498e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004992:	4b1e      	ldr	r3, [pc, #120]	@ (8004a0c <BNO_Page0Adress+0x4e8>)
 8004994:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
			IMU.Pitch = ((float)((int16_t)((BNO_RxBuffer[22] << 8) | BNO_RxBuffer[21])))/16;
 8004998:	4b1a      	ldr	r3, [pc, #104]	@ (8004a04 <BNO_Page0Adress+0x4e0>)
 800499a:	7d9b      	ldrb	r3, [r3, #22]
 800499c:	b21b      	sxth	r3, r3
 800499e:	021b      	lsls	r3, r3, #8
 80049a0:	b21a      	sxth	r2, r3
 80049a2:	4b18      	ldr	r3, [pc, #96]	@ (8004a04 <BNO_Page0Adress+0x4e0>)
 80049a4:	7d5b      	ldrb	r3, [r3, #21]
 80049a6:	b21b      	sxth	r3, r3
 80049a8:	4313      	orrs	r3, r2
 80049aa:	b21b      	sxth	r3, r3
 80049ac:	ee07 3a90 	vmov	s15, r3
 80049b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049b4:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80049b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049bc:	4b13      	ldr	r3, [pc, #76]	@ (8004a0c <BNO_Page0Adress+0x4e8>)
 80049be:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
			IMU.Roll = ((float)((int16_t)((BNO_RxBuffer[24] << 8) | BNO_RxBuffer[23])))/16;
 80049c2:	4b10      	ldr	r3, [pc, #64]	@ (8004a04 <BNO_Page0Adress+0x4e0>)
 80049c4:	7e1b      	ldrb	r3, [r3, #24]
 80049c6:	b21b      	sxth	r3, r3
 80049c8:	021b      	lsls	r3, r3, #8
 80049ca:	b21a      	sxth	r2, r3
 80049cc:	4b0d      	ldr	r3, [pc, #52]	@ (8004a04 <BNO_Page0Adress+0x4e0>)
 80049ce:	7ddb      	ldrb	r3, [r3, #23]
 80049d0:	b21b      	sxth	r3, r3
 80049d2:	4313      	orrs	r3, r2
 80049d4:	b21b      	sxth	r3, r3
 80049d6:	ee07 3a90 	vmov	s15, r3
 80049da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049de:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80049e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049e6:	4b09      	ldr	r3, [pc, #36]	@ (8004a0c <BNO_Page0Adress+0x4e8>)
 80049e8:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
			BNO_ErrorHandler = ReadSucces;
 80049ec:	4b08      	ldr	r3, [pc, #32]	@ (8004a10 <BNO_Page0Adress+0x4ec>)
 80049ee:	220b      	movs	r2, #11
 80049f0:	701a      	strb	r2, [r3, #0]
			break;
 80049f2:	e002      	b.n	80049fa <BNO_Page0Adress+0x4d6>
			break;
 80049f4:	bf00      	nop
 80049f6:	e000      	b.n	80049fa <BNO_Page0Adress+0x4d6>
			if(BNO_RxBuffer[1] != 160) return;
 80049f8:	bf00      	nop
	}
}
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	24001424 	.word	0x24001424
 8004a08:	42c80000 	.word	0x42c80000
 8004a0c:	2400152c 	.word	0x2400152c
 8004a10:	24001525 	.word	0x24001525

08004a14 <BNO_Page1Adress>:

void BNO_Page1Adress(void){
 8004a14:	b480      	push	{r7}
 8004a16:	af00      	add	r7, sp, #0
	switch (BNO_RxBuffer[0]) {
 8004a18:	4b09      	ldr	r3, [pc, #36]	@ (8004a40 <BNO_Page1Adress+0x2c>)
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	2b07      	cmp	r3, #7
 8004a1e:	d108      	bne.n	8004a32 <BNO_Page1Adress+0x1e>
		case BNO055_PAGE_ID:
			IMU.Page = BNO_RxBuffer[1];
 8004a20:	4b07      	ldr	r3, [pc, #28]	@ (8004a40 <BNO_Page1Adress+0x2c>)
 8004a22:	785a      	ldrb	r2, [r3, #1]
 8004a24:	4b07      	ldr	r3, [pc, #28]	@ (8004a44 <BNO_Page1Adress+0x30>)
 8004a26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			BNO_ErrorHandler = ReadSucces;
 8004a2a:	4b07      	ldr	r3, [pc, #28]	@ (8004a48 <BNO_Page1Adress+0x34>)
 8004a2c:	220b      	movs	r2, #11
 8004a2e:	701a      	strb	r2, [r3, #0]
			break;
 8004a30:	e000      	b.n	8004a34 <BNO_Page1Adress+0x20>

		default:
			break;
 8004a32:	bf00      	nop
	}
}
 8004a34:	bf00      	nop
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	24001424 	.word	0x24001424
 8004a44:	2400152c 	.word	0x2400152c
 8004a48:	24001525 	.word	0x24001525

08004a4c <BNO_EmptyingBuffer>:

void BNO_EmptyingBuffer(void){
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	af00      	add	r7, sp, #0
	switch (IMU.Page) {
 8004a50:	4b0a      	ldr	r3, [pc, #40]	@ (8004a7c <BNO_EmptyingBuffer+0x30>)
 8004a52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d002      	beq.n	8004a60 <BNO_EmptyingBuffer+0x14>
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d003      	beq.n	8004a66 <BNO_EmptyingBuffer+0x1a>
			break;
		case 1:
			BNO_Page1Adress();
			break;
		default:
			break;
 8004a5e:	e005      	b.n	8004a6c <BNO_EmptyingBuffer+0x20>
			BNO_Page0Adress();
 8004a60:	f7ff fd60 	bl	8004524 <BNO_Page0Adress>
			break;
 8004a64:	e002      	b.n	8004a6c <BNO_EmptyingBuffer+0x20>
			BNO_Page1Adress();
 8004a66:	f7ff ffd5 	bl	8004a14 <BNO_Page1Adress>
			break;
 8004a6a:	bf00      	nop
	}
	memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 8004a6c:	22ff      	movs	r2, #255	@ 0xff
 8004a6e:	2100      	movs	r1, #0
 8004a70:	4803      	ldr	r0, [pc, #12]	@ (8004a80 <BNO_EmptyingBuffer+0x34>)
 8004a72:	f014 fe41 	bl	80196f8 <memset>
}
 8004a76:	bf00      	nop
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	2400152c 	.word	0x2400152c
 8004a80:	24001424 	.word	0x24001424

08004a84 <BNO_SWReset>:
		default:
			break;
	}
}

void BNO_SWReset(void){
 8004a84:	b580      	push	{r7, lr}
 8004a86:	af00      	add	r7, sp, #0
	BNO_Write(BNO055_SYS_TRIGGER,0x20);
 8004a88:	2120      	movs	r1, #32
 8004a8a:	203f      	movs	r0, #63	@ 0x3f
 8004a8c:	f7ff fcb6 	bl	80043fc <BNO_Write>
	bno055_delay(70);
 8004a90:	2046      	movs	r0, #70	@ 0x46
 8004a92:	f7ff fc79 	bl	8004388 <bno055_delay>
	IMU.ID = 0x00;
 8004a96:	4b04      	ldr	r3, [pc, #16]	@ (8004aa8 <BNO_SWReset+0x24>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	701a      	strb	r2, [r3, #0]
	BNO_CurrentState = Configuration;
 8004a9c:	4b03      	ldr	r3, [pc, #12]	@ (8004aac <BNO_SWReset+0x28>)
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	701a      	strb	r2, [r3, #0]
}
 8004aa2:	bf00      	nop
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	2400152c 	.word	0x2400152c
 8004aac:	24001528 	.word	0x24001528

08004ab0 <bno055_setOperationMode>:

void bno055_setOperationMode(bno055_opmode_t mode) {
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	71fb      	strb	r3, [r7, #7]
  BNO_Write(BNO055_OPR_MODE, mode);
 8004aba:	79fb      	ldrb	r3, [r7, #7]
 8004abc:	4619      	mov	r1, r3
 8004abe:	203d      	movs	r0, #61	@ 0x3d
 8004ac0:	f7ff fc9c 	bl	80043fc <BNO_Write>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8004ac4:	79fb      	ldrb	r3, [r7, #7]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d103      	bne.n	8004ad2 <bno055_setOperationMode+0x22>
    bno055_delay(5);
 8004aca:	2005      	movs	r0, #5
 8004acc:	f7ff fc5c 	bl	8004388 <bno055_delay>
  } else {
    bno055_delay(3);
  }
}
 8004ad0:	e002      	b.n	8004ad8 <bno055_setOperationMode+0x28>
    bno055_delay(3);
 8004ad2:	2003      	movs	r0, #3
 8004ad4:	f7ff fc58 	bl	8004388 <bno055_delay>
}
 8004ad8:	bf00      	nop
 8004ada:	3708      	adds	r7, #8
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8004ae4:	2000      	movs	r0, #0
 8004ae6:	f7ff ffe3 	bl	8004ab0 <bno055_setOperationMode>
}
 8004aea:	bf00      	nop
 8004aec:	bd80      	pop	{r7, pc}

08004aee <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8004aee:	b580      	push	{r7, lr}
 8004af0:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8004af2:	200c      	movs	r0, #12
 8004af4:	f7ff ffdc 	bl	8004ab0 <bno055_setOperationMode>
}
 8004af8:	bf00      	nop
 8004afa:	bd80      	pop	{r7, pc}

08004afc <BNO_GetCalibrationData>:

void BNO_GetCalibrationData(void){
 8004afc:	b580      	push	{r7, lr}
 8004afe:	af00      	add	r7, sp, #0
	BNO_Read(BNO055_ACC_OFFSET_X_LSB, 22);
 8004b00:	2116      	movs	r1, #22
 8004b02:	2055      	movs	r0, #85	@ 0x55
 8004b04:	f7ff fc54 	bl	80043b0 <BNO_Read>
}
 8004b08:	bf00      	nop
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <BNO_SetCalibrationData>:

void BNO_SetCalibrationData(void){
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
	uint8_t buffer[22];

	  memcpy(&IMU.Calibration_Data.offset.accel, buffer, 6);
 8004b12:	463b      	mov	r3, r7
 8004b14:	2206      	movs	r2, #6
 8004b16:	4619      	mov	r1, r3
 8004b18:	4814      	ldr	r0, [pc, #80]	@ (8004b6c <BNO_SetCalibrationData+0x60>)
 8004b1a:	f014 fe1f 	bl	801975c <memcpy>
	  memcpy(&IMU.Calibration_Data.offset.mag, buffer + 6, 6);
 8004b1e:	463b      	mov	r3, r7
 8004b20:	3306      	adds	r3, #6
 8004b22:	2206      	movs	r2, #6
 8004b24:	4619      	mov	r1, r3
 8004b26:	4812      	ldr	r0, [pc, #72]	@ (8004b70 <BNO_SetCalibrationData+0x64>)
 8004b28:	f014 fe18 	bl	801975c <memcpy>
	  memcpy(&IMU.Calibration_Data.offset.gyro, buffer + 12, 6);
 8004b2c:	463b      	mov	r3, r7
 8004b2e:	330c      	adds	r3, #12
 8004b30:	2206      	movs	r2, #6
 8004b32:	4619      	mov	r1, r3
 8004b34:	480f      	ldr	r0, [pc, #60]	@ (8004b74 <BNO_SetCalibrationData+0x68>)
 8004b36:	f014 fe11 	bl	801975c <memcpy>
	  memcpy(&IMU.Calibration_Data.radius.accel, buffer + 18, 2);
 8004b3a:	463b      	mov	r3, r7
 8004b3c:	3312      	adds	r3, #18
 8004b3e:	881b      	ldrh	r3, [r3, #0]
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	4b0d      	ldr	r3, [pc, #52]	@ (8004b78 <BNO_SetCalibrationData+0x6c>)
 8004b44:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
	  memcpy(&IMU.Calibration_Data.radius.mag, buffer + 20, 2);
 8004b48:	463b      	mov	r3, r7
 8004b4a:	3314      	adds	r3, #20
 8004b4c:	881b      	ldrh	r3, [r3, #0]
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	4b09      	ldr	r3, [pc, #36]	@ (8004b78 <BNO_SetCalibrationData+0x6c>)
 8004b52:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

	BNO_Write_MB(BNO055_ACC_OFFSET_X_LSB, 22, buffer);
 8004b56:	463b      	mov	r3, r7
 8004b58:	461a      	mov	r2, r3
 8004b5a:	2116      	movs	r1, #22
 8004b5c:	2055      	movs	r0, #85	@ 0x55
 8004b5e:	f7ff fc6f 	bl	8004440 <BNO_Write_MB>
}
 8004b62:	bf00      	nop
 8004b64:	3718      	adds	r7, #24
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	24001582 	.word	0x24001582
 8004b70:	2400157c 	.word	0x2400157c
 8004b74:	24001576 	.word	0x24001576
 8004b78:	2400152c 	.word	0x2400152c

08004b7c <BNO_Init>:

void BNO_Init(void){
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, SET);
 8004b80:	2201      	movs	r2, #1
 8004b82:	2104      	movs	r1, #4
 8004b84:	4808      	ldr	r0, [pc, #32]	@ (8004ba8 <BNO_Init+0x2c>)
 8004b86:	f004 fed9 	bl	800993c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IMU_BOOT_GPIO_Port, IMU_BOOT_Pin, SET);
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004b90:	4806      	ldr	r0, [pc, #24]	@ (8004bac <BNO_Init+0x30>)
 8004b92:	f004 fed3 	bl	800993c <HAL_GPIO_WritePin>

	bno055_delay(100);
 8004b96:	2064      	movs	r0, #100	@ 0x64
 8004b98:	f7ff fbf6 	bl	8004388 <bno055_delay>

	BNO_CurrentState = Reset;
 8004b9c:	4b04      	ldr	r3, [pc, #16]	@ (8004bb0 <BNO_Init+0x34>)
 8004b9e:	2204      	movs	r2, #4
 8004ba0:	701a      	strb	r2, [r3, #0]
}
 8004ba2:	bf00      	nop
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	58020c00 	.word	0x58020c00
 8004bac:	58020400 	.word	0x58020400
 8004bb0:	24001528 	.word	0x24001528

08004bb4 <BNO_Config>:

void BNO_Config(void){
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	af00      	add	r7, sp, #0
	static uint8_t ConfigFlag = 0;

	switch (ConfigFlag) {
 8004bb8:	4b20      	ldr	r3, [pc, #128]	@ (8004c3c <BNO_Config+0x88>)
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	2b03      	cmp	r3, #3
 8004bbe:	d839      	bhi.n	8004c34 <BNO_Config+0x80>
 8004bc0:	a201      	add	r2, pc, #4	@ (adr r2, 8004bc8 <BNO_Config+0x14>)
 8004bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc6:	bf00      	nop
 8004bc8:	08004bd9 	.word	0x08004bd9
 8004bcc:	08004be9 	.word	0x08004be9
 8004bd0:	08004bf5 	.word	0x08004bf5
 8004bd4:	08004c17 	.word	0x08004c17
		case 0:
			BNO_Write(BNO055_SYS_TRIGGER,0x00);
 8004bd8:	2100      	movs	r1, #0
 8004bda:	203f      	movs	r0, #63	@ 0x3f
 8004bdc:	f7ff fc0e 	bl	80043fc <BNO_Write>
			ConfigFlag = 1;
 8004be0:	4b16      	ldr	r3, [pc, #88]	@ (8004c3c <BNO_Config+0x88>)
 8004be2:	2201      	movs	r2, #1
 8004be4:	701a      	strb	r2, [r3, #0]
			break;
 8004be6:	e026      	b.n	8004c36 <BNO_Config+0x82>
		case 1:
			bno055_setOperationModeConfig();
 8004be8:	f7ff ff7a 	bl	8004ae0 <bno055_setOperationModeConfig>
			ConfigFlag = 2;
 8004bec:	4b13      	ldr	r3, [pc, #76]	@ (8004c3c <BNO_Config+0x88>)
 8004bee:	2202      	movs	r2, #2
 8004bf0:	701a      	strb	r2, [r3, #0]
			break;
 8004bf2:	e020      	b.n	8004c36 <BNO_Config+0x82>
		case 2:
			BNO_Read(BNO055_OPR_MODE, 1);
 8004bf4:	2101      	movs	r1, #1
 8004bf6:	203d      	movs	r0, #61	@ 0x3d
 8004bf8:	f7ff fbda 	bl	80043b0 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_CONFIG){
 8004bfc:	4b10      	ldr	r3, [pc, #64]	@ (8004c40 <BNO_Config+0x8c>)
 8004bfe:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d103      	bne.n	8004c0e <BNO_Config+0x5a>
				ConfigFlag = 3;
 8004c06:	4b0d      	ldr	r3, [pc, #52]	@ (8004c3c <BNO_Config+0x88>)
 8004c08:	2203      	movs	r2, #3
 8004c0a:	701a      	strb	r2, [r3, #0]
			}
			else ConfigFlag = 1;
			break;
 8004c0c:	e013      	b.n	8004c36 <BNO_Config+0x82>
			else ConfigFlag = 1;
 8004c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8004c3c <BNO_Config+0x88>)
 8004c10:	2201      	movs	r2, #1
 8004c12:	701a      	strb	r2, [r3, #0]
			break;
 8004c14:	e00f      	b.n	8004c36 <BNO_Config+0x82>
		case 3:
			BNO_Read(BNO055_CHIP_ID, 4);
 8004c16:	2104      	movs	r1, #4
 8004c18:	2000      	movs	r0, #0
 8004c1a:	f7ff fbc9 	bl	80043b0 <BNO_Read>

			if(IMU.ID == BNO055_ID){
 8004c1e:	4b08      	ldr	r3, [pc, #32]	@ (8004c40 <BNO_Config+0x8c>)
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	2ba0      	cmp	r3, #160	@ 0xa0
 8004c24:	d102      	bne.n	8004c2c <BNO_Config+0x78>
				BNO_CurrentState = Calibration;
 8004c26:	4b07      	ldr	r3, [pc, #28]	@ (8004c44 <BNO_Config+0x90>)
 8004c28:	2202      	movs	r2, #2
 8004c2a:	701a      	strb	r2, [r3, #0]
			}
			ConfigFlag = 0;
 8004c2c:	4b03      	ldr	r3, [pc, #12]	@ (8004c3c <BNO_Config+0x88>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	701a      	strb	r2, [r3, #0]
			break;
 8004c32:	e000      	b.n	8004c36 <BNO_Config+0x82>
		default:
			break;
 8004c34:	bf00      	nop
	}

}
 8004c36:	bf00      	nop
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	2400158c 	.word	0x2400158c
 8004c40:	2400152c 	.word	0x2400152c
 8004c44:	24001528 	.word	0x24001528

08004c48 <BNO_CalibrationStatus>:

void BNO_CalibrationStatus(void){
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	af00      	add	r7, sp, #0
	static uint8_t CalibrationFlag = 0;
	static uint8_t Calibrated = 1;

	switch (CalibrationFlag) {
 8004c4c:	4b3d      	ldr	r3, [pc, #244]	@ (8004d44 <BNO_CalibrationStatus+0xfc>)
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	2b07      	cmp	r3, #7
 8004c52:	d870      	bhi.n	8004d36 <BNO_CalibrationStatus+0xee>
 8004c54:	a201      	add	r2, pc, #4	@ (adr r2, 8004c5c <BNO_CalibrationStatus+0x14>)
 8004c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5a:	bf00      	nop
 8004c5c:	08004c7d 	.word	0x08004c7d
 8004c60:	08004c8d 	.word	0x08004c8d
 8004c64:	08004c99 	.word	0x08004c99
 8004c68:	08004cd1 	.word	0x08004cd1
 8004c6c:	08004ceb 	.word	0x08004ceb
 8004c70:	08004cf7 	.word	0x08004cf7
 8004c74:	08004d19 	.word	0x08004d19
 8004c78:	08004d2b 	.word	0x08004d2b
		case 0:
			BNO_Write(BNO055_SYS_TRIGGER,0x00);
 8004c7c:	2100      	movs	r1, #0
 8004c7e:	203f      	movs	r0, #63	@ 0x3f
 8004c80:	f7ff fbbc 	bl	80043fc <BNO_Write>
			CalibrationFlag = 1;
 8004c84:	4b2f      	ldr	r3, [pc, #188]	@ (8004d44 <BNO_CalibrationStatus+0xfc>)
 8004c86:	2201      	movs	r2, #1
 8004c88:	701a      	strb	r2, [r3, #0]
			break;
 8004c8a:	e059      	b.n	8004d40 <BNO_CalibrationStatus+0xf8>
		case 1:
			bno055_setOperationModeNDOF();
 8004c8c:	f7ff ff2f 	bl	8004aee <bno055_setOperationModeNDOF>
			CalibrationFlag = 2;
 8004c90:	4b2c      	ldr	r3, [pc, #176]	@ (8004d44 <BNO_CalibrationStatus+0xfc>)
 8004c92:	2202      	movs	r2, #2
 8004c94:	701a      	strb	r2, [r3, #0]
			break;
 8004c96:	e053      	b.n	8004d40 <BNO_CalibrationStatus+0xf8>
		case 2:
			BNO_Read(BNO055_OPR_MODE, 1);
 8004c98:	2101      	movs	r1, #1
 8004c9a:	203d      	movs	r0, #61	@ 0x3d
 8004c9c:	f7ff fb88 	bl	80043b0 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_NDOF){
 8004ca0:	4b29      	ldr	r3, [pc, #164]	@ (8004d48 <BNO_CalibrationStatus+0x100>)
 8004ca2:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8004ca6:	2b0c      	cmp	r3, #12
 8004ca8:	d10e      	bne.n	8004cc8 <BNO_CalibrationStatus+0x80>
				if(Calibrated){
 8004caa:	4b28      	ldr	r3, [pc, #160]	@ (8004d4c <BNO_CalibrationStatus+0x104>)
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d006      	beq.n	8004cc0 <BNO_CalibrationStatus+0x78>
					CalibrationFlag = 0;
 8004cb2:	4b24      	ldr	r3, [pc, #144]	@ (8004d44 <BNO_CalibrationStatus+0xfc>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	701a      	strb	r2, [r3, #0]
					BNO_CurrentState = Operation;
 8004cb8:	4b25      	ldr	r3, [pc, #148]	@ (8004d50 <BNO_CalibrationStatus+0x108>)
 8004cba:	2203      	movs	r2, #3
 8004cbc:	701a      	strb	r2, [r3, #0]
				}
				else CalibrationFlag = 3;
			}
			else CalibrationFlag = 1;
			break;
 8004cbe:	e03f      	b.n	8004d40 <BNO_CalibrationStatus+0xf8>
				else CalibrationFlag = 3;
 8004cc0:	4b20      	ldr	r3, [pc, #128]	@ (8004d44 <BNO_CalibrationStatus+0xfc>)
 8004cc2:	2203      	movs	r2, #3
 8004cc4:	701a      	strb	r2, [r3, #0]
			break;
 8004cc6:	e03b      	b.n	8004d40 <BNO_CalibrationStatus+0xf8>
			else CalibrationFlag = 1;
 8004cc8:	4b1e      	ldr	r3, [pc, #120]	@ (8004d44 <BNO_CalibrationStatus+0xfc>)
 8004cca:	2201      	movs	r2, #1
 8004ccc:	701a      	strb	r2, [r3, #0]
			break;
 8004cce:	e037      	b.n	8004d40 <BNO_CalibrationStatus+0xf8>
		case 3:
			BNO_Read(BNO055_CALIB_STAT, 1);
 8004cd0:	2101      	movs	r1, #1
 8004cd2:	2035      	movs	r0, #53	@ 0x35
 8004cd4:	f7ff fb6c 	bl	80043b0 <BNO_Read>
			if(IMU.CalSatus.Full == 0xFF){
 8004cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8004d48 <BNO_CalibrationStatus+0x100>)
 8004cda:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004cde:	2bff      	cmp	r3, #255	@ 0xff
 8004ce0:	d12d      	bne.n	8004d3e <BNO_CalibrationStatus+0xf6>
				CalibrationFlag = 4;
 8004ce2:	4b18      	ldr	r3, [pc, #96]	@ (8004d44 <BNO_CalibrationStatus+0xfc>)
 8004ce4:	2204      	movs	r2, #4
 8004ce6:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004ce8:	e029      	b.n	8004d3e <BNO_CalibrationStatus+0xf6>
		case 4:
			bno055_setOperationModeConfig();
 8004cea:	f7ff fef9 	bl	8004ae0 <bno055_setOperationModeConfig>
			CalibrationFlag = 5;
 8004cee:	4b15      	ldr	r3, [pc, #84]	@ (8004d44 <BNO_CalibrationStatus+0xfc>)
 8004cf0:	2205      	movs	r2, #5
 8004cf2:	701a      	strb	r2, [r3, #0]
			break;
 8004cf4:	e024      	b.n	8004d40 <BNO_CalibrationStatus+0xf8>
		case 5:
			BNO_Read(BNO055_OPR_MODE, 1);
 8004cf6:	2101      	movs	r1, #1
 8004cf8:	203d      	movs	r0, #61	@ 0x3d
 8004cfa:	f7ff fb59 	bl	80043b0 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_CONFIG){
 8004cfe:	4b12      	ldr	r3, [pc, #72]	@ (8004d48 <BNO_CalibrationStatus+0x100>)
 8004d00:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d103      	bne.n	8004d10 <BNO_CalibrationStatus+0xc8>
				CalibrationFlag = 6;
 8004d08:	4b0e      	ldr	r3, [pc, #56]	@ (8004d44 <BNO_CalibrationStatus+0xfc>)
 8004d0a:	2206      	movs	r2, #6
 8004d0c:	701a      	strb	r2, [r3, #0]

			}
			else CalibrationFlag = 4;
			break;
 8004d0e:	e017      	b.n	8004d40 <BNO_CalibrationStatus+0xf8>
			else CalibrationFlag = 4;
 8004d10:	4b0c      	ldr	r3, [pc, #48]	@ (8004d44 <BNO_CalibrationStatus+0xfc>)
 8004d12:	2204      	movs	r2, #4
 8004d14:	701a      	strb	r2, [r3, #0]
			break;
 8004d16:	e013      	b.n	8004d40 <BNO_CalibrationStatus+0xf8>
		case 6:
			BNO_GetCalibrationData();
 8004d18:	f7ff fef0 	bl	8004afc <BNO_GetCalibrationData>
			Calibrated = 1;
 8004d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d4c <BNO_CalibrationStatus+0x104>)
 8004d1e:	2201      	movs	r2, #1
 8004d20:	701a      	strb	r2, [r3, #0]
			CalibrationFlag = 1;
 8004d22:	4b08      	ldr	r3, [pc, #32]	@ (8004d44 <BNO_CalibrationStatus+0xfc>)
 8004d24:	2201      	movs	r2, #1
 8004d26:	701a      	strb	r2, [r3, #0]
			break;
 8004d28:	e00a      	b.n	8004d40 <BNO_CalibrationStatus+0xf8>
		case 7:
			BNO_SetCalibrationData();
 8004d2a:	f7ff feef 	bl	8004b0c <BNO_SetCalibrationData>
			CalibrationFlag = 1;
 8004d2e:	4b05      	ldr	r3, [pc, #20]	@ (8004d44 <BNO_CalibrationStatus+0xfc>)
 8004d30:	2201      	movs	r2, #1
 8004d32:	701a      	strb	r2, [r3, #0]
			break;
 8004d34:	e004      	b.n	8004d40 <BNO_CalibrationStatus+0xf8>
		default:
			CalibrationFlag = 0;
 8004d36:	4b03      	ldr	r3, [pc, #12]	@ (8004d44 <BNO_CalibrationStatus+0xfc>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	701a      	strb	r2, [r3, #0]
			break;
 8004d3c:	e000      	b.n	8004d40 <BNO_CalibrationStatus+0xf8>
			break;
 8004d3e:	bf00      	nop
    	BNO_CurrentState = Operation;
    }
    else bno055_setOperationModeNDOF();
    */

}
 8004d40:	bf00      	nop
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	2400158d 	.word	0x2400158d
 8004d48:	2400152c 	.word	0x2400152c
 8004d4c:	24000008 	.word	0x24000008
 8004d50:	24001528 	.word	0x24001528

08004d54 <BNO_GetData>:

void BNO_GetData(void){
 8004d54:	b580      	push	{r7, lr}
 8004d56:	af00      	add	r7, sp, #0
	BNO_Read(BNO055_ACC_DATA_X_LSB,24);
 8004d58:	2118      	movs	r1, #24
 8004d5a:	2008      	movs	r0, #8
 8004d5c:	f7ff fb28 	bl	80043b0 <BNO_Read>
}
 8004d60:	bf00      	nop
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <BNO_Receive>:

void BNO_Receive(uint8_t Buffer){
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	71fb      	strb	r3, [r7, #7]
	static uint8_t MsgSize = 0;
	static uint8_t Counter = 0;

	BNO_ComsCounter = 0;
 8004d6e:	4b2c      	ldr	r3, [pc, #176]	@ (8004e20 <BNO_Receive+0xbc>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	701a      	strb	r2, [r3, #0]

	switch (BNO_Rx_Status) {
 8004d74:	4b2b      	ldr	r3, [pc, #172]	@ (8004e24 <BNO_Receive+0xc0>)
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	2bff      	cmp	r3, #255	@ 0xff
 8004d7a:	d027      	beq.n	8004dcc <BNO_Receive+0x68>
 8004d7c:	2bff      	cmp	r3, #255	@ 0xff
 8004d7e:	dc46      	bgt.n	8004e0e <BNO_Receive+0xaa>
 8004d80:	2bee      	cmp	r3, #238	@ 0xee
 8004d82:	d017      	beq.n	8004db4 <BNO_Receive+0x50>
 8004d84:	2bee      	cmp	r3, #238	@ 0xee
 8004d86:	dc42      	bgt.n	8004e0e <BNO_Receive+0xaa>
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d002      	beq.n	8004d92 <BNO_Receive+0x2e>
 8004d8c:	2bbb      	cmp	r3, #187	@ 0xbb
 8004d8e:	d00a      	beq.n	8004da6 <BNO_Receive+0x42>
				BNO_EmptyingBuffer();
			}

			break;
		default:
			break;
 8004d90:	e03d      	b.n	8004e0e <BNO_Receive+0xaa>
			if(Buffer == Read_Response || Buffer == Header) BNO_Rx_Status = Buffer;
 8004d92:	79fb      	ldrb	r3, [r7, #7]
 8004d94:	2bbb      	cmp	r3, #187	@ 0xbb
 8004d96:	d002      	beq.n	8004d9e <BNO_Receive+0x3a>
 8004d98:	79fb      	ldrb	r3, [r7, #7]
 8004d9a:	2bee      	cmp	r3, #238	@ 0xee
 8004d9c:	d139      	bne.n	8004e12 <BNO_Receive+0xae>
 8004d9e:	4a21      	ldr	r2, [pc, #132]	@ (8004e24 <BNO_Receive+0xc0>)
 8004da0:	79fb      	ldrb	r3, [r7, #7]
 8004da2:	7013      	strb	r3, [r2, #0]
			break;
 8004da4:	e035      	b.n	8004e12 <BNO_Receive+0xae>
			MsgSize = Buffer;
 8004da6:	4a20      	ldr	r2, [pc, #128]	@ (8004e28 <BNO_Receive+0xc4>)
 8004da8:	79fb      	ldrb	r3, [r7, #7]
 8004daa:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = Emptying_Buffer;
 8004dac:	4b1d      	ldr	r3, [pc, #116]	@ (8004e24 <BNO_Receive+0xc0>)
 8004dae:	22ff      	movs	r2, #255	@ 0xff
 8004db0:	701a      	strb	r2, [r3, #0]
			break;
 8004db2:	e031      	b.n	8004e18 <BNO_Receive+0xb4>
			BNO_ErrorHandler = Buffer;
 8004db4:	4a1d      	ldr	r2, [pc, #116]	@ (8004e2c <BNO_Receive+0xc8>)
 8004db6:	79fb      	ldrb	r3, [r7, #7]
 8004db8:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = AwaitingMsg;
 8004dba:	4b1a      	ldr	r3, [pc, #104]	@ (8004e24 <BNO_Receive+0xc0>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	701a      	strb	r2, [r3, #0]
			memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 8004dc0:	22ff      	movs	r2, #255	@ 0xff
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	481a      	ldr	r0, [pc, #104]	@ (8004e30 <BNO_Receive+0xcc>)
 8004dc6:	f014 fc97 	bl	80196f8 <memset>
			break;
 8004dca:	e025      	b.n	8004e18 <BNO_Receive+0xb4>
			BNO_RxBuffer[Counter + 1] = Buffer;
 8004dcc:	4b19      	ldr	r3, [pc, #100]	@ (8004e34 <BNO_Receive+0xd0>)
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	4917      	ldr	r1, [pc, #92]	@ (8004e30 <BNO_Receive+0xcc>)
 8004dd4:	79fa      	ldrb	r2, [r7, #7]
 8004dd6:	54ca      	strb	r2, [r1, r3]
			Counter++;
 8004dd8:	4b16      	ldr	r3, [pc, #88]	@ (8004e34 <BNO_Receive+0xd0>)
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	3301      	adds	r3, #1
 8004dde:	b2da      	uxtb	r2, r3
 8004de0:	4b14      	ldr	r3, [pc, #80]	@ (8004e34 <BNO_Receive+0xd0>)
 8004de2:	701a      	strb	r2, [r3, #0]
			if(Counter == MsgSize){
 8004de4:	4b13      	ldr	r3, [pc, #76]	@ (8004e34 <BNO_Receive+0xd0>)
 8004de6:	781a      	ldrb	r2, [r3, #0]
 8004de8:	4b0f      	ldr	r3, [pc, #60]	@ (8004e28 <BNO_Receive+0xc4>)
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d112      	bne.n	8004e16 <BNO_Receive+0xb2>
				Counter = 0;
 8004df0:	4b10      	ldr	r3, [pc, #64]	@ (8004e34 <BNO_Receive+0xd0>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	701a      	strb	r2, [r3, #0]
				MsgSize = 0;
 8004df6:	4b0c      	ldr	r3, [pc, #48]	@ (8004e28 <BNO_Receive+0xc4>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	701a      	strb	r2, [r3, #0]
				BNO_Rx_Status = AwaitingMsg;
 8004dfc:	4b09      	ldr	r3, [pc, #36]	@ (8004e24 <BNO_Receive+0xc0>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	701a      	strb	r2, [r3, #0]
				BNO_ErrorHandler = ReadSucces;
 8004e02:	4b0a      	ldr	r3, [pc, #40]	@ (8004e2c <BNO_Receive+0xc8>)
 8004e04:	220b      	movs	r2, #11
 8004e06:	701a      	strb	r2, [r3, #0]
				BNO_EmptyingBuffer();
 8004e08:	f7ff fe20 	bl	8004a4c <BNO_EmptyingBuffer>
			break;
 8004e0c:	e003      	b.n	8004e16 <BNO_Receive+0xb2>
			break;
 8004e0e:	bf00      	nop
 8004e10:	e002      	b.n	8004e18 <BNO_Receive+0xb4>
			break;
 8004e12:	bf00      	nop
 8004e14:	e000      	b.n	8004e18 <BNO_Receive+0xb4>
			break;
 8004e16:	bf00      	nop
	}
}
 8004e18:	bf00      	nop
 8004e1a:	3708      	adds	r7, #8
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	24001526 	.word	0x24001526
 8004e24:	24001524 	.word	0x24001524
 8004e28:	2400158e 	.word	0x2400158e
 8004e2c:	24001525 	.word	0x24001525
 8004e30:	24001424 	.word	0x24001424
 8004e34:	2400158f 	.word	0x2400158f

08004e38 <BNO_FaultManager>:

void BNO_FaultManager(void){
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
	if(BNO_ComsCounter > 3){
 8004e3e:	4b13      	ldr	r3, [pc, #76]	@ (8004e8c <BNO_FaultManager+0x54>)
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	2b03      	cmp	r3, #3
 8004e44:	d90f      	bls.n	8004e66 <BNO_FaultManager+0x2e>
		Reset_UART(&huart3);
 8004e46:	4812      	ldr	r0, [pc, #72]	@ (8004e90 <BNO_FaultManager+0x58>)
 8004e48:	f7fe fd58 	bl	80038fc <Reset_UART>
		BNO_Rx_Status = AwaitingMsg;
 8004e4c:	4b11      	ldr	r3, [pc, #68]	@ (8004e94 <BNO_FaultManager+0x5c>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 8004e52:	2201      	movs	r2, #1
 8004e54:	4910      	ldr	r1, [pc, #64]	@ (8004e98 <BNO_FaultManager+0x60>)
 8004e56:	480e      	ldr	r0, [pc, #56]	@ (8004e90 <BNO_FaultManager+0x58>)
 8004e58:	f00a f912 	bl	800f080 <HAL_UART_Receive_DMA>
		memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 8004e5c:	22ff      	movs	r2, #255	@ 0xff
 8004e5e:	2100      	movs	r1, #0
 8004e60:	480e      	ldr	r0, [pc, #56]	@ (8004e9c <BNO_FaultManager+0x64>)
 8004e62:	f014 fc49 	bl	80196f8 <memset>
	}
	if(BNO_ErrorHandler == WRONG_START_BYTE){
 8004e66:	4b0e      	ldr	r3, [pc, #56]	@ (8004ea0 <BNO_FaultManager+0x68>)
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	2b06      	cmp	r3, #6
 8004e6c:	d10a      	bne.n	8004e84 <BNO_FaultManager+0x4c>
		uint8_t Buffer = 0x00;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	71fb      	strb	r3, [r7, #7]

		HAL_UART_Transmit_IT(&huart3, &Buffer, 1);
 8004e72:	1dfb      	adds	r3, r7, #7
 8004e74:	2201      	movs	r2, #1
 8004e76:	4619      	mov	r1, r3
 8004e78:	4805      	ldr	r0, [pc, #20]	@ (8004e90 <BNO_FaultManager+0x58>)
 8004e7a:	f00a f821 	bl	800eec0 <HAL_UART_Transmit_IT>
		BNO_ErrorHandler = 0;
 8004e7e:	4b08      	ldr	r3, [pc, #32]	@ (8004ea0 <BNO_FaultManager+0x68>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	701a      	strb	r2, [r3, #0]
	}
}
 8004e84:	bf00      	nop
 8004e86:	3708      	adds	r7, #8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	24001526 	.word	0x24001526
 8004e90:	2400115c 	.word	0x2400115c
 8004e94:	24001524 	.word	0x24001524
 8004e98:	24001523 	.word	0x24001523
 8004e9c:	24001424 	.word	0x24001424
 8004ea0:	24001525 	.word	0x24001525

08004ea4 <BNO_Tasks>:

void BNO_Tasks(void){
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	af00      	add	r7, sp, #0
	if(BNO_DelayCounter == 0){
 8004ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8004f18 <BNO_Tasks+0x74>)
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d128      	bne.n	8004f02 <BNO_Tasks+0x5e>
		switch (BNO_CurrentState) {
 8004eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8004f1c <BNO_Tasks+0x78>)
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	2b04      	cmp	r3, #4
 8004eb6:	d81c      	bhi.n	8004ef2 <BNO_Tasks+0x4e>
 8004eb8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ec0 <BNO_Tasks+0x1c>)
 8004eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ebe:	bf00      	nop
 8004ec0:	08004ed5 	.word	0x08004ed5
 8004ec4:	08004ee1 	.word	0x08004ee1
 8004ec8:	08004ee7 	.word	0x08004ee7
 8004ecc:	08004eed 	.word	0x08004eed
 8004ed0:	08004edb 	.word	0x08004edb
			case Init:
				BNO_Init();
 8004ed4:	f7ff fe52 	bl	8004b7c <BNO_Init>
				break;
 8004ed8:	e00c      	b.n	8004ef4 <BNO_Tasks+0x50>
			case Reset:
				BNO_SWReset();
 8004eda:	f7ff fdd3 	bl	8004a84 <BNO_SWReset>
			break;
 8004ede:	e009      	b.n	8004ef4 <BNO_Tasks+0x50>
			case Configuration:
				BNO_Config();
 8004ee0:	f7ff fe68 	bl	8004bb4 <BNO_Config>
				break;
 8004ee4:	e006      	b.n	8004ef4 <BNO_Tasks+0x50>
			case Calibration:
				BNO_CalibrationStatus();
 8004ee6:	f7ff feaf 	bl	8004c48 <BNO_CalibrationStatus>
				break;
 8004eea:	e003      	b.n	8004ef4 <BNO_Tasks+0x50>
			case Operation:
				BNO_GetData();
 8004eec:	f7ff ff32 	bl	8004d54 <BNO_GetData>
				break;
 8004ef0:	e000      	b.n	8004ef4 <BNO_Tasks+0x50>

			default:
				break;
 8004ef2:	bf00      	nop
		}
		++BNO_ComsCounter;
 8004ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8004f20 <BNO_Tasks+0x7c>)
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	4b08      	ldr	r3, [pc, #32]	@ (8004f20 <BNO_Tasks+0x7c>)
 8004efe:	701a      	strb	r2, [r3, #0]
 8004f00:	e005      	b.n	8004f0e <BNO_Tasks+0x6a>
	}
	else{
		--BNO_DelayCounter;
 8004f02:	4b05      	ldr	r3, [pc, #20]	@ (8004f18 <BNO_Tasks+0x74>)
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	3b01      	subs	r3, #1
 8004f08:	b2da      	uxtb	r2, r3
 8004f0a:	4b03      	ldr	r3, [pc, #12]	@ (8004f18 <BNO_Tasks+0x74>)
 8004f0c:	701a      	strb	r2, [r3, #0]
	}
	BNO_FaultManager();
 8004f0e:	f7ff ff93 	bl	8004e38 <BNO_FaultManager>
}
 8004f12:	bf00      	nop
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	24001527 	.word	0x24001527
 8004f1c:	24001528 	.word	0x24001528
 8004f20:	24001526 	.word	0x24001526

08004f24 <LR03_AT>:

uint8_t LR03_RxBuffer[256] = {0};

uint8_t Test_1;

void LR03_AT(void){
 8004f24:	b580      	push	{r7, lr}
 8004f26:	af00      	add	r7, sp, #0

	HAL_UART_Transmit_IT(&huart6, (uint8_t*)"+++\r\n", 5);
 8004f28:	2205      	movs	r2, #5
 8004f2a:	4903      	ldr	r1, [pc, #12]	@ (8004f38 <LR03_AT+0x14>)
 8004f2c:	4803      	ldr	r0, [pc, #12]	@ (8004f3c <LR03_AT+0x18>)
 8004f2e:	f009 ffc7 	bl	800eec0 <HAL_UART_Transmit_IT>
}
 8004f32:	bf00      	nop
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	08019a8c 	.word	0x08019a8c
 8004f3c:	240011f0 	.word	0x240011f0

08004f40 <LR03_Level>:

void LR03_Level(uint8_t Level){
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	4603      	mov	r3, r0
 8004f48:	71fb      	strb	r3, [r7, #7]
	static uint8_t Level_Command[] = {"AT+LEVEL7\r\n"};
	if(Level > 7) Level = 7;
 8004f4a:	79fb      	ldrb	r3, [r7, #7]
 8004f4c:	2b07      	cmp	r3, #7
 8004f4e:	d901      	bls.n	8004f54 <LR03_Level+0x14>
 8004f50:	2307      	movs	r3, #7
 8004f52:	71fb      	strb	r3, [r7, #7]
	if(Level < 1) Level = 1;
 8004f54:	79fb      	ldrb	r3, [r7, #7]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <LR03_Level+0x1e>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	71fb      	strb	r3, [r7, #7]
	Level_Command[8] = Level + 48;
 8004f5e:	79fb      	ldrb	r3, [r7, #7]
 8004f60:	3330      	adds	r3, #48	@ 0x30
 8004f62:	b2da      	uxtb	r2, r3
 8004f64:	4b05      	ldr	r3, [pc, #20]	@ (8004f7c <LR03_Level+0x3c>)
 8004f66:	721a      	strb	r2, [r3, #8]
	HAL_UART_Transmit_IT(&huart6, Level_Command, 11);
 8004f68:	220b      	movs	r2, #11
 8004f6a:	4904      	ldr	r1, [pc, #16]	@ (8004f7c <LR03_Level+0x3c>)
 8004f6c:	4804      	ldr	r0, [pc, #16]	@ (8004f80 <LR03_Level+0x40>)
 8004f6e:	f009 ffa7 	bl	800eec0 <HAL_UART_Transmit_IT>
}
 8004f72:	bf00      	nop
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	2400000c 	.word	0x2400000c
 8004f80:	240011f0 	.word	0x240011f0

08004f84 <LR03_Receive>:

void LR03_Receive(uint8_t Data){
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	71fb      	strb	r3, [r7, #7]
	static uint8_t DataPointer = 0;
	LR03_RxBuffer[DataPointer] = Data;
 8004f8e:	4b09      	ldr	r3, [pc, #36]	@ (8004fb4 <LR03_Receive+0x30>)
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	4619      	mov	r1, r3
 8004f94:	4a08      	ldr	r2, [pc, #32]	@ (8004fb8 <LR03_Receive+0x34>)
 8004f96:	79fb      	ldrb	r3, [r7, #7]
 8004f98:	5453      	strb	r3, [r2, r1]
	DataPointer++;
 8004f9a:	4b06      	ldr	r3, [pc, #24]	@ (8004fb4 <LR03_Receive+0x30>)
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	b2da      	uxtb	r2, r3
 8004fa2:	4b04      	ldr	r3, [pc, #16]	@ (8004fb4 <LR03_Receive+0x30>)
 8004fa4:	701a      	strb	r2, [r3, #0]
}
 8004fa6:	bf00      	nop
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	24001691 	.word	0x24001691
 8004fb8:	24001590 	.word	0x24001590

08004fbc <LR03_StateMachine>:

void LR03_StateMachine(void){
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	af00      	add	r7, sp, #0

	switch (Test_1) {
 8004fc0:	4b09      	ldr	r3, [pc, #36]	@ (8004fe8 <LR03_StateMachine+0x2c>)
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d002      	beq.n	8004fce <LR03_StateMachine+0x12>
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d003      	beq.n	8004fd4 <LR03_StateMachine+0x18>
			break;
		case 2:
			LR03_Level(7);
			break;
		default:
			break;
 8004fcc:	e006      	b.n	8004fdc <LR03_StateMachine+0x20>
			LR03_AT();
 8004fce:	f7ff ffa9 	bl	8004f24 <LR03_AT>
			break;
 8004fd2:	e003      	b.n	8004fdc <LR03_StateMachine+0x20>
			LR03_Level(7);
 8004fd4:	2007      	movs	r0, #7
 8004fd6:	f7ff ffb3 	bl	8004f40 <LR03_Level>
			break;
 8004fda:	bf00      	nop
	}
	Test_1 = 0;
 8004fdc:	4b02      	ldr	r3, [pc, #8]	@ (8004fe8 <LR03_StateMachine+0x2c>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	701a      	strb	r2, [r3, #0]
}
 8004fe2:	bf00      	nop
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	24001690 	.word	0x24001690

08004fec <PWM_Assign>:
Servo_mgmt_s PWM_Output = {
	    .S = {1500, 1500, 1500, 1500, 1500,
	          1500, 1500, 1500, 1500, 1500}
	};

void PWM_Assign(void) {
 8004fec:	b580      	push	{r7, lr}
 8004fee:	af00      	add	r7, sp, #0
    // Timer 2 (Canales 1, 2, 10, 9)
    TIM2->CCR1 = PWM_Output.S[0];  // Canal_1 (S[0])
 8004ff0:	4b2a      	ldr	r3, [pc, #168]	@ (800509c <PWM_Assign+0xb0>)
 8004ff2:	881a      	ldrh	r2, [r3, #0]
 8004ff4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004ff8:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2->CCR2 = PWM_Output.S[1];  // Canal_2 (S[1])
 8004ffa:	4b28      	ldr	r3, [pc, #160]	@ (800509c <PWM_Assign+0xb0>)
 8004ffc:	885a      	ldrh	r2, [r3, #2]
 8004ffe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005002:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM2->CCR3 = PWM_Output.S[9];  // Canal_10 (S[9])
 8005004:	4b25      	ldr	r3, [pc, #148]	@ (800509c <PWM_Assign+0xb0>)
 8005006:	8a5a      	ldrh	r2, [r3, #18]
 8005008:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800500c:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2->CCR4 = PWM_Output.S[8];  // Canal_9 (S[8])
 800500e:	4b23      	ldr	r3, [pc, #140]	@ (800509c <PWM_Assign+0xb0>)
 8005010:	8a1a      	ldrh	r2, [r3, #16]
 8005012:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005016:	641a      	str	r2, [r3, #64]	@ 0x40

    // Timer 3 (Canales 3, 4)
    TIM3->CCR1 = PWM_Output.S[2];  // Canal_3 (S[2])
 8005018:	4b20      	ldr	r3, [pc, #128]	@ (800509c <PWM_Assign+0xb0>)
 800501a:	889a      	ldrh	r2, [r3, #4]
 800501c:	4b20      	ldr	r3, [pc, #128]	@ (80050a0 <PWM_Assign+0xb4>)
 800501e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3->CCR2 = PWM_Output.S[3];  // Canal_4 (S[3])
 8005020:	4b1e      	ldr	r3, [pc, #120]	@ (800509c <PWM_Assign+0xb0>)
 8005022:	88da      	ldrh	r2, [r3, #6]
 8005024:	4b1e      	ldr	r3, [pc, #120]	@ (80050a0 <PWM_Assign+0xb4>)
 8005026:	639a      	str	r2, [r3, #56]	@ 0x38

    // Timer 4 (Canales 5-8)
    TIM4->CCR1 = PWM_Output.S[4];  // Canal_5 (S[4])
 8005028:	4b1c      	ldr	r3, [pc, #112]	@ (800509c <PWM_Assign+0xb0>)
 800502a:	891a      	ldrh	r2, [r3, #8]
 800502c:	4b1d      	ldr	r3, [pc, #116]	@ (80050a4 <PWM_Assign+0xb8>)
 800502e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM4->CCR2 = PWM_Output.S[5];  // Canal_6 (S[5])
 8005030:	4b1a      	ldr	r3, [pc, #104]	@ (800509c <PWM_Assign+0xb0>)
 8005032:	895a      	ldrh	r2, [r3, #10]
 8005034:	4b1b      	ldr	r3, [pc, #108]	@ (80050a4 <PWM_Assign+0xb8>)
 8005036:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM4->CCR3 = PWM_Output.S[6];  // Canal_7 (S[6])
 8005038:	4b18      	ldr	r3, [pc, #96]	@ (800509c <PWM_Assign+0xb0>)
 800503a:	899a      	ldrh	r2, [r3, #12]
 800503c:	4b19      	ldr	r3, [pc, #100]	@ (80050a4 <PWM_Assign+0xb8>)
 800503e:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM4->CCR4 = PWM_Output.S[7];  // Canal_8 (S[7])
 8005040:	4b16      	ldr	r3, [pc, #88]	@ (800509c <PWM_Assign+0xb0>)
 8005042:	89da      	ldrh	r2, [r3, #14]
 8005044:	4b17      	ldr	r3, [pc, #92]	@ (80050a4 <PWM_Assign+0xb8>)
 8005046:	641a      	str	r2, [r3, #64]	@ 0x40

    // Iniciar PWM (igual que antes)
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8005048:	2100      	movs	r1, #0
 800504a:	4817      	ldr	r0, [pc, #92]	@ (80050a8 <PWM_Assign+0xbc>)
 800504c:	f008 feba 	bl	800ddc4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8005050:	2104      	movs	r1, #4
 8005052:	4815      	ldr	r0, [pc, #84]	@ (80050a8 <PWM_Assign+0xbc>)
 8005054:	f008 feb6 	bl	800ddc4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8005058:	2108      	movs	r1, #8
 800505a:	4813      	ldr	r0, [pc, #76]	@ (80050a8 <PWM_Assign+0xbc>)
 800505c:	f008 feb2 	bl	800ddc4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8005060:	210c      	movs	r1, #12
 8005062:	4811      	ldr	r0, [pc, #68]	@ (80050a8 <PWM_Assign+0xbc>)
 8005064:	f008 feae 	bl	800ddc4 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8005068:	2100      	movs	r1, #0
 800506a:	4810      	ldr	r0, [pc, #64]	@ (80050ac <PWM_Assign+0xc0>)
 800506c:	f008 feaa 	bl	800ddc4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8005070:	2104      	movs	r1, #4
 8005072:	480e      	ldr	r0, [pc, #56]	@ (80050ac <PWM_Assign+0xc0>)
 8005074:	f008 fea6 	bl	800ddc4 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8005078:	2100      	movs	r1, #0
 800507a:	480d      	ldr	r0, [pc, #52]	@ (80050b0 <PWM_Assign+0xc4>)
 800507c:	f008 fea2 	bl	800ddc4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8005080:	2104      	movs	r1, #4
 8005082:	480b      	ldr	r0, [pc, #44]	@ (80050b0 <PWM_Assign+0xc4>)
 8005084:	f008 fe9e 	bl	800ddc4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8005088:	2108      	movs	r1, #8
 800508a:	4809      	ldr	r0, [pc, #36]	@ (80050b0 <PWM_Assign+0xc4>)
 800508c:	f008 fe9a 	bl	800ddc4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8005090:	210c      	movs	r1, #12
 8005092:	4807      	ldr	r0, [pc, #28]	@ (80050b0 <PWM_Assign+0xc4>)
 8005094:	f008 fe96 	bl	800ddc4 <HAL_TIM_PWM_Start>
}
 8005098:	bf00      	nop
 800509a:	bd80      	pop	{r7, pc}
 800509c:	24000018 	.word	0x24000018
 80050a0:	40000400 	.word	0x40000400
 80050a4:	40000800 	.word	0x40000800
 80050a8:	24000f04 	.word	0x24000f04
 80050ac:	24000f50 	.word	0x24000f50
 80050b0:	24000f9c 	.word	0x24000f9c

080050b4 <SBUS_init>:

extern UART_HandleTypeDef huart1;
#define SBUS_UART_handler &huart1


void SBUS_init(void){
 80050b4:	b580      	push	{r7, lr}
 80050b6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(SBUS_UART_handler, &SBUS_RxBuffer, 1);
 80050b8:	2201      	movs	r2, #1
 80050ba:	4903      	ldr	r1, [pc, #12]	@ (80050c8 <SBUS_init+0x14>)
 80050bc:	4803      	ldr	r0, [pc, #12]	@ (80050cc <SBUS_init+0x18>)
 80050be:	f009 ffdf 	bl	800f080 <HAL_UART_Receive_DMA>

}
 80050c2:	bf00      	nop
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	240016ad 	.word	0x240016ad
 80050cc:	240010c8 	.word	0x240010c8

080050d0 <SBUS_Receive>:

void SBUS_Receive(uint8_t SBUS_RxBuffer){
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	4603      	mov	r3, r0
 80050d8:	71fb      	strb	r3, [r7, #7]
	static uint8_t Actual_status = 0;
	static uint8_t RxCount;

	switch (Actual_status) {
 80050da:	4b20      	ldr	r3, [pc, #128]	@ (800515c <SBUS_Receive+0x8c>)
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d002      	beq.n	80050e8 <SBUS_Receive+0x18>
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d017      	beq.n	8005116 <SBUS_Receive+0x46>
 80050e6:	e02f      	b.n	8005148 <SBUS_Receive+0x78>
		case 0:
			if(SBUS_RxBuffer == 0x0F){
 80050e8:	79fb      	ldrb	r3, [r7, #7]
 80050ea:	2b0f      	cmp	r3, #15
 80050ec:	d10f      	bne.n	800510e <SBUS_Receive+0x3e>
				SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 80050ee:	4b1c      	ldr	r3, [pc, #112]	@ (8005160 <SBUS_Receive+0x90>)
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	4619      	mov	r1, r3
 80050f4:	4a1b      	ldr	r2, [pc, #108]	@ (8005164 <SBUS_Receive+0x94>)
 80050f6:	79fb      	ldrb	r3, [r7, #7]
 80050f8:	5453      	strb	r3, [r2, r1]
				Actual_status = 1;
 80050fa:	4b18      	ldr	r3, [pc, #96]	@ (800515c <SBUS_Receive+0x8c>)
 80050fc:	2201      	movs	r2, #1
 80050fe:	701a      	strb	r2, [r3, #0]
				RxCount++;
 8005100:	4b17      	ldr	r3, [pc, #92]	@ (8005160 <SBUS_Receive+0x90>)
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	3301      	adds	r3, #1
 8005106:	b2da      	uxtb	r2, r3
 8005108:	4b15      	ldr	r3, [pc, #84]	@ (8005160 <SBUS_Receive+0x90>)
 800510a:	701a      	strb	r2, [r3, #0]
			}
			else{
				RxCount = 0;
			}
			break;
 800510c:	e021      	b.n	8005152 <SBUS_Receive+0x82>
				RxCount = 0;
 800510e:	4b14      	ldr	r3, [pc, #80]	@ (8005160 <SBUS_Receive+0x90>)
 8005110:	2200      	movs	r2, #0
 8005112:	701a      	strb	r2, [r3, #0]
			break;
 8005114:	e01d      	b.n	8005152 <SBUS_Receive+0x82>
		case 1:
			SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 8005116:	4b12      	ldr	r3, [pc, #72]	@ (8005160 <SBUS_Receive+0x90>)
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	4619      	mov	r1, r3
 800511c:	4a11      	ldr	r2, [pc, #68]	@ (8005164 <SBUS_Receive+0x94>)
 800511e:	79fb      	ldrb	r3, [r7, #7]
 8005120:	5453      	strb	r3, [r2, r1]
			RxCount++;
 8005122:	4b0f      	ldr	r3, [pc, #60]	@ (8005160 <SBUS_Receive+0x90>)
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	3301      	adds	r3, #1
 8005128:	b2da      	uxtb	r2, r3
 800512a:	4b0d      	ldr	r3, [pc, #52]	@ (8005160 <SBUS_Receive+0x90>)
 800512c:	701a      	strb	r2, [r3, #0]
			if(RxCount == 24){
 800512e:	4b0c      	ldr	r3, [pc, #48]	@ (8005160 <SBUS_Receive+0x90>)
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	2b18      	cmp	r3, #24
 8005134:	d10c      	bne.n	8005150 <SBUS_Receive+0x80>
				RxCount = 0;
 8005136:	4b0a      	ldr	r3, [pc, #40]	@ (8005160 <SBUS_Receive+0x90>)
 8005138:	2200      	movs	r2, #0
 800513a:	701a      	strb	r2, [r3, #0]
				Actual_status = 0;
 800513c:	4b07      	ldr	r3, [pc, #28]	@ (800515c <SBUS_Receive+0x8c>)
 800513e:	2200      	movs	r2, #0
 8005140:	701a      	strb	r2, [r3, #0]
				SBUS_getData();
 8005142:	f000 f811 	bl	8005168 <SBUS_getData>
			}
			break;
 8005146:	e003      	b.n	8005150 <SBUS_Receive+0x80>
		default:
			Actual_status = 0;
 8005148:	4b04      	ldr	r3, [pc, #16]	@ (800515c <SBUS_Receive+0x8c>)
 800514a:	2200      	movs	r2, #0
 800514c:	701a      	strb	r2, [r3, #0]
			break;
 800514e:	e000      	b.n	8005152 <SBUS_Receive+0x82>
			break;
 8005150:	bf00      	nop
	}
}
 8005152:	bf00      	nop
 8005154:	3708      	adds	r7, #8
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	240016ae 	.word	0x240016ae
 8005160:	240016af 	.word	0x240016af
 8005164:	24001694 	.word	0x24001694

08005168 <SBUS_getData>:


void SBUS_getData(void){
 8005168:	b480      	push	{r7}
 800516a:	af00      	add	r7, sp, #0
	//Se hace el corrimiento de bits para dar la estructura de los 16 canales, donde cada canal esta compuesto por 11 bits
	//pero cada paquete es de 1 byte. Para cada canal se utilizan los 8 bits (O los que correspondan) de el byte 1
	//(O el que corresponda) como los bits menos significativos del canal 1, y los tres bits faltantes se toman los 3 bits
	// menos significativos (O los que correspondan) del byte 2 y se colocan como los 3 bits más significativos del canal 1.
	Radio_input.Canal_1 = ((SBUS_UART_Rx[1] | SBUS_UART_Rx[2] << 8) & 0x07FF);
 800516c:	4b93      	ldr	r3, [pc, #588]	@ (80053bc <SBUS_getData+0x254>)
 800516e:	785b      	ldrb	r3, [r3, #1]
 8005170:	b21a      	sxth	r2, r3
 8005172:	4b92      	ldr	r3, [pc, #584]	@ (80053bc <SBUS_getData+0x254>)
 8005174:	789b      	ldrb	r3, [r3, #2]
 8005176:	b21b      	sxth	r3, r3
 8005178:	021b      	lsls	r3, r3, #8
 800517a:	b21b      	sxth	r3, r3
 800517c:	4313      	orrs	r3, r2
 800517e:	b21b      	sxth	r3, r3
 8005180:	b29b      	uxth	r3, r3
 8005182:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005186:	b29a      	uxth	r2, r3
 8005188:	4b8d      	ldr	r3, [pc, #564]	@ (80053c0 <SBUS_getData+0x258>)
 800518a:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_2 = ((SBUS_UART_Rx[2] >> 3 | SBUS_UART_Rx[3] << 5) & 0x07FF);
 800518c:	4b8b      	ldr	r3, [pc, #556]	@ (80053bc <SBUS_getData+0x254>)
 800518e:	789b      	ldrb	r3, [r3, #2]
 8005190:	08db      	lsrs	r3, r3, #3
 8005192:	b2db      	uxtb	r3, r3
 8005194:	b21a      	sxth	r2, r3
 8005196:	4b89      	ldr	r3, [pc, #548]	@ (80053bc <SBUS_getData+0x254>)
 8005198:	78db      	ldrb	r3, [r3, #3]
 800519a:	b21b      	sxth	r3, r3
 800519c:	015b      	lsls	r3, r3, #5
 800519e:	b21b      	sxth	r3, r3
 80051a0:	4313      	orrs	r3, r2
 80051a2:	b21b      	sxth	r3, r3
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	4b84      	ldr	r3, [pc, #528]	@ (80053c0 <SBUS_getData+0x258>)
 80051ae:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_3 = ((SBUS_UART_Rx[3] >> 6 | SBUS_UART_Rx[4] << 2 | SBUS_UART_Rx[5] << 10) & 0x07FF);
 80051b0:	4b82      	ldr	r3, [pc, #520]	@ (80053bc <SBUS_getData+0x254>)
 80051b2:	78db      	ldrb	r3, [r3, #3]
 80051b4:	099b      	lsrs	r3, r3, #6
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	b21a      	sxth	r2, r3
 80051ba:	4b80      	ldr	r3, [pc, #512]	@ (80053bc <SBUS_getData+0x254>)
 80051bc:	791b      	ldrb	r3, [r3, #4]
 80051be:	b21b      	sxth	r3, r3
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	b21b      	sxth	r3, r3
 80051c4:	4313      	orrs	r3, r2
 80051c6:	b21a      	sxth	r2, r3
 80051c8:	4b7c      	ldr	r3, [pc, #496]	@ (80053bc <SBUS_getData+0x254>)
 80051ca:	795b      	ldrb	r3, [r3, #5]
 80051cc:	b21b      	sxth	r3, r3
 80051ce:	029b      	lsls	r3, r3, #10
 80051d0:	b21b      	sxth	r3, r3
 80051d2:	4313      	orrs	r3, r2
 80051d4:	b21b      	sxth	r3, r3
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051dc:	b29a      	uxth	r2, r3
 80051de:	4b78      	ldr	r3, [pc, #480]	@ (80053c0 <SBUS_getData+0x258>)
 80051e0:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_4 = ((SBUS_UART_Rx[5] >> 1 | SBUS_UART_Rx[6] << 7) & 0x07FF);
 80051e2:	4b76      	ldr	r3, [pc, #472]	@ (80053bc <SBUS_getData+0x254>)
 80051e4:	795b      	ldrb	r3, [r3, #5]
 80051e6:	085b      	lsrs	r3, r3, #1
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	b21a      	sxth	r2, r3
 80051ec:	4b73      	ldr	r3, [pc, #460]	@ (80053bc <SBUS_getData+0x254>)
 80051ee:	799b      	ldrb	r3, [r3, #6]
 80051f0:	b21b      	sxth	r3, r3
 80051f2:	01db      	lsls	r3, r3, #7
 80051f4:	b21b      	sxth	r3, r3
 80051f6:	4313      	orrs	r3, r2
 80051f8:	b21b      	sxth	r3, r3
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005200:	b29a      	uxth	r2, r3
 8005202:	4b6f      	ldr	r3, [pc, #444]	@ (80053c0 <SBUS_getData+0x258>)
 8005204:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_5 = ((SBUS_UART_Rx[6] >> 4 | SBUS_UART_Rx[7] << 4) & 0x07FF);
 8005206:	4b6d      	ldr	r3, [pc, #436]	@ (80053bc <SBUS_getData+0x254>)
 8005208:	799b      	ldrb	r3, [r3, #6]
 800520a:	091b      	lsrs	r3, r3, #4
 800520c:	b2db      	uxtb	r3, r3
 800520e:	b21a      	sxth	r2, r3
 8005210:	4b6a      	ldr	r3, [pc, #424]	@ (80053bc <SBUS_getData+0x254>)
 8005212:	79db      	ldrb	r3, [r3, #7]
 8005214:	b21b      	sxth	r3, r3
 8005216:	011b      	lsls	r3, r3, #4
 8005218:	b21b      	sxth	r3, r3
 800521a:	4313      	orrs	r3, r2
 800521c:	b21b      	sxth	r3, r3
 800521e:	b29b      	uxth	r3, r3
 8005220:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005224:	b29a      	uxth	r2, r3
 8005226:	4b66      	ldr	r3, [pc, #408]	@ (80053c0 <SBUS_getData+0x258>)
 8005228:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_6 = ((SBUS_UART_Rx[7] >> 7 | SBUS_UART_Rx[8] << 1 | SBUS_UART_Rx[9] << 9) & 0x07FF);
 800522a:	4b64      	ldr	r3, [pc, #400]	@ (80053bc <SBUS_getData+0x254>)
 800522c:	79db      	ldrb	r3, [r3, #7]
 800522e:	09db      	lsrs	r3, r3, #7
 8005230:	b2db      	uxtb	r3, r3
 8005232:	b21a      	sxth	r2, r3
 8005234:	4b61      	ldr	r3, [pc, #388]	@ (80053bc <SBUS_getData+0x254>)
 8005236:	7a1b      	ldrb	r3, [r3, #8]
 8005238:	b21b      	sxth	r3, r3
 800523a:	005b      	lsls	r3, r3, #1
 800523c:	b21b      	sxth	r3, r3
 800523e:	4313      	orrs	r3, r2
 8005240:	b21a      	sxth	r2, r3
 8005242:	4b5e      	ldr	r3, [pc, #376]	@ (80053bc <SBUS_getData+0x254>)
 8005244:	7a5b      	ldrb	r3, [r3, #9]
 8005246:	b21b      	sxth	r3, r3
 8005248:	025b      	lsls	r3, r3, #9
 800524a:	b21b      	sxth	r3, r3
 800524c:	4313      	orrs	r3, r2
 800524e:	b21b      	sxth	r3, r3
 8005250:	b29b      	uxth	r3, r3
 8005252:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005256:	b29a      	uxth	r2, r3
 8005258:	4b59      	ldr	r3, [pc, #356]	@ (80053c0 <SBUS_getData+0x258>)
 800525a:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_7 = ((SBUS_UART_Rx[9] >> 2 | SBUS_UART_Rx[10] << 6) & 0x07FF);
 800525c:	4b57      	ldr	r3, [pc, #348]	@ (80053bc <SBUS_getData+0x254>)
 800525e:	7a5b      	ldrb	r3, [r3, #9]
 8005260:	089b      	lsrs	r3, r3, #2
 8005262:	b2db      	uxtb	r3, r3
 8005264:	b21a      	sxth	r2, r3
 8005266:	4b55      	ldr	r3, [pc, #340]	@ (80053bc <SBUS_getData+0x254>)
 8005268:	7a9b      	ldrb	r3, [r3, #10]
 800526a:	b21b      	sxth	r3, r3
 800526c:	019b      	lsls	r3, r3, #6
 800526e:	b21b      	sxth	r3, r3
 8005270:	4313      	orrs	r3, r2
 8005272:	b21b      	sxth	r3, r3
 8005274:	b29b      	uxth	r3, r3
 8005276:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800527a:	b29a      	uxth	r2, r3
 800527c:	4b50      	ldr	r3, [pc, #320]	@ (80053c0 <SBUS_getData+0x258>)
 800527e:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_8 = ((SBUS_UART_Rx[10] >> 5 | SBUS_UART_Rx[11] << 3) & 0x07FF);
 8005280:	4b4e      	ldr	r3, [pc, #312]	@ (80053bc <SBUS_getData+0x254>)
 8005282:	7a9b      	ldrb	r3, [r3, #10]
 8005284:	095b      	lsrs	r3, r3, #5
 8005286:	b2db      	uxtb	r3, r3
 8005288:	b21a      	sxth	r2, r3
 800528a:	4b4c      	ldr	r3, [pc, #304]	@ (80053bc <SBUS_getData+0x254>)
 800528c:	7adb      	ldrb	r3, [r3, #11]
 800528e:	b21b      	sxth	r3, r3
 8005290:	00db      	lsls	r3, r3, #3
 8005292:	b21b      	sxth	r3, r3
 8005294:	4313      	orrs	r3, r2
 8005296:	b21b      	sxth	r3, r3
 8005298:	b29b      	uxth	r3, r3
 800529a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800529e:	b29a      	uxth	r2, r3
 80052a0:	4b47      	ldr	r3, [pc, #284]	@ (80053c0 <SBUS_getData+0x258>)
 80052a2:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_9 = ((SBUS_UART_Rx[12] | SBUS_UART_Rx[13] << 8) & 0x07FF);
 80052a4:	4b45      	ldr	r3, [pc, #276]	@ (80053bc <SBUS_getData+0x254>)
 80052a6:	7b1b      	ldrb	r3, [r3, #12]
 80052a8:	b21a      	sxth	r2, r3
 80052aa:	4b44      	ldr	r3, [pc, #272]	@ (80053bc <SBUS_getData+0x254>)
 80052ac:	7b5b      	ldrb	r3, [r3, #13]
 80052ae:	b21b      	sxth	r3, r3
 80052b0:	021b      	lsls	r3, r3, #8
 80052b2:	b21b      	sxth	r3, r3
 80052b4:	4313      	orrs	r3, r2
 80052b6:	b21b      	sxth	r3, r3
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052be:	b29a      	uxth	r2, r3
 80052c0:	4b3f      	ldr	r3, [pc, #252]	@ (80053c0 <SBUS_getData+0x258>)
 80052c2:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_10 = ((SBUS_UART_Rx[13] >> 3 | SBUS_UART_Rx[14] << 5) & 0x07FF);
 80052c4:	4b3d      	ldr	r3, [pc, #244]	@ (80053bc <SBUS_getData+0x254>)
 80052c6:	7b5b      	ldrb	r3, [r3, #13]
 80052c8:	08db      	lsrs	r3, r3, #3
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	b21a      	sxth	r2, r3
 80052ce:	4b3b      	ldr	r3, [pc, #236]	@ (80053bc <SBUS_getData+0x254>)
 80052d0:	7b9b      	ldrb	r3, [r3, #14]
 80052d2:	b21b      	sxth	r3, r3
 80052d4:	015b      	lsls	r3, r3, #5
 80052d6:	b21b      	sxth	r3, r3
 80052d8:	4313      	orrs	r3, r2
 80052da:	b21b      	sxth	r3, r3
 80052dc:	b29b      	uxth	r3, r3
 80052de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	4b36      	ldr	r3, [pc, #216]	@ (80053c0 <SBUS_getData+0x258>)
 80052e6:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_11 = ((SBUS_UART_Rx[14] >> 6 | SBUS_UART_Rx[15] << 2 | SBUS_UART_Rx[16] << 10) & 0x07FF);
 80052e8:	4b34      	ldr	r3, [pc, #208]	@ (80053bc <SBUS_getData+0x254>)
 80052ea:	7b9b      	ldrb	r3, [r3, #14]
 80052ec:	099b      	lsrs	r3, r3, #6
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	b21a      	sxth	r2, r3
 80052f2:	4b32      	ldr	r3, [pc, #200]	@ (80053bc <SBUS_getData+0x254>)
 80052f4:	7bdb      	ldrb	r3, [r3, #15]
 80052f6:	b21b      	sxth	r3, r3
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	b21b      	sxth	r3, r3
 80052fc:	4313      	orrs	r3, r2
 80052fe:	b21a      	sxth	r2, r3
 8005300:	4b2e      	ldr	r3, [pc, #184]	@ (80053bc <SBUS_getData+0x254>)
 8005302:	7c1b      	ldrb	r3, [r3, #16]
 8005304:	b21b      	sxth	r3, r3
 8005306:	029b      	lsls	r3, r3, #10
 8005308:	b21b      	sxth	r3, r3
 800530a:	4313      	orrs	r3, r2
 800530c:	b21b      	sxth	r3, r3
 800530e:	b29b      	uxth	r3, r3
 8005310:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005314:	b29a      	uxth	r2, r3
 8005316:	4b2a      	ldr	r3, [pc, #168]	@ (80053c0 <SBUS_getData+0x258>)
 8005318:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_12 = ((SBUS_UART_Rx[16] >> 1 | SBUS_UART_Rx[17] << 7) & 0x07FF);
 800531a:	4b28      	ldr	r3, [pc, #160]	@ (80053bc <SBUS_getData+0x254>)
 800531c:	7c1b      	ldrb	r3, [r3, #16]
 800531e:	085b      	lsrs	r3, r3, #1
 8005320:	b2db      	uxtb	r3, r3
 8005322:	b21a      	sxth	r2, r3
 8005324:	4b25      	ldr	r3, [pc, #148]	@ (80053bc <SBUS_getData+0x254>)
 8005326:	7c5b      	ldrb	r3, [r3, #17]
 8005328:	b21b      	sxth	r3, r3
 800532a:	01db      	lsls	r3, r3, #7
 800532c:	b21b      	sxth	r3, r3
 800532e:	4313      	orrs	r3, r2
 8005330:	b21b      	sxth	r3, r3
 8005332:	b29b      	uxth	r3, r3
 8005334:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005338:	b29a      	uxth	r2, r3
 800533a:	4b21      	ldr	r3, [pc, #132]	@ (80053c0 <SBUS_getData+0x258>)
 800533c:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_13 = ((SBUS_UART_Rx[17] >> 4 | SBUS_UART_Rx[18] << 4) & 0x07FF);
 800533e:	4b1f      	ldr	r3, [pc, #124]	@ (80053bc <SBUS_getData+0x254>)
 8005340:	7c5b      	ldrb	r3, [r3, #17]
 8005342:	091b      	lsrs	r3, r3, #4
 8005344:	b2db      	uxtb	r3, r3
 8005346:	b21a      	sxth	r2, r3
 8005348:	4b1c      	ldr	r3, [pc, #112]	@ (80053bc <SBUS_getData+0x254>)
 800534a:	7c9b      	ldrb	r3, [r3, #18]
 800534c:	b21b      	sxth	r3, r3
 800534e:	011b      	lsls	r3, r3, #4
 8005350:	b21b      	sxth	r3, r3
 8005352:	4313      	orrs	r3, r2
 8005354:	b21b      	sxth	r3, r3
 8005356:	b29b      	uxth	r3, r3
 8005358:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800535c:	b29a      	uxth	r2, r3
 800535e:	4b18      	ldr	r3, [pc, #96]	@ (80053c0 <SBUS_getData+0x258>)
 8005360:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_14 = ((SBUS_UART_Rx[18] >> 7 | SBUS_UART_Rx[19] << 1 | SBUS_UART_Rx[20] << 9) & 0x07FF);
 8005362:	4b16      	ldr	r3, [pc, #88]	@ (80053bc <SBUS_getData+0x254>)
 8005364:	7c9b      	ldrb	r3, [r3, #18]
 8005366:	09db      	lsrs	r3, r3, #7
 8005368:	b2db      	uxtb	r3, r3
 800536a:	b21a      	sxth	r2, r3
 800536c:	4b13      	ldr	r3, [pc, #76]	@ (80053bc <SBUS_getData+0x254>)
 800536e:	7cdb      	ldrb	r3, [r3, #19]
 8005370:	b21b      	sxth	r3, r3
 8005372:	005b      	lsls	r3, r3, #1
 8005374:	b21b      	sxth	r3, r3
 8005376:	4313      	orrs	r3, r2
 8005378:	b21a      	sxth	r2, r3
 800537a:	4b10      	ldr	r3, [pc, #64]	@ (80053bc <SBUS_getData+0x254>)
 800537c:	7d1b      	ldrb	r3, [r3, #20]
 800537e:	b21b      	sxth	r3, r3
 8005380:	025b      	lsls	r3, r3, #9
 8005382:	b21b      	sxth	r3, r3
 8005384:	4313      	orrs	r3, r2
 8005386:	b21b      	sxth	r3, r3
 8005388:	b29b      	uxth	r3, r3
 800538a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800538e:	b29a      	uxth	r2, r3
 8005390:	4b0b      	ldr	r3, [pc, #44]	@ (80053c0 <SBUS_getData+0x258>)
 8005392:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_15 = ((SBUS_UART_Rx[20] >> 2 | SBUS_UART_Rx[21] << 6) & 0x07FF);
 8005394:	4b09      	ldr	r3, [pc, #36]	@ (80053bc <SBUS_getData+0x254>)
 8005396:	7d1b      	ldrb	r3, [r3, #20]
 8005398:	089b      	lsrs	r3, r3, #2
 800539a:	b2db      	uxtb	r3, r3
 800539c:	b21a      	sxth	r2, r3
 800539e:	4b07      	ldr	r3, [pc, #28]	@ (80053bc <SBUS_getData+0x254>)
 80053a0:	7d5b      	ldrb	r3, [r3, #21]
 80053a2:	b21b      	sxth	r3, r3
 80053a4:	019b      	lsls	r3, r3, #6
 80053a6:	b21b      	sxth	r3, r3
 80053a8:	4313      	orrs	r3, r2
 80053aa:	b21b      	sxth	r3, r3
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	4b02      	ldr	r3, [pc, #8]	@ (80053c0 <SBUS_getData+0x258>)
 80053b6:	83da      	strh	r2, [r3, #30]
 80053b8:	e004      	b.n	80053c4 <SBUS_getData+0x25c>
 80053ba:	bf00      	nop
 80053bc:	24001694 	.word	0x24001694
 80053c0:	2400002c 	.word	0x2400002c
	Radio_input.Canal_16 = ((SBUS_UART_Rx[21] >> 5 | SBUS_UART_Rx[22] << 3) & 0x07FF);
 80053c4:	4bcd      	ldr	r3, [pc, #820]	@ (80056fc <SBUS_getData+0x594>)
 80053c6:	7d5b      	ldrb	r3, [r3, #21]
 80053c8:	095b      	lsrs	r3, r3, #5
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	b21a      	sxth	r2, r3
 80053ce:	4bcb      	ldr	r3, [pc, #812]	@ (80056fc <SBUS_getData+0x594>)
 80053d0:	7d9b      	ldrb	r3, [r3, #22]
 80053d2:	b21b      	sxth	r3, r3
 80053d4:	00db      	lsls	r3, r3, #3
 80053d6:	b21b      	sxth	r3, r3
 80053d8:	4313      	orrs	r3, r2
 80053da:	b21b      	sxth	r3, r3
 80053dc:	b29b      	uxth	r3, r3
 80053de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	4bc6      	ldr	r3, [pc, #792]	@ (8005700 <SBUS_getData+0x598>)
 80053e6:	841a      	strh	r2, [r3, #32]

	Radio_input.Canal_1 = (uint16_t)((((float)Radio_input.Canal_1 - 352) /1344 ) * 1000) + 1000;
 80053e8:	4bc5      	ldr	r3, [pc, #788]	@ (8005700 <SBUS_getData+0x598>)
 80053ea:	885b      	ldrh	r3, [r3, #2]
 80053ec:	ee07 3a90 	vmov	s15, r3
 80053f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053f4:	ed9f 7ac3 	vldr	s14, [pc, #780]	@ 8005704 <SBUS_getData+0x59c>
 80053f8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80053fc:	eddf 6ac2 	vldr	s13, [pc, #776]	@ 8005708 <SBUS_getData+0x5a0>
 8005400:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005404:	ed9f 7ac1 	vldr	s14, [pc, #772]	@ 800570c <SBUS_getData+0x5a4>
 8005408:	ee67 7a87 	vmul.f32	s15, s15, s14
 800540c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005410:	ee17 3a90 	vmov	r3, s15
 8005414:	b29b      	uxth	r3, r3
 8005416:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800541a:	b29a      	uxth	r2, r3
 800541c:	4bb8      	ldr	r3, [pc, #736]	@ (8005700 <SBUS_getData+0x598>)
 800541e:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_2 = (uint16_t)((((float)Radio_input.Canal_2 - 352) /1344 ) * 1000) + 1000;
 8005420:	4bb7      	ldr	r3, [pc, #732]	@ (8005700 <SBUS_getData+0x598>)
 8005422:	889b      	ldrh	r3, [r3, #4]
 8005424:	ee07 3a90 	vmov	s15, r3
 8005428:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800542c:	ed9f 7ab5 	vldr	s14, [pc, #724]	@ 8005704 <SBUS_getData+0x59c>
 8005430:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005434:	eddf 6ab4 	vldr	s13, [pc, #720]	@ 8005708 <SBUS_getData+0x5a0>
 8005438:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800543c:	ed9f 7ab3 	vldr	s14, [pc, #716]	@ 800570c <SBUS_getData+0x5a4>
 8005440:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005444:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005448:	ee17 3a90 	vmov	r3, s15
 800544c:	b29b      	uxth	r3, r3
 800544e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8005452:	b29a      	uxth	r2, r3
 8005454:	4baa      	ldr	r3, [pc, #680]	@ (8005700 <SBUS_getData+0x598>)
 8005456:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_3 = (uint16_t)((((float)Radio_input.Canal_3 - 352) /1344 ) * 1000) + 1000;
 8005458:	4ba9      	ldr	r3, [pc, #676]	@ (8005700 <SBUS_getData+0x598>)
 800545a:	88db      	ldrh	r3, [r3, #6]
 800545c:	ee07 3a90 	vmov	s15, r3
 8005460:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005464:	ed9f 7aa7 	vldr	s14, [pc, #668]	@ 8005704 <SBUS_getData+0x59c>
 8005468:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800546c:	eddf 6aa6 	vldr	s13, [pc, #664]	@ 8005708 <SBUS_getData+0x5a0>
 8005470:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005474:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 800570c <SBUS_getData+0x5a4>
 8005478:	ee67 7a87 	vmul.f32	s15, s15, s14
 800547c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005480:	ee17 3a90 	vmov	r3, s15
 8005484:	b29b      	uxth	r3, r3
 8005486:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800548a:	b29a      	uxth	r2, r3
 800548c:	4b9c      	ldr	r3, [pc, #624]	@ (8005700 <SBUS_getData+0x598>)
 800548e:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_4 = (uint16_t)((((float)Radio_input.Canal_4 - 352) /1344 ) * 1000) + 1000;
 8005490:	4b9b      	ldr	r3, [pc, #620]	@ (8005700 <SBUS_getData+0x598>)
 8005492:	891b      	ldrh	r3, [r3, #8]
 8005494:	ee07 3a90 	vmov	s15, r3
 8005498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800549c:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8005704 <SBUS_getData+0x59c>
 80054a0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80054a4:	eddf 6a98 	vldr	s13, [pc, #608]	@ 8005708 <SBUS_getData+0x5a0>
 80054a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80054ac:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 800570c <SBUS_getData+0x5a4>
 80054b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054b8:	ee17 3a90 	vmov	r3, s15
 80054bc:	b29b      	uxth	r3, r3
 80054be:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	4b8e      	ldr	r3, [pc, #568]	@ (8005700 <SBUS_getData+0x598>)
 80054c6:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_5 = (uint16_t)((((float)Radio_input.Canal_5 - 352) /1344 ) * 1000) + 1000;
 80054c8:	4b8d      	ldr	r3, [pc, #564]	@ (8005700 <SBUS_getData+0x598>)
 80054ca:	895b      	ldrh	r3, [r3, #10]
 80054cc:	ee07 3a90 	vmov	s15, r3
 80054d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054d4:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 8005704 <SBUS_getData+0x59c>
 80054d8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80054dc:	eddf 6a8a 	vldr	s13, [pc, #552]	@ 8005708 <SBUS_getData+0x5a0>
 80054e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80054e4:	ed9f 7a89 	vldr	s14, [pc, #548]	@ 800570c <SBUS_getData+0x5a4>
 80054e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054f0:	ee17 3a90 	vmov	r3, s15
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	4b80      	ldr	r3, [pc, #512]	@ (8005700 <SBUS_getData+0x598>)
 80054fe:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_6 = (uint16_t)((((float)Radio_input.Canal_6 - 352) /1344 ) * 1000) + 1000;
 8005500:	4b7f      	ldr	r3, [pc, #508]	@ (8005700 <SBUS_getData+0x598>)
 8005502:	899b      	ldrh	r3, [r3, #12]
 8005504:	ee07 3a90 	vmov	s15, r3
 8005508:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800550c:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8005704 <SBUS_getData+0x59c>
 8005510:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005514:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 8005708 <SBUS_getData+0x5a0>
 8005518:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800551c:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 800570c <SBUS_getData+0x5a4>
 8005520:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005524:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005528:	ee17 3a90 	vmov	r3, s15
 800552c:	b29b      	uxth	r3, r3
 800552e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8005532:	b29a      	uxth	r2, r3
 8005534:	4b72      	ldr	r3, [pc, #456]	@ (8005700 <SBUS_getData+0x598>)
 8005536:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_7 = (uint16_t)((((float)Radio_input.Canal_7 - 352) /1344 ) * 1000) + 1000;
 8005538:	4b71      	ldr	r3, [pc, #452]	@ (8005700 <SBUS_getData+0x598>)
 800553a:	89db      	ldrh	r3, [r3, #14]
 800553c:	ee07 3a90 	vmov	s15, r3
 8005540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005544:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8005704 <SBUS_getData+0x59c>
 8005548:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800554c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8005708 <SBUS_getData+0x5a0>
 8005550:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005554:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 800570c <SBUS_getData+0x5a4>
 8005558:	ee67 7a87 	vmul.f32	s15, s15, s14
 800555c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005560:	ee17 3a90 	vmov	r3, s15
 8005564:	b29b      	uxth	r3, r3
 8005566:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800556a:	b29a      	uxth	r2, r3
 800556c:	4b64      	ldr	r3, [pc, #400]	@ (8005700 <SBUS_getData+0x598>)
 800556e:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_8 = (uint16_t)((((float)Radio_input.Canal_8 - 352) /1344 ) * 1000) + 1000;
 8005570:	4b63      	ldr	r3, [pc, #396]	@ (8005700 <SBUS_getData+0x598>)
 8005572:	8a1b      	ldrh	r3, [r3, #16]
 8005574:	ee07 3a90 	vmov	s15, r3
 8005578:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800557c:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 8005704 <SBUS_getData+0x59c>
 8005580:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005584:	eddf 6a60 	vldr	s13, [pc, #384]	@ 8005708 <SBUS_getData+0x5a0>
 8005588:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800558c:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 800570c <SBUS_getData+0x5a4>
 8005590:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005594:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005598:	ee17 3a90 	vmov	r3, s15
 800559c:	b29b      	uxth	r3, r3
 800559e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	4b56      	ldr	r3, [pc, #344]	@ (8005700 <SBUS_getData+0x598>)
 80055a6:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_9 = (uint16_t)((((float)Radio_input.Canal_9 - 352) /1344 ) * 1000) + 1000;
 80055a8:	4b55      	ldr	r3, [pc, #340]	@ (8005700 <SBUS_getData+0x598>)
 80055aa:	8a5b      	ldrh	r3, [r3, #18]
 80055ac:	ee07 3a90 	vmov	s15, r3
 80055b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055b4:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8005704 <SBUS_getData+0x59c>
 80055b8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80055bc:	eddf 6a52 	vldr	s13, [pc, #328]	@ 8005708 <SBUS_getData+0x5a0>
 80055c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80055c4:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 800570c <SBUS_getData+0x5a4>
 80055c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055d0:	ee17 3a90 	vmov	r3, s15
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80055da:	b29a      	uxth	r2, r3
 80055dc:	4b48      	ldr	r3, [pc, #288]	@ (8005700 <SBUS_getData+0x598>)
 80055de:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_10 = (uint16_t)((((float)Radio_input.Canal_10 - 352) /1344 ) * 1000) + 1000;
 80055e0:	4b47      	ldr	r3, [pc, #284]	@ (8005700 <SBUS_getData+0x598>)
 80055e2:	8a9b      	ldrh	r3, [r3, #20]
 80055e4:	ee07 3a90 	vmov	s15, r3
 80055e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ec:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8005704 <SBUS_getData+0x59c>
 80055f0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80055f4:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8005708 <SBUS_getData+0x5a0>
 80055f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80055fc:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 800570c <SBUS_getData+0x5a4>
 8005600:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005604:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005608:	ee17 3a90 	vmov	r3, s15
 800560c:	b29b      	uxth	r3, r3
 800560e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8005612:	b29a      	uxth	r2, r3
 8005614:	4b3a      	ldr	r3, [pc, #232]	@ (8005700 <SBUS_getData+0x598>)
 8005616:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_11 = (uint16_t)((((float)Radio_input.Canal_11 - 352) /1344 ) * 1000) + 1000;
 8005618:	4b39      	ldr	r3, [pc, #228]	@ (8005700 <SBUS_getData+0x598>)
 800561a:	8adb      	ldrh	r3, [r3, #22]
 800561c:	ee07 3a90 	vmov	s15, r3
 8005620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005624:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8005704 <SBUS_getData+0x59c>
 8005628:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800562c:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8005708 <SBUS_getData+0x5a0>
 8005630:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005634:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 800570c <SBUS_getData+0x5a4>
 8005638:	ee67 7a87 	vmul.f32	s15, s15, s14
 800563c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005640:	ee17 3a90 	vmov	r3, s15
 8005644:	b29b      	uxth	r3, r3
 8005646:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800564a:	b29a      	uxth	r2, r3
 800564c:	4b2c      	ldr	r3, [pc, #176]	@ (8005700 <SBUS_getData+0x598>)
 800564e:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_12 = (uint16_t)((((float)Radio_input.Canal_12 - 352) /1344 ) * 1000) + 1000;
 8005650:	4b2b      	ldr	r3, [pc, #172]	@ (8005700 <SBUS_getData+0x598>)
 8005652:	8b1b      	ldrh	r3, [r3, #24]
 8005654:	ee07 3a90 	vmov	s15, r3
 8005658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800565c:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8005704 <SBUS_getData+0x59c>
 8005660:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005664:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8005708 <SBUS_getData+0x5a0>
 8005668:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800566c:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 800570c <SBUS_getData+0x5a4>
 8005670:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005674:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005678:	ee17 3a90 	vmov	r3, s15
 800567c:	b29b      	uxth	r3, r3
 800567e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8005682:	b29a      	uxth	r2, r3
 8005684:	4b1e      	ldr	r3, [pc, #120]	@ (8005700 <SBUS_getData+0x598>)
 8005686:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_13 = (uint16_t)((((float)Radio_input.Canal_13 - 352) /1344 ) * 1000) + 1000;
 8005688:	4b1d      	ldr	r3, [pc, #116]	@ (8005700 <SBUS_getData+0x598>)
 800568a:	8b5b      	ldrh	r3, [r3, #26]
 800568c:	ee07 3a90 	vmov	s15, r3
 8005690:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005694:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8005704 <SBUS_getData+0x59c>
 8005698:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800569c:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8005708 <SBUS_getData+0x5a0>
 80056a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80056a4:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800570c <SBUS_getData+0x5a4>
 80056a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056b0:	ee17 3a90 	vmov	r3, s15
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	4b10      	ldr	r3, [pc, #64]	@ (8005700 <SBUS_getData+0x598>)
 80056be:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_14 = (uint16_t)((((float)Radio_input.Canal_14 - 352) /1344 ) * 1000) + 1000;
 80056c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005700 <SBUS_getData+0x598>)
 80056c2:	8b9b      	ldrh	r3, [r3, #28]
 80056c4:	ee07 3a90 	vmov	s15, r3
 80056c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056cc:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8005704 <SBUS_getData+0x59c>
 80056d0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80056d4:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8005708 <SBUS_getData+0x5a0>
 80056d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80056dc:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800570c <SBUS_getData+0x5a4>
 80056e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056e8:	ee17 3a90 	vmov	r3, s15
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	4b02      	ldr	r3, [pc, #8]	@ (8005700 <SBUS_getData+0x598>)
 80056f6:	839a      	strh	r2, [r3, #28]
 80056f8:	e00a      	b.n	8005710 <SBUS_getData+0x5a8>
 80056fa:	bf00      	nop
 80056fc:	24001694 	.word	0x24001694
 8005700:	2400002c 	.word	0x2400002c
 8005704:	43b00000 	.word	0x43b00000
 8005708:	44a80000 	.word	0x44a80000
 800570c:	447a0000 	.word	0x447a0000
	Radio_input.Canal_15 = (uint16_t)((((float)Radio_input.Canal_15 - 352) /1344 ) * 1000) + 1000;
 8005710:	4b45      	ldr	r3, [pc, #276]	@ (8005828 <SBUS_getData+0x6c0>)
 8005712:	8bdb      	ldrh	r3, [r3, #30]
 8005714:	ee07 3a90 	vmov	s15, r3
 8005718:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800571c:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 800582c <SBUS_getData+0x6c4>
 8005720:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005724:	eddf 6a42 	vldr	s13, [pc, #264]	@ 8005830 <SBUS_getData+0x6c8>
 8005728:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800572c:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8005834 <SBUS_getData+0x6cc>
 8005730:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005734:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005738:	ee17 3a90 	vmov	r3, s15
 800573c:	b29b      	uxth	r3, r3
 800573e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8005742:	b29a      	uxth	r2, r3
 8005744:	4b38      	ldr	r3, [pc, #224]	@ (8005828 <SBUS_getData+0x6c0>)
 8005746:	83da      	strh	r2, [r3, #30]
	Radio_input.Canal_16 = (uint16_t)((((float)Radio_input.Canal_16 - 352) /1344 ) * 1000) + 1000;
 8005748:	4b37      	ldr	r3, [pc, #220]	@ (8005828 <SBUS_getData+0x6c0>)
 800574a:	8c1b      	ldrh	r3, [r3, #32]
 800574c:	ee07 3a90 	vmov	s15, r3
 8005750:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005754:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 800582c <SBUS_getData+0x6c4>
 8005758:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800575c:	eddf 6a34 	vldr	s13, [pc, #208]	@ 8005830 <SBUS_getData+0x6c8>
 8005760:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005764:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8005834 <SBUS_getData+0x6cc>
 8005768:	ee67 7a87 	vmul.f32	s15, s15, s14
 800576c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005770:	ee17 3a90 	vmov	r3, s15
 8005774:	b29b      	uxth	r3, r3
 8005776:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800577a:	b29a      	uxth	r2, r3
 800577c:	4b2a      	ldr	r3, [pc, #168]	@ (8005828 <SBUS_getData+0x6c0>)
 800577e:	841a      	strh	r2, [r3, #32]

	//En el caso del byte 24, el primer bit menos significativo corresponde al canal 17, el segundo al canal 18, el tercero a el fail safe y
	//el cuarto a la perdida de paquetes. Los 4 restantes no se utilizan.

	Radio_input.Banderas = SBUS_UART_Rx[23];
 8005780:	4b2d      	ldr	r3, [pc, #180]	@ (8005838 <SBUS_getData+0x6d0>)
 8005782:	7dda      	ldrb	r2, [r3, #23]
 8005784:	4b28      	ldr	r3, [pc, #160]	@ (8005828 <SBUS_getData+0x6c0>)
 8005786:	701a      	strb	r2, [r3, #0]
	if(SBUS_UART_Rx[23]>=8){
 8005788:	4b2b      	ldr	r3, [pc, #172]	@ (8005838 <SBUS_getData+0x6d0>)
 800578a:	7ddb      	ldrb	r3, [r3, #23]
 800578c:	2b07      	cmp	r3, #7
 800578e:	d90a      	bls.n	80057a6 <SBUS_getData+0x63e>
		SBUS_UART_Rx[23]-=8;
 8005790:	4b29      	ldr	r3, [pc, #164]	@ (8005838 <SBUS_getData+0x6d0>)
 8005792:	7ddb      	ldrb	r3, [r3, #23]
 8005794:	3b08      	subs	r3, #8
 8005796:	b2da      	uxtb	r2, r3
 8005798:	4b27      	ldr	r3, [pc, #156]	@ (8005838 <SBUS_getData+0x6d0>)
 800579a:	75da      	strb	r2, [r3, #23]
		Radio_input.fail_safe = FailSafe;
 800579c:	4b22      	ldr	r3, [pc, #136]	@ (8005828 <SBUS_getData+0x6c0>)
 800579e:	2235      	movs	r2, #53	@ 0x35
 80057a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 80057a4:	e003      	b.n	80057ae <SBUS_getData+0x646>
	}else Radio_input.fail_safe= Ok;
 80057a6:	4b20      	ldr	r3, [pc, #128]	@ (8005828 <SBUS_getData+0x6c0>)
 80057a8:	22aa      	movs	r2, #170	@ 0xaa
 80057aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

	if(SBUS_UART_Rx[23]>=4){
 80057ae:	4b22      	ldr	r3, [pc, #136]	@ (8005838 <SBUS_getData+0x6d0>)
 80057b0:	7ddb      	ldrb	r3, [r3, #23]
 80057b2:	2b03      	cmp	r3, #3
 80057b4:	d90a      	bls.n	80057cc <SBUS_getData+0x664>
		SBUS_UART_Rx[23]-=4;
 80057b6:	4b20      	ldr	r3, [pc, #128]	@ (8005838 <SBUS_getData+0x6d0>)
 80057b8:	7ddb      	ldrb	r3, [r3, #23]
 80057ba:	3b04      	subs	r3, #4
 80057bc:	b2da      	uxtb	r2, r3
 80057be:	4b1e      	ldr	r3, [pc, #120]	@ (8005838 <SBUS_getData+0x6d0>)
 80057c0:	75da      	strb	r2, [r3, #23]
		Radio_input.pkg_lost = Pkg_Lost;
 80057c2:	4b19      	ldr	r3, [pc, #100]	@ (8005828 <SBUS_getData+0x6c0>)
 80057c4:	2210      	movs	r2, #16
 80057c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80057ca:	e003      	b.n	80057d4 <SBUS_getData+0x66c>
	}else Radio_input.pkg_lost=Ok;
 80057cc:	4b16      	ldr	r3, [pc, #88]	@ (8005828 <SBUS_getData+0x6c0>)
 80057ce:	22aa      	movs	r2, #170	@ 0xaa
 80057d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if(SBUS_UART_Rx[23]>=2){
 80057d4:	4b18      	ldr	r3, [pc, #96]	@ (8005838 <SBUS_getData+0x6d0>)
 80057d6:	7ddb      	ldrb	r3, [r3, #23]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d90a      	bls.n	80057f2 <SBUS_getData+0x68a>
		SBUS_UART_Rx[23]-=2;
 80057dc:	4b16      	ldr	r3, [pc, #88]	@ (8005838 <SBUS_getData+0x6d0>)
 80057de:	7ddb      	ldrb	r3, [r3, #23]
 80057e0:	3b02      	subs	r3, #2
 80057e2:	b2da      	uxtb	r2, r3
 80057e4:	4b14      	ldr	r3, [pc, #80]	@ (8005838 <SBUS_getData+0x6d0>)
 80057e6:	75da      	strb	r2, [r3, #23]
		Radio_input.Interruptor_2=ON;
 80057e8:	4b0f      	ldr	r3, [pc, #60]	@ (8005828 <SBUS_getData+0x6c0>)
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 80057f0:	e003      	b.n	80057fa <SBUS_getData+0x692>
	}else Radio_input.Interruptor_2=OFF;
 80057f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005828 <SBUS_getData+0x6c0>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

	if(SBUS_UART_Rx[23]){
 80057fa:	4b0f      	ldr	r3, [pc, #60]	@ (8005838 <SBUS_getData+0x6d0>)
 80057fc:	7ddb      	ldrb	r3, [r3, #23]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d004      	beq.n	800580c <SBUS_getData+0x6a4>
		Radio_input.Interruptor_1=ON;
 8005802:	4b09      	ldr	r3, [pc, #36]	@ (8005828 <SBUS_getData+0x6c0>)
 8005804:	2201      	movs	r2, #1
 8005806:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800580a:	e003      	b.n	8005814 <SBUS_getData+0x6ac>
	}else Radio_input.Interruptor_1=OFF;
 800580c:	4b06      	ldr	r3, [pc, #24]	@ (8005828 <SBUS_getData+0x6c0>)
 800580e:	2200      	movs	r2, #0
 8005810:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22


	Radio_input.Uart_Counter = 0;
 8005814:	4b04      	ldr	r3, [pc, #16]	@ (8005828 <SBUS_getData+0x6c0>)
 8005816:	2200      	movs	r2, #0
 8005818:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

}
 800581c:	bf00      	nop
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	2400002c 	.word	0x2400002c
 800582c:	43b00000 	.word	0x43b00000
 8005830:	44a80000 	.word	0x44a80000
 8005834:	447a0000 	.word	0x447a0000
 8005838:	24001694 	.word	0x24001694

0800583c <SBUS_IntegrityVerification>:

void SBUS_IntegrityVerification(void){
 800583c:	b480      	push	{r7}
 800583e:	af00      	add	r7, sp, #0

	if(Radio_input.Uart_Counter != 255){
 8005840:	4b0f      	ldr	r3, [pc, #60]	@ (8005880 <SBUS_IntegrityVerification+0x44>)
 8005842:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8005846:	2bff      	cmp	r3, #255	@ 0xff
 8005848:	d00c      	beq.n	8005864 <SBUS_IntegrityVerification+0x28>
		Radio_input.Uart_Counter++;
 800584a:	4b0d      	ldr	r3, [pc, #52]	@ (8005880 <SBUS_IntegrityVerification+0x44>)
 800584c:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8005850:	3301      	adds	r3, #1
 8005852:	b2da      	uxtb	r2, r3
 8005854:	4b0a      	ldr	r3, [pc, #40]	@ (8005880 <SBUS_IntegrityVerification+0x44>)
 8005856:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		Radio_input.uart_error = Ok;
 800585a:	4b09      	ldr	r3, [pc, #36]	@ (8005880 <SBUS_IntegrityVerification+0x44>)
 800585c:	22aa      	movs	r2, #170	@ 0xaa
 800585e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	}
	else{
		Radio_input.uart_error = Uart_Error;
		Radio_input.fail_safe = FailSafe;
	}
}
 8005862:	e007      	b.n	8005874 <SBUS_IntegrityVerification+0x38>
		Radio_input.uart_error = Uart_Error;
 8005864:	4b06      	ldr	r3, [pc, #24]	@ (8005880 <SBUS_IntegrityVerification+0x44>)
 8005866:	2220      	movs	r2, #32
 8005868:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		Radio_input.fail_safe = FailSafe;
 800586c:	4b04      	ldr	r3, [pc, #16]	@ (8005880 <SBUS_IntegrityVerification+0x44>)
 800586e:	2235      	movs	r2, #53	@ 0x35
 8005870:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 8005874:	bf00      	nop
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	2400002c 	.word	0x2400002c

08005884 <ASCII2uint8>:

char BlackBoxBuffer[16][255];

blackbox_data_t blackbox_data;

uint8_t ASCII2uint8(char *buffer, uint8_t Size){
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	460b      	mov	r3, r1
 800588e:	70fb      	strb	r3, [r7, #3]
	uint8_t inter = 0;
 8005890:	2300      	movs	r3, #0
 8005892:	73fb      	strb	r3, [r7, #15]

	for (uint8_t n = 0; n < Size; ++n) {
 8005894:	2300      	movs	r3, #0
 8005896:	73bb      	strb	r3, [r7, #14]
 8005898:	e011      	b.n	80058be <ASCII2uint8+0x3a>
		inter *= 10;
 800589a:	7bfb      	ldrb	r3, [r7, #15]
 800589c:	461a      	mov	r2, r3
 800589e:	0092      	lsls	r2, r2, #2
 80058a0:	4413      	add	r3, r2
 80058a2:	005b      	lsls	r3, r3, #1
 80058a4:	73fb      	strb	r3, [r7, #15]

		inter += (buffer[n] - 48);
 80058a6:	7bbb      	ldrb	r3, [r7, #14]
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	4413      	add	r3, r2
 80058ac:	781a      	ldrb	r2, [r3, #0]
 80058ae:	7bfb      	ldrb	r3, [r7, #15]
 80058b0:	4413      	add	r3, r2
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	3b30      	subs	r3, #48	@ 0x30
 80058b6:	73fb      	strb	r3, [r7, #15]
	for (uint8_t n = 0; n < Size; ++n) {
 80058b8:	7bbb      	ldrb	r3, [r7, #14]
 80058ba:	3301      	adds	r3, #1
 80058bc:	73bb      	strb	r3, [r7, #14]
 80058be:	7bba      	ldrb	r2, [r7, #14]
 80058c0:	78fb      	ldrb	r3, [r7, #3]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d3e9      	bcc.n	800589a <ASCII2uint8+0x16>
	}
	return inter;
 80058c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3714      	adds	r7, #20
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <uint82ASCII>:

void uint82ASCII(uint8_t Inter, char *Output){
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	4603      	mov	r3, r0
 80058dc:	6039      	str	r1, [r7, #0]
 80058de:	71fb      	strb	r3, [r7, #7]
	Output[0] = Inter/100;
 80058e0:	79fb      	ldrb	r3, [r7, #7]
 80058e2:	4a27      	ldr	r2, [pc, #156]	@ (8005980 <uint82ASCII+0xac>)
 80058e4:	fba2 2303 	umull	r2, r3, r2, r3
 80058e8:	095b      	lsrs	r3, r3, #5
 80058ea:	b2da      	uxtb	r2, r3
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	701a      	strb	r2, [r3, #0]
	Output[1] = (Inter - Output[0]*100) /10;
 80058f0:	79fa      	ldrb	r2, [r7, #7]
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	4619      	mov	r1, r3
 80058f8:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 80058fc:	fb01 f303 	mul.w	r3, r1, r3
 8005900:	4413      	add	r3, r2
 8005902:	4a20      	ldr	r2, [pc, #128]	@ (8005984 <uint82ASCII+0xb0>)
 8005904:	fb82 1203 	smull	r1, r2, r2, r3
 8005908:	1092      	asrs	r2, r2, #2
 800590a:	17db      	asrs	r3, r3, #31
 800590c:	1ad2      	subs	r2, r2, r3
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	3301      	adds	r3, #1
 8005912:	b2d2      	uxtb	r2, r2
 8005914:	701a      	strb	r2, [r3, #0]
	Output[2] = (Inter - Output[0]*100 - Output[1]*10) ;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	461a      	mov	r2, r3
 800591c:	0092      	lsls	r2, r2, #2
 800591e:	441a      	add	r2, r3
 8005920:	00d2      	lsls	r2, r2, #3
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	b2da      	uxtb	r2, r3
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	3301      	adds	r3, #1
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	4619      	mov	r1, r3
 8005930:	0149      	lsls	r1, r1, #5
 8005932:	1ac9      	subs	r1, r1, r3
 8005934:	0089      	lsls	r1, r1, #2
 8005936:	1acb      	subs	r3, r1, r3
 8005938:	005b      	lsls	r3, r3, #1
 800593a:	b2db      	uxtb	r3, r3
 800593c:	4413      	add	r3, r2
 800593e:	b2d9      	uxtb	r1, r3
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	3302      	adds	r3, #2
 8005944:	79fa      	ldrb	r2, [r7, #7]
 8005946:	440a      	add	r2, r1
 8005948:	b2d2      	uxtb	r2, r2
 800594a:	701a      	strb	r2, [r3, #0]

	for (uint8_t n = 0; n < 3; ++n) {
 800594c:	2300      	movs	r3, #0
 800594e:	73fb      	strb	r3, [r7, #15]
 8005950:	e00c      	b.n	800596c <uint82ASCII+0x98>
		Output[n] +=48;
 8005952:	7bfb      	ldrb	r3, [r7, #15]
 8005954:	683a      	ldr	r2, [r7, #0]
 8005956:	4413      	add	r3, r2
 8005958:	781a      	ldrb	r2, [r3, #0]
 800595a:	7bfb      	ldrb	r3, [r7, #15]
 800595c:	6839      	ldr	r1, [r7, #0]
 800595e:	440b      	add	r3, r1
 8005960:	3230      	adds	r2, #48	@ 0x30
 8005962:	b2d2      	uxtb	r2, r2
 8005964:	701a      	strb	r2, [r3, #0]
	for (uint8_t n = 0; n < 3; ++n) {
 8005966:	7bfb      	ldrb	r3, [r7, #15]
 8005968:	3301      	adds	r3, #1
 800596a:	73fb      	strb	r3, [r7, #15]
 800596c:	7bfb      	ldrb	r3, [r7, #15]
 800596e:	2b02      	cmp	r3, #2
 8005970:	d9ef      	bls.n	8005952 <uint82ASCII+0x7e>
	}
}
 8005972:	bf00      	nop
 8005974:	bf00      	nop
 8005976:	3714      	adds	r7, #20
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr
 8005980:	51eb851f 	.word	0x51eb851f
 8005984:	66666667 	.word	0x66666667

08005988 <ConfigFile_Create>:
		Output[n] +=48;
		Scaler /= 10;
	}
}

void ConfigFile_Create(void){
 8005988:	b580      	push	{r7, lr}
 800598a:	af00      	add	r7, sp, #0

	f_unlink(ConfigFile);
 800598c:	480c      	ldr	r0, [pc, #48]	@ (80059c0 <ConfigFile_Create+0x38>)
 800598e:	f010 fc27 	bl	80161e0 <f_unlink>

	f_open(&Config, ConfigFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8005992:	2213      	movs	r2, #19
 8005994:	490a      	ldr	r1, [pc, #40]	@ (80059c0 <ConfigFile_Create+0x38>)
 8005996:	480b      	ldr	r0, [pc, #44]	@ (80059c4 <ConfigFile_Create+0x3c>)
 8005998:	f00f fc00 	bl	801519c <f_open>

	f_printf(&Config, "Version: ");
 800599c:	490a      	ldr	r1, [pc, #40]	@ (80059c8 <ConfigFile_Create+0x40>)
 800599e:	4809      	ldr	r0, [pc, #36]	@ (80059c4 <ConfigFile_Create+0x3c>)
 80059a0:	f010 fe98 	bl	80166d4 <f_printf>
	f_printf(&Config,  SystemConfig.FWVersion);
 80059a4:	4909      	ldr	r1, [pc, #36]	@ (80059cc <ConfigFile_Create+0x44>)
 80059a6:	4807      	ldr	r0, [pc, #28]	@ (80059c4 <ConfigFile_Create+0x3c>)
 80059a8:	f010 fe94 	bl	80166d4 <f_printf>
	f_printf(&Config, "\nN. Reset: 000\n");
 80059ac:	4908      	ldr	r1, [pc, #32]	@ (80059d0 <ConfigFile_Create+0x48>)
 80059ae:	4805      	ldr	r0, [pc, #20]	@ (80059c4 <ConfigFile_Create+0x3c>)
 80059b0:	f010 fe90 	bl	80166d4 <f_printf>
	f_close(&Config);
 80059b4:	4803      	ldr	r0, [pc, #12]	@ (80059c4 <ConfigFile_Create+0x3c>)
 80059b6:	f010 f935 	bl	8015c24 <f_close>
}
 80059ba:	bf00      	nop
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	24000074 	.word	0x24000074
 80059c4:	24001b18 	.word	0x24001b18
 80059c8:	08019a94 	.word	0x08019a94
 80059cc:	24000054 	.word	0x24000054
 80059d0:	08019aa0 	.word	0x08019aa0

080059d4 <SD_ConfigFileInit>:

void SD_ConfigFileInit(void){
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
	char FileVersion[5] = {0};
 80059da:	463b      	mov	r3, r7
 80059dc:	2200      	movs	r2, #0
 80059de:	601a      	str	r2, [r3, #0]
 80059e0:	711a      	strb	r2, [r3, #4]

	f_open(&Config, ConfigFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80059e2:	2213      	movs	r2, #19
 80059e4:	492b      	ldr	r1, [pc, #172]	@ (8005a94 <SD_ConfigFileInit+0xc0>)
 80059e6:	482c      	ldr	r0, [pc, #176]	@ (8005a98 <SD_ConfigFileInit+0xc4>)
 80059e8:	f00f fbd8 	bl	801519c <f_open>

	f_lseek(&Config, Config_FWVersion);
 80059ec:	2109      	movs	r1, #9
 80059ee:	482a      	ldr	r0, [pc, #168]	@ (8005a98 <SD_ConfigFileInit+0xc4>)
 80059f0:	f010 f9a3 	bl	8015d3a <f_lseek>

	f_read(&Config, FileVersion, 5, &br);
 80059f4:	4639      	mov	r1, r7
 80059f6:	4b29      	ldr	r3, [pc, #164]	@ (8005a9c <SD_ConfigFileInit+0xc8>)
 80059f8:	2205      	movs	r2, #5
 80059fa:	4827      	ldr	r0, [pc, #156]	@ (8005a98 <SD_ConfigFileInit+0xc4>)
 80059fc:	f00f fd76 	bl	80154ec <f_read>

	f_close(&Config);
 8005a00:	4825      	ldr	r0, [pc, #148]	@ (8005a98 <SD_ConfigFileInit+0xc4>)
 8005a02:	f010 f90f 	bl	8015c24 <f_close>

	for (uint8_t n = 0; n < 5; ++n) {
 8005a06:	2300      	movs	r3, #0
 8005a08:	71fb      	strb	r3, [r7, #7]
 8005a0a:	e010      	b.n	8005a2e <SD_ConfigFileInit+0x5a>
		if(FileVersion[n] != SystemConfig.FWVersion[n]){
 8005a0c:	79fb      	ldrb	r3, [r7, #7]
 8005a0e:	3308      	adds	r3, #8
 8005a10:	443b      	add	r3, r7
 8005a12:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8005a16:	79fb      	ldrb	r3, [r7, #7]
 8005a18:	4921      	ldr	r1, [pc, #132]	@ (8005aa0 <SD_ConfigFileInit+0xcc>)
 8005a1a:	5ccb      	ldrb	r3, [r1, r3]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d003      	beq.n	8005a28 <SD_ConfigFileInit+0x54>
			ConfigFile_Create();
 8005a20:	f7ff ffb2 	bl	8005988 <ConfigFile_Create>
			n = 5;
 8005a24:	2305      	movs	r3, #5
 8005a26:	71fb      	strb	r3, [r7, #7]
	for (uint8_t n = 0; n < 5; ++n) {
 8005a28:	79fb      	ldrb	r3, [r7, #7]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	71fb      	strb	r3, [r7, #7]
 8005a2e:	79fb      	ldrb	r3, [r7, #7]
 8005a30:	2b04      	cmp	r3, #4
 8005a32:	d9eb      	bls.n	8005a0c <SD_ConfigFileInit+0x38>
		}
	}
	f_open(&Config, ConfigFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8005a34:	2213      	movs	r2, #19
 8005a36:	4917      	ldr	r1, [pc, #92]	@ (8005a94 <SD_ConfigFileInit+0xc0>)
 8005a38:	4817      	ldr	r0, [pc, #92]	@ (8005a98 <SD_ConfigFileInit+0xc4>)
 8005a3a:	f00f fbaf 	bl	801519c <f_open>

	f_lseek(&Config, 26);
 8005a3e:	211a      	movs	r1, #26
 8005a40:	4815      	ldr	r0, [pc, #84]	@ (8005a98 <SD_ConfigFileInit+0xc4>)
 8005a42:	f010 f97a 	bl	8015d3a <f_lseek>
	f_read(&Config, NResetChar, 3, &br);
 8005a46:	4b15      	ldr	r3, [pc, #84]	@ (8005a9c <SD_ConfigFileInit+0xc8>)
 8005a48:	2203      	movs	r2, #3
 8005a4a:	4916      	ldr	r1, [pc, #88]	@ (8005aa4 <SD_ConfigFileInit+0xd0>)
 8005a4c:	4812      	ldr	r0, [pc, #72]	@ (8005a98 <SD_ConfigFileInit+0xc4>)
 8005a4e:	f00f fd4d 	bl	80154ec <f_read>

	SystemConfig.ResetCounter = ASCII2uint8(NResetChar, 3) + 1;
 8005a52:	2103      	movs	r1, #3
 8005a54:	4813      	ldr	r0, [pc, #76]	@ (8005aa4 <SD_ConfigFileInit+0xd0>)
 8005a56:	f7ff ff15 	bl	8005884 <ASCII2uint8>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	b2da      	uxtb	r2, r3
 8005a60:	4b0f      	ldr	r3, [pc, #60]	@ (8005aa0 <SD_ConfigFileInit+0xcc>)
 8005a62:	715a      	strb	r2, [r3, #5]
	uint82ASCII(SystemConfig.ResetCounter, NResetChar);
 8005a64:	4b0e      	ldr	r3, [pc, #56]	@ (8005aa0 <SD_ConfigFileInit+0xcc>)
 8005a66:	795b      	ldrb	r3, [r3, #5]
 8005a68:	490e      	ldr	r1, [pc, #56]	@ (8005aa4 <SD_ConfigFileInit+0xd0>)
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7ff ff32 	bl	80058d4 <uint82ASCII>

	f_lseek(&Config, 26);
 8005a70:	211a      	movs	r1, #26
 8005a72:	4809      	ldr	r0, [pc, #36]	@ (8005a98 <SD_ConfigFileInit+0xc4>)
 8005a74:	f010 f961 	bl	8015d3a <f_lseek>
	f_write(&Config, NResetChar, 3, &bw);
 8005a78:	4b0b      	ldr	r3, [pc, #44]	@ (8005aa8 <SD_ConfigFileInit+0xd4>)
 8005a7a:	2203      	movs	r2, #3
 8005a7c:	4909      	ldr	r1, [pc, #36]	@ (8005aa4 <SD_ConfigFileInit+0xd0>)
 8005a7e:	4806      	ldr	r0, [pc, #24]	@ (8005a98 <SD_ConfigFileInit+0xc4>)
 8005a80:	f00f fea2 	bl	80157c8 <f_write>

	f_close(&Config);
 8005a84:	4804      	ldr	r0, [pc, #16]	@ (8005a98 <SD_ConfigFileInit+0xc4>)
 8005a86:	f010 f8cd 	bl	8015c24 <f_close>

}
 8005a8a:	bf00      	nop
 8005a8c:	3708      	adds	r7, #8
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	24000074 	.word	0x24000074
 8005a98:	24001b18 	.word	0x24001b18
 8005a9c:	24001d48 	.word	0x24001d48
 8005aa0:	24000054 	.word	0x24000054
 8005aa4:	24000080 	.word	0x24000080
 8005aa8:	24001d4c 	.word	0x24001d4c

08005aac <SD_GainsInit>:

void SD_GainsInit(void){
 8005aac:	b480      	push	{r7}
 8005aae:	af00      	add	r7, sp, #0

}
 8005ab0:	bf00      	nop
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
	...

08005abc <SD_CreateFlightPath>:

void SD_CreateFlightPath(void){
 8005abc:	b580      	push	{r7, lr}
 8005abe:	af00      	add	r7, sp, #0
	FlightPaht[6] = NResetChar[0];
 8005ac0:	4b09      	ldr	r3, [pc, #36]	@ (8005ae8 <SD_CreateFlightPath+0x2c>)
 8005ac2:	781a      	ldrb	r2, [r3, #0]
 8005ac4:	4b09      	ldr	r3, [pc, #36]	@ (8005aec <SD_CreateFlightPath+0x30>)
 8005ac6:	719a      	strb	r2, [r3, #6]
	FlightPaht[7] = NResetChar[1];
 8005ac8:	4b07      	ldr	r3, [pc, #28]	@ (8005ae8 <SD_CreateFlightPath+0x2c>)
 8005aca:	785a      	ldrb	r2, [r3, #1]
 8005acc:	4b07      	ldr	r3, [pc, #28]	@ (8005aec <SD_CreateFlightPath+0x30>)
 8005ace:	71da      	strb	r2, [r3, #7]
	FlightPaht[8] = NResetChar[2];
 8005ad0:	4b05      	ldr	r3, [pc, #20]	@ (8005ae8 <SD_CreateFlightPath+0x2c>)
 8005ad2:	789a      	ldrb	r2, [r3, #2]
 8005ad4:	4b05      	ldr	r3, [pc, #20]	@ (8005aec <SD_CreateFlightPath+0x30>)
 8005ad6:	721a      	strb	r2, [r3, #8]

	f_mkdir(FlightPaht);
 8005ad8:	4804      	ldr	r0, [pc, #16]	@ (8005aec <SD_CreateFlightPath+0x30>)
 8005ada:	f010 fc51 	bl	8016380 <f_mkdir>
	f_chdir(FlightPaht);
 8005ade:	4803      	ldr	r0, [pc, #12]	@ (8005aec <SD_CreateFlightPath+0x30>)
 8005ae0:	f010 f8c5 	bl	8015c6e <f_chdir>
}
 8005ae4:	bf00      	nop
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	24000080 	.word	0x24000080
 8005aec:	2400005c 	.word	0x2400005c

08005af0 <SD_blackbox_init>:

void SD_blackbox_init(void){
 8005af0:	b580      	push	{r7, lr}
 8005af2:	af00      	add	r7, sp, #0

	f_open(&BlackBox, BlackBoxFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8005af4:	2213      	movs	r2, #19
 8005af6:	4903      	ldr	r1, [pc, #12]	@ (8005b04 <SD_blackbox_init+0x14>)
 8005af8:	4803      	ldr	r0, [pc, #12]	@ (8005b08 <SD_blackbox_init+0x18>)
 8005afa:	f00f fb4f 	bl	801519c <f_open>
}
 8005afe:	bf00      	nop
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	24000068 	.word	0x24000068
 8005b08:	240018ec 	.word	0x240018ec

08005b0c <SD_blackbox_refresh>:

void SD_blackbox_refresh(void){
 8005b0c:	b480      	push	{r7}
 8005b0e:	af00      	add	r7, sp, #0

	blackbox_data.Time = TimeOn_Counter;
 8005b10:	4b58      	ldr	r3, [pc, #352]	@ (8005c74 <SD_blackbox_refresh+0x168>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a58      	ldr	r2, [pc, #352]	@ (8005c78 <SD_blackbox_refresh+0x16c>)
 8005b16:	6353      	str	r3, [r2, #52]	@ 0x34

	blackbox_data.Ax = IMU.ACC.x;
 8005b18:	4b58      	ldr	r3, [pc, #352]	@ (8005c7c <SD_blackbox_refresh+0x170>)
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	4a56      	ldr	r2, [pc, #344]	@ (8005c78 <SD_blackbox_refresh+0x16c>)
 8005b1e:	6013      	str	r3, [r2, #0]
	blackbox_data.Ay = IMU.ACC.y;
 8005b20:	4b56      	ldr	r3, [pc, #344]	@ (8005c7c <SD_blackbox_refresh+0x170>)
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	4a54      	ldr	r2, [pc, #336]	@ (8005c78 <SD_blackbox_refresh+0x16c>)
 8005b26:	6053      	str	r3, [r2, #4]
	blackbox_data.Az = IMU.ACC.z;
 8005b28:	4b54      	ldr	r3, [pc, #336]	@ (8005c7c <SD_blackbox_refresh+0x170>)
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	4a52      	ldr	r2, [pc, #328]	@ (8005c78 <SD_blackbox_refresh+0x16c>)
 8005b2e:	6093      	str	r3, [r2, #8]

	blackbox_data.Gx = IMU.GYR.x;
 8005b30:	4b52      	ldr	r3, [pc, #328]	@ (8005c7c <SD_blackbox_refresh+0x170>)
 8005b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b34:	4a50      	ldr	r2, [pc, #320]	@ (8005c78 <SD_blackbox_refresh+0x16c>)
 8005b36:	60d3      	str	r3, [r2, #12]
	blackbox_data.Gy = IMU.GYR.y;
 8005b38:	4b50      	ldr	r3, [pc, #320]	@ (8005c7c <SD_blackbox_refresh+0x170>)
 8005b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b3c:	4a4e      	ldr	r2, [pc, #312]	@ (8005c78 <SD_blackbox_refresh+0x16c>)
 8005b3e:	6113      	str	r3, [r2, #16]
	blackbox_data.Gz = IMU.GYR.z;
 8005b40:	4b4e      	ldr	r3, [pc, #312]	@ (8005c7c <SD_blackbox_refresh+0x170>)
 8005b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b44:	4a4c      	ldr	r2, [pc, #304]	@ (8005c78 <SD_blackbox_refresh+0x16c>)
 8005b46:	6153      	str	r3, [r2, #20]

	blackbox_data.Gfx = 0;
 8005b48:	4b4b      	ldr	r3, [pc, #300]	@ (8005c78 <SD_blackbox_refresh+0x16c>)
 8005b4a:	f04f 0200 	mov.w	r2, #0
 8005b4e:	619a      	str	r2, [r3, #24]
	blackbox_data.Gfy = 0;
 8005b50:	4b49      	ldr	r3, [pc, #292]	@ (8005c78 <SD_blackbox_refresh+0x16c>)
 8005b52:	f04f 0200 	mov.w	r2, #0
 8005b56:	61da      	str	r2, [r3, #28]
	blackbox_data.Gfz = 0;
 8005b58:	4b47      	ldr	r3, [pc, #284]	@ (8005c78 <SD_blackbox_refresh+0x16c>)
 8005b5a:	f04f 0200 	mov.w	r2, #0
 8005b5e:	621a      	str	r2, [r3, #32]

	blackbox_data.Roll    = IMU.Roll;
 8005b60:	4b46      	ldr	r3, [pc, #280]	@ (8005c7c <SD_blackbox_refresh+0x170>)
 8005b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b64:	4a44      	ldr	r2, [pc, #272]	@ (8005c78 <SD_blackbox_refresh+0x16c>)
 8005b66:	6253      	str	r3, [r2, #36]	@ 0x24
	blackbox_data.Pitch   = IMU.Pitch;
 8005b68:	4b44      	ldr	r3, [pc, #272]	@ (8005c7c <SD_blackbox_refresh+0x170>)
 8005b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b6c:	4a42      	ldr	r2, [pc, #264]	@ (8005c78 <SD_blackbox_refresh+0x16c>)
 8005b6e:	6293      	str	r3, [r2, #40]	@ 0x28
	blackbox_data.Heading = IMU.Heading;
 8005b70:	4b42      	ldr	r3, [pc, #264]	@ (8005c7c <SD_blackbox_refresh+0x170>)
 8005b72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b74:	4a40      	ldr	r2, [pc, #256]	@ (8005c78 <SD_blackbox_refresh+0x16c>)
 8005b76:	62d3      	str	r3, [r2, #44]	@ 0x2c

	blackbox_data.Alt = BMP280.Barometric_Altitude;
 8005b78:	4b41      	ldr	r3, [pc, #260]	@ (8005c80 <SD_blackbox_refresh+0x174>)
 8005b7a:	8a1a      	ldrh	r2, [r3, #16]
 8005b7c:	4b3e      	ldr	r3, [pc, #248]	@ (8005c78 <SD_blackbox_refresh+0x16c>)
 8005b7e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	blackbox_data.Latitude = 0;
 8005b82:	4b3d      	ldr	r3, [pc, #244]	@ (8005c78 <SD_blackbox_refresh+0x16c>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	639a      	str	r2, [r3, #56]	@ 0x38
	blackbox_data.Longitude= 0;
 8005b88:	4b3b      	ldr	r3, [pc, #236]	@ (8005c78 <SD_blackbox_refresh+0x16c>)
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	63da      	str	r2, [r3, #60]	@ 0x3c

	blackbox_data.ARSP = 0;
 8005b8e:	4b3a      	ldr	r3, [pc, #232]	@ (8005c78 <SD_blackbox_refresh+0x16c>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

	blackbox_data.Pressure = BMP280.Pressure;
 8005b96:	4b3a      	ldr	r3, [pc, #232]	@ (8005c80 <SD_blackbox_refresh+0x174>)
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	4a37      	ldr	r2, [pc, #220]	@ (8005c78 <SD_blackbox_refresh+0x16c>)
 8005b9c:	6413      	str	r3, [r2, #64]	@ 0x40

	blackbox_data.SBUS_Flags = Radio_input.Banderas;
 8005b9e:	4b39      	ldr	r3, [pc, #228]	@ (8005c84 <SD_blackbox_refresh+0x178>)
 8005ba0:	781a      	ldrb	r2, [r3, #0]
 8005ba2:	4b35      	ldr	r3, [pc, #212]	@ (8005c78 <SD_blackbox_refresh+0x16c>)
 8005ba4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
	blackbox_data.Flight_Mode = 0;
 8005ba8:	4b33      	ldr	r3, [pc, #204]	@ (8005c78 <SD_blackbox_refresh+0x16c>)
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

	blackbox_data.Canal_1 = Radio_input.Canal_1;
 8005bb0:	4b34      	ldr	r3, [pc, #208]	@ (8005c84 <SD_blackbox_refresh+0x178>)
 8005bb2:	885a      	ldrh	r2, [r3, #2]
 8005bb4:	4b30      	ldr	r3, [pc, #192]	@ (8005c78 <SD_blackbox_refresh+0x16c>)
 8005bb6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	blackbox_data.Canal_2 = Radio_input.Canal_2;
 8005bba:	4b32      	ldr	r3, [pc, #200]	@ (8005c84 <SD_blackbox_refresh+0x178>)
 8005bbc:	889a      	ldrh	r2, [r3, #4]
 8005bbe:	4b2e      	ldr	r3, [pc, #184]	@ (8005c78 <SD_blackbox_refresh+0x16c>)
 8005bc0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
	blackbox_data.Canal_3 = Radio_input.Canal_3;
 8005bc4:	4b2f      	ldr	r3, [pc, #188]	@ (8005c84 <SD_blackbox_refresh+0x178>)
 8005bc6:	88da      	ldrh	r2, [r3, #6]
 8005bc8:	4b2b      	ldr	r3, [pc, #172]	@ (8005c78 <SD_blackbox_refresh+0x16c>)
 8005bca:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
	blackbox_data.Canal_4 = Radio_input.Canal_4;
 8005bce:	4b2d      	ldr	r3, [pc, #180]	@ (8005c84 <SD_blackbox_refresh+0x178>)
 8005bd0:	891a      	ldrh	r2, [r3, #8]
 8005bd2:	4b29      	ldr	r3, [pc, #164]	@ (8005c78 <SD_blackbox_refresh+0x16c>)
 8005bd4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
	blackbox_data.Canal_5 = Radio_input.Canal_5;
 8005bd8:	4b2a      	ldr	r3, [pc, #168]	@ (8005c84 <SD_blackbox_refresh+0x178>)
 8005bda:	895a      	ldrh	r2, [r3, #10]
 8005bdc:	4b26      	ldr	r3, [pc, #152]	@ (8005c78 <SD_blackbox_refresh+0x16c>)
 8005bde:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
	blackbox_data.Canal_6 = Radio_input.Canal_6;
 8005be2:	4b28      	ldr	r3, [pc, #160]	@ (8005c84 <SD_blackbox_refresh+0x178>)
 8005be4:	899a      	ldrh	r2, [r3, #12]
 8005be6:	4b24      	ldr	r3, [pc, #144]	@ (8005c78 <SD_blackbox_refresh+0x16c>)
 8005be8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
	blackbox_data.Canal_7 = Radio_input.Canal_7;
 8005bec:	4b25      	ldr	r3, [pc, #148]	@ (8005c84 <SD_blackbox_refresh+0x178>)
 8005bee:	89da      	ldrh	r2, [r3, #14]
 8005bf0:	4b21      	ldr	r3, [pc, #132]	@ (8005c78 <SD_blackbox_refresh+0x16c>)
 8005bf2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
	blackbox_data.Canal_8 = Radio_input.Canal_8;
 8005bf6:	4b23      	ldr	r3, [pc, #140]	@ (8005c84 <SD_blackbox_refresh+0x178>)
 8005bf8:	8a1a      	ldrh	r2, [r3, #16]
 8005bfa:	4b1f      	ldr	r3, [pc, #124]	@ (8005c78 <SD_blackbox_refresh+0x16c>)
 8005bfc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
	blackbox_data.Canal_9 = Radio_input.Canal_9;
 8005c00:	4b20      	ldr	r3, [pc, #128]	@ (8005c84 <SD_blackbox_refresh+0x178>)
 8005c02:	8a5a      	ldrh	r2, [r3, #18]
 8005c04:	4b1c      	ldr	r3, [pc, #112]	@ (8005c78 <SD_blackbox_refresh+0x16c>)
 8005c06:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
	blackbox_data.Canal_10 = Radio_input.Canal_10;
 8005c0a:	4b1e      	ldr	r3, [pc, #120]	@ (8005c84 <SD_blackbox_refresh+0x178>)
 8005c0c:	8a9a      	ldrh	r2, [r3, #20]
 8005c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8005c78 <SD_blackbox_refresh+0x16c>)
 8005c10:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
	blackbox_data.Canal_11 = Radio_input.Canal_11;
 8005c14:	4b1b      	ldr	r3, [pc, #108]	@ (8005c84 <SD_blackbox_refresh+0x178>)
 8005c16:	8ada      	ldrh	r2, [r3, #22]
 8005c18:	4b17      	ldr	r3, [pc, #92]	@ (8005c78 <SD_blackbox_refresh+0x16c>)
 8005c1a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
	blackbox_data.Canal_12 = Radio_input.Canal_12;
 8005c1e:	4b19      	ldr	r3, [pc, #100]	@ (8005c84 <SD_blackbox_refresh+0x178>)
 8005c20:	8b1a      	ldrh	r2, [r3, #24]
 8005c22:	4b15      	ldr	r3, [pc, #84]	@ (8005c78 <SD_blackbox_refresh+0x16c>)
 8005c24:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
	blackbox_data.Canal_13 = Radio_input.Canal_13;
 8005c28:	4b16      	ldr	r3, [pc, #88]	@ (8005c84 <SD_blackbox_refresh+0x178>)
 8005c2a:	8b5a      	ldrh	r2, [r3, #26]
 8005c2c:	4b12      	ldr	r3, [pc, #72]	@ (8005c78 <SD_blackbox_refresh+0x16c>)
 8005c2e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
	blackbox_data.Canal_14 = Radio_input.Canal_14;
 8005c32:	4b14      	ldr	r3, [pc, #80]	@ (8005c84 <SD_blackbox_refresh+0x178>)
 8005c34:	8b9a      	ldrh	r2, [r3, #28]
 8005c36:	4b10      	ldr	r3, [pc, #64]	@ (8005c78 <SD_blackbox_refresh+0x16c>)
 8005c38:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
	blackbox_data.Canal_15 = Radio_input.Canal_15;
 8005c3c:	4b11      	ldr	r3, [pc, #68]	@ (8005c84 <SD_blackbox_refresh+0x178>)
 8005c3e:	8bda      	ldrh	r2, [r3, #30]
 8005c40:	4b0d      	ldr	r3, [pc, #52]	@ (8005c78 <SD_blackbox_refresh+0x16c>)
 8005c42:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
	blackbox_data.Canal_16 = Radio_input.Canal_16;
 8005c46:	4b0f      	ldr	r3, [pc, #60]	@ (8005c84 <SD_blackbox_refresh+0x178>)
 8005c48:	8c1a      	ldrh	r2, [r3, #32]
 8005c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8005c78 <SD_blackbox_refresh+0x16c>)
 8005c4c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

	blackbox_data.Interruptor_1 = Radio_input.Interruptor_1;
 8005c50:	4b0c      	ldr	r3, [pc, #48]	@ (8005c84 <SD_blackbox_refresh+0x178>)
 8005c52:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8005c56:	4b08      	ldr	r3, [pc, #32]	@ (8005c78 <SD_blackbox_refresh+0x16c>)
 8005c58:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
	blackbox_data.Interruptor_2 = Radio_input.Interruptor_2;
 8005c5c:	4b09      	ldr	r3, [pc, #36]	@ (8005c84 <SD_blackbox_refresh+0x178>)
 8005c5e:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8005c62:	4b05      	ldr	r3, [pc, #20]	@ (8005c78 <SD_blackbox_refresh+0x16c>)
 8005c64:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
//	blackbox_data.OUT6  = PWM_Output.Canal_6;
//	blackbox_data.OUT7  = PWM_Output.Canal_7;
//	blackbox_data.OUT8  = PWM_Output.Canal_8;
//	blackbox_data.OUT9  = PWM_Output.Canal_9;
//	blackbox_data.OUT10 = PWM_Output.Canal_10;
}
 8005c68:	bf00      	nop
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	24000da4 	.word	0x24000da4
 8005c78:	24002d40 	.word	0x24002d40
 8005c7c:	2400152c 	.word	0x2400152c
 8005c80:	240013ec 	.word	0x240013ec
 8005c84:	2400002c 	.word	0x2400002c

08005c88 <SD_blackbox_write>:
	BlackBoxFile[4] = ActualFile[4];

	f_open(&BlackBox, BlackBoxFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
}

void SD_blackbox_write(void){
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
	static uint8_t NewFileCount = 0;
	static uint32_t DataCount = 0;
	static uint16_t WriteCount = 0;

	SD_blackbox_refresh();
 8005c8e:	f7ff ff3d 	bl	8005b0c <SD_blackbox_refresh>

	blackbox_data.Nmsg = DataCount;
 8005c92:	4b26      	ldr	r3, [pc, #152]	@ (8005d2c <SD_blackbox_write+0xa4>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a26      	ldr	r2, [pc, #152]	@ (8005d30 <SD_blackbox_write+0xa8>)
 8005c98:	6313      	str	r3, [r2, #48]	@ 0x30
	memcpy(&BlackBoxBuffer[WriteCount],&blackbox_data,sizeof(blackbox_data));
 8005c9a:	4b26      	ldr	r3, [pc, #152]	@ (8005d34 <SD_blackbox_write+0xac>)
 8005c9c:	881b      	ldrh	r3, [r3, #0]
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	021b      	lsls	r3, r3, #8
 8005ca4:	1a9b      	subs	r3, r3, r2
 8005ca6:	4a24      	ldr	r2, [pc, #144]	@ (8005d38 <SD_blackbox_write+0xb0>)
 8005ca8:	4413      	add	r3, r2
 8005caa:	2280      	movs	r2, #128	@ 0x80
 8005cac:	4920      	ldr	r1, [pc, #128]	@ (8005d30 <SD_blackbox_write+0xa8>)
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f013 fd54 	bl	801975c <memcpy>

	if(WriteCount == 15){
 8005cb4:	4b1f      	ldr	r3, [pc, #124]	@ (8005d34 <SD_blackbox_write+0xac>)
 8005cb6:	881b      	ldrh	r3, [r3, #0]
 8005cb8:	2b0f      	cmp	r3, #15
 8005cba:	d129      	bne.n	8005d10 <SD_blackbox_write+0x88>
		for (uint8_t n = 0; n < 16; ++n) {
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	71fb      	strb	r3, [r7, #7]
 8005cc0:	e00d      	b.n	8005cde <SD_blackbox_write+0x56>
			f_write(&BlackBox, &BlackBoxBuffer[n], sizeof(blackbox_data), &bw);
 8005cc2:	79fa      	ldrb	r2, [r7, #7]
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	021b      	lsls	r3, r3, #8
 8005cc8:	1a9b      	subs	r3, r3, r2
 8005cca:	4a1b      	ldr	r2, [pc, #108]	@ (8005d38 <SD_blackbox_write+0xb0>)
 8005ccc:	1899      	adds	r1, r3, r2
 8005cce:	4b1b      	ldr	r3, [pc, #108]	@ (8005d3c <SD_blackbox_write+0xb4>)
 8005cd0:	2280      	movs	r2, #128	@ 0x80
 8005cd2:	481b      	ldr	r0, [pc, #108]	@ (8005d40 <SD_blackbox_write+0xb8>)
 8005cd4:	f00f fd78 	bl	80157c8 <f_write>
		for (uint8_t n = 0; n < 16; ++n) {
 8005cd8:	79fb      	ldrb	r3, [r7, #7]
 8005cda:	3301      	adds	r3, #1
 8005cdc:	71fb      	strb	r3, [r7, #7]
 8005cde:	79fb      	ldrb	r3, [r7, #7]
 8005ce0:	2b0f      	cmp	r3, #15
 8005ce2:	d9ee      	bls.n	8005cc2 <SD_blackbox_write+0x3a>
		}
		fresult = f_sync(&BlackBox);
 8005ce4:	4816      	ldr	r0, [pc, #88]	@ (8005d40 <SD_blackbox_write+0xb8>)
 8005ce6:	f00f ff13 	bl	8015b10 <f_sync>
 8005cea:	4603      	mov	r3, r0
 8005cec:	461a      	mov	r2, r3
 8005cee:	4b15      	ldr	r3, [pc, #84]	@ (8005d44 <SD_blackbox_write+0xbc>)
 8005cf0:	701a      	strb	r2, [r3, #0]
		WriteCount = 0;
 8005cf2:	4b10      	ldr	r3, [pc, #64]	@ (8005d34 <SD_blackbox_write+0xac>)
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	801a      	strh	r2, [r3, #0]
		++NewFileCount;
 8005cf8:	4b13      	ldr	r3, [pc, #76]	@ (8005d48 <SD_blackbox_write+0xc0>)
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	b2da      	uxtb	r2, r3
 8005d00:	4b11      	ldr	r3, [pc, #68]	@ (8005d48 <SD_blackbox_write+0xc0>)
 8005d02:	701a      	strb	r2, [r3, #0]
		++DataCount;
 8005d04:	4b09      	ldr	r3, [pc, #36]	@ (8005d2c <SD_blackbox_write+0xa4>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	3301      	adds	r3, #1
 8005d0a:	4a08      	ldr	r2, [pc, #32]	@ (8005d2c <SD_blackbox_write+0xa4>)
 8005d0c:	6013      	str	r3, [r2, #0]
		return;
 8005d0e:	e00a      	b.n	8005d26 <SD_blackbox_write+0x9e>
	}
	++WriteCount;
 8005d10:	4b08      	ldr	r3, [pc, #32]	@ (8005d34 <SD_blackbox_write+0xac>)
 8005d12:	881b      	ldrh	r3, [r3, #0]
 8005d14:	3301      	adds	r3, #1
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	4b06      	ldr	r3, [pc, #24]	@ (8005d34 <SD_blackbox_write+0xac>)
 8005d1a:	801a      	strh	r2, [r3, #0]
	++DataCount;
 8005d1c:	4b03      	ldr	r3, [pc, #12]	@ (8005d2c <SD_blackbox_write+0xa4>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	3301      	adds	r3, #1
 8005d22:	4a02      	ldr	r2, [pc, #8]	@ (8005d2c <SD_blackbox_write+0xa4>)
 8005d24:	6013      	str	r3, [r2, #0]
}
 8005d26:	3708      	adds	r7, #8
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	24002dc0 	.word	0x24002dc0
 8005d30:	24002d40 	.word	0x24002d40
 8005d34:	24002dc4 	.word	0x24002dc4
 8005d38:	24001d50 	.word	0x24001d50
 8005d3c:	24001d4c 	.word	0x24001d4c
 8005d40:	240018ec 	.word	0x240018ec
 8005d44:	24001d44 	.word	0x24001d44
 8005d48:	24002dc6 	.word	0x24002dc6

08005d4c <SD_init>:


void SD_init(void){
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	af00      	add	r7, sp, #0
	  fresult = f_mount(&fs, "/", 1);
 8005d50:	2201      	movs	r2, #1
 8005d52:	4909      	ldr	r1, [pc, #36]	@ (8005d78 <SD_init+0x2c>)
 8005d54:	4809      	ldr	r0, [pc, #36]	@ (8005d7c <SD_init+0x30>)
 8005d56:	f00f f9c1 	bl	80150dc <f_mount>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	4b08      	ldr	r3, [pc, #32]	@ (8005d80 <SD_init+0x34>)
 8005d60:	701a      	strb	r2, [r3, #0]
	  SD_ConfigFileInit();
 8005d62:	f7ff fe37 	bl	80059d4 <SD_ConfigFileInit>
	  SD_GainsInit();
 8005d66:	f7ff fea1 	bl	8005aac <SD_GainsInit>
	  SD_CreateFlightPath();
 8005d6a:	f7ff fea7 	bl	8005abc <SD_CreateFlightPath>
	  SD_blackbox_init();
 8005d6e:	f7ff febf 	bl	8005af0 <SD_blackbox_init>
}
 8005d72:	bf00      	nop
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	08019ab0 	.word	0x08019ab0
 8005d7c:	240016b0 	.word	0x240016b0
 8005d80:	24001d44 	.word	0x24001d44

08005d84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005d84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005dbc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005d88:	f7fc ff5e 	bl	8002c48 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005d8c:	480c      	ldr	r0, [pc, #48]	@ (8005dc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005d8e:	490d      	ldr	r1, [pc, #52]	@ (8005dc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005d90:	4a0d      	ldr	r2, [pc, #52]	@ (8005dc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005d92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005d94:	e002      	b.n	8005d9c <LoopCopyDataInit>

08005d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005d9a:	3304      	adds	r3, #4

08005d9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8005d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005da0:	d3f9      	bcc.n	8005d96 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005da2:	4a0a      	ldr	r2, [pc, #40]	@ (8005dcc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005da4:	4c0a      	ldr	r4, [pc, #40]	@ (8005dd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005da8:	e001      	b.n	8005dae <LoopFillZerobss>

08005daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005dac:	3204      	adds	r2, #4

08005dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005db0:	d3fb      	bcc.n	8005daa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8005db2:	f013 fcaf 	bl	8019714 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005db6:	f7fc fb99 	bl	80024ec <main>
  bx  lr
 8005dba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005dbc:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8005dc0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005dc4:	240000f8 	.word	0x240000f8
  ldr r2, =_sidata
 8005dc8:	0801a870 	.word	0x0801a870
  ldr r2, =_sbss
 8005dcc:	240000f8 	.word	0x240000f8
  ldr r4, =_ebss
 8005dd0:	240058b8 	.word	0x240058b8

08005dd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005dd4:	e7fe      	b.n	8005dd4 <ADC_IRQHandler>
	...

08005dd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005dde:	2003      	movs	r0, #3
 8005de0:	f000 f903 	bl	8005fea <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8005de4:	f004 fd1a 	bl	800a81c <HAL_RCC_GetSysClockFreq>
 8005de8:	4602      	mov	r2, r0
 8005dea:	4b15      	ldr	r3, [pc, #84]	@ (8005e40 <HAL_Init+0x68>)
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	0a1b      	lsrs	r3, r3, #8
 8005df0:	f003 030f 	and.w	r3, r3, #15
 8005df4:	4913      	ldr	r1, [pc, #76]	@ (8005e44 <HAL_Init+0x6c>)
 8005df6:	5ccb      	ldrb	r3, [r1, r3]
 8005df8:	f003 031f 	and.w	r3, r3, #31
 8005dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8005e00:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005e02:	4b0f      	ldr	r3, [pc, #60]	@ (8005e40 <HAL_Init+0x68>)
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	f003 030f 	and.w	r3, r3, #15
 8005e0a:	4a0e      	ldr	r2, [pc, #56]	@ (8005e44 <HAL_Init+0x6c>)
 8005e0c:	5cd3      	ldrb	r3, [r2, r3]
 8005e0e:	f003 031f 	and.w	r3, r3, #31
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	fa22 f303 	lsr.w	r3, r2, r3
 8005e18:	4a0b      	ldr	r2, [pc, #44]	@ (8005e48 <HAL_Init+0x70>)
 8005e1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005e1c:	4a0b      	ldr	r2, [pc, #44]	@ (8005e4c <HAL_Init+0x74>)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005e22:	200f      	movs	r0, #15
 8005e24:	f7fc fe40 	bl	8002aa8 <HAL_InitTick>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d001      	beq.n	8005e32 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e002      	b.n	8005e38 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005e32:	f7fc fe1b 	bl	8002a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3708      	adds	r7, #8
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	58024400 	.word	0x58024400
 8005e44:	08019b50 	.word	0x08019b50
 8005e48:	24000004 	.word	0x24000004
 8005e4c:	24000000 	.word	0x24000000

08005e50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e50:	b480      	push	{r7}
 8005e52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005e54:	4b06      	ldr	r3, [pc, #24]	@ (8005e70 <HAL_IncTick+0x20>)
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	461a      	mov	r2, r3
 8005e5a:	4b06      	ldr	r3, [pc, #24]	@ (8005e74 <HAL_IncTick+0x24>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4413      	add	r3, r2
 8005e60:	4a04      	ldr	r2, [pc, #16]	@ (8005e74 <HAL_IncTick+0x24>)
 8005e62:	6013      	str	r3, [r2, #0]
}
 8005e64:	bf00      	nop
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	24000088 	.word	0x24000088
 8005e74:	24002dc8 	.word	0x24002dc8

08005e78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8005e7c:	4b03      	ldr	r3, [pc, #12]	@ (8005e8c <HAL_GetTick+0x14>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	24002dc8 	.word	0x24002dc8

08005e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f003 0307 	and.w	r3, r3, #7
 8005e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8005ed0 <__NVIC_SetPriorityGrouping+0x40>)
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005eac:	4013      	ands	r3, r2
 8005eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005eb8:	4b06      	ldr	r3, [pc, #24]	@ (8005ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005ebe:	4a04      	ldr	r2, [pc, #16]	@ (8005ed0 <__NVIC_SetPriorityGrouping+0x40>)
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	60d3      	str	r3, [r2, #12]
}
 8005ec4:	bf00      	nop
 8005ec6:	3714      	adds	r7, #20
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr
 8005ed0:	e000ed00 	.word	0xe000ed00
 8005ed4:	05fa0000 	.word	0x05fa0000

08005ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005edc:	4b04      	ldr	r3, [pc, #16]	@ (8005ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	0a1b      	lsrs	r3, r3, #8
 8005ee2:	f003 0307 	and.w	r3, r3, #7
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr
 8005ef0:	e000ed00 	.word	0xe000ed00

08005ef4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	4603      	mov	r3, r0
 8005efc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005efe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	db0b      	blt.n	8005f1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f06:	88fb      	ldrh	r3, [r7, #6]
 8005f08:	f003 021f 	and.w	r2, r3, #31
 8005f0c:	4907      	ldr	r1, [pc, #28]	@ (8005f2c <__NVIC_EnableIRQ+0x38>)
 8005f0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f12:	095b      	lsrs	r3, r3, #5
 8005f14:	2001      	movs	r0, #1
 8005f16:	fa00 f202 	lsl.w	r2, r0, r2
 8005f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005f1e:	bf00      	nop
 8005f20:	370c      	adds	r7, #12
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	e000e100 	.word	0xe000e100

08005f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	4603      	mov	r3, r0
 8005f38:	6039      	str	r1, [r7, #0]
 8005f3a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005f3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	db0a      	blt.n	8005f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	b2da      	uxtb	r2, r3
 8005f48:	490c      	ldr	r1, [pc, #48]	@ (8005f7c <__NVIC_SetPriority+0x4c>)
 8005f4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f4e:	0112      	lsls	r2, r2, #4
 8005f50:	b2d2      	uxtb	r2, r2
 8005f52:	440b      	add	r3, r1
 8005f54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f58:	e00a      	b.n	8005f70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	b2da      	uxtb	r2, r3
 8005f5e:	4908      	ldr	r1, [pc, #32]	@ (8005f80 <__NVIC_SetPriority+0x50>)
 8005f60:	88fb      	ldrh	r3, [r7, #6]
 8005f62:	f003 030f 	and.w	r3, r3, #15
 8005f66:	3b04      	subs	r3, #4
 8005f68:	0112      	lsls	r2, r2, #4
 8005f6a:	b2d2      	uxtb	r2, r2
 8005f6c:	440b      	add	r3, r1
 8005f6e:	761a      	strb	r2, [r3, #24]
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr
 8005f7c:	e000e100 	.word	0xe000e100
 8005f80:	e000ed00 	.word	0xe000ed00

08005f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b089      	sub	sp, #36	@ 0x24
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f003 0307 	and.w	r3, r3, #7
 8005f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	f1c3 0307 	rsb	r3, r3, #7
 8005f9e:	2b04      	cmp	r3, #4
 8005fa0:	bf28      	it	cs
 8005fa2:	2304      	movcs	r3, #4
 8005fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	3304      	adds	r3, #4
 8005faa:	2b06      	cmp	r3, #6
 8005fac:	d902      	bls.n	8005fb4 <NVIC_EncodePriority+0x30>
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	3b03      	subs	r3, #3
 8005fb2:	e000      	b.n	8005fb6 <NVIC_EncodePriority+0x32>
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc2:	43da      	mvns	r2, r3
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	401a      	ands	r2, r3
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8005fd6:	43d9      	mvns	r1, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fdc:	4313      	orrs	r3, r2
         );
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3724      	adds	r7, #36	@ 0x24
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b082      	sub	sp, #8
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f7ff ff4c 	bl	8005e90 <__NVIC_SetPriorityGrouping>
}
 8005ff8:	bf00      	nop
 8005ffa:	3708      	adds	r7, #8
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af00      	add	r7, sp, #0
 8006006:	4603      	mov	r3, r0
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]
 800600c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800600e:	f7ff ff63 	bl	8005ed8 <__NVIC_GetPriorityGrouping>
 8006012:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	68b9      	ldr	r1, [r7, #8]
 8006018:	6978      	ldr	r0, [r7, #20]
 800601a:	f7ff ffb3 	bl	8005f84 <NVIC_EncodePriority>
 800601e:	4602      	mov	r2, r0
 8006020:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006024:	4611      	mov	r1, r2
 8006026:	4618      	mov	r0, r3
 8006028:	f7ff ff82 	bl	8005f30 <__NVIC_SetPriority>
}
 800602c:	bf00      	nop
 800602e:	3718      	adds	r7, #24
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	4603      	mov	r3, r0
 800603c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800603e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006042:	4618      	mov	r0, r3
 8006044:	f7ff ff56 	bl	8005ef4 <__NVIC_EnableIRQ>
}
 8006048:	bf00      	nop
 800604a:	3708      	adds	r7, #8
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8006050:	b480      	push	{r7}
 8006052:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8006054:	f3bf 8f5f 	dmb	sy
}
 8006058:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800605a:	4b07      	ldr	r3, [pc, #28]	@ (8006078 <HAL_MPU_Disable+0x28>)
 800605c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800605e:	4a06      	ldr	r2, [pc, #24]	@ (8006078 <HAL_MPU_Disable+0x28>)
 8006060:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006064:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006066:	4b05      	ldr	r3, [pc, #20]	@ (800607c <HAL_MPU_Disable+0x2c>)
 8006068:	2200      	movs	r2, #0
 800606a:	605a      	str	r2, [r3, #4]
}
 800606c:	bf00      	nop
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	e000ed00 	.word	0xe000ed00
 800607c:	e000ed90 	.word	0xe000ed90

08006080 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006088:	4a0b      	ldr	r2, [pc, #44]	@ (80060b8 <HAL_MPU_Enable+0x38>)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f043 0301 	orr.w	r3, r3, #1
 8006090:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006092:	4b0a      	ldr	r3, [pc, #40]	@ (80060bc <HAL_MPU_Enable+0x3c>)
 8006094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006096:	4a09      	ldr	r2, [pc, #36]	@ (80060bc <HAL_MPU_Enable+0x3c>)
 8006098:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800609c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800609e:	f3bf 8f4f 	dsb	sy
}
 80060a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80060a4:	f3bf 8f6f 	isb	sy
}
 80060a8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80060aa:	bf00      	nop
 80060ac:	370c      	adds	r7, #12
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	e000ed90 	.word	0xe000ed90
 80060bc:	e000ed00 	.word	0xe000ed00

080060c0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	785a      	ldrb	r2, [r3, #1]
 80060cc:	4b1b      	ldr	r3, [pc, #108]	@ (800613c <HAL_MPU_ConfigRegion+0x7c>)
 80060ce:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80060d0:	4b1a      	ldr	r3, [pc, #104]	@ (800613c <HAL_MPU_ConfigRegion+0x7c>)
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	4a19      	ldr	r2, [pc, #100]	@ (800613c <HAL_MPU_ConfigRegion+0x7c>)
 80060d6:	f023 0301 	bic.w	r3, r3, #1
 80060da:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80060dc:	4a17      	ldr	r2, [pc, #92]	@ (800613c <HAL_MPU_ConfigRegion+0x7c>)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	7b1b      	ldrb	r3, [r3, #12]
 80060e8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	7adb      	ldrb	r3, [r3, #11]
 80060ee:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80060f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	7a9b      	ldrb	r3, [r3, #10]
 80060f6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80060f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	7b5b      	ldrb	r3, [r3, #13]
 80060fe:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006100:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	7b9b      	ldrb	r3, [r3, #14]
 8006106:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006108:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	7bdb      	ldrb	r3, [r3, #15]
 800610e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006110:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	7a5b      	ldrb	r3, [r3, #9]
 8006116:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006118:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	7a1b      	ldrb	r3, [r3, #8]
 800611e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006120:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	7812      	ldrb	r2, [r2, #0]
 8006126:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006128:	4a04      	ldr	r2, [pc, #16]	@ (800613c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800612a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800612c:	6113      	str	r3, [r2, #16]
}
 800612e:	bf00      	nop
 8006130:	370c      	adds	r7, #12
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	e000ed90 	.word	0xe000ed90

08006140 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b086      	sub	sp, #24
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006148:	f7ff fe96 	bl	8005e78 <HAL_GetTick>
 800614c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d101      	bne.n	8006158 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	e37d      	b.n	8006854 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a66      	ldr	r2, [pc, #408]	@ (80062f8 <HAL_DMA_Init+0x1b8>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d04a      	beq.n	80061f8 <HAL_DMA_Init+0xb8>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a65      	ldr	r2, [pc, #404]	@ (80062fc <HAL_DMA_Init+0x1bc>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d045      	beq.n	80061f8 <HAL_DMA_Init+0xb8>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a63      	ldr	r2, [pc, #396]	@ (8006300 <HAL_DMA_Init+0x1c0>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d040      	beq.n	80061f8 <HAL_DMA_Init+0xb8>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a62      	ldr	r2, [pc, #392]	@ (8006304 <HAL_DMA_Init+0x1c4>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d03b      	beq.n	80061f8 <HAL_DMA_Init+0xb8>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a60      	ldr	r2, [pc, #384]	@ (8006308 <HAL_DMA_Init+0x1c8>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d036      	beq.n	80061f8 <HAL_DMA_Init+0xb8>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a5f      	ldr	r2, [pc, #380]	@ (800630c <HAL_DMA_Init+0x1cc>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d031      	beq.n	80061f8 <HAL_DMA_Init+0xb8>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a5d      	ldr	r2, [pc, #372]	@ (8006310 <HAL_DMA_Init+0x1d0>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d02c      	beq.n	80061f8 <HAL_DMA_Init+0xb8>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a5c      	ldr	r2, [pc, #368]	@ (8006314 <HAL_DMA_Init+0x1d4>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d027      	beq.n	80061f8 <HAL_DMA_Init+0xb8>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a5a      	ldr	r2, [pc, #360]	@ (8006318 <HAL_DMA_Init+0x1d8>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d022      	beq.n	80061f8 <HAL_DMA_Init+0xb8>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a59      	ldr	r2, [pc, #356]	@ (800631c <HAL_DMA_Init+0x1dc>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d01d      	beq.n	80061f8 <HAL_DMA_Init+0xb8>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a57      	ldr	r2, [pc, #348]	@ (8006320 <HAL_DMA_Init+0x1e0>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d018      	beq.n	80061f8 <HAL_DMA_Init+0xb8>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a56      	ldr	r2, [pc, #344]	@ (8006324 <HAL_DMA_Init+0x1e4>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d013      	beq.n	80061f8 <HAL_DMA_Init+0xb8>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a54      	ldr	r2, [pc, #336]	@ (8006328 <HAL_DMA_Init+0x1e8>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d00e      	beq.n	80061f8 <HAL_DMA_Init+0xb8>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a53      	ldr	r2, [pc, #332]	@ (800632c <HAL_DMA_Init+0x1ec>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d009      	beq.n	80061f8 <HAL_DMA_Init+0xb8>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a51      	ldr	r2, [pc, #324]	@ (8006330 <HAL_DMA_Init+0x1f0>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d004      	beq.n	80061f8 <HAL_DMA_Init+0xb8>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a50      	ldr	r2, [pc, #320]	@ (8006334 <HAL_DMA_Init+0x1f4>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d101      	bne.n	80061fc <HAL_DMA_Init+0xbc>
 80061f8:	2301      	movs	r3, #1
 80061fa:	e000      	b.n	80061fe <HAL_DMA_Init+0xbe>
 80061fc:	2300      	movs	r3, #0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f000 813c 	beq.w	800647c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2202      	movs	r2, #2
 8006208:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a37      	ldr	r2, [pc, #220]	@ (80062f8 <HAL_DMA_Init+0x1b8>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d04a      	beq.n	80062b4 <HAL_DMA_Init+0x174>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a36      	ldr	r2, [pc, #216]	@ (80062fc <HAL_DMA_Init+0x1bc>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d045      	beq.n	80062b4 <HAL_DMA_Init+0x174>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a34      	ldr	r2, [pc, #208]	@ (8006300 <HAL_DMA_Init+0x1c0>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d040      	beq.n	80062b4 <HAL_DMA_Init+0x174>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a33      	ldr	r2, [pc, #204]	@ (8006304 <HAL_DMA_Init+0x1c4>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d03b      	beq.n	80062b4 <HAL_DMA_Init+0x174>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a31      	ldr	r2, [pc, #196]	@ (8006308 <HAL_DMA_Init+0x1c8>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d036      	beq.n	80062b4 <HAL_DMA_Init+0x174>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a30      	ldr	r2, [pc, #192]	@ (800630c <HAL_DMA_Init+0x1cc>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d031      	beq.n	80062b4 <HAL_DMA_Init+0x174>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a2e      	ldr	r2, [pc, #184]	@ (8006310 <HAL_DMA_Init+0x1d0>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d02c      	beq.n	80062b4 <HAL_DMA_Init+0x174>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a2d      	ldr	r2, [pc, #180]	@ (8006314 <HAL_DMA_Init+0x1d4>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d027      	beq.n	80062b4 <HAL_DMA_Init+0x174>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a2b      	ldr	r2, [pc, #172]	@ (8006318 <HAL_DMA_Init+0x1d8>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d022      	beq.n	80062b4 <HAL_DMA_Init+0x174>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a2a      	ldr	r2, [pc, #168]	@ (800631c <HAL_DMA_Init+0x1dc>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d01d      	beq.n	80062b4 <HAL_DMA_Init+0x174>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a28      	ldr	r2, [pc, #160]	@ (8006320 <HAL_DMA_Init+0x1e0>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d018      	beq.n	80062b4 <HAL_DMA_Init+0x174>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a27      	ldr	r2, [pc, #156]	@ (8006324 <HAL_DMA_Init+0x1e4>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d013      	beq.n	80062b4 <HAL_DMA_Init+0x174>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a25      	ldr	r2, [pc, #148]	@ (8006328 <HAL_DMA_Init+0x1e8>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d00e      	beq.n	80062b4 <HAL_DMA_Init+0x174>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a24      	ldr	r2, [pc, #144]	@ (800632c <HAL_DMA_Init+0x1ec>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d009      	beq.n	80062b4 <HAL_DMA_Init+0x174>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a22      	ldr	r2, [pc, #136]	@ (8006330 <HAL_DMA_Init+0x1f0>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d004      	beq.n	80062b4 <HAL_DMA_Init+0x174>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a21      	ldr	r2, [pc, #132]	@ (8006334 <HAL_DMA_Init+0x1f4>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d108      	bne.n	80062c6 <HAL_DMA_Init+0x186>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f022 0201 	bic.w	r2, r2, #1
 80062c2:	601a      	str	r2, [r3, #0]
 80062c4:	e007      	b.n	80062d6 <HAL_DMA_Init+0x196>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f022 0201 	bic.w	r2, r2, #1
 80062d4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80062d6:	e02f      	b.n	8006338 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80062d8:	f7ff fdce 	bl	8005e78 <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	2b05      	cmp	r3, #5
 80062e4:	d928      	bls.n	8006338 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2220      	movs	r2, #32
 80062ea:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2203      	movs	r2, #3
 80062f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e2ad      	b.n	8006854 <HAL_DMA_Init+0x714>
 80062f8:	40020010 	.word	0x40020010
 80062fc:	40020028 	.word	0x40020028
 8006300:	40020040 	.word	0x40020040
 8006304:	40020058 	.word	0x40020058
 8006308:	40020070 	.word	0x40020070
 800630c:	40020088 	.word	0x40020088
 8006310:	400200a0 	.word	0x400200a0
 8006314:	400200b8 	.word	0x400200b8
 8006318:	40020410 	.word	0x40020410
 800631c:	40020428 	.word	0x40020428
 8006320:	40020440 	.word	0x40020440
 8006324:	40020458 	.word	0x40020458
 8006328:	40020470 	.word	0x40020470
 800632c:	40020488 	.word	0x40020488
 8006330:	400204a0 	.word	0x400204a0
 8006334:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 0301 	and.w	r3, r3, #1
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1c8      	bne.n	80062d8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	4b73      	ldr	r3, [pc, #460]	@ (8006520 <HAL_DMA_Init+0x3e0>)
 8006352:	4013      	ands	r3, r2
 8006354:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800635e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800636a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	699b      	ldr	r3, [r3, #24]
 8006370:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006376:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a1b      	ldr	r3, [r3, #32]
 800637c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	4313      	orrs	r3, r2
 8006382:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006388:	2b04      	cmp	r3, #4
 800638a:	d107      	bne.n	800639c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006394:	4313      	orrs	r3, r2
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	4313      	orrs	r3, r2
 800639a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	2b28      	cmp	r3, #40	@ 0x28
 80063a2:	d903      	bls.n	80063ac <HAL_DMA_Init+0x26c>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80063aa:	d91f      	bls.n	80063ec <HAL_DMA_Init+0x2ac>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	2b3e      	cmp	r3, #62	@ 0x3e
 80063b2:	d903      	bls.n	80063bc <HAL_DMA_Init+0x27c>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	2b42      	cmp	r3, #66	@ 0x42
 80063ba:	d917      	bls.n	80063ec <HAL_DMA_Init+0x2ac>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	2b46      	cmp	r3, #70	@ 0x46
 80063c2:	d903      	bls.n	80063cc <HAL_DMA_Init+0x28c>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	2b48      	cmp	r3, #72	@ 0x48
 80063ca:	d90f      	bls.n	80063ec <HAL_DMA_Init+0x2ac>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	2b4e      	cmp	r3, #78	@ 0x4e
 80063d2:	d903      	bls.n	80063dc <HAL_DMA_Init+0x29c>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	2b52      	cmp	r3, #82	@ 0x52
 80063da:	d907      	bls.n	80063ec <HAL_DMA_Init+0x2ac>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	2b73      	cmp	r3, #115	@ 0x73
 80063e2:	d905      	bls.n	80063f0 <HAL_DMA_Init+0x2b0>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	2b77      	cmp	r3, #119	@ 0x77
 80063ea:	d801      	bhi.n	80063f0 <HAL_DMA_Init+0x2b0>
 80063ec:	2301      	movs	r3, #1
 80063ee:	e000      	b.n	80063f2 <HAL_DMA_Init+0x2b2>
 80063f0:	2300      	movs	r3, #0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d003      	beq.n	80063fe <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80063fc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	695b      	ldr	r3, [r3, #20]
 800640c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	f023 0307 	bic.w	r3, r3, #7
 8006414:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800641a:	697a      	ldr	r2, [r7, #20]
 800641c:	4313      	orrs	r3, r2
 800641e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006424:	2b04      	cmp	r3, #4
 8006426:	d117      	bne.n	8006458 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	4313      	orrs	r3, r2
 8006430:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00e      	beq.n	8006458 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f002 fbe0 	bl	8008c00 <DMA_CheckFifoParam>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d008      	beq.n	8006458 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2240      	movs	r2, #64	@ 0x40
 800644a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	e1fd      	b.n	8006854 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	697a      	ldr	r2, [r7, #20]
 800645e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f002 fb1b 	bl	8008a9c <DMA_CalcBaseAndBitshift>
 8006466:	4603      	mov	r3, r0
 8006468:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800646e:	f003 031f 	and.w	r3, r3, #31
 8006472:	223f      	movs	r2, #63	@ 0x3f
 8006474:	409a      	lsls	r2, r3
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	609a      	str	r2, [r3, #8]
 800647a:	e0fd      	b.n	8006678 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a28      	ldr	r2, [pc, #160]	@ (8006524 <HAL_DMA_Init+0x3e4>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d04a      	beq.n	800651c <HAL_DMA_Init+0x3dc>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a27      	ldr	r2, [pc, #156]	@ (8006528 <HAL_DMA_Init+0x3e8>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d045      	beq.n	800651c <HAL_DMA_Init+0x3dc>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a25      	ldr	r2, [pc, #148]	@ (800652c <HAL_DMA_Init+0x3ec>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d040      	beq.n	800651c <HAL_DMA_Init+0x3dc>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a24      	ldr	r2, [pc, #144]	@ (8006530 <HAL_DMA_Init+0x3f0>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d03b      	beq.n	800651c <HAL_DMA_Init+0x3dc>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a22      	ldr	r2, [pc, #136]	@ (8006534 <HAL_DMA_Init+0x3f4>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d036      	beq.n	800651c <HAL_DMA_Init+0x3dc>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a21      	ldr	r2, [pc, #132]	@ (8006538 <HAL_DMA_Init+0x3f8>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d031      	beq.n	800651c <HAL_DMA_Init+0x3dc>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a1f      	ldr	r2, [pc, #124]	@ (800653c <HAL_DMA_Init+0x3fc>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d02c      	beq.n	800651c <HAL_DMA_Init+0x3dc>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a1e      	ldr	r2, [pc, #120]	@ (8006540 <HAL_DMA_Init+0x400>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d027      	beq.n	800651c <HAL_DMA_Init+0x3dc>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a1c      	ldr	r2, [pc, #112]	@ (8006544 <HAL_DMA_Init+0x404>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d022      	beq.n	800651c <HAL_DMA_Init+0x3dc>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a1b      	ldr	r2, [pc, #108]	@ (8006548 <HAL_DMA_Init+0x408>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d01d      	beq.n	800651c <HAL_DMA_Init+0x3dc>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a19      	ldr	r2, [pc, #100]	@ (800654c <HAL_DMA_Init+0x40c>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d018      	beq.n	800651c <HAL_DMA_Init+0x3dc>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a18      	ldr	r2, [pc, #96]	@ (8006550 <HAL_DMA_Init+0x410>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d013      	beq.n	800651c <HAL_DMA_Init+0x3dc>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a16      	ldr	r2, [pc, #88]	@ (8006554 <HAL_DMA_Init+0x414>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d00e      	beq.n	800651c <HAL_DMA_Init+0x3dc>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a15      	ldr	r2, [pc, #84]	@ (8006558 <HAL_DMA_Init+0x418>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d009      	beq.n	800651c <HAL_DMA_Init+0x3dc>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a13      	ldr	r2, [pc, #76]	@ (800655c <HAL_DMA_Init+0x41c>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d004      	beq.n	800651c <HAL_DMA_Init+0x3dc>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a12      	ldr	r2, [pc, #72]	@ (8006560 <HAL_DMA_Init+0x420>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d123      	bne.n	8006564 <HAL_DMA_Init+0x424>
 800651c:	2301      	movs	r3, #1
 800651e:	e022      	b.n	8006566 <HAL_DMA_Init+0x426>
 8006520:	fe10803f 	.word	0xfe10803f
 8006524:	48022c08 	.word	0x48022c08
 8006528:	48022c1c 	.word	0x48022c1c
 800652c:	48022c30 	.word	0x48022c30
 8006530:	48022c44 	.word	0x48022c44
 8006534:	48022c58 	.word	0x48022c58
 8006538:	48022c6c 	.word	0x48022c6c
 800653c:	48022c80 	.word	0x48022c80
 8006540:	48022c94 	.word	0x48022c94
 8006544:	58025408 	.word	0x58025408
 8006548:	5802541c 	.word	0x5802541c
 800654c:	58025430 	.word	0x58025430
 8006550:	58025444 	.word	0x58025444
 8006554:	58025458 	.word	0x58025458
 8006558:	5802546c 	.word	0x5802546c
 800655c:	58025480 	.word	0x58025480
 8006560:	58025494 	.word	0x58025494
 8006564:	2300      	movs	r3, #0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d07d      	beq.n	8006666 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a7f      	ldr	r2, [pc, #508]	@ (800676c <HAL_DMA_Init+0x62c>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d021      	beq.n	80065b8 <HAL_DMA_Init+0x478>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a7d      	ldr	r2, [pc, #500]	@ (8006770 <HAL_DMA_Init+0x630>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d01c      	beq.n	80065b8 <HAL_DMA_Init+0x478>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a7c      	ldr	r2, [pc, #496]	@ (8006774 <HAL_DMA_Init+0x634>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d017      	beq.n	80065b8 <HAL_DMA_Init+0x478>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a7a      	ldr	r2, [pc, #488]	@ (8006778 <HAL_DMA_Init+0x638>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d012      	beq.n	80065b8 <HAL_DMA_Init+0x478>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a79      	ldr	r2, [pc, #484]	@ (800677c <HAL_DMA_Init+0x63c>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d00d      	beq.n	80065b8 <HAL_DMA_Init+0x478>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a77      	ldr	r2, [pc, #476]	@ (8006780 <HAL_DMA_Init+0x640>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d008      	beq.n	80065b8 <HAL_DMA_Init+0x478>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a76      	ldr	r2, [pc, #472]	@ (8006784 <HAL_DMA_Init+0x644>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d003      	beq.n	80065b8 <HAL_DMA_Init+0x478>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a74      	ldr	r2, [pc, #464]	@ (8006788 <HAL_DMA_Init+0x648>)
 80065b6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2202      	movs	r2, #2
 80065bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80065d0:	697a      	ldr	r2, [r7, #20]
 80065d2:	4b6e      	ldr	r3, [pc, #440]	@ (800678c <HAL_DMA_Init+0x64c>)
 80065d4:	4013      	ands	r3, r2
 80065d6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	2b40      	cmp	r3, #64	@ 0x40
 80065de:	d008      	beq.n	80065f2 <HAL_DMA_Init+0x4b2>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	2b80      	cmp	r3, #128	@ 0x80
 80065e6:	d102      	bne.n	80065ee <HAL_DMA_Init+0x4ae>
 80065e8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80065ec:	e002      	b.n	80065f4 <HAL_DMA_Init+0x4b4>
 80065ee:	2300      	movs	r3, #0
 80065f0:	e000      	b.n	80065f4 <HAL_DMA_Init+0x4b4>
 80065f2:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	68d2      	ldr	r2, [r2, #12]
 80065f8:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80065fa:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006602:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	695b      	ldr	r3, [r3, #20]
 8006608:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800660a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006612:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	69db      	ldr	r3, [r3, #28]
 8006618:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800661a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a1b      	ldr	r3, [r3, #32]
 8006620:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006622:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006624:	697a      	ldr	r2, [r7, #20]
 8006626:	4313      	orrs	r3, r2
 8006628:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	697a      	ldr	r2, [r7, #20]
 8006630:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	461a      	mov	r2, r3
 8006638:	4b55      	ldr	r3, [pc, #340]	@ (8006790 <HAL_DMA_Init+0x650>)
 800663a:	4413      	add	r3, r2
 800663c:	4a55      	ldr	r2, [pc, #340]	@ (8006794 <HAL_DMA_Init+0x654>)
 800663e:	fba2 2303 	umull	r2, r3, r2, r3
 8006642:	091b      	lsrs	r3, r3, #4
 8006644:	009a      	lsls	r2, r3, #2
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f002 fa26 	bl	8008a9c <DMA_CalcBaseAndBitshift>
 8006650:	4603      	mov	r3, r0
 8006652:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006658:	f003 031f 	and.w	r3, r3, #31
 800665c:	2201      	movs	r2, #1
 800665e:	409a      	lsls	r2, r3
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	605a      	str	r2, [r3, #4]
 8006664:	e008      	b.n	8006678 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2240      	movs	r2, #64	@ 0x40
 800666a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2203      	movs	r2, #3
 8006670:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e0ed      	b.n	8006854 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a46      	ldr	r2, [pc, #280]	@ (8006798 <HAL_DMA_Init+0x658>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d072      	beq.n	8006768 <HAL_DMA_Init+0x628>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a45      	ldr	r2, [pc, #276]	@ (800679c <HAL_DMA_Init+0x65c>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d06d      	beq.n	8006768 <HAL_DMA_Init+0x628>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a43      	ldr	r2, [pc, #268]	@ (80067a0 <HAL_DMA_Init+0x660>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d068      	beq.n	8006768 <HAL_DMA_Init+0x628>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a42      	ldr	r2, [pc, #264]	@ (80067a4 <HAL_DMA_Init+0x664>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d063      	beq.n	8006768 <HAL_DMA_Init+0x628>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a40      	ldr	r2, [pc, #256]	@ (80067a8 <HAL_DMA_Init+0x668>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d05e      	beq.n	8006768 <HAL_DMA_Init+0x628>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a3f      	ldr	r2, [pc, #252]	@ (80067ac <HAL_DMA_Init+0x66c>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d059      	beq.n	8006768 <HAL_DMA_Init+0x628>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a3d      	ldr	r2, [pc, #244]	@ (80067b0 <HAL_DMA_Init+0x670>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d054      	beq.n	8006768 <HAL_DMA_Init+0x628>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a3c      	ldr	r2, [pc, #240]	@ (80067b4 <HAL_DMA_Init+0x674>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d04f      	beq.n	8006768 <HAL_DMA_Init+0x628>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a3a      	ldr	r2, [pc, #232]	@ (80067b8 <HAL_DMA_Init+0x678>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d04a      	beq.n	8006768 <HAL_DMA_Init+0x628>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a39      	ldr	r2, [pc, #228]	@ (80067bc <HAL_DMA_Init+0x67c>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d045      	beq.n	8006768 <HAL_DMA_Init+0x628>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a37      	ldr	r2, [pc, #220]	@ (80067c0 <HAL_DMA_Init+0x680>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d040      	beq.n	8006768 <HAL_DMA_Init+0x628>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a36      	ldr	r2, [pc, #216]	@ (80067c4 <HAL_DMA_Init+0x684>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d03b      	beq.n	8006768 <HAL_DMA_Init+0x628>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a34      	ldr	r2, [pc, #208]	@ (80067c8 <HAL_DMA_Init+0x688>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d036      	beq.n	8006768 <HAL_DMA_Init+0x628>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a33      	ldr	r2, [pc, #204]	@ (80067cc <HAL_DMA_Init+0x68c>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d031      	beq.n	8006768 <HAL_DMA_Init+0x628>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a31      	ldr	r2, [pc, #196]	@ (80067d0 <HAL_DMA_Init+0x690>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d02c      	beq.n	8006768 <HAL_DMA_Init+0x628>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a30      	ldr	r2, [pc, #192]	@ (80067d4 <HAL_DMA_Init+0x694>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d027      	beq.n	8006768 <HAL_DMA_Init+0x628>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a13      	ldr	r2, [pc, #76]	@ (800676c <HAL_DMA_Init+0x62c>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d022      	beq.n	8006768 <HAL_DMA_Init+0x628>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a12      	ldr	r2, [pc, #72]	@ (8006770 <HAL_DMA_Init+0x630>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d01d      	beq.n	8006768 <HAL_DMA_Init+0x628>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a10      	ldr	r2, [pc, #64]	@ (8006774 <HAL_DMA_Init+0x634>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d018      	beq.n	8006768 <HAL_DMA_Init+0x628>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a0f      	ldr	r2, [pc, #60]	@ (8006778 <HAL_DMA_Init+0x638>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d013      	beq.n	8006768 <HAL_DMA_Init+0x628>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a0d      	ldr	r2, [pc, #52]	@ (800677c <HAL_DMA_Init+0x63c>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d00e      	beq.n	8006768 <HAL_DMA_Init+0x628>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a0c      	ldr	r2, [pc, #48]	@ (8006780 <HAL_DMA_Init+0x640>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d009      	beq.n	8006768 <HAL_DMA_Init+0x628>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a0a      	ldr	r2, [pc, #40]	@ (8006784 <HAL_DMA_Init+0x644>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d004      	beq.n	8006768 <HAL_DMA_Init+0x628>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a09      	ldr	r2, [pc, #36]	@ (8006788 <HAL_DMA_Init+0x648>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d137      	bne.n	80067d8 <HAL_DMA_Init+0x698>
 8006768:	2301      	movs	r3, #1
 800676a:	e036      	b.n	80067da <HAL_DMA_Init+0x69a>
 800676c:	58025408 	.word	0x58025408
 8006770:	5802541c 	.word	0x5802541c
 8006774:	58025430 	.word	0x58025430
 8006778:	58025444 	.word	0x58025444
 800677c:	58025458 	.word	0x58025458
 8006780:	5802546c 	.word	0x5802546c
 8006784:	58025480 	.word	0x58025480
 8006788:	58025494 	.word	0x58025494
 800678c:	fffe000f 	.word	0xfffe000f
 8006790:	a7fdabf8 	.word	0xa7fdabf8
 8006794:	cccccccd 	.word	0xcccccccd
 8006798:	40020010 	.word	0x40020010
 800679c:	40020028 	.word	0x40020028
 80067a0:	40020040 	.word	0x40020040
 80067a4:	40020058 	.word	0x40020058
 80067a8:	40020070 	.word	0x40020070
 80067ac:	40020088 	.word	0x40020088
 80067b0:	400200a0 	.word	0x400200a0
 80067b4:	400200b8 	.word	0x400200b8
 80067b8:	40020410 	.word	0x40020410
 80067bc:	40020428 	.word	0x40020428
 80067c0:	40020440 	.word	0x40020440
 80067c4:	40020458 	.word	0x40020458
 80067c8:	40020470 	.word	0x40020470
 80067cc:	40020488 	.word	0x40020488
 80067d0:	400204a0 	.word	0x400204a0
 80067d4:	400204b8 	.word	0x400204b8
 80067d8:	2300      	movs	r3, #0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d032      	beq.n	8006844 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f002 fa8a 	bl	8008cf8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	2b80      	cmp	r3, #128	@ 0x80
 80067ea:	d102      	bne.n	80067f2 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685a      	ldr	r2, [r3, #4]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067fa:	b2d2      	uxtb	r2, r2
 80067fc:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006806:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d010      	beq.n	8006832 <HAL_DMA_Init+0x6f2>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	2b08      	cmp	r3, #8
 8006816:	d80c      	bhi.n	8006832 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f002 fb07 	bl	8008e2c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006822:	2200      	movs	r2, #0
 8006824:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800682e:	605a      	str	r2, [r3, #4]
 8006830:	e008      	b.n	8006844 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	3718      	adds	r7, #24
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b086      	sub	sp, #24
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	607a      	str	r2, [r7, #4]
 8006868:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800686a:	2300      	movs	r3, #0
 800686c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d101      	bne.n	8006878 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e226      	b.n	8006cc6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800687e:	2b01      	cmp	r3, #1
 8006880:	d101      	bne.n	8006886 <HAL_DMA_Start_IT+0x2a>
 8006882:	2302      	movs	r3, #2
 8006884:	e21f      	b.n	8006cc6 <HAL_DMA_Start_IT+0x46a>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2201      	movs	r2, #1
 800688a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b01      	cmp	r3, #1
 8006898:	f040 820a 	bne.w	8006cb0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2202      	movs	r2, #2
 80068a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2200      	movs	r2, #0
 80068a8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a68      	ldr	r2, [pc, #416]	@ (8006a50 <HAL_DMA_Start_IT+0x1f4>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d04a      	beq.n	800694a <HAL_DMA_Start_IT+0xee>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a66      	ldr	r2, [pc, #408]	@ (8006a54 <HAL_DMA_Start_IT+0x1f8>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d045      	beq.n	800694a <HAL_DMA_Start_IT+0xee>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a65      	ldr	r2, [pc, #404]	@ (8006a58 <HAL_DMA_Start_IT+0x1fc>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d040      	beq.n	800694a <HAL_DMA_Start_IT+0xee>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a63      	ldr	r2, [pc, #396]	@ (8006a5c <HAL_DMA_Start_IT+0x200>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d03b      	beq.n	800694a <HAL_DMA_Start_IT+0xee>
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a62      	ldr	r2, [pc, #392]	@ (8006a60 <HAL_DMA_Start_IT+0x204>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d036      	beq.n	800694a <HAL_DMA_Start_IT+0xee>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a60      	ldr	r2, [pc, #384]	@ (8006a64 <HAL_DMA_Start_IT+0x208>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d031      	beq.n	800694a <HAL_DMA_Start_IT+0xee>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a5f      	ldr	r2, [pc, #380]	@ (8006a68 <HAL_DMA_Start_IT+0x20c>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d02c      	beq.n	800694a <HAL_DMA_Start_IT+0xee>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a5d      	ldr	r2, [pc, #372]	@ (8006a6c <HAL_DMA_Start_IT+0x210>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d027      	beq.n	800694a <HAL_DMA_Start_IT+0xee>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a5c      	ldr	r2, [pc, #368]	@ (8006a70 <HAL_DMA_Start_IT+0x214>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d022      	beq.n	800694a <HAL_DMA_Start_IT+0xee>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a5a      	ldr	r2, [pc, #360]	@ (8006a74 <HAL_DMA_Start_IT+0x218>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d01d      	beq.n	800694a <HAL_DMA_Start_IT+0xee>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a59      	ldr	r2, [pc, #356]	@ (8006a78 <HAL_DMA_Start_IT+0x21c>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d018      	beq.n	800694a <HAL_DMA_Start_IT+0xee>
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a57      	ldr	r2, [pc, #348]	@ (8006a7c <HAL_DMA_Start_IT+0x220>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d013      	beq.n	800694a <HAL_DMA_Start_IT+0xee>
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a56      	ldr	r2, [pc, #344]	@ (8006a80 <HAL_DMA_Start_IT+0x224>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d00e      	beq.n	800694a <HAL_DMA_Start_IT+0xee>
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a54      	ldr	r2, [pc, #336]	@ (8006a84 <HAL_DMA_Start_IT+0x228>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d009      	beq.n	800694a <HAL_DMA_Start_IT+0xee>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a53      	ldr	r2, [pc, #332]	@ (8006a88 <HAL_DMA_Start_IT+0x22c>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d004      	beq.n	800694a <HAL_DMA_Start_IT+0xee>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a51      	ldr	r2, [pc, #324]	@ (8006a8c <HAL_DMA_Start_IT+0x230>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d108      	bne.n	800695c <HAL_DMA_Start_IT+0x100>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f022 0201 	bic.w	r2, r2, #1
 8006958:	601a      	str	r2, [r3, #0]
 800695a:	e007      	b.n	800696c <HAL_DMA_Start_IT+0x110>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f022 0201 	bic.w	r2, r2, #1
 800696a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	68b9      	ldr	r1, [r7, #8]
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f001 feae 	bl	80086d4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a34      	ldr	r2, [pc, #208]	@ (8006a50 <HAL_DMA_Start_IT+0x1f4>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d04a      	beq.n	8006a18 <HAL_DMA_Start_IT+0x1bc>
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a33      	ldr	r2, [pc, #204]	@ (8006a54 <HAL_DMA_Start_IT+0x1f8>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d045      	beq.n	8006a18 <HAL_DMA_Start_IT+0x1bc>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a31      	ldr	r2, [pc, #196]	@ (8006a58 <HAL_DMA_Start_IT+0x1fc>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d040      	beq.n	8006a18 <HAL_DMA_Start_IT+0x1bc>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a30      	ldr	r2, [pc, #192]	@ (8006a5c <HAL_DMA_Start_IT+0x200>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d03b      	beq.n	8006a18 <HAL_DMA_Start_IT+0x1bc>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a2e      	ldr	r2, [pc, #184]	@ (8006a60 <HAL_DMA_Start_IT+0x204>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d036      	beq.n	8006a18 <HAL_DMA_Start_IT+0x1bc>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a2d      	ldr	r2, [pc, #180]	@ (8006a64 <HAL_DMA_Start_IT+0x208>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d031      	beq.n	8006a18 <HAL_DMA_Start_IT+0x1bc>
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a2b      	ldr	r2, [pc, #172]	@ (8006a68 <HAL_DMA_Start_IT+0x20c>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d02c      	beq.n	8006a18 <HAL_DMA_Start_IT+0x1bc>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a2a      	ldr	r2, [pc, #168]	@ (8006a6c <HAL_DMA_Start_IT+0x210>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d027      	beq.n	8006a18 <HAL_DMA_Start_IT+0x1bc>
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a28      	ldr	r2, [pc, #160]	@ (8006a70 <HAL_DMA_Start_IT+0x214>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d022      	beq.n	8006a18 <HAL_DMA_Start_IT+0x1bc>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a27      	ldr	r2, [pc, #156]	@ (8006a74 <HAL_DMA_Start_IT+0x218>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d01d      	beq.n	8006a18 <HAL_DMA_Start_IT+0x1bc>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a25      	ldr	r2, [pc, #148]	@ (8006a78 <HAL_DMA_Start_IT+0x21c>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d018      	beq.n	8006a18 <HAL_DMA_Start_IT+0x1bc>
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a24      	ldr	r2, [pc, #144]	@ (8006a7c <HAL_DMA_Start_IT+0x220>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d013      	beq.n	8006a18 <HAL_DMA_Start_IT+0x1bc>
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a22      	ldr	r2, [pc, #136]	@ (8006a80 <HAL_DMA_Start_IT+0x224>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d00e      	beq.n	8006a18 <HAL_DMA_Start_IT+0x1bc>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a21      	ldr	r2, [pc, #132]	@ (8006a84 <HAL_DMA_Start_IT+0x228>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d009      	beq.n	8006a18 <HAL_DMA_Start_IT+0x1bc>
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a1f      	ldr	r2, [pc, #124]	@ (8006a88 <HAL_DMA_Start_IT+0x22c>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d004      	beq.n	8006a18 <HAL_DMA_Start_IT+0x1bc>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a1e      	ldr	r2, [pc, #120]	@ (8006a8c <HAL_DMA_Start_IT+0x230>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d101      	bne.n	8006a1c <HAL_DMA_Start_IT+0x1c0>
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e000      	b.n	8006a1e <HAL_DMA_Start_IT+0x1c2>
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d036      	beq.n	8006a90 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f023 021e 	bic.w	r2, r3, #30
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f042 0216 	orr.w	r2, r2, #22
 8006a34:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d03e      	beq.n	8006abc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f042 0208 	orr.w	r2, r2, #8
 8006a4c:	601a      	str	r2, [r3, #0]
 8006a4e:	e035      	b.n	8006abc <HAL_DMA_Start_IT+0x260>
 8006a50:	40020010 	.word	0x40020010
 8006a54:	40020028 	.word	0x40020028
 8006a58:	40020040 	.word	0x40020040
 8006a5c:	40020058 	.word	0x40020058
 8006a60:	40020070 	.word	0x40020070
 8006a64:	40020088 	.word	0x40020088
 8006a68:	400200a0 	.word	0x400200a0
 8006a6c:	400200b8 	.word	0x400200b8
 8006a70:	40020410 	.word	0x40020410
 8006a74:	40020428 	.word	0x40020428
 8006a78:	40020440 	.word	0x40020440
 8006a7c:	40020458 	.word	0x40020458
 8006a80:	40020470 	.word	0x40020470
 8006a84:	40020488 	.word	0x40020488
 8006a88:	400204a0 	.word	0x400204a0
 8006a8c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f023 020e 	bic.w	r2, r3, #14
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f042 020a 	orr.w	r2, r2, #10
 8006aa2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d007      	beq.n	8006abc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f042 0204 	orr.w	r2, r2, #4
 8006aba:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a83      	ldr	r2, [pc, #524]	@ (8006cd0 <HAL_DMA_Start_IT+0x474>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d072      	beq.n	8006bac <HAL_DMA_Start_IT+0x350>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a82      	ldr	r2, [pc, #520]	@ (8006cd4 <HAL_DMA_Start_IT+0x478>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d06d      	beq.n	8006bac <HAL_DMA_Start_IT+0x350>
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a80      	ldr	r2, [pc, #512]	@ (8006cd8 <HAL_DMA_Start_IT+0x47c>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d068      	beq.n	8006bac <HAL_DMA_Start_IT+0x350>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a7f      	ldr	r2, [pc, #508]	@ (8006cdc <HAL_DMA_Start_IT+0x480>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d063      	beq.n	8006bac <HAL_DMA_Start_IT+0x350>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a7d      	ldr	r2, [pc, #500]	@ (8006ce0 <HAL_DMA_Start_IT+0x484>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d05e      	beq.n	8006bac <HAL_DMA_Start_IT+0x350>
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a7c      	ldr	r2, [pc, #496]	@ (8006ce4 <HAL_DMA_Start_IT+0x488>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d059      	beq.n	8006bac <HAL_DMA_Start_IT+0x350>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a7a      	ldr	r2, [pc, #488]	@ (8006ce8 <HAL_DMA_Start_IT+0x48c>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d054      	beq.n	8006bac <HAL_DMA_Start_IT+0x350>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a79      	ldr	r2, [pc, #484]	@ (8006cec <HAL_DMA_Start_IT+0x490>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d04f      	beq.n	8006bac <HAL_DMA_Start_IT+0x350>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a77      	ldr	r2, [pc, #476]	@ (8006cf0 <HAL_DMA_Start_IT+0x494>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d04a      	beq.n	8006bac <HAL_DMA_Start_IT+0x350>
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a76      	ldr	r2, [pc, #472]	@ (8006cf4 <HAL_DMA_Start_IT+0x498>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d045      	beq.n	8006bac <HAL_DMA_Start_IT+0x350>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a74      	ldr	r2, [pc, #464]	@ (8006cf8 <HAL_DMA_Start_IT+0x49c>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d040      	beq.n	8006bac <HAL_DMA_Start_IT+0x350>
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a73      	ldr	r2, [pc, #460]	@ (8006cfc <HAL_DMA_Start_IT+0x4a0>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d03b      	beq.n	8006bac <HAL_DMA_Start_IT+0x350>
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a71      	ldr	r2, [pc, #452]	@ (8006d00 <HAL_DMA_Start_IT+0x4a4>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d036      	beq.n	8006bac <HAL_DMA_Start_IT+0x350>
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a70      	ldr	r2, [pc, #448]	@ (8006d04 <HAL_DMA_Start_IT+0x4a8>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d031      	beq.n	8006bac <HAL_DMA_Start_IT+0x350>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a6e      	ldr	r2, [pc, #440]	@ (8006d08 <HAL_DMA_Start_IT+0x4ac>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d02c      	beq.n	8006bac <HAL_DMA_Start_IT+0x350>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a6d      	ldr	r2, [pc, #436]	@ (8006d0c <HAL_DMA_Start_IT+0x4b0>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d027      	beq.n	8006bac <HAL_DMA_Start_IT+0x350>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a6b      	ldr	r2, [pc, #428]	@ (8006d10 <HAL_DMA_Start_IT+0x4b4>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d022      	beq.n	8006bac <HAL_DMA_Start_IT+0x350>
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a6a      	ldr	r2, [pc, #424]	@ (8006d14 <HAL_DMA_Start_IT+0x4b8>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d01d      	beq.n	8006bac <HAL_DMA_Start_IT+0x350>
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a68      	ldr	r2, [pc, #416]	@ (8006d18 <HAL_DMA_Start_IT+0x4bc>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d018      	beq.n	8006bac <HAL_DMA_Start_IT+0x350>
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a67      	ldr	r2, [pc, #412]	@ (8006d1c <HAL_DMA_Start_IT+0x4c0>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d013      	beq.n	8006bac <HAL_DMA_Start_IT+0x350>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a65      	ldr	r2, [pc, #404]	@ (8006d20 <HAL_DMA_Start_IT+0x4c4>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d00e      	beq.n	8006bac <HAL_DMA_Start_IT+0x350>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a64      	ldr	r2, [pc, #400]	@ (8006d24 <HAL_DMA_Start_IT+0x4c8>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d009      	beq.n	8006bac <HAL_DMA_Start_IT+0x350>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a62      	ldr	r2, [pc, #392]	@ (8006d28 <HAL_DMA_Start_IT+0x4cc>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d004      	beq.n	8006bac <HAL_DMA_Start_IT+0x350>
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a61      	ldr	r2, [pc, #388]	@ (8006d2c <HAL_DMA_Start_IT+0x4d0>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d101      	bne.n	8006bb0 <HAL_DMA_Start_IT+0x354>
 8006bac:	2301      	movs	r3, #1
 8006bae:	e000      	b.n	8006bb2 <HAL_DMA_Start_IT+0x356>
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d01a      	beq.n	8006bec <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d007      	beq.n	8006bd4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006bd2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d007      	beq.n	8006bec <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006be6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006bea:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a37      	ldr	r2, [pc, #220]	@ (8006cd0 <HAL_DMA_Start_IT+0x474>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d04a      	beq.n	8006c8c <HAL_DMA_Start_IT+0x430>
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a36      	ldr	r2, [pc, #216]	@ (8006cd4 <HAL_DMA_Start_IT+0x478>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d045      	beq.n	8006c8c <HAL_DMA_Start_IT+0x430>
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a34      	ldr	r2, [pc, #208]	@ (8006cd8 <HAL_DMA_Start_IT+0x47c>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d040      	beq.n	8006c8c <HAL_DMA_Start_IT+0x430>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a33      	ldr	r2, [pc, #204]	@ (8006cdc <HAL_DMA_Start_IT+0x480>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d03b      	beq.n	8006c8c <HAL_DMA_Start_IT+0x430>
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a31      	ldr	r2, [pc, #196]	@ (8006ce0 <HAL_DMA_Start_IT+0x484>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d036      	beq.n	8006c8c <HAL_DMA_Start_IT+0x430>
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a30      	ldr	r2, [pc, #192]	@ (8006ce4 <HAL_DMA_Start_IT+0x488>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d031      	beq.n	8006c8c <HAL_DMA_Start_IT+0x430>
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a2e      	ldr	r2, [pc, #184]	@ (8006ce8 <HAL_DMA_Start_IT+0x48c>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d02c      	beq.n	8006c8c <HAL_DMA_Start_IT+0x430>
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a2d      	ldr	r2, [pc, #180]	@ (8006cec <HAL_DMA_Start_IT+0x490>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d027      	beq.n	8006c8c <HAL_DMA_Start_IT+0x430>
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a2b      	ldr	r2, [pc, #172]	@ (8006cf0 <HAL_DMA_Start_IT+0x494>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d022      	beq.n	8006c8c <HAL_DMA_Start_IT+0x430>
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a2a      	ldr	r2, [pc, #168]	@ (8006cf4 <HAL_DMA_Start_IT+0x498>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d01d      	beq.n	8006c8c <HAL_DMA_Start_IT+0x430>
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a28      	ldr	r2, [pc, #160]	@ (8006cf8 <HAL_DMA_Start_IT+0x49c>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d018      	beq.n	8006c8c <HAL_DMA_Start_IT+0x430>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a27      	ldr	r2, [pc, #156]	@ (8006cfc <HAL_DMA_Start_IT+0x4a0>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d013      	beq.n	8006c8c <HAL_DMA_Start_IT+0x430>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a25      	ldr	r2, [pc, #148]	@ (8006d00 <HAL_DMA_Start_IT+0x4a4>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d00e      	beq.n	8006c8c <HAL_DMA_Start_IT+0x430>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a24      	ldr	r2, [pc, #144]	@ (8006d04 <HAL_DMA_Start_IT+0x4a8>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d009      	beq.n	8006c8c <HAL_DMA_Start_IT+0x430>
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a22      	ldr	r2, [pc, #136]	@ (8006d08 <HAL_DMA_Start_IT+0x4ac>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d004      	beq.n	8006c8c <HAL_DMA_Start_IT+0x430>
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a21      	ldr	r2, [pc, #132]	@ (8006d0c <HAL_DMA_Start_IT+0x4b0>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d108      	bne.n	8006c9e <HAL_DMA_Start_IT+0x442>
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f042 0201 	orr.w	r2, r2, #1
 8006c9a:	601a      	str	r2, [r3, #0]
 8006c9c:	e012      	b.n	8006cc4 <HAL_DMA_Start_IT+0x468>
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f042 0201 	orr.w	r2, r2, #1
 8006cac:	601a      	str	r2, [r3, #0]
 8006cae:	e009      	b.n	8006cc4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006cb6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3718      	adds	r7, #24
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	40020010 	.word	0x40020010
 8006cd4:	40020028 	.word	0x40020028
 8006cd8:	40020040 	.word	0x40020040
 8006cdc:	40020058 	.word	0x40020058
 8006ce0:	40020070 	.word	0x40020070
 8006ce4:	40020088 	.word	0x40020088
 8006ce8:	400200a0 	.word	0x400200a0
 8006cec:	400200b8 	.word	0x400200b8
 8006cf0:	40020410 	.word	0x40020410
 8006cf4:	40020428 	.word	0x40020428
 8006cf8:	40020440 	.word	0x40020440
 8006cfc:	40020458 	.word	0x40020458
 8006d00:	40020470 	.word	0x40020470
 8006d04:	40020488 	.word	0x40020488
 8006d08:	400204a0 	.word	0x400204a0
 8006d0c:	400204b8 	.word	0x400204b8
 8006d10:	58025408 	.word	0x58025408
 8006d14:	5802541c 	.word	0x5802541c
 8006d18:	58025430 	.word	0x58025430
 8006d1c:	58025444 	.word	0x58025444
 8006d20:	58025458 	.word	0x58025458
 8006d24:	5802546c 	.word	0x5802546c
 8006d28:	58025480 	.word	0x58025480
 8006d2c:	58025494 	.word	0x58025494

08006d30 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006d38:	f7ff f89e 	bl	8005e78 <HAL_GetTick>
 8006d3c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d101      	bne.n	8006d48 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	e2dc      	b.n	8007302 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d008      	beq.n	8006d66 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2280      	movs	r2, #128	@ 0x80
 8006d58:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e2cd      	b.n	8007302 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a76      	ldr	r2, [pc, #472]	@ (8006f44 <HAL_DMA_Abort+0x214>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d04a      	beq.n	8006e06 <HAL_DMA_Abort+0xd6>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a74      	ldr	r2, [pc, #464]	@ (8006f48 <HAL_DMA_Abort+0x218>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d045      	beq.n	8006e06 <HAL_DMA_Abort+0xd6>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a73      	ldr	r2, [pc, #460]	@ (8006f4c <HAL_DMA_Abort+0x21c>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d040      	beq.n	8006e06 <HAL_DMA_Abort+0xd6>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a71      	ldr	r2, [pc, #452]	@ (8006f50 <HAL_DMA_Abort+0x220>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d03b      	beq.n	8006e06 <HAL_DMA_Abort+0xd6>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a70      	ldr	r2, [pc, #448]	@ (8006f54 <HAL_DMA_Abort+0x224>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d036      	beq.n	8006e06 <HAL_DMA_Abort+0xd6>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a6e      	ldr	r2, [pc, #440]	@ (8006f58 <HAL_DMA_Abort+0x228>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d031      	beq.n	8006e06 <HAL_DMA_Abort+0xd6>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a6d      	ldr	r2, [pc, #436]	@ (8006f5c <HAL_DMA_Abort+0x22c>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d02c      	beq.n	8006e06 <HAL_DMA_Abort+0xd6>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a6b      	ldr	r2, [pc, #428]	@ (8006f60 <HAL_DMA_Abort+0x230>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d027      	beq.n	8006e06 <HAL_DMA_Abort+0xd6>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a6a      	ldr	r2, [pc, #424]	@ (8006f64 <HAL_DMA_Abort+0x234>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d022      	beq.n	8006e06 <HAL_DMA_Abort+0xd6>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a68      	ldr	r2, [pc, #416]	@ (8006f68 <HAL_DMA_Abort+0x238>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d01d      	beq.n	8006e06 <HAL_DMA_Abort+0xd6>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a67      	ldr	r2, [pc, #412]	@ (8006f6c <HAL_DMA_Abort+0x23c>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d018      	beq.n	8006e06 <HAL_DMA_Abort+0xd6>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a65      	ldr	r2, [pc, #404]	@ (8006f70 <HAL_DMA_Abort+0x240>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d013      	beq.n	8006e06 <HAL_DMA_Abort+0xd6>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a64      	ldr	r2, [pc, #400]	@ (8006f74 <HAL_DMA_Abort+0x244>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d00e      	beq.n	8006e06 <HAL_DMA_Abort+0xd6>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a62      	ldr	r2, [pc, #392]	@ (8006f78 <HAL_DMA_Abort+0x248>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d009      	beq.n	8006e06 <HAL_DMA_Abort+0xd6>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a61      	ldr	r2, [pc, #388]	@ (8006f7c <HAL_DMA_Abort+0x24c>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d004      	beq.n	8006e06 <HAL_DMA_Abort+0xd6>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a5f      	ldr	r2, [pc, #380]	@ (8006f80 <HAL_DMA_Abort+0x250>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d101      	bne.n	8006e0a <HAL_DMA_Abort+0xda>
 8006e06:	2301      	movs	r3, #1
 8006e08:	e000      	b.n	8006e0c <HAL_DMA_Abort+0xdc>
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d013      	beq.n	8006e38 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f022 021e 	bic.w	r2, r2, #30
 8006e1e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	695a      	ldr	r2, [r3, #20]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006e2e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	617b      	str	r3, [r7, #20]
 8006e36:	e00a      	b.n	8006e4e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f022 020e 	bic.w	r2, r2, #14
 8006e46:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a3c      	ldr	r2, [pc, #240]	@ (8006f44 <HAL_DMA_Abort+0x214>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d072      	beq.n	8006f3e <HAL_DMA_Abort+0x20e>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a3a      	ldr	r2, [pc, #232]	@ (8006f48 <HAL_DMA_Abort+0x218>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d06d      	beq.n	8006f3e <HAL_DMA_Abort+0x20e>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a39      	ldr	r2, [pc, #228]	@ (8006f4c <HAL_DMA_Abort+0x21c>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d068      	beq.n	8006f3e <HAL_DMA_Abort+0x20e>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a37      	ldr	r2, [pc, #220]	@ (8006f50 <HAL_DMA_Abort+0x220>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d063      	beq.n	8006f3e <HAL_DMA_Abort+0x20e>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a36      	ldr	r2, [pc, #216]	@ (8006f54 <HAL_DMA_Abort+0x224>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d05e      	beq.n	8006f3e <HAL_DMA_Abort+0x20e>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a34      	ldr	r2, [pc, #208]	@ (8006f58 <HAL_DMA_Abort+0x228>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d059      	beq.n	8006f3e <HAL_DMA_Abort+0x20e>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a33      	ldr	r2, [pc, #204]	@ (8006f5c <HAL_DMA_Abort+0x22c>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d054      	beq.n	8006f3e <HAL_DMA_Abort+0x20e>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a31      	ldr	r2, [pc, #196]	@ (8006f60 <HAL_DMA_Abort+0x230>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d04f      	beq.n	8006f3e <HAL_DMA_Abort+0x20e>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a30      	ldr	r2, [pc, #192]	@ (8006f64 <HAL_DMA_Abort+0x234>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d04a      	beq.n	8006f3e <HAL_DMA_Abort+0x20e>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a2e      	ldr	r2, [pc, #184]	@ (8006f68 <HAL_DMA_Abort+0x238>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d045      	beq.n	8006f3e <HAL_DMA_Abort+0x20e>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a2d      	ldr	r2, [pc, #180]	@ (8006f6c <HAL_DMA_Abort+0x23c>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d040      	beq.n	8006f3e <HAL_DMA_Abort+0x20e>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a2b      	ldr	r2, [pc, #172]	@ (8006f70 <HAL_DMA_Abort+0x240>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d03b      	beq.n	8006f3e <HAL_DMA_Abort+0x20e>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a2a      	ldr	r2, [pc, #168]	@ (8006f74 <HAL_DMA_Abort+0x244>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d036      	beq.n	8006f3e <HAL_DMA_Abort+0x20e>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a28      	ldr	r2, [pc, #160]	@ (8006f78 <HAL_DMA_Abort+0x248>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d031      	beq.n	8006f3e <HAL_DMA_Abort+0x20e>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a27      	ldr	r2, [pc, #156]	@ (8006f7c <HAL_DMA_Abort+0x24c>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d02c      	beq.n	8006f3e <HAL_DMA_Abort+0x20e>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a25      	ldr	r2, [pc, #148]	@ (8006f80 <HAL_DMA_Abort+0x250>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d027      	beq.n	8006f3e <HAL_DMA_Abort+0x20e>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a24      	ldr	r2, [pc, #144]	@ (8006f84 <HAL_DMA_Abort+0x254>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d022      	beq.n	8006f3e <HAL_DMA_Abort+0x20e>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a22      	ldr	r2, [pc, #136]	@ (8006f88 <HAL_DMA_Abort+0x258>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d01d      	beq.n	8006f3e <HAL_DMA_Abort+0x20e>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a21      	ldr	r2, [pc, #132]	@ (8006f8c <HAL_DMA_Abort+0x25c>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d018      	beq.n	8006f3e <HAL_DMA_Abort+0x20e>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a1f      	ldr	r2, [pc, #124]	@ (8006f90 <HAL_DMA_Abort+0x260>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d013      	beq.n	8006f3e <HAL_DMA_Abort+0x20e>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a1e      	ldr	r2, [pc, #120]	@ (8006f94 <HAL_DMA_Abort+0x264>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d00e      	beq.n	8006f3e <HAL_DMA_Abort+0x20e>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a1c      	ldr	r2, [pc, #112]	@ (8006f98 <HAL_DMA_Abort+0x268>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d009      	beq.n	8006f3e <HAL_DMA_Abort+0x20e>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a1b      	ldr	r2, [pc, #108]	@ (8006f9c <HAL_DMA_Abort+0x26c>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d004      	beq.n	8006f3e <HAL_DMA_Abort+0x20e>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a19      	ldr	r2, [pc, #100]	@ (8006fa0 <HAL_DMA_Abort+0x270>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d132      	bne.n	8006fa4 <HAL_DMA_Abort+0x274>
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e031      	b.n	8006fa6 <HAL_DMA_Abort+0x276>
 8006f42:	bf00      	nop
 8006f44:	40020010 	.word	0x40020010
 8006f48:	40020028 	.word	0x40020028
 8006f4c:	40020040 	.word	0x40020040
 8006f50:	40020058 	.word	0x40020058
 8006f54:	40020070 	.word	0x40020070
 8006f58:	40020088 	.word	0x40020088
 8006f5c:	400200a0 	.word	0x400200a0
 8006f60:	400200b8 	.word	0x400200b8
 8006f64:	40020410 	.word	0x40020410
 8006f68:	40020428 	.word	0x40020428
 8006f6c:	40020440 	.word	0x40020440
 8006f70:	40020458 	.word	0x40020458
 8006f74:	40020470 	.word	0x40020470
 8006f78:	40020488 	.word	0x40020488
 8006f7c:	400204a0 	.word	0x400204a0
 8006f80:	400204b8 	.word	0x400204b8
 8006f84:	58025408 	.word	0x58025408
 8006f88:	5802541c 	.word	0x5802541c
 8006f8c:	58025430 	.word	0x58025430
 8006f90:	58025444 	.word	0x58025444
 8006f94:	58025458 	.word	0x58025458
 8006f98:	5802546c 	.word	0x5802546c
 8006f9c:	58025480 	.word	0x58025480
 8006fa0:	58025494 	.word	0x58025494
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d007      	beq.n	8006fba <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006fb8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a6d      	ldr	r2, [pc, #436]	@ (8007174 <HAL_DMA_Abort+0x444>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d04a      	beq.n	800705a <HAL_DMA_Abort+0x32a>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a6b      	ldr	r2, [pc, #428]	@ (8007178 <HAL_DMA_Abort+0x448>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d045      	beq.n	800705a <HAL_DMA_Abort+0x32a>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a6a      	ldr	r2, [pc, #424]	@ (800717c <HAL_DMA_Abort+0x44c>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d040      	beq.n	800705a <HAL_DMA_Abort+0x32a>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a68      	ldr	r2, [pc, #416]	@ (8007180 <HAL_DMA_Abort+0x450>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d03b      	beq.n	800705a <HAL_DMA_Abort+0x32a>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a67      	ldr	r2, [pc, #412]	@ (8007184 <HAL_DMA_Abort+0x454>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d036      	beq.n	800705a <HAL_DMA_Abort+0x32a>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a65      	ldr	r2, [pc, #404]	@ (8007188 <HAL_DMA_Abort+0x458>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d031      	beq.n	800705a <HAL_DMA_Abort+0x32a>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a64      	ldr	r2, [pc, #400]	@ (800718c <HAL_DMA_Abort+0x45c>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d02c      	beq.n	800705a <HAL_DMA_Abort+0x32a>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a62      	ldr	r2, [pc, #392]	@ (8007190 <HAL_DMA_Abort+0x460>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d027      	beq.n	800705a <HAL_DMA_Abort+0x32a>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a61      	ldr	r2, [pc, #388]	@ (8007194 <HAL_DMA_Abort+0x464>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d022      	beq.n	800705a <HAL_DMA_Abort+0x32a>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a5f      	ldr	r2, [pc, #380]	@ (8007198 <HAL_DMA_Abort+0x468>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d01d      	beq.n	800705a <HAL_DMA_Abort+0x32a>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a5e      	ldr	r2, [pc, #376]	@ (800719c <HAL_DMA_Abort+0x46c>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d018      	beq.n	800705a <HAL_DMA_Abort+0x32a>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a5c      	ldr	r2, [pc, #368]	@ (80071a0 <HAL_DMA_Abort+0x470>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d013      	beq.n	800705a <HAL_DMA_Abort+0x32a>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a5b      	ldr	r2, [pc, #364]	@ (80071a4 <HAL_DMA_Abort+0x474>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d00e      	beq.n	800705a <HAL_DMA_Abort+0x32a>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a59      	ldr	r2, [pc, #356]	@ (80071a8 <HAL_DMA_Abort+0x478>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d009      	beq.n	800705a <HAL_DMA_Abort+0x32a>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a58      	ldr	r2, [pc, #352]	@ (80071ac <HAL_DMA_Abort+0x47c>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d004      	beq.n	800705a <HAL_DMA_Abort+0x32a>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a56      	ldr	r2, [pc, #344]	@ (80071b0 <HAL_DMA_Abort+0x480>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d108      	bne.n	800706c <HAL_DMA_Abort+0x33c>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f022 0201 	bic.w	r2, r2, #1
 8007068:	601a      	str	r2, [r3, #0]
 800706a:	e007      	b.n	800707c <HAL_DMA_Abort+0x34c>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f022 0201 	bic.w	r2, r2, #1
 800707a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800707c:	e013      	b.n	80070a6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800707e:	f7fe fefb 	bl	8005e78 <HAL_GetTick>
 8007082:	4602      	mov	r2, r0
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	2b05      	cmp	r3, #5
 800708a:	d90c      	bls.n	80070a6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2220      	movs	r2, #32
 8007090:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2203      	movs	r2, #3
 8007096:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e12d      	b.n	8007302 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f003 0301 	and.w	r3, r3, #1
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d1e5      	bne.n	800707e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a2f      	ldr	r2, [pc, #188]	@ (8007174 <HAL_DMA_Abort+0x444>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d04a      	beq.n	8007152 <HAL_DMA_Abort+0x422>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a2d      	ldr	r2, [pc, #180]	@ (8007178 <HAL_DMA_Abort+0x448>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d045      	beq.n	8007152 <HAL_DMA_Abort+0x422>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a2c      	ldr	r2, [pc, #176]	@ (800717c <HAL_DMA_Abort+0x44c>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d040      	beq.n	8007152 <HAL_DMA_Abort+0x422>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a2a      	ldr	r2, [pc, #168]	@ (8007180 <HAL_DMA_Abort+0x450>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d03b      	beq.n	8007152 <HAL_DMA_Abort+0x422>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a29      	ldr	r2, [pc, #164]	@ (8007184 <HAL_DMA_Abort+0x454>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d036      	beq.n	8007152 <HAL_DMA_Abort+0x422>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a27      	ldr	r2, [pc, #156]	@ (8007188 <HAL_DMA_Abort+0x458>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d031      	beq.n	8007152 <HAL_DMA_Abort+0x422>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a26      	ldr	r2, [pc, #152]	@ (800718c <HAL_DMA_Abort+0x45c>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d02c      	beq.n	8007152 <HAL_DMA_Abort+0x422>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a24      	ldr	r2, [pc, #144]	@ (8007190 <HAL_DMA_Abort+0x460>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d027      	beq.n	8007152 <HAL_DMA_Abort+0x422>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a23      	ldr	r2, [pc, #140]	@ (8007194 <HAL_DMA_Abort+0x464>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d022      	beq.n	8007152 <HAL_DMA_Abort+0x422>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a21      	ldr	r2, [pc, #132]	@ (8007198 <HAL_DMA_Abort+0x468>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d01d      	beq.n	8007152 <HAL_DMA_Abort+0x422>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a20      	ldr	r2, [pc, #128]	@ (800719c <HAL_DMA_Abort+0x46c>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d018      	beq.n	8007152 <HAL_DMA_Abort+0x422>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a1e      	ldr	r2, [pc, #120]	@ (80071a0 <HAL_DMA_Abort+0x470>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d013      	beq.n	8007152 <HAL_DMA_Abort+0x422>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a1d      	ldr	r2, [pc, #116]	@ (80071a4 <HAL_DMA_Abort+0x474>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d00e      	beq.n	8007152 <HAL_DMA_Abort+0x422>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a1b      	ldr	r2, [pc, #108]	@ (80071a8 <HAL_DMA_Abort+0x478>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d009      	beq.n	8007152 <HAL_DMA_Abort+0x422>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a1a      	ldr	r2, [pc, #104]	@ (80071ac <HAL_DMA_Abort+0x47c>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d004      	beq.n	8007152 <HAL_DMA_Abort+0x422>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a18      	ldr	r2, [pc, #96]	@ (80071b0 <HAL_DMA_Abort+0x480>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d101      	bne.n	8007156 <HAL_DMA_Abort+0x426>
 8007152:	2301      	movs	r3, #1
 8007154:	e000      	b.n	8007158 <HAL_DMA_Abort+0x428>
 8007156:	2300      	movs	r3, #0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d02b      	beq.n	80071b4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007160:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007166:	f003 031f 	and.w	r3, r3, #31
 800716a:	223f      	movs	r2, #63	@ 0x3f
 800716c:	409a      	lsls	r2, r3
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	609a      	str	r2, [r3, #8]
 8007172:	e02a      	b.n	80071ca <HAL_DMA_Abort+0x49a>
 8007174:	40020010 	.word	0x40020010
 8007178:	40020028 	.word	0x40020028
 800717c:	40020040 	.word	0x40020040
 8007180:	40020058 	.word	0x40020058
 8007184:	40020070 	.word	0x40020070
 8007188:	40020088 	.word	0x40020088
 800718c:	400200a0 	.word	0x400200a0
 8007190:	400200b8 	.word	0x400200b8
 8007194:	40020410 	.word	0x40020410
 8007198:	40020428 	.word	0x40020428
 800719c:	40020440 	.word	0x40020440
 80071a0:	40020458 	.word	0x40020458
 80071a4:	40020470 	.word	0x40020470
 80071a8:	40020488 	.word	0x40020488
 80071ac:	400204a0 	.word	0x400204a0
 80071b0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071b8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071be:	f003 031f 	and.w	r3, r3, #31
 80071c2:	2201      	movs	r2, #1
 80071c4:	409a      	lsls	r2, r3
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a4f      	ldr	r2, [pc, #316]	@ (800730c <HAL_DMA_Abort+0x5dc>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d072      	beq.n	80072ba <HAL_DMA_Abort+0x58a>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a4d      	ldr	r2, [pc, #308]	@ (8007310 <HAL_DMA_Abort+0x5e0>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d06d      	beq.n	80072ba <HAL_DMA_Abort+0x58a>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a4c      	ldr	r2, [pc, #304]	@ (8007314 <HAL_DMA_Abort+0x5e4>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d068      	beq.n	80072ba <HAL_DMA_Abort+0x58a>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a4a      	ldr	r2, [pc, #296]	@ (8007318 <HAL_DMA_Abort+0x5e8>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d063      	beq.n	80072ba <HAL_DMA_Abort+0x58a>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a49      	ldr	r2, [pc, #292]	@ (800731c <HAL_DMA_Abort+0x5ec>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d05e      	beq.n	80072ba <HAL_DMA_Abort+0x58a>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a47      	ldr	r2, [pc, #284]	@ (8007320 <HAL_DMA_Abort+0x5f0>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d059      	beq.n	80072ba <HAL_DMA_Abort+0x58a>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a46      	ldr	r2, [pc, #280]	@ (8007324 <HAL_DMA_Abort+0x5f4>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d054      	beq.n	80072ba <HAL_DMA_Abort+0x58a>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a44      	ldr	r2, [pc, #272]	@ (8007328 <HAL_DMA_Abort+0x5f8>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d04f      	beq.n	80072ba <HAL_DMA_Abort+0x58a>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a43      	ldr	r2, [pc, #268]	@ (800732c <HAL_DMA_Abort+0x5fc>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d04a      	beq.n	80072ba <HAL_DMA_Abort+0x58a>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a41      	ldr	r2, [pc, #260]	@ (8007330 <HAL_DMA_Abort+0x600>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d045      	beq.n	80072ba <HAL_DMA_Abort+0x58a>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a40      	ldr	r2, [pc, #256]	@ (8007334 <HAL_DMA_Abort+0x604>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d040      	beq.n	80072ba <HAL_DMA_Abort+0x58a>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a3e      	ldr	r2, [pc, #248]	@ (8007338 <HAL_DMA_Abort+0x608>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d03b      	beq.n	80072ba <HAL_DMA_Abort+0x58a>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a3d      	ldr	r2, [pc, #244]	@ (800733c <HAL_DMA_Abort+0x60c>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d036      	beq.n	80072ba <HAL_DMA_Abort+0x58a>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a3b      	ldr	r2, [pc, #236]	@ (8007340 <HAL_DMA_Abort+0x610>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d031      	beq.n	80072ba <HAL_DMA_Abort+0x58a>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a3a      	ldr	r2, [pc, #232]	@ (8007344 <HAL_DMA_Abort+0x614>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d02c      	beq.n	80072ba <HAL_DMA_Abort+0x58a>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a38      	ldr	r2, [pc, #224]	@ (8007348 <HAL_DMA_Abort+0x618>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d027      	beq.n	80072ba <HAL_DMA_Abort+0x58a>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a37      	ldr	r2, [pc, #220]	@ (800734c <HAL_DMA_Abort+0x61c>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d022      	beq.n	80072ba <HAL_DMA_Abort+0x58a>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a35      	ldr	r2, [pc, #212]	@ (8007350 <HAL_DMA_Abort+0x620>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d01d      	beq.n	80072ba <HAL_DMA_Abort+0x58a>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a34      	ldr	r2, [pc, #208]	@ (8007354 <HAL_DMA_Abort+0x624>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d018      	beq.n	80072ba <HAL_DMA_Abort+0x58a>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a32      	ldr	r2, [pc, #200]	@ (8007358 <HAL_DMA_Abort+0x628>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d013      	beq.n	80072ba <HAL_DMA_Abort+0x58a>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a31      	ldr	r2, [pc, #196]	@ (800735c <HAL_DMA_Abort+0x62c>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d00e      	beq.n	80072ba <HAL_DMA_Abort+0x58a>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a2f      	ldr	r2, [pc, #188]	@ (8007360 <HAL_DMA_Abort+0x630>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d009      	beq.n	80072ba <HAL_DMA_Abort+0x58a>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a2e      	ldr	r2, [pc, #184]	@ (8007364 <HAL_DMA_Abort+0x634>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d004      	beq.n	80072ba <HAL_DMA_Abort+0x58a>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a2c      	ldr	r2, [pc, #176]	@ (8007368 <HAL_DMA_Abort+0x638>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d101      	bne.n	80072be <HAL_DMA_Abort+0x58e>
 80072ba:	2301      	movs	r3, #1
 80072bc:	e000      	b.n	80072c0 <HAL_DMA_Abort+0x590>
 80072be:	2300      	movs	r3, #0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d015      	beq.n	80072f0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80072cc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00c      	beq.n	80072f0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80072e4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80072ee:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	3718      	adds	r7, #24
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	40020010 	.word	0x40020010
 8007310:	40020028 	.word	0x40020028
 8007314:	40020040 	.word	0x40020040
 8007318:	40020058 	.word	0x40020058
 800731c:	40020070 	.word	0x40020070
 8007320:	40020088 	.word	0x40020088
 8007324:	400200a0 	.word	0x400200a0
 8007328:	400200b8 	.word	0x400200b8
 800732c:	40020410 	.word	0x40020410
 8007330:	40020428 	.word	0x40020428
 8007334:	40020440 	.word	0x40020440
 8007338:	40020458 	.word	0x40020458
 800733c:	40020470 	.word	0x40020470
 8007340:	40020488 	.word	0x40020488
 8007344:	400204a0 	.word	0x400204a0
 8007348:	400204b8 	.word	0x400204b8
 800734c:	58025408 	.word	0x58025408
 8007350:	5802541c 	.word	0x5802541c
 8007354:	58025430 	.word	0x58025430
 8007358:	58025444 	.word	0x58025444
 800735c:	58025458 	.word	0x58025458
 8007360:	5802546c 	.word	0x5802546c
 8007364:	58025480 	.word	0x58025480
 8007368:	58025494 	.word	0x58025494

0800736c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d101      	bne.n	800737e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	e237      	b.n	80077ee <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007384:	b2db      	uxtb	r3, r3
 8007386:	2b02      	cmp	r3, #2
 8007388:	d004      	beq.n	8007394 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2280      	movs	r2, #128	@ 0x80
 800738e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	e22c      	b.n	80077ee <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a5c      	ldr	r2, [pc, #368]	@ (800750c <HAL_DMA_Abort_IT+0x1a0>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d04a      	beq.n	8007434 <HAL_DMA_Abort_IT+0xc8>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a5b      	ldr	r2, [pc, #364]	@ (8007510 <HAL_DMA_Abort_IT+0x1a4>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d045      	beq.n	8007434 <HAL_DMA_Abort_IT+0xc8>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a59      	ldr	r2, [pc, #356]	@ (8007514 <HAL_DMA_Abort_IT+0x1a8>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d040      	beq.n	8007434 <HAL_DMA_Abort_IT+0xc8>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a58      	ldr	r2, [pc, #352]	@ (8007518 <HAL_DMA_Abort_IT+0x1ac>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d03b      	beq.n	8007434 <HAL_DMA_Abort_IT+0xc8>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a56      	ldr	r2, [pc, #344]	@ (800751c <HAL_DMA_Abort_IT+0x1b0>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d036      	beq.n	8007434 <HAL_DMA_Abort_IT+0xc8>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a55      	ldr	r2, [pc, #340]	@ (8007520 <HAL_DMA_Abort_IT+0x1b4>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d031      	beq.n	8007434 <HAL_DMA_Abort_IT+0xc8>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a53      	ldr	r2, [pc, #332]	@ (8007524 <HAL_DMA_Abort_IT+0x1b8>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d02c      	beq.n	8007434 <HAL_DMA_Abort_IT+0xc8>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a52      	ldr	r2, [pc, #328]	@ (8007528 <HAL_DMA_Abort_IT+0x1bc>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d027      	beq.n	8007434 <HAL_DMA_Abort_IT+0xc8>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a50      	ldr	r2, [pc, #320]	@ (800752c <HAL_DMA_Abort_IT+0x1c0>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d022      	beq.n	8007434 <HAL_DMA_Abort_IT+0xc8>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a4f      	ldr	r2, [pc, #316]	@ (8007530 <HAL_DMA_Abort_IT+0x1c4>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d01d      	beq.n	8007434 <HAL_DMA_Abort_IT+0xc8>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a4d      	ldr	r2, [pc, #308]	@ (8007534 <HAL_DMA_Abort_IT+0x1c8>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d018      	beq.n	8007434 <HAL_DMA_Abort_IT+0xc8>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a4c      	ldr	r2, [pc, #304]	@ (8007538 <HAL_DMA_Abort_IT+0x1cc>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d013      	beq.n	8007434 <HAL_DMA_Abort_IT+0xc8>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a4a      	ldr	r2, [pc, #296]	@ (800753c <HAL_DMA_Abort_IT+0x1d0>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d00e      	beq.n	8007434 <HAL_DMA_Abort_IT+0xc8>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a49      	ldr	r2, [pc, #292]	@ (8007540 <HAL_DMA_Abort_IT+0x1d4>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d009      	beq.n	8007434 <HAL_DMA_Abort_IT+0xc8>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a47      	ldr	r2, [pc, #284]	@ (8007544 <HAL_DMA_Abort_IT+0x1d8>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d004      	beq.n	8007434 <HAL_DMA_Abort_IT+0xc8>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a46      	ldr	r2, [pc, #280]	@ (8007548 <HAL_DMA_Abort_IT+0x1dc>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d101      	bne.n	8007438 <HAL_DMA_Abort_IT+0xcc>
 8007434:	2301      	movs	r3, #1
 8007436:	e000      	b.n	800743a <HAL_DMA_Abort_IT+0xce>
 8007438:	2300      	movs	r3, #0
 800743a:	2b00      	cmp	r3, #0
 800743c:	f000 8086 	beq.w	800754c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2204      	movs	r2, #4
 8007444:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a2f      	ldr	r2, [pc, #188]	@ (800750c <HAL_DMA_Abort_IT+0x1a0>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d04a      	beq.n	80074e8 <HAL_DMA_Abort_IT+0x17c>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a2e      	ldr	r2, [pc, #184]	@ (8007510 <HAL_DMA_Abort_IT+0x1a4>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d045      	beq.n	80074e8 <HAL_DMA_Abort_IT+0x17c>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a2c      	ldr	r2, [pc, #176]	@ (8007514 <HAL_DMA_Abort_IT+0x1a8>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d040      	beq.n	80074e8 <HAL_DMA_Abort_IT+0x17c>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a2b      	ldr	r2, [pc, #172]	@ (8007518 <HAL_DMA_Abort_IT+0x1ac>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d03b      	beq.n	80074e8 <HAL_DMA_Abort_IT+0x17c>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a29      	ldr	r2, [pc, #164]	@ (800751c <HAL_DMA_Abort_IT+0x1b0>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d036      	beq.n	80074e8 <HAL_DMA_Abort_IT+0x17c>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a28      	ldr	r2, [pc, #160]	@ (8007520 <HAL_DMA_Abort_IT+0x1b4>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d031      	beq.n	80074e8 <HAL_DMA_Abort_IT+0x17c>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a26      	ldr	r2, [pc, #152]	@ (8007524 <HAL_DMA_Abort_IT+0x1b8>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d02c      	beq.n	80074e8 <HAL_DMA_Abort_IT+0x17c>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a25      	ldr	r2, [pc, #148]	@ (8007528 <HAL_DMA_Abort_IT+0x1bc>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d027      	beq.n	80074e8 <HAL_DMA_Abort_IT+0x17c>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a23      	ldr	r2, [pc, #140]	@ (800752c <HAL_DMA_Abort_IT+0x1c0>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d022      	beq.n	80074e8 <HAL_DMA_Abort_IT+0x17c>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a22      	ldr	r2, [pc, #136]	@ (8007530 <HAL_DMA_Abort_IT+0x1c4>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d01d      	beq.n	80074e8 <HAL_DMA_Abort_IT+0x17c>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a20      	ldr	r2, [pc, #128]	@ (8007534 <HAL_DMA_Abort_IT+0x1c8>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d018      	beq.n	80074e8 <HAL_DMA_Abort_IT+0x17c>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a1f      	ldr	r2, [pc, #124]	@ (8007538 <HAL_DMA_Abort_IT+0x1cc>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d013      	beq.n	80074e8 <HAL_DMA_Abort_IT+0x17c>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a1d      	ldr	r2, [pc, #116]	@ (800753c <HAL_DMA_Abort_IT+0x1d0>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d00e      	beq.n	80074e8 <HAL_DMA_Abort_IT+0x17c>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a1c      	ldr	r2, [pc, #112]	@ (8007540 <HAL_DMA_Abort_IT+0x1d4>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d009      	beq.n	80074e8 <HAL_DMA_Abort_IT+0x17c>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a1a      	ldr	r2, [pc, #104]	@ (8007544 <HAL_DMA_Abort_IT+0x1d8>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d004      	beq.n	80074e8 <HAL_DMA_Abort_IT+0x17c>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a19      	ldr	r2, [pc, #100]	@ (8007548 <HAL_DMA_Abort_IT+0x1dc>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d108      	bne.n	80074fa <HAL_DMA_Abort_IT+0x18e>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f022 0201 	bic.w	r2, r2, #1
 80074f6:	601a      	str	r2, [r3, #0]
 80074f8:	e178      	b.n	80077ec <HAL_DMA_Abort_IT+0x480>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f022 0201 	bic.w	r2, r2, #1
 8007508:	601a      	str	r2, [r3, #0]
 800750a:	e16f      	b.n	80077ec <HAL_DMA_Abort_IT+0x480>
 800750c:	40020010 	.word	0x40020010
 8007510:	40020028 	.word	0x40020028
 8007514:	40020040 	.word	0x40020040
 8007518:	40020058 	.word	0x40020058
 800751c:	40020070 	.word	0x40020070
 8007520:	40020088 	.word	0x40020088
 8007524:	400200a0 	.word	0x400200a0
 8007528:	400200b8 	.word	0x400200b8
 800752c:	40020410 	.word	0x40020410
 8007530:	40020428 	.word	0x40020428
 8007534:	40020440 	.word	0x40020440
 8007538:	40020458 	.word	0x40020458
 800753c:	40020470 	.word	0x40020470
 8007540:	40020488 	.word	0x40020488
 8007544:	400204a0 	.word	0x400204a0
 8007548:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f022 020e 	bic.w	r2, r2, #14
 800755a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a6c      	ldr	r2, [pc, #432]	@ (8007714 <HAL_DMA_Abort_IT+0x3a8>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d04a      	beq.n	80075fc <HAL_DMA_Abort_IT+0x290>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a6b      	ldr	r2, [pc, #428]	@ (8007718 <HAL_DMA_Abort_IT+0x3ac>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d045      	beq.n	80075fc <HAL_DMA_Abort_IT+0x290>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a69      	ldr	r2, [pc, #420]	@ (800771c <HAL_DMA_Abort_IT+0x3b0>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d040      	beq.n	80075fc <HAL_DMA_Abort_IT+0x290>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a68      	ldr	r2, [pc, #416]	@ (8007720 <HAL_DMA_Abort_IT+0x3b4>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d03b      	beq.n	80075fc <HAL_DMA_Abort_IT+0x290>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a66      	ldr	r2, [pc, #408]	@ (8007724 <HAL_DMA_Abort_IT+0x3b8>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d036      	beq.n	80075fc <HAL_DMA_Abort_IT+0x290>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a65      	ldr	r2, [pc, #404]	@ (8007728 <HAL_DMA_Abort_IT+0x3bc>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d031      	beq.n	80075fc <HAL_DMA_Abort_IT+0x290>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a63      	ldr	r2, [pc, #396]	@ (800772c <HAL_DMA_Abort_IT+0x3c0>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d02c      	beq.n	80075fc <HAL_DMA_Abort_IT+0x290>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a62      	ldr	r2, [pc, #392]	@ (8007730 <HAL_DMA_Abort_IT+0x3c4>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d027      	beq.n	80075fc <HAL_DMA_Abort_IT+0x290>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a60      	ldr	r2, [pc, #384]	@ (8007734 <HAL_DMA_Abort_IT+0x3c8>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d022      	beq.n	80075fc <HAL_DMA_Abort_IT+0x290>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a5f      	ldr	r2, [pc, #380]	@ (8007738 <HAL_DMA_Abort_IT+0x3cc>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d01d      	beq.n	80075fc <HAL_DMA_Abort_IT+0x290>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a5d      	ldr	r2, [pc, #372]	@ (800773c <HAL_DMA_Abort_IT+0x3d0>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d018      	beq.n	80075fc <HAL_DMA_Abort_IT+0x290>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a5c      	ldr	r2, [pc, #368]	@ (8007740 <HAL_DMA_Abort_IT+0x3d4>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d013      	beq.n	80075fc <HAL_DMA_Abort_IT+0x290>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a5a      	ldr	r2, [pc, #360]	@ (8007744 <HAL_DMA_Abort_IT+0x3d8>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d00e      	beq.n	80075fc <HAL_DMA_Abort_IT+0x290>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a59      	ldr	r2, [pc, #356]	@ (8007748 <HAL_DMA_Abort_IT+0x3dc>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d009      	beq.n	80075fc <HAL_DMA_Abort_IT+0x290>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a57      	ldr	r2, [pc, #348]	@ (800774c <HAL_DMA_Abort_IT+0x3e0>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d004      	beq.n	80075fc <HAL_DMA_Abort_IT+0x290>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a56      	ldr	r2, [pc, #344]	@ (8007750 <HAL_DMA_Abort_IT+0x3e4>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d108      	bne.n	800760e <HAL_DMA_Abort_IT+0x2a2>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f022 0201 	bic.w	r2, r2, #1
 800760a:	601a      	str	r2, [r3, #0]
 800760c:	e007      	b.n	800761e <HAL_DMA_Abort_IT+0x2b2>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f022 0201 	bic.w	r2, r2, #1
 800761c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a3c      	ldr	r2, [pc, #240]	@ (8007714 <HAL_DMA_Abort_IT+0x3a8>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d072      	beq.n	800770e <HAL_DMA_Abort_IT+0x3a2>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a3a      	ldr	r2, [pc, #232]	@ (8007718 <HAL_DMA_Abort_IT+0x3ac>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d06d      	beq.n	800770e <HAL_DMA_Abort_IT+0x3a2>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a39      	ldr	r2, [pc, #228]	@ (800771c <HAL_DMA_Abort_IT+0x3b0>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d068      	beq.n	800770e <HAL_DMA_Abort_IT+0x3a2>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a37      	ldr	r2, [pc, #220]	@ (8007720 <HAL_DMA_Abort_IT+0x3b4>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d063      	beq.n	800770e <HAL_DMA_Abort_IT+0x3a2>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a36      	ldr	r2, [pc, #216]	@ (8007724 <HAL_DMA_Abort_IT+0x3b8>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d05e      	beq.n	800770e <HAL_DMA_Abort_IT+0x3a2>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a34      	ldr	r2, [pc, #208]	@ (8007728 <HAL_DMA_Abort_IT+0x3bc>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d059      	beq.n	800770e <HAL_DMA_Abort_IT+0x3a2>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a33      	ldr	r2, [pc, #204]	@ (800772c <HAL_DMA_Abort_IT+0x3c0>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d054      	beq.n	800770e <HAL_DMA_Abort_IT+0x3a2>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a31      	ldr	r2, [pc, #196]	@ (8007730 <HAL_DMA_Abort_IT+0x3c4>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d04f      	beq.n	800770e <HAL_DMA_Abort_IT+0x3a2>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a30      	ldr	r2, [pc, #192]	@ (8007734 <HAL_DMA_Abort_IT+0x3c8>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d04a      	beq.n	800770e <HAL_DMA_Abort_IT+0x3a2>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a2e      	ldr	r2, [pc, #184]	@ (8007738 <HAL_DMA_Abort_IT+0x3cc>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d045      	beq.n	800770e <HAL_DMA_Abort_IT+0x3a2>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a2d      	ldr	r2, [pc, #180]	@ (800773c <HAL_DMA_Abort_IT+0x3d0>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d040      	beq.n	800770e <HAL_DMA_Abort_IT+0x3a2>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a2b      	ldr	r2, [pc, #172]	@ (8007740 <HAL_DMA_Abort_IT+0x3d4>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d03b      	beq.n	800770e <HAL_DMA_Abort_IT+0x3a2>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a2a      	ldr	r2, [pc, #168]	@ (8007744 <HAL_DMA_Abort_IT+0x3d8>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d036      	beq.n	800770e <HAL_DMA_Abort_IT+0x3a2>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a28      	ldr	r2, [pc, #160]	@ (8007748 <HAL_DMA_Abort_IT+0x3dc>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d031      	beq.n	800770e <HAL_DMA_Abort_IT+0x3a2>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a27      	ldr	r2, [pc, #156]	@ (800774c <HAL_DMA_Abort_IT+0x3e0>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d02c      	beq.n	800770e <HAL_DMA_Abort_IT+0x3a2>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a25      	ldr	r2, [pc, #148]	@ (8007750 <HAL_DMA_Abort_IT+0x3e4>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d027      	beq.n	800770e <HAL_DMA_Abort_IT+0x3a2>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a24      	ldr	r2, [pc, #144]	@ (8007754 <HAL_DMA_Abort_IT+0x3e8>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d022      	beq.n	800770e <HAL_DMA_Abort_IT+0x3a2>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a22      	ldr	r2, [pc, #136]	@ (8007758 <HAL_DMA_Abort_IT+0x3ec>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d01d      	beq.n	800770e <HAL_DMA_Abort_IT+0x3a2>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a21      	ldr	r2, [pc, #132]	@ (800775c <HAL_DMA_Abort_IT+0x3f0>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d018      	beq.n	800770e <HAL_DMA_Abort_IT+0x3a2>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a1f      	ldr	r2, [pc, #124]	@ (8007760 <HAL_DMA_Abort_IT+0x3f4>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d013      	beq.n	800770e <HAL_DMA_Abort_IT+0x3a2>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a1e      	ldr	r2, [pc, #120]	@ (8007764 <HAL_DMA_Abort_IT+0x3f8>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d00e      	beq.n	800770e <HAL_DMA_Abort_IT+0x3a2>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a1c      	ldr	r2, [pc, #112]	@ (8007768 <HAL_DMA_Abort_IT+0x3fc>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d009      	beq.n	800770e <HAL_DMA_Abort_IT+0x3a2>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a1b      	ldr	r2, [pc, #108]	@ (800776c <HAL_DMA_Abort_IT+0x400>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d004      	beq.n	800770e <HAL_DMA_Abort_IT+0x3a2>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a19      	ldr	r2, [pc, #100]	@ (8007770 <HAL_DMA_Abort_IT+0x404>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d132      	bne.n	8007774 <HAL_DMA_Abort_IT+0x408>
 800770e:	2301      	movs	r3, #1
 8007710:	e031      	b.n	8007776 <HAL_DMA_Abort_IT+0x40a>
 8007712:	bf00      	nop
 8007714:	40020010 	.word	0x40020010
 8007718:	40020028 	.word	0x40020028
 800771c:	40020040 	.word	0x40020040
 8007720:	40020058 	.word	0x40020058
 8007724:	40020070 	.word	0x40020070
 8007728:	40020088 	.word	0x40020088
 800772c:	400200a0 	.word	0x400200a0
 8007730:	400200b8 	.word	0x400200b8
 8007734:	40020410 	.word	0x40020410
 8007738:	40020428 	.word	0x40020428
 800773c:	40020440 	.word	0x40020440
 8007740:	40020458 	.word	0x40020458
 8007744:	40020470 	.word	0x40020470
 8007748:	40020488 	.word	0x40020488
 800774c:	400204a0 	.word	0x400204a0
 8007750:	400204b8 	.word	0x400204b8
 8007754:	58025408 	.word	0x58025408
 8007758:	5802541c 	.word	0x5802541c
 800775c:	58025430 	.word	0x58025430
 8007760:	58025444 	.word	0x58025444
 8007764:	58025458 	.word	0x58025458
 8007768:	5802546c 	.word	0x5802546c
 800776c:	58025480 	.word	0x58025480
 8007770:	58025494 	.word	0x58025494
 8007774:	2300      	movs	r3, #0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d028      	beq.n	80077cc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007784:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007788:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800778e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007794:	f003 031f 	and.w	r3, r3, #31
 8007798:	2201      	movs	r2, #1
 800779a:	409a      	lsls	r2, r3
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80077a8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d00c      	beq.n	80077cc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80077c0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80077ca:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d003      	beq.n	80077ec <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3710      	adds	r7, #16
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop

080077f8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b08a      	sub	sp, #40	@ 0x28
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007800:	2300      	movs	r3, #0
 8007802:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007804:	4b67      	ldr	r3, [pc, #412]	@ (80079a4 <HAL_DMA_IRQHandler+0x1ac>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a67      	ldr	r2, [pc, #412]	@ (80079a8 <HAL_DMA_IRQHandler+0x1b0>)
 800780a:	fba2 2303 	umull	r2, r3, r2, r3
 800780e:	0a9b      	lsrs	r3, r3, #10
 8007810:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007816:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800781c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800781e:	6a3b      	ldr	r3, [r7, #32]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a5f      	ldr	r2, [pc, #380]	@ (80079ac <HAL_DMA_IRQHandler+0x1b4>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d04a      	beq.n	80078ca <HAL_DMA_IRQHandler+0xd2>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a5d      	ldr	r2, [pc, #372]	@ (80079b0 <HAL_DMA_IRQHandler+0x1b8>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d045      	beq.n	80078ca <HAL_DMA_IRQHandler+0xd2>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a5c      	ldr	r2, [pc, #368]	@ (80079b4 <HAL_DMA_IRQHandler+0x1bc>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d040      	beq.n	80078ca <HAL_DMA_IRQHandler+0xd2>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a5a      	ldr	r2, [pc, #360]	@ (80079b8 <HAL_DMA_IRQHandler+0x1c0>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d03b      	beq.n	80078ca <HAL_DMA_IRQHandler+0xd2>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a59      	ldr	r2, [pc, #356]	@ (80079bc <HAL_DMA_IRQHandler+0x1c4>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d036      	beq.n	80078ca <HAL_DMA_IRQHandler+0xd2>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a57      	ldr	r2, [pc, #348]	@ (80079c0 <HAL_DMA_IRQHandler+0x1c8>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d031      	beq.n	80078ca <HAL_DMA_IRQHandler+0xd2>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a56      	ldr	r2, [pc, #344]	@ (80079c4 <HAL_DMA_IRQHandler+0x1cc>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d02c      	beq.n	80078ca <HAL_DMA_IRQHandler+0xd2>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a54      	ldr	r2, [pc, #336]	@ (80079c8 <HAL_DMA_IRQHandler+0x1d0>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d027      	beq.n	80078ca <HAL_DMA_IRQHandler+0xd2>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a53      	ldr	r2, [pc, #332]	@ (80079cc <HAL_DMA_IRQHandler+0x1d4>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d022      	beq.n	80078ca <HAL_DMA_IRQHandler+0xd2>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a51      	ldr	r2, [pc, #324]	@ (80079d0 <HAL_DMA_IRQHandler+0x1d8>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d01d      	beq.n	80078ca <HAL_DMA_IRQHandler+0xd2>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a50      	ldr	r2, [pc, #320]	@ (80079d4 <HAL_DMA_IRQHandler+0x1dc>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d018      	beq.n	80078ca <HAL_DMA_IRQHandler+0xd2>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a4e      	ldr	r2, [pc, #312]	@ (80079d8 <HAL_DMA_IRQHandler+0x1e0>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d013      	beq.n	80078ca <HAL_DMA_IRQHandler+0xd2>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a4d      	ldr	r2, [pc, #308]	@ (80079dc <HAL_DMA_IRQHandler+0x1e4>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d00e      	beq.n	80078ca <HAL_DMA_IRQHandler+0xd2>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a4b      	ldr	r2, [pc, #300]	@ (80079e0 <HAL_DMA_IRQHandler+0x1e8>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d009      	beq.n	80078ca <HAL_DMA_IRQHandler+0xd2>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a4a      	ldr	r2, [pc, #296]	@ (80079e4 <HAL_DMA_IRQHandler+0x1ec>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d004      	beq.n	80078ca <HAL_DMA_IRQHandler+0xd2>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a48      	ldr	r2, [pc, #288]	@ (80079e8 <HAL_DMA_IRQHandler+0x1f0>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d101      	bne.n	80078ce <HAL_DMA_IRQHandler+0xd6>
 80078ca:	2301      	movs	r3, #1
 80078cc:	e000      	b.n	80078d0 <HAL_DMA_IRQHandler+0xd8>
 80078ce:	2300      	movs	r3, #0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f000 842b 	beq.w	800812c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078da:	f003 031f 	and.w	r3, r3, #31
 80078de:	2208      	movs	r2, #8
 80078e0:	409a      	lsls	r2, r3
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	4013      	ands	r3, r2
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f000 80a2 	beq.w	8007a30 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a2e      	ldr	r2, [pc, #184]	@ (80079ac <HAL_DMA_IRQHandler+0x1b4>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d04a      	beq.n	800798c <HAL_DMA_IRQHandler+0x194>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a2d      	ldr	r2, [pc, #180]	@ (80079b0 <HAL_DMA_IRQHandler+0x1b8>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d045      	beq.n	800798c <HAL_DMA_IRQHandler+0x194>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a2b      	ldr	r2, [pc, #172]	@ (80079b4 <HAL_DMA_IRQHandler+0x1bc>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d040      	beq.n	800798c <HAL_DMA_IRQHandler+0x194>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a2a      	ldr	r2, [pc, #168]	@ (80079b8 <HAL_DMA_IRQHandler+0x1c0>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d03b      	beq.n	800798c <HAL_DMA_IRQHandler+0x194>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a28      	ldr	r2, [pc, #160]	@ (80079bc <HAL_DMA_IRQHandler+0x1c4>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d036      	beq.n	800798c <HAL_DMA_IRQHandler+0x194>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a27      	ldr	r2, [pc, #156]	@ (80079c0 <HAL_DMA_IRQHandler+0x1c8>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d031      	beq.n	800798c <HAL_DMA_IRQHandler+0x194>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a25      	ldr	r2, [pc, #148]	@ (80079c4 <HAL_DMA_IRQHandler+0x1cc>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d02c      	beq.n	800798c <HAL_DMA_IRQHandler+0x194>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a24      	ldr	r2, [pc, #144]	@ (80079c8 <HAL_DMA_IRQHandler+0x1d0>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d027      	beq.n	800798c <HAL_DMA_IRQHandler+0x194>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a22      	ldr	r2, [pc, #136]	@ (80079cc <HAL_DMA_IRQHandler+0x1d4>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d022      	beq.n	800798c <HAL_DMA_IRQHandler+0x194>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a21      	ldr	r2, [pc, #132]	@ (80079d0 <HAL_DMA_IRQHandler+0x1d8>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d01d      	beq.n	800798c <HAL_DMA_IRQHandler+0x194>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a1f      	ldr	r2, [pc, #124]	@ (80079d4 <HAL_DMA_IRQHandler+0x1dc>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d018      	beq.n	800798c <HAL_DMA_IRQHandler+0x194>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a1e      	ldr	r2, [pc, #120]	@ (80079d8 <HAL_DMA_IRQHandler+0x1e0>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d013      	beq.n	800798c <HAL_DMA_IRQHandler+0x194>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a1c      	ldr	r2, [pc, #112]	@ (80079dc <HAL_DMA_IRQHandler+0x1e4>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d00e      	beq.n	800798c <HAL_DMA_IRQHandler+0x194>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a1b      	ldr	r2, [pc, #108]	@ (80079e0 <HAL_DMA_IRQHandler+0x1e8>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d009      	beq.n	800798c <HAL_DMA_IRQHandler+0x194>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a19      	ldr	r2, [pc, #100]	@ (80079e4 <HAL_DMA_IRQHandler+0x1ec>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d004      	beq.n	800798c <HAL_DMA_IRQHandler+0x194>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a18      	ldr	r2, [pc, #96]	@ (80079e8 <HAL_DMA_IRQHandler+0x1f0>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d12f      	bne.n	80079ec <HAL_DMA_IRQHandler+0x1f4>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f003 0304 	and.w	r3, r3, #4
 8007996:	2b00      	cmp	r3, #0
 8007998:	bf14      	ite	ne
 800799a:	2301      	movne	r3, #1
 800799c:	2300      	moveq	r3, #0
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	e02e      	b.n	8007a00 <HAL_DMA_IRQHandler+0x208>
 80079a2:	bf00      	nop
 80079a4:	24000000 	.word	0x24000000
 80079a8:	1b4e81b5 	.word	0x1b4e81b5
 80079ac:	40020010 	.word	0x40020010
 80079b0:	40020028 	.word	0x40020028
 80079b4:	40020040 	.word	0x40020040
 80079b8:	40020058 	.word	0x40020058
 80079bc:	40020070 	.word	0x40020070
 80079c0:	40020088 	.word	0x40020088
 80079c4:	400200a0 	.word	0x400200a0
 80079c8:	400200b8 	.word	0x400200b8
 80079cc:	40020410 	.word	0x40020410
 80079d0:	40020428 	.word	0x40020428
 80079d4:	40020440 	.word	0x40020440
 80079d8:	40020458 	.word	0x40020458
 80079dc:	40020470 	.word	0x40020470
 80079e0:	40020488 	.word	0x40020488
 80079e4:	400204a0 	.word	0x400204a0
 80079e8:	400204b8 	.word	0x400204b8
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f003 0308 	and.w	r3, r3, #8
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	bf14      	ite	ne
 80079fa:	2301      	movne	r3, #1
 80079fc:	2300      	moveq	r3, #0
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d015      	beq.n	8007a30 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f022 0204 	bic.w	r2, r2, #4
 8007a12:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a18:	f003 031f 	and.w	r3, r3, #31
 8007a1c:	2208      	movs	r2, #8
 8007a1e:	409a      	lsls	r2, r3
 8007a20:	6a3b      	ldr	r3, [r7, #32]
 8007a22:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a28:	f043 0201 	orr.w	r2, r3, #1
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a34:	f003 031f 	and.w	r3, r3, #31
 8007a38:	69ba      	ldr	r2, [r7, #24]
 8007a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8007a3e:	f003 0301 	and.w	r3, r3, #1
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d06e      	beq.n	8007b24 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a69      	ldr	r2, [pc, #420]	@ (8007bf0 <HAL_DMA_IRQHandler+0x3f8>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d04a      	beq.n	8007ae6 <HAL_DMA_IRQHandler+0x2ee>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a67      	ldr	r2, [pc, #412]	@ (8007bf4 <HAL_DMA_IRQHandler+0x3fc>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d045      	beq.n	8007ae6 <HAL_DMA_IRQHandler+0x2ee>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a66      	ldr	r2, [pc, #408]	@ (8007bf8 <HAL_DMA_IRQHandler+0x400>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d040      	beq.n	8007ae6 <HAL_DMA_IRQHandler+0x2ee>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a64      	ldr	r2, [pc, #400]	@ (8007bfc <HAL_DMA_IRQHandler+0x404>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d03b      	beq.n	8007ae6 <HAL_DMA_IRQHandler+0x2ee>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a63      	ldr	r2, [pc, #396]	@ (8007c00 <HAL_DMA_IRQHandler+0x408>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d036      	beq.n	8007ae6 <HAL_DMA_IRQHandler+0x2ee>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a61      	ldr	r2, [pc, #388]	@ (8007c04 <HAL_DMA_IRQHandler+0x40c>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d031      	beq.n	8007ae6 <HAL_DMA_IRQHandler+0x2ee>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a60      	ldr	r2, [pc, #384]	@ (8007c08 <HAL_DMA_IRQHandler+0x410>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d02c      	beq.n	8007ae6 <HAL_DMA_IRQHandler+0x2ee>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a5e      	ldr	r2, [pc, #376]	@ (8007c0c <HAL_DMA_IRQHandler+0x414>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d027      	beq.n	8007ae6 <HAL_DMA_IRQHandler+0x2ee>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a5d      	ldr	r2, [pc, #372]	@ (8007c10 <HAL_DMA_IRQHandler+0x418>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d022      	beq.n	8007ae6 <HAL_DMA_IRQHandler+0x2ee>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a5b      	ldr	r2, [pc, #364]	@ (8007c14 <HAL_DMA_IRQHandler+0x41c>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d01d      	beq.n	8007ae6 <HAL_DMA_IRQHandler+0x2ee>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a5a      	ldr	r2, [pc, #360]	@ (8007c18 <HAL_DMA_IRQHandler+0x420>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d018      	beq.n	8007ae6 <HAL_DMA_IRQHandler+0x2ee>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a58      	ldr	r2, [pc, #352]	@ (8007c1c <HAL_DMA_IRQHandler+0x424>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d013      	beq.n	8007ae6 <HAL_DMA_IRQHandler+0x2ee>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a57      	ldr	r2, [pc, #348]	@ (8007c20 <HAL_DMA_IRQHandler+0x428>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d00e      	beq.n	8007ae6 <HAL_DMA_IRQHandler+0x2ee>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a55      	ldr	r2, [pc, #340]	@ (8007c24 <HAL_DMA_IRQHandler+0x42c>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d009      	beq.n	8007ae6 <HAL_DMA_IRQHandler+0x2ee>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a54      	ldr	r2, [pc, #336]	@ (8007c28 <HAL_DMA_IRQHandler+0x430>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d004      	beq.n	8007ae6 <HAL_DMA_IRQHandler+0x2ee>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a52      	ldr	r2, [pc, #328]	@ (8007c2c <HAL_DMA_IRQHandler+0x434>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d10a      	bne.n	8007afc <HAL_DMA_IRQHandler+0x304>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	695b      	ldr	r3, [r3, #20]
 8007aec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	bf14      	ite	ne
 8007af4:	2301      	movne	r3, #1
 8007af6:	2300      	moveq	r3, #0
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	e003      	b.n	8007b04 <HAL_DMA_IRQHandler+0x30c>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2300      	movs	r3, #0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00d      	beq.n	8007b24 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b0c:	f003 031f 	and.w	r3, r3, #31
 8007b10:	2201      	movs	r2, #1
 8007b12:	409a      	lsls	r2, r3
 8007b14:	6a3b      	ldr	r3, [r7, #32]
 8007b16:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b1c:	f043 0202 	orr.w	r2, r3, #2
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b28:	f003 031f 	and.w	r3, r3, #31
 8007b2c:	2204      	movs	r2, #4
 8007b2e:	409a      	lsls	r2, r3
 8007b30:	69bb      	ldr	r3, [r7, #24]
 8007b32:	4013      	ands	r3, r2
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f000 808f 	beq.w	8007c58 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a2c      	ldr	r2, [pc, #176]	@ (8007bf0 <HAL_DMA_IRQHandler+0x3f8>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d04a      	beq.n	8007bda <HAL_DMA_IRQHandler+0x3e2>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a2a      	ldr	r2, [pc, #168]	@ (8007bf4 <HAL_DMA_IRQHandler+0x3fc>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d045      	beq.n	8007bda <HAL_DMA_IRQHandler+0x3e2>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a29      	ldr	r2, [pc, #164]	@ (8007bf8 <HAL_DMA_IRQHandler+0x400>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d040      	beq.n	8007bda <HAL_DMA_IRQHandler+0x3e2>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a27      	ldr	r2, [pc, #156]	@ (8007bfc <HAL_DMA_IRQHandler+0x404>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d03b      	beq.n	8007bda <HAL_DMA_IRQHandler+0x3e2>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a26      	ldr	r2, [pc, #152]	@ (8007c00 <HAL_DMA_IRQHandler+0x408>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d036      	beq.n	8007bda <HAL_DMA_IRQHandler+0x3e2>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a24      	ldr	r2, [pc, #144]	@ (8007c04 <HAL_DMA_IRQHandler+0x40c>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d031      	beq.n	8007bda <HAL_DMA_IRQHandler+0x3e2>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a23      	ldr	r2, [pc, #140]	@ (8007c08 <HAL_DMA_IRQHandler+0x410>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d02c      	beq.n	8007bda <HAL_DMA_IRQHandler+0x3e2>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a21      	ldr	r2, [pc, #132]	@ (8007c0c <HAL_DMA_IRQHandler+0x414>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d027      	beq.n	8007bda <HAL_DMA_IRQHandler+0x3e2>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a20      	ldr	r2, [pc, #128]	@ (8007c10 <HAL_DMA_IRQHandler+0x418>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d022      	beq.n	8007bda <HAL_DMA_IRQHandler+0x3e2>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a1e      	ldr	r2, [pc, #120]	@ (8007c14 <HAL_DMA_IRQHandler+0x41c>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d01d      	beq.n	8007bda <HAL_DMA_IRQHandler+0x3e2>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a1d      	ldr	r2, [pc, #116]	@ (8007c18 <HAL_DMA_IRQHandler+0x420>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d018      	beq.n	8007bda <HAL_DMA_IRQHandler+0x3e2>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a1b      	ldr	r2, [pc, #108]	@ (8007c1c <HAL_DMA_IRQHandler+0x424>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d013      	beq.n	8007bda <HAL_DMA_IRQHandler+0x3e2>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a1a      	ldr	r2, [pc, #104]	@ (8007c20 <HAL_DMA_IRQHandler+0x428>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d00e      	beq.n	8007bda <HAL_DMA_IRQHandler+0x3e2>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a18      	ldr	r2, [pc, #96]	@ (8007c24 <HAL_DMA_IRQHandler+0x42c>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d009      	beq.n	8007bda <HAL_DMA_IRQHandler+0x3e2>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a17      	ldr	r2, [pc, #92]	@ (8007c28 <HAL_DMA_IRQHandler+0x430>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d004      	beq.n	8007bda <HAL_DMA_IRQHandler+0x3e2>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a15      	ldr	r2, [pc, #84]	@ (8007c2c <HAL_DMA_IRQHandler+0x434>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d12a      	bne.n	8007c30 <HAL_DMA_IRQHandler+0x438>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 0302 	and.w	r3, r3, #2
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	bf14      	ite	ne
 8007be8:	2301      	movne	r3, #1
 8007bea:	2300      	moveq	r3, #0
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	e023      	b.n	8007c38 <HAL_DMA_IRQHandler+0x440>
 8007bf0:	40020010 	.word	0x40020010
 8007bf4:	40020028 	.word	0x40020028
 8007bf8:	40020040 	.word	0x40020040
 8007bfc:	40020058 	.word	0x40020058
 8007c00:	40020070 	.word	0x40020070
 8007c04:	40020088 	.word	0x40020088
 8007c08:	400200a0 	.word	0x400200a0
 8007c0c:	400200b8 	.word	0x400200b8
 8007c10:	40020410 	.word	0x40020410
 8007c14:	40020428 	.word	0x40020428
 8007c18:	40020440 	.word	0x40020440
 8007c1c:	40020458 	.word	0x40020458
 8007c20:	40020470 	.word	0x40020470
 8007c24:	40020488 	.word	0x40020488
 8007c28:	400204a0 	.word	0x400204a0
 8007c2c:	400204b8 	.word	0x400204b8
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	2300      	movs	r3, #0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d00d      	beq.n	8007c58 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c40:	f003 031f 	and.w	r3, r3, #31
 8007c44:	2204      	movs	r2, #4
 8007c46:	409a      	lsls	r2, r3
 8007c48:	6a3b      	ldr	r3, [r7, #32]
 8007c4a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c50:	f043 0204 	orr.w	r2, r3, #4
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c5c:	f003 031f 	and.w	r3, r3, #31
 8007c60:	2210      	movs	r2, #16
 8007c62:	409a      	lsls	r2, r3
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	4013      	ands	r3, r2
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	f000 80a6 	beq.w	8007dba <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a85      	ldr	r2, [pc, #532]	@ (8007e88 <HAL_DMA_IRQHandler+0x690>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d04a      	beq.n	8007d0e <HAL_DMA_IRQHandler+0x516>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a83      	ldr	r2, [pc, #524]	@ (8007e8c <HAL_DMA_IRQHandler+0x694>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d045      	beq.n	8007d0e <HAL_DMA_IRQHandler+0x516>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a82      	ldr	r2, [pc, #520]	@ (8007e90 <HAL_DMA_IRQHandler+0x698>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d040      	beq.n	8007d0e <HAL_DMA_IRQHandler+0x516>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a80      	ldr	r2, [pc, #512]	@ (8007e94 <HAL_DMA_IRQHandler+0x69c>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d03b      	beq.n	8007d0e <HAL_DMA_IRQHandler+0x516>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a7f      	ldr	r2, [pc, #508]	@ (8007e98 <HAL_DMA_IRQHandler+0x6a0>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d036      	beq.n	8007d0e <HAL_DMA_IRQHandler+0x516>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a7d      	ldr	r2, [pc, #500]	@ (8007e9c <HAL_DMA_IRQHandler+0x6a4>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d031      	beq.n	8007d0e <HAL_DMA_IRQHandler+0x516>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a7c      	ldr	r2, [pc, #496]	@ (8007ea0 <HAL_DMA_IRQHandler+0x6a8>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d02c      	beq.n	8007d0e <HAL_DMA_IRQHandler+0x516>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a7a      	ldr	r2, [pc, #488]	@ (8007ea4 <HAL_DMA_IRQHandler+0x6ac>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d027      	beq.n	8007d0e <HAL_DMA_IRQHandler+0x516>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a79      	ldr	r2, [pc, #484]	@ (8007ea8 <HAL_DMA_IRQHandler+0x6b0>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d022      	beq.n	8007d0e <HAL_DMA_IRQHandler+0x516>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a77      	ldr	r2, [pc, #476]	@ (8007eac <HAL_DMA_IRQHandler+0x6b4>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d01d      	beq.n	8007d0e <HAL_DMA_IRQHandler+0x516>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a76      	ldr	r2, [pc, #472]	@ (8007eb0 <HAL_DMA_IRQHandler+0x6b8>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d018      	beq.n	8007d0e <HAL_DMA_IRQHandler+0x516>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a74      	ldr	r2, [pc, #464]	@ (8007eb4 <HAL_DMA_IRQHandler+0x6bc>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d013      	beq.n	8007d0e <HAL_DMA_IRQHandler+0x516>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a73      	ldr	r2, [pc, #460]	@ (8007eb8 <HAL_DMA_IRQHandler+0x6c0>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d00e      	beq.n	8007d0e <HAL_DMA_IRQHandler+0x516>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a71      	ldr	r2, [pc, #452]	@ (8007ebc <HAL_DMA_IRQHandler+0x6c4>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d009      	beq.n	8007d0e <HAL_DMA_IRQHandler+0x516>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a70      	ldr	r2, [pc, #448]	@ (8007ec0 <HAL_DMA_IRQHandler+0x6c8>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d004      	beq.n	8007d0e <HAL_DMA_IRQHandler+0x516>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a6e      	ldr	r2, [pc, #440]	@ (8007ec4 <HAL_DMA_IRQHandler+0x6cc>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d10a      	bne.n	8007d24 <HAL_DMA_IRQHandler+0x52c>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f003 0308 	and.w	r3, r3, #8
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	bf14      	ite	ne
 8007d1c:	2301      	movne	r3, #1
 8007d1e:	2300      	moveq	r3, #0
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	e009      	b.n	8007d38 <HAL_DMA_IRQHandler+0x540>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f003 0304 	and.w	r3, r3, #4
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	bf14      	ite	ne
 8007d32:	2301      	movne	r3, #1
 8007d34:	2300      	moveq	r3, #0
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d03e      	beq.n	8007dba <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d40:	f003 031f 	and.w	r3, r3, #31
 8007d44:	2210      	movs	r2, #16
 8007d46:	409a      	lsls	r2, r3
 8007d48:	6a3b      	ldr	r3, [r7, #32]
 8007d4a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d018      	beq.n	8007d8c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d108      	bne.n	8007d7a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d024      	beq.n	8007dba <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	4798      	blx	r3
 8007d78:	e01f      	b.n	8007dba <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d01b      	beq.n	8007dba <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	4798      	blx	r3
 8007d8a:	e016      	b.n	8007dba <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d107      	bne.n	8007daa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f022 0208 	bic.w	r2, r2, #8
 8007da8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d003      	beq.n	8007dba <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007dbe:	f003 031f 	and.w	r3, r3, #31
 8007dc2:	2220      	movs	r2, #32
 8007dc4:	409a      	lsls	r2, r3
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	4013      	ands	r3, r2
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	f000 8110 	beq.w	8007ff0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a2c      	ldr	r2, [pc, #176]	@ (8007e88 <HAL_DMA_IRQHandler+0x690>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d04a      	beq.n	8007e70 <HAL_DMA_IRQHandler+0x678>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a2b      	ldr	r2, [pc, #172]	@ (8007e8c <HAL_DMA_IRQHandler+0x694>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d045      	beq.n	8007e70 <HAL_DMA_IRQHandler+0x678>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a29      	ldr	r2, [pc, #164]	@ (8007e90 <HAL_DMA_IRQHandler+0x698>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d040      	beq.n	8007e70 <HAL_DMA_IRQHandler+0x678>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a28      	ldr	r2, [pc, #160]	@ (8007e94 <HAL_DMA_IRQHandler+0x69c>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d03b      	beq.n	8007e70 <HAL_DMA_IRQHandler+0x678>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a26      	ldr	r2, [pc, #152]	@ (8007e98 <HAL_DMA_IRQHandler+0x6a0>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d036      	beq.n	8007e70 <HAL_DMA_IRQHandler+0x678>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a25      	ldr	r2, [pc, #148]	@ (8007e9c <HAL_DMA_IRQHandler+0x6a4>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d031      	beq.n	8007e70 <HAL_DMA_IRQHandler+0x678>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a23      	ldr	r2, [pc, #140]	@ (8007ea0 <HAL_DMA_IRQHandler+0x6a8>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d02c      	beq.n	8007e70 <HAL_DMA_IRQHandler+0x678>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a22      	ldr	r2, [pc, #136]	@ (8007ea4 <HAL_DMA_IRQHandler+0x6ac>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d027      	beq.n	8007e70 <HAL_DMA_IRQHandler+0x678>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a20      	ldr	r2, [pc, #128]	@ (8007ea8 <HAL_DMA_IRQHandler+0x6b0>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d022      	beq.n	8007e70 <HAL_DMA_IRQHandler+0x678>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a1f      	ldr	r2, [pc, #124]	@ (8007eac <HAL_DMA_IRQHandler+0x6b4>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d01d      	beq.n	8007e70 <HAL_DMA_IRQHandler+0x678>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a1d      	ldr	r2, [pc, #116]	@ (8007eb0 <HAL_DMA_IRQHandler+0x6b8>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d018      	beq.n	8007e70 <HAL_DMA_IRQHandler+0x678>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a1c      	ldr	r2, [pc, #112]	@ (8007eb4 <HAL_DMA_IRQHandler+0x6bc>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d013      	beq.n	8007e70 <HAL_DMA_IRQHandler+0x678>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a1a      	ldr	r2, [pc, #104]	@ (8007eb8 <HAL_DMA_IRQHandler+0x6c0>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d00e      	beq.n	8007e70 <HAL_DMA_IRQHandler+0x678>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a19      	ldr	r2, [pc, #100]	@ (8007ebc <HAL_DMA_IRQHandler+0x6c4>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d009      	beq.n	8007e70 <HAL_DMA_IRQHandler+0x678>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a17      	ldr	r2, [pc, #92]	@ (8007ec0 <HAL_DMA_IRQHandler+0x6c8>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d004      	beq.n	8007e70 <HAL_DMA_IRQHandler+0x678>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a16      	ldr	r2, [pc, #88]	@ (8007ec4 <HAL_DMA_IRQHandler+0x6cc>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d12b      	bne.n	8007ec8 <HAL_DMA_IRQHandler+0x6d0>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f003 0310 	and.w	r3, r3, #16
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	bf14      	ite	ne
 8007e7e:	2301      	movne	r3, #1
 8007e80:	2300      	moveq	r3, #0
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	e02a      	b.n	8007edc <HAL_DMA_IRQHandler+0x6e4>
 8007e86:	bf00      	nop
 8007e88:	40020010 	.word	0x40020010
 8007e8c:	40020028 	.word	0x40020028
 8007e90:	40020040 	.word	0x40020040
 8007e94:	40020058 	.word	0x40020058
 8007e98:	40020070 	.word	0x40020070
 8007e9c:	40020088 	.word	0x40020088
 8007ea0:	400200a0 	.word	0x400200a0
 8007ea4:	400200b8 	.word	0x400200b8
 8007ea8:	40020410 	.word	0x40020410
 8007eac:	40020428 	.word	0x40020428
 8007eb0:	40020440 	.word	0x40020440
 8007eb4:	40020458 	.word	0x40020458
 8007eb8:	40020470 	.word	0x40020470
 8007ebc:	40020488 	.word	0x40020488
 8007ec0:	400204a0 	.word	0x400204a0
 8007ec4:	400204b8 	.word	0x400204b8
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f003 0302 	and.w	r3, r3, #2
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	bf14      	ite	ne
 8007ed6:	2301      	movne	r3, #1
 8007ed8:	2300      	moveq	r3, #0
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f000 8087 	beq.w	8007ff0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ee6:	f003 031f 	and.w	r3, r3, #31
 8007eea:	2220      	movs	r2, #32
 8007eec:	409a      	lsls	r2, r3
 8007eee:	6a3b      	ldr	r3, [r7, #32]
 8007ef0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	2b04      	cmp	r3, #4
 8007efc:	d139      	bne.n	8007f72 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f022 0216 	bic.w	r2, r2, #22
 8007f0c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	695a      	ldr	r2, [r3, #20]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007f1c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d103      	bne.n	8007f2e <HAL_DMA_IRQHandler+0x736>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d007      	beq.n	8007f3e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f022 0208 	bic.w	r2, r2, #8
 8007f3c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f42:	f003 031f 	and.w	r3, r3, #31
 8007f46:	223f      	movs	r2, #63	@ 0x3f
 8007f48:	409a      	lsls	r2, r3
 8007f4a:	6a3b      	ldr	r3, [r7, #32]
 8007f4c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2201      	movs	r2, #1
 8007f52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	f000 8382 	beq.w	800866c <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	4798      	blx	r3
          }
          return;
 8007f70:	e37c      	b.n	800866c <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d018      	beq.n	8007fb2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d108      	bne.n	8007fa0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d02c      	beq.n	8007ff0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	4798      	blx	r3
 8007f9e:	e027      	b.n	8007ff0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d023      	beq.n	8007ff0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	4798      	blx	r3
 8007fb0:	e01e      	b.n	8007ff0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d10f      	bne.n	8007fe0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f022 0210 	bic.w	r2, r2, #16
 8007fce:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d003      	beq.n	8007ff0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	f000 833e 	beq.w	8008676 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ffe:	f003 0301 	and.w	r3, r3, #1
 8008002:	2b00      	cmp	r3, #0
 8008004:	f000 8088 	beq.w	8008118 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2204      	movs	r2, #4
 800800c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a89      	ldr	r2, [pc, #548]	@ (800823c <HAL_DMA_IRQHandler+0xa44>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d04a      	beq.n	80080b0 <HAL_DMA_IRQHandler+0x8b8>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a88      	ldr	r2, [pc, #544]	@ (8008240 <HAL_DMA_IRQHandler+0xa48>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d045      	beq.n	80080b0 <HAL_DMA_IRQHandler+0x8b8>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a86      	ldr	r2, [pc, #536]	@ (8008244 <HAL_DMA_IRQHandler+0xa4c>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d040      	beq.n	80080b0 <HAL_DMA_IRQHandler+0x8b8>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a85      	ldr	r2, [pc, #532]	@ (8008248 <HAL_DMA_IRQHandler+0xa50>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d03b      	beq.n	80080b0 <HAL_DMA_IRQHandler+0x8b8>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a83      	ldr	r2, [pc, #524]	@ (800824c <HAL_DMA_IRQHandler+0xa54>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d036      	beq.n	80080b0 <HAL_DMA_IRQHandler+0x8b8>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a82      	ldr	r2, [pc, #520]	@ (8008250 <HAL_DMA_IRQHandler+0xa58>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d031      	beq.n	80080b0 <HAL_DMA_IRQHandler+0x8b8>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a80      	ldr	r2, [pc, #512]	@ (8008254 <HAL_DMA_IRQHandler+0xa5c>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d02c      	beq.n	80080b0 <HAL_DMA_IRQHandler+0x8b8>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a7f      	ldr	r2, [pc, #508]	@ (8008258 <HAL_DMA_IRQHandler+0xa60>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d027      	beq.n	80080b0 <HAL_DMA_IRQHandler+0x8b8>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a7d      	ldr	r2, [pc, #500]	@ (800825c <HAL_DMA_IRQHandler+0xa64>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d022      	beq.n	80080b0 <HAL_DMA_IRQHandler+0x8b8>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a7c      	ldr	r2, [pc, #496]	@ (8008260 <HAL_DMA_IRQHandler+0xa68>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d01d      	beq.n	80080b0 <HAL_DMA_IRQHandler+0x8b8>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a7a      	ldr	r2, [pc, #488]	@ (8008264 <HAL_DMA_IRQHandler+0xa6c>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d018      	beq.n	80080b0 <HAL_DMA_IRQHandler+0x8b8>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a79      	ldr	r2, [pc, #484]	@ (8008268 <HAL_DMA_IRQHandler+0xa70>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d013      	beq.n	80080b0 <HAL_DMA_IRQHandler+0x8b8>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a77      	ldr	r2, [pc, #476]	@ (800826c <HAL_DMA_IRQHandler+0xa74>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d00e      	beq.n	80080b0 <HAL_DMA_IRQHandler+0x8b8>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a76      	ldr	r2, [pc, #472]	@ (8008270 <HAL_DMA_IRQHandler+0xa78>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d009      	beq.n	80080b0 <HAL_DMA_IRQHandler+0x8b8>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a74      	ldr	r2, [pc, #464]	@ (8008274 <HAL_DMA_IRQHandler+0xa7c>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d004      	beq.n	80080b0 <HAL_DMA_IRQHandler+0x8b8>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a73      	ldr	r2, [pc, #460]	@ (8008278 <HAL_DMA_IRQHandler+0xa80>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d108      	bne.n	80080c2 <HAL_DMA_IRQHandler+0x8ca>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f022 0201 	bic.w	r2, r2, #1
 80080be:	601a      	str	r2, [r3, #0]
 80080c0:	e007      	b.n	80080d2 <HAL_DMA_IRQHandler+0x8da>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f022 0201 	bic.w	r2, r2, #1
 80080d0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	3301      	adds	r3, #1
 80080d6:	60fb      	str	r3, [r7, #12]
 80080d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080da:	429a      	cmp	r2, r3
 80080dc:	d307      	bcc.n	80080ee <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f003 0301 	and.w	r3, r3, #1
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d1f2      	bne.n	80080d2 <HAL_DMA_IRQHandler+0x8da>
 80080ec:	e000      	b.n	80080f0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80080ee:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f003 0301 	and.w	r3, r3, #1
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d004      	beq.n	8008108 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2203      	movs	r2, #3
 8008102:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8008106:	e003      	b.n	8008110 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800811c:	2b00      	cmp	r3, #0
 800811e:	f000 82aa 	beq.w	8008676 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	4798      	blx	r3
 800812a:	e2a4      	b.n	8008676 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a52      	ldr	r2, [pc, #328]	@ (800827c <HAL_DMA_IRQHandler+0xa84>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d04a      	beq.n	80081cc <HAL_DMA_IRQHandler+0x9d4>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a51      	ldr	r2, [pc, #324]	@ (8008280 <HAL_DMA_IRQHandler+0xa88>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d045      	beq.n	80081cc <HAL_DMA_IRQHandler+0x9d4>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a4f      	ldr	r2, [pc, #316]	@ (8008284 <HAL_DMA_IRQHandler+0xa8c>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d040      	beq.n	80081cc <HAL_DMA_IRQHandler+0x9d4>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a4e      	ldr	r2, [pc, #312]	@ (8008288 <HAL_DMA_IRQHandler+0xa90>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d03b      	beq.n	80081cc <HAL_DMA_IRQHandler+0x9d4>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a4c      	ldr	r2, [pc, #304]	@ (800828c <HAL_DMA_IRQHandler+0xa94>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d036      	beq.n	80081cc <HAL_DMA_IRQHandler+0x9d4>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a4b      	ldr	r2, [pc, #300]	@ (8008290 <HAL_DMA_IRQHandler+0xa98>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d031      	beq.n	80081cc <HAL_DMA_IRQHandler+0x9d4>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a49      	ldr	r2, [pc, #292]	@ (8008294 <HAL_DMA_IRQHandler+0xa9c>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d02c      	beq.n	80081cc <HAL_DMA_IRQHandler+0x9d4>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a48      	ldr	r2, [pc, #288]	@ (8008298 <HAL_DMA_IRQHandler+0xaa0>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d027      	beq.n	80081cc <HAL_DMA_IRQHandler+0x9d4>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a46      	ldr	r2, [pc, #280]	@ (800829c <HAL_DMA_IRQHandler+0xaa4>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d022      	beq.n	80081cc <HAL_DMA_IRQHandler+0x9d4>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a45      	ldr	r2, [pc, #276]	@ (80082a0 <HAL_DMA_IRQHandler+0xaa8>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d01d      	beq.n	80081cc <HAL_DMA_IRQHandler+0x9d4>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a43      	ldr	r2, [pc, #268]	@ (80082a4 <HAL_DMA_IRQHandler+0xaac>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d018      	beq.n	80081cc <HAL_DMA_IRQHandler+0x9d4>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a42      	ldr	r2, [pc, #264]	@ (80082a8 <HAL_DMA_IRQHandler+0xab0>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d013      	beq.n	80081cc <HAL_DMA_IRQHandler+0x9d4>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a40      	ldr	r2, [pc, #256]	@ (80082ac <HAL_DMA_IRQHandler+0xab4>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d00e      	beq.n	80081cc <HAL_DMA_IRQHandler+0x9d4>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a3f      	ldr	r2, [pc, #252]	@ (80082b0 <HAL_DMA_IRQHandler+0xab8>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d009      	beq.n	80081cc <HAL_DMA_IRQHandler+0x9d4>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a3d      	ldr	r2, [pc, #244]	@ (80082b4 <HAL_DMA_IRQHandler+0xabc>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d004      	beq.n	80081cc <HAL_DMA_IRQHandler+0x9d4>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a3c      	ldr	r2, [pc, #240]	@ (80082b8 <HAL_DMA_IRQHandler+0xac0>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d101      	bne.n	80081d0 <HAL_DMA_IRQHandler+0x9d8>
 80081cc:	2301      	movs	r3, #1
 80081ce:	e000      	b.n	80081d2 <HAL_DMA_IRQHandler+0x9da>
 80081d0:	2300      	movs	r3, #0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	f000 824f 	beq.w	8008676 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081e4:	f003 031f 	and.w	r3, r3, #31
 80081e8:	2204      	movs	r2, #4
 80081ea:	409a      	lsls	r2, r3
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	4013      	ands	r3, r2
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f000 80dd 	beq.w	80083b0 <HAL_DMA_IRQHandler+0xbb8>
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	f003 0304 	and.w	r3, r3, #4
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	f000 80d7 	beq.w	80083b0 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008206:	f003 031f 	and.w	r3, r3, #31
 800820a:	2204      	movs	r2, #4
 800820c:	409a      	lsls	r2, r3
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008218:	2b00      	cmp	r3, #0
 800821a:	d059      	beq.n	80082d0 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008222:	2b00      	cmp	r3, #0
 8008224:	d14a      	bne.n	80082bc <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800822a:	2b00      	cmp	r3, #0
 800822c:	f000 8220 	beq.w	8008670 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008238:	e21a      	b.n	8008670 <HAL_DMA_IRQHandler+0xe78>
 800823a:	bf00      	nop
 800823c:	40020010 	.word	0x40020010
 8008240:	40020028 	.word	0x40020028
 8008244:	40020040 	.word	0x40020040
 8008248:	40020058 	.word	0x40020058
 800824c:	40020070 	.word	0x40020070
 8008250:	40020088 	.word	0x40020088
 8008254:	400200a0 	.word	0x400200a0
 8008258:	400200b8 	.word	0x400200b8
 800825c:	40020410 	.word	0x40020410
 8008260:	40020428 	.word	0x40020428
 8008264:	40020440 	.word	0x40020440
 8008268:	40020458 	.word	0x40020458
 800826c:	40020470 	.word	0x40020470
 8008270:	40020488 	.word	0x40020488
 8008274:	400204a0 	.word	0x400204a0
 8008278:	400204b8 	.word	0x400204b8
 800827c:	48022c08 	.word	0x48022c08
 8008280:	48022c1c 	.word	0x48022c1c
 8008284:	48022c30 	.word	0x48022c30
 8008288:	48022c44 	.word	0x48022c44
 800828c:	48022c58 	.word	0x48022c58
 8008290:	48022c6c 	.word	0x48022c6c
 8008294:	48022c80 	.word	0x48022c80
 8008298:	48022c94 	.word	0x48022c94
 800829c:	58025408 	.word	0x58025408
 80082a0:	5802541c 	.word	0x5802541c
 80082a4:	58025430 	.word	0x58025430
 80082a8:	58025444 	.word	0x58025444
 80082ac:	58025458 	.word	0x58025458
 80082b0:	5802546c 	.word	0x5802546c
 80082b4:	58025480 	.word	0x58025480
 80082b8:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f000 81d5 	beq.w	8008670 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80082ce:	e1cf      	b.n	8008670 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	f003 0320 	and.w	r3, r3, #32
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d160      	bne.n	800839c <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a7f      	ldr	r2, [pc, #508]	@ (80084dc <HAL_DMA_IRQHandler+0xce4>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d04a      	beq.n	800837a <HAL_DMA_IRQHandler+0xb82>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a7d      	ldr	r2, [pc, #500]	@ (80084e0 <HAL_DMA_IRQHandler+0xce8>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d045      	beq.n	800837a <HAL_DMA_IRQHandler+0xb82>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a7c      	ldr	r2, [pc, #496]	@ (80084e4 <HAL_DMA_IRQHandler+0xcec>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d040      	beq.n	800837a <HAL_DMA_IRQHandler+0xb82>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a7a      	ldr	r2, [pc, #488]	@ (80084e8 <HAL_DMA_IRQHandler+0xcf0>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d03b      	beq.n	800837a <HAL_DMA_IRQHandler+0xb82>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a79      	ldr	r2, [pc, #484]	@ (80084ec <HAL_DMA_IRQHandler+0xcf4>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d036      	beq.n	800837a <HAL_DMA_IRQHandler+0xb82>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a77      	ldr	r2, [pc, #476]	@ (80084f0 <HAL_DMA_IRQHandler+0xcf8>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d031      	beq.n	800837a <HAL_DMA_IRQHandler+0xb82>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a76      	ldr	r2, [pc, #472]	@ (80084f4 <HAL_DMA_IRQHandler+0xcfc>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d02c      	beq.n	800837a <HAL_DMA_IRQHandler+0xb82>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a74      	ldr	r2, [pc, #464]	@ (80084f8 <HAL_DMA_IRQHandler+0xd00>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d027      	beq.n	800837a <HAL_DMA_IRQHandler+0xb82>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a73      	ldr	r2, [pc, #460]	@ (80084fc <HAL_DMA_IRQHandler+0xd04>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d022      	beq.n	800837a <HAL_DMA_IRQHandler+0xb82>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a71      	ldr	r2, [pc, #452]	@ (8008500 <HAL_DMA_IRQHandler+0xd08>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d01d      	beq.n	800837a <HAL_DMA_IRQHandler+0xb82>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a70      	ldr	r2, [pc, #448]	@ (8008504 <HAL_DMA_IRQHandler+0xd0c>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d018      	beq.n	800837a <HAL_DMA_IRQHandler+0xb82>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a6e      	ldr	r2, [pc, #440]	@ (8008508 <HAL_DMA_IRQHandler+0xd10>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d013      	beq.n	800837a <HAL_DMA_IRQHandler+0xb82>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a6d      	ldr	r2, [pc, #436]	@ (800850c <HAL_DMA_IRQHandler+0xd14>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d00e      	beq.n	800837a <HAL_DMA_IRQHandler+0xb82>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a6b      	ldr	r2, [pc, #428]	@ (8008510 <HAL_DMA_IRQHandler+0xd18>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d009      	beq.n	800837a <HAL_DMA_IRQHandler+0xb82>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a6a      	ldr	r2, [pc, #424]	@ (8008514 <HAL_DMA_IRQHandler+0xd1c>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d004      	beq.n	800837a <HAL_DMA_IRQHandler+0xb82>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a68      	ldr	r2, [pc, #416]	@ (8008518 <HAL_DMA_IRQHandler+0xd20>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d108      	bne.n	800838c <HAL_DMA_IRQHandler+0xb94>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f022 0208 	bic.w	r2, r2, #8
 8008388:	601a      	str	r2, [r3, #0]
 800838a:	e007      	b.n	800839c <HAL_DMA_IRQHandler+0xba4>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f022 0204 	bic.w	r2, r2, #4
 800839a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	f000 8165 	beq.w	8008670 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80083ae:	e15f      	b.n	8008670 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083b4:	f003 031f 	and.w	r3, r3, #31
 80083b8:	2202      	movs	r2, #2
 80083ba:	409a      	lsls	r2, r3
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	4013      	ands	r3, r2
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f000 80c5 	beq.w	8008550 <HAL_DMA_IRQHandler+0xd58>
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	f003 0302 	and.w	r3, r3, #2
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	f000 80bf 	beq.w	8008550 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083d6:	f003 031f 	and.w	r3, r3, #31
 80083da:	2202      	movs	r2, #2
 80083dc:	409a      	lsls	r2, r3
 80083de:	69fb      	ldr	r3, [r7, #28]
 80083e0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d018      	beq.n	800841e <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d109      	bne.n	800840a <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	f000 813a 	beq.w	8008674 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008408:	e134      	b.n	8008674 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800840e:	2b00      	cmp	r3, #0
 8008410:	f000 8130 	beq.w	8008674 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800841c:	e12a      	b.n	8008674 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	f003 0320 	and.w	r3, r3, #32
 8008424:	2b00      	cmp	r3, #0
 8008426:	f040 8089 	bne.w	800853c <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a2b      	ldr	r2, [pc, #172]	@ (80084dc <HAL_DMA_IRQHandler+0xce4>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d04a      	beq.n	80084ca <HAL_DMA_IRQHandler+0xcd2>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a29      	ldr	r2, [pc, #164]	@ (80084e0 <HAL_DMA_IRQHandler+0xce8>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d045      	beq.n	80084ca <HAL_DMA_IRQHandler+0xcd2>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a28      	ldr	r2, [pc, #160]	@ (80084e4 <HAL_DMA_IRQHandler+0xcec>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d040      	beq.n	80084ca <HAL_DMA_IRQHandler+0xcd2>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a26      	ldr	r2, [pc, #152]	@ (80084e8 <HAL_DMA_IRQHandler+0xcf0>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d03b      	beq.n	80084ca <HAL_DMA_IRQHandler+0xcd2>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a25      	ldr	r2, [pc, #148]	@ (80084ec <HAL_DMA_IRQHandler+0xcf4>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d036      	beq.n	80084ca <HAL_DMA_IRQHandler+0xcd2>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a23      	ldr	r2, [pc, #140]	@ (80084f0 <HAL_DMA_IRQHandler+0xcf8>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d031      	beq.n	80084ca <HAL_DMA_IRQHandler+0xcd2>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a22      	ldr	r2, [pc, #136]	@ (80084f4 <HAL_DMA_IRQHandler+0xcfc>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d02c      	beq.n	80084ca <HAL_DMA_IRQHandler+0xcd2>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a20      	ldr	r2, [pc, #128]	@ (80084f8 <HAL_DMA_IRQHandler+0xd00>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d027      	beq.n	80084ca <HAL_DMA_IRQHandler+0xcd2>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a1f      	ldr	r2, [pc, #124]	@ (80084fc <HAL_DMA_IRQHandler+0xd04>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d022      	beq.n	80084ca <HAL_DMA_IRQHandler+0xcd2>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a1d      	ldr	r2, [pc, #116]	@ (8008500 <HAL_DMA_IRQHandler+0xd08>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d01d      	beq.n	80084ca <HAL_DMA_IRQHandler+0xcd2>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a1c      	ldr	r2, [pc, #112]	@ (8008504 <HAL_DMA_IRQHandler+0xd0c>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d018      	beq.n	80084ca <HAL_DMA_IRQHandler+0xcd2>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a1a      	ldr	r2, [pc, #104]	@ (8008508 <HAL_DMA_IRQHandler+0xd10>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d013      	beq.n	80084ca <HAL_DMA_IRQHandler+0xcd2>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a19      	ldr	r2, [pc, #100]	@ (800850c <HAL_DMA_IRQHandler+0xd14>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d00e      	beq.n	80084ca <HAL_DMA_IRQHandler+0xcd2>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a17      	ldr	r2, [pc, #92]	@ (8008510 <HAL_DMA_IRQHandler+0xd18>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d009      	beq.n	80084ca <HAL_DMA_IRQHandler+0xcd2>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a16      	ldr	r2, [pc, #88]	@ (8008514 <HAL_DMA_IRQHandler+0xd1c>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d004      	beq.n	80084ca <HAL_DMA_IRQHandler+0xcd2>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a14      	ldr	r2, [pc, #80]	@ (8008518 <HAL_DMA_IRQHandler+0xd20>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d128      	bne.n	800851c <HAL_DMA_IRQHandler+0xd24>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f022 0214 	bic.w	r2, r2, #20
 80084d8:	601a      	str	r2, [r3, #0]
 80084da:	e027      	b.n	800852c <HAL_DMA_IRQHandler+0xd34>
 80084dc:	40020010 	.word	0x40020010
 80084e0:	40020028 	.word	0x40020028
 80084e4:	40020040 	.word	0x40020040
 80084e8:	40020058 	.word	0x40020058
 80084ec:	40020070 	.word	0x40020070
 80084f0:	40020088 	.word	0x40020088
 80084f4:	400200a0 	.word	0x400200a0
 80084f8:	400200b8 	.word	0x400200b8
 80084fc:	40020410 	.word	0x40020410
 8008500:	40020428 	.word	0x40020428
 8008504:	40020440 	.word	0x40020440
 8008508:	40020458 	.word	0x40020458
 800850c:	40020470 	.word	0x40020470
 8008510:	40020488 	.word	0x40020488
 8008514:	400204a0 	.word	0x400204a0
 8008518:	400204b8 	.word	0x400204b8
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f022 020a 	bic.w	r2, r2, #10
 800852a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2201      	movs	r2, #1
 8008530:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2200      	movs	r2, #0
 8008538:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008540:	2b00      	cmp	r3, #0
 8008542:	f000 8097 	beq.w	8008674 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800854e:	e091      	b.n	8008674 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008554:	f003 031f 	and.w	r3, r3, #31
 8008558:	2208      	movs	r2, #8
 800855a:	409a      	lsls	r2, r3
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	4013      	ands	r3, r2
 8008560:	2b00      	cmp	r3, #0
 8008562:	f000 8088 	beq.w	8008676 <HAL_DMA_IRQHandler+0xe7e>
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	f003 0308 	and.w	r3, r3, #8
 800856c:	2b00      	cmp	r3, #0
 800856e:	f000 8082 	beq.w	8008676 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a41      	ldr	r2, [pc, #260]	@ (800867c <HAL_DMA_IRQHandler+0xe84>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d04a      	beq.n	8008612 <HAL_DMA_IRQHandler+0xe1a>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a3f      	ldr	r2, [pc, #252]	@ (8008680 <HAL_DMA_IRQHandler+0xe88>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d045      	beq.n	8008612 <HAL_DMA_IRQHandler+0xe1a>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a3e      	ldr	r2, [pc, #248]	@ (8008684 <HAL_DMA_IRQHandler+0xe8c>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d040      	beq.n	8008612 <HAL_DMA_IRQHandler+0xe1a>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a3c      	ldr	r2, [pc, #240]	@ (8008688 <HAL_DMA_IRQHandler+0xe90>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d03b      	beq.n	8008612 <HAL_DMA_IRQHandler+0xe1a>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a3b      	ldr	r2, [pc, #236]	@ (800868c <HAL_DMA_IRQHandler+0xe94>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d036      	beq.n	8008612 <HAL_DMA_IRQHandler+0xe1a>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a39      	ldr	r2, [pc, #228]	@ (8008690 <HAL_DMA_IRQHandler+0xe98>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d031      	beq.n	8008612 <HAL_DMA_IRQHandler+0xe1a>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a38      	ldr	r2, [pc, #224]	@ (8008694 <HAL_DMA_IRQHandler+0xe9c>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d02c      	beq.n	8008612 <HAL_DMA_IRQHandler+0xe1a>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a36      	ldr	r2, [pc, #216]	@ (8008698 <HAL_DMA_IRQHandler+0xea0>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d027      	beq.n	8008612 <HAL_DMA_IRQHandler+0xe1a>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a35      	ldr	r2, [pc, #212]	@ (800869c <HAL_DMA_IRQHandler+0xea4>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d022      	beq.n	8008612 <HAL_DMA_IRQHandler+0xe1a>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a33      	ldr	r2, [pc, #204]	@ (80086a0 <HAL_DMA_IRQHandler+0xea8>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d01d      	beq.n	8008612 <HAL_DMA_IRQHandler+0xe1a>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a32      	ldr	r2, [pc, #200]	@ (80086a4 <HAL_DMA_IRQHandler+0xeac>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d018      	beq.n	8008612 <HAL_DMA_IRQHandler+0xe1a>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a30      	ldr	r2, [pc, #192]	@ (80086a8 <HAL_DMA_IRQHandler+0xeb0>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d013      	beq.n	8008612 <HAL_DMA_IRQHandler+0xe1a>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a2f      	ldr	r2, [pc, #188]	@ (80086ac <HAL_DMA_IRQHandler+0xeb4>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d00e      	beq.n	8008612 <HAL_DMA_IRQHandler+0xe1a>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a2d      	ldr	r2, [pc, #180]	@ (80086b0 <HAL_DMA_IRQHandler+0xeb8>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d009      	beq.n	8008612 <HAL_DMA_IRQHandler+0xe1a>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a2c      	ldr	r2, [pc, #176]	@ (80086b4 <HAL_DMA_IRQHandler+0xebc>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d004      	beq.n	8008612 <HAL_DMA_IRQHandler+0xe1a>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a2a      	ldr	r2, [pc, #168]	@ (80086b8 <HAL_DMA_IRQHandler+0xec0>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d108      	bne.n	8008624 <HAL_DMA_IRQHandler+0xe2c>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f022 021c 	bic.w	r2, r2, #28
 8008620:	601a      	str	r2, [r3, #0]
 8008622:	e007      	b.n	8008634 <HAL_DMA_IRQHandler+0xe3c>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f022 020e 	bic.w	r2, r2, #14
 8008632:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008638:	f003 031f 	and.w	r3, r3, #31
 800863c:	2201      	movs	r2, #1
 800863e:	409a      	lsls	r2, r3
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2201      	movs	r2, #1
 800864e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2200      	movs	r2, #0
 8008656:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800865e:	2b00      	cmp	r3, #0
 8008660:	d009      	beq.n	8008676 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	4798      	blx	r3
 800866a:	e004      	b.n	8008676 <HAL_DMA_IRQHandler+0xe7e>
          return;
 800866c:	bf00      	nop
 800866e:	e002      	b.n	8008676 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008670:	bf00      	nop
 8008672:	e000      	b.n	8008676 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008674:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008676:	3728      	adds	r7, #40	@ 0x28
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}
 800867c:	40020010 	.word	0x40020010
 8008680:	40020028 	.word	0x40020028
 8008684:	40020040 	.word	0x40020040
 8008688:	40020058 	.word	0x40020058
 800868c:	40020070 	.word	0x40020070
 8008690:	40020088 	.word	0x40020088
 8008694:	400200a0 	.word	0x400200a0
 8008698:	400200b8 	.word	0x400200b8
 800869c:	40020410 	.word	0x40020410
 80086a0:	40020428 	.word	0x40020428
 80086a4:	40020440 	.word	0x40020440
 80086a8:	40020458 	.word	0x40020458
 80086ac:	40020470 	.word	0x40020470
 80086b0:	40020488 	.word	0x40020488
 80086b4:	400204a0 	.word	0x400204a0
 80086b8:	400204b8 	.word	0x400204b8

080086bc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80086bc:	b480      	push	{r7}
 80086be:	b083      	sub	sp, #12
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	370c      	adds	r7, #12
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr

080086d4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b087      	sub	sp, #28
 80086d8:	af00      	add	r7, sp, #0
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	60b9      	str	r1, [r7, #8]
 80086de:	607a      	str	r2, [r7, #4]
 80086e0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086e6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086ec:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a7f      	ldr	r2, [pc, #508]	@ (80088f0 <DMA_SetConfig+0x21c>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d072      	beq.n	80087de <DMA_SetConfig+0x10a>
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a7d      	ldr	r2, [pc, #500]	@ (80088f4 <DMA_SetConfig+0x220>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d06d      	beq.n	80087de <DMA_SetConfig+0x10a>
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a7c      	ldr	r2, [pc, #496]	@ (80088f8 <DMA_SetConfig+0x224>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d068      	beq.n	80087de <DMA_SetConfig+0x10a>
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a7a      	ldr	r2, [pc, #488]	@ (80088fc <DMA_SetConfig+0x228>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d063      	beq.n	80087de <DMA_SetConfig+0x10a>
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a79      	ldr	r2, [pc, #484]	@ (8008900 <DMA_SetConfig+0x22c>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d05e      	beq.n	80087de <DMA_SetConfig+0x10a>
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a77      	ldr	r2, [pc, #476]	@ (8008904 <DMA_SetConfig+0x230>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d059      	beq.n	80087de <DMA_SetConfig+0x10a>
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a76      	ldr	r2, [pc, #472]	@ (8008908 <DMA_SetConfig+0x234>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d054      	beq.n	80087de <DMA_SetConfig+0x10a>
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a74      	ldr	r2, [pc, #464]	@ (800890c <DMA_SetConfig+0x238>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d04f      	beq.n	80087de <DMA_SetConfig+0x10a>
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a73      	ldr	r2, [pc, #460]	@ (8008910 <DMA_SetConfig+0x23c>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d04a      	beq.n	80087de <DMA_SetConfig+0x10a>
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a71      	ldr	r2, [pc, #452]	@ (8008914 <DMA_SetConfig+0x240>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d045      	beq.n	80087de <DMA_SetConfig+0x10a>
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a70      	ldr	r2, [pc, #448]	@ (8008918 <DMA_SetConfig+0x244>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d040      	beq.n	80087de <DMA_SetConfig+0x10a>
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a6e      	ldr	r2, [pc, #440]	@ (800891c <DMA_SetConfig+0x248>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d03b      	beq.n	80087de <DMA_SetConfig+0x10a>
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a6d      	ldr	r2, [pc, #436]	@ (8008920 <DMA_SetConfig+0x24c>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d036      	beq.n	80087de <DMA_SetConfig+0x10a>
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a6b      	ldr	r2, [pc, #428]	@ (8008924 <DMA_SetConfig+0x250>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d031      	beq.n	80087de <DMA_SetConfig+0x10a>
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a6a      	ldr	r2, [pc, #424]	@ (8008928 <DMA_SetConfig+0x254>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d02c      	beq.n	80087de <DMA_SetConfig+0x10a>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a68      	ldr	r2, [pc, #416]	@ (800892c <DMA_SetConfig+0x258>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d027      	beq.n	80087de <DMA_SetConfig+0x10a>
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a67      	ldr	r2, [pc, #412]	@ (8008930 <DMA_SetConfig+0x25c>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d022      	beq.n	80087de <DMA_SetConfig+0x10a>
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a65      	ldr	r2, [pc, #404]	@ (8008934 <DMA_SetConfig+0x260>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d01d      	beq.n	80087de <DMA_SetConfig+0x10a>
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a64      	ldr	r2, [pc, #400]	@ (8008938 <DMA_SetConfig+0x264>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d018      	beq.n	80087de <DMA_SetConfig+0x10a>
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a62      	ldr	r2, [pc, #392]	@ (800893c <DMA_SetConfig+0x268>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d013      	beq.n	80087de <DMA_SetConfig+0x10a>
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a61      	ldr	r2, [pc, #388]	@ (8008940 <DMA_SetConfig+0x26c>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d00e      	beq.n	80087de <DMA_SetConfig+0x10a>
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a5f      	ldr	r2, [pc, #380]	@ (8008944 <DMA_SetConfig+0x270>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d009      	beq.n	80087de <DMA_SetConfig+0x10a>
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a5e      	ldr	r2, [pc, #376]	@ (8008948 <DMA_SetConfig+0x274>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d004      	beq.n	80087de <DMA_SetConfig+0x10a>
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a5c      	ldr	r2, [pc, #368]	@ (800894c <DMA_SetConfig+0x278>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d101      	bne.n	80087e2 <DMA_SetConfig+0x10e>
 80087de:	2301      	movs	r3, #1
 80087e0:	e000      	b.n	80087e4 <DMA_SetConfig+0x110>
 80087e2:	2300      	movs	r3, #0
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d00d      	beq.n	8008804 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80087ec:	68fa      	ldr	r2, [r7, #12]
 80087ee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80087f0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d004      	beq.n	8008804 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087fe:	68fa      	ldr	r2, [r7, #12]
 8008800:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008802:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a39      	ldr	r2, [pc, #228]	@ (80088f0 <DMA_SetConfig+0x21c>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d04a      	beq.n	80088a4 <DMA_SetConfig+0x1d0>
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a38      	ldr	r2, [pc, #224]	@ (80088f4 <DMA_SetConfig+0x220>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d045      	beq.n	80088a4 <DMA_SetConfig+0x1d0>
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a36      	ldr	r2, [pc, #216]	@ (80088f8 <DMA_SetConfig+0x224>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d040      	beq.n	80088a4 <DMA_SetConfig+0x1d0>
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a35      	ldr	r2, [pc, #212]	@ (80088fc <DMA_SetConfig+0x228>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d03b      	beq.n	80088a4 <DMA_SetConfig+0x1d0>
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a33      	ldr	r2, [pc, #204]	@ (8008900 <DMA_SetConfig+0x22c>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d036      	beq.n	80088a4 <DMA_SetConfig+0x1d0>
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a32      	ldr	r2, [pc, #200]	@ (8008904 <DMA_SetConfig+0x230>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d031      	beq.n	80088a4 <DMA_SetConfig+0x1d0>
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a30      	ldr	r2, [pc, #192]	@ (8008908 <DMA_SetConfig+0x234>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d02c      	beq.n	80088a4 <DMA_SetConfig+0x1d0>
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a2f      	ldr	r2, [pc, #188]	@ (800890c <DMA_SetConfig+0x238>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d027      	beq.n	80088a4 <DMA_SetConfig+0x1d0>
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a2d      	ldr	r2, [pc, #180]	@ (8008910 <DMA_SetConfig+0x23c>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d022      	beq.n	80088a4 <DMA_SetConfig+0x1d0>
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a2c      	ldr	r2, [pc, #176]	@ (8008914 <DMA_SetConfig+0x240>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d01d      	beq.n	80088a4 <DMA_SetConfig+0x1d0>
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a2a      	ldr	r2, [pc, #168]	@ (8008918 <DMA_SetConfig+0x244>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d018      	beq.n	80088a4 <DMA_SetConfig+0x1d0>
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a29      	ldr	r2, [pc, #164]	@ (800891c <DMA_SetConfig+0x248>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d013      	beq.n	80088a4 <DMA_SetConfig+0x1d0>
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a27      	ldr	r2, [pc, #156]	@ (8008920 <DMA_SetConfig+0x24c>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d00e      	beq.n	80088a4 <DMA_SetConfig+0x1d0>
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a26      	ldr	r2, [pc, #152]	@ (8008924 <DMA_SetConfig+0x250>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d009      	beq.n	80088a4 <DMA_SetConfig+0x1d0>
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a24      	ldr	r2, [pc, #144]	@ (8008928 <DMA_SetConfig+0x254>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d004      	beq.n	80088a4 <DMA_SetConfig+0x1d0>
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a23      	ldr	r2, [pc, #140]	@ (800892c <DMA_SetConfig+0x258>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d101      	bne.n	80088a8 <DMA_SetConfig+0x1d4>
 80088a4:	2301      	movs	r3, #1
 80088a6:	e000      	b.n	80088aa <DMA_SetConfig+0x1d6>
 80088a8:	2300      	movs	r3, #0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d059      	beq.n	8008962 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088b2:	f003 031f 	and.w	r3, r3, #31
 80088b6:	223f      	movs	r2, #63	@ 0x3f
 80088b8:	409a      	lsls	r2, r3
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80088cc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	683a      	ldr	r2, [r7, #0]
 80088d4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	2b40      	cmp	r3, #64	@ 0x40
 80088dc:	d138      	bne.n	8008950 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	68ba      	ldr	r2, [r7, #8]
 80088ec:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80088ee:	e0ae      	b.n	8008a4e <DMA_SetConfig+0x37a>
 80088f0:	40020010 	.word	0x40020010
 80088f4:	40020028 	.word	0x40020028
 80088f8:	40020040 	.word	0x40020040
 80088fc:	40020058 	.word	0x40020058
 8008900:	40020070 	.word	0x40020070
 8008904:	40020088 	.word	0x40020088
 8008908:	400200a0 	.word	0x400200a0
 800890c:	400200b8 	.word	0x400200b8
 8008910:	40020410 	.word	0x40020410
 8008914:	40020428 	.word	0x40020428
 8008918:	40020440 	.word	0x40020440
 800891c:	40020458 	.word	0x40020458
 8008920:	40020470 	.word	0x40020470
 8008924:	40020488 	.word	0x40020488
 8008928:	400204a0 	.word	0x400204a0
 800892c:	400204b8 	.word	0x400204b8
 8008930:	58025408 	.word	0x58025408
 8008934:	5802541c 	.word	0x5802541c
 8008938:	58025430 	.word	0x58025430
 800893c:	58025444 	.word	0x58025444
 8008940:	58025458 	.word	0x58025458
 8008944:	5802546c 	.word	0x5802546c
 8008948:	58025480 	.word	0x58025480
 800894c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	68ba      	ldr	r2, [r7, #8]
 8008956:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	60da      	str	r2, [r3, #12]
}
 8008960:	e075      	b.n	8008a4e <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a3d      	ldr	r2, [pc, #244]	@ (8008a5c <DMA_SetConfig+0x388>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d04a      	beq.n	8008a02 <DMA_SetConfig+0x32e>
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a3b      	ldr	r2, [pc, #236]	@ (8008a60 <DMA_SetConfig+0x38c>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d045      	beq.n	8008a02 <DMA_SetConfig+0x32e>
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a3a      	ldr	r2, [pc, #232]	@ (8008a64 <DMA_SetConfig+0x390>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d040      	beq.n	8008a02 <DMA_SetConfig+0x32e>
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a38      	ldr	r2, [pc, #224]	@ (8008a68 <DMA_SetConfig+0x394>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d03b      	beq.n	8008a02 <DMA_SetConfig+0x32e>
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a37      	ldr	r2, [pc, #220]	@ (8008a6c <DMA_SetConfig+0x398>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d036      	beq.n	8008a02 <DMA_SetConfig+0x32e>
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4a35      	ldr	r2, [pc, #212]	@ (8008a70 <DMA_SetConfig+0x39c>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d031      	beq.n	8008a02 <DMA_SetConfig+0x32e>
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a34      	ldr	r2, [pc, #208]	@ (8008a74 <DMA_SetConfig+0x3a0>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d02c      	beq.n	8008a02 <DMA_SetConfig+0x32e>
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a32      	ldr	r2, [pc, #200]	@ (8008a78 <DMA_SetConfig+0x3a4>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d027      	beq.n	8008a02 <DMA_SetConfig+0x32e>
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a31      	ldr	r2, [pc, #196]	@ (8008a7c <DMA_SetConfig+0x3a8>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d022      	beq.n	8008a02 <DMA_SetConfig+0x32e>
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a2f      	ldr	r2, [pc, #188]	@ (8008a80 <DMA_SetConfig+0x3ac>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d01d      	beq.n	8008a02 <DMA_SetConfig+0x32e>
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a2e      	ldr	r2, [pc, #184]	@ (8008a84 <DMA_SetConfig+0x3b0>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d018      	beq.n	8008a02 <DMA_SetConfig+0x32e>
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a2c      	ldr	r2, [pc, #176]	@ (8008a88 <DMA_SetConfig+0x3b4>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d013      	beq.n	8008a02 <DMA_SetConfig+0x32e>
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a2b      	ldr	r2, [pc, #172]	@ (8008a8c <DMA_SetConfig+0x3b8>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d00e      	beq.n	8008a02 <DMA_SetConfig+0x32e>
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a29      	ldr	r2, [pc, #164]	@ (8008a90 <DMA_SetConfig+0x3bc>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d009      	beq.n	8008a02 <DMA_SetConfig+0x32e>
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a28      	ldr	r2, [pc, #160]	@ (8008a94 <DMA_SetConfig+0x3c0>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d004      	beq.n	8008a02 <DMA_SetConfig+0x32e>
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a26      	ldr	r2, [pc, #152]	@ (8008a98 <DMA_SetConfig+0x3c4>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d101      	bne.n	8008a06 <DMA_SetConfig+0x332>
 8008a02:	2301      	movs	r3, #1
 8008a04:	e000      	b.n	8008a08 <DMA_SetConfig+0x334>
 8008a06:	2300      	movs	r3, #0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d020      	beq.n	8008a4e <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a10:	f003 031f 	and.w	r3, r3, #31
 8008a14:	2201      	movs	r2, #1
 8008a16:	409a      	lsls	r2, r3
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	683a      	ldr	r2, [r7, #0]
 8008a22:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	2b40      	cmp	r3, #64	@ 0x40
 8008a2a:	d108      	bne.n	8008a3e <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	68ba      	ldr	r2, [r7, #8]
 8008a3a:	60da      	str	r2, [r3, #12]
}
 8008a3c:	e007      	b.n	8008a4e <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	68ba      	ldr	r2, [r7, #8]
 8008a44:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	60da      	str	r2, [r3, #12]
}
 8008a4e:	bf00      	nop
 8008a50:	371c      	adds	r7, #28
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr
 8008a5a:	bf00      	nop
 8008a5c:	48022c08 	.word	0x48022c08
 8008a60:	48022c1c 	.word	0x48022c1c
 8008a64:	48022c30 	.word	0x48022c30
 8008a68:	48022c44 	.word	0x48022c44
 8008a6c:	48022c58 	.word	0x48022c58
 8008a70:	48022c6c 	.word	0x48022c6c
 8008a74:	48022c80 	.word	0x48022c80
 8008a78:	48022c94 	.word	0x48022c94
 8008a7c:	58025408 	.word	0x58025408
 8008a80:	5802541c 	.word	0x5802541c
 8008a84:	58025430 	.word	0x58025430
 8008a88:	58025444 	.word	0x58025444
 8008a8c:	58025458 	.word	0x58025458
 8008a90:	5802546c 	.word	0x5802546c
 8008a94:	58025480 	.word	0x58025480
 8008a98:	58025494 	.word	0x58025494

08008a9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b085      	sub	sp, #20
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a42      	ldr	r2, [pc, #264]	@ (8008bb4 <DMA_CalcBaseAndBitshift+0x118>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d04a      	beq.n	8008b44 <DMA_CalcBaseAndBitshift+0xa8>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a41      	ldr	r2, [pc, #260]	@ (8008bb8 <DMA_CalcBaseAndBitshift+0x11c>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d045      	beq.n	8008b44 <DMA_CalcBaseAndBitshift+0xa8>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a3f      	ldr	r2, [pc, #252]	@ (8008bbc <DMA_CalcBaseAndBitshift+0x120>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d040      	beq.n	8008b44 <DMA_CalcBaseAndBitshift+0xa8>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a3e      	ldr	r2, [pc, #248]	@ (8008bc0 <DMA_CalcBaseAndBitshift+0x124>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d03b      	beq.n	8008b44 <DMA_CalcBaseAndBitshift+0xa8>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a3c      	ldr	r2, [pc, #240]	@ (8008bc4 <DMA_CalcBaseAndBitshift+0x128>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d036      	beq.n	8008b44 <DMA_CalcBaseAndBitshift+0xa8>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a3b      	ldr	r2, [pc, #236]	@ (8008bc8 <DMA_CalcBaseAndBitshift+0x12c>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d031      	beq.n	8008b44 <DMA_CalcBaseAndBitshift+0xa8>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a39      	ldr	r2, [pc, #228]	@ (8008bcc <DMA_CalcBaseAndBitshift+0x130>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d02c      	beq.n	8008b44 <DMA_CalcBaseAndBitshift+0xa8>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a38      	ldr	r2, [pc, #224]	@ (8008bd0 <DMA_CalcBaseAndBitshift+0x134>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d027      	beq.n	8008b44 <DMA_CalcBaseAndBitshift+0xa8>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a36      	ldr	r2, [pc, #216]	@ (8008bd4 <DMA_CalcBaseAndBitshift+0x138>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d022      	beq.n	8008b44 <DMA_CalcBaseAndBitshift+0xa8>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a35      	ldr	r2, [pc, #212]	@ (8008bd8 <DMA_CalcBaseAndBitshift+0x13c>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d01d      	beq.n	8008b44 <DMA_CalcBaseAndBitshift+0xa8>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a33      	ldr	r2, [pc, #204]	@ (8008bdc <DMA_CalcBaseAndBitshift+0x140>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d018      	beq.n	8008b44 <DMA_CalcBaseAndBitshift+0xa8>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a32      	ldr	r2, [pc, #200]	@ (8008be0 <DMA_CalcBaseAndBitshift+0x144>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d013      	beq.n	8008b44 <DMA_CalcBaseAndBitshift+0xa8>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a30      	ldr	r2, [pc, #192]	@ (8008be4 <DMA_CalcBaseAndBitshift+0x148>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d00e      	beq.n	8008b44 <DMA_CalcBaseAndBitshift+0xa8>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a2f      	ldr	r2, [pc, #188]	@ (8008be8 <DMA_CalcBaseAndBitshift+0x14c>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d009      	beq.n	8008b44 <DMA_CalcBaseAndBitshift+0xa8>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a2d      	ldr	r2, [pc, #180]	@ (8008bec <DMA_CalcBaseAndBitshift+0x150>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d004      	beq.n	8008b44 <DMA_CalcBaseAndBitshift+0xa8>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a2c      	ldr	r2, [pc, #176]	@ (8008bf0 <DMA_CalcBaseAndBitshift+0x154>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d101      	bne.n	8008b48 <DMA_CalcBaseAndBitshift+0xac>
 8008b44:	2301      	movs	r3, #1
 8008b46:	e000      	b.n	8008b4a <DMA_CalcBaseAndBitshift+0xae>
 8008b48:	2300      	movs	r3, #0
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d024      	beq.n	8008b98 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	3b10      	subs	r3, #16
 8008b56:	4a27      	ldr	r2, [pc, #156]	@ (8008bf4 <DMA_CalcBaseAndBitshift+0x158>)
 8008b58:	fba2 2303 	umull	r2, r3, r2, r3
 8008b5c:	091b      	lsrs	r3, r3, #4
 8008b5e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f003 0307 	and.w	r3, r3, #7
 8008b66:	4a24      	ldr	r2, [pc, #144]	@ (8008bf8 <DMA_CalcBaseAndBitshift+0x15c>)
 8008b68:	5cd3      	ldrb	r3, [r2, r3]
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2b03      	cmp	r3, #3
 8008b74:	d908      	bls.n	8008b88 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	4b1f      	ldr	r3, [pc, #124]	@ (8008bfc <DMA_CalcBaseAndBitshift+0x160>)
 8008b7e:	4013      	ands	r3, r2
 8008b80:	1d1a      	adds	r2, r3, #4
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	659a      	str	r2, [r3, #88]	@ 0x58
 8008b86:	e00d      	b.n	8008ba4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	4b1b      	ldr	r3, [pc, #108]	@ (8008bfc <DMA_CalcBaseAndBitshift+0x160>)
 8008b90:	4013      	ands	r3, r2
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	6593      	str	r3, [r2, #88]	@ 0x58
 8008b96:	e005      	b.n	8008ba4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3714      	adds	r7, #20
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr
 8008bb4:	40020010 	.word	0x40020010
 8008bb8:	40020028 	.word	0x40020028
 8008bbc:	40020040 	.word	0x40020040
 8008bc0:	40020058 	.word	0x40020058
 8008bc4:	40020070 	.word	0x40020070
 8008bc8:	40020088 	.word	0x40020088
 8008bcc:	400200a0 	.word	0x400200a0
 8008bd0:	400200b8 	.word	0x400200b8
 8008bd4:	40020410 	.word	0x40020410
 8008bd8:	40020428 	.word	0x40020428
 8008bdc:	40020440 	.word	0x40020440
 8008be0:	40020458 	.word	0x40020458
 8008be4:	40020470 	.word	0x40020470
 8008be8:	40020488 	.word	0x40020488
 8008bec:	400204a0 	.word	0x400204a0
 8008bf0:	400204b8 	.word	0x400204b8
 8008bf4:	aaaaaaab 	.word	0xaaaaaaab
 8008bf8:	08019b60 	.word	0x08019b60
 8008bfc:	fffffc00 	.word	0xfffffc00

08008c00 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b085      	sub	sp, #20
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	699b      	ldr	r3, [r3, #24]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d120      	bne.n	8008c56 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c18:	2b03      	cmp	r3, #3
 8008c1a:	d858      	bhi.n	8008cce <DMA_CheckFifoParam+0xce>
 8008c1c:	a201      	add	r2, pc, #4	@ (adr r2, 8008c24 <DMA_CheckFifoParam+0x24>)
 8008c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c22:	bf00      	nop
 8008c24:	08008c35 	.word	0x08008c35
 8008c28:	08008c47 	.word	0x08008c47
 8008c2c:	08008c35 	.word	0x08008c35
 8008c30:	08008ccf 	.word	0x08008ccf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d048      	beq.n	8008cd2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008c40:	2301      	movs	r3, #1
 8008c42:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008c44:	e045      	b.n	8008cd2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c4a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008c4e:	d142      	bne.n	8008cd6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008c50:	2301      	movs	r3, #1
 8008c52:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008c54:	e03f      	b.n	8008cd6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	699b      	ldr	r3, [r3, #24]
 8008c5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c5e:	d123      	bne.n	8008ca8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c64:	2b03      	cmp	r3, #3
 8008c66:	d838      	bhi.n	8008cda <DMA_CheckFifoParam+0xda>
 8008c68:	a201      	add	r2, pc, #4	@ (adr r2, 8008c70 <DMA_CheckFifoParam+0x70>)
 8008c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c6e:	bf00      	nop
 8008c70:	08008c81 	.word	0x08008c81
 8008c74:	08008c87 	.word	0x08008c87
 8008c78:	08008c81 	.word	0x08008c81
 8008c7c:	08008c99 	.word	0x08008c99
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008c80:	2301      	movs	r3, #1
 8008c82:	73fb      	strb	r3, [r7, #15]
        break;
 8008c84:	e030      	b.n	8008ce8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d025      	beq.n	8008cde <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008c92:	2301      	movs	r3, #1
 8008c94:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008c96:	e022      	b.n	8008cde <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c9c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008ca0:	d11f      	bne.n	8008ce2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008ca6:	e01c      	b.n	8008ce2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cac:	2b02      	cmp	r3, #2
 8008cae:	d902      	bls.n	8008cb6 <DMA_CheckFifoParam+0xb6>
 8008cb0:	2b03      	cmp	r3, #3
 8008cb2:	d003      	beq.n	8008cbc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008cb4:	e018      	b.n	8008ce8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	73fb      	strb	r3, [r7, #15]
        break;
 8008cba:	e015      	b.n	8008ce8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cc0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d00e      	beq.n	8008ce6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	73fb      	strb	r3, [r7, #15]
    break;
 8008ccc:	e00b      	b.n	8008ce6 <DMA_CheckFifoParam+0xe6>
        break;
 8008cce:	bf00      	nop
 8008cd0:	e00a      	b.n	8008ce8 <DMA_CheckFifoParam+0xe8>
        break;
 8008cd2:	bf00      	nop
 8008cd4:	e008      	b.n	8008ce8 <DMA_CheckFifoParam+0xe8>
        break;
 8008cd6:	bf00      	nop
 8008cd8:	e006      	b.n	8008ce8 <DMA_CheckFifoParam+0xe8>
        break;
 8008cda:	bf00      	nop
 8008cdc:	e004      	b.n	8008ce8 <DMA_CheckFifoParam+0xe8>
        break;
 8008cde:	bf00      	nop
 8008ce0:	e002      	b.n	8008ce8 <DMA_CheckFifoParam+0xe8>
        break;
 8008ce2:	bf00      	nop
 8008ce4:	e000      	b.n	8008ce8 <DMA_CheckFifoParam+0xe8>
    break;
 8008ce6:	bf00      	nop
    }
  }

  return status;
 8008ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3714      	adds	r7, #20
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr
 8008cf6:	bf00      	nop

08008cf8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b085      	sub	sp, #20
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a38      	ldr	r2, [pc, #224]	@ (8008dec <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d022      	beq.n	8008d56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a36      	ldr	r2, [pc, #216]	@ (8008df0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d01d      	beq.n	8008d56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4a35      	ldr	r2, [pc, #212]	@ (8008df4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d018      	beq.n	8008d56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a33      	ldr	r2, [pc, #204]	@ (8008df8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d013      	beq.n	8008d56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a32      	ldr	r2, [pc, #200]	@ (8008dfc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d00e      	beq.n	8008d56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a30      	ldr	r2, [pc, #192]	@ (8008e00 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d009      	beq.n	8008d56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a2f      	ldr	r2, [pc, #188]	@ (8008e04 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d004      	beq.n	8008d56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a2d      	ldr	r2, [pc, #180]	@ (8008e08 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d101      	bne.n	8008d5a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008d56:	2301      	movs	r3, #1
 8008d58:	e000      	b.n	8008d5c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d01a      	beq.n	8008d96 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	3b08      	subs	r3, #8
 8008d68:	4a28      	ldr	r2, [pc, #160]	@ (8008e0c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d6e:	091b      	lsrs	r3, r3, #4
 8008d70:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008d72:	68fa      	ldr	r2, [r7, #12]
 8008d74:	4b26      	ldr	r3, [pc, #152]	@ (8008e10 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008d76:	4413      	add	r3, r2
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	4a24      	ldr	r2, [pc, #144]	@ (8008e14 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008d84:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f003 031f 	and.w	r3, r3, #31
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	409a      	lsls	r2, r3
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008d94:	e024      	b.n	8008de0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	3b10      	subs	r3, #16
 8008d9e:	4a1e      	ldr	r2, [pc, #120]	@ (8008e18 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008da0:	fba2 2303 	umull	r2, r3, r2, r3
 8008da4:	091b      	lsrs	r3, r3, #4
 8008da6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	4a1c      	ldr	r2, [pc, #112]	@ (8008e1c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d806      	bhi.n	8008dbe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	4a1b      	ldr	r2, [pc, #108]	@ (8008e20 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d902      	bls.n	8008dbe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	3308      	adds	r3, #8
 8008dbc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008dbe:	68fa      	ldr	r2, [r7, #12]
 8008dc0:	4b18      	ldr	r3, [pc, #96]	@ (8008e24 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008dc2:	4413      	add	r3, r2
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	4a16      	ldr	r2, [pc, #88]	@ (8008e28 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008dd0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f003 031f 	and.w	r3, r3, #31
 8008dd8:	2201      	movs	r2, #1
 8008dda:	409a      	lsls	r2, r3
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008de0:	bf00      	nop
 8008de2:	3714      	adds	r7, #20
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr
 8008dec:	58025408 	.word	0x58025408
 8008df0:	5802541c 	.word	0x5802541c
 8008df4:	58025430 	.word	0x58025430
 8008df8:	58025444 	.word	0x58025444
 8008dfc:	58025458 	.word	0x58025458
 8008e00:	5802546c 	.word	0x5802546c
 8008e04:	58025480 	.word	0x58025480
 8008e08:	58025494 	.word	0x58025494
 8008e0c:	cccccccd 	.word	0xcccccccd
 8008e10:	16009600 	.word	0x16009600
 8008e14:	58025880 	.word	0x58025880
 8008e18:	aaaaaaab 	.word	0xaaaaaaab
 8008e1c:	400204b8 	.word	0x400204b8
 8008e20:	4002040f 	.word	0x4002040f
 8008e24:	10008200 	.word	0x10008200
 8008e28:	40020880 	.word	0x40020880

08008e2c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b085      	sub	sp, #20
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d04a      	beq.n	8008ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2b08      	cmp	r3, #8
 8008e46:	d847      	bhi.n	8008ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a25      	ldr	r2, [pc, #148]	@ (8008ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d022      	beq.n	8008e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a24      	ldr	r2, [pc, #144]	@ (8008ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d01d      	beq.n	8008e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a22      	ldr	r2, [pc, #136]	@ (8008eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d018      	beq.n	8008e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a21      	ldr	r2, [pc, #132]	@ (8008ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d013      	beq.n	8008e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a1f      	ldr	r2, [pc, #124]	@ (8008ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d00e      	beq.n	8008e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a1e      	ldr	r2, [pc, #120]	@ (8008ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d009      	beq.n	8008e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a1c      	ldr	r2, [pc, #112]	@ (8008efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d004      	beq.n	8008e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a1b      	ldr	r2, [pc, #108]	@ (8008f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d101      	bne.n	8008e9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008e98:	2301      	movs	r3, #1
 8008e9a:	e000      	b.n	8008e9e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d00a      	beq.n	8008eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008ea2:	68fa      	ldr	r2, [r7, #12]
 8008ea4:	4b17      	ldr	r3, [pc, #92]	@ (8008f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008ea6:	4413      	add	r3, r2
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	461a      	mov	r2, r3
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	4a15      	ldr	r2, [pc, #84]	@ (8008f08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008eb4:	671a      	str	r2, [r3, #112]	@ 0x70
 8008eb6:	e009      	b.n	8008ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008eb8:	68fa      	ldr	r2, [r7, #12]
 8008eba:	4b14      	ldr	r3, [pc, #80]	@ (8008f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008ebc:	4413      	add	r3, r2
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	4a11      	ldr	r2, [pc, #68]	@ (8008f10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008eca:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	3b01      	subs	r3, #1
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	409a      	lsls	r2, r3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8008ed8:	bf00      	nop
 8008eda:	3714      	adds	r7, #20
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr
 8008ee4:	58025408 	.word	0x58025408
 8008ee8:	5802541c 	.word	0x5802541c
 8008eec:	58025430 	.word	0x58025430
 8008ef0:	58025444 	.word	0x58025444
 8008ef4:	58025458 	.word	0x58025458
 8008ef8:	5802546c 	.word	0x5802546c
 8008efc:	58025480 	.word	0x58025480
 8008f00:	58025494 	.word	0x58025494
 8008f04:	1600963f 	.word	0x1600963f
 8008f08:	58025940 	.word	0x58025940
 8008f0c:	1000823f 	.word	0x1000823f
 8008f10:	40020940 	.word	0x40020940

08008f14 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b098      	sub	sp, #96	@ 0x60
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8008f1c:	4a84      	ldr	r2, [pc, #528]	@ (8009130 <HAL_FDCAN_Init+0x21c>)
 8008f1e:	f107 030c 	add.w	r3, r7, #12
 8008f22:	4611      	mov	r1, r2
 8008f24:	224c      	movs	r2, #76	@ 0x4c
 8008f26:	4618      	mov	r0, r3
 8008f28:	f010 fc18 	bl	801975c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d101      	bne.n	8008f36 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8008f32:	2301      	movs	r3, #1
 8008f34:	e1c6      	b.n	80092c4 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a7e      	ldr	r2, [pc, #504]	@ (8009134 <HAL_FDCAN_Init+0x220>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d106      	bne.n	8008f4e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8008f48:	461a      	mov	r2, r3
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d106      	bne.n	8008f68 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f7f8 fe02 	bl	8001b6c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	699a      	ldr	r2, [r3, #24]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f022 0210 	bic.w	r2, r2, #16
 8008f76:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008f78:	f7fc ff7e 	bl	8005e78 <HAL_GetTick>
 8008f7c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008f7e:	e014      	b.n	8008faa <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008f80:	f7fc ff7a 	bl	8005e78 <HAL_GetTick>
 8008f84:	4602      	mov	r2, r0
 8008f86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f88:	1ad3      	subs	r3, r2, r3
 8008f8a:	2b0a      	cmp	r3, #10
 8008f8c:	d90d      	bls.n	8008faa <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008f94:	f043 0201 	orr.w	r2, r3, #1
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2203      	movs	r2, #3
 8008fa2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	e18c      	b.n	80092c4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	699b      	ldr	r3, [r3, #24]
 8008fb0:	f003 0308 	and.w	r3, r3, #8
 8008fb4:	2b08      	cmp	r3, #8
 8008fb6:	d0e3      	beq.n	8008f80 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	699a      	ldr	r2, [r3, #24]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f042 0201 	orr.w	r2, r2, #1
 8008fc6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008fc8:	f7fc ff56 	bl	8005e78 <HAL_GetTick>
 8008fcc:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008fce:	e014      	b.n	8008ffa <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008fd0:	f7fc ff52 	bl	8005e78 <HAL_GetTick>
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008fd8:	1ad3      	subs	r3, r2, r3
 8008fda:	2b0a      	cmp	r3, #10
 8008fdc:	d90d      	bls.n	8008ffa <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008fe4:	f043 0201 	orr.w	r2, r3, #1
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2203      	movs	r2, #3
 8008ff2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e164      	b.n	80092c4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	699b      	ldr	r3, [r3, #24]
 8009000:	f003 0301 	and.w	r3, r3, #1
 8009004:	2b00      	cmp	r3, #0
 8009006:	d0e3      	beq.n	8008fd0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	699a      	ldr	r2, [r3, #24]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f042 0202 	orr.w	r2, r2, #2
 8009016:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	7c1b      	ldrb	r3, [r3, #16]
 800901c:	2b01      	cmp	r3, #1
 800901e:	d108      	bne.n	8009032 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	699a      	ldr	r2, [r3, #24]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800902e:	619a      	str	r2, [r3, #24]
 8009030:	e007      	b.n	8009042 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	699a      	ldr	r2, [r3, #24]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009040:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	7c5b      	ldrb	r3, [r3, #17]
 8009046:	2b01      	cmp	r3, #1
 8009048:	d108      	bne.n	800905c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	699a      	ldr	r2, [r3, #24]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009058:	619a      	str	r2, [r3, #24]
 800905a:	e007      	b.n	800906c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	699a      	ldr	r2, [r3, #24]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800906a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	7c9b      	ldrb	r3, [r3, #18]
 8009070:	2b01      	cmp	r3, #1
 8009072:	d108      	bne.n	8009086 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	699a      	ldr	r2, [r3, #24]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009082:	619a      	str	r2, [r3, #24]
 8009084:	e007      	b.n	8009096 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	699a      	ldr	r2, [r3, #24]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009094:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	699b      	ldr	r3, [r3, #24]
 800909c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	689a      	ldr	r2, [r3, #8]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	430a      	orrs	r2, r1
 80090aa:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	699a      	ldr	r2, [r3, #24]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80090ba:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	691a      	ldr	r2, [r3, #16]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f022 0210 	bic.w	r2, r2, #16
 80090ca:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	68db      	ldr	r3, [r3, #12]
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	d108      	bne.n	80090e6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	699a      	ldr	r2, [r3, #24]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f042 0204 	orr.w	r2, r2, #4
 80090e2:	619a      	str	r2, [r3, #24]
 80090e4:	e030      	b.n	8009148 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	68db      	ldr	r3, [r3, #12]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d02c      	beq.n	8009148 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	68db      	ldr	r3, [r3, #12]
 80090f2:	2b02      	cmp	r3, #2
 80090f4:	d020      	beq.n	8009138 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	699a      	ldr	r2, [r3, #24]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009104:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	691a      	ldr	r2, [r3, #16]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f042 0210 	orr.w	r2, r2, #16
 8009114:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	68db      	ldr	r3, [r3, #12]
 800911a:	2b03      	cmp	r3, #3
 800911c:	d114      	bne.n	8009148 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	699a      	ldr	r2, [r3, #24]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f042 0220 	orr.w	r2, r2, #32
 800912c:	619a      	str	r2, [r3, #24]
 800912e:	e00b      	b.n	8009148 <HAL_FDCAN_Init+0x234>
 8009130:	08019ab4 	.word	0x08019ab4
 8009134:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	699a      	ldr	r2, [r3, #24]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f042 0220 	orr.w	r2, r2, #32
 8009146:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	699b      	ldr	r3, [r3, #24]
 800914c:	3b01      	subs	r3, #1
 800914e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	69db      	ldr	r3, [r3, #28]
 8009154:	3b01      	subs	r3, #1
 8009156:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009158:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6a1b      	ldr	r3, [r3, #32]
 800915e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8009160:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	695b      	ldr	r3, [r3, #20]
 8009168:	3b01      	subs	r3, #1
 800916a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8009170:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009172:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800917c:	d115      	bne.n	80091aa <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009182:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009188:	3b01      	subs	r3, #1
 800918a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800918c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009192:	3b01      	subs	r3, #1
 8009194:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8009196:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800919e:	3b01      	subs	r3, #1
 80091a0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80091a6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80091a8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d00a      	beq.n	80091c8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	430a      	orrs	r2, r1
 80091c4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091d0:	4413      	add	r3, r2
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d011      	beq.n	80091fa <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80091de:	f023 0107 	bic.w	r1, r3, #7
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	3360      	adds	r3, #96	@ 0x60
 80091ea:	443b      	add	r3, r7
 80091ec:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	430a      	orrs	r2, r1
 80091f6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d011      	beq.n	8009226 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800920a:	f023 0107 	bic.w	r1, r3, #7
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	3360      	adds	r3, #96	@ 0x60
 8009216:	443b      	add	r3, r7
 8009218:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	430a      	orrs	r2, r1
 8009222:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800922a:	2b00      	cmp	r3, #0
 800922c:	d012      	beq.n	8009254 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009236:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	3360      	adds	r3, #96	@ 0x60
 8009242:	443b      	add	r3, r7
 8009244:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8009248:	011a      	lsls	r2, r3, #4
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	430a      	orrs	r2, r1
 8009250:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009258:	2b00      	cmp	r3, #0
 800925a:	d012      	beq.n	8009282 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009264:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	3360      	adds	r3, #96	@ 0x60
 8009270:	443b      	add	r3, r7
 8009272:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8009276:	021a      	lsls	r2, r3, #8
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	430a      	orrs	r2, r1
 800927e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4a11      	ldr	r2, [pc, #68]	@ (80092cc <HAL_FDCAN_Init+0x3b8>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d107      	bne.n	800929c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	689a      	ldr	r2, [r3, #8]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	f022 0203 	bic.w	r2, r2, #3
 800929a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2200      	movs	r2, #0
 80092a8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2201      	movs	r2, #1
 80092b0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f000 f80b 	bl	80092d0 <FDCAN_CalcultateRamBlockAddresses>
 80092ba:	4603      	mov	r3, r0
 80092bc:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 80092c0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3760      	adds	r7, #96	@ 0x60
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}
 80092cc:	4000a000 	.word	0x4000a000

080092d0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b085      	sub	sp, #20
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092dc:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80092e6:	4ba7      	ldr	r3, [pc, #668]	@ (8009584 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80092e8:	4013      	ands	r3, r2
 80092ea:	68ba      	ldr	r2, [r7, #8]
 80092ec:	0091      	lsls	r1, r2, #2
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	6812      	ldr	r2, [r2, #0]
 80092f2:	430b      	orrs	r3, r1
 80092f4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009300:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009308:	041a      	lsls	r2, r3, #16
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	430a      	orrs	r2, r1
 8009310:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009318:	68ba      	ldr	r2, [r7, #8]
 800931a:	4413      	add	r3, r2
 800931c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8009326:	4b97      	ldr	r3, [pc, #604]	@ (8009584 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009328:	4013      	ands	r3, r2
 800932a:	68ba      	ldr	r2, [r7, #8]
 800932c:	0091      	lsls	r1, r2, #2
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	6812      	ldr	r2, [r2, #0]
 8009332:	430b      	orrs	r3, r1
 8009334:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009340:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009348:	041a      	lsls	r2, r3, #16
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	430a      	orrs	r2, r1
 8009350:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009358:	005b      	lsls	r3, r3, #1
 800935a:	68ba      	ldr	r2, [r7, #8]
 800935c:	4413      	add	r3, r2
 800935e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8009368:	4b86      	ldr	r3, [pc, #536]	@ (8009584 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800936a:	4013      	ands	r3, r2
 800936c:	68ba      	ldr	r2, [r7, #8]
 800936e:	0091      	lsls	r1, r2, #2
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	6812      	ldr	r2, [r2, #0]
 8009374:	430b      	orrs	r3, r1
 8009376:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009382:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800938a:	041a      	lsls	r2, r3, #16
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	430a      	orrs	r2, r1
 8009392:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800939a:	687a      	ldr	r2, [r7, #4]
 800939c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800939e:	fb02 f303 	mul.w	r3, r2, r3
 80093a2:	68ba      	ldr	r2, [r7, #8]
 80093a4:	4413      	add	r3, r2
 80093a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80093b0:	4b74      	ldr	r3, [pc, #464]	@ (8009584 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80093b2:	4013      	ands	r3, r2
 80093b4:	68ba      	ldr	r2, [r7, #8]
 80093b6:	0091      	lsls	r1, r2, #2
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	6812      	ldr	r2, [r2, #0]
 80093bc:	430b      	orrs	r3, r1
 80093be:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80093ca:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093d2:	041a      	lsls	r2, r3, #16
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	430a      	orrs	r2, r1
 80093da:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80093e6:	fb02 f303 	mul.w	r3, r2, r3
 80093ea:	68ba      	ldr	r2, [r7, #8]
 80093ec:	4413      	add	r3, r2
 80093ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80093f8:	4b62      	ldr	r3, [pc, #392]	@ (8009584 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80093fa:	4013      	ands	r3, r2
 80093fc:	68ba      	ldr	r2, [r7, #8]
 80093fe:	0091      	lsls	r1, r2, #2
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	6812      	ldr	r2, [r2, #0]
 8009404:	430b      	orrs	r3, r1
 8009406:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009412:	fb02 f303 	mul.w	r3, r2, r3
 8009416:	68ba      	ldr	r2, [r7, #8]
 8009418:	4413      	add	r3, r2
 800941a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8009424:	4b57      	ldr	r3, [pc, #348]	@ (8009584 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009426:	4013      	ands	r3, r2
 8009428:	68ba      	ldr	r2, [r7, #8]
 800942a:	0091      	lsls	r1, r2, #2
 800942c:	687a      	ldr	r2, [r7, #4]
 800942e:	6812      	ldr	r2, [r2, #0]
 8009430:	430b      	orrs	r3, r1
 8009432:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800943e:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009446:	041a      	lsls	r2, r3, #16
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	430a      	orrs	r2, r1
 800944e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009456:	005b      	lsls	r3, r3, #1
 8009458:	68ba      	ldr	r2, [r7, #8]
 800945a:	4413      	add	r3, r2
 800945c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8009466:	4b47      	ldr	r3, [pc, #284]	@ (8009584 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009468:	4013      	ands	r3, r2
 800946a:	68ba      	ldr	r2, [r7, #8]
 800946c:	0091      	lsls	r1, r2, #2
 800946e:	687a      	ldr	r2, [r7, #4]
 8009470:	6812      	ldr	r2, [r2, #0]
 8009472:	430b      	orrs	r3, r1
 8009474:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009480:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009488:	041a      	lsls	r2, r3, #16
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	430a      	orrs	r2, r1
 8009490:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800949c:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094a4:	061a      	lsls	r2, r3, #24
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	430a      	orrs	r2, r1
 80094ac:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80094b4:	4b34      	ldr	r3, [pc, #208]	@ (8009588 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80094b6:	4413      	add	r3, r2
 80094b8:	009a      	lsls	r2, r3, #2
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	441a      	add	r2, r3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094d6:	00db      	lsls	r3, r3, #3
 80094d8:	441a      	add	r2, r3
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094e6:	6879      	ldr	r1, [r7, #4]
 80094e8:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 80094ea:	fb01 f303 	mul.w	r3, r1, r3
 80094ee:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80094f0:	441a      	add	r2, r3
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094fe:	6879      	ldr	r1, [r7, #4]
 8009500:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8009502:	fb01 f303 	mul.w	r3, r1, r3
 8009506:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8009508:	441a      	add	r2, r3
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009516:	6879      	ldr	r1, [r7, #4]
 8009518:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 800951a:	fb01 f303 	mul.w	r3, r1, r3
 800951e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8009520:	441a      	add	r2, r3
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009532:	00db      	lsls	r3, r3, #3
 8009534:	441a      	add	r2, r3
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009546:	6879      	ldr	r1, [r7, #4]
 8009548:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800954a:	fb01 f303 	mul.w	r3, r1, r3
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	441a      	add	r2, r3
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009562:	6879      	ldr	r1, [r7, #4]
 8009564:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8009566:	fb01 f303 	mul.w	r3, r1, r3
 800956a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800956c:	441a      	add	r2, r3
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800957a:	4a04      	ldr	r2, [pc, #16]	@ (800958c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d915      	bls.n	80095ac <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8009580:	e006      	b.n	8009590 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8009582:	bf00      	nop
 8009584:	ffff0003 	.word	0xffff0003
 8009588:	10002b00 	.word	0x10002b00
 800958c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009596:	f043 0220 	orr.w	r2, r3, #32
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2203      	movs	r2, #3
 80095a4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 80095a8:	2301      	movs	r3, #1
 80095aa:	e010      	b.n	80095ce <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80095b0:	60fb      	str	r3, [r7, #12]
 80095b2:	e005      	b.n	80095c0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2200      	movs	r2, #0
 80095b8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	3304      	adds	r3, #4
 80095be:	60fb      	str	r3, [r7, #12]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095c6:	68fa      	ldr	r2, [r7, #12]
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d3f3      	bcc.n	80095b4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80095cc:	2300      	movs	r3, #0
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3714      	adds	r7, #20
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr
 80095da:	bf00      	nop

080095dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80095dc:	b480      	push	{r7}
 80095de:	b089      	sub	sp, #36	@ 0x24
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80095e6:	2300      	movs	r3, #0
 80095e8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80095ea:	4b89      	ldr	r3, [pc, #548]	@ (8009810 <HAL_GPIO_Init+0x234>)
 80095ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80095ee:	e194      	b.n	800991a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	2101      	movs	r1, #1
 80095f6:	69fb      	ldr	r3, [r7, #28]
 80095f8:	fa01 f303 	lsl.w	r3, r1, r3
 80095fc:	4013      	ands	r3, r2
 80095fe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	2b00      	cmp	r3, #0
 8009604:	f000 8186 	beq.w	8009914 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	f003 0303 	and.w	r3, r3, #3
 8009610:	2b01      	cmp	r3, #1
 8009612:	d005      	beq.n	8009620 <HAL_GPIO_Init+0x44>
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	f003 0303 	and.w	r3, r3, #3
 800961c:	2b02      	cmp	r3, #2
 800961e:	d130      	bne.n	8009682 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	689b      	ldr	r3, [r3, #8]
 8009624:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009626:	69fb      	ldr	r3, [r7, #28]
 8009628:	005b      	lsls	r3, r3, #1
 800962a:	2203      	movs	r2, #3
 800962c:	fa02 f303 	lsl.w	r3, r2, r3
 8009630:	43db      	mvns	r3, r3
 8009632:	69ba      	ldr	r2, [r7, #24]
 8009634:	4013      	ands	r3, r2
 8009636:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	68da      	ldr	r2, [r3, #12]
 800963c:	69fb      	ldr	r3, [r7, #28]
 800963e:	005b      	lsls	r3, r3, #1
 8009640:	fa02 f303 	lsl.w	r3, r2, r3
 8009644:	69ba      	ldr	r2, [r7, #24]
 8009646:	4313      	orrs	r3, r2
 8009648:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	69ba      	ldr	r2, [r7, #24]
 800964e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009656:	2201      	movs	r2, #1
 8009658:	69fb      	ldr	r3, [r7, #28]
 800965a:	fa02 f303 	lsl.w	r3, r2, r3
 800965e:	43db      	mvns	r3, r3
 8009660:	69ba      	ldr	r2, [r7, #24]
 8009662:	4013      	ands	r3, r2
 8009664:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	091b      	lsrs	r3, r3, #4
 800966c:	f003 0201 	and.w	r2, r3, #1
 8009670:	69fb      	ldr	r3, [r7, #28]
 8009672:	fa02 f303 	lsl.w	r3, r2, r3
 8009676:	69ba      	ldr	r2, [r7, #24]
 8009678:	4313      	orrs	r3, r2
 800967a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	69ba      	ldr	r2, [r7, #24]
 8009680:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	f003 0303 	and.w	r3, r3, #3
 800968a:	2b03      	cmp	r3, #3
 800968c:	d017      	beq.n	80096be <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	68db      	ldr	r3, [r3, #12]
 8009692:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009694:	69fb      	ldr	r3, [r7, #28]
 8009696:	005b      	lsls	r3, r3, #1
 8009698:	2203      	movs	r2, #3
 800969a:	fa02 f303 	lsl.w	r3, r2, r3
 800969e:	43db      	mvns	r3, r3
 80096a0:	69ba      	ldr	r2, [r7, #24]
 80096a2:	4013      	ands	r3, r2
 80096a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	689a      	ldr	r2, [r3, #8]
 80096aa:	69fb      	ldr	r3, [r7, #28]
 80096ac:	005b      	lsls	r3, r3, #1
 80096ae:	fa02 f303 	lsl.w	r3, r2, r3
 80096b2:	69ba      	ldr	r2, [r7, #24]
 80096b4:	4313      	orrs	r3, r2
 80096b6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	69ba      	ldr	r2, [r7, #24]
 80096bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	f003 0303 	and.w	r3, r3, #3
 80096c6:	2b02      	cmp	r3, #2
 80096c8:	d123      	bne.n	8009712 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80096ca:	69fb      	ldr	r3, [r7, #28]
 80096cc:	08da      	lsrs	r2, r3, #3
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	3208      	adds	r2, #8
 80096d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80096d8:	69fb      	ldr	r3, [r7, #28]
 80096da:	f003 0307 	and.w	r3, r3, #7
 80096de:	009b      	lsls	r3, r3, #2
 80096e0:	220f      	movs	r2, #15
 80096e2:	fa02 f303 	lsl.w	r3, r2, r3
 80096e6:	43db      	mvns	r3, r3
 80096e8:	69ba      	ldr	r2, [r7, #24]
 80096ea:	4013      	ands	r3, r2
 80096ec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	691a      	ldr	r2, [r3, #16]
 80096f2:	69fb      	ldr	r3, [r7, #28]
 80096f4:	f003 0307 	and.w	r3, r3, #7
 80096f8:	009b      	lsls	r3, r3, #2
 80096fa:	fa02 f303 	lsl.w	r3, r2, r3
 80096fe:	69ba      	ldr	r2, [r7, #24]
 8009700:	4313      	orrs	r3, r2
 8009702:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009704:	69fb      	ldr	r3, [r7, #28]
 8009706:	08da      	lsrs	r2, r3, #3
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	3208      	adds	r2, #8
 800970c:	69b9      	ldr	r1, [r7, #24]
 800970e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009718:	69fb      	ldr	r3, [r7, #28]
 800971a:	005b      	lsls	r3, r3, #1
 800971c:	2203      	movs	r2, #3
 800971e:	fa02 f303 	lsl.w	r3, r2, r3
 8009722:	43db      	mvns	r3, r3
 8009724:	69ba      	ldr	r2, [r7, #24]
 8009726:	4013      	ands	r3, r2
 8009728:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	f003 0203 	and.w	r2, r3, #3
 8009732:	69fb      	ldr	r3, [r7, #28]
 8009734:	005b      	lsls	r3, r3, #1
 8009736:	fa02 f303 	lsl.w	r3, r2, r3
 800973a:	69ba      	ldr	r2, [r7, #24]
 800973c:	4313      	orrs	r3, r2
 800973e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	69ba      	ldr	r2, [r7, #24]
 8009744:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800974e:	2b00      	cmp	r3, #0
 8009750:	f000 80e0 	beq.w	8009914 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009754:	4b2f      	ldr	r3, [pc, #188]	@ (8009814 <HAL_GPIO_Init+0x238>)
 8009756:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800975a:	4a2e      	ldr	r2, [pc, #184]	@ (8009814 <HAL_GPIO_Init+0x238>)
 800975c:	f043 0302 	orr.w	r3, r3, #2
 8009760:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8009764:	4b2b      	ldr	r3, [pc, #172]	@ (8009814 <HAL_GPIO_Init+0x238>)
 8009766:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800976a:	f003 0302 	and.w	r3, r3, #2
 800976e:	60fb      	str	r3, [r7, #12]
 8009770:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009772:	4a29      	ldr	r2, [pc, #164]	@ (8009818 <HAL_GPIO_Init+0x23c>)
 8009774:	69fb      	ldr	r3, [r7, #28]
 8009776:	089b      	lsrs	r3, r3, #2
 8009778:	3302      	adds	r3, #2
 800977a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800977e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009780:	69fb      	ldr	r3, [r7, #28]
 8009782:	f003 0303 	and.w	r3, r3, #3
 8009786:	009b      	lsls	r3, r3, #2
 8009788:	220f      	movs	r2, #15
 800978a:	fa02 f303 	lsl.w	r3, r2, r3
 800978e:	43db      	mvns	r3, r3
 8009790:	69ba      	ldr	r2, [r7, #24]
 8009792:	4013      	ands	r3, r2
 8009794:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	4a20      	ldr	r2, [pc, #128]	@ (800981c <HAL_GPIO_Init+0x240>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d052      	beq.n	8009844 <HAL_GPIO_Init+0x268>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	4a1f      	ldr	r2, [pc, #124]	@ (8009820 <HAL_GPIO_Init+0x244>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d031      	beq.n	800980a <HAL_GPIO_Init+0x22e>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	4a1e      	ldr	r2, [pc, #120]	@ (8009824 <HAL_GPIO_Init+0x248>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d02b      	beq.n	8009806 <HAL_GPIO_Init+0x22a>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	4a1d      	ldr	r2, [pc, #116]	@ (8009828 <HAL_GPIO_Init+0x24c>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d025      	beq.n	8009802 <HAL_GPIO_Init+0x226>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	4a1c      	ldr	r2, [pc, #112]	@ (800982c <HAL_GPIO_Init+0x250>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d01f      	beq.n	80097fe <HAL_GPIO_Init+0x222>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	4a1b      	ldr	r2, [pc, #108]	@ (8009830 <HAL_GPIO_Init+0x254>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d019      	beq.n	80097fa <HAL_GPIO_Init+0x21e>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	4a1a      	ldr	r2, [pc, #104]	@ (8009834 <HAL_GPIO_Init+0x258>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d013      	beq.n	80097f6 <HAL_GPIO_Init+0x21a>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	4a19      	ldr	r2, [pc, #100]	@ (8009838 <HAL_GPIO_Init+0x25c>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d00d      	beq.n	80097f2 <HAL_GPIO_Init+0x216>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	4a18      	ldr	r2, [pc, #96]	@ (800983c <HAL_GPIO_Init+0x260>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d007      	beq.n	80097ee <HAL_GPIO_Init+0x212>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	4a17      	ldr	r2, [pc, #92]	@ (8009840 <HAL_GPIO_Init+0x264>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d101      	bne.n	80097ea <HAL_GPIO_Init+0x20e>
 80097e6:	2309      	movs	r3, #9
 80097e8:	e02d      	b.n	8009846 <HAL_GPIO_Init+0x26a>
 80097ea:	230a      	movs	r3, #10
 80097ec:	e02b      	b.n	8009846 <HAL_GPIO_Init+0x26a>
 80097ee:	2308      	movs	r3, #8
 80097f0:	e029      	b.n	8009846 <HAL_GPIO_Init+0x26a>
 80097f2:	2307      	movs	r3, #7
 80097f4:	e027      	b.n	8009846 <HAL_GPIO_Init+0x26a>
 80097f6:	2306      	movs	r3, #6
 80097f8:	e025      	b.n	8009846 <HAL_GPIO_Init+0x26a>
 80097fa:	2305      	movs	r3, #5
 80097fc:	e023      	b.n	8009846 <HAL_GPIO_Init+0x26a>
 80097fe:	2304      	movs	r3, #4
 8009800:	e021      	b.n	8009846 <HAL_GPIO_Init+0x26a>
 8009802:	2303      	movs	r3, #3
 8009804:	e01f      	b.n	8009846 <HAL_GPIO_Init+0x26a>
 8009806:	2302      	movs	r3, #2
 8009808:	e01d      	b.n	8009846 <HAL_GPIO_Init+0x26a>
 800980a:	2301      	movs	r3, #1
 800980c:	e01b      	b.n	8009846 <HAL_GPIO_Init+0x26a>
 800980e:	bf00      	nop
 8009810:	58000080 	.word	0x58000080
 8009814:	58024400 	.word	0x58024400
 8009818:	58000400 	.word	0x58000400
 800981c:	58020000 	.word	0x58020000
 8009820:	58020400 	.word	0x58020400
 8009824:	58020800 	.word	0x58020800
 8009828:	58020c00 	.word	0x58020c00
 800982c:	58021000 	.word	0x58021000
 8009830:	58021400 	.word	0x58021400
 8009834:	58021800 	.word	0x58021800
 8009838:	58021c00 	.word	0x58021c00
 800983c:	58022000 	.word	0x58022000
 8009840:	58022400 	.word	0x58022400
 8009844:	2300      	movs	r3, #0
 8009846:	69fa      	ldr	r2, [r7, #28]
 8009848:	f002 0203 	and.w	r2, r2, #3
 800984c:	0092      	lsls	r2, r2, #2
 800984e:	4093      	lsls	r3, r2
 8009850:	69ba      	ldr	r2, [r7, #24]
 8009852:	4313      	orrs	r3, r2
 8009854:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009856:	4938      	ldr	r1, [pc, #224]	@ (8009938 <HAL_GPIO_Init+0x35c>)
 8009858:	69fb      	ldr	r3, [r7, #28]
 800985a:	089b      	lsrs	r3, r3, #2
 800985c:	3302      	adds	r3, #2
 800985e:	69ba      	ldr	r2, [r7, #24]
 8009860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009864:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	43db      	mvns	r3, r3
 8009870:	69ba      	ldr	r2, [r7, #24]
 8009872:	4013      	ands	r3, r2
 8009874:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	685b      	ldr	r3, [r3, #4]
 800987a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800987e:	2b00      	cmp	r3, #0
 8009880:	d003      	beq.n	800988a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8009882:	69ba      	ldr	r2, [r7, #24]
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	4313      	orrs	r3, r2
 8009888:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800988a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800988e:	69bb      	ldr	r3, [r7, #24]
 8009890:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009892:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	43db      	mvns	r3, r3
 800989e:	69ba      	ldr	r2, [r7, #24]
 80098a0:	4013      	ands	r3, r2
 80098a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	685b      	ldr	r3, [r3, #4]
 80098a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d003      	beq.n	80098b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80098b0:	69ba      	ldr	r2, [r7, #24]
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	4313      	orrs	r3, r2
 80098b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80098b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80098bc:	69bb      	ldr	r3, [r7, #24]
 80098be:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	43db      	mvns	r3, r3
 80098ca:	69ba      	ldr	r2, [r7, #24]
 80098cc:	4013      	ands	r3, r2
 80098ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d003      	beq.n	80098e4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80098dc:	69ba      	ldr	r2, [r7, #24]
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	4313      	orrs	r3, r2
 80098e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	69ba      	ldr	r2, [r7, #24]
 80098e8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	43db      	mvns	r3, r3
 80098f4:	69ba      	ldr	r2, [r7, #24]
 80098f6:	4013      	ands	r3, r2
 80098f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	685b      	ldr	r3, [r3, #4]
 80098fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009902:	2b00      	cmp	r3, #0
 8009904:	d003      	beq.n	800990e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8009906:	69ba      	ldr	r2, [r7, #24]
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	4313      	orrs	r3, r2
 800990c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	69ba      	ldr	r2, [r7, #24]
 8009912:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009914:	69fb      	ldr	r3, [r7, #28]
 8009916:	3301      	adds	r3, #1
 8009918:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	681a      	ldr	r2, [r3, #0]
 800991e:	69fb      	ldr	r3, [r7, #28]
 8009920:	fa22 f303 	lsr.w	r3, r2, r3
 8009924:	2b00      	cmp	r3, #0
 8009926:	f47f ae63 	bne.w	80095f0 <HAL_GPIO_Init+0x14>
  }
}
 800992a:	bf00      	nop
 800992c:	bf00      	nop
 800992e:	3724      	adds	r7, #36	@ 0x24
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr
 8009938:	58000400 	.word	0x58000400

0800993c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800993c:	b480      	push	{r7}
 800993e:	b083      	sub	sp, #12
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	460b      	mov	r3, r1
 8009946:	807b      	strh	r3, [r7, #2]
 8009948:	4613      	mov	r3, r2
 800994a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800994c:	787b      	ldrb	r3, [r7, #1]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d003      	beq.n	800995a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009952:	887a      	ldrh	r2, [r7, #2]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009958:	e003      	b.n	8009962 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800995a:	887b      	ldrh	r3, [r7, #2]
 800995c:	041a      	lsls	r2, r3, #16
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	619a      	str	r2, [r3, #24]
}
 8009962:	bf00      	nop
 8009964:	370c      	adds	r7, #12
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr
	...

08009970 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b082      	sub	sp, #8
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d101      	bne.n	8009982 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800997e:	2301      	movs	r3, #1
 8009980:	e08b      	b.n	8009a9a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009988:	b2db      	uxtb	r3, r3
 800998a:	2b00      	cmp	r3, #0
 800998c:	d106      	bne.n	800999c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2200      	movs	r2, #0
 8009992:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f7f8 fbcc 	bl	8002134 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2224      	movs	r2, #36	@ 0x24
 80099a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	681a      	ldr	r2, [r3, #0]
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f022 0201 	bic.w	r2, r2, #1
 80099b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	685a      	ldr	r2, [r3, #4]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80099c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	689a      	ldr	r2, [r3, #8]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80099d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	68db      	ldr	r3, [r3, #12]
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	d107      	bne.n	80099ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	689a      	ldr	r2, [r3, #8]
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80099e6:	609a      	str	r2, [r3, #8]
 80099e8:	e006      	b.n	80099f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	689a      	ldr	r2, [r3, #8]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80099f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	68db      	ldr	r3, [r3, #12]
 80099fc:	2b02      	cmp	r3, #2
 80099fe:	d108      	bne.n	8009a12 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	685a      	ldr	r2, [r3, #4]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009a0e:	605a      	str	r2, [r3, #4]
 8009a10:	e007      	b.n	8009a22 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	685a      	ldr	r2, [r3, #4]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009a20:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	6859      	ldr	r1, [r3, #4]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8009aa4 <HAL_I2C_Init+0x134>)
 8009a2e:	430b      	orrs	r3, r1
 8009a30:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	68da      	ldr	r2, [r3, #12]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009a40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	691a      	ldr	r2, [r3, #16]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	695b      	ldr	r3, [r3, #20]
 8009a4a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	699b      	ldr	r3, [r3, #24]
 8009a52:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	430a      	orrs	r2, r1
 8009a5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	69d9      	ldr	r1, [r3, #28]
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6a1a      	ldr	r2, [r3, #32]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	430a      	orrs	r2, r1
 8009a6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	681a      	ldr	r2, [r3, #0]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f042 0201 	orr.w	r2, r2, #1
 8009a7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2220      	movs	r2, #32
 8009a86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2200      	movs	r2, #0
 8009a94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009a98:	2300      	movs	r3, #0
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3708      	adds	r7, #8
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	02008000 	.word	0x02008000

08009aa8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b083      	sub	sp, #12
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ab8:	b2db      	uxtb	r3, r3
 8009aba:	2b20      	cmp	r3, #32
 8009abc:	d138      	bne.n	8009b30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d101      	bne.n	8009acc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009ac8:	2302      	movs	r3, #2
 8009aca:	e032      	b.n	8009b32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2201      	movs	r2, #1
 8009ad0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2224      	movs	r2, #36	@ 0x24
 8009ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	681a      	ldr	r2, [r3, #0]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f022 0201 	bic.w	r2, r2, #1
 8009aea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	681a      	ldr	r2, [r3, #0]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009afa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	6819      	ldr	r1, [r3, #0]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	683a      	ldr	r2, [r7, #0]
 8009b08:	430a      	orrs	r2, r1
 8009b0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f042 0201 	orr.w	r2, r2, #1
 8009b1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2220      	movs	r2, #32
 8009b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2200      	movs	r2, #0
 8009b28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	e000      	b.n	8009b32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009b30:	2302      	movs	r3, #2
  }
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	370c      	adds	r7, #12
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr

08009b3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009b3e:	b480      	push	{r7}
 8009b40:	b085      	sub	sp, #20
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	6078      	str	r0, [r7, #4]
 8009b46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b4e:	b2db      	uxtb	r3, r3
 8009b50:	2b20      	cmp	r3, #32
 8009b52:	d139      	bne.n	8009bc8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009b5a:	2b01      	cmp	r3, #1
 8009b5c:	d101      	bne.n	8009b62 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009b5e:	2302      	movs	r3, #2
 8009b60:	e033      	b.n	8009bca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2201      	movs	r2, #1
 8009b66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2224      	movs	r2, #36	@ 0x24
 8009b6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	681a      	ldr	r2, [r3, #0]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f022 0201 	bic.w	r2, r2, #1
 8009b80:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009b90:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	021b      	lsls	r3, r3, #8
 8009b96:	68fa      	ldr	r2, [r7, #12]
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	68fa      	ldr	r2, [r7, #12]
 8009ba2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f042 0201 	orr.w	r2, r2, #1
 8009bb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2220      	movs	r2, #32
 8009bb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	e000      	b.n	8009bca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009bc8:	2302      	movs	r3, #2
  }
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3714      	adds	r7, #20
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd4:	4770      	bx	lr
	...

08009bd8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b084      	sub	sp, #16
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009be0:	4b19      	ldr	r3, [pc, #100]	@ (8009c48 <HAL_PWREx_ConfigSupply+0x70>)
 8009be2:	68db      	ldr	r3, [r3, #12]
 8009be4:	f003 0304 	and.w	r3, r3, #4
 8009be8:	2b04      	cmp	r3, #4
 8009bea:	d00a      	beq.n	8009c02 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009bec:	4b16      	ldr	r3, [pc, #88]	@ (8009c48 <HAL_PWREx_ConfigSupply+0x70>)
 8009bee:	68db      	ldr	r3, [r3, #12]
 8009bf0:	f003 0307 	and.w	r3, r3, #7
 8009bf4:	687a      	ldr	r2, [r7, #4]
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d001      	beq.n	8009bfe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	e01f      	b.n	8009c3e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	e01d      	b.n	8009c3e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009c02:	4b11      	ldr	r3, [pc, #68]	@ (8009c48 <HAL_PWREx_ConfigSupply+0x70>)
 8009c04:	68db      	ldr	r3, [r3, #12]
 8009c06:	f023 0207 	bic.w	r2, r3, #7
 8009c0a:	490f      	ldr	r1, [pc, #60]	@ (8009c48 <HAL_PWREx_ConfigSupply+0x70>)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009c12:	f7fc f931 	bl	8005e78 <HAL_GetTick>
 8009c16:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009c18:	e009      	b.n	8009c2e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009c1a:	f7fc f92d 	bl	8005e78 <HAL_GetTick>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	1ad3      	subs	r3, r2, r3
 8009c24:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009c28:	d901      	bls.n	8009c2e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e007      	b.n	8009c3e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009c2e:	4b06      	ldr	r3, [pc, #24]	@ (8009c48 <HAL_PWREx_ConfigSupply+0x70>)
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009c36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c3a:	d1ee      	bne.n	8009c1a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009c3c:	2300      	movs	r3, #0
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3710      	adds	r7, #16
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	58024800 	.word	0x58024800

08009c4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b08c      	sub	sp, #48	@ 0x30
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d102      	bne.n	8009c60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	f000 bc1f 	b.w	800a49e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f003 0301 	and.w	r3, r3, #1
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	f000 80b3 	beq.w	8009dd4 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009c6e:	4b95      	ldr	r3, [pc, #596]	@ (8009ec4 <HAL_RCC_OscConfig+0x278>)
 8009c70:	691b      	ldr	r3, [r3, #16]
 8009c72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009c78:	4b92      	ldr	r3, [pc, #584]	@ (8009ec4 <HAL_RCC_OscConfig+0x278>)
 8009c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c80:	2b10      	cmp	r3, #16
 8009c82:	d007      	beq.n	8009c94 <HAL_RCC_OscConfig+0x48>
 8009c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c86:	2b18      	cmp	r3, #24
 8009c88:	d112      	bne.n	8009cb0 <HAL_RCC_OscConfig+0x64>
 8009c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c8c:	f003 0303 	and.w	r3, r3, #3
 8009c90:	2b02      	cmp	r3, #2
 8009c92:	d10d      	bne.n	8009cb0 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009c94:	4b8b      	ldr	r3, [pc, #556]	@ (8009ec4 <HAL_RCC_OscConfig+0x278>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	f000 8098 	beq.w	8009dd2 <HAL_RCC_OscConfig+0x186>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	f040 8093 	bne.w	8009dd2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8009cac:	2301      	movs	r3, #1
 8009cae:	e3f6      	b.n	800a49e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009cb8:	d106      	bne.n	8009cc8 <HAL_RCC_OscConfig+0x7c>
 8009cba:	4b82      	ldr	r3, [pc, #520]	@ (8009ec4 <HAL_RCC_OscConfig+0x278>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4a81      	ldr	r2, [pc, #516]	@ (8009ec4 <HAL_RCC_OscConfig+0x278>)
 8009cc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009cc4:	6013      	str	r3, [r2, #0]
 8009cc6:	e058      	b.n	8009d7a <HAL_RCC_OscConfig+0x12e>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	685b      	ldr	r3, [r3, #4]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d112      	bne.n	8009cf6 <HAL_RCC_OscConfig+0xaa>
 8009cd0:	4b7c      	ldr	r3, [pc, #496]	@ (8009ec4 <HAL_RCC_OscConfig+0x278>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a7b      	ldr	r2, [pc, #492]	@ (8009ec4 <HAL_RCC_OscConfig+0x278>)
 8009cd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009cda:	6013      	str	r3, [r2, #0]
 8009cdc:	4b79      	ldr	r3, [pc, #484]	@ (8009ec4 <HAL_RCC_OscConfig+0x278>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a78      	ldr	r2, [pc, #480]	@ (8009ec4 <HAL_RCC_OscConfig+0x278>)
 8009ce2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009ce6:	6013      	str	r3, [r2, #0]
 8009ce8:	4b76      	ldr	r3, [pc, #472]	@ (8009ec4 <HAL_RCC_OscConfig+0x278>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4a75      	ldr	r2, [pc, #468]	@ (8009ec4 <HAL_RCC_OscConfig+0x278>)
 8009cee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009cf2:	6013      	str	r3, [r2, #0]
 8009cf4:	e041      	b.n	8009d7a <HAL_RCC_OscConfig+0x12e>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009cfe:	d112      	bne.n	8009d26 <HAL_RCC_OscConfig+0xda>
 8009d00:	4b70      	ldr	r3, [pc, #448]	@ (8009ec4 <HAL_RCC_OscConfig+0x278>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a6f      	ldr	r2, [pc, #444]	@ (8009ec4 <HAL_RCC_OscConfig+0x278>)
 8009d06:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009d0a:	6013      	str	r3, [r2, #0]
 8009d0c:	4b6d      	ldr	r3, [pc, #436]	@ (8009ec4 <HAL_RCC_OscConfig+0x278>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4a6c      	ldr	r2, [pc, #432]	@ (8009ec4 <HAL_RCC_OscConfig+0x278>)
 8009d12:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009d16:	6013      	str	r3, [r2, #0]
 8009d18:	4b6a      	ldr	r3, [pc, #424]	@ (8009ec4 <HAL_RCC_OscConfig+0x278>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a69      	ldr	r2, [pc, #420]	@ (8009ec4 <HAL_RCC_OscConfig+0x278>)
 8009d1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d22:	6013      	str	r3, [r2, #0]
 8009d24:	e029      	b.n	8009d7a <HAL_RCC_OscConfig+0x12e>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8009d2e:	d112      	bne.n	8009d56 <HAL_RCC_OscConfig+0x10a>
 8009d30:	4b64      	ldr	r3, [pc, #400]	@ (8009ec4 <HAL_RCC_OscConfig+0x278>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4a63      	ldr	r2, [pc, #396]	@ (8009ec4 <HAL_RCC_OscConfig+0x278>)
 8009d36:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009d3a:	6013      	str	r3, [r2, #0]
 8009d3c:	4b61      	ldr	r3, [pc, #388]	@ (8009ec4 <HAL_RCC_OscConfig+0x278>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a60      	ldr	r2, [pc, #384]	@ (8009ec4 <HAL_RCC_OscConfig+0x278>)
 8009d42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009d46:	6013      	str	r3, [r2, #0]
 8009d48:	4b5e      	ldr	r3, [pc, #376]	@ (8009ec4 <HAL_RCC_OscConfig+0x278>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a5d      	ldr	r2, [pc, #372]	@ (8009ec4 <HAL_RCC_OscConfig+0x278>)
 8009d4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d52:	6013      	str	r3, [r2, #0]
 8009d54:	e011      	b.n	8009d7a <HAL_RCC_OscConfig+0x12e>
 8009d56:	4b5b      	ldr	r3, [pc, #364]	@ (8009ec4 <HAL_RCC_OscConfig+0x278>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4a5a      	ldr	r2, [pc, #360]	@ (8009ec4 <HAL_RCC_OscConfig+0x278>)
 8009d5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009d60:	6013      	str	r3, [r2, #0]
 8009d62:	4b58      	ldr	r3, [pc, #352]	@ (8009ec4 <HAL_RCC_OscConfig+0x278>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4a57      	ldr	r2, [pc, #348]	@ (8009ec4 <HAL_RCC_OscConfig+0x278>)
 8009d68:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009d6c:	6013      	str	r3, [r2, #0]
 8009d6e:	4b55      	ldr	r3, [pc, #340]	@ (8009ec4 <HAL_RCC_OscConfig+0x278>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4a54      	ldr	r2, [pc, #336]	@ (8009ec4 <HAL_RCC_OscConfig+0x278>)
 8009d74:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009d78:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d013      	beq.n	8009daa <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d82:	f7fc f879 	bl	8005e78 <HAL_GetTick>
 8009d86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009d88:	e008      	b.n	8009d9c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009d8a:	f7fc f875 	bl	8005e78 <HAL_GetTick>
 8009d8e:	4602      	mov	r2, r0
 8009d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d92:	1ad3      	subs	r3, r2, r3
 8009d94:	2b64      	cmp	r3, #100	@ 0x64
 8009d96:	d901      	bls.n	8009d9c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8009d98:	2303      	movs	r3, #3
 8009d9a:	e380      	b.n	800a49e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009d9c:	4b49      	ldr	r3, [pc, #292]	@ (8009ec4 <HAL_RCC_OscConfig+0x278>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d0f0      	beq.n	8009d8a <HAL_RCC_OscConfig+0x13e>
 8009da8:	e014      	b.n	8009dd4 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009daa:	f7fc f865 	bl	8005e78 <HAL_GetTick>
 8009dae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009db0:	e008      	b.n	8009dc4 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009db2:	f7fc f861 	bl	8005e78 <HAL_GetTick>
 8009db6:	4602      	mov	r2, r0
 8009db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dba:	1ad3      	subs	r3, r2, r3
 8009dbc:	2b64      	cmp	r3, #100	@ 0x64
 8009dbe:	d901      	bls.n	8009dc4 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8009dc0:	2303      	movs	r3, #3
 8009dc2:	e36c      	b.n	800a49e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009dc4:	4b3f      	ldr	r3, [pc, #252]	@ (8009ec4 <HAL_RCC_OscConfig+0x278>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d1f0      	bne.n	8009db2 <HAL_RCC_OscConfig+0x166>
 8009dd0:	e000      	b.n	8009dd4 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009dd2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f003 0302 	and.w	r3, r3, #2
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	f000 808c 	beq.w	8009efa <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009de2:	4b38      	ldr	r3, [pc, #224]	@ (8009ec4 <HAL_RCC_OscConfig+0x278>)
 8009de4:	691b      	ldr	r3, [r3, #16]
 8009de6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009dea:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009dec:	4b35      	ldr	r3, [pc, #212]	@ (8009ec4 <HAL_RCC_OscConfig+0x278>)
 8009dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009df0:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009df2:	6a3b      	ldr	r3, [r7, #32]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d007      	beq.n	8009e08 <HAL_RCC_OscConfig+0x1bc>
 8009df8:	6a3b      	ldr	r3, [r7, #32]
 8009dfa:	2b18      	cmp	r3, #24
 8009dfc:	d137      	bne.n	8009e6e <HAL_RCC_OscConfig+0x222>
 8009dfe:	69fb      	ldr	r3, [r7, #28]
 8009e00:	f003 0303 	and.w	r3, r3, #3
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d132      	bne.n	8009e6e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009e08:	4b2e      	ldr	r3, [pc, #184]	@ (8009ec4 <HAL_RCC_OscConfig+0x278>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f003 0304 	and.w	r3, r3, #4
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d005      	beq.n	8009e20 <HAL_RCC_OscConfig+0x1d4>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	68db      	ldr	r3, [r3, #12]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d101      	bne.n	8009e20 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	e33e      	b.n	800a49e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009e20:	4b28      	ldr	r3, [pc, #160]	@ (8009ec4 <HAL_RCC_OscConfig+0x278>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f023 0219 	bic.w	r2, r3, #25
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	68db      	ldr	r3, [r3, #12]
 8009e2c:	4925      	ldr	r1, [pc, #148]	@ (8009ec4 <HAL_RCC_OscConfig+0x278>)
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e32:	f7fc f821 	bl	8005e78 <HAL_GetTick>
 8009e36:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009e38:	e008      	b.n	8009e4c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009e3a:	f7fc f81d 	bl	8005e78 <HAL_GetTick>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e42:	1ad3      	subs	r3, r2, r3
 8009e44:	2b02      	cmp	r3, #2
 8009e46:	d901      	bls.n	8009e4c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8009e48:	2303      	movs	r3, #3
 8009e4a:	e328      	b.n	800a49e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009e4c:	4b1d      	ldr	r3, [pc, #116]	@ (8009ec4 <HAL_RCC_OscConfig+0x278>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f003 0304 	and.w	r3, r3, #4
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d0f0      	beq.n	8009e3a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e58:	4b1a      	ldr	r3, [pc, #104]	@ (8009ec4 <HAL_RCC_OscConfig+0x278>)
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	691b      	ldr	r3, [r3, #16]
 8009e64:	061b      	lsls	r3, r3, #24
 8009e66:	4917      	ldr	r1, [pc, #92]	@ (8009ec4 <HAL_RCC_OscConfig+0x278>)
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009e6c:	e045      	b.n	8009efa <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	68db      	ldr	r3, [r3, #12]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d028      	beq.n	8009ec8 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009e76:	4b13      	ldr	r3, [pc, #76]	@ (8009ec4 <HAL_RCC_OscConfig+0x278>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f023 0219 	bic.w	r2, r3, #25
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	68db      	ldr	r3, [r3, #12]
 8009e82:	4910      	ldr	r1, [pc, #64]	@ (8009ec4 <HAL_RCC_OscConfig+0x278>)
 8009e84:	4313      	orrs	r3, r2
 8009e86:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e88:	f7fb fff6 	bl	8005e78 <HAL_GetTick>
 8009e8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009e8e:	e008      	b.n	8009ea2 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009e90:	f7fb fff2 	bl	8005e78 <HAL_GetTick>
 8009e94:	4602      	mov	r2, r0
 8009e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e98:	1ad3      	subs	r3, r2, r3
 8009e9a:	2b02      	cmp	r3, #2
 8009e9c:	d901      	bls.n	8009ea2 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8009e9e:	2303      	movs	r3, #3
 8009ea0:	e2fd      	b.n	800a49e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009ea2:	4b08      	ldr	r3, [pc, #32]	@ (8009ec4 <HAL_RCC_OscConfig+0x278>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f003 0304 	and.w	r3, r3, #4
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d0f0      	beq.n	8009e90 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009eae:	4b05      	ldr	r3, [pc, #20]	@ (8009ec4 <HAL_RCC_OscConfig+0x278>)
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	691b      	ldr	r3, [r3, #16]
 8009eba:	061b      	lsls	r3, r3, #24
 8009ebc:	4901      	ldr	r1, [pc, #4]	@ (8009ec4 <HAL_RCC_OscConfig+0x278>)
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	604b      	str	r3, [r1, #4]
 8009ec2:	e01a      	b.n	8009efa <HAL_RCC_OscConfig+0x2ae>
 8009ec4:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009ec8:	4b97      	ldr	r3, [pc, #604]	@ (800a128 <HAL_RCC_OscConfig+0x4dc>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a96      	ldr	r2, [pc, #600]	@ (800a128 <HAL_RCC_OscConfig+0x4dc>)
 8009ece:	f023 0301 	bic.w	r3, r3, #1
 8009ed2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ed4:	f7fb ffd0 	bl	8005e78 <HAL_GetTick>
 8009ed8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009eda:	e008      	b.n	8009eee <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009edc:	f7fb ffcc 	bl	8005e78 <HAL_GetTick>
 8009ee0:	4602      	mov	r2, r0
 8009ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ee4:	1ad3      	subs	r3, r2, r3
 8009ee6:	2b02      	cmp	r3, #2
 8009ee8:	d901      	bls.n	8009eee <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8009eea:	2303      	movs	r3, #3
 8009eec:	e2d7      	b.n	800a49e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009eee:	4b8e      	ldr	r3, [pc, #568]	@ (800a128 <HAL_RCC_OscConfig+0x4dc>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f003 0304 	and.w	r3, r3, #4
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d1f0      	bne.n	8009edc <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f003 0310 	and.w	r3, r3, #16
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d06a      	beq.n	8009fdc <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009f06:	4b88      	ldr	r3, [pc, #544]	@ (800a128 <HAL_RCC_OscConfig+0x4dc>)
 8009f08:	691b      	ldr	r3, [r3, #16]
 8009f0a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009f0e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009f10:	4b85      	ldr	r3, [pc, #532]	@ (800a128 <HAL_RCC_OscConfig+0x4dc>)
 8009f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f14:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009f16:	69bb      	ldr	r3, [r7, #24]
 8009f18:	2b08      	cmp	r3, #8
 8009f1a:	d007      	beq.n	8009f2c <HAL_RCC_OscConfig+0x2e0>
 8009f1c:	69bb      	ldr	r3, [r7, #24]
 8009f1e:	2b18      	cmp	r3, #24
 8009f20:	d11b      	bne.n	8009f5a <HAL_RCC_OscConfig+0x30e>
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	f003 0303 	and.w	r3, r3, #3
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	d116      	bne.n	8009f5a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009f2c:	4b7e      	ldr	r3, [pc, #504]	@ (800a128 <HAL_RCC_OscConfig+0x4dc>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d005      	beq.n	8009f44 <HAL_RCC_OscConfig+0x2f8>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	69db      	ldr	r3, [r3, #28]
 8009f3c:	2b80      	cmp	r3, #128	@ 0x80
 8009f3e:	d001      	beq.n	8009f44 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8009f40:	2301      	movs	r3, #1
 8009f42:	e2ac      	b.n	800a49e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009f44:	4b78      	ldr	r3, [pc, #480]	@ (800a128 <HAL_RCC_OscConfig+0x4dc>)
 8009f46:	68db      	ldr	r3, [r3, #12]
 8009f48:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6a1b      	ldr	r3, [r3, #32]
 8009f50:	061b      	lsls	r3, r3, #24
 8009f52:	4975      	ldr	r1, [pc, #468]	@ (800a128 <HAL_RCC_OscConfig+0x4dc>)
 8009f54:	4313      	orrs	r3, r2
 8009f56:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009f58:	e040      	b.n	8009fdc <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	69db      	ldr	r3, [r3, #28]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d023      	beq.n	8009faa <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009f62:	4b71      	ldr	r3, [pc, #452]	@ (800a128 <HAL_RCC_OscConfig+0x4dc>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4a70      	ldr	r2, [pc, #448]	@ (800a128 <HAL_RCC_OscConfig+0x4dc>)
 8009f68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f6e:	f7fb ff83 	bl	8005e78 <HAL_GetTick>
 8009f72:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009f74:	e008      	b.n	8009f88 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009f76:	f7fb ff7f 	bl	8005e78 <HAL_GetTick>
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f7e:	1ad3      	subs	r3, r2, r3
 8009f80:	2b02      	cmp	r3, #2
 8009f82:	d901      	bls.n	8009f88 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8009f84:	2303      	movs	r3, #3
 8009f86:	e28a      	b.n	800a49e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009f88:	4b67      	ldr	r3, [pc, #412]	@ (800a128 <HAL_RCC_OscConfig+0x4dc>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d0f0      	beq.n	8009f76 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009f94:	4b64      	ldr	r3, [pc, #400]	@ (800a128 <HAL_RCC_OscConfig+0x4dc>)
 8009f96:	68db      	ldr	r3, [r3, #12]
 8009f98:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6a1b      	ldr	r3, [r3, #32]
 8009fa0:	061b      	lsls	r3, r3, #24
 8009fa2:	4961      	ldr	r1, [pc, #388]	@ (800a128 <HAL_RCC_OscConfig+0x4dc>)
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	60cb      	str	r3, [r1, #12]
 8009fa8:	e018      	b.n	8009fdc <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009faa:	4b5f      	ldr	r3, [pc, #380]	@ (800a128 <HAL_RCC_OscConfig+0x4dc>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	4a5e      	ldr	r2, [pc, #376]	@ (800a128 <HAL_RCC_OscConfig+0x4dc>)
 8009fb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009fb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fb6:	f7fb ff5f 	bl	8005e78 <HAL_GetTick>
 8009fba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009fbc:	e008      	b.n	8009fd0 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009fbe:	f7fb ff5b 	bl	8005e78 <HAL_GetTick>
 8009fc2:	4602      	mov	r2, r0
 8009fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fc6:	1ad3      	subs	r3, r2, r3
 8009fc8:	2b02      	cmp	r3, #2
 8009fca:	d901      	bls.n	8009fd0 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8009fcc:	2303      	movs	r3, #3
 8009fce:	e266      	b.n	800a49e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009fd0:	4b55      	ldr	r3, [pc, #340]	@ (800a128 <HAL_RCC_OscConfig+0x4dc>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d1f0      	bne.n	8009fbe <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f003 0308 	and.w	r3, r3, #8
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d036      	beq.n	800a056 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	695b      	ldr	r3, [r3, #20]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d019      	beq.n	800a024 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009ff0:	4b4d      	ldr	r3, [pc, #308]	@ (800a128 <HAL_RCC_OscConfig+0x4dc>)
 8009ff2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ff4:	4a4c      	ldr	r2, [pc, #304]	@ (800a128 <HAL_RCC_OscConfig+0x4dc>)
 8009ff6:	f043 0301 	orr.w	r3, r3, #1
 8009ffa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ffc:	f7fb ff3c 	bl	8005e78 <HAL_GetTick>
 800a000:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a002:	e008      	b.n	800a016 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a004:	f7fb ff38 	bl	8005e78 <HAL_GetTick>
 800a008:	4602      	mov	r2, r0
 800a00a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a00c:	1ad3      	subs	r3, r2, r3
 800a00e:	2b02      	cmp	r3, #2
 800a010:	d901      	bls.n	800a016 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800a012:	2303      	movs	r3, #3
 800a014:	e243      	b.n	800a49e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a016:	4b44      	ldr	r3, [pc, #272]	@ (800a128 <HAL_RCC_OscConfig+0x4dc>)
 800a018:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a01a:	f003 0302 	and.w	r3, r3, #2
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d0f0      	beq.n	800a004 <HAL_RCC_OscConfig+0x3b8>
 800a022:	e018      	b.n	800a056 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a024:	4b40      	ldr	r3, [pc, #256]	@ (800a128 <HAL_RCC_OscConfig+0x4dc>)
 800a026:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a028:	4a3f      	ldr	r2, [pc, #252]	@ (800a128 <HAL_RCC_OscConfig+0x4dc>)
 800a02a:	f023 0301 	bic.w	r3, r3, #1
 800a02e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a030:	f7fb ff22 	bl	8005e78 <HAL_GetTick>
 800a034:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a036:	e008      	b.n	800a04a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a038:	f7fb ff1e 	bl	8005e78 <HAL_GetTick>
 800a03c:	4602      	mov	r2, r0
 800a03e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a040:	1ad3      	subs	r3, r2, r3
 800a042:	2b02      	cmp	r3, #2
 800a044:	d901      	bls.n	800a04a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800a046:	2303      	movs	r3, #3
 800a048:	e229      	b.n	800a49e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a04a:	4b37      	ldr	r3, [pc, #220]	@ (800a128 <HAL_RCC_OscConfig+0x4dc>)
 800a04c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a04e:	f003 0302 	and.w	r3, r3, #2
 800a052:	2b00      	cmp	r3, #0
 800a054:	d1f0      	bne.n	800a038 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f003 0320 	and.w	r3, r3, #32
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d036      	beq.n	800a0d0 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	699b      	ldr	r3, [r3, #24]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d019      	beq.n	800a09e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a06a:	4b2f      	ldr	r3, [pc, #188]	@ (800a128 <HAL_RCC_OscConfig+0x4dc>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a2e      	ldr	r2, [pc, #184]	@ (800a128 <HAL_RCC_OscConfig+0x4dc>)
 800a070:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a074:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a076:	f7fb feff 	bl	8005e78 <HAL_GetTick>
 800a07a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a07c:	e008      	b.n	800a090 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a07e:	f7fb fefb 	bl	8005e78 <HAL_GetTick>
 800a082:	4602      	mov	r2, r0
 800a084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a086:	1ad3      	subs	r3, r2, r3
 800a088:	2b02      	cmp	r3, #2
 800a08a:	d901      	bls.n	800a090 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800a08c:	2303      	movs	r3, #3
 800a08e:	e206      	b.n	800a49e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a090:	4b25      	ldr	r3, [pc, #148]	@ (800a128 <HAL_RCC_OscConfig+0x4dc>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d0f0      	beq.n	800a07e <HAL_RCC_OscConfig+0x432>
 800a09c:	e018      	b.n	800a0d0 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a09e:	4b22      	ldr	r3, [pc, #136]	@ (800a128 <HAL_RCC_OscConfig+0x4dc>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4a21      	ldr	r2, [pc, #132]	@ (800a128 <HAL_RCC_OscConfig+0x4dc>)
 800a0a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a0a8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a0aa:	f7fb fee5 	bl	8005e78 <HAL_GetTick>
 800a0ae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a0b0:	e008      	b.n	800a0c4 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a0b2:	f7fb fee1 	bl	8005e78 <HAL_GetTick>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ba:	1ad3      	subs	r3, r2, r3
 800a0bc:	2b02      	cmp	r3, #2
 800a0be:	d901      	bls.n	800a0c4 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800a0c0:	2303      	movs	r3, #3
 800a0c2:	e1ec      	b.n	800a49e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a0c4:	4b18      	ldr	r3, [pc, #96]	@ (800a128 <HAL_RCC_OscConfig+0x4dc>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d1f0      	bne.n	800a0b2 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f003 0304 	and.w	r3, r3, #4
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	f000 80af 	beq.w	800a23c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a0de:	4b13      	ldr	r3, [pc, #76]	@ (800a12c <HAL_RCC_OscConfig+0x4e0>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	4a12      	ldr	r2, [pc, #72]	@ (800a12c <HAL_RCC_OscConfig+0x4e0>)
 800a0e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a0e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a0ea:	f7fb fec5 	bl	8005e78 <HAL_GetTick>
 800a0ee:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a0f0:	e008      	b.n	800a104 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a0f2:	f7fb fec1 	bl	8005e78 <HAL_GetTick>
 800a0f6:	4602      	mov	r2, r0
 800a0f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0fa:	1ad3      	subs	r3, r2, r3
 800a0fc:	2b64      	cmp	r3, #100	@ 0x64
 800a0fe:	d901      	bls.n	800a104 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800a100:	2303      	movs	r3, #3
 800a102:	e1cc      	b.n	800a49e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a104:	4b09      	ldr	r3, [pc, #36]	@ (800a12c <HAL_RCC_OscConfig+0x4e0>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d0f0      	beq.n	800a0f2 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	689b      	ldr	r3, [r3, #8]
 800a114:	2b01      	cmp	r3, #1
 800a116:	d10b      	bne.n	800a130 <HAL_RCC_OscConfig+0x4e4>
 800a118:	4b03      	ldr	r3, [pc, #12]	@ (800a128 <HAL_RCC_OscConfig+0x4dc>)
 800a11a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a11c:	4a02      	ldr	r2, [pc, #8]	@ (800a128 <HAL_RCC_OscConfig+0x4dc>)
 800a11e:	f043 0301 	orr.w	r3, r3, #1
 800a122:	6713      	str	r3, [r2, #112]	@ 0x70
 800a124:	e05b      	b.n	800a1de <HAL_RCC_OscConfig+0x592>
 800a126:	bf00      	nop
 800a128:	58024400 	.word	0x58024400
 800a12c:	58024800 	.word	0x58024800
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	689b      	ldr	r3, [r3, #8]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d112      	bne.n	800a15e <HAL_RCC_OscConfig+0x512>
 800a138:	4b9d      	ldr	r3, [pc, #628]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a13a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a13c:	4a9c      	ldr	r2, [pc, #624]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a13e:	f023 0301 	bic.w	r3, r3, #1
 800a142:	6713      	str	r3, [r2, #112]	@ 0x70
 800a144:	4b9a      	ldr	r3, [pc, #616]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a148:	4a99      	ldr	r2, [pc, #612]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a14a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a14e:	6713      	str	r3, [r2, #112]	@ 0x70
 800a150:	4b97      	ldr	r3, [pc, #604]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a152:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a154:	4a96      	ldr	r2, [pc, #600]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a156:	f023 0304 	bic.w	r3, r3, #4
 800a15a:	6713      	str	r3, [r2, #112]	@ 0x70
 800a15c:	e03f      	b.n	800a1de <HAL_RCC_OscConfig+0x592>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	689b      	ldr	r3, [r3, #8]
 800a162:	2b05      	cmp	r3, #5
 800a164:	d112      	bne.n	800a18c <HAL_RCC_OscConfig+0x540>
 800a166:	4b92      	ldr	r3, [pc, #584]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a16a:	4a91      	ldr	r2, [pc, #580]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a16c:	f043 0304 	orr.w	r3, r3, #4
 800a170:	6713      	str	r3, [r2, #112]	@ 0x70
 800a172:	4b8f      	ldr	r3, [pc, #572]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a176:	4a8e      	ldr	r2, [pc, #568]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a178:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a17c:	6713      	str	r3, [r2, #112]	@ 0x70
 800a17e:	4b8c      	ldr	r3, [pc, #560]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a182:	4a8b      	ldr	r2, [pc, #556]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a184:	f043 0301 	orr.w	r3, r3, #1
 800a188:	6713      	str	r3, [r2, #112]	@ 0x70
 800a18a:	e028      	b.n	800a1de <HAL_RCC_OscConfig+0x592>
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	689b      	ldr	r3, [r3, #8]
 800a190:	2b85      	cmp	r3, #133	@ 0x85
 800a192:	d112      	bne.n	800a1ba <HAL_RCC_OscConfig+0x56e>
 800a194:	4b86      	ldr	r3, [pc, #536]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a198:	4a85      	ldr	r2, [pc, #532]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a19a:	f043 0304 	orr.w	r3, r3, #4
 800a19e:	6713      	str	r3, [r2, #112]	@ 0x70
 800a1a0:	4b83      	ldr	r3, [pc, #524]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a1a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a1a4:	4a82      	ldr	r2, [pc, #520]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a1a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1aa:	6713      	str	r3, [r2, #112]	@ 0x70
 800a1ac:	4b80      	ldr	r3, [pc, #512]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a1ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a1b0:	4a7f      	ldr	r2, [pc, #508]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a1b2:	f043 0301 	orr.w	r3, r3, #1
 800a1b6:	6713      	str	r3, [r2, #112]	@ 0x70
 800a1b8:	e011      	b.n	800a1de <HAL_RCC_OscConfig+0x592>
 800a1ba:	4b7d      	ldr	r3, [pc, #500]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a1bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a1be:	4a7c      	ldr	r2, [pc, #496]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a1c0:	f023 0301 	bic.w	r3, r3, #1
 800a1c4:	6713      	str	r3, [r2, #112]	@ 0x70
 800a1c6:	4b7a      	ldr	r3, [pc, #488]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a1c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a1ca:	4a79      	ldr	r2, [pc, #484]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a1cc:	f023 0304 	bic.w	r3, r3, #4
 800a1d0:	6713      	str	r3, [r2, #112]	@ 0x70
 800a1d2:	4b77      	ldr	r3, [pc, #476]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a1d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a1d6:	4a76      	ldr	r2, [pc, #472]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a1d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a1dc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	689b      	ldr	r3, [r3, #8]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d015      	beq.n	800a212 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1e6:	f7fb fe47 	bl	8005e78 <HAL_GetTick>
 800a1ea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a1ec:	e00a      	b.n	800a204 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1ee:	f7fb fe43 	bl	8005e78 <HAL_GetTick>
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1f6:	1ad3      	subs	r3, r2, r3
 800a1f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d901      	bls.n	800a204 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800a200:	2303      	movs	r3, #3
 800a202:	e14c      	b.n	800a49e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a204:	4b6a      	ldr	r3, [pc, #424]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a208:	f003 0302 	and.w	r3, r3, #2
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d0ee      	beq.n	800a1ee <HAL_RCC_OscConfig+0x5a2>
 800a210:	e014      	b.n	800a23c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a212:	f7fb fe31 	bl	8005e78 <HAL_GetTick>
 800a216:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a218:	e00a      	b.n	800a230 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a21a:	f7fb fe2d 	bl	8005e78 <HAL_GetTick>
 800a21e:	4602      	mov	r2, r0
 800a220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a222:	1ad3      	subs	r3, r2, r3
 800a224:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a228:	4293      	cmp	r3, r2
 800a22a:	d901      	bls.n	800a230 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800a22c:	2303      	movs	r3, #3
 800a22e:	e136      	b.n	800a49e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a230:	4b5f      	ldr	r3, [pc, #380]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a234:	f003 0302 	and.w	r3, r3, #2
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d1ee      	bne.n	800a21a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a240:	2b00      	cmp	r3, #0
 800a242:	f000 812b 	beq.w	800a49c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a246:	4b5a      	ldr	r3, [pc, #360]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a248:	691b      	ldr	r3, [r3, #16]
 800a24a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a24e:	2b18      	cmp	r3, #24
 800a250:	f000 80bb 	beq.w	800a3ca <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a258:	2b02      	cmp	r3, #2
 800a25a:	f040 8095 	bne.w	800a388 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a25e:	4b54      	ldr	r3, [pc, #336]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4a53      	ldr	r2, [pc, #332]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a264:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a268:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a26a:	f7fb fe05 	bl	8005e78 <HAL_GetTick>
 800a26e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a270:	e008      	b.n	800a284 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a272:	f7fb fe01 	bl	8005e78 <HAL_GetTick>
 800a276:	4602      	mov	r2, r0
 800a278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a27a:	1ad3      	subs	r3, r2, r3
 800a27c:	2b02      	cmp	r3, #2
 800a27e:	d901      	bls.n	800a284 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800a280:	2303      	movs	r3, #3
 800a282:	e10c      	b.n	800a49e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a284:	4b4a      	ldr	r3, [pc, #296]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d1f0      	bne.n	800a272 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a290:	4b47      	ldr	r3, [pc, #284]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a292:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a294:	4b47      	ldr	r3, [pc, #284]	@ (800a3b4 <HAL_RCC_OscConfig+0x768>)
 800a296:	4013      	ands	r3, r2
 800a298:	687a      	ldr	r2, [r7, #4]
 800a29a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800a29c:	687a      	ldr	r2, [r7, #4]
 800a29e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800a2a0:	0112      	lsls	r2, r2, #4
 800a2a2:	430a      	orrs	r2, r1
 800a2a4:	4942      	ldr	r1, [pc, #264]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	628b      	str	r3, [r1, #40]	@ 0x28
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2ae:	3b01      	subs	r3, #1
 800a2b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2b8:	3b01      	subs	r3, #1
 800a2ba:	025b      	lsls	r3, r3, #9
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	431a      	orrs	r2, r3
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2c4:	3b01      	subs	r3, #1
 800a2c6:	041b      	lsls	r3, r3, #16
 800a2c8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a2cc:	431a      	orrs	r2, r3
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2d2:	3b01      	subs	r3, #1
 800a2d4:	061b      	lsls	r3, r3, #24
 800a2d6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a2da:	4935      	ldr	r1, [pc, #212]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a2dc:	4313      	orrs	r3, r2
 800a2de:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a2e0:	4b33      	ldr	r3, [pc, #204]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a2e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2e4:	4a32      	ldr	r2, [pc, #200]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a2e6:	f023 0301 	bic.w	r3, r3, #1
 800a2ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a2ec:	4b30      	ldr	r3, [pc, #192]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a2ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a2f0:	4b31      	ldr	r3, [pc, #196]	@ (800a3b8 <HAL_RCC_OscConfig+0x76c>)
 800a2f2:	4013      	ands	r3, r2
 800a2f4:	687a      	ldr	r2, [r7, #4]
 800a2f6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a2f8:	00d2      	lsls	r2, r2, #3
 800a2fa:	492d      	ldr	r1, [pc, #180]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a300:	4b2b      	ldr	r3, [pc, #172]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a304:	f023 020c 	bic.w	r2, r3, #12
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a30c:	4928      	ldr	r1, [pc, #160]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a30e:	4313      	orrs	r3, r2
 800a310:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a312:	4b27      	ldr	r3, [pc, #156]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a316:	f023 0202 	bic.w	r2, r3, #2
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a31e:	4924      	ldr	r1, [pc, #144]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a320:	4313      	orrs	r3, r2
 800a322:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a324:	4b22      	ldr	r3, [pc, #136]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a328:	4a21      	ldr	r2, [pc, #132]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a32a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a32e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a330:	4b1f      	ldr	r3, [pc, #124]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a334:	4a1e      	ldr	r2, [pc, #120]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a336:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a33a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a33c:	4b1c      	ldr	r3, [pc, #112]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a33e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a340:	4a1b      	ldr	r2, [pc, #108]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a342:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a346:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a348:	4b19      	ldr	r3, [pc, #100]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a34a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a34c:	4a18      	ldr	r2, [pc, #96]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a34e:	f043 0301 	orr.w	r3, r3, #1
 800a352:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a354:	4b16      	ldr	r3, [pc, #88]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4a15      	ldr	r2, [pc, #84]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a35a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a35e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a360:	f7fb fd8a 	bl	8005e78 <HAL_GetTick>
 800a364:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a366:	e008      	b.n	800a37a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a368:	f7fb fd86 	bl	8005e78 <HAL_GetTick>
 800a36c:	4602      	mov	r2, r0
 800a36e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a370:	1ad3      	subs	r3, r2, r3
 800a372:	2b02      	cmp	r3, #2
 800a374:	d901      	bls.n	800a37a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800a376:	2303      	movs	r3, #3
 800a378:	e091      	b.n	800a49e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a37a:	4b0d      	ldr	r3, [pc, #52]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a382:	2b00      	cmp	r3, #0
 800a384:	d0f0      	beq.n	800a368 <HAL_RCC_OscConfig+0x71c>
 800a386:	e089      	b.n	800a49c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a388:	4b09      	ldr	r3, [pc, #36]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4a08      	ldr	r2, [pc, #32]	@ (800a3b0 <HAL_RCC_OscConfig+0x764>)
 800a38e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a392:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a394:	f7fb fd70 	bl	8005e78 <HAL_GetTick>
 800a398:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a39a:	e00f      	b.n	800a3bc <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a39c:	f7fb fd6c 	bl	8005e78 <HAL_GetTick>
 800a3a0:	4602      	mov	r2, r0
 800a3a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3a4:	1ad3      	subs	r3, r2, r3
 800a3a6:	2b02      	cmp	r3, #2
 800a3a8:	d908      	bls.n	800a3bc <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800a3aa:	2303      	movs	r3, #3
 800a3ac:	e077      	b.n	800a49e <HAL_RCC_OscConfig+0x852>
 800a3ae:	bf00      	nop
 800a3b0:	58024400 	.word	0x58024400
 800a3b4:	fffffc0c 	.word	0xfffffc0c
 800a3b8:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a3bc:	4b3a      	ldr	r3, [pc, #232]	@ (800a4a8 <HAL_RCC_OscConfig+0x85c>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d1e9      	bne.n	800a39c <HAL_RCC_OscConfig+0x750>
 800a3c8:	e068      	b.n	800a49c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a3ca:	4b37      	ldr	r3, [pc, #220]	@ (800a4a8 <HAL_RCC_OscConfig+0x85c>)
 800a3cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3ce:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a3d0:	4b35      	ldr	r3, [pc, #212]	@ (800a4a8 <HAL_RCC_OscConfig+0x85c>)
 800a3d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3d4:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3da:	2b01      	cmp	r3, #1
 800a3dc:	d031      	beq.n	800a442 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	f003 0203 	and.w	r2, r3, #3
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d12a      	bne.n	800a442 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	091b      	lsrs	r3, r3, #4
 800a3f0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d122      	bne.n	800a442 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a406:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a408:	429a      	cmp	r2, r3
 800a40a:	d11a      	bne.n	800a442 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	0a5b      	lsrs	r3, r3, #9
 800a410:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a418:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d111      	bne.n	800a442 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	0c1b      	lsrs	r3, r3, #16
 800a422:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a42a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a42c:	429a      	cmp	r2, r3
 800a42e:	d108      	bne.n	800a442 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	0e1b      	lsrs	r3, r3, #24
 800a434:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a43c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a43e:	429a      	cmp	r2, r3
 800a440:	d001      	beq.n	800a446 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800a442:	2301      	movs	r3, #1
 800a444:	e02b      	b.n	800a49e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a446:	4b18      	ldr	r3, [pc, #96]	@ (800a4a8 <HAL_RCC_OscConfig+0x85c>)
 800a448:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a44a:	08db      	lsrs	r3, r3, #3
 800a44c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a450:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a456:	693a      	ldr	r2, [r7, #16]
 800a458:	429a      	cmp	r2, r3
 800a45a:	d01f      	beq.n	800a49c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a45c:	4b12      	ldr	r3, [pc, #72]	@ (800a4a8 <HAL_RCC_OscConfig+0x85c>)
 800a45e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a460:	4a11      	ldr	r2, [pc, #68]	@ (800a4a8 <HAL_RCC_OscConfig+0x85c>)
 800a462:	f023 0301 	bic.w	r3, r3, #1
 800a466:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a468:	f7fb fd06 	bl	8005e78 <HAL_GetTick>
 800a46c:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a46e:	bf00      	nop
 800a470:	f7fb fd02 	bl	8005e78 <HAL_GetTick>
 800a474:	4602      	mov	r2, r0
 800a476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a478:	4293      	cmp	r3, r2
 800a47a:	d0f9      	beq.n	800a470 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a47c:	4b0a      	ldr	r3, [pc, #40]	@ (800a4a8 <HAL_RCC_OscConfig+0x85c>)
 800a47e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a480:	4b0a      	ldr	r3, [pc, #40]	@ (800a4ac <HAL_RCC_OscConfig+0x860>)
 800a482:	4013      	ands	r3, r2
 800a484:	687a      	ldr	r2, [r7, #4]
 800a486:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a488:	00d2      	lsls	r2, r2, #3
 800a48a:	4907      	ldr	r1, [pc, #28]	@ (800a4a8 <HAL_RCC_OscConfig+0x85c>)
 800a48c:	4313      	orrs	r3, r2
 800a48e:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a490:	4b05      	ldr	r3, [pc, #20]	@ (800a4a8 <HAL_RCC_OscConfig+0x85c>)
 800a492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a494:	4a04      	ldr	r2, [pc, #16]	@ (800a4a8 <HAL_RCC_OscConfig+0x85c>)
 800a496:	f043 0301 	orr.w	r3, r3, #1
 800a49a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a49c:	2300      	movs	r3, #0
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3730      	adds	r7, #48	@ 0x30
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	bf00      	nop
 800a4a8:	58024400 	.word	0x58024400
 800a4ac:	ffff0007 	.word	0xffff0007

0800a4b0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b086      	sub	sp, #24
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d101      	bne.n	800a4c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	e19c      	b.n	800a7fe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a4c4:	4b8a      	ldr	r3, [pc, #552]	@ (800a6f0 <HAL_RCC_ClockConfig+0x240>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f003 030f 	and.w	r3, r3, #15
 800a4cc:	683a      	ldr	r2, [r7, #0]
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d910      	bls.n	800a4f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a4d2:	4b87      	ldr	r3, [pc, #540]	@ (800a6f0 <HAL_RCC_ClockConfig+0x240>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f023 020f 	bic.w	r2, r3, #15
 800a4da:	4985      	ldr	r1, [pc, #532]	@ (800a6f0 <HAL_RCC_ClockConfig+0x240>)
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a4e2:	4b83      	ldr	r3, [pc, #524]	@ (800a6f0 <HAL_RCC_ClockConfig+0x240>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f003 030f 	and.w	r3, r3, #15
 800a4ea:	683a      	ldr	r2, [r7, #0]
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d001      	beq.n	800a4f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	e184      	b.n	800a7fe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f003 0304 	and.w	r3, r3, #4
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d010      	beq.n	800a522 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	691a      	ldr	r2, [r3, #16]
 800a504:	4b7b      	ldr	r3, [pc, #492]	@ (800a6f4 <HAL_RCC_ClockConfig+0x244>)
 800a506:	699b      	ldr	r3, [r3, #24]
 800a508:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d908      	bls.n	800a522 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a510:	4b78      	ldr	r3, [pc, #480]	@ (800a6f4 <HAL_RCC_ClockConfig+0x244>)
 800a512:	699b      	ldr	r3, [r3, #24]
 800a514:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	691b      	ldr	r3, [r3, #16]
 800a51c:	4975      	ldr	r1, [pc, #468]	@ (800a6f4 <HAL_RCC_ClockConfig+0x244>)
 800a51e:	4313      	orrs	r3, r2
 800a520:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f003 0308 	and.w	r3, r3, #8
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d010      	beq.n	800a550 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	695a      	ldr	r2, [r3, #20]
 800a532:	4b70      	ldr	r3, [pc, #448]	@ (800a6f4 <HAL_RCC_ClockConfig+0x244>)
 800a534:	69db      	ldr	r3, [r3, #28]
 800a536:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d908      	bls.n	800a550 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a53e:	4b6d      	ldr	r3, [pc, #436]	@ (800a6f4 <HAL_RCC_ClockConfig+0x244>)
 800a540:	69db      	ldr	r3, [r3, #28]
 800a542:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	695b      	ldr	r3, [r3, #20]
 800a54a:	496a      	ldr	r1, [pc, #424]	@ (800a6f4 <HAL_RCC_ClockConfig+0x244>)
 800a54c:	4313      	orrs	r3, r2
 800a54e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f003 0310 	and.w	r3, r3, #16
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d010      	beq.n	800a57e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	699a      	ldr	r2, [r3, #24]
 800a560:	4b64      	ldr	r3, [pc, #400]	@ (800a6f4 <HAL_RCC_ClockConfig+0x244>)
 800a562:	69db      	ldr	r3, [r3, #28]
 800a564:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a568:	429a      	cmp	r2, r3
 800a56a:	d908      	bls.n	800a57e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a56c:	4b61      	ldr	r3, [pc, #388]	@ (800a6f4 <HAL_RCC_ClockConfig+0x244>)
 800a56e:	69db      	ldr	r3, [r3, #28]
 800a570:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	699b      	ldr	r3, [r3, #24]
 800a578:	495e      	ldr	r1, [pc, #376]	@ (800a6f4 <HAL_RCC_ClockConfig+0x244>)
 800a57a:	4313      	orrs	r3, r2
 800a57c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f003 0320 	and.w	r3, r3, #32
 800a586:	2b00      	cmp	r3, #0
 800a588:	d010      	beq.n	800a5ac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	69da      	ldr	r2, [r3, #28]
 800a58e:	4b59      	ldr	r3, [pc, #356]	@ (800a6f4 <HAL_RCC_ClockConfig+0x244>)
 800a590:	6a1b      	ldr	r3, [r3, #32]
 800a592:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a596:	429a      	cmp	r2, r3
 800a598:	d908      	bls.n	800a5ac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a59a:	4b56      	ldr	r3, [pc, #344]	@ (800a6f4 <HAL_RCC_ClockConfig+0x244>)
 800a59c:	6a1b      	ldr	r3, [r3, #32]
 800a59e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	69db      	ldr	r3, [r3, #28]
 800a5a6:	4953      	ldr	r1, [pc, #332]	@ (800a6f4 <HAL_RCC_ClockConfig+0x244>)
 800a5a8:	4313      	orrs	r3, r2
 800a5aa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f003 0302 	and.w	r3, r3, #2
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d010      	beq.n	800a5da <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	68da      	ldr	r2, [r3, #12]
 800a5bc:	4b4d      	ldr	r3, [pc, #308]	@ (800a6f4 <HAL_RCC_ClockConfig+0x244>)
 800a5be:	699b      	ldr	r3, [r3, #24]
 800a5c0:	f003 030f 	and.w	r3, r3, #15
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d908      	bls.n	800a5da <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a5c8:	4b4a      	ldr	r3, [pc, #296]	@ (800a6f4 <HAL_RCC_ClockConfig+0x244>)
 800a5ca:	699b      	ldr	r3, [r3, #24]
 800a5cc:	f023 020f 	bic.w	r2, r3, #15
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	68db      	ldr	r3, [r3, #12]
 800a5d4:	4947      	ldr	r1, [pc, #284]	@ (800a6f4 <HAL_RCC_ClockConfig+0x244>)
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f003 0301 	and.w	r3, r3, #1
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d055      	beq.n	800a692 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a5e6:	4b43      	ldr	r3, [pc, #268]	@ (800a6f4 <HAL_RCC_ClockConfig+0x244>)
 800a5e8:	699b      	ldr	r3, [r3, #24]
 800a5ea:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	689b      	ldr	r3, [r3, #8]
 800a5f2:	4940      	ldr	r1, [pc, #256]	@ (800a6f4 <HAL_RCC_ClockConfig+0x244>)
 800a5f4:	4313      	orrs	r3, r2
 800a5f6:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	2b02      	cmp	r3, #2
 800a5fe:	d107      	bne.n	800a610 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a600:	4b3c      	ldr	r3, [pc, #240]	@ (800a6f4 <HAL_RCC_ClockConfig+0x244>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d121      	bne.n	800a650 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a60c:	2301      	movs	r3, #1
 800a60e:	e0f6      	b.n	800a7fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	685b      	ldr	r3, [r3, #4]
 800a614:	2b03      	cmp	r3, #3
 800a616:	d107      	bne.n	800a628 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a618:	4b36      	ldr	r3, [pc, #216]	@ (800a6f4 <HAL_RCC_ClockConfig+0x244>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a620:	2b00      	cmp	r3, #0
 800a622:	d115      	bne.n	800a650 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a624:	2301      	movs	r3, #1
 800a626:	e0ea      	b.n	800a7fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	2b01      	cmp	r3, #1
 800a62e:	d107      	bne.n	800a640 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a630:	4b30      	ldr	r3, [pc, #192]	@ (800a6f4 <HAL_RCC_ClockConfig+0x244>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d109      	bne.n	800a650 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a63c:	2301      	movs	r3, #1
 800a63e:	e0de      	b.n	800a7fe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a640:	4b2c      	ldr	r3, [pc, #176]	@ (800a6f4 <HAL_RCC_ClockConfig+0x244>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f003 0304 	and.w	r3, r3, #4
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d101      	bne.n	800a650 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a64c:	2301      	movs	r3, #1
 800a64e:	e0d6      	b.n	800a7fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a650:	4b28      	ldr	r3, [pc, #160]	@ (800a6f4 <HAL_RCC_ClockConfig+0x244>)
 800a652:	691b      	ldr	r3, [r3, #16]
 800a654:	f023 0207 	bic.w	r2, r3, #7
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	685b      	ldr	r3, [r3, #4]
 800a65c:	4925      	ldr	r1, [pc, #148]	@ (800a6f4 <HAL_RCC_ClockConfig+0x244>)
 800a65e:	4313      	orrs	r3, r2
 800a660:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a662:	f7fb fc09 	bl	8005e78 <HAL_GetTick>
 800a666:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a668:	e00a      	b.n	800a680 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a66a:	f7fb fc05 	bl	8005e78 <HAL_GetTick>
 800a66e:	4602      	mov	r2, r0
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	1ad3      	subs	r3, r2, r3
 800a674:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a678:	4293      	cmp	r3, r2
 800a67a:	d901      	bls.n	800a680 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a67c:	2303      	movs	r3, #3
 800a67e:	e0be      	b.n	800a7fe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a680:	4b1c      	ldr	r3, [pc, #112]	@ (800a6f4 <HAL_RCC_ClockConfig+0x244>)
 800a682:	691b      	ldr	r3, [r3, #16]
 800a684:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	00db      	lsls	r3, r3, #3
 800a68e:	429a      	cmp	r2, r3
 800a690:	d1eb      	bne.n	800a66a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f003 0302 	and.w	r3, r3, #2
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d010      	beq.n	800a6c0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	68da      	ldr	r2, [r3, #12]
 800a6a2:	4b14      	ldr	r3, [pc, #80]	@ (800a6f4 <HAL_RCC_ClockConfig+0x244>)
 800a6a4:	699b      	ldr	r3, [r3, #24]
 800a6a6:	f003 030f 	and.w	r3, r3, #15
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d208      	bcs.n	800a6c0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a6ae:	4b11      	ldr	r3, [pc, #68]	@ (800a6f4 <HAL_RCC_ClockConfig+0x244>)
 800a6b0:	699b      	ldr	r3, [r3, #24]
 800a6b2:	f023 020f 	bic.w	r2, r3, #15
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	68db      	ldr	r3, [r3, #12]
 800a6ba:	490e      	ldr	r1, [pc, #56]	@ (800a6f4 <HAL_RCC_ClockConfig+0x244>)
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a6c0:	4b0b      	ldr	r3, [pc, #44]	@ (800a6f0 <HAL_RCC_ClockConfig+0x240>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f003 030f 	and.w	r3, r3, #15
 800a6c8:	683a      	ldr	r2, [r7, #0]
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d214      	bcs.n	800a6f8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a6ce:	4b08      	ldr	r3, [pc, #32]	@ (800a6f0 <HAL_RCC_ClockConfig+0x240>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f023 020f 	bic.w	r2, r3, #15
 800a6d6:	4906      	ldr	r1, [pc, #24]	@ (800a6f0 <HAL_RCC_ClockConfig+0x240>)
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a6de:	4b04      	ldr	r3, [pc, #16]	@ (800a6f0 <HAL_RCC_ClockConfig+0x240>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f003 030f 	and.w	r3, r3, #15
 800a6e6:	683a      	ldr	r2, [r7, #0]
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d005      	beq.n	800a6f8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	e086      	b.n	800a7fe <HAL_RCC_ClockConfig+0x34e>
 800a6f0:	52002000 	.word	0x52002000
 800a6f4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f003 0304 	and.w	r3, r3, #4
 800a700:	2b00      	cmp	r3, #0
 800a702:	d010      	beq.n	800a726 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	691a      	ldr	r2, [r3, #16]
 800a708:	4b3f      	ldr	r3, [pc, #252]	@ (800a808 <HAL_RCC_ClockConfig+0x358>)
 800a70a:	699b      	ldr	r3, [r3, #24]
 800a70c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a710:	429a      	cmp	r2, r3
 800a712:	d208      	bcs.n	800a726 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a714:	4b3c      	ldr	r3, [pc, #240]	@ (800a808 <HAL_RCC_ClockConfig+0x358>)
 800a716:	699b      	ldr	r3, [r3, #24]
 800a718:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	691b      	ldr	r3, [r3, #16]
 800a720:	4939      	ldr	r1, [pc, #228]	@ (800a808 <HAL_RCC_ClockConfig+0x358>)
 800a722:	4313      	orrs	r3, r2
 800a724:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f003 0308 	and.w	r3, r3, #8
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d010      	beq.n	800a754 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	695a      	ldr	r2, [r3, #20]
 800a736:	4b34      	ldr	r3, [pc, #208]	@ (800a808 <HAL_RCC_ClockConfig+0x358>)
 800a738:	69db      	ldr	r3, [r3, #28]
 800a73a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a73e:	429a      	cmp	r2, r3
 800a740:	d208      	bcs.n	800a754 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a742:	4b31      	ldr	r3, [pc, #196]	@ (800a808 <HAL_RCC_ClockConfig+0x358>)
 800a744:	69db      	ldr	r3, [r3, #28]
 800a746:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	695b      	ldr	r3, [r3, #20]
 800a74e:	492e      	ldr	r1, [pc, #184]	@ (800a808 <HAL_RCC_ClockConfig+0x358>)
 800a750:	4313      	orrs	r3, r2
 800a752:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f003 0310 	and.w	r3, r3, #16
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d010      	beq.n	800a782 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	699a      	ldr	r2, [r3, #24]
 800a764:	4b28      	ldr	r3, [pc, #160]	@ (800a808 <HAL_RCC_ClockConfig+0x358>)
 800a766:	69db      	ldr	r3, [r3, #28]
 800a768:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a76c:	429a      	cmp	r2, r3
 800a76e:	d208      	bcs.n	800a782 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a770:	4b25      	ldr	r3, [pc, #148]	@ (800a808 <HAL_RCC_ClockConfig+0x358>)
 800a772:	69db      	ldr	r3, [r3, #28]
 800a774:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	699b      	ldr	r3, [r3, #24]
 800a77c:	4922      	ldr	r1, [pc, #136]	@ (800a808 <HAL_RCC_ClockConfig+0x358>)
 800a77e:	4313      	orrs	r3, r2
 800a780:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f003 0320 	and.w	r3, r3, #32
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d010      	beq.n	800a7b0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	69da      	ldr	r2, [r3, #28]
 800a792:	4b1d      	ldr	r3, [pc, #116]	@ (800a808 <HAL_RCC_ClockConfig+0x358>)
 800a794:	6a1b      	ldr	r3, [r3, #32]
 800a796:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a79a:	429a      	cmp	r2, r3
 800a79c:	d208      	bcs.n	800a7b0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a79e:	4b1a      	ldr	r3, [pc, #104]	@ (800a808 <HAL_RCC_ClockConfig+0x358>)
 800a7a0:	6a1b      	ldr	r3, [r3, #32]
 800a7a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	69db      	ldr	r3, [r3, #28]
 800a7aa:	4917      	ldr	r1, [pc, #92]	@ (800a808 <HAL_RCC_ClockConfig+0x358>)
 800a7ac:	4313      	orrs	r3, r2
 800a7ae:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800a7b0:	f000 f834 	bl	800a81c <HAL_RCC_GetSysClockFreq>
 800a7b4:	4602      	mov	r2, r0
 800a7b6:	4b14      	ldr	r3, [pc, #80]	@ (800a808 <HAL_RCC_ClockConfig+0x358>)
 800a7b8:	699b      	ldr	r3, [r3, #24]
 800a7ba:	0a1b      	lsrs	r3, r3, #8
 800a7bc:	f003 030f 	and.w	r3, r3, #15
 800a7c0:	4912      	ldr	r1, [pc, #72]	@ (800a80c <HAL_RCC_ClockConfig+0x35c>)
 800a7c2:	5ccb      	ldrb	r3, [r1, r3]
 800a7c4:	f003 031f 	and.w	r3, r3, #31
 800a7c8:	fa22 f303 	lsr.w	r3, r2, r3
 800a7cc:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800a7ce:	4b0e      	ldr	r3, [pc, #56]	@ (800a808 <HAL_RCC_ClockConfig+0x358>)
 800a7d0:	699b      	ldr	r3, [r3, #24]
 800a7d2:	f003 030f 	and.w	r3, r3, #15
 800a7d6:	4a0d      	ldr	r2, [pc, #52]	@ (800a80c <HAL_RCC_ClockConfig+0x35c>)
 800a7d8:	5cd3      	ldrb	r3, [r2, r3]
 800a7da:	f003 031f 	and.w	r3, r3, #31
 800a7de:	693a      	ldr	r2, [r7, #16]
 800a7e0:	fa22 f303 	lsr.w	r3, r2, r3
 800a7e4:	4a0a      	ldr	r2, [pc, #40]	@ (800a810 <HAL_RCC_ClockConfig+0x360>)
 800a7e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a7e8:	4a0a      	ldr	r2, [pc, #40]	@ (800a814 <HAL_RCC_ClockConfig+0x364>)
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a7ee:	4b0a      	ldr	r3, [pc, #40]	@ (800a818 <HAL_RCC_ClockConfig+0x368>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f7f8 f958 	bl	8002aa8 <HAL_InitTick>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a7fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3718      	adds	r7, #24
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
 800a806:	bf00      	nop
 800a808:	58024400 	.word	0x58024400
 800a80c:	08019b50 	.word	0x08019b50
 800a810:	24000004 	.word	0x24000004
 800a814:	24000000 	.word	0x24000000
 800a818:	24000084 	.word	0x24000084

0800a81c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a81c:	b480      	push	{r7}
 800a81e:	b089      	sub	sp, #36	@ 0x24
 800a820:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a822:	4bb3      	ldr	r3, [pc, #716]	@ (800aaf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a824:	691b      	ldr	r3, [r3, #16]
 800a826:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a82a:	2b18      	cmp	r3, #24
 800a82c:	f200 8155 	bhi.w	800aada <HAL_RCC_GetSysClockFreq+0x2be>
 800a830:	a201      	add	r2, pc, #4	@ (adr r2, 800a838 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a836:	bf00      	nop
 800a838:	0800a89d 	.word	0x0800a89d
 800a83c:	0800aadb 	.word	0x0800aadb
 800a840:	0800aadb 	.word	0x0800aadb
 800a844:	0800aadb 	.word	0x0800aadb
 800a848:	0800aadb 	.word	0x0800aadb
 800a84c:	0800aadb 	.word	0x0800aadb
 800a850:	0800aadb 	.word	0x0800aadb
 800a854:	0800aadb 	.word	0x0800aadb
 800a858:	0800a8c3 	.word	0x0800a8c3
 800a85c:	0800aadb 	.word	0x0800aadb
 800a860:	0800aadb 	.word	0x0800aadb
 800a864:	0800aadb 	.word	0x0800aadb
 800a868:	0800aadb 	.word	0x0800aadb
 800a86c:	0800aadb 	.word	0x0800aadb
 800a870:	0800aadb 	.word	0x0800aadb
 800a874:	0800aadb 	.word	0x0800aadb
 800a878:	0800a8c9 	.word	0x0800a8c9
 800a87c:	0800aadb 	.word	0x0800aadb
 800a880:	0800aadb 	.word	0x0800aadb
 800a884:	0800aadb 	.word	0x0800aadb
 800a888:	0800aadb 	.word	0x0800aadb
 800a88c:	0800aadb 	.word	0x0800aadb
 800a890:	0800aadb 	.word	0x0800aadb
 800a894:	0800aadb 	.word	0x0800aadb
 800a898:	0800a8cf 	.word	0x0800a8cf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a89c:	4b94      	ldr	r3, [pc, #592]	@ (800aaf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f003 0320 	and.w	r3, r3, #32
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d009      	beq.n	800a8bc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a8a8:	4b91      	ldr	r3, [pc, #580]	@ (800aaf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	08db      	lsrs	r3, r3, #3
 800a8ae:	f003 0303 	and.w	r3, r3, #3
 800a8b2:	4a90      	ldr	r2, [pc, #576]	@ (800aaf4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a8b4:	fa22 f303 	lsr.w	r3, r2, r3
 800a8b8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a8ba:	e111      	b.n	800aae0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a8bc:	4b8d      	ldr	r3, [pc, #564]	@ (800aaf4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a8be:	61bb      	str	r3, [r7, #24]
      break;
 800a8c0:	e10e      	b.n	800aae0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a8c2:	4b8d      	ldr	r3, [pc, #564]	@ (800aaf8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a8c4:	61bb      	str	r3, [r7, #24]
      break;
 800a8c6:	e10b      	b.n	800aae0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a8c8:	4b8c      	ldr	r3, [pc, #560]	@ (800aafc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a8ca:	61bb      	str	r3, [r7, #24]
      break;
 800a8cc:	e108      	b.n	800aae0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a8ce:	4b88      	ldr	r3, [pc, #544]	@ (800aaf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8d2:	f003 0303 	and.w	r3, r3, #3
 800a8d6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a8d8:	4b85      	ldr	r3, [pc, #532]	@ (800aaf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8dc:	091b      	lsrs	r3, r3, #4
 800a8de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a8e2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a8e4:	4b82      	ldr	r3, [pc, #520]	@ (800aaf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8e8:	f003 0301 	and.w	r3, r3, #1
 800a8ec:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a8ee:	4b80      	ldr	r3, [pc, #512]	@ (800aaf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8f2:	08db      	lsrs	r3, r3, #3
 800a8f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a8f8:	68fa      	ldr	r2, [r7, #12]
 800a8fa:	fb02 f303 	mul.w	r3, r2, r3
 800a8fe:	ee07 3a90 	vmov	s15, r3
 800a902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a906:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	f000 80e1 	beq.w	800aad4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	2b02      	cmp	r3, #2
 800a916:	f000 8083 	beq.w	800aa20 <HAL_RCC_GetSysClockFreq+0x204>
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	2b02      	cmp	r3, #2
 800a91e:	f200 80a1 	bhi.w	800aa64 <HAL_RCC_GetSysClockFreq+0x248>
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d003      	beq.n	800a930 <HAL_RCC_GetSysClockFreq+0x114>
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	2b01      	cmp	r3, #1
 800a92c:	d056      	beq.n	800a9dc <HAL_RCC_GetSysClockFreq+0x1c0>
 800a92e:	e099      	b.n	800aa64 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a930:	4b6f      	ldr	r3, [pc, #444]	@ (800aaf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f003 0320 	and.w	r3, r3, #32
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d02d      	beq.n	800a998 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a93c:	4b6c      	ldr	r3, [pc, #432]	@ (800aaf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	08db      	lsrs	r3, r3, #3
 800a942:	f003 0303 	and.w	r3, r3, #3
 800a946:	4a6b      	ldr	r2, [pc, #428]	@ (800aaf4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a948:	fa22 f303 	lsr.w	r3, r2, r3
 800a94c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	ee07 3a90 	vmov	s15, r3
 800a954:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	ee07 3a90 	vmov	s15, r3
 800a95e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a966:	4b62      	ldr	r3, [pc, #392]	@ (800aaf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a96a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a96e:	ee07 3a90 	vmov	s15, r3
 800a972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a976:	ed97 6a02 	vldr	s12, [r7, #8]
 800a97a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800ab00 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a97e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a986:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a98a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a98e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a992:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a996:	e087      	b.n	800aaa8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	ee07 3a90 	vmov	s15, r3
 800a99e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9a2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800ab04 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a9a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9aa:	4b51      	ldr	r3, [pc, #324]	@ (800aaf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9b2:	ee07 3a90 	vmov	s15, r3
 800a9b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9ba:	ed97 6a02 	vldr	s12, [r7, #8]
 800a9be:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800ab00 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a9c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a9ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a9da:	e065      	b.n	800aaa8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	ee07 3a90 	vmov	s15, r3
 800a9e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9e6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800ab08 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a9ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9ee:	4b40      	ldr	r3, [pc, #256]	@ (800aaf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9f6:	ee07 3a90 	vmov	s15, r3
 800a9fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9fe:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa02:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800ab00 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aa1e:	e043      	b.n	800aaa8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	ee07 3a90 	vmov	s15, r3
 800aa26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa2a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800ab0c <HAL_RCC_GetSysClockFreq+0x2f0>
 800aa2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa32:	4b2f      	ldr	r3, [pc, #188]	@ (800aaf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa3a:	ee07 3a90 	vmov	s15, r3
 800aa3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa42:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa46:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800ab00 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aa62:	e021      	b.n	800aaa8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	ee07 3a90 	vmov	s15, r3
 800aa6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa6e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800ab08 <HAL_RCC_GetSysClockFreq+0x2ec>
 800aa72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa76:	4b1e      	ldr	r3, [pc, #120]	@ (800aaf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa7e:	ee07 3a90 	vmov	s15, r3
 800aa82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa86:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa8a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800ab00 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaa2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aaa6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800aaa8:	4b11      	ldr	r3, [pc, #68]	@ (800aaf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aaaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aaac:	0a5b      	lsrs	r3, r3, #9
 800aaae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aab2:	3301      	adds	r3, #1
 800aab4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	ee07 3a90 	vmov	s15, r3
 800aabc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800aac0:	edd7 6a07 	vldr	s13, [r7, #28]
 800aac4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aac8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aacc:	ee17 3a90 	vmov	r3, s15
 800aad0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800aad2:	e005      	b.n	800aae0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800aad4:	2300      	movs	r3, #0
 800aad6:	61bb      	str	r3, [r7, #24]
      break;
 800aad8:	e002      	b.n	800aae0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800aada:	4b07      	ldr	r3, [pc, #28]	@ (800aaf8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800aadc:	61bb      	str	r3, [r7, #24]
      break;
 800aade:	bf00      	nop
  }

  return sysclockfreq;
 800aae0:	69bb      	ldr	r3, [r7, #24]
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3724      	adds	r7, #36	@ 0x24
 800aae6:	46bd      	mov	sp, r7
 800aae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaec:	4770      	bx	lr
 800aaee:	bf00      	nop
 800aaf0:	58024400 	.word	0x58024400
 800aaf4:	03d09000 	.word	0x03d09000
 800aaf8:	003d0900 	.word	0x003d0900
 800aafc:	016e3600 	.word	0x016e3600
 800ab00:	46000000 	.word	0x46000000
 800ab04:	4c742400 	.word	0x4c742400
 800ab08:	4a742400 	.word	0x4a742400
 800ab0c:	4bb71b00 	.word	0x4bb71b00

0800ab10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b082      	sub	sp, #8
 800ab14:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800ab16:	f7ff fe81 	bl	800a81c <HAL_RCC_GetSysClockFreq>
 800ab1a:	4602      	mov	r2, r0
 800ab1c:	4b10      	ldr	r3, [pc, #64]	@ (800ab60 <HAL_RCC_GetHCLKFreq+0x50>)
 800ab1e:	699b      	ldr	r3, [r3, #24]
 800ab20:	0a1b      	lsrs	r3, r3, #8
 800ab22:	f003 030f 	and.w	r3, r3, #15
 800ab26:	490f      	ldr	r1, [pc, #60]	@ (800ab64 <HAL_RCC_GetHCLKFreq+0x54>)
 800ab28:	5ccb      	ldrb	r3, [r1, r3]
 800ab2a:	f003 031f 	and.w	r3, r3, #31
 800ab2e:	fa22 f303 	lsr.w	r3, r2, r3
 800ab32:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800ab34:	4b0a      	ldr	r3, [pc, #40]	@ (800ab60 <HAL_RCC_GetHCLKFreq+0x50>)
 800ab36:	699b      	ldr	r3, [r3, #24]
 800ab38:	f003 030f 	and.w	r3, r3, #15
 800ab3c:	4a09      	ldr	r2, [pc, #36]	@ (800ab64 <HAL_RCC_GetHCLKFreq+0x54>)
 800ab3e:	5cd3      	ldrb	r3, [r2, r3]
 800ab40:	f003 031f 	and.w	r3, r3, #31
 800ab44:	687a      	ldr	r2, [r7, #4]
 800ab46:	fa22 f303 	lsr.w	r3, r2, r3
 800ab4a:	4a07      	ldr	r2, [pc, #28]	@ (800ab68 <HAL_RCC_GetHCLKFreq+0x58>)
 800ab4c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ab4e:	4a07      	ldr	r2, [pc, #28]	@ (800ab6c <HAL_RCC_GetHCLKFreq+0x5c>)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ab54:	4b04      	ldr	r3, [pc, #16]	@ (800ab68 <HAL_RCC_GetHCLKFreq+0x58>)
 800ab56:	681b      	ldr	r3, [r3, #0]
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3708      	adds	r7, #8
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}
 800ab60:	58024400 	.word	0x58024400
 800ab64:	08019b50 	.word	0x08019b50
 800ab68:	24000004 	.word	0x24000004
 800ab6c:	24000000 	.word	0x24000000

0800ab70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800ab74:	f7ff ffcc 	bl	800ab10 <HAL_RCC_GetHCLKFreq>
 800ab78:	4602      	mov	r2, r0
 800ab7a:	4b06      	ldr	r3, [pc, #24]	@ (800ab94 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ab7c:	69db      	ldr	r3, [r3, #28]
 800ab7e:	091b      	lsrs	r3, r3, #4
 800ab80:	f003 0307 	and.w	r3, r3, #7
 800ab84:	4904      	ldr	r1, [pc, #16]	@ (800ab98 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ab86:	5ccb      	ldrb	r3, [r1, r3]
 800ab88:	f003 031f 	and.w	r3, r3, #31
 800ab8c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	bd80      	pop	{r7, pc}
 800ab94:	58024400 	.word	0x58024400
 800ab98:	08019b50 	.word	0x08019b50

0800ab9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800aba0:	f7ff ffb6 	bl	800ab10 <HAL_RCC_GetHCLKFreq>
 800aba4:	4602      	mov	r2, r0
 800aba6:	4b06      	ldr	r3, [pc, #24]	@ (800abc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800aba8:	69db      	ldr	r3, [r3, #28]
 800abaa:	0a1b      	lsrs	r3, r3, #8
 800abac:	f003 0307 	and.w	r3, r3, #7
 800abb0:	4904      	ldr	r1, [pc, #16]	@ (800abc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800abb2:	5ccb      	ldrb	r3, [r1, r3]
 800abb4:	f003 031f 	and.w	r3, r3, #31
 800abb8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	bd80      	pop	{r7, pc}
 800abc0:	58024400 	.word	0x58024400
 800abc4:	08019b50 	.word	0x08019b50

0800abc8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800abc8:	b480      	push	{r7}
 800abca:	b083      	sub	sp, #12
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	223f      	movs	r2, #63	@ 0x3f
 800abd6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800abd8:	4b1a      	ldr	r3, [pc, #104]	@ (800ac44 <HAL_RCC_GetClockConfig+0x7c>)
 800abda:	691b      	ldr	r3, [r3, #16]
 800abdc:	f003 0207 	and.w	r2, r3, #7
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 800abe4:	4b17      	ldr	r3, [pc, #92]	@ (800ac44 <HAL_RCC_GetClockConfig+0x7c>)
 800abe6:	699b      	ldr	r3, [r3, #24]
 800abe8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 800abf0:	4b14      	ldr	r3, [pc, #80]	@ (800ac44 <HAL_RCC_GetClockConfig+0x7c>)
 800abf2:	699b      	ldr	r3, [r3, #24]
 800abf4:	f003 020f 	and.w	r2, r3, #15
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 800abfc:	4b11      	ldr	r3, [pc, #68]	@ (800ac44 <HAL_RCC_GetClockConfig+0x7c>)
 800abfe:	699b      	ldr	r3, [r3, #24]
 800ac00:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 800ac08:	4b0e      	ldr	r3, [pc, #56]	@ (800ac44 <HAL_RCC_GetClockConfig+0x7c>)
 800ac0a:	69db      	ldr	r3, [r3, #28]
 800ac0c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 800ac14:	4b0b      	ldr	r3, [pc, #44]	@ (800ac44 <HAL_RCC_GetClockConfig+0x7c>)
 800ac16:	69db      	ldr	r3, [r3, #28]
 800ac18:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 800ac20:	4b08      	ldr	r3, [pc, #32]	@ (800ac44 <HAL_RCC_GetClockConfig+0x7c>)
 800ac22:	6a1b      	ldr	r3, [r3, #32]
 800ac24:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ac2c:	4b06      	ldr	r3, [pc, #24]	@ (800ac48 <HAL_RCC_GetClockConfig+0x80>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f003 020f 	and.w	r2, r3, #15
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	601a      	str	r2, [r3, #0]
}
 800ac38:	bf00      	nop
 800ac3a:	370c      	adds	r7, #12
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr
 800ac44:	58024400 	.word	0x58024400
 800ac48:	52002000 	.word	0x52002000

0800ac4c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ac4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ac50:	b0c8      	sub	sp, #288	@ 0x120
 800ac52:	af00      	add	r7, sp, #0
 800ac54:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ac58:	2300      	movs	r3, #0
 800ac5a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ac5e:	2300      	movs	r3, #0
 800ac60:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ac64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800ac70:	2500      	movs	r5, #0
 800ac72:	ea54 0305 	orrs.w	r3, r4, r5
 800ac76:	d049      	beq.n	800ad0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800ac78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac7e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ac82:	d02f      	beq.n	800ace4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800ac84:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ac88:	d828      	bhi.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ac8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ac8e:	d01a      	beq.n	800acc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800ac90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ac94:	d822      	bhi.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d003      	beq.n	800aca2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800ac9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac9e:	d007      	beq.n	800acb0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800aca0:	e01c      	b.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aca2:	4ba7      	ldr	r3, [pc, #668]	@ (800af40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aca6:	4aa6      	ldr	r2, [pc, #664]	@ (800af40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aca8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800acac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800acae:	e01a      	b.n	800ace6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800acb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acb4:	3308      	adds	r3, #8
 800acb6:	2102      	movs	r1, #2
 800acb8:	4618      	mov	r0, r3
 800acba:	f001 fc43 	bl	800c544 <RCCEx_PLL2_Config>
 800acbe:	4603      	mov	r3, r0
 800acc0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800acc4:	e00f      	b.n	800ace6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800acc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acca:	3328      	adds	r3, #40	@ 0x28
 800accc:	2102      	movs	r1, #2
 800acce:	4618      	mov	r0, r3
 800acd0:	f001 fcea 	bl	800c6a8 <RCCEx_PLL3_Config>
 800acd4:	4603      	mov	r3, r0
 800acd6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800acda:	e004      	b.n	800ace6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800acdc:	2301      	movs	r3, #1
 800acde:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ace2:	e000      	b.n	800ace6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800ace4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ace6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800acea:	2b00      	cmp	r3, #0
 800acec:	d10a      	bne.n	800ad04 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800acee:	4b94      	ldr	r3, [pc, #592]	@ (800af40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800acf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acf2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800acf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800acfc:	4a90      	ldr	r2, [pc, #576]	@ (800af40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800acfe:	430b      	orrs	r3, r1
 800ad00:	6513      	str	r3, [r2, #80]	@ 0x50
 800ad02:	e003      	b.n	800ad0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad04:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ad08:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ad0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad14:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800ad18:	f04f 0900 	mov.w	r9, #0
 800ad1c:	ea58 0309 	orrs.w	r3, r8, r9
 800ad20:	d047      	beq.n	800adb2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ad22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad28:	2b04      	cmp	r3, #4
 800ad2a:	d82a      	bhi.n	800ad82 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ad2c:	a201      	add	r2, pc, #4	@ (adr r2, 800ad34 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ad2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad32:	bf00      	nop
 800ad34:	0800ad49 	.word	0x0800ad49
 800ad38:	0800ad57 	.word	0x0800ad57
 800ad3c:	0800ad6d 	.word	0x0800ad6d
 800ad40:	0800ad8b 	.word	0x0800ad8b
 800ad44:	0800ad8b 	.word	0x0800ad8b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad48:	4b7d      	ldr	r3, [pc, #500]	@ (800af40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ad4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad4c:	4a7c      	ldr	r2, [pc, #496]	@ (800af40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ad4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ad52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ad54:	e01a      	b.n	800ad8c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ad56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad5a:	3308      	adds	r3, #8
 800ad5c:	2100      	movs	r1, #0
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f001 fbf0 	bl	800c544 <RCCEx_PLL2_Config>
 800ad64:	4603      	mov	r3, r0
 800ad66:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ad6a:	e00f      	b.n	800ad8c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ad6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad70:	3328      	adds	r3, #40	@ 0x28
 800ad72:	2100      	movs	r1, #0
 800ad74:	4618      	mov	r0, r3
 800ad76:	f001 fc97 	bl	800c6a8 <RCCEx_PLL3_Config>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ad80:	e004      	b.n	800ad8c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad82:	2301      	movs	r3, #1
 800ad84:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ad88:	e000      	b.n	800ad8c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800ad8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad8c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d10a      	bne.n	800adaa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ad94:	4b6a      	ldr	r3, [pc, #424]	@ (800af40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ad96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad98:	f023 0107 	bic.w	r1, r3, #7
 800ad9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ada0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ada2:	4a67      	ldr	r2, [pc, #412]	@ (800af40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ada4:	430b      	orrs	r3, r1
 800ada6:	6513      	str	r3, [r2, #80]	@ 0x50
 800ada8:	e003      	b.n	800adb2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adaa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800adae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800adb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800adb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adba:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800adbe:	f04f 0b00 	mov.w	fp, #0
 800adc2:	ea5a 030b 	orrs.w	r3, sl, fp
 800adc6:	d054      	beq.n	800ae72 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800adc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800adcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800adce:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800add2:	d036      	beq.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800add4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800add8:	d82f      	bhi.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800adda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800adde:	d032      	beq.n	800ae46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ade0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ade4:	d829      	bhi.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800ade6:	2bc0      	cmp	r3, #192	@ 0xc0
 800ade8:	d02f      	beq.n	800ae4a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800adea:	2bc0      	cmp	r3, #192	@ 0xc0
 800adec:	d825      	bhi.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800adee:	2b80      	cmp	r3, #128	@ 0x80
 800adf0:	d018      	beq.n	800ae24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800adf2:	2b80      	cmp	r3, #128	@ 0x80
 800adf4:	d821      	bhi.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d002      	beq.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800adfa:	2b40      	cmp	r3, #64	@ 0x40
 800adfc:	d007      	beq.n	800ae0e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800adfe:	e01c      	b.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae00:	4b4f      	ldr	r3, [pc, #316]	@ (800af40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ae02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae04:	4a4e      	ldr	r2, [pc, #312]	@ (800af40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ae06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ae0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800ae0c:	e01e      	b.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ae0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae12:	3308      	adds	r3, #8
 800ae14:	2100      	movs	r1, #0
 800ae16:	4618      	mov	r0, r3
 800ae18:	f001 fb94 	bl	800c544 <RCCEx_PLL2_Config>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800ae22:	e013      	b.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ae24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae28:	3328      	adds	r3, #40	@ 0x28
 800ae2a:	2100      	movs	r1, #0
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f001 fc3b 	bl	800c6a8 <RCCEx_PLL3_Config>
 800ae32:	4603      	mov	r3, r0
 800ae34:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800ae38:	e008      	b.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ae40:	e004      	b.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800ae42:	bf00      	nop
 800ae44:	e002      	b.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800ae46:	bf00      	nop
 800ae48:	e000      	b.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800ae4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae4c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d10a      	bne.n	800ae6a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800ae54:	4b3a      	ldr	r3, [pc, #232]	@ (800af40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ae56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae58:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800ae5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ae62:	4a37      	ldr	r2, [pc, #220]	@ (800af40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ae64:	430b      	orrs	r3, r1
 800ae66:	6513      	str	r3, [r2, #80]	@ 0x50
 800ae68:	e003      	b.n	800ae72 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae6a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ae6e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800ae72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae7a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800ae7e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800ae82:	2300      	movs	r3, #0
 800ae84:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800ae88:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800ae8c:	460b      	mov	r3, r1
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	d05c      	beq.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800ae92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ae98:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800ae9c:	d03b      	beq.n	800af16 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800ae9e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800aea2:	d834      	bhi.n	800af0e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800aea4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aea8:	d037      	beq.n	800af1a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800aeaa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aeae:	d82e      	bhi.n	800af0e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800aeb0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800aeb4:	d033      	beq.n	800af1e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aeb6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800aeba:	d828      	bhi.n	800af0e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800aebc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aec0:	d01a      	beq.n	800aef8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800aec2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aec6:	d822      	bhi.n	800af0e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d003      	beq.n	800aed4 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800aecc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aed0:	d007      	beq.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800aed2:	e01c      	b.n	800af0e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aed4:	4b1a      	ldr	r3, [pc, #104]	@ (800af40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aed8:	4a19      	ldr	r2, [pc, #100]	@ (800af40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aeda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aede:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800aee0:	e01e      	b.n	800af20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aee2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aee6:	3308      	adds	r3, #8
 800aee8:	2100      	movs	r1, #0
 800aeea:	4618      	mov	r0, r3
 800aeec:	f001 fb2a 	bl	800c544 <RCCEx_PLL2_Config>
 800aef0:	4603      	mov	r3, r0
 800aef2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800aef6:	e013      	b.n	800af20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aef8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aefc:	3328      	adds	r3, #40	@ 0x28
 800aefe:	2100      	movs	r1, #0
 800af00:	4618      	mov	r0, r3
 800af02:	f001 fbd1 	bl	800c6a8 <RCCEx_PLL3_Config>
 800af06:	4603      	mov	r3, r0
 800af08:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800af0c:	e008      	b.n	800af20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af0e:	2301      	movs	r3, #1
 800af10:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800af14:	e004      	b.n	800af20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800af16:	bf00      	nop
 800af18:	e002      	b.n	800af20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800af1a:	bf00      	nop
 800af1c:	e000      	b.n	800af20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800af1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af20:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800af24:	2b00      	cmp	r3, #0
 800af26:	d10d      	bne.n	800af44 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800af28:	4b05      	ldr	r3, [pc, #20]	@ (800af40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800af2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af2c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800af30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af36:	4a02      	ldr	r2, [pc, #8]	@ (800af40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800af38:	430b      	orrs	r3, r1
 800af3a:	6513      	str	r3, [r2, #80]	@ 0x50
 800af3c:	e006      	b.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800af3e:	bf00      	nop
 800af40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af44:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800af48:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800af4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af54:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800af58:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800af5c:	2300      	movs	r3, #0
 800af5e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800af62:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800af66:	460b      	mov	r3, r1
 800af68:	4313      	orrs	r3, r2
 800af6a:	d03a      	beq.n	800afe2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800af6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800af72:	2b30      	cmp	r3, #48	@ 0x30
 800af74:	d01f      	beq.n	800afb6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800af76:	2b30      	cmp	r3, #48	@ 0x30
 800af78:	d819      	bhi.n	800afae <HAL_RCCEx_PeriphCLKConfig+0x362>
 800af7a:	2b20      	cmp	r3, #32
 800af7c:	d00c      	beq.n	800af98 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800af7e:	2b20      	cmp	r3, #32
 800af80:	d815      	bhi.n	800afae <HAL_RCCEx_PeriphCLKConfig+0x362>
 800af82:	2b00      	cmp	r3, #0
 800af84:	d019      	beq.n	800afba <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800af86:	2b10      	cmp	r3, #16
 800af88:	d111      	bne.n	800afae <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af8a:	4bae      	ldr	r3, [pc, #696]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800af8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af8e:	4aad      	ldr	r2, [pc, #692]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800af90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800af94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800af96:	e011      	b.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800af98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af9c:	3308      	adds	r3, #8
 800af9e:	2102      	movs	r1, #2
 800afa0:	4618      	mov	r0, r3
 800afa2:	f001 facf 	bl	800c544 <RCCEx_PLL2_Config>
 800afa6:	4603      	mov	r3, r0
 800afa8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800afac:	e006      	b.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800afae:	2301      	movs	r3, #1
 800afb0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800afb4:	e002      	b.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800afb6:	bf00      	nop
 800afb8:	e000      	b.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800afba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800afbc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d10a      	bne.n	800afda <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800afc4:	4b9f      	ldr	r3, [pc, #636]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800afc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800afc8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800afcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800afd2:	4a9c      	ldr	r2, [pc, #624]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800afd4:	430b      	orrs	r3, r1
 800afd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800afd8:	e003      	b.n	800afe2 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afda:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800afde:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800afe2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afea:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800afee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800aff2:	2300      	movs	r3, #0
 800aff4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800aff8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800affc:	460b      	mov	r3, r1
 800affe:	4313      	orrs	r3, r2
 800b000:	d051      	beq.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b002:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b006:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b008:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b00c:	d035      	beq.n	800b07a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800b00e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b012:	d82e      	bhi.n	800b072 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b014:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b018:	d031      	beq.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0x432>
 800b01a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b01e:	d828      	bhi.n	800b072 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b020:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b024:	d01a      	beq.n	800b05c <HAL_RCCEx_PeriphCLKConfig+0x410>
 800b026:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b02a:	d822      	bhi.n	800b072 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d003      	beq.n	800b038 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800b030:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b034:	d007      	beq.n	800b046 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800b036:	e01c      	b.n	800b072 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b038:	4b82      	ldr	r3, [pc, #520]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b03a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b03c:	4a81      	ldr	r2, [pc, #516]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b03e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b042:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b044:	e01c      	b.n	800b080 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b046:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b04a:	3308      	adds	r3, #8
 800b04c:	2100      	movs	r1, #0
 800b04e:	4618      	mov	r0, r3
 800b050:	f001 fa78 	bl	800c544 <RCCEx_PLL2_Config>
 800b054:	4603      	mov	r3, r0
 800b056:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b05a:	e011      	b.n	800b080 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b05c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b060:	3328      	adds	r3, #40	@ 0x28
 800b062:	2100      	movs	r1, #0
 800b064:	4618      	mov	r0, r3
 800b066:	f001 fb1f 	bl	800c6a8 <RCCEx_PLL3_Config>
 800b06a:	4603      	mov	r3, r0
 800b06c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b070:	e006      	b.n	800b080 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b072:	2301      	movs	r3, #1
 800b074:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b078:	e002      	b.n	800b080 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800b07a:	bf00      	nop
 800b07c:	e000      	b.n	800b080 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800b07e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b080:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b084:	2b00      	cmp	r3, #0
 800b086:	d10a      	bne.n	800b09e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b088:	4b6e      	ldr	r3, [pc, #440]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b08a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b08c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800b090:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b094:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b096:	4a6b      	ldr	r2, [pc, #428]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b098:	430b      	orrs	r3, r1
 800b09a:	6513      	str	r3, [r2, #80]	@ 0x50
 800b09c:	e003      	b.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b09e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b0a2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b0a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ae:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800b0b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b0bc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800b0c0:	460b      	mov	r3, r1
 800b0c2:	4313      	orrs	r3, r2
 800b0c4:	d053      	beq.n	800b16e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b0c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b0cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b0d0:	d033      	beq.n	800b13a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800b0d2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b0d6:	d82c      	bhi.n	800b132 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800b0d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b0dc:	d02f      	beq.n	800b13e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800b0de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b0e2:	d826      	bhi.n	800b132 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800b0e4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b0e8:	d02b      	beq.n	800b142 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b0ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b0ee:	d820      	bhi.n	800b132 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800b0f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b0f4:	d012      	beq.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b0f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b0fa:	d81a      	bhi.n	800b132 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d022      	beq.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800b100:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b104:	d115      	bne.n	800b132 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b106:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b10a:	3308      	adds	r3, #8
 800b10c:	2101      	movs	r1, #1
 800b10e:	4618      	mov	r0, r3
 800b110:	f001 fa18 	bl	800c544 <RCCEx_PLL2_Config>
 800b114:	4603      	mov	r3, r0
 800b116:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b11a:	e015      	b.n	800b148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b11c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b120:	3328      	adds	r3, #40	@ 0x28
 800b122:	2101      	movs	r1, #1
 800b124:	4618      	mov	r0, r3
 800b126:	f001 fabf 	bl	800c6a8 <RCCEx_PLL3_Config>
 800b12a:	4603      	mov	r3, r0
 800b12c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b130:	e00a      	b.n	800b148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b132:	2301      	movs	r3, #1
 800b134:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b138:	e006      	b.n	800b148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800b13a:	bf00      	nop
 800b13c:	e004      	b.n	800b148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800b13e:	bf00      	nop
 800b140:	e002      	b.n	800b148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800b142:	bf00      	nop
 800b144:	e000      	b.n	800b148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800b146:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b148:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d10a      	bne.n	800b166 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b150:	4b3c      	ldr	r3, [pc, #240]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b152:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b154:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800b158:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b15c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b15e:	4a39      	ldr	r2, [pc, #228]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b160:	430b      	orrs	r3, r1
 800b162:	6513      	str	r3, [r2, #80]	@ 0x50
 800b164:	e003      	b.n	800b16e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b166:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b16a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b16e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b176:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800b17a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b17e:	2300      	movs	r3, #0
 800b180:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b184:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800b188:	460b      	mov	r3, r1
 800b18a:	4313      	orrs	r3, r2
 800b18c:	d060      	beq.n	800b250 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b18e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b192:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b196:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800b19a:	d039      	beq.n	800b210 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800b19c:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800b1a0:	d832      	bhi.n	800b208 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b1a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b1a6:	d035      	beq.n	800b214 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800b1a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b1ac:	d82c      	bhi.n	800b208 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b1ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1b2:	d031      	beq.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800b1b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1b8:	d826      	bhi.n	800b208 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b1ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b1be:	d02d      	beq.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800b1c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b1c4:	d820      	bhi.n	800b208 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b1c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b1ca:	d012      	beq.n	800b1f2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b1cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b1d0:	d81a      	bhi.n	800b208 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d024      	beq.n	800b220 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b1d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b1da:	d115      	bne.n	800b208 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b1dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1e0:	3308      	adds	r3, #8
 800b1e2:	2101      	movs	r1, #1
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f001 f9ad 	bl	800c544 <RCCEx_PLL2_Config>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b1f0:	e017      	b.n	800b222 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b1f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1f6:	3328      	adds	r3, #40	@ 0x28
 800b1f8:	2101      	movs	r1, #1
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f001 fa54 	bl	800c6a8 <RCCEx_PLL3_Config>
 800b200:	4603      	mov	r3, r0
 800b202:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b206:	e00c      	b.n	800b222 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b208:	2301      	movs	r3, #1
 800b20a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b20e:	e008      	b.n	800b222 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b210:	bf00      	nop
 800b212:	e006      	b.n	800b222 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b214:	bf00      	nop
 800b216:	e004      	b.n	800b222 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b218:	bf00      	nop
 800b21a:	e002      	b.n	800b222 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b21c:	bf00      	nop
 800b21e:	e000      	b.n	800b222 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b220:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b222:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b226:	2b00      	cmp	r3, #0
 800b228:	d10e      	bne.n	800b248 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b22a:	4b06      	ldr	r3, [pc, #24]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b22c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b22e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800b232:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b236:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b23a:	4a02      	ldr	r2, [pc, #8]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b23c:	430b      	orrs	r3, r1
 800b23e:	6593      	str	r3, [r2, #88]	@ 0x58
 800b240:	e006      	b.n	800b250 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800b242:	bf00      	nop
 800b244:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b248:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b24c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b250:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b258:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800b25c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b260:	2300      	movs	r3, #0
 800b262:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b266:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b26a:	460b      	mov	r3, r1
 800b26c:	4313      	orrs	r3, r2
 800b26e:	d037      	beq.n	800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b270:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b274:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b276:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b27a:	d00e      	beq.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800b27c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b280:	d816      	bhi.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800b282:	2b00      	cmp	r3, #0
 800b284:	d018      	beq.n	800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800b286:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b28a:	d111      	bne.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b28c:	4bc4      	ldr	r3, [pc, #784]	@ (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b28e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b290:	4ac3      	ldr	r2, [pc, #780]	@ (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b292:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b296:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b298:	e00f      	b.n	800b2ba <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b29a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b29e:	3308      	adds	r3, #8
 800b2a0:	2101      	movs	r1, #1
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f001 f94e 	bl	800c544 <RCCEx_PLL2_Config>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b2ae:	e004      	b.n	800b2ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b2b6:	e000      	b.n	800b2ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800b2b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d10a      	bne.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b2c2:	4bb7      	ldr	r3, [pc, #732]	@ (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b2c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2c6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800b2ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b2d0:	4ab3      	ldr	r2, [pc, #716]	@ (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b2d2:	430b      	orrs	r3, r1
 800b2d4:	6513      	str	r3, [r2, #80]	@ 0x50
 800b2d6:	e003      	b.n	800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b2dc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b2e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800b2ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b2f6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800b2fa:	460b      	mov	r3, r1
 800b2fc:	4313      	orrs	r3, r2
 800b2fe:	d039      	beq.n	800b374 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b300:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b304:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b306:	2b03      	cmp	r3, #3
 800b308:	d81c      	bhi.n	800b344 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800b30a:	a201      	add	r2, pc, #4	@ (adr r2, 800b310 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800b30c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b310:	0800b34d 	.word	0x0800b34d
 800b314:	0800b321 	.word	0x0800b321
 800b318:	0800b32f 	.word	0x0800b32f
 800b31c:	0800b34d 	.word	0x0800b34d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b320:	4b9f      	ldr	r3, [pc, #636]	@ (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b324:	4a9e      	ldr	r2, [pc, #632]	@ (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b326:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b32a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b32c:	e00f      	b.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b32e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b332:	3308      	adds	r3, #8
 800b334:	2102      	movs	r1, #2
 800b336:	4618      	mov	r0, r3
 800b338:	f001 f904 	bl	800c544 <RCCEx_PLL2_Config>
 800b33c:	4603      	mov	r3, r0
 800b33e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b342:	e004      	b.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b344:	2301      	movs	r3, #1
 800b346:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b34a:	e000      	b.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800b34c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b34e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b352:	2b00      	cmp	r3, #0
 800b354:	d10a      	bne.n	800b36c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b356:	4b92      	ldr	r3, [pc, #584]	@ (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b35a:	f023 0103 	bic.w	r1, r3, #3
 800b35e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b362:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b364:	4a8e      	ldr	r2, [pc, #568]	@ (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b366:	430b      	orrs	r3, r1
 800b368:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b36a:	e003      	b.n	800b374 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b36c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b370:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b374:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b37c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800b380:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b384:	2300      	movs	r3, #0
 800b386:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b38a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800b38e:	460b      	mov	r3, r1
 800b390:	4313      	orrs	r3, r2
 800b392:	f000 8099 	beq.w	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b396:	4b83      	ldr	r3, [pc, #524]	@ (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	4a82      	ldr	r2, [pc, #520]	@ (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b39c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b3a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b3a2:	f7fa fd69 	bl	8005e78 <HAL_GetTick>
 800b3a6:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b3aa:	e00b      	b.n	800b3c4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b3ac:	f7fa fd64 	bl	8005e78 <HAL_GetTick>
 800b3b0:	4602      	mov	r2, r0
 800b3b2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800b3b6:	1ad3      	subs	r3, r2, r3
 800b3b8:	2b64      	cmp	r3, #100	@ 0x64
 800b3ba:	d903      	bls.n	800b3c4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800b3bc:	2303      	movs	r3, #3
 800b3be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b3c2:	e005      	b.n	800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b3c4:	4b77      	ldr	r3, [pc, #476]	@ (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d0ed      	beq.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800b3d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d173      	bne.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b3d8:	4b71      	ldr	r3, [pc, #452]	@ (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b3da:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800b3dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b3e4:	4053      	eors	r3, r2
 800b3e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d015      	beq.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b3ee:	4b6c      	ldr	r3, [pc, #432]	@ (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b3f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b3f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b3f6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b3fa:	4b69      	ldr	r3, [pc, #420]	@ (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b3fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b3fe:	4a68      	ldr	r2, [pc, #416]	@ (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b400:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b404:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b406:	4b66      	ldr	r3, [pc, #408]	@ (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b40a:	4a65      	ldr	r2, [pc, #404]	@ (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b40c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b410:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b412:	4a63      	ldr	r2, [pc, #396]	@ (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b418:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b41a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b41e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b422:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b426:	d118      	bne.n	800b45a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b428:	f7fa fd26 	bl	8005e78 <HAL_GetTick>
 800b42c:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b430:	e00d      	b.n	800b44e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b432:	f7fa fd21 	bl	8005e78 <HAL_GetTick>
 800b436:	4602      	mov	r2, r0
 800b438:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800b43c:	1ad2      	subs	r2, r2, r3
 800b43e:	f241 3388 	movw	r3, #5000	@ 0x1388
 800b442:	429a      	cmp	r2, r3
 800b444:	d903      	bls.n	800b44e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800b446:	2303      	movs	r3, #3
 800b448:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 800b44c:	e005      	b.n	800b45a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b44e:	4b54      	ldr	r3, [pc, #336]	@ (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b452:	f003 0302 	and.w	r3, r3, #2
 800b456:	2b00      	cmp	r3, #0
 800b458:	d0eb      	beq.n	800b432 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800b45a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d129      	bne.n	800b4b6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b462:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b466:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b46a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b46e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b472:	d10e      	bne.n	800b492 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800b474:	4b4a      	ldr	r3, [pc, #296]	@ (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b476:	691b      	ldr	r3, [r3, #16]
 800b478:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800b47c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b480:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b484:	091a      	lsrs	r2, r3, #4
 800b486:	4b48      	ldr	r3, [pc, #288]	@ (800b5a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800b488:	4013      	ands	r3, r2
 800b48a:	4a45      	ldr	r2, [pc, #276]	@ (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b48c:	430b      	orrs	r3, r1
 800b48e:	6113      	str	r3, [r2, #16]
 800b490:	e005      	b.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0x852>
 800b492:	4b43      	ldr	r3, [pc, #268]	@ (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b494:	691b      	ldr	r3, [r3, #16]
 800b496:	4a42      	ldr	r2, [pc, #264]	@ (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b498:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b49c:	6113      	str	r3, [r2, #16]
 800b49e:	4b40      	ldr	r3, [pc, #256]	@ (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b4a0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800b4a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b4aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b4ae:	4a3c      	ldr	r2, [pc, #240]	@ (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b4b0:	430b      	orrs	r3, r1
 800b4b2:	6713      	str	r3, [r2, #112]	@ 0x70
 800b4b4:	e008      	b.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b4b6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b4ba:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800b4be:	e003      	b.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b4c4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b4c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d0:	f002 0301 	and.w	r3, r2, #1
 800b4d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b4d8:	2300      	movs	r3, #0
 800b4da:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b4de:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b4e2:	460b      	mov	r3, r1
 800b4e4:	4313      	orrs	r3, r2
 800b4e6:	f000 8090 	beq.w	800b60a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b4ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b4f2:	2b28      	cmp	r3, #40	@ 0x28
 800b4f4:	d870      	bhi.n	800b5d8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800b4f6:	a201      	add	r2, pc, #4	@ (adr r2, 800b4fc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800b4f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4fc:	0800b5e1 	.word	0x0800b5e1
 800b500:	0800b5d9 	.word	0x0800b5d9
 800b504:	0800b5d9 	.word	0x0800b5d9
 800b508:	0800b5d9 	.word	0x0800b5d9
 800b50c:	0800b5d9 	.word	0x0800b5d9
 800b510:	0800b5d9 	.word	0x0800b5d9
 800b514:	0800b5d9 	.word	0x0800b5d9
 800b518:	0800b5d9 	.word	0x0800b5d9
 800b51c:	0800b5ad 	.word	0x0800b5ad
 800b520:	0800b5d9 	.word	0x0800b5d9
 800b524:	0800b5d9 	.word	0x0800b5d9
 800b528:	0800b5d9 	.word	0x0800b5d9
 800b52c:	0800b5d9 	.word	0x0800b5d9
 800b530:	0800b5d9 	.word	0x0800b5d9
 800b534:	0800b5d9 	.word	0x0800b5d9
 800b538:	0800b5d9 	.word	0x0800b5d9
 800b53c:	0800b5c3 	.word	0x0800b5c3
 800b540:	0800b5d9 	.word	0x0800b5d9
 800b544:	0800b5d9 	.word	0x0800b5d9
 800b548:	0800b5d9 	.word	0x0800b5d9
 800b54c:	0800b5d9 	.word	0x0800b5d9
 800b550:	0800b5d9 	.word	0x0800b5d9
 800b554:	0800b5d9 	.word	0x0800b5d9
 800b558:	0800b5d9 	.word	0x0800b5d9
 800b55c:	0800b5e1 	.word	0x0800b5e1
 800b560:	0800b5d9 	.word	0x0800b5d9
 800b564:	0800b5d9 	.word	0x0800b5d9
 800b568:	0800b5d9 	.word	0x0800b5d9
 800b56c:	0800b5d9 	.word	0x0800b5d9
 800b570:	0800b5d9 	.word	0x0800b5d9
 800b574:	0800b5d9 	.word	0x0800b5d9
 800b578:	0800b5d9 	.word	0x0800b5d9
 800b57c:	0800b5e1 	.word	0x0800b5e1
 800b580:	0800b5d9 	.word	0x0800b5d9
 800b584:	0800b5d9 	.word	0x0800b5d9
 800b588:	0800b5d9 	.word	0x0800b5d9
 800b58c:	0800b5d9 	.word	0x0800b5d9
 800b590:	0800b5d9 	.word	0x0800b5d9
 800b594:	0800b5d9 	.word	0x0800b5d9
 800b598:	0800b5d9 	.word	0x0800b5d9
 800b59c:	0800b5e1 	.word	0x0800b5e1
 800b5a0:	58024400 	.word	0x58024400
 800b5a4:	58024800 	.word	0x58024800
 800b5a8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b5ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5b0:	3308      	adds	r3, #8
 800b5b2:	2101      	movs	r1, #1
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f000 ffc5 	bl	800c544 <RCCEx_PLL2_Config>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b5c0:	e00f      	b.n	800b5e2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b5c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5c6:	3328      	adds	r3, #40	@ 0x28
 800b5c8:	2101      	movs	r1, #1
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f001 f86c 	bl	800c6a8 <RCCEx_PLL3_Config>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b5d6:	e004      	b.n	800b5e2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5d8:	2301      	movs	r3, #1
 800b5da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b5de:	e000      	b.n	800b5e2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800b5e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d10b      	bne.n	800b602 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b5ea:	4bc0      	ldr	r3, [pc, #768]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b5ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5ee:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800b5f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b5fa:	4abc      	ldr	r2, [pc, #752]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b5fc:	430b      	orrs	r3, r1
 800b5fe:	6553      	str	r3, [r2, #84]	@ 0x54
 800b600:	e003      	b.n	800b60a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b602:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b606:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b60a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b612:	f002 0302 	and.w	r3, r2, #2
 800b616:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b61a:	2300      	movs	r3, #0
 800b61c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b620:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800b624:	460b      	mov	r3, r1
 800b626:	4313      	orrs	r3, r2
 800b628:	d043      	beq.n	800b6b2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b62a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b62e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b632:	2b05      	cmp	r3, #5
 800b634:	d824      	bhi.n	800b680 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800b636:	a201      	add	r2, pc, #4	@ (adr r2, 800b63c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800b638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b63c:	0800b689 	.word	0x0800b689
 800b640:	0800b655 	.word	0x0800b655
 800b644:	0800b66b 	.word	0x0800b66b
 800b648:	0800b689 	.word	0x0800b689
 800b64c:	0800b689 	.word	0x0800b689
 800b650:	0800b689 	.word	0x0800b689
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b654:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b658:	3308      	adds	r3, #8
 800b65a:	2101      	movs	r1, #1
 800b65c:	4618      	mov	r0, r3
 800b65e:	f000 ff71 	bl	800c544 <RCCEx_PLL2_Config>
 800b662:	4603      	mov	r3, r0
 800b664:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b668:	e00f      	b.n	800b68a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b66a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b66e:	3328      	adds	r3, #40	@ 0x28
 800b670:	2101      	movs	r1, #1
 800b672:	4618      	mov	r0, r3
 800b674:	f001 f818 	bl	800c6a8 <RCCEx_PLL3_Config>
 800b678:	4603      	mov	r3, r0
 800b67a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b67e:	e004      	b.n	800b68a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b680:	2301      	movs	r3, #1
 800b682:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b686:	e000      	b.n	800b68a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800b688:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b68a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d10b      	bne.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b692:	4b96      	ldr	r3, [pc, #600]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b696:	f023 0107 	bic.w	r1, r3, #7
 800b69a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b69e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6a2:	4a92      	ldr	r2, [pc, #584]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b6a4:	430b      	orrs	r3, r1
 800b6a6:	6553      	str	r3, [r2, #84]	@ 0x54
 800b6a8:	e003      	b.n	800b6b2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6aa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b6ae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b6b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ba:	f002 0304 	and.w	r3, r2, #4
 800b6be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b6c8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800b6cc:	460b      	mov	r3, r1
 800b6ce:	4313      	orrs	r3, r2
 800b6d0:	d043      	beq.n	800b75a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b6d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b6da:	2b05      	cmp	r3, #5
 800b6dc:	d824      	bhi.n	800b728 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800b6de:	a201      	add	r2, pc, #4	@ (adr r2, 800b6e4 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800b6e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6e4:	0800b731 	.word	0x0800b731
 800b6e8:	0800b6fd 	.word	0x0800b6fd
 800b6ec:	0800b713 	.word	0x0800b713
 800b6f0:	0800b731 	.word	0x0800b731
 800b6f4:	0800b731 	.word	0x0800b731
 800b6f8:	0800b731 	.word	0x0800b731
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b6fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b700:	3308      	adds	r3, #8
 800b702:	2101      	movs	r1, #1
 800b704:	4618      	mov	r0, r3
 800b706:	f000 ff1d 	bl	800c544 <RCCEx_PLL2_Config>
 800b70a:	4603      	mov	r3, r0
 800b70c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b710:	e00f      	b.n	800b732 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b712:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b716:	3328      	adds	r3, #40	@ 0x28
 800b718:	2101      	movs	r1, #1
 800b71a:	4618      	mov	r0, r3
 800b71c:	f000 ffc4 	bl	800c6a8 <RCCEx_PLL3_Config>
 800b720:	4603      	mov	r3, r0
 800b722:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b726:	e004      	b.n	800b732 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b728:	2301      	movs	r3, #1
 800b72a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b72e:	e000      	b.n	800b732 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800b730:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b732:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b736:	2b00      	cmp	r3, #0
 800b738:	d10b      	bne.n	800b752 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b73a:	4b6c      	ldr	r3, [pc, #432]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b73c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b73e:	f023 0107 	bic.w	r1, r3, #7
 800b742:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b746:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b74a:	4a68      	ldr	r2, [pc, #416]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b74c:	430b      	orrs	r3, r1
 800b74e:	6593      	str	r3, [r2, #88]	@ 0x58
 800b750:	e003      	b.n	800b75a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b752:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b756:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b75a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b762:	f002 0320 	and.w	r3, r2, #32
 800b766:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b76a:	2300      	movs	r3, #0
 800b76c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b770:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b774:	460b      	mov	r3, r1
 800b776:	4313      	orrs	r3, r2
 800b778:	d055      	beq.n	800b826 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b77a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b77e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b782:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b786:	d033      	beq.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b788:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b78c:	d82c      	bhi.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800b78e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b792:	d02f      	beq.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b794:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b798:	d826      	bhi.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800b79a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b79e:	d02b      	beq.n	800b7f8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b7a0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b7a4:	d820      	bhi.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800b7a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b7aa:	d012      	beq.n	800b7d2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800b7ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b7b0:	d81a      	bhi.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d022      	beq.n	800b7fc <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800b7b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b7ba:	d115      	bne.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b7bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7c0:	3308      	adds	r3, #8
 800b7c2:	2100      	movs	r1, #0
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f000 febd 	bl	800c544 <RCCEx_PLL2_Config>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b7d0:	e015      	b.n	800b7fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b7d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7d6:	3328      	adds	r3, #40	@ 0x28
 800b7d8:	2102      	movs	r1, #2
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f000 ff64 	bl	800c6a8 <RCCEx_PLL3_Config>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b7e6:	e00a      	b.n	800b7fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b7ee:	e006      	b.n	800b7fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800b7f0:	bf00      	nop
 800b7f2:	e004      	b.n	800b7fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800b7f4:	bf00      	nop
 800b7f6:	e002      	b.n	800b7fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800b7f8:	bf00      	nop
 800b7fa:	e000      	b.n	800b7fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800b7fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b802:	2b00      	cmp	r3, #0
 800b804:	d10b      	bne.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b806:	4b39      	ldr	r3, [pc, #228]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b80a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800b80e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b812:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b816:	4a35      	ldr	r2, [pc, #212]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b818:	430b      	orrs	r3, r1
 800b81a:	6553      	str	r3, [r2, #84]	@ 0x54
 800b81c:	e003      	b.n	800b826 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b81e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b822:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b826:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b82e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800b832:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b836:	2300      	movs	r3, #0
 800b838:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b83c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800b840:	460b      	mov	r3, r1
 800b842:	4313      	orrs	r3, r2
 800b844:	d058      	beq.n	800b8f8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b846:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b84a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b84e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800b852:	d033      	beq.n	800b8bc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b854:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800b858:	d82c      	bhi.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800b85a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b85e:	d02f      	beq.n	800b8c0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b860:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b864:	d826      	bhi.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800b866:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b86a:	d02b      	beq.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b86c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b870:	d820      	bhi.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800b872:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b876:	d012      	beq.n	800b89e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800b878:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b87c:	d81a      	bhi.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d022      	beq.n	800b8c8 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800b882:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b886:	d115      	bne.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b888:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b88c:	3308      	adds	r3, #8
 800b88e:	2100      	movs	r1, #0
 800b890:	4618      	mov	r0, r3
 800b892:	f000 fe57 	bl	800c544 <RCCEx_PLL2_Config>
 800b896:	4603      	mov	r3, r0
 800b898:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b89c:	e015      	b.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b89e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8a2:	3328      	adds	r3, #40	@ 0x28
 800b8a4:	2102      	movs	r1, #2
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f000 fefe 	bl	800c6a8 <RCCEx_PLL3_Config>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b8b2:	e00a      	b.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b8ba:	e006      	b.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800b8bc:	bf00      	nop
 800b8be:	e004      	b.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800b8c0:	bf00      	nop
 800b8c2:	e002      	b.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800b8c4:	bf00      	nop
 800b8c6:	e000      	b.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800b8c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8ca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d10e      	bne.n	800b8f0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b8d2:	4b06      	ldr	r3, [pc, #24]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b8d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b8d6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800b8da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b8e2:	4a02      	ldr	r2, [pc, #8]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b8e4:	430b      	orrs	r3, r1
 800b8e6:	6593      	str	r3, [r2, #88]	@ 0x58
 800b8e8:	e006      	b.n	800b8f8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800b8ea:	bf00      	nop
 800b8ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b8f4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b8f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b900:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800b904:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b908:	2300      	movs	r3, #0
 800b90a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b90e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800b912:	460b      	mov	r3, r1
 800b914:	4313      	orrs	r3, r2
 800b916:	d055      	beq.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b918:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b91c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b920:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800b924:	d033      	beq.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b926:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800b92a:	d82c      	bhi.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800b92c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b930:	d02f      	beq.n	800b992 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b932:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b936:	d826      	bhi.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800b938:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800b93c:	d02b      	beq.n	800b996 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b93e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800b942:	d820      	bhi.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800b944:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b948:	d012      	beq.n	800b970 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800b94a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b94e:	d81a      	bhi.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800b950:	2b00      	cmp	r3, #0
 800b952:	d022      	beq.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800b954:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b958:	d115      	bne.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b95a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b95e:	3308      	adds	r3, #8
 800b960:	2100      	movs	r1, #0
 800b962:	4618      	mov	r0, r3
 800b964:	f000 fdee 	bl	800c544 <RCCEx_PLL2_Config>
 800b968:	4603      	mov	r3, r0
 800b96a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b96e:	e015      	b.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b970:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b974:	3328      	adds	r3, #40	@ 0x28
 800b976:	2102      	movs	r1, #2
 800b978:	4618      	mov	r0, r3
 800b97a:	f000 fe95 	bl	800c6a8 <RCCEx_PLL3_Config>
 800b97e:	4603      	mov	r3, r0
 800b980:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b984:	e00a      	b.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b986:	2301      	movs	r3, #1
 800b988:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b98c:	e006      	b.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800b98e:	bf00      	nop
 800b990:	e004      	b.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800b992:	bf00      	nop
 800b994:	e002      	b.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800b996:	bf00      	nop
 800b998:	e000      	b.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800b99a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b99c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d10b      	bne.n	800b9bc <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b9a4:	4ba1      	ldr	r3, [pc, #644]	@ (800bc2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b9a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b9a8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800b9ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b9b4:	4a9d      	ldr	r2, [pc, #628]	@ (800bc2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b9b6:	430b      	orrs	r3, r1
 800b9b8:	6593      	str	r3, [r2, #88]	@ 0x58
 800b9ba:	e003      	b.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b9c0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b9c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9cc:	f002 0308 	and.w	r3, r2, #8
 800b9d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b9da:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800b9de:	460b      	mov	r3, r1
 800b9e0:	4313      	orrs	r3, r2
 800b9e2:	d01e      	beq.n	800ba22 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b9e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b9ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b9f0:	d10c      	bne.n	800ba0c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b9f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9f6:	3328      	adds	r3, #40	@ 0x28
 800b9f8:	2102      	movs	r1, #2
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f000 fe54 	bl	800c6a8 <RCCEx_PLL3_Config>
 800ba00:	4603      	mov	r3, r0
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d002      	beq.n	800ba0c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800ba06:	2301      	movs	r3, #1
 800ba08:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800ba0c:	4b87      	ldr	r3, [pc, #540]	@ (800bc2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ba0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba10:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ba14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ba1c:	4a83      	ldr	r2, [pc, #524]	@ (800bc2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ba1e:	430b      	orrs	r3, r1
 800ba20:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ba22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba2a:	f002 0310 	and.w	r3, r2, #16
 800ba2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ba32:	2300      	movs	r3, #0
 800ba34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ba38:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800ba3c:	460b      	mov	r3, r1
 800ba3e:	4313      	orrs	r3, r2
 800ba40:	d01e      	beq.n	800ba80 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800ba42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ba4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba4e:	d10c      	bne.n	800ba6a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ba50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba54:	3328      	adds	r3, #40	@ 0x28
 800ba56:	2102      	movs	r1, #2
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f000 fe25 	bl	800c6a8 <RCCEx_PLL3_Config>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d002      	beq.n	800ba6a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800ba64:	2301      	movs	r3, #1
 800ba66:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ba6a:	4b70      	ldr	r3, [pc, #448]	@ (800bc2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ba6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba6e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ba72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba76:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ba7a:	4a6c      	ldr	r2, [pc, #432]	@ (800bc2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ba7c:	430b      	orrs	r3, r1
 800ba7e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ba80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba88:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800ba8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ba90:	2300      	movs	r3, #0
 800ba92:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ba96:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800ba9a:	460b      	mov	r3, r1
 800ba9c:	4313      	orrs	r3, r2
 800ba9e:	d03e      	beq.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800baa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800baa4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800baa8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800baac:	d022      	beq.n	800baf4 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800baae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bab2:	d81b      	bhi.n	800baec <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d003      	beq.n	800bac0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800bab8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800babc:	d00b      	beq.n	800bad6 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800babe:	e015      	b.n	800baec <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bac0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bac4:	3308      	adds	r3, #8
 800bac6:	2100      	movs	r1, #0
 800bac8:	4618      	mov	r0, r3
 800baca:	f000 fd3b 	bl	800c544 <RCCEx_PLL2_Config>
 800bace:	4603      	mov	r3, r0
 800bad0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bad4:	e00f      	b.n	800baf6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bad6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bada:	3328      	adds	r3, #40	@ 0x28
 800badc:	2102      	movs	r1, #2
 800bade:	4618      	mov	r0, r3
 800bae0:	f000 fde2 	bl	800c6a8 <RCCEx_PLL3_Config>
 800bae4:	4603      	mov	r3, r0
 800bae6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800baea:	e004      	b.n	800baf6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800baec:	2301      	movs	r3, #1
 800baee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800baf2:	e000      	b.n	800baf6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800baf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800baf6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d10b      	bne.n	800bb16 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bafe:	4b4b      	ldr	r3, [pc, #300]	@ (800bc2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800bb00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb02:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800bb06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800bb0e:	4a47      	ldr	r2, [pc, #284]	@ (800bc2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800bb10:	430b      	orrs	r3, r1
 800bb12:	6593      	str	r3, [r2, #88]	@ 0x58
 800bb14:	e003      	b.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb16:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bb1a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bb1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb26:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800bb2a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800bb30:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800bb34:	460b      	mov	r3, r1
 800bb36:	4313      	orrs	r3, r2
 800bb38:	d03b      	beq.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800bb3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb42:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800bb46:	d01f      	beq.n	800bb88 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800bb48:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800bb4c:	d818      	bhi.n	800bb80 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800bb4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bb52:	d003      	beq.n	800bb5c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800bb54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bb58:	d007      	beq.n	800bb6a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800bb5a:	e011      	b.n	800bb80 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb5c:	4b33      	ldr	r3, [pc, #204]	@ (800bc2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800bb5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb60:	4a32      	ldr	r2, [pc, #200]	@ (800bc2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800bb62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bb66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800bb68:	e00f      	b.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb6e:	3328      	adds	r3, #40	@ 0x28
 800bb70:	2101      	movs	r1, #1
 800bb72:	4618      	mov	r0, r3
 800bb74:	f000 fd98 	bl	800c6a8 <RCCEx_PLL3_Config>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800bb7e:	e004      	b.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb80:	2301      	movs	r3, #1
 800bb82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bb86:	e000      	b.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800bb88:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb8a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d10b      	bne.n	800bbaa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bb92:	4b26      	ldr	r3, [pc, #152]	@ (800bc2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800bb94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb96:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800bb9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bba2:	4a22      	ldr	r2, [pc, #136]	@ (800bc2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800bba4:	430b      	orrs	r3, r1
 800bba6:	6553      	str	r3, [r2, #84]	@ 0x54
 800bba8:	e003      	b.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbaa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bbae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bbb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbba:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800bbbe:	673b      	str	r3, [r7, #112]	@ 0x70
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	677b      	str	r3, [r7, #116]	@ 0x74
 800bbc4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800bbc8:	460b      	mov	r3, r1
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	d034      	beq.n	800bc38 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800bbce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d003      	beq.n	800bbe0 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800bbd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bbdc:	d007      	beq.n	800bbee <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800bbde:	e011      	b.n	800bc04 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bbe0:	4b12      	ldr	r3, [pc, #72]	@ (800bc2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800bbe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbe4:	4a11      	ldr	r2, [pc, #68]	@ (800bc2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800bbe6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bbea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bbec:	e00e      	b.n	800bc0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bbee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbf2:	3308      	adds	r3, #8
 800bbf4:	2102      	movs	r1, #2
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f000 fca4 	bl	800c544 <RCCEx_PLL2_Config>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bc02:	e003      	b.n	800bc0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800bc04:	2301      	movs	r3, #1
 800bc06:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bc0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc0c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d10d      	bne.n	800bc30 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bc14:	4b05      	ldr	r3, [pc, #20]	@ (800bc2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800bc16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc18:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bc1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc22:	4a02      	ldr	r2, [pc, #8]	@ (800bc2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800bc24:	430b      	orrs	r3, r1
 800bc26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800bc28:	e006      	b.n	800bc38 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800bc2a:	bf00      	nop
 800bc2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc30:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bc34:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bc38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc40:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800bc44:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bc46:	2300      	movs	r3, #0
 800bc48:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bc4a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800bc4e:	460b      	mov	r3, r1
 800bc50:	4313      	orrs	r3, r2
 800bc52:	d00c      	beq.n	800bc6e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bc54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc58:	3328      	adds	r3, #40	@ 0x28
 800bc5a:	2102      	movs	r1, #2
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f000 fd23 	bl	800c6a8 <RCCEx_PLL3_Config>
 800bc62:	4603      	mov	r3, r0
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d002      	beq.n	800bc6e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800bc68:	2301      	movs	r3, #1
 800bc6a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bc6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc76:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800bc7a:	663b      	str	r3, [r7, #96]	@ 0x60
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	667b      	str	r3, [r7, #100]	@ 0x64
 800bc80:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800bc84:	460b      	mov	r3, r1
 800bc86:	4313      	orrs	r3, r2
 800bc88:	d038      	beq.n	800bcfc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800bc8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bc96:	d018      	beq.n	800bcca <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800bc98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bc9c:	d811      	bhi.n	800bcc2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800bc9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bca2:	d014      	beq.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800bca4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bca8:	d80b      	bhi.n	800bcc2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d011      	beq.n	800bcd2 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800bcae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bcb2:	d106      	bne.n	800bcc2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bcb4:	4bc3      	ldr	r3, [pc, #780]	@ (800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800bcb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcb8:	4ac2      	ldr	r2, [pc, #776]	@ (800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800bcba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bcbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800bcc0:	e008      	b.n	800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bcc8:	e004      	b.n	800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800bcca:	bf00      	nop
 800bccc:	e002      	b.n	800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800bcce:	bf00      	nop
 800bcd0:	e000      	b.n	800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800bcd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcd4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d10b      	bne.n	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bcdc:	4bb9      	ldr	r3, [pc, #740]	@ (800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800bcde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bce0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800bce4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bcec:	4ab5      	ldr	r2, [pc, #724]	@ (800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800bcee:	430b      	orrs	r3, r1
 800bcf0:	6553      	str	r3, [r2, #84]	@ 0x54
 800bcf2:	e003      	b.n	800bcfc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcf4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bcf8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bcfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd04:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800bd08:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bd0e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800bd12:	460b      	mov	r3, r1
 800bd14:	4313      	orrs	r3, r2
 800bd16:	d009      	beq.n	800bd2c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bd18:	4baa      	ldr	r3, [pc, #680]	@ (800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800bd1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd1c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bd20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bd26:	4aa7      	ldr	r2, [pc, #668]	@ (800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800bd28:	430b      	orrs	r3, r1
 800bd2a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bd2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd34:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800bd38:	653b      	str	r3, [r7, #80]	@ 0x50
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	657b      	str	r3, [r7, #84]	@ 0x54
 800bd3e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800bd42:	460b      	mov	r3, r1
 800bd44:	4313      	orrs	r3, r2
 800bd46:	d009      	beq.n	800bd5c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bd48:	4b9e      	ldr	r3, [pc, #632]	@ (800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800bd4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd4c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800bd50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd56:	4a9b      	ldr	r2, [pc, #620]	@ (800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800bd58:	430b      	orrs	r3, r1
 800bd5a:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800bd5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd64:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800bd68:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bd6e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800bd72:	460b      	mov	r3, r1
 800bd74:	4313      	orrs	r3, r2
 800bd76:	d009      	beq.n	800bd8c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800bd78:	4b92      	ldr	r3, [pc, #584]	@ (800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800bd7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd7c:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 800bd80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bd86:	4a8f      	ldr	r2, [pc, #572]	@ (800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800bd88:	430b      	orrs	r3, r1
 800bd8a:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bd8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd94:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800bd98:	643b      	str	r3, [r7, #64]	@ 0x40
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	647b      	str	r3, [r7, #68]	@ 0x44
 800bd9e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800bda2:	460b      	mov	r3, r1
 800bda4:	4313      	orrs	r3, r2
 800bda6:	d00e      	beq.n	800bdc6 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bda8:	4b86      	ldr	r3, [pc, #536]	@ (800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800bdaa:	691b      	ldr	r3, [r3, #16]
 800bdac:	4a85      	ldr	r2, [pc, #532]	@ (800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800bdae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bdb2:	6113      	str	r3, [r2, #16]
 800bdb4:	4b83      	ldr	r3, [pc, #524]	@ (800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800bdb6:	6919      	ldr	r1, [r3, #16]
 800bdb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bdbc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800bdc0:	4a80      	ldr	r2, [pc, #512]	@ (800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800bdc2:	430b      	orrs	r3, r1
 800bdc4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bdc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bdca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdce:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800bdd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bdd8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800bddc:	460b      	mov	r3, r1
 800bdde:	4313      	orrs	r3, r2
 800bde0:	d009      	beq.n	800bdf6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bde2:	4b78      	ldr	r3, [pc, #480]	@ (800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800bde4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bde6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800bdea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bdee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bdf0:	4a74      	ldr	r2, [pc, #464]	@ (800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800bdf2:	430b      	orrs	r3, r1
 800bdf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bdf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bdfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdfe:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800be02:	633b      	str	r3, [r7, #48]	@ 0x30
 800be04:	2300      	movs	r3, #0
 800be06:	637b      	str	r3, [r7, #52]	@ 0x34
 800be08:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800be0c:	460b      	mov	r3, r1
 800be0e:	4313      	orrs	r3, r2
 800be10:	d00a      	beq.n	800be28 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800be12:	4b6c      	ldr	r3, [pc, #432]	@ (800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800be14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be16:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800be1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800be22:	4a68      	ldr	r2, [pc, #416]	@ (800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800be24:	430b      	orrs	r3, r1
 800be26:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800be28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be30:	2100      	movs	r1, #0
 800be32:	62b9      	str	r1, [r7, #40]	@ 0x28
 800be34:	f003 0301 	and.w	r3, r3, #1
 800be38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800be3a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800be3e:	460b      	mov	r3, r1
 800be40:	4313      	orrs	r3, r2
 800be42:	d011      	beq.n	800be68 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800be44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be48:	3308      	adds	r3, #8
 800be4a:	2100      	movs	r1, #0
 800be4c:	4618      	mov	r0, r3
 800be4e:	f000 fb79 	bl	800c544 <RCCEx_PLL2_Config>
 800be52:	4603      	mov	r3, r0
 800be54:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800be58:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d003      	beq.n	800be68 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be60:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800be64:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800be68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be70:	2100      	movs	r1, #0
 800be72:	6239      	str	r1, [r7, #32]
 800be74:	f003 0302 	and.w	r3, r3, #2
 800be78:	627b      	str	r3, [r7, #36]	@ 0x24
 800be7a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800be7e:	460b      	mov	r3, r1
 800be80:	4313      	orrs	r3, r2
 800be82:	d011      	beq.n	800bea8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800be84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be88:	3308      	adds	r3, #8
 800be8a:	2101      	movs	r1, #1
 800be8c:	4618      	mov	r0, r3
 800be8e:	f000 fb59 	bl	800c544 <RCCEx_PLL2_Config>
 800be92:	4603      	mov	r3, r0
 800be94:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800be98:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d003      	beq.n	800bea8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bea0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bea4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bea8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800beac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb0:	2100      	movs	r1, #0
 800beb2:	61b9      	str	r1, [r7, #24]
 800beb4:	f003 0304 	and.w	r3, r3, #4
 800beb8:	61fb      	str	r3, [r7, #28]
 800beba:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bebe:	460b      	mov	r3, r1
 800bec0:	4313      	orrs	r3, r2
 800bec2:	d011      	beq.n	800bee8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bec4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bec8:	3308      	adds	r3, #8
 800beca:	2102      	movs	r1, #2
 800becc:	4618      	mov	r0, r3
 800bece:	f000 fb39 	bl	800c544 <RCCEx_PLL2_Config>
 800bed2:	4603      	mov	r3, r0
 800bed4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800bed8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d003      	beq.n	800bee8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bee0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bee4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bee8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800beec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef0:	2100      	movs	r1, #0
 800bef2:	6139      	str	r1, [r7, #16]
 800bef4:	f003 0308 	and.w	r3, r3, #8
 800bef8:	617b      	str	r3, [r7, #20]
 800befa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800befe:	460b      	mov	r3, r1
 800bf00:	4313      	orrs	r3, r2
 800bf02:	d011      	beq.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bf04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf08:	3328      	adds	r3, #40	@ 0x28
 800bf0a:	2100      	movs	r1, #0
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	f000 fbcb 	bl	800c6a8 <RCCEx_PLL3_Config>
 800bf12:	4603      	mov	r3, r0
 800bf14:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800bf18:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d003      	beq.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf20:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bf24:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bf28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf30:	2100      	movs	r1, #0
 800bf32:	60b9      	str	r1, [r7, #8]
 800bf34:	f003 0310 	and.w	r3, r3, #16
 800bf38:	60fb      	str	r3, [r7, #12]
 800bf3a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bf3e:	460b      	mov	r3, r1
 800bf40:	4313      	orrs	r3, r2
 800bf42:	d011      	beq.n	800bf68 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bf44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf48:	3328      	adds	r3, #40	@ 0x28
 800bf4a:	2101      	movs	r1, #1
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f000 fbab 	bl	800c6a8 <RCCEx_PLL3_Config>
 800bf52:	4603      	mov	r3, r0
 800bf54:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800bf58:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d003      	beq.n	800bf68 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf60:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bf64:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bf68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf70:	2100      	movs	r1, #0
 800bf72:	6039      	str	r1, [r7, #0]
 800bf74:	f003 0320 	and.w	r3, r3, #32
 800bf78:	607b      	str	r3, [r7, #4]
 800bf7a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bf7e:	460b      	mov	r3, r1
 800bf80:	4313      	orrs	r3, r2
 800bf82:	d011      	beq.n	800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bf84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf88:	3328      	adds	r3, #40	@ 0x28
 800bf8a:	2102      	movs	r1, #2
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f000 fb8b 	bl	800c6a8 <RCCEx_PLL3_Config>
 800bf92:	4603      	mov	r3, r0
 800bf94:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800bf98:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d003      	beq.n	800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfa0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bfa4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800bfa8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d101      	bne.n	800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	e000      	b.n	800bfb6 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800bfb4:	2301      	movs	r3, #1
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bfc2:	bf00      	nop
 800bfc4:	58024400 	.word	0x58024400

0800bfc8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800bfcc:	f7fe fda0 	bl	800ab10 <HAL_RCC_GetHCLKFreq>
 800bfd0:	4602      	mov	r2, r0
 800bfd2:	4b06      	ldr	r3, [pc, #24]	@ (800bfec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bfd4:	6a1b      	ldr	r3, [r3, #32]
 800bfd6:	091b      	lsrs	r3, r3, #4
 800bfd8:	f003 0307 	and.w	r3, r3, #7
 800bfdc:	4904      	ldr	r1, [pc, #16]	@ (800bff0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bfde:	5ccb      	ldrb	r3, [r1, r3]
 800bfe0:	f003 031f 	and.w	r3, r3, #31
 800bfe4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	bd80      	pop	{r7, pc}
 800bfec:	58024400 	.word	0x58024400
 800bff0:	08019b50 	.word	0x08019b50

0800bff4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800bff4:	b480      	push	{r7}
 800bff6:	b089      	sub	sp, #36	@ 0x24
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bffc:	4ba1      	ldr	r3, [pc, #644]	@ (800c284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c000:	f003 0303 	and.w	r3, r3, #3
 800c004:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c006:	4b9f      	ldr	r3, [pc, #636]	@ (800c284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c00a:	0b1b      	lsrs	r3, r3, #12
 800c00c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c010:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c012:	4b9c      	ldr	r3, [pc, #624]	@ (800c284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c016:	091b      	lsrs	r3, r3, #4
 800c018:	f003 0301 	and.w	r3, r3, #1
 800c01c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c01e:	4b99      	ldr	r3, [pc, #612]	@ (800c284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c022:	08db      	lsrs	r3, r3, #3
 800c024:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c028:	693a      	ldr	r2, [r7, #16]
 800c02a:	fb02 f303 	mul.w	r3, r2, r3
 800c02e:	ee07 3a90 	vmov	s15, r3
 800c032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c036:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c03a:	697b      	ldr	r3, [r7, #20]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	f000 8111 	beq.w	800c264 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c042:	69bb      	ldr	r3, [r7, #24]
 800c044:	2b02      	cmp	r3, #2
 800c046:	f000 8083 	beq.w	800c150 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c04a:	69bb      	ldr	r3, [r7, #24]
 800c04c:	2b02      	cmp	r3, #2
 800c04e:	f200 80a1 	bhi.w	800c194 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c052:	69bb      	ldr	r3, [r7, #24]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d003      	beq.n	800c060 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c058:	69bb      	ldr	r3, [r7, #24]
 800c05a:	2b01      	cmp	r3, #1
 800c05c:	d056      	beq.n	800c10c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c05e:	e099      	b.n	800c194 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c060:	4b88      	ldr	r3, [pc, #544]	@ (800c284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	f003 0320 	and.w	r3, r3, #32
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d02d      	beq.n	800c0c8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c06c:	4b85      	ldr	r3, [pc, #532]	@ (800c284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	08db      	lsrs	r3, r3, #3
 800c072:	f003 0303 	and.w	r3, r3, #3
 800c076:	4a84      	ldr	r2, [pc, #528]	@ (800c288 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c078:	fa22 f303 	lsr.w	r3, r2, r3
 800c07c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	ee07 3a90 	vmov	s15, r3
 800c084:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c088:	697b      	ldr	r3, [r7, #20]
 800c08a:	ee07 3a90 	vmov	s15, r3
 800c08e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c096:	4b7b      	ldr	r3, [pc, #492]	@ (800c284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c09a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c09e:	ee07 3a90 	vmov	s15, r3
 800c0a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0aa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c28c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c0ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c0ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c0c6:	e087      	b.n	800c1d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c0c8:	697b      	ldr	r3, [r7, #20]
 800c0ca:	ee07 3a90 	vmov	s15, r3
 800c0ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0d2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800c290 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c0d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0da:	4b6a      	ldr	r3, [pc, #424]	@ (800c284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c0dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0e2:	ee07 3a90 	vmov	s15, r3
 800c0e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0ee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800c28c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c0f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c0fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c102:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c106:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c10a:	e065      	b.n	800c1d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c10c:	697b      	ldr	r3, [r7, #20]
 800c10e:	ee07 3a90 	vmov	s15, r3
 800c112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c116:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c294 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c11a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c11e:	4b59      	ldr	r3, [pc, #356]	@ (800c284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c126:	ee07 3a90 	vmov	s15, r3
 800c12a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c12e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c132:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800c28c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c13a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c13e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c14a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c14e:	e043      	b.n	800c1d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	ee07 3a90 	vmov	s15, r3
 800c156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c15a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800c298 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c15e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c162:	4b48      	ldr	r3, [pc, #288]	@ (800c284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c16a:	ee07 3a90 	vmov	s15, r3
 800c16e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c172:	ed97 6a03 	vldr	s12, [r7, #12]
 800c176:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800c28c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c17a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c17e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c182:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c18a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c18e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c192:	e021      	b.n	800c1d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	ee07 3a90 	vmov	s15, r3
 800c19a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c19e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c294 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c1a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1a6:	4b37      	ldr	r3, [pc, #220]	@ (800c284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1ae:	ee07 3a90 	vmov	s15, r3
 800c1b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1ba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c28c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c1be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c1ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c1d6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c1d8:	4b2a      	ldr	r3, [pc, #168]	@ (800c284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1dc:	0a5b      	lsrs	r3, r3, #9
 800c1de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1e2:	ee07 3a90 	vmov	s15, r3
 800c1e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c1ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c1f2:	edd7 6a07 	vldr	s13, [r7, #28]
 800c1f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1fe:	ee17 2a90 	vmov	r2, s15
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c206:	4b1f      	ldr	r3, [pc, #124]	@ (800c284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c20a:	0c1b      	lsrs	r3, r3, #16
 800c20c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c210:	ee07 3a90 	vmov	s15, r3
 800c214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c218:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c21c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c220:	edd7 6a07 	vldr	s13, [r7, #28]
 800c224:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c228:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c22c:	ee17 2a90 	vmov	r2, s15
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c234:	4b13      	ldr	r3, [pc, #76]	@ (800c284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c238:	0e1b      	lsrs	r3, r3, #24
 800c23a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c23e:	ee07 3a90 	vmov	s15, r3
 800c242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c246:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c24a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c24e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c252:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c256:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c25a:	ee17 2a90 	vmov	r2, s15
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c262:	e008      	b.n	800c276 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2200      	movs	r2, #0
 800c268:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2200      	movs	r2, #0
 800c26e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2200      	movs	r2, #0
 800c274:	609a      	str	r2, [r3, #8]
}
 800c276:	bf00      	nop
 800c278:	3724      	adds	r7, #36	@ 0x24
 800c27a:	46bd      	mov	sp, r7
 800c27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c280:	4770      	bx	lr
 800c282:	bf00      	nop
 800c284:	58024400 	.word	0x58024400
 800c288:	03d09000 	.word	0x03d09000
 800c28c:	46000000 	.word	0x46000000
 800c290:	4c742400 	.word	0x4c742400
 800c294:	4a742400 	.word	0x4a742400
 800c298:	4bb71b00 	.word	0x4bb71b00

0800c29c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c29c:	b480      	push	{r7}
 800c29e:	b089      	sub	sp, #36	@ 0x24
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c2a4:	4ba1      	ldr	r3, [pc, #644]	@ (800c52c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c2a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2a8:	f003 0303 	and.w	r3, r3, #3
 800c2ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c2ae:	4b9f      	ldr	r3, [pc, #636]	@ (800c52c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c2b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2b2:	0d1b      	lsrs	r3, r3, #20
 800c2b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c2b8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c2ba:	4b9c      	ldr	r3, [pc, #624]	@ (800c52c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c2bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2be:	0a1b      	lsrs	r3, r3, #8
 800c2c0:	f003 0301 	and.w	r3, r3, #1
 800c2c4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c2c6:	4b99      	ldr	r3, [pc, #612]	@ (800c52c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c2c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c2ca:	08db      	lsrs	r3, r3, #3
 800c2cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c2d0:	693a      	ldr	r2, [r7, #16]
 800c2d2:	fb02 f303 	mul.w	r3, r2, r3
 800c2d6:	ee07 3a90 	vmov	s15, r3
 800c2da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	f000 8111 	beq.w	800c50c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c2ea:	69bb      	ldr	r3, [r7, #24]
 800c2ec:	2b02      	cmp	r3, #2
 800c2ee:	f000 8083 	beq.w	800c3f8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c2f2:	69bb      	ldr	r3, [r7, #24]
 800c2f4:	2b02      	cmp	r3, #2
 800c2f6:	f200 80a1 	bhi.w	800c43c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c2fa:	69bb      	ldr	r3, [r7, #24]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d003      	beq.n	800c308 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c300:	69bb      	ldr	r3, [r7, #24]
 800c302:	2b01      	cmp	r3, #1
 800c304:	d056      	beq.n	800c3b4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c306:	e099      	b.n	800c43c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c308:	4b88      	ldr	r3, [pc, #544]	@ (800c52c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	f003 0320 	and.w	r3, r3, #32
 800c310:	2b00      	cmp	r3, #0
 800c312:	d02d      	beq.n	800c370 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c314:	4b85      	ldr	r3, [pc, #532]	@ (800c52c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	08db      	lsrs	r3, r3, #3
 800c31a:	f003 0303 	and.w	r3, r3, #3
 800c31e:	4a84      	ldr	r2, [pc, #528]	@ (800c530 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c320:	fa22 f303 	lsr.w	r3, r2, r3
 800c324:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	ee07 3a90 	vmov	s15, r3
 800c32c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c330:	697b      	ldr	r3, [r7, #20]
 800c332:	ee07 3a90 	vmov	s15, r3
 800c336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c33a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c33e:	4b7b      	ldr	r3, [pc, #492]	@ (800c52c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c346:	ee07 3a90 	vmov	s15, r3
 800c34a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c34e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c352:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c35a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c35e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c36a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c36e:	e087      	b.n	800c480 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c370:	697b      	ldr	r3, [r7, #20]
 800c372:	ee07 3a90 	vmov	s15, r3
 800c376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c37a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800c538 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c37e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c382:	4b6a      	ldr	r3, [pc, #424]	@ (800c52c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c38a:	ee07 3a90 	vmov	s15, r3
 800c38e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c392:	ed97 6a03 	vldr	s12, [r7, #12]
 800c396:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800c534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c39a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c39e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c3a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c3b2:	e065      	b.n	800c480 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c3b4:	697b      	ldr	r3, [r7, #20]
 800c3b6:	ee07 3a90 	vmov	s15, r3
 800c3ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3be:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c53c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c3c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3c6:	4b59      	ldr	r3, [pc, #356]	@ (800c52c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c3c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3ce:	ee07 3a90 	vmov	s15, r3
 800c3d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3da:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800c534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c3de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c3ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c3f6:	e043      	b.n	800c480 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c3f8:	697b      	ldr	r3, [r7, #20]
 800c3fa:	ee07 3a90 	vmov	s15, r3
 800c3fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c402:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800c540 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c40a:	4b48      	ldr	r3, [pc, #288]	@ (800c52c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c40c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c40e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c412:	ee07 3a90 	vmov	s15, r3
 800c416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c41a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c41e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800c534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c42a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c42e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c432:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c436:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c43a:	e021      	b.n	800c480 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	ee07 3a90 	vmov	s15, r3
 800c442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c446:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c53c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c44a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c44e:	4b37      	ldr	r3, [pc, #220]	@ (800c52c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c456:	ee07 3a90 	vmov	s15, r3
 800c45a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c45e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c462:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c46a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c46e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c47a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c47e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c480:	4b2a      	ldr	r3, [pc, #168]	@ (800c52c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c484:	0a5b      	lsrs	r3, r3, #9
 800c486:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c48a:	ee07 3a90 	vmov	s15, r3
 800c48e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c492:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c496:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c49a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c49e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4a6:	ee17 2a90 	vmov	r2, s15
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c4ae:	4b1f      	ldr	r3, [pc, #124]	@ (800c52c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c4b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4b2:	0c1b      	lsrs	r3, r3, #16
 800c4b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c4b8:	ee07 3a90 	vmov	s15, r3
 800c4bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c4c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c4c8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c4cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4d4:	ee17 2a90 	vmov	r2, s15
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c4dc:	4b13      	ldr	r3, [pc, #76]	@ (800c52c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c4de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4e0:	0e1b      	lsrs	r3, r3, #24
 800c4e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c4e6:	ee07 3a90 	vmov	s15, r3
 800c4ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c4f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c4f6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c4fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c502:	ee17 2a90 	vmov	r2, s15
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c50a:	e008      	b.n	800c51e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2200      	movs	r2, #0
 800c510:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2200      	movs	r2, #0
 800c516:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2200      	movs	r2, #0
 800c51c:	609a      	str	r2, [r3, #8]
}
 800c51e:	bf00      	nop
 800c520:	3724      	adds	r7, #36	@ 0x24
 800c522:	46bd      	mov	sp, r7
 800c524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c528:	4770      	bx	lr
 800c52a:	bf00      	nop
 800c52c:	58024400 	.word	0x58024400
 800c530:	03d09000 	.word	0x03d09000
 800c534:	46000000 	.word	0x46000000
 800c538:	4c742400 	.word	0x4c742400
 800c53c:	4a742400 	.word	0x4a742400
 800c540:	4bb71b00 	.word	0x4bb71b00

0800c544 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b084      	sub	sp, #16
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
 800c54c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c54e:	2300      	movs	r3, #0
 800c550:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c552:	4b53      	ldr	r3, [pc, #332]	@ (800c6a0 <RCCEx_PLL2_Config+0x15c>)
 800c554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c556:	f003 0303 	and.w	r3, r3, #3
 800c55a:	2b03      	cmp	r3, #3
 800c55c:	d101      	bne.n	800c562 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c55e:	2301      	movs	r3, #1
 800c560:	e099      	b.n	800c696 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c562:	4b4f      	ldr	r3, [pc, #316]	@ (800c6a0 <RCCEx_PLL2_Config+0x15c>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	4a4e      	ldr	r2, [pc, #312]	@ (800c6a0 <RCCEx_PLL2_Config+0x15c>)
 800c568:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c56c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c56e:	f7f9 fc83 	bl	8005e78 <HAL_GetTick>
 800c572:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c574:	e008      	b.n	800c588 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c576:	f7f9 fc7f 	bl	8005e78 <HAL_GetTick>
 800c57a:	4602      	mov	r2, r0
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	1ad3      	subs	r3, r2, r3
 800c580:	2b02      	cmp	r3, #2
 800c582:	d901      	bls.n	800c588 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c584:	2303      	movs	r3, #3
 800c586:	e086      	b.n	800c696 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c588:	4b45      	ldr	r3, [pc, #276]	@ (800c6a0 <RCCEx_PLL2_Config+0x15c>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c590:	2b00      	cmp	r3, #0
 800c592:	d1f0      	bne.n	800c576 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c594:	4b42      	ldr	r3, [pc, #264]	@ (800c6a0 <RCCEx_PLL2_Config+0x15c>)
 800c596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c598:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	031b      	lsls	r3, r3, #12
 800c5a2:	493f      	ldr	r1, [pc, #252]	@ (800c6a0 <RCCEx_PLL2_Config+0x15c>)
 800c5a4:	4313      	orrs	r3, r2
 800c5a6:	628b      	str	r3, [r1, #40]	@ 0x28
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	685b      	ldr	r3, [r3, #4]
 800c5ac:	3b01      	subs	r3, #1
 800c5ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	689b      	ldr	r3, [r3, #8]
 800c5b6:	3b01      	subs	r3, #1
 800c5b8:	025b      	lsls	r3, r3, #9
 800c5ba:	b29b      	uxth	r3, r3
 800c5bc:	431a      	orrs	r2, r3
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	68db      	ldr	r3, [r3, #12]
 800c5c2:	3b01      	subs	r3, #1
 800c5c4:	041b      	lsls	r3, r3, #16
 800c5c6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c5ca:	431a      	orrs	r2, r3
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	691b      	ldr	r3, [r3, #16]
 800c5d0:	3b01      	subs	r3, #1
 800c5d2:	061b      	lsls	r3, r3, #24
 800c5d4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c5d8:	4931      	ldr	r1, [pc, #196]	@ (800c6a0 <RCCEx_PLL2_Config+0x15c>)
 800c5da:	4313      	orrs	r3, r2
 800c5dc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c5de:	4b30      	ldr	r3, [pc, #192]	@ (800c6a0 <RCCEx_PLL2_Config+0x15c>)
 800c5e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5e2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	695b      	ldr	r3, [r3, #20]
 800c5ea:	492d      	ldr	r1, [pc, #180]	@ (800c6a0 <RCCEx_PLL2_Config+0x15c>)
 800c5ec:	4313      	orrs	r3, r2
 800c5ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c5f0:	4b2b      	ldr	r3, [pc, #172]	@ (800c6a0 <RCCEx_PLL2_Config+0x15c>)
 800c5f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5f4:	f023 0220 	bic.w	r2, r3, #32
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	699b      	ldr	r3, [r3, #24]
 800c5fc:	4928      	ldr	r1, [pc, #160]	@ (800c6a0 <RCCEx_PLL2_Config+0x15c>)
 800c5fe:	4313      	orrs	r3, r2
 800c600:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c602:	4b27      	ldr	r3, [pc, #156]	@ (800c6a0 <RCCEx_PLL2_Config+0x15c>)
 800c604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c606:	4a26      	ldr	r2, [pc, #152]	@ (800c6a0 <RCCEx_PLL2_Config+0x15c>)
 800c608:	f023 0310 	bic.w	r3, r3, #16
 800c60c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c60e:	4b24      	ldr	r3, [pc, #144]	@ (800c6a0 <RCCEx_PLL2_Config+0x15c>)
 800c610:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c612:	4b24      	ldr	r3, [pc, #144]	@ (800c6a4 <RCCEx_PLL2_Config+0x160>)
 800c614:	4013      	ands	r3, r2
 800c616:	687a      	ldr	r2, [r7, #4]
 800c618:	69d2      	ldr	r2, [r2, #28]
 800c61a:	00d2      	lsls	r2, r2, #3
 800c61c:	4920      	ldr	r1, [pc, #128]	@ (800c6a0 <RCCEx_PLL2_Config+0x15c>)
 800c61e:	4313      	orrs	r3, r2
 800c620:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c622:	4b1f      	ldr	r3, [pc, #124]	@ (800c6a0 <RCCEx_PLL2_Config+0x15c>)
 800c624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c626:	4a1e      	ldr	r2, [pc, #120]	@ (800c6a0 <RCCEx_PLL2_Config+0x15c>)
 800c628:	f043 0310 	orr.w	r3, r3, #16
 800c62c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d106      	bne.n	800c642 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c634:	4b1a      	ldr	r3, [pc, #104]	@ (800c6a0 <RCCEx_PLL2_Config+0x15c>)
 800c636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c638:	4a19      	ldr	r2, [pc, #100]	@ (800c6a0 <RCCEx_PLL2_Config+0x15c>)
 800c63a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c63e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c640:	e00f      	b.n	800c662 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	2b01      	cmp	r3, #1
 800c646:	d106      	bne.n	800c656 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c648:	4b15      	ldr	r3, [pc, #84]	@ (800c6a0 <RCCEx_PLL2_Config+0x15c>)
 800c64a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c64c:	4a14      	ldr	r2, [pc, #80]	@ (800c6a0 <RCCEx_PLL2_Config+0x15c>)
 800c64e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c652:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c654:	e005      	b.n	800c662 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c656:	4b12      	ldr	r3, [pc, #72]	@ (800c6a0 <RCCEx_PLL2_Config+0x15c>)
 800c658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c65a:	4a11      	ldr	r2, [pc, #68]	@ (800c6a0 <RCCEx_PLL2_Config+0x15c>)
 800c65c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c660:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c662:	4b0f      	ldr	r3, [pc, #60]	@ (800c6a0 <RCCEx_PLL2_Config+0x15c>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	4a0e      	ldr	r2, [pc, #56]	@ (800c6a0 <RCCEx_PLL2_Config+0x15c>)
 800c668:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c66c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c66e:	f7f9 fc03 	bl	8005e78 <HAL_GetTick>
 800c672:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c674:	e008      	b.n	800c688 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c676:	f7f9 fbff 	bl	8005e78 <HAL_GetTick>
 800c67a:	4602      	mov	r2, r0
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	1ad3      	subs	r3, r2, r3
 800c680:	2b02      	cmp	r3, #2
 800c682:	d901      	bls.n	800c688 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c684:	2303      	movs	r3, #3
 800c686:	e006      	b.n	800c696 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c688:	4b05      	ldr	r3, [pc, #20]	@ (800c6a0 <RCCEx_PLL2_Config+0x15c>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c690:	2b00      	cmp	r3, #0
 800c692:	d0f0      	beq.n	800c676 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c694:	7bfb      	ldrb	r3, [r7, #15]
}
 800c696:	4618      	mov	r0, r3
 800c698:	3710      	adds	r7, #16
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}
 800c69e:	bf00      	nop
 800c6a0:	58024400 	.word	0x58024400
 800c6a4:	ffff0007 	.word	0xffff0007

0800c6a8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b084      	sub	sp, #16
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
 800c6b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c6b6:	4b53      	ldr	r3, [pc, #332]	@ (800c804 <RCCEx_PLL3_Config+0x15c>)
 800c6b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6ba:	f003 0303 	and.w	r3, r3, #3
 800c6be:	2b03      	cmp	r3, #3
 800c6c0:	d101      	bne.n	800c6c6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c6c2:	2301      	movs	r3, #1
 800c6c4:	e099      	b.n	800c7fa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c6c6:	4b4f      	ldr	r3, [pc, #316]	@ (800c804 <RCCEx_PLL3_Config+0x15c>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	4a4e      	ldr	r2, [pc, #312]	@ (800c804 <RCCEx_PLL3_Config+0x15c>)
 800c6cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c6d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c6d2:	f7f9 fbd1 	bl	8005e78 <HAL_GetTick>
 800c6d6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c6d8:	e008      	b.n	800c6ec <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c6da:	f7f9 fbcd 	bl	8005e78 <HAL_GetTick>
 800c6de:	4602      	mov	r2, r0
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	1ad3      	subs	r3, r2, r3
 800c6e4:	2b02      	cmp	r3, #2
 800c6e6:	d901      	bls.n	800c6ec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c6e8:	2303      	movs	r3, #3
 800c6ea:	e086      	b.n	800c7fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c6ec:	4b45      	ldr	r3, [pc, #276]	@ (800c804 <RCCEx_PLL3_Config+0x15c>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d1f0      	bne.n	800c6da <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c6f8:	4b42      	ldr	r3, [pc, #264]	@ (800c804 <RCCEx_PLL3_Config+0x15c>)
 800c6fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6fc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	051b      	lsls	r3, r3, #20
 800c706:	493f      	ldr	r1, [pc, #252]	@ (800c804 <RCCEx_PLL3_Config+0x15c>)
 800c708:	4313      	orrs	r3, r2
 800c70a:	628b      	str	r3, [r1, #40]	@ 0x28
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	685b      	ldr	r3, [r3, #4]
 800c710:	3b01      	subs	r3, #1
 800c712:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	689b      	ldr	r3, [r3, #8]
 800c71a:	3b01      	subs	r3, #1
 800c71c:	025b      	lsls	r3, r3, #9
 800c71e:	b29b      	uxth	r3, r3
 800c720:	431a      	orrs	r2, r3
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	68db      	ldr	r3, [r3, #12]
 800c726:	3b01      	subs	r3, #1
 800c728:	041b      	lsls	r3, r3, #16
 800c72a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c72e:	431a      	orrs	r2, r3
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	691b      	ldr	r3, [r3, #16]
 800c734:	3b01      	subs	r3, #1
 800c736:	061b      	lsls	r3, r3, #24
 800c738:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c73c:	4931      	ldr	r1, [pc, #196]	@ (800c804 <RCCEx_PLL3_Config+0x15c>)
 800c73e:	4313      	orrs	r3, r2
 800c740:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c742:	4b30      	ldr	r3, [pc, #192]	@ (800c804 <RCCEx_PLL3_Config+0x15c>)
 800c744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c746:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	695b      	ldr	r3, [r3, #20]
 800c74e:	492d      	ldr	r1, [pc, #180]	@ (800c804 <RCCEx_PLL3_Config+0x15c>)
 800c750:	4313      	orrs	r3, r2
 800c752:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c754:	4b2b      	ldr	r3, [pc, #172]	@ (800c804 <RCCEx_PLL3_Config+0x15c>)
 800c756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c758:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	699b      	ldr	r3, [r3, #24]
 800c760:	4928      	ldr	r1, [pc, #160]	@ (800c804 <RCCEx_PLL3_Config+0x15c>)
 800c762:	4313      	orrs	r3, r2
 800c764:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c766:	4b27      	ldr	r3, [pc, #156]	@ (800c804 <RCCEx_PLL3_Config+0x15c>)
 800c768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c76a:	4a26      	ldr	r2, [pc, #152]	@ (800c804 <RCCEx_PLL3_Config+0x15c>)
 800c76c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c770:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c772:	4b24      	ldr	r3, [pc, #144]	@ (800c804 <RCCEx_PLL3_Config+0x15c>)
 800c774:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c776:	4b24      	ldr	r3, [pc, #144]	@ (800c808 <RCCEx_PLL3_Config+0x160>)
 800c778:	4013      	ands	r3, r2
 800c77a:	687a      	ldr	r2, [r7, #4]
 800c77c:	69d2      	ldr	r2, [r2, #28]
 800c77e:	00d2      	lsls	r2, r2, #3
 800c780:	4920      	ldr	r1, [pc, #128]	@ (800c804 <RCCEx_PLL3_Config+0x15c>)
 800c782:	4313      	orrs	r3, r2
 800c784:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c786:	4b1f      	ldr	r3, [pc, #124]	@ (800c804 <RCCEx_PLL3_Config+0x15c>)
 800c788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c78a:	4a1e      	ldr	r2, [pc, #120]	@ (800c804 <RCCEx_PLL3_Config+0x15c>)
 800c78c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c790:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d106      	bne.n	800c7a6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c798:	4b1a      	ldr	r3, [pc, #104]	@ (800c804 <RCCEx_PLL3_Config+0x15c>)
 800c79a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c79c:	4a19      	ldr	r2, [pc, #100]	@ (800c804 <RCCEx_PLL3_Config+0x15c>)
 800c79e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c7a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c7a4:	e00f      	b.n	800c7c6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	2b01      	cmp	r3, #1
 800c7aa:	d106      	bne.n	800c7ba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c7ac:	4b15      	ldr	r3, [pc, #84]	@ (800c804 <RCCEx_PLL3_Config+0x15c>)
 800c7ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7b0:	4a14      	ldr	r2, [pc, #80]	@ (800c804 <RCCEx_PLL3_Config+0x15c>)
 800c7b2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c7b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c7b8:	e005      	b.n	800c7c6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c7ba:	4b12      	ldr	r3, [pc, #72]	@ (800c804 <RCCEx_PLL3_Config+0x15c>)
 800c7bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7be:	4a11      	ldr	r2, [pc, #68]	@ (800c804 <RCCEx_PLL3_Config+0x15c>)
 800c7c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c7c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c7c6:	4b0f      	ldr	r3, [pc, #60]	@ (800c804 <RCCEx_PLL3_Config+0x15c>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	4a0e      	ldr	r2, [pc, #56]	@ (800c804 <RCCEx_PLL3_Config+0x15c>)
 800c7cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c7d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c7d2:	f7f9 fb51 	bl	8005e78 <HAL_GetTick>
 800c7d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c7d8:	e008      	b.n	800c7ec <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c7da:	f7f9 fb4d 	bl	8005e78 <HAL_GetTick>
 800c7de:	4602      	mov	r2, r0
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	1ad3      	subs	r3, r2, r3
 800c7e4:	2b02      	cmp	r3, #2
 800c7e6:	d901      	bls.n	800c7ec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c7e8:	2303      	movs	r3, #3
 800c7ea:	e006      	b.n	800c7fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c7ec:	4b05      	ldr	r3, [pc, #20]	@ (800c804 <RCCEx_PLL3_Config+0x15c>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d0f0      	beq.n	800c7da <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c7f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	3710      	adds	r7, #16
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}
 800c802:	bf00      	nop
 800c804:	58024400 	.word	0x58024400
 800c808:	ffff0007 	.word	0xffff0007

0800c80c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b084      	sub	sp, #16
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d101      	bne.n	800c81e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c81a:	2301      	movs	r3, #1
 800c81c:	e10f      	b.n	800ca3e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	2200      	movs	r2, #0
 800c822:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	4a87      	ldr	r2, [pc, #540]	@ (800ca48 <HAL_SPI_Init+0x23c>)
 800c82a:	4293      	cmp	r3, r2
 800c82c:	d00f      	beq.n	800c84e <HAL_SPI_Init+0x42>
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	4a86      	ldr	r2, [pc, #536]	@ (800ca4c <HAL_SPI_Init+0x240>)
 800c834:	4293      	cmp	r3, r2
 800c836:	d00a      	beq.n	800c84e <HAL_SPI_Init+0x42>
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	4a84      	ldr	r2, [pc, #528]	@ (800ca50 <HAL_SPI_Init+0x244>)
 800c83e:	4293      	cmp	r3, r2
 800c840:	d005      	beq.n	800c84e <HAL_SPI_Init+0x42>
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	68db      	ldr	r3, [r3, #12]
 800c846:	2b0f      	cmp	r3, #15
 800c848:	d901      	bls.n	800c84e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c84a:	2301      	movs	r3, #1
 800c84c:	e0f7      	b.n	800ca3e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f001 f976 	bl	800db40 <SPI_GetPacketSize>
 800c854:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	4a7b      	ldr	r2, [pc, #492]	@ (800ca48 <HAL_SPI_Init+0x23c>)
 800c85c:	4293      	cmp	r3, r2
 800c85e:	d00c      	beq.n	800c87a <HAL_SPI_Init+0x6e>
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	4a79      	ldr	r2, [pc, #484]	@ (800ca4c <HAL_SPI_Init+0x240>)
 800c866:	4293      	cmp	r3, r2
 800c868:	d007      	beq.n	800c87a <HAL_SPI_Init+0x6e>
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	4a78      	ldr	r2, [pc, #480]	@ (800ca50 <HAL_SPI_Init+0x244>)
 800c870:	4293      	cmp	r3, r2
 800c872:	d002      	beq.n	800c87a <HAL_SPI_Init+0x6e>
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	2b08      	cmp	r3, #8
 800c878:	d811      	bhi.n	800c89e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c87e:	4a72      	ldr	r2, [pc, #456]	@ (800ca48 <HAL_SPI_Init+0x23c>)
 800c880:	4293      	cmp	r3, r2
 800c882:	d009      	beq.n	800c898 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	4a70      	ldr	r2, [pc, #448]	@ (800ca4c <HAL_SPI_Init+0x240>)
 800c88a:	4293      	cmp	r3, r2
 800c88c:	d004      	beq.n	800c898 <HAL_SPI_Init+0x8c>
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	4a6f      	ldr	r2, [pc, #444]	@ (800ca50 <HAL_SPI_Init+0x244>)
 800c894:	4293      	cmp	r3, r2
 800c896:	d104      	bne.n	800c8a2 <HAL_SPI_Init+0x96>
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	2b10      	cmp	r3, #16
 800c89c:	d901      	bls.n	800c8a2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c89e:	2301      	movs	r3, #1
 800c8a0:	e0cd      	b.n	800ca3e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c8a8:	b2db      	uxtb	r3, r3
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d106      	bne.n	800c8bc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f7f6 f80c 	bl	80028d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2202      	movs	r2, #2
 800c8c0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	681a      	ldr	r2, [r3, #0]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	f022 0201 	bic.w	r2, r2, #1
 800c8d2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	689b      	ldr	r3, [r3, #8]
 800c8da:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800c8de:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	699b      	ldr	r3, [r3, #24]
 800c8e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c8e8:	d119      	bne.n	800c91e <HAL_SPI_Init+0x112>
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	685b      	ldr	r3, [r3, #4]
 800c8ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c8f2:	d103      	bne.n	800c8fc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d008      	beq.n	800c90e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c900:	2b00      	cmp	r3, #0
 800c902:	d10c      	bne.n	800c91e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c908:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c90c:	d107      	bne.n	800c91e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	681a      	ldr	r2, [r3, #0]
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c91c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	685b      	ldr	r3, [r3, #4]
 800c922:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c926:	2b00      	cmp	r3, #0
 800c928:	d00f      	beq.n	800c94a <HAL_SPI_Init+0x13e>
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	68db      	ldr	r3, [r3, #12]
 800c92e:	2b06      	cmp	r3, #6
 800c930:	d90b      	bls.n	800c94a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	430a      	orrs	r2, r1
 800c946:	601a      	str	r2, [r3, #0]
 800c948:	e007      	b.n	800c95a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	681a      	ldr	r2, [r3, #0]
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c958:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	69da      	ldr	r2, [r3, #28]
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c962:	431a      	orrs	r2, r3
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	431a      	orrs	r2, r3
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c96c:	ea42 0103 	orr.w	r1, r2, r3
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	68da      	ldr	r2, [r3, #12]
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	430a      	orrs	r2, r1
 800c97a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c984:	431a      	orrs	r2, r3
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c98a:	431a      	orrs	r2, r3
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	699b      	ldr	r3, [r3, #24]
 800c990:	431a      	orrs	r2, r3
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	691b      	ldr	r3, [r3, #16]
 800c996:	431a      	orrs	r2, r3
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	695b      	ldr	r3, [r3, #20]
 800c99c:	431a      	orrs	r2, r3
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	6a1b      	ldr	r3, [r3, #32]
 800c9a2:	431a      	orrs	r2, r3
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	685b      	ldr	r3, [r3, #4]
 800c9a8:	431a      	orrs	r2, r3
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c9ae:	431a      	orrs	r2, r3
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	689b      	ldr	r3, [r3, #8]
 800c9b4:	431a      	orrs	r2, r3
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c9ba:	ea42 0103 	orr.w	r1, r2, r3
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	430a      	orrs	r2, r1
 800c9c8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	685b      	ldr	r3, [r3, #4]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d113      	bne.n	800c9fa <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	689b      	ldr	r3, [r3, #8]
 800c9d8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c9e4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	689b      	ldr	r3, [r3, #8]
 800c9ec:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c9f8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	f022 0201 	bic.w	r2, r2, #1
 800ca08:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	685b      	ldr	r3, [r3, #4]
 800ca0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d00a      	beq.n	800ca2c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	68db      	ldr	r3, [r3, #12]
 800ca1c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	430a      	orrs	r2, r1
 800ca2a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2200      	movs	r2, #0
 800ca30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2201      	movs	r2, #1
 800ca38:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800ca3c:	2300      	movs	r3, #0
}
 800ca3e:	4618      	mov	r0, r3
 800ca40:	3710      	adds	r7, #16
 800ca42:	46bd      	mov	sp, r7
 800ca44:	bd80      	pop	{r7, pc}
 800ca46:	bf00      	nop
 800ca48:	40013000 	.word	0x40013000
 800ca4c:	40003800 	.word	0x40003800
 800ca50:	40003c00 	.word	0x40003c00

0800ca54 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b088      	sub	sp, #32
 800ca58:	af02      	add	r7, sp, #8
 800ca5a:	60f8      	str	r0, [r7, #12]
 800ca5c:	60b9      	str	r1, [r7, #8]
 800ca5e:	603b      	str	r3, [r7, #0]
 800ca60:	4613      	mov	r3, r2
 800ca62:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	3320      	adds	r3, #32
 800ca6a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ca6c:	f7f9 fa04 	bl	8005e78 <HAL_GetTick>
 800ca70:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ca78:	b2db      	uxtb	r3, r3
 800ca7a:	2b01      	cmp	r3, #1
 800ca7c:	d001      	beq.n	800ca82 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800ca7e:	2302      	movs	r3, #2
 800ca80:	e1d1      	b.n	800ce26 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d002      	beq.n	800ca8e <HAL_SPI_Transmit+0x3a>
 800ca88:	88fb      	ldrh	r3, [r7, #6]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d101      	bne.n	800ca92 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800ca8e:	2301      	movs	r3, #1
 800ca90:	e1c9      	b.n	800ce26 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800ca98:	2b01      	cmp	r3, #1
 800ca9a:	d101      	bne.n	800caa0 <HAL_SPI_Transmit+0x4c>
 800ca9c:	2302      	movs	r3, #2
 800ca9e:	e1c2      	b.n	800ce26 <HAL_SPI_Transmit+0x3d2>
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	2201      	movs	r2, #1
 800caa4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	2203      	movs	r2, #3
 800caac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	2200      	movs	r2, #0
 800cab4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	68ba      	ldr	r2, [r7, #8]
 800cabc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	88fa      	ldrh	r2, [r7, #6]
 800cac2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	88fa      	ldrh	r2, [r7, #6]
 800caca:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	2200      	movs	r2, #0
 800cad2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	2200      	movs	r2, #0
 800cad8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	2200      	movs	r2, #0
 800cae0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	2200      	movs	r2, #0
 800cae8:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	2200      	movs	r2, #0
 800caee:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	689b      	ldr	r3, [r3, #8]
 800caf4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800caf8:	d108      	bne.n	800cb0c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	681a      	ldr	r2, [r3, #0]
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cb08:	601a      	str	r2, [r3, #0]
 800cb0a:	e009      	b.n	800cb20 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	68db      	ldr	r3, [r3, #12]
 800cb12:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800cb1e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	685a      	ldr	r2, [r3, #4]
 800cb26:	4b96      	ldr	r3, [pc, #600]	@ (800cd80 <HAL_SPI_Transmit+0x32c>)
 800cb28:	4013      	ands	r3, r2
 800cb2a:	88f9      	ldrh	r1, [r7, #6]
 800cb2c:	68fa      	ldr	r2, [r7, #12]
 800cb2e:	6812      	ldr	r2, [r2, #0]
 800cb30:	430b      	orrs	r3, r1
 800cb32:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	681a      	ldr	r2, [r3, #0]
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	f042 0201 	orr.w	r2, r2, #1
 800cb42:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	685b      	ldr	r3, [r3, #4]
 800cb48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cb4c:	d107      	bne.n	800cb5e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	681a      	ldr	r2, [r3, #0]
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cb5c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	68db      	ldr	r3, [r3, #12]
 800cb62:	2b0f      	cmp	r3, #15
 800cb64:	d947      	bls.n	800cbf6 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800cb66:	e03f      	b.n	800cbe8 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	695b      	ldr	r3, [r3, #20]
 800cb6e:	f003 0302 	and.w	r3, r3, #2
 800cb72:	2b02      	cmp	r3, #2
 800cb74:	d114      	bne.n	800cba0 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	6812      	ldr	r2, [r2, #0]
 800cb80:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cb86:	1d1a      	adds	r2, r3, #4
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cb92:	b29b      	uxth	r3, r3
 800cb94:	3b01      	subs	r3, #1
 800cb96:	b29a      	uxth	r2, r3
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800cb9e:	e023      	b.n	800cbe8 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cba0:	f7f9 f96a 	bl	8005e78 <HAL_GetTick>
 800cba4:	4602      	mov	r2, r0
 800cba6:	693b      	ldr	r3, [r7, #16]
 800cba8:	1ad3      	subs	r3, r2, r3
 800cbaa:	683a      	ldr	r2, [r7, #0]
 800cbac:	429a      	cmp	r2, r3
 800cbae:	d803      	bhi.n	800cbb8 <HAL_SPI_Transmit+0x164>
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbb6:	d102      	bne.n	800cbbe <HAL_SPI_Transmit+0x16a>
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d114      	bne.n	800cbe8 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cbbe:	68f8      	ldr	r0, [r7, #12]
 800cbc0:	f000 fef0 	bl	800d9a4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cbca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	2201      	movs	r2, #1
 800cbd8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	2200      	movs	r2, #0
 800cbe0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800cbe4:	2303      	movs	r3, #3
 800cbe6:	e11e      	b.n	800ce26 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cbee:	b29b      	uxth	r3, r3
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d1b9      	bne.n	800cb68 <HAL_SPI_Transmit+0x114>
 800cbf4:	e0f1      	b.n	800cdda <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	68db      	ldr	r3, [r3, #12]
 800cbfa:	2b07      	cmp	r3, #7
 800cbfc:	f240 80e6 	bls.w	800cdcc <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800cc00:	e05d      	b.n	800ccbe <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	695b      	ldr	r3, [r3, #20]
 800cc08:	f003 0302 	and.w	r3, r3, #2
 800cc0c:	2b02      	cmp	r3, #2
 800cc0e:	d132      	bne.n	800cc76 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cc16:	b29b      	uxth	r3, r3
 800cc18:	2b01      	cmp	r3, #1
 800cc1a:	d918      	bls.n	800cc4e <HAL_SPI_Transmit+0x1fa>
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d014      	beq.n	800cc4e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	6812      	ldr	r2, [r2, #0]
 800cc2e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cc34:	1d1a      	adds	r2, r3, #4
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cc40:	b29b      	uxth	r3, r3
 800cc42:	3b02      	subs	r3, #2
 800cc44:	b29a      	uxth	r2, r3
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800cc4c:	e037      	b.n	800ccbe <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cc52:	881a      	ldrh	r2, [r3, #0]
 800cc54:	697b      	ldr	r3, [r7, #20]
 800cc56:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cc5c:	1c9a      	adds	r2, r3, #2
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cc68:	b29b      	uxth	r3, r3
 800cc6a:	3b01      	subs	r3, #1
 800cc6c:	b29a      	uxth	r2, r3
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800cc74:	e023      	b.n	800ccbe <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cc76:	f7f9 f8ff 	bl	8005e78 <HAL_GetTick>
 800cc7a:	4602      	mov	r2, r0
 800cc7c:	693b      	ldr	r3, [r7, #16]
 800cc7e:	1ad3      	subs	r3, r2, r3
 800cc80:	683a      	ldr	r2, [r7, #0]
 800cc82:	429a      	cmp	r2, r3
 800cc84:	d803      	bhi.n	800cc8e <HAL_SPI_Transmit+0x23a>
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc8c:	d102      	bne.n	800cc94 <HAL_SPI_Transmit+0x240>
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d114      	bne.n	800ccbe <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cc94:	68f8      	ldr	r0, [r7, #12]
 800cc96:	f000 fe85 	bl	800d9a4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cca0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	2201      	movs	r2, #1
 800ccae:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800ccba:	2303      	movs	r3, #3
 800ccbc:	e0b3      	b.n	800ce26 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ccc4:	b29b      	uxth	r3, r3
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d19b      	bne.n	800cc02 <HAL_SPI_Transmit+0x1ae>
 800ccca:	e086      	b.n	800cdda <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	695b      	ldr	r3, [r3, #20]
 800ccd2:	f003 0302 	and.w	r3, r3, #2
 800ccd6:	2b02      	cmp	r3, #2
 800ccd8:	d154      	bne.n	800cd84 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cce0:	b29b      	uxth	r3, r3
 800cce2:	2b03      	cmp	r3, #3
 800cce4:	d918      	bls.n	800cd18 <HAL_SPI_Transmit+0x2c4>
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ccea:	2b40      	cmp	r3, #64	@ 0x40
 800ccec:	d914      	bls.n	800cd18 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	6812      	ldr	r2, [r2, #0]
 800ccf8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ccfe:	1d1a      	adds	r2, r3, #4
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cd0a:	b29b      	uxth	r3, r3
 800cd0c:	3b04      	subs	r3, #4
 800cd0e:	b29a      	uxth	r2, r3
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800cd16:	e059      	b.n	800cdcc <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cd1e:	b29b      	uxth	r3, r3
 800cd20:	2b01      	cmp	r3, #1
 800cd22:	d917      	bls.n	800cd54 <HAL_SPI_Transmit+0x300>
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d013      	beq.n	800cd54 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd30:	881a      	ldrh	r2, [r3, #0]
 800cd32:	697b      	ldr	r3, [r7, #20]
 800cd34:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd3a:	1c9a      	adds	r2, r3, #2
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cd46:	b29b      	uxth	r3, r3
 800cd48:	3b02      	subs	r3, #2
 800cd4a:	b29a      	uxth	r2, r3
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800cd52:	e03b      	b.n	800cdcc <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	3320      	adds	r3, #32
 800cd5e:	7812      	ldrb	r2, [r2, #0]
 800cd60:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd66:	1c5a      	adds	r2, r3, #1
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cd72:	b29b      	uxth	r3, r3
 800cd74:	3b01      	subs	r3, #1
 800cd76:	b29a      	uxth	r2, r3
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800cd7e:	e025      	b.n	800cdcc <HAL_SPI_Transmit+0x378>
 800cd80:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cd84:	f7f9 f878 	bl	8005e78 <HAL_GetTick>
 800cd88:	4602      	mov	r2, r0
 800cd8a:	693b      	ldr	r3, [r7, #16]
 800cd8c:	1ad3      	subs	r3, r2, r3
 800cd8e:	683a      	ldr	r2, [r7, #0]
 800cd90:	429a      	cmp	r2, r3
 800cd92:	d803      	bhi.n	800cd9c <HAL_SPI_Transmit+0x348>
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd9a:	d102      	bne.n	800cda2 <HAL_SPI_Transmit+0x34e>
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d114      	bne.n	800cdcc <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cda2:	68f8      	ldr	r0, [r7, #12]
 800cda4:	f000 fdfe 	bl	800d9a4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cdae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	2201      	movs	r2, #1
 800cdbc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800cdc8:	2303      	movs	r3, #3
 800cdca:	e02c      	b.n	800ce26 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cdd2:	b29b      	uxth	r3, r3
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	f47f af79 	bne.w	800cccc <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800cdda:	693b      	ldr	r3, [r7, #16]
 800cddc:	9300      	str	r3, [sp, #0]
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	2200      	movs	r2, #0
 800cde2:	2108      	movs	r1, #8
 800cde4:	68f8      	ldr	r0, [r7, #12]
 800cde6:	f000 fe7d 	bl	800dae4 <SPI_WaitOnFlagUntilTimeout>
 800cdea:	4603      	mov	r3, r0
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d007      	beq.n	800ce00 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cdf6:	f043 0220 	orr.w	r2, r3, #32
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ce00:	68f8      	ldr	r0, [r7, #12]
 800ce02:	f000 fdcf 	bl	800d9a4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	2201      	movs	r2, #1
 800ce0a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	2200      	movs	r2, #0
 800ce12:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d001      	beq.n	800ce24 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800ce20:	2301      	movs	r3, #1
 800ce22:	e000      	b.n	800ce26 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800ce24:	2300      	movs	r3, #0
  }
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3718      	adds	r7, #24
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}
 800ce2e:	bf00      	nop

0800ce30 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b088      	sub	sp, #32
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	60f8      	str	r0, [r7, #12]
 800ce38:	60b9      	str	r1, [r7, #8]
 800ce3a:	603b      	str	r3, [r7, #0]
 800ce3c:	4613      	mov	r3, r2
 800ce3e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce44:	095b      	lsrs	r3, r3, #5
 800ce46:	b29b      	uxth	r3, r3
 800ce48:	3301      	adds	r3, #1
 800ce4a:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	3330      	adds	r3, #48	@ 0x30
 800ce52:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ce54:	f7f9 f810 	bl	8005e78 <HAL_GetTick>
 800ce58:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ce60:	b2db      	uxtb	r3, r3
 800ce62:	2b01      	cmp	r3, #1
 800ce64:	d001      	beq.n	800ce6a <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800ce66:	2302      	movs	r3, #2
 800ce68:	e250      	b.n	800d30c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ce6a:	68bb      	ldr	r3, [r7, #8]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d002      	beq.n	800ce76 <HAL_SPI_Receive+0x46>
 800ce70:	88fb      	ldrh	r3, [r7, #6]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d101      	bne.n	800ce7a <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800ce76:	2301      	movs	r3, #1
 800ce78:	e248      	b.n	800d30c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800ce80:	2b01      	cmp	r3, #1
 800ce82:	d101      	bne.n	800ce88 <HAL_SPI_Receive+0x58>
 800ce84:	2302      	movs	r3, #2
 800ce86:	e241      	b.n	800d30c <HAL_SPI_Receive+0x4dc>
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	2201      	movs	r2, #1
 800ce8c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	2204      	movs	r2, #4
 800ce94:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	68ba      	ldr	r2, [r7, #8]
 800cea4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	88fa      	ldrh	r2, [r7, #6]
 800ceaa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	88fa      	ldrh	r2, [r7, #6]
 800ceb2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	2200      	movs	r2, #0
 800ceba:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	2200      	movs	r2, #0
 800cec0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	2200      	movs	r2, #0
 800cec8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	2200      	movs	r2, #0
 800ced0:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	2200      	movs	r2, #0
 800ced6:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	689b      	ldr	r3, [r3, #8]
 800cedc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800cee0:	d108      	bne.n	800cef4 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	681a      	ldr	r2, [r3, #0]
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800cef0:	601a      	str	r2, [r3, #0]
 800cef2:	e009      	b.n	800cf08 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	68db      	ldr	r3, [r3, #12]
 800cefa:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800cf06:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	685a      	ldr	r2, [r3, #4]
 800cf0e:	4b95      	ldr	r3, [pc, #596]	@ (800d164 <HAL_SPI_Receive+0x334>)
 800cf10:	4013      	ands	r3, r2
 800cf12:	88f9      	ldrh	r1, [r7, #6]
 800cf14:	68fa      	ldr	r2, [r7, #12]
 800cf16:	6812      	ldr	r2, [r2, #0]
 800cf18:	430b      	orrs	r3, r1
 800cf1a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	681a      	ldr	r2, [r3, #0]
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	f042 0201 	orr.w	r2, r2, #1
 800cf2a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	685b      	ldr	r3, [r3, #4]
 800cf30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cf34:	d107      	bne.n	800cf46 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	681a      	ldr	r2, [r3, #0]
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cf44:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	68db      	ldr	r3, [r3, #12]
 800cf4a:	2b0f      	cmp	r3, #15
 800cf4c:	d96c      	bls.n	800d028 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800cf4e:	e064      	b.n	800d01a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	695b      	ldr	r3, [r3, #20]
 800cf56:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	695b      	ldr	r3, [r3, #20]
 800cf5e:	f003 0301 	and.w	r3, r3, #1
 800cf62:	2b01      	cmp	r3, #1
 800cf64:	d114      	bne.n	800cf90 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	681a      	ldr	r2, [r3, #0]
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf6e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800cf70:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf76:	1d1a      	adds	r2, r3, #4
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cf82:	b29b      	uxth	r3, r3
 800cf84:	3b01      	subs	r3, #1
 800cf86:	b29a      	uxth	r2, r3
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cf8e:	e044      	b.n	800d01a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cf96:	b29b      	uxth	r3, r3
 800cf98:	8bfa      	ldrh	r2, [r7, #30]
 800cf9a:	429a      	cmp	r2, r3
 800cf9c:	d919      	bls.n	800cfd2 <HAL_SPI_Receive+0x1a2>
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d014      	beq.n	800cfd2 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	681a      	ldr	r2, [r3, #0]
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cfb0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800cfb2:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cfb8:	1d1a      	adds	r2, r3, #4
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cfc4:	b29b      	uxth	r3, r3
 800cfc6:	3b01      	subs	r3, #1
 800cfc8:	b29a      	uxth	r2, r3
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cfd0:	e023      	b.n	800d01a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cfd2:	f7f8 ff51 	bl	8005e78 <HAL_GetTick>
 800cfd6:	4602      	mov	r2, r0
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	1ad3      	subs	r3, r2, r3
 800cfdc:	683a      	ldr	r2, [r7, #0]
 800cfde:	429a      	cmp	r2, r3
 800cfe0:	d803      	bhi.n	800cfea <HAL_SPI_Receive+0x1ba>
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfe8:	d102      	bne.n	800cff0 <HAL_SPI_Receive+0x1c0>
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d114      	bne.n	800d01a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cff0:	68f8      	ldr	r0, [r7, #12]
 800cff2:	f000 fcd7 	bl	800d9a4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cffc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	2201      	movs	r2, #1
 800d00a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	2200      	movs	r2, #0
 800d012:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800d016:	2303      	movs	r3, #3
 800d018:	e178      	b.n	800d30c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d020:	b29b      	uxth	r3, r3
 800d022:	2b00      	cmp	r3, #0
 800d024:	d194      	bne.n	800cf50 <HAL_SPI_Receive+0x120>
 800d026:	e15e      	b.n	800d2e6 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	68db      	ldr	r3, [r3, #12]
 800d02c:	2b07      	cmp	r3, #7
 800d02e:	f240 8153 	bls.w	800d2d8 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800d032:	e08f      	b.n	800d154 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	695b      	ldr	r3, [r3, #20]
 800d03a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	695b      	ldr	r3, [r3, #20]
 800d042:	f003 0301 	and.w	r3, r3, #1
 800d046:	2b01      	cmp	r3, #1
 800d048:	d114      	bne.n	800d074 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d04e:	69ba      	ldr	r2, [r7, #24]
 800d050:	8812      	ldrh	r2, [r2, #0]
 800d052:	b292      	uxth	r2, r2
 800d054:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d05a:	1c9a      	adds	r2, r3, #2
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d066:	b29b      	uxth	r3, r3
 800d068:	3b01      	subs	r3, #1
 800d06a:	b29a      	uxth	r2, r3
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d072:	e06f      	b.n	800d154 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d07a:	b29b      	uxth	r3, r3
 800d07c:	8bfa      	ldrh	r2, [r7, #30]
 800d07e:	429a      	cmp	r2, r3
 800d080:	d924      	bls.n	800d0cc <HAL_SPI_Receive+0x29c>
 800d082:	693b      	ldr	r3, [r7, #16]
 800d084:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d01f      	beq.n	800d0cc <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d090:	69ba      	ldr	r2, [r7, #24]
 800d092:	8812      	ldrh	r2, [r2, #0]
 800d094:	b292      	uxth	r2, r2
 800d096:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d09c:	1c9a      	adds	r2, r3, #2
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d0a6:	69ba      	ldr	r2, [r7, #24]
 800d0a8:	8812      	ldrh	r2, [r2, #0]
 800d0aa:	b292      	uxth	r2, r2
 800d0ac:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d0b2:	1c9a      	adds	r2, r3, #2
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d0be:	b29b      	uxth	r3, r3
 800d0c0:	3b02      	subs	r3, #2
 800d0c2:	b29a      	uxth	r2, r3
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d0ca:	e043      	b.n	800d154 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d0d2:	b29b      	uxth	r3, r3
 800d0d4:	2b01      	cmp	r3, #1
 800d0d6:	d119      	bne.n	800d10c <HAL_SPI_Receive+0x2dc>
 800d0d8:	693b      	ldr	r3, [r7, #16]
 800d0da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d014      	beq.n	800d10c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d0e6:	69ba      	ldr	r2, [r7, #24]
 800d0e8:	8812      	ldrh	r2, [r2, #0]
 800d0ea:	b292      	uxth	r2, r2
 800d0ec:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d0f2:	1c9a      	adds	r2, r3, #2
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d0fe:	b29b      	uxth	r3, r3
 800d100:	3b01      	subs	r3, #1
 800d102:	b29a      	uxth	r2, r3
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d10a:	e023      	b.n	800d154 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d10c:	f7f8 feb4 	bl	8005e78 <HAL_GetTick>
 800d110:	4602      	mov	r2, r0
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	1ad3      	subs	r3, r2, r3
 800d116:	683a      	ldr	r2, [r7, #0]
 800d118:	429a      	cmp	r2, r3
 800d11a:	d803      	bhi.n	800d124 <HAL_SPI_Receive+0x2f4>
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d122:	d102      	bne.n	800d12a <HAL_SPI_Receive+0x2fa>
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d114      	bne.n	800d154 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d12a:	68f8      	ldr	r0, [r7, #12]
 800d12c:	f000 fc3a 	bl	800d9a4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d136:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	2201      	movs	r2, #1
 800d144:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	2200      	movs	r2, #0
 800d14c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800d150:	2303      	movs	r3, #3
 800d152:	e0db      	b.n	800d30c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d15a:	b29b      	uxth	r3, r3
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	f47f af69 	bne.w	800d034 <HAL_SPI_Receive+0x204>
 800d162:	e0c0      	b.n	800d2e6 <HAL_SPI_Receive+0x4b6>
 800d164:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	695b      	ldr	r3, [r3, #20]
 800d16e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	695b      	ldr	r3, [r3, #20]
 800d176:	f003 0301 	and.w	r3, r3, #1
 800d17a:	2b01      	cmp	r3, #1
 800d17c:	d117      	bne.n	800d1ae <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d18a:	7812      	ldrb	r2, [r2, #0]
 800d18c:	b2d2      	uxtb	r2, r2
 800d18e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d194:	1c5a      	adds	r2, r3, #1
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d1a0:	b29b      	uxth	r3, r3
 800d1a2:	3b01      	subs	r3, #1
 800d1a4:	b29a      	uxth	r2, r3
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d1ac:	e094      	b.n	800d2d8 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d1b4:	b29b      	uxth	r3, r3
 800d1b6:	8bfa      	ldrh	r2, [r7, #30]
 800d1b8:	429a      	cmp	r2, r3
 800d1ba:	d946      	bls.n	800d24a <HAL_SPI_Receive+0x41a>
 800d1bc:	693b      	ldr	r3, [r7, #16]
 800d1be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d041      	beq.n	800d24a <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d1d2:	7812      	ldrb	r2, [r2, #0]
 800d1d4:	b2d2      	uxtb	r2, r2
 800d1d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d1dc:	1c5a      	adds	r2, r3, #1
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d1ee:	7812      	ldrb	r2, [r2, #0]
 800d1f0:	b2d2      	uxtb	r2, r2
 800d1f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d1f8:	1c5a      	adds	r2, r3, #1
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d20a:	7812      	ldrb	r2, [r2, #0]
 800d20c:	b2d2      	uxtb	r2, r2
 800d20e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d214:	1c5a      	adds	r2, r3, #1
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d226:	7812      	ldrb	r2, [r2, #0]
 800d228:	b2d2      	uxtb	r2, r2
 800d22a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d230:	1c5a      	adds	r2, r3, #1
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d23c:	b29b      	uxth	r3, r3
 800d23e:	3b04      	subs	r3, #4
 800d240:	b29a      	uxth	r2, r3
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d248:	e046      	b.n	800d2d8 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d250:	b29b      	uxth	r3, r3
 800d252:	2b03      	cmp	r3, #3
 800d254:	d81c      	bhi.n	800d290 <HAL_SPI_Receive+0x460>
 800d256:	693b      	ldr	r3, [r7, #16]
 800d258:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d017      	beq.n	800d290 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d26c:	7812      	ldrb	r2, [r2, #0]
 800d26e:	b2d2      	uxtb	r2, r2
 800d270:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d276:	1c5a      	adds	r2, r3, #1
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d282:	b29b      	uxth	r3, r3
 800d284:	3b01      	subs	r3, #1
 800d286:	b29a      	uxth	r2, r3
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d28e:	e023      	b.n	800d2d8 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d290:	f7f8 fdf2 	bl	8005e78 <HAL_GetTick>
 800d294:	4602      	mov	r2, r0
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	1ad3      	subs	r3, r2, r3
 800d29a:	683a      	ldr	r2, [r7, #0]
 800d29c:	429a      	cmp	r2, r3
 800d29e:	d803      	bhi.n	800d2a8 <HAL_SPI_Receive+0x478>
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2a6:	d102      	bne.n	800d2ae <HAL_SPI_Receive+0x47e>
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d114      	bne.n	800d2d8 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d2ae:	68f8      	ldr	r0, [r7, #12]
 800d2b0:	f000 fb78 	bl	800d9a4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d2ba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	2201      	movs	r2, #1
 800d2c8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800d2d4:	2303      	movs	r3, #3
 800d2d6:	e019      	b.n	800d30c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d2de:	b29b      	uxth	r3, r3
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	f47f af41 	bne.w	800d168 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d2e6:	68f8      	ldr	r0, [r7, #12]
 800d2e8:	f000 fb5c 	bl	800d9a4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	2201      	movs	r2, #1
 800d2f0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d302:	2b00      	cmp	r3, #0
 800d304:	d001      	beq.n	800d30a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800d306:	2301      	movs	r3, #1
 800d308:	e000      	b.n	800d30c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800d30a:	2300      	movs	r3, #0
  }
}
 800d30c:	4618      	mov	r0, r3
 800d30e:	3720      	adds	r7, #32
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}

0800d314 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b08e      	sub	sp, #56	@ 0x38
 800d318:	af02      	add	r7, sp, #8
 800d31a:	60f8      	str	r0, [r7, #12]
 800d31c:	60b9      	str	r1, [r7, #8]
 800d31e:	607a      	str	r2, [r7, #4]
 800d320:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	3320      	adds	r3, #32
 800d328:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	3330      	adds	r3, #48	@ 0x30
 800d330:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d336:	095b      	lsrs	r3, r3, #5
 800d338:	b29b      	uxth	r3, r3
 800d33a:	3301      	adds	r3, #1
 800d33c:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d33e:	f7f8 fd9b 	bl	8005e78 <HAL_GetTick>
 800d342:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800d344:	887b      	ldrh	r3, [r7, #2]
 800d346:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800d348:	887b      	ldrh	r3, [r7, #2]
 800d34a:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d352:	b2db      	uxtb	r3, r3
 800d354:	2b01      	cmp	r3, #1
 800d356:	d001      	beq.n	800d35c <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800d358:	2302      	movs	r3, #2
 800d35a:	e310      	b.n	800d97e <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800d35c:	68bb      	ldr	r3, [r7, #8]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d005      	beq.n	800d36e <HAL_SPI_TransmitReceive+0x5a>
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d002      	beq.n	800d36e <HAL_SPI_TransmitReceive+0x5a>
 800d368:	887b      	ldrh	r3, [r7, #2]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d101      	bne.n	800d372 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800d36e:	2301      	movs	r3, #1
 800d370:	e305      	b.n	800d97e <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800d378:	2b01      	cmp	r3, #1
 800d37a:	d101      	bne.n	800d380 <HAL_SPI_TransmitReceive+0x6c>
 800d37c:	2302      	movs	r3, #2
 800d37e:	e2fe      	b.n	800d97e <HAL_SPI_TransmitReceive+0x66a>
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	2201      	movs	r2, #1
 800d384:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	2205      	movs	r2, #5
 800d38c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	2200      	movs	r2, #0
 800d394:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	687a      	ldr	r2, [r7, #4]
 800d39c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	887a      	ldrh	r2, [r7, #2]
 800d3a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	887a      	ldrh	r2, [r7, #2]
 800d3aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	68ba      	ldr	r2, [r7, #8]
 800d3b2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	887a      	ldrh	r2, [r7, #2]
 800d3b8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	887a      	ldrh	r2, [r7, #2]
 800d3c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	68da      	ldr	r2, [r3, #12]
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800d3de:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	4a70      	ldr	r2, [pc, #448]	@ (800d5a8 <HAL_SPI_TransmitReceive+0x294>)
 800d3e6:	4293      	cmp	r3, r2
 800d3e8:	d009      	beq.n	800d3fe <HAL_SPI_TransmitReceive+0xea>
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	4a6f      	ldr	r2, [pc, #444]	@ (800d5ac <HAL_SPI_TransmitReceive+0x298>)
 800d3f0:	4293      	cmp	r3, r2
 800d3f2:	d004      	beq.n	800d3fe <HAL_SPI_TransmitReceive+0xea>
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	4a6d      	ldr	r2, [pc, #436]	@ (800d5b0 <HAL_SPI_TransmitReceive+0x29c>)
 800d3fa:	4293      	cmp	r3, r2
 800d3fc:	d102      	bne.n	800d404 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800d3fe:	2310      	movs	r3, #16
 800d400:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d402:	e001      	b.n	800d408 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800d404:	2308      	movs	r3, #8
 800d406:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	685a      	ldr	r2, [r3, #4]
 800d40e:	4b69      	ldr	r3, [pc, #420]	@ (800d5b4 <HAL_SPI_TransmitReceive+0x2a0>)
 800d410:	4013      	ands	r3, r2
 800d412:	8879      	ldrh	r1, [r7, #2]
 800d414:	68fa      	ldr	r2, [r7, #12]
 800d416:	6812      	ldr	r2, [r2, #0]
 800d418:	430b      	orrs	r3, r1
 800d41a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	681a      	ldr	r2, [r3, #0]
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	f042 0201 	orr.w	r2, r2, #1
 800d42a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	685b      	ldr	r3, [r3, #4]
 800d430:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d434:	d107      	bne.n	800d446 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	681a      	ldr	r2, [r3, #0]
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d444:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	68db      	ldr	r3, [r3, #12]
 800d44a:	2b0f      	cmp	r3, #15
 800d44c:	f240 80a2 	bls.w	800d594 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800d450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d452:	089b      	lsrs	r3, r3, #2
 800d454:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d456:	e094      	b.n	800d582 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	695b      	ldr	r3, [r3, #20]
 800d45e:	f003 0302 	and.w	r3, r3, #2
 800d462:	2b02      	cmp	r3, #2
 800d464:	d120      	bne.n	800d4a8 <HAL_SPI_TransmitReceive+0x194>
 800d466:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d01d      	beq.n	800d4a8 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800d46c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d46e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800d470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d472:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800d474:	429a      	cmp	r2, r3
 800d476:	d217      	bcs.n	800d4a8 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	6812      	ldr	r2, [r2, #0]
 800d482:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d488:	1d1a      	adds	r2, r3, #4
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d494:	b29b      	uxth	r3, r3
 800d496:	3b01      	subs	r3, #1
 800d498:	b29a      	uxth	r2, r3
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d4a6:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	695b      	ldr	r3, [r3, #20]
 800d4ae:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800d4b0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d065      	beq.n	800d582 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	695b      	ldr	r3, [r3, #20]
 800d4bc:	f003 0301 	and.w	r3, r3, #1
 800d4c0:	2b01      	cmp	r3, #1
 800d4c2:	d118      	bne.n	800d4f6 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	681a      	ldr	r2, [r3, #0]
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d4cc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800d4ce:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d4d4:	1d1a      	adds	r2, r3, #4
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d4e0:	b29b      	uxth	r3, r3
 800d4e2:	3b01      	subs	r3, #1
 800d4e4:	b29a      	uxth	r2, r3
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d4f2:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d4f4:	e045      	b.n	800d582 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800d4f6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d4f8:	8bfb      	ldrh	r3, [r7, #30]
 800d4fa:	429a      	cmp	r2, r3
 800d4fc:	d21d      	bcs.n	800d53a <HAL_SPI_TransmitReceive+0x226>
 800d4fe:	697b      	ldr	r3, [r7, #20]
 800d500:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d504:	2b00      	cmp	r3, #0
 800d506:	d018      	beq.n	800d53a <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	681a      	ldr	r2, [r3, #0]
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d510:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800d512:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d518:	1d1a      	adds	r2, r3, #4
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d524:	b29b      	uxth	r3, r3
 800d526:	3b01      	subs	r3, #1
 800d528:	b29a      	uxth	r2, r3
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d536:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d538:	e023      	b.n	800d582 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d53a:	f7f8 fc9d 	bl	8005e78 <HAL_GetTick>
 800d53e:	4602      	mov	r2, r0
 800d540:	69bb      	ldr	r3, [r7, #24]
 800d542:	1ad3      	subs	r3, r2, r3
 800d544:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d546:	429a      	cmp	r2, r3
 800d548:	d803      	bhi.n	800d552 <HAL_SPI_TransmitReceive+0x23e>
 800d54a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d54c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d550:	d102      	bne.n	800d558 <HAL_SPI_TransmitReceive+0x244>
 800d552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d554:	2b00      	cmp	r3, #0
 800d556:	d114      	bne.n	800d582 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800d558:	68f8      	ldr	r0, [r7, #12]
 800d55a:	f000 fa23 	bl	800d9a4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d564:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	2201      	movs	r2, #1
 800d572:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	2200      	movs	r2, #0
 800d57a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800d57e:	2303      	movs	r3, #3
 800d580:	e1fd      	b.n	800d97e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d582:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d584:	2b00      	cmp	r3, #0
 800d586:	f47f af67 	bne.w	800d458 <HAL_SPI_TransmitReceive+0x144>
 800d58a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	f47f af63 	bne.w	800d458 <HAL_SPI_TransmitReceive+0x144>
 800d592:	e1ce      	b.n	800d932 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	68db      	ldr	r3, [r3, #12]
 800d598:	2b07      	cmp	r3, #7
 800d59a:	f240 81c2 	bls.w	800d922 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800d59e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5a0:	085b      	lsrs	r3, r3, #1
 800d5a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d5a4:	e0c9      	b.n	800d73a <HAL_SPI_TransmitReceive+0x426>
 800d5a6:	bf00      	nop
 800d5a8:	40013000 	.word	0x40013000
 800d5ac:	40003800 	.word	0x40003800
 800d5b0:	40003c00 	.word	0x40003c00
 800d5b4:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	695b      	ldr	r3, [r3, #20]
 800d5be:	f003 0302 	and.w	r3, r3, #2
 800d5c2:	2b02      	cmp	r3, #2
 800d5c4:	d11f      	bne.n	800d606 <HAL_SPI_TransmitReceive+0x2f2>
 800d5c6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d01c      	beq.n	800d606 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800d5cc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d5ce:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800d5d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5d2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	d216      	bcs.n	800d606 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d5dc:	881a      	ldrh	r2, [r3, #0]
 800d5de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5e0:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d5e6:	1c9a      	adds	r2, r3, #2
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d5f2:	b29b      	uxth	r3, r3
 800d5f4:	3b01      	subs	r3, #1
 800d5f6:	b29a      	uxth	r2, r3
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d604:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	695b      	ldr	r3, [r3, #20]
 800d60c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800d60e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d610:	2b00      	cmp	r3, #0
 800d612:	f000 8092 	beq.w	800d73a <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	695b      	ldr	r3, [r3, #20]
 800d61c:	f003 0301 	and.w	r3, r3, #1
 800d620:	2b01      	cmp	r3, #1
 800d622:	d118      	bne.n	800d656 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d628:	6a3a      	ldr	r2, [r7, #32]
 800d62a:	8812      	ldrh	r2, [r2, #0]
 800d62c:	b292      	uxth	r2, r2
 800d62e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d634:	1c9a      	adds	r2, r3, #2
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d640:	b29b      	uxth	r3, r3
 800d642:	3b01      	subs	r3, #1
 800d644:	b29a      	uxth	r2, r3
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d652:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d654:	e071      	b.n	800d73a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800d656:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d658:	8bfb      	ldrh	r3, [r7, #30]
 800d65a:	429a      	cmp	r2, r3
 800d65c:	d228      	bcs.n	800d6b0 <HAL_SPI_TransmitReceive+0x39c>
 800d65e:	697b      	ldr	r3, [r7, #20]
 800d660:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d664:	2b00      	cmp	r3, #0
 800d666:	d023      	beq.n	800d6b0 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d66c:	6a3a      	ldr	r2, [r7, #32]
 800d66e:	8812      	ldrh	r2, [r2, #0]
 800d670:	b292      	uxth	r2, r2
 800d672:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d678:	1c9a      	adds	r2, r3, #2
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d682:	6a3a      	ldr	r2, [r7, #32]
 800d684:	8812      	ldrh	r2, [r2, #0]
 800d686:	b292      	uxth	r2, r2
 800d688:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d68e:	1c9a      	adds	r2, r3, #2
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d69a:	b29b      	uxth	r3, r3
 800d69c:	3b02      	subs	r3, #2
 800d69e:	b29a      	uxth	r2, r3
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d6ac:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d6ae:	e044      	b.n	800d73a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800d6b0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d6b2:	2b01      	cmp	r3, #1
 800d6b4:	d11d      	bne.n	800d6f2 <HAL_SPI_TransmitReceive+0x3de>
 800d6b6:	697b      	ldr	r3, [r7, #20]
 800d6b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d018      	beq.n	800d6f2 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d6c4:	6a3a      	ldr	r2, [r7, #32]
 800d6c6:	8812      	ldrh	r2, [r2, #0]
 800d6c8:	b292      	uxth	r2, r2
 800d6ca:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d6d0:	1c9a      	adds	r2, r3, #2
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d6dc:	b29b      	uxth	r3, r3
 800d6de:	3b01      	subs	r3, #1
 800d6e0:	b29a      	uxth	r2, r3
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d6ee:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d6f0:	e023      	b.n	800d73a <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d6f2:	f7f8 fbc1 	bl	8005e78 <HAL_GetTick>
 800d6f6:	4602      	mov	r2, r0
 800d6f8:	69bb      	ldr	r3, [r7, #24]
 800d6fa:	1ad3      	subs	r3, r2, r3
 800d6fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d6fe:	429a      	cmp	r2, r3
 800d700:	d803      	bhi.n	800d70a <HAL_SPI_TransmitReceive+0x3f6>
 800d702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d704:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d708:	d102      	bne.n	800d710 <HAL_SPI_TransmitReceive+0x3fc>
 800d70a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d114      	bne.n	800d73a <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800d710:	68f8      	ldr	r0, [r7, #12]
 800d712:	f000 f947 	bl	800d9a4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d71c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	2201      	movs	r2, #1
 800d72a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	2200      	movs	r2, #0
 800d732:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800d736:	2303      	movs	r3, #3
 800d738:	e121      	b.n	800d97e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d73a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	f47f af3b 	bne.w	800d5b8 <HAL_SPI_TransmitReceive+0x2a4>
 800d742:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d744:	2b00      	cmp	r3, #0
 800d746:	f47f af37 	bne.w	800d5b8 <HAL_SPI_TransmitReceive+0x2a4>
 800d74a:	e0f2      	b.n	800d932 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	695b      	ldr	r3, [r3, #20]
 800d752:	f003 0302 	and.w	r3, r3, #2
 800d756:	2b02      	cmp	r3, #2
 800d758:	d121      	bne.n	800d79e <HAL_SPI_TransmitReceive+0x48a>
 800d75a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d01e      	beq.n	800d79e <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800d760:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d762:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800d764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d766:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800d768:	429a      	cmp	r2, r3
 800d76a:	d218      	bcs.n	800d79e <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	3320      	adds	r3, #32
 800d776:	7812      	ldrb	r2, [r2, #0]
 800d778:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d77e:	1c5a      	adds	r2, r3, #1
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d78a:	b29b      	uxth	r3, r3
 800d78c:	3b01      	subs	r3, #1
 800d78e:	b29a      	uxth	r2, r3
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d79c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	695b      	ldr	r3, [r3, #20]
 800d7a4:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800d7a6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	f000 80ba 	beq.w	800d922 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	695b      	ldr	r3, [r3, #20]
 800d7b4:	f003 0301 	and.w	r3, r3, #1
 800d7b8:	2b01      	cmp	r3, #1
 800d7ba:	d11b      	bne.n	800d7f4 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d7c8:	7812      	ldrb	r2, [r2, #0]
 800d7ca:	b2d2      	uxtb	r2, r2
 800d7cc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d7d2:	1c5a      	adds	r2, r3, #1
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d7de:	b29b      	uxth	r3, r3
 800d7e0:	3b01      	subs	r3, #1
 800d7e2:	b29a      	uxth	r2, r3
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d7f0:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d7f2:	e096      	b.n	800d922 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800d7f4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d7f6:	8bfb      	ldrh	r3, [r7, #30]
 800d7f8:	429a      	cmp	r2, r3
 800d7fa:	d24a      	bcs.n	800d892 <HAL_SPI_TransmitReceive+0x57e>
 800d7fc:	697b      	ldr	r3, [r7, #20]
 800d7fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d802:	2b00      	cmp	r3, #0
 800d804:	d045      	beq.n	800d892 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d812:	7812      	ldrb	r2, [r2, #0]
 800d814:	b2d2      	uxtb	r2, r2
 800d816:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d81c:	1c5a      	adds	r2, r3, #1
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d82e:	7812      	ldrb	r2, [r2, #0]
 800d830:	b2d2      	uxtb	r2, r2
 800d832:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d838:	1c5a      	adds	r2, r3, #1
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d84a:	7812      	ldrb	r2, [r2, #0]
 800d84c:	b2d2      	uxtb	r2, r2
 800d84e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d854:	1c5a      	adds	r2, r3, #1
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d866:	7812      	ldrb	r2, [r2, #0]
 800d868:	b2d2      	uxtb	r2, r2
 800d86a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d870:	1c5a      	adds	r2, r3, #1
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d87c:	b29b      	uxth	r3, r3
 800d87e:	3b04      	subs	r3, #4
 800d880:	b29a      	uxth	r2, r3
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d88e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d890:	e047      	b.n	800d922 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800d892:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d894:	2b03      	cmp	r3, #3
 800d896:	d820      	bhi.n	800d8da <HAL_SPI_TransmitReceive+0x5c6>
 800d898:	697b      	ldr	r3, [r7, #20]
 800d89a:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d01b      	beq.n	800d8da <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d8ae:	7812      	ldrb	r2, [r2, #0]
 800d8b0:	b2d2      	uxtb	r2, r2
 800d8b2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d8b8:	1c5a      	adds	r2, r3, #1
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d8c4:	b29b      	uxth	r3, r3
 800d8c6:	3b01      	subs	r3, #1
 800d8c8:	b29a      	uxth	r2, r3
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d8d6:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d8d8:	e023      	b.n	800d922 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d8da:	f7f8 facd 	bl	8005e78 <HAL_GetTick>
 800d8de:	4602      	mov	r2, r0
 800d8e0:	69bb      	ldr	r3, [r7, #24]
 800d8e2:	1ad3      	subs	r3, r2, r3
 800d8e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d8e6:	429a      	cmp	r2, r3
 800d8e8:	d803      	bhi.n	800d8f2 <HAL_SPI_TransmitReceive+0x5de>
 800d8ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8f0:	d102      	bne.n	800d8f8 <HAL_SPI_TransmitReceive+0x5e4>
 800d8f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d114      	bne.n	800d922 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800d8f8:	68f8      	ldr	r0, [r7, #12]
 800d8fa:	f000 f853 	bl	800d9a4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d904:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	2201      	movs	r2, #1
 800d912:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	2200      	movs	r2, #0
 800d91a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800d91e:	2303      	movs	r3, #3
 800d920:	e02d      	b.n	800d97e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d922:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d924:	2b00      	cmp	r3, #0
 800d926:	f47f af11 	bne.w	800d74c <HAL_SPI_TransmitReceive+0x438>
 800d92a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	f47f af0d 	bne.w	800d74c <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800d932:	69bb      	ldr	r3, [r7, #24]
 800d934:	9300      	str	r3, [sp, #0]
 800d936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d938:	2200      	movs	r2, #0
 800d93a:	2108      	movs	r1, #8
 800d93c:	68f8      	ldr	r0, [r7, #12]
 800d93e:	f000 f8d1 	bl	800dae4 <SPI_WaitOnFlagUntilTimeout>
 800d942:	4603      	mov	r3, r0
 800d944:	2b00      	cmp	r3, #0
 800d946:	d007      	beq.n	800d958 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d94e:	f043 0220 	orr.w	r2, r3, #32
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d958:	68f8      	ldr	r0, [r7, #12]
 800d95a:	f000 f823 	bl	800d9a4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	2201      	movs	r2, #1
 800d962:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	2200      	movs	r2, #0
 800d96a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d974:	2b00      	cmp	r3, #0
 800d976:	d001      	beq.n	800d97c <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800d978:	2301      	movs	r3, #1
 800d97a:	e000      	b.n	800d97e <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800d97c:	2300      	movs	r3, #0
  }
}
 800d97e:	4618      	mov	r0, r3
 800d980:	3730      	adds	r7, #48	@ 0x30
 800d982:	46bd      	mov	sp, r7
 800d984:	bd80      	pop	{r7, pc}
 800d986:	bf00      	nop

0800d988 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800d988:	b480      	push	{r7}
 800d98a:	b083      	sub	sp, #12
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d996:	b2db      	uxtb	r3, r3
}
 800d998:	4618      	mov	r0, r3
 800d99a:	370c      	adds	r7, #12
 800d99c:	46bd      	mov	sp, r7
 800d99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a2:	4770      	bx	lr

0800d9a4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d9a4:	b480      	push	{r7}
 800d9a6:	b085      	sub	sp, #20
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	695b      	ldr	r3, [r3, #20]
 800d9b2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	699a      	ldr	r2, [r3, #24]
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	f042 0208 	orr.w	r2, r2, #8
 800d9c2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	699a      	ldr	r2, [r3, #24]
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	f042 0210 	orr.w	r2, r2, #16
 800d9d2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	681a      	ldr	r2, [r3, #0]
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	f022 0201 	bic.w	r2, r2, #1
 800d9e2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	6919      	ldr	r1, [r3, #16]
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681a      	ldr	r2, [r3, #0]
 800d9ee:	4b3c      	ldr	r3, [pc, #240]	@ (800dae0 <SPI_CloseTransfer+0x13c>)
 800d9f0:	400b      	ands	r3, r1
 800d9f2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	689a      	ldr	r2, [r3, #8]
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800da02:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800da0a:	b2db      	uxtb	r3, r3
 800da0c:	2b04      	cmp	r3, #4
 800da0e:	d014      	beq.n	800da3a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	f003 0320 	and.w	r3, r3, #32
 800da16:	2b00      	cmp	r3, #0
 800da18:	d00f      	beq.n	800da3a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800da20:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	699a      	ldr	r2, [r3, #24]
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	f042 0220 	orr.w	r2, r2, #32
 800da38:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800da40:	b2db      	uxtb	r3, r3
 800da42:	2b03      	cmp	r3, #3
 800da44:	d014      	beq.n	800da70 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d00f      	beq.n	800da70 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800da56:	f043 0204 	orr.w	r2, r3, #4
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	699a      	ldr	r2, [r3, #24]
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800da6e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800da76:	2b00      	cmp	r3, #0
 800da78:	d00f      	beq.n	800da9a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800da80:	f043 0201 	orr.w	r2, r3, #1
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	699a      	ldr	r2, [r3, #24]
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800da98:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d00f      	beq.n	800dac4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800daaa:	f043 0208 	orr.w	r2, r3, #8
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	699a      	ldr	r2, [r3, #24]
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800dac2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2200      	movs	r2, #0
 800dac8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2200      	movs	r2, #0
 800dad0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800dad4:	bf00      	nop
 800dad6:	3714      	adds	r7, #20
 800dad8:	46bd      	mov	sp, r7
 800dada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dade:	4770      	bx	lr
 800dae0:	fffffc90 	.word	0xfffffc90

0800dae4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b084      	sub	sp, #16
 800dae8:	af00      	add	r7, sp, #0
 800daea:	60f8      	str	r0, [r7, #12]
 800daec:	60b9      	str	r1, [r7, #8]
 800daee:	603b      	str	r3, [r7, #0]
 800daf0:	4613      	mov	r3, r2
 800daf2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800daf4:	e010      	b.n	800db18 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800daf6:	f7f8 f9bf 	bl	8005e78 <HAL_GetTick>
 800dafa:	4602      	mov	r2, r0
 800dafc:	69bb      	ldr	r3, [r7, #24]
 800dafe:	1ad3      	subs	r3, r2, r3
 800db00:	683a      	ldr	r2, [r7, #0]
 800db02:	429a      	cmp	r2, r3
 800db04:	d803      	bhi.n	800db0e <SPI_WaitOnFlagUntilTimeout+0x2a>
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db0c:	d102      	bne.n	800db14 <SPI_WaitOnFlagUntilTimeout+0x30>
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d101      	bne.n	800db18 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800db14:	2303      	movs	r3, #3
 800db16:	e00f      	b.n	800db38 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	695a      	ldr	r2, [r3, #20]
 800db1e:	68bb      	ldr	r3, [r7, #8]
 800db20:	4013      	ands	r3, r2
 800db22:	68ba      	ldr	r2, [r7, #8]
 800db24:	429a      	cmp	r2, r3
 800db26:	bf0c      	ite	eq
 800db28:	2301      	moveq	r3, #1
 800db2a:	2300      	movne	r3, #0
 800db2c:	b2db      	uxtb	r3, r3
 800db2e:	461a      	mov	r2, r3
 800db30:	79fb      	ldrb	r3, [r7, #7]
 800db32:	429a      	cmp	r2, r3
 800db34:	d0df      	beq.n	800daf6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800db36:	2300      	movs	r3, #0
}
 800db38:	4618      	mov	r0, r3
 800db3a:	3710      	adds	r7, #16
 800db3c:	46bd      	mov	sp, r7
 800db3e:	bd80      	pop	{r7, pc}

0800db40 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800db40:	b480      	push	{r7}
 800db42:	b085      	sub	sp, #20
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db4c:	095b      	lsrs	r3, r3, #5
 800db4e:	3301      	adds	r3, #1
 800db50:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	68db      	ldr	r3, [r3, #12]
 800db56:	3301      	adds	r3, #1
 800db58:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800db5a:	68bb      	ldr	r3, [r7, #8]
 800db5c:	3307      	adds	r3, #7
 800db5e:	08db      	lsrs	r3, r3, #3
 800db60:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800db62:	68bb      	ldr	r3, [r7, #8]
 800db64:	68fa      	ldr	r2, [r7, #12]
 800db66:	fb02 f303 	mul.w	r3, r2, r3
}
 800db6a:	4618      	mov	r0, r3
 800db6c:	3714      	adds	r7, #20
 800db6e:	46bd      	mov	sp, r7
 800db70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db74:	4770      	bx	lr

0800db76 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800db76:	b580      	push	{r7, lr}
 800db78:	b082      	sub	sp, #8
 800db7a:	af00      	add	r7, sp, #0
 800db7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d101      	bne.n	800db88 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800db84:	2301      	movs	r3, #1
 800db86:	e049      	b.n	800dc1c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800db8e:	b2db      	uxtb	r3, r3
 800db90:	2b00      	cmp	r3, #0
 800db92:	d106      	bne.n	800dba2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2200      	movs	r2, #0
 800db98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f7f5 fa9b 	bl	80030d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	2202      	movs	r2, #2
 800dba6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681a      	ldr	r2, [r3, #0]
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	3304      	adds	r3, #4
 800dbb2:	4619      	mov	r1, r3
 800dbb4:	4610      	mov	r0, r2
 800dbb6:	f000 fc57 	bl	800e468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2201      	movs	r2, #1
 800dbbe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	2201      	movs	r2, #1
 800dbc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2201      	movs	r2, #1
 800dbce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	2201      	movs	r2, #1
 800dbd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	2201      	movs	r2, #1
 800dbde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	2201      	movs	r2, #1
 800dbe6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	2201      	movs	r2, #1
 800dbee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	2201      	movs	r2, #1
 800dbf6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	2201      	movs	r2, #1
 800dbfe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	2201      	movs	r2, #1
 800dc06:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	2201      	movs	r2, #1
 800dc0e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	2201      	movs	r2, #1
 800dc16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800dc1a:	2300      	movs	r3, #0
}
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	3708      	adds	r7, #8
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}

0800dc24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dc24:	b480      	push	{r7}
 800dc26:	b085      	sub	sp, #20
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dc32:	b2db      	uxtb	r3, r3
 800dc34:	2b01      	cmp	r3, #1
 800dc36:	d001      	beq.n	800dc3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800dc38:	2301      	movs	r3, #1
 800dc3a:	e054      	b.n	800dce6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2202      	movs	r2, #2
 800dc40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	68da      	ldr	r2, [r3, #12]
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	f042 0201 	orr.w	r2, r2, #1
 800dc52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	4a26      	ldr	r2, [pc, #152]	@ (800dcf4 <HAL_TIM_Base_Start_IT+0xd0>)
 800dc5a:	4293      	cmp	r3, r2
 800dc5c:	d022      	beq.n	800dca4 <HAL_TIM_Base_Start_IT+0x80>
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dc66:	d01d      	beq.n	800dca4 <HAL_TIM_Base_Start_IT+0x80>
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	4a22      	ldr	r2, [pc, #136]	@ (800dcf8 <HAL_TIM_Base_Start_IT+0xd4>)
 800dc6e:	4293      	cmp	r3, r2
 800dc70:	d018      	beq.n	800dca4 <HAL_TIM_Base_Start_IT+0x80>
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	4a21      	ldr	r2, [pc, #132]	@ (800dcfc <HAL_TIM_Base_Start_IT+0xd8>)
 800dc78:	4293      	cmp	r3, r2
 800dc7a:	d013      	beq.n	800dca4 <HAL_TIM_Base_Start_IT+0x80>
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	4a1f      	ldr	r2, [pc, #124]	@ (800dd00 <HAL_TIM_Base_Start_IT+0xdc>)
 800dc82:	4293      	cmp	r3, r2
 800dc84:	d00e      	beq.n	800dca4 <HAL_TIM_Base_Start_IT+0x80>
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	4a1e      	ldr	r2, [pc, #120]	@ (800dd04 <HAL_TIM_Base_Start_IT+0xe0>)
 800dc8c:	4293      	cmp	r3, r2
 800dc8e:	d009      	beq.n	800dca4 <HAL_TIM_Base_Start_IT+0x80>
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	4a1c      	ldr	r2, [pc, #112]	@ (800dd08 <HAL_TIM_Base_Start_IT+0xe4>)
 800dc96:	4293      	cmp	r3, r2
 800dc98:	d004      	beq.n	800dca4 <HAL_TIM_Base_Start_IT+0x80>
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	4a1b      	ldr	r2, [pc, #108]	@ (800dd0c <HAL_TIM_Base_Start_IT+0xe8>)
 800dca0:	4293      	cmp	r3, r2
 800dca2:	d115      	bne.n	800dcd0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	689a      	ldr	r2, [r3, #8]
 800dcaa:	4b19      	ldr	r3, [pc, #100]	@ (800dd10 <HAL_TIM_Base_Start_IT+0xec>)
 800dcac:	4013      	ands	r3, r2
 800dcae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	2b06      	cmp	r3, #6
 800dcb4:	d015      	beq.n	800dce2 <HAL_TIM_Base_Start_IT+0xbe>
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dcbc:	d011      	beq.n	800dce2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	681a      	ldr	r2, [r3, #0]
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	f042 0201 	orr.w	r2, r2, #1
 800dccc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dcce:	e008      	b.n	800dce2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	681a      	ldr	r2, [r3, #0]
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	f042 0201 	orr.w	r2, r2, #1
 800dcde:	601a      	str	r2, [r3, #0]
 800dce0:	e000      	b.n	800dce4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dce2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dce4:	2300      	movs	r3, #0
}
 800dce6:	4618      	mov	r0, r3
 800dce8:	3714      	adds	r7, #20
 800dcea:	46bd      	mov	sp, r7
 800dcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf0:	4770      	bx	lr
 800dcf2:	bf00      	nop
 800dcf4:	40010000 	.word	0x40010000
 800dcf8:	40000400 	.word	0x40000400
 800dcfc:	40000800 	.word	0x40000800
 800dd00:	40000c00 	.word	0x40000c00
 800dd04:	40010400 	.word	0x40010400
 800dd08:	40001800 	.word	0x40001800
 800dd0c:	40014000 	.word	0x40014000
 800dd10:	00010007 	.word	0x00010007

0800dd14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b082      	sub	sp, #8
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d101      	bne.n	800dd26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800dd22:	2301      	movs	r3, #1
 800dd24:	e049      	b.n	800ddba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dd2c:	b2db      	uxtb	r3, r3
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d106      	bne.n	800dd40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	2200      	movs	r2, #0
 800dd36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800dd3a:	6878      	ldr	r0, [r7, #4]
 800dd3c:	f7f5 f97e 	bl	800303c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	2202      	movs	r2, #2
 800dd44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681a      	ldr	r2, [r3, #0]
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	3304      	adds	r3, #4
 800dd50:	4619      	mov	r1, r3
 800dd52:	4610      	mov	r0, r2
 800dd54:	f000 fb88 	bl	800e468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	2201      	movs	r2, #1
 800dd5c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2201      	movs	r2, #1
 800dd64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	2201      	movs	r2, #1
 800dd6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2201      	movs	r2, #1
 800dd74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2201      	movs	r2, #1
 800dd7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2201      	movs	r2, #1
 800dd84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	2201      	movs	r2, #1
 800dd8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2201      	movs	r2, #1
 800dd94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2201      	movs	r2, #1
 800dd9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2201      	movs	r2, #1
 800dda4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	2201      	movs	r2, #1
 800ddac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	2201      	movs	r2, #1
 800ddb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ddb8:	2300      	movs	r3, #0
}
 800ddba:	4618      	mov	r0, r3
 800ddbc:	3708      	adds	r7, #8
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd80      	pop	{r7, pc}
	...

0800ddc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b084      	sub	sp, #16
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
 800ddcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d109      	bne.n	800dde8 <HAL_TIM_PWM_Start+0x24>
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ddda:	b2db      	uxtb	r3, r3
 800dddc:	2b01      	cmp	r3, #1
 800ddde:	bf14      	ite	ne
 800dde0:	2301      	movne	r3, #1
 800dde2:	2300      	moveq	r3, #0
 800dde4:	b2db      	uxtb	r3, r3
 800dde6:	e03c      	b.n	800de62 <HAL_TIM_PWM_Start+0x9e>
 800dde8:	683b      	ldr	r3, [r7, #0]
 800ddea:	2b04      	cmp	r3, #4
 800ddec:	d109      	bne.n	800de02 <HAL_TIM_PWM_Start+0x3e>
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ddf4:	b2db      	uxtb	r3, r3
 800ddf6:	2b01      	cmp	r3, #1
 800ddf8:	bf14      	ite	ne
 800ddfa:	2301      	movne	r3, #1
 800ddfc:	2300      	moveq	r3, #0
 800ddfe:	b2db      	uxtb	r3, r3
 800de00:	e02f      	b.n	800de62 <HAL_TIM_PWM_Start+0x9e>
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	2b08      	cmp	r3, #8
 800de06:	d109      	bne.n	800de1c <HAL_TIM_PWM_Start+0x58>
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800de0e:	b2db      	uxtb	r3, r3
 800de10:	2b01      	cmp	r3, #1
 800de12:	bf14      	ite	ne
 800de14:	2301      	movne	r3, #1
 800de16:	2300      	moveq	r3, #0
 800de18:	b2db      	uxtb	r3, r3
 800de1a:	e022      	b.n	800de62 <HAL_TIM_PWM_Start+0x9e>
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	2b0c      	cmp	r3, #12
 800de20:	d109      	bne.n	800de36 <HAL_TIM_PWM_Start+0x72>
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800de28:	b2db      	uxtb	r3, r3
 800de2a:	2b01      	cmp	r3, #1
 800de2c:	bf14      	ite	ne
 800de2e:	2301      	movne	r3, #1
 800de30:	2300      	moveq	r3, #0
 800de32:	b2db      	uxtb	r3, r3
 800de34:	e015      	b.n	800de62 <HAL_TIM_PWM_Start+0x9e>
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	2b10      	cmp	r3, #16
 800de3a:	d109      	bne.n	800de50 <HAL_TIM_PWM_Start+0x8c>
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800de42:	b2db      	uxtb	r3, r3
 800de44:	2b01      	cmp	r3, #1
 800de46:	bf14      	ite	ne
 800de48:	2301      	movne	r3, #1
 800de4a:	2300      	moveq	r3, #0
 800de4c:	b2db      	uxtb	r3, r3
 800de4e:	e008      	b.n	800de62 <HAL_TIM_PWM_Start+0x9e>
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800de56:	b2db      	uxtb	r3, r3
 800de58:	2b01      	cmp	r3, #1
 800de5a:	bf14      	ite	ne
 800de5c:	2301      	movne	r3, #1
 800de5e:	2300      	moveq	r3, #0
 800de60:	b2db      	uxtb	r3, r3
 800de62:	2b00      	cmp	r3, #0
 800de64:	d001      	beq.n	800de6a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800de66:	2301      	movs	r3, #1
 800de68:	e0a1      	b.n	800dfae <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800de6a:	683b      	ldr	r3, [r7, #0]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d104      	bne.n	800de7a <HAL_TIM_PWM_Start+0xb6>
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2202      	movs	r2, #2
 800de74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800de78:	e023      	b.n	800dec2 <HAL_TIM_PWM_Start+0xfe>
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	2b04      	cmp	r3, #4
 800de7e:	d104      	bne.n	800de8a <HAL_TIM_PWM_Start+0xc6>
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	2202      	movs	r2, #2
 800de84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800de88:	e01b      	b.n	800dec2 <HAL_TIM_PWM_Start+0xfe>
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	2b08      	cmp	r3, #8
 800de8e:	d104      	bne.n	800de9a <HAL_TIM_PWM_Start+0xd6>
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2202      	movs	r2, #2
 800de94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800de98:	e013      	b.n	800dec2 <HAL_TIM_PWM_Start+0xfe>
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	2b0c      	cmp	r3, #12
 800de9e:	d104      	bne.n	800deaa <HAL_TIM_PWM_Start+0xe6>
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2202      	movs	r2, #2
 800dea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800dea8:	e00b      	b.n	800dec2 <HAL_TIM_PWM_Start+0xfe>
 800deaa:	683b      	ldr	r3, [r7, #0]
 800deac:	2b10      	cmp	r3, #16
 800deae:	d104      	bne.n	800deba <HAL_TIM_PWM_Start+0xf6>
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	2202      	movs	r2, #2
 800deb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800deb8:	e003      	b.n	800dec2 <HAL_TIM_PWM_Start+0xfe>
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	2202      	movs	r2, #2
 800debe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	2201      	movs	r2, #1
 800dec8:	6839      	ldr	r1, [r7, #0]
 800deca:	4618      	mov	r0, r3
 800decc:	f000 fe48 	bl	800eb60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	4a38      	ldr	r2, [pc, #224]	@ (800dfb8 <HAL_TIM_PWM_Start+0x1f4>)
 800ded6:	4293      	cmp	r3, r2
 800ded8:	d013      	beq.n	800df02 <HAL_TIM_PWM_Start+0x13e>
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	4a37      	ldr	r2, [pc, #220]	@ (800dfbc <HAL_TIM_PWM_Start+0x1f8>)
 800dee0:	4293      	cmp	r3, r2
 800dee2:	d00e      	beq.n	800df02 <HAL_TIM_PWM_Start+0x13e>
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	4a35      	ldr	r2, [pc, #212]	@ (800dfc0 <HAL_TIM_PWM_Start+0x1fc>)
 800deea:	4293      	cmp	r3, r2
 800deec:	d009      	beq.n	800df02 <HAL_TIM_PWM_Start+0x13e>
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	4a34      	ldr	r2, [pc, #208]	@ (800dfc4 <HAL_TIM_PWM_Start+0x200>)
 800def4:	4293      	cmp	r3, r2
 800def6:	d004      	beq.n	800df02 <HAL_TIM_PWM_Start+0x13e>
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	4a32      	ldr	r2, [pc, #200]	@ (800dfc8 <HAL_TIM_PWM_Start+0x204>)
 800defe:	4293      	cmp	r3, r2
 800df00:	d101      	bne.n	800df06 <HAL_TIM_PWM_Start+0x142>
 800df02:	2301      	movs	r3, #1
 800df04:	e000      	b.n	800df08 <HAL_TIM_PWM_Start+0x144>
 800df06:	2300      	movs	r3, #0
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d007      	beq.n	800df1c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800df1a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	4a25      	ldr	r2, [pc, #148]	@ (800dfb8 <HAL_TIM_PWM_Start+0x1f4>)
 800df22:	4293      	cmp	r3, r2
 800df24:	d022      	beq.n	800df6c <HAL_TIM_PWM_Start+0x1a8>
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800df2e:	d01d      	beq.n	800df6c <HAL_TIM_PWM_Start+0x1a8>
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	4a25      	ldr	r2, [pc, #148]	@ (800dfcc <HAL_TIM_PWM_Start+0x208>)
 800df36:	4293      	cmp	r3, r2
 800df38:	d018      	beq.n	800df6c <HAL_TIM_PWM_Start+0x1a8>
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	4a24      	ldr	r2, [pc, #144]	@ (800dfd0 <HAL_TIM_PWM_Start+0x20c>)
 800df40:	4293      	cmp	r3, r2
 800df42:	d013      	beq.n	800df6c <HAL_TIM_PWM_Start+0x1a8>
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	4a22      	ldr	r2, [pc, #136]	@ (800dfd4 <HAL_TIM_PWM_Start+0x210>)
 800df4a:	4293      	cmp	r3, r2
 800df4c:	d00e      	beq.n	800df6c <HAL_TIM_PWM_Start+0x1a8>
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	4a1a      	ldr	r2, [pc, #104]	@ (800dfbc <HAL_TIM_PWM_Start+0x1f8>)
 800df54:	4293      	cmp	r3, r2
 800df56:	d009      	beq.n	800df6c <HAL_TIM_PWM_Start+0x1a8>
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	4a1e      	ldr	r2, [pc, #120]	@ (800dfd8 <HAL_TIM_PWM_Start+0x214>)
 800df5e:	4293      	cmp	r3, r2
 800df60:	d004      	beq.n	800df6c <HAL_TIM_PWM_Start+0x1a8>
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	4a16      	ldr	r2, [pc, #88]	@ (800dfc0 <HAL_TIM_PWM_Start+0x1fc>)
 800df68:	4293      	cmp	r3, r2
 800df6a:	d115      	bne.n	800df98 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	689a      	ldr	r2, [r3, #8]
 800df72:	4b1a      	ldr	r3, [pc, #104]	@ (800dfdc <HAL_TIM_PWM_Start+0x218>)
 800df74:	4013      	ands	r3, r2
 800df76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	2b06      	cmp	r3, #6
 800df7c:	d015      	beq.n	800dfaa <HAL_TIM_PWM_Start+0x1e6>
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800df84:	d011      	beq.n	800dfaa <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	681a      	ldr	r2, [r3, #0]
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	f042 0201 	orr.w	r2, r2, #1
 800df94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df96:	e008      	b.n	800dfaa <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	681a      	ldr	r2, [r3, #0]
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	f042 0201 	orr.w	r2, r2, #1
 800dfa6:	601a      	str	r2, [r3, #0]
 800dfa8:	e000      	b.n	800dfac <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dfaa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dfac:	2300      	movs	r3, #0
}
 800dfae:	4618      	mov	r0, r3
 800dfb0:	3710      	adds	r7, #16
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}
 800dfb6:	bf00      	nop
 800dfb8:	40010000 	.word	0x40010000
 800dfbc:	40010400 	.word	0x40010400
 800dfc0:	40014000 	.word	0x40014000
 800dfc4:	40014400 	.word	0x40014400
 800dfc8:	40014800 	.word	0x40014800
 800dfcc:	40000400 	.word	0x40000400
 800dfd0:	40000800 	.word	0x40000800
 800dfd4:	40000c00 	.word	0x40000c00
 800dfd8:	40001800 	.word	0x40001800
 800dfdc:	00010007 	.word	0x00010007

0800dfe0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b084      	sub	sp, #16
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	68db      	ldr	r3, [r3, #12]
 800dfee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	691b      	ldr	r3, [r3, #16]
 800dff6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800dff8:	68bb      	ldr	r3, [r7, #8]
 800dffa:	f003 0302 	and.w	r3, r3, #2
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d020      	beq.n	800e044 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	f003 0302 	and.w	r3, r3, #2
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d01b      	beq.n	800e044 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	f06f 0202 	mvn.w	r2, #2
 800e014:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	2201      	movs	r2, #1
 800e01a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	699b      	ldr	r3, [r3, #24]
 800e022:	f003 0303 	and.w	r3, r3, #3
 800e026:	2b00      	cmp	r3, #0
 800e028:	d003      	beq.n	800e032 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e02a:	6878      	ldr	r0, [r7, #4]
 800e02c:	f000 f9fe 	bl	800e42c <HAL_TIM_IC_CaptureCallback>
 800e030:	e005      	b.n	800e03e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	f000 f9f0 	bl	800e418 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e038:	6878      	ldr	r0, [r7, #4]
 800e03a:	f000 fa01 	bl	800e440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	2200      	movs	r2, #0
 800e042:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	f003 0304 	and.w	r3, r3, #4
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d020      	beq.n	800e090 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	f003 0304 	and.w	r3, r3, #4
 800e054:	2b00      	cmp	r3, #0
 800e056:	d01b      	beq.n	800e090 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	f06f 0204 	mvn.w	r2, #4
 800e060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2202      	movs	r2, #2
 800e066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	699b      	ldr	r3, [r3, #24]
 800e06e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e072:	2b00      	cmp	r3, #0
 800e074:	d003      	beq.n	800e07e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e076:	6878      	ldr	r0, [r7, #4]
 800e078:	f000 f9d8 	bl	800e42c <HAL_TIM_IC_CaptureCallback>
 800e07c:	e005      	b.n	800e08a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e07e:	6878      	ldr	r0, [r7, #4]
 800e080:	f000 f9ca 	bl	800e418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e084:	6878      	ldr	r0, [r7, #4]
 800e086:	f000 f9db 	bl	800e440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	2200      	movs	r2, #0
 800e08e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e090:	68bb      	ldr	r3, [r7, #8]
 800e092:	f003 0308 	and.w	r3, r3, #8
 800e096:	2b00      	cmp	r3, #0
 800e098:	d020      	beq.n	800e0dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	f003 0308 	and.w	r3, r3, #8
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d01b      	beq.n	800e0dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	f06f 0208 	mvn.w	r2, #8
 800e0ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	2204      	movs	r2, #4
 800e0b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	69db      	ldr	r3, [r3, #28]
 800e0ba:	f003 0303 	and.w	r3, r3, #3
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d003      	beq.n	800e0ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e0c2:	6878      	ldr	r0, [r7, #4]
 800e0c4:	f000 f9b2 	bl	800e42c <HAL_TIM_IC_CaptureCallback>
 800e0c8:	e005      	b.n	800e0d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e0ca:	6878      	ldr	r0, [r7, #4]
 800e0cc:	f000 f9a4 	bl	800e418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e0d0:	6878      	ldr	r0, [r7, #4]
 800e0d2:	f000 f9b5 	bl	800e440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	2200      	movs	r2, #0
 800e0da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e0dc:	68bb      	ldr	r3, [r7, #8]
 800e0de:	f003 0310 	and.w	r3, r3, #16
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d020      	beq.n	800e128 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	f003 0310 	and.w	r3, r3, #16
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d01b      	beq.n	800e128 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	f06f 0210 	mvn.w	r2, #16
 800e0f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2208      	movs	r2, #8
 800e0fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	69db      	ldr	r3, [r3, #28]
 800e106:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d003      	beq.n	800e116 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e10e:	6878      	ldr	r0, [r7, #4]
 800e110:	f000 f98c 	bl	800e42c <HAL_TIM_IC_CaptureCallback>
 800e114:	e005      	b.n	800e122 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e116:	6878      	ldr	r0, [r7, #4]
 800e118:	f000 f97e 	bl	800e418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f000 f98f 	bl	800e440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	2200      	movs	r2, #0
 800e126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e128:	68bb      	ldr	r3, [r7, #8]
 800e12a:	f003 0301 	and.w	r3, r3, #1
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d00c      	beq.n	800e14c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	f003 0301 	and.w	r3, r3, #1
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d007      	beq.n	800e14c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	f06f 0201 	mvn.w	r2, #1
 800e144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e146:	6878      	ldr	r0, [r7, #4]
 800e148:	f7f4 fb00 	bl	800274c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e14c:	68bb      	ldr	r3, [r7, #8]
 800e14e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e152:	2b00      	cmp	r3, #0
 800e154:	d104      	bne.n	800e160 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e156:	68bb      	ldr	r3, [r7, #8]
 800e158:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d00c      	beq.n	800e17a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e166:	2b00      	cmp	r3, #0
 800e168:	d007      	beq.n	800e17a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800e172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e174:	6878      	ldr	r0, [r7, #4]
 800e176:	f000 fdb1 	bl	800ecdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e180:	2b00      	cmp	r3, #0
 800e182:	d00c      	beq.n	800e19e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d007      	beq.n	800e19e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e196:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e198:	6878      	ldr	r0, [r7, #4]
 800e19a:	f000 fda9 	bl	800ecf0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e19e:	68bb      	ldr	r3, [r7, #8]
 800e1a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d00c      	beq.n	800e1c2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d007      	beq.n	800e1c2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e1ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e1bc:	6878      	ldr	r0, [r7, #4]
 800e1be:	f000 f949 	bl	800e454 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e1c2:	68bb      	ldr	r3, [r7, #8]
 800e1c4:	f003 0320 	and.w	r3, r3, #32
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d00c      	beq.n	800e1e6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	f003 0320 	and.w	r3, r3, #32
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d007      	beq.n	800e1e6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	f06f 0220 	mvn.w	r2, #32
 800e1de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e1e0:	6878      	ldr	r0, [r7, #4]
 800e1e2:	f000 fd71 	bl	800ecc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e1e6:	bf00      	nop
 800e1e8:	3710      	adds	r7, #16
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	bd80      	pop	{r7, pc}
	...

0800e1f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b086      	sub	sp, #24
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	60f8      	str	r0, [r7, #12]
 800e1f8:	60b9      	str	r1, [r7, #8]
 800e1fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e206:	2b01      	cmp	r3, #1
 800e208:	d101      	bne.n	800e20e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e20a:	2302      	movs	r3, #2
 800e20c:	e0ff      	b.n	800e40e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	2201      	movs	r2, #1
 800e212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2b14      	cmp	r3, #20
 800e21a:	f200 80f0 	bhi.w	800e3fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e21e:	a201      	add	r2, pc, #4	@ (adr r2, 800e224 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e224:	0800e279 	.word	0x0800e279
 800e228:	0800e3ff 	.word	0x0800e3ff
 800e22c:	0800e3ff 	.word	0x0800e3ff
 800e230:	0800e3ff 	.word	0x0800e3ff
 800e234:	0800e2b9 	.word	0x0800e2b9
 800e238:	0800e3ff 	.word	0x0800e3ff
 800e23c:	0800e3ff 	.word	0x0800e3ff
 800e240:	0800e3ff 	.word	0x0800e3ff
 800e244:	0800e2fb 	.word	0x0800e2fb
 800e248:	0800e3ff 	.word	0x0800e3ff
 800e24c:	0800e3ff 	.word	0x0800e3ff
 800e250:	0800e3ff 	.word	0x0800e3ff
 800e254:	0800e33b 	.word	0x0800e33b
 800e258:	0800e3ff 	.word	0x0800e3ff
 800e25c:	0800e3ff 	.word	0x0800e3ff
 800e260:	0800e3ff 	.word	0x0800e3ff
 800e264:	0800e37d 	.word	0x0800e37d
 800e268:	0800e3ff 	.word	0x0800e3ff
 800e26c:	0800e3ff 	.word	0x0800e3ff
 800e270:	0800e3ff 	.word	0x0800e3ff
 800e274:	0800e3bd 	.word	0x0800e3bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	68b9      	ldr	r1, [r7, #8]
 800e27e:	4618      	mov	r0, r3
 800e280:	f000 f998 	bl	800e5b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	699a      	ldr	r2, [r3, #24]
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	f042 0208 	orr.w	r2, r2, #8
 800e292:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	699a      	ldr	r2, [r3, #24]
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	f022 0204 	bic.w	r2, r2, #4
 800e2a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	6999      	ldr	r1, [r3, #24]
 800e2aa:	68bb      	ldr	r3, [r7, #8]
 800e2ac:	691a      	ldr	r2, [r3, #16]
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	430a      	orrs	r2, r1
 800e2b4:	619a      	str	r2, [r3, #24]
      break;
 800e2b6:	e0a5      	b.n	800e404 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	68b9      	ldr	r1, [r7, #8]
 800e2be:	4618      	mov	r0, r3
 800e2c0:	f000 fa08 	bl	800e6d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	699a      	ldr	r2, [r3, #24]
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e2d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	699a      	ldr	r2, [r3, #24]
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e2e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	6999      	ldr	r1, [r3, #24]
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	691b      	ldr	r3, [r3, #16]
 800e2ee:	021a      	lsls	r2, r3, #8
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	430a      	orrs	r2, r1
 800e2f6:	619a      	str	r2, [r3, #24]
      break;
 800e2f8:	e084      	b.n	800e404 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	68b9      	ldr	r1, [r7, #8]
 800e300:	4618      	mov	r0, r3
 800e302:	f000 fa71 	bl	800e7e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	69da      	ldr	r2, [r3, #28]
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	f042 0208 	orr.w	r2, r2, #8
 800e314:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	69da      	ldr	r2, [r3, #28]
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	f022 0204 	bic.w	r2, r2, #4
 800e324:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	69d9      	ldr	r1, [r3, #28]
 800e32c:	68bb      	ldr	r3, [r7, #8]
 800e32e:	691a      	ldr	r2, [r3, #16]
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	430a      	orrs	r2, r1
 800e336:	61da      	str	r2, [r3, #28]
      break;
 800e338:	e064      	b.n	800e404 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	68b9      	ldr	r1, [r7, #8]
 800e340:	4618      	mov	r0, r3
 800e342:	f000 fad9 	bl	800e8f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	69da      	ldr	r2, [r3, #28]
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e354:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	69da      	ldr	r2, [r3, #28]
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e364:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	69d9      	ldr	r1, [r3, #28]
 800e36c:	68bb      	ldr	r3, [r7, #8]
 800e36e:	691b      	ldr	r3, [r3, #16]
 800e370:	021a      	lsls	r2, r3, #8
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	430a      	orrs	r2, r1
 800e378:	61da      	str	r2, [r3, #28]
      break;
 800e37a:	e043      	b.n	800e404 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	68b9      	ldr	r1, [r7, #8]
 800e382:	4618      	mov	r0, r3
 800e384:	f000 fb22 	bl	800e9cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	f042 0208 	orr.w	r2, r2, #8
 800e396:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	f022 0204 	bic.w	r2, r2, #4
 800e3a6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e3ae:	68bb      	ldr	r3, [r7, #8]
 800e3b0:	691a      	ldr	r2, [r3, #16]
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	430a      	orrs	r2, r1
 800e3b8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e3ba:	e023      	b.n	800e404 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	68b9      	ldr	r1, [r7, #8]
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f000 fb66 	bl	800ea94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e3d6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e3e6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e3ee:	68bb      	ldr	r3, [r7, #8]
 800e3f0:	691b      	ldr	r3, [r3, #16]
 800e3f2:	021a      	lsls	r2, r3, #8
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	430a      	orrs	r2, r1
 800e3fa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e3fc:	e002      	b.n	800e404 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e3fe:	2301      	movs	r3, #1
 800e400:	75fb      	strb	r3, [r7, #23]
      break;
 800e402:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	2200      	movs	r2, #0
 800e408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e40c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e40e:	4618      	mov	r0, r3
 800e410:	3718      	adds	r7, #24
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}
 800e416:	bf00      	nop

0800e418 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e418:	b480      	push	{r7}
 800e41a:	b083      	sub	sp, #12
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e420:	bf00      	nop
 800e422:	370c      	adds	r7, #12
 800e424:	46bd      	mov	sp, r7
 800e426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42a:	4770      	bx	lr

0800e42c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e42c:	b480      	push	{r7}
 800e42e:	b083      	sub	sp, #12
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e434:	bf00      	nop
 800e436:	370c      	adds	r7, #12
 800e438:	46bd      	mov	sp, r7
 800e43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43e:	4770      	bx	lr

0800e440 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e440:	b480      	push	{r7}
 800e442:	b083      	sub	sp, #12
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e448:	bf00      	nop
 800e44a:	370c      	adds	r7, #12
 800e44c:	46bd      	mov	sp, r7
 800e44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e452:	4770      	bx	lr

0800e454 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e454:	b480      	push	{r7}
 800e456:	b083      	sub	sp, #12
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e45c:	bf00      	nop
 800e45e:	370c      	adds	r7, #12
 800e460:	46bd      	mov	sp, r7
 800e462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e466:	4770      	bx	lr

0800e468 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e468:	b480      	push	{r7}
 800e46a:	b085      	sub	sp, #20
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
 800e470:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	4a46      	ldr	r2, [pc, #280]	@ (800e594 <TIM_Base_SetConfig+0x12c>)
 800e47c:	4293      	cmp	r3, r2
 800e47e:	d013      	beq.n	800e4a8 <TIM_Base_SetConfig+0x40>
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e486:	d00f      	beq.n	800e4a8 <TIM_Base_SetConfig+0x40>
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	4a43      	ldr	r2, [pc, #268]	@ (800e598 <TIM_Base_SetConfig+0x130>)
 800e48c:	4293      	cmp	r3, r2
 800e48e:	d00b      	beq.n	800e4a8 <TIM_Base_SetConfig+0x40>
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	4a42      	ldr	r2, [pc, #264]	@ (800e59c <TIM_Base_SetConfig+0x134>)
 800e494:	4293      	cmp	r3, r2
 800e496:	d007      	beq.n	800e4a8 <TIM_Base_SetConfig+0x40>
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	4a41      	ldr	r2, [pc, #260]	@ (800e5a0 <TIM_Base_SetConfig+0x138>)
 800e49c:	4293      	cmp	r3, r2
 800e49e:	d003      	beq.n	800e4a8 <TIM_Base_SetConfig+0x40>
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	4a40      	ldr	r2, [pc, #256]	@ (800e5a4 <TIM_Base_SetConfig+0x13c>)
 800e4a4:	4293      	cmp	r3, r2
 800e4a6:	d108      	bne.n	800e4ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e4ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	685b      	ldr	r3, [r3, #4]
 800e4b4:	68fa      	ldr	r2, [r7, #12]
 800e4b6:	4313      	orrs	r3, r2
 800e4b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	4a35      	ldr	r2, [pc, #212]	@ (800e594 <TIM_Base_SetConfig+0x12c>)
 800e4be:	4293      	cmp	r3, r2
 800e4c0:	d01f      	beq.n	800e502 <TIM_Base_SetConfig+0x9a>
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e4c8:	d01b      	beq.n	800e502 <TIM_Base_SetConfig+0x9a>
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	4a32      	ldr	r2, [pc, #200]	@ (800e598 <TIM_Base_SetConfig+0x130>)
 800e4ce:	4293      	cmp	r3, r2
 800e4d0:	d017      	beq.n	800e502 <TIM_Base_SetConfig+0x9a>
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	4a31      	ldr	r2, [pc, #196]	@ (800e59c <TIM_Base_SetConfig+0x134>)
 800e4d6:	4293      	cmp	r3, r2
 800e4d8:	d013      	beq.n	800e502 <TIM_Base_SetConfig+0x9a>
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	4a30      	ldr	r2, [pc, #192]	@ (800e5a0 <TIM_Base_SetConfig+0x138>)
 800e4de:	4293      	cmp	r3, r2
 800e4e0:	d00f      	beq.n	800e502 <TIM_Base_SetConfig+0x9a>
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	4a2f      	ldr	r2, [pc, #188]	@ (800e5a4 <TIM_Base_SetConfig+0x13c>)
 800e4e6:	4293      	cmp	r3, r2
 800e4e8:	d00b      	beq.n	800e502 <TIM_Base_SetConfig+0x9a>
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	4a2e      	ldr	r2, [pc, #184]	@ (800e5a8 <TIM_Base_SetConfig+0x140>)
 800e4ee:	4293      	cmp	r3, r2
 800e4f0:	d007      	beq.n	800e502 <TIM_Base_SetConfig+0x9a>
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	4a2d      	ldr	r2, [pc, #180]	@ (800e5ac <TIM_Base_SetConfig+0x144>)
 800e4f6:	4293      	cmp	r3, r2
 800e4f8:	d003      	beq.n	800e502 <TIM_Base_SetConfig+0x9a>
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	4a2c      	ldr	r2, [pc, #176]	@ (800e5b0 <TIM_Base_SetConfig+0x148>)
 800e4fe:	4293      	cmp	r3, r2
 800e500:	d108      	bne.n	800e514 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e508:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e50a:	683b      	ldr	r3, [r7, #0]
 800e50c:	68db      	ldr	r3, [r3, #12]
 800e50e:	68fa      	ldr	r2, [r7, #12]
 800e510:	4313      	orrs	r3, r2
 800e512:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	695b      	ldr	r3, [r3, #20]
 800e51e:	4313      	orrs	r3, r2
 800e520:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	68fa      	ldr	r2, [r7, #12]
 800e526:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e528:	683b      	ldr	r3, [r7, #0]
 800e52a:	689a      	ldr	r2, [r3, #8]
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e530:	683b      	ldr	r3, [r7, #0]
 800e532:	681a      	ldr	r2, [r3, #0]
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	4a16      	ldr	r2, [pc, #88]	@ (800e594 <TIM_Base_SetConfig+0x12c>)
 800e53c:	4293      	cmp	r3, r2
 800e53e:	d00f      	beq.n	800e560 <TIM_Base_SetConfig+0xf8>
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	4a18      	ldr	r2, [pc, #96]	@ (800e5a4 <TIM_Base_SetConfig+0x13c>)
 800e544:	4293      	cmp	r3, r2
 800e546:	d00b      	beq.n	800e560 <TIM_Base_SetConfig+0xf8>
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	4a17      	ldr	r2, [pc, #92]	@ (800e5a8 <TIM_Base_SetConfig+0x140>)
 800e54c:	4293      	cmp	r3, r2
 800e54e:	d007      	beq.n	800e560 <TIM_Base_SetConfig+0xf8>
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	4a16      	ldr	r2, [pc, #88]	@ (800e5ac <TIM_Base_SetConfig+0x144>)
 800e554:	4293      	cmp	r3, r2
 800e556:	d003      	beq.n	800e560 <TIM_Base_SetConfig+0xf8>
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	4a15      	ldr	r2, [pc, #84]	@ (800e5b0 <TIM_Base_SetConfig+0x148>)
 800e55c:	4293      	cmp	r3, r2
 800e55e:	d103      	bne.n	800e568 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e560:	683b      	ldr	r3, [r7, #0]
 800e562:	691a      	ldr	r2, [r3, #16]
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2201      	movs	r2, #1
 800e56c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	691b      	ldr	r3, [r3, #16]
 800e572:	f003 0301 	and.w	r3, r3, #1
 800e576:	2b01      	cmp	r3, #1
 800e578:	d105      	bne.n	800e586 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	691b      	ldr	r3, [r3, #16]
 800e57e:	f023 0201 	bic.w	r2, r3, #1
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	611a      	str	r2, [r3, #16]
  }
}
 800e586:	bf00      	nop
 800e588:	3714      	adds	r7, #20
 800e58a:	46bd      	mov	sp, r7
 800e58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e590:	4770      	bx	lr
 800e592:	bf00      	nop
 800e594:	40010000 	.word	0x40010000
 800e598:	40000400 	.word	0x40000400
 800e59c:	40000800 	.word	0x40000800
 800e5a0:	40000c00 	.word	0x40000c00
 800e5a4:	40010400 	.word	0x40010400
 800e5a8:	40014000 	.word	0x40014000
 800e5ac:	40014400 	.word	0x40014400
 800e5b0:	40014800 	.word	0x40014800

0800e5b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e5b4:	b480      	push	{r7}
 800e5b6:	b087      	sub	sp, #28
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
 800e5bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	6a1b      	ldr	r3, [r3, #32]
 800e5c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	6a1b      	ldr	r3, [r3, #32]
 800e5c8:	f023 0201 	bic.w	r2, r3, #1
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	685b      	ldr	r3, [r3, #4]
 800e5d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	699b      	ldr	r3, [r3, #24]
 800e5da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e5dc:	68fa      	ldr	r2, [r7, #12]
 800e5de:	4b37      	ldr	r3, [pc, #220]	@ (800e6bc <TIM_OC1_SetConfig+0x108>)
 800e5e0:	4013      	ands	r3, r2
 800e5e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	f023 0303 	bic.w	r3, r3, #3
 800e5ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e5ec:	683b      	ldr	r3, [r7, #0]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	68fa      	ldr	r2, [r7, #12]
 800e5f2:	4313      	orrs	r3, r2
 800e5f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e5f6:	697b      	ldr	r3, [r7, #20]
 800e5f8:	f023 0302 	bic.w	r3, r3, #2
 800e5fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e5fe:	683b      	ldr	r3, [r7, #0]
 800e600:	689b      	ldr	r3, [r3, #8]
 800e602:	697a      	ldr	r2, [r7, #20]
 800e604:	4313      	orrs	r3, r2
 800e606:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	4a2d      	ldr	r2, [pc, #180]	@ (800e6c0 <TIM_OC1_SetConfig+0x10c>)
 800e60c:	4293      	cmp	r3, r2
 800e60e:	d00f      	beq.n	800e630 <TIM_OC1_SetConfig+0x7c>
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	4a2c      	ldr	r2, [pc, #176]	@ (800e6c4 <TIM_OC1_SetConfig+0x110>)
 800e614:	4293      	cmp	r3, r2
 800e616:	d00b      	beq.n	800e630 <TIM_OC1_SetConfig+0x7c>
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	4a2b      	ldr	r2, [pc, #172]	@ (800e6c8 <TIM_OC1_SetConfig+0x114>)
 800e61c:	4293      	cmp	r3, r2
 800e61e:	d007      	beq.n	800e630 <TIM_OC1_SetConfig+0x7c>
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	4a2a      	ldr	r2, [pc, #168]	@ (800e6cc <TIM_OC1_SetConfig+0x118>)
 800e624:	4293      	cmp	r3, r2
 800e626:	d003      	beq.n	800e630 <TIM_OC1_SetConfig+0x7c>
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	4a29      	ldr	r2, [pc, #164]	@ (800e6d0 <TIM_OC1_SetConfig+0x11c>)
 800e62c:	4293      	cmp	r3, r2
 800e62e:	d10c      	bne.n	800e64a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e630:	697b      	ldr	r3, [r7, #20]
 800e632:	f023 0308 	bic.w	r3, r3, #8
 800e636:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	68db      	ldr	r3, [r3, #12]
 800e63c:	697a      	ldr	r2, [r7, #20]
 800e63e:	4313      	orrs	r3, r2
 800e640:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e642:	697b      	ldr	r3, [r7, #20]
 800e644:	f023 0304 	bic.w	r3, r3, #4
 800e648:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	4a1c      	ldr	r2, [pc, #112]	@ (800e6c0 <TIM_OC1_SetConfig+0x10c>)
 800e64e:	4293      	cmp	r3, r2
 800e650:	d00f      	beq.n	800e672 <TIM_OC1_SetConfig+0xbe>
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	4a1b      	ldr	r2, [pc, #108]	@ (800e6c4 <TIM_OC1_SetConfig+0x110>)
 800e656:	4293      	cmp	r3, r2
 800e658:	d00b      	beq.n	800e672 <TIM_OC1_SetConfig+0xbe>
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	4a1a      	ldr	r2, [pc, #104]	@ (800e6c8 <TIM_OC1_SetConfig+0x114>)
 800e65e:	4293      	cmp	r3, r2
 800e660:	d007      	beq.n	800e672 <TIM_OC1_SetConfig+0xbe>
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	4a19      	ldr	r2, [pc, #100]	@ (800e6cc <TIM_OC1_SetConfig+0x118>)
 800e666:	4293      	cmp	r3, r2
 800e668:	d003      	beq.n	800e672 <TIM_OC1_SetConfig+0xbe>
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	4a18      	ldr	r2, [pc, #96]	@ (800e6d0 <TIM_OC1_SetConfig+0x11c>)
 800e66e:	4293      	cmp	r3, r2
 800e670:	d111      	bne.n	800e696 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e672:	693b      	ldr	r3, [r7, #16]
 800e674:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e678:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e67a:	693b      	ldr	r3, [r7, #16]
 800e67c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e680:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e682:	683b      	ldr	r3, [r7, #0]
 800e684:	695b      	ldr	r3, [r3, #20]
 800e686:	693a      	ldr	r2, [r7, #16]
 800e688:	4313      	orrs	r3, r2
 800e68a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	699b      	ldr	r3, [r3, #24]
 800e690:	693a      	ldr	r2, [r7, #16]
 800e692:	4313      	orrs	r3, r2
 800e694:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	693a      	ldr	r2, [r7, #16]
 800e69a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	68fa      	ldr	r2, [r7, #12]
 800e6a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e6a2:	683b      	ldr	r3, [r7, #0]
 800e6a4:	685a      	ldr	r2, [r3, #4]
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	697a      	ldr	r2, [r7, #20]
 800e6ae:	621a      	str	r2, [r3, #32]
}
 800e6b0:	bf00      	nop
 800e6b2:	371c      	adds	r7, #28
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ba:	4770      	bx	lr
 800e6bc:	fffeff8f 	.word	0xfffeff8f
 800e6c0:	40010000 	.word	0x40010000
 800e6c4:	40010400 	.word	0x40010400
 800e6c8:	40014000 	.word	0x40014000
 800e6cc:	40014400 	.word	0x40014400
 800e6d0:	40014800 	.word	0x40014800

0800e6d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e6d4:	b480      	push	{r7}
 800e6d6:	b087      	sub	sp, #28
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
 800e6dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	6a1b      	ldr	r3, [r3, #32]
 800e6e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	6a1b      	ldr	r3, [r3, #32]
 800e6e8:	f023 0210 	bic.w	r2, r3, #16
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	685b      	ldr	r3, [r3, #4]
 800e6f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	699b      	ldr	r3, [r3, #24]
 800e6fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e6fc:	68fa      	ldr	r2, [r7, #12]
 800e6fe:	4b34      	ldr	r3, [pc, #208]	@ (800e7d0 <TIM_OC2_SetConfig+0xfc>)
 800e700:	4013      	ands	r3, r2
 800e702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e70a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e70c:	683b      	ldr	r3, [r7, #0]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	021b      	lsls	r3, r3, #8
 800e712:	68fa      	ldr	r2, [r7, #12]
 800e714:	4313      	orrs	r3, r2
 800e716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e718:	697b      	ldr	r3, [r7, #20]
 800e71a:	f023 0320 	bic.w	r3, r3, #32
 800e71e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	689b      	ldr	r3, [r3, #8]
 800e724:	011b      	lsls	r3, r3, #4
 800e726:	697a      	ldr	r2, [r7, #20]
 800e728:	4313      	orrs	r3, r2
 800e72a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	4a29      	ldr	r2, [pc, #164]	@ (800e7d4 <TIM_OC2_SetConfig+0x100>)
 800e730:	4293      	cmp	r3, r2
 800e732:	d003      	beq.n	800e73c <TIM_OC2_SetConfig+0x68>
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	4a28      	ldr	r2, [pc, #160]	@ (800e7d8 <TIM_OC2_SetConfig+0x104>)
 800e738:	4293      	cmp	r3, r2
 800e73a:	d10d      	bne.n	800e758 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e73c:	697b      	ldr	r3, [r7, #20]
 800e73e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e742:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e744:	683b      	ldr	r3, [r7, #0]
 800e746:	68db      	ldr	r3, [r3, #12]
 800e748:	011b      	lsls	r3, r3, #4
 800e74a:	697a      	ldr	r2, [r7, #20]
 800e74c:	4313      	orrs	r3, r2
 800e74e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e750:	697b      	ldr	r3, [r7, #20]
 800e752:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e756:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	4a1e      	ldr	r2, [pc, #120]	@ (800e7d4 <TIM_OC2_SetConfig+0x100>)
 800e75c:	4293      	cmp	r3, r2
 800e75e:	d00f      	beq.n	800e780 <TIM_OC2_SetConfig+0xac>
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	4a1d      	ldr	r2, [pc, #116]	@ (800e7d8 <TIM_OC2_SetConfig+0x104>)
 800e764:	4293      	cmp	r3, r2
 800e766:	d00b      	beq.n	800e780 <TIM_OC2_SetConfig+0xac>
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	4a1c      	ldr	r2, [pc, #112]	@ (800e7dc <TIM_OC2_SetConfig+0x108>)
 800e76c:	4293      	cmp	r3, r2
 800e76e:	d007      	beq.n	800e780 <TIM_OC2_SetConfig+0xac>
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	4a1b      	ldr	r2, [pc, #108]	@ (800e7e0 <TIM_OC2_SetConfig+0x10c>)
 800e774:	4293      	cmp	r3, r2
 800e776:	d003      	beq.n	800e780 <TIM_OC2_SetConfig+0xac>
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	4a1a      	ldr	r2, [pc, #104]	@ (800e7e4 <TIM_OC2_SetConfig+0x110>)
 800e77c:	4293      	cmp	r3, r2
 800e77e:	d113      	bne.n	800e7a8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e780:	693b      	ldr	r3, [r7, #16]
 800e782:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e786:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e788:	693b      	ldr	r3, [r7, #16]
 800e78a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e78e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e790:	683b      	ldr	r3, [r7, #0]
 800e792:	695b      	ldr	r3, [r3, #20]
 800e794:	009b      	lsls	r3, r3, #2
 800e796:	693a      	ldr	r2, [r7, #16]
 800e798:	4313      	orrs	r3, r2
 800e79a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e79c:	683b      	ldr	r3, [r7, #0]
 800e79e:	699b      	ldr	r3, [r3, #24]
 800e7a0:	009b      	lsls	r3, r3, #2
 800e7a2:	693a      	ldr	r2, [r7, #16]
 800e7a4:	4313      	orrs	r3, r2
 800e7a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	693a      	ldr	r2, [r7, #16]
 800e7ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	68fa      	ldr	r2, [r7, #12]
 800e7b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	685a      	ldr	r2, [r3, #4]
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	697a      	ldr	r2, [r7, #20]
 800e7c0:	621a      	str	r2, [r3, #32]
}
 800e7c2:	bf00      	nop
 800e7c4:	371c      	adds	r7, #28
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7cc:	4770      	bx	lr
 800e7ce:	bf00      	nop
 800e7d0:	feff8fff 	.word	0xfeff8fff
 800e7d4:	40010000 	.word	0x40010000
 800e7d8:	40010400 	.word	0x40010400
 800e7dc:	40014000 	.word	0x40014000
 800e7e0:	40014400 	.word	0x40014400
 800e7e4:	40014800 	.word	0x40014800

0800e7e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e7e8:	b480      	push	{r7}
 800e7ea:	b087      	sub	sp, #28
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
 800e7f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	6a1b      	ldr	r3, [r3, #32]
 800e7f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	6a1b      	ldr	r3, [r3, #32]
 800e7fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	685b      	ldr	r3, [r3, #4]
 800e808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	69db      	ldr	r3, [r3, #28]
 800e80e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e810:	68fa      	ldr	r2, [r7, #12]
 800e812:	4b33      	ldr	r3, [pc, #204]	@ (800e8e0 <TIM_OC3_SetConfig+0xf8>)
 800e814:	4013      	ands	r3, r2
 800e816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	f023 0303 	bic.w	r3, r3, #3
 800e81e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	68fa      	ldr	r2, [r7, #12]
 800e826:	4313      	orrs	r3, r2
 800e828:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e82a:	697b      	ldr	r3, [r7, #20]
 800e82c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e830:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e832:	683b      	ldr	r3, [r7, #0]
 800e834:	689b      	ldr	r3, [r3, #8]
 800e836:	021b      	lsls	r3, r3, #8
 800e838:	697a      	ldr	r2, [r7, #20]
 800e83a:	4313      	orrs	r3, r2
 800e83c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	4a28      	ldr	r2, [pc, #160]	@ (800e8e4 <TIM_OC3_SetConfig+0xfc>)
 800e842:	4293      	cmp	r3, r2
 800e844:	d003      	beq.n	800e84e <TIM_OC3_SetConfig+0x66>
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	4a27      	ldr	r2, [pc, #156]	@ (800e8e8 <TIM_OC3_SetConfig+0x100>)
 800e84a:	4293      	cmp	r3, r2
 800e84c:	d10d      	bne.n	800e86a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e84e:	697b      	ldr	r3, [r7, #20]
 800e850:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e854:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e856:	683b      	ldr	r3, [r7, #0]
 800e858:	68db      	ldr	r3, [r3, #12]
 800e85a:	021b      	lsls	r3, r3, #8
 800e85c:	697a      	ldr	r2, [r7, #20]
 800e85e:	4313      	orrs	r3, r2
 800e860:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e862:	697b      	ldr	r3, [r7, #20]
 800e864:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e868:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	4a1d      	ldr	r2, [pc, #116]	@ (800e8e4 <TIM_OC3_SetConfig+0xfc>)
 800e86e:	4293      	cmp	r3, r2
 800e870:	d00f      	beq.n	800e892 <TIM_OC3_SetConfig+0xaa>
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	4a1c      	ldr	r2, [pc, #112]	@ (800e8e8 <TIM_OC3_SetConfig+0x100>)
 800e876:	4293      	cmp	r3, r2
 800e878:	d00b      	beq.n	800e892 <TIM_OC3_SetConfig+0xaa>
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	4a1b      	ldr	r2, [pc, #108]	@ (800e8ec <TIM_OC3_SetConfig+0x104>)
 800e87e:	4293      	cmp	r3, r2
 800e880:	d007      	beq.n	800e892 <TIM_OC3_SetConfig+0xaa>
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	4a1a      	ldr	r2, [pc, #104]	@ (800e8f0 <TIM_OC3_SetConfig+0x108>)
 800e886:	4293      	cmp	r3, r2
 800e888:	d003      	beq.n	800e892 <TIM_OC3_SetConfig+0xaa>
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	4a19      	ldr	r2, [pc, #100]	@ (800e8f4 <TIM_OC3_SetConfig+0x10c>)
 800e88e:	4293      	cmp	r3, r2
 800e890:	d113      	bne.n	800e8ba <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e892:	693b      	ldr	r3, [r7, #16]
 800e894:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e898:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e89a:	693b      	ldr	r3, [r7, #16]
 800e89c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e8a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	695b      	ldr	r3, [r3, #20]
 800e8a6:	011b      	lsls	r3, r3, #4
 800e8a8:	693a      	ldr	r2, [r7, #16]
 800e8aa:	4313      	orrs	r3, r2
 800e8ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e8ae:	683b      	ldr	r3, [r7, #0]
 800e8b0:	699b      	ldr	r3, [r3, #24]
 800e8b2:	011b      	lsls	r3, r3, #4
 800e8b4:	693a      	ldr	r2, [r7, #16]
 800e8b6:	4313      	orrs	r3, r2
 800e8b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	693a      	ldr	r2, [r7, #16]
 800e8be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	68fa      	ldr	r2, [r7, #12]
 800e8c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e8c6:	683b      	ldr	r3, [r7, #0]
 800e8c8:	685a      	ldr	r2, [r3, #4]
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	697a      	ldr	r2, [r7, #20]
 800e8d2:	621a      	str	r2, [r3, #32]
}
 800e8d4:	bf00      	nop
 800e8d6:	371c      	adds	r7, #28
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8de:	4770      	bx	lr
 800e8e0:	fffeff8f 	.word	0xfffeff8f
 800e8e4:	40010000 	.word	0x40010000
 800e8e8:	40010400 	.word	0x40010400
 800e8ec:	40014000 	.word	0x40014000
 800e8f0:	40014400 	.word	0x40014400
 800e8f4:	40014800 	.word	0x40014800

0800e8f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e8f8:	b480      	push	{r7}
 800e8fa:	b087      	sub	sp, #28
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
 800e900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	6a1b      	ldr	r3, [r3, #32]
 800e906:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	6a1b      	ldr	r3, [r3, #32]
 800e90c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	685b      	ldr	r3, [r3, #4]
 800e918:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	69db      	ldr	r3, [r3, #28]
 800e91e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e920:	68fa      	ldr	r2, [r7, #12]
 800e922:	4b24      	ldr	r3, [pc, #144]	@ (800e9b4 <TIM_OC4_SetConfig+0xbc>)
 800e924:	4013      	ands	r3, r2
 800e926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e92e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e930:	683b      	ldr	r3, [r7, #0]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	021b      	lsls	r3, r3, #8
 800e936:	68fa      	ldr	r2, [r7, #12]
 800e938:	4313      	orrs	r3, r2
 800e93a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e93c:	693b      	ldr	r3, [r7, #16]
 800e93e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e942:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e944:	683b      	ldr	r3, [r7, #0]
 800e946:	689b      	ldr	r3, [r3, #8]
 800e948:	031b      	lsls	r3, r3, #12
 800e94a:	693a      	ldr	r2, [r7, #16]
 800e94c:	4313      	orrs	r3, r2
 800e94e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	4a19      	ldr	r2, [pc, #100]	@ (800e9b8 <TIM_OC4_SetConfig+0xc0>)
 800e954:	4293      	cmp	r3, r2
 800e956:	d00f      	beq.n	800e978 <TIM_OC4_SetConfig+0x80>
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	4a18      	ldr	r2, [pc, #96]	@ (800e9bc <TIM_OC4_SetConfig+0xc4>)
 800e95c:	4293      	cmp	r3, r2
 800e95e:	d00b      	beq.n	800e978 <TIM_OC4_SetConfig+0x80>
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	4a17      	ldr	r2, [pc, #92]	@ (800e9c0 <TIM_OC4_SetConfig+0xc8>)
 800e964:	4293      	cmp	r3, r2
 800e966:	d007      	beq.n	800e978 <TIM_OC4_SetConfig+0x80>
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	4a16      	ldr	r2, [pc, #88]	@ (800e9c4 <TIM_OC4_SetConfig+0xcc>)
 800e96c:	4293      	cmp	r3, r2
 800e96e:	d003      	beq.n	800e978 <TIM_OC4_SetConfig+0x80>
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	4a15      	ldr	r2, [pc, #84]	@ (800e9c8 <TIM_OC4_SetConfig+0xd0>)
 800e974:	4293      	cmp	r3, r2
 800e976:	d109      	bne.n	800e98c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e978:	697b      	ldr	r3, [r7, #20]
 800e97a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e97e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	695b      	ldr	r3, [r3, #20]
 800e984:	019b      	lsls	r3, r3, #6
 800e986:	697a      	ldr	r2, [r7, #20]
 800e988:	4313      	orrs	r3, r2
 800e98a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	697a      	ldr	r2, [r7, #20]
 800e990:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	68fa      	ldr	r2, [r7, #12]
 800e996:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	685a      	ldr	r2, [r3, #4]
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	693a      	ldr	r2, [r7, #16]
 800e9a4:	621a      	str	r2, [r3, #32]
}
 800e9a6:	bf00      	nop
 800e9a8:	371c      	adds	r7, #28
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b0:	4770      	bx	lr
 800e9b2:	bf00      	nop
 800e9b4:	feff8fff 	.word	0xfeff8fff
 800e9b8:	40010000 	.word	0x40010000
 800e9bc:	40010400 	.word	0x40010400
 800e9c0:	40014000 	.word	0x40014000
 800e9c4:	40014400 	.word	0x40014400
 800e9c8:	40014800 	.word	0x40014800

0800e9cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e9cc:	b480      	push	{r7}
 800e9ce:	b087      	sub	sp, #28
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
 800e9d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	6a1b      	ldr	r3, [r3, #32]
 800e9da:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	6a1b      	ldr	r3, [r3, #32]
 800e9e0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	685b      	ldr	r3, [r3, #4]
 800e9ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e9f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e9f4:	68fa      	ldr	r2, [r7, #12]
 800e9f6:	4b21      	ldr	r3, [pc, #132]	@ (800ea7c <TIM_OC5_SetConfig+0xb0>)
 800e9f8:	4013      	ands	r3, r2
 800e9fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	68fa      	ldr	r2, [r7, #12]
 800ea02:	4313      	orrs	r3, r2
 800ea04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ea06:	693b      	ldr	r3, [r7, #16]
 800ea08:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ea0c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	689b      	ldr	r3, [r3, #8]
 800ea12:	041b      	lsls	r3, r3, #16
 800ea14:	693a      	ldr	r2, [r7, #16]
 800ea16:	4313      	orrs	r3, r2
 800ea18:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	4a18      	ldr	r2, [pc, #96]	@ (800ea80 <TIM_OC5_SetConfig+0xb4>)
 800ea1e:	4293      	cmp	r3, r2
 800ea20:	d00f      	beq.n	800ea42 <TIM_OC5_SetConfig+0x76>
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	4a17      	ldr	r2, [pc, #92]	@ (800ea84 <TIM_OC5_SetConfig+0xb8>)
 800ea26:	4293      	cmp	r3, r2
 800ea28:	d00b      	beq.n	800ea42 <TIM_OC5_SetConfig+0x76>
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	4a16      	ldr	r2, [pc, #88]	@ (800ea88 <TIM_OC5_SetConfig+0xbc>)
 800ea2e:	4293      	cmp	r3, r2
 800ea30:	d007      	beq.n	800ea42 <TIM_OC5_SetConfig+0x76>
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	4a15      	ldr	r2, [pc, #84]	@ (800ea8c <TIM_OC5_SetConfig+0xc0>)
 800ea36:	4293      	cmp	r3, r2
 800ea38:	d003      	beq.n	800ea42 <TIM_OC5_SetConfig+0x76>
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	4a14      	ldr	r2, [pc, #80]	@ (800ea90 <TIM_OC5_SetConfig+0xc4>)
 800ea3e:	4293      	cmp	r3, r2
 800ea40:	d109      	bne.n	800ea56 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ea42:	697b      	ldr	r3, [r7, #20]
 800ea44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ea48:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ea4a:	683b      	ldr	r3, [r7, #0]
 800ea4c:	695b      	ldr	r3, [r3, #20]
 800ea4e:	021b      	lsls	r3, r3, #8
 800ea50:	697a      	ldr	r2, [r7, #20]
 800ea52:	4313      	orrs	r3, r2
 800ea54:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	697a      	ldr	r2, [r7, #20]
 800ea5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	68fa      	ldr	r2, [r7, #12]
 800ea60:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ea62:	683b      	ldr	r3, [r7, #0]
 800ea64:	685a      	ldr	r2, [r3, #4]
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	693a      	ldr	r2, [r7, #16]
 800ea6e:	621a      	str	r2, [r3, #32]
}
 800ea70:	bf00      	nop
 800ea72:	371c      	adds	r7, #28
 800ea74:	46bd      	mov	sp, r7
 800ea76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7a:	4770      	bx	lr
 800ea7c:	fffeff8f 	.word	0xfffeff8f
 800ea80:	40010000 	.word	0x40010000
 800ea84:	40010400 	.word	0x40010400
 800ea88:	40014000 	.word	0x40014000
 800ea8c:	40014400 	.word	0x40014400
 800ea90:	40014800 	.word	0x40014800

0800ea94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ea94:	b480      	push	{r7}
 800ea96:	b087      	sub	sp, #28
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
 800ea9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	6a1b      	ldr	r3, [r3, #32]
 800eaa2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	6a1b      	ldr	r3, [r3, #32]
 800eaa8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	685b      	ldr	r3, [r3, #4]
 800eab4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eaba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800eabc:	68fa      	ldr	r2, [r7, #12]
 800eabe:	4b22      	ldr	r3, [pc, #136]	@ (800eb48 <TIM_OC6_SetConfig+0xb4>)
 800eac0:	4013      	ands	r3, r2
 800eac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	021b      	lsls	r3, r3, #8
 800eaca:	68fa      	ldr	r2, [r7, #12]
 800eacc:	4313      	orrs	r3, r2
 800eace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ead0:	693b      	ldr	r3, [r7, #16]
 800ead2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ead6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ead8:	683b      	ldr	r3, [r7, #0]
 800eada:	689b      	ldr	r3, [r3, #8]
 800eadc:	051b      	lsls	r3, r3, #20
 800eade:	693a      	ldr	r2, [r7, #16]
 800eae0:	4313      	orrs	r3, r2
 800eae2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	4a19      	ldr	r2, [pc, #100]	@ (800eb4c <TIM_OC6_SetConfig+0xb8>)
 800eae8:	4293      	cmp	r3, r2
 800eaea:	d00f      	beq.n	800eb0c <TIM_OC6_SetConfig+0x78>
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	4a18      	ldr	r2, [pc, #96]	@ (800eb50 <TIM_OC6_SetConfig+0xbc>)
 800eaf0:	4293      	cmp	r3, r2
 800eaf2:	d00b      	beq.n	800eb0c <TIM_OC6_SetConfig+0x78>
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	4a17      	ldr	r2, [pc, #92]	@ (800eb54 <TIM_OC6_SetConfig+0xc0>)
 800eaf8:	4293      	cmp	r3, r2
 800eafa:	d007      	beq.n	800eb0c <TIM_OC6_SetConfig+0x78>
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	4a16      	ldr	r2, [pc, #88]	@ (800eb58 <TIM_OC6_SetConfig+0xc4>)
 800eb00:	4293      	cmp	r3, r2
 800eb02:	d003      	beq.n	800eb0c <TIM_OC6_SetConfig+0x78>
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	4a15      	ldr	r2, [pc, #84]	@ (800eb5c <TIM_OC6_SetConfig+0xc8>)
 800eb08:	4293      	cmp	r3, r2
 800eb0a:	d109      	bne.n	800eb20 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800eb0c:	697b      	ldr	r3, [r7, #20]
 800eb0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800eb12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800eb14:	683b      	ldr	r3, [r7, #0]
 800eb16:	695b      	ldr	r3, [r3, #20]
 800eb18:	029b      	lsls	r3, r3, #10
 800eb1a:	697a      	ldr	r2, [r7, #20]
 800eb1c:	4313      	orrs	r3, r2
 800eb1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	697a      	ldr	r2, [r7, #20]
 800eb24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	68fa      	ldr	r2, [r7, #12]
 800eb2a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	685a      	ldr	r2, [r3, #4]
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	693a      	ldr	r2, [r7, #16]
 800eb38:	621a      	str	r2, [r3, #32]
}
 800eb3a:	bf00      	nop
 800eb3c:	371c      	adds	r7, #28
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb44:	4770      	bx	lr
 800eb46:	bf00      	nop
 800eb48:	feff8fff 	.word	0xfeff8fff
 800eb4c:	40010000 	.word	0x40010000
 800eb50:	40010400 	.word	0x40010400
 800eb54:	40014000 	.word	0x40014000
 800eb58:	40014400 	.word	0x40014400
 800eb5c:	40014800 	.word	0x40014800

0800eb60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800eb60:	b480      	push	{r7}
 800eb62:	b087      	sub	sp, #28
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	60f8      	str	r0, [r7, #12]
 800eb68:	60b9      	str	r1, [r7, #8]
 800eb6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800eb6c:	68bb      	ldr	r3, [r7, #8]
 800eb6e:	f003 031f 	and.w	r3, r3, #31
 800eb72:	2201      	movs	r2, #1
 800eb74:	fa02 f303 	lsl.w	r3, r2, r3
 800eb78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	6a1a      	ldr	r2, [r3, #32]
 800eb7e:	697b      	ldr	r3, [r7, #20]
 800eb80:	43db      	mvns	r3, r3
 800eb82:	401a      	ands	r2, r3
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	6a1a      	ldr	r2, [r3, #32]
 800eb8c:	68bb      	ldr	r3, [r7, #8]
 800eb8e:	f003 031f 	and.w	r3, r3, #31
 800eb92:	6879      	ldr	r1, [r7, #4]
 800eb94:	fa01 f303 	lsl.w	r3, r1, r3
 800eb98:	431a      	orrs	r2, r3
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	621a      	str	r2, [r3, #32]
}
 800eb9e:	bf00      	nop
 800eba0:	371c      	adds	r7, #28
 800eba2:	46bd      	mov	sp, r7
 800eba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba8:	4770      	bx	lr
	...

0800ebac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ebac:	b480      	push	{r7}
 800ebae:	b085      	sub	sp, #20
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
 800ebb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ebbc:	2b01      	cmp	r3, #1
 800ebbe:	d101      	bne.n	800ebc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ebc0:	2302      	movs	r3, #2
 800ebc2:	e06d      	b.n	800eca0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2201      	movs	r2, #1
 800ebc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	2202      	movs	r2, #2
 800ebd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	685b      	ldr	r3, [r3, #4]
 800ebda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	689b      	ldr	r3, [r3, #8]
 800ebe2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	4a30      	ldr	r2, [pc, #192]	@ (800ecac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ebea:	4293      	cmp	r3, r2
 800ebec:	d004      	beq.n	800ebf8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	4a2f      	ldr	r2, [pc, #188]	@ (800ecb0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ebf4:	4293      	cmp	r3, r2
 800ebf6:	d108      	bne.n	800ec0a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ebfe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ec00:	683b      	ldr	r3, [r7, #0]
 800ec02:	685b      	ldr	r3, [r3, #4]
 800ec04:	68fa      	ldr	r2, [r7, #12]
 800ec06:	4313      	orrs	r3, r2
 800ec08:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ec10:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ec12:	683b      	ldr	r3, [r7, #0]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	68fa      	ldr	r2, [r7, #12]
 800ec18:	4313      	orrs	r3, r2
 800ec1a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	68fa      	ldr	r2, [r7, #12]
 800ec22:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	4a20      	ldr	r2, [pc, #128]	@ (800ecac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ec2a:	4293      	cmp	r3, r2
 800ec2c:	d022      	beq.n	800ec74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ec36:	d01d      	beq.n	800ec74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	4a1d      	ldr	r2, [pc, #116]	@ (800ecb4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ec3e:	4293      	cmp	r3, r2
 800ec40:	d018      	beq.n	800ec74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	4a1c      	ldr	r2, [pc, #112]	@ (800ecb8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ec48:	4293      	cmp	r3, r2
 800ec4a:	d013      	beq.n	800ec74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	4a1a      	ldr	r2, [pc, #104]	@ (800ecbc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ec52:	4293      	cmp	r3, r2
 800ec54:	d00e      	beq.n	800ec74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	4a15      	ldr	r2, [pc, #84]	@ (800ecb0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ec5c:	4293      	cmp	r3, r2
 800ec5e:	d009      	beq.n	800ec74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	4a16      	ldr	r2, [pc, #88]	@ (800ecc0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ec66:	4293      	cmp	r3, r2
 800ec68:	d004      	beq.n	800ec74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	4a15      	ldr	r2, [pc, #84]	@ (800ecc4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ec70:	4293      	cmp	r3, r2
 800ec72:	d10c      	bne.n	800ec8e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ec74:	68bb      	ldr	r3, [r7, #8]
 800ec76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ec7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ec7c:	683b      	ldr	r3, [r7, #0]
 800ec7e:	689b      	ldr	r3, [r3, #8]
 800ec80:	68ba      	ldr	r2, [r7, #8]
 800ec82:	4313      	orrs	r3, r2
 800ec84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	68ba      	ldr	r2, [r7, #8]
 800ec8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	2201      	movs	r2, #1
 800ec92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	2200      	movs	r2, #0
 800ec9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ec9e:	2300      	movs	r3, #0
}
 800eca0:	4618      	mov	r0, r3
 800eca2:	3714      	adds	r7, #20
 800eca4:	46bd      	mov	sp, r7
 800eca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecaa:	4770      	bx	lr
 800ecac:	40010000 	.word	0x40010000
 800ecb0:	40010400 	.word	0x40010400
 800ecb4:	40000400 	.word	0x40000400
 800ecb8:	40000800 	.word	0x40000800
 800ecbc:	40000c00 	.word	0x40000c00
 800ecc0:	40001800 	.word	0x40001800
 800ecc4:	40014000 	.word	0x40014000

0800ecc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ecc8:	b480      	push	{r7}
 800ecca:	b083      	sub	sp, #12
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ecd0:	bf00      	nop
 800ecd2:	370c      	adds	r7, #12
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecda:	4770      	bx	lr

0800ecdc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ecdc:	b480      	push	{r7}
 800ecde:	b083      	sub	sp, #12
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ece4:	bf00      	nop
 800ece6:	370c      	adds	r7, #12
 800ece8:	46bd      	mov	sp, r7
 800ecea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecee:	4770      	bx	lr

0800ecf0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ecf0:	b480      	push	{r7}
 800ecf2:	b083      	sub	sp, #12
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ecf8:	bf00      	nop
 800ecfa:	370c      	adds	r7, #12
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed02:	4770      	bx	lr

0800ed04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b082      	sub	sp, #8
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d101      	bne.n	800ed16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ed12:	2301      	movs	r3, #1
 800ed14:	e042      	b.n	800ed9c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d106      	bne.n	800ed2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	2200      	movs	r2, #0
 800ed24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ed28:	6878      	ldr	r0, [r7, #4]
 800ed2a:	f7f4 fbd5 	bl	80034d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	2224      	movs	r2, #36	@ 0x24
 800ed32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	681a      	ldr	r2, [r3, #0]
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	f022 0201 	bic.w	r2, r2, #1
 800ed44:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d002      	beq.n	800ed54 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ed4e:	6878      	ldr	r0, [r7, #4]
 800ed50:	f001 fe0e 	bl	8010970 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ed54:	6878      	ldr	r0, [r7, #4]
 800ed56:	f000 ff9f 	bl	800fc98 <UART_SetConfig>
 800ed5a:	4603      	mov	r3, r0
 800ed5c:	2b01      	cmp	r3, #1
 800ed5e:	d101      	bne.n	800ed64 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ed60:	2301      	movs	r3, #1
 800ed62:	e01b      	b.n	800ed9c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	685a      	ldr	r2, [r3, #4]
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ed72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	689a      	ldr	r2, [r3, #8]
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ed82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	681a      	ldr	r2, [r3, #0]
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	f042 0201 	orr.w	r2, r2, #1
 800ed92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ed94:	6878      	ldr	r0, [r7, #4]
 800ed96:	f001 fe8d 	bl	8010ab4 <UART_CheckIdleState>
 800ed9a:	4603      	mov	r3, r0
}
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	3708      	adds	r7, #8
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd80      	pop	{r7, pc}

0800eda4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b08a      	sub	sp, #40	@ 0x28
 800eda8:	af02      	add	r7, sp, #8
 800edaa:	60f8      	str	r0, [r7, #12]
 800edac:	60b9      	str	r1, [r7, #8]
 800edae:	603b      	str	r3, [r7, #0]
 800edb0:	4613      	mov	r3, r2
 800edb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800edba:	2b20      	cmp	r3, #32
 800edbc:	d17b      	bne.n	800eeb6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800edbe:	68bb      	ldr	r3, [r7, #8]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d002      	beq.n	800edca <HAL_UART_Transmit+0x26>
 800edc4:	88fb      	ldrh	r3, [r7, #6]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d101      	bne.n	800edce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800edca:	2301      	movs	r3, #1
 800edcc:	e074      	b.n	800eeb8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	2200      	movs	r2, #0
 800edd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	2221      	movs	r2, #33	@ 0x21
 800edda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800edde:	f7f7 f84b 	bl	8005e78 <HAL_GetTick>
 800ede2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	88fa      	ldrh	r2, [r7, #6]
 800ede8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	88fa      	ldrh	r2, [r7, #6]
 800edf0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	689b      	ldr	r3, [r3, #8]
 800edf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800edfc:	d108      	bne.n	800ee10 <HAL_UART_Transmit+0x6c>
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	691b      	ldr	r3, [r3, #16]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d104      	bne.n	800ee10 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ee06:	2300      	movs	r3, #0
 800ee08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ee0a:	68bb      	ldr	r3, [r7, #8]
 800ee0c:	61bb      	str	r3, [r7, #24]
 800ee0e:	e003      	b.n	800ee18 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ee10:	68bb      	ldr	r3, [r7, #8]
 800ee12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ee14:	2300      	movs	r3, #0
 800ee16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ee18:	e030      	b.n	800ee7c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ee1a:	683b      	ldr	r3, [r7, #0]
 800ee1c:	9300      	str	r3, [sp, #0]
 800ee1e:	697b      	ldr	r3, [r7, #20]
 800ee20:	2200      	movs	r2, #0
 800ee22:	2180      	movs	r1, #128	@ 0x80
 800ee24:	68f8      	ldr	r0, [r7, #12]
 800ee26:	f001 feef 	bl	8010c08 <UART_WaitOnFlagUntilTimeout>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d005      	beq.n	800ee3c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	2220      	movs	r2, #32
 800ee34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ee38:	2303      	movs	r3, #3
 800ee3a:	e03d      	b.n	800eeb8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ee3c:	69fb      	ldr	r3, [r7, #28]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d10b      	bne.n	800ee5a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ee42:	69bb      	ldr	r3, [r7, #24]
 800ee44:	881b      	ldrh	r3, [r3, #0]
 800ee46:	461a      	mov	r2, r3
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ee50:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ee52:	69bb      	ldr	r3, [r7, #24]
 800ee54:	3302      	adds	r3, #2
 800ee56:	61bb      	str	r3, [r7, #24]
 800ee58:	e007      	b.n	800ee6a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ee5a:	69fb      	ldr	r3, [r7, #28]
 800ee5c:	781a      	ldrb	r2, [r3, #0]
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ee64:	69fb      	ldr	r3, [r7, #28]
 800ee66:	3301      	adds	r3, #1
 800ee68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ee70:	b29b      	uxth	r3, r3
 800ee72:	3b01      	subs	r3, #1
 800ee74:	b29a      	uxth	r2, r3
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ee82:	b29b      	uxth	r3, r3
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d1c8      	bne.n	800ee1a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	9300      	str	r3, [sp, #0]
 800ee8c:	697b      	ldr	r3, [r7, #20]
 800ee8e:	2200      	movs	r2, #0
 800ee90:	2140      	movs	r1, #64	@ 0x40
 800ee92:	68f8      	ldr	r0, [r7, #12]
 800ee94:	f001 feb8 	bl	8010c08 <UART_WaitOnFlagUntilTimeout>
 800ee98:	4603      	mov	r3, r0
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d005      	beq.n	800eeaa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	2220      	movs	r2, #32
 800eea2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800eea6:	2303      	movs	r3, #3
 800eea8:	e006      	b.n	800eeb8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	2220      	movs	r2, #32
 800eeae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	e000      	b.n	800eeb8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800eeb6:	2302      	movs	r3, #2
  }
}
 800eeb8:	4618      	mov	r0, r3
 800eeba:	3720      	adds	r7, #32
 800eebc:	46bd      	mov	sp, r7
 800eebe:	bd80      	pop	{r7, pc}

0800eec0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800eec0:	b480      	push	{r7}
 800eec2:	b091      	sub	sp, #68	@ 0x44
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	60f8      	str	r0, [r7, #12]
 800eec8:	60b9      	str	r1, [r7, #8]
 800eeca:	4613      	mov	r3, r2
 800eecc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800eed4:	2b20      	cmp	r3, #32
 800eed6:	d178      	bne.n	800efca <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800eed8:	68bb      	ldr	r3, [r7, #8]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d002      	beq.n	800eee4 <HAL_UART_Transmit_IT+0x24>
 800eede:	88fb      	ldrh	r3, [r7, #6]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d101      	bne.n	800eee8 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800eee4:	2301      	movs	r3, #1
 800eee6:	e071      	b.n	800efcc <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	68ba      	ldr	r2, [r7, #8]
 800eeec:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	88fa      	ldrh	r2, [r7, #6]
 800eef2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	88fa      	ldrh	r2, [r7, #6]
 800eefa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	2200      	movs	r2, #0
 800ef02:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	2200      	movs	r2, #0
 800ef08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	2221      	movs	r2, #33	@ 0x21
 800ef10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ef18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ef1c:	d12a      	bne.n	800ef74 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	689b      	ldr	r3, [r3, #8]
 800ef22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ef26:	d107      	bne.n	800ef38 <HAL_UART_Transmit_IT+0x78>
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	691b      	ldr	r3, [r3, #16]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d103      	bne.n	800ef38 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	4a29      	ldr	r2, [pc, #164]	@ (800efd8 <HAL_UART_Transmit_IT+0x118>)
 800ef34:	679a      	str	r2, [r3, #120]	@ 0x78
 800ef36:	e002      	b.n	800ef3e <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	4a28      	ldr	r2, [pc, #160]	@ (800efdc <HAL_UART_Transmit_IT+0x11c>)
 800ef3c:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	3308      	adds	r3, #8
 800ef44:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef48:	e853 3f00 	ldrex	r3, [r3]
 800ef4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ef4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef50:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ef54:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	3308      	adds	r3, #8
 800ef5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ef5e:	637a      	str	r2, [r7, #52]	@ 0x34
 800ef60:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef62:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ef64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ef66:	e841 2300 	strex	r3, r2, [r1]
 800ef6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ef6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d1e5      	bne.n	800ef3e <HAL_UART_Transmit_IT+0x7e>
 800ef72:	e028      	b.n	800efc6 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	689b      	ldr	r3, [r3, #8]
 800ef78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ef7c:	d107      	bne.n	800ef8e <HAL_UART_Transmit_IT+0xce>
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	691b      	ldr	r3, [r3, #16]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d103      	bne.n	800ef8e <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	4a15      	ldr	r2, [pc, #84]	@ (800efe0 <HAL_UART_Transmit_IT+0x120>)
 800ef8a:	679a      	str	r2, [r3, #120]	@ 0x78
 800ef8c:	e002      	b.n	800ef94 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	4a14      	ldr	r2, [pc, #80]	@ (800efe4 <HAL_UART_Transmit_IT+0x124>)
 800ef92:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef9a:	697b      	ldr	r3, [r7, #20]
 800ef9c:	e853 3f00 	ldrex	r3, [r3]
 800efa0:	613b      	str	r3, [r7, #16]
   return(result);
 800efa2:	693b      	ldr	r3, [r7, #16]
 800efa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800efa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	461a      	mov	r2, r3
 800efb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800efb2:	623b      	str	r3, [r7, #32]
 800efb4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efb6:	69f9      	ldr	r1, [r7, #28]
 800efb8:	6a3a      	ldr	r2, [r7, #32]
 800efba:	e841 2300 	strex	r3, r2, [r1]
 800efbe:	61bb      	str	r3, [r7, #24]
   return(result);
 800efc0:	69bb      	ldr	r3, [r7, #24]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d1e6      	bne.n	800ef94 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800efc6:	2300      	movs	r3, #0
 800efc8:	e000      	b.n	800efcc <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800efca:	2302      	movs	r3, #2
  }
}
 800efcc:	4618      	mov	r0, r3
 800efce:	3744      	adds	r7, #68	@ 0x44
 800efd0:	46bd      	mov	sp, r7
 800efd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd6:	4770      	bx	lr
 800efd8:	0801173d 	.word	0x0801173d
 800efdc:	0801165d 	.word	0x0801165d
 800efe0:	0801159b 	.word	0x0801159b
 800efe4:	080114e3 	.word	0x080114e3

0800efe8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b08a      	sub	sp, #40	@ 0x28
 800efec:	af00      	add	r7, sp, #0
 800efee:	60f8      	str	r0, [r7, #12]
 800eff0:	60b9      	str	r1, [r7, #8]
 800eff2:	4613      	mov	r3, r2
 800eff4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800effc:	2b20      	cmp	r3, #32
 800effe:	d137      	bne.n	800f070 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800f000:	68bb      	ldr	r3, [r7, #8]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d002      	beq.n	800f00c <HAL_UART_Receive_IT+0x24>
 800f006:	88fb      	ldrh	r3, [r7, #6]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d101      	bne.n	800f010 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800f00c:	2301      	movs	r3, #1
 800f00e:	e030      	b.n	800f072 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	2200      	movs	r2, #0
 800f014:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	4a18      	ldr	r2, [pc, #96]	@ (800f07c <HAL_UART_Receive_IT+0x94>)
 800f01c:	4293      	cmp	r3, r2
 800f01e:	d01f      	beq.n	800f060 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	685b      	ldr	r3, [r3, #4]
 800f026:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d018      	beq.n	800f060 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f034:	697b      	ldr	r3, [r7, #20]
 800f036:	e853 3f00 	ldrex	r3, [r3]
 800f03a:	613b      	str	r3, [r7, #16]
   return(result);
 800f03c:	693b      	ldr	r3, [r7, #16]
 800f03e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f042:	627b      	str	r3, [r7, #36]	@ 0x24
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	461a      	mov	r2, r3
 800f04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f04c:	623b      	str	r3, [r7, #32]
 800f04e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f050:	69f9      	ldr	r1, [r7, #28]
 800f052:	6a3a      	ldr	r2, [r7, #32]
 800f054:	e841 2300 	strex	r3, r2, [r1]
 800f058:	61bb      	str	r3, [r7, #24]
   return(result);
 800f05a:	69bb      	ldr	r3, [r7, #24]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d1e6      	bne.n	800f02e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800f060:	88fb      	ldrh	r3, [r7, #6]
 800f062:	461a      	mov	r2, r3
 800f064:	68b9      	ldr	r1, [r7, #8]
 800f066:	68f8      	ldr	r0, [r7, #12]
 800f068:	f001 fe3c 	bl	8010ce4 <UART_Start_Receive_IT>
 800f06c:	4603      	mov	r3, r0
 800f06e:	e000      	b.n	800f072 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800f070:	2302      	movs	r3, #2
  }
}
 800f072:	4618      	mov	r0, r3
 800f074:	3728      	adds	r7, #40	@ 0x28
 800f076:	46bd      	mov	sp, r7
 800f078:	bd80      	pop	{r7, pc}
 800f07a:	bf00      	nop
 800f07c:	58000c00 	.word	0x58000c00

0800f080 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b08a      	sub	sp, #40	@ 0x28
 800f084:	af00      	add	r7, sp, #0
 800f086:	60f8      	str	r0, [r7, #12]
 800f088:	60b9      	str	r1, [r7, #8]
 800f08a:	4613      	mov	r3, r2
 800f08c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f094:	2b20      	cmp	r3, #32
 800f096:	d137      	bne.n	800f108 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800f098:	68bb      	ldr	r3, [r7, #8]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d002      	beq.n	800f0a4 <HAL_UART_Receive_DMA+0x24>
 800f09e:	88fb      	ldrh	r3, [r7, #6]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d101      	bne.n	800f0a8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800f0a4:	2301      	movs	r3, #1
 800f0a6:	e030      	b.n	800f10a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	2200      	movs	r2, #0
 800f0ac:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	4a18      	ldr	r2, [pc, #96]	@ (800f114 <HAL_UART_Receive_DMA+0x94>)
 800f0b4:	4293      	cmp	r3, r2
 800f0b6:	d01f      	beq.n	800f0f8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	685b      	ldr	r3, [r3, #4]
 800f0be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d018      	beq.n	800f0f8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0cc:	697b      	ldr	r3, [r7, #20]
 800f0ce:	e853 3f00 	ldrex	r3, [r3]
 800f0d2:	613b      	str	r3, [r7, #16]
   return(result);
 800f0d4:	693b      	ldr	r3, [r7, #16]
 800f0d6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f0da:	627b      	str	r3, [r7, #36]	@ 0x24
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	461a      	mov	r2, r3
 800f0e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0e4:	623b      	str	r3, [r7, #32]
 800f0e6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0e8:	69f9      	ldr	r1, [r7, #28]
 800f0ea:	6a3a      	ldr	r2, [r7, #32]
 800f0ec:	e841 2300 	strex	r3, r2, [r1]
 800f0f0:	61bb      	str	r3, [r7, #24]
   return(result);
 800f0f2:	69bb      	ldr	r3, [r7, #24]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d1e6      	bne.n	800f0c6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800f0f8:	88fb      	ldrh	r3, [r7, #6]
 800f0fa:	461a      	mov	r2, r3
 800f0fc:	68b9      	ldr	r1, [r7, #8]
 800f0fe:	68f8      	ldr	r0, [r7, #12]
 800f100:	f001 ff12 	bl	8010f28 <UART_Start_Receive_DMA>
 800f104:	4603      	mov	r3, r0
 800f106:	e000      	b.n	800f10a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800f108:	2302      	movs	r3, #2
  }
}
 800f10a:	4618      	mov	r0, r3
 800f10c:	3728      	adds	r7, #40	@ 0x28
 800f10e:	46bd      	mov	sp, r7
 800f110:	bd80      	pop	{r7, pc}
 800f112:	bf00      	nop
 800f114:	58000c00 	.word	0x58000c00

0800f118 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b090      	sub	sp, #64	@ 0x40
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f126:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f12e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	689b      	ldr	r3, [r3, #8]
 800f136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f13a:	2b80      	cmp	r3, #128	@ 0x80
 800f13c:	d139      	bne.n	800f1b2 <HAL_UART_DMAStop+0x9a>
 800f13e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f140:	2b21      	cmp	r3, #33	@ 0x21
 800f142:	d136      	bne.n	800f1b2 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	3308      	adds	r3, #8
 800f14a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f14c:	6a3b      	ldr	r3, [r7, #32]
 800f14e:	e853 3f00 	ldrex	r3, [r3]
 800f152:	61fb      	str	r3, [r7, #28]
   return(result);
 800f154:	69fb      	ldr	r3, [r7, #28]
 800f156:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f15a:	637b      	str	r3, [r7, #52]	@ 0x34
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	3308      	adds	r3, #8
 800f162:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f164:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f166:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f168:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f16a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f16c:	e841 2300 	strex	r3, r2, [r1]
 800f170:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f174:	2b00      	cmp	r3, #0
 800f176:	d1e5      	bne.n	800f144 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d015      	beq.n	800f1ac <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f184:	4618      	mov	r0, r3
 800f186:	f7f7 fdd3 	bl	8006d30 <HAL_DMA_Abort>
 800f18a:	4603      	mov	r3, r0
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d00d      	beq.n	800f1ac <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f194:	4618      	mov	r0, r3
 800f196:	f7f9 fa91 	bl	80086bc <HAL_DMA_GetError>
 800f19a:	4603      	mov	r3, r0
 800f19c:	2b20      	cmp	r3, #32
 800f19e:	d105      	bne.n	800f1ac <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	2210      	movs	r2, #16
 800f1a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800f1a8:	2303      	movs	r3, #3
 800f1aa:	e047      	b.n	800f23c <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800f1ac:	6878      	ldr	r0, [r7, #4]
 800f1ae:	f001 ff61 	bl	8011074 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	689b      	ldr	r3, [r3, #8]
 800f1b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f1bc:	2b40      	cmp	r3, #64	@ 0x40
 800f1be:	d13c      	bne.n	800f23a <HAL_UART_DMAStop+0x122>
 800f1c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1c2:	2b22      	cmp	r3, #34	@ 0x22
 800f1c4:	d139      	bne.n	800f23a <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	3308      	adds	r3, #8
 800f1cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	e853 3f00 	ldrex	r3, [r3]
 800f1d4:	60bb      	str	r3, [r7, #8]
   return(result);
 800f1d6:	68bb      	ldr	r3, [r7, #8]
 800f1d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f1dc:	633b      	str	r3, [r7, #48]	@ 0x30
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	3308      	adds	r3, #8
 800f1e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f1e6:	61ba      	str	r2, [r7, #24]
 800f1e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1ea:	6979      	ldr	r1, [r7, #20]
 800f1ec:	69ba      	ldr	r2, [r7, #24]
 800f1ee:	e841 2300 	strex	r3, r2, [r1]
 800f1f2:	613b      	str	r3, [r7, #16]
   return(result);
 800f1f4:	693b      	ldr	r3, [r7, #16]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d1e5      	bne.n	800f1c6 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f200:	2b00      	cmp	r3, #0
 800f202:	d017      	beq.n	800f234 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f20a:	4618      	mov	r0, r3
 800f20c:	f7f7 fd90 	bl	8006d30 <HAL_DMA_Abort>
 800f210:	4603      	mov	r3, r0
 800f212:	2b00      	cmp	r3, #0
 800f214:	d00e      	beq.n	800f234 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f21c:	4618      	mov	r0, r3
 800f21e:	f7f9 fa4d 	bl	80086bc <HAL_DMA_GetError>
 800f222:	4603      	mov	r3, r0
 800f224:	2b20      	cmp	r3, #32
 800f226:	d105      	bne.n	800f234 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	2210      	movs	r2, #16
 800f22c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800f230:	2303      	movs	r3, #3
 800f232:	e003      	b.n	800f23c <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800f234:	6878      	ldr	r0, [r7, #4]
 800f236:	f001 ff5f 	bl	80110f8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800f23a:	2300      	movs	r3, #0
}
 800f23c:	4618      	mov	r0, r3
 800f23e:	3740      	adds	r7, #64	@ 0x40
 800f240:	46bd      	mov	sp, r7
 800f242:	bd80      	pop	{r7, pc}

0800f244 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800f244:	b580      	push	{r7, lr}
 800f246:	b0a2      	sub	sp, #136	@ 0x88
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 800f24c:	2301      	movs	r3, #1
 800f24e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f258:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f25a:	e853 3f00 	ldrex	r3, [r3]
 800f25e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f260:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f262:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800f266:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	461a      	mov	r2, r3
 800f270:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f274:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f276:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f278:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f27a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f27c:	e841 2300 	strex	r3, r2, [r1]
 800f280:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f282:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f284:	2b00      	cmp	r3, #0
 800f286:	d1e4      	bne.n	800f252 <HAL_UART_Abort_IT+0xe>
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	3308      	adds	r3, #8
 800f28e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f290:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f292:	e853 3f00 	ldrex	r3, [r3]
 800f296:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f298:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f29a:	4b85      	ldr	r3, [pc, #532]	@ (800f4b0 <HAL_UART_Abort_IT+0x26c>)
 800f29c:	4013      	ands	r3, r2
 800f29e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	3308      	adds	r3, #8
 800f2a6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800f2a8:	65ba      	str	r2, [r7, #88]	@ 0x58
 800f2aa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f2ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f2b0:	e841 2300 	strex	r3, r2, [r1]
 800f2b4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f2b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d1e5      	bne.n	800f288 <HAL_UART_Abort_IT+0x44>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f2c0:	2b01      	cmp	r3, #1
 800f2c2:	d118      	bne.n	800f2f6 <HAL_UART_Abort_IT+0xb2>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2cc:	e853 3f00 	ldrex	r3, [r3]
 800f2d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f2d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f2d4:	f023 0310 	bic.w	r3, r3, #16
 800f2d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	461a      	mov	r2, r3
 800f2e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f2e2:	647b      	str	r3, [r7, #68]	@ 0x44
 800f2e4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f2e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f2ea:	e841 2300 	strex	r3, r2, [r1]
 800f2ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f2f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d1e6      	bne.n	800f2c4 <HAL_UART_Abort_IT+0x80>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d00f      	beq.n	800f31e <HAL_UART_Abort_IT+0xda>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	689b      	ldr	r3, [r3, #8]
 800f304:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f308:	2b80      	cmp	r3, #128	@ 0x80
 800f30a:	d104      	bne.n	800f316 <HAL_UART_Abort_IT+0xd2>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f310:	4a68      	ldr	r2, [pc, #416]	@ (800f4b4 <HAL_UART_Abort_IT+0x270>)
 800f312:	651a      	str	r2, [r3, #80]	@ 0x50
 800f314:	e003      	b.n	800f31e <HAL_UART_Abort_IT+0xda>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f31a:	2200      	movs	r2, #0
 800f31c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f324:	2b00      	cmp	r3, #0
 800f326:	d011      	beq.n	800f34c <HAL_UART_Abort_IT+0x108>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	689b      	ldr	r3, [r3, #8]
 800f32e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f332:	2b40      	cmp	r3, #64	@ 0x40
 800f334:	d105      	bne.n	800f342 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f33c:	4a5e      	ldr	r2, [pc, #376]	@ (800f4b8 <HAL_UART_Abort_IT+0x274>)
 800f33e:	651a      	str	r2, [r3, #80]	@ 0x50
 800f340:	e004      	b.n	800f34c <HAL_UART_Abort_IT+0x108>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f348:	2200      	movs	r2, #0
 800f34a:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	689b      	ldr	r3, [r3, #8]
 800f352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f356:	2b80      	cmp	r3, #128	@ 0x80
 800f358:	d12d      	bne.n	800f3b6 <HAL_UART_Abort_IT+0x172>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	3308      	adds	r3, #8
 800f360:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f364:	e853 3f00 	ldrex	r3, [r3]
 800f368:	623b      	str	r3, [r7, #32]
   return(result);
 800f36a:	6a3b      	ldr	r3, [r7, #32]
 800f36c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f370:	677b      	str	r3, [r7, #116]	@ 0x74
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	3308      	adds	r3, #8
 800f378:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800f37a:	633a      	str	r2, [r7, #48]	@ 0x30
 800f37c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f37e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f380:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f382:	e841 2300 	strex	r3, r2, [r1]
 800f386:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d1e5      	bne.n	800f35a <HAL_UART_Abort_IT+0x116>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f392:	2b00      	cmp	r3, #0
 800f394:	d00f      	beq.n	800f3b6 <HAL_UART_Abort_IT+0x172>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f39a:	4618      	mov	r0, r3
 800f39c:	f7f7 ffe6 	bl	800736c <HAL_DMA_Abort_IT>
 800f3a0:	4603      	mov	r3, r0
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d004      	beq.n	800f3b0 <HAL_UART_Abort_IT+0x16c>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	651a      	str	r2, [r3, #80]	@ 0x50
 800f3ae:	e002      	b.n	800f3b6 <HAL_UART_Abort_IT+0x172>
      }
      else
      {
        abortcplt = 0U;
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	689b      	ldr	r3, [r3, #8]
 800f3bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f3c0:	2b40      	cmp	r3, #64	@ 0x40
 800f3c2:	d133      	bne.n	800f42c <HAL_UART_Abort_IT+0x1e8>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	3308      	adds	r3, #8
 800f3ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3cc:	693b      	ldr	r3, [r7, #16]
 800f3ce:	e853 3f00 	ldrex	r3, [r3]
 800f3d2:	60fb      	str	r3, [r7, #12]
   return(result);
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f3da:	673b      	str	r3, [r7, #112]	@ 0x70
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	3308      	adds	r3, #8
 800f3e2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800f3e4:	61fa      	str	r2, [r7, #28]
 800f3e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3e8:	69b9      	ldr	r1, [r7, #24]
 800f3ea:	69fa      	ldr	r2, [r7, #28]
 800f3ec:	e841 2300 	strex	r3, r2, [r1]
 800f3f0:	617b      	str	r3, [r7, #20]
   return(result);
 800f3f2:	697b      	ldr	r3, [r7, #20]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d1e5      	bne.n	800f3c4 <HAL_UART_Abort_IT+0x180>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d014      	beq.n	800f42c <HAL_UART_Abort_IT+0x1e8>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f408:	4618      	mov	r0, r3
 800f40a:	f7f7 ffaf 	bl	800736c <HAL_DMA_Abort_IT>
 800f40e:	4603      	mov	r3, r0
 800f410:	2b00      	cmp	r3, #0
 800f412:	d008      	beq.n	800f426 <HAL_UART_Abort_IT+0x1e2>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f41a:	2200      	movs	r2, #0
 800f41c:	651a      	str	r2, [r3, #80]	@ 0x50
        abortcplt = 1U;
 800f41e:	2301      	movs	r3, #1
 800f420:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f424:	e002      	b.n	800f42c <HAL_UART_Abort_IT+0x1e8>
      }
      else
      {
        abortcplt = 0U;
 800f426:	2300      	movs	r3, #0
 800f428:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 800f42c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f430:	2b01      	cmp	r3, #1
 800f432:	d138      	bne.n	800f4a6 <HAL_UART_Abort_IT+0x262>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	2200      	movs	r2, #0
 800f438:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->RxXferCount = 0U;
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	2200      	movs	r2, #0
 800f440:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	2200      	movs	r2, #0
 800f448:	675a      	str	r2, [r3, #116]	@ 0x74
    huart->TxISR = NULL;
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	2200      	movs	r2, #0
 800f44e:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	2200      	movs	r2, #0
 800f454:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	220f      	movs	r2, #15
 800f45e:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f464:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f468:	d107      	bne.n	800f47a <HAL_UART_Abort_IT+0x236>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	699a      	ldr	r2, [r3, #24]
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	f042 0210 	orr.w	r2, r2, #16
 800f478:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	699a      	ldr	r2, [r3, #24]
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	f042 0208 	orr.w	r2, r2, #8
 800f488:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	2220      	movs	r2, #32
 800f48e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    huart->RxState = HAL_UART_STATE_READY;
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	2220      	movs	r2, #32
 800f496:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	2200      	movs	r2, #0
 800f49e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800f4a0:	6878      	ldr	r0, [r7, #4]
 800f4a2:	f000 fbe3 	bl	800fc6c <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800f4a6:	2300      	movs	r3, #0
}
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	3788      	adds	r7, #136	@ 0x88
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	bd80      	pop	{r7, pc}
 800f4b0:	ef7ffffe 	.word	0xef7ffffe
 800f4b4:	080113d7 	.word	0x080113d7
 800f4b8:	08011463 	.word	0x08011463

0800f4bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b0ba      	sub	sp, #232	@ 0xe8
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	69db      	ldr	r3, [r3, #28]
 800f4ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	689b      	ldr	r3, [r3, #8]
 800f4de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f4e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800f4e6:	f640 030f 	movw	r3, #2063	@ 0x80f
 800f4ea:	4013      	ands	r3, r2
 800f4ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800f4f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d11b      	bne.n	800f530 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f4f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f4fc:	f003 0320 	and.w	r3, r3, #32
 800f500:	2b00      	cmp	r3, #0
 800f502:	d015      	beq.n	800f530 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f508:	f003 0320 	and.w	r3, r3, #32
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d105      	bne.n	800f51c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f510:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f514:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d009      	beq.n	800f530 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f520:	2b00      	cmp	r3, #0
 800f522:	f000 8377 	beq.w	800fc14 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f52a:	6878      	ldr	r0, [r7, #4]
 800f52c:	4798      	blx	r3
      }
      return;
 800f52e:	e371      	b.n	800fc14 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f530:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f534:	2b00      	cmp	r3, #0
 800f536:	f000 8123 	beq.w	800f780 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f53a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f53e:	4b8d      	ldr	r3, [pc, #564]	@ (800f774 <HAL_UART_IRQHandler+0x2b8>)
 800f540:	4013      	ands	r3, r2
 800f542:	2b00      	cmp	r3, #0
 800f544:	d106      	bne.n	800f554 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f546:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800f54a:	4b8b      	ldr	r3, [pc, #556]	@ (800f778 <HAL_UART_IRQHandler+0x2bc>)
 800f54c:	4013      	ands	r3, r2
 800f54e:	2b00      	cmp	r3, #0
 800f550:	f000 8116 	beq.w	800f780 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f558:	f003 0301 	and.w	r3, r3, #1
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d011      	beq.n	800f584 <HAL_UART_IRQHandler+0xc8>
 800f560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d00b      	beq.n	800f584 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	2201      	movs	r2, #1
 800f572:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f57a:	f043 0201 	orr.w	r2, r3, #1
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f588:	f003 0302 	and.w	r3, r3, #2
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d011      	beq.n	800f5b4 <HAL_UART_IRQHandler+0xf8>
 800f590:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f594:	f003 0301 	and.w	r3, r3, #1
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d00b      	beq.n	800f5b4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	2202      	movs	r2, #2
 800f5a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f5aa:	f043 0204 	orr.w	r2, r3, #4
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f5b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f5b8:	f003 0304 	and.w	r3, r3, #4
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d011      	beq.n	800f5e4 <HAL_UART_IRQHandler+0x128>
 800f5c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f5c4:	f003 0301 	and.w	r3, r3, #1
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d00b      	beq.n	800f5e4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	2204      	movs	r2, #4
 800f5d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f5da:	f043 0202 	orr.w	r2, r3, #2
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f5e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f5e8:	f003 0308 	and.w	r3, r3, #8
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d017      	beq.n	800f620 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f5f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f5f4:	f003 0320 	and.w	r3, r3, #32
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d105      	bne.n	800f608 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f5fc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f600:	4b5c      	ldr	r3, [pc, #368]	@ (800f774 <HAL_UART_IRQHandler+0x2b8>)
 800f602:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f604:	2b00      	cmp	r3, #0
 800f606:	d00b      	beq.n	800f620 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	2208      	movs	r2, #8
 800f60e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f616:	f043 0208 	orr.w	r2, r3, #8
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f624:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d012      	beq.n	800f652 <HAL_UART_IRQHandler+0x196>
 800f62c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f630:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f634:	2b00      	cmp	r3, #0
 800f636:	d00c      	beq.n	800f652 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f640:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f648:	f043 0220 	orr.w	r2, r3, #32
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f658:	2b00      	cmp	r3, #0
 800f65a:	f000 82dd 	beq.w	800fc18 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f65e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f662:	f003 0320 	and.w	r3, r3, #32
 800f666:	2b00      	cmp	r3, #0
 800f668:	d013      	beq.n	800f692 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f66a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f66e:	f003 0320 	and.w	r3, r3, #32
 800f672:	2b00      	cmp	r3, #0
 800f674:	d105      	bne.n	800f682 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f676:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f67a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d007      	beq.n	800f692 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f686:	2b00      	cmp	r3, #0
 800f688:	d003      	beq.n	800f692 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f68e:	6878      	ldr	r0, [r7, #4]
 800f690:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f698:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	689b      	ldr	r3, [r3, #8]
 800f6a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f6a6:	2b40      	cmp	r3, #64	@ 0x40
 800f6a8:	d005      	beq.n	800f6b6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f6aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f6ae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d054      	beq.n	800f760 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f6b6:	6878      	ldr	r0, [r7, #4]
 800f6b8:	f001 fd1e 	bl	80110f8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	689b      	ldr	r3, [r3, #8]
 800f6c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f6c6:	2b40      	cmp	r3, #64	@ 0x40
 800f6c8:	d146      	bne.n	800f758 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	3308      	adds	r3, #8
 800f6d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f6d8:	e853 3f00 	ldrex	r3, [r3]
 800f6dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800f6e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f6e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f6e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	3308      	adds	r3, #8
 800f6f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800f6f6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800f6fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800f702:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800f706:	e841 2300 	strex	r3, r2, [r1]
 800f70a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800f70e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f712:	2b00      	cmp	r3, #0
 800f714:	d1d9      	bne.n	800f6ca <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d017      	beq.n	800f750 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f726:	4a15      	ldr	r2, [pc, #84]	@ (800f77c <HAL_UART_IRQHandler+0x2c0>)
 800f728:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f730:	4618      	mov	r0, r3
 800f732:	f7f7 fe1b 	bl	800736c <HAL_DMA_Abort_IT>
 800f736:	4603      	mov	r3, r0
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d019      	beq.n	800f770 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f742:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f744:	687a      	ldr	r2, [r7, #4]
 800f746:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800f74a:	4610      	mov	r0, r2
 800f74c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f74e:	e00f      	b.n	800f770 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f750:	6878      	ldr	r0, [r7, #4]
 800f752:	f000 fa81 	bl	800fc58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f756:	e00b      	b.n	800f770 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f758:	6878      	ldr	r0, [r7, #4]
 800f75a:	f000 fa7d 	bl	800fc58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f75e:	e007      	b.n	800f770 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f760:	6878      	ldr	r0, [r7, #4]
 800f762:	f000 fa79 	bl	800fc58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	2200      	movs	r2, #0
 800f76a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800f76e:	e253      	b.n	800fc18 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f770:	bf00      	nop
    return;
 800f772:	e251      	b.n	800fc18 <HAL_UART_IRQHandler+0x75c>
 800f774:	10000001 	.word	0x10000001
 800f778:	04000120 	.word	0x04000120
 800f77c:	080113ab 	.word	0x080113ab

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f784:	2b01      	cmp	r3, #1
 800f786:	f040 81e7 	bne.w	800fb58 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f78a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f78e:	f003 0310 	and.w	r3, r3, #16
 800f792:	2b00      	cmp	r3, #0
 800f794:	f000 81e0 	beq.w	800fb58 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f79c:	f003 0310 	and.w	r3, r3, #16
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	f000 81d9 	beq.w	800fb58 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	2210      	movs	r2, #16
 800f7ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	689b      	ldr	r3, [r3, #8]
 800f7b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f7b8:	2b40      	cmp	r3, #64	@ 0x40
 800f7ba:	f040 8151 	bne.w	800fa60 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	4a96      	ldr	r2, [pc, #600]	@ (800fa20 <HAL_UART_IRQHandler+0x564>)
 800f7c8:	4293      	cmp	r3, r2
 800f7ca:	d068      	beq.n	800f89e <HAL_UART_IRQHandler+0x3e2>
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	4a93      	ldr	r2, [pc, #588]	@ (800fa24 <HAL_UART_IRQHandler+0x568>)
 800f7d6:	4293      	cmp	r3, r2
 800f7d8:	d061      	beq.n	800f89e <HAL_UART_IRQHandler+0x3e2>
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	4a91      	ldr	r2, [pc, #580]	@ (800fa28 <HAL_UART_IRQHandler+0x56c>)
 800f7e4:	4293      	cmp	r3, r2
 800f7e6:	d05a      	beq.n	800f89e <HAL_UART_IRQHandler+0x3e2>
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	4a8e      	ldr	r2, [pc, #568]	@ (800fa2c <HAL_UART_IRQHandler+0x570>)
 800f7f2:	4293      	cmp	r3, r2
 800f7f4:	d053      	beq.n	800f89e <HAL_UART_IRQHandler+0x3e2>
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	4a8c      	ldr	r2, [pc, #560]	@ (800fa30 <HAL_UART_IRQHandler+0x574>)
 800f800:	4293      	cmp	r3, r2
 800f802:	d04c      	beq.n	800f89e <HAL_UART_IRQHandler+0x3e2>
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	4a89      	ldr	r2, [pc, #548]	@ (800fa34 <HAL_UART_IRQHandler+0x578>)
 800f80e:	4293      	cmp	r3, r2
 800f810:	d045      	beq.n	800f89e <HAL_UART_IRQHandler+0x3e2>
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	4a87      	ldr	r2, [pc, #540]	@ (800fa38 <HAL_UART_IRQHandler+0x57c>)
 800f81c:	4293      	cmp	r3, r2
 800f81e:	d03e      	beq.n	800f89e <HAL_UART_IRQHandler+0x3e2>
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	4a84      	ldr	r2, [pc, #528]	@ (800fa3c <HAL_UART_IRQHandler+0x580>)
 800f82a:	4293      	cmp	r3, r2
 800f82c:	d037      	beq.n	800f89e <HAL_UART_IRQHandler+0x3e2>
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	4a82      	ldr	r2, [pc, #520]	@ (800fa40 <HAL_UART_IRQHandler+0x584>)
 800f838:	4293      	cmp	r3, r2
 800f83a:	d030      	beq.n	800f89e <HAL_UART_IRQHandler+0x3e2>
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	4a7f      	ldr	r2, [pc, #508]	@ (800fa44 <HAL_UART_IRQHandler+0x588>)
 800f846:	4293      	cmp	r3, r2
 800f848:	d029      	beq.n	800f89e <HAL_UART_IRQHandler+0x3e2>
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	4a7d      	ldr	r2, [pc, #500]	@ (800fa48 <HAL_UART_IRQHandler+0x58c>)
 800f854:	4293      	cmp	r3, r2
 800f856:	d022      	beq.n	800f89e <HAL_UART_IRQHandler+0x3e2>
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	4a7a      	ldr	r2, [pc, #488]	@ (800fa4c <HAL_UART_IRQHandler+0x590>)
 800f862:	4293      	cmp	r3, r2
 800f864:	d01b      	beq.n	800f89e <HAL_UART_IRQHandler+0x3e2>
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	4a78      	ldr	r2, [pc, #480]	@ (800fa50 <HAL_UART_IRQHandler+0x594>)
 800f870:	4293      	cmp	r3, r2
 800f872:	d014      	beq.n	800f89e <HAL_UART_IRQHandler+0x3e2>
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	4a75      	ldr	r2, [pc, #468]	@ (800fa54 <HAL_UART_IRQHandler+0x598>)
 800f87e:	4293      	cmp	r3, r2
 800f880:	d00d      	beq.n	800f89e <HAL_UART_IRQHandler+0x3e2>
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	4a73      	ldr	r2, [pc, #460]	@ (800fa58 <HAL_UART_IRQHandler+0x59c>)
 800f88c:	4293      	cmp	r3, r2
 800f88e:	d006      	beq.n	800f89e <HAL_UART_IRQHandler+0x3e2>
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	4a70      	ldr	r2, [pc, #448]	@ (800fa5c <HAL_UART_IRQHandler+0x5a0>)
 800f89a:	4293      	cmp	r3, r2
 800f89c:	d106      	bne.n	800f8ac <HAL_UART_IRQHandler+0x3f0>
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	685b      	ldr	r3, [r3, #4]
 800f8a8:	b29b      	uxth	r3, r3
 800f8aa:	e005      	b.n	800f8b8 <HAL_UART_IRQHandler+0x3fc>
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	685b      	ldr	r3, [r3, #4]
 800f8b6:	b29b      	uxth	r3, r3
 800f8b8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f8bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	f000 81ab 	beq.w	800fc1c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f8cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f8d0:	429a      	cmp	r2, r3
 800f8d2:	f080 81a3 	bcs.w	800fc1c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f8dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f8e6:	69db      	ldr	r3, [r3, #28]
 800f8e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f8ec:	f000 8087 	beq.w	800f9fe <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f8fc:	e853 3f00 	ldrex	r3, [r3]
 800f900:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800f904:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f908:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f90c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	461a      	mov	r2, r3
 800f916:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f91a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f91e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f922:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800f926:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f92a:	e841 2300 	strex	r3, r2, [r1]
 800f92e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800f932:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f936:	2b00      	cmp	r3, #0
 800f938:	d1da      	bne.n	800f8f0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	3308      	adds	r3, #8
 800f940:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f942:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f944:	e853 3f00 	ldrex	r3, [r3]
 800f948:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f94a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f94c:	f023 0301 	bic.w	r3, r3, #1
 800f950:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	3308      	adds	r3, #8
 800f95a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800f95e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800f962:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f964:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f966:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f96a:	e841 2300 	strex	r3, r2, [r1]
 800f96e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f970:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f972:	2b00      	cmp	r3, #0
 800f974:	d1e1      	bne.n	800f93a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	3308      	adds	r3, #8
 800f97c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f97e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f980:	e853 3f00 	ldrex	r3, [r3]
 800f984:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f986:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f988:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f98c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	3308      	adds	r3, #8
 800f996:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800f99a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f99c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f99e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f9a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f9a2:	e841 2300 	strex	r3, r2, [r1]
 800f9a6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f9a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d1e3      	bne.n	800f976 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	2220      	movs	r2, #32
 800f9b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	2200      	movs	r2, #0
 800f9ba:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f9c4:	e853 3f00 	ldrex	r3, [r3]
 800f9c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f9ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f9cc:	f023 0310 	bic.w	r3, r3, #16
 800f9d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	461a      	mov	r2, r3
 800f9da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f9de:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f9e0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f9e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f9e6:	e841 2300 	strex	r3, r2, [r1]
 800f9ea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f9ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d1e4      	bne.n	800f9bc <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	f7f7 f999 	bl	8006d30 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	2202      	movs	r2, #2
 800fa02:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fa10:	b29b      	uxth	r3, r3
 800fa12:	1ad3      	subs	r3, r2, r3
 800fa14:	b29b      	uxth	r3, r3
 800fa16:	4619      	mov	r1, r3
 800fa18:	6878      	ldr	r0, [r7, #4]
 800fa1a:	f000 f931 	bl	800fc80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fa1e:	e0fd      	b.n	800fc1c <HAL_UART_IRQHandler+0x760>
 800fa20:	40020010 	.word	0x40020010
 800fa24:	40020028 	.word	0x40020028
 800fa28:	40020040 	.word	0x40020040
 800fa2c:	40020058 	.word	0x40020058
 800fa30:	40020070 	.word	0x40020070
 800fa34:	40020088 	.word	0x40020088
 800fa38:	400200a0 	.word	0x400200a0
 800fa3c:	400200b8 	.word	0x400200b8
 800fa40:	40020410 	.word	0x40020410
 800fa44:	40020428 	.word	0x40020428
 800fa48:	40020440 	.word	0x40020440
 800fa4c:	40020458 	.word	0x40020458
 800fa50:	40020470 	.word	0x40020470
 800fa54:	40020488 	.word	0x40020488
 800fa58:	400204a0 	.word	0x400204a0
 800fa5c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fa6c:	b29b      	uxth	r3, r3
 800fa6e:	1ad3      	subs	r3, r2, r3
 800fa70:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fa7a:	b29b      	uxth	r3, r3
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	f000 80cf 	beq.w	800fc20 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800fa82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	f000 80ca 	beq.w	800fc20 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa94:	e853 3f00 	ldrex	r3, [r3]
 800fa98:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fa9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800faa0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	461a      	mov	r2, r3
 800faaa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800faae:	647b      	str	r3, [r7, #68]	@ 0x44
 800fab0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fab2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fab4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fab6:	e841 2300 	strex	r3, r2, [r1]
 800faba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fabc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d1e4      	bne.n	800fa8c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	3308      	adds	r3, #8
 800fac8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800faca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800facc:	e853 3f00 	ldrex	r3, [r3]
 800fad0:	623b      	str	r3, [r7, #32]
   return(result);
 800fad2:	6a3a      	ldr	r2, [r7, #32]
 800fad4:	4b55      	ldr	r3, [pc, #340]	@ (800fc2c <HAL_UART_IRQHandler+0x770>)
 800fad6:	4013      	ands	r3, r2
 800fad8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	3308      	adds	r3, #8
 800fae2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800fae6:	633a      	str	r2, [r7, #48]	@ 0x30
 800fae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800faec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800faee:	e841 2300 	strex	r3, r2, [r1]
 800faf2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800faf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d1e3      	bne.n	800fac2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	2220      	movs	r2, #32
 800fafe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	2200      	movs	r2, #0
 800fb06:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb14:	693b      	ldr	r3, [r7, #16]
 800fb16:	e853 3f00 	ldrex	r3, [r3]
 800fb1a:	60fb      	str	r3, [r7, #12]
   return(result);
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	f023 0310 	bic.w	r3, r3, #16
 800fb22:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	461a      	mov	r2, r3
 800fb2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800fb30:	61fb      	str	r3, [r7, #28]
 800fb32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb34:	69b9      	ldr	r1, [r7, #24]
 800fb36:	69fa      	ldr	r2, [r7, #28]
 800fb38:	e841 2300 	strex	r3, r2, [r1]
 800fb3c:	617b      	str	r3, [r7, #20]
   return(result);
 800fb3e:	697b      	ldr	r3, [r7, #20]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d1e4      	bne.n	800fb0e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2202      	movs	r2, #2
 800fb48:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fb4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800fb4e:	4619      	mov	r1, r3
 800fb50:	6878      	ldr	r0, [r7, #4]
 800fb52:	f000 f895 	bl	800fc80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fb56:	e063      	b.n	800fc20 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800fb58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fb5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d00e      	beq.n	800fb82 <HAL_UART_IRQHandler+0x6c6>
 800fb64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fb68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d008      	beq.n	800fb82 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800fb78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800fb7a:	6878      	ldr	r0, [r7, #4]
 800fb7c:	f002 fb9a 	bl	80122b4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fb80:	e051      	b.n	800fc26 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800fb82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fb86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d014      	beq.n	800fbb8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800fb8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fb92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d105      	bne.n	800fba6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800fb9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fb9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d008      	beq.n	800fbb8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d03a      	beq.n	800fc24 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fbb2:	6878      	ldr	r0, [r7, #4]
 800fbb4:	4798      	blx	r3
    }
    return;
 800fbb6:	e035      	b.n	800fc24 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800fbb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fbbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d009      	beq.n	800fbd8 <HAL_UART_IRQHandler+0x71c>
 800fbc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fbc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d003      	beq.n	800fbd8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800fbd0:	6878      	ldr	r0, [r7, #4]
 800fbd2:	f001 fe28 	bl	8011826 <UART_EndTransmit_IT>
    return;
 800fbd6:	e026      	b.n	800fc26 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800fbd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fbdc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d009      	beq.n	800fbf8 <HAL_UART_IRQHandler+0x73c>
 800fbe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fbe8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d003      	beq.n	800fbf8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800fbf0:	6878      	ldr	r0, [r7, #4]
 800fbf2:	f002 fb73 	bl	80122dc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fbf6:	e016      	b.n	800fc26 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800fbf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fbfc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d010      	beq.n	800fc26 <HAL_UART_IRQHandler+0x76a>
 800fc04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	da0c      	bge.n	800fc26 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800fc0c:	6878      	ldr	r0, [r7, #4]
 800fc0e:	f002 fb5b 	bl	80122c8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fc12:	e008      	b.n	800fc26 <HAL_UART_IRQHandler+0x76a>
      return;
 800fc14:	bf00      	nop
 800fc16:	e006      	b.n	800fc26 <HAL_UART_IRQHandler+0x76a>
    return;
 800fc18:	bf00      	nop
 800fc1a:	e004      	b.n	800fc26 <HAL_UART_IRQHandler+0x76a>
      return;
 800fc1c:	bf00      	nop
 800fc1e:	e002      	b.n	800fc26 <HAL_UART_IRQHandler+0x76a>
      return;
 800fc20:	bf00      	nop
 800fc22:	e000      	b.n	800fc26 <HAL_UART_IRQHandler+0x76a>
    return;
 800fc24:	bf00      	nop
  }
}
 800fc26:	37e8      	adds	r7, #232	@ 0xe8
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	bd80      	pop	{r7, pc}
 800fc2c:	effffffe 	.word	0xeffffffe

0800fc30 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fc30:	b480      	push	{r7}
 800fc32:	b083      	sub	sp, #12
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800fc38:	bf00      	nop
 800fc3a:	370c      	adds	r7, #12
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc42:	4770      	bx	lr

0800fc44 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fc44:	b480      	push	{r7}
 800fc46:	b083      	sub	sp, #12
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800fc4c:	bf00      	nop
 800fc4e:	370c      	adds	r7, #12
 800fc50:	46bd      	mov	sp, r7
 800fc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc56:	4770      	bx	lr

0800fc58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fc58:	b480      	push	{r7}
 800fc5a:	b083      	sub	sp, #12
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800fc60:	bf00      	nop
 800fc62:	370c      	adds	r7, #12
 800fc64:	46bd      	mov	sp, r7
 800fc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6a:	4770      	bx	lr

0800fc6c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800fc6c:	b480      	push	{r7}
 800fc6e:	b083      	sub	sp, #12
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800fc74:	bf00      	nop
 800fc76:	370c      	adds	r7, #12
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7e:	4770      	bx	lr

0800fc80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800fc80:	b480      	push	{r7}
 800fc82:	b083      	sub	sp, #12
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
 800fc88:	460b      	mov	r3, r1
 800fc8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fc8c:	bf00      	nop
 800fc8e:	370c      	adds	r7, #12
 800fc90:	46bd      	mov	sp, r7
 800fc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc96:	4770      	bx	lr

0800fc98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fc98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fc9c:	b092      	sub	sp, #72	@ 0x48
 800fc9e:	af00      	add	r7, sp, #0
 800fca0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fca2:	2300      	movs	r3, #0
 800fca4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fca8:	697b      	ldr	r3, [r7, #20]
 800fcaa:	689a      	ldr	r2, [r3, #8]
 800fcac:	697b      	ldr	r3, [r7, #20]
 800fcae:	691b      	ldr	r3, [r3, #16]
 800fcb0:	431a      	orrs	r2, r3
 800fcb2:	697b      	ldr	r3, [r7, #20]
 800fcb4:	695b      	ldr	r3, [r3, #20]
 800fcb6:	431a      	orrs	r2, r3
 800fcb8:	697b      	ldr	r3, [r7, #20]
 800fcba:	69db      	ldr	r3, [r3, #28]
 800fcbc:	4313      	orrs	r3, r2
 800fcbe:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fcc0:	697b      	ldr	r3, [r7, #20]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	681a      	ldr	r2, [r3, #0]
 800fcc6:	4bbe      	ldr	r3, [pc, #760]	@ (800ffc0 <UART_SetConfig+0x328>)
 800fcc8:	4013      	ands	r3, r2
 800fcca:	697a      	ldr	r2, [r7, #20]
 800fccc:	6812      	ldr	r2, [r2, #0]
 800fcce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fcd0:	430b      	orrs	r3, r1
 800fcd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fcd4:	697b      	ldr	r3, [r7, #20]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	685b      	ldr	r3, [r3, #4]
 800fcda:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800fcde:	697b      	ldr	r3, [r7, #20]
 800fce0:	68da      	ldr	r2, [r3, #12]
 800fce2:	697b      	ldr	r3, [r7, #20]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	430a      	orrs	r2, r1
 800fce8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fcea:	697b      	ldr	r3, [r7, #20]
 800fcec:	699b      	ldr	r3, [r3, #24]
 800fcee:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800fcf0:	697b      	ldr	r3, [r7, #20]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	4ab3      	ldr	r2, [pc, #716]	@ (800ffc4 <UART_SetConfig+0x32c>)
 800fcf6:	4293      	cmp	r3, r2
 800fcf8:	d004      	beq.n	800fd04 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800fcfa:	697b      	ldr	r3, [r7, #20]
 800fcfc:	6a1b      	ldr	r3, [r3, #32]
 800fcfe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fd00:	4313      	orrs	r3, r2
 800fd02:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fd04:	697b      	ldr	r3, [r7, #20]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	689a      	ldr	r2, [r3, #8]
 800fd0a:	4baf      	ldr	r3, [pc, #700]	@ (800ffc8 <UART_SetConfig+0x330>)
 800fd0c:	4013      	ands	r3, r2
 800fd0e:	697a      	ldr	r2, [r7, #20]
 800fd10:	6812      	ldr	r2, [r2, #0]
 800fd12:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fd14:	430b      	orrs	r3, r1
 800fd16:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800fd18:	697b      	ldr	r3, [r7, #20]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd1e:	f023 010f 	bic.w	r1, r3, #15
 800fd22:	697b      	ldr	r3, [r7, #20]
 800fd24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fd26:	697b      	ldr	r3, [r7, #20]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	430a      	orrs	r2, r1
 800fd2c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fd2e:	697b      	ldr	r3, [r7, #20]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	4aa6      	ldr	r2, [pc, #664]	@ (800ffcc <UART_SetConfig+0x334>)
 800fd34:	4293      	cmp	r3, r2
 800fd36:	d177      	bne.n	800fe28 <UART_SetConfig+0x190>
 800fd38:	4ba5      	ldr	r3, [pc, #660]	@ (800ffd0 <UART_SetConfig+0x338>)
 800fd3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fd3c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fd40:	2b28      	cmp	r3, #40	@ 0x28
 800fd42:	d86d      	bhi.n	800fe20 <UART_SetConfig+0x188>
 800fd44:	a201      	add	r2, pc, #4	@ (adr r2, 800fd4c <UART_SetConfig+0xb4>)
 800fd46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd4a:	bf00      	nop
 800fd4c:	0800fdf1 	.word	0x0800fdf1
 800fd50:	0800fe21 	.word	0x0800fe21
 800fd54:	0800fe21 	.word	0x0800fe21
 800fd58:	0800fe21 	.word	0x0800fe21
 800fd5c:	0800fe21 	.word	0x0800fe21
 800fd60:	0800fe21 	.word	0x0800fe21
 800fd64:	0800fe21 	.word	0x0800fe21
 800fd68:	0800fe21 	.word	0x0800fe21
 800fd6c:	0800fdf9 	.word	0x0800fdf9
 800fd70:	0800fe21 	.word	0x0800fe21
 800fd74:	0800fe21 	.word	0x0800fe21
 800fd78:	0800fe21 	.word	0x0800fe21
 800fd7c:	0800fe21 	.word	0x0800fe21
 800fd80:	0800fe21 	.word	0x0800fe21
 800fd84:	0800fe21 	.word	0x0800fe21
 800fd88:	0800fe21 	.word	0x0800fe21
 800fd8c:	0800fe01 	.word	0x0800fe01
 800fd90:	0800fe21 	.word	0x0800fe21
 800fd94:	0800fe21 	.word	0x0800fe21
 800fd98:	0800fe21 	.word	0x0800fe21
 800fd9c:	0800fe21 	.word	0x0800fe21
 800fda0:	0800fe21 	.word	0x0800fe21
 800fda4:	0800fe21 	.word	0x0800fe21
 800fda8:	0800fe21 	.word	0x0800fe21
 800fdac:	0800fe09 	.word	0x0800fe09
 800fdb0:	0800fe21 	.word	0x0800fe21
 800fdb4:	0800fe21 	.word	0x0800fe21
 800fdb8:	0800fe21 	.word	0x0800fe21
 800fdbc:	0800fe21 	.word	0x0800fe21
 800fdc0:	0800fe21 	.word	0x0800fe21
 800fdc4:	0800fe21 	.word	0x0800fe21
 800fdc8:	0800fe21 	.word	0x0800fe21
 800fdcc:	0800fe11 	.word	0x0800fe11
 800fdd0:	0800fe21 	.word	0x0800fe21
 800fdd4:	0800fe21 	.word	0x0800fe21
 800fdd8:	0800fe21 	.word	0x0800fe21
 800fddc:	0800fe21 	.word	0x0800fe21
 800fde0:	0800fe21 	.word	0x0800fe21
 800fde4:	0800fe21 	.word	0x0800fe21
 800fde8:	0800fe21 	.word	0x0800fe21
 800fdec:	0800fe19 	.word	0x0800fe19
 800fdf0:	2301      	movs	r3, #1
 800fdf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fdf6:	e326      	b.n	8010446 <UART_SetConfig+0x7ae>
 800fdf8:	2304      	movs	r3, #4
 800fdfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fdfe:	e322      	b.n	8010446 <UART_SetConfig+0x7ae>
 800fe00:	2308      	movs	r3, #8
 800fe02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe06:	e31e      	b.n	8010446 <UART_SetConfig+0x7ae>
 800fe08:	2310      	movs	r3, #16
 800fe0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe0e:	e31a      	b.n	8010446 <UART_SetConfig+0x7ae>
 800fe10:	2320      	movs	r3, #32
 800fe12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe16:	e316      	b.n	8010446 <UART_SetConfig+0x7ae>
 800fe18:	2340      	movs	r3, #64	@ 0x40
 800fe1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe1e:	e312      	b.n	8010446 <UART_SetConfig+0x7ae>
 800fe20:	2380      	movs	r3, #128	@ 0x80
 800fe22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe26:	e30e      	b.n	8010446 <UART_SetConfig+0x7ae>
 800fe28:	697b      	ldr	r3, [r7, #20]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	4a69      	ldr	r2, [pc, #420]	@ (800ffd4 <UART_SetConfig+0x33c>)
 800fe2e:	4293      	cmp	r3, r2
 800fe30:	d130      	bne.n	800fe94 <UART_SetConfig+0x1fc>
 800fe32:	4b67      	ldr	r3, [pc, #412]	@ (800ffd0 <UART_SetConfig+0x338>)
 800fe34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fe36:	f003 0307 	and.w	r3, r3, #7
 800fe3a:	2b05      	cmp	r3, #5
 800fe3c:	d826      	bhi.n	800fe8c <UART_SetConfig+0x1f4>
 800fe3e:	a201      	add	r2, pc, #4	@ (adr r2, 800fe44 <UART_SetConfig+0x1ac>)
 800fe40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe44:	0800fe5d 	.word	0x0800fe5d
 800fe48:	0800fe65 	.word	0x0800fe65
 800fe4c:	0800fe6d 	.word	0x0800fe6d
 800fe50:	0800fe75 	.word	0x0800fe75
 800fe54:	0800fe7d 	.word	0x0800fe7d
 800fe58:	0800fe85 	.word	0x0800fe85
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe62:	e2f0      	b.n	8010446 <UART_SetConfig+0x7ae>
 800fe64:	2304      	movs	r3, #4
 800fe66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe6a:	e2ec      	b.n	8010446 <UART_SetConfig+0x7ae>
 800fe6c:	2308      	movs	r3, #8
 800fe6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe72:	e2e8      	b.n	8010446 <UART_SetConfig+0x7ae>
 800fe74:	2310      	movs	r3, #16
 800fe76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe7a:	e2e4      	b.n	8010446 <UART_SetConfig+0x7ae>
 800fe7c:	2320      	movs	r3, #32
 800fe7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe82:	e2e0      	b.n	8010446 <UART_SetConfig+0x7ae>
 800fe84:	2340      	movs	r3, #64	@ 0x40
 800fe86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe8a:	e2dc      	b.n	8010446 <UART_SetConfig+0x7ae>
 800fe8c:	2380      	movs	r3, #128	@ 0x80
 800fe8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe92:	e2d8      	b.n	8010446 <UART_SetConfig+0x7ae>
 800fe94:	697b      	ldr	r3, [r7, #20]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	4a4f      	ldr	r2, [pc, #316]	@ (800ffd8 <UART_SetConfig+0x340>)
 800fe9a:	4293      	cmp	r3, r2
 800fe9c:	d130      	bne.n	800ff00 <UART_SetConfig+0x268>
 800fe9e:	4b4c      	ldr	r3, [pc, #304]	@ (800ffd0 <UART_SetConfig+0x338>)
 800fea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fea2:	f003 0307 	and.w	r3, r3, #7
 800fea6:	2b05      	cmp	r3, #5
 800fea8:	d826      	bhi.n	800fef8 <UART_SetConfig+0x260>
 800feaa:	a201      	add	r2, pc, #4	@ (adr r2, 800feb0 <UART_SetConfig+0x218>)
 800feac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800feb0:	0800fec9 	.word	0x0800fec9
 800feb4:	0800fed1 	.word	0x0800fed1
 800feb8:	0800fed9 	.word	0x0800fed9
 800febc:	0800fee1 	.word	0x0800fee1
 800fec0:	0800fee9 	.word	0x0800fee9
 800fec4:	0800fef1 	.word	0x0800fef1
 800fec8:	2300      	movs	r3, #0
 800feca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fece:	e2ba      	b.n	8010446 <UART_SetConfig+0x7ae>
 800fed0:	2304      	movs	r3, #4
 800fed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fed6:	e2b6      	b.n	8010446 <UART_SetConfig+0x7ae>
 800fed8:	2308      	movs	r3, #8
 800feda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fede:	e2b2      	b.n	8010446 <UART_SetConfig+0x7ae>
 800fee0:	2310      	movs	r3, #16
 800fee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fee6:	e2ae      	b.n	8010446 <UART_SetConfig+0x7ae>
 800fee8:	2320      	movs	r3, #32
 800feea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800feee:	e2aa      	b.n	8010446 <UART_SetConfig+0x7ae>
 800fef0:	2340      	movs	r3, #64	@ 0x40
 800fef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fef6:	e2a6      	b.n	8010446 <UART_SetConfig+0x7ae>
 800fef8:	2380      	movs	r3, #128	@ 0x80
 800fefa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fefe:	e2a2      	b.n	8010446 <UART_SetConfig+0x7ae>
 800ff00:	697b      	ldr	r3, [r7, #20]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	4a35      	ldr	r2, [pc, #212]	@ (800ffdc <UART_SetConfig+0x344>)
 800ff06:	4293      	cmp	r3, r2
 800ff08:	d130      	bne.n	800ff6c <UART_SetConfig+0x2d4>
 800ff0a:	4b31      	ldr	r3, [pc, #196]	@ (800ffd0 <UART_SetConfig+0x338>)
 800ff0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ff0e:	f003 0307 	and.w	r3, r3, #7
 800ff12:	2b05      	cmp	r3, #5
 800ff14:	d826      	bhi.n	800ff64 <UART_SetConfig+0x2cc>
 800ff16:	a201      	add	r2, pc, #4	@ (adr r2, 800ff1c <UART_SetConfig+0x284>)
 800ff18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff1c:	0800ff35 	.word	0x0800ff35
 800ff20:	0800ff3d 	.word	0x0800ff3d
 800ff24:	0800ff45 	.word	0x0800ff45
 800ff28:	0800ff4d 	.word	0x0800ff4d
 800ff2c:	0800ff55 	.word	0x0800ff55
 800ff30:	0800ff5d 	.word	0x0800ff5d
 800ff34:	2300      	movs	r3, #0
 800ff36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff3a:	e284      	b.n	8010446 <UART_SetConfig+0x7ae>
 800ff3c:	2304      	movs	r3, #4
 800ff3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff42:	e280      	b.n	8010446 <UART_SetConfig+0x7ae>
 800ff44:	2308      	movs	r3, #8
 800ff46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff4a:	e27c      	b.n	8010446 <UART_SetConfig+0x7ae>
 800ff4c:	2310      	movs	r3, #16
 800ff4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff52:	e278      	b.n	8010446 <UART_SetConfig+0x7ae>
 800ff54:	2320      	movs	r3, #32
 800ff56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff5a:	e274      	b.n	8010446 <UART_SetConfig+0x7ae>
 800ff5c:	2340      	movs	r3, #64	@ 0x40
 800ff5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff62:	e270      	b.n	8010446 <UART_SetConfig+0x7ae>
 800ff64:	2380      	movs	r3, #128	@ 0x80
 800ff66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff6a:	e26c      	b.n	8010446 <UART_SetConfig+0x7ae>
 800ff6c:	697b      	ldr	r3, [r7, #20]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	4a1b      	ldr	r2, [pc, #108]	@ (800ffe0 <UART_SetConfig+0x348>)
 800ff72:	4293      	cmp	r3, r2
 800ff74:	d142      	bne.n	800fffc <UART_SetConfig+0x364>
 800ff76:	4b16      	ldr	r3, [pc, #88]	@ (800ffd0 <UART_SetConfig+0x338>)
 800ff78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ff7a:	f003 0307 	and.w	r3, r3, #7
 800ff7e:	2b05      	cmp	r3, #5
 800ff80:	d838      	bhi.n	800fff4 <UART_SetConfig+0x35c>
 800ff82:	a201      	add	r2, pc, #4	@ (adr r2, 800ff88 <UART_SetConfig+0x2f0>)
 800ff84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff88:	0800ffa1 	.word	0x0800ffa1
 800ff8c:	0800ffa9 	.word	0x0800ffa9
 800ff90:	0800ffb1 	.word	0x0800ffb1
 800ff94:	0800ffb9 	.word	0x0800ffb9
 800ff98:	0800ffe5 	.word	0x0800ffe5
 800ff9c:	0800ffed 	.word	0x0800ffed
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ffa6:	e24e      	b.n	8010446 <UART_SetConfig+0x7ae>
 800ffa8:	2304      	movs	r3, #4
 800ffaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ffae:	e24a      	b.n	8010446 <UART_SetConfig+0x7ae>
 800ffb0:	2308      	movs	r3, #8
 800ffb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ffb6:	e246      	b.n	8010446 <UART_SetConfig+0x7ae>
 800ffb8:	2310      	movs	r3, #16
 800ffba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ffbe:	e242      	b.n	8010446 <UART_SetConfig+0x7ae>
 800ffc0:	cfff69f3 	.word	0xcfff69f3
 800ffc4:	58000c00 	.word	0x58000c00
 800ffc8:	11fff4ff 	.word	0x11fff4ff
 800ffcc:	40011000 	.word	0x40011000
 800ffd0:	58024400 	.word	0x58024400
 800ffd4:	40004400 	.word	0x40004400
 800ffd8:	40004800 	.word	0x40004800
 800ffdc:	40004c00 	.word	0x40004c00
 800ffe0:	40005000 	.word	0x40005000
 800ffe4:	2320      	movs	r3, #32
 800ffe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ffea:	e22c      	b.n	8010446 <UART_SetConfig+0x7ae>
 800ffec:	2340      	movs	r3, #64	@ 0x40
 800ffee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fff2:	e228      	b.n	8010446 <UART_SetConfig+0x7ae>
 800fff4:	2380      	movs	r3, #128	@ 0x80
 800fff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fffa:	e224      	b.n	8010446 <UART_SetConfig+0x7ae>
 800fffc:	697b      	ldr	r3, [r7, #20]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	4ab1      	ldr	r2, [pc, #708]	@ (80102c8 <UART_SetConfig+0x630>)
 8010002:	4293      	cmp	r3, r2
 8010004:	d176      	bne.n	80100f4 <UART_SetConfig+0x45c>
 8010006:	4bb1      	ldr	r3, [pc, #708]	@ (80102cc <UART_SetConfig+0x634>)
 8010008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801000a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801000e:	2b28      	cmp	r3, #40	@ 0x28
 8010010:	d86c      	bhi.n	80100ec <UART_SetConfig+0x454>
 8010012:	a201      	add	r2, pc, #4	@ (adr r2, 8010018 <UART_SetConfig+0x380>)
 8010014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010018:	080100bd 	.word	0x080100bd
 801001c:	080100ed 	.word	0x080100ed
 8010020:	080100ed 	.word	0x080100ed
 8010024:	080100ed 	.word	0x080100ed
 8010028:	080100ed 	.word	0x080100ed
 801002c:	080100ed 	.word	0x080100ed
 8010030:	080100ed 	.word	0x080100ed
 8010034:	080100ed 	.word	0x080100ed
 8010038:	080100c5 	.word	0x080100c5
 801003c:	080100ed 	.word	0x080100ed
 8010040:	080100ed 	.word	0x080100ed
 8010044:	080100ed 	.word	0x080100ed
 8010048:	080100ed 	.word	0x080100ed
 801004c:	080100ed 	.word	0x080100ed
 8010050:	080100ed 	.word	0x080100ed
 8010054:	080100ed 	.word	0x080100ed
 8010058:	080100cd 	.word	0x080100cd
 801005c:	080100ed 	.word	0x080100ed
 8010060:	080100ed 	.word	0x080100ed
 8010064:	080100ed 	.word	0x080100ed
 8010068:	080100ed 	.word	0x080100ed
 801006c:	080100ed 	.word	0x080100ed
 8010070:	080100ed 	.word	0x080100ed
 8010074:	080100ed 	.word	0x080100ed
 8010078:	080100d5 	.word	0x080100d5
 801007c:	080100ed 	.word	0x080100ed
 8010080:	080100ed 	.word	0x080100ed
 8010084:	080100ed 	.word	0x080100ed
 8010088:	080100ed 	.word	0x080100ed
 801008c:	080100ed 	.word	0x080100ed
 8010090:	080100ed 	.word	0x080100ed
 8010094:	080100ed 	.word	0x080100ed
 8010098:	080100dd 	.word	0x080100dd
 801009c:	080100ed 	.word	0x080100ed
 80100a0:	080100ed 	.word	0x080100ed
 80100a4:	080100ed 	.word	0x080100ed
 80100a8:	080100ed 	.word	0x080100ed
 80100ac:	080100ed 	.word	0x080100ed
 80100b0:	080100ed 	.word	0x080100ed
 80100b4:	080100ed 	.word	0x080100ed
 80100b8:	080100e5 	.word	0x080100e5
 80100bc:	2301      	movs	r3, #1
 80100be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80100c2:	e1c0      	b.n	8010446 <UART_SetConfig+0x7ae>
 80100c4:	2304      	movs	r3, #4
 80100c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80100ca:	e1bc      	b.n	8010446 <UART_SetConfig+0x7ae>
 80100cc:	2308      	movs	r3, #8
 80100ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80100d2:	e1b8      	b.n	8010446 <UART_SetConfig+0x7ae>
 80100d4:	2310      	movs	r3, #16
 80100d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80100da:	e1b4      	b.n	8010446 <UART_SetConfig+0x7ae>
 80100dc:	2320      	movs	r3, #32
 80100de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80100e2:	e1b0      	b.n	8010446 <UART_SetConfig+0x7ae>
 80100e4:	2340      	movs	r3, #64	@ 0x40
 80100e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80100ea:	e1ac      	b.n	8010446 <UART_SetConfig+0x7ae>
 80100ec:	2380      	movs	r3, #128	@ 0x80
 80100ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80100f2:	e1a8      	b.n	8010446 <UART_SetConfig+0x7ae>
 80100f4:	697b      	ldr	r3, [r7, #20]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	4a75      	ldr	r2, [pc, #468]	@ (80102d0 <UART_SetConfig+0x638>)
 80100fa:	4293      	cmp	r3, r2
 80100fc:	d130      	bne.n	8010160 <UART_SetConfig+0x4c8>
 80100fe:	4b73      	ldr	r3, [pc, #460]	@ (80102cc <UART_SetConfig+0x634>)
 8010100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010102:	f003 0307 	and.w	r3, r3, #7
 8010106:	2b05      	cmp	r3, #5
 8010108:	d826      	bhi.n	8010158 <UART_SetConfig+0x4c0>
 801010a:	a201      	add	r2, pc, #4	@ (adr r2, 8010110 <UART_SetConfig+0x478>)
 801010c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010110:	08010129 	.word	0x08010129
 8010114:	08010131 	.word	0x08010131
 8010118:	08010139 	.word	0x08010139
 801011c:	08010141 	.word	0x08010141
 8010120:	08010149 	.word	0x08010149
 8010124:	08010151 	.word	0x08010151
 8010128:	2300      	movs	r3, #0
 801012a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801012e:	e18a      	b.n	8010446 <UART_SetConfig+0x7ae>
 8010130:	2304      	movs	r3, #4
 8010132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010136:	e186      	b.n	8010446 <UART_SetConfig+0x7ae>
 8010138:	2308      	movs	r3, #8
 801013a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801013e:	e182      	b.n	8010446 <UART_SetConfig+0x7ae>
 8010140:	2310      	movs	r3, #16
 8010142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010146:	e17e      	b.n	8010446 <UART_SetConfig+0x7ae>
 8010148:	2320      	movs	r3, #32
 801014a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801014e:	e17a      	b.n	8010446 <UART_SetConfig+0x7ae>
 8010150:	2340      	movs	r3, #64	@ 0x40
 8010152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010156:	e176      	b.n	8010446 <UART_SetConfig+0x7ae>
 8010158:	2380      	movs	r3, #128	@ 0x80
 801015a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801015e:	e172      	b.n	8010446 <UART_SetConfig+0x7ae>
 8010160:	697b      	ldr	r3, [r7, #20]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	4a5b      	ldr	r2, [pc, #364]	@ (80102d4 <UART_SetConfig+0x63c>)
 8010166:	4293      	cmp	r3, r2
 8010168:	d130      	bne.n	80101cc <UART_SetConfig+0x534>
 801016a:	4b58      	ldr	r3, [pc, #352]	@ (80102cc <UART_SetConfig+0x634>)
 801016c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801016e:	f003 0307 	and.w	r3, r3, #7
 8010172:	2b05      	cmp	r3, #5
 8010174:	d826      	bhi.n	80101c4 <UART_SetConfig+0x52c>
 8010176:	a201      	add	r2, pc, #4	@ (adr r2, 801017c <UART_SetConfig+0x4e4>)
 8010178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801017c:	08010195 	.word	0x08010195
 8010180:	0801019d 	.word	0x0801019d
 8010184:	080101a5 	.word	0x080101a5
 8010188:	080101ad 	.word	0x080101ad
 801018c:	080101b5 	.word	0x080101b5
 8010190:	080101bd 	.word	0x080101bd
 8010194:	2300      	movs	r3, #0
 8010196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801019a:	e154      	b.n	8010446 <UART_SetConfig+0x7ae>
 801019c:	2304      	movs	r3, #4
 801019e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80101a2:	e150      	b.n	8010446 <UART_SetConfig+0x7ae>
 80101a4:	2308      	movs	r3, #8
 80101a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80101aa:	e14c      	b.n	8010446 <UART_SetConfig+0x7ae>
 80101ac:	2310      	movs	r3, #16
 80101ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80101b2:	e148      	b.n	8010446 <UART_SetConfig+0x7ae>
 80101b4:	2320      	movs	r3, #32
 80101b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80101ba:	e144      	b.n	8010446 <UART_SetConfig+0x7ae>
 80101bc:	2340      	movs	r3, #64	@ 0x40
 80101be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80101c2:	e140      	b.n	8010446 <UART_SetConfig+0x7ae>
 80101c4:	2380      	movs	r3, #128	@ 0x80
 80101c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80101ca:	e13c      	b.n	8010446 <UART_SetConfig+0x7ae>
 80101cc:	697b      	ldr	r3, [r7, #20]
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	4a41      	ldr	r2, [pc, #260]	@ (80102d8 <UART_SetConfig+0x640>)
 80101d2:	4293      	cmp	r3, r2
 80101d4:	f040 8082 	bne.w	80102dc <UART_SetConfig+0x644>
 80101d8:	4b3c      	ldr	r3, [pc, #240]	@ (80102cc <UART_SetConfig+0x634>)
 80101da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80101dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80101e0:	2b28      	cmp	r3, #40	@ 0x28
 80101e2:	d86d      	bhi.n	80102c0 <UART_SetConfig+0x628>
 80101e4:	a201      	add	r2, pc, #4	@ (adr r2, 80101ec <UART_SetConfig+0x554>)
 80101e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101ea:	bf00      	nop
 80101ec:	08010291 	.word	0x08010291
 80101f0:	080102c1 	.word	0x080102c1
 80101f4:	080102c1 	.word	0x080102c1
 80101f8:	080102c1 	.word	0x080102c1
 80101fc:	080102c1 	.word	0x080102c1
 8010200:	080102c1 	.word	0x080102c1
 8010204:	080102c1 	.word	0x080102c1
 8010208:	080102c1 	.word	0x080102c1
 801020c:	08010299 	.word	0x08010299
 8010210:	080102c1 	.word	0x080102c1
 8010214:	080102c1 	.word	0x080102c1
 8010218:	080102c1 	.word	0x080102c1
 801021c:	080102c1 	.word	0x080102c1
 8010220:	080102c1 	.word	0x080102c1
 8010224:	080102c1 	.word	0x080102c1
 8010228:	080102c1 	.word	0x080102c1
 801022c:	080102a1 	.word	0x080102a1
 8010230:	080102c1 	.word	0x080102c1
 8010234:	080102c1 	.word	0x080102c1
 8010238:	080102c1 	.word	0x080102c1
 801023c:	080102c1 	.word	0x080102c1
 8010240:	080102c1 	.word	0x080102c1
 8010244:	080102c1 	.word	0x080102c1
 8010248:	080102c1 	.word	0x080102c1
 801024c:	080102a9 	.word	0x080102a9
 8010250:	080102c1 	.word	0x080102c1
 8010254:	080102c1 	.word	0x080102c1
 8010258:	080102c1 	.word	0x080102c1
 801025c:	080102c1 	.word	0x080102c1
 8010260:	080102c1 	.word	0x080102c1
 8010264:	080102c1 	.word	0x080102c1
 8010268:	080102c1 	.word	0x080102c1
 801026c:	080102b1 	.word	0x080102b1
 8010270:	080102c1 	.word	0x080102c1
 8010274:	080102c1 	.word	0x080102c1
 8010278:	080102c1 	.word	0x080102c1
 801027c:	080102c1 	.word	0x080102c1
 8010280:	080102c1 	.word	0x080102c1
 8010284:	080102c1 	.word	0x080102c1
 8010288:	080102c1 	.word	0x080102c1
 801028c:	080102b9 	.word	0x080102b9
 8010290:	2301      	movs	r3, #1
 8010292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010296:	e0d6      	b.n	8010446 <UART_SetConfig+0x7ae>
 8010298:	2304      	movs	r3, #4
 801029a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801029e:	e0d2      	b.n	8010446 <UART_SetConfig+0x7ae>
 80102a0:	2308      	movs	r3, #8
 80102a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80102a6:	e0ce      	b.n	8010446 <UART_SetConfig+0x7ae>
 80102a8:	2310      	movs	r3, #16
 80102aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80102ae:	e0ca      	b.n	8010446 <UART_SetConfig+0x7ae>
 80102b0:	2320      	movs	r3, #32
 80102b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80102b6:	e0c6      	b.n	8010446 <UART_SetConfig+0x7ae>
 80102b8:	2340      	movs	r3, #64	@ 0x40
 80102ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80102be:	e0c2      	b.n	8010446 <UART_SetConfig+0x7ae>
 80102c0:	2380      	movs	r3, #128	@ 0x80
 80102c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80102c6:	e0be      	b.n	8010446 <UART_SetConfig+0x7ae>
 80102c8:	40011400 	.word	0x40011400
 80102cc:	58024400 	.word	0x58024400
 80102d0:	40007800 	.word	0x40007800
 80102d4:	40007c00 	.word	0x40007c00
 80102d8:	40011800 	.word	0x40011800
 80102dc:	697b      	ldr	r3, [r7, #20]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	4aad      	ldr	r2, [pc, #692]	@ (8010598 <UART_SetConfig+0x900>)
 80102e2:	4293      	cmp	r3, r2
 80102e4:	d176      	bne.n	80103d4 <UART_SetConfig+0x73c>
 80102e6:	4bad      	ldr	r3, [pc, #692]	@ (801059c <UART_SetConfig+0x904>)
 80102e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80102ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80102ee:	2b28      	cmp	r3, #40	@ 0x28
 80102f0:	d86c      	bhi.n	80103cc <UART_SetConfig+0x734>
 80102f2:	a201      	add	r2, pc, #4	@ (adr r2, 80102f8 <UART_SetConfig+0x660>)
 80102f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102f8:	0801039d 	.word	0x0801039d
 80102fc:	080103cd 	.word	0x080103cd
 8010300:	080103cd 	.word	0x080103cd
 8010304:	080103cd 	.word	0x080103cd
 8010308:	080103cd 	.word	0x080103cd
 801030c:	080103cd 	.word	0x080103cd
 8010310:	080103cd 	.word	0x080103cd
 8010314:	080103cd 	.word	0x080103cd
 8010318:	080103a5 	.word	0x080103a5
 801031c:	080103cd 	.word	0x080103cd
 8010320:	080103cd 	.word	0x080103cd
 8010324:	080103cd 	.word	0x080103cd
 8010328:	080103cd 	.word	0x080103cd
 801032c:	080103cd 	.word	0x080103cd
 8010330:	080103cd 	.word	0x080103cd
 8010334:	080103cd 	.word	0x080103cd
 8010338:	080103ad 	.word	0x080103ad
 801033c:	080103cd 	.word	0x080103cd
 8010340:	080103cd 	.word	0x080103cd
 8010344:	080103cd 	.word	0x080103cd
 8010348:	080103cd 	.word	0x080103cd
 801034c:	080103cd 	.word	0x080103cd
 8010350:	080103cd 	.word	0x080103cd
 8010354:	080103cd 	.word	0x080103cd
 8010358:	080103b5 	.word	0x080103b5
 801035c:	080103cd 	.word	0x080103cd
 8010360:	080103cd 	.word	0x080103cd
 8010364:	080103cd 	.word	0x080103cd
 8010368:	080103cd 	.word	0x080103cd
 801036c:	080103cd 	.word	0x080103cd
 8010370:	080103cd 	.word	0x080103cd
 8010374:	080103cd 	.word	0x080103cd
 8010378:	080103bd 	.word	0x080103bd
 801037c:	080103cd 	.word	0x080103cd
 8010380:	080103cd 	.word	0x080103cd
 8010384:	080103cd 	.word	0x080103cd
 8010388:	080103cd 	.word	0x080103cd
 801038c:	080103cd 	.word	0x080103cd
 8010390:	080103cd 	.word	0x080103cd
 8010394:	080103cd 	.word	0x080103cd
 8010398:	080103c5 	.word	0x080103c5
 801039c:	2301      	movs	r3, #1
 801039e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80103a2:	e050      	b.n	8010446 <UART_SetConfig+0x7ae>
 80103a4:	2304      	movs	r3, #4
 80103a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80103aa:	e04c      	b.n	8010446 <UART_SetConfig+0x7ae>
 80103ac:	2308      	movs	r3, #8
 80103ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80103b2:	e048      	b.n	8010446 <UART_SetConfig+0x7ae>
 80103b4:	2310      	movs	r3, #16
 80103b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80103ba:	e044      	b.n	8010446 <UART_SetConfig+0x7ae>
 80103bc:	2320      	movs	r3, #32
 80103be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80103c2:	e040      	b.n	8010446 <UART_SetConfig+0x7ae>
 80103c4:	2340      	movs	r3, #64	@ 0x40
 80103c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80103ca:	e03c      	b.n	8010446 <UART_SetConfig+0x7ae>
 80103cc:	2380      	movs	r3, #128	@ 0x80
 80103ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80103d2:	e038      	b.n	8010446 <UART_SetConfig+0x7ae>
 80103d4:	697b      	ldr	r3, [r7, #20]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	4a71      	ldr	r2, [pc, #452]	@ (80105a0 <UART_SetConfig+0x908>)
 80103da:	4293      	cmp	r3, r2
 80103dc:	d130      	bne.n	8010440 <UART_SetConfig+0x7a8>
 80103de:	4b6f      	ldr	r3, [pc, #444]	@ (801059c <UART_SetConfig+0x904>)
 80103e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80103e2:	f003 0307 	and.w	r3, r3, #7
 80103e6:	2b05      	cmp	r3, #5
 80103e8:	d826      	bhi.n	8010438 <UART_SetConfig+0x7a0>
 80103ea:	a201      	add	r2, pc, #4	@ (adr r2, 80103f0 <UART_SetConfig+0x758>)
 80103ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103f0:	08010409 	.word	0x08010409
 80103f4:	08010411 	.word	0x08010411
 80103f8:	08010419 	.word	0x08010419
 80103fc:	08010421 	.word	0x08010421
 8010400:	08010429 	.word	0x08010429
 8010404:	08010431 	.word	0x08010431
 8010408:	2302      	movs	r3, #2
 801040a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801040e:	e01a      	b.n	8010446 <UART_SetConfig+0x7ae>
 8010410:	2304      	movs	r3, #4
 8010412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010416:	e016      	b.n	8010446 <UART_SetConfig+0x7ae>
 8010418:	2308      	movs	r3, #8
 801041a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801041e:	e012      	b.n	8010446 <UART_SetConfig+0x7ae>
 8010420:	2310      	movs	r3, #16
 8010422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010426:	e00e      	b.n	8010446 <UART_SetConfig+0x7ae>
 8010428:	2320      	movs	r3, #32
 801042a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801042e:	e00a      	b.n	8010446 <UART_SetConfig+0x7ae>
 8010430:	2340      	movs	r3, #64	@ 0x40
 8010432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010436:	e006      	b.n	8010446 <UART_SetConfig+0x7ae>
 8010438:	2380      	movs	r3, #128	@ 0x80
 801043a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801043e:	e002      	b.n	8010446 <UART_SetConfig+0x7ae>
 8010440:	2380      	movs	r3, #128	@ 0x80
 8010442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010446:	697b      	ldr	r3, [r7, #20]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	4a55      	ldr	r2, [pc, #340]	@ (80105a0 <UART_SetConfig+0x908>)
 801044c:	4293      	cmp	r3, r2
 801044e:	f040 80f8 	bne.w	8010642 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010452:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010456:	2b20      	cmp	r3, #32
 8010458:	dc46      	bgt.n	80104e8 <UART_SetConfig+0x850>
 801045a:	2b02      	cmp	r3, #2
 801045c:	db75      	blt.n	801054a <UART_SetConfig+0x8b2>
 801045e:	3b02      	subs	r3, #2
 8010460:	2b1e      	cmp	r3, #30
 8010462:	d872      	bhi.n	801054a <UART_SetConfig+0x8b2>
 8010464:	a201      	add	r2, pc, #4	@ (adr r2, 801046c <UART_SetConfig+0x7d4>)
 8010466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801046a:	bf00      	nop
 801046c:	080104ef 	.word	0x080104ef
 8010470:	0801054b 	.word	0x0801054b
 8010474:	080104f7 	.word	0x080104f7
 8010478:	0801054b 	.word	0x0801054b
 801047c:	0801054b 	.word	0x0801054b
 8010480:	0801054b 	.word	0x0801054b
 8010484:	08010507 	.word	0x08010507
 8010488:	0801054b 	.word	0x0801054b
 801048c:	0801054b 	.word	0x0801054b
 8010490:	0801054b 	.word	0x0801054b
 8010494:	0801054b 	.word	0x0801054b
 8010498:	0801054b 	.word	0x0801054b
 801049c:	0801054b 	.word	0x0801054b
 80104a0:	0801054b 	.word	0x0801054b
 80104a4:	08010517 	.word	0x08010517
 80104a8:	0801054b 	.word	0x0801054b
 80104ac:	0801054b 	.word	0x0801054b
 80104b0:	0801054b 	.word	0x0801054b
 80104b4:	0801054b 	.word	0x0801054b
 80104b8:	0801054b 	.word	0x0801054b
 80104bc:	0801054b 	.word	0x0801054b
 80104c0:	0801054b 	.word	0x0801054b
 80104c4:	0801054b 	.word	0x0801054b
 80104c8:	0801054b 	.word	0x0801054b
 80104cc:	0801054b 	.word	0x0801054b
 80104d0:	0801054b 	.word	0x0801054b
 80104d4:	0801054b 	.word	0x0801054b
 80104d8:	0801054b 	.word	0x0801054b
 80104dc:	0801054b 	.word	0x0801054b
 80104e0:	0801054b 	.word	0x0801054b
 80104e4:	0801053d 	.word	0x0801053d
 80104e8:	2b40      	cmp	r3, #64	@ 0x40
 80104ea:	d02a      	beq.n	8010542 <UART_SetConfig+0x8aa>
 80104ec:	e02d      	b.n	801054a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80104ee:	f7fb fd6b 	bl	800bfc8 <HAL_RCCEx_GetD3PCLK1Freq>
 80104f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80104f4:	e02f      	b.n	8010556 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80104f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80104fa:	4618      	mov	r0, r3
 80104fc:	f7fb fd7a 	bl	800bff4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010502:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010504:	e027      	b.n	8010556 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010506:	f107 0318 	add.w	r3, r7, #24
 801050a:	4618      	mov	r0, r3
 801050c:	f7fb fec6 	bl	800c29c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010510:	69fb      	ldr	r3, [r7, #28]
 8010512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010514:	e01f      	b.n	8010556 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010516:	4b21      	ldr	r3, [pc, #132]	@ (801059c <UART_SetConfig+0x904>)
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	f003 0320 	and.w	r3, r3, #32
 801051e:	2b00      	cmp	r3, #0
 8010520:	d009      	beq.n	8010536 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010522:	4b1e      	ldr	r3, [pc, #120]	@ (801059c <UART_SetConfig+0x904>)
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	08db      	lsrs	r3, r3, #3
 8010528:	f003 0303 	and.w	r3, r3, #3
 801052c:	4a1d      	ldr	r2, [pc, #116]	@ (80105a4 <UART_SetConfig+0x90c>)
 801052e:	fa22 f303 	lsr.w	r3, r2, r3
 8010532:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010534:	e00f      	b.n	8010556 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8010536:	4b1b      	ldr	r3, [pc, #108]	@ (80105a4 <UART_SetConfig+0x90c>)
 8010538:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801053a:	e00c      	b.n	8010556 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801053c:	4b1a      	ldr	r3, [pc, #104]	@ (80105a8 <UART_SetConfig+0x910>)
 801053e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010540:	e009      	b.n	8010556 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010542:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010548:	e005      	b.n	8010556 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801054a:	2300      	movs	r3, #0
 801054c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801054e:	2301      	movs	r3, #1
 8010550:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010554:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010558:	2b00      	cmp	r3, #0
 801055a:	f000 81ee 	beq.w	801093a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801055e:	697b      	ldr	r3, [r7, #20]
 8010560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010562:	4a12      	ldr	r2, [pc, #72]	@ (80105ac <UART_SetConfig+0x914>)
 8010564:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010568:	461a      	mov	r2, r3
 801056a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801056c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010570:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010572:	697b      	ldr	r3, [r7, #20]
 8010574:	685a      	ldr	r2, [r3, #4]
 8010576:	4613      	mov	r3, r2
 8010578:	005b      	lsls	r3, r3, #1
 801057a:	4413      	add	r3, r2
 801057c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801057e:	429a      	cmp	r2, r3
 8010580:	d305      	bcc.n	801058e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010582:	697b      	ldr	r3, [r7, #20]
 8010584:	685b      	ldr	r3, [r3, #4]
 8010586:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010588:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801058a:	429a      	cmp	r2, r3
 801058c:	d910      	bls.n	80105b0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 801058e:	2301      	movs	r3, #1
 8010590:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010594:	e1d1      	b.n	801093a <UART_SetConfig+0xca2>
 8010596:	bf00      	nop
 8010598:	40011c00 	.word	0x40011c00
 801059c:	58024400 	.word	0x58024400
 80105a0:	58000c00 	.word	0x58000c00
 80105a4:	03d09000 	.word	0x03d09000
 80105a8:	003d0900 	.word	0x003d0900
 80105ac:	08019b68 	.word	0x08019b68
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80105b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80105b2:	2200      	movs	r2, #0
 80105b4:	60bb      	str	r3, [r7, #8]
 80105b6:	60fa      	str	r2, [r7, #12]
 80105b8:	697b      	ldr	r3, [r7, #20]
 80105ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105bc:	4ac0      	ldr	r2, [pc, #768]	@ (80108c0 <UART_SetConfig+0xc28>)
 80105be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80105c2:	b29b      	uxth	r3, r3
 80105c4:	2200      	movs	r2, #0
 80105c6:	603b      	str	r3, [r7, #0]
 80105c8:	607a      	str	r2, [r7, #4]
 80105ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80105ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80105d2:	f7ef fedd 	bl	8000390 <__aeabi_uldivmod>
 80105d6:	4602      	mov	r2, r0
 80105d8:	460b      	mov	r3, r1
 80105da:	4610      	mov	r0, r2
 80105dc:	4619      	mov	r1, r3
 80105de:	f04f 0200 	mov.w	r2, #0
 80105e2:	f04f 0300 	mov.w	r3, #0
 80105e6:	020b      	lsls	r3, r1, #8
 80105e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80105ec:	0202      	lsls	r2, r0, #8
 80105ee:	6979      	ldr	r1, [r7, #20]
 80105f0:	6849      	ldr	r1, [r1, #4]
 80105f2:	0849      	lsrs	r1, r1, #1
 80105f4:	2000      	movs	r0, #0
 80105f6:	460c      	mov	r4, r1
 80105f8:	4605      	mov	r5, r0
 80105fa:	eb12 0804 	adds.w	r8, r2, r4
 80105fe:	eb43 0905 	adc.w	r9, r3, r5
 8010602:	697b      	ldr	r3, [r7, #20]
 8010604:	685b      	ldr	r3, [r3, #4]
 8010606:	2200      	movs	r2, #0
 8010608:	469a      	mov	sl, r3
 801060a:	4693      	mov	fp, r2
 801060c:	4652      	mov	r2, sl
 801060e:	465b      	mov	r3, fp
 8010610:	4640      	mov	r0, r8
 8010612:	4649      	mov	r1, r9
 8010614:	f7ef febc 	bl	8000390 <__aeabi_uldivmod>
 8010618:	4602      	mov	r2, r0
 801061a:	460b      	mov	r3, r1
 801061c:	4613      	mov	r3, r2
 801061e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010622:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010626:	d308      	bcc.n	801063a <UART_SetConfig+0x9a2>
 8010628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801062a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801062e:	d204      	bcs.n	801063a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8010630:	697b      	ldr	r3, [r7, #20]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010636:	60da      	str	r2, [r3, #12]
 8010638:	e17f      	b.n	801093a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 801063a:	2301      	movs	r3, #1
 801063c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010640:	e17b      	b.n	801093a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010642:	697b      	ldr	r3, [r7, #20]
 8010644:	69db      	ldr	r3, [r3, #28]
 8010646:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801064a:	f040 80bd 	bne.w	80107c8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 801064e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010652:	2b20      	cmp	r3, #32
 8010654:	dc48      	bgt.n	80106e8 <UART_SetConfig+0xa50>
 8010656:	2b00      	cmp	r3, #0
 8010658:	db7b      	blt.n	8010752 <UART_SetConfig+0xaba>
 801065a:	2b20      	cmp	r3, #32
 801065c:	d879      	bhi.n	8010752 <UART_SetConfig+0xaba>
 801065e:	a201      	add	r2, pc, #4	@ (adr r2, 8010664 <UART_SetConfig+0x9cc>)
 8010660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010664:	080106ef 	.word	0x080106ef
 8010668:	080106f7 	.word	0x080106f7
 801066c:	08010753 	.word	0x08010753
 8010670:	08010753 	.word	0x08010753
 8010674:	080106ff 	.word	0x080106ff
 8010678:	08010753 	.word	0x08010753
 801067c:	08010753 	.word	0x08010753
 8010680:	08010753 	.word	0x08010753
 8010684:	0801070f 	.word	0x0801070f
 8010688:	08010753 	.word	0x08010753
 801068c:	08010753 	.word	0x08010753
 8010690:	08010753 	.word	0x08010753
 8010694:	08010753 	.word	0x08010753
 8010698:	08010753 	.word	0x08010753
 801069c:	08010753 	.word	0x08010753
 80106a0:	08010753 	.word	0x08010753
 80106a4:	0801071f 	.word	0x0801071f
 80106a8:	08010753 	.word	0x08010753
 80106ac:	08010753 	.word	0x08010753
 80106b0:	08010753 	.word	0x08010753
 80106b4:	08010753 	.word	0x08010753
 80106b8:	08010753 	.word	0x08010753
 80106bc:	08010753 	.word	0x08010753
 80106c0:	08010753 	.word	0x08010753
 80106c4:	08010753 	.word	0x08010753
 80106c8:	08010753 	.word	0x08010753
 80106cc:	08010753 	.word	0x08010753
 80106d0:	08010753 	.word	0x08010753
 80106d4:	08010753 	.word	0x08010753
 80106d8:	08010753 	.word	0x08010753
 80106dc:	08010753 	.word	0x08010753
 80106e0:	08010753 	.word	0x08010753
 80106e4:	08010745 	.word	0x08010745
 80106e8:	2b40      	cmp	r3, #64	@ 0x40
 80106ea:	d02e      	beq.n	801074a <UART_SetConfig+0xab2>
 80106ec:	e031      	b.n	8010752 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80106ee:	f7fa fa3f 	bl	800ab70 <HAL_RCC_GetPCLK1Freq>
 80106f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80106f4:	e033      	b.n	801075e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80106f6:	f7fa fa51 	bl	800ab9c <HAL_RCC_GetPCLK2Freq>
 80106fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80106fc:	e02f      	b.n	801075e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80106fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010702:	4618      	mov	r0, r3
 8010704:	f7fb fc76 	bl	800bff4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801070a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801070c:	e027      	b.n	801075e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801070e:	f107 0318 	add.w	r3, r7, #24
 8010712:	4618      	mov	r0, r3
 8010714:	f7fb fdc2 	bl	800c29c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010718:	69fb      	ldr	r3, [r7, #28]
 801071a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801071c:	e01f      	b.n	801075e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801071e:	4b69      	ldr	r3, [pc, #420]	@ (80108c4 <UART_SetConfig+0xc2c>)
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	f003 0320 	and.w	r3, r3, #32
 8010726:	2b00      	cmp	r3, #0
 8010728:	d009      	beq.n	801073e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801072a:	4b66      	ldr	r3, [pc, #408]	@ (80108c4 <UART_SetConfig+0xc2c>)
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	08db      	lsrs	r3, r3, #3
 8010730:	f003 0303 	and.w	r3, r3, #3
 8010734:	4a64      	ldr	r2, [pc, #400]	@ (80108c8 <UART_SetConfig+0xc30>)
 8010736:	fa22 f303 	lsr.w	r3, r2, r3
 801073a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801073c:	e00f      	b.n	801075e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 801073e:	4b62      	ldr	r3, [pc, #392]	@ (80108c8 <UART_SetConfig+0xc30>)
 8010740:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010742:	e00c      	b.n	801075e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010744:	4b61      	ldr	r3, [pc, #388]	@ (80108cc <UART_SetConfig+0xc34>)
 8010746:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010748:	e009      	b.n	801075e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801074a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801074e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010750:	e005      	b.n	801075e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8010752:	2300      	movs	r3, #0
 8010754:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010756:	2301      	movs	r3, #1
 8010758:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801075c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801075e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010760:	2b00      	cmp	r3, #0
 8010762:	f000 80ea 	beq.w	801093a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010766:	697b      	ldr	r3, [r7, #20]
 8010768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801076a:	4a55      	ldr	r2, [pc, #340]	@ (80108c0 <UART_SetConfig+0xc28>)
 801076c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010770:	461a      	mov	r2, r3
 8010772:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010774:	fbb3 f3f2 	udiv	r3, r3, r2
 8010778:	005a      	lsls	r2, r3, #1
 801077a:	697b      	ldr	r3, [r7, #20]
 801077c:	685b      	ldr	r3, [r3, #4]
 801077e:	085b      	lsrs	r3, r3, #1
 8010780:	441a      	add	r2, r3
 8010782:	697b      	ldr	r3, [r7, #20]
 8010784:	685b      	ldr	r3, [r3, #4]
 8010786:	fbb2 f3f3 	udiv	r3, r2, r3
 801078a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801078c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801078e:	2b0f      	cmp	r3, #15
 8010790:	d916      	bls.n	80107c0 <UART_SetConfig+0xb28>
 8010792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010794:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010798:	d212      	bcs.n	80107c0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801079a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801079c:	b29b      	uxth	r3, r3
 801079e:	f023 030f 	bic.w	r3, r3, #15
 80107a2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80107a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107a6:	085b      	lsrs	r3, r3, #1
 80107a8:	b29b      	uxth	r3, r3
 80107aa:	f003 0307 	and.w	r3, r3, #7
 80107ae:	b29a      	uxth	r2, r3
 80107b0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80107b2:	4313      	orrs	r3, r2
 80107b4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80107b6:	697b      	ldr	r3, [r7, #20]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80107bc:	60da      	str	r2, [r3, #12]
 80107be:	e0bc      	b.n	801093a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80107c0:	2301      	movs	r3, #1
 80107c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80107c6:	e0b8      	b.n	801093a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80107c8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80107cc:	2b20      	cmp	r3, #32
 80107ce:	dc4b      	bgt.n	8010868 <UART_SetConfig+0xbd0>
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	f2c0 8087 	blt.w	80108e4 <UART_SetConfig+0xc4c>
 80107d6:	2b20      	cmp	r3, #32
 80107d8:	f200 8084 	bhi.w	80108e4 <UART_SetConfig+0xc4c>
 80107dc:	a201      	add	r2, pc, #4	@ (adr r2, 80107e4 <UART_SetConfig+0xb4c>)
 80107de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107e2:	bf00      	nop
 80107e4:	0801086f 	.word	0x0801086f
 80107e8:	08010877 	.word	0x08010877
 80107ec:	080108e5 	.word	0x080108e5
 80107f0:	080108e5 	.word	0x080108e5
 80107f4:	0801087f 	.word	0x0801087f
 80107f8:	080108e5 	.word	0x080108e5
 80107fc:	080108e5 	.word	0x080108e5
 8010800:	080108e5 	.word	0x080108e5
 8010804:	0801088f 	.word	0x0801088f
 8010808:	080108e5 	.word	0x080108e5
 801080c:	080108e5 	.word	0x080108e5
 8010810:	080108e5 	.word	0x080108e5
 8010814:	080108e5 	.word	0x080108e5
 8010818:	080108e5 	.word	0x080108e5
 801081c:	080108e5 	.word	0x080108e5
 8010820:	080108e5 	.word	0x080108e5
 8010824:	0801089f 	.word	0x0801089f
 8010828:	080108e5 	.word	0x080108e5
 801082c:	080108e5 	.word	0x080108e5
 8010830:	080108e5 	.word	0x080108e5
 8010834:	080108e5 	.word	0x080108e5
 8010838:	080108e5 	.word	0x080108e5
 801083c:	080108e5 	.word	0x080108e5
 8010840:	080108e5 	.word	0x080108e5
 8010844:	080108e5 	.word	0x080108e5
 8010848:	080108e5 	.word	0x080108e5
 801084c:	080108e5 	.word	0x080108e5
 8010850:	080108e5 	.word	0x080108e5
 8010854:	080108e5 	.word	0x080108e5
 8010858:	080108e5 	.word	0x080108e5
 801085c:	080108e5 	.word	0x080108e5
 8010860:	080108e5 	.word	0x080108e5
 8010864:	080108d7 	.word	0x080108d7
 8010868:	2b40      	cmp	r3, #64	@ 0x40
 801086a:	d037      	beq.n	80108dc <UART_SetConfig+0xc44>
 801086c:	e03a      	b.n	80108e4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801086e:	f7fa f97f 	bl	800ab70 <HAL_RCC_GetPCLK1Freq>
 8010872:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010874:	e03c      	b.n	80108f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010876:	f7fa f991 	bl	800ab9c <HAL_RCC_GetPCLK2Freq>
 801087a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801087c:	e038      	b.n	80108f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801087e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010882:	4618      	mov	r0, r3
 8010884:	f7fb fbb6 	bl	800bff4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801088a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801088c:	e030      	b.n	80108f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801088e:	f107 0318 	add.w	r3, r7, #24
 8010892:	4618      	mov	r0, r3
 8010894:	f7fb fd02 	bl	800c29c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010898:	69fb      	ldr	r3, [r7, #28]
 801089a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801089c:	e028      	b.n	80108f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801089e:	4b09      	ldr	r3, [pc, #36]	@ (80108c4 <UART_SetConfig+0xc2c>)
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	f003 0320 	and.w	r3, r3, #32
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d012      	beq.n	80108d0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80108aa:	4b06      	ldr	r3, [pc, #24]	@ (80108c4 <UART_SetConfig+0xc2c>)
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	08db      	lsrs	r3, r3, #3
 80108b0:	f003 0303 	and.w	r3, r3, #3
 80108b4:	4a04      	ldr	r2, [pc, #16]	@ (80108c8 <UART_SetConfig+0xc30>)
 80108b6:	fa22 f303 	lsr.w	r3, r2, r3
 80108ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80108bc:	e018      	b.n	80108f0 <UART_SetConfig+0xc58>
 80108be:	bf00      	nop
 80108c0:	08019b68 	.word	0x08019b68
 80108c4:	58024400 	.word	0x58024400
 80108c8:	03d09000 	.word	0x03d09000
 80108cc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80108d0:	4b24      	ldr	r3, [pc, #144]	@ (8010964 <UART_SetConfig+0xccc>)
 80108d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80108d4:	e00c      	b.n	80108f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80108d6:	4b24      	ldr	r3, [pc, #144]	@ (8010968 <UART_SetConfig+0xcd0>)
 80108d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80108da:	e009      	b.n	80108f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80108dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80108e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80108e2:	e005      	b.n	80108f0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80108e4:	2300      	movs	r3, #0
 80108e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80108e8:	2301      	movs	r3, #1
 80108ea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80108ee:	bf00      	nop
    }

    if (pclk != 0U)
 80108f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d021      	beq.n	801093a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80108f6:	697b      	ldr	r3, [r7, #20]
 80108f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80108fa:	4a1c      	ldr	r2, [pc, #112]	@ (801096c <UART_SetConfig+0xcd4>)
 80108fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010900:	461a      	mov	r2, r3
 8010902:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010904:	fbb3 f2f2 	udiv	r2, r3, r2
 8010908:	697b      	ldr	r3, [r7, #20]
 801090a:	685b      	ldr	r3, [r3, #4]
 801090c:	085b      	lsrs	r3, r3, #1
 801090e:	441a      	add	r2, r3
 8010910:	697b      	ldr	r3, [r7, #20]
 8010912:	685b      	ldr	r3, [r3, #4]
 8010914:	fbb2 f3f3 	udiv	r3, r2, r3
 8010918:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801091a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801091c:	2b0f      	cmp	r3, #15
 801091e:	d909      	bls.n	8010934 <UART_SetConfig+0xc9c>
 8010920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010922:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010926:	d205      	bcs.n	8010934 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801092a:	b29a      	uxth	r2, r3
 801092c:	697b      	ldr	r3, [r7, #20]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	60da      	str	r2, [r3, #12]
 8010932:	e002      	b.n	801093a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8010934:	2301      	movs	r3, #1
 8010936:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801093a:	697b      	ldr	r3, [r7, #20]
 801093c:	2201      	movs	r2, #1
 801093e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010942:	697b      	ldr	r3, [r7, #20]
 8010944:	2201      	movs	r2, #1
 8010946:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801094a:	697b      	ldr	r3, [r7, #20]
 801094c:	2200      	movs	r2, #0
 801094e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8010950:	697b      	ldr	r3, [r7, #20]
 8010952:	2200      	movs	r2, #0
 8010954:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010956:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 801095a:	4618      	mov	r0, r3
 801095c:	3748      	adds	r7, #72	@ 0x48
 801095e:	46bd      	mov	sp, r7
 8010960:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010964:	03d09000 	.word	0x03d09000
 8010968:	003d0900 	.word	0x003d0900
 801096c:	08019b68 	.word	0x08019b68

08010970 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010970:	b480      	push	{r7}
 8010972:	b083      	sub	sp, #12
 8010974:	af00      	add	r7, sp, #0
 8010976:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801097c:	f003 0308 	and.w	r3, r3, #8
 8010980:	2b00      	cmp	r3, #0
 8010982:	d00a      	beq.n	801099a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	685b      	ldr	r3, [r3, #4]
 801098a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	430a      	orrs	r2, r1
 8010998:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801099e:	f003 0301 	and.w	r3, r3, #1
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d00a      	beq.n	80109bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	685b      	ldr	r3, [r3, #4]
 80109ac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	430a      	orrs	r2, r1
 80109ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80109c0:	f003 0302 	and.w	r3, r3, #2
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d00a      	beq.n	80109de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	685b      	ldr	r3, [r3, #4]
 80109ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	430a      	orrs	r2, r1
 80109dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80109e2:	f003 0304 	and.w	r3, r3, #4
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d00a      	beq.n	8010a00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	685b      	ldr	r3, [r3, #4]
 80109f0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	430a      	orrs	r2, r1
 80109fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a04:	f003 0310 	and.w	r3, r3, #16
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d00a      	beq.n	8010a22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	689b      	ldr	r3, [r3, #8]
 8010a12:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	430a      	orrs	r2, r1
 8010a20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a26:	f003 0320 	and.w	r3, r3, #32
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d00a      	beq.n	8010a44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	689b      	ldr	r3, [r3, #8]
 8010a34:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	430a      	orrs	r2, r1
 8010a42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d01a      	beq.n	8010a86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	685b      	ldr	r3, [r3, #4]
 8010a56:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	430a      	orrs	r2, r1
 8010a64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010a6e:	d10a      	bne.n	8010a86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	685b      	ldr	r3, [r3, #4]
 8010a76:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	430a      	orrs	r2, r1
 8010a84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d00a      	beq.n	8010aa8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	685b      	ldr	r3, [r3, #4]
 8010a98:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	430a      	orrs	r2, r1
 8010aa6:	605a      	str	r2, [r3, #4]
  }
}
 8010aa8:	bf00      	nop
 8010aaa:	370c      	adds	r7, #12
 8010aac:	46bd      	mov	sp, r7
 8010aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab2:	4770      	bx	lr

08010ab4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b098      	sub	sp, #96	@ 0x60
 8010ab8:	af02      	add	r7, sp, #8
 8010aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	2200      	movs	r2, #0
 8010ac0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010ac4:	f7f5 f9d8 	bl	8005e78 <HAL_GetTick>
 8010ac8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	f003 0308 	and.w	r3, r3, #8
 8010ad4:	2b08      	cmp	r3, #8
 8010ad6:	d12f      	bne.n	8010b38 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010ad8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010adc:	9300      	str	r3, [sp, #0]
 8010ade:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010ae0:	2200      	movs	r2, #0
 8010ae2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010ae6:	6878      	ldr	r0, [r7, #4]
 8010ae8:	f000 f88e 	bl	8010c08 <UART_WaitOnFlagUntilTimeout>
 8010aec:	4603      	mov	r3, r0
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d022      	beq.n	8010b38 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010afa:	e853 3f00 	ldrex	r3, [r3]
 8010afe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010b00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010b06:	653b      	str	r3, [r7, #80]	@ 0x50
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	461a      	mov	r2, r3
 8010b0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010b10:	647b      	str	r3, [r7, #68]	@ 0x44
 8010b12:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010b16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010b18:	e841 2300 	strex	r3, r2, [r1]
 8010b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010b1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d1e6      	bne.n	8010af2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	2220      	movs	r2, #32
 8010b28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	2200      	movs	r2, #0
 8010b30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010b34:	2303      	movs	r3, #3
 8010b36:	e063      	b.n	8010c00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	f003 0304 	and.w	r3, r3, #4
 8010b42:	2b04      	cmp	r3, #4
 8010b44:	d149      	bne.n	8010bda <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010b46:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010b4a:	9300      	str	r3, [sp, #0]
 8010b4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010b4e:	2200      	movs	r2, #0
 8010b50:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010b54:	6878      	ldr	r0, [r7, #4]
 8010b56:	f000 f857 	bl	8010c08 <UART_WaitOnFlagUntilTimeout>
 8010b5a:	4603      	mov	r3, r0
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d03c      	beq.n	8010bda <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b68:	e853 3f00 	ldrex	r3, [r3]
 8010b6c:	623b      	str	r3, [r7, #32]
   return(result);
 8010b6e:	6a3b      	ldr	r3, [r7, #32]
 8010b70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010b74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	461a      	mov	r2, r3
 8010b7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010b7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8010b80:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010b84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010b86:	e841 2300 	strex	r3, r2, [r1]
 8010b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d1e6      	bne.n	8010b60 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	3308      	adds	r3, #8
 8010b98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b9a:	693b      	ldr	r3, [r7, #16]
 8010b9c:	e853 3f00 	ldrex	r3, [r3]
 8010ba0:	60fb      	str	r3, [r7, #12]
   return(result);
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	f023 0301 	bic.w	r3, r3, #1
 8010ba8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	3308      	adds	r3, #8
 8010bb0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010bb2:	61fa      	str	r2, [r7, #28]
 8010bb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bb6:	69b9      	ldr	r1, [r7, #24]
 8010bb8:	69fa      	ldr	r2, [r7, #28]
 8010bba:	e841 2300 	strex	r3, r2, [r1]
 8010bbe:	617b      	str	r3, [r7, #20]
   return(result);
 8010bc0:	697b      	ldr	r3, [r7, #20]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d1e5      	bne.n	8010b92 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	2220      	movs	r2, #32
 8010bca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	2200      	movs	r2, #0
 8010bd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010bd6:	2303      	movs	r3, #3
 8010bd8:	e012      	b.n	8010c00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	2220      	movs	r2, #32
 8010bde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	2220      	movs	r2, #32
 8010be6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	2200      	movs	r2, #0
 8010bee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	2200      	movs	r2, #0
 8010bf4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	2200      	movs	r2, #0
 8010bfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010bfe:	2300      	movs	r3, #0
}
 8010c00:	4618      	mov	r0, r3
 8010c02:	3758      	adds	r7, #88	@ 0x58
 8010c04:	46bd      	mov	sp, r7
 8010c06:	bd80      	pop	{r7, pc}

08010c08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b084      	sub	sp, #16
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	60f8      	str	r0, [r7, #12]
 8010c10:	60b9      	str	r1, [r7, #8]
 8010c12:	603b      	str	r3, [r7, #0]
 8010c14:	4613      	mov	r3, r2
 8010c16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010c18:	e04f      	b.n	8010cba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010c1a:	69bb      	ldr	r3, [r7, #24]
 8010c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c20:	d04b      	beq.n	8010cba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010c22:	f7f5 f929 	bl	8005e78 <HAL_GetTick>
 8010c26:	4602      	mov	r2, r0
 8010c28:	683b      	ldr	r3, [r7, #0]
 8010c2a:	1ad3      	subs	r3, r2, r3
 8010c2c:	69ba      	ldr	r2, [r7, #24]
 8010c2e:	429a      	cmp	r2, r3
 8010c30:	d302      	bcc.n	8010c38 <UART_WaitOnFlagUntilTimeout+0x30>
 8010c32:	69bb      	ldr	r3, [r7, #24]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d101      	bne.n	8010c3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010c38:	2303      	movs	r3, #3
 8010c3a:	e04e      	b.n	8010cda <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	f003 0304 	and.w	r3, r3, #4
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d037      	beq.n	8010cba <UART_WaitOnFlagUntilTimeout+0xb2>
 8010c4a:	68bb      	ldr	r3, [r7, #8]
 8010c4c:	2b80      	cmp	r3, #128	@ 0x80
 8010c4e:	d034      	beq.n	8010cba <UART_WaitOnFlagUntilTimeout+0xb2>
 8010c50:	68bb      	ldr	r3, [r7, #8]
 8010c52:	2b40      	cmp	r3, #64	@ 0x40
 8010c54:	d031      	beq.n	8010cba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	69db      	ldr	r3, [r3, #28]
 8010c5c:	f003 0308 	and.w	r3, r3, #8
 8010c60:	2b08      	cmp	r3, #8
 8010c62:	d110      	bne.n	8010c86 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	2208      	movs	r2, #8
 8010c6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010c6c:	68f8      	ldr	r0, [r7, #12]
 8010c6e:	f000 fa43 	bl	80110f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	2208      	movs	r2, #8
 8010c76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	2200      	movs	r2, #0
 8010c7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8010c82:	2301      	movs	r3, #1
 8010c84:	e029      	b.n	8010cda <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	69db      	ldr	r3, [r3, #28]
 8010c8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010c90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010c94:	d111      	bne.n	8010cba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010c9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010ca0:	68f8      	ldr	r0, [r7, #12]
 8010ca2:	f000 fa29 	bl	80110f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	2220      	movs	r2, #32
 8010caa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	2200      	movs	r2, #0
 8010cb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8010cb6:	2303      	movs	r3, #3
 8010cb8:	e00f      	b.n	8010cda <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	69da      	ldr	r2, [r3, #28]
 8010cc0:	68bb      	ldr	r3, [r7, #8]
 8010cc2:	4013      	ands	r3, r2
 8010cc4:	68ba      	ldr	r2, [r7, #8]
 8010cc6:	429a      	cmp	r2, r3
 8010cc8:	bf0c      	ite	eq
 8010cca:	2301      	moveq	r3, #1
 8010ccc:	2300      	movne	r3, #0
 8010cce:	b2db      	uxtb	r3, r3
 8010cd0:	461a      	mov	r2, r3
 8010cd2:	79fb      	ldrb	r3, [r7, #7]
 8010cd4:	429a      	cmp	r2, r3
 8010cd6:	d0a0      	beq.n	8010c1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010cd8:	2300      	movs	r3, #0
}
 8010cda:	4618      	mov	r0, r3
 8010cdc:	3710      	adds	r7, #16
 8010cde:	46bd      	mov	sp, r7
 8010ce0:	bd80      	pop	{r7, pc}
	...

08010ce4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010ce4:	b480      	push	{r7}
 8010ce6:	b0a3      	sub	sp, #140	@ 0x8c
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	60f8      	str	r0, [r7, #12]
 8010cec:	60b9      	str	r1, [r7, #8]
 8010cee:	4613      	mov	r3, r2
 8010cf0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	68ba      	ldr	r2, [r7, #8]
 8010cf6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	88fa      	ldrh	r2, [r7, #6]
 8010cfc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	88fa      	ldrh	r2, [r7, #6]
 8010d04:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	689b      	ldr	r3, [r3, #8]
 8010d12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010d16:	d10e      	bne.n	8010d36 <UART_Start_Receive_IT+0x52>
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	691b      	ldr	r3, [r3, #16]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d105      	bne.n	8010d2c <UART_Start_Receive_IT+0x48>
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8010d26:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010d2a:	e02d      	b.n	8010d88 <UART_Start_Receive_IT+0xa4>
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	22ff      	movs	r2, #255	@ 0xff
 8010d30:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010d34:	e028      	b.n	8010d88 <UART_Start_Receive_IT+0xa4>
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	689b      	ldr	r3, [r3, #8]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d10d      	bne.n	8010d5a <UART_Start_Receive_IT+0x76>
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	691b      	ldr	r3, [r3, #16]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d104      	bne.n	8010d50 <UART_Start_Receive_IT+0x6c>
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	22ff      	movs	r2, #255	@ 0xff
 8010d4a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010d4e:	e01b      	b.n	8010d88 <UART_Start_Receive_IT+0xa4>
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	227f      	movs	r2, #127	@ 0x7f
 8010d54:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010d58:	e016      	b.n	8010d88 <UART_Start_Receive_IT+0xa4>
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	689b      	ldr	r3, [r3, #8]
 8010d5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010d62:	d10d      	bne.n	8010d80 <UART_Start_Receive_IT+0x9c>
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	691b      	ldr	r3, [r3, #16]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d104      	bne.n	8010d76 <UART_Start_Receive_IT+0x92>
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	227f      	movs	r2, #127	@ 0x7f
 8010d70:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010d74:	e008      	b.n	8010d88 <UART_Start_Receive_IT+0xa4>
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	223f      	movs	r2, #63	@ 0x3f
 8010d7a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010d7e:	e003      	b.n	8010d88 <UART_Start_Receive_IT+0xa4>
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	2200      	movs	r2, #0
 8010d84:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	2200      	movs	r2, #0
 8010d8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	2222      	movs	r2, #34	@ 0x22
 8010d94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	3308      	adds	r3, #8
 8010d9e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010da0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010da2:	e853 3f00 	ldrex	r3, [r3]
 8010da6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8010da8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010daa:	f043 0301 	orr.w	r3, r3, #1
 8010dae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	3308      	adds	r3, #8
 8010db8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8010dbc:	673a      	str	r2, [r7, #112]	@ 0x70
 8010dbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dc0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8010dc2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8010dc4:	e841 2300 	strex	r3, r2, [r1]
 8010dc8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8010dca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d1e3      	bne.n	8010d98 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010dd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010dd8:	d14f      	bne.n	8010e7a <UART_Start_Receive_IT+0x196>
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8010de0:	88fa      	ldrh	r2, [r7, #6]
 8010de2:	429a      	cmp	r2, r3
 8010de4:	d349      	bcc.n	8010e7a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	689b      	ldr	r3, [r3, #8]
 8010dea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010dee:	d107      	bne.n	8010e00 <UART_Start_Receive_IT+0x11c>
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	691b      	ldr	r3, [r3, #16]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d103      	bne.n	8010e00 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	4a47      	ldr	r2, [pc, #284]	@ (8010f18 <UART_Start_Receive_IT+0x234>)
 8010dfc:	675a      	str	r2, [r3, #116]	@ 0x74
 8010dfe:	e002      	b.n	8010e06 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	4a46      	ldr	r2, [pc, #280]	@ (8010f1c <UART_Start_Receive_IT+0x238>)
 8010e04:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	691b      	ldr	r3, [r3, #16]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d01a      	beq.n	8010e44 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010e16:	e853 3f00 	ldrex	r3, [r3]
 8010e1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8010e1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010e1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010e22:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	461a      	mov	r2, r3
 8010e2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8010e30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010e32:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e34:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8010e36:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010e38:	e841 2300 	strex	r3, r2, [r1]
 8010e3c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8010e3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d1e4      	bne.n	8010e0e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	3308      	adds	r3, #8
 8010e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e4e:	e853 3f00 	ldrex	r3, [r3]
 8010e52:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010e5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	3308      	adds	r3, #8
 8010e62:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8010e64:	64ba      	str	r2, [r7, #72]	@ 0x48
 8010e66:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e68:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010e6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010e6c:	e841 2300 	strex	r3, r2, [r1]
 8010e70:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8010e72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d1e5      	bne.n	8010e44 <UART_Start_Receive_IT+0x160>
 8010e78:	e046      	b.n	8010f08 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	689b      	ldr	r3, [r3, #8]
 8010e7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010e82:	d107      	bne.n	8010e94 <UART_Start_Receive_IT+0x1b0>
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	691b      	ldr	r3, [r3, #16]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d103      	bne.n	8010e94 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	4a24      	ldr	r2, [pc, #144]	@ (8010f20 <UART_Start_Receive_IT+0x23c>)
 8010e90:	675a      	str	r2, [r3, #116]	@ 0x74
 8010e92:	e002      	b.n	8010e9a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	4a23      	ldr	r2, [pc, #140]	@ (8010f24 <UART_Start_Receive_IT+0x240>)
 8010e98:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	691b      	ldr	r3, [r3, #16]
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d019      	beq.n	8010ed6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010eaa:	e853 3f00 	ldrex	r3, [r3]
 8010eae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010eb2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8010eb6:	677b      	str	r3, [r7, #116]	@ 0x74
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	461a      	mov	r2, r3
 8010ebe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010ec0:	637b      	str	r3, [r7, #52]	@ 0x34
 8010ec2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ec4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010ec6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010ec8:	e841 2300 	strex	r3, r2, [r1]
 8010ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8010ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d1e6      	bne.n	8010ea2 <UART_Start_Receive_IT+0x1be>
 8010ed4:	e018      	b.n	8010f08 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010edc:	697b      	ldr	r3, [r7, #20]
 8010ede:	e853 3f00 	ldrex	r3, [r3]
 8010ee2:	613b      	str	r3, [r7, #16]
   return(result);
 8010ee4:	693b      	ldr	r3, [r7, #16]
 8010ee6:	f043 0320 	orr.w	r3, r3, #32
 8010eea:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	461a      	mov	r2, r3
 8010ef2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010ef4:	623b      	str	r3, [r7, #32]
 8010ef6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ef8:	69f9      	ldr	r1, [r7, #28]
 8010efa:	6a3a      	ldr	r2, [r7, #32]
 8010efc:	e841 2300 	strex	r3, r2, [r1]
 8010f00:	61bb      	str	r3, [r7, #24]
   return(result);
 8010f02:	69bb      	ldr	r3, [r7, #24]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d1e6      	bne.n	8010ed6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8010f08:	2300      	movs	r3, #0
}
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	378c      	adds	r7, #140	@ 0x8c
 8010f0e:	46bd      	mov	sp, r7
 8010f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f14:	4770      	bx	lr
 8010f16:	bf00      	nop
 8010f18:	08011f4d 	.word	0x08011f4d
 8010f1c:	08011bed 	.word	0x08011bed
 8010f20:	08011a35 	.word	0x08011a35
 8010f24:	0801187d 	.word	0x0801187d

08010f28 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010f28:	b580      	push	{r7, lr}
 8010f2a:	b096      	sub	sp, #88	@ 0x58
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	60f8      	str	r0, [r7, #12]
 8010f30:	60b9      	str	r1, [r7, #8]
 8010f32:	4613      	mov	r3, r2
 8010f34:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	68ba      	ldr	r2, [r7, #8]
 8010f3a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	88fa      	ldrh	r2, [r7, #6]
 8010f40:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	2200      	movs	r2, #0
 8010f48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	2222      	movs	r2, #34	@ 0x22
 8010f50:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d02d      	beq.n	8010fba <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010f64:	4a40      	ldr	r2, [pc, #256]	@ (8011068 <UART_Start_Receive_DMA+0x140>)
 8010f66:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010f6e:	4a3f      	ldr	r2, [pc, #252]	@ (801106c <UART_Start_Receive_DMA+0x144>)
 8010f70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010f78:	4a3d      	ldr	r2, [pc, #244]	@ (8011070 <UART_Start_Receive_DMA+0x148>)
 8010f7a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010f82:	2200      	movs	r2, #0
 8010f84:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	3324      	adds	r3, #36	@ 0x24
 8010f92:	4619      	mov	r1, r3
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010f98:	461a      	mov	r2, r3
 8010f9a:	88fb      	ldrh	r3, [r7, #6]
 8010f9c:	f7f5 fc5e 	bl	800685c <HAL_DMA_Start_IT>
 8010fa0:	4603      	mov	r3, r0
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d009      	beq.n	8010fba <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	2210      	movs	r2, #16
 8010faa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	2220      	movs	r2, #32
 8010fb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8010fb6:	2301      	movs	r3, #1
 8010fb8:	e051      	b.n	801105e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	691b      	ldr	r3, [r3, #16]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d018      	beq.n	8010ff4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010fca:	e853 3f00 	ldrex	r3, [r3]
 8010fce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010fd6:	657b      	str	r3, [r7, #84]	@ 0x54
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	461a      	mov	r2, r3
 8010fde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010fe0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010fe2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fe4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010fe6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010fe8:	e841 2300 	strex	r3, r2, [r1]
 8010fec:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8010fee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d1e6      	bne.n	8010fc2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	3308      	adds	r3, #8
 8010ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ffe:	e853 3f00 	ldrex	r3, [r3]
 8011002:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011006:	f043 0301 	orr.w	r3, r3, #1
 801100a:	653b      	str	r3, [r7, #80]	@ 0x50
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	3308      	adds	r3, #8
 8011012:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011014:	637a      	str	r2, [r7, #52]	@ 0x34
 8011016:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011018:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801101a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801101c:	e841 2300 	strex	r3, r2, [r1]
 8011020:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8011022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011024:	2b00      	cmp	r3, #0
 8011026:	d1e5      	bne.n	8010ff4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	3308      	adds	r3, #8
 801102e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011030:	697b      	ldr	r3, [r7, #20]
 8011032:	e853 3f00 	ldrex	r3, [r3]
 8011036:	613b      	str	r3, [r7, #16]
   return(result);
 8011038:	693b      	ldr	r3, [r7, #16]
 801103a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801103e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	3308      	adds	r3, #8
 8011046:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011048:	623a      	str	r2, [r7, #32]
 801104a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801104c:	69f9      	ldr	r1, [r7, #28]
 801104e:	6a3a      	ldr	r2, [r7, #32]
 8011050:	e841 2300 	strex	r3, r2, [r1]
 8011054:	61bb      	str	r3, [r7, #24]
   return(result);
 8011056:	69bb      	ldr	r3, [r7, #24]
 8011058:	2b00      	cmp	r3, #0
 801105a:	d1e5      	bne.n	8011028 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 801105c:	2300      	movs	r3, #0
}
 801105e:	4618      	mov	r0, r3
 8011060:	3758      	adds	r7, #88	@ 0x58
 8011062:	46bd      	mov	sp, r7
 8011064:	bd80      	pop	{r7, pc}
 8011066:	bf00      	nop
 8011068:	080111c5 	.word	0x080111c5
 801106c:	080112ed 	.word	0x080112ed
 8011070:	0801132b 	.word	0x0801132b

08011074 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011074:	b480      	push	{r7}
 8011076:	b08f      	sub	sp, #60	@ 0x3c
 8011078:	af00      	add	r7, sp, #0
 801107a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011082:	6a3b      	ldr	r3, [r7, #32]
 8011084:	e853 3f00 	ldrex	r3, [r3]
 8011088:	61fb      	str	r3, [r7, #28]
   return(result);
 801108a:	69fb      	ldr	r3, [r7, #28]
 801108c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8011090:	637b      	str	r3, [r7, #52]	@ 0x34
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	461a      	mov	r2, r3
 8011098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801109a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801109c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801109e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80110a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80110a2:	e841 2300 	strex	r3, r2, [r1]
 80110a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80110a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d1e6      	bne.n	801107c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	3308      	adds	r3, #8
 80110b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	e853 3f00 	ldrex	r3, [r3]
 80110bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80110be:	68bb      	ldr	r3, [r7, #8]
 80110c0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80110c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	3308      	adds	r3, #8
 80110cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80110ce:	61ba      	str	r2, [r7, #24]
 80110d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110d2:	6979      	ldr	r1, [r7, #20]
 80110d4:	69ba      	ldr	r2, [r7, #24]
 80110d6:	e841 2300 	strex	r3, r2, [r1]
 80110da:	613b      	str	r3, [r7, #16]
   return(result);
 80110dc:	693b      	ldr	r3, [r7, #16]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d1e5      	bne.n	80110ae <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	2220      	movs	r2, #32
 80110e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80110ea:	bf00      	nop
 80110ec:	373c      	adds	r7, #60	@ 0x3c
 80110ee:	46bd      	mov	sp, r7
 80110f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f4:	4770      	bx	lr
	...

080110f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80110f8:	b480      	push	{r7}
 80110fa:	b095      	sub	sp, #84	@ 0x54
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011108:	e853 3f00 	ldrex	r3, [r3]
 801110c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801110e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011110:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011114:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	461a      	mov	r2, r3
 801111c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801111e:	643b      	str	r3, [r7, #64]	@ 0x40
 8011120:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011122:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011124:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011126:	e841 2300 	strex	r3, r2, [r1]
 801112a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801112c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801112e:	2b00      	cmp	r3, #0
 8011130:	d1e6      	bne.n	8011100 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	3308      	adds	r3, #8
 8011138:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801113a:	6a3b      	ldr	r3, [r7, #32]
 801113c:	e853 3f00 	ldrex	r3, [r3]
 8011140:	61fb      	str	r3, [r7, #28]
   return(result);
 8011142:	69fa      	ldr	r2, [r7, #28]
 8011144:	4b1e      	ldr	r3, [pc, #120]	@ (80111c0 <UART_EndRxTransfer+0xc8>)
 8011146:	4013      	ands	r3, r2
 8011148:	64bb      	str	r3, [r7, #72]	@ 0x48
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	3308      	adds	r3, #8
 8011150:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011152:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011154:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011156:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011158:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801115a:	e841 2300 	strex	r3, r2, [r1]
 801115e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011162:	2b00      	cmp	r3, #0
 8011164:	d1e5      	bne.n	8011132 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801116a:	2b01      	cmp	r3, #1
 801116c:	d118      	bne.n	80111a0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	e853 3f00 	ldrex	r3, [r3]
 801117a:	60bb      	str	r3, [r7, #8]
   return(result);
 801117c:	68bb      	ldr	r3, [r7, #8]
 801117e:	f023 0310 	bic.w	r3, r3, #16
 8011182:	647b      	str	r3, [r7, #68]	@ 0x44
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	461a      	mov	r2, r3
 801118a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801118c:	61bb      	str	r3, [r7, #24]
 801118e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011190:	6979      	ldr	r1, [r7, #20]
 8011192:	69ba      	ldr	r2, [r7, #24]
 8011194:	e841 2300 	strex	r3, r2, [r1]
 8011198:	613b      	str	r3, [r7, #16]
   return(result);
 801119a:	693b      	ldr	r3, [r7, #16]
 801119c:	2b00      	cmp	r3, #0
 801119e:	d1e6      	bne.n	801116e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	2220      	movs	r2, #32
 80111a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	2200      	movs	r2, #0
 80111ac:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	2200      	movs	r2, #0
 80111b2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80111b4:	bf00      	nop
 80111b6:	3754      	adds	r7, #84	@ 0x54
 80111b8:	46bd      	mov	sp, r7
 80111ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111be:	4770      	bx	lr
 80111c0:	effffffe 	.word	0xeffffffe

080111c4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80111c4:	b580      	push	{r7, lr}
 80111c6:	b09c      	sub	sp, #112	@ 0x70
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80111d0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	69db      	ldr	r3, [r3, #28]
 80111d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80111da:	d071      	beq.n	80112c0 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80111dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80111de:	2200      	movs	r2, #0
 80111e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80111e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80111ec:	e853 3f00 	ldrex	r3, [r3]
 80111f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80111f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80111f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80111f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80111fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	461a      	mov	r2, r3
 8011200:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011202:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011204:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011206:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011208:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801120a:	e841 2300 	strex	r3, r2, [r1]
 801120e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8011210:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011212:	2b00      	cmp	r3, #0
 8011214:	d1e6      	bne.n	80111e4 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011216:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	3308      	adds	r3, #8
 801121c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801121e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011220:	e853 3f00 	ldrex	r3, [r3]
 8011224:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011228:	f023 0301 	bic.w	r3, r3, #1
 801122c:	667b      	str	r3, [r7, #100]	@ 0x64
 801122e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	3308      	adds	r3, #8
 8011234:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011236:	647a      	str	r2, [r7, #68]	@ 0x44
 8011238:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801123a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801123c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801123e:	e841 2300 	strex	r3, r2, [r1]
 8011242:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011244:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011246:	2b00      	cmp	r3, #0
 8011248:	d1e5      	bne.n	8011216 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801124a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	3308      	adds	r3, #8
 8011250:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011254:	e853 3f00 	ldrex	r3, [r3]
 8011258:	623b      	str	r3, [r7, #32]
   return(result);
 801125a:	6a3b      	ldr	r3, [r7, #32]
 801125c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011260:	663b      	str	r3, [r7, #96]	@ 0x60
 8011262:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	3308      	adds	r3, #8
 8011268:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801126a:	633a      	str	r2, [r7, #48]	@ 0x30
 801126c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801126e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011270:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011272:	e841 2300 	strex	r3, r2, [r1]
 8011276:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801127a:	2b00      	cmp	r3, #0
 801127c:	d1e5      	bne.n	801124a <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801127e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011280:	2220      	movs	r2, #32
 8011282:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011286:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011288:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801128a:	2b01      	cmp	r3, #1
 801128c:	d118      	bne.n	80112c0 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801128e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011294:	693b      	ldr	r3, [r7, #16]
 8011296:	e853 3f00 	ldrex	r3, [r3]
 801129a:	60fb      	str	r3, [r7, #12]
   return(result);
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	f023 0310 	bic.w	r3, r3, #16
 80112a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80112a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	461a      	mov	r2, r3
 80112aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80112ac:	61fb      	str	r3, [r7, #28]
 80112ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112b0:	69b9      	ldr	r1, [r7, #24]
 80112b2:	69fa      	ldr	r2, [r7, #28]
 80112b4:	e841 2300 	strex	r3, r2, [r1]
 80112b8:	617b      	str	r3, [r7, #20]
   return(result);
 80112ba:	697b      	ldr	r3, [r7, #20]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d1e6      	bne.n	801128e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80112c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80112c2:	2200      	movs	r2, #0
 80112c4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80112c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80112c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80112ca:	2b01      	cmp	r3, #1
 80112cc:	d107      	bne.n	80112de <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80112ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80112d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80112d4:	4619      	mov	r1, r3
 80112d6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80112d8:	f7fe fcd2 	bl	800fc80 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80112dc:	e002      	b.n	80112e4 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 80112de:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80112e0:	f7f1 f9be 	bl	8002660 <HAL_UART_RxCpltCallback>
}
 80112e4:	bf00      	nop
 80112e6:	3770      	adds	r7, #112	@ 0x70
 80112e8:	46bd      	mov	sp, r7
 80112ea:	bd80      	pop	{r7, pc}

080112ec <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b084      	sub	sp, #16
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80112f8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	2201      	movs	r2, #1
 80112fe:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011304:	2b01      	cmp	r3, #1
 8011306:	d109      	bne.n	801131c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801130e:	085b      	lsrs	r3, r3, #1
 8011310:	b29b      	uxth	r3, r3
 8011312:	4619      	mov	r1, r3
 8011314:	68f8      	ldr	r0, [r7, #12]
 8011316:	f7fe fcb3 	bl	800fc80 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801131a:	e002      	b.n	8011322 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 801131c:	68f8      	ldr	r0, [r7, #12]
 801131e:	f7fe fc91 	bl	800fc44 <HAL_UART_RxHalfCpltCallback>
}
 8011322:	bf00      	nop
 8011324:	3710      	adds	r7, #16
 8011326:	46bd      	mov	sp, r7
 8011328:	bd80      	pop	{r7, pc}

0801132a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801132a:	b580      	push	{r7, lr}
 801132c:	b086      	sub	sp, #24
 801132e:	af00      	add	r7, sp, #0
 8011330:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011336:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011338:	697b      	ldr	r3, [r7, #20]
 801133a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801133e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011340:	697b      	ldr	r3, [r7, #20]
 8011342:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011346:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011348:	697b      	ldr	r3, [r7, #20]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	689b      	ldr	r3, [r3, #8]
 801134e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011352:	2b80      	cmp	r3, #128	@ 0x80
 8011354:	d109      	bne.n	801136a <UART_DMAError+0x40>
 8011356:	693b      	ldr	r3, [r7, #16]
 8011358:	2b21      	cmp	r3, #33	@ 0x21
 801135a:	d106      	bne.n	801136a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801135c:	697b      	ldr	r3, [r7, #20]
 801135e:	2200      	movs	r2, #0
 8011360:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8011364:	6978      	ldr	r0, [r7, #20]
 8011366:	f7ff fe85 	bl	8011074 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801136a:	697b      	ldr	r3, [r7, #20]
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	689b      	ldr	r3, [r3, #8]
 8011370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011374:	2b40      	cmp	r3, #64	@ 0x40
 8011376:	d109      	bne.n	801138c <UART_DMAError+0x62>
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	2b22      	cmp	r3, #34	@ 0x22
 801137c:	d106      	bne.n	801138c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801137e:	697b      	ldr	r3, [r7, #20]
 8011380:	2200      	movs	r2, #0
 8011382:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8011386:	6978      	ldr	r0, [r7, #20]
 8011388:	f7ff feb6 	bl	80110f8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801138c:	697b      	ldr	r3, [r7, #20]
 801138e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011392:	f043 0210 	orr.w	r2, r3, #16
 8011396:	697b      	ldr	r3, [r7, #20]
 8011398:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801139c:	6978      	ldr	r0, [r7, #20]
 801139e:	f7fe fc5b 	bl	800fc58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80113a2:	bf00      	nop
 80113a4:	3718      	adds	r7, #24
 80113a6:	46bd      	mov	sp, r7
 80113a8:	bd80      	pop	{r7, pc}

080113aa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80113aa:	b580      	push	{r7, lr}
 80113ac:	b084      	sub	sp, #16
 80113ae:	af00      	add	r7, sp, #0
 80113b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80113b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	2200      	movs	r2, #0
 80113bc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	2200      	movs	r2, #0
 80113c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80113c8:	68f8      	ldr	r0, [r7, #12]
 80113ca:	f7fe fc45 	bl	800fc58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80113ce:	bf00      	nop
 80113d0:	3710      	adds	r7, #16
 80113d2:	46bd      	mov	sp, r7
 80113d4:	bd80      	pop	{r7, pc}

080113d6 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80113d6:	b580      	push	{r7, lr}
 80113d8:	b084      	sub	sp, #16
 80113da:	af00      	add	r7, sp, #0
 80113dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80113e2:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80113e8:	2200      	movs	r2, #0
 80113ea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d005      	beq.n	8011402 <UART_DMATxAbortCallback+0x2c>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80113fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d12b      	bne.n	801145a <UART_DMATxAbortCallback+0x84>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	2200      	movs	r2, #0
 8011406:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	2200      	movs	r2, #0
 801140e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	2200      	movs	r2, #0
 8011416:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	220f      	movs	r2, #15
 8011420:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011426:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801142a:	d107      	bne.n	801143c <UART_DMATxAbortCallback+0x66>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	699a      	ldr	r2, [r3, #24]
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	f042 0210 	orr.w	r2, r2, #16
 801143a:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	2220      	movs	r2, #32
 8011440:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	2220      	movs	r2, #32
 8011448:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	2200      	movs	r2, #0
 8011450:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8011452:	68f8      	ldr	r0, [r7, #12]
 8011454:	f7fe fc0a 	bl	800fc6c <HAL_UART_AbortCpltCallback>
 8011458:	e000      	b.n	801145c <UART_DMATxAbortCallback+0x86>
      return;
 801145a:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801145c:	3710      	adds	r7, #16
 801145e:	46bd      	mov	sp, r7
 8011460:	bd80      	pop	{r7, pc}

08011462 <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8011462:	b580      	push	{r7, lr}
 8011464:	b084      	sub	sp, #16
 8011466:	af00      	add	r7, sp, #0
 8011468:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801146e:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011476:	2200      	movs	r2, #0
 8011478:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801147e:	2b00      	cmp	r3, #0
 8011480:	d004      	beq.n	801148c <UART_DMARxAbortCallback+0x2a>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011486:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011488:	2b00      	cmp	r3, #0
 801148a:	d126      	bne.n	80114da <UART_DMARxAbortCallback+0x78>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	2200      	movs	r2, #0
 8011490:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	2200      	movs	r2, #0
 8011498:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	2200      	movs	r2, #0
 80114a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	220f      	movs	r2, #15
 80114aa:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	699a      	ldr	r2, [r3, #24]
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	f042 0208 	orr.w	r2, r2, #8
 80114ba:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	2220      	movs	r2, #32
 80114c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	2220      	movs	r2, #32
 80114c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	2200      	movs	r2, #0
 80114d0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80114d2:	68f8      	ldr	r0, [r7, #12]
 80114d4:	f7fe fbca 	bl	800fc6c <HAL_UART_AbortCpltCallback>
 80114d8:	e000      	b.n	80114dc <UART_DMARxAbortCallback+0x7a>
      return;
 80114da:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80114dc:	3710      	adds	r7, #16
 80114de:	46bd      	mov	sp, r7
 80114e0:	bd80      	pop	{r7, pc}

080114e2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80114e2:	b480      	push	{r7}
 80114e4:	b08f      	sub	sp, #60	@ 0x3c
 80114e6:	af00      	add	r7, sp, #0
 80114e8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80114f0:	2b21      	cmp	r3, #33	@ 0x21
 80114f2:	d14c      	bne.n	801158e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80114fa:	b29b      	uxth	r3, r3
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d132      	bne.n	8011566 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011506:	6a3b      	ldr	r3, [r7, #32]
 8011508:	e853 3f00 	ldrex	r3, [r3]
 801150c:	61fb      	str	r3, [r7, #28]
   return(result);
 801150e:	69fb      	ldr	r3, [r7, #28]
 8011510:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011514:	637b      	str	r3, [r7, #52]	@ 0x34
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	461a      	mov	r2, r3
 801151c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801151e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011520:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011522:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011524:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011526:	e841 2300 	strex	r3, r2, [r1]
 801152a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801152c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801152e:	2b00      	cmp	r3, #0
 8011530:	d1e6      	bne.n	8011500 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	e853 3f00 	ldrex	r3, [r3]
 801153e:	60bb      	str	r3, [r7, #8]
   return(result);
 8011540:	68bb      	ldr	r3, [r7, #8]
 8011542:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011546:	633b      	str	r3, [r7, #48]	@ 0x30
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	461a      	mov	r2, r3
 801154e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011550:	61bb      	str	r3, [r7, #24]
 8011552:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011554:	6979      	ldr	r1, [r7, #20]
 8011556:	69ba      	ldr	r2, [r7, #24]
 8011558:	e841 2300 	strex	r3, r2, [r1]
 801155c:	613b      	str	r3, [r7, #16]
   return(result);
 801155e:	693b      	ldr	r3, [r7, #16]
 8011560:	2b00      	cmp	r3, #0
 8011562:	d1e6      	bne.n	8011532 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8011564:	e013      	b.n	801158e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801156a:	781a      	ldrb	r2, [r3, #0]
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011576:	1c5a      	adds	r2, r3, #1
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8011582:	b29b      	uxth	r3, r3
 8011584:	3b01      	subs	r3, #1
 8011586:	b29a      	uxth	r2, r3
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 801158e:	bf00      	nop
 8011590:	373c      	adds	r7, #60	@ 0x3c
 8011592:	46bd      	mov	sp, r7
 8011594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011598:	4770      	bx	lr

0801159a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 801159a:	b480      	push	{r7}
 801159c:	b091      	sub	sp, #68	@ 0x44
 801159e:	af00      	add	r7, sp, #0
 80115a0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80115a8:	2b21      	cmp	r3, #33	@ 0x21
 80115aa:	d151      	bne.n	8011650 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80115b2:	b29b      	uxth	r3, r3
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d132      	bne.n	801161e <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115c0:	e853 3f00 	ldrex	r3, [r3]
 80115c4:	623b      	str	r3, [r7, #32]
   return(result);
 80115c6:	6a3b      	ldr	r3, [r7, #32]
 80115c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80115cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	461a      	mov	r2, r3
 80115d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80115d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80115dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80115de:	e841 2300 	strex	r3, r2, [r1]
 80115e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80115e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d1e6      	bne.n	80115b8 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115f0:	693b      	ldr	r3, [r7, #16]
 80115f2:	e853 3f00 	ldrex	r3, [r3]
 80115f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80115fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	461a      	mov	r2, r3
 8011606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011608:	61fb      	str	r3, [r7, #28]
 801160a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801160c:	69b9      	ldr	r1, [r7, #24]
 801160e:	69fa      	ldr	r2, [r7, #28]
 8011610:	e841 2300 	strex	r3, r2, [r1]
 8011614:	617b      	str	r3, [r7, #20]
   return(result);
 8011616:	697b      	ldr	r3, [r7, #20]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d1e6      	bne.n	80115ea <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 801161c:	e018      	b.n	8011650 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011622:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8011624:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011626:	881b      	ldrh	r3, [r3, #0]
 8011628:	461a      	mov	r2, r3
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011632:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011638:	1c9a      	adds	r2, r3, #2
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8011644:	b29b      	uxth	r3, r3
 8011646:	3b01      	subs	r3, #1
 8011648:	b29a      	uxth	r2, r3
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8011650:	bf00      	nop
 8011652:	3744      	adds	r7, #68	@ 0x44
 8011654:	46bd      	mov	sp, r7
 8011656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801165a:	4770      	bx	lr

0801165c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801165c:	b480      	push	{r7}
 801165e:	b091      	sub	sp, #68	@ 0x44
 8011660:	af00      	add	r7, sp, #0
 8011662:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801166a:	2b21      	cmp	r3, #33	@ 0x21
 801166c:	d160      	bne.n	8011730 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011674:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8011676:	e057      	b.n	8011728 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801167e:	b29b      	uxth	r3, r3
 8011680:	2b00      	cmp	r3, #0
 8011682:	d133      	bne.n	80116ec <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	3308      	adds	r3, #8
 801168a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801168c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801168e:	e853 3f00 	ldrex	r3, [r3]
 8011692:	623b      	str	r3, [r7, #32]
   return(result);
 8011694:	6a3b      	ldr	r3, [r7, #32]
 8011696:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 801169a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	3308      	adds	r3, #8
 80116a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80116a4:	633a      	str	r2, [r7, #48]	@ 0x30
 80116a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80116aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80116ac:	e841 2300 	strex	r3, r2, [r1]
 80116b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80116b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d1e5      	bne.n	8011684 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116be:	693b      	ldr	r3, [r7, #16]
 80116c0:	e853 3f00 	ldrex	r3, [r3]
 80116c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80116cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	461a      	mov	r2, r3
 80116d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116d6:	61fb      	str	r3, [r7, #28]
 80116d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116da:	69b9      	ldr	r1, [r7, #24]
 80116dc:	69fa      	ldr	r2, [r7, #28]
 80116de:	e841 2300 	strex	r3, r2, [r1]
 80116e2:	617b      	str	r3, [r7, #20]
   return(result);
 80116e4:	697b      	ldr	r3, [r7, #20]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d1e6      	bne.n	80116b8 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80116ea:	e021      	b.n	8011730 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	69db      	ldr	r3, [r3, #28]
 80116f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d013      	beq.n	8011722 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80116fe:	781a      	ldrb	r2, [r3, #0]
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801170a:	1c5a      	adds	r2, r3, #1
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8011716:	b29b      	uxth	r3, r3
 8011718:	3b01      	subs	r3, #1
 801171a:	b29a      	uxth	r2, r3
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8011722:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011724:	3b01      	subs	r3, #1
 8011726:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8011728:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801172a:	2b00      	cmp	r3, #0
 801172c:	d1a4      	bne.n	8011678 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 801172e:	e7ff      	b.n	8011730 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8011730:	bf00      	nop
 8011732:	3744      	adds	r7, #68	@ 0x44
 8011734:	46bd      	mov	sp, r7
 8011736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801173a:	4770      	bx	lr

0801173c <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801173c:	b480      	push	{r7}
 801173e:	b091      	sub	sp, #68	@ 0x44
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801174a:	2b21      	cmp	r3, #33	@ 0x21
 801174c:	d165      	bne.n	801181a <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011754:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8011756:	e05c      	b.n	8011812 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801175e:	b29b      	uxth	r3, r3
 8011760:	2b00      	cmp	r3, #0
 8011762:	d133      	bne.n	80117cc <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	3308      	adds	r3, #8
 801176a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801176c:	6a3b      	ldr	r3, [r7, #32]
 801176e:	e853 3f00 	ldrex	r3, [r3]
 8011772:	61fb      	str	r3, [r7, #28]
   return(result);
 8011774:	69fb      	ldr	r3, [r7, #28]
 8011776:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 801177a:	637b      	str	r3, [r7, #52]	@ 0x34
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	3308      	adds	r3, #8
 8011782:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011784:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011786:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011788:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801178a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801178c:	e841 2300 	strex	r3, r2, [r1]
 8011790:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011794:	2b00      	cmp	r3, #0
 8011796:	d1e5      	bne.n	8011764 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	e853 3f00 	ldrex	r3, [r3]
 80117a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80117a6:	68bb      	ldr	r3, [r7, #8]
 80117a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80117ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	461a      	mov	r2, r3
 80117b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117b6:	61bb      	str	r3, [r7, #24]
 80117b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117ba:	6979      	ldr	r1, [r7, #20]
 80117bc:	69ba      	ldr	r2, [r7, #24]
 80117be:	e841 2300 	strex	r3, r2, [r1]
 80117c2:	613b      	str	r3, [r7, #16]
   return(result);
 80117c4:	693b      	ldr	r3, [r7, #16]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d1e6      	bne.n	8011798 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80117ca:	e026      	b.n	801181a <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	69db      	ldr	r3, [r3, #28]
 80117d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d018      	beq.n	801180c <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80117de:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80117e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117e2:	881b      	ldrh	r3, [r3, #0]
 80117e4:	461a      	mov	r2, r3
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80117ee:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80117f4:	1c9a      	adds	r2, r3, #2
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8011800:	b29b      	uxth	r3, r3
 8011802:	3b01      	subs	r3, #1
 8011804:	b29a      	uxth	r2, r3
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801180c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801180e:	3b01      	subs	r3, #1
 8011810:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8011812:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011814:	2b00      	cmp	r3, #0
 8011816:	d19f      	bne.n	8011758 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8011818:	e7ff      	b.n	801181a <UART_TxISR_16BIT_FIFOEN+0xde>
 801181a:	bf00      	nop
 801181c:	3744      	adds	r7, #68	@ 0x44
 801181e:	46bd      	mov	sp, r7
 8011820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011824:	4770      	bx	lr

08011826 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011826:	b580      	push	{r7, lr}
 8011828:	b088      	sub	sp, #32
 801182a:	af00      	add	r7, sp, #0
 801182c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	e853 3f00 	ldrex	r3, [r3]
 801183a:	60bb      	str	r3, [r7, #8]
   return(result);
 801183c:	68bb      	ldr	r3, [r7, #8]
 801183e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011842:	61fb      	str	r3, [r7, #28]
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	461a      	mov	r2, r3
 801184a:	69fb      	ldr	r3, [r7, #28]
 801184c:	61bb      	str	r3, [r7, #24]
 801184e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011850:	6979      	ldr	r1, [r7, #20]
 8011852:	69ba      	ldr	r2, [r7, #24]
 8011854:	e841 2300 	strex	r3, r2, [r1]
 8011858:	613b      	str	r3, [r7, #16]
   return(result);
 801185a:	693b      	ldr	r3, [r7, #16]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d1e6      	bne.n	801182e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	2220      	movs	r2, #32
 8011864:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	2200      	movs	r2, #0
 801186c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801186e:	6878      	ldr	r0, [r7, #4]
 8011870:	f7fe f9de 	bl	800fc30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011874:	bf00      	nop
 8011876:	3720      	adds	r7, #32
 8011878:	46bd      	mov	sp, r7
 801187a:	bd80      	pop	{r7, pc}

0801187c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801187c:	b580      	push	{r7, lr}
 801187e:	b09c      	sub	sp, #112	@ 0x70
 8011880:	af00      	add	r7, sp, #0
 8011882:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801188a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011894:	2b22      	cmp	r3, #34	@ 0x22
 8011896:	f040 80be 	bne.w	8011a16 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118a0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80118a4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80118a8:	b2d9      	uxtb	r1, r3
 80118aa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80118ae:	b2da      	uxtb	r2, r3
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80118b4:	400a      	ands	r2, r1
 80118b6:	b2d2      	uxtb	r2, r2
 80118b8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80118be:	1c5a      	adds	r2, r3, #1
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80118ca:	b29b      	uxth	r3, r3
 80118cc:	3b01      	subs	r3, #1
 80118ce:	b29a      	uxth	r2, r3
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80118dc:	b29b      	uxth	r3, r3
 80118de:	2b00      	cmp	r3, #0
 80118e0:	f040 80a1 	bne.w	8011a26 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80118ec:	e853 3f00 	ldrex	r3, [r3]
 80118f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80118f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80118f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80118f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	461a      	mov	r2, r3
 8011900:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011902:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011904:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011906:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011908:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801190a:	e841 2300 	strex	r3, r2, [r1]
 801190e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8011910:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011912:	2b00      	cmp	r3, #0
 8011914:	d1e6      	bne.n	80118e4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	3308      	adds	r3, #8
 801191c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801191e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011920:	e853 3f00 	ldrex	r3, [r3]
 8011924:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011928:	f023 0301 	bic.w	r3, r3, #1
 801192c:	667b      	str	r3, [r7, #100]	@ 0x64
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	3308      	adds	r3, #8
 8011934:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011936:	647a      	str	r2, [r7, #68]	@ 0x44
 8011938:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801193a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801193c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801193e:	e841 2300 	strex	r3, r2, [r1]
 8011942:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011944:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011946:	2b00      	cmp	r3, #0
 8011948:	d1e5      	bne.n	8011916 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	2220      	movs	r2, #32
 801194e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	2200      	movs	r2, #0
 8011956:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	2200      	movs	r2, #0
 801195c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	4a33      	ldr	r2, [pc, #204]	@ (8011a30 <UART_RxISR_8BIT+0x1b4>)
 8011964:	4293      	cmp	r3, r2
 8011966:	d01f      	beq.n	80119a8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	685b      	ldr	r3, [r3, #4]
 801196e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011972:	2b00      	cmp	r3, #0
 8011974:	d018      	beq.n	80119a8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801197c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801197e:	e853 3f00 	ldrex	r3, [r3]
 8011982:	623b      	str	r3, [r7, #32]
   return(result);
 8011984:	6a3b      	ldr	r3, [r7, #32]
 8011986:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801198a:	663b      	str	r3, [r7, #96]	@ 0x60
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	461a      	mov	r2, r3
 8011992:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011994:	633b      	str	r3, [r7, #48]	@ 0x30
 8011996:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011998:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801199a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801199c:	e841 2300 	strex	r3, r2, [r1]
 80119a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80119a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d1e6      	bne.n	8011976 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80119ac:	2b01      	cmp	r3, #1
 80119ae:	d12e      	bne.n	8011a0e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	2200      	movs	r2, #0
 80119b4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119bc:	693b      	ldr	r3, [r7, #16]
 80119be:	e853 3f00 	ldrex	r3, [r3]
 80119c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	f023 0310 	bic.w	r3, r3, #16
 80119ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	461a      	mov	r2, r3
 80119d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80119d4:	61fb      	str	r3, [r7, #28]
 80119d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119d8:	69b9      	ldr	r1, [r7, #24]
 80119da:	69fa      	ldr	r2, [r7, #28]
 80119dc:	e841 2300 	strex	r3, r2, [r1]
 80119e0:	617b      	str	r3, [r7, #20]
   return(result);
 80119e2:	697b      	ldr	r3, [r7, #20]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d1e6      	bne.n	80119b6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	69db      	ldr	r3, [r3, #28]
 80119ee:	f003 0310 	and.w	r3, r3, #16
 80119f2:	2b10      	cmp	r3, #16
 80119f4:	d103      	bne.n	80119fe <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	2210      	movs	r2, #16
 80119fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011a04:	4619      	mov	r1, r3
 8011a06:	6878      	ldr	r0, [r7, #4]
 8011a08:	f7fe f93a 	bl	800fc80 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011a0c:	e00b      	b.n	8011a26 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011a0e:	6878      	ldr	r0, [r7, #4]
 8011a10:	f7f0 fe26 	bl	8002660 <HAL_UART_RxCpltCallback>
}
 8011a14:	e007      	b.n	8011a26 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	699a      	ldr	r2, [r3, #24]
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	f042 0208 	orr.w	r2, r2, #8
 8011a24:	619a      	str	r2, [r3, #24]
}
 8011a26:	bf00      	nop
 8011a28:	3770      	adds	r7, #112	@ 0x70
 8011a2a:	46bd      	mov	sp, r7
 8011a2c:	bd80      	pop	{r7, pc}
 8011a2e:	bf00      	nop
 8011a30:	58000c00 	.word	0x58000c00

08011a34 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8011a34:	b580      	push	{r7, lr}
 8011a36:	b09c      	sub	sp, #112	@ 0x70
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011a42:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011a4c:	2b22      	cmp	r3, #34	@ 0x22
 8011a4e:	f040 80be 	bne.w	8011bce <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a58:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011a60:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8011a62:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8011a66:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8011a6a:	4013      	ands	r3, r2
 8011a6c:	b29a      	uxth	r2, r3
 8011a6e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011a70:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011a76:	1c9a      	adds	r2, r3, #2
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011a82:	b29b      	uxth	r3, r3
 8011a84:	3b01      	subs	r3, #1
 8011a86:	b29a      	uxth	r2, r3
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011a94:	b29b      	uxth	r3, r3
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	f040 80a1 	bne.w	8011bde <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011aa2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011aa4:	e853 3f00 	ldrex	r3, [r3]
 8011aa8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8011aaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011aac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011ab0:	667b      	str	r3, [r7, #100]	@ 0x64
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	461a      	mov	r2, r3
 8011ab8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011aba:	657b      	str	r3, [r7, #84]	@ 0x54
 8011abc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011abe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011ac0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011ac2:	e841 2300 	strex	r3, r2, [r1]
 8011ac6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8011ac8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d1e6      	bne.n	8011a9c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	3308      	adds	r3, #8
 8011ad4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ad8:	e853 3f00 	ldrex	r3, [r3]
 8011adc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ae0:	f023 0301 	bic.w	r3, r3, #1
 8011ae4:	663b      	str	r3, [r7, #96]	@ 0x60
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	3308      	adds	r3, #8
 8011aec:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011aee:	643a      	str	r2, [r7, #64]	@ 0x40
 8011af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011af2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011af4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011af6:	e841 2300 	strex	r3, r2, [r1]
 8011afa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d1e5      	bne.n	8011ace <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	2220      	movs	r2, #32
 8011b06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	2200      	movs	r2, #0
 8011b0e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	2200      	movs	r2, #0
 8011b14:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	4a33      	ldr	r2, [pc, #204]	@ (8011be8 <UART_RxISR_16BIT+0x1b4>)
 8011b1c:	4293      	cmp	r3, r2
 8011b1e:	d01f      	beq.n	8011b60 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	685b      	ldr	r3, [r3, #4]
 8011b26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d018      	beq.n	8011b60 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b34:	6a3b      	ldr	r3, [r7, #32]
 8011b36:	e853 3f00 	ldrex	r3, [r3]
 8011b3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8011b3c:	69fb      	ldr	r3, [r7, #28]
 8011b3e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8011b42:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	461a      	mov	r2, r3
 8011b4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011b4e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011b52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011b54:	e841 2300 	strex	r3, r2, [r1]
 8011b58:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d1e6      	bne.n	8011b2e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011b64:	2b01      	cmp	r3, #1
 8011b66:	d12e      	bne.n	8011bc6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	2200      	movs	r2, #0
 8011b6c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	e853 3f00 	ldrex	r3, [r3]
 8011b7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8011b7c:	68bb      	ldr	r3, [r7, #8]
 8011b7e:	f023 0310 	bic.w	r3, r3, #16
 8011b82:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	461a      	mov	r2, r3
 8011b8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011b8c:	61bb      	str	r3, [r7, #24]
 8011b8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b90:	6979      	ldr	r1, [r7, #20]
 8011b92:	69ba      	ldr	r2, [r7, #24]
 8011b94:	e841 2300 	strex	r3, r2, [r1]
 8011b98:	613b      	str	r3, [r7, #16]
   return(result);
 8011b9a:	693b      	ldr	r3, [r7, #16]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d1e6      	bne.n	8011b6e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	69db      	ldr	r3, [r3, #28]
 8011ba6:	f003 0310 	and.w	r3, r3, #16
 8011baa:	2b10      	cmp	r3, #16
 8011bac:	d103      	bne.n	8011bb6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	2210      	movs	r2, #16
 8011bb4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011bbc:	4619      	mov	r1, r3
 8011bbe:	6878      	ldr	r0, [r7, #4]
 8011bc0:	f7fe f85e 	bl	800fc80 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011bc4:	e00b      	b.n	8011bde <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011bc6:	6878      	ldr	r0, [r7, #4]
 8011bc8:	f7f0 fd4a 	bl	8002660 <HAL_UART_RxCpltCallback>
}
 8011bcc:	e007      	b.n	8011bde <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	699a      	ldr	r2, [r3, #24]
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	f042 0208 	orr.w	r2, r2, #8
 8011bdc:	619a      	str	r2, [r3, #24]
}
 8011bde:	bf00      	nop
 8011be0:	3770      	adds	r7, #112	@ 0x70
 8011be2:	46bd      	mov	sp, r7
 8011be4:	bd80      	pop	{r7, pc}
 8011be6:	bf00      	nop
 8011be8:	58000c00 	.word	0x58000c00

08011bec <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b0ac      	sub	sp, #176	@ 0xb0
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011bfa:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	69db      	ldr	r3, [r3, #28]
 8011c04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	689b      	ldr	r3, [r3, #8]
 8011c18:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011c22:	2b22      	cmp	r3, #34	@ 0x22
 8011c24:	f040 8180 	bne.w	8011f28 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011c2e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011c32:	e123      	b.n	8011e7c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c3a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011c3e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8011c42:	b2d9      	uxtb	r1, r3
 8011c44:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8011c48:	b2da      	uxtb	r2, r3
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011c4e:	400a      	ands	r2, r1
 8011c50:	b2d2      	uxtb	r2, r2
 8011c52:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011c58:	1c5a      	adds	r2, r3, #1
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011c64:	b29b      	uxth	r3, r3
 8011c66:	3b01      	subs	r3, #1
 8011c68:	b29a      	uxth	r2, r3
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	69db      	ldr	r3, [r3, #28]
 8011c76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8011c7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011c7e:	f003 0307 	and.w	r3, r3, #7
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d053      	beq.n	8011d2e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011c86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011c8a:	f003 0301 	and.w	r3, r3, #1
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d011      	beq.n	8011cb6 <UART_RxISR_8BIT_FIFOEN+0xca>
 8011c92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011c96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d00b      	beq.n	8011cb6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	2201      	movs	r2, #1
 8011ca4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011cac:	f043 0201 	orr.w	r2, r3, #1
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011cb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011cba:	f003 0302 	and.w	r3, r3, #2
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d011      	beq.n	8011ce6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8011cc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011cc6:	f003 0301 	and.w	r3, r3, #1
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d00b      	beq.n	8011ce6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	2202      	movs	r2, #2
 8011cd4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011cdc:	f043 0204 	orr.w	r2, r3, #4
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011ce6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011cea:	f003 0304 	and.w	r3, r3, #4
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d011      	beq.n	8011d16 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8011cf2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011cf6:	f003 0301 	and.w	r3, r3, #1
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d00b      	beq.n	8011d16 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	2204      	movs	r2, #4
 8011d04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011d0c:	f043 0202 	orr.w	r2, r3, #2
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d006      	beq.n	8011d2e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011d20:	6878      	ldr	r0, [r7, #4]
 8011d22:	f7fd ff99 	bl	800fc58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	2200      	movs	r2, #0
 8011d2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011d34:	b29b      	uxth	r3, r3
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	f040 80a0 	bne.w	8011e7c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011d44:	e853 3f00 	ldrex	r3, [r3]
 8011d48:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8011d4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011d4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011d50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	461a      	mov	r2, r3
 8011d5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011d5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8011d60:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d62:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8011d64:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8011d66:	e841 2300 	strex	r3, r2, [r1]
 8011d6a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8011d6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d1e4      	bne.n	8011d3c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	3308      	adds	r3, #8
 8011d78:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011d7c:	e853 3f00 	ldrex	r3, [r3]
 8011d80:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8011d82:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011d84:	4b6e      	ldr	r3, [pc, #440]	@ (8011f40 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8011d86:	4013      	ands	r3, r2
 8011d88:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	3308      	adds	r3, #8
 8011d92:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8011d96:	66ba      	str	r2, [r7, #104]	@ 0x68
 8011d98:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d9a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8011d9c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8011d9e:	e841 2300 	strex	r3, r2, [r1]
 8011da2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8011da4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d1e3      	bne.n	8011d72 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	2220      	movs	r2, #32
 8011dae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	2200      	movs	r2, #0
 8011db6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	2200      	movs	r2, #0
 8011dbc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	4a60      	ldr	r2, [pc, #384]	@ (8011f44 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8011dc4:	4293      	cmp	r3, r2
 8011dc6:	d021      	beq.n	8011e0c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	685b      	ldr	r3, [r3, #4]
 8011dce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d01a      	beq.n	8011e0c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ddc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011dde:	e853 3f00 	ldrex	r3, [r3]
 8011de2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8011de4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011de6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8011dea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	461a      	mov	r2, r3
 8011df4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011df8:	657b      	str	r3, [r7, #84]	@ 0x54
 8011dfa:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011dfc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011dfe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011e00:	e841 2300 	strex	r3, r2, [r1]
 8011e04:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8011e06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d1e4      	bne.n	8011dd6 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011e10:	2b01      	cmp	r3, #1
 8011e12:	d130      	bne.n	8011e76 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	2200      	movs	r2, #0
 8011e18:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011e22:	e853 3f00 	ldrex	r3, [r3]
 8011e26:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e2a:	f023 0310 	bic.w	r3, r3, #16
 8011e2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	461a      	mov	r2, r3
 8011e38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011e3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8011e3e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e40:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011e42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011e44:	e841 2300 	strex	r3, r2, [r1]
 8011e48:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d1e4      	bne.n	8011e1a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	69db      	ldr	r3, [r3, #28]
 8011e56:	f003 0310 	and.w	r3, r3, #16
 8011e5a:	2b10      	cmp	r3, #16
 8011e5c:	d103      	bne.n	8011e66 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	2210      	movs	r2, #16
 8011e64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011e6c:	4619      	mov	r1, r3
 8011e6e:	6878      	ldr	r0, [r7, #4]
 8011e70:	f7fd ff06 	bl	800fc80 <HAL_UARTEx_RxEventCallback>
 8011e74:	e002      	b.n	8011e7c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8011e76:	6878      	ldr	r0, [r7, #4]
 8011e78:	f7f0 fbf2 	bl	8002660 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011e7c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d006      	beq.n	8011e92 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8011e84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011e88:	f003 0320 	and.w	r3, r3, #32
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	f47f aed1 	bne.w	8011c34 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011e98:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8011e9c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d049      	beq.n	8011f38 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011eaa:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8011eae:	429a      	cmp	r2, r3
 8011eb0:	d242      	bcs.n	8011f38 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	3308      	adds	r3, #8
 8011eb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011eba:	6a3b      	ldr	r3, [r7, #32]
 8011ebc:	e853 3f00 	ldrex	r3, [r3]
 8011ec0:	61fb      	str	r3, [r7, #28]
   return(result);
 8011ec2:	69fb      	ldr	r3, [r7, #28]
 8011ec4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011ec8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	3308      	adds	r3, #8
 8011ed2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8011ed6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011eda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011edc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011ede:	e841 2300 	strex	r3, r2, [r1]
 8011ee2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d1e3      	bne.n	8011eb2 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	4a16      	ldr	r2, [pc, #88]	@ (8011f48 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8011eee:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	e853 3f00 	ldrex	r3, [r3]
 8011efc:	60bb      	str	r3, [r7, #8]
   return(result);
 8011efe:	68bb      	ldr	r3, [r7, #8]
 8011f00:	f043 0320 	orr.w	r3, r3, #32
 8011f04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	461a      	mov	r2, r3
 8011f0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8011f12:	61bb      	str	r3, [r7, #24]
 8011f14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f16:	6979      	ldr	r1, [r7, #20]
 8011f18:	69ba      	ldr	r2, [r7, #24]
 8011f1a:	e841 2300 	strex	r3, r2, [r1]
 8011f1e:	613b      	str	r3, [r7, #16]
   return(result);
 8011f20:	693b      	ldr	r3, [r7, #16]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d1e4      	bne.n	8011ef0 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011f26:	e007      	b.n	8011f38 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	699a      	ldr	r2, [r3, #24]
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	f042 0208 	orr.w	r2, r2, #8
 8011f36:	619a      	str	r2, [r3, #24]
}
 8011f38:	bf00      	nop
 8011f3a:	37b0      	adds	r7, #176	@ 0xb0
 8011f3c:	46bd      	mov	sp, r7
 8011f3e:	bd80      	pop	{r7, pc}
 8011f40:	effffffe 	.word	0xeffffffe
 8011f44:	58000c00 	.word	0x58000c00
 8011f48:	0801187d 	.word	0x0801187d

08011f4c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011f4c:	b580      	push	{r7, lr}
 8011f4e:	b0ae      	sub	sp, #184	@ 0xb8
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011f5a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	69db      	ldr	r3, [r3, #28]
 8011f64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	689b      	ldr	r3, [r3, #8]
 8011f78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011f82:	2b22      	cmp	r3, #34	@ 0x22
 8011f84:	f040 8184 	bne.w	8012290 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011f8e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011f92:	e127      	b.n	80121e4 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f9a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011fa2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8011fa6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8011faa:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8011fae:	4013      	ands	r3, r2
 8011fb0:	b29a      	uxth	r2, r3
 8011fb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011fb6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011fbc:	1c9a      	adds	r2, r3, #2
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011fc8:	b29b      	uxth	r3, r3
 8011fca:	3b01      	subs	r3, #1
 8011fcc:	b29a      	uxth	r2, r3
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	69db      	ldr	r3, [r3, #28]
 8011fda:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8011fde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011fe2:	f003 0307 	and.w	r3, r3, #7
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d053      	beq.n	8012092 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011fea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011fee:	f003 0301 	and.w	r3, r3, #1
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d011      	beq.n	801201a <UART_RxISR_16BIT_FIFOEN+0xce>
 8011ff6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d00b      	beq.n	801201a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	2201      	movs	r2, #1
 8012008:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012010:	f043 0201 	orr.w	r2, r3, #1
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801201a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801201e:	f003 0302 	and.w	r3, r3, #2
 8012022:	2b00      	cmp	r3, #0
 8012024:	d011      	beq.n	801204a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8012026:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801202a:	f003 0301 	and.w	r3, r3, #1
 801202e:	2b00      	cmp	r3, #0
 8012030:	d00b      	beq.n	801204a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	2202      	movs	r2, #2
 8012038:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012040:	f043 0204 	orr.w	r2, r3, #4
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801204a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801204e:	f003 0304 	and.w	r3, r3, #4
 8012052:	2b00      	cmp	r3, #0
 8012054:	d011      	beq.n	801207a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8012056:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801205a:	f003 0301 	and.w	r3, r3, #1
 801205e:	2b00      	cmp	r3, #0
 8012060:	d00b      	beq.n	801207a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	2204      	movs	r2, #4
 8012068:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012070:	f043 0202 	orr.w	r2, r3, #2
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012080:	2b00      	cmp	r3, #0
 8012082:	d006      	beq.n	8012092 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012084:	6878      	ldr	r0, [r7, #4]
 8012086:	f7fd fde7 	bl	800fc58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	2200      	movs	r2, #0
 801208e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012098:	b29b      	uxth	r3, r3
 801209a:	2b00      	cmp	r3, #0
 801209c:	f040 80a2 	bne.w	80121e4 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80120a8:	e853 3f00 	ldrex	r3, [r3]
 80120ac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80120ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80120b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80120b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	461a      	mov	r2, r3
 80120be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80120c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80120c6:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120c8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80120ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80120ce:	e841 2300 	strex	r3, r2, [r1]
 80120d2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80120d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d1e2      	bne.n	80120a0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	3308      	adds	r3, #8
 80120e0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80120e4:	e853 3f00 	ldrex	r3, [r3]
 80120e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80120ea:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80120ec:	4b6e      	ldr	r3, [pc, #440]	@ (80122a8 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 80120ee:	4013      	ands	r3, r2
 80120f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	3308      	adds	r3, #8
 80120fa:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80120fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8012100:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012102:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8012104:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8012106:	e841 2300 	strex	r3, r2, [r1]
 801210a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801210c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801210e:	2b00      	cmp	r3, #0
 8012110:	d1e3      	bne.n	80120da <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	2220      	movs	r2, #32
 8012116:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	2200      	movs	r2, #0
 801211e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	2200      	movs	r2, #0
 8012124:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	4a60      	ldr	r2, [pc, #384]	@ (80122ac <UART_RxISR_16BIT_FIFOEN+0x360>)
 801212c:	4293      	cmp	r3, r2
 801212e:	d021      	beq.n	8012174 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	685b      	ldr	r3, [r3, #4]
 8012136:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801213a:	2b00      	cmp	r3, #0
 801213c:	d01a      	beq.n	8012174 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012144:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012146:	e853 3f00 	ldrex	r3, [r3]
 801214a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801214c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801214e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8012152:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	461a      	mov	r2, r3
 801215c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012160:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012162:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012164:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012166:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012168:	e841 2300 	strex	r3, r2, [r1]
 801216c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801216e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012170:	2b00      	cmp	r3, #0
 8012172:	d1e4      	bne.n	801213e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012178:	2b01      	cmp	r3, #1
 801217a:	d130      	bne.n	80121de <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	2200      	movs	r2, #0
 8012180:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801218a:	e853 3f00 	ldrex	r3, [r3]
 801218e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8012190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012192:	f023 0310 	bic.w	r3, r3, #16
 8012196:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	461a      	mov	r2, r3
 80121a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80121a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80121a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80121aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80121ac:	e841 2300 	strex	r3, r2, [r1]
 80121b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80121b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d1e4      	bne.n	8012182 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	69db      	ldr	r3, [r3, #28]
 80121be:	f003 0310 	and.w	r3, r3, #16
 80121c2:	2b10      	cmp	r3, #16
 80121c4:	d103      	bne.n	80121ce <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	2210      	movs	r2, #16
 80121cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80121d4:	4619      	mov	r1, r3
 80121d6:	6878      	ldr	r0, [r7, #4]
 80121d8:	f7fd fd52 	bl	800fc80 <HAL_UARTEx_RxEventCallback>
 80121dc:	e002      	b.n	80121e4 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80121de:	6878      	ldr	r0, [r7, #4]
 80121e0:	f7f0 fa3e 	bl	8002660 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80121e4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d006      	beq.n	80121fa <UART_RxISR_16BIT_FIFOEN+0x2ae>
 80121ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80121f0:	f003 0320 	and.w	r3, r3, #32
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	f47f aecd 	bne.w	8011f94 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012200:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012204:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8012208:	2b00      	cmp	r3, #0
 801220a:	d049      	beq.n	80122a0 <UART_RxISR_16BIT_FIFOEN+0x354>
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8012212:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8012216:	429a      	cmp	r2, r3
 8012218:	d242      	bcs.n	80122a0 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	3308      	adds	r3, #8
 8012220:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012224:	e853 3f00 	ldrex	r3, [r3]
 8012228:	623b      	str	r3, [r7, #32]
   return(result);
 801222a:	6a3b      	ldr	r3, [r7, #32]
 801222c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8012230:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	3308      	adds	r3, #8
 801223a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801223e:	633a      	str	r2, [r7, #48]	@ 0x30
 8012240:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012242:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012244:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012246:	e841 2300 	strex	r3, r2, [r1]
 801224a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801224c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801224e:	2b00      	cmp	r3, #0
 8012250:	d1e3      	bne.n	801221a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	4a16      	ldr	r2, [pc, #88]	@ (80122b0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8012256:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801225e:	693b      	ldr	r3, [r7, #16]
 8012260:	e853 3f00 	ldrex	r3, [r3]
 8012264:	60fb      	str	r3, [r7, #12]
   return(result);
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	f043 0320 	orr.w	r3, r3, #32
 801226c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	461a      	mov	r2, r3
 8012276:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801227a:	61fb      	str	r3, [r7, #28]
 801227c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801227e:	69b9      	ldr	r1, [r7, #24]
 8012280:	69fa      	ldr	r2, [r7, #28]
 8012282:	e841 2300 	strex	r3, r2, [r1]
 8012286:	617b      	str	r3, [r7, #20]
   return(result);
 8012288:	697b      	ldr	r3, [r7, #20]
 801228a:	2b00      	cmp	r3, #0
 801228c:	d1e4      	bne.n	8012258 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801228e:	e007      	b.n	80122a0 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	699a      	ldr	r2, [r3, #24]
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	f042 0208 	orr.w	r2, r2, #8
 801229e:	619a      	str	r2, [r3, #24]
}
 80122a0:	bf00      	nop
 80122a2:	37b8      	adds	r7, #184	@ 0xb8
 80122a4:	46bd      	mov	sp, r7
 80122a6:	bd80      	pop	{r7, pc}
 80122a8:	effffffe 	.word	0xeffffffe
 80122ac:	58000c00 	.word	0x58000c00
 80122b0:	08011a35 	.word	0x08011a35

080122b4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80122b4:	b480      	push	{r7}
 80122b6:	b083      	sub	sp, #12
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80122bc:	bf00      	nop
 80122be:	370c      	adds	r7, #12
 80122c0:	46bd      	mov	sp, r7
 80122c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122c6:	4770      	bx	lr

080122c8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80122c8:	b480      	push	{r7}
 80122ca:	b083      	sub	sp, #12
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80122d0:	bf00      	nop
 80122d2:	370c      	adds	r7, #12
 80122d4:	46bd      	mov	sp, r7
 80122d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122da:	4770      	bx	lr

080122dc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80122dc:	b480      	push	{r7}
 80122de:	b083      	sub	sp, #12
 80122e0:	af00      	add	r7, sp, #0
 80122e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80122e4:	bf00      	nop
 80122e6:	370c      	adds	r7, #12
 80122e8:	46bd      	mov	sp, r7
 80122ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ee:	4770      	bx	lr

080122f0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80122f0:	b480      	push	{r7}
 80122f2:	b085      	sub	sp, #20
 80122f4:	af00      	add	r7, sp, #0
 80122f6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80122fe:	2b01      	cmp	r3, #1
 8012300:	d101      	bne.n	8012306 <HAL_UARTEx_DisableFifoMode+0x16>
 8012302:	2302      	movs	r3, #2
 8012304:	e027      	b.n	8012356 <HAL_UARTEx_DisableFifoMode+0x66>
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	2201      	movs	r2, #1
 801230a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	2224      	movs	r2, #36	@ 0x24
 8012312:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	681a      	ldr	r2, [r3, #0]
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	f022 0201 	bic.w	r2, r2, #1
 801232c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8012334:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	2200      	movs	r2, #0
 801233a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	68fa      	ldr	r2, [r7, #12]
 8012342:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	2220      	movs	r2, #32
 8012348:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	2200      	movs	r2, #0
 8012350:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012354:	2300      	movs	r3, #0
}
 8012356:	4618      	mov	r0, r3
 8012358:	3714      	adds	r7, #20
 801235a:	46bd      	mov	sp, r7
 801235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012360:	4770      	bx	lr

08012362 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012362:	b580      	push	{r7, lr}
 8012364:	b084      	sub	sp, #16
 8012366:	af00      	add	r7, sp, #0
 8012368:	6078      	str	r0, [r7, #4]
 801236a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012372:	2b01      	cmp	r3, #1
 8012374:	d101      	bne.n	801237a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012376:	2302      	movs	r3, #2
 8012378:	e02d      	b.n	80123d6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	2201      	movs	r2, #1
 801237e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	2224      	movs	r2, #36	@ 0x24
 8012386:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	681a      	ldr	r2, [r3, #0]
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	f022 0201 	bic.w	r2, r2, #1
 80123a0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	689b      	ldr	r3, [r3, #8]
 80123a8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	683a      	ldr	r2, [r7, #0]
 80123b2:	430a      	orrs	r2, r1
 80123b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80123b6:	6878      	ldr	r0, [r7, #4]
 80123b8:	f000 f850 	bl	801245c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	68fa      	ldr	r2, [r7, #12]
 80123c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	2220      	movs	r2, #32
 80123c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	2200      	movs	r2, #0
 80123d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80123d4:	2300      	movs	r3, #0
}
 80123d6:	4618      	mov	r0, r3
 80123d8:	3710      	adds	r7, #16
 80123da:	46bd      	mov	sp, r7
 80123dc:	bd80      	pop	{r7, pc}

080123de <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80123de:	b580      	push	{r7, lr}
 80123e0:	b084      	sub	sp, #16
 80123e2:	af00      	add	r7, sp, #0
 80123e4:	6078      	str	r0, [r7, #4]
 80123e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80123ee:	2b01      	cmp	r3, #1
 80123f0:	d101      	bne.n	80123f6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80123f2:	2302      	movs	r3, #2
 80123f4:	e02d      	b.n	8012452 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	2201      	movs	r2, #1
 80123fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	2224      	movs	r2, #36	@ 0x24
 8012402:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	681a      	ldr	r2, [r3, #0]
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	f022 0201 	bic.w	r2, r2, #1
 801241c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	689b      	ldr	r3, [r3, #8]
 8012424:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	683a      	ldr	r2, [r7, #0]
 801242e:	430a      	orrs	r2, r1
 8012430:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012432:	6878      	ldr	r0, [r7, #4]
 8012434:	f000 f812 	bl	801245c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	68fa      	ldr	r2, [r7, #12]
 801243e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	2220      	movs	r2, #32
 8012444:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	2200      	movs	r2, #0
 801244c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012450:	2300      	movs	r3, #0
}
 8012452:	4618      	mov	r0, r3
 8012454:	3710      	adds	r7, #16
 8012456:	46bd      	mov	sp, r7
 8012458:	bd80      	pop	{r7, pc}
	...

0801245c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801245c:	b480      	push	{r7}
 801245e:	b085      	sub	sp, #20
 8012460:	af00      	add	r7, sp, #0
 8012462:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012468:	2b00      	cmp	r3, #0
 801246a:	d108      	bne.n	801247e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	2201      	movs	r2, #1
 8012470:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	2201      	movs	r2, #1
 8012478:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801247c:	e031      	b.n	80124e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801247e:	2310      	movs	r3, #16
 8012480:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012482:	2310      	movs	r3, #16
 8012484:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	689b      	ldr	r3, [r3, #8]
 801248c:	0e5b      	lsrs	r3, r3, #25
 801248e:	b2db      	uxtb	r3, r3
 8012490:	f003 0307 	and.w	r3, r3, #7
 8012494:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	689b      	ldr	r3, [r3, #8]
 801249c:	0f5b      	lsrs	r3, r3, #29
 801249e:	b2db      	uxtb	r3, r3
 80124a0:	f003 0307 	and.w	r3, r3, #7
 80124a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80124a6:	7bbb      	ldrb	r3, [r7, #14]
 80124a8:	7b3a      	ldrb	r2, [r7, #12]
 80124aa:	4911      	ldr	r1, [pc, #68]	@ (80124f0 <UARTEx_SetNbDataToProcess+0x94>)
 80124ac:	5c8a      	ldrb	r2, [r1, r2]
 80124ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80124b2:	7b3a      	ldrb	r2, [r7, #12]
 80124b4:	490f      	ldr	r1, [pc, #60]	@ (80124f4 <UARTEx_SetNbDataToProcess+0x98>)
 80124b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80124b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80124bc:	b29a      	uxth	r2, r3
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80124c4:	7bfb      	ldrb	r3, [r7, #15]
 80124c6:	7b7a      	ldrb	r2, [r7, #13]
 80124c8:	4909      	ldr	r1, [pc, #36]	@ (80124f0 <UARTEx_SetNbDataToProcess+0x94>)
 80124ca:	5c8a      	ldrb	r2, [r1, r2]
 80124cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80124d0:	7b7a      	ldrb	r2, [r7, #13]
 80124d2:	4908      	ldr	r1, [pc, #32]	@ (80124f4 <UARTEx_SetNbDataToProcess+0x98>)
 80124d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80124d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80124da:	b29a      	uxth	r2, r3
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80124e2:	bf00      	nop
 80124e4:	3714      	adds	r7, #20
 80124e6:	46bd      	mov	sp, r7
 80124e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ec:	4770      	bx	lr
 80124ee:	bf00      	nop
 80124f0:	08019b80 	.word	0x08019b80
 80124f4:	08019b88 	.word	0x08019b88

080124f8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80124f8:	b580      	push	{r7, lr}
 80124fa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80124fc:	4904      	ldr	r1, [pc, #16]	@ (8012510 <MX_FATFS_Init+0x18>)
 80124fe:	4805      	ldr	r0, [pc, #20]	@ (8012514 <MX_FATFS_Init+0x1c>)
 8012500:	f004 fb52 	bl	8016ba8 <FATFS_LinkDriver>
 8012504:	4603      	mov	r3, r0
 8012506:	461a      	mov	r2, r3
 8012508:	4b03      	ldr	r3, [pc, #12]	@ (8012518 <MX_FATFS_Init+0x20>)
 801250a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801250c:	bf00      	nop
 801250e:	bd80      	pop	{r7, pc}
 8012510:	24002dd0 	.word	0x24002dd0
 8012514:	2400008c 	.word	0x2400008c
 8012518:	24002dcc 	.word	0x24002dcc

0801251c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 801251c:	b580      	push	{r7, lr}
 801251e:	b082      	sub	sp, #8
 8012520:	af00      	add	r7, sp, #0
 8012522:	4603      	mov	r3, r0
 8012524:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8012526:	79fb      	ldrb	r3, [r7, #7]
 8012528:	4618      	mov	r0, r3
 801252a:	f000 f9cd 	bl	80128c8 <SD_disk_initialize>
 801252e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8012530:	4618      	mov	r0, r3
 8012532:	3708      	adds	r7, #8
 8012534:	46bd      	mov	sp, r7
 8012536:	bd80      	pop	{r7, pc}

08012538 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8012538:	b580      	push	{r7, lr}
 801253a:	b082      	sub	sp, #8
 801253c:	af00      	add	r7, sp, #0
 801253e:	4603      	mov	r3, r0
 8012540:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8012542:	79fb      	ldrb	r3, [r7, #7]
 8012544:	4618      	mov	r0, r3
 8012546:	f000 fa7b 	bl	8012a40 <SD_disk_status>
 801254a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 801254c:	4618      	mov	r0, r3
 801254e:	3708      	adds	r7, #8
 8012550:	46bd      	mov	sp, r7
 8012552:	bd80      	pop	{r7, pc}

08012554 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8012554:	b580      	push	{r7, lr}
 8012556:	b084      	sub	sp, #16
 8012558:	af00      	add	r7, sp, #0
 801255a:	60b9      	str	r1, [r7, #8]
 801255c:	607a      	str	r2, [r7, #4]
 801255e:	603b      	str	r3, [r7, #0]
 8012560:	4603      	mov	r3, r0
 8012562:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8012564:	7bf8      	ldrb	r0, [r7, #15]
 8012566:	683b      	ldr	r3, [r7, #0]
 8012568:	687a      	ldr	r2, [r7, #4]
 801256a:	68b9      	ldr	r1, [r7, #8]
 801256c:	f000 fa7e 	bl	8012a6c <SD_disk_read>
 8012570:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8012572:	4618      	mov	r0, r3
 8012574:	3710      	adds	r7, #16
 8012576:	46bd      	mov	sp, r7
 8012578:	bd80      	pop	{r7, pc}

0801257a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 801257a:	b580      	push	{r7, lr}
 801257c:	b084      	sub	sp, #16
 801257e:	af00      	add	r7, sp, #0
 8012580:	60b9      	str	r1, [r7, #8]
 8012582:	607a      	str	r2, [r7, #4]
 8012584:	603b      	str	r3, [r7, #0]
 8012586:	4603      	mov	r3, r0
 8012588:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 801258a:	7bf8      	ldrb	r0, [r7, #15]
 801258c:	683b      	ldr	r3, [r7, #0]
 801258e:	687a      	ldr	r2, [r7, #4]
 8012590:	68b9      	ldr	r1, [r7, #8]
 8012592:	f000 fad5 	bl	8012b40 <SD_disk_write>
 8012596:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8012598:	4618      	mov	r0, r3
 801259a:	3710      	adds	r7, #16
 801259c:	46bd      	mov	sp, r7
 801259e:	bd80      	pop	{r7, pc}

080125a0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80125a0:	b580      	push	{r7, lr}
 80125a2:	b082      	sub	sp, #8
 80125a4:	af00      	add	r7, sp, #0
 80125a6:	4603      	mov	r3, r0
 80125a8:	603a      	str	r2, [r7, #0]
 80125aa:	71fb      	strb	r3, [r7, #7]
 80125ac:	460b      	mov	r3, r1
 80125ae:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 80125b0:	79b9      	ldrb	r1, [r7, #6]
 80125b2:	79fb      	ldrb	r3, [r7, #7]
 80125b4:	683a      	ldr	r2, [r7, #0]
 80125b6:	4618      	mov	r0, r3
 80125b8:	f000 fb42 	bl	8012c40 <SD_disk_ioctl>
 80125bc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80125be:	4618      	mov	r0, r3
 80125c0:	3708      	adds	r7, #8
 80125c2:	46bd      	mov	sp, r7
 80125c4:	bd80      	pop	{r7, pc}
	...

080125c8 <SELECT>:
static volatile UINT CardType;              // Card type flags

//-----[ SPI Functions ]-----

// Private functions
static void SELECT(void) {
 80125c8:	b580      	push	{r7, lr}
 80125ca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80125cc:	2200      	movs	r2, #0
 80125ce:	2110      	movs	r1, #16
 80125d0:	4802      	ldr	r0, [pc, #8]	@ (80125dc <SELECT+0x14>)
 80125d2:	f7f7 f9b3 	bl	800993c <HAL_GPIO_WritePin>
}
 80125d6:	bf00      	nop
 80125d8:	bd80      	pop	{r7, pc}
 80125da:	bf00      	nop
 80125dc:	58020000 	.word	0x58020000

080125e0 <DESELECT>:

static void DESELECT(void) {
 80125e0:	b580      	push	{r7, lr}
 80125e2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80125e4:	2201      	movs	r2, #1
 80125e6:	2110      	movs	r1, #16
 80125e8:	4802      	ldr	r0, [pc, #8]	@ (80125f4 <DESELECT+0x14>)
 80125ea:	f7f7 f9a7 	bl	800993c <HAL_GPIO_WritePin>
}
 80125ee:	bf00      	nop
 80125f0:	bd80      	pop	{r7, pc}
 80125f2:	bf00      	nop
 80125f4:	58020000 	.word	0x58020000

080125f8 <SPI_TxByte>:

static void SPI_TxByte(BYTE data) {
 80125f8:	b580      	push	{r7, lr}
 80125fa:	b082      	sub	sp, #8
 80125fc:	af00      	add	r7, sp, #0
 80125fe:	4603      	mov	r3, r0
 8012600:	71fb      	strb	r3, [r7, #7]
    while(HAL_SPI_GetState(&SD_SPI_HANDLE) != HAL_SPI_STATE_READY);
 8012602:	bf00      	nop
 8012604:	4808      	ldr	r0, [pc, #32]	@ (8012628 <SPI_TxByte+0x30>)
 8012606:	f7fb f9bf 	bl	800d988 <HAL_SPI_GetState>
 801260a:	4603      	mov	r3, r0
 801260c:	2b01      	cmp	r3, #1
 801260e:	d1f9      	bne.n	8012604 <SPI_TxByte+0xc>
    HAL_SPI_Transmit(&SD_SPI_HANDLE, &data, 1, HAL_MAX_DELAY);
 8012610:	1df9      	adds	r1, r7, #7
 8012612:	f04f 33ff 	mov.w	r3, #4294967295
 8012616:	2201      	movs	r2, #1
 8012618:	4803      	ldr	r0, [pc, #12]	@ (8012628 <SPI_TxByte+0x30>)
 801261a:	f7fa fa1b 	bl	800ca54 <HAL_SPI_Transmit>
}
 801261e:	bf00      	nop
 8012620:	3708      	adds	r7, #8
 8012622:	46bd      	mov	sp, r7
 8012624:	bd80      	pop	{r7, pc}
 8012626:	bf00      	nop
 8012628:	24000da8 	.word	0x24000da8

0801262c <SPI_RxByte>:

static BYTE SPI_RxByte(void) {
 801262c:	b580      	push	{r7, lr}
 801262e:	b084      	sub	sp, #16
 8012630:	af02      	add	r7, sp, #8
    BYTE dummy = 0xFF, data = 0;
 8012632:	23ff      	movs	r3, #255	@ 0xff
 8012634:	71fb      	strb	r3, [r7, #7]
 8012636:	2300      	movs	r3, #0
 8012638:	71bb      	strb	r3, [r7, #6]
    while(HAL_SPI_GetState(&SD_SPI_HANDLE) != HAL_SPI_STATE_READY);
 801263a:	bf00      	nop
 801263c:	4809      	ldr	r0, [pc, #36]	@ (8012664 <SPI_RxByte+0x38>)
 801263e:	f7fb f9a3 	bl	800d988 <HAL_SPI_GetState>
 8012642:	4603      	mov	r3, r0
 8012644:	2b01      	cmp	r3, #1
 8012646:	d1f9      	bne.n	801263c <SPI_RxByte+0x10>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dummy, &data, 1, HAL_MAX_DELAY);
 8012648:	1dba      	adds	r2, r7, #6
 801264a:	1df9      	adds	r1, r7, #7
 801264c:	f04f 33ff 	mov.w	r3, #4294967295
 8012650:	9300      	str	r3, [sp, #0]
 8012652:	2301      	movs	r3, #1
 8012654:	4803      	ldr	r0, [pc, #12]	@ (8012664 <SPI_RxByte+0x38>)
 8012656:	f7fa fe5d 	bl	800d314 <HAL_SPI_TransmitReceive>
    return data;
 801265a:	79bb      	ldrb	r3, [r7, #6]
}
 801265c:	4618      	mov	r0, r3
 801265e:	3708      	adds	r7, #8
 8012660:	46bd      	mov	sp, r7
 8012662:	bd80      	pop	{r7, pc}
 8012664:	24000da8 	.word	0x24000da8

08012668 <SPI_RxBytePtr>:

static void SPI_RxBytePtr(BYTE *buff) {
 8012668:	b580      	push	{r7, lr}
 801266a:	b082      	sub	sp, #8
 801266c:	af00      	add	r7, sp, #0
 801266e:	6078      	str	r0, [r7, #4]
    *buff = SPI_RxByte();
 8012670:	f7ff ffdc 	bl	801262c <SPI_RxByte>
 8012674:	4603      	mov	r3, r0
 8012676:	461a      	mov	r2, r3
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	701a      	strb	r2, [r3, #0]
}
 801267c:	bf00      	nop
 801267e:	3708      	adds	r7, #8
 8012680:	46bd      	mov	sp, r7
 8012682:	bd80      	pop	{r7, pc}

08012684 <SD_ReadyWait>:

static BYTE SD_ReadyWait(void) {
 8012684:	b580      	push	{r7, lr}
 8012686:	b082      	sub	sp, #8
 8012688:	af00      	add	r7, sp, #0
    BYTE res;
    // Wait for ready in timeout of 500ms
    UINT timeout = 500;
 801268a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 801268e:	607b      	str	r3, [r7, #4]
    SPI_RxByte();
 8012690:	f7ff ffcc 	bl	801262c <SPI_RxByte>
    do {
        res = SPI_RxByte();
 8012694:	f7ff ffca 	bl	801262c <SPI_RxByte>
 8012698:	4603      	mov	r3, r0
 801269a:	70fb      	strb	r3, [r7, #3]
    } while ((res != 0xFF) && timeout--);
 801269c:	78fb      	ldrb	r3, [r7, #3]
 801269e:	2bff      	cmp	r3, #255	@ 0xff
 80126a0:	d004      	beq.n	80126ac <SD_ReadyWait+0x28>
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	1e5a      	subs	r2, r3, #1
 80126a6:	607a      	str	r2, [r7, #4]
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d1f3      	bne.n	8012694 <SD_ReadyWait+0x10>

    return res;
 80126ac:	78fb      	ldrb	r3, [r7, #3]
}
 80126ae:	4618      	mov	r0, r3
 80126b0:	3708      	adds	r7, #8
 80126b2:	46bd      	mov	sp, r7
 80126b4:	bd80      	pop	{r7, pc}

080126b6 <SD_PowerOn>:

static void SD_PowerOn(void) {
 80126b6:	b580      	push	{r7, lr}
 80126b8:	b084      	sub	sp, #16
 80126ba:	af00      	add	r7, sp, #0
    BYTE args[10];
    SELECT();
 80126bc:	f7ff ff84 	bl	80125c8 <SELECT>
    for(int i = 0; i < 10; i++) {
 80126c0:	2300      	movs	r3, #0
 80126c2:	60fb      	str	r3, [r7, #12]
 80126c4:	e005      	b.n	80126d2 <SD_PowerOn+0x1c>
        SPI_TxByte(0xFF);
 80126c6:	20ff      	movs	r0, #255	@ 0xff
 80126c8:	f7ff ff96 	bl	80125f8 <SPI_TxByte>
    for(int i = 0; i < 10; i++) {
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	3301      	adds	r3, #1
 80126d0:	60fb      	str	r3, [r7, #12]
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	2b09      	cmp	r3, #9
 80126d6:	ddf6      	ble.n	80126c6 <SD_PowerOn+0x10>
    }
    DESELECT();
 80126d8:	f7ff ff82 	bl	80125e0 <DESELECT>
    SPI_TxByte(0xFF);
 80126dc:	20ff      	movs	r0, #255	@ 0xff
 80126de:	f7ff ff8b 	bl	80125f8 <SPI_TxByte>
}
 80126e2:	bf00      	nop
 80126e4:	3710      	adds	r7, #16
 80126e6:	46bd      	mov	sp, r7
 80126e8:	bd80      	pop	{r7, pc}

080126ea <SD_PowerOff>:

static void SD_PowerOff(void) {
 80126ea:	b580      	push	{r7, lr}
 80126ec:	af00      	add	r7, sp, #0
    SELECT();
 80126ee:	f7ff ff6b 	bl	80125c8 <SELECT>
    SD_ReadyWait();
 80126f2:	f7ff ffc7 	bl	8012684 <SD_ReadyWait>
    DESELECT();
 80126f6:	f7ff ff73 	bl	80125e0 <DESELECT>
    SPI_TxByte(0xFF);
 80126fa:	20ff      	movs	r0, #255	@ 0xff
 80126fc:	f7ff ff7c 	bl	80125f8 <SPI_TxByte>
}
 8012700:	bf00      	nop
 8012702:	bd80      	pop	{r7, pc}

08012704 <SD_RxDataBlock>:

static BYTE SD_CheckPower(void) {
    return 0; // Dummy implementation
}

static bool SD_RxDataBlock(BYTE *buff, UINT btr) {
 8012704:	b580      	push	{r7, lr}
 8012706:	b084      	sub	sp, #16
 8012708:	af00      	add	r7, sp, #0
 801270a:	6078      	str	r0, [r7, #4]
 801270c:	6039      	str	r1, [r7, #0]
    BYTE token;
    UINT timeout = 200; // 200ms timeout
 801270e:	23c8      	movs	r3, #200	@ 0xc8
 8012710:	60fb      	str	r3, [r7, #12]

    do {
        token = SPI_RxByte();
 8012712:	f7ff ff8b 	bl	801262c <SPI_RxByte>
 8012716:	4603      	mov	r3, r0
 8012718:	72fb      	strb	r3, [r7, #11]
    } while((token == 0xFF) && timeout--);
 801271a:	7afb      	ldrb	r3, [r7, #11]
 801271c:	2bff      	cmp	r3, #255	@ 0xff
 801271e:	d104      	bne.n	801272a <SD_RxDataBlock+0x26>
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	1e5a      	subs	r2, r3, #1
 8012724:	60fa      	str	r2, [r7, #12]
 8012726:	2b00      	cmp	r3, #0
 8012728:	d1f3      	bne.n	8012712 <SD_RxDataBlock+0xe>

    if(token != 0xFE) return FALSE; // Invalid data token
 801272a:	7afb      	ldrb	r3, [r7, #11]
 801272c:	2bfe      	cmp	r3, #254	@ 0xfe
 801272e:	d001      	beq.n	8012734 <SD_RxDataBlock+0x30>
 8012730:	2300      	movs	r3, #0
 8012732:	e016      	b.n	8012762 <SD_RxDataBlock+0x5e>

    do {
        SPI_RxBytePtr(buff++);
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	1c5a      	adds	r2, r3, #1
 8012738:	607a      	str	r2, [r7, #4]
 801273a:	4618      	mov	r0, r3
 801273c:	f7ff ff94 	bl	8012668 <SPI_RxBytePtr>
        SPI_RxBytePtr(buff++);
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	1c5a      	adds	r2, r3, #1
 8012744:	607a      	str	r2, [r7, #4]
 8012746:	4618      	mov	r0, r3
 8012748:	f7ff ff8e 	bl	8012668 <SPI_RxBytePtr>
    } while(btr -= 2);
 801274c:	683b      	ldr	r3, [r7, #0]
 801274e:	3b02      	subs	r3, #2
 8012750:	603b      	str	r3, [r7, #0]
 8012752:	683b      	ldr	r3, [r7, #0]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d1ed      	bne.n	8012734 <SD_RxDataBlock+0x30>

    SPI_RxByte(); // Discard CRC
 8012758:	f7ff ff68 	bl	801262c <SPI_RxByte>
    SPI_RxByte();
 801275c:	f7ff ff66 	bl	801262c <SPI_RxByte>
    return TRUE;
 8012760:	2301      	movs	r3, #1
}
 8012762:	4618      	mov	r0, r3
 8012764:	3710      	adds	r7, #16
 8012766:	46bd      	mov	sp, r7
 8012768:	bd80      	pop	{r7, pc}

0801276a <SD_TxDataBlock>:

static bool SD_TxDataBlock(const BYTE *buff, BYTE token) {
 801276a:	b580      	push	{r7, lr}
 801276c:	b084      	sub	sp, #16
 801276e:	af00      	add	r7, sp, #0
 8012770:	6078      	str	r0, [r7, #4]
 8012772:	460b      	mov	r3, r1
 8012774:	70fb      	strb	r3, [r7, #3]
    BYTE resp;
    BYTE wc;

    if(SD_ReadyWait() != 0xFF) return FALSE;
 8012776:	f7ff ff85 	bl	8012684 <SD_ReadyWait>
 801277a:	4603      	mov	r3, r0
 801277c:	2bff      	cmp	r3, #255	@ 0xff
 801277e:	d001      	beq.n	8012784 <SD_TxDataBlock+0x1a>
 8012780:	2300      	movs	r3, #0
 8012782:	e02e      	b.n	80127e2 <SD_TxDataBlock+0x78>

    SPI_TxByte(token); // Send token
 8012784:	78fb      	ldrb	r3, [r7, #3]
 8012786:	4618      	mov	r0, r3
 8012788:	f7ff ff36 	bl	80125f8 <SPI_TxByte>
    if(token != 0xFD) { // Send data if token is other than StopTran
 801278c:	78fb      	ldrb	r3, [r7, #3]
 801278e:	2bfd      	cmp	r3, #253	@ 0xfd
 8012790:	d026      	beq.n	80127e0 <SD_TxDataBlock+0x76>
        wc = 0;
 8012792:	2300      	movs	r3, #0
 8012794:	73fb      	strb	r3, [r7, #15]
        do {
            SPI_TxByte(*buff++);
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	1c5a      	adds	r2, r3, #1
 801279a:	607a      	str	r2, [r7, #4]
 801279c:	781b      	ldrb	r3, [r3, #0]
 801279e:	4618      	mov	r0, r3
 80127a0:	f7ff ff2a 	bl	80125f8 <SPI_TxByte>
            SPI_TxByte(*buff++);
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	1c5a      	adds	r2, r3, #1
 80127a8:	607a      	str	r2, [r7, #4]
 80127aa:	781b      	ldrb	r3, [r3, #0]
 80127ac:	4618      	mov	r0, r3
 80127ae:	f7ff ff23 	bl	80125f8 <SPI_TxByte>
        } while(--wc);
 80127b2:	7bfb      	ldrb	r3, [r7, #15]
 80127b4:	3b01      	subs	r3, #1
 80127b6:	73fb      	strb	r3, [r7, #15]
 80127b8:	7bfb      	ldrb	r3, [r7, #15]
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d1eb      	bne.n	8012796 <SD_TxDataBlock+0x2c>

        SPI_TxByte(0xFF); // CRC
 80127be:	20ff      	movs	r0, #255	@ 0xff
 80127c0:	f7ff ff1a 	bl	80125f8 <SPI_TxByte>
        SPI_TxByte(0xFF);
 80127c4:	20ff      	movs	r0, #255	@ 0xff
 80127c6:	f7ff ff17 	bl	80125f8 <SPI_TxByte>

        resp = SPI_RxByte(); // Receive data resp
 80127ca:	f7ff ff2f 	bl	801262c <SPI_RxByte>
 80127ce:	4603      	mov	r3, r0
 80127d0:	73bb      	strb	r3, [r7, #14]
        if((resp & 0x1F) != 0x05) // Function fails if the data packet was not accepted
 80127d2:	7bbb      	ldrb	r3, [r7, #14]
 80127d4:	f003 031f 	and.w	r3, r3, #31
 80127d8:	2b05      	cmp	r3, #5
 80127da:	d001      	beq.n	80127e0 <SD_TxDataBlock+0x76>
            return FALSE;
 80127dc:	2300      	movs	r3, #0
 80127de:	e000      	b.n	80127e2 <SD_TxDataBlock+0x78>
    }
    return TRUE;
 80127e0:	2301      	movs	r3, #1
}
 80127e2:	4618      	mov	r0, r3
 80127e4:	3710      	adds	r7, #16
 80127e6:	46bd      	mov	sp, r7
 80127e8:	bd80      	pop	{r7, pc}

080127ea <SD_SendCmd>:

static BYTE SD_SendCmd(BYTE cmd, DWORD arg) {
 80127ea:	b580      	push	{r7, lr}
 80127ec:	b084      	sub	sp, #16
 80127ee:	af00      	add	r7, sp, #0
 80127f0:	4603      	mov	r3, r0
 80127f2:	6039      	str	r1, [r7, #0]
 80127f4:	71fb      	strb	r3, [r7, #7]
    BYTE n, res;

    if(cmd & 0x80) { // Send a CMD55 prior to ACMD<n>
 80127f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	da0e      	bge.n	801281c <SD_SendCmd+0x32>
        cmd &= 0x7F;
 80127fe:	79fb      	ldrb	r3, [r7, #7]
 8012800:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012804:	71fb      	strb	r3, [r7, #7]
        res = SD_SendCmd(CMD55, 0);
 8012806:	2100      	movs	r1, #0
 8012808:	2037      	movs	r0, #55	@ 0x37
 801280a:	f7ff ffee 	bl	80127ea <SD_SendCmd>
 801280e:	4603      	mov	r3, r0
 8012810:	73bb      	strb	r3, [r7, #14]
        if(res > 1) return res;
 8012812:	7bbb      	ldrb	r3, [r7, #14]
 8012814:	2b01      	cmp	r3, #1
 8012816:	d901      	bls.n	801281c <SD_SendCmd+0x32>
 8012818:	7bbb      	ldrb	r3, [r7, #14]
 801281a:	e051      	b.n	80128c0 <SD_SendCmd+0xd6>
    }

    // Select the card and wait for ready except to stop multiple block read
    if(cmd != CMD12) {
 801281c:	79fb      	ldrb	r3, [r7, #7]
 801281e:	2b0c      	cmp	r3, #12
 8012820:	d00a      	beq.n	8012838 <SD_SendCmd+0x4e>
        DESELECT();
 8012822:	f7ff fedd 	bl	80125e0 <DESELECT>
        SELECT();
 8012826:	f7ff fecf 	bl	80125c8 <SELECT>
        if(SD_ReadyWait() != 0xFF) return 0xFF;
 801282a:	f7ff ff2b 	bl	8012684 <SD_ReadyWait>
 801282e:	4603      	mov	r3, r0
 8012830:	2bff      	cmp	r3, #255	@ 0xff
 8012832:	d001      	beq.n	8012838 <SD_SendCmd+0x4e>
 8012834:	23ff      	movs	r3, #255	@ 0xff
 8012836:	e043      	b.n	80128c0 <SD_SendCmd+0xd6>
    }

    // Send command packet
    SPI_TxByte(0x40 | cmd);         // Start + command index
 8012838:	79fb      	ldrb	r3, [r7, #7]
 801283a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801283e:	b2db      	uxtb	r3, r3
 8012840:	4618      	mov	r0, r3
 8012842:	f7ff fed9 	bl	80125f8 <SPI_TxByte>
    SPI_TxByte((BYTE)(arg >> 24));  // Argument[31..24]
 8012846:	683b      	ldr	r3, [r7, #0]
 8012848:	0e1b      	lsrs	r3, r3, #24
 801284a:	b2db      	uxtb	r3, r3
 801284c:	4618      	mov	r0, r3
 801284e:	f7ff fed3 	bl	80125f8 <SPI_TxByte>
    SPI_TxByte((BYTE)(arg >> 16));  // Argument[23..16]
 8012852:	683b      	ldr	r3, [r7, #0]
 8012854:	0c1b      	lsrs	r3, r3, #16
 8012856:	b2db      	uxtb	r3, r3
 8012858:	4618      	mov	r0, r3
 801285a:	f7ff fecd 	bl	80125f8 <SPI_TxByte>
    SPI_TxByte((BYTE)(arg >> 8));   // Argument[15..8]
 801285e:	683b      	ldr	r3, [r7, #0]
 8012860:	0a1b      	lsrs	r3, r3, #8
 8012862:	b2db      	uxtb	r3, r3
 8012864:	4618      	mov	r0, r3
 8012866:	f7ff fec7 	bl	80125f8 <SPI_TxByte>
    SPI_TxByte((BYTE)arg);          // Argument[7..0]
 801286a:	683b      	ldr	r3, [r7, #0]
 801286c:	b2db      	uxtb	r3, r3
 801286e:	4618      	mov	r0, r3
 8012870:	f7ff fec2 	bl	80125f8 <SPI_TxByte>

    n = 0x01; // Dummy CRC + Stop
 8012874:	2301      	movs	r3, #1
 8012876:	73fb      	strb	r3, [r7, #15]
    if(cmd == CMD0) n = 0x95; // Valid CRC for CMD0(0)
 8012878:	79fb      	ldrb	r3, [r7, #7]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d101      	bne.n	8012882 <SD_SendCmd+0x98>
 801287e:	2395      	movs	r3, #149	@ 0x95
 8012880:	73fb      	strb	r3, [r7, #15]
    if(cmd == CMD8) n = 0x87; // Valid CRC for CMD8(0x1AA)
 8012882:	79fb      	ldrb	r3, [r7, #7]
 8012884:	2b08      	cmp	r3, #8
 8012886:	d101      	bne.n	801288c <SD_SendCmd+0xa2>
 8012888:	2387      	movs	r3, #135	@ 0x87
 801288a:	73fb      	strb	r3, [r7, #15]
    SPI_TxByte(n);
 801288c:	7bfb      	ldrb	r3, [r7, #15]
 801288e:	4618      	mov	r0, r3
 8012890:	f7ff feb2 	bl	80125f8 <SPI_TxByte>

    // Receive command resp
    if(cmd == CMD12) SPI_RxByte(); // Discard following one byte when CMD12
 8012894:	79fb      	ldrb	r3, [r7, #7]
 8012896:	2b0c      	cmp	r3, #12
 8012898:	d101      	bne.n	801289e <SD_SendCmd+0xb4>
 801289a:	f7ff fec7 	bl	801262c <SPI_RxByte>

    n = 10; // Wait for response (10 bytes max)
 801289e:	230a      	movs	r3, #10
 80128a0:	73fb      	strb	r3, [r7, #15]
    do {
        res = SPI_RxByte();
 80128a2:	f7ff fec3 	bl	801262c <SPI_RxByte>
 80128a6:	4603      	mov	r3, r0
 80128a8:	73bb      	strb	r3, [r7, #14]
    } while((res & 0x80) && --n);
 80128aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	da05      	bge.n	80128be <SD_SendCmd+0xd4>
 80128b2:	7bfb      	ldrb	r3, [r7, #15]
 80128b4:	3b01      	subs	r3, #1
 80128b6:	73fb      	strb	r3, [r7, #15]
 80128b8:	7bfb      	ldrb	r3, [r7, #15]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d1f1      	bne.n	80128a2 <SD_SendCmd+0xb8>

    return res;
 80128be:	7bbb      	ldrb	r3, [r7, #14]
}
 80128c0:	4618      	mov	r0, r3
 80128c2:	3710      	adds	r7, #16
 80128c4:	46bd      	mov	sp, r7
 80128c6:	bd80      	pop	{r7, pc}

080128c8 <SD_disk_initialize>:

   Public Functions

---------------------------------------------------------------------------*/

DSTATUS SD_disk_initialize(BYTE pdrv) {
 80128c8:	b590      	push	{r4, r7, lr}
 80128ca:	b087      	sub	sp, #28
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	4603      	mov	r3, r0
 80128d0:	71fb      	strb	r3, [r7, #7]
    BYTE n, cmd, ty, ocr[4];

    if(pdrv) return STA_NOINIT; // Supports only drive 0
 80128d2:	79fb      	ldrb	r3, [r7, #7]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d001      	beq.n	80128dc <SD_disk_initialize+0x14>
 80128d8:	2301      	movs	r3, #1
 80128da:	e0a9      	b.n	8012a30 <SD_disk_initialize+0x168>

    SD_PowerOn(); // Initialize SPI
 80128dc:	f7ff feeb 	bl	80126b6 <SD_PowerOn>

    SELECT();
 80128e0:	f7ff fe72 	bl	80125c8 <SELECT>
    ty = 0;
 80128e4:	2300      	movs	r3, #0
 80128e6:	757b      	strb	r3, [r7, #21]
    if(SD_SendCmd(CMD0, 0) == 1) { // Put the card SPI/Idle state
 80128e8:	2100      	movs	r1, #0
 80128ea:	2000      	movs	r0, #0
 80128ec:	f7ff ff7d 	bl	80127ea <SD_SendCmd>
 80128f0:	4603      	mov	r3, r0
 80128f2:	2b01      	cmp	r3, #1
 80128f4:	f040 8084 	bne.w	8012a00 <SD_disk_initialize+0x138>
        UINT timeout = 1000; // Initialization timeout = 1 sec
 80128f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80128fc:	613b      	str	r3, [r7, #16]
        if(SD_SendCmd(CMD8, 0x1AA) == 1) { // SDv2?
 80128fe:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8012902:	2008      	movs	r0, #8
 8012904:	f7ff ff71 	bl	80127ea <SD_SendCmd>
 8012908:	4603      	mov	r3, r0
 801290a:	2b01      	cmp	r3, #1
 801290c:	d14d      	bne.n	80129aa <SD_disk_initialize+0xe2>
            // Get 32 bit return value of R7 resp
            for(n = 0; n < 4; n++) ocr[n] = SPI_RxByte();
 801290e:	2300      	movs	r3, #0
 8012910:	75fb      	strb	r3, [r7, #23]
 8012912:	e00c      	b.n	801292e <SD_disk_initialize+0x66>
 8012914:	7dfc      	ldrb	r4, [r7, #23]
 8012916:	f7ff fe89 	bl	801262c <SPI_RxByte>
 801291a:	4603      	mov	r3, r0
 801291c:	461a      	mov	r2, r3
 801291e:	f104 0318 	add.w	r3, r4, #24
 8012922:	443b      	add	r3, r7
 8012924:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8012928:	7dfb      	ldrb	r3, [r7, #23]
 801292a:	3301      	adds	r3, #1
 801292c:	75fb      	strb	r3, [r7, #23]
 801292e:	7dfb      	ldrb	r3, [r7, #23]
 8012930:	2b03      	cmp	r3, #3
 8012932:	d9ef      	bls.n	8012914 <SD_disk_initialize+0x4c>
            if(ocr[2] == 0x01 && ocr[3] == 0xAA) { // Does the card support vcc of 2.7-3.6V?
 8012934:	7bbb      	ldrb	r3, [r7, #14]
 8012936:	2b01      	cmp	r3, #1
 8012938:	d162      	bne.n	8012a00 <SD_disk_initialize+0x138>
 801293a:	7bfb      	ldrb	r3, [r7, #15]
 801293c:	2baa      	cmp	r3, #170	@ 0xaa
 801293e:	d15f      	bne.n	8012a00 <SD_disk_initialize+0x138>
                // Wait for end of initialization with ACMD41(HCS)
                while(timeout-- && SD_SendCmd(ACMD41, 1UL << 30));
 8012940:	bf00      	nop
 8012942:	693b      	ldr	r3, [r7, #16]
 8012944:	1e5a      	subs	r2, r3, #1
 8012946:	613a      	str	r2, [r7, #16]
 8012948:	2b00      	cmp	r3, #0
 801294a:	d007      	beq.n	801295c <SD_disk_initialize+0x94>
 801294c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8012950:	20a9      	movs	r0, #169	@ 0xa9
 8012952:	f7ff ff4a 	bl	80127ea <SD_SendCmd>
 8012956:	4603      	mov	r3, r0
 8012958:	2b00      	cmp	r3, #0
 801295a:	d1f2      	bne.n	8012942 <SD_disk_initialize+0x7a>
                if(timeout && SD_SendCmd(CMD58, 0) == 0) { // Check CCS bit in the OCR
 801295c:	693b      	ldr	r3, [r7, #16]
 801295e:	2b00      	cmp	r3, #0
 8012960:	d04e      	beq.n	8012a00 <SD_disk_initialize+0x138>
 8012962:	2100      	movs	r1, #0
 8012964:	203a      	movs	r0, #58	@ 0x3a
 8012966:	f7ff ff40 	bl	80127ea <SD_SendCmd>
 801296a:	4603      	mov	r3, r0
 801296c:	2b00      	cmp	r3, #0
 801296e:	d147      	bne.n	8012a00 <SD_disk_initialize+0x138>
                    for(n = 0; n < 4; n++) ocr[n] = SPI_RxByte();
 8012970:	2300      	movs	r3, #0
 8012972:	75fb      	strb	r3, [r7, #23]
 8012974:	e00c      	b.n	8012990 <SD_disk_initialize+0xc8>
 8012976:	7dfc      	ldrb	r4, [r7, #23]
 8012978:	f7ff fe58 	bl	801262c <SPI_RxByte>
 801297c:	4603      	mov	r3, r0
 801297e:	461a      	mov	r2, r3
 8012980:	f104 0318 	add.w	r3, r4, #24
 8012984:	443b      	add	r3, r7
 8012986:	f803 2c0c 	strb.w	r2, [r3, #-12]
 801298a:	7dfb      	ldrb	r3, [r7, #23]
 801298c:	3301      	adds	r3, #1
 801298e:	75fb      	strb	r3, [r7, #23]
 8012990:	7dfb      	ldrb	r3, [r7, #23]
 8012992:	2b03      	cmp	r3, #3
 8012994:	d9ef      	bls.n	8012976 <SD_disk_initialize+0xae>
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; // Card id SDv2
 8012996:	7b3b      	ldrb	r3, [r7, #12]
 8012998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801299c:	2b00      	cmp	r3, #0
 801299e:	d001      	beq.n	80129a4 <SD_disk_initialize+0xdc>
 80129a0:	230c      	movs	r3, #12
 80129a2:	e000      	b.n	80129a6 <SD_disk_initialize+0xde>
 80129a4:	2304      	movs	r3, #4
 80129a6:	757b      	strb	r3, [r7, #21]
 80129a8:	e02a      	b.n	8012a00 <SD_disk_initialize+0x138>
                }
            }
        } else { // Not SDv2 card
            if(SD_SendCmd(ACMD41, 0) <= 1) { // SDv1 or MMC?
 80129aa:	2100      	movs	r1, #0
 80129ac:	20a9      	movs	r0, #169	@ 0xa9
 80129ae:	f7ff ff1c 	bl	80127ea <SD_SendCmd>
 80129b2:	4603      	mov	r3, r0
 80129b4:	2b01      	cmp	r3, #1
 80129b6:	d804      	bhi.n	80129c2 <SD_disk_initialize+0xfa>
                ty = CT_SD1; cmd = ACMD41; // SDv1 (ACMD41(0))
 80129b8:	2302      	movs	r3, #2
 80129ba:	757b      	strb	r3, [r7, #21]
 80129bc:	23a9      	movs	r3, #169	@ 0xa9
 80129be:	75bb      	strb	r3, [r7, #22]
 80129c0:	e003      	b.n	80129ca <SD_disk_initialize+0x102>
            } else {
                ty = CT_MMC; cmd = CMD1; // MMCv3 (CMD1(0))
 80129c2:	2301      	movs	r3, #1
 80129c4:	757b      	strb	r3, [r7, #21]
 80129c6:	2301      	movs	r3, #1
 80129c8:	75bb      	strb	r3, [r7, #22]
            }
            // Wait for end of initialization
            while(timeout-- && SD_SendCmd(cmd, 0));
 80129ca:	bf00      	nop
 80129cc:	693b      	ldr	r3, [r7, #16]
 80129ce:	1e5a      	subs	r2, r3, #1
 80129d0:	613a      	str	r2, [r7, #16]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d007      	beq.n	80129e6 <SD_disk_initialize+0x11e>
 80129d6:	7dbb      	ldrb	r3, [r7, #22]
 80129d8:	2100      	movs	r1, #0
 80129da:	4618      	mov	r0, r3
 80129dc:	f7ff ff05 	bl	80127ea <SD_SendCmd>
 80129e0:	4603      	mov	r3, r0
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d1f2      	bne.n	80129cc <SD_disk_initialize+0x104>
            if(!timeout || SD_SendCmd(CMD16, 512) != 0) // Set block length: 512
 80129e6:	693b      	ldr	r3, [r7, #16]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d007      	beq.n	80129fc <SD_disk_initialize+0x134>
 80129ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80129f0:	2010      	movs	r0, #16
 80129f2:	f7ff fefa 	bl	80127ea <SD_SendCmd>
 80129f6:	4603      	mov	r3, r0
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d001      	beq.n	8012a00 <SD_disk_initialize+0x138>
                ty = 0;
 80129fc:	2300      	movs	r3, #0
 80129fe:	757b      	strb	r3, [r7, #21]
        }
    }
    CardType = ty; // Card type
 8012a00:	7d7b      	ldrb	r3, [r7, #21]
 8012a02:	4a0d      	ldr	r2, [pc, #52]	@ (8012a38 <SD_disk_initialize+0x170>)
 8012a04:	6013      	str	r3, [r2, #0]
    DESELECT();
 8012a06:	f7ff fdeb 	bl	80125e0 <DESELECT>
    SPI_RxByte(); // Idle (Release DO)
 8012a0a:	f7ff fe0f 	bl	801262c <SPI_RxByte>

    if(ty) { // OK
 8012a0e:	7d7b      	ldrb	r3, [r7, #21]
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d008      	beq.n	8012a26 <SD_disk_initialize+0x15e>
        Stat &= ~STA_NOINIT; // Clear STA_NOINIT flag
 8012a14:	4b09      	ldr	r3, [pc, #36]	@ (8012a3c <SD_disk_initialize+0x174>)
 8012a16:	781b      	ldrb	r3, [r3, #0]
 8012a18:	b2db      	uxtb	r3, r3
 8012a1a:	f023 0301 	bic.w	r3, r3, #1
 8012a1e:	b2da      	uxtb	r2, r3
 8012a20:	4b06      	ldr	r3, [pc, #24]	@ (8012a3c <SD_disk_initialize+0x174>)
 8012a22:	701a      	strb	r2, [r3, #0]
 8012a24:	e001      	b.n	8012a2a <SD_disk_initialize+0x162>
    } else { // Failed
        SD_PowerOff();
 8012a26:	f7ff fe60 	bl	80126ea <SD_PowerOff>
    }

    return Stat;
 8012a2a:	4b04      	ldr	r3, [pc, #16]	@ (8012a3c <SD_disk_initialize+0x174>)
 8012a2c:	781b      	ldrb	r3, [r3, #0]
 8012a2e:	b2db      	uxtb	r3, r3
}
 8012a30:	4618      	mov	r0, r3
 8012a32:	371c      	adds	r7, #28
 8012a34:	46bd      	mov	sp, r7
 8012a36:	bd90      	pop	{r4, r7, pc}
 8012a38:	24002dd4 	.word	0x24002dd4
 8012a3c:	240000a0 	.word	0x240000a0

08012a40 <SD_disk_status>:

DSTATUS SD_disk_status(BYTE pdrv) {
 8012a40:	b480      	push	{r7}
 8012a42:	b083      	sub	sp, #12
 8012a44:	af00      	add	r7, sp, #0
 8012a46:	4603      	mov	r3, r0
 8012a48:	71fb      	strb	r3, [r7, #7]
    if(pdrv) return STA_NOINIT; // Supports only drive 0
 8012a4a:	79fb      	ldrb	r3, [r7, #7]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d001      	beq.n	8012a54 <SD_disk_status+0x14>
 8012a50:	2301      	movs	r3, #1
 8012a52:	e002      	b.n	8012a5a <SD_disk_status+0x1a>
    return Stat; // Return disk status
 8012a54:	4b04      	ldr	r3, [pc, #16]	@ (8012a68 <SD_disk_status+0x28>)
 8012a56:	781b      	ldrb	r3, [r3, #0]
 8012a58:	b2db      	uxtb	r3, r3
}
 8012a5a:	4618      	mov	r0, r3
 8012a5c:	370c      	adds	r7, #12
 8012a5e:	46bd      	mov	sp, r7
 8012a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a64:	4770      	bx	lr
 8012a66:	bf00      	nop
 8012a68:	240000a0 	.word	0x240000a0

08012a6c <SD_disk_read>:

DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) {
 8012a6c:	b580      	push	{r7, lr}
 8012a6e:	b084      	sub	sp, #16
 8012a70:	af00      	add	r7, sp, #0
 8012a72:	60b9      	str	r1, [r7, #8]
 8012a74:	607a      	str	r2, [r7, #4]
 8012a76:	603b      	str	r3, [r7, #0]
 8012a78:	4603      	mov	r3, r0
 8012a7a:	73fb      	strb	r3, [r7, #15]
    if(pdrv || !count) return RES_PARERR; // Check parameter
 8012a7c:	7bfb      	ldrb	r3, [r7, #15]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d102      	bne.n	8012a88 <SD_disk_read+0x1c>
 8012a82:	683b      	ldr	r3, [r7, #0]
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d101      	bne.n	8012a8c <SD_disk_read+0x20>
 8012a88:	2304      	movs	r3, #4
 8012a8a:	e051      	b.n	8012b30 <SD_disk_read+0xc4>
    if(Stat & STA_NOINIT) return RES_NOTRDY; // Check if drive is ready
 8012a8c:	4b2a      	ldr	r3, [pc, #168]	@ (8012b38 <SD_disk_read+0xcc>)
 8012a8e:	781b      	ldrb	r3, [r3, #0]
 8012a90:	b2db      	uxtb	r3, r3
 8012a92:	f003 0301 	and.w	r3, r3, #1
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d001      	beq.n	8012a9e <SD_disk_read+0x32>
 8012a9a:	2303      	movs	r3, #3
 8012a9c:	e048      	b.n	8012b30 <SD_disk_read+0xc4>

    if(!(CardType & CT_BLOCK)) sector *= 512; // LBA ot BA conversion (byte addressing cards)
 8012a9e:	4b27      	ldr	r3, [pc, #156]	@ (8012b3c <SD_disk_read+0xd0>)
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	f003 0308 	and.w	r3, r3, #8
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d102      	bne.n	8012ab0 <SD_disk_read+0x44>
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	025b      	lsls	r3, r3, #9
 8012aae:	607b      	str	r3, [r7, #4]

    SELECT();
 8012ab0:	f7ff fd8a 	bl	80125c8 <SELECT>

    if(count == 1) { // Single sector read
 8012ab4:	683b      	ldr	r3, [r7, #0]
 8012ab6:	2b01      	cmp	r3, #1
 8012ab8:	d111      	bne.n	8012ade <SD_disk_read+0x72>
        if((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) {
 8012aba:	6879      	ldr	r1, [r7, #4]
 8012abc:	2011      	movs	r0, #17
 8012abe:	f7ff fe94 	bl	80127ea <SD_SendCmd>
 8012ac2:	4603      	mov	r3, r0
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d129      	bne.n	8012b1c <SD_disk_read+0xb0>
 8012ac8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8012acc:	68b8      	ldr	r0, [r7, #8]
 8012ace:	f7ff fe19 	bl	8012704 <SD_RxDataBlock>
 8012ad2:	4603      	mov	r3, r0
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d021      	beq.n	8012b1c <SD_disk_read+0xb0>
            count = 0;
 8012ad8:	2300      	movs	r3, #0
 8012ada:	603b      	str	r3, [r7, #0]
 8012adc:	e01e      	b.n	8012b1c <SD_disk_read+0xb0>
        }
    } else { // Multiple sector read
        if(SD_SendCmd(CMD18, sector) == 0) {
 8012ade:	6879      	ldr	r1, [r7, #4]
 8012ae0:	2012      	movs	r0, #18
 8012ae2:	f7ff fe82 	bl	80127ea <SD_SendCmd>
 8012ae6:	4603      	mov	r3, r0
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d117      	bne.n	8012b1c <SD_disk_read+0xb0>
            do {
                if(!SD_RxDataBlock(buff, 512)) break;
 8012aec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8012af0:	68b8      	ldr	r0, [r7, #8]
 8012af2:	f7ff fe07 	bl	8012704 <SD_RxDataBlock>
 8012af6:	4603      	mov	r3, r0
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d00a      	beq.n	8012b12 <SD_disk_read+0xa6>
                buff += 512;
 8012afc:	68bb      	ldr	r3, [r7, #8]
 8012afe:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8012b02:	60bb      	str	r3, [r7, #8]
            } while(--count);
 8012b04:	683b      	ldr	r3, [r7, #0]
 8012b06:	3b01      	subs	r3, #1
 8012b08:	603b      	str	r3, [r7, #0]
 8012b0a:	683b      	ldr	r3, [r7, #0]
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d1ed      	bne.n	8012aec <SD_disk_read+0x80>
 8012b10:	e000      	b.n	8012b14 <SD_disk_read+0xa8>
                if(!SD_RxDataBlock(buff, 512)) break;
 8012b12:	bf00      	nop
            SD_SendCmd(CMD12, 0); // STOP_TRANSMISSION
 8012b14:	2100      	movs	r1, #0
 8012b16:	200c      	movs	r0, #12
 8012b18:	f7ff fe67 	bl	80127ea <SD_SendCmd>
        }
    }

    DESELECT();
 8012b1c:	f7ff fd60 	bl	80125e0 <DESELECT>
    SPI_RxByte(); // Idle (Release DO)
 8012b20:	f7ff fd84 	bl	801262c <SPI_RxByte>

    return count ? RES_ERROR : RES_OK; // Return result
 8012b24:	683b      	ldr	r3, [r7, #0]
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	bf14      	ite	ne
 8012b2a:	2301      	movne	r3, #1
 8012b2c:	2300      	moveq	r3, #0
 8012b2e:	b2db      	uxtb	r3, r3
}
 8012b30:	4618      	mov	r0, r3
 8012b32:	3710      	adds	r7, #16
 8012b34:	46bd      	mov	sp, r7
 8012b36:	bd80      	pop	{r7, pc}
 8012b38:	240000a0 	.word	0x240000a0
 8012b3c:	24002dd4 	.word	0x24002dd4

08012b40 <SD_disk_write>:

DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) {
 8012b40:	b580      	push	{r7, lr}
 8012b42:	b084      	sub	sp, #16
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	60b9      	str	r1, [r7, #8]
 8012b48:	607a      	str	r2, [r7, #4]
 8012b4a:	603b      	str	r3, [r7, #0]
 8012b4c:	4603      	mov	r3, r0
 8012b4e:	73fb      	strb	r3, [r7, #15]
    if(pdrv || !count) return RES_PARERR; // Check parameter
 8012b50:	7bfb      	ldrb	r3, [r7, #15]
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d102      	bne.n	8012b5c <SD_disk_write+0x1c>
 8012b56:	683b      	ldr	r3, [r7, #0]
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d101      	bne.n	8012b60 <SD_disk_write+0x20>
 8012b5c:	2304      	movs	r3, #4
 8012b5e:	e067      	b.n	8012c30 <SD_disk_write+0xf0>
    if(Stat & STA_NOINIT) return RES_NOTRDY; // Check drive status
 8012b60:	4b35      	ldr	r3, [pc, #212]	@ (8012c38 <SD_disk_write+0xf8>)
 8012b62:	781b      	ldrb	r3, [r3, #0]
 8012b64:	b2db      	uxtb	r3, r3
 8012b66:	f003 0301 	and.w	r3, r3, #1
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d001      	beq.n	8012b72 <SD_disk_write+0x32>
 8012b6e:	2303      	movs	r3, #3
 8012b70:	e05e      	b.n	8012c30 <SD_disk_write+0xf0>
    if(Stat & STA_PROTECT) return RES_WRPRT; // Check write protect
 8012b72:	4b31      	ldr	r3, [pc, #196]	@ (8012c38 <SD_disk_write+0xf8>)
 8012b74:	781b      	ldrb	r3, [r3, #0]
 8012b76:	b2db      	uxtb	r3, r3
 8012b78:	f003 0304 	and.w	r3, r3, #4
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d001      	beq.n	8012b84 <SD_disk_write+0x44>
 8012b80:	2302      	movs	r3, #2
 8012b82:	e055      	b.n	8012c30 <SD_disk_write+0xf0>

    if(!(CardType & CT_BLOCK)) sector *= 512; // LBA ==> BA conversion (byte addressing cards)
 8012b84:	4b2d      	ldr	r3, [pc, #180]	@ (8012c3c <SD_disk_write+0xfc>)
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	f003 0308 	and.w	r3, r3, #8
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d102      	bne.n	8012b96 <SD_disk_write+0x56>
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	025b      	lsls	r3, r3, #9
 8012b94:	607b      	str	r3, [r7, #4]

    SELECT();
 8012b96:	f7ff fd17 	bl	80125c8 <SELECT>

    if(count == 1) { // Single sector write
 8012b9a:	683b      	ldr	r3, [r7, #0]
 8012b9c:	2b01      	cmp	r3, #1
 8012b9e:	d110      	bne.n	8012bc2 <SD_disk_write+0x82>
        if((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE)) {
 8012ba0:	6879      	ldr	r1, [r7, #4]
 8012ba2:	2018      	movs	r0, #24
 8012ba4:	f7ff fe21 	bl	80127ea <SD_SendCmd>
 8012ba8:	4603      	mov	r3, r0
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d136      	bne.n	8012c1c <SD_disk_write+0xdc>
 8012bae:	21fe      	movs	r1, #254	@ 0xfe
 8012bb0:	68b8      	ldr	r0, [r7, #8]
 8012bb2:	f7ff fdda 	bl	801276a <SD_TxDataBlock>
 8012bb6:	4603      	mov	r3, r0
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d02f      	beq.n	8012c1c <SD_disk_write+0xdc>
            count = 0;
 8012bbc:	2300      	movs	r3, #0
 8012bbe:	603b      	str	r3, [r7, #0]
 8012bc0:	e02c      	b.n	8012c1c <SD_disk_write+0xdc>
        }
    } else { // Multiple sector write
        if(CardType & CT_SDC) SD_SendCmd(ACMD23, count); // Predefine number of sectors
 8012bc2:	4b1e      	ldr	r3, [pc, #120]	@ (8012c3c <SD_disk_write+0xfc>)
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	f003 0306 	and.w	r3, r3, #6
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d003      	beq.n	8012bd6 <SD_disk_write+0x96>
 8012bce:	6839      	ldr	r1, [r7, #0]
 8012bd0:	2097      	movs	r0, #151	@ 0x97
 8012bd2:	f7ff fe0a 	bl	80127ea <SD_SendCmd>
        if(SD_SendCmd(CMD25, sector) == 0) {
 8012bd6:	6879      	ldr	r1, [r7, #4]
 8012bd8:	2019      	movs	r0, #25
 8012bda:	f7ff fe06 	bl	80127ea <SD_SendCmd>
 8012bde:	4603      	mov	r3, r0
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d11b      	bne.n	8012c1c <SD_disk_write+0xdc>
            do {
                if(!SD_TxDataBlock(buff, 0xFC)) break;
 8012be4:	21fc      	movs	r1, #252	@ 0xfc
 8012be6:	68b8      	ldr	r0, [r7, #8]
 8012be8:	f7ff fdbf 	bl	801276a <SD_TxDataBlock>
 8012bec:	4603      	mov	r3, r0
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d00a      	beq.n	8012c08 <SD_disk_write+0xc8>
                buff += 512;
 8012bf2:	68bb      	ldr	r3, [r7, #8]
 8012bf4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8012bf8:	60bb      	str	r3, [r7, #8]
            } while(--count);
 8012bfa:	683b      	ldr	r3, [r7, #0]
 8012bfc:	3b01      	subs	r3, #1
 8012bfe:	603b      	str	r3, [r7, #0]
 8012c00:	683b      	ldr	r3, [r7, #0]
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d1ee      	bne.n	8012be4 <SD_disk_write+0xa4>
 8012c06:	e000      	b.n	8012c0a <SD_disk_write+0xca>
                if(!SD_TxDataBlock(buff, 0xFC)) break;
 8012c08:	bf00      	nop
            if(!SD_TxDataBlock(0, 0xFD)) count = 1; // STOP_TRAN token
 8012c0a:	21fd      	movs	r1, #253	@ 0xfd
 8012c0c:	2000      	movs	r0, #0
 8012c0e:	f7ff fdac 	bl	801276a <SD_TxDataBlock>
 8012c12:	4603      	mov	r3, r0
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d101      	bne.n	8012c1c <SD_disk_write+0xdc>
 8012c18:	2301      	movs	r3, #1
 8012c1a:	603b      	str	r3, [r7, #0]
        }
    }

    DESELECT();
 8012c1c:	f7ff fce0 	bl	80125e0 <DESELECT>
    SPI_RxByte(); // Idle (Release DO)
 8012c20:	f7ff fd04 	bl	801262c <SPI_RxByte>

    return count ? RES_ERROR : RES_OK; // Return result
 8012c24:	683b      	ldr	r3, [r7, #0]
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	bf14      	ite	ne
 8012c2a:	2301      	movne	r3, #1
 8012c2c:	2300      	moveq	r3, #0
 8012c2e:	b2db      	uxtb	r3, r3
}
 8012c30:	4618      	mov	r0, r3
 8012c32:	3710      	adds	r7, #16
 8012c34:	46bd      	mov	sp, r7
 8012c36:	bd80      	pop	{r7, pc}
 8012c38:	240000a0 	.word	0x240000a0
 8012c3c:	24002dd4 	.word	0x24002dd4

08012c40 <SD_disk_ioctl>:

DRESULT SD_disk_ioctl(BYTE pdrv, BYTE cmd, void* buff) {
 8012c40:	b580      	push	{r7, lr}
 8012c42:	b088      	sub	sp, #32
 8012c44:	af00      	add	r7, sp, #0
 8012c46:	4603      	mov	r3, r0
 8012c48:	603a      	str	r2, [r7, #0]
 8012c4a:	71fb      	strb	r3, [r7, #7]
 8012c4c:	460b      	mov	r3, r1
 8012c4e:	71bb      	strb	r3, [r7, #6]
    DRESULT res;
    BYTE n, csd[16];
    DWORD *dp, st, ed, csize;

    if(pdrv) return RES_PARERR; // Check parameter
 8012c50:	79fb      	ldrb	r3, [r7, #7]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d001      	beq.n	8012c5a <SD_disk_ioctl+0x1a>
 8012c56:	2304      	movs	r3, #4
 8012c58:	e080      	b.n	8012d5c <SD_disk_ioctl+0x11c>
    if(Stat & STA_NOINIT) return RES_NOTRDY; // Check if drive is ready
 8012c5a:	4b42      	ldr	r3, [pc, #264]	@ (8012d64 <SD_disk_ioctl+0x124>)
 8012c5c:	781b      	ldrb	r3, [r3, #0]
 8012c5e:	b2db      	uxtb	r3, r3
 8012c60:	f003 0301 	and.w	r3, r3, #1
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d001      	beq.n	8012c6c <SD_disk_ioctl+0x2c>
 8012c68:	2303      	movs	r3, #3
 8012c6a:	e077      	b.n	8012d5c <SD_disk_ioctl+0x11c>

    SELECT();
 8012c6c:	f7ff fcac 	bl	80125c8 <SELECT>

    res = RES_ERROR;
 8012c70:	2301      	movs	r3, #1
 8012c72:	77fb      	strb	r3, [r7, #31]
    switch(cmd) {
 8012c74:	79bb      	ldrb	r3, [r7, #6]
 8012c76:	2b03      	cmp	r3, #3
 8012c78:	d05f      	beq.n	8012d3a <SD_disk_ioctl+0xfa>
 8012c7a:	2b03      	cmp	r3, #3
 8012c7c:	dc63      	bgt.n	8012d46 <SD_disk_ioctl+0x106>
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d002      	beq.n	8012c88 <SD_disk_ioctl+0x48>
 8012c82:	2b01      	cmp	r3, #1
 8012c84:	d008      	beq.n	8012c98 <SD_disk_ioctl+0x58>
 8012c86:	e05e      	b.n	8012d46 <SD_disk_ioctl+0x106>
        case CTRL_SYNC: // Wait for end of internal write process of the drive
            if(SD_ReadyWait() == 0xFF) res = RES_OK;
 8012c88:	f7ff fcfc 	bl	8012684 <SD_ReadyWait>
 8012c8c:	4603      	mov	r3, r0
 8012c8e:	2bff      	cmp	r3, #255	@ 0xff
 8012c90:	d15c      	bne.n	8012d4c <SD_disk_ioctl+0x10c>
 8012c92:	2300      	movs	r3, #0
 8012c94:	77fb      	strb	r3, [r7, #31]
            break;
 8012c96:	e059      	b.n	8012d4c <SD_disk_ioctl+0x10c>

        case GET_SECTOR_COUNT: // Get drive capacity in unit of sector (DWORD)
            if((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) {
 8012c98:	2100      	movs	r1, #0
 8012c9a:	2009      	movs	r0, #9
 8012c9c:	f7ff fda5 	bl	80127ea <SD_SendCmd>
 8012ca0:	4603      	mov	r3, r0
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d154      	bne.n	8012d50 <SD_disk_ioctl+0x110>
 8012ca6:	f107 0308 	add.w	r3, r7, #8
 8012caa:	2110      	movs	r1, #16
 8012cac:	4618      	mov	r0, r3
 8012cae:	f7ff fd29 	bl	8012704 <SD_RxDataBlock>
 8012cb2:	4603      	mov	r3, r0
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d04b      	beq.n	8012d50 <SD_disk_ioctl+0x110>
                if((csd[0] >> 6) == 1) { // SDC ver 2.00
 8012cb8:	7a3b      	ldrb	r3, [r7, #8]
 8012cba:	099b      	lsrs	r3, r3, #6
 8012cbc:	b2db      	uxtb	r3, r3
 8012cbe:	2b01      	cmp	r3, #1
 8012cc0:	d111      	bne.n	8012ce6 <SD_disk_ioctl+0xa6>
                    csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8012cc2:	7c7b      	ldrb	r3, [r7, #17]
 8012cc4:	461a      	mov	r2, r3
 8012cc6:	7c3b      	ldrb	r3, [r7, #16]
 8012cc8:	021b      	lsls	r3, r3, #8
 8012cca:	4413      	add	r3, r2
 8012ccc:	461a      	mov	r2, r3
 8012cce:	7bfb      	ldrb	r3, [r7, #15]
 8012cd0:	041b      	lsls	r3, r3, #16
 8012cd2:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8012cd6:	4413      	add	r3, r2
 8012cd8:	3301      	adds	r3, #1
 8012cda:	61bb      	str	r3, [r7, #24]
                    *(DWORD*)buff = csize << 10;
 8012cdc:	69bb      	ldr	r3, [r7, #24]
 8012cde:	029a      	lsls	r2, r3, #10
 8012ce0:	683b      	ldr	r3, [r7, #0]
 8012ce2:	601a      	str	r2, [r3, #0]
 8012ce4:	e026      	b.n	8012d34 <SD_disk_ioctl+0xf4>
                } else { // SDC ver 1.XX or MMC ver 3
                    n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8012ce6:	7b7b      	ldrb	r3, [r7, #13]
 8012ce8:	f003 030f 	and.w	r3, r3, #15
 8012cec:	b2da      	uxtb	r2, r3
 8012cee:	7cbb      	ldrb	r3, [r7, #18]
 8012cf0:	09db      	lsrs	r3, r3, #7
 8012cf2:	b2db      	uxtb	r3, r3
 8012cf4:	4413      	add	r3, r2
 8012cf6:	b2da      	uxtb	r2, r3
 8012cf8:	7c7b      	ldrb	r3, [r7, #17]
 8012cfa:	005b      	lsls	r3, r3, #1
 8012cfc:	b2db      	uxtb	r3, r3
 8012cfe:	f003 0306 	and.w	r3, r3, #6
 8012d02:	b2db      	uxtb	r3, r3
 8012d04:	4413      	add	r3, r2
 8012d06:	b2db      	uxtb	r3, r3
 8012d08:	3302      	adds	r3, #2
 8012d0a:	77bb      	strb	r3, [r7, #30]
                    csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8012d0c:	7c3b      	ldrb	r3, [r7, #16]
 8012d0e:	099b      	lsrs	r3, r3, #6
 8012d10:	b2db      	uxtb	r3, r3
 8012d12:	461a      	mov	r2, r3
 8012d14:	7bfb      	ldrb	r3, [r7, #15]
 8012d16:	009b      	lsls	r3, r3, #2
 8012d18:	441a      	add	r2, r3
 8012d1a:	7bbb      	ldrb	r3, [r7, #14]
 8012d1c:	029b      	lsls	r3, r3, #10
 8012d1e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8012d22:	4413      	add	r3, r2
 8012d24:	3301      	adds	r3, #1
 8012d26:	61bb      	str	r3, [r7, #24]
                    *(DWORD*)buff = csize << (n - 9);
 8012d28:	7fbb      	ldrb	r3, [r7, #30]
 8012d2a:	3b09      	subs	r3, #9
 8012d2c:	69ba      	ldr	r2, [r7, #24]
 8012d2e:	409a      	lsls	r2, r3
 8012d30:	683b      	ldr	r3, [r7, #0]
 8012d32:	601a      	str	r2, [r3, #0]
                }
                res = RES_OK;
 8012d34:	2300      	movs	r3, #0
 8012d36:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8012d38:	e00a      	b.n	8012d50 <SD_disk_ioctl+0x110>

        case GET_BLOCK_SIZE: // Get erase block size in unit of sector (DWORD)
            *(DWORD*)buff = 128; // 128 sectors
 8012d3a:	683b      	ldr	r3, [r7, #0]
 8012d3c:	2280      	movs	r2, #128	@ 0x80
 8012d3e:	601a      	str	r2, [r3, #0]
            res = RES_OK;
 8012d40:	2300      	movs	r3, #0
 8012d42:	77fb      	strb	r3, [r7, #31]
            break;
 8012d44:	e005      	b.n	8012d52 <SD_disk_ioctl+0x112>

        default:
            res = RES_PARERR;
 8012d46:	2304      	movs	r3, #4
 8012d48:	77fb      	strb	r3, [r7, #31]
 8012d4a:	e002      	b.n	8012d52 <SD_disk_ioctl+0x112>
            break;
 8012d4c:	bf00      	nop
 8012d4e:	e000      	b.n	8012d52 <SD_disk_ioctl+0x112>
            break;
 8012d50:	bf00      	nop
    }

    DESELECT();
 8012d52:	f7ff fc45 	bl	80125e0 <DESELECT>
    SPI_RxByte(); // Idle (Release DO)
 8012d56:	f7ff fc69 	bl	801262c <SPI_RxByte>

    return res;
 8012d5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8012d5c:	4618      	mov	r0, r3
 8012d5e:	3720      	adds	r7, #32
 8012d60:	46bd      	mov	sp, r7
 8012d62:	bd80      	pop	{r7, pc}
 8012d64:	240000a0 	.word	0x240000a0

08012d68 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8012d68:	b580      	push	{r7, lr}
 8012d6a:	b084      	sub	sp, #16
 8012d6c:	af00      	add	r7, sp, #0
 8012d6e:	4603      	mov	r3, r0
 8012d70:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8012d72:	79fb      	ldrb	r3, [r7, #7]
 8012d74:	4a08      	ldr	r2, [pc, #32]	@ (8012d98 <disk_status+0x30>)
 8012d76:	009b      	lsls	r3, r3, #2
 8012d78:	4413      	add	r3, r2
 8012d7a:	685b      	ldr	r3, [r3, #4]
 8012d7c:	685b      	ldr	r3, [r3, #4]
 8012d7e:	79fa      	ldrb	r2, [r7, #7]
 8012d80:	4905      	ldr	r1, [pc, #20]	@ (8012d98 <disk_status+0x30>)
 8012d82:	440a      	add	r2, r1
 8012d84:	7a12      	ldrb	r2, [r2, #8]
 8012d86:	4610      	mov	r0, r2
 8012d88:	4798      	blx	r3
 8012d8a:	4603      	mov	r3, r0
 8012d8c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8012d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d90:	4618      	mov	r0, r3
 8012d92:	3710      	adds	r7, #16
 8012d94:	46bd      	mov	sp, r7
 8012d96:	bd80      	pop	{r7, pc}
 8012d98:	24002de0 	.word	0x24002de0

08012d9c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8012d9c:	b580      	push	{r7, lr}
 8012d9e:	b084      	sub	sp, #16
 8012da0:	af00      	add	r7, sp, #0
 8012da2:	4603      	mov	r3, r0
 8012da4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8012da6:	2300      	movs	r3, #0
 8012da8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8012daa:	79fb      	ldrb	r3, [r7, #7]
 8012dac:	4a0e      	ldr	r2, [pc, #56]	@ (8012de8 <disk_initialize+0x4c>)
 8012dae:	5cd3      	ldrb	r3, [r2, r3]
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d114      	bne.n	8012dde <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8012db4:	79fb      	ldrb	r3, [r7, #7]
 8012db6:	4a0c      	ldr	r2, [pc, #48]	@ (8012de8 <disk_initialize+0x4c>)
 8012db8:	009b      	lsls	r3, r3, #2
 8012dba:	4413      	add	r3, r2
 8012dbc:	685b      	ldr	r3, [r3, #4]
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	79fa      	ldrb	r2, [r7, #7]
 8012dc2:	4909      	ldr	r1, [pc, #36]	@ (8012de8 <disk_initialize+0x4c>)
 8012dc4:	440a      	add	r2, r1
 8012dc6:	7a12      	ldrb	r2, [r2, #8]
 8012dc8:	4610      	mov	r0, r2
 8012dca:	4798      	blx	r3
 8012dcc:	4603      	mov	r3, r0
 8012dce:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8012dd0:	7bfb      	ldrb	r3, [r7, #15]
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d103      	bne.n	8012dde <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8012dd6:	79fb      	ldrb	r3, [r7, #7]
 8012dd8:	4a03      	ldr	r2, [pc, #12]	@ (8012de8 <disk_initialize+0x4c>)
 8012dda:	2101      	movs	r1, #1
 8012ddc:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8012dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8012de0:	4618      	mov	r0, r3
 8012de2:	3710      	adds	r7, #16
 8012de4:	46bd      	mov	sp, r7
 8012de6:	bd80      	pop	{r7, pc}
 8012de8:	24002de0 	.word	0x24002de0

08012dec <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8012dec:	b590      	push	{r4, r7, lr}
 8012dee:	b087      	sub	sp, #28
 8012df0:	af00      	add	r7, sp, #0
 8012df2:	60b9      	str	r1, [r7, #8]
 8012df4:	607a      	str	r2, [r7, #4]
 8012df6:	603b      	str	r3, [r7, #0]
 8012df8:	4603      	mov	r3, r0
 8012dfa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8012dfc:	7bfb      	ldrb	r3, [r7, #15]
 8012dfe:	4a0a      	ldr	r2, [pc, #40]	@ (8012e28 <disk_read+0x3c>)
 8012e00:	009b      	lsls	r3, r3, #2
 8012e02:	4413      	add	r3, r2
 8012e04:	685b      	ldr	r3, [r3, #4]
 8012e06:	689c      	ldr	r4, [r3, #8]
 8012e08:	7bfb      	ldrb	r3, [r7, #15]
 8012e0a:	4a07      	ldr	r2, [pc, #28]	@ (8012e28 <disk_read+0x3c>)
 8012e0c:	4413      	add	r3, r2
 8012e0e:	7a18      	ldrb	r0, [r3, #8]
 8012e10:	683b      	ldr	r3, [r7, #0]
 8012e12:	687a      	ldr	r2, [r7, #4]
 8012e14:	68b9      	ldr	r1, [r7, #8]
 8012e16:	47a0      	blx	r4
 8012e18:	4603      	mov	r3, r0
 8012e1a:	75fb      	strb	r3, [r7, #23]
  return res;
 8012e1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e1e:	4618      	mov	r0, r3
 8012e20:	371c      	adds	r7, #28
 8012e22:	46bd      	mov	sp, r7
 8012e24:	bd90      	pop	{r4, r7, pc}
 8012e26:	bf00      	nop
 8012e28:	24002de0 	.word	0x24002de0

08012e2c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8012e2c:	b590      	push	{r4, r7, lr}
 8012e2e:	b087      	sub	sp, #28
 8012e30:	af00      	add	r7, sp, #0
 8012e32:	60b9      	str	r1, [r7, #8]
 8012e34:	607a      	str	r2, [r7, #4]
 8012e36:	603b      	str	r3, [r7, #0]
 8012e38:	4603      	mov	r3, r0
 8012e3a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8012e3c:	7bfb      	ldrb	r3, [r7, #15]
 8012e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8012e68 <disk_write+0x3c>)
 8012e40:	009b      	lsls	r3, r3, #2
 8012e42:	4413      	add	r3, r2
 8012e44:	685b      	ldr	r3, [r3, #4]
 8012e46:	68dc      	ldr	r4, [r3, #12]
 8012e48:	7bfb      	ldrb	r3, [r7, #15]
 8012e4a:	4a07      	ldr	r2, [pc, #28]	@ (8012e68 <disk_write+0x3c>)
 8012e4c:	4413      	add	r3, r2
 8012e4e:	7a18      	ldrb	r0, [r3, #8]
 8012e50:	683b      	ldr	r3, [r7, #0]
 8012e52:	687a      	ldr	r2, [r7, #4]
 8012e54:	68b9      	ldr	r1, [r7, #8]
 8012e56:	47a0      	blx	r4
 8012e58:	4603      	mov	r3, r0
 8012e5a:	75fb      	strb	r3, [r7, #23]
  return res;
 8012e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e5e:	4618      	mov	r0, r3
 8012e60:	371c      	adds	r7, #28
 8012e62:	46bd      	mov	sp, r7
 8012e64:	bd90      	pop	{r4, r7, pc}
 8012e66:	bf00      	nop
 8012e68:	24002de0 	.word	0x24002de0

08012e6c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012e6c:	b580      	push	{r7, lr}
 8012e6e:	b084      	sub	sp, #16
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	4603      	mov	r3, r0
 8012e74:	603a      	str	r2, [r7, #0]
 8012e76:	71fb      	strb	r3, [r7, #7]
 8012e78:	460b      	mov	r3, r1
 8012e7a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012e7c:	79fb      	ldrb	r3, [r7, #7]
 8012e7e:	4a09      	ldr	r2, [pc, #36]	@ (8012ea4 <disk_ioctl+0x38>)
 8012e80:	009b      	lsls	r3, r3, #2
 8012e82:	4413      	add	r3, r2
 8012e84:	685b      	ldr	r3, [r3, #4]
 8012e86:	691b      	ldr	r3, [r3, #16]
 8012e88:	79fa      	ldrb	r2, [r7, #7]
 8012e8a:	4906      	ldr	r1, [pc, #24]	@ (8012ea4 <disk_ioctl+0x38>)
 8012e8c:	440a      	add	r2, r1
 8012e8e:	7a10      	ldrb	r0, [r2, #8]
 8012e90:	79b9      	ldrb	r1, [r7, #6]
 8012e92:	683a      	ldr	r2, [r7, #0]
 8012e94:	4798      	blx	r3
 8012e96:	4603      	mov	r3, r0
 8012e98:	73fb      	strb	r3, [r7, #15]
  return res;
 8012e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	3710      	adds	r7, #16
 8012ea0:	46bd      	mov	sp, r7
 8012ea2:	bd80      	pop	{r7, pc}
 8012ea4:	24002de0 	.word	0x24002de0

08012ea8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8012ea8:	b480      	push	{r7}
 8012eaa:	b085      	sub	sp, #20
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	3301      	adds	r3, #1
 8012eb4:	781b      	ldrb	r3, [r3, #0]
 8012eb6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8012eb8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012ebc:	021b      	lsls	r3, r3, #8
 8012ebe:	b21a      	sxth	r2, r3
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	781b      	ldrb	r3, [r3, #0]
 8012ec4:	b21b      	sxth	r3, r3
 8012ec6:	4313      	orrs	r3, r2
 8012ec8:	b21b      	sxth	r3, r3
 8012eca:	81fb      	strh	r3, [r7, #14]
	return rv;
 8012ecc:	89fb      	ldrh	r3, [r7, #14]
}
 8012ece:	4618      	mov	r0, r3
 8012ed0:	3714      	adds	r7, #20
 8012ed2:	46bd      	mov	sp, r7
 8012ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed8:	4770      	bx	lr

08012eda <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8012eda:	b480      	push	{r7}
 8012edc:	b085      	sub	sp, #20
 8012ede:	af00      	add	r7, sp, #0
 8012ee0:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	3303      	adds	r3, #3
 8012ee6:	781b      	ldrb	r3, [r3, #0]
 8012ee8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	021b      	lsls	r3, r3, #8
 8012eee:	687a      	ldr	r2, [r7, #4]
 8012ef0:	3202      	adds	r2, #2
 8012ef2:	7812      	ldrb	r2, [r2, #0]
 8012ef4:	4313      	orrs	r3, r2
 8012ef6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	021b      	lsls	r3, r3, #8
 8012efc:	687a      	ldr	r2, [r7, #4]
 8012efe:	3201      	adds	r2, #1
 8012f00:	7812      	ldrb	r2, [r2, #0]
 8012f02:	4313      	orrs	r3, r2
 8012f04:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	021b      	lsls	r3, r3, #8
 8012f0a:	687a      	ldr	r2, [r7, #4]
 8012f0c:	7812      	ldrb	r2, [r2, #0]
 8012f0e:	4313      	orrs	r3, r2
 8012f10:	60fb      	str	r3, [r7, #12]
	return rv;
 8012f12:	68fb      	ldr	r3, [r7, #12]
}
 8012f14:	4618      	mov	r0, r3
 8012f16:	3714      	adds	r7, #20
 8012f18:	46bd      	mov	sp, r7
 8012f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f1e:	4770      	bx	lr

08012f20 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8012f20:	b480      	push	{r7}
 8012f22:	b083      	sub	sp, #12
 8012f24:	af00      	add	r7, sp, #0
 8012f26:	6078      	str	r0, [r7, #4]
 8012f28:	460b      	mov	r3, r1
 8012f2a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	1c5a      	adds	r2, r3, #1
 8012f30:	607a      	str	r2, [r7, #4]
 8012f32:	887a      	ldrh	r2, [r7, #2]
 8012f34:	b2d2      	uxtb	r2, r2
 8012f36:	701a      	strb	r2, [r3, #0]
 8012f38:	887b      	ldrh	r3, [r7, #2]
 8012f3a:	0a1b      	lsrs	r3, r3, #8
 8012f3c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	1c5a      	adds	r2, r3, #1
 8012f42:	607a      	str	r2, [r7, #4]
 8012f44:	887a      	ldrh	r2, [r7, #2]
 8012f46:	b2d2      	uxtb	r2, r2
 8012f48:	701a      	strb	r2, [r3, #0]
}
 8012f4a:	bf00      	nop
 8012f4c:	370c      	adds	r7, #12
 8012f4e:	46bd      	mov	sp, r7
 8012f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f54:	4770      	bx	lr

08012f56 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8012f56:	b480      	push	{r7}
 8012f58:	b083      	sub	sp, #12
 8012f5a:	af00      	add	r7, sp, #0
 8012f5c:	6078      	str	r0, [r7, #4]
 8012f5e:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	1c5a      	adds	r2, r3, #1
 8012f64:	607a      	str	r2, [r7, #4]
 8012f66:	683a      	ldr	r2, [r7, #0]
 8012f68:	b2d2      	uxtb	r2, r2
 8012f6a:	701a      	strb	r2, [r3, #0]
 8012f6c:	683b      	ldr	r3, [r7, #0]
 8012f6e:	0a1b      	lsrs	r3, r3, #8
 8012f70:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	1c5a      	adds	r2, r3, #1
 8012f76:	607a      	str	r2, [r7, #4]
 8012f78:	683a      	ldr	r2, [r7, #0]
 8012f7a:	b2d2      	uxtb	r2, r2
 8012f7c:	701a      	strb	r2, [r3, #0]
 8012f7e:	683b      	ldr	r3, [r7, #0]
 8012f80:	0a1b      	lsrs	r3, r3, #8
 8012f82:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	1c5a      	adds	r2, r3, #1
 8012f88:	607a      	str	r2, [r7, #4]
 8012f8a:	683a      	ldr	r2, [r7, #0]
 8012f8c:	b2d2      	uxtb	r2, r2
 8012f8e:	701a      	strb	r2, [r3, #0]
 8012f90:	683b      	ldr	r3, [r7, #0]
 8012f92:	0a1b      	lsrs	r3, r3, #8
 8012f94:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	1c5a      	adds	r2, r3, #1
 8012f9a:	607a      	str	r2, [r7, #4]
 8012f9c:	683a      	ldr	r2, [r7, #0]
 8012f9e:	b2d2      	uxtb	r2, r2
 8012fa0:	701a      	strb	r2, [r3, #0]
}
 8012fa2:	bf00      	nop
 8012fa4:	370c      	adds	r7, #12
 8012fa6:	46bd      	mov	sp, r7
 8012fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fac:	4770      	bx	lr

08012fae <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8012fae:	b480      	push	{r7}
 8012fb0:	b087      	sub	sp, #28
 8012fb2:	af00      	add	r7, sp, #0
 8012fb4:	60f8      	str	r0, [r7, #12]
 8012fb6:	60b9      	str	r1, [r7, #8]
 8012fb8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8012fbe:	68bb      	ldr	r3, [r7, #8]
 8012fc0:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d00d      	beq.n	8012fe4 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8012fc8:	693a      	ldr	r2, [r7, #16]
 8012fca:	1c53      	adds	r3, r2, #1
 8012fcc:	613b      	str	r3, [r7, #16]
 8012fce:	697b      	ldr	r3, [r7, #20]
 8012fd0:	1c59      	adds	r1, r3, #1
 8012fd2:	6179      	str	r1, [r7, #20]
 8012fd4:	7812      	ldrb	r2, [r2, #0]
 8012fd6:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	3b01      	subs	r3, #1
 8012fdc:	607b      	str	r3, [r7, #4]
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d1f1      	bne.n	8012fc8 <mem_cpy+0x1a>
	}
}
 8012fe4:	bf00      	nop
 8012fe6:	371c      	adds	r7, #28
 8012fe8:	46bd      	mov	sp, r7
 8012fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fee:	4770      	bx	lr

08012ff0 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8012ff0:	b480      	push	{r7}
 8012ff2:	b087      	sub	sp, #28
 8012ff4:	af00      	add	r7, sp, #0
 8012ff6:	60f8      	str	r0, [r7, #12]
 8012ff8:	60b9      	str	r1, [r7, #8]
 8012ffa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8013000:	697b      	ldr	r3, [r7, #20]
 8013002:	1c5a      	adds	r2, r3, #1
 8013004:	617a      	str	r2, [r7, #20]
 8013006:	68ba      	ldr	r2, [r7, #8]
 8013008:	b2d2      	uxtb	r2, r2
 801300a:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	3b01      	subs	r3, #1
 8013010:	607b      	str	r3, [r7, #4]
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	2b00      	cmp	r3, #0
 8013016:	d1f3      	bne.n	8013000 <mem_set+0x10>
}
 8013018:	bf00      	nop
 801301a:	bf00      	nop
 801301c:	371c      	adds	r7, #28
 801301e:	46bd      	mov	sp, r7
 8013020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013024:	4770      	bx	lr

08013026 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8013026:	b480      	push	{r7}
 8013028:	b089      	sub	sp, #36	@ 0x24
 801302a:	af00      	add	r7, sp, #0
 801302c:	60f8      	str	r0, [r7, #12]
 801302e:	60b9      	str	r1, [r7, #8]
 8013030:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	61fb      	str	r3, [r7, #28]
 8013036:	68bb      	ldr	r3, [r7, #8]
 8013038:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801303a:	2300      	movs	r3, #0
 801303c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801303e:	69fb      	ldr	r3, [r7, #28]
 8013040:	1c5a      	adds	r2, r3, #1
 8013042:	61fa      	str	r2, [r7, #28]
 8013044:	781b      	ldrb	r3, [r3, #0]
 8013046:	4619      	mov	r1, r3
 8013048:	69bb      	ldr	r3, [r7, #24]
 801304a:	1c5a      	adds	r2, r3, #1
 801304c:	61ba      	str	r2, [r7, #24]
 801304e:	781b      	ldrb	r3, [r3, #0]
 8013050:	1acb      	subs	r3, r1, r3
 8013052:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	3b01      	subs	r3, #1
 8013058:	607b      	str	r3, [r7, #4]
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	2b00      	cmp	r3, #0
 801305e:	d002      	beq.n	8013066 <mem_cmp+0x40>
 8013060:	697b      	ldr	r3, [r7, #20]
 8013062:	2b00      	cmp	r3, #0
 8013064:	d0eb      	beq.n	801303e <mem_cmp+0x18>

	return r;
 8013066:	697b      	ldr	r3, [r7, #20]
}
 8013068:	4618      	mov	r0, r3
 801306a:	3724      	adds	r7, #36	@ 0x24
 801306c:	46bd      	mov	sp, r7
 801306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013072:	4770      	bx	lr

08013074 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8013074:	b480      	push	{r7}
 8013076:	b083      	sub	sp, #12
 8013078:	af00      	add	r7, sp, #0
 801307a:	6078      	str	r0, [r7, #4]
 801307c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801307e:	e002      	b.n	8013086 <chk_chr+0x12>
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	3301      	adds	r3, #1
 8013084:	607b      	str	r3, [r7, #4]
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	781b      	ldrb	r3, [r3, #0]
 801308a:	2b00      	cmp	r3, #0
 801308c:	d005      	beq.n	801309a <chk_chr+0x26>
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	781b      	ldrb	r3, [r3, #0]
 8013092:	461a      	mov	r2, r3
 8013094:	683b      	ldr	r3, [r7, #0]
 8013096:	4293      	cmp	r3, r2
 8013098:	d1f2      	bne.n	8013080 <chk_chr+0xc>
	return *str;
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	781b      	ldrb	r3, [r3, #0]
}
 801309e:	4618      	mov	r0, r3
 80130a0:	370c      	adds	r7, #12
 80130a2:	46bd      	mov	sp, r7
 80130a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130a8:	4770      	bx	lr

080130aa <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80130aa:	b580      	push	{r7, lr}
 80130ac:	b082      	sub	sp, #8
 80130ae:	af00      	add	r7, sp, #0
 80130b0:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d009      	beq.n	80130cc <lock_fs+0x22>
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	691b      	ldr	r3, [r3, #16]
 80130bc:	4618      	mov	r0, r3
 80130be:	f003 fe74 	bl	8016daa <ff_req_grant>
 80130c2:	4603      	mov	r3, r0
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d001      	beq.n	80130cc <lock_fs+0x22>
 80130c8:	2301      	movs	r3, #1
 80130ca:	e000      	b.n	80130ce <lock_fs+0x24>
 80130cc:	2300      	movs	r3, #0
}
 80130ce:	4618      	mov	r0, r3
 80130d0:	3708      	adds	r7, #8
 80130d2:	46bd      	mov	sp, r7
 80130d4:	bd80      	pop	{r7, pc}

080130d6 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80130d6:	b580      	push	{r7, lr}
 80130d8:	b082      	sub	sp, #8
 80130da:	af00      	add	r7, sp, #0
 80130dc:	6078      	str	r0, [r7, #4]
 80130de:	460b      	mov	r3, r1
 80130e0:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d00d      	beq.n	8013104 <unlock_fs+0x2e>
 80130e8:	78fb      	ldrb	r3, [r7, #3]
 80130ea:	2b0c      	cmp	r3, #12
 80130ec:	d00a      	beq.n	8013104 <unlock_fs+0x2e>
 80130ee:	78fb      	ldrb	r3, [r7, #3]
 80130f0:	2b0b      	cmp	r3, #11
 80130f2:	d007      	beq.n	8013104 <unlock_fs+0x2e>
 80130f4:	78fb      	ldrb	r3, [r7, #3]
 80130f6:	2b0f      	cmp	r3, #15
 80130f8:	d004      	beq.n	8013104 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	691b      	ldr	r3, [r3, #16]
 80130fe:	4618      	mov	r0, r3
 8013100:	f003 fe68 	bl	8016dd4 <ff_rel_grant>
	}
}
 8013104:	bf00      	nop
 8013106:	3708      	adds	r7, #8
 8013108:	46bd      	mov	sp, r7
 801310a:	bd80      	pop	{r7, pc}

0801310c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801310c:	b580      	push	{r7, lr}
 801310e:	b086      	sub	sp, #24
 8013110:	af00      	add	r7, sp, #0
 8013112:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8013114:	2300      	movs	r3, #0
 8013116:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	78db      	ldrb	r3, [r3, #3]
 801311c:	2b00      	cmp	r3, #0
 801311e:	d034      	beq.n	801318a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013124:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	7858      	ldrb	r0, [r3, #1]
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8013130:	2301      	movs	r3, #1
 8013132:	697a      	ldr	r2, [r7, #20]
 8013134:	f7ff fe7a 	bl	8012e2c <disk_write>
 8013138:	4603      	mov	r3, r0
 801313a:	2b00      	cmp	r3, #0
 801313c:	d002      	beq.n	8013144 <sync_window+0x38>
			res = FR_DISK_ERR;
 801313e:	2301      	movs	r3, #1
 8013140:	73fb      	strb	r3, [r7, #15]
 8013142:	e022      	b.n	801318a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	2200      	movs	r2, #0
 8013148:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801314e:	697a      	ldr	r2, [r7, #20]
 8013150:	1ad2      	subs	r2, r2, r3
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013156:	429a      	cmp	r2, r3
 8013158:	d217      	bcs.n	801318a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	789b      	ldrb	r3, [r3, #2]
 801315e:	613b      	str	r3, [r7, #16]
 8013160:	e010      	b.n	8013184 <sync_window+0x78>
					wsect += fs->fsize;
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013166:	697a      	ldr	r2, [r7, #20]
 8013168:	4413      	add	r3, r2
 801316a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	7858      	ldrb	r0, [r3, #1]
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8013176:	2301      	movs	r3, #1
 8013178:	697a      	ldr	r2, [r7, #20]
 801317a:	f7ff fe57 	bl	8012e2c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801317e:	693b      	ldr	r3, [r7, #16]
 8013180:	3b01      	subs	r3, #1
 8013182:	613b      	str	r3, [r7, #16]
 8013184:	693b      	ldr	r3, [r7, #16]
 8013186:	2b01      	cmp	r3, #1
 8013188:	d8eb      	bhi.n	8013162 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801318a:	7bfb      	ldrb	r3, [r7, #15]
}
 801318c:	4618      	mov	r0, r3
 801318e:	3718      	adds	r7, #24
 8013190:	46bd      	mov	sp, r7
 8013192:	bd80      	pop	{r7, pc}

08013194 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8013194:	b580      	push	{r7, lr}
 8013196:	b084      	sub	sp, #16
 8013198:	af00      	add	r7, sp, #0
 801319a:	6078      	str	r0, [r7, #4]
 801319c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801319e:	2300      	movs	r3, #0
 80131a0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80131a6:	683a      	ldr	r2, [r7, #0]
 80131a8:	429a      	cmp	r2, r3
 80131aa:	d01b      	beq.n	80131e4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80131ac:	6878      	ldr	r0, [r7, #4]
 80131ae:	f7ff ffad 	bl	801310c <sync_window>
 80131b2:	4603      	mov	r3, r0
 80131b4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80131b6:	7bfb      	ldrb	r3, [r7, #15]
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d113      	bne.n	80131e4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	7858      	ldrb	r0, [r3, #1]
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80131c6:	2301      	movs	r3, #1
 80131c8:	683a      	ldr	r2, [r7, #0]
 80131ca:	f7ff fe0f 	bl	8012dec <disk_read>
 80131ce:	4603      	mov	r3, r0
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d004      	beq.n	80131de <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80131d4:	f04f 33ff 	mov.w	r3, #4294967295
 80131d8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80131da:	2301      	movs	r3, #1
 80131dc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	683a      	ldr	r2, [r7, #0]
 80131e2:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	return res;
 80131e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80131e6:	4618      	mov	r0, r3
 80131e8:	3710      	adds	r7, #16
 80131ea:	46bd      	mov	sp, r7
 80131ec:	bd80      	pop	{r7, pc}
	...

080131f0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80131f0:	b580      	push	{r7, lr}
 80131f2:	b084      	sub	sp, #16
 80131f4:	af00      	add	r7, sp, #0
 80131f6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80131f8:	6878      	ldr	r0, [r7, #4]
 80131fa:	f7ff ff87 	bl	801310c <sync_window>
 80131fe:	4603      	mov	r3, r0
 8013200:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8013202:	7bfb      	ldrb	r3, [r7, #15]
 8013204:	2b00      	cmp	r3, #0
 8013206:	d158      	bne.n	80132ba <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	781b      	ldrb	r3, [r3, #0]
 801320c:	2b03      	cmp	r3, #3
 801320e:	d148      	bne.n	80132a2 <sync_fs+0xb2>
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	791b      	ldrb	r3, [r3, #4]
 8013214:	2b01      	cmp	r3, #1
 8013216:	d144      	bne.n	80132a2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	333c      	adds	r3, #60	@ 0x3c
 801321c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013220:	2100      	movs	r1, #0
 8013222:	4618      	mov	r0, r3
 8013224:	f7ff fee4 	bl	8012ff0 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	333c      	adds	r3, #60	@ 0x3c
 801322c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8013230:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8013234:	4618      	mov	r0, r3
 8013236:	f7ff fe73 	bl	8012f20 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	333c      	adds	r3, #60	@ 0x3c
 801323e:	4921      	ldr	r1, [pc, #132]	@ (80132c4 <sync_fs+0xd4>)
 8013240:	4618      	mov	r0, r3
 8013242:	f7ff fe88 	bl	8012f56 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	333c      	adds	r3, #60	@ 0x3c
 801324a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801324e:	491e      	ldr	r1, [pc, #120]	@ (80132c8 <sync_fs+0xd8>)
 8013250:	4618      	mov	r0, r3
 8013252:	f7ff fe80 	bl	8012f56 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	333c      	adds	r3, #60	@ 0x3c
 801325a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	699b      	ldr	r3, [r3, #24]
 8013262:	4619      	mov	r1, r3
 8013264:	4610      	mov	r0, r2
 8013266:	f7ff fe76 	bl	8012f56 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	333c      	adds	r3, #60	@ 0x3c
 801326e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	695b      	ldr	r3, [r3, #20]
 8013276:	4619      	mov	r1, r3
 8013278:	4610      	mov	r0, r2
 801327a:	f7ff fe6c 	bl	8012f56 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013282:	1c5a      	adds	r2, r3, #1
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	639a      	str	r2, [r3, #56]	@ 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	7858      	ldrb	r0, [r3, #1]
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013296:	2301      	movs	r3, #1
 8013298:	f7ff fdc8 	bl	8012e2c <disk_write>
			fs->fsi_flag = 0;
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	2200      	movs	r2, #0
 80132a0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	785b      	ldrb	r3, [r3, #1]
 80132a6:	2200      	movs	r2, #0
 80132a8:	2100      	movs	r1, #0
 80132aa:	4618      	mov	r0, r3
 80132ac:	f7ff fdde 	bl	8012e6c <disk_ioctl>
 80132b0:	4603      	mov	r3, r0
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d001      	beq.n	80132ba <sync_fs+0xca>
 80132b6:	2301      	movs	r3, #1
 80132b8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80132ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80132bc:	4618      	mov	r0, r3
 80132be:	3710      	adds	r7, #16
 80132c0:	46bd      	mov	sp, r7
 80132c2:	bd80      	pop	{r7, pc}
 80132c4:	41615252 	.word	0x41615252
 80132c8:	61417272 	.word	0x61417272

080132cc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80132cc:	b480      	push	{r7}
 80132ce:	b083      	sub	sp, #12
 80132d0:	af00      	add	r7, sp, #0
 80132d2:	6078      	str	r0, [r7, #4]
 80132d4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80132d6:	683b      	ldr	r3, [r7, #0]
 80132d8:	3b02      	subs	r3, #2
 80132da:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	6a1b      	ldr	r3, [r3, #32]
 80132e0:	3b02      	subs	r3, #2
 80132e2:	683a      	ldr	r2, [r7, #0]
 80132e4:	429a      	cmp	r2, r3
 80132e6:	d301      	bcc.n	80132ec <clust2sect+0x20>
 80132e8:	2300      	movs	r3, #0
 80132ea:	e008      	b.n	80132fe <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	895b      	ldrh	r3, [r3, #10]
 80132f0:	461a      	mov	r2, r3
 80132f2:	683b      	ldr	r3, [r7, #0]
 80132f4:	fb03 f202 	mul.w	r2, r3, r2
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80132fc:	4413      	add	r3, r2
}
 80132fe:	4618      	mov	r0, r3
 8013300:	370c      	adds	r7, #12
 8013302:	46bd      	mov	sp, r7
 8013304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013308:	4770      	bx	lr

0801330a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801330a:	b580      	push	{r7, lr}
 801330c:	b086      	sub	sp, #24
 801330e:	af00      	add	r7, sp, #0
 8013310:	6078      	str	r0, [r7, #4]
 8013312:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801331a:	683b      	ldr	r3, [r7, #0]
 801331c:	2b01      	cmp	r3, #1
 801331e:	d904      	bls.n	801332a <get_fat+0x20>
 8013320:	693b      	ldr	r3, [r7, #16]
 8013322:	6a1b      	ldr	r3, [r3, #32]
 8013324:	683a      	ldr	r2, [r7, #0]
 8013326:	429a      	cmp	r2, r3
 8013328:	d302      	bcc.n	8013330 <get_fat+0x26>
		val = 1;	/* Internal error */
 801332a:	2301      	movs	r3, #1
 801332c:	617b      	str	r3, [r7, #20]
 801332e:	e08e      	b.n	801344e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8013330:	f04f 33ff 	mov.w	r3, #4294967295
 8013334:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8013336:	693b      	ldr	r3, [r7, #16]
 8013338:	781b      	ldrb	r3, [r3, #0]
 801333a:	2b03      	cmp	r3, #3
 801333c:	d061      	beq.n	8013402 <get_fat+0xf8>
 801333e:	2b03      	cmp	r3, #3
 8013340:	dc7b      	bgt.n	801343a <get_fat+0x130>
 8013342:	2b01      	cmp	r3, #1
 8013344:	d002      	beq.n	801334c <get_fat+0x42>
 8013346:	2b02      	cmp	r3, #2
 8013348:	d041      	beq.n	80133ce <get_fat+0xc4>
 801334a:	e076      	b.n	801343a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801334c:	683b      	ldr	r3, [r7, #0]
 801334e:	60fb      	str	r3, [r7, #12]
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	085b      	lsrs	r3, r3, #1
 8013354:	68fa      	ldr	r2, [r7, #12]
 8013356:	4413      	add	r3, r2
 8013358:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801335a:	693b      	ldr	r3, [r7, #16]
 801335c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	0a5b      	lsrs	r3, r3, #9
 8013362:	4413      	add	r3, r2
 8013364:	4619      	mov	r1, r3
 8013366:	6938      	ldr	r0, [r7, #16]
 8013368:	f7ff ff14 	bl	8013194 <move_window>
 801336c:	4603      	mov	r3, r0
 801336e:	2b00      	cmp	r3, #0
 8013370:	d166      	bne.n	8013440 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	1c5a      	adds	r2, r3, #1
 8013376:	60fa      	str	r2, [r7, #12]
 8013378:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801337c:	693a      	ldr	r2, [r7, #16]
 801337e:	4413      	add	r3, r2
 8013380:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013384:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013386:	693b      	ldr	r3, [r7, #16]
 8013388:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	0a5b      	lsrs	r3, r3, #9
 801338e:	4413      	add	r3, r2
 8013390:	4619      	mov	r1, r3
 8013392:	6938      	ldr	r0, [r7, #16]
 8013394:	f7ff fefe 	bl	8013194 <move_window>
 8013398:	4603      	mov	r3, r0
 801339a:	2b00      	cmp	r3, #0
 801339c:	d152      	bne.n	8013444 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80133a4:	693a      	ldr	r2, [r7, #16]
 80133a6:	4413      	add	r3, r2
 80133a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80133ac:	021b      	lsls	r3, r3, #8
 80133ae:	68ba      	ldr	r2, [r7, #8]
 80133b0:	4313      	orrs	r3, r2
 80133b2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80133b4:	683b      	ldr	r3, [r7, #0]
 80133b6:	f003 0301 	and.w	r3, r3, #1
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d002      	beq.n	80133c4 <get_fat+0xba>
 80133be:	68bb      	ldr	r3, [r7, #8]
 80133c0:	091b      	lsrs	r3, r3, #4
 80133c2:	e002      	b.n	80133ca <get_fat+0xc0>
 80133c4:	68bb      	ldr	r3, [r7, #8]
 80133c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80133ca:	617b      	str	r3, [r7, #20]
			break;
 80133cc:	e03f      	b.n	801344e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80133ce:	693b      	ldr	r3, [r7, #16]
 80133d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80133d2:	683b      	ldr	r3, [r7, #0]
 80133d4:	0a1b      	lsrs	r3, r3, #8
 80133d6:	4413      	add	r3, r2
 80133d8:	4619      	mov	r1, r3
 80133da:	6938      	ldr	r0, [r7, #16]
 80133dc:	f7ff feda 	bl	8013194 <move_window>
 80133e0:	4603      	mov	r3, r0
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d130      	bne.n	8013448 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80133e6:	693b      	ldr	r3, [r7, #16]
 80133e8:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80133ec:	683b      	ldr	r3, [r7, #0]
 80133ee:	005b      	lsls	r3, r3, #1
 80133f0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80133f4:	4413      	add	r3, r2
 80133f6:	4618      	mov	r0, r3
 80133f8:	f7ff fd56 	bl	8012ea8 <ld_word>
 80133fc:	4603      	mov	r3, r0
 80133fe:	617b      	str	r3, [r7, #20]
			break;
 8013400:	e025      	b.n	801344e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013402:	693b      	ldr	r3, [r7, #16]
 8013404:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013406:	683b      	ldr	r3, [r7, #0]
 8013408:	09db      	lsrs	r3, r3, #7
 801340a:	4413      	add	r3, r2
 801340c:	4619      	mov	r1, r3
 801340e:	6938      	ldr	r0, [r7, #16]
 8013410:	f7ff fec0 	bl	8013194 <move_window>
 8013414:	4603      	mov	r3, r0
 8013416:	2b00      	cmp	r3, #0
 8013418:	d118      	bne.n	801344c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801341a:	693b      	ldr	r3, [r7, #16]
 801341c:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8013420:	683b      	ldr	r3, [r7, #0]
 8013422:	009b      	lsls	r3, r3, #2
 8013424:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8013428:	4413      	add	r3, r2
 801342a:	4618      	mov	r0, r3
 801342c:	f7ff fd55 	bl	8012eda <ld_dword>
 8013430:	4603      	mov	r3, r0
 8013432:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8013436:	617b      	str	r3, [r7, #20]
			break;
 8013438:	e009      	b.n	801344e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801343a:	2301      	movs	r3, #1
 801343c:	617b      	str	r3, [r7, #20]
 801343e:	e006      	b.n	801344e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013440:	bf00      	nop
 8013442:	e004      	b.n	801344e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013444:	bf00      	nop
 8013446:	e002      	b.n	801344e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013448:	bf00      	nop
 801344a:	e000      	b.n	801344e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801344c:	bf00      	nop
		}
	}

	return val;
 801344e:	697b      	ldr	r3, [r7, #20]
}
 8013450:	4618      	mov	r0, r3
 8013452:	3718      	adds	r7, #24
 8013454:	46bd      	mov	sp, r7
 8013456:	bd80      	pop	{r7, pc}

08013458 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8013458:	b590      	push	{r4, r7, lr}
 801345a:	b089      	sub	sp, #36	@ 0x24
 801345c:	af00      	add	r7, sp, #0
 801345e:	60f8      	str	r0, [r7, #12]
 8013460:	60b9      	str	r1, [r7, #8]
 8013462:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8013464:	2302      	movs	r3, #2
 8013466:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8013468:	68bb      	ldr	r3, [r7, #8]
 801346a:	2b01      	cmp	r3, #1
 801346c:	f240 80d9 	bls.w	8013622 <put_fat+0x1ca>
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	6a1b      	ldr	r3, [r3, #32]
 8013474:	68ba      	ldr	r2, [r7, #8]
 8013476:	429a      	cmp	r2, r3
 8013478:	f080 80d3 	bcs.w	8013622 <put_fat+0x1ca>
		switch (fs->fs_type) {
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	781b      	ldrb	r3, [r3, #0]
 8013480:	2b03      	cmp	r3, #3
 8013482:	f000 8096 	beq.w	80135b2 <put_fat+0x15a>
 8013486:	2b03      	cmp	r3, #3
 8013488:	f300 80cb 	bgt.w	8013622 <put_fat+0x1ca>
 801348c:	2b01      	cmp	r3, #1
 801348e:	d002      	beq.n	8013496 <put_fat+0x3e>
 8013490:	2b02      	cmp	r3, #2
 8013492:	d06e      	beq.n	8013572 <put_fat+0x11a>
 8013494:	e0c5      	b.n	8013622 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8013496:	68bb      	ldr	r3, [r7, #8]
 8013498:	61bb      	str	r3, [r7, #24]
 801349a:	69bb      	ldr	r3, [r7, #24]
 801349c:	085b      	lsrs	r3, r3, #1
 801349e:	69ba      	ldr	r2, [r7, #24]
 80134a0:	4413      	add	r3, r2
 80134a2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80134a8:	69bb      	ldr	r3, [r7, #24]
 80134aa:	0a5b      	lsrs	r3, r3, #9
 80134ac:	4413      	add	r3, r2
 80134ae:	4619      	mov	r1, r3
 80134b0:	68f8      	ldr	r0, [r7, #12]
 80134b2:	f7ff fe6f 	bl	8013194 <move_window>
 80134b6:	4603      	mov	r3, r0
 80134b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80134ba:	7ffb      	ldrb	r3, [r7, #31]
 80134bc:	2b00      	cmp	r3, #0
 80134be:	f040 80a9 	bne.w	8013614 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80134c8:	69bb      	ldr	r3, [r7, #24]
 80134ca:	1c59      	adds	r1, r3, #1
 80134cc:	61b9      	str	r1, [r7, #24]
 80134ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80134d2:	4413      	add	r3, r2
 80134d4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80134d6:	68bb      	ldr	r3, [r7, #8]
 80134d8:	f003 0301 	and.w	r3, r3, #1
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d00d      	beq.n	80134fc <put_fat+0xa4>
 80134e0:	697b      	ldr	r3, [r7, #20]
 80134e2:	781b      	ldrb	r3, [r3, #0]
 80134e4:	b25b      	sxtb	r3, r3
 80134e6:	f003 030f 	and.w	r3, r3, #15
 80134ea:	b25a      	sxtb	r2, r3
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	b25b      	sxtb	r3, r3
 80134f0:	011b      	lsls	r3, r3, #4
 80134f2:	b25b      	sxtb	r3, r3
 80134f4:	4313      	orrs	r3, r2
 80134f6:	b25b      	sxtb	r3, r3
 80134f8:	b2db      	uxtb	r3, r3
 80134fa:	e001      	b.n	8013500 <put_fat+0xa8>
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	b2db      	uxtb	r3, r3
 8013500:	697a      	ldr	r2, [r7, #20]
 8013502:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	2201      	movs	r2, #1
 8013508:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801350e:	69bb      	ldr	r3, [r7, #24]
 8013510:	0a5b      	lsrs	r3, r3, #9
 8013512:	4413      	add	r3, r2
 8013514:	4619      	mov	r1, r3
 8013516:	68f8      	ldr	r0, [r7, #12]
 8013518:	f7ff fe3c 	bl	8013194 <move_window>
 801351c:	4603      	mov	r3, r0
 801351e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013520:	7ffb      	ldrb	r3, [r7, #31]
 8013522:	2b00      	cmp	r3, #0
 8013524:	d178      	bne.n	8013618 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 801352c:	69bb      	ldr	r3, [r7, #24]
 801352e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013532:	4413      	add	r3, r2
 8013534:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8013536:	68bb      	ldr	r3, [r7, #8]
 8013538:	f003 0301 	and.w	r3, r3, #1
 801353c:	2b00      	cmp	r3, #0
 801353e:	d003      	beq.n	8013548 <put_fat+0xf0>
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	091b      	lsrs	r3, r3, #4
 8013544:	b2db      	uxtb	r3, r3
 8013546:	e00e      	b.n	8013566 <put_fat+0x10e>
 8013548:	697b      	ldr	r3, [r7, #20]
 801354a:	781b      	ldrb	r3, [r3, #0]
 801354c:	b25b      	sxtb	r3, r3
 801354e:	f023 030f 	bic.w	r3, r3, #15
 8013552:	b25a      	sxtb	r2, r3
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	0a1b      	lsrs	r3, r3, #8
 8013558:	b25b      	sxtb	r3, r3
 801355a:	f003 030f 	and.w	r3, r3, #15
 801355e:	b25b      	sxtb	r3, r3
 8013560:	4313      	orrs	r3, r2
 8013562:	b25b      	sxtb	r3, r3
 8013564:	b2db      	uxtb	r3, r3
 8013566:	697a      	ldr	r2, [r7, #20]
 8013568:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	2201      	movs	r2, #1
 801356e:	70da      	strb	r2, [r3, #3]
			break;
 8013570:	e057      	b.n	8013622 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013576:	68bb      	ldr	r3, [r7, #8]
 8013578:	0a1b      	lsrs	r3, r3, #8
 801357a:	4413      	add	r3, r2
 801357c:	4619      	mov	r1, r3
 801357e:	68f8      	ldr	r0, [r7, #12]
 8013580:	f7ff fe08 	bl	8013194 <move_window>
 8013584:	4603      	mov	r3, r0
 8013586:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013588:	7ffb      	ldrb	r3, [r7, #31]
 801358a:	2b00      	cmp	r3, #0
 801358c:	d146      	bne.n	801361c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8013594:	68bb      	ldr	r3, [r7, #8]
 8013596:	005b      	lsls	r3, r3, #1
 8013598:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 801359c:	4413      	add	r3, r2
 801359e:	687a      	ldr	r2, [r7, #4]
 80135a0:	b292      	uxth	r2, r2
 80135a2:	4611      	mov	r1, r2
 80135a4:	4618      	mov	r0, r3
 80135a6:	f7ff fcbb 	bl	8012f20 <st_word>
			fs->wflag = 1;
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	2201      	movs	r2, #1
 80135ae:	70da      	strb	r2, [r3, #3]
			break;
 80135b0:	e037      	b.n	8013622 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80135b6:	68bb      	ldr	r3, [r7, #8]
 80135b8:	09db      	lsrs	r3, r3, #7
 80135ba:	4413      	add	r3, r2
 80135bc:	4619      	mov	r1, r3
 80135be:	68f8      	ldr	r0, [r7, #12]
 80135c0:	f7ff fde8 	bl	8013194 <move_window>
 80135c4:	4603      	mov	r3, r0
 80135c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80135c8:	7ffb      	ldrb	r3, [r7, #31]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d128      	bne.n	8013620 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80135da:	68bb      	ldr	r3, [r7, #8]
 80135dc:	009b      	lsls	r3, r3, #2
 80135de:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80135e2:	4413      	add	r3, r2
 80135e4:	4618      	mov	r0, r3
 80135e6:	f7ff fc78 	bl	8012eda <ld_dword>
 80135ea:	4603      	mov	r3, r0
 80135ec:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80135f0:	4323      	orrs	r3, r4
 80135f2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80135fa:	68bb      	ldr	r3, [r7, #8]
 80135fc:	009b      	lsls	r3, r3, #2
 80135fe:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8013602:	4413      	add	r3, r2
 8013604:	6879      	ldr	r1, [r7, #4]
 8013606:	4618      	mov	r0, r3
 8013608:	f7ff fca5 	bl	8012f56 <st_dword>
			fs->wflag = 1;
 801360c:	68fb      	ldr	r3, [r7, #12]
 801360e:	2201      	movs	r2, #1
 8013610:	70da      	strb	r2, [r3, #3]
			break;
 8013612:	e006      	b.n	8013622 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8013614:	bf00      	nop
 8013616:	e004      	b.n	8013622 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8013618:	bf00      	nop
 801361a:	e002      	b.n	8013622 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801361c:	bf00      	nop
 801361e:	e000      	b.n	8013622 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8013620:	bf00      	nop
		}
	}
	return res;
 8013622:	7ffb      	ldrb	r3, [r7, #31]
}
 8013624:	4618      	mov	r0, r3
 8013626:	3724      	adds	r7, #36	@ 0x24
 8013628:	46bd      	mov	sp, r7
 801362a:	bd90      	pop	{r4, r7, pc}

0801362c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801362c:	b580      	push	{r7, lr}
 801362e:	b088      	sub	sp, #32
 8013630:	af00      	add	r7, sp, #0
 8013632:	60f8      	str	r0, [r7, #12]
 8013634:	60b9      	str	r1, [r7, #8]
 8013636:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8013638:	2300      	movs	r3, #0
 801363a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8013642:	68bb      	ldr	r3, [r7, #8]
 8013644:	2b01      	cmp	r3, #1
 8013646:	d904      	bls.n	8013652 <remove_chain+0x26>
 8013648:	69bb      	ldr	r3, [r7, #24]
 801364a:	6a1b      	ldr	r3, [r3, #32]
 801364c:	68ba      	ldr	r2, [r7, #8]
 801364e:	429a      	cmp	r2, r3
 8013650:	d301      	bcc.n	8013656 <remove_chain+0x2a>
 8013652:	2302      	movs	r3, #2
 8013654:	e04b      	b.n	80136ee <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	2b00      	cmp	r3, #0
 801365a:	d00c      	beq.n	8013676 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801365c:	f04f 32ff 	mov.w	r2, #4294967295
 8013660:	6879      	ldr	r1, [r7, #4]
 8013662:	69b8      	ldr	r0, [r7, #24]
 8013664:	f7ff fef8 	bl	8013458 <put_fat>
 8013668:	4603      	mov	r3, r0
 801366a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801366c:	7ffb      	ldrb	r3, [r7, #31]
 801366e:	2b00      	cmp	r3, #0
 8013670:	d001      	beq.n	8013676 <remove_chain+0x4a>
 8013672:	7ffb      	ldrb	r3, [r7, #31]
 8013674:	e03b      	b.n	80136ee <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8013676:	68b9      	ldr	r1, [r7, #8]
 8013678:	68f8      	ldr	r0, [r7, #12]
 801367a:	f7ff fe46 	bl	801330a <get_fat>
 801367e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8013680:	697b      	ldr	r3, [r7, #20]
 8013682:	2b00      	cmp	r3, #0
 8013684:	d031      	beq.n	80136ea <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8013686:	697b      	ldr	r3, [r7, #20]
 8013688:	2b01      	cmp	r3, #1
 801368a:	d101      	bne.n	8013690 <remove_chain+0x64>
 801368c:	2302      	movs	r3, #2
 801368e:	e02e      	b.n	80136ee <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8013690:	697b      	ldr	r3, [r7, #20]
 8013692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013696:	d101      	bne.n	801369c <remove_chain+0x70>
 8013698:	2301      	movs	r3, #1
 801369a:	e028      	b.n	80136ee <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801369c:	2200      	movs	r2, #0
 801369e:	68b9      	ldr	r1, [r7, #8]
 80136a0:	69b8      	ldr	r0, [r7, #24]
 80136a2:	f7ff fed9 	bl	8013458 <put_fat>
 80136a6:	4603      	mov	r3, r0
 80136a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80136aa:	7ffb      	ldrb	r3, [r7, #31]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d001      	beq.n	80136b4 <remove_chain+0x88>
 80136b0:	7ffb      	ldrb	r3, [r7, #31]
 80136b2:	e01c      	b.n	80136ee <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80136b4:	69bb      	ldr	r3, [r7, #24]
 80136b6:	699a      	ldr	r2, [r3, #24]
 80136b8:	69bb      	ldr	r3, [r7, #24]
 80136ba:	6a1b      	ldr	r3, [r3, #32]
 80136bc:	3b02      	subs	r3, #2
 80136be:	429a      	cmp	r2, r3
 80136c0:	d20b      	bcs.n	80136da <remove_chain+0xae>
			fs->free_clst++;
 80136c2:	69bb      	ldr	r3, [r7, #24]
 80136c4:	699b      	ldr	r3, [r3, #24]
 80136c6:	1c5a      	adds	r2, r3, #1
 80136c8:	69bb      	ldr	r3, [r7, #24]
 80136ca:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80136cc:	69bb      	ldr	r3, [r7, #24]
 80136ce:	791b      	ldrb	r3, [r3, #4]
 80136d0:	f043 0301 	orr.w	r3, r3, #1
 80136d4:	b2da      	uxtb	r2, r3
 80136d6:	69bb      	ldr	r3, [r7, #24]
 80136d8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80136da:	697b      	ldr	r3, [r7, #20]
 80136dc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80136de:	69bb      	ldr	r3, [r7, #24]
 80136e0:	6a1b      	ldr	r3, [r3, #32]
 80136e2:	68ba      	ldr	r2, [r7, #8]
 80136e4:	429a      	cmp	r2, r3
 80136e6:	d3c6      	bcc.n	8013676 <remove_chain+0x4a>
 80136e8:	e000      	b.n	80136ec <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80136ea:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80136ec:	2300      	movs	r3, #0
}
 80136ee:	4618      	mov	r0, r3
 80136f0:	3720      	adds	r7, #32
 80136f2:	46bd      	mov	sp, r7
 80136f4:	bd80      	pop	{r7, pc}

080136f6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80136f6:	b580      	push	{r7, lr}
 80136f8:	b088      	sub	sp, #32
 80136fa:	af00      	add	r7, sp, #0
 80136fc:	6078      	str	r0, [r7, #4]
 80136fe:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8013706:	683b      	ldr	r3, [r7, #0]
 8013708:	2b00      	cmp	r3, #0
 801370a:	d10d      	bne.n	8013728 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801370c:	693b      	ldr	r3, [r7, #16]
 801370e:	695b      	ldr	r3, [r3, #20]
 8013710:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8013712:	69bb      	ldr	r3, [r7, #24]
 8013714:	2b00      	cmp	r3, #0
 8013716:	d004      	beq.n	8013722 <create_chain+0x2c>
 8013718:	693b      	ldr	r3, [r7, #16]
 801371a:	6a1b      	ldr	r3, [r3, #32]
 801371c:	69ba      	ldr	r2, [r7, #24]
 801371e:	429a      	cmp	r2, r3
 8013720:	d31b      	bcc.n	801375a <create_chain+0x64>
 8013722:	2301      	movs	r3, #1
 8013724:	61bb      	str	r3, [r7, #24]
 8013726:	e018      	b.n	801375a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8013728:	6839      	ldr	r1, [r7, #0]
 801372a:	6878      	ldr	r0, [r7, #4]
 801372c:	f7ff fded 	bl	801330a <get_fat>
 8013730:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	2b01      	cmp	r3, #1
 8013736:	d801      	bhi.n	801373c <create_chain+0x46>
 8013738:	2301      	movs	r3, #1
 801373a:	e070      	b.n	801381e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013742:	d101      	bne.n	8013748 <create_chain+0x52>
 8013744:	68fb      	ldr	r3, [r7, #12]
 8013746:	e06a      	b.n	801381e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8013748:	693b      	ldr	r3, [r7, #16]
 801374a:	6a1b      	ldr	r3, [r3, #32]
 801374c:	68fa      	ldr	r2, [r7, #12]
 801374e:	429a      	cmp	r2, r3
 8013750:	d201      	bcs.n	8013756 <create_chain+0x60>
 8013752:	68fb      	ldr	r3, [r7, #12]
 8013754:	e063      	b.n	801381e <create_chain+0x128>
		scl = clst;
 8013756:	683b      	ldr	r3, [r7, #0]
 8013758:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801375a:	69bb      	ldr	r3, [r7, #24]
 801375c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801375e:	69fb      	ldr	r3, [r7, #28]
 8013760:	3301      	adds	r3, #1
 8013762:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8013764:	693b      	ldr	r3, [r7, #16]
 8013766:	6a1b      	ldr	r3, [r3, #32]
 8013768:	69fa      	ldr	r2, [r7, #28]
 801376a:	429a      	cmp	r2, r3
 801376c:	d307      	bcc.n	801377e <create_chain+0x88>
				ncl = 2;
 801376e:	2302      	movs	r3, #2
 8013770:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8013772:	69fa      	ldr	r2, [r7, #28]
 8013774:	69bb      	ldr	r3, [r7, #24]
 8013776:	429a      	cmp	r2, r3
 8013778:	d901      	bls.n	801377e <create_chain+0x88>
 801377a:	2300      	movs	r3, #0
 801377c:	e04f      	b.n	801381e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801377e:	69f9      	ldr	r1, [r7, #28]
 8013780:	6878      	ldr	r0, [r7, #4]
 8013782:	f7ff fdc2 	bl	801330a <get_fat>
 8013786:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8013788:	68fb      	ldr	r3, [r7, #12]
 801378a:	2b00      	cmp	r3, #0
 801378c:	d00e      	beq.n	80137ac <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	2b01      	cmp	r3, #1
 8013792:	d003      	beq.n	801379c <create_chain+0xa6>
 8013794:	68fb      	ldr	r3, [r7, #12]
 8013796:	f1b3 3fff 	cmp.w	r3, #4294967295
 801379a:	d101      	bne.n	80137a0 <create_chain+0xaa>
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	e03e      	b.n	801381e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80137a0:	69fa      	ldr	r2, [r7, #28]
 80137a2:	69bb      	ldr	r3, [r7, #24]
 80137a4:	429a      	cmp	r2, r3
 80137a6:	d1da      	bne.n	801375e <create_chain+0x68>
 80137a8:	2300      	movs	r3, #0
 80137aa:	e038      	b.n	801381e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80137ac:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80137ae:	f04f 32ff 	mov.w	r2, #4294967295
 80137b2:	69f9      	ldr	r1, [r7, #28]
 80137b4:	6938      	ldr	r0, [r7, #16]
 80137b6:	f7ff fe4f 	bl	8013458 <put_fat>
 80137ba:	4603      	mov	r3, r0
 80137bc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80137be:	7dfb      	ldrb	r3, [r7, #23]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d109      	bne.n	80137d8 <create_chain+0xe2>
 80137c4:	683b      	ldr	r3, [r7, #0]
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d006      	beq.n	80137d8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80137ca:	69fa      	ldr	r2, [r7, #28]
 80137cc:	6839      	ldr	r1, [r7, #0]
 80137ce:	6938      	ldr	r0, [r7, #16]
 80137d0:	f7ff fe42 	bl	8013458 <put_fat>
 80137d4:	4603      	mov	r3, r0
 80137d6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80137d8:	7dfb      	ldrb	r3, [r7, #23]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d116      	bne.n	801380c <create_chain+0x116>
		fs->last_clst = ncl;
 80137de:	693b      	ldr	r3, [r7, #16]
 80137e0:	69fa      	ldr	r2, [r7, #28]
 80137e2:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80137e4:	693b      	ldr	r3, [r7, #16]
 80137e6:	699a      	ldr	r2, [r3, #24]
 80137e8:	693b      	ldr	r3, [r7, #16]
 80137ea:	6a1b      	ldr	r3, [r3, #32]
 80137ec:	3b02      	subs	r3, #2
 80137ee:	429a      	cmp	r2, r3
 80137f0:	d804      	bhi.n	80137fc <create_chain+0x106>
 80137f2:	693b      	ldr	r3, [r7, #16]
 80137f4:	699b      	ldr	r3, [r3, #24]
 80137f6:	1e5a      	subs	r2, r3, #1
 80137f8:	693b      	ldr	r3, [r7, #16]
 80137fa:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80137fc:	693b      	ldr	r3, [r7, #16]
 80137fe:	791b      	ldrb	r3, [r3, #4]
 8013800:	f043 0301 	orr.w	r3, r3, #1
 8013804:	b2da      	uxtb	r2, r3
 8013806:	693b      	ldr	r3, [r7, #16]
 8013808:	711a      	strb	r2, [r3, #4]
 801380a:	e007      	b.n	801381c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801380c:	7dfb      	ldrb	r3, [r7, #23]
 801380e:	2b01      	cmp	r3, #1
 8013810:	d102      	bne.n	8013818 <create_chain+0x122>
 8013812:	f04f 33ff 	mov.w	r3, #4294967295
 8013816:	e000      	b.n	801381a <create_chain+0x124>
 8013818:	2301      	movs	r3, #1
 801381a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801381c:	69fb      	ldr	r3, [r7, #28]
}
 801381e:	4618      	mov	r0, r3
 8013820:	3720      	adds	r7, #32
 8013822:	46bd      	mov	sp, r7
 8013824:	bd80      	pop	{r7, pc}

08013826 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8013826:	b480      	push	{r7}
 8013828:	b087      	sub	sp, #28
 801382a:	af00      	add	r7, sp, #0
 801382c:	6078      	str	r0, [r7, #4]
 801382e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801383a:	3304      	adds	r3, #4
 801383c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801383e:	683b      	ldr	r3, [r7, #0]
 8013840:	0a5b      	lsrs	r3, r3, #9
 8013842:	68fa      	ldr	r2, [r7, #12]
 8013844:	8952      	ldrh	r2, [r2, #10]
 8013846:	fbb3 f3f2 	udiv	r3, r3, r2
 801384a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801384c:	693b      	ldr	r3, [r7, #16]
 801384e:	1d1a      	adds	r2, r3, #4
 8013850:	613a      	str	r2, [r7, #16]
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8013856:	68bb      	ldr	r3, [r7, #8]
 8013858:	2b00      	cmp	r3, #0
 801385a:	d101      	bne.n	8013860 <clmt_clust+0x3a>
 801385c:	2300      	movs	r3, #0
 801385e:	e010      	b.n	8013882 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8013860:	697a      	ldr	r2, [r7, #20]
 8013862:	68bb      	ldr	r3, [r7, #8]
 8013864:	429a      	cmp	r2, r3
 8013866:	d307      	bcc.n	8013878 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8013868:	697a      	ldr	r2, [r7, #20]
 801386a:	68bb      	ldr	r3, [r7, #8]
 801386c:	1ad3      	subs	r3, r2, r3
 801386e:	617b      	str	r3, [r7, #20]
 8013870:	693b      	ldr	r3, [r7, #16]
 8013872:	3304      	adds	r3, #4
 8013874:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013876:	e7e9      	b.n	801384c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8013878:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801387a:	693b      	ldr	r3, [r7, #16]
 801387c:	681a      	ldr	r2, [r3, #0]
 801387e:	697b      	ldr	r3, [r7, #20]
 8013880:	4413      	add	r3, r2
}
 8013882:	4618      	mov	r0, r3
 8013884:	371c      	adds	r7, #28
 8013886:	46bd      	mov	sp, r7
 8013888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801388c:	4770      	bx	lr

0801388e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801388e:	b580      	push	{r7, lr}
 8013890:	b086      	sub	sp, #24
 8013892:	af00      	add	r7, sp, #0
 8013894:	6078      	str	r0, [r7, #4]
 8013896:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801389e:	683b      	ldr	r3, [r7, #0]
 80138a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80138a4:	d204      	bcs.n	80138b0 <dir_sdi+0x22>
 80138a6:	683b      	ldr	r3, [r7, #0]
 80138a8:	f003 031f 	and.w	r3, r3, #31
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d001      	beq.n	80138b4 <dir_sdi+0x26>
		return FR_INT_ERR;
 80138b0:	2302      	movs	r3, #2
 80138b2:	e063      	b.n	801397c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	683a      	ldr	r2, [r7, #0]
 80138b8:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	689b      	ldr	r3, [r3, #8]
 80138be:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80138c0:	697b      	ldr	r3, [r7, #20]
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d106      	bne.n	80138d4 <dir_sdi+0x46>
 80138c6:	693b      	ldr	r3, [r7, #16]
 80138c8:	781b      	ldrb	r3, [r3, #0]
 80138ca:	2b02      	cmp	r3, #2
 80138cc:	d902      	bls.n	80138d4 <dir_sdi+0x46>
		clst = fs->dirbase;
 80138ce:	693b      	ldr	r3, [r7, #16]
 80138d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80138d2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80138d4:	697b      	ldr	r3, [r7, #20]
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d10c      	bne.n	80138f4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80138da:	683b      	ldr	r3, [r7, #0]
 80138dc:	095b      	lsrs	r3, r3, #5
 80138de:	693a      	ldr	r2, [r7, #16]
 80138e0:	8912      	ldrh	r2, [r2, #8]
 80138e2:	4293      	cmp	r3, r2
 80138e4:	d301      	bcc.n	80138ea <dir_sdi+0x5c>
 80138e6:	2302      	movs	r3, #2
 80138e8:	e048      	b.n	801397c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80138ea:	693b      	ldr	r3, [r7, #16]
 80138ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	619a      	str	r2, [r3, #24]
 80138f2:	e029      	b.n	8013948 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80138f4:	693b      	ldr	r3, [r7, #16]
 80138f6:	895b      	ldrh	r3, [r3, #10]
 80138f8:	025b      	lsls	r3, r3, #9
 80138fa:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80138fc:	e019      	b.n	8013932 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	6979      	ldr	r1, [r7, #20]
 8013902:	4618      	mov	r0, r3
 8013904:	f7ff fd01 	bl	801330a <get_fat>
 8013908:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801390a:	697b      	ldr	r3, [r7, #20]
 801390c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013910:	d101      	bne.n	8013916 <dir_sdi+0x88>
 8013912:	2301      	movs	r3, #1
 8013914:	e032      	b.n	801397c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8013916:	697b      	ldr	r3, [r7, #20]
 8013918:	2b01      	cmp	r3, #1
 801391a:	d904      	bls.n	8013926 <dir_sdi+0x98>
 801391c:	693b      	ldr	r3, [r7, #16]
 801391e:	6a1b      	ldr	r3, [r3, #32]
 8013920:	697a      	ldr	r2, [r7, #20]
 8013922:	429a      	cmp	r2, r3
 8013924:	d301      	bcc.n	801392a <dir_sdi+0x9c>
 8013926:	2302      	movs	r3, #2
 8013928:	e028      	b.n	801397c <dir_sdi+0xee>
			ofs -= csz;
 801392a:	683a      	ldr	r2, [r7, #0]
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	1ad3      	subs	r3, r2, r3
 8013930:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013932:	683a      	ldr	r2, [r7, #0]
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	429a      	cmp	r2, r3
 8013938:	d2e1      	bcs.n	80138fe <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 801393a:	6979      	ldr	r1, [r7, #20]
 801393c:	6938      	ldr	r0, [r7, #16]
 801393e:	f7ff fcc5 	bl	80132cc <clust2sect>
 8013942:	4602      	mov	r2, r0
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	697a      	ldr	r2, [r7, #20]
 801394c:	615a      	str	r2, [r3, #20]
	if (!dp->sect) return FR_INT_ERR;
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	699b      	ldr	r3, [r3, #24]
 8013952:	2b00      	cmp	r3, #0
 8013954:	d101      	bne.n	801395a <dir_sdi+0xcc>
 8013956:	2302      	movs	r3, #2
 8013958:	e010      	b.n	801397c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	699a      	ldr	r2, [r3, #24]
 801395e:	683b      	ldr	r3, [r7, #0]
 8013960:	0a5b      	lsrs	r3, r3, #9
 8013962:	441a      	add	r2, r3
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8013968:	693b      	ldr	r3, [r7, #16]
 801396a:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 801396e:	683b      	ldr	r3, [r7, #0]
 8013970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013974:	441a      	add	r2, r3
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	61da      	str	r2, [r3, #28]

	return FR_OK;
 801397a:	2300      	movs	r3, #0
}
 801397c:	4618      	mov	r0, r3
 801397e:	3718      	adds	r7, #24
 8013980:	46bd      	mov	sp, r7
 8013982:	bd80      	pop	{r7, pc}

08013984 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8013984:	b580      	push	{r7, lr}
 8013986:	b086      	sub	sp, #24
 8013988:	af00      	add	r7, sp, #0
 801398a:	6078      	str	r0, [r7, #4]
 801398c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	691b      	ldr	r3, [r3, #16]
 8013998:	3320      	adds	r3, #32
 801399a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	699b      	ldr	r3, [r3, #24]
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d003      	beq.n	80139ac <dir_next+0x28>
 80139a4:	68bb      	ldr	r3, [r7, #8]
 80139a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80139aa:	d301      	bcc.n	80139b0 <dir_next+0x2c>
 80139ac:	2304      	movs	r3, #4
 80139ae:	e0aa      	b.n	8013b06 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80139b0:	68bb      	ldr	r3, [r7, #8]
 80139b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	f040 8098 	bne.w	8013aec <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	699b      	ldr	r3, [r3, #24]
 80139c0:	1c5a      	adds	r2, r3, #1
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	619a      	str	r2, [r3, #24]

		if (!dp->clust) {		/* Static table */
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	695b      	ldr	r3, [r3, #20]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d10b      	bne.n	80139e6 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80139ce:	68bb      	ldr	r3, [r7, #8]
 80139d0:	095b      	lsrs	r3, r3, #5
 80139d2:	68fa      	ldr	r2, [r7, #12]
 80139d4:	8912      	ldrh	r2, [r2, #8]
 80139d6:	4293      	cmp	r3, r2
 80139d8:	f0c0 8088 	bcc.w	8013aec <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	2200      	movs	r2, #0
 80139e0:	619a      	str	r2, [r3, #24]
 80139e2:	2304      	movs	r3, #4
 80139e4:	e08f      	b.n	8013b06 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80139e6:	68bb      	ldr	r3, [r7, #8]
 80139e8:	0a5b      	lsrs	r3, r3, #9
 80139ea:	68fa      	ldr	r2, [r7, #12]
 80139ec:	8952      	ldrh	r2, [r2, #10]
 80139ee:	3a01      	subs	r2, #1
 80139f0:	4013      	ands	r3, r2
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d17a      	bne.n	8013aec <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80139f6:	687a      	ldr	r2, [r7, #4]
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	695b      	ldr	r3, [r3, #20]
 80139fc:	4619      	mov	r1, r3
 80139fe:	4610      	mov	r0, r2
 8013a00:	f7ff fc83 	bl	801330a <get_fat>
 8013a04:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8013a06:	697b      	ldr	r3, [r7, #20]
 8013a08:	2b01      	cmp	r3, #1
 8013a0a:	d801      	bhi.n	8013a10 <dir_next+0x8c>
 8013a0c:	2302      	movs	r3, #2
 8013a0e:	e07a      	b.n	8013b06 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8013a10:	697b      	ldr	r3, [r7, #20]
 8013a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a16:	d101      	bne.n	8013a1c <dir_next+0x98>
 8013a18:	2301      	movs	r3, #1
 8013a1a:	e074      	b.n	8013b06 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	6a1b      	ldr	r3, [r3, #32]
 8013a20:	697a      	ldr	r2, [r7, #20]
 8013a22:	429a      	cmp	r2, r3
 8013a24:	d358      	bcc.n	8013ad8 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8013a26:	683b      	ldr	r3, [r7, #0]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d104      	bne.n	8013a36 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	2200      	movs	r2, #0
 8013a30:	619a      	str	r2, [r3, #24]
 8013a32:	2304      	movs	r3, #4
 8013a34:	e067      	b.n	8013b06 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8013a36:	687a      	ldr	r2, [r7, #4]
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	695b      	ldr	r3, [r3, #20]
 8013a3c:	4619      	mov	r1, r3
 8013a3e:	4610      	mov	r0, r2
 8013a40:	f7ff fe59 	bl	80136f6 <create_chain>
 8013a44:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8013a46:	697b      	ldr	r3, [r7, #20]
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d101      	bne.n	8013a50 <dir_next+0xcc>
 8013a4c:	2307      	movs	r3, #7
 8013a4e:	e05a      	b.n	8013b06 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8013a50:	697b      	ldr	r3, [r7, #20]
 8013a52:	2b01      	cmp	r3, #1
 8013a54:	d101      	bne.n	8013a5a <dir_next+0xd6>
 8013a56:	2302      	movs	r3, #2
 8013a58:	e055      	b.n	8013b06 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013a5a:	697b      	ldr	r3, [r7, #20]
 8013a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a60:	d101      	bne.n	8013a66 <dir_next+0xe2>
 8013a62:	2301      	movs	r3, #1
 8013a64:	e04f      	b.n	8013b06 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8013a66:	68f8      	ldr	r0, [r7, #12]
 8013a68:	f7ff fb50 	bl	801310c <sync_window>
 8013a6c:	4603      	mov	r3, r0
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d001      	beq.n	8013a76 <dir_next+0xf2>
 8013a72:	2301      	movs	r3, #1
 8013a74:	e047      	b.n	8013b06 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	333c      	adds	r3, #60	@ 0x3c
 8013a7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013a7e:	2100      	movs	r1, #0
 8013a80:	4618      	mov	r0, r3
 8013a82:	f7ff fab5 	bl	8012ff0 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013a86:	2300      	movs	r3, #0
 8013a88:	613b      	str	r3, [r7, #16]
 8013a8a:	6979      	ldr	r1, [r7, #20]
 8013a8c:	68f8      	ldr	r0, [r7, #12]
 8013a8e:	f7ff fc1d 	bl	80132cc <clust2sect>
 8013a92:	4602      	mov	r2, r0
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	639a      	str	r2, [r3, #56]	@ 0x38
 8013a98:	e012      	b.n	8013ac0 <dir_next+0x13c>
						fs->wflag = 1;
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	2201      	movs	r2, #1
 8013a9e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8013aa0:	68f8      	ldr	r0, [r7, #12]
 8013aa2:	f7ff fb33 	bl	801310c <sync_window>
 8013aa6:	4603      	mov	r3, r0
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d001      	beq.n	8013ab0 <dir_next+0x12c>
 8013aac:	2301      	movs	r3, #1
 8013aae:	e02a      	b.n	8013b06 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013ab0:	693b      	ldr	r3, [r7, #16]
 8013ab2:	3301      	adds	r3, #1
 8013ab4:	613b      	str	r3, [r7, #16]
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013aba:	1c5a      	adds	r2, r3, #1
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	639a      	str	r2, [r3, #56]	@ 0x38
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	895b      	ldrh	r3, [r3, #10]
 8013ac4:	461a      	mov	r2, r3
 8013ac6:	693b      	ldr	r3, [r7, #16]
 8013ac8:	4293      	cmp	r3, r2
 8013aca:	d3e6      	bcc.n	8013a9a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013ad0:	693b      	ldr	r3, [r7, #16]
 8013ad2:	1ad2      	subs	r2, r2, r3
 8013ad4:	68fb      	ldr	r3, [r7, #12]
 8013ad6:	639a      	str	r2, [r3, #56]	@ 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	697a      	ldr	r2, [r7, #20]
 8013adc:	615a      	str	r2, [r3, #20]
				dp->sect = clust2sect(fs, clst);
 8013ade:	6979      	ldr	r1, [r7, #20]
 8013ae0:	68f8      	ldr	r0, [r7, #12]
 8013ae2:	f7ff fbf3 	bl	80132cc <clust2sect>
 8013ae6:	4602      	mov	r2, r0
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	68ba      	ldr	r2, [r7, #8]
 8013af0:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8013af8:	68bb      	ldr	r3, [r7, #8]
 8013afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013afe:	441a      	add	r2, r3
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8013b04:	2300      	movs	r3, #0
}
 8013b06:	4618      	mov	r0, r3
 8013b08:	3718      	adds	r7, #24
 8013b0a:	46bd      	mov	sp, r7
 8013b0c:	bd80      	pop	{r7, pc}

08013b0e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8013b0e:	b580      	push	{r7, lr}
 8013b10:	b086      	sub	sp, #24
 8013b12:	af00      	add	r7, sp, #0
 8013b14:	6078      	str	r0, [r7, #4]
 8013b16:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8013b1e:	2100      	movs	r1, #0
 8013b20:	6878      	ldr	r0, [r7, #4]
 8013b22:	f7ff feb4 	bl	801388e <dir_sdi>
 8013b26:	4603      	mov	r3, r0
 8013b28:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013b2a:	7dfb      	ldrb	r3, [r7, #23]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d12b      	bne.n	8013b88 <dir_alloc+0x7a>
		n = 0;
 8013b30:	2300      	movs	r3, #0
 8013b32:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	699b      	ldr	r3, [r3, #24]
 8013b38:	4619      	mov	r1, r3
 8013b3a:	68f8      	ldr	r0, [r7, #12]
 8013b3c:	f7ff fb2a 	bl	8013194 <move_window>
 8013b40:	4603      	mov	r3, r0
 8013b42:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013b44:	7dfb      	ldrb	r3, [r7, #23]
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d11d      	bne.n	8013b86 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	69db      	ldr	r3, [r3, #28]
 8013b4e:	781b      	ldrb	r3, [r3, #0]
 8013b50:	2be5      	cmp	r3, #229	@ 0xe5
 8013b52:	d004      	beq.n	8013b5e <dir_alloc+0x50>
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	69db      	ldr	r3, [r3, #28]
 8013b58:	781b      	ldrb	r3, [r3, #0]
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d107      	bne.n	8013b6e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8013b5e:	693b      	ldr	r3, [r7, #16]
 8013b60:	3301      	adds	r3, #1
 8013b62:	613b      	str	r3, [r7, #16]
 8013b64:	693a      	ldr	r2, [r7, #16]
 8013b66:	683b      	ldr	r3, [r7, #0]
 8013b68:	429a      	cmp	r2, r3
 8013b6a:	d102      	bne.n	8013b72 <dir_alloc+0x64>
 8013b6c:	e00c      	b.n	8013b88 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8013b6e:	2300      	movs	r3, #0
 8013b70:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8013b72:	2101      	movs	r1, #1
 8013b74:	6878      	ldr	r0, [r7, #4]
 8013b76:	f7ff ff05 	bl	8013984 <dir_next>
 8013b7a:	4603      	mov	r3, r0
 8013b7c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8013b7e:	7dfb      	ldrb	r3, [r7, #23]
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d0d7      	beq.n	8013b34 <dir_alloc+0x26>
 8013b84:	e000      	b.n	8013b88 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8013b86:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8013b88:	7dfb      	ldrb	r3, [r7, #23]
 8013b8a:	2b04      	cmp	r3, #4
 8013b8c:	d101      	bne.n	8013b92 <dir_alloc+0x84>
 8013b8e:	2307      	movs	r3, #7
 8013b90:	75fb      	strb	r3, [r7, #23]
	return res;
 8013b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b94:	4618      	mov	r0, r3
 8013b96:	3718      	adds	r7, #24
 8013b98:	46bd      	mov	sp, r7
 8013b9a:	bd80      	pop	{r7, pc}

08013b9c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8013b9c:	b580      	push	{r7, lr}
 8013b9e:	b084      	sub	sp, #16
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	6078      	str	r0, [r7, #4]
 8013ba4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8013ba6:	683b      	ldr	r3, [r7, #0]
 8013ba8:	331a      	adds	r3, #26
 8013baa:	4618      	mov	r0, r3
 8013bac:	f7ff f97c 	bl	8012ea8 <ld_word>
 8013bb0:	4603      	mov	r3, r0
 8013bb2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	781b      	ldrb	r3, [r3, #0]
 8013bb8:	2b03      	cmp	r3, #3
 8013bba:	d109      	bne.n	8013bd0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8013bbc:	683b      	ldr	r3, [r7, #0]
 8013bbe:	3314      	adds	r3, #20
 8013bc0:	4618      	mov	r0, r3
 8013bc2:	f7ff f971 	bl	8012ea8 <ld_word>
 8013bc6:	4603      	mov	r3, r0
 8013bc8:	041b      	lsls	r3, r3, #16
 8013bca:	68fa      	ldr	r2, [r7, #12]
 8013bcc:	4313      	orrs	r3, r2
 8013bce:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8013bd0:	68fb      	ldr	r3, [r7, #12]
}
 8013bd2:	4618      	mov	r0, r3
 8013bd4:	3710      	adds	r7, #16
 8013bd6:	46bd      	mov	sp, r7
 8013bd8:	bd80      	pop	{r7, pc}

08013bda <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8013bda:	b580      	push	{r7, lr}
 8013bdc:	b084      	sub	sp, #16
 8013bde:	af00      	add	r7, sp, #0
 8013be0:	60f8      	str	r0, [r7, #12]
 8013be2:	60b9      	str	r1, [r7, #8]
 8013be4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8013be6:	68bb      	ldr	r3, [r7, #8]
 8013be8:	331a      	adds	r3, #26
 8013bea:	687a      	ldr	r2, [r7, #4]
 8013bec:	b292      	uxth	r2, r2
 8013bee:	4611      	mov	r1, r2
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	f7ff f995 	bl	8012f20 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	781b      	ldrb	r3, [r3, #0]
 8013bfa:	2b03      	cmp	r3, #3
 8013bfc:	d109      	bne.n	8013c12 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8013bfe:	68bb      	ldr	r3, [r7, #8]
 8013c00:	f103 0214 	add.w	r2, r3, #20
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	0c1b      	lsrs	r3, r3, #16
 8013c08:	b29b      	uxth	r3, r3
 8013c0a:	4619      	mov	r1, r3
 8013c0c:	4610      	mov	r0, r2
 8013c0e:	f7ff f987 	bl	8012f20 <st_word>
	}
}
 8013c12:	bf00      	nop
 8013c14:	3710      	adds	r7, #16
 8013c16:	46bd      	mov	sp, r7
 8013c18:	bd80      	pop	{r7, pc}
	...

08013c1c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8013c1c:	b590      	push	{r4, r7, lr}
 8013c1e:	b087      	sub	sp, #28
 8013c20:	af00      	add	r7, sp, #0
 8013c22:	6078      	str	r0, [r7, #4]
 8013c24:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8013c26:	683b      	ldr	r3, [r7, #0]
 8013c28:	331a      	adds	r3, #26
 8013c2a:	4618      	mov	r0, r3
 8013c2c:	f7ff f93c 	bl	8012ea8 <ld_word>
 8013c30:	4603      	mov	r3, r0
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d001      	beq.n	8013c3a <cmp_lfn+0x1e>
 8013c36:	2300      	movs	r3, #0
 8013c38:	e059      	b.n	8013cee <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8013c3a:	683b      	ldr	r3, [r7, #0]
 8013c3c:	781b      	ldrb	r3, [r3, #0]
 8013c3e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013c42:	1e5a      	subs	r2, r3, #1
 8013c44:	4613      	mov	r3, r2
 8013c46:	005b      	lsls	r3, r3, #1
 8013c48:	4413      	add	r3, r2
 8013c4a:	009b      	lsls	r3, r3, #2
 8013c4c:	4413      	add	r3, r2
 8013c4e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8013c50:	2301      	movs	r3, #1
 8013c52:	81fb      	strh	r3, [r7, #14]
 8013c54:	2300      	movs	r3, #0
 8013c56:	613b      	str	r3, [r7, #16]
 8013c58:	e033      	b.n	8013cc2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8013c5a:	4a27      	ldr	r2, [pc, #156]	@ (8013cf8 <cmp_lfn+0xdc>)
 8013c5c:	693b      	ldr	r3, [r7, #16]
 8013c5e:	4413      	add	r3, r2
 8013c60:	781b      	ldrb	r3, [r3, #0]
 8013c62:	461a      	mov	r2, r3
 8013c64:	683b      	ldr	r3, [r7, #0]
 8013c66:	4413      	add	r3, r2
 8013c68:	4618      	mov	r0, r3
 8013c6a:	f7ff f91d 	bl	8012ea8 <ld_word>
 8013c6e:	4603      	mov	r3, r0
 8013c70:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8013c72:	89fb      	ldrh	r3, [r7, #14]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d01a      	beq.n	8013cae <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8013c78:	697b      	ldr	r3, [r7, #20]
 8013c7a:	2bfe      	cmp	r3, #254	@ 0xfe
 8013c7c:	d812      	bhi.n	8013ca4 <cmp_lfn+0x88>
 8013c7e:	89bb      	ldrh	r3, [r7, #12]
 8013c80:	4618      	mov	r0, r3
 8013c82:	f002 ffdd 	bl	8016c40 <ff_wtoupper>
 8013c86:	4603      	mov	r3, r0
 8013c88:	461c      	mov	r4, r3
 8013c8a:	697b      	ldr	r3, [r7, #20]
 8013c8c:	1c5a      	adds	r2, r3, #1
 8013c8e:	617a      	str	r2, [r7, #20]
 8013c90:	005b      	lsls	r3, r3, #1
 8013c92:	687a      	ldr	r2, [r7, #4]
 8013c94:	4413      	add	r3, r2
 8013c96:	881b      	ldrh	r3, [r3, #0]
 8013c98:	4618      	mov	r0, r3
 8013c9a:	f002 ffd1 	bl	8016c40 <ff_wtoupper>
 8013c9e:	4603      	mov	r3, r0
 8013ca0:	429c      	cmp	r4, r3
 8013ca2:	d001      	beq.n	8013ca8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8013ca4:	2300      	movs	r3, #0
 8013ca6:	e022      	b.n	8013cee <cmp_lfn+0xd2>
			}
			wc = uc;
 8013ca8:	89bb      	ldrh	r3, [r7, #12]
 8013caa:	81fb      	strh	r3, [r7, #14]
 8013cac:	e006      	b.n	8013cbc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8013cae:	89bb      	ldrh	r3, [r7, #12]
 8013cb0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013cb4:	4293      	cmp	r3, r2
 8013cb6:	d001      	beq.n	8013cbc <cmp_lfn+0xa0>
 8013cb8:	2300      	movs	r3, #0
 8013cba:	e018      	b.n	8013cee <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8013cbc:	693b      	ldr	r3, [r7, #16]
 8013cbe:	3301      	adds	r3, #1
 8013cc0:	613b      	str	r3, [r7, #16]
 8013cc2:	693b      	ldr	r3, [r7, #16]
 8013cc4:	2b0c      	cmp	r3, #12
 8013cc6:	d9c8      	bls.n	8013c5a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8013cc8:	683b      	ldr	r3, [r7, #0]
 8013cca:	781b      	ldrb	r3, [r3, #0]
 8013ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d00b      	beq.n	8013cec <cmp_lfn+0xd0>
 8013cd4:	89fb      	ldrh	r3, [r7, #14]
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d008      	beq.n	8013cec <cmp_lfn+0xd0>
 8013cda:	697b      	ldr	r3, [r7, #20]
 8013cdc:	005b      	lsls	r3, r3, #1
 8013cde:	687a      	ldr	r2, [r7, #4]
 8013ce0:	4413      	add	r3, r2
 8013ce2:	881b      	ldrh	r3, [r3, #0]
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d001      	beq.n	8013cec <cmp_lfn+0xd0>
 8013ce8:	2300      	movs	r3, #0
 8013cea:	e000      	b.n	8013cee <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8013cec:	2301      	movs	r3, #1
}
 8013cee:	4618      	mov	r0, r3
 8013cf0:	371c      	adds	r7, #28
 8013cf2:	46bd      	mov	sp, r7
 8013cf4:	bd90      	pop	{r4, r7, pc}
 8013cf6:	bf00      	nop
 8013cf8:	08019c10 	.word	0x08019c10

08013cfc <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8013cfc:	b580      	push	{r7, lr}
 8013cfe:	b086      	sub	sp, #24
 8013d00:	af00      	add	r7, sp, #0
 8013d02:	6078      	str	r0, [r7, #4]
 8013d04:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8013d06:	683b      	ldr	r3, [r7, #0]
 8013d08:	331a      	adds	r3, #26
 8013d0a:	4618      	mov	r0, r3
 8013d0c:	f7ff f8cc 	bl	8012ea8 <ld_word>
 8013d10:	4603      	mov	r3, r0
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d001      	beq.n	8013d1a <pick_lfn+0x1e>
 8013d16:	2300      	movs	r3, #0
 8013d18:	e04d      	b.n	8013db6 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8013d1a:	683b      	ldr	r3, [r7, #0]
 8013d1c:	781b      	ldrb	r3, [r3, #0]
 8013d1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013d22:	1e5a      	subs	r2, r3, #1
 8013d24:	4613      	mov	r3, r2
 8013d26:	005b      	lsls	r3, r3, #1
 8013d28:	4413      	add	r3, r2
 8013d2a:	009b      	lsls	r3, r3, #2
 8013d2c:	4413      	add	r3, r2
 8013d2e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8013d30:	2301      	movs	r3, #1
 8013d32:	81fb      	strh	r3, [r7, #14]
 8013d34:	2300      	movs	r3, #0
 8013d36:	613b      	str	r3, [r7, #16]
 8013d38:	e028      	b.n	8013d8c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8013d3a:	4a21      	ldr	r2, [pc, #132]	@ (8013dc0 <pick_lfn+0xc4>)
 8013d3c:	693b      	ldr	r3, [r7, #16]
 8013d3e:	4413      	add	r3, r2
 8013d40:	781b      	ldrb	r3, [r3, #0]
 8013d42:	461a      	mov	r2, r3
 8013d44:	683b      	ldr	r3, [r7, #0]
 8013d46:	4413      	add	r3, r2
 8013d48:	4618      	mov	r0, r3
 8013d4a:	f7ff f8ad 	bl	8012ea8 <ld_word>
 8013d4e:	4603      	mov	r3, r0
 8013d50:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8013d52:	89fb      	ldrh	r3, [r7, #14]
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d00f      	beq.n	8013d78 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8013d58:	697b      	ldr	r3, [r7, #20]
 8013d5a:	2bfe      	cmp	r3, #254	@ 0xfe
 8013d5c:	d901      	bls.n	8013d62 <pick_lfn+0x66>
 8013d5e:	2300      	movs	r3, #0
 8013d60:	e029      	b.n	8013db6 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8013d62:	89bb      	ldrh	r3, [r7, #12]
 8013d64:	81fb      	strh	r3, [r7, #14]
 8013d66:	697b      	ldr	r3, [r7, #20]
 8013d68:	1c5a      	adds	r2, r3, #1
 8013d6a:	617a      	str	r2, [r7, #20]
 8013d6c:	005b      	lsls	r3, r3, #1
 8013d6e:	687a      	ldr	r2, [r7, #4]
 8013d70:	4413      	add	r3, r2
 8013d72:	89fa      	ldrh	r2, [r7, #14]
 8013d74:	801a      	strh	r2, [r3, #0]
 8013d76:	e006      	b.n	8013d86 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8013d78:	89bb      	ldrh	r3, [r7, #12]
 8013d7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013d7e:	4293      	cmp	r3, r2
 8013d80:	d001      	beq.n	8013d86 <pick_lfn+0x8a>
 8013d82:	2300      	movs	r3, #0
 8013d84:	e017      	b.n	8013db6 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8013d86:	693b      	ldr	r3, [r7, #16]
 8013d88:	3301      	adds	r3, #1
 8013d8a:	613b      	str	r3, [r7, #16]
 8013d8c:	693b      	ldr	r3, [r7, #16]
 8013d8e:	2b0c      	cmp	r3, #12
 8013d90:	d9d3      	bls.n	8013d3a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8013d92:	683b      	ldr	r3, [r7, #0]
 8013d94:	781b      	ldrb	r3, [r3, #0]
 8013d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d00a      	beq.n	8013db4 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8013d9e:	697b      	ldr	r3, [r7, #20]
 8013da0:	2bfe      	cmp	r3, #254	@ 0xfe
 8013da2:	d901      	bls.n	8013da8 <pick_lfn+0xac>
 8013da4:	2300      	movs	r3, #0
 8013da6:	e006      	b.n	8013db6 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8013da8:	697b      	ldr	r3, [r7, #20]
 8013daa:	005b      	lsls	r3, r3, #1
 8013dac:	687a      	ldr	r2, [r7, #4]
 8013dae:	4413      	add	r3, r2
 8013db0:	2200      	movs	r2, #0
 8013db2:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8013db4:	2301      	movs	r3, #1
}
 8013db6:	4618      	mov	r0, r3
 8013db8:	3718      	adds	r7, #24
 8013dba:	46bd      	mov	sp, r7
 8013dbc:	bd80      	pop	{r7, pc}
 8013dbe:	bf00      	nop
 8013dc0:	08019c10 	.word	0x08019c10

08013dc4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8013dc4:	b580      	push	{r7, lr}
 8013dc6:	b088      	sub	sp, #32
 8013dc8:	af00      	add	r7, sp, #0
 8013dca:	60f8      	str	r0, [r7, #12]
 8013dcc:	60b9      	str	r1, [r7, #8]
 8013dce:	4611      	mov	r1, r2
 8013dd0:	461a      	mov	r2, r3
 8013dd2:	460b      	mov	r3, r1
 8013dd4:	71fb      	strb	r3, [r7, #7]
 8013dd6:	4613      	mov	r3, r2
 8013dd8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8013dda:	68bb      	ldr	r3, [r7, #8]
 8013ddc:	330d      	adds	r3, #13
 8013dde:	79ba      	ldrb	r2, [r7, #6]
 8013de0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8013de2:	68bb      	ldr	r3, [r7, #8]
 8013de4:	330b      	adds	r3, #11
 8013de6:	220f      	movs	r2, #15
 8013de8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8013dea:	68bb      	ldr	r3, [r7, #8]
 8013dec:	330c      	adds	r3, #12
 8013dee:	2200      	movs	r2, #0
 8013df0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8013df2:	68bb      	ldr	r3, [r7, #8]
 8013df4:	331a      	adds	r3, #26
 8013df6:	2100      	movs	r1, #0
 8013df8:	4618      	mov	r0, r3
 8013dfa:	f7ff f891 	bl	8012f20 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8013dfe:	79fb      	ldrb	r3, [r7, #7]
 8013e00:	1e5a      	subs	r2, r3, #1
 8013e02:	4613      	mov	r3, r2
 8013e04:	005b      	lsls	r3, r3, #1
 8013e06:	4413      	add	r3, r2
 8013e08:	009b      	lsls	r3, r3, #2
 8013e0a:	4413      	add	r3, r2
 8013e0c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8013e0e:	2300      	movs	r3, #0
 8013e10:	82fb      	strh	r3, [r7, #22]
 8013e12:	2300      	movs	r3, #0
 8013e14:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8013e16:	8afb      	ldrh	r3, [r7, #22]
 8013e18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013e1c:	4293      	cmp	r3, r2
 8013e1e:	d007      	beq.n	8013e30 <put_lfn+0x6c>
 8013e20:	69fb      	ldr	r3, [r7, #28]
 8013e22:	1c5a      	adds	r2, r3, #1
 8013e24:	61fa      	str	r2, [r7, #28]
 8013e26:	005b      	lsls	r3, r3, #1
 8013e28:	68fa      	ldr	r2, [r7, #12]
 8013e2a:	4413      	add	r3, r2
 8013e2c:	881b      	ldrh	r3, [r3, #0]
 8013e2e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8013e30:	4a17      	ldr	r2, [pc, #92]	@ (8013e90 <put_lfn+0xcc>)
 8013e32:	69bb      	ldr	r3, [r7, #24]
 8013e34:	4413      	add	r3, r2
 8013e36:	781b      	ldrb	r3, [r3, #0]
 8013e38:	461a      	mov	r2, r3
 8013e3a:	68bb      	ldr	r3, [r7, #8]
 8013e3c:	4413      	add	r3, r2
 8013e3e:	8afa      	ldrh	r2, [r7, #22]
 8013e40:	4611      	mov	r1, r2
 8013e42:	4618      	mov	r0, r3
 8013e44:	f7ff f86c 	bl	8012f20 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8013e48:	8afb      	ldrh	r3, [r7, #22]
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d102      	bne.n	8013e54 <put_lfn+0x90>
 8013e4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013e52:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8013e54:	69bb      	ldr	r3, [r7, #24]
 8013e56:	3301      	adds	r3, #1
 8013e58:	61bb      	str	r3, [r7, #24]
 8013e5a:	69bb      	ldr	r3, [r7, #24]
 8013e5c:	2b0c      	cmp	r3, #12
 8013e5e:	d9da      	bls.n	8013e16 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8013e60:	8afb      	ldrh	r3, [r7, #22]
 8013e62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013e66:	4293      	cmp	r3, r2
 8013e68:	d006      	beq.n	8013e78 <put_lfn+0xb4>
 8013e6a:	69fb      	ldr	r3, [r7, #28]
 8013e6c:	005b      	lsls	r3, r3, #1
 8013e6e:	68fa      	ldr	r2, [r7, #12]
 8013e70:	4413      	add	r3, r2
 8013e72:	881b      	ldrh	r3, [r3, #0]
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d103      	bne.n	8013e80 <put_lfn+0xbc>
 8013e78:	79fb      	ldrb	r3, [r7, #7]
 8013e7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013e7e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8013e80:	68bb      	ldr	r3, [r7, #8]
 8013e82:	79fa      	ldrb	r2, [r7, #7]
 8013e84:	701a      	strb	r2, [r3, #0]
}
 8013e86:	bf00      	nop
 8013e88:	3720      	adds	r7, #32
 8013e8a:	46bd      	mov	sp, r7
 8013e8c:	bd80      	pop	{r7, pc}
 8013e8e:	bf00      	nop
 8013e90:	08019c10 	.word	0x08019c10

08013e94 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8013e94:	b580      	push	{r7, lr}
 8013e96:	b08c      	sub	sp, #48	@ 0x30
 8013e98:	af00      	add	r7, sp, #0
 8013e9a:	60f8      	str	r0, [r7, #12]
 8013e9c:	60b9      	str	r1, [r7, #8]
 8013e9e:	607a      	str	r2, [r7, #4]
 8013ea0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8013ea2:	220b      	movs	r2, #11
 8013ea4:	68b9      	ldr	r1, [r7, #8]
 8013ea6:	68f8      	ldr	r0, [r7, #12]
 8013ea8:	f7ff f881 	bl	8012fae <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8013eac:	683b      	ldr	r3, [r7, #0]
 8013eae:	2b05      	cmp	r3, #5
 8013eb0:	d929      	bls.n	8013f06 <gen_numname+0x72>
		sr = seq;
 8013eb2:	683b      	ldr	r3, [r7, #0]
 8013eb4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8013eb6:	e020      	b.n	8013efa <gen_numname+0x66>
			wc = *lfn++;
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	1c9a      	adds	r2, r3, #2
 8013ebc:	607a      	str	r2, [r7, #4]
 8013ebe:	881b      	ldrh	r3, [r3, #0]
 8013ec0:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8013ec2:	2300      	movs	r3, #0
 8013ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013ec6:	e015      	b.n	8013ef4 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8013ec8:	69fb      	ldr	r3, [r7, #28]
 8013eca:	005a      	lsls	r2, r3, #1
 8013ecc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013ece:	f003 0301 	and.w	r3, r3, #1
 8013ed2:	4413      	add	r3, r2
 8013ed4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8013ed6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013ed8:	085b      	lsrs	r3, r3, #1
 8013eda:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8013edc:	69fb      	ldr	r3, [r7, #28]
 8013ede:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d003      	beq.n	8013eee <gen_numname+0x5a>
 8013ee6:	69fa      	ldr	r2, [r7, #28]
 8013ee8:	4b30      	ldr	r3, [pc, #192]	@ (8013fac <gen_numname+0x118>)
 8013eea:	4053      	eors	r3, r2
 8013eec:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8013eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ef0:	3301      	adds	r3, #1
 8013ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ef6:	2b0f      	cmp	r3, #15
 8013ef8:	d9e6      	bls.n	8013ec8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	881b      	ldrh	r3, [r3, #0]
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d1da      	bne.n	8013eb8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8013f02:	69fb      	ldr	r3, [r7, #28]
 8013f04:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8013f06:	2307      	movs	r3, #7
 8013f08:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8013f0a:	683b      	ldr	r3, [r7, #0]
 8013f0c:	b2db      	uxtb	r3, r3
 8013f0e:	f003 030f 	and.w	r3, r3, #15
 8013f12:	b2db      	uxtb	r3, r3
 8013f14:	3330      	adds	r3, #48	@ 0x30
 8013f16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8013f1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013f1e:	2b39      	cmp	r3, #57	@ 0x39
 8013f20:	d904      	bls.n	8013f2c <gen_numname+0x98>
 8013f22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013f26:	3307      	adds	r3, #7
 8013f28:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8013f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f2e:	1e5a      	subs	r2, r3, #1
 8013f30:	62ba      	str	r2, [r7, #40]	@ 0x28
 8013f32:	3330      	adds	r3, #48	@ 0x30
 8013f34:	443b      	add	r3, r7
 8013f36:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8013f3a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8013f3e:	683b      	ldr	r3, [r7, #0]
 8013f40:	091b      	lsrs	r3, r3, #4
 8013f42:	603b      	str	r3, [r7, #0]
	} while (seq);
 8013f44:	683b      	ldr	r3, [r7, #0]
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d1df      	bne.n	8013f0a <gen_numname+0x76>
	ns[i] = '~';
 8013f4a:	f107 0214 	add.w	r2, r7, #20
 8013f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f50:	4413      	add	r3, r2
 8013f52:	227e      	movs	r2, #126	@ 0x7e
 8013f54:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8013f56:	2300      	movs	r3, #0
 8013f58:	627b      	str	r3, [r7, #36]	@ 0x24
 8013f5a:	e002      	b.n	8013f62 <gen_numname+0xce>
 8013f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f5e:	3301      	adds	r3, #1
 8013f60:	627b      	str	r3, [r7, #36]	@ 0x24
 8013f62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f66:	429a      	cmp	r2, r3
 8013f68:	d205      	bcs.n	8013f76 <gen_numname+0xe2>
 8013f6a:	68fa      	ldr	r2, [r7, #12]
 8013f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f6e:	4413      	add	r3, r2
 8013f70:	781b      	ldrb	r3, [r3, #0]
 8013f72:	2b20      	cmp	r3, #32
 8013f74:	d1f2      	bne.n	8013f5c <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8013f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f78:	2b07      	cmp	r3, #7
 8013f7a:	d807      	bhi.n	8013f8c <gen_numname+0xf8>
 8013f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f7e:	1c5a      	adds	r2, r3, #1
 8013f80:	62ba      	str	r2, [r7, #40]	@ 0x28
 8013f82:	3330      	adds	r3, #48	@ 0x30
 8013f84:	443b      	add	r3, r7
 8013f86:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8013f8a:	e000      	b.n	8013f8e <gen_numname+0xfa>
 8013f8c:	2120      	movs	r1, #32
 8013f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f90:	1c5a      	adds	r2, r3, #1
 8013f92:	627a      	str	r2, [r7, #36]	@ 0x24
 8013f94:	68fa      	ldr	r2, [r7, #12]
 8013f96:	4413      	add	r3, r2
 8013f98:	460a      	mov	r2, r1
 8013f9a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8013f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f9e:	2b07      	cmp	r3, #7
 8013fa0:	d9e9      	bls.n	8013f76 <gen_numname+0xe2>
}
 8013fa2:	bf00      	nop
 8013fa4:	bf00      	nop
 8013fa6:	3730      	adds	r7, #48	@ 0x30
 8013fa8:	46bd      	mov	sp, r7
 8013faa:	bd80      	pop	{r7, pc}
 8013fac:	00011021 	.word	0x00011021

08013fb0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8013fb0:	b480      	push	{r7}
 8013fb2:	b085      	sub	sp, #20
 8013fb4:	af00      	add	r7, sp, #0
 8013fb6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8013fb8:	2300      	movs	r3, #0
 8013fba:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8013fbc:	230b      	movs	r3, #11
 8013fbe:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8013fc0:	7bfb      	ldrb	r3, [r7, #15]
 8013fc2:	b2da      	uxtb	r2, r3
 8013fc4:	0852      	lsrs	r2, r2, #1
 8013fc6:	01db      	lsls	r3, r3, #7
 8013fc8:	4313      	orrs	r3, r2
 8013fca:	b2da      	uxtb	r2, r3
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	1c59      	adds	r1, r3, #1
 8013fd0:	6079      	str	r1, [r7, #4]
 8013fd2:	781b      	ldrb	r3, [r3, #0]
 8013fd4:	4413      	add	r3, r2
 8013fd6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8013fd8:	68bb      	ldr	r3, [r7, #8]
 8013fda:	3b01      	subs	r3, #1
 8013fdc:	60bb      	str	r3, [r7, #8]
 8013fde:	68bb      	ldr	r3, [r7, #8]
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d1ed      	bne.n	8013fc0 <sum_sfn+0x10>
	return sum;
 8013fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	3714      	adds	r7, #20
 8013fea:	46bd      	mov	sp, r7
 8013fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ff0:	4770      	bx	lr

08013ff2 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8013ff2:	b580      	push	{r7, lr}
 8013ff4:	b086      	sub	sp, #24
 8013ff6:	af00      	add	r7, sp, #0
 8013ff8:	6078      	str	r0, [r7, #4]
 8013ffa:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8013ffc:	2304      	movs	r3, #4
 8013ffe:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	681b      	ldr	r3, [r3, #0]
 8014004:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8014006:	23ff      	movs	r3, #255	@ 0xff
 8014008:	757b      	strb	r3, [r7, #21]
 801400a:	23ff      	movs	r3, #255	@ 0xff
 801400c:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 801400e:	e081      	b.n	8014114 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	699b      	ldr	r3, [r3, #24]
 8014014:	4619      	mov	r1, r3
 8014016:	6938      	ldr	r0, [r7, #16]
 8014018:	f7ff f8bc 	bl	8013194 <move_window>
 801401c:	4603      	mov	r3, r0
 801401e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8014020:	7dfb      	ldrb	r3, [r7, #23]
 8014022:	2b00      	cmp	r3, #0
 8014024:	d17c      	bne.n	8014120 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	69db      	ldr	r3, [r3, #28]
 801402a:	781b      	ldrb	r3, [r3, #0]
 801402c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 801402e:	7dbb      	ldrb	r3, [r7, #22]
 8014030:	2b00      	cmp	r3, #0
 8014032:	d102      	bne.n	801403a <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8014034:	2304      	movs	r3, #4
 8014036:	75fb      	strb	r3, [r7, #23]
 8014038:	e077      	b.n	801412a <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	69db      	ldr	r3, [r3, #28]
 801403e:	330b      	adds	r3, #11
 8014040:	781b      	ldrb	r3, [r3, #0]
 8014042:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014046:	73fb      	strb	r3, [r7, #15]
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	7bfa      	ldrb	r2, [r7, #15]
 801404c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 801404e:	7dbb      	ldrb	r3, [r7, #22]
 8014050:	2be5      	cmp	r3, #229	@ 0xe5
 8014052:	d00e      	beq.n	8014072 <dir_read+0x80>
 8014054:	7dbb      	ldrb	r3, [r7, #22]
 8014056:	2b2e      	cmp	r3, #46	@ 0x2e
 8014058:	d00b      	beq.n	8014072 <dir_read+0x80>
 801405a:	7bfb      	ldrb	r3, [r7, #15]
 801405c:	f023 0320 	bic.w	r3, r3, #32
 8014060:	2b08      	cmp	r3, #8
 8014062:	bf0c      	ite	eq
 8014064:	2301      	moveq	r3, #1
 8014066:	2300      	movne	r3, #0
 8014068:	b2db      	uxtb	r3, r3
 801406a:	461a      	mov	r2, r3
 801406c:	683b      	ldr	r3, [r7, #0]
 801406e:	4293      	cmp	r3, r2
 8014070:	d002      	beq.n	8014078 <dir_read+0x86>
				ord = 0xFF;
 8014072:	23ff      	movs	r3, #255	@ 0xff
 8014074:	757b      	strb	r3, [r7, #21]
 8014076:	e044      	b.n	8014102 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8014078:	7bfb      	ldrb	r3, [r7, #15]
 801407a:	2b0f      	cmp	r3, #15
 801407c:	d12f      	bne.n	80140de <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 801407e:	7dbb      	ldrb	r3, [r7, #22]
 8014080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014084:	2b00      	cmp	r3, #0
 8014086:	d00d      	beq.n	80140a4 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	69db      	ldr	r3, [r3, #28]
 801408c:	7b5b      	ldrb	r3, [r3, #13]
 801408e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8014090:	7dbb      	ldrb	r3, [r7, #22]
 8014092:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8014096:	75bb      	strb	r3, [r7, #22]
 8014098:	7dbb      	ldrb	r3, [r7, #22]
 801409a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	691a      	ldr	r2, [r3, #16]
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	62da      	str	r2, [r3, #44]	@ 0x2c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80140a4:	7dba      	ldrb	r2, [r7, #22]
 80140a6:	7d7b      	ldrb	r3, [r7, #21]
 80140a8:	429a      	cmp	r2, r3
 80140aa:	d115      	bne.n	80140d8 <dir_read+0xe6>
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	69db      	ldr	r3, [r3, #28]
 80140b0:	330d      	adds	r3, #13
 80140b2:	781b      	ldrb	r3, [r3, #0]
 80140b4:	7d3a      	ldrb	r2, [r7, #20]
 80140b6:	429a      	cmp	r2, r3
 80140b8:	d10e      	bne.n	80140d8 <dir_read+0xe6>
 80140ba:	693b      	ldr	r3, [r7, #16]
 80140bc:	68da      	ldr	r2, [r3, #12]
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	69db      	ldr	r3, [r3, #28]
 80140c2:	4619      	mov	r1, r3
 80140c4:	4610      	mov	r0, r2
 80140c6:	f7ff fe19 	bl	8013cfc <pick_lfn>
 80140ca:	4603      	mov	r3, r0
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d003      	beq.n	80140d8 <dir_read+0xe6>
 80140d0:	7d7b      	ldrb	r3, [r7, #21]
 80140d2:	3b01      	subs	r3, #1
 80140d4:	b2db      	uxtb	r3, r3
 80140d6:	e000      	b.n	80140da <dir_read+0xe8>
 80140d8:	23ff      	movs	r3, #255	@ 0xff
 80140da:	757b      	strb	r3, [r7, #21]
 80140dc:	e011      	b.n	8014102 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80140de:	7d7b      	ldrb	r3, [r7, #21]
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d109      	bne.n	80140f8 <dir_read+0x106>
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	69db      	ldr	r3, [r3, #28]
 80140e8:	4618      	mov	r0, r3
 80140ea:	f7ff ff61 	bl	8013fb0 <sum_sfn>
 80140ee:	4603      	mov	r3, r0
 80140f0:	461a      	mov	r2, r3
 80140f2:	7d3b      	ldrb	r3, [r7, #20]
 80140f4:	4293      	cmp	r3, r2
 80140f6:	d015      	beq.n	8014124 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	f04f 32ff 	mov.w	r2, #4294967295
 80140fe:	62da      	str	r2, [r3, #44]	@ 0x2c
					}
					break;
 8014100:	e010      	b.n	8014124 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8014102:	2100      	movs	r1, #0
 8014104:	6878      	ldr	r0, [r7, #4]
 8014106:	f7ff fc3d 	bl	8013984 <dir_next>
 801410a:	4603      	mov	r3, r0
 801410c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801410e:	7dfb      	ldrb	r3, [r7, #23]
 8014110:	2b00      	cmp	r3, #0
 8014112:	d109      	bne.n	8014128 <dir_read+0x136>
	while (dp->sect) {
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	699b      	ldr	r3, [r3, #24]
 8014118:	2b00      	cmp	r3, #0
 801411a:	f47f af79 	bne.w	8014010 <dir_read+0x1e>
 801411e:	e004      	b.n	801412a <dir_read+0x138>
		if (res != FR_OK) break;
 8014120:	bf00      	nop
 8014122:	e002      	b.n	801412a <dir_read+0x138>
					break;
 8014124:	bf00      	nop
 8014126:	e000      	b.n	801412a <dir_read+0x138>
		if (res != FR_OK) break;
 8014128:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801412a:	7dfb      	ldrb	r3, [r7, #23]
 801412c:	2b00      	cmp	r3, #0
 801412e:	d002      	beq.n	8014136 <dir_read+0x144>
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	2200      	movs	r2, #0
 8014134:	619a      	str	r2, [r3, #24]
	return res;
 8014136:	7dfb      	ldrb	r3, [r7, #23]
}
 8014138:	4618      	mov	r0, r3
 801413a:	3718      	adds	r7, #24
 801413c:	46bd      	mov	sp, r7
 801413e:	bd80      	pop	{r7, pc}

08014140 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8014140:	b580      	push	{r7, lr}
 8014142:	b086      	sub	sp, #24
 8014144:	af00      	add	r7, sp, #0
 8014146:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801414e:	2100      	movs	r1, #0
 8014150:	6878      	ldr	r0, [r7, #4]
 8014152:	f7ff fb9c 	bl	801388e <dir_sdi>
 8014156:	4603      	mov	r3, r0
 8014158:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801415a:	7dfb      	ldrb	r3, [r7, #23]
 801415c:	2b00      	cmp	r3, #0
 801415e:	d001      	beq.n	8014164 <dir_find+0x24>
 8014160:	7dfb      	ldrb	r3, [r7, #23]
 8014162:	e0a9      	b.n	80142b8 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8014164:	23ff      	movs	r3, #255	@ 0xff
 8014166:	753b      	strb	r3, [r7, #20]
 8014168:	7d3b      	ldrb	r3, [r7, #20]
 801416a:	757b      	strb	r3, [r7, #21]
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	f04f 32ff 	mov.w	r2, #4294967295
 8014172:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
	do {
		res = move_window(fs, dp->sect);
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	699b      	ldr	r3, [r3, #24]
 8014178:	4619      	mov	r1, r3
 801417a:	6938      	ldr	r0, [r7, #16]
 801417c:	f7ff f80a 	bl	8013194 <move_window>
 8014180:	4603      	mov	r3, r0
 8014182:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8014184:	7dfb      	ldrb	r3, [r7, #23]
 8014186:	2b00      	cmp	r3, #0
 8014188:	f040 8090 	bne.w	80142ac <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	69db      	ldr	r3, [r3, #28]
 8014190:	781b      	ldrb	r3, [r3, #0]
 8014192:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8014194:	7dbb      	ldrb	r3, [r7, #22]
 8014196:	2b00      	cmp	r3, #0
 8014198:	d102      	bne.n	80141a0 <dir_find+0x60>
 801419a:	2304      	movs	r3, #4
 801419c:	75fb      	strb	r3, [r7, #23]
 801419e:	e08a      	b.n	80142b6 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	69db      	ldr	r3, [r3, #28]
 80141a4:	330b      	adds	r3, #11
 80141a6:	781b      	ldrb	r3, [r3, #0]
 80141a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80141ac:	73fb      	strb	r3, [r7, #15]
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	7bfa      	ldrb	r2, [r7, #15]
 80141b2:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80141b4:	7dbb      	ldrb	r3, [r7, #22]
 80141b6:	2be5      	cmp	r3, #229	@ 0xe5
 80141b8:	d007      	beq.n	80141ca <dir_find+0x8a>
 80141ba:	7bfb      	ldrb	r3, [r7, #15]
 80141bc:	f003 0308 	and.w	r3, r3, #8
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d009      	beq.n	80141d8 <dir_find+0x98>
 80141c4:	7bfb      	ldrb	r3, [r7, #15]
 80141c6:	2b0f      	cmp	r3, #15
 80141c8:	d006      	beq.n	80141d8 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80141ca:	23ff      	movs	r3, #255	@ 0xff
 80141cc:	757b      	strb	r3, [r7, #21]
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	f04f 32ff 	mov.w	r2, #4294967295
 80141d4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80141d6:	e05e      	b.n	8014296 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80141d8:	7bfb      	ldrb	r3, [r7, #15]
 80141da:	2b0f      	cmp	r3, #15
 80141dc:	d136      	bne.n	801424c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80141e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d154      	bne.n	8014296 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80141ec:	7dbb      	ldrb	r3, [r7, #22]
 80141ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d00d      	beq.n	8014212 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	69db      	ldr	r3, [r3, #28]
 80141fa:	7b5b      	ldrb	r3, [r3, #13]
 80141fc:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80141fe:	7dbb      	ldrb	r3, [r7, #22]
 8014200:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8014204:	75bb      	strb	r3, [r7, #22]
 8014206:	7dbb      	ldrb	r3, [r7, #22]
 8014208:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	691a      	ldr	r2, [r3, #16]
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	62da      	str	r2, [r3, #44]	@ 0x2c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8014212:	7dba      	ldrb	r2, [r7, #22]
 8014214:	7d7b      	ldrb	r3, [r7, #21]
 8014216:	429a      	cmp	r2, r3
 8014218:	d115      	bne.n	8014246 <dir_find+0x106>
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	69db      	ldr	r3, [r3, #28]
 801421e:	330d      	adds	r3, #13
 8014220:	781b      	ldrb	r3, [r3, #0]
 8014222:	7d3a      	ldrb	r2, [r7, #20]
 8014224:	429a      	cmp	r2, r3
 8014226:	d10e      	bne.n	8014246 <dir_find+0x106>
 8014228:	693b      	ldr	r3, [r7, #16]
 801422a:	68da      	ldr	r2, [r3, #12]
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	69db      	ldr	r3, [r3, #28]
 8014230:	4619      	mov	r1, r3
 8014232:	4610      	mov	r0, r2
 8014234:	f7ff fcf2 	bl	8013c1c <cmp_lfn>
 8014238:	4603      	mov	r3, r0
 801423a:	2b00      	cmp	r3, #0
 801423c:	d003      	beq.n	8014246 <dir_find+0x106>
 801423e:	7d7b      	ldrb	r3, [r7, #21]
 8014240:	3b01      	subs	r3, #1
 8014242:	b2db      	uxtb	r3, r3
 8014244:	e000      	b.n	8014248 <dir_find+0x108>
 8014246:	23ff      	movs	r3, #255	@ 0xff
 8014248:	757b      	strb	r3, [r7, #21]
 801424a:	e024      	b.n	8014296 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801424c:	7d7b      	ldrb	r3, [r7, #21]
 801424e:	2b00      	cmp	r3, #0
 8014250:	d109      	bne.n	8014266 <dir_find+0x126>
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	69db      	ldr	r3, [r3, #28]
 8014256:	4618      	mov	r0, r3
 8014258:	f7ff feaa 	bl	8013fb0 <sum_sfn>
 801425c:	4603      	mov	r3, r0
 801425e:	461a      	mov	r2, r3
 8014260:	7d3b      	ldrb	r3, [r7, #20]
 8014262:	4293      	cmp	r3, r2
 8014264:	d024      	beq.n	80142b0 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 801426c:	f003 0301 	and.w	r3, r3, #1
 8014270:	2b00      	cmp	r3, #0
 8014272:	d10a      	bne.n	801428a <dir_find+0x14a>
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	69d8      	ldr	r0, [r3, #28]
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	3320      	adds	r3, #32
 801427c:	220b      	movs	r2, #11
 801427e:	4619      	mov	r1, r3
 8014280:	f7fe fed1 	bl	8013026 <mem_cmp>
 8014284:	4603      	mov	r3, r0
 8014286:	2b00      	cmp	r3, #0
 8014288:	d014      	beq.n	80142b4 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801428a:	23ff      	movs	r3, #255	@ 0xff
 801428c:	757b      	strb	r3, [r7, #21]
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	f04f 32ff 	mov.w	r2, #4294967295
 8014294:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8014296:	2100      	movs	r1, #0
 8014298:	6878      	ldr	r0, [r7, #4]
 801429a:	f7ff fb73 	bl	8013984 <dir_next>
 801429e:	4603      	mov	r3, r0
 80142a0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80142a2:	7dfb      	ldrb	r3, [r7, #23]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	f43f af65 	beq.w	8014174 <dir_find+0x34>
 80142aa:	e004      	b.n	80142b6 <dir_find+0x176>
		if (res != FR_OK) break;
 80142ac:	bf00      	nop
 80142ae:	e002      	b.n	80142b6 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80142b0:	bf00      	nop
 80142b2:	e000      	b.n	80142b6 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80142b4:	bf00      	nop

	return res;
 80142b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80142b8:	4618      	mov	r0, r3
 80142ba:	3718      	adds	r7, #24
 80142bc:	46bd      	mov	sp, r7
 80142be:	bd80      	pop	{r7, pc}

080142c0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80142c0:	b580      	push	{r7, lr}
 80142c2:	b08c      	sub	sp, #48	@ 0x30
 80142c4:	af00      	add	r7, sp, #0
 80142c6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80142d4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d001      	beq.n	80142e0 <dir_register+0x20>
 80142dc:	2306      	movs	r3, #6
 80142de:	e0e0      	b.n	80144a2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80142e0:	2300      	movs	r3, #0
 80142e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80142e4:	e002      	b.n	80142ec <dir_register+0x2c>
 80142e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142e8:	3301      	adds	r3, #1
 80142ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80142ec:	69fb      	ldr	r3, [r7, #28]
 80142ee:	68da      	ldr	r2, [r3, #12]
 80142f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142f2:	005b      	lsls	r3, r3, #1
 80142f4:	4413      	add	r3, r2
 80142f6:	881b      	ldrh	r3, [r3, #0]
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d1f4      	bne.n	80142e6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	f103 0120 	add.w	r1, r3, #32
 8014302:	f107 030c 	add.w	r3, r7, #12
 8014306:	220c      	movs	r2, #12
 8014308:	4618      	mov	r0, r3
 801430a:	f7fe fe50 	bl	8012fae <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801430e:	7dfb      	ldrb	r3, [r7, #23]
 8014310:	f003 0301 	and.w	r3, r3, #1
 8014314:	2b00      	cmp	r3, #0
 8014316:	d032      	beq.n	801437e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	2240      	movs	r2, #64	@ 0x40
 801431c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		for (n = 1; n < 100; n++) {
 8014320:	2301      	movs	r3, #1
 8014322:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014324:	e016      	b.n	8014354 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	f103 0020 	add.w	r0, r3, #32
 801432c:	69fb      	ldr	r3, [r7, #28]
 801432e:	68da      	ldr	r2, [r3, #12]
 8014330:	f107 010c 	add.w	r1, r7, #12
 8014334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014336:	f7ff fdad 	bl	8013e94 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801433a:	6878      	ldr	r0, [r7, #4]
 801433c:	f7ff ff00 	bl	8014140 <dir_find>
 8014340:	4603      	mov	r3, r0
 8014342:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8014346:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801434a:	2b00      	cmp	r3, #0
 801434c:	d106      	bne.n	801435c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801434e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014350:	3301      	adds	r3, #1
 8014352:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014356:	2b63      	cmp	r3, #99	@ 0x63
 8014358:	d9e5      	bls.n	8014326 <dir_register+0x66>
 801435a:	e000      	b.n	801435e <dir_register+0x9e>
			if (res != FR_OK) break;
 801435c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801435e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014360:	2b64      	cmp	r3, #100	@ 0x64
 8014362:	d101      	bne.n	8014368 <dir_register+0xa8>
 8014364:	2307      	movs	r3, #7
 8014366:	e09c      	b.n	80144a2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8014368:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801436c:	2b04      	cmp	r3, #4
 801436e:	d002      	beq.n	8014376 <dir_register+0xb6>
 8014370:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014374:	e095      	b.n	80144a2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8014376:	7dfa      	ldrb	r2, [r7, #23]
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801437e:	7dfb      	ldrb	r3, [r7, #23]
 8014380:	f003 0302 	and.w	r3, r3, #2
 8014384:	2b00      	cmp	r3, #0
 8014386:	d007      	beq.n	8014398 <dir_register+0xd8>
 8014388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801438a:	330c      	adds	r3, #12
 801438c:	4a47      	ldr	r2, [pc, #284]	@ (80144ac <dir_register+0x1ec>)
 801438e:	fba2 2303 	umull	r2, r3, r2, r3
 8014392:	089b      	lsrs	r3, r3, #2
 8014394:	3301      	adds	r3, #1
 8014396:	e000      	b.n	801439a <dir_register+0xda>
 8014398:	2301      	movs	r3, #1
 801439a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801439c:	6a39      	ldr	r1, [r7, #32]
 801439e:	6878      	ldr	r0, [r7, #4]
 80143a0:	f7ff fbb5 	bl	8013b0e <dir_alloc>
 80143a4:	4603      	mov	r3, r0
 80143a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80143aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d148      	bne.n	8014444 <dir_register+0x184>
 80143b2:	6a3b      	ldr	r3, [r7, #32]
 80143b4:	3b01      	subs	r3, #1
 80143b6:	623b      	str	r3, [r7, #32]
 80143b8:	6a3b      	ldr	r3, [r7, #32]
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d042      	beq.n	8014444 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	691a      	ldr	r2, [r3, #16]
 80143c2:	6a3b      	ldr	r3, [r7, #32]
 80143c4:	015b      	lsls	r3, r3, #5
 80143c6:	1ad3      	subs	r3, r2, r3
 80143c8:	4619      	mov	r1, r3
 80143ca:	6878      	ldr	r0, [r7, #4]
 80143cc:	f7ff fa5f 	bl	801388e <dir_sdi>
 80143d0:	4603      	mov	r3, r0
 80143d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80143d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d132      	bne.n	8014444 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	3320      	adds	r3, #32
 80143e2:	4618      	mov	r0, r3
 80143e4:	f7ff fde4 	bl	8013fb0 <sum_sfn>
 80143e8:	4603      	mov	r3, r0
 80143ea:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	699b      	ldr	r3, [r3, #24]
 80143f0:	4619      	mov	r1, r3
 80143f2:	69f8      	ldr	r0, [r7, #28]
 80143f4:	f7fe fece 	bl	8013194 <move_window>
 80143f8:	4603      	mov	r3, r0
 80143fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 80143fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014402:	2b00      	cmp	r3, #0
 8014404:	d11d      	bne.n	8014442 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8014406:	69fb      	ldr	r3, [r7, #28]
 8014408:	68d8      	ldr	r0, [r3, #12]
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	69d9      	ldr	r1, [r3, #28]
 801440e:	6a3b      	ldr	r3, [r7, #32]
 8014410:	b2da      	uxtb	r2, r3
 8014412:	7efb      	ldrb	r3, [r7, #27]
 8014414:	f7ff fcd6 	bl	8013dc4 <put_lfn>
				fs->wflag = 1;
 8014418:	69fb      	ldr	r3, [r7, #28]
 801441a:	2201      	movs	r2, #1
 801441c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801441e:	2100      	movs	r1, #0
 8014420:	6878      	ldr	r0, [r7, #4]
 8014422:	f7ff faaf 	bl	8013984 <dir_next>
 8014426:	4603      	mov	r3, r0
 8014428:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 801442c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014430:	2b00      	cmp	r3, #0
 8014432:	d107      	bne.n	8014444 <dir_register+0x184>
 8014434:	6a3b      	ldr	r3, [r7, #32]
 8014436:	3b01      	subs	r3, #1
 8014438:	623b      	str	r3, [r7, #32]
 801443a:	6a3b      	ldr	r3, [r7, #32]
 801443c:	2b00      	cmp	r3, #0
 801443e:	d1d5      	bne.n	80143ec <dir_register+0x12c>
 8014440:	e000      	b.n	8014444 <dir_register+0x184>
				if (res != FR_OK) break;
 8014442:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8014444:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014448:	2b00      	cmp	r3, #0
 801444a:	d128      	bne.n	801449e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	699b      	ldr	r3, [r3, #24]
 8014450:	4619      	mov	r1, r3
 8014452:	69f8      	ldr	r0, [r7, #28]
 8014454:	f7fe fe9e 	bl	8013194 <move_window>
 8014458:	4603      	mov	r3, r0
 801445a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801445e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014462:	2b00      	cmp	r3, #0
 8014464:	d11b      	bne.n	801449e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	69db      	ldr	r3, [r3, #28]
 801446a:	2220      	movs	r2, #32
 801446c:	2100      	movs	r1, #0
 801446e:	4618      	mov	r0, r3
 8014470:	f7fe fdbe 	bl	8012ff0 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	69d8      	ldr	r0, [r3, #28]
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	3320      	adds	r3, #32
 801447c:	220b      	movs	r2, #11
 801447e:	4619      	mov	r1, r3
 8014480:	f7fe fd95 	bl	8012fae <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	69db      	ldr	r3, [r3, #28]
 801448e:	330c      	adds	r3, #12
 8014490:	f002 0218 	and.w	r2, r2, #24
 8014494:	b2d2      	uxtb	r2, r2
 8014496:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8014498:	69fb      	ldr	r3, [r7, #28]
 801449a:	2201      	movs	r2, #1
 801449c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801449e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80144a2:	4618      	mov	r0, r3
 80144a4:	3730      	adds	r7, #48	@ 0x30
 80144a6:	46bd      	mov	sp, r7
 80144a8:	bd80      	pop	{r7, pc}
 80144aa:	bf00      	nop
 80144ac:	4ec4ec4f 	.word	0x4ec4ec4f

080144b0 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80144b0:	b580      	push	{r7, lr}
 80144b2:	b086      	sub	sp, #24
 80144b4:	af00      	add	r7, sp, #0
 80144b6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	691b      	ldr	r3, [r3, #16]
 80144c2:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80144c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80144cc:	d007      	beq.n	80144de <dir_remove+0x2e>
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80144d2:	4619      	mov	r1, r3
 80144d4:	6878      	ldr	r0, [r7, #4]
 80144d6:	f7ff f9da 	bl	801388e <dir_sdi>
 80144da:	4603      	mov	r3, r0
 80144dc:	e000      	b.n	80144e0 <dir_remove+0x30>
 80144de:	2300      	movs	r3, #0
 80144e0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80144e2:	7dfb      	ldrb	r3, [r7, #23]
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d128      	bne.n	801453a <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	699b      	ldr	r3, [r3, #24]
 80144ec:	4619      	mov	r1, r3
 80144ee:	6938      	ldr	r0, [r7, #16]
 80144f0:	f7fe fe50 	bl	8013194 <move_window>
 80144f4:	4603      	mov	r3, r0
 80144f6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80144f8:	7dfb      	ldrb	r3, [r7, #23]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d115      	bne.n	801452a <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	69db      	ldr	r3, [r3, #28]
 8014502:	22e5      	movs	r2, #229	@ 0xe5
 8014504:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 8014506:	693b      	ldr	r3, [r7, #16]
 8014508:	2201      	movs	r2, #1
 801450a:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	691b      	ldr	r3, [r3, #16]
 8014510:	68fa      	ldr	r2, [r7, #12]
 8014512:	429a      	cmp	r2, r3
 8014514:	d90b      	bls.n	801452e <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 8014516:	2100      	movs	r1, #0
 8014518:	6878      	ldr	r0, [r7, #4]
 801451a:	f7ff fa33 	bl	8013984 <dir_next>
 801451e:	4603      	mov	r3, r0
 8014520:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8014522:	7dfb      	ldrb	r3, [r7, #23]
 8014524:	2b00      	cmp	r3, #0
 8014526:	d0df      	beq.n	80144e8 <dir_remove+0x38>
 8014528:	e002      	b.n	8014530 <dir_remove+0x80>
			if (res != FR_OK) break;
 801452a:	bf00      	nop
 801452c:	e000      	b.n	8014530 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801452e:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 8014530:	7dfb      	ldrb	r3, [r7, #23]
 8014532:	2b04      	cmp	r3, #4
 8014534:	d101      	bne.n	801453a <dir_remove+0x8a>
 8014536:	2302      	movs	r3, #2
 8014538:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 801453a:	7dfb      	ldrb	r3, [r7, #23]
}
 801453c:	4618      	mov	r0, r3
 801453e:	3718      	adds	r7, #24
 8014540:	46bd      	mov	sp, r7
 8014542:	bd80      	pop	{r7, pc}

08014544 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8014544:	b580      	push	{r7, lr}
 8014546:	b08a      	sub	sp, #40	@ 0x28
 8014548:	af00      	add	r7, sp, #0
 801454a:	6078      	str	r0, [r7, #4]
 801454c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801454e:	683b      	ldr	r3, [r7, #0]
 8014550:	681b      	ldr	r3, [r3, #0]
 8014552:	613b      	str	r3, [r7, #16]
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	681b      	ldr	r3, [r3, #0]
 8014558:	68db      	ldr	r3, [r3, #12]
 801455a:	60fb      	str	r3, [r7, #12]
 801455c:	2300      	movs	r3, #0
 801455e:	617b      	str	r3, [r7, #20]
 8014560:	697b      	ldr	r3, [r7, #20]
 8014562:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8014564:	69bb      	ldr	r3, [r7, #24]
 8014566:	1c5a      	adds	r2, r3, #1
 8014568:	61ba      	str	r2, [r7, #24]
 801456a:	693a      	ldr	r2, [r7, #16]
 801456c:	4413      	add	r3, r2
 801456e:	781b      	ldrb	r3, [r3, #0]
 8014570:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8014572:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014574:	2b1f      	cmp	r3, #31
 8014576:	d940      	bls.n	80145fa <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8014578:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801457a:	2b2f      	cmp	r3, #47	@ 0x2f
 801457c:	d006      	beq.n	801458c <create_name+0x48>
 801457e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014580:	2b5c      	cmp	r3, #92	@ 0x5c
 8014582:	d110      	bne.n	80145a6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8014584:	e002      	b.n	801458c <create_name+0x48>
 8014586:	69bb      	ldr	r3, [r7, #24]
 8014588:	3301      	adds	r3, #1
 801458a:	61bb      	str	r3, [r7, #24]
 801458c:	693a      	ldr	r2, [r7, #16]
 801458e:	69bb      	ldr	r3, [r7, #24]
 8014590:	4413      	add	r3, r2
 8014592:	781b      	ldrb	r3, [r3, #0]
 8014594:	2b2f      	cmp	r3, #47	@ 0x2f
 8014596:	d0f6      	beq.n	8014586 <create_name+0x42>
 8014598:	693a      	ldr	r2, [r7, #16]
 801459a:	69bb      	ldr	r3, [r7, #24]
 801459c:	4413      	add	r3, r2
 801459e:	781b      	ldrb	r3, [r3, #0]
 80145a0:	2b5c      	cmp	r3, #92	@ 0x5c
 80145a2:	d0f0      	beq.n	8014586 <create_name+0x42>
			break;
 80145a4:	e02a      	b.n	80145fc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80145a6:	697b      	ldr	r3, [r7, #20]
 80145a8:	2bfe      	cmp	r3, #254	@ 0xfe
 80145aa:	d901      	bls.n	80145b0 <create_name+0x6c>
 80145ac:	2306      	movs	r3, #6
 80145ae:	e1ca      	b.n	8014946 <create_name+0x402>
#if !_LFN_UNICODE
		w &= 0xFF;
 80145b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80145b2:	b2db      	uxtb	r3, r3
 80145b4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80145b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80145b8:	2101      	movs	r1, #1
 80145ba:	4618      	mov	r0, r3
 80145bc:	f002 fb04 	bl	8016bc8 <ff_convert>
 80145c0:	4603      	mov	r3, r0
 80145c2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80145c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d101      	bne.n	80145ce <create_name+0x8a>
 80145ca:	2306      	movs	r3, #6
 80145cc:	e1bb      	b.n	8014946 <create_name+0x402>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80145ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80145d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80145d2:	d809      	bhi.n	80145e8 <create_name+0xa4>
 80145d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80145d6:	4619      	mov	r1, r3
 80145d8:	489e      	ldr	r0, [pc, #632]	@ (8014854 <create_name+0x310>)
 80145da:	f7fe fd4b 	bl	8013074 <chk_chr>
 80145de:	4603      	mov	r3, r0
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	d001      	beq.n	80145e8 <create_name+0xa4>
 80145e4:	2306      	movs	r3, #6
 80145e6:	e1ae      	b.n	8014946 <create_name+0x402>
		lfn[di++] = w;					/* Store the Unicode character */
 80145e8:	697b      	ldr	r3, [r7, #20]
 80145ea:	1c5a      	adds	r2, r3, #1
 80145ec:	617a      	str	r2, [r7, #20]
 80145ee:	005b      	lsls	r3, r3, #1
 80145f0:	68fa      	ldr	r2, [r7, #12]
 80145f2:	4413      	add	r3, r2
 80145f4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80145f6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80145f8:	e7b4      	b.n	8014564 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80145fa:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80145fc:	693a      	ldr	r2, [r7, #16]
 80145fe:	69bb      	ldr	r3, [r7, #24]
 8014600:	441a      	add	r2, r3
 8014602:	683b      	ldr	r3, [r7, #0]
 8014604:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8014606:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014608:	2b1f      	cmp	r3, #31
 801460a:	d801      	bhi.n	8014610 <create_name+0xcc>
 801460c:	2304      	movs	r3, #4
 801460e:	e000      	b.n	8014612 <create_name+0xce>
 8014610:	2300      	movs	r3, #0
 8014612:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 8014616:	697b      	ldr	r3, [r7, #20]
 8014618:	2b01      	cmp	r3, #1
 801461a:	d109      	bne.n	8014630 <create_name+0xec>
 801461c:	697a      	ldr	r2, [r7, #20]
 801461e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8014622:	4413      	add	r3, r2
 8014624:	005b      	lsls	r3, r3, #1
 8014626:	68fa      	ldr	r2, [r7, #12]
 8014628:	4413      	add	r3, r2
 801462a:	881b      	ldrh	r3, [r3, #0]
 801462c:	2b2e      	cmp	r3, #46	@ 0x2e
 801462e:	d015      	beq.n	801465c <create_name+0x118>
 8014630:	697b      	ldr	r3, [r7, #20]
 8014632:	2b02      	cmp	r3, #2
 8014634:	d14d      	bne.n	80146d2 <create_name+0x18e>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 8014636:	697a      	ldr	r2, [r7, #20]
 8014638:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801463c:	4413      	add	r3, r2
 801463e:	005b      	lsls	r3, r3, #1
 8014640:	68fa      	ldr	r2, [r7, #12]
 8014642:	4413      	add	r3, r2
 8014644:	881b      	ldrh	r3, [r3, #0]
 8014646:	2b2e      	cmp	r3, #46	@ 0x2e
 8014648:	d143      	bne.n	80146d2 <create_name+0x18e>
 801464a:	697a      	ldr	r2, [r7, #20]
 801464c:	4b82      	ldr	r3, [pc, #520]	@ (8014858 <create_name+0x314>)
 801464e:	4413      	add	r3, r2
 8014650:	005b      	lsls	r3, r3, #1
 8014652:	68fa      	ldr	r2, [r7, #12]
 8014654:	4413      	add	r3, r2
 8014656:	881b      	ldrh	r3, [r3, #0]
 8014658:	2b2e      	cmp	r3, #46	@ 0x2e
 801465a:	d13a      	bne.n	80146d2 <create_name+0x18e>
		lfn[di] = 0;
 801465c:	697b      	ldr	r3, [r7, #20]
 801465e:	005b      	lsls	r3, r3, #1
 8014660:	68fa      	ldr	r2, [r7, #12]
 8014662:	4413      	add	r3, r2
 8014664:	2200      	movs	r2, #0
 8014666:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 8014668:	2300      	movs	r3, #0
 801466a:	623b      	str	r3, [r7, #32]
 801466c:	e00f      	b.n	801468e <create_name+0x14a>
			dp->fn[i] = (i < di) ? '.' : ' ';
 801466e:	6a3a      	ldr	r2, [r7, #32]
 8014670:	697b      	ldr	r3, [r7, #20]
 8014672:	429a      	cmp	r2, r3
 8014674:	d201      	bcs.n	801467a <create_name+0x136>
 8014676:	212e      	movs	r1, #46	@ 0x2e
 8014678:	e000      	b.n	801467c <create_name+0x138>
 801467a:	2120      	movs	r1, #32
 801467c:	687a      	ldr	r2, [r7, #4]
 801467e:	6a3b      	ldr	r3, [r7, #32]
 8014680:	4413      	add	r3, r2
 8014682:	3320      	adds	r3, #32
 8014684:	460a      	mov	r2, r1
 8014686:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 8014688:	6a3b      	ldr	r3, [r7, #32]
 801468a:	3301      	adds	r3, #1
 801468c:	623b      	str	r3, [r7, #32]
 801468e:	6a3b      	ldr	r3, [r7, #32]
 8014690:	2b0a      	cmp	r3, #10
 8014692:	d9ec      	bls.n	801466e <create_name+0x12a>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 8014694:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014698:	f043 0320 	orr.w	r3, r3, #32
 801469c:	b2d9      	uxtb	r1, r3
 801469e:	687a      	ldr	r2, [r7, #4]
 80146a0:	6a3b      	ldr	r3, [r7, #32]
 80146a2:	4413      	add	r3, r2
 80146a4:	3320      	adds	r3, #32
 80146a6:	460a      	mov	r2, r1
 80146a8:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 80146aa:	2300      	movs	r3, #0
 80146ac:	e14b      	b.n	8014946 <create_name+0x402>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 80146ae:	697a      	ldr	r2, [r7, #20]
 80146b0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80146b4:	4413      	add	r3, r2
 80146b6:	005b      	lsls	r3, r3, #1
 80146b8:	68fa      	ldr	r2, [r7, #12]
 80146ba:	4413      	add	r3, r2
 80146bc:	881b      	ldrh	r3, [r3, #0]
 80146be:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80146c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80146c2:	2b20      	cmp	r3, #32
 80146c4:	d002      	beq.n	80146cc <create_name+0x188>
 80146c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80146c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80146ca:	d106      	bne.n	80146da <create_name+0x196>
		di--;
 80146cc:	697b      	ldr	r3, [r7, #20]
 80146ce:	3b01      	subs	r3, #1
 80146d0:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80146d2:	697b      	ldr	r3, [r7, #20]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d1ea      	bne.n	80146ae <create_name+0x16a>
 80146d8:	e000      	b.n	80146dc <create_name+0x198>
		if (w != ' ' && w != '.') break;
 80146da:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80146dc:	697b      	ldr	r3, [r7, #20]
 80146de:	005b      	lsls	r3, r3, #1
 80146e0:	68fa      	ldr	r2, [r7, #12]
 80146e2:	4413      	add	r3, r2
 80146e4:	2200      	movs	r2, #0
 80146e6:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80146e8:	697b      	ldr	r3, [r7, #20]
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d101      	bne.n	80146f2 <create_name+0x1ae>
 80146ee:	2306      	movs	r3, #6
 80146f0:	e129      	b.n	8014946 <create_name+0x402>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	3320      	adds	r3, #32
 80146f6:	220b      	movs	r2, #11
 80146f8:	2120      	movs	r1, #32
 80146fa:	4618      	mov	r0, r3
 80146fc:	f7fe fc78 	bl	8012ff0 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8014700:	2300      	movs	r3, #0
 8014702:	61bb      	str	r3, [r7, #24]
 8014704:	e002      	b.n	801470c <create_name+0x1c8>
 8014706:	69bb      	ldr	r3, [r7, #24]
 8014708:	3301      	adds	r3, #1
 801470a:	61bb      	str	r3, [r7, #24]
 801470c:	69bb      	ldr	r3, [r7, #24]
 801470e:	005b      	lsls	r3, r3, #1
 8014710:	68fa      	ldr	r2, [r7, #12]
 8014712:	4413      	add	r3, r2
 8014714:	881b      	ldrh	r3, [r3, #0]
 8014716:	2b20      	cmp	r3, #32
 8014718:	d0f5      	beq.n	8014706 <create_name+0x1c2>
 801471a:	69bb      	ldr	r3, [r7, #24]
 801471c:	005b      	lsls	r3, r3, #1
 801471e:	68fa      	ldr	r2, [r7, #12]
 8014720:	4413      	add	r3, r2
 8014722:	881b      	ldrh	r3, [r3, #0]
 8014724:	2b2e      	cmp	r3, #46	@ 0x2e
 8014726:	d0ee      	beq.n	8014706 <create_name+0x1c2>
	if (si) cf |= NS_LOSS | NS_LFN;
 8014728:	69bb      	ldr	r3, [r7, #24]
 801472a:	2b00      	cmp	r3, #0
 801472c:	d009      	beq.n	8014742 <create_name+0x1fe>
 801472e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014732:	f043 0303 	orr.w	r3, r3, #3
 8014736:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801473a:	e002      	b.n	8014742 <create_name+0x1fe>
 801473c:	697b      	ldr	r3, [r7, #20]
 801473e:	3b01      	subs	r3, #1
 8014740:	617b      	str	r3, [r7, #20]
 8014742:	697b      	ldr	r3, [r7, #20]
 8014744:	2b00      	cmp	r3, #0
 8014746:	d009      	beq.n	801475c <create_name+0x218>
 8014748:	697a      	ldr	r2, [r7, #20]
 801474a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801474e:	4413      	add	r3, r2
 8014750:	005b      	lsls	r3, r3, #1
 8014752:	68fa      	ldr	r2, [r7, #12]
 8014754:	4413      	add	r3, r2
 8014756:	881b      	ldrh	r3, [r3, #0]
 8014758:	2b2e      	cmp	r3, #46	@ 0x2e
 801475a:	d1ef      	bne.n	801473c <create_name+0x1f8>

	i = b = 0; ni = 8;
 801475c:	2300      	movs	r3, #0
 801475e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8014762:	2300      	movs	r3, #0
 8014764:	623b      	str	r3, [r7, #32]
 8014766:	2308      	movs	r3, #8
 8014768:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801476a:	69bb      	ldr	r3, [r7, #24]
 801476c:	1c5a      	adds	r2, r3, #1
 801476e:	61ba      	str	r2, [r7, #24]
 8014770:	005b      	lsls	r3, r3, #1
 8014772:	68fa      	ldr	r2, [r7, #12]
 8014774:	4413      	add	r3, r2
 8014776:	881b      	ldrh	r3, [r3, #0]
 8014778:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 801477a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801477c:	2b00      	cmp	r3, #0
 801477e:	f000 8098 	beq.w	80148b2 <create_name+0x36e>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8014782:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014784:	2b20      	cmp	r3, #32
 8014786:	d006      	beq.n	8014796 <create_name+0x252>
 8014788:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801478a:	2b2e      	cmp	r3, #46	@ 0x2e
 801478c:	d10a      	bne.n	80147a4 <create_name+0x260>
 801478e:	69ba      	ldr	r2, [r7, #24]
 8014790:	697b      	ldr	r3, [r7, #20]
 8014792:	429a      	cmp	r2, r3
 8014794:	d006      	beq.n	80147a4 <create_name+0x260>
			cf |= NS_LOSS | NS_LFN; continue;
 8014796:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801479a:	f043 0303 	orr.w	r3, r3, #3
 801479e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80147a2:	e085      	b.n	80148b0 <create_name+0x36c>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80147a4:	6a3a      	ldr	r2, [r7, #32]
 80147a6:	69fb      	ldr	r3, [r7, #28]
 80147a8:	429a      	cmp	r2, r3
 80147aa:	d203      	bcs.n	80147b4 <create_name+0x270>
 80147ac:	69ba      	ldr	r2, [r7, #24]
 80147ae:	697b      	ldr	r3, [r7, #20]
 80147b0:	429a      	cmp	r2, r3
 80147b2:	d123      	bne.n	80147fc <create_name+0x2b8>
			if (ni == 11) {				/* Long extension */
 80147b4:	69fb      	ldr	r3, [r7, #28]
 80147b6:	2b0b      	cmp	r3, #11
 80147b8:	d106      	bne.n	80147c8 <create_name+0x284>
				cf |= NS_LOSS | NS_LFN; break;
 80147ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80147be:	f043 0303 	orr.w	r3, r3, #3
 80147c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80147c6:	e077      	b.n	80148b8 <create_name+0x374>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80147c8:	69ba      	ldr	r2, [r7, #24]
 80147ca:	697b      	ldr	r3, [r7, #20]
 80147cc:	429a      	cmp	r2, r3
 80147ce:	d005      	beq.n	80147dc <create_name+0x298>
 80147d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80147d4:	f043 0303 	orr.w	r3, r3, #3
 80147d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80147dc:	69ba      	ldr	r2, [r7, #24]
 80147de:	697b      	ldr	r3, [r7, #20]
 80147e0:	429a      	cmp	r2, r3
 80147e2:	d868      	bhi.n	80148b6 <create_name+0x372>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80147e4:	697b      	ldr	r3, [r7, #20]
 80147e6:	61bb      	str	r3, [r7, #24]
 80147e8:	2308      	movs	r3, #8
 80147ea:	623b      	str	r3, [r7, #32]
 80147ec:	230b      	movs	r3, #11
 80147ee:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80147f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80147f4:	009b      	lsls	r3, r3, #2
 80147f6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80147fa:	e059      	b.n	80148b0 <create_name+0x36c>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80147fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80147fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8014800:	d914      	bls.n	801482c <create_name+0x2e8>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8014802:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014804:	2100      	movs	r1, #0
 8014806:	4618      	mov	r0, r3
 8014808:	f002 f9de 	bl	8016bc8 <ff_convert>
 801480c:	4603      	mov	r3, r0
 801480e:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8014810:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014812:	2b00      	cmp	r3, #0
 8014814:	d004      	beq.n	8014820 <create_name+0x2dc>
 8014816:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014818:	3b80      	subs	r3, #128	@ 0x80
 801481a:	4a10      	ldr	r2, [pc, #64]	@ (801485c <create_name+0x318>)
 801481c:	5cd3      	ldrb	r3, [r2, r3]
 801481e:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8014820:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014824:	f043 0302 	orr.w	r3, r3, #2
 8014828:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801482c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801482e:	2b00      	cmp	r3, #0
 8014830:	d007      	beq.n	8014842 <create_name+0x2fe>
 8014832:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014834:	4619      	mov	r1, r3
 8014836:	480a      	ldr	r0, [pc, #40]	@ (8014860 <create_name+0x31c>)
 8014838:	f7fe fc1c 	bl	8013074 <chk_chr>
 801483c:	4603      	mov	r3, r0
 801483e:	2b00      	cmp	r3, #0
 8014840:	d010      	beq.n	8014864 <create_name+0x320>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8014842:	235f      	movs	r3, #95	@ 0x5f
 8014844:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8014846:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801484a:	f043 0303 	orr.w	r3, r3, #3
 801484e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014852:	e023      	b.n	801489c <create_name+0x358>
 8014854:	08019b00 	.word	0x08019b00
 8014858:	7ffffffe 	.word	0x7ffffffe
 801485c:	08019b90 	.word	0x08019b90
 8014860:	08019b0c 	.word	0x08019b0c
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8014864:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014866:	2b40      	cmp	r3, #64	@ 0x40
 8014868:	d909      	bls.n	801487e <create_name+0x33a>
 801486a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801486c:	2b5a      	cmp	r3, #90	@ 0x5a
 801486e:	d806      	bhi.n	801487e <create_name+0x33a>
					b |= 2;
 8014870:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014874:	f043 0302 	orr.w	r3, r3, #2
 8014878:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801487c:	e00e      	b.n	801489c <create_name+0x358>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801487e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014880:	2b60      	cmp	r3, #96	@ 0x60
 8014882:	d90b      	bls.n	801489c <create_name+0x358>
 8014884:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014886:	2b7a      	cmp	r3, #122	@ 0x7a
 8014888:	d808      	bhi.n	801489c <create_name+0x358>
						b |= 1; w -= 0x20;
 801488a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801488e:	f043 0301 	orr.w	r3, r3, #1
 8014892:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8014896:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014898:	3b20      	subs	r3, #32
 801489a:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801489c:	6a3b      	ldr	r3, [r7, #32]
 801489e:	1c5a      	adds	r2, r3, #1
 80148a0:	623a      	str	r2, [r7, #32]
 80148a2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80148a4:	b2d1      	uxtb	r1, r2
 80148a6:	687a      	ldr	r2, [r7, #4]
 80148a8:	4413      	add	r3, r2
 80148aa:	460a      	mov	r2, r1
 80148ac:	f883 2020 	strb.w	r2, [r3, #32]
		w = lfn[si++];					/* Get an LFN character */
 80148b0:	e75b      	b.n	801476a <create_name+0x226>
		if (!w) break;					/* Break on end of the LFN */
 80148b2:	bf00      	nop
 80148b4:	e000      	b.n	80148b8 <create_name+0x374>
			if (si > di) break;			/* No extension */
 80148b6:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80148be:	2be5      	cmp	r3, #229	@ 0xe5
 80148c0:	d103      	bne.n	80148ca <create_name+0x386>
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	2205      	movs	r2, #5
 80148c6:	f883 2020 	strb.w	r2, [r3, #32]

	if (ni == 8) b <<= 2;
 80148ca:	69fb      	ldr	r3, [r7, #28]
 80148cc:	2b08      	cmp	r3, #8
 80148ce:	d104      	bne.n	80148da <create_name+0x396>
 80148d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80148d4:	009b      	lsls	r3, r3, #2
 80148d6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80148da:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80148de:	f003 030c 	and.w	r3, r3, #12
 80148e2:	2b0c      	cmp	r3, #12
 80148e4:	d005      	beq.n	80148f2 <create_name+0x3ae>
 80148e6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80148ea:	f003 0303 	and.w	r3, r3, #3
 80148ee:	2b03      	cmp	r3, #3
 80148f0:	d105      	bne.n	80148fe <create_name+0x3ba>
 80148f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80148f6:	f043 0302 	orr.w	r3, r3, #2
 80148fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80148fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014902:	f003 0302 	and.w	r3, r3, #2
 8014906:	2b00      	cmp	r3, #0
 8014908:	d117      	bne.n	801493a <create_name+0x3f6>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801490a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801490e:	f003 0303 	and.w	r3, r3, #3
 8014912:	2b01      	cmp	r3, #1
 8014914:	d105      	bne.n	8014922 <create_name+0x3de>
 8014916:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801491a:	f043 0310 	orr.w	r3, r3, #16
 801491e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8014922:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014926:	f003 030c 	and.w	r3, r3, #12
 801492a:	2b04      	cmp	r3, #4
 801492c:	d105      	bne.n	801493a <create_name+0x3f6>
 801492e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014932:	f043 0308 	orr.w	r3, r3, #8
 8014936:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8014940:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

	return FR_OK;
 8014944:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8014946:	4618      	mov	r0, r3
 8014948:	3728      	adds	r7, #40	@ 0x28
 801494a:	46bd      	mov	sp, r7
 801494c:	bd80      	pop	{r7, pc}
 801494e:	bf00      	nop

08014950 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8014950:	b580      	push	{r7, lr}
 8014952:	b086      	sub	sp, #24
 8014954:	af00      	add	r7, sp, #0
 8014956:	6078      	str	r0, [r7, #4]
 8014958:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801495e:	693b      	ldr	r3, [r7, #16]
 8014960:	681b      	ldr	r3, [r3, #0]
 8014962:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8014964:	683b      	ldr	r3, [r7, #0]
 8014966:	781b      	ldrb	r3, [r3, #0]
 8014968:	2b2f      	cmp	r3, #47	@ 0x2f
 801496a:	d00b      	beq.n	8014984 <follow_path+0x34>
 801496c:	683b      	ldr	r3, [r7, #0]
 801496e:	781b      	ldrb	r3, [r3, #0]
 8014970:	2b5c      	cmp	r3, #92	@ 0x5c
 8014972:	d007      	beq.n	8014984 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	69da      	ldr	r2, [r3, #28]
 8014978:	693b      	ldr	r3, [r7, #16]
 801497a:	609a      	str	r2, [r3, #8]
 801497c:	e00d      	b.n	801499a <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801497e:	683b      	ldr	r3, [r7, #0]
 8014980:	3301      	adds	r3, #1
 8014982:	603b      	str	r3, [r7, #0]
 8014984:	683b      	ldr	r3, [r7, #0]
 8014986:	781b      	ldrb	r3, [r3, #0]
 8014988:	2b2f      	cmp	r3, #47	@ 0x2f
 801498a:	d0f8      	beq.n	801497e <follow_path+0x2e>
 801498c:	683b      	ldr	r3, [r7, #0]
 801498e:	781b      	ldrb	r3, [r3, #0]
 8014990:	2b5c      	cmp	r3, #92	@ 0x5c
 8014992:	d0f4      	beq.n	801497e <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8014994:	693b      	ldr	r3, [r7, #16]
 8014996:	2200      	movs	r2, #0
 8014998:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801499a:	683b      	ldr	r3, [r7, #0]
 801499c:	781b      	ldrb	r3, [r3, #0]
 801499e:	2b1f      	cmp	r3, #31
 80149a0:	d80a      	bhi.n	80149b8 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	2280      	movs	r2, #128	@ 0x80
 80149a6:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		res = dir_sdi(dp, 0);
 80149aa:	2100      	movs	r1, #0
 80149ac:	6878      	ldr	r0, [r7, #4]
 80149ae:	f7fe ff6e 	bl	801388e <dir_sdi>
 80149b2:	4603      	mov	r3, r0
 80149b4:	75fb      	strb	r3, [r7, #23]
 80149b6:	e056      	b.n	8014a66 <follow_path+0x116>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80149b8:	463b      	mov	r3, r7
 80149ba:	4619      	mov	r1, r3
 80149bc:	6878      	ldr	r0, [r7, #4]
 80149be:	f7ff fdc1 	bl	8014544 <create_name>
 80149c2:	4603      	mov	r3, r0
 80149c4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80149c6:	7dfb      	ldrb	r3, [r7, #23]
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d147      	bne.n	8014a5c <follow_path+0x10c>
			res = dir_find(dp);				/* Find an object with the segment name */
 80149cc:	6878      	ldr	r0, [r7, #4]
 80149ce:	f7ff fbb7 	bl	8014140 <dir_find>
 80149d2:	4603      	mov	r3, r0
 80149d4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80149dc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80149de:	7dfb      	ldrb	r3, [r7, #23]
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d01b      	beq.n	8014a1c <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80149e4:	7dfb      	ldrb	r3, [r7, #23]
 80149e6:	2b04      	cmp	r3, #4
 80149e8:	d13a      	bne.n	8014a60 <follow_path+0x110>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 80149ea:	7afb      	ldrb	r3, [r7, #11]
 80149ec:	f003 0320 	and.w	r3, r3, #32
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d00b      	beq.n	8014a0c <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80149f4:	7afb      	ldrb	r3, [r7, #11]
 80149f6:	f003 0304 	and.w	r3, r3, #4
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d02c      	beq.n	8014a58 <follow_path+0x108>
						dp->fn[NSFLAG] = NS_NONAME;
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	2280      	movs	r2, #128	@ 0x80
 8014a02:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
						res = FR_OK;
 8014a06:	2300      	movs	r3, #0
 8014a08:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8014a0a:	e029      	b.n	8014a60 <follow_path+0x110>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8014a0c:	7afb      	ldrb	r3, [r7, #11]
 8014a0e:	f003 0304 	and.w	r3, r3, #4
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d124      	bne.n	8014a60 <follow_path+0x110>
 8014a16:	2305      	movs	r3, #5
 8014a18:	75fb      	strb	r3, [r7, #23]
				break;
 8014a1a:	e021      	b.n	8014a60 <follow_path+0x110>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8014a1c:	7afb      	ldrb	r3, [r7, #11]
 8014a1e:	f003 0304 	and.w	r3, r3, #4
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	d11e      	bne.n	8014a64 <follow_path+0x114>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8014a26:	693b      	ldr	r3, [r7, #16]
 8014a28:	799b      	ldrb	r3, [r3, #6]
 8014a2a:	f003 0310 	and.w	r3, r3, #16
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d102      	bne.n	8014a38 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8014a32:	2305      	movs	r3, #5
 8014a34:	75fb      	strb	r3, [r7, #23]
 8014a36:	e016      	b.n	8014a66 <follow_path+0x116>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8014a38:	68fb      	ldr	r3, [r7, #12]
 8014a3a:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	691b      	ldr	r3, [r3, #16]
 8014a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014a46:	4413      	add	r3, r2
 8014a48:	4619      	mov	r1, r3
 8014a4a:	68f8      	ldr	r0, [r7, #12]
 8014a4c:	f7ff f8a6 	bl	8013b9c <ld_clust>
 8014a50:	4602      	mov	r2, r0
 8014a52:	693b      	ldr	r3, [r7, #16]
 8014a54:	609a      	str	r2, [r3, #8]
 8014a56:	e7af      	b.n	80149b8 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8014a58:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8014a5a:	e7ad      	b.n	80149b8 <follow_path+0x68>
			if (res != FR_OK) break;
 8014a5c:	bf00      	nop
 8014a5e:	e002      	b.n	8014a66 <follow_path+0x116>
				break;
 8014a60:	bf00      	nop
 8014a62:	e000      	b.n	8014a66 <follow_path+0x116>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8014a64:	bf00      	nop
			}
		}
	}

	return res;
 8014a66:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a68:	4618      	mov	r0, r3
 8014a6a:	3718      	adds	r7, #24
 8014a6c:	46bd      	mov	sp, r7
 8014a6e:	bd80      	pop	{r7, pc}

08014a70 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8014a70:	b480      	push	{r7}
 8014a72:	b087      	sub	sp, #28
 8014a74:	af00      	add	r7, sp, #0
 8014a76:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8014a78:	f04f 33ff 	mov.w	r3, #4294967295
 8014a7c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d031      	beq.n	8014aea <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	681b      	ldr	r3, [r3, #0]
 8014a8a:	617b      	str	r3, [r7, #20]
 8014a8c:	e002      	b.n	8014a94 <get_ldnumber+0x24>
 8014a8e:	697b      	ldr	r3, [r7, #20]
 8014a90:	3301      	adds	r3, #1
 8014a92:	617b      	str	r3, [r7, #20]
 8014a94:	697b      	ldr	r3, [r7, #20]
 8014a96:	781b      	ldrb	r3, [r3, #0]
 8014a98:	2b1f      	cmp	r3, #31
 8014a9a:	d903      	bls.n	8014aa4 <get_ldnumber+0x34>
 8014a9c:	697b      	ldr	r3, [r7, #20]
 8014a9e:	781b      	ldrb	r3, [r3, #0]
 8014aa0:	2b3a      	cmp	r3, #58	@ 0x3a
 8014aa2:	d1f4      	bne.n	8014a8e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8014aa4:	697b      	ldr	r3, [r7, #20]
 8014aa6:	781b      	ldrb	r3, [r3, #0]
 8014aa8:	2b3a      	cmp	r3, #58	@ 0x3a
 8014aaa:	d11c      	bne.n	8014ae6 <get_ldnumber+0x76>
			tp = *path;
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	681b      	ldr	r3, [r3, #0]
 8014ab0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8014ab2:	68fb      	ldr	r3, [r7, #12]
 8014ab4:	1c5a      	adds	r2, r3, #1
 8014ab6:	60fa      	str	r2, [r7, #12]
 8014ab8:	781b      	ldrb	r3, [r3, #0]
 8014aba:	3b30      	subs	r3, #48	@ 0x30
 8014abc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8014abe:	68bb      	ldr	r3, [r7, #8]
 8014ac0:	2b09      	cmp	r3, #9
 8014ac2:	d80e      	bhi.n	8014ae2 <get_ldnumber+0x72>
 8014ac4:	68fa      	ldr	r2, [r7, #12]
 8014ac6:	697b      	ldr	r3, [r7, #20]
 8014ac8:	429a      	cmp	r2, r3
 8014aca:	d10a      	bne.n	8014ae2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8014acc:	68bb      	ldr	r3, [r7, #8]
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d107      	bne.n	8014ae2 <get_ldnumber+0x72>
					vol = (int)i;
 8014ad2:	68bb      	ldr	r3, [r7, #8]
 8014ad4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8014ad6:	697b      	ldr	r3, [r7, #20]
 8014ad8:	3301      	adds	r3, #1
 8014ada:	617b      	str	r3, [r7, #20]
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	697a      	ldr	r2, [r7, #20]
 8014ae0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8014ae2:	693b      	ldr	r3, [r7, #16]
 8014ae4:	e002      	b.n	8014aec <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8014ae6:	2300      	movs	r3, #0
 8014ae8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8014aea:	693b      	ldr	r3, [r7, #16]
}
 8014aec:	4618      	mov	r0, r3
 8014aee:	371c      	adds	r7, #28
 8014af0:	46bd      	mov	sp, r7
 8014af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014af6:	4770      	bx	lr

08014af8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8014af8:	b580      	push	{r7, lr}
 8014afa:	b082      	sub	sp, #8
 8014afc:	af00      	add	r7, sp, #0
 8014afe:	6078      	str	r0, [r7, #4]
 8014b00:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	2200      	movs	r2, #0
 8014b06:	70da      	strb	r2, [r3, #3]
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8014b0e:	639a      	str	r2, [r3, #56]	@ 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8014b10:	6839      	ldr	r1, [r7, #0]
 8014b12:	6878      	ldr	r0, [r7, #4]
 8014b14:	f7fe fb3e 	bl	8013194 <move_window>
 8014b18:	4603      	mov	r3, r0
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d001      	beq.n	8014b22 <check_fs+0x2a>
 8014b1e:	2304      	movs	r3, #4
 8014b20:	e038      	b.n	8014b94 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	333c      	adds	r3, #60	@ 0x3c
 8014b26:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8014b2a:	4618      	mov	r0, r3
 8014b2c:	f7fe f9bc 	bl	8012ea8 <ld_word>
 8014b30:	4603      	mov	r3, r0
 8014b32:	461a      	mov	r2, r3
 8014b34:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8014b38:	429a      	cmp	r2, r3
 8014b3a:	d001      	beq.n	8014b40 <check_fs+0x48>
 8014b3c:	2303      	movs	r3, #3
 8014b3e:	e029      	b.n	8014b94 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8014b46:	2be9      	cmp	r3, #233	@ 0xe9
 8014b48:	d009      	beq.n	8014b5e <check_fs+0x66>
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8014b50:	2beb      	cmp	r3, #235	@ 0xeb
 8014b52:	d11e      	bne.n	8014b92 <check_fs+0x9a>
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8014b5a:	2b90      	cmp	r3, #144	@ 0x90
 8014b5c:	d119      	bne.n	8014b92 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	333c      	adds	r3, #60	@ 0x3c
 8014b62:	3336      	adds	r3, #54	@ 0x36
 8014b64:	4618      	mov	r0, r3
 8014b66:	f7fe f9b8 	bl	8012eda <ld_dword>
 8014b6a:	4603      	mov	r3, r0
 8014b6c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8014b70:	4a0a      	ldr	r2, [pc, #40]	@ (8014b9c <check_fs+0xa4>)
 8014b72:	4293      	cmp	r3, r2
 8014b74:	d101      	bne.n	8014b7a <check_fs+0x82>
 8014b76:	2300      	movs	r3, #0
 8014b78:	e00c      	b.n	8014b94 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	333c      	adds	r3, #60	@ 0x3c
 8014b7e:	3352      	adds	r3, #82	@ 0x52
 8014b80:	4618      	mov	r0, r3
 8014b82:	f7fe f9aa 	bl	8012eda <ld_dword>
 8014b86:	4603      	mov	r3, r0
 8014b88:	4a05      	ldr	r2, [pc, #20]	@ (8014ba0 <check_fs+0xa8>)
 8014b8a:	4293      	cmp	r3, r2
 8014b8c:	d101      	bne.n	8014b92 <check_fs+0x9a>
 8014b8e:	2300      	movs	r3, #0
 8014b90:	e000      	b.n	8014b94 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8014b92:	2302      	movs	r3, #2
}
 8014b94:	4618      	mov	r0, r3
 8014b96:	3708      	adds	r7, #8
 8014b98:	46bd      	mov	sp, r7
 8014b9a:	bd80      	pop	{r7, pc}
 8014b9c:	00544146 	.word	0x00544146
 8014ba0:	33544146 	.word	0x33544146

08014ba4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8014ba4:	b580      	push	{r7, lr}
 8014ba6:	b096      	sub	sp, #88	@ 0x58
 8014ba8:	af00      	add	r7, sp, #0
 8014baa:	60f8      	str	r0, [r7, #12]
 8014bac:	60b9      	str	r1, [r7, #8]
 8014bae:	4613      	mov	r3, r2
 8014bb0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8014bb2:	68bb      	ldr	r3, [r7, #8]
 8014bb4:	2200      	movs	r2, #0
 8014bb6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8014bb8:	68f8      	ldr	r0, [r7, #12]
 8014bba:	f7ff ff59 	bl	8014a70 <get_ldnumber>
 8014bbe:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8014bc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	da01      	bge.n	8014bca <find_volume+0x26>
 8014bc6:	230b      	movs	r3, #11
 8014bc8:	e235      	b.n	8015036 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8014bca:	4aa5      	ldr	r2, [pc, #660]	@ (8014e60 <find_volume+0x2bc>)
 8014bcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014bd2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8014bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	d101      	bne.n	8014bde <find_volume+0x3a>
 8014bda:	230c      	movs	r3, #12
 8014bdc:	e22b      	b.n	8015036 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 8014bde:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8014be0:	f7fe fa63 	bl	80130aa <lock_fs>
 8014be4:	4603      	mov	r3, r0
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d101      	bne.n	8014bee <find_volume+0x4a>
 8014bea:	230f      	movs	r3, #15
 8014bec:	e223      	b.n	8015036 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 8014bee:	68bb      	ldr	r3, [r7, #8]
 8014bf0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014bf2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8014bf4:	79fb      	ldrb	r3, [r7, #7]
 8014bf6:	f023 0301 	bic.w	r3, r3, #1
 8014bfa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8014bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014bfe:	781b      	ldrb	r3, [r3, #0]
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d01a      	beq.n	8014c3a <find_volume+0x96>
		stat = disk_status(fs->drv);
 8014c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c06:	785b      	ldrb	r3, [r3, #1]
 8014c08:	4618      	mov	r0, r3
 8014c0a:	f7fe f8ad 	bl	8012d68 <disk_status>
 8014c0e:	4603      	mov	r3, r0
 8014c10:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8014c14:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8014c18:	f003 0301 	and.w	r3, r3, #1
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d10c      	bne.n	8014c3a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8014c20:	79fb      	ldrb	r3, [r7, #7]
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d007      	beq.n	8014c36 <find_volume+0x92>
 8014c26:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8014c2a:	f003 0304 	and.w	r3, r3, #4
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d001      	beq.n	8014c36 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8014c32:	230a      	movs	r3, #10
 8014c34:	e1ff      	b.n	8015036 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8014c36:	2300      	movs	r3, #0
 8014c38:	e1fd      	b.n	8015036 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8014c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c3c:	2200      	movs	r2, #0
 8014c3e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8014c40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014c42:	b2da      	uxtb	r2, r3
 8014c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c46:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8014c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c4a:	785b      	ldrb	r3, [r3, #1]
 8014c4c:	4618      	mov	r0, r3
 8014c4e:	f7fe f8a5 	bl	8012d9c <disk_initialize>
 8014c52:	4603      	mov	r3, r0
 8014c54:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8014c58:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8014c5c:	f003 0301 	and.w	r3, r3, #1
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d001      	beq.n	8014c68 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8014c64:	2303      	movs	r3, #3
 8014c66:	e1e6      	b.n	8015036 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8014c68:	79fb      	ldrb	r3, [r7, #7]
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d007      	beq.n	8014c7e <find_volume+0xda>
 8014c6e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8014c72:	f003 0304 	and.w	r3, r3, #4
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d001      	beq.n	8014c7e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8014c7a:	230a      	movs	r3, #10
 8014c7c:	e1db      	b.n	8015036 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8014c7e:	2300      	movs	r3, #0
 8014c80:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8014c82:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8014c84:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8014c86:	f7ff ff37 	bl	8014af8 <check_fs>
 8014c8a:	4603      	mov	r3, r0
 8014c8c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8014c90:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014c94:	2b02      	cmp	r3, #2
 8014c96:	d149      	bne.n	8014d2c <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014c98:	2300      	movs	r3, #0
 8014c9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8014c9c:	e01e      	b.n	8014cdc <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8014c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ca0:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8014ca4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014ca6:	011b      	lsls	r3, r3, #4
 8014ca8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8014cac:	4413      	add	r3, r2
 8014cae:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8014cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cb2:	3304      	adds	r3, #4
 8014cb4:	781b      	ldrb	r3, [r3, #0]
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d006      	beq.n	8014cc8 <find_volume+0x124>
 8014cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cbc:	3308      	adds	r3, #8
 8014cbe:	4618      	mov	r0, r3
 8014cc0:	f7fe f90b 	bl	8012eda <ld_dword>
 8014cc4:	4602      	mov	r2, r0
 8014cc6:	e000      	b.n	8014cca <find_volume+0x126>
 8014cc8:	2200      	movs	r2, #0
 8014cca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014ccc:	009b      	lsls	r3, r3, #2
 8014cce:	3358      	adds	r3, #88	@ 0x58
 8014cd0:	443b      	add	r3, r7
 8014cd2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014cd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014cd8:	3301      	adds	r3, #1
 8014cda:	643b      	str	r3, [r7, #64]	@ 0x40
 8014cdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014cde:	2b03      	cmp	r3, #3
 8014ce0:	d9dd      	bls.n	8014c9e <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8014ce2:	2300      	movs	r3, #0
 8014ce4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8014ce6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d002      	beq.n	8014cf2 <find_volume+0x14e>
 8014cec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014cee:	3b01      	subs	r3, #1
 8014cf0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8014cf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014cf4:	009b      	lsls	r3, r3, #2
 8014cf6:	3358      	adds	r3, #88	@ 0x58
 8014cf8:	443b      	add	r3, r7
 8014cfa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8014cfe:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8014d00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d005      	beq.n	8014d12 <find_volume+0x16e>
 8014d06:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8014d08:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8014d0a:	f7ff fef5 	bl	8014af8 <check_fs>
 8014d0e:	4603      	mov	r3, r0
 8014d10:	e000      	b.n	8014d14 <find_volume+0x170>
 8014d12:	2303      	movs	r3, #3
 8014d14:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8014d18:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014d1c:	2b01      	cmp	r3, #1
 8014d1e:	d905      	bls.n	8014d2c <find_volume+0x188>
 8014d20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014d22:	3301      	adds	r3, #1
 8014d24:	643b      	str	r3, [r7, #64]	@ 0x40
 8014d26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014d28:	2b03      	cmp	r3, #3
 8014d2a:	d9e2      	bls.n	8014cf2 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8014d2c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014d30:	2b04      	cmp	r3, #4
 8014d32:	d101      	bne.n	8014d38 <find_volume+0x194>
 8014d34:	2301      	movs	r3, #1
 8014d36:	e17e      	b.n	8015036 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8014d38:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014d3c:	2b01      	cmp	r3, #1
 8014d3e:	d901      	bls.n	8014d44 <find_volume+0x1a0>
 8014d40:	230d      	movs	r3, #13
 8014d42:	e178      	b.n	8015036 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8014d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d46:	333c      	adds	r3, #60	@ 0x3c
 8014d48:	330b      	adds	r3, #11
 8014d4a:	4618      	mov	r0, r3
 8014d4c:	f7fe f8ac 	bl	8012ea8 <ld_word>
 8014d50:	4603      	mov	r3, r0
 8014d52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014d56:	d001      	beq.n	8014d5c <find_volume+0x1b8>
 8014d58:	230d      	movs	r3, #13
 8014d5a:	e16c      	b.n	8015036 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8014d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d5e:	333c      	adds	r3, #60	@ 0x3c
 8014d60:	3316      	adds	r3, #22
 8014d62:	4618      	mov	r0, r3
 8014d64:	f7fe f8a0 	bl	8012ea8 <ld_word>
 8014d68:	4603      	mov	r3, r0
 8014d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8014d6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d106      	bne.n	8014d80 <find_volume+0x1dc>
 8014d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d74:	333c      	adds	r3, #60	@ 0x3c
 8014d76:	3324      	adds	r3, #36	@ 0x24
 8014d78:	4618      	mov	r0, r3
 8014d7a:	f7fe f8ae 	bl	8012eda <ld_dword>
 8014d7e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8014d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d82:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014d84:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8014d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d88:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 8014d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d8e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8014d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d92:	789b      	ldrb	r3, [r3, #2]
 8014d94:	2b01      	cmp	r3, #1
 8014d96:	d005      	beq.n	8014da4 <find_volume+0x200>
 8014d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d9a:	789b      	ldrb	r3, [r3, #2]
 8014d9c:	2b02      	cmp	r3, #2
 8014d9e:	d001      	beq.n	8014da4 <find_volume+0x200>
 8014da0:	230d      	movs	r3, #13
 8014da2:	e148      	b.n	8015036 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8014da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014da6:	789b      	ldrb	r3, [r3, #2]
 8014da8:	461a      	mov	r2, r3
 8014daa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014dac:	fb02 f303 	mul.w	r3, r2, r3
 8014db0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8014db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014db4:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8014db8:	461a      	mov	r2, r3
 8014dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014dbc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8014dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014dc0:	895b      	ldrh	r3, [r3, #10]
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d008      	beq.n	8014dd8 <find_volume+0x234>
 8014dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014dc8:	895b      	ldrh	r3, [r3, #10]
 8014dca:	461a      	mov	r2, r3
 8014dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014dce:	895b      	ldrh	r3, [r3, #10]
 8014dd0:	3b01      	subs	r3, #1
 8014dd2:	4013      	ands	r3, r2
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d001      	beq.n	8014ddc <find_volume+0x238>
 8014dd8:	230d      	movs	r3, #13
 8014dda:	e12c      	b.n	8015036 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8014ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014dde:	333c      	adds	r3, #60	@ 0x3c
 8014de0:	3311      	adds	r3, #17
 8014de2:	4618      	mov	r0, r3
 8014de4:	f7fe f860 	bl	8012ea8 <ld_word>
 8014de8:	4603      	mov	r3, r0
 8014dea:	461a      	mov	r2, r3
 8014dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014dee:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8014df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014df2:	891b      	ldrh	r3, [r3, #8]
 8014df4:	f003 030f 	and.w	r3, r3, #15
 8014df8:	b29b      	uxth	r3, r3
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d001      	beq.n	8014e02 <find_volume+0x25e>
 8014dfe:	230d      	movs	r3, #13
 8014e00:	e119      	b.n	8015036 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8014e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e04:	333c      	adds	r3, #60	@ 0x3c
 8014e06:	3313      	adds	r3, #19
 8014e08:	4618      	mov	r0, r3
 8014e0a:	f7fe f84d 	bl	8012ea8 <ld_word>
 8014e0e:	4603      	mov	r3, r0
 8014e10:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8014e12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d106      	bne.n	8014e26 <find_volume+0x282>
 8014e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e1a:	333c      	adds	r3, #60	@ 0x3c
 8014e1c:	3320      	adds	r3, #32
 8014e1e:	4618      	mov	r0, r3
 8014e20:	f7fe f85b 	bl	8012eda <ld_dword>
 8014e24:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8014e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e28:	333c      	adds	r3, #60	@ 0x3c
 8014e2a:	330e      	adds	r3, #14
 8014e2c:	4618      	mov	r0, r3
 8014e2e:	f7fe f83b 	bl	8012ea8 <ld_word>
 8014e32:	4603      	mov	r3, r0
 8014e34:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8014e36:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d101      	bne.n	8014e40 <find_volume+0x29c>
 8014e3c:	230d      	movs	r3, #13
 8014e3e:	e0fa      	b.n	8015036 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8014e40:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8014e42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014e44:	4413      	add	r3, r2
 8014e46:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014e48:	8912      	ldrh	r2, [r2, #8]
 8014e4a:	0912      	lsrs	r2, r2, #4
 8014e4c:	b292      	uxth	r2, r2
 8014e4e:	4413      	add	r3, r2
 8014e50:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8014e52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e56:	429a      	cmp	r2, r3
 8014e58:	d204      	bcs.n	8014e64 <find_volume+0x2c0>
 8014e5a:	230d      	movs	r3, #13
 8014e5c:	e0eb      	b.n	8015036 <find_volume+0x492>
 8014e5e:	bf00      	nop
 8014e60:	24002dd8 	.word	0x24002dd8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8014e64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e68:	1ad3      	subs	r3, r2, r3
 8014e6a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014e6c:	8952      	ldrh	r2, [r2, #10]
 8014e6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8014e72:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8014e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d101      	bne.n	8014e7e <find_volume+0x2da>
 8014e7a:	230d      	movs	r3, #13
 8014e7c:	e0db      	b.n	8015036 <find_volume+0x492>
		fmt = FS_FAT32;
 8014e7e:	2303      	movs	r3, #3
 8014e80:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8014e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e86:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8014e8a:	4293      	cmp	r3, r2
 8014e8c:	d802      	bhi.n	8014e94 <find_volume+0x2f0>
 8014e8e:	2302      	movs	r3, #2
 8014e90:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8014e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e96:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8014e9a:	4293      	cmp	r3, r2
 8014e9c:	d802      	bhi.n	8014ea4 <find_volume+0x300>
 8014e9e:	2301      	movs	r3, #1
 8014ea0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8014ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ea6:	1c9a      	adds	r2, r3, #2
 8014ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014eaa:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 8014eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014eae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014eb0:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8014eb2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8014eb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014eb6:	441a      	add	r2, r3
 8014eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014eba:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 8014ebc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ec0:	441a      	add	r2, r3
 8014ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ec4:	635a      	str	r2, [r3, #52]	@ 0x34
		if (fmt == FS_FAT32) {
 8014ec6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014eca:	2b03      	cmp	r3, #3
 8014ecc:	d11e      	bne.n	8014f0c <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8014ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ed0:	333c      	adds	r3, #60	@ 0x3c
 8014ed2:	332a      	adds	r3, #42	@ 0x2a
 8014ed4:	4618      	mov	r0, r3
 8014ed6:	f7fd ffe7 	bl	8012ea8 <ld_word>
 8014eda:	4603      	mov	r3, r0
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d001      	beq.n	8014ee4 <find_volume+0x340>
 8014ee0:	230d      	movs	r3, #13
 8014ee2:	e0a8      	b.n	8015036 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8014ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ee6:	891b      	ldrh	r3, [r3, #8]
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d001      	beq.n	8014ef0 <find_volume+0x34c>
 8014eec:	230d      	movs	r3, #13
 8014eee:	e0a2      	b.n	8015036 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8014ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ef2:	333c      	adds	r3, #60	@ 0x3c
 8014ef4:	332c      	adds	r3, #44	@ 0x2c
 8014ef6:	4618      	mov	r0, r3
 8014ef8:	f7fd ffef 	bl	8012eda <ld_dword>
 8014efc:	4602      	mov	r2, r0
 8014efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f00:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8014f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f04:	6a1b      	ldr	r3, [r3, #32]
 8014f06:	009b      	lsls	r3, r3, #2
 8014f08:	647b      	str	r3, [r7, #68]	@ 0x44
 8014f0a:	e01f      	b.n	8014f4c <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8014f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f0e:	891b      	ldrh	r3, [r3, #8]
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d101      	bne.n	8014f18 <find_volume+0x374>
 8014f14:	230d      	movs	r3, #13
 8014f16:	e08e      	b.n	8015036 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8014f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014f1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014f1e:	441a      	add	r2, r3
 8014f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f22:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8014f24:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014f28:	2b02      	cmp	r3, #2
 8014f2a:	d103      	bne.n	8014f34 <find_volume+0x390>
 8014f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f2e:	6a1b      	ldr	r3, [r3, #32]
 8014f30:	005b      	lsls	r3, r3, #1
 8014f32:	e00a      	b.n	8014f4a <find_volume+0x3a6>
 8014f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f36:	6a1a      	ldr	r2, [r3, #32]
 8014f38:	4613      	mov	r3, r2
 8014f3a:	005b      	lsls	r3, r3, #1
 8014f3c:	4413      	add	r3, r2
 8014f3e:	085a      	lsrs	r2, r3, #1
 8014f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f42:	6a1b      	ldr	r3, [r3, #32]
 8014f44:	f003 0301 	and.w	r3, r3, #1
 8014f48:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8014f4a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8014f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014f50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014f52:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8014f56:	0a5b      	lsrs	r3, r3, #9
 8014f58:	429a      	cmp	r2, r3
 8014f5a:	d201      	bcs.n	8014f60 <find_volume+0x3bc>
 8014f5c:	230d      	movs	r3, #13
 8014f5e:	e06a      	b.n	8015036 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8014f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f62:	f04f 32ff 	mov.w	r2, #4294967295
 8014f66:	619a      	str	r2, [r3, #24]
 8014f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f6a:	699a      	ldr	r2, [r3, #24]
 8014f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f6e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8014f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f72:	2280      	movs	r2, #128	@ 0x80
 8014f74:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8014f76:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014f7a:	2b03      	cmp	r3, #3
 8014f7c:	d149      	bne.n	8015012 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8014f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f80:	333c      	adds	r3, #60	@ 0x3c
 8014f82:	3330      	adds	r3, #48	@ 0x30
 8014f84:	4618      	mov	r0, r3
 8014f86:	f7fd ff8f 	bl	8012ea8 <ld_word>
 8014f8a:	4603      	mov	r3, r0
 8014f8c:	2b01      	cmp	r3, #1
 8014f8e:	d140      	bne.n	8015012 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8014f90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014f92:	3301      	adds	r3, #1
 8014f94:	4619      	mov	r1, r3
 8014f96:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8014f98:	f7fe f8fc 	bl	8013194 <move_window>
 8014f9c:	4603      	mov	r3, r0
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d137      	bne.n	8015012 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8014fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014fa4:	2200      	movs	r2, #0
 8014fa6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8014fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014faa:	333c      	adds	r3, #60	@ 0x3c
 8014fac:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8014fb0:	4618      	mov	r0, r3
 8014fb2:	f7fd ff79 	bl	8012ea8 <ld_word>
 8014fb6:	4603      	mov	r3, r0
 8014fb8:	461a      	mov	r2, r3
 8014fba:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8014fbe:	429a      	cmp	r2, r3
 8014fc0:	d127      	bne.n	8015012 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8014fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014fc4:	333c      	adds	r3, #60	@ 0x3c
 8014fc6:	4618      	mov	r0, r3
 8014fc8:	f7fd ff87 	bl	8012eda <ld_dword>
 8014fcc:	4603      	mov	r3, r0
 8014fce:	4a1c      	ldr	r2, [pc, #112]	@ (8015040 <find_volume+0x49c>)
 8014fd0:	4293      	cmp	r3, r2
 8014fd2:	d11e      	bne.n	8015012 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8014fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014fd6:	333c      	adds	r3, #60	@ 0x3c
 8014fd8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8014fdc:	4618      	mov	r0, r3
 8014fde:	f7fd ff7c 	bl	8012eda <ld_dword>
 8014fe2:	4603      	mov	r3, r0
 8014fe4:	4a17      	ldr	r2, [pc, #92]	@ (8015044 <find_volume+0x4a0>)
 8014fe6:	4293      	cmp	r3, r2
 8014fe8:	d113      	bne.n	8015012 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8014fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014fec:	333c      	adds	r3, #60	@ 0x3c
 8014fee:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8014ff2:	4618      	mov	r0, r3
 8014ff4:	f7fd ff71 	bl	8012eda <ld_dword>
 8014ff8:	4602      	mov	r2, r0
 8014ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ffc:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8014ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015000:	333c      	adds	r3, #60	@ 0x3c
 8015002:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8015006:	4618      	mov	r0, r3
 8015008:	f7fd ff67 	bl	8012eda <ld_dword>
 801500c:	4602      	mov	r2, r0
 801500e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015010:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8015012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015014:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8015018:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801501a:	4b0b      	ldr	r3, [pc, #44]	@ (8015048 <find_volume+0x4a4>)
 801501c:	881b      	ldrh	r3, [r3, #0]
 801501e:	3301      	adds	r3, #1
 8015020:	b29a      	uxth	r2, r3
 8015022:	4b09      	ldr	r3, [pc, #36]	@ (8015048 <find_volume+0x4a4>)
 8015024:	801a      	strh	r2, [r3, #0]
 8015026:	4b08      	ldr	r3, [pc, #32]	@ (8015048 <find_volume+0x4a4>)
 8015028:	881a      	ldrh	r2, [r3, #0]
 801502a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801502c:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 801502e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015030:	2200      	movs	r2, #0
 8015032:	61da      	str	r2, [r3, #28]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 8015034:	2300      	movs	r3, #0
}
 8015036:	4618      	mov	r0, r3
 8015038:	3758      	adds	r7, #88	@ 0x58
 801503a:	46bd      	mov	sp, r7
 801503c:	bd80      	pop	{r7, pc}
 801503e:	bf00      	nop
 8015040:	41615252 	.word	0x41615252
 8015044:	61417272 	.word	0x61417272
 8015048:	24002ddc 	.word	0x24002ddc

0801504c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801504c:	b580      	push	{r7, lr}
 801504e:	b084      	sub	sp, #16
 8015050:	af00      	add	r7, sp, #0
 8015052:	6078      	str	r0, [r7, #4]
 8015054:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8015056:	2309      	movs	r3, #9
 8015058:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	2b00      	cmp	r3, #0
 801505e:	d02e      	beq.n	80150be <validate+0x72>
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	681b      	ldr	r3, [r3, #0]
 8015064:	2b00      	cmp	r3, #0
 8015066:	d02a      	beq.n	80150be <validate+0x72>
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	681b      	ldr	r3, [r3, #0]
 801506c:	781b      	ldrb	r3, [r3, #0]
 801506e:	2b00      	cmp	r3, #0
 8015070:	d025      	beq.n	80150be <validate+0x72>
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	889a      	ldrh	r2, [r3, #4]
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	681b      	ldr	r3, [r3, #0]
 801507a:	88db      	ldrh	r3, [r3, #6]
 801507c:	429a      	cmp	r2, r3
 801507e:	d11e      	bne.n	80150be <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	681b      	ldr	r3, [r3, #0]
 8015084:	4618      	mov	r0, r3
 8015086:	f7fe f810 	bl	80130aa <lock_fs>
 801508a:	4603      	mov	r3, r0
 801508c:	2b00      	cmp	r3, #0
 801508e:	d014      	beq.n	80150ba <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	681b      	ldr	r3, [r3, #0]
 8015094:	785b      	ldrb	r3, [r3, #1]
 8015096:	4618      	mov	r0, r3
 8015098:	f7fd fe66 	bl	8012d68 <disk_status>
 801509c:	4603      	mov	r3, r0
 801509e:	f003 0301 	and.w	r3, r3, #1
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d102      	bne.n	80150ac <validate+0x60>
				res = FR_OK;
 80150a6:	2300      	movs	r3, #0
 80150a8:	73fb      	strb	r3, [r7, #15]
 80150aa:	e008      	b.n	80150be <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	2100      	movs	r1, #0
 80150b2:	4618      	mov	r0, r3
 80150b4:	f7fe f80f 	bl	80130d6 <unlock_fs>
 80150b8:	e001      	b.n	80150be <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80150ba:	230f      	movs	r3, #15
 80150bc:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80150be:	7bfb      	ldrb	r3, [r7, #15]
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d102      	bne.n	80150ca <validate+0x7e>
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	e000      	b.n	80150cc <validate+0x80>
 80150ca:	2300      	movs	r3, #0
 80150cc:	683a      	ldr	r2, [r7, #0]
 80150ce:	6013      	str	r3, [r2, #0]
	return res;
 80150d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80150d2:	4618      	mov	r0, r3
 80150d4:	3710      	adds	r7, #16
 80150d6:	46bd      	mov	sp, r7
 80150d8:	bd80      	pop	{r7, pc}
	...

080150dc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80150dc:	b580      	push	{r7, lr}
 80150de:	b088      	sub	sp, #32
 80150e0:	af00      	add	r7, sp, #0
 80150e2:	60f8      	str	r0, [r7, #12]
 80150e4:	60b9      	str	r1, [r7, #8]
 80150e6:	4613      	mov	r3, r2
 80150e8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80150ea:	68bb      	ldr	r3, [r7, #8]
 80150ec:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80150ee:	f107 0310 	add.w	r3, r7, #16
 80150f2:	4618      	mov	r0, r3
 80150f4:	f7ff fcbc 	bl	8014a70 <get_ldnumber>
 80150f8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80150fa:	69fb      	ldr	r3, [r7, #28]
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	da01      	bge.n	8015104 <f_mount+0x28>
 8015100:	230b      	movs	r3, #11
 8015102:	e045      	b.n	8015190 <f_mount+0xb4>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8015104:	4a24      	ldr	r2, [pc, #144]	@ (8015198 <f_mount+0xbc>)
 8015106:	69fb      	ldr	r3, [r7, #28]
 8015108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801510c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801510e:	69bb      	ldr	r3, [r7, #24]
 8015110:	2b00      	cmp	r3, #0
 8015112:	d00c      	beq.n	801512e <f_mount+0x52>
#if _FS_LOCK != 0
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8015114:	69bb      	ldr	r3, [r7, #24]
 8015116:	691b      	ldr	r3, [r3, #16]
 8015118:	4618      	mov	r0, r3
 801511a:	f001 fe3a 	bl	8016d92 <ff_del_syncobj>
 801511e:	4603      	mov	r3, r0
 8015120:	2b00      	cmp	r3, #0
 8015122:	d101      	bne.n	8015128 <f_mount+0x4c>
 8015124:	2302      	movs	r3, #2
 8015126:	e033      	b.n	8015190 <f_mount+0xb4>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8015128:	69bb      	ldr	r3, [r7, #24]
 801512a:	2200      	movs	r2, #0
 801512c:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801512e:	68fb      	ldr	r3, [r7, #12]
 8015130:	2b00      	cmp	r3, #0
 8015132:	d00f      	beq.n	8015154 <f_mount+0x78>
		fs->fs_type = 0;				/* Clear new fs object */
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	2200      	movs	r2, #0
 8015138:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 801513a:	69fb      	ldr	r3, [r7, #28]
 801513c:	b2da      	uxtb	r2, r3
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	3310      	adds	r3, #16
 8015142:	4619      	mov	r1, r3
 8015144:	4610      	mov	r0, r2
 8015146:	f001 fe05 	bl	8016d54 <ff_cre_syncobj>
 801514a:	4603      	mov	r3, r0
 801514c:	2b00      	cmp	r3, #0
 801514e:	d101      	bne.n	8015154 <f_mount+0x78>
 8015150:	2302      	movs	r3, #2
 8015152:	e01d      	b.n	8015190 <f_mount+0xb4>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8015154:	68fa      	ldr	r2, [r7, #12]
 8015156:	4910      	ldr	r1, [pc, #64]	@ (8015198 <f_mount+0xbc>)
 8015158:	69fb      	ldr	r3, [r7, #28]
 801515a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	2b00      	cmp	r3, #0
 8015162:	d002      	beq.n	801516a <f_mount+0x8e>
 8015164:	79fb      	ldrb	r3, [r7, #7]
 8015166:	2b01      	cmp	r3, #1
 8015168:	d001      	beq.n	801516e <f_mount+0x92>
 801516a:	2300      	movs	r3, #0
 801516c:	e010      	b.n	8015190 <f_mount+0xb4>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801516e:	f107 010c 	add.w	r1, r7, #12
 8015172:	f107 0308 	add.w	r3, r7, #8
 8015176:	2200      	movs	r2, #0
 8015178:	4618      	mov	r0, r3
 801517a:	f7ff fd13 	bl	8014ba4 <find_volume>
 801517e:	4603      	mov	r3, r0
 8015180:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	7dfa      	ldrb	r2, [r7, #23]
 8015186:	4611      	mov	r1, r2
 8015188:	4618      	mov	r0, r3
 801518a:	f7fd ffa4 	bl	80130d6 <unlock_fs>
 801518e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015190:	4618      	mov	r0, r3
 8015192:	3720      	adds	r7, #32
 8015194:	46bd      	mov	sp, r7
 8015196:	bd80      	pop	{r7, pc}
 8015198:	24002dd8 	.word	0x24002dd8

0801519c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801519c:	b580      	push	{r7, lr}
 801519e:	b09a      	sub	sp, #104	@ 0x68
 80151a0:	af00      	add	r7, sp, #0
 80151a2:	60f8      	str	r0, [r7, #12]
 80151a4:	60b9      	str	r1, [r7, #8]
 80151a6:	4613      	mov	r3, r2
 80151a8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d101      	bne.n	80151b4 <f_open+0x18>
 80151b0:	2309      	movs	r3, #9
 80151b2:	e195      	b.n	80154e0 <f_open+0x344>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80151b4:	79fb      	ldrb	r3, [r7, #7]
 80151b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80151ba:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80151bc:	79fa      	ldrb	r2, [r7, #7]
 80151be:	f107 0114 	add.w	r1, r7, #20
 80151c2:	f107 0308 	add.w	r3, r7, #8
 80151c6:	4618      	mov	r0, r3
 80151c8:	f7ff fcec 	bl	8014ba4 <find_volume>
 80151cc:	4603      	mov	r3, r0
 80151ce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 80151d2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	f040 8172 	bne.w	80154c0 <f_open+0x324>
		dj.obj.fs = fs;
 80151dc:	697b      	ldr	r3, [r7, #20]
 80151de:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
 80151e0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80151e4:	f001 fe01 	bl	8016dea <ff_memalloc>
 80151e8:	65b8      	str	r0, [r7, #88]	@ 0x58
 80151ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d106      	bne.n	80151fe <f_open+0x62>
 80151f0:	697b      	ldr	r3, [r7, #20]
 80151f2:	2111      	movs	r1, #17
 80151f4:	4618      	mov	r0, r3
 80151f6:	f7fd ff6e 	bl	80130d6 <unlock_fs>
 80151fa:	2311      	movs	r3, #17
 80151fc:	e170      	b.n	80154e0 <f_open+0x344>
 80151fe:	697b      	ldr	r3, [r7, #20]
 8015200:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8015202:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8015204:	68ba      	ldr	r2, [r7, #8]
 8015206:	f107 0318 	add.w	r3, r7, #24
 801520a:	4611      	mov	r1, r2
 801520c:	4618      	mov	r0, r3
 801520e:	f7ff fb9f 	bl	8014950 <follow_path>
 8015212:	4603      	mov	r3, r0
 8015214:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8015218:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801521c:	2b00      	cmp	r3, #0
 801521e:	d107      	bne.n	8015230 <f_open+0x94>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8015220:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8015224:	b25b      	sxtb	r3, r3
 8015226:	2b00      	cmp	r3, #0
 8015228:	da02      	bge.n	8015230 <f_open+0x94>
				res = FR_INVALID_NAME;
 801522a:	2306      	movs	r3, #6
 801522c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8015230:	79fb      	ldrb	r3, [r7, #7]
 8015232:	f003 031c 	and.w	r3, r3, #28
 8015236:	2b00      	cmp	r3, #0
 8015238:	d077      	beq.n	801532a <f_open+0x18e>
			if (res != FR_OK) {					/* No file, create new */
 801523a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801523e:	2b00      	cmp	r3, #0
 8015240:	d010      	beq.n	8015264 <f_open+0xc8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8015242:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8015246:	2b04      	cmp	r3, #4
 8015248:	d107      	bne.n	801525a <f_open+0xbe>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 801524a:	f107 0318 	add.w	r3, r7, #24
 801524e:	4618      	mov	r0, r3
 8015250:	f7ff f836 	bl	80142c0 <dir_register>
 8015254:	4603      	mov	r3, r0
 8015256:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801525a:	79fb      	ldrb	r3, [r7, #7]
 801525c:	f043 0308 	orr.w	r3, r3, #8
 8015260:	71fb      	strb	r3, [r7, #7]
 8015262:	e010      	b.n	8015286 <f_open+0xea>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8015264:	7fbb      	ldrb	r3, [r7, #30]
 8015266:	f003 0311 	and.w	r3, r3, #17
 801526a:	2b00      	cmp	r3, #0
 801526c:	d003      	beq.n	8015276 <f_open+0xda>
					res = FR_DENIED;
 801526e:	2307      	movs	r3, #7
 8015270:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8015274:	e007      	b.n	8015286 <f_open+0xea>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8015276:	79fb      	ldrb	r3, [r7, #7]
 8015278:	f003 0304 	and.w	r3, r3, #4
 801527c:	2b00      	cmp	r3, #0
 801527e:	d002      	beq.n	8015286 <f_open+0xea>
 8015280:	2308      	movs	r3, #8
 8015282:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8015286:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801528a:	2b00      	cmp	r3, #0
 801528c:	d167      	bne.n	801535e <f_open+0x1c2>
 801528e:	79fb      	ldrb	r3, [r7, #7]
 8015290:	f003 0308 	and.w	r3, r3, #8
 8015294:	2b00      	cmp	r3, #0
 8015296:	d062      	beq.n	801535e <f_open+0x1c2>
				dw = GET_FATTIME();
 8015298:	4b93      	ldr	r3, [pc, #588]	@ (80154e8 <f_open+0x34c>)
 801529a:	657b      	str	r3, [r7, #84]	@ 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801529c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801529e:	330e      	adds	r3, #14
 80152a0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80152a2:	4618      	mov	r0, r3
 80152a4:	f7fd fe57 	bl	8012f56 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80152a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80152aa:	3316      	adds	r3, #22
 80152ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80152ae:	4618      	mov	r0, r3
 80152b0:	f7fd fe51 	bl	8012f56 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80152b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80152b6:	330b      	adds	r3, #11
 80152b8:	2220      	movs	r2, #32
 80152ba:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80152bc:	697b      	ldr	r3, [r7, #20]
 80152be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80152c0:	4611      	mov	r1, r2
 80152c2:	4618      	mov	r0, r3
 80152c4:	f7fe fc6a 	bl	8013b9c <ld_clust>
 80152c8:	6538      	str	r0, [r7, #80]	@ 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80152ca:	697b      	ldr	r3, [r7, #20]
 80152cc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80152ce:	2200      	movs	r2, #0
 80152d0:	4618      	mov	r0, r3
 80152d2:	f7fe fc82 	bl	8013bda <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80152d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80152d8:	331c      	adds	r3, #28
 80152da:	2100      	movs	r1, #0
 80152dc:	4618      	mov	r0, r3
 80152de:	f7fd fe3a 	bl	8012f56 <st_dword>
					fs->wflag = 1;
 80152e2:	697b      	ldr	r3, [r7, #20]
 80152e4:	2201      	movs	r2, #1
 80152e6:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80152e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d037      	beq.n	801535e <f_open+0x1c2>
						dw = fs->winsect;
 80152ee:	697b      	ldr	r3, [r7, #20]
 80152f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80152f2:	657b      	str	r3, [r7, #84]	@ 0x54
						res = remove_chain(&dj.obj, cl, 0);
 80152f4:	f107 0318 	add.w	r3, r7, #24
 80152f8:	2200      	movs	r2, #0
 80152fa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80152fc:	4618      	mov	r0, r3
 80152fe:	f7fe f995 	bl	801362c <remove_chain>
 8015302:	4603      	mov	r3, r0
 8015304:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8015308:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801530c:	2b00      	cmp	r3, #0
 801530e:	d126      	bne.n	801535e <f_open+0x1c2>
							res = move_window(fs, dw);
 8015310:	697b      	ldr	r3, [r7, #20]
 8015312:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8015314:	4618      	mov	r0, r3
 8015316:	f7fd ff3d 	bl	8013194 <move_window>
 801531a:	4603      	mov	r3, r0
 801531c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8015320:	697b      	ldr	r3, [r7, #20]
 8015322:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8015324:	3a01      	subs	r2, #1
 8015326:	615a      	str	r2, [r3, #20]
 8015328:	e019      	b.n	801535e <f_open+0x1c2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801532a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801532e:	2b00      	cmp	r3, #0
 8015330:	d115      	bne.n	801535e <f_open+0x1c2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8015332:	7fbb      	ldrb	r3, [r7, #30]
 8015334:	f003 0310 	and.w	r3, r3, #16
 8015338:	2b00      	cmp	r3, #0
 801533a:	d003      	beq.n	8015344 <f_open+0x1a8>
					res = FR_NO_FILE;
 801533c:	2304      	movs	r3, #4
 801533e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8015342:	e00c      	b.n	801535e <f_open+0x1c2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8015344:	79fb      	ldrb	r3, [r7, #7]
 8015346:	f003 0302 	and.w	r3, r3, #2
 801534a:	2b00      	cmp	r3, #0
 801534c:	d007      	beq.n	801535e <f_open+0x1c2>
 801534e:	7fbb      	ldrb	r3, [r7, #30]
 8015350:	f003 0301 	and.w	r3, r3, #1
 8015354:	2b00      	cmp	r3, #0
 8015356:	d002      	beq.n	801535e <f_open+0x1c2>
						res = FR_DENIED;
 8015358:	2307      	movs	r3, #7
 801535a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 801535e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8015362:	2b00      	cmp	r3, #0
 8015364:	d10f      	bne.n	8015386 <f_open+0x1ea>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8015366:	79fb      	ldrb	r3, [r7, #7]
 8015368:	f003 0308 	and.w	r3, r3, #8
 801536c:	2b00      	cmp	r3, #0
 801536e:	d003      	beq.n	8015378 <f_open+0x1dc>
				mode |= FA_MODIFIED;
 8015370:	79fb      	ldrb	r3, [r7, #7]
 8015372:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015376:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8015378:	697b      	ldr	r3, [r7, #20]
 801537a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801537c:	68fb      	ldr	r3, [r7, #12]
 801537e:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 8015380:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	625a      	str	r2, [r3, #36]	@ 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 8015386:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801538a:	2b00      	cmp	r3, #0
 801538c:	f040 8095 	bne.w	80154ba <f_open+0x31e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8015390:	697b      	ldr	r3, [r7, #20]
 8015392:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015394:	4611      	mov	r1, r2
 8015396:	4618      	mov	r0, r3
 8015398:	f7fe fc00 	bl	8013b9c <ld_clust>
 801539c:	4602      	mov	r2, r0
 801539e:	68fb      	ldr	r3, [r7, #12]
 80153a0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80153a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80153a4:	331c      	adds	r3, #28
 80153a6:	4618      	mov	r0, r3
 80153a8:	f7fd fd97 	bl	8012eda <ld_dword>
 80153ac:	4602      	mov	r2, r0
 80153ae:	68fb      	ldr	r3, [r7, #12]
 80153b0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	2200      	movs	r2, #0
 80153b6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80153b8:	697a      	ldr	r2, [r7, #20]
 80153ba:	68fb      	ldr	r3, [r7, #12]
 80153bc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80153be:	697b      	ldr	r3, [r7, #20]
 80153c0:	88da      	ldrh	r2, [r3, #6]
 80153c2:	68fb      	ldr	r3, [r7, #12]
 80153c4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80153c6:	68fb      	ldr	r3, [r7, #12]
 80153c8:	79fa      	ldrb	r2, [r7, #7]
 80153ca:	741a      	strb	r2, [r3, #16]
			fp->err = 0;			/* Clear error flag */
 80153cc:	68fb      	ldr	r3, [r7, #12]
 80153ce:	2200      	movs	r2, #0
 80153d0:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 80153d2:	68fb      	ldr	r3, [r7, #12]
 80153d4:	2200      	movs	r2, #0
 80153d6:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80153d8:	68fb      	ldr	r3, [r7, #12]
 80153da:	2200      	movs	r2, #0
 80153dc:	615a      	str	r2, [r3, #20]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	332c      	adds	r3, #44	@ 0x2c
 80153e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80153e6:	2100      	movs	r1, #0
 80153e8:	4618      	mov	r0, r3
 80153ea:	f7fd fe01 	bl	8012ff0 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80153ee:	79fb      	ldrb	r3, [r7, #7]
 80153f0:	f003 0320 	and.w	r3, r3, #32
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d060      	beq.n	80154ba <f_open+0x31e>
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	68db      	ldr	r3, [r3, #12]
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	d05c      	beq.n	80154ba <f_open+0x31e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8015400:	68fb      	ldr	r3, [r7, #12]
 8015402:	68da      	ldr	r2, [r3, #12]
 8015404:	68fb      	ldr	r3, [r7, #12]
 8015406:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8015408:	697b      	ldr	r3, [r7, #20]
 801540a:	895b      	ldrh	r3, [r3, #10]
 801540c:	025b      	lsls	r3, r3, #9
 801540e:	64fb      	str	r3, [r7, #76]	@ 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	689b      	ldr	r3, [r3, #8]
 8015414:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8015416:	68fb      	ldr	r3, [r7, #12]
 8015418:	68db      	ldr	r3, [r3, #12]
 801541a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801541c:	e016      	b.n	801544c <f_open+0x2b0>
					clst = get_fat(&fp->obj, clst);
 801541e:	68fb      	ldr	r3, [r7, #12]
 8015420:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8015422:	4618      	mov	r0, r3
 8015424:	f7fd ff71 	bl	801330a <get_fat>
 8015428:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801542a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801542c:	2b01      	cmp	r3, #1
 801542e:	d802      	bhi.n	8015436 <f_open+0x29a>
 8015430:	2302      	movs	r3, #2
 8015432:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8015436:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8015438:	f1b3 3fff 	cmp.w	r3, #4294967295
 801543c:	d102      	bne.n	8015444 <f_open+0x2a8>
 801543e:	2301      	movs	r3, #1
 8015440:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8015444:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8015446:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015448:	1ad3      	subs	r3, r2, r3
 801544a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801544c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8015450:	2b00      	cmp	r3, #0
 8015452:	d103      	bne.n	801545c <f_open+0x2c0>
 8015454:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8015456:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015458:	429a      	cmp	r2, r3
 801545a:	d8e0      	bhi.n	801541e <f_open+0x282>
				}
				fp->clust = clst;
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8015460:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8015462:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8015466:	2b00      	cmp	r3, #0
 8015468:	d127      	bne.n	80154ba <f_open+0x31e>
 801546a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801546c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015470:	2b00      	cmp	r3, #0
 8015472:	d022      	beq.n	80154ba <f_open+0x31e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8015474:	697b      	ldr	r3, [r7, #20]
 8015476:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8015478:	4618      	mov	r0, r3
 801547a:	f7fd ff27 	bl	80132cc <clust2sect>
 801547e:	64b8      	str	r0, [r7, #72]	@ 0x48
 8015480:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015482:	2b00      	cmp	r3, #0
 8015484:	d103      	bne.n	801548e <f_open+0x2f2>
						res = FR_INT_ERR;
 8015486:	2302      	movs	r3, #2
 8015488:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801548c:	e015      	b.n	80154ba <f_open+0x31e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801548e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015490:	0a5a      	lsrs	r2, r3, #9
 8015492:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015494:	441a      	add	r2, r3
 8015496:	68fb      	ldr	r3, [r7, #12]
 8015498:	61da      	str	r2, [r3, #28]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801549a:	697b      	ldr	r3, [r7, #20]
 801549c:	7858      	ldrb	r0, [r3, #1]
 801549e:	68fb      	ldr	r3, [r7, #12]
 80154a0:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	69da      	ldr	r2, [r3, #28]
 80154a8:	2301      	movs	r3, #1
 80154aa:	f7fd fc9f 	bl	8012dec <disk_read>
 80154ae:	4603      	mov	r3, r0
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d002      	beq.n	80154ba <f_open+0x31e>
 80154b4:	2301      	movs	r3, #1
 80154b6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 80154ba:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80154bc:	f001 fca1 	bl	8016e02 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80154c0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d002      	beq.n	80154ce <f_open+0x332>
 80154c8:	68fb      	ldr	r3, [r7, #12]
 80154ca:	2200      	movs	r2, #0
 80154cc:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80154ce:	697b      	ldr	r3, [r7, #20]
 80154d0:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80154d4:	4611      	mov	r1, r2
 80154d6:	4618      	mov	r0, r3
 80154d8:	f7fd fdfd 	bl	80130d6 <unlock_fs>
 80154dc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80154e0:	4618      	mov	r0, r3
 80154e2:	3768      	adds	r7, #104	@ 0x68
 80154e4:	46bd      	mov	sp, r7
 80154e6:	bd80      	pop	{r7, pc}
 80154e8:	5b2b0000 	.word	0x5b2b0000

080154ec <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80154ec:	b580      	push	{r7, lr}
 80154ee:	b08e      	sub	sp, #56	@ 0x38
 80154f0:	af00      	add	r7, sp, #0
 80154f2:	60f8      	str	r0, [r7, #12]
 80154f4:	60b9      	str	r1, [r7, #8]
 80154f6:	607a      	str	r2, [r7, #4]
 80154f8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80154fa:	68bb      	ldr	r3, [r7, #8]
 80154fc:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80154fe:	683b      	ldr	r3, [r7, #0]
 8015500:	2200      	movs	r2, #0
 8015502:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8015504:	68fb      	ldr	r3, [r7, #12]
 8015506:	f107 0214 	add.w	r2, r7, #20
 801550a:	4611      	mov	r1, r2
 801550c:	4618      	mov	r0, r3
 801550e:	f7ff fd9d 	bl	801504c <validate>
 8015512:	4603      	mov	r3, r0
 8015514:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8015518:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801551c:	2b00      	cmp	r3, #0
 801551e:	d107      	bne.n	8015530 <f_read+0x44>
 8015520:	68fb      	ldr	r3, [r7, #12]
 8015522:	7c5b      	ldrb	r3, [r3, #17]
 8015524:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015528:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801552c:	2b00      	cmp	r3, #0
 801552e:	d009      	beq.n	8015544 <f_read+0x58>
 8015530:	697b      	ldr	r3, [r7, #20]
 8015532:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8015536:	4611      	mov	r1, r2
 8015538:	4618      	mov	r0, r3
 801553a:	f7fd fdcc 	bl	80130d6 <unlock_fs>
 801553e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8015542:	e13d      	b.n	80157c0 <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8015544:	68fb      	ldr	r3, [r7, #12]
 8015546:	7c1b      	ldrb	r3, [r3, #16]
 8015548:	f003 0301 	and.w	r3, r3, #1
 801554c:	2b00      	cmp	r3, #0
 801554e:	d106      	bne.n	801555e <f_read+0x72>
 8015550:	697b      	ldr	r3, [r7, #20]
 8015552:	2107      	movs	r1, #7
 8015554:	4618      	mov	r0, r3
 8015556:	f7fd fdbe 	bl	80130d6 <unlock_fs>
 801555a:	2307      	movs	r3, #7
 801555c:	e130      	b.n	80157c0 <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 801555e:	68fb      	ldr	r3, [r7, #12]
 8015560:	68da      	ldr	r2, [r3, #12]
 8015562:	68fb      	ldr	r3, [r7, #12]
 8015564:	695b      	ldr	r3, [r3, #20]
 8015566:	1ad3      	subs	r3, r2, r3
 8015568:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801556a:	687a      	ldr	r2, [r7, #4]
 801556c:	6a3b      	ldr	r3, [r7, #32]
 801556e:	429a      	cmp	r2, r3
 8015570:	f240 811c 	bls.w	80157ac <f_read+0x2c0>
 8015574:	6a3b      	ldr	r3, [r7, #32]
 8015576:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8015578:	e118      	b.n	80157ac <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801557a:	68fb      	ldr	r3, [r7, #12]
 801557c:	695b      	ldr	r3, [r3, #20]
 801557e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015582:	2b00      	cmp	r3, #0
 8015584:	f040 80e4 	bne.w	8015750 <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8015588:	68fb      	ldr	r3, [r7, #12]
 801558a:	695b      	ldr	r3, [r3, #20]
 801558c:	0a5b      	lsrs	r3, r3, #9
 801558e:	697a      	ldr	r2, [r7, #20]
 8015590:	8952      	ldrh	r2, [r2, #10]
 8015592:	3a01      	subs	r2, #1
 8015594:	4013      	ands	r3, r2
 8015596:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8015598:	69fb      	ldr	r3, [r7, #28]
 801559a:	2b00      	cmp	r3, #0
 801559c:	d139      	bne.n	8015612 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801559e:	68fb      	ldr	r3, [r7, #12]
 80155a0:	695b      	ldr	r3, [r3, #20]
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d103      	bne.n	80155ae <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80155a6:	68fb      	ldr	r3, [r7, #12]
 80155a8:	689b      	ldr	r3, [r3, #8]
 80155aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80155ac:	e013      	b.n	80155d6 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80155ae:	68fb      	ldr	r3, [r7, #12]
 80155b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d007      	beq.n	80155c6 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80155b6:	68fb      	ldr	r3, [r7, #12]
 80155b8:	695b      	ldr	r3, [r3, #20]
 80155ba:	4619      	mov	r1, r3
 80155bc:	68f8      	ldr	r0, [r7, #12]
 80155be:	f7fe f932 	bl	8013826 <clmt_clust>
 80155c2:	6338      	str	r0, [r7, #48]	@ 0x30
 80155c4:	e007      	b.n	80155d6 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80155c6:	68fa      	ldr	r2, [r7, #12]
 80155c8:	68fb      	ldr	r3, [r7, #12]
 80155ca:	699b      	ldr	r3, [r3, #24]
 80155cc:	4619      	mov	r1, r3
 80155ce:	4610      	mov	r0, r2
 80155d0:	f7fd fe9b 	bl	801330a <get_fat>
 80155d4:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80155d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155d8:	2b01      	cmp	r3, #1
 80155da:	d809      	bhi.n	80155f0 <f_read+0x104>
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	2202      	movs	r2, #2
 80155e0:	745a      	strb	r2, [r3, #17]
 80155e2:	697b      	ldr	r3, [r7, #20]
 80155e4:	2102      	movs	r1, #2
 80155e6:	4618      	mov	r0, r3
 80155e8:	f7fd fd75 	bl	80130d6 <unlock_fs>
 80155ec:	2302      	movs	r3, #2
 80155ee:	e0e7      	b.n	80157c0 <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80155f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80155f6:	d109      	bne.n	801560c <f_read+0x120>
 80155f8:	68fb      	ldr	r3, [r7, #12]
 80155fa:	2201      	movs	r2, #1
 80155fc:	745a      	strb	r2, [r3, #17]
 80155fe:	697b      	ldr	r3, [r7, #20]
 8015600:	2101      	movs	r1, #1
 8015602:	4618      	mov	r0, r3
 8015604:	f7fd fd67 	bl	80130d6 <unlock_fs>
 8015608:	2301      	movs	r3, #1
 801560a:	e0d9      	b.n	80157c0 <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 801560c:	68fb      	ldr	r3, [r7, #12]
 801560e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015610:	619a      	str	r2, [r3, #24]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8015612:	697a      	ldr	r2, [r7, #20]
 8015614:	68fb      	ldr	r3, [r7, #12]
 8015616:	699b      	ldr	r3, [r3, #24]
 8015618:	4619      	mov	r1, r3
 801561a:	4610      	mov	r0, r2
 801561c:	f7fd fe56 	bl	80132cc <clust2sect>
 8015620:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8015622:	69bb      	ldr	r3, [r7, #24]
 8015624:	2b00      	cmp	r3, #0
 8015626:	d109      	bne.n	801563c <f_read+0x150>
 8015628:	68fb      	ldr	r3, [r7, #12]
 801562a:	2202      	movs	r2, #2
 801562c:	745a      	strb	r2, [r3, #17]
 801562e:	697b      	ldr	r3, [r7, #20]
 8015630:	2102      	movs	r1, #2
 8015632:	4618      	mov	r0, r3
 8015634:	f7fd fd4f 	bl	80130d6 <unlock_fs>
 8015638:	2302      	movs	r3, #2
 801563a:	e0c1      	b.n	80157c0 <f_read+0x2d4>
			sect += csect;
 801563c:	69ba      	ldr	r2, [r7, #24]
 801563e:	69fb      	ldr	r3, [r7, #28]
 8015640:	4413      	add	r3, r2
 8015642:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	0a5b      	lsrs	r3, r3, #9
 8015648:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 801564a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801564c:	2b00      	cmp	r3, #0
 801564e:	d03e      	beq.n	80156ce <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8015650:	69fa      	ldr	r2, [r7, #28]
 8015652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015654:	4413      	add	r3, r2
 8015656:	697a      	ldr	r2, [r7, #20]
 8015658:	8952      	ldrh	r2, [r2, #10]
 801565a:	4293      	cmp	r3, r2
 801565c:	d905      	bls.n	801566a <f_read+0x17e>
					cc = fs->csize - csect;
 801565e:	697b      	ldr	r3, [r7, #20]
 8015660:	895b      	ldrh	r3, [r3, #10]
 8015662:	461a      	mov	r2, r3
 8015664:	69fb      	ldr	r3, [r7, #28]
 8015666:	1ad3      	subs	r3, r2, r3
 8015668:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801566a:	697b      	ldr	r3, [r7, #20]
 801566c:	7858      	ldrb	r0, [r3, #1]
 801566e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015670:	69ba      	ldr	r2, [r7, #24]
 8015672:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015674:	f7fd fbba 	bl	8012dec <disk_read>
 8015678:	4603      	mov	r3, r0
 801567a:	2b00      	cmp	r3, #0
 801567c:	d009      	beq.n	8015692 <f_read+0x1a6>
 801567e:	68fb      	ldr	r3, [r7, #12]
 8015680:	2201      	movs	r2, #1
 8015682:	745a      	strb	r2, [r3, #17]
 8015684:	697b      	ldr	r3, [r7, #20]
 8015686:	2101      	movs	r1, #1
 8015688:	4618      	mov	r0, r3
 801568a:	f7fd fd24 	bl	80130d6 <unlock_fs>
 801568e:	2301      	movs	r3, #1
 8015690:	e096      	b.n	80157c0 <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8015692:	68fb      	ldr	r3, [r7, #12]
 8015694:	7c1b      	ldrb	r3, [r3, #16]
 8015696:	b25b      	sxtb	r3, r3
 8015698:	2b00      	cmp	r3, #0
 801569a:	da14      	bge.n	80156c6 <f_read+0x1da>
 801569c:	68fb      	ldr	r3, [r7, #12]
 801569e:	69da      	ldr	r2, [r3, #28]
 80156a0:	69bb      	ldr	r3, [r7, #24]
 80156a2:	1ad3      	subs	r3, r2, r3
 80156a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80156a6:	429a      	cmp	r2, r3
 80156a8:	d90d      	bls.n	80156c6 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80156aa:	68fb      	ldr	r3, [r7, #12]
 80156ac:	69da      	ldr	r2, [r3, #28]
 80156ae:	69bb      	ldr	r3, [r7, #24]
 80156b0:	1ad3      	subs	r3, r2, r3
 80156b2:	025b      	lsls	r3, r3, #9
 80156b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80156b6:	18d0      	adds	r0, r2, r3
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	332c      	adds	r3, #44	@ 0x2c
 80156bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80156c0:	4619      	mov	r1, r3
 80156c2:	f7fd fc74 	bl	8012fae <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80156c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156c8:	025b      	lsls	r3, r3, #9
 80156ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80156cc:	e05a      	b.n	8015784 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80156ce:	68fb      	ldr	r3, [r7, #12]
 80156d0:	69db      	ldr	r3, [r3, #28]
 80156d2:	69ba      	ldr	r2, [r7, #24]
 80156d4:	429a      	cmp	r2, r3
 80156d6:	d038      	beq.n	801574a <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80156d8:	68fb      	ldr	r3, [r7, #12]
 80156da:	7c1b      	ldrb	r3, [r3, #16]
 80156dc:	b25b      	sxtb	r3, r3
 80156de:	2b00      	cmp	r3, #0
 80156e0:	da1d      	bge.n	801571e <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80156e2:	697b      	ldr	r3, [r7, #20]
 80156e4:	7858      	ldrb	r0, [r3, #1]
 80156e6:	68fb      	ldr	r3, [r7, #12]
 80156e8:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 80156ec:	68fb      	ldr	r3, [r7, #12]
 80156ee:	69da      	ldr	r2, [r3, #28]
 80156f0:	2301      	movs	r3, #1
 80156f2:	f7fd fb9b 	bl	8012e2c <disk_write>
 80156f6:	4603      	mov	r3, r0
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d009      	beq.n	8015710 <f_read+0x224>
 80156fc:	68fb      	ldr	r3, [r7, #12]
 80156fe:	2201      	movs	r2, #1
 8015700:	745a      	strb	r2, [r3, #17]
 8015702:	697b      	ldr	r3, [r7, #20]
 8015704:	2101      	movs	r1, #1
 8015706:	4618      	mov	r0, r3
 8015708:	f7fd fce5 	bl	80130d6 <unlock_fs>
 801570c:	2301      	movs	r3, #1
 801570e:	e057      	b.n	80157c0 <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 8015710:	68fb      	ldr	r3, [r7, #12]
 8015712:	7c1b      	ldrb	r3, [r3, #16]
 8015714:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015718:	b2da      	uxtb	r2, r3
 801571a:	68fb      	ldr	r3, [r7, #12]
 801571c:	741a      	strb	r2, [r3, #16]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801571e:	697b      	ldr	r3, [r7, #20]
 8015720:	7858      	ldrb	r0, [r3, #1]
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 8015728:	2301      	movs	r3, #1
 801572a:	69ba      	ldr	r2, [r7, #24]
 801572c:	f7fd fb5e 	bl	8012dec <disk_read>
 8015730:	4603      	mov	r3, r0
 8015732:	2b00      	cmp	r3, #0
 8015734:	d009      	beq.n	801574a <f_read+0x25e>
 8015736:	68fb      	ldr	r3, [r7, #12]
 8015738:	2201      	movs	r2, #1
 801573a:	745a      	strb	r2, [r3, #17]
 801573c:	697b      	ldr	r3, [r7, #20]
 801573e:	2101      	movs	r1, #1
 8015740:	4618      	mov	r0, r3
 8015742:	f7fd fcc8 	bl	80130d6 <unlock_fs>
 8015746:	2301      	movs	r3, #1
 8015748:	e03a      	b.n	80157c0 <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 801574a:	68fb      	ldr	r3, [r7, #12]
 801574c:	69ba      	ldr	r2, [r7, #24]
 801574e:	61da      	str	r2, [r3, #28]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	695b      	ldr	r3, [r3, #20]
 8015754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015758:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 801575c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801575e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	429a      	cmp	r2, r3
 8015764:	d901      	bls.n	801576a <f_read+0x27e>
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801576a:	68fb      	ldr	r3, [r7, #12]
 801576c:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8015770:	68fb      	ldr	r3, [r7, #12]
 8015772:	695b      	ldr	r3, [r3, #20]
 8015774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015778:	4413      	add	r3, r2
 801577a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801577c:	4619      	mov	r1, r3
 801577e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015780:	f7fd fc15 	bl	8012fae <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8015784:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015788:	4413      	add	r3, r2
 801578a:	627b      	str	r3, [r7, #36]	@ 0x24
 801578c:	68fb      	ldr	r3, [r7, #12]
 801578e:	695a      	ldr	r2, [r3, #20]
 8015790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015792:	441a      	add	r2, r3
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	615a      	str	r2, [r3, #20]
 8015798:	683b      	ldr	r3, [r7, #0]
 801579a:	681a      	ldr	r2, [r3, #0]
 801579c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801579e:	441a      	add	r2, r3
 80157a0:	683b      	ldr	r3, [r7, #0]
 80157a2:	601a      	str	r2, [r3, #0]
 80157a4:	687a      	ldr	r2, [r7, #4]
 80157a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157a8:	1ad3      	subs	r3, r2, r3
 80157aa:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	f47f aee3 	bne.w	801557a <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80157b4:	697b      	ldr	r3, [r7, #20]
 80157b6:	2100      	movs	r1, #0
 80157b8:	4618      	mov	r0, r3
 80157ba:	f7fd fc8c 	bl	80130d6 <unlock_fs>
 80157be:	2300      	movs	r3, #0
}
 80157c0:	4618      	mov	r0, r3
 80157c2:	3738      	adds	r7, #56	@ 0x38
 80157c4:	46bd      	mov	sp, r7
 80157c6:	bd80      	pop	{r7, pc}

080157c8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80157c8:	b580      	push	{r7, lr}
 80157ca:	b08c      	sub	sp, #48	@ 0x30
 80157cc:	af00      	add	r7, sp, #0
 80157ce:	60f8      	str	r0, [r7, #12]
 80157d0:	60b9      	str	r1, [r7, #8]
 80157d2:	607a      	str	r2, [r7, #4]
 80157d4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80157d6:	68bb      	ldr	r3, [r7, #8]
 80157d8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80157da:	683b      	ldr	r3, [r7, #0]
 80157dc:	2200      	movs	r2, #0
 80157de:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80157e0:	68fb      	ldr	r3, [r7, #12]
 80157e2:	f107 0210 	add.w	r2, r7, #16
 80157e6:	4611      	mov	r1, r2
 80157e8:	4618      	mov	r0, r3
 80157ea:	f7ff fc2f 	bl	801504c <validate>
 80157ee:	4603      	mov	r3, r0
 80157f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80157f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	d107      	bne.n	801580c <f_write+0x44>
 80157fc:	68fb      	ldr	r3, [r7, #12]
 80157fe:	7c5b      	ldrb	r3, [r3, #17]
 8015800:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8015804:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8015808:	2b00      	cmp	r3, #0
 801580a:	d009      	beq.n	8015820 <f_write+0x58>
 801580c:	693b      	ldr	r3, [r7, #16]
 801580e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8015812:	4611      	mov	r1, r2
 8015814:	4618      	mov	r0, r3
 8015816:	f7fd fc5e 	bl	80130d6 <unlock_fs>
 801581a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801581e:	e173      	b.n	8015b08 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8015820:	68fb      	ldr	r3, [r7, #12]
 8015822:	7c1b      	ldrb	r3, [r3, #16]
 8015824:	f003 0302 	and.w	r3, r3, #2
 8015828:	2b00      	cmp	r3, #0
 801582a:	d106      	bne.n	801583a <f_write+0x72>
 801582c:	693b      	ldr	r3, [r7, #16]
 801582e:	2107      	movs	r1, #7
 8015830:	4618      	mov	r0, r3
 8015832:	f7fd fc50 	bl	80130d6 <unlock_fs>
 8015836:	2307      	movs	r3, #7
 8015838:	e166      	b.n	8015b08 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801583a:	68fb      	ldr	r3, [r7, #12]
 801583c:	695a      	ldr	r2, [r3, #20]
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	441a      	add	r2, r3
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	695b      	ldr	r3, [r3, #20]
 8015846:	429a      	cmp	r2, r3
 8015848:	f080 814b 	bcs.w	8015ae2 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801584c:	68fb      	ldr	r3, [r7, #12]
 801584e:	695b      	ldr	r3, [r3, #20]
 8015850:	43db      	mvns	r3, r3
 8015852:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8015854:	e145      	b.n	8015ae2 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8015856:	68fb      	ldr	r3, [r7, #12]
 8015858:	695b      	ldr	r3, [r3, #20]
 801585a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801585e:	2b00      	cmp	r3, #0
 8015860:	f040 8101 	bne.w	8015a66 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8015864:	68fb      	ldr	r3, [r7, #12]
 8015866:	695b      	ldr	r3, [r3, #20]
 8015868:	0a5b      	lsrs	r3, r3, #9
 801586a:	693a      	ldr	r2, [r7, #16]
 801586c:	8952      	ldrh	r2, [r2, #10]
 801586e:	3a01      	subs	r2, #1
 8015870:	4013      	ands	r3, r2
 8015872:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8015874:	69bb      	ldr	r3, [r7, #24]
 8015876:	2b00      	cmp	r3, #0
 8015878:	d14d      	bne.n	8015916 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	695b      	ldr	r3, [r3, #20]
 801587e:	2b00      	cmp	r3, #0
 8015880:	d10c      	bne.n	801589c <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	689b      	ldr	r3, [r3, #8]
 8015886:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8015888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801588a:	2b00      	cmp	r3, #0
 801588c:	d11a      	bne.n	80158c4 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	2100      	movs	r1, #0
 8015892:	4618      	mov	r0, r3
 8015894:	f7fd ff2f 	bl	80136f6 <create_chain>
 8015898:	62b8      	str	r0, [r7, #40]	@ 0x28
 801589a:	e013      	b.n	80158c4 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	d007      	beq.n	80158b4 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	695b      	ldr	r3, [r3, #20]
 80158a8:	4619      	mov	r1, r3
 80158aa:	68f8      	ldr	r0, [r7, #12]
 80158ac:	f7fd ffbb 	bl	8013826 <clmt_clust>
 80158b0:	62b8      	str	r0, [r7, #40]	@ 0x28
 80158b2:	e007      	b.n	80158c4 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80158b4:	68fa      	ldr	r2, [r7, #12]
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	699b      	ldr	r3, [r3, #24]
 80158ba:	4619      	mov	r1, r3
 80158bc:	4610      	mov	r0, r2
 80158be:	f7fd ff1a 	bl	80136f6 <create_chain>
 80158c2:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80158c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	f000 8110 	beq.w	8015aec <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80158cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80158ce:	2b01      	cmp	r3, #1
 80158d0:	d109      	bne.n	80158e6 <f_write+0x11e>
 80158d2:	68fb      	ldr	r3, [r7, #12]
 80158d4:	2202      	movs	r2, #2
 80158d6:	745a      	strb	r2, [r3, #17]
 80158d8:	693b      	ldr	r3, [r7, #16]
 80158da:	2102      	movs	r1, #2
 80158dc:	4618      	mov	r0, r3
 80158de:	f7fd fbfa 	bl	80130d6 <unlock_fs>
 80158e2:	2302      	movs	r3, #2
 80158e4:	e110      	b.n	8015b08 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80158e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80158e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158ec:	d109      	bne.n	8015902 <f_write+0x13a>
 80158ee:	68fb      	ldr	r3, [r7, #12]
 80158f0:	2201      	movs	r2, #1
 80158f2:	745a      	strb	r2, [r3, #17]
 80158f4:	693b      	ldr	r3, [r7, #16]
 80158f6:	2101      	movs	r1, #1
 80158f8:	4618      	mov	r0, r3
 80158fa:	f7fd fbec 	bl	80130d6 <unlock_fs>
 80158fe:	2301      	movs	r3, #1
 8015900:	e102      	b.n	8015b08 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015906:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	689b      	ldr	r3, [r3, #8]
 801590c:	2b00      	cmp	r3, #0
 801590e:	d102      	bne.n	8015916 <f_write+0x14e>
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015914:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8015916:	68fb      	ldr	r3, [r7, #12]
 8015918:	7c1b      	ldrb	r3, [r3, #16]
 801591a:	b25b      	sxtb	r3, r3
 801591c:	2b00      	cmp	r3, #0
 801591e:	da1d      	bge.n	801595c <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015920:	693b      	ldr	r3, [r7, #16]
 8015922:	7858      	ldrb	r0, [r3, #1]
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 801592a:	68fb      	ldr	r3, [r7, #12]
 801592c:	69da      	ldr	r2, [r3, #28]
 801592e:	2301      	movs	r3, #1
 8015930:	f7fd fa7c 	bl	8012e2c <disk_write>
 8015934:	4603      	mov	r3, r0
 8015936:	2b00      	cmp	r3, #0
 8015938:	d009      	beq.n	801594e <f_write+0x186>
 801593a:	68fb      	ldr	r3, [r7, #12]
 801593c:	2201      	movs	r2, #1
 801593e:	745a      	strb	r2, [r3, #17]
 8015940:	693b      	ldr	r3, [r7, #16]
 8015942:	2101      	movs	r1, #1
 8015944:	4618      	mov	r0, r3
 8015946:	f7fd fbc6 	bl	80130d6 <unlock_fs>
 801594a:	2301      	movs	r3, #1
 801594c:	e0dc      	b.n	8015b08 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 801594e:	68fb      	ldr	r3, [r7, #12]
 8015950:	7c1b      	ldrb	r3, [r3, #16]
 8015952:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015956:	b2da      	uxtb	r2, r3
 8015958:	68fb      	ldr	r3, [r7, #12]
 801595a:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801595c:	693a      	ldr	r2, [r7, #16]
 801595e:	68fb      	ldr	r3, [r7, #12]
 8015960:	699b      	ldr	r3, [r3, #24]
 8015962:	4619      	mov	r1, r3
 8015964:	4610      	mov	r0, r2
 8015966:	f7fd fcb1 	bl	80132cc <clust2sect>
 801596a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801596c:	697b      	ldr	r3, [r7, #20]
 801596e:	2b00      	cmp	r3, #0
 8015970:	d109      	bne.n	8015986 <f_write+0x1be>
 8015972:	68fb      	ldr	r3, [r7, #12]
 8015974:	2202      	movs	r2, #2
 8015976:	745a      	strb	r2, [r3, #17]
 8015978:	693b      	ldr	r3, [r7, #16]
 801597a:	2102      	movs	r1, #2
 801597c:	4618      	mov	r0, r3
 801597e:	f7fd fbaa 	bl	80130d6 <unlock_fs>
 8015982:	2302      	movs	r3, #2
 8015984:	e0c0      	b.n	8015b08 <f_write+0x340>
			sect += csect;
 8015986:	697a      	ldr	r2, [r7, #20]
 8015988:	69bb      	ldr	r3, [r7, #24]
 801598a:	4413      	add	r3, r2
 801598c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	0a5b      	lsrs	r3, r3, #9
 8015992:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8015994:	6a3b      	ldr	r3, [r7, #32]
 8015996:	2b00      	cmp	r3, #0
 8015998:	d041      	beq.n	8015a1e <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801599a:	69ba      	ldr	r2, [r7, #24]
 801599c:	6a3b      	ldr	r3, [r7, #32]
 801599e:	4413      	add	r3, r2
 80159a0:	693a      	ldr	r2, [r7, #16]
 80159a2:	8952      	ldrh	r2, [r2, #10]
 80159a4:	4293      	cmp	r3, r2
 80159a6:	d905      	bls.n	80159b4 <f_write+0x1ec>
					cc = fs->csize - csect;
 80159a8:	693b      	ldr	r3, [r7, #16]
 80159aa:	895b      	ldrh	r3, [r3, #10]
 80159ac:	461a      	mov	r2, r3
 80159ae:	69bb      	ldr	r3, [r7, #24]
 80159b0:	1ad3      	subs	r3, r2, r3
 80159b2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80159b4:	693b      	ldr	r3, [r7, #16]
 80159b6:	7858      	ldrb	r0, [r3, #1]
 80159b8:	6a3b      	ldr	r3, [r7, #32]
 80159ba:	697a      	ldr	r2, [r7, #20]
 80159bc:	69f9      	ldr	r1, [r7, #28]
 80159be:	f7fd fa35 	bl	8012e2c <disk_write>
 80159c2:	4603      	mov	r3, r0
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d009      	beq.n	80159dc <f_write+0x214>
 80159c8:	68fb      	ldr	r3, [r7, #12]
 80159ca:	2201      	movs	r2, #1
 80159cc:	745a      	strb	r2, [r3, #17]
 80159ce:	693b      	ldr	r3, [r7, #16]
 80159d0:	2101      	movs	r1, #1
 80159d2:	4618      	mov	r0, r3
 80159d4:	f7fd fb7f 	bl	80130d6 <unlock_fs>
 80159d8:	2301      	movs	r3, #1
 80159da:	e095      	b.n	8015b08 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80159dc:	68fb      	ldr	r3, [r7, #12]
 80159de:	69da      	ldr	r2, [r3, #28]
 80159e0:	697b      	ldr	r3, [r7, #20]
 80159e2:	1ad3      	subs	r3, r2, r3
 80159e4:	6a3a      	ldr	r2, [r7, #32]
 80159e6:	429a      	cmp	r2, r3
 80159e8:	d915      	bls.n	8015a16 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80159ea:	68fb      	ldr	r3, [r7, #12]
 80159ec:	f103 002c 	add.w	r0, r3, #44	@ 0x2c
 80159f0:	68fb      	ldr	r3, [r7, #12]
 80159f2:	69da      	ldr	r2, [r3, #28]
 80159f4:	697b      	ldr	r3, [r7, #20]
 80159f6:	1ad3      	subs	r3, r2, r3
 80159f8:	025b      	lsls	r3, r3, #9
 80159fa:	69fa      	ldr	r2, [r7, #28]
 80159fc:	4413      	add	r3, r2
 80159fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015a02:	4619      	mov	r1, r3
 8015a04:	f7fd fad3 	bl	8012fae <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8015a08:	68fb      	ldr	r3, [r7, #12]
 8015a0a:	7c1b      	ldrb	r3, [r3, #16]
 8015a0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015a10:	b2da      	uxtb	r2, r3
 8015a12:	68fb      	ldr	r3, [r7, #12]
 8015a14:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8015a16:	6a3b      	ldr	r3, [r7, #32]
 8015a18:	025b      	lsls	r3, r3, #9
 8015a1a:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8015a1c:	e044      	b.n	8015aa8 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8015a1e:	68fb      	ldr	r3, [r7, #12]
 8015a20:	69db      	ldr	r3, [r3, #28]
 8015a22:	697a      	ldr	r2, [r7, #20]
 8015a24:	429a      	cmp	r2, r3
 8015a26:	d01b      	beq.n	8015a60 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8015a28:	68fb      	ldr	r3, [r7, #12]
 8015a2a:	695a      	ldr	r2, [r3, #20]
 8015a2c:	68fb      	ldr	r3, [r7, #12]
 8015a2e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8015a30:	429a      	cmp	r2, r3
 8015a32:	d215      	bcs.n	8015a60 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8015a34:	693b      	ldr	r3, [r7, #16]
 8015a36:	7858      	ldrb	r0, [r3, #1]
 8015a38:	68fb      	ldr	r3, [r7, #12]
 8015a3a:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 8015a3e:	2301      	movs	r3, #1
 8015a40:	697a      	ldr	r2, [r7, #20]
 8015a42:	f7fd f9d3 	bl	8012dec <disk_read>
 8015a46:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	d009      	beq.n	8015a60 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	2201      	movs	r2, #1
 8015a50:	745a      	strb	r2, [r3, #17]
 8015a52:	693b      	ldr	r3, [r7, #16]
 8015a54:	2101      	movs	r1, #1
 8015a56:	4618      	mov	r0, r3
 8015a58:	f7fd fb3d 	bl	80130d6 <unlock_fs>
 8015a5c:	2301      	movs	r3, #1
 8015a5e:	e053      	b.n	8015b08 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8015a60:	68fb      	ldr	r3, [r7, #12]
 8015a62:	697a      	ldr	r2, [r7, #20]
 8015a64:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8015a66:	68fb      	ldr	r3, [r7, #12]
 8015a68:	695b      	ldr	r3, [r3, #20]
 8015a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015a6e:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8015a72:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8015a74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	429a      	cmp	r2, r3
 8015a7a:	d901      	bls.n	8015a80 <f_write+0x2b8>
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8015a80:	68fb      	ldr	r3, [r7, #12]
 8015a82:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8015a86:	68fb      	ldr	r3, [r7, #12]
 8015a88:	695b      	ldr	r3, [r3, #20]
 8015a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015a8e:	4413      	add	r3, r2
 8015a90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015a92:	69f9      	ldr	r1, [r7, #28]
 8015a94:	4618      	mov	r0, r3
 8015a96:	f7fd fa8a 	bl	8012fae <mem_cpy>
		fp->flag |= FA_DIRTY;
 8015a9a:	68fb      	ldr	r3, [r7, #12]
 8015a9c:	7c1b      	ldrb	r3, [r3, #16]
 8015a9e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8015aa2:	b2da      	uxtb	r2, r3
 8015aa4:	68fb      	ldr	r3, [r7, #12]
 8015aa6:	741a      	strb	r2, [r3, #16]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8015aa8:	69fa      	ldr	r2, [r7, #28]
 8015aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015aac:	4413      	add	r3, r2
 8015aae:	61fb      	str	r3, [r7, #28]
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	695a      	ldr	r2, [r3, #20]
 8015ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ab6:	441a      	add	r2, r3
 8015ab8:	68fb      	ldr	r3, [r7, #12]
 8015aba:	615a      	str	r2, [r3, #20]
 8015abc:	68fb      	ldr	r3, [r7, #12]
 8015abe:	68da      	ldr	r2, [r3, #12]
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	695b      	ldr	r3, [r3, #20]
 8015ac4:	429a      	cmp	r2, r3
 8015ac6:	bf38      	it	cc
 8015ac8:	461a      	movcc	r2, r3
 8015aca:	68fb      	ldr	r3, [r7, #12]
 8015acc:	60da      	str	r2, [r3, #12]
 8015ace:	683b      	ldr	r3, [r7, #0]
 8015ad0:	681a      	ldr	r2, [r3, #0]
 8015ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ad4:	441a      	add	r2, r3
 8015ad6:	683b      	ldr	r3, [r7, #0]
 8015ad8:	601a      	str	r2, [r3, #0]
 8015ada:	687a      	ldr	r2, [r7, #4]
 8015adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ade:	1ad3      	subs	r3, r2, r3
 8015ae0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	f47f aeb6 	bne.w	8015856 <f_write+0x8e>
 8015aea:	e000      	b.n	8015aee <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8015aec:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8015aee:	68fb      	ldr	r3, [r7, #12]
 8015af0:	7c1b      	ldrb	r3, [r3, #16]
 8015af2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015af6:	b2da      	uxtb	r2, r3
 8015af8:	68fb      	ldr	r3, [r7, #12]
 8015afa:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 8015afc:	693b      	ldr	r3, [r7, #16]
 8015afe:	2100      	movs	r1, #0
 8015b00:	4618      	mov	r0, r3
 8015b02:	f7fd fae8 	bl	80130d6 <unlock_fs>
 8015b06:	2300      	movs	r3, #0
}
 8015b08:	4618      	mov	r0, r3
 8015b0a:	3730      	adds	r7, #48	@ 0x30
 8015b0c:	46bd      	mov	sp, r7
 8015b0e:	bd80      	pop	{r7, pc}

08015b10 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8015b10:	b580      	push	{r7, lr}
 8015b12:	b086      	sub	sp, #24
 8015b14:	af00      	add	r7, sp, #0
 8015b16:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	f107 0208 	add.w	r2, r7, #8
 8015b1e:	4611      	mov	r1, r2
 8015b20:	4618      	mov	r0, r3
 8015b22:	f7ff fa93 	bl	801504c <validate>
 8015b26:	4603      	mov	r3, r0
 8015b28:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015b2a:	7dfb      	ldrb	r3, [r7, #23]
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	d16c      	bne.n	8015c0a <f_sync+0xfa>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	7c1b      	ldrb	r3, [r3, #16]
 8015b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	d066      	beq.n	8015c0a <f_sync+0xfa>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	7c1b      	ldrb	r3, [r3, #16]
 8015b40:	b25b      	sxtb	r3, r3
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	da1a      	bge.n	8015b7c <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8015b46:	68bb      	ldr	r3, [r7, #8]
 8015b48:	7858      	ldrb	r0, [r3, #1]
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	69da      	ldr	r2, [r3, #28]
 8015b54:	2301      	movs	r3, #1
 8015b56:	f7fd f969 	bl	8012e2c <disk_write>
 8015b5a:	4603      	mov	r3, r0
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	d006      	beq.n	8015b6e <f_sync+0x5e>
 8015b60:	68bb      	ldr	r3, [r7, #8]
 8015b62:	2101      	movs	r1, #1
 8015b64:	4618      	mov	r0, r3
 8015b66:	f7fd fab6 	bl	80130d6 <unlock_fs>
 8015b6a:	2301      	movs	r3, #1
 8015b6c:	e054      	b.n	8015c18 <f_sync+0x108>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	7c1b      	ldrb	r3, [r3, #16]
 8015b72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015b76:	b2da      	uxtb	r2, r3
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8015b7c:	4b28      	ldr	r3, [pc, #160]	@ (8015c20 <f_sync+0x110>)
 8015b7e:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8015b80:	68ba      	ldr	r2, [r7, #8]
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	6a1b      	ldr	r3, [r3, #32]
 8015b86:	4619      	mov	r1, r3
 8015b88:	4610      	mov	r0, r2
 8015b8a:	f7fd fb03 	bl	8013194 <move_window>
 8015b8e:	4603      	mov	r3, r0
 8015b90:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8015b92:	7dfb      	ldrb	r3, [r7, #23]
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d138      	bne.n	8015c0a <f_sync+0xfa>
					dir = fp->dir_ptr;
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b9c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8015b9e:	68fb      	ldr	r3, [r7, #12]
 8015ba0:	330b      	adds	r3, #11
 8015ba2:	781a      	ldrb	r2, [r3, #0]
 8015ba4:	68fb      	ldr	r3, [r7, #12]
 8015ba6:	330b      	adds	r3, #11
 8015ba8:	f042 0220 	orr.w	r2, r2, #32
 8015bac:	b2d2      	uxtb	r2, r2
 8015bae:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	6818      	ldr	r0, [r3, #0]
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	689b      	ldr	r3, [r3, #8]
 8015bb8:	461a      	mov	r2, r3
 8015bba:	68f9      	ldr	r1, [r7, #12]
 8015bbc:	f7fe f80d 	bl	8013bda <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8015bc0:	68fb      	ldr	r3, [r7, #12]
 8015bc2:	f103 021c 	add.w	r2, r3, #28
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	68db      	ldr	r3, [r3, #12]
 8015bca:	4619      	mov	r1, r3
 8015bcc:	4610      	mov	r0, r2
 8015bce:	f7fd f9c2 	bl	8012f56 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8015bd2:	68fb      	ldr	r3, [r7, #12]
 8015bd4:	3316      	adds	r3, #22
 8015bd6:	6939      	ldr	r1, [r7, #16]
 8015bd8:	4618      	mov	r0, r3
 8015bda:	f7fd f9bc 	bl	8012f56 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8015bde:	68fb      	ldr	r3, [r7, #12]
 8015be0:	3312      	adds	r3, #18
 8015be2:	2100      	movs	r1, #0
 8015be4:	4618      	mov	r0, r3
 8015be6:	f7fd f99b 	bl	8012f20 <st_word>
					fs->wflag = 1;
 8015bea:	68bb      	ldr	r3, [r7, #8]
 8015bec:	2201      	movs	r2, #1
 8015bee:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8015bf0:	68bb      	ldr	r3, [r7, #8]
 8015bf2:	4618      	mov	r0, r3
 8015bf4:	f7fd fafc 	bl	80131f0 <sync_fs>
 8015bf8:	4603      	mov	r3, r0
 8015bfa:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	7c1b      	ldrb	r3, [r3, #16]
 8015c00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8015c04:	b2da      	uxtb	r2, r3
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8015c0a:	68bb      	ldr	r3, [r7, #8]
 8015c0c:	7dfa      	ldrb	r2, [r7, #23]
 8015c0e:	4611      	mov	r1, r2
 8015c10:	4618      	mov	r0, r3
 8015c12:	f7fd fa60 	bl	80130d6 <unlock_fs>
 8015c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8015c18:	4618      	mov	r0, r3
 8015c1a:	3718      	adds	r7, #24
 8015c1c:	46bd      	mov	sp, r7
 8015c1e:	bd80      	pop	{r7, pc}
 8015c20:	5b2b0000 	.word	0x5b2b0000

08015c24 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8015c24:	b580      	push	{r7, lr}
 8015c26:	b084      	sub	sp, #16
 8015c28:	af00      	add	r7, sp, #0
 8015c2a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8015c2c:	6878      	ldr	r0, [r7, #4]
 8015c2e:	f7ff ff6f 	bl	8015b10 <f_sync>
 8015c32:	4603      	mov	r3, r0
 8015c34:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8015c36:	7bfb      	ldrb	r3, [r7, #15]
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d113      	bne.n	8015c64 <f_close+0x40>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	f107 0208 	add.w	r2, r7, #8
 8015c42:	4611      	mov	r1, r2
 8015c44:	4618      	mov	r0, r3
 8015c46:	f7ff fa01 	bl	801504c <validate>
 8015c4a:	4603      	mov	r3, r0
 8015c4c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8015c4e:	7bfb      	ldrb	r3, [r7, #15]
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d107      	bne.n	8015c64 <f_close+0x40>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	2200      	movs	r2, #0
 8015c58:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8015c5a:	68bb      	ldr	r3, [r7, #8]
 8015c5c:	2100      	movs	r1, #0
 8015c5e:	4618      	mov	r0, r3
 8015c60:	f7fd fa39 	bl	80130d6 <unlock_fs>
#endif
		}
	}
	return res;
 8015c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c66:	4618      	mov	r0, r3
 8015c68:	3710      	adds	r7, #16
 8015c6a:	46bd      	mov	sp, r7
 8015c6c:	bd80      	pop	{r7, pc}

08015c6e <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8015c6e:	b590      	push	{r4, r7, lr}
 8015c70:	b093      	sub	sp, #76	@ 0x4c
 8015c72:	af00      	add	r7, sp, #0
 8015c74:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8015c76:	f107 010c 	add.w	r1, r7, #12
 8015c7a:	1d3b      	adds	r3, r7, #4
 8015c7c:	2200      	movs	r2, #0
 8015c7e:	4618      	mov	r0, r3
 8015c80:	f7fe ff90 	bl	8014ba4 <find_volume>
 8015c84:	4603      	mov	r3, r0
 8015c86:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8015c8a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d146      	bne.n	8015d20 <f_chdir+0xb2>
		dj.obj.fs = fs;
 8015c92:	68fb      	ldr	r3, [r7, #12]
 8015c94:	613b      	str	r3, [r7, #16]
		INIT_NAMBUF(fs);
 8015c96:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8015c9a:	f001 f8a6 	bl	8016dea <ff_memalloc>
 8015c9e:	6438      	str	r0, [r7, #64]	@ 0x40
 8015ca0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	d106      	bne.n	8015cb4 <f_chdir+0x46>
 8015ca6:	68fb      	ldr	r3, [r7, #12]
 8015ca8:	2111      	movs	r1, #17
 8015caa:	4618      	mov	r0, r3
 8015cac:	f7fd fa13 	bl	80130d6 <unlock_fs>
 8015cb0:	2311      	movs	r3, #17
 8015cb2:	e03e      	b.n	8015d32 <f_chdir+0xc4>
 8015cb4:	68fb      	ldr	r3, [r7, #12]
 8015cb6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8015cb8:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);		/* Follow the path */
 8015cba:	687a      	ldr	r2, [r7, #4]
 8015cbc:	f107 0310 	add.w	r3, r7, #16
 8015cc0:	4611      	mov	r1, r2
 8015cc2:	4618      	mov	r0, r3
 8015cc4:	f7fe fe44 	bl	8014950 <follow_path>
 8015cc8:	4603      	mov	r3, r0
 8015cca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		if (res == FR_OK) {					/* Follow completed */
 8015cce:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d11a      	bne.n	8015d0c <f_chdir+0x9e>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8015cd6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8015cda:	b25b      	sxtb	r3, r3
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	da03      	bge.n	8015ce8 <f_chdir+0x7a>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8015ce0:	68fb      	ldr	r3, [r7, #12]
 8015ce2:	69ba      	ldr	r2, [r7, #24]
 8015ce4:	61da      	str	r2, [r3, #28]
 8015ce6:	e011      	b.n	8015d0c <f_chdir+0x9e>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8015ce8:	7dbb      	ldrb	r3, [r7, #22]
 8015cea:	f003 0310 	and.w	r3, r3, #16
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d009      	beq.n	8015d06 <f_chdir+0x98>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015cf6:	68fc      	ldr	r4, [r7, #12]
 8015cf8:	4611      	mov	r1, r2
 8015cfa:	4618      	mov	r0, r3
 8015cfc:	f7fd ff4e 	bl	8013b9c <ld_clust>
 8015d00:	4603      	mov	r3, r0
 8015d02:	61e3      	str	r3, [r4, #28]
 8015d04:	e002      	b.n	8015d0c <f_chdir+0x9e>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8015d06:	2305      	movs	r3, #5
 8015d08:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				}
			}
		}
		FREE_NAMBUF();
 8015d0c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8015d0e:	f001 f878 	bl	8016e02 <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8015d12:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015d16:	2b04      	cmp	r3, #4
 8015d18:	d102      	bne.n	8015d20 <f_chdir+0xb2>
 8015d1a:	2305      	movs	r3, #5
 8015d1c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	}

	LEAVE_FF(fs, res);
 8015d20:	68fb      	ldr	r3, [r7, #12]
 8015d22:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8015d26:	4611      	mov	r1, r2
 8015d28:	4618      	mov	r0, r3
 8015d2a:	f7fd f9d4 	bl	80130d6 <unlock_fs>
 8015d2e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8015d32:	4618      	mov	r0, r3
 8015d34:	374c      	adds	r7, #76	@ 0x4c
 8015d36:	46bd      	mov	sp, r7
 8015d38:	bd90      	pop	{r4, r7, pc}

08015d3a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8015d3a:	b580      	push	{r7, lr}
 8015d3c:	b090      	sub	sp, #64	@ 0x40
 8015d3e:	af00      	add	r7, sp, #0
 8015d40:	6078      	str	r0, [r7, #4]
 8015d42:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	f107 0208 	add.w	r2, r7, #8
 8015d4a:	4611      	mov	r1, r2
 8015d4c:	4618      	mov	r0, r3
 8015d4e:	f7ff f97d 	bl	801504c <validate>
 8015d52:	4603      	mov	r3, r0
 8015d54:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8015d58:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d103      	bne.n	8015d68 <f_lseek+0x2e>
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	7c5b      	ldrb	r3, [r3, #17]
 8015d64:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8015d68:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d009      	beq.n	8015d84 <f_lseek+0x4a>
 8015d70:	68bb      	ldr	r3, [r7, #8]
 8015d72:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8015d76:	4611      	mov	r1, r2
 8015d78:	4618      	mov	r0, r3
 8015d7a:	f7fd f9ac 	bl	80130d6 <unlock_fs>
 8015d7e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015d82:	e229      	b.n	80161d8 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	f000 80ea 	beq.w	8015f62 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8015d8e:	683b      	ldr	r3, [r7, #0]
 8015d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d94:	d164      	bne.n	8015e60 <f_lseek+0x126>
			tbl = fp->cltbl;
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015d9a:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8015d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d9e:	1d1a      	adds	r2, r3, #4
 8015da0:	627a      	str	r2, [r7, #36]	@ 0x24
 8015da2:	681b      	ldr	r3, [r3, #0]
 8015da4:	617b      	str	r3, [r7, #20]
 8015da6:	2302      	movs	r3, #2
 8015da8:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	689b      	ldr	r3, [r3, #8]
 8015dae:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8015db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d044      	beq.n	8015e40 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8015db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015db8:	613b      	str	r3, [r7, #16]
 8015dba:	2300      	movs	r3, #0
 8015dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015dc0:	3302      	adds	r3, #2
 8015dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8015dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015dc6:	60fb      	str	r3, [r7, #12]
 8015dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dca:	3301      	adds	r3, #1
 8015dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8015dd2:	4618      	mov	r0, r3
 8015dd4:	f7fd fa99 	bl	801330a <get_fat>
 8015dd8:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8015dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ddc:	2b01      	cmp	r3, #1
 8015dde:	d809      	bhi.n	8015df4 <f_lseek+0xba>
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	2202      	movs	r2, #2
 8015de4:	745a      	strb	r2, [r3, #17]
 8015de6:	68bb      	ldr	r3, [r7, #8]
 8015de8:	2102      	movs	r1, #2
 8015dea:	4618      	mov	r0, r3
 8015dec:	f7fd f973 	bl	80130d6 <unlock_fs>
 8015df0:	2302      	movs	r3, #2
 8015df2:	e1f1      	b.n	80161d8 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015dfa:	d109      	bne.n	8015e10 <f_lseek+0xd6>
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	2201      	movs	r2, #1
 8015e00:	745a      	strb	r2, [r3, #17]
 8015e02:	68bb      	ldr	r3, [r7, #8]
 8015e04:	2101      	movs	r1, #1
 8015e06:	4618      	mov	r0, r3
 8015e08:	f7fd f965 	bl	80130d6 <unlock_fs>
 8015e0c:	2301      	movs	r3, #1
 8015e0e:	e1e3      	b.n	80161d8 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 8015e10:	68fb      	ldr	r3, [r7, #12]
 8015e12:	3301      	adds	r3, #1
 8015e14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015e16:	429a      	cmp	r2, r3
 8015e18:	d0d4      	beq.n	8015dc4 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8015e1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015e1c:	697b      	ldr	r3, [r7, #20]
 8015e1e:	429a      	cmp	r2, r3
 8015e20:	d809      	bhi.n	8015e36 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 8015e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e24:	1d1a      	adds	r2, r3, #4
 8015e26:	627a      	str	r2, [r7, #36]	@ 0x24
 8015e28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015e2a:	601a      	str	r2, [r3, #0]
 8015e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e2e:	1d1a      	adds	r2, r3, #4
 8015e30:	627a      	str	r2, [r7, #36]	@ 0x24
 8015e32:	693a      	ldr	r2, [r7, #16]
 8015e34:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8015e36:	68bb      	ldr	r3, [r7, #8]
 8015e38:	6a1b      	ldr	r3, [r3, #32]
 8015e3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015e3c:	429a      	cmp	r2, r3
 8015e3e:	d3ba      	bcc.n	8015db6 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015e44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015e46:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8015e48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015e4a:	697b      	ldr	r3, [r7, #20]
 8015e4c:	429a      	cmp	r2, r3
 8015e4e:	d803      	bhi.n	8015e58 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 8015e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e52:	2200      	movs	r2, #0
 8015e54:	601a      	str	r2, [r3, #0]
 8015e56:	e1b6      	b.n	80161c6 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8015e58:	2311      	movs	r3, #17
 8015e5a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8015e5e:	e1b2      	b.n	80161c6 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	68db      	ldr	r3, [r3, #12]
 8015e64:	683a      	ldr	r2, [r7, #0]
 8015e66:	429a      	cmp	r2, r3
 8015e68:	d902      	bls.n	8015e70 <f_lseek+0x136>
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	68db      	ldr	r3, [r3, #12]
 8015e6e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	683a      	ldr	r2, [r7, #0]
 8015e74:	615a      	str	r2, [r3, #20]
			if (ofs) {
 8015e76:	683b      	ldr	r3, [r7, #0]
 8015e78:	2b00      	cmp	r3, #0
 8015e7a:	f000 81a4 	beq.w	80161c6 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8015e7e:	683b      	ldr	r3, [r7, #0]
 8015e80:	3b01      	subs	r3, #1
 8015e82:	4619      	mov	r1, r3
 8015e84:	6878      	ldr	r0, [r7, #4]
 8015e86:	f7fd fcce 	bl	8013826 <clmt_clust>
 8015e8a:	4602      	mov	r2, r0
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	619a      	str	r2, [r3, #24]
				dsc = clust2sect(fs, fp->clust);
 8015e90:	68ba      	ldr	r2, [r7, #8]
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	699b      	ldr	r3, [r3, #24]
 8015e96:	4619      	mov	r1, r3
 8015e98:	4610      	mov	r0, r2
 8015e9a:	f7fd fa17 	bl	80132cc <clust2sect>
 8015e9e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8015ea0:	69bb      	ldr	r3, [r7, #24]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d109      	bne.n	8015eba <f_lseek+0x180>
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	2202      	movs	r2, #2
 8015eaa:	745a      	strb	r2, [r3, #17]
 8015eac:	68bb      	ldr	r3, [r7, #8]
 8015eae:	2102      	movs	r1, #2
 8015eb0:	4618      	mov	r0, r3
 8015eb2:	f7fd f910 	bl	80130d6 <unlock_fs>
 8015eb6:	2302      	movs	r3, #2
 8015eb8:	e18e      	b.n	80161d8 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8015eba:	683b      	ldr	r3, [r7, #0]
 8015ebc:	3b01      	subs	r3, #1
 8015ebe:	0a5b      	lsrs	r3, r3, #9
 8015ec0:	68ba      	ldr	r2, [r7, #8]
 8015ec2:	8952      	ldrh	r2, [r2, #10]
 8015ec4:	3a01      	subs	r2, #1
 8015ec6:	4013      	ands	r3, r2
 8015ec8:	69ba      	ldr	r2, [r7, #24]
 8015eca:	4413      	add	r3, r2
 8015ecc:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	695b      	ldr	r3, [r3, #20]
 8015ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	f000 8175 	beq.w	80161c6 <f_lseek+0x48c>
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	69db      	ldr	r3, [r3, #28]
 8015ee0:	69ba      	ldr	r2, [r7, #24]
 8015ee2:	429a      	cmp	r2, r3
 8015ee4:	f000 816f 	beq.w	80161c6 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	7c1b      	ldrb	r3, [r3, #16]
 8015eec:	b25b      	sxtb	r3, r3
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	da1d      	bge.n	8015f2e <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015ef2:	68bb      	ldr	r3, [r7, #8]
 8015ef4:	7858      	ldrb	r0, [r3, #1]
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	69da      	ldr	r2, [r3, #28]
 8015f00:	2301      	movs	r3, #1
 8015f02:	f7fc ff93 	bl	8012e2c <disk_write>
 8015f06:	4603      	mov	r3, r0
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d009      	beq.n	8015f20 <f_lseek+0x1e6>
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	2201      	movs	r2, #1
 8015f10:	745a      	strb	r2, [r3, #17]
 8015f12:	68bb      	ldr	r3, [r7, #8]
 8015f14:	2101      	movs	r1, #1
 8015f16:	4618      	mov	r0, r3
 8015f18:	f7fd f8dd 	bl	80130d6 <unlock_fs>
 8015f1c:	2301      	movs	r3, #1
 8015f1e:	e15b      	b.n	80161d8 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	7c1b      	ldrb	r3, [r3, #16]
 8015f24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015f28:	b2da      	uxtb	r2, r3
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	741a      	strb	r2, [r3, #16]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8015f2e:	68bb      	ldr	r3, [r7, #8]
 8015f30:	7858      	ldrb	r0, [r3, #1]
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 8015f38:	2301      	movs	r3, #1
 8015f3a:	69ba      	ldr	r2, [r7, #24]
 8015f3c:	f7fc ff56 	bl	8012dec <disk_read>
 8015f40:	4603      	mov	r3, r0
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	d009      	beq.n	8015f5a <f_lseek+0x220>
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	2201      	movs	r2, #1
 8015f4a:	745a      	strb	r2, [r3, #17]
 8015f4c:	68bb      	ldr	r3, [r7, #8]
 8015f4e:	2101      	movs	r1, #1
 8015f50:	4618      	mov	r0, r3
 8015f52:	f7fd f8c0 	bl	80130d6 <unlock_fs>
 8015f56:	2301      	movs	r3, #1
 8015f58:	e13e      	b.n	80161d8 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	69ba      	ldr	r2, [r7, #24]
 8015f5e:	61da      	str	r2, [r3, #28]
 8015f60:	e131      	b.n	80161c6 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	68db      	ldr	r3, [r3, #12]
 8015f66:	683a      	ldr	r2, [r7, #0]
 8015f68:	429a      	cmp	r2, r3
 8015f6a:	d908      	bls.n	8015f7e <f_lseek+0x244>
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	7c1b      	ldrb	r3, [r3, #16]
 8015f70:	f003 0302 	and.w	r3, r3, #2
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	d102      	bne.n	8015f7e <f_lseek+0x244>
			ofs = fp->obj.objsize;
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	68db      	ldr	r3, [r3, #12]
 8015f7c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	695b      	ldr	r3, [r3, #20]
 8015f82:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8015f84:	2300      	movs	r3, #0
 8015f86:	637b      	str	r3, [r7, #52]	@ 0x34
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015f8c:	615a      	str	r2, [r3, #20]
		if (ofs) {
 8015f8e:	683b      	ldr	r3, [r7, #0]
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	f000 80c0 	beq.w	8016116 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8015f96:	68bb      	ldr	r3, [r7, #8]
 8015f98:	895b      	ldrh	r3, [r3, #10]
 8015f9a:	025b      	lsls	r3, r3, #9
 8015f9c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8015f9e:	6a3b      	ldr	r3, [r7, #32]
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	d01b      	beq.n	8015fdc <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8015fa4:	683b      	ldr	r3, [r7, #0]
 8015fa6:	1e5a      	subs	r2, r3, #1
 8015fa8:	69fb      	ldr	r3, [r7, #28]
 8015faa:	fbb2 f2f3 	udiv	r2, r2, r3
 8015fae:	6a3b      	ldr	r3, [r7, #32]
 8015fb0:	1e59      	subs	r1, r3, #1
 8015fb2:	69fb      	ldr	r3, [r7, #28]
 8015fb4:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8015fb8:	429a      	cmp	r2, r3
 8015fba:	d30f      	bcc.n	8015fdc <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8015fbc:	6a3b      	ldr	r3, [r7, #32]
 8015fbe:	1e5a      	subs	r2, r3, #1
 8015fc0:	69fb      	ldr	r3, [r7, #28]
 8015fc2:	425b      	negs	r3, r3
 8015fc4:	401a      	ands	r2, r3
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	615a      	str	r2, [r3, #20]
				ofs -= fp->fptr;
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	695b      	ldr	r3, [r3, #20]
 8015fce:	683a      	ldr	r2, [r7, #0]
 8015fd0:	1ad3      	subs	r3, r2, r3
 8015fd2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	699b      	ldr	r3, [r3, #24]
 8015fd8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8015fda:	e02c      	b.n	8016036 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	689b      	ldr	r3, [r3, #8]
 8015fe0:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8015fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d123      	bne.n	8016030 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	2100      	movs	r1, #0
 8015fec:	4618      	mov	r0, r3
 8015fee:	f7fd fb82 	bl	80136f6 <create_chain>
 8015ff2:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8015ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015ff6:	2b01      	cmp	r3, #1
 8015ff8:	d109      	bne.n	801600e <f_lseek+0x2d4>
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	2202      	movs	r2, #2
 8015ffe:	745a      	strb	r2, [r3, #17]
 8016000:	68bb      	ldr	r3, [r7, #8]
 8016002:	2102      	movs	r1, #2
 8016004:	4618      	mov	r0, r3
 8016006:	f7fd f866 	bl	80130d6 <unlock_fs>
 801600a:	2302      	movs	r3, #2
 801600c:	e0e4      	b.n	80161d8 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801600e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016014:	d109      	bne.n	801602a <f_lseek+0x2f0>
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	2201      	movs	r2, #1
 801601a:	745a      	strb	r2, [r3, #17]
 801601c:	68bb      	ldr	r3, [r7, #8]
 801601e:	2101      	movs	r1, #1
 8016020:	4618      	mov	r0, r3
 8016022:	f7fd f858 	bl	80130d6 <unlock_fs>
 8016026:	2301      	movs	r3, #1
 8016028:	e0d6      	b.n	80161d8 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801602e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8016034:	619a      	str	r2, [r3, #24]
			}
			if (clst != 0) {
 8016036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016038:	2b00      	cmp	r3, #0
 801603a:	d06c      	beq.n	8016116 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 801603c:	e044      	b.n	80160c8 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 801603e:	683a      	ldr	r2, [r7, #0]
 8016040:	69fb      	ldr	r3, [r7, #28]
 8016042:	1ad3      	subs	r3, r2, r3
 8016044:	603b      	str	r3, [r7, #0]
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	695a      	ldr	r2, [r3, #20]
 801604a:	69fb      	ldr	r3, [r7, #28]
 801604c:	441a      	add	r2, r3
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	615a      	str	r2, [r3, #20]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	7c1b      	ldrb	r3, [r3, #16]
 8016056:	f003 0302 	and.w	r3, r3, #2
 801605a:	2b00      	cmp	r3, #0
 801605c:	d00b      	beq.n	8016076 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8016062:	4618      	mov	r0, r3
 8016064:	f7fd fb47 	bl	80136f6 <create_chain>
 8016068:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 801606a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801606c:	2b00      	cmp	r3, #0
 801606e:	d108      	bne.n	8016082 <f_lseek+0x348>
							ofs = 0; break;
 8016070:	2300      	movs	r3, #0
 8016072:	603b      	str	r3, [r7, #0]
 8016074:	e02c      	b.n	80160d0 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801607a:	4618      	mov	r0, r3
 801607c:	f7fd f945 	bl	801330a <get_fat>
 8016080:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8016082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016088:	d109      	bne.n	801609e <f_lseek+0x364>
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	2201      	movs	r2, #1
 801608e:	745a      	strb	r2, [r3, #17]
 8016090:	68bb      	ldr	r3, [r7, #8]
 8016092:	2101      	movs	r1, #1
 8016094:	4618      	mov	r0, r3
 8016096:	f7fd f81e 	bl	80130d6 <unlock_fs>
 801609a:	2301      	movs	r3, #1
 801609c:	e09c      	b.n	80161d8 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801609e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80160a0:	2b01      	cmp	r3, #1
 80160a2:	d904      	bls.n	80160ae <f_lseek+0x374>
 80160a4:	68bb      	ldr	r3, [r7, #8]
 80160a6:	6a1b      	ldr	r3, [r3, #32]
 80160a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80160aa:	429a      	cmp	r2, r3
 80160ac:	d309      	bcc.n	80160c2 <f_lseek+0x388>
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	2202      	movs	r2, #2
 80160b2:	745a      	strb	r2, [r3, #17]
 80160b4:	68bb      	ldr	r3, [r7, #8]
 80160b6:	2102      	movs	r1, #2
 80160b8:	4618      	mov	r0, r3
 80160ba:	f7fd f80c 	bl	80130d6 <unlock_fs>
 80160be:	2302      	movs	r3, #2
 80160c0:	e08a      	b.n	80161d8 <f_lseek+0x49e>
					fp->clust = clst;
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80160c6:	619a      	str	r2, [r3, #24]
				while (ofs > bcs) {						/* Cluster following loop */
 80160c8:	683a      	ldr	r2, [r7, #0]
 80160ca:	69fb      	ldr	r3, [r7, #28]
 80160cc:	429a      	cmp	r2, r3
 80160ce:	d8b6      	bhi.n	801603e <f_lseek+0x304>
				}
				fp->fptr += ofs;
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	695a      	ldr	r2, [r3, #20]
 80160d4:	683b      	ldr	r3, [r7, #0]
 80160d6:	441a      	add	r2, r3
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	615a      	str	r2, [r3, #20]
				if (ofs % SS(fs)) {
 80160dc:	683b      	ldr	r3, [r7, #0]
 80160de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d017      	beq.n	8016116 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80160e6:	68bb      	ldr	r3, [r7, #8]
 80160e8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80160ea:	4618      	mov	r0, r3
 80160ec:	f7fd f8ee 	bl	80132cc <clust2sect>
 80160f0:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80160f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	d109      	bne.n	801610c <f_lseek+0x3d2>
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	2202      	movs	r2, #2
 80160fc:	745a      	strb	r2, [r3, #17]
 80160fe:	68bb      	ldr	r3, [r7, #8]
 8016100:	2102      	movs	r1, #2
 8016102:	4618      	mov	r0, r3
 8016104:	f7fc ffe7 	bl	80130d6 <unlock_fs>
 8016108:	2302      	movs	r3, #2
 801610a:	e065      	b.n	80161d8 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 801610c:	683b      	ldr	r3, [r7, #0]
 801610e:	0a5b      	lsrs	r3, r3, #9
 8016110:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016112:	4413      	add	r3, r2
 8016114:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	695a      	ldr	r2, [r3, #20]
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	68db      	ldr	r3, [r3, #12]
 801611e:	429a      	cmp	r2, r3
 8016120:	d90a      	bls.n	8016138 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	695a      	ldr	r2, [r3, #20]
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	7c1b      	ldrb	r3, [r3, #16]
 801612e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016132:	b2da      	uxtb	r2, r3
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	741a      	strb	r2, [r3, #16]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	695b      	ldr	r3, [r3, #20]
 801613c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016140:	2b00      	cmp	r3, #0
 8016142:	d040      	beq.n	80161c6 <f_lseek+0x48c>
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	69db      	ldr	r3, [r3, #28]
 8016148:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801614a:	429a      	cmp	r2, r3
 801614c:	d03b      	beq.n	80161c6 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	7c1b      	ldrb	r3, [r3, #16]
 8016152:	b25b      	sxtb	r3, r3
 8016154:	2b00      	cmp	r3, #0
 8016156:	da1d      	bge.n	8016194 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016158:	68bb      	ldr	r3, [r7, #8]
 801615a:	7858      	ldrb	r0, [r3, #1]
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	69da      	ldr	r2, [r3, #28]
 8016166:	2301      	movs	r3, #1
 8016168:	f7fc fe60 	bl	8012e2c <disk_write>
 801616c:	4603      	mov	r3, r0
 801616e:	2b00      	cmp	r3, #0
 8016170:	d009      	beq.n	8016186 <f_lseek+0x44c>
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	2201      	movs	r2, #1
 8016176:	745a      	strb	r2, [r3, #17]
 8016178:	68bb      	ldr	r3, [r7, #8]
 801617a:	2101      	movs	r1, #1
 801617c:	4618      	mov	r0, r3
 801617e:	f7fc ffaa 	bl	80130d6 <unlock_fs>
 8016182:	2301      	movs	r3, #1
 8016184:	e028      	b.n	80161d8 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	7c1b      	ldrb	r3, [r3, #16]
 801618a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801618e:	b2da      	uxtb	r2, r3
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	741a      	strb	r2, [r3, #16]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8016194:	68bb      	ldr	r3, [r7, #8]
 8016196:	7858      	ldrb	r0, [r3, #1]
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 801619e:	2301      	movs	r3, #1
 80161a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80161a2:	f7fc fe23 	bl	8012dec <disk_read>
 80161a6:	4603      	mov	r3, r0
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d009      	beq.n	80161c0 <f_lseek+0x486>
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	2201      	movs	r2, #1
 80161b0:	745a      	strb	r2, [r3, #17]
 80161b2:	68bb      	ldr	r3, [r7, #8]
 80161b4:	2101      	movs	r1, #1
 80161b6:	4618      	mov	r0, r3
 80161b8:	f7fc ff8d 	bl	80130d6 <unlock_fs>
 80161bc:	2301      	movs	r3, #1
 80161be:	e00b      	b.n	80161d8 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80161c4:	61da      	str	r2, [r3, #28]
		}
	}

	LEAVE_FF(fs, res);
 80161c6:	68bb      	ldr	r3, [r7, #8]
 80161c8:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80161cc:	4611      	mov	r1, r2
 80161ce:	4618      	mov	r0, r3
 80161d0:	f7fc ff81 	bl	80130d6 <unlock_fs>
 80161d4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80161d8:	4618      	mov	r0, r3
 80161da:	3740      	adds	r7, #64	@ 0x40
 80161dc:	46bd      	mov	sp, r7
 80161de:	bd80      	pop	{r7, pc}

080161e0 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80161e0:	b580      	push	{r7, lr}
 80161e2:	b09e      	sub	sp, #120	@ 0x78
 80161e4:	af00      	add	r7, sp, #0
 80161e6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 80161e8:	2300      	movs	r3, #0
 80161ea:	673b      	str	r3, [r7, #112]	@ 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80161ec:	f107 0108 	add.w	r1, r7, #8
 80161f0:	1d3b      	adds	r3, r7, #4
 80161f2:	2202      	movs	r2, #2
 80161f4:	4618      	mov	r0, r3
 80161f6:	f7fe fcd5 	bl	8014ba4 <find_volume>
 80161fa:	4603      	mov	r3, r0
 80161fc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	dj.obj.fs = fs;
 8016200:	68bb      	ldr	r3, [r7, #8]
 8016202:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (res == FR_OK) {
 8016204:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8016208:	2b00      	cmp	r3, #0
 801620a:	f040 80ac 	bne.w	8016366 <f_unlink+0x186>
		INIT_NAMBUF(fs);
 801620e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8016212:	f000 fdea 	bl	8016dea <ff_memalloc>
 8016216:	66f8      	str	r0, [r7, #108]	@ 0x6c
 8016218:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801621a:	2b00      	cmp	r3, #0
 801621c:	d106      	bne.n	801622c <f_unlink+0x4c>
 801621e:	68bb      	ldr	r3, [r7, #8]
 8016220:	2111      	movs	r1, #17
 8016222:	4618      	mov	r0, r3
 8016224:	f7fc ff57 	bl	80130d6 <unlock_fs>
 8016228:	2311      	movs	r3, #17
 801622a:	e0a5      	b.n	8016378 <f_unlink+0x198>
 801622c:	68bb      	ldr	r3, [r7, #8]
 801622e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8016230:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);		/* Follow the file path */
 8016232:	687a      	ldr	r2, [r7, #4]
 8016234:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8016238:	4611      	mov	r1, r2
 801623a:	4618      	mov	r0, r3
 801623c:	f7fe fb88 	bl	8014950 <follow_path>
 8016240:	4603      	mov	r3, r0
 8016242:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8016246:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801624a:	2b00      	cmp	r3, #0
 801624c:	d108      	bne.n	8016260 <f_unlink+0x80>
 801624e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8016252:	f003 0320 	and.w	r3, r3, #32
 8016256:	2b00      	cmp	r3, #0
 8016258:	d002      	beq.n	8016260 <f_unlink+0x80>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 801625a:	2306      	movs	r3, #6
 801625c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8016260:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8016264:	2b00      	cmp	r3, #0
 8016266:	d17b      	bne.n	8016360 <f_unlink+0x180>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8016268:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801626c:	b25b      	sxtb	r3, r3
 801626e:	2b00      	cmp	r3, #0
 8016270:	da03      	bge.n	801627a <f_unlink+0x9a>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8016272:	2306      	movs	r3, #6
 8016274:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8016278:	e008      	b.n	801628c <f_unlink+0xac>
			} else {
				if (dj.obj.attr & AM_RDO) {
 801627a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 801627e:	f003 0301 	and.w	r3, r3, #1
 8016282:	2b00      	cmp	r3, #0
 8016284:	d002      	beq.n	801628c <f_unlink+0xac>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8016286:	2307      	movs	r3, #7
 8016288:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				}
			}
			if (res == FR_OK) {
 801628c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8016290:	2b00      	cmp	r3, #0
 8016292:	d13d      	bne.n	8016310 <f_unlink+0x130>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8016294:	68bb      	ldr	r3, [r7, #8]
 8016296:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8016298:	4611      	mov	r1, r2
 801629a:	4618      	mov	r0, r3
 801629c:	f7fd fc7e 	bl	8013b9c <ld_clust>
 80162a0:	6738      	str	r0, [r7, #112]	@ 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80162a2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80162a6:	f003 0310 	and.w	r3, r3, #16
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	d030      	beq.n	8016310 <f_unlink+0x130>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 80162ae:	68bb      	ldr	r3, [r7, #8]
 80162b0:	69db      	ldr	r3, [r3, #28]
 80162b2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80162b4:	429a      	cmp	r2, r3
 80162b6:	d103      	bne.n	80162c0 <f_unlink+0xe0>
						res = FR_DENIED;
 80162b8:	2307      	movs	r3, #7
 80162ba:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80162be:	e027      	b.n	8016310 <f_unlink+0x130>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80162c0:	68bb      	ldr	r3, [r7, #8]
 80162c2:	60fb      	str	r3, [r7, #12]
						sdj.obj.sclust = dclst;
 80162c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80162c6:	617b      	str	r3, [r7, #20]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 80162c8:	f107 030c 	add.w	r3, r7, #12
 80162cc:	2100      	movs	r1, #0
 80162ce:	4618      	mov	r0, r3
 80162d0:	f7fd fadd 	bl	801388e <dir_sdi>
 80162d4:	4603      	mov	r3, r0
 80162d6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						if (res == FR_OK) {
 80162da:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d116      	bne.n	8016310 <f_unlink+0x130>
							res = dir_read(&sdj, 0);			/* Read an item */
 80162e2:	f107 030c 	add.w	r3, r7, #12
 80162e6:	2100      	movs	r1, #0
 80162e8:	4618      	mov	r0, r3
 80162ea:	f7fd fe82 	bl	8013ff2 <dir_read>
 80162ee:	4603      	mov	r3, r0
 80162f0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 80162f4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d102      	bne.n	8016302 <f_unlink+0x122>
 80162fc:	2307      	movs	r3, #7
 80162fe:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8016302:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8016306:	2b04      	cmp	r3, #4
 8016308:	d102      	bne.n	8016310 <f_unlink+0x130>
 801630a:	2300      	movs	r3, #0
 801630c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8016310:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8016314:	2b00      	cmp	r3, #0
 8016316:	d123      	bne.n	8016360 <f_unlink+0x180>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8016318:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801631c:	4618      	mov	r0, r3
 801631e:	f7fe f8c7 	bl	80144b0 <dir_remove>
 8016322:	4603      	mov	r3, r0
 8016324:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8016328:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801632c:	2b00      	cmp	r3, #0
 801632e:	d10c      	bne.n	801634a <f_unlink+0x16a>
 8016330:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8016332:	2b00      	cmp	r3, #0
 8016334:	d009      	beq.n	801634a <f_unlink+0x16a>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8016336:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801633a:	2200      	movs	r2, #0
 801633c:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 801633e:	4618      	mov	r0, r3
 8016340:	f7fd f974 	bl	801362c <remove_chain>
 8016344:	4603      	mov	r3, r0
 8016346:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801634a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801634e:	2b00      	cmp	r3, #0
 8016350:	d106      	bne.n	8016360 <f_unlink+0x180>
 8016352:	68bb      	ldr	r3, [r7, #8]
 8016354:	4618      	mov	r0, r3
 8016356:	f7fc ff4b 	bl	80131f0 <sync_fs>
 801635a:	4603      	mov	r3, r0
 801635c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}
		FREE_NAMBUF();
 8016360:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8016362:	f000 fd4e 	bl	8016e02 <ff_memfree>
	}

	LEAVE_FF(fs, res);
 8016366:	68bb      	ldr	r3, [r7, #8]
 8016368:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 801636c:	4611      	mov	r1, r2
 801636e:	4618      	mov	r0, r3
 8016370:	f7fc feb1 	bl	80130d6 <unlock_fs>
 8016374:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8016378:	4618      	mov	r0, r3
 801637a:	3778      	adds	r7, #120	@ 0x78
 801637c:	46bd      	mov	sp, r7
 801637e:	bd80      	pop	{r7, pc}

08016380 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8016380:	b580      	push	{r7, lr}
 8016382:	b098      	sub	sp, #96	@ 0x60
 8016384:	af00      	add	r7, sp, #0
 8016386:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8016388:	f107 010c 	add.w	r1, r7, #12
 801638c:	1d3b      	adds	r3, r7, #4
 801638e:	2202      	movs	r2, #2
 8016390:	4618      	mov	r0, r3
 8016392:	f7fe fc07 	bl	8014ba4 <find_volume>
 8016396:	4603      	mov	r3, r0
 8016398:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	dj.obj.fs = fs;
 801639c:	68fb      	ldr	r3, [r7, #12]
 801639e:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 80163a0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	f040 810d 	bne.w	80165c4 <f_mkdir+0x244>
		INIT_NAMBUF(fs);
 80163aa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80163ae:	f000 fd1c 	bl	8016dea <ff_memalloc>
 80163b2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80163b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d106      	bne.n	80163c8 <f_mkdir+0x48>
 80163ba:	68fb      	ldr	r3, [r7, #12]
 80163bc:	2111      	movs	r1, #17
 80163be:	4618      	mov	r0, r3
 80163c0:	f7fc fe89 	bl	80130d6 <unlock_fs>
 80163c4:	2311      	movs	r3, #17
 80163c6:	e106      	b.n	80165d6 <f_mkdir+0x256>
 80163c8:	68fb      	ldr	r3, [r7, #12]
 80163ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80163cc:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);			/* Follow the file path */
 80163ce:	687a      	ldr	r2, [r7, #4]
 80163d0:	f107 0310 	add.w	r3, r7, #16
 80163d4:	4611      	mov	r1, r2
 80163d6:	4618      	mov	r0, r3
 80163d8:	f7fe faba 	bl	8014950 <follow_path>
 80163dc:	4603      	mov	r3, r0
 80163de:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80163e2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d102      	bne.n	80163f0 <f_mkdir+0x70>
 80163ea:	2308      	movs	r3, #8
 80163ec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 80163f0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80163f4:	2b04      	cmp	r3, #4
 80163f6:	d108      	bne.n	801640a <f_mkdir+0x8a>
 80163f8:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80163fc:	f003 0320 	and.w	r3, r3, #32
 8016400:	2b00      	cmp	r3, #0
 8016402:	d002      	beq.n	801640a <f_mkdir+0x8a>
			res = FR_INVALID_NAME;
 8016404:	2306      	movs	r3, #6
 8016406:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 801640a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801640e:	2b04      	cmp	r3, #4
 8016410:	f040 80d5 	bne.w	80165be <f_mkdir+0x23e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8016414:	f107 0310 	add.w	r3, r7, #16
 8016418:	2100      	movs	r1, #0
 801641a:	4618      	mov	r0, r3
 801641c:	f7fd f96b 	bl	80136f6 <create_chain>
 8016420:	64b8      	str	r0, [r7, #72]	@ 0x48
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8016422:	68fb      	ldr	r3, [r7, #12]
 8016424:	895b      	ldrh	r3, [r3, #10]
 8016426:	025b      	lsls	r3, r3, #9
 8016428:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 801642a:	2300      	movs	r3, #0
 801642c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8016430:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016432:	2b00      	cmp	r3, #0
 8016434:	d102      	bne.n	801643c <f_mkdir+0xbc>
 8016436:	2307      	movs	r3, #7
 8016438:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 801643c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801643e:	2b01      	cmp	r3, #1
 8016440:	d102      	bne.n	8016448 <f_mkdir+0xc8>
 8016442:	2302      	movs	r3, #2
 8016444:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8016448:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801644a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801644e:	d102      	bne.n	8016456 <f_mkdir+0xd6>
 8016450:	2301      	movs	r3, #1
 8016452:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8016456:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801645a:	2b00      	cmp	r3, #0
 801645c:	d106      	bne.n	801646c <f_mkdir+0xec>
 801645e:	68fb      	ldr	r3, [r7, #12]
 8016460:	4618      	mov	r0, r3
 8016462:	f7fc fe53 	bl	801310c <sync_window>
 8016466:	4603      	mov	r3, r0
 8016468:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			tm = GET_FATTIME();
 801646c:	4b5c      	ldr	r3, [pc, #368]	@ (80165e0 <f_mkdir+0x260>)
 801646e:	647b      	str	r3, [r7, #68]	@ 0x44
			if (res == FR_OK) {					/* Initialize the new directory table */
 8016470:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8016474:	2b00      	cmp	r3, #0
 8016476:	d16a      	bne.n	801654e <f_mkdir+0x1ce>
				dsc = clust2sect(fs, dcl);
 8016478:	68fb      	ldr	r3, [r7, #12]
 801647a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801647c:	4618      	mov	r0, r3
 801647e:	f7fc ff25 	bl	80132cc <clust2sect>
 8016482:	6578      	str	r0, [r7, #84]	@ 0x54
				dir = fs->win;
 8016484:	68fb      	ldr	r3, [r7, #12]
 8016486:	333c      	adds	r3, #60	@ 0x3c
 8016488:	643b      	str	r3, [r7, #64]	@ 0x40
				mem_set(dir, 0, SS(fs));
 801648a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801648e:	2100      	movs	r1, #0
 8016490:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8016492:	f7fc fdad 	bl	8012ff0 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8016496:	220b      	movs	r2, #11
 8016498:	2120      	movs	r1, #32
 801649a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801649c:	f7fc fda8 	bl	8012ff0 <mem_set>
					dir[DIR_Name] = '.';
 80164a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80164a2:	222e      	movs	r2, #46	@ 0x2e
 80164a4:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 80164a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80164a8:	330b      	adds	r3, #11
 80164aa:	2210      	movs	r2, #16
 80164ac:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 80164ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80164b0:	3316      	adds	r3, #22
 80164b2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80164b4:	4618      	mov	r0, r3
 80164b6:	f7fc fd4e 	bl	8012f56 <st_dword>
					st_clust(fs, dir, dcl);
 80164ba:	68fb      	ldr	r3, [r7, #12]
 80164bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80164be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80164c0:	4618      	mov	r0, r3
 80164c2:	f7fd fb8a 	bl	8013bda <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80164c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80164c8:	3320      	adds	r3, #32
 80164ca:	2220      	movs	r2, #32
 80164cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80164ce:	4618      	mov	r0, r3
 80164d0:	f7fc fd6d 	bl	8012fae <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80164d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80164d6:	3321      	adds	r3, #33	@ 0x21
 80164d8:	222e      	movs	r2, #46	@ 0x2e
 80164da:	701a      	strb	r2, [r3, #0]
 80164dc:	69bb      	ldr	r3, [r7, #24]
 80164de:	653b      	str	r3, [r7, #80]	@ 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80164e0:	68fb      	ldr	r3, [r7, #12]
 80164e2:	781b      	ldrb	r3, [r3, #0]
 80164e4:	2b03      	cmp	r3, #3
 80164e6:	d106      	bne.n	80164f6 <f_mkdir+0x176>
 80164e8:	68fb      	ldr	r3, [r7, #12]
 80164ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80164ec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80164ee:	429a      	cmp	r2, r3
 80164f0:	d101      	bne.n	80164f6 <f_mkdir+0x176>
 80164f2:	2300      	movs	r3, #0
 80164f4:	653b      	str	r3, [r7, #80]	@ 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 80164f6:	68f8      	ldr	r0, [r7, #12]
 80164f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80164fa:	3320      	adds	r3, #32
 80164fc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80164fe:	4619      	mov	r1, r3
 8016500:	f7fd fb6b 	bl	8013bda <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8016504:	68fb      	ldr	r3, [r7, #12]
 8016506:	895b      	ldrh	r3, [r3, #10]
 8016508:	65bb      	str	r3, [r7, #88]	@ 0x58
 801650a:	e01b      	b.n	8016544 <f_mkdir+0x1c4>
					fs->winsect = dsc++;
 801650c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801650e:	1c5a      	adds	r2, r3, #1
 8016510:	657a      	str	r2, [r7, #84]	@ 0x54
 8016512:	68fa      	ldr	r2, [r7, #12]
 8016514:	6393      	str	r3, [r2, #56]	@ 0x38
					fs->wflag = 1;
 8016516:	68fb      	ldr	r3, [r7, #12]
 8016518:	2201      	movs	r2, #1
 801651a:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 801651c:	68fb      	ldr	r3, [r7, #12]
 801651e:	4618      	mov	r0, r3
 8016520:	f7fc fdf4 	bl	801310c <sync_window>
 8016524:	4603      	mov	r3, r0
 8016526:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (res != FR_OK) break;
 801652a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801652e:	2b00      	cmp	r3, #0
 8016530:	d10c      	bne.n	801654c <f_mkdir+0x1cc>
					mem_set(dir, 0, SS(fs));
 8016532:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016536:	2100      	movs	r1, #0
 8016538:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801653a:	f7fc fd59 	bl	8012ff0 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801653e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016540:	3b01      	subs	r3, #1
 8016542:	65bb      	str	r3, [r7, #88]	@ 0x58
 8016544:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016546:	2b00      	cmp	r3, #0
 8016548:	d1e0      	bne.n	801650c <f_mkdir+0x18c>
 801654a:	e000      	b.n	801654e <f_mkdir+0x1ce>
					if (res != FR_OK) break;
 801654c:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 801654e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8016552:	2b00      	cmp	r3, #0
 8016554:	d107      	bne.n	8016566 <f_mkdir+0x1e6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8016556:	f107 0310 	add.w	r3, r7, #16
 801655a:	4618      	mov	r0, r3
 801655c:	f7fd feb0 	bl	80142c0 <dir_register>
 8016560:	4603      	mov	r3, r0
 8016562:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
			if (res == FR_OK) {
 8016566:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801656a:	2b00      	cmp	r3, #0
 801656c:	d120      	bne.n	80165b0 <f_mkdir+0x230>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 801656e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016570:	643b      	str	r3, [r7, #64]	@ 0x40
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8016572:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016574:	3316      	adds	r3, #22
 8016576:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8016578:	4618      	mov	r0, r3
 801657a:	f7fc fcec 	bl	8012f56 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 801657e:	68fb      	ldr	r3, [r7, #12]
 8016580:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8016582:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8016584:	4618      	mov	r0, r3
 8016586:	f7fd fb28 	bl	8013bda <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 801658a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801658c:	330b      	adds	r3, #11
 801658e:	2210      	movs	r2, #16
 8016590:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8016592:	68fb      	ldr	r3, [r7, #12]
 8016594:	2201      	movs	r2, #1
 8016596:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8016598:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801659c:	2b00      	cmp	r3, #0
 801659e:	d10e      	bne.n	80165be <f_mkdir+0x23e>
					res = sync_fs(fs);
 80165a0:	68fb      	ldr	r3, [r7, #12]
 80165a2:	4618      	mov	r0, r3
 80165a4:	f7fc fe24 	bl	80131f0 <sync_fs>
 80165a8:	4603      	mov	r3, r0
 80165aa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80165ae:	e006      	b.n	80165be <f_mkdir+0x23e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80165b0:	f107 0310 	add.w	r3, r7, #16
 80165b4:	2200      	movs	r2, #0
 80165b6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80165b8:	4618      	mov	r0, r3
 80165ba:	f7fd f837 	bl	801362c <remove_chain>
			}
		}
		FREE_NAMBUF();
 80165be:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80165c0:	f000 fc1f 	bl	8016e02 <ff_memfree>
	}

	LEAVE_FF(fs, res);
 80165c4:	68fb      	ldr	r3, [r7, #12]
 80165c6:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 80165ca:	4611      	mov	r1, r2
 80165cc:	4618      	mov	r0, r3
 80165ce:	f7fc fd82 	bl	80130d6 <unlock_fs>
 80165d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80165d6:	4618      	mov	r0, r3
 80165d8:	3760      	adds	r7, #96	@ 0x60
 80165da:	46bd      	mov	sp, r7
 80165dc:	bd80      	pop	{r7, pc}
 80165de:	bf00      	nop
 80165e0:	5b2b0000 	.word	0x5b2b0000

080165e4 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80165e4:	b580      	push	{r7, lr}
 80165e6:	b084      	sub	sp, #16
 80165e8:	af00      	add	r7, sp, #0
 80165ea:	6078      	str	r0, [r7, #4]
 80165ec:	460b      	mov	r3, r1
 80165ee:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80165f0:	78fb      	ldrb	r3, [r7, #3]
 80165f2:	2b0a      	cmp	r3, #10
 80165f4:	d103      	bne.n	80165fe <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80165f6:	210d      	movs	r1, #13
 80165f8:	6878      	ldr	r0, [r7, #4]
 80165fa:	f7ff fff3 	bl	80165e4 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	685b      	ldr	r3, [r3, #4]
 8016602:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8016604:	68fb      	ldr	r3, [r7, #12]
 8016606:	2b00      	cmp	r3, #0
 8016608:	db25      	blt.n	8016656 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 801660a:	68fb      	ldr	r3, [r7, #12]
 801660c:	1c5a      	adds	r2, r3, #1
 801660e:	60fa      	str	r2, [r7, #12]
 8016610:	687a      	ldr	r2, [r7, #4]
 8016612:	4413      	add	r3, r2
 8016614:	78fa      	ldrb	r2, [r7, #3]
 8016616:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8016618:	68fb      	ldr	r3, [r7, #12]
 801661a:	2b3c      	cmp	r3, #60	@ 0x3c
 801661c:	dd12      	ble.n	8016644 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	6818      	ldr	r0, [r3, #0]
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	f103 010c 	add.w	r1, r3, #12
 8016628:	68fa      	ldr	r2, [r7, #12]
 801662a:	f107 0308 	add.w	r3, r7, #8
 801662e:	f7ff f8cb 	bl	80157c8 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8016632:	68ba      	ldr	r2, [r7, #8]
 8016634:	68fb      	ldr	r3, [r7, #12]
 8016636:	429a      	cmp	r2, r3
 8016638:	d101      	bne.n	801663e <putc_bfd+0x5a>
 801663a:	2300      	movs	r3, #0
 801663c:	e001      	b.n	8016642 <putc_bfd+0x5e>
 801663e:	f04f 33ff 	mov.w	r3, #4294967295
 8016642:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	68fa      	ldr	r2, [r7, #12]
 8016648:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	689b      	ldr	r3, [r3, #8]
 801664e:	1c5a      	adds	r2, r3, #1
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	609a      	str	r2, [r3, #8]
 8016654:	e000      	b.n	8016658 <putc_bfd+0x74>
	if (i < 0) return;
 8016656:	bf00      	nop
}
 8016658:	3710      	adds	r7, #16
 801665a:	46bd      	mov	sp, r7
 801665c:	bd80      	pop	{r7, pc}

0801665e <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 801665e:	b580      	push	{r7, lr}
 8016660:	b084      	sub	sp, #16
 8016662:	af00      	add	r7, sp, #0
 8016664:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	685b      	ldr	r3, [r3, #4]
 801666a:	2b00      	cmp	r3, #0
 801666c:	db16      	blt.n	801669c <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	6818      	ldr	r0, [r3, #0]
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	f103 010c 	add.w	r1, r3, #12
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	685b      	ldr	r3, [r3, #4]
 801667c:	461a      	mov	r2, r3
 801667e:	f107 030c 	add.w	r3, r7, #12
 8016682:	f7ff f8a1 	bl	80157c8 <f_write>
 8016686:	4603      	mov	r3, r0
 8016688:	2b00      	cmp	r3, #0
 801668a:	d107      	bne.n	801669c <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	685b      	ldr	r3, [r3, #4]
 8016690:	68fa      	ldr	r2, [r7, #12]
 8016692:	4293      	cmp	r3, r2
 8016694:	d102      	bne.n	801669c <putc_flush+0x3e>
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	689b      	ldr	r3, [r3, #8]
 801669a:	e001      	b.n	80166a0 <putc_flush+0x42>
	return EOF;
 801669c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80166a0:	4618      	mov	r0, r3
 80166a2:	3710      	adds	r7, #16
 80166a4:	46bd      	mov	sp, r7
 80166a6:	bd80      	pop	{r7, pc}

080166a8 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80166a8:	b480      	push	{r7}
 80166aa:	b083      	sub	sp, #12
 80166ac:	af00      	add	r7, sp, #0
 80166ae:	6078      	str	r0, [r7, #4]
 80166b0:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	683a      	ldr	r2, [r7, #0]
 80166b6:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	2200      	movs	r2, #0
 80166bc:	605a      	str	r2, [r3, #4]
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	685a      	ldr	r2, [r3, #4]
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	609a      	str	r2, [r3, #8]
}
 80166c6:	bf00      	nop
 80166c8:	370c      	adds	r7, #12
 80166ca:	46bd      	mov	sp, r7
 80166cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166d0:	4770      	bx	lr
	...

080166d4 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 80166d4:	b40e      	push	{r1, r2, r3}
 80166d6:	b580      	push	{r7, lr}
 80166d8:	b0a7      	sub	sp, #156	@ 0x9c
 80166da:	af00      	add	r7, sp, #0
 80166dc:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 80166de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80166e2:	6879      	ldr	r1, [r7, #4]
 80166e4:	4618      	mov	r0, r3
 80166e6:	f7ff ffdf 	bl	80166a8 <putc_init>

	va_start(arp, fmt);
 80166ea:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80166ee:	67bb      	str	r3, [r7, #120]	@ 0x78

	for (;;) {
		c = *fmt++;
 80166f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80166f4:	1c5a      	adds	r2, r3, #1
 80166f6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80166fa:	781b      	ldrb	r3, [r3, #0]
 80166fc:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == 0) break;			/* End of string */
 8016700:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8016704:	2b00      	cmp	r3, #0
 8016706:	f000 81f2 	beq.w	8016aee <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 801670a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801670e:	2b25      	cmp	r3, #37	@ 0x25
 8016710:	d008      	beq.n	8016724 <f_printf+0x50>
			putc_bfd(&pb, c);
 8016712:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 8016716:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801671a:	4611      	mov	r1, r2
 801671c:	4618      	mov	r0, r3
 801671e:	f7ff ff61 	bl	80165e4 <putc_bfd>
			continue;
 8016722:	e1e3      	b.n	8016aec <f_printf+0x418>
		}
		w = f = 0;
 8016724:	2300      	movs	r3, #0
 8016726:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 801672a:	2300      	movs	r3, #0
 801672c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		c = *fmt++;
 8016730:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8016734:	1c5a      	adds	r2, r3, #1
 8016736:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801673a:	781b      	ldrb	r3, [r3, #0]
 801673c:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8016740:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8016744:	2b30      	cmp	r3, #48	@ 0x30
 8016746:	d10b      	bne.n	8016760 <f_printf+0x8c>
			f = 1; c = *fmt++;
 8016748:	2301      	movs	r3, #1
 801674a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 801674e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8016752:	1c5a      	adds	r2, r3, #1
 8016754:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8016758:	781b      	ldrb	r3, [r3, #0]
 801675a:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 801675e:	e024      	b.n	80167aa <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8016760:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8016764:	2b2d      	cmp	r3, #45	@ 0x2d
 8016766:	d120      	bne.n	80167aa <f_printf+0xd6>
				f = 2; c = *fmt++;
 8016768:	2302      	movs	r3, #2
 801676a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 801676e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8016772:	1c5a      	adds	r2, r3, #1
 8016774:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8016778:	781b      	ldrb	r3, [r3, #0]
 801677a:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 801677e:	e014      	b.n	80167aa <f_printf+0xd6>
			w = w * 10 + c - '0';
 8016780:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8016784:	4613      	mov	r3, r2
 8016786:	009b      	lsls	r3, r3, #2
 8016788:	4413      	add	r3, r2
 801678a:	005b      	lsls	r3, r3, #1
 801678c:	461a      	mov	r2, r3
 801678e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8016792:	4413      	add	r3, r2
 8016794:	3b30      	subs	r3, #48	@ 0x30
 8016796:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			c = *fmt++;
 801679a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801679e:	1c5a      	adds	r2, r3, #1
 80167a0:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80167a4:	781b      	ldrb	r3, [r3, #0]
 80167a6:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		while (IsDigit(c)) {		/* Precision */
 80167aa:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80167ae:	2b2f      	cmp	r3, #47	@ 0x2f
 80167b0:	d903      	bls.n	80167ba <f_printf+0xe6>
 80167b2:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80167b6:	2b39      	cmp	r3, #57	@ 0x39
 80167b8:	d9e2      	bls.n	8016780 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 80167ba:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80167be:	2b6c      	cmp	r3, #108	@ 0x6c
 80167c0:	d003      	beq.n	80167ca <f_printf+0xf6>
 80167c2:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80167c6:	2b4c      	cmp	r3, #76	@ 0x4c
 80167c8:	d10d      	bne.n	80167e6 <f_printf+0x112>
			f |= 4; c = *fmt++;
 80167ca:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80167ce:	f043 0304 	orr.w	r3, r3, #4
 80167d2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80167d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80167da:	1c5a      	adds	r2, r3, #1
 80167dc:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80167e0:	781b      	ldrb	r3, [r3, #0]
 80167e2:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		}
		if (!c) break;
 80167e6:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	f000 8181 	beq.w	8016af2 <f_printf+0x41e>
		d = c;
 80167f0:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80167f4:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		if (IsLower(d)) d -= 0x20;
 80167f8:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80167fc:	2b60      	cmp	r3, #96	@ 0x60
 80167fe:	d908      	bls.n	8016812 <f_printf+0x13e>
 8016800:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8016804:	2b7a      	cmp	r3, #122	@ 0x7a
 8016806:	d804      	bhi.n	8016812 <f_printf+0x13e>
 8016808:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 801680c:	3b20      	subs	r3, #32
 801680e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		switch (d) {				/* Type is... */
 8016812:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8016816:	3b42      	subs	r3, #66	@ 0x42
 8016818:	2b16      	cmp	r3, #22
 801681a:	f200 8098 	bhi.w	801694e <f_printf+0x27a>
 801681e:	a201      	add	r2, pc, #4	@ (adr r2, 8016824 <f_printf+0x150>)
 8016820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016824:	0801692f 	.word	0x0801692f
 8016828:	08016917 	.word	0x08016917
 801682c:	0801693f 	.word	0x0801693f
 8016830:	0801694f 	.word	0x0801694f
 8016834:	0801694f 	.word	0x0801694f
 8016838:	0801694f 	.word	0x0801694f
 801683c:	0801694f 	.word	0x0801694f
 8016840:	0801694f 	.word	0x0801694f
 8016844:	0801694f 	.word	0x0801694f
 8016848:	0801694f 	.word	0x0801694f
 801684c:	0801694f 	.word	0x0801694f
 8016850:	0801694f 	.word	0x0801694f
 8016854:	0801694f 	.word	0x0801694f
 8016858:	08016937 	.word	0x08016937
 801685c:	0801694f 	.word	0x0801694f
 8016860:	0801694f 	.word	0x0801694f
 8016864:	0801694f 	.word	0x0801694f
 8016868:	08016881 	.word	0x08016881
 801686c:	0801694f 	.word	0x0801694f
 8016870:	0801693f 	.word	0x0801693f
 8016874:	0801694f 	.word	0x0801694f
 8016878:	0801694f 	.word	0x0801694f
 801687c:	08016947 	.word	0x08016947
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8016880:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016882:	1d1a      	adds	r2, r3, #4
 8016884:	67ba      	str	r2, [r7, #120]	@ 0x78
 8016886:	681b      	ldr	r3, [r3, #0]
 8016888:	67fb      	str	r3, [r7, #124]	@ 0x7c
			for (j = 0; p[j]; j++) ;
 801688a:	2300      	movs	r3, #0
 801688c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8016890:	e004      	b.n	801689c <f_printf+0x1c8>
 8016892:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016896:	3301      	adds	r3, #1
 8016898:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801689c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801689e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80168a2:	4413      	add	r3, r2
 80168a4:	781b      	ldrb	r3, [r3, #0]
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	d1f3      	bne.n	8016892 <f_printf+0x1be>
			if (!(f & 2)) {
 80168aa:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80168ae:	f003 0302 	and.w	r3, r3, #2
 80168b2:	2b00      	cmp	r3, #0
 80168b4:	d11a      	bne.n	80168ec <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 80168b6:	e005      	b.n	80168c4 <f_printf+0x1f0>
 80168b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80168bc:	2120      	movs	r1, #32
 80168be:	4618      	mov	r0, r3
 80168c0:	f7ff fe90 	bl	80165e4 <putc_bfd>
 80168c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80168c8:	1c5a      	adds	r2, r3, #1
 80168ca:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80168ce:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80168d2:	429a      	cmp	r2, r3
 80168d4:	d8f0      	bhi.n	80168b8 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 80168d6:	e009      	b.n	80168ec <f_printf+0x218>
 80168d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80168da:	1c5a      	adds	r2, r3, #1
 80168dc:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80168de:	781a      	ldrb	r2, [r3, #0]
 80168e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80168e4:	4611      	mov	r1, r2
 80168e6:	4618      	mov	r0, r3
 80168e8:	f7ff fe7c 	bl	80165e4 <putc_bfd>
 80168ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80168ee:	781b      	ldrb	r3, [r3, #0]
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	d1f1      	bne.n	80168d8 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 80168f4:	e005      	b.n	8016902 <f_printf+0x22e>
 80168f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80168fa:	2120      	movs	r1, #32
 80168fc:	4618      	mov	r0, r3
 80168fe:	f7ff fe71 	bl	80165e4 <putc_bfd>
 8016902:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016906:	1c5a      	adds	r2, r3, #1
 8016908:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 801690c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8016910:	429a      	cmp	r2, r3
 8016912:	d8f0      	bhi.n	80168f6 <f_printf+0x222>
			continue;
 8016914:	e0ea      	b.n	8016aec <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8016916:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016918:	1d1a      	adds	r2, r3, #4
 801691a:	67ba      	str	r2, [r7, #120]	@ 0x78
 801691c:	681b      	ldr	r3, [r3, #0]
 801691e:	b2da      	uxtb	r2, r3
 8016920:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8016924:	4611      	mov	r1, r2
 8016926:	4618      	mov	r0, r3
 8016928:	f7ff fe5c 	bl	80165e4 <putc_bfd>
 801692c:	e0de      	b.n	8016aec <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 801692e:	2302      	movs	r3, #2
 8016930:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8016934:	e014      	b.n	8016960 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8016936:	2308      	movs	r3, #8
 8016938:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 801693c:	e010      	b.n	8016960 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 801693e:	230a      	movs	r3, #10
 8016940:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8016944:	e00c      	b.n	8016960 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8016946:	2310      	movs	r3, #16
 8016948:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 801694c:	e008      	b.n	8016960 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 801694e:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 8016952:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8016956:	4611      	mov	r1, r2
 8016958:	4618      	mov	r0, r3
 801695a:	f7ff fe43 	bl	80165e4 <putc_bfd>
 801695e:	e0c5      	b.n	8016aec <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8016960:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8016964:	f003 0304 	and.w	r3, r3, #4
 8016968:	2b00      	cmp	r3, #0
 801696a:	d004      	beq.n	8016976 <f_printf+0x2a2>
 801696c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801696e:	1d1a      	adds	r2, r3, #4
 8016970:	67ba      	str	r2, [r7, #120]	@ 0x78
 8016972:	681b      	ldr	r3, [r3, #0]
 8016974:	e00c      	b.n	8016990 <f_printf+0x2bc>
 8016976:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 801697a:	2b44      	cmp	r3, #68	@ 0x44
 801697c:	d104      	bne.n	8016988 <f_printf+0x2b4>
 801697e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016980:	1d1a      	adds	r2, r3, #4
 8016982:	67ba      	str	r2, [r7, #120]	@ 0x78
 8016984:	681b      	ldr	r3, [r3, #0]
 8016986:	e003      	b.n	8016990 <f_printf+0x2bc>
 8016988:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801698a:	1d1a      	adds	r2, r3, #4
 801698c:	67ba      	str	r2, [r7, #120]	@ 0x78
 801698e:	681b      	ldr	r3, [r3, #0]
 8016990:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8016994:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8016998:	2b44      	cmp	r3, #68	@ 0x44
 801699a:	d10e      	bne.n	80169ba <f_printf+0x2e6>
 801699c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	da0a      	bge.n	80169ba <f_printf+0x2e6>
			v = 0 - v;
 80169a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80169a8:	425b      	negs	r3, r3
 80169aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			f |= 8;
 80169ae:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80169b2:	f043 0308 	orr.w	r3, r3, #8
 80169b6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}
		i = 0;
 80169ba:	2300      	movs	r3, #0
 80169bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 80169c0:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 80169c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80169c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80169cc:	fb01 f202 	mul.w	r2, r1, r2
 80169d0:	1a9b      	subs	r3, r3, r2
 80169d2:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 80169d6:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80169da:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80169de:	fbb2 f3f3 	udiv	r3, r2, r3
 80169e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 80169e6:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80169ea:	2b09      	cmp	r3, #9
 80169ec:	d90b      	bls.n	8016a06 <f_printf+0x332>
 80169ee:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80169f2:	2b78      	cmp	r3, #120	@ 0x78
 80169f4:	d101      	bne.n	80169fa <f_printf+0x326>
 80169f6:	2227      	movs	r2, #39	@ 0x27
 80169f8:	e000      	b.n	80169fc <f_printf+0x328>
 80169fa:	2207      	movs	r2, #7
 80169fc:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8016a00:	4413      	add	r3, r2
 8016a02:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
			str[i++] = d + '0';
 8016a06:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8016a0a:	1c5a      	adds	r2, r3, #1
 8016a0c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8016a10:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8016a14:	3230      	adds	r2, #48	@ 0x30
 8016a16:	b2d2      	uxtb	r2, r2
 8016a18:	3398      	adds	r3, #152	@ 0x98
 8016a1a:	443b      	add	r3, r7
 8016a1c:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8016a20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8016a24:	2b00      	cmp	r3, #0
 8016a26:	d003      	beq.n	8016a30 <f_printf+0x35c>
 8016a28:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8016a2c:	2b1f      	cmp	r3, #31
 8016a2e:	d9c7      	bls.n	80169c0 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8016a30:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8016a34:	f003 0308 	and.w	r3, r3, #8
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	d009      	beq.n	8016a50 <f_printf+0x37c>
 8016a3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8016a40:	1c5a      	adds	r2, r3, #1
 8016a42:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8016a46:	3398      	adds	r3, #152	@ 0x98
 8016a48:	443b      	add	r3, r7
 8016a4a:	222d      	movs	r2, #45	@ 0x2d
 8016a4c:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8016a50:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8016a54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8016a58:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8016a5c:	f003 0301 	and.w	r3, r3, #1
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	d001      	beq.n	8016a68 <f_printf+0x394>
 8016a64:	2330      	movs	r3, #48	@ 0x30
 8016a66:	e000      	b.n	8016a6a <f_printf+0x396>
 8016a68:	2320      	movs	r3, #32
 8016a6a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8016a6e:	e007      	b.n	8016a80 <f_printf+0x3ac>
 8016a70:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8016a74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8016a78:	4611      	mov	r1, r2
 8016a7a:	4618      	mov	r0, r3
 8016a7c:	f7ff fdb2 	bl	80165e4 <putc_bfd>
 8016a80:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8016a84:	f003 0302 	and.w	r3, r3, #2
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d108      	bne.n	8016a9e <f_printf+0x3ca>
 8016a8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016a90:	1c5a      	adds	r2, r3, #1
 8016a92:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8016a96:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8016a9a:	429a      	cmp	r2, r3
 8016a9c:	d8e8      	bhi.n	8016a70 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 8016a9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8016aa2:	3b01      	subs	r3, #1
 8016aa4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8016aa8:	f107 020c 	add.w	r2, r7, #12
 8016aac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8016ab0:	4413      	add	r3, r2
 8016ab2:	781a      	ldrb	r2, [r3, #0]
 8016ab4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8016ab8:	4611      	mov	r1, r2
 8016aba:	4618      	mov	r0, r3
 8016abc:	f7ff fd92 	bl	80165e4 <putc_bfd>
		} while (i);
 8016ac0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	d1ea      	bne.n	8016a9e <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 8016ac8:	e007      	b.n	8016ada <f_printf+0x406>
 8016aca:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8016ace:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8016ad2:	4611      	mov	r1, r2
 8016ad4:	4618      	mov	r0, r3
 8016ad6:	f7ff fd85 	bl	80165e4 <putc_bfd>
 8016ada:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016ade:	1c5a      	adds	r2, r3, #1
 8016ae0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8016ae4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8016ae8:	429a      	cmp	r2, r3
 8016aea:	d8ee      	bhi.n	8016aca <f_printf+0x3f6>
		c = *fmt++;
 8016aec:	e600      	b.n	80166f0 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 8016aee:	bf00      	nop
 8016af0:	e000      	b.n	8016af4 <f_printf+0x420>
		if (!c) break;
 8016af2:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8016af4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8016af8:	4618      	mov	r0, r3
 8016afa:	f7ff fdb0 	bl	801665e <putc_flush>
 8016afe:	4603      	mov	r3, r0
}
 8016b00:	4618      	mov	r0, r3
 8016b02:	379c      	adds	r7, #156	@ 0x9c
 8016b04:	46bd      	mov	sp, r7
 8016b06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8016b0a:	b003      	add	sp, #12
 8016b0c:	4770      	bx	lr
 8016b0e:	bf00      	nop

08016b10 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8016b10:	b480      	push	{r7}
 8016b12:	b087      	sub	sp, #28
 8016b14:	af00      	add	r7, sp, #0
 8016b16:	60f8      	str	r0, [r7, #12]
 8016b18:	60b9      	str	r1, [r7, #8]
 8016b1a:	4613      	mov	r3, r2
 8016b1c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8016b1e:	2301      	movs	r3, #1
 8016b20:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8016b22:	2300      	movs	r3, #0
 8016b24:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8016b26:	4b1f      	ldr	r3, [pc, #124]	@ (8016ba4 <FATFS_LinkDriverEx+0x94>)
 8016b28:	7a5b      	ldrb	r3, [r3, #9]
 8016b2a:	b2db      	uxtb	r3, r3
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d131      	bne.n	8016b94 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8016b30:	4b1c      	ldr	r3, [pc, #112]	@ (8016ba4 <FATFS_LinkDriverEx+0x94>)
 8016b32:	7a5b      	ldrb	r3, [r3, #9]
 8016b34:	b2db      	uxtb	r3, r3
 8016b36:	461a      	mov	r2, r3
 8016b38:	4b1a      	ldr	r3, [pc, #104]	@ (8016ba4 <FATFS_LinkDriverEx+0x94>)
 8016b3a:	2100      	movs	r1, #0
 8016b3c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8016b3e:	4b19      	ldr	r3, [pc, #100]	@ (8016ba4 <FATFS_LinkDriverEx+0x94>)
 8016b40:	7a5b      	ldrb	r3, [r3, #9]
 8016b42:	b2db      	uxtb	r3, r3
 8016b44:	4a17      	ldr	r2, [pc, #92]	@ (8016ba4 <FATFS_LinkDriverEx+0x94>)
 8016b46:	009b      	lsls	r3, r3, #2
 8016b48:	4413      	add	r3, r2
 8016b4a:	68fa      	ldr	r2, [r7, #12]
 8016b4c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8016b4e:	4b15      	ldr	r3, [pc, #84]	@ (8016ba4 <FATFS_LinkDriverEx+0x94>)
 8016b50:	7a5b      	ldrb	r3, [r3, #9]
 8016b52:	b2db      	uxtb	r3, r3
 8016b54:	461a      	mov	r2, r3
 8016b56:	4b13      	ldr	r3, [pc, #76]	@ (8016ba4 <FATFS_LinkDriverEx+0x94>)
 8016b58:	4413      	add	r3, r2
 8016b5a:	79fa      	ldrb	r2, [r7, #7]
 8016b5c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8016b5e:	4b11      	ldr	r3, [pc, #68]	@ (8016ba4 <FATFS_LinkDriverEx+0x94>)
 8016b60:	7a5b      	ldrb	r3, [r3, #9]
 8016b62:	b2db      	uxtb	r3, r3
 8016b64:	1c5a      	adds	r2, r3, #1
 8016b66:	b2d1      	uxtb	r1, r2
 8016b68:	4a0e      	ldr	r2, [pc, #56]	@ (8016ba4 <FATFS_LinkDriverEx+0x94>)
 8016b6a:	7251      	strb	r1, [r2, #9]
 8016b6c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8016b6e:	7dbb      	ldrb	r3, [r7, #22]
 8016b70:	3330      	adds	r3, #48	@ 0x30
 8016b72:	b2da      	uxtb	r2, r3
 8016b74:	68bb      	ldr	r3, [r7, #8]
 8016b76:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8016b78:	68bb      	ldr	r3, [r7, #8]
 8016b7a:	3301      	adds	r3, #1
 8016b7c:	223a      	movs	r2, #58	@ 0x3a
 8016b7e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8016b80:	68bb      	ldr	r3, [r7, #8]
 8016b82:	3302      	adds	r3, #2
 8016b84:	222f      	movs	r2, #47	@ 0x2f
 8016b86:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8016b88:	68bb      	ldr	r3, [r7, #8]
 8016b8a:	3303      	adds	r3, #3
 8016b8c:	2200      	movs	r2, #0
 8016b8e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8016b90:	2300      	movs	r3, #0
 8016b92:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8016b94:	7dfb      	ldrb	r3, [r7, #23]
}
 8016b96:	4618      	mov	r0, r3
 8016b98:	371c      	adds	r7, #28
 8016b9a:	46bd      	mov	sp, r7
 8016b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ba0:	4770      	bx	lr
 8016ba2:	bf00      	nop
 8016ba4:	24002de0 	.word	0x24002de0

08016ba8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8016ba8:	b580      	push	{r7, lr}
 8016baa:	b082      	sub	sp, #8
 8016bac:	af00      	add	r7, sp, #0
 8016bae:	6078      	str	r0, [r7, #4]
 8016bb0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8016bb2:	2200      	movs	r2, #0
 8016bb4:	6839      	ldr	r1, [r7, #0]
 8016bb6:	6878      	ldr	r0, [r7, #4]
 8016bb8:	f7ff ffaa 	bl	8016b10 <FATFS_LinkDriverEx>
 8016bbc:	4603      	mov	r3, r0
}
 8016bbe:	4618      	mov	r0, r3
 8016bc0:	3708      	adds	r7, #8
 8016bc2:	46bd      	mov	sp, r7
 8016bc4:	bd80      	pop	{r7, pc}
	...

08016bc8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8016bc8:	b480      	push	{r7}
 8016bca:	b085      	sub	sp, #20
 8016bcc:	af00      	add	r7, sp, #0
 8016bce:	4603      	mov	r3, r0
 8016bd0:	6039      	str	r1, [r7, #0]
 8016bd2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8016bd4:	88fb      	ldrh	r3, [r7, #6]
 8016bd6:	2b7f      	cmp	r3, #127	@ 0x7f
 8016bd8:	d802      	bhi.n	8016be0 <ff_convert+0x18>
		c = chr;
 8016bda:	88fb      	ldrh	r3, [r7, #6]
 8016bdc:	81fb      	strh	r3, [r7, #14]
 8016bde:	e025      	b.n	8016c2c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8016be0:	683b      	ldr	r3, [r7, #0]
 8016be2:	2b00      	cmp	r3, #0
 8016be4:	d00b      	beq.n	8016bfe <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8016be6:	88fb      	ldrh	r3, [r7, #6]
 8016be8:	2bff      	cmp	r3, #255	@ 0xff
 8016bea:	d805      	bhi.n	8016bf8 <ff_convert+0x30>
 8016bec:	88fb      	ldrh	r3, [r7, #6]
 8016bee:	3b80      	subs	r3, #128	@ 0x80
 8016bf0:	4a12      	ldr	r2, [pc, #72]	@ (8016c3c <ff_convert+0x74>)
 8016bf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016bf6:	e000      	b.n	8016bfa <ff_convert+0x32>
 8016bf8:	2300      	movs	r3, #0
 8016bfa:	81fb      	strh	r3, [r7, #14]
 8016bfc:	e016      	b.n	8016c2c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8016bfe:	2300      	movs	r3, #0
 8016c00:	81fb      	strh	r3, [r7, #14]
 8016c02:	e009      	b.n	8016c18 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8016c04:	89fb      	ldrh	r3, [r7, #14]
 8016c06:	4a0d      	ldr	r2, [pc, #52]	@ (8016c3c <ff_convert+0x74>)
 8016c08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016c0c:	88fa      	ldrh	r2, [r7, #6]
 8016c0e:	429a      	cmp	r2, r3
 8016c10:	d006      	beq.n	8016c20 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8016c12:	89fb      	ldrh	r3, [r7, #14]
 8016c14:	3301      	adds	r3, #1
 8016c16:	81fb      	strh	r3, [r7, #14]
 8016c18:	89fb      	ldrh	r3, [r7, #14]
 8016c1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8016c1c:	d9f2      	bls.n	8016c04 <ff_convert+0x3c>
 8016c1e:	e000      	b.n	8016c22 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8016c20:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8016c22:	89fb      	ldrh	r3, [r7, #14]
 8016c24:	3380      	adds	r3, #128	@ 0x80
 8016c26:	b29b      	uxth	r3, r3
 8016c28:	b2db      	uxtb	r3, r3
 8016c2a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8016c2c:	89fb      	ldrh	r3, [r7, #14]
}
 8016c2e:	4618      	mov	r0, r3
 8016c30:	3714      	adds	r7, #20
 8016c32:	46bd      	mov	sp, r7
 8016c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c38:	4770      	bx	lr
 8016c3a:	bf00      	nop
 8016c3c:	08019c20 	.word	0x08019c20

08016c40 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8016c40:	b480      	push	{r7}
 8016c42:	b087      	sub	sp, #28
 8016c44:	af00      	add	r7, sp, #0
 8016c46:	4603      	mov	r3, r0
 8016c48:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8016c4a:	88fb      	ldrh	r3, [r7, #6]
 8016c4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016c50:	d201      	bcs.n	8016c56 <ff_wtoupper+0x16>
 8016c52:	4b3e      	ldr	r3, [pc, #248]	@ (8016d4c <ff_wtoupper+0x10c>)
 8016c54:	e000      	b.n	8016c58 <ff_wtoupper+0x18>
 8016c56:	4b3e      	ldr	r3, [pc, #248]	@ (8016d50 <ff_wtoupper+0x110>)
 8016c58:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8016c5a:	697b      	ldr	r3, [r7, #20]
 8016c5c:	1c9a      	adds	r2, r3, #2
 8016c5e:	617a      	str	r2, [r7, #20]
 8016c60:	881b      	ldrh	r3, [r3, #0]
 8016c62:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8016c64:	8a7b      	ldrh	r3, [r7, #18]
 8016c66:	2b00      	cmp	r3, #0
 8016c68:	d068      	beq.n	8016d3c <ff_wtoupper+0xfc>
 8016c6a:	88fa      	ldrh	r2, [r7, #6]
 8016c6c:	8a7b      	ldrh	r3, [r7, #18]
 8016c6e:	429a      	cmp	r2, r3
 8016c70:	d364      	bcc.n	8016d3c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8016c72:	697b      	ldr	r3, [r7, #20]
 8016c74:	1c9a      	adds	r2, r3, #2
 8016c76:	617a      	str	r2, [r7, #20]
 8016c78:	881b      	ldrh	r3, [r3, #0]
 8016c7a:	823b      	strh	r3, [r7, #16]
 8016c7c:	8a3b      	ldrh	r3, [r7, #16]
 8016c7e:	0a1b      	lsrs	r3, r3, #8
 8016c80:	81fb      	strh	r3, [r7, #14]
 8016c82:	8a3b      	ldrh	r3, [r7, #16]
 8016c84:	b2db      	uxtb	r3, r3
 8016c86:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8016c88:	88fa      	ldrh	r2, [r7, #6]
 8016c8a:	8a79      	ldrh	r1, [r7, #18]
 8016c8c:	8a3b      	ldrh	r3, [r7, #16]
 8016c8e:	440b      	add	r3, r1
 8016c90:	429a      	cmp	r2, r3
 8016c92:	da49      	bge.n	8016d28 <ff_wtoupper+0xe8>
			switch (cmd) {
 8016c94:	89fb      	ldrh	r3, [r7, #14]
 8016c96:	2b08      	cmp	r3, #8
 8016c98:	d84f      	bhi.n	8016d3a <ff_wtoupper+0xfa>
 8016c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8016ca0 <ff_wtoupper+0x60>)
 8016c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ca0:	08016cc5 	.word	0x08016cc5
 8016ca4:	08016cd7 	.word	0x08016cd7
 8016ca8:	08016ced 	.word	0x08016ced
 8016cac:	08016cf5 	.word	0x08016cf5
 8016cb0:	08016cfd 	.word	0x08016cfd
 8016cb4:	08016d05 	.word	0x08016d05
 8016cb8:	08016d0d 	.word	0x08016d0d
 8016cbc:	08016d15 	.word	0x08016d15
 8016cc0:	08016d1d 	.word	0x08016d1d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8016cc4:	88fa      	ldrh	r2, [r7, #6]
 8016cc6:	8a7b      	ldrh	r3, [r7, #18]
 8016cc8:	1ad3      	subs	r3, r2, r3
 8016cca:	005b      	lsls	r3, r3, #1
 8016ccc:	697a      	ldr	r2, [r7, #20]
 8016cce:	4413      	add	r3, r2
 8016cd0:	881b      	ldrh	r3, [r3, #0]
 8016cd2:	80fb      	strh	r3, [r7, #6]
 8016cd4:	e027      	b.n	8016d26 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8016cd6:	88fa      	ldrh	r2, [r7, #6]
 8016cd8:	8a7b      	ldrh	r3, [r7, #18]
 8016cda:	1ad3      	subs	r3, r2, r3
 8016cdc:	b29b      	uxth	r3, r3
 8016cde:	f003 0301 	and.w	r3, r3, #1
 8016ce2:	b29b      	uxth	r3, r3
 8016ce4:	88fa      	ldrh	r2, [r7, #6]
 8016ce6:	1ad3      	subs	r3, r2, r3
 8016ce8:	80fb      	strh	r3, [r7, #6]
 8016cea:	e01c      	b.n	8016d26 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8016cec:	88fb      	ldrh	r3, [r7, #6]
 8016cee:	3b10      	subs	r3, #16
 8016cf0:	80fb      	strh	r3, [r7, #6]
 8016cf2:	e018      	b.n	8016d26 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8016cf4:	88fb      	ldrh	r3, [r7, #6]
 8016cf6:	3b20      	subs	r3, #32
 8016cf8:	80fb      	strh	r3, [r7, #6]
 8016cfa:	e014      	b.n	8016d26 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8016cfc:	88fb      	ldrh	r3, [r7, #6]
 8016cfe:	3b30      	subs	r3, #48	@ 0x30
 8016d00:	80fb      	strh	r3, [r7, #6]
 8016d02:	e010      	b.n	8016d26 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8016d04:	88fb      	ldrh	r3, [r7, #6]
 8016d06:	3b1a      	subs	r3, #26
 8016d08:	80fb      	strh	r3, [r7, #6]
 8016d0a:	e00c      	b.n	8016d26 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8016d0c:	88fb      	ldrh	r3, [r7, #6]
 8016d0e:	3308      	adds	r3, #8
 8016d10:	80fb      	strh	r3, [r7, #6]
 8016d12:	e008      	b.n	8016d26 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8016d14:	88fb      	ldrh	r3, [r7, #6]
 8016d16:	3b50      	subs	r3, #80	@ 0x50
 8016d18:	80fb      	strh	r3, [r7, #6]
 8016d1a:	e004      	b.n	8016d26 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8016d1c:	88fb      	ldrh	r3, [r7, #6]
 8016d1e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8016d22:	80fb      	strh	r3, [r7, #6]
 8016d24:	bf00      	nop
			}
			break;
 8016d26:	e008      	b.n	8016d3a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8016d28:	89fb      	ldrh	r3, [r7, #14]
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	d195      	bne.n	8016c5a <ff_wtoupper+0x1a>
 8016d2e:	8a3b      	ldrh	r3, [r7, #16]
 8016d30:	005b      	lsls	r3, r3, #1
 8016d32:	697a      	ldr	r2, [r7, #20]
 8016d34:	4413      	add	r3, r2
 8016d36:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8016d38:	e78f      	b.n	8016c5a <ff_wtoupper+0x1a>
			break;
 8016d3a:	bf00      	nop
	}

	return chr;
 8016d3c:	88fb      	ldrh	r3, [r7, #6]
}
 8016d3e:	4618      	mov	r0, r3
 8016d40:	371c      	adds	r7, #28
 8016d42:	46bd      	mov	sp, r7
 8016d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d48:	4770      	bx	lr
 8016d4a:	bf00      	nop
 8016d4c:	08019d20 	.word	0x08019d20
 8016d50:	08019f14 	.word	0x08019f14

08016d54 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8016d54:	b580      	push	{r7, lr}
 8016d56:	b086      	sub	sp, #24
 8016d58:	af00      	add	r7, sp, #0
 8016d5a:	4603      	mov	r3, r0
 8016d5c:	6039      	str	r1, [r7, #0]
 8016d5e:	71fb      	strb	r3, [r7, #7]

    int ret;
#if _USE_MUTEX

#if (osCMSIS < 0x20000U)
    osMutexDef(MTX);
 8016d60:	2300      	movs	r3, #0
 8016d62:	60fb      	str	r3, [r7, #12]
 8016d64:	2300      	movs	r3, #0
 8016d66:	613b      	str	r3, [r7, #16]
    *sobj = osMutexCreate(osMutex(MTX));
 8016d68:	f107 030c 	add.w	r3, r7, #12
 8016d6c:	4618      	mov	r0, r3
 8016d6e:	f000 f8e4 	bl	8016f3a <osMutexCreate>
 8016d72:	4602      	mov	r2, r0
 8016d74:	683b      	ldr	r3, [r7, #0]
 8016d76:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8016d78:	683b      	ldr	r3, [r7, #0]
 8016d7a:	681b      	ldr	r3, [r3, #0]
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	bf14      	ite	ne
 8016d80:	2301      	movne	r3, #1
 8016d82:	2300      	moveq	r3, #0
 8016d84:	b2db      	uxtb	r3, r3
 8016d86:	617b      	str	r3, [r7, #20]

    return ret;
 8016d88:	697b      	ldr	r3, [r7, #20]
}
 8016d8a:	4618      	mov	r0, r3
 8016d8c:	3718      	adds	r7, #24
 8016d8e:	46bd      	mov	sp, r7
 8016d90:	bd80      	pop	{r7, pc}

08016d92 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8016d92:	b580      	push	{r7, lr}
 8016d94:	b082      	sub	sp, #8
 8016d96:	af00      	add	r7, sp, #0
 8016d98:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
 8016d9a:	6878      	ldr	r0, [r7, #4]
 8016d9c:	f000 f96a 	bl	8017074 <osMutexDelete>
#else
    osSemaphoreDelete (sobj);
#endif
    return 1;
 8016da0:	2301      	movs	r3, #1
}
 8016da2:	4618      	mov	r0, r3
 8016da4:	3708      	adds	r7, #8
 8016da6:	46bd      	mov	sp, r7
 8016da8:	bd80      	pop	{r7, pc}

08016daa <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8016daa:	b580      	push	{r7, lr}
 8016dac:	b084      	sub	sp, #16
 8016dae:	af00      	add	r7, sp, #0
 8016db0:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8016db2:	2300      	movs	r3, #0
 8016db4:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
 8016db6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016dba:	6878      	ldr	r0, [r7, #4]
 8016dbc:	f000 f8d6 	bl	8016f6c <osMutexWait>
 8016dc0:	4603      	mov	r3, r0
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	d101      	bne.n	8016dca <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8016dc6:	2301      	movs	r3, #1
 8016dc8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8016dca:	68fb      	ldr	r3, [r7, #12]
}
 8016dcc:	4618      	mov	r0, r3
 8016dce:	3710      	adds	r7, #16
 8016dd0:	46bd      	mov	sp, r7
 8016dd2:	bd80      	pop	{r7, pc}

08016dd4 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8016dd4:	b580      	push	{r7, lr}
 8016dd6:	b082      	sub	sp, #8
 8016dd8:	af00      	add	r7, sp, #0
 8016dda:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
 8016ddc:	6878      	ldr	r0, [r7, #4]
 8016dde:	f000 f913 	bl	8017008 <osMutexRelease>
#else
  osSemaphoreRelease(sobj);
#endif
}
 8016de2:	bf00      	nop
 8016de4:	3708      	adds	r7, #8
 8016de6:	46bd      	mov	sp, r7
 8016de8:	bd80      	pop	{r7, pc}

08016dea <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8016dea:	b580      	push	{r7, lr}
 8016dec:	b082      	sub	sp, #8
 8016dee:	af00      	add	r7, sp, #0
 8016df0:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8016df2:	6878      	ldr	r0, [r7, #4]
 8016df4:	f002 fa92 	bl	801931c <pvPortMalloc>
 8016df8:	4603      	mov	r3, r0
}
 8016dfa:	4618      	mov	r0, r3
 8016dfc:	3708      	adds	r7, #8
 8016dfe:	46bd      	mov	sp, r7
 8016e00:	bd80      	pop	{r7, pc}

08016e02 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 8016e02:	b580      	push	{r7, lr}
 8016e04:	b082      	sub	sp, #8
 8016e06:	af00      	add	r7, sp, #0
 8016e08:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8016e0a:	6878      	ldr	r0, [r7, #4]
 8016e0c:	f002 fb54 	bl	80194b8 <vPortFree>
}
 8016e10:	bf00      	nop
 8016e12:	3708      	adds	r7, #8
 8016e14:	46bd      	mov	sp, r7
 8016e16:	bd80      	pop	{r7, pc}

08016e18 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8016e18:	b480      	push	{r7}
 8016e1a:	b085      	sub	sp, #20
 8016e1c:	af00      	add	r7, sp, #0
 8016e1e:	4603      	mov	r3, r0
 8016e20:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8016e22:	2300      	movs	r3, #0
 8016e24:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8016e26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016e2a:	2b84      	cmp	r3, #132	@ 0x84
 8016e2c:	d005      	beq.n	8016e3a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8016e2e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8016e32:	68fb      	ldr	r3, [r7, #12]
 8016e34:	4413      	add	r3, r2
 8016e36:	3303      	adds	r3, #3
 8016e38:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8016e3a:	68fb      	ldr	r3, [r7, #12]
}
 8016e3c:	4618      	mov	r0, r3
 8016e3e:	3714      	adds	r7, #20
 8016e40:	46bd      	mov	sp, r7
 8016e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e46:	4770      	bx	lr

08016e48 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8016e48:	b480      	push	{r7}
 8016e4a:	b083      	sub	sp, #12
 8016e4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016e4e:	f3ef 8305 	mrs	r3, IPSR
 8016e52:	607b      	str	r3, [r7, #4]
  return(result);
 8016e54:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	bf14      	ite	ne
 8016e5a:	2301      	movne	r3, #1
 8016e5c:	2300      	moveq	r3, #0
 8016e5e:	b2db      	uxtb	r3, r3
}
 8016e60:	4618      	mov	r0, r3
 8016e62:	370c      	adds	r7, #12
 8016e64:	46bd      	mov	sp, r7
 8016e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e6a:	4770      	bx	lr

08016e6c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8016e6c:	b580      	push	{r7, lr}
 8016e6e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8016e70:	f001 f9ce 	bl	8018210 <vTaskStartScheduler>
  
  return osOK;
 8016e74:	2300      	movs	r3, #0
}
 8016e76:	4618      	mov	r0, r3
 8016e78:	bd80      	pop	{r7, pc}

08016e7a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8016e7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e7c:	b089      	sub	sp, #36	@ 0x24
 8016e7e:	af04      	add	r7, sp, #16
 8016e80:	6078      	str	r0, [r7, #4]
 8016e82:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	695b      	ldr	r3, [r3, #20]
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	d020      	beq.n	8016ece <osThreadCreate+0x54>
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	699b      	ldr	r3, [r3, #24]
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d01c      	beq.n	8016ece <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	685c      	ldr	r4, [r3, #4]
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	691e      	ldr	r6, [r3, #16]
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8016ea6:	4618      	mov	r0, r3
 8016ea8:	f7ff ffb6 	bl	8016e18 <makeFreeRtosPriority>
 8016eac:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	695b      	ldr	r3, [r3, #20]
 8016eb2:	687a      	ldr	r2, [r7, #4]
 8016eb4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8016eb6:	9202      	str	r2, [sp, #8]
 8016eb8:	9301      	str	r3, [sp, #4]
 8016eba:	9100      	str	r1, [sp, #0]
 8016ebc:	683b      	ldr	r3, [r7, #0]
 8016ebe:	4632      	mov	r2, r6
 8016ec0:	4629      	mov	r1, r5
 8016ec2:	4620      	mov	r0, r4
 8016ec4:	f000 ffca 	bl	8017e5c <xTaskCreateStatic>
 8016ec8:	4603      	mov	r3, r0
 8016eca:	60fb      	str	r3, [r7, #12]
 8016ecc:	e01c      	b.n	8016f08 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	685c      	ldr	r4, [r3, #4]
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8016eda:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8016ee2:	4618      	mov	r0, r3
 8016ee4:	f7ff ff98 	bl	8016e18 <makeFreeRtosPriority>
 8016ee8:	4602      	mov	r2, r0
 8016eea:	f107 030c 	add.w	r3, r7, #12
 8016eee:	9301      	str	r3, [sp, #4]
 8016ef0:	9200      	str	r2, [sp, #0]
 8016ef2:	683b      	ldr	r3, [r7, #0]
 8016ef4:	4632      	mov	r2, r6
 8016ef6:	4629      	mov	r1, r5
 8016ef8:	4620      	mov	r0, r4
 8016efa:	f001 f80f 	bl	8017f1c <xTaskCreate>
 8016efe:	4603      	mov	r3, r0
 8016f00:	2b01      	cmp	r3, #1
 8016f02:	d001      	beq.n	8016f08 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8016f04:	2300      	movs	r3, #0
 8016f06:	e000      	b.n	8016f0a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8016f08:	68fb      	ldr	r3, [r7, #12]
}
 8016f0a:	4618      	mov	r0, r3
 8016f0c:	3714      	adds	r7, #20
 8016f0e:	46bd      	mov	sp, r7
 8016f10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016f12 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8016f12:	b580      	push	{r7, lr}
 8016f14:	b084      	sub	sp, #16
 8016f16:	af00      	add	r7, sp, #0
 8016f18:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8016f1e:	68fb      	ldr	r3, [r7, #12]
 8016f20:	2b00      	cmp	r3, #0
 8016f22:	d001      	beq.n	8016f28 <osDelay+0x16>
 8016f24:	68fb      	ldr	r3, [r7, #12]
 8016f26:	e000      	b.n	8016f2a <osDelay+0x18>
 8016f28:	2301      	movs	r3, #1
 8016f2a:	4618      	mov	r0, r3
 8016f2c:	f001 f93a 	bl	80181a4 <vTaskDelay>
  
  return osOK;
 8016f30:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8016f32:	4618      	mov	r0, r3
 8016f34:	3710      	adds	r7, #16
 8016f36:	46bd      	mov	sp, r7
 8016f38:	bd80      	pop	{r7, pc}

08016f3a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8016f3a:	b580      	push	{r7, lr}
 8016f3c:	b082      	sub	sp, #8
 8016f3e:	af00      	add	r7, sp, #0
 8016f40:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	685b      	ldr	r3, [r3, #4]
 8016f46:	2b00      	cmp	r3, #0
 8016f48:	d007      	beq.n	8016f5a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	685b      	ldr	r3, [r3, #4]
 8016f4e:	4619      	mov	r1, r3
 8016f50:	2001      	movs	r0, #1
 8016f52:	f000 face 	bl	80174f2 <xQueueCreateMutexStatic>
 8016f56:	4603      	mov	r3, r0
 8016f58:	e003      	b.n	8016f62 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8016f5a:	2001      	movs	r0, #1
 8016f5c:	f000 fab1 	bl	80174c2 <xQueueCreateMutex>
 8016f60:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8016f62:	4618      	mov	r0, r3
 8016f64:	3708      	adds	r7, #8
 8016f66:	46bd      	mov	sp, r7
 8016f68:	bd80      	pop	{r7, pc}
	...

08016f6c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8016f6c:	b580      	push	{r7, lr}
 8016f6e:	b084      	sub	sp, #16
 8016f70:	af00      	add	r7, sp, #0
 8016f72:	6078      	str	r0, [r7, #4]
 8016f74:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8016f76:	2300      	movs	r3, #0
 8016f78:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8016f7a:	687b      	ldr	r3, [r7, #4]
 8016f7c:	2b00      	cmp	r3, #0
 8016f7e:	d101      	bne.n	8016f84 <osMutexWait+0x18>
    return osErrorParameter;
 8016f80:	2380      	movs	r3, #128	@ 0x80
 8016f82:	e03a      	b.n	8016ffa <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8016f84:	2300      	movs	r3, #0
 8016f86:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8016f88:	683b      	ldr	r3, [r7, #0]
 8016f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f8e:	d103      	bne.n	8016f98 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8016f90:	f04f 33ff 	mov.w	r3, #4294967295
 8016f94:	60fb      	str	r3, [r7, #12]
 8016f96:	e009      	b.n	8016fac <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8016f98:	683b      	ldr	r3, [r7, #0]
 8016f9a:	2b00      	cmp	r3, #0
 8016f9c:	d006      	beq.n	8016fac <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8016f9e:	683b      	ldr	r3, [r7, #0]
 8016fa0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8016fa2:	68fb      	ldr	r3, [r7, #12]
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d101      	bne.n	8016fac <osMutexWait+0x40>
      ticks = 1;
 8016fa8:	2301      	movs	r3, #1
 8016faa:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8016fac:	f7ff ff4c 	bl	8016e48 <inHandlerMode>
 8016fb0:	4603      	mov	r3, r0
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	d017      	beq.n	8016fe6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8016fb6:	f107 0308 	add.w	r3, r7, #8
 8016fba:	461a      	mov	r2, r3
 8016fbc:	2100      	movs	r1, #0
 8016fbe:	6878      	ldr	r0, [r7, #4]
 8016fc0:	f000 fd54 	bl	8017a6c <xQueueReceiveFromISR>
 8016fc4:	4603      	mov	r3, r0
 8016fc6:	2b01      	cmp	r3, #1
 8016fc8:	d001      	beq.n	8016fce <osMutexWait+0x62>
      return osErrorOS;
 8016fca:	23ff      	movs	r3, #255	@ 0xff
 8016fcc:	e015      	b.n	8016ffa <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8016fce:	68bb      	ldr	r3, [r7, #8]
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	d011      	beq.n	8016ff8 <osMutexWait+0x8c>
 8016fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8017004 <osMutexWait+0x98>)
 8016fd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016fda:	601a      	str	r2, [r3, #0]
 8016fdc:	f3bf 8f4f 	dsb	sy
 8016fe0:	f3bf 8f6f 	isb	sy
 8016fe4:	e008      	b.n	8016ff8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8016fe6:	68f9      	ldr	r1, [r7, #12]
 8016fe8:	6878      	ldr	r0, [r7, #4]
 8016fea:	f000 fc2f 	bl	801784c <xQueueSemaphoreTake>
 8016fee:	4603      	mov	r3, r0
 8016ff0:	2b01      	cmp	r3, #1
 8016ff2:	d001      	beq.n	8016ff8 <osMutexWait+0x8c>
    return osErrorOS;
 8016ff4:	23ff      	movs	r3, #255	@ 0xff
 8016ff6:	e000      	b.n	8016ffa <osMutexWait+0x8e>
  }
  
  return osOK;
 8016ff8:	2300      	movs	r3, #0
}
 8016ffa:	4618      	mov	r0, r3
 8016ffc:	3710      	adds	r7, #16
 8016ffe:	46bd      	mov	sp, r7
 8017000:	bd80      	pop	{r7, pc}
 8017002:	bf00      	nop
 8017004:	e000ed04 	.word	0xe000ed04

08017008 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8017008:	b580      	push	{r7, lr}
 801700a:	b084      	sub	sp, #16
 801700c:	af00      	add	r7, sp, #0
 801700e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8017010:	2300      	movs	r3, #0
 8017012:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8017014:	2300      	movs	r3, #0
 8017016:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8017018:	f7ff ff16 	bl	8016e48 <inHandlerMode>
 801701c:	4603      	mov	r3, r0
 801701e:	2b00      	cmp	r3, #0
 8017020:	d016      	beq.n	8017050 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8017022:	f107 0308 	add.w	r3, r7, #8
 8017026:	4619      	mov	r1, r3
 8017028:	6878      	ldr	r0, [r7, #4]
 801702a:	f000 fb7f 	bl	801772c <xQueueGiveFromISR>
 801702e:	4603      	mov	r3, r0
 8017030:	2b01      	cmp	r3, #1
 8017032:	d001      	beq.n	8017038 <osMutexRelease+0x30>
      return osErrorOS;
 8017034:	23ff      	movs	r3, #255	@ 0xff
 8017036:	e017      	b.n	8017068 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8017038:	68bb      	ldr	r3, [r7, #8]
 801703a:	2b00      	cmp	r3, #0
 801703c:	d013      	beq.n	8017066 <osMutexRelease+0x5e>
 801703e:	4b0c      	ldr	r3, [pc, #48]	@ (8017070 <osMutexRelease+0x68>)
 8017040:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017044:	601a      	str	r2, [r3, #0]
 8017046:	f3bf 8f4f 	dsb	sy
 801704a:	f3bf 8f6f 	isb	sy
 801704e:	e00a      	b.n	8017066 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8017050:	2300      	movs	r3, #0
 8017052:	2200      	movs	r2, #0
 8017054:	2100      	movs	r1, #0
 8017056:	6878      	ldr	r0, [r7, #4]
 8017058:	f000 fa66 	bl	8017528 <xQueueGenericSend>
 801705c:	4603      	mov	r3, r0
 801705e:	2b01      	cmp	r3, #1
 8017060:	d001      	beq.n	8017066 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8017062:	23ff      	movs	r3, #255	@ 0xff
 8017064:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8017066:	68fb      	ldr	r3, [r7, #12]
}
 8017068:	4618      	mov	r0, r3
 801706a:	3710      	adds	r7, #16
 801706c:	46bd      	mov	sp, r7
 801706e:	bd80      	pop	{r7, pc}
 8017070:	e000ed04 	.word	0xe000ed04

08017074 <osMutexDelete>:
* @param mutex_id  mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexDelete (osMutexId mutex_id)
{
 8017074:	b580      	push	{r7, lr}
 8017076:	b082      	sub	sp, #8
 8017078:	af00      	add	r7, sp, #0
 801707a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 801707c:	f7ff fee4 	bl	8016e48 <inHandlerMode>
 8017080:	4603      	mov	r3, r0
 8017082:	2b00      	cmp	r3, #0
 8017084:	d001      	beq.n	801708a <osMutexDelete+0x16>
    return osErrorISR;
 8017086:	2382      	movs	r3, #130	@ 0x82
 8017088:	e003      	b.n	8017092 <osMutexDelete+0x1e>
  }

  vQueueDelete(mutex_id);
 801708a:	6878      	ldr	r0, [r7, #4]
 801708c:	f000 fd70 	bl	8017b70 <vQueueDelete>

  return osOK;
 8017090:	2300      	movs	r3, #0
}
 8017092:	4618      	mov	r0, r3
 8017094:	3708      	adds	r7, #8
 8017096:	46bd      	mov	sp, r7
 8017098:	bd80      	pop	{r7, pc}

0801709a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801709a:	b480      	push	{r7}
 801709c:	b083      	sub	sp, #12
 801709e:	af00      	add	r7, sp, #0
 80170a0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	f103 0208 	add.w	r2, r3, #8
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	f04f 32ff 	mov.w	r2, #4294967295
 80170b2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	f103 0208 	add.w	r2, r3, #8
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80170be:	687b      	ldr	r3, [r7, #4]
 80170c0:	f103 0208 	add.w	r2, r3, #8
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	2200      	movs	r2, #0
 80170cc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80170ce:	bf00      	nop
 80170d0:	370c      	adds	r7, #12
 80170d2:	46bd      	mov	sp, r7
 80170d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170d8:	4770      	bx	lr

080170da <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80170da:	b480      	push	{r7}
 80170dc:	b083      	sub	sp, #12
 80170de:	af00      	add	r7, sp, #0
 80170e0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	2200      	movs	r2, #0
 80170e6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80170e8:	bf00      	nop
 80170ea:	370c      	adds	r7, #12
 80170ec:	46bd      	mov	sp, r7
 80170ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170f2:	4770      	bx	lr

080170f4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80170f4:	b480      	push	{r7}
 80170f6:	b085      	sub	sp, #20
 80170f8:	af00      	add	r7, sp, #0
 80170fa:	6078      	str	r0, [r7, #4]
 80170fc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	685b      	ldr	r3, [r3, #4]
 8017102:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8017104:	683b      	ldr	r3, [r7, #0]
 8017106:	68fa      	ldr	r2, [r7, #12]
 8017108:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801710a:	68fb      	ldr	r3, [r7, #12]
 801710c:	689a      	ldr	r2, [r3, #8]
 801710e:	683b      	ldr	r3, [r7, #0]
 8017110:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8017112:	68fb      	ldr	r3, [r7, #12]
 8017114:	689b      	ldr	r3, [r3, #8]
 8017116:	683a      	ldr	r2, [r7, #0]
 8017118:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801711a:	68fb      	ldr	r3, [r7, #12]
 801711c:	683a      	ldr	r2, [r7, #0]
 801711e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8017120:	683b      	ldr	r3, [r7, #0]
 8017122:	687a      	ldr	r2, [r7, #4]
 8017124:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017126:	687b      	ldr	r3, [r7, #4]
 8017128:	681b      	ldr	r3, [r3, #0]
 801712a:	1c5a      	adds	r2, r3, #1
 801712c:	687b      	ldr	r3, [r7, #4]
 801712e:	601a      	str	r2, [r3, #0]
}
 8017130:	bf00      	nop
 8017132:	3714      	adds	r7, #20
 8017134:	46bd      	mov	sp, r7
 8017136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801713a:	4770      	bx	lr

0801713c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801713c:	b480      	push	{r7}
 801713e:	b085      	sub	sp, #20
 8017140:	af00      	add	r7, sp, #0
 8017142:	6078      	str	r0, [r7, #4]
 8017144:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8017146:	683b      	ldr	r3, [r7, #0]
 8017148:	681b      	ldr	r3, [r3, #0]
 801714a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801714c:	68bb      	ldr	r3, [r7, #8]
 801714e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017152:	d103      	bne.n	801715c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	691b      	ldr	r3, [r3, #16]
 8017158:	60fb      	str	r3, [r7, #12]
 801715a:	e00c      	b.n	8017176 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	3308      	adds	r3, #8
 8017160:	60fb      	str	r3, [r7, #12]
 8017162:	e002      	b.n	801716a <vListInsert+0x2e>
 8017164:	68fb      	ldr	r3, [r7, #12]
 8017166:	685b      	ldr	r3, [r3, #4]
 8017168:	60fb      	str	r3, [r7, #12]
 801716a:	68fb      	ldr	r3, [r7, #12]
 801716c:	685b      	ldr	r3, [r3, #4]
 801716e:	681b      	ldr	r3, [r3, #0]
 8017170:	68ba      	ldr	r2, [r7, #8]
 8017172:	429a      	cmp	r2, r3
 8017174:	d2f6      	bcs.n	8017164 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8017176:	68fb      	ldr	r3, [r7, #12]
 8017178:	685a      	ldr	r2, [r3, #4]
 801717a:	683b      	ldr	r3, [r7, #0]
 801717c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801717e:	683b      	ldr	r3, [r7, #0]
 8017180:	685b      	ldr	r3, [r3, #4]
 8017182:	683a      	ldr	r2, [r7, #0]
 8017184:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8017186:	683b      	ldr	r3, [r7, #0]
 8017188:	68fa      	ldr	r2, [r7, #12]
 801718a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801718c:	68fb      	ldr	r3, [r7, #12]
 801718e:	683a      	ldr	r2, [r7, #0]
 8017190:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8017192:	683b      	ldr	r3, [r7, #0]
 8017194:	687a      	ldr	r2, [r7, #4]
 8017196:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	681b      	ldr	r3, [r3, #0]
 801719c:	1c5a      	adds	r2, r3, #1
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	601a      	str	r2, [r3, #0]
}
 80171a2:	bf00      	nop
 80171a4:	3714      	adds	r7, #20
 80171a6:	46bd      	mov	sp, r7
 80171a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171ac:	4770      	bx	lr

080171ae <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80171ae:	b480      	push	{r7}
 80171b0:	b085      	sub	sp, #20
 80171b2:	af00      	add	r7, sp, #0
 80171b4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	691b      	ldr	r3, [r3, #16]
 80171ba:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	685b      	ldr	r3, [r3, #4]
 80171c0:	687a      	ldr	r2, [r7, #4]
 80171c2:	6892      	ldr	r2, [r2, #8]
 80171c4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80171c6:	687b      	ldr	r3, [r7, #4]
 80171c8:	689b      	ldr	r3, [r3, #8]
 80171ca:	687a      	ldr	r2, [r7, #4]
 80171cc:	6852      	ldr	r2, [r2, #4]
 80171ce:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80171d0:	68fb      	ldr	r3, [r7, #12]
 80171d2:	685b      	ldr	r3, [r3, #4]
 80171d4:	687a      	ldr	r2, [r7, #4]
 80171d6:	429a      	cmp	r2, r3
 80171d8:	d103      	bne.n	80171e2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	689a      	ldr	r2, [r3, #8]
 80171de:	68fb      	ldr	r3, [r7, #12]
 80171e0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	2200      	movs	r2, #0
 80171e6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80171e8:	68fb      	ldr	r3, [r7, #12]
 80171ea:	681b      	ldr	r3, [r3, #0]
 80171ec:	1e5a      	subs	r2, r3, #1
 80171ee:	68fb      	ldr	r3, [r7, #12]
 80171f0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80171f2:	68fb      	ldr	r3, [r7, #12]
 80171f4:	681b      	ldr	r3, [r3, #0]
}
 80171f6:	4618      	mov	r0, r3
 80171f8:	3714      	adds	r7, #20
 80171fa:	46bd      	mov	sp, r7
 80171fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017200:	4770      	bx	lr
	...

08017204 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8017204:	b580      	push	{r7, lr}
 8017206:	b084      	sub	sp, #16
 8017208:	af00      	add	r7, sp, #0
 801720a:	6078      	str	r0, [r7, #4]
 801720c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8017212:	68fb      	ldr	r3, [r7, #12]
 8017214:	2b00      	cmp	r3, #0
 8017216:	d10b      	bne.n	8017230 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8017218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801721c:	f383 8811 	msr	BASEPRI, r3
 8017220:	f3bf 8f6f 	isb	sy
 8017224:	f3bf 8f4f 	dsb	sy
 8017228:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801722a:	bf00      	nop
 801722c:	bf00      	nop
 801722e:	e7fd      	b.n	801722c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8017230:	f001 ff52 	bl	80190d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017234:	68fb      	ldr	r3, [r7, #12]
 8017236:	681a      	ldr	r2, [r3, #0]
 8017238:	68fb      	ldr	r3, [r7, #12]
 801723a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801723c:	68f9      	ldr	r1, [r7, #12]
 801723e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8017240:	fb01 f303 	mul.w	r3, r1, r3
 8017244:	441a      	add	r2, r3
 8017246:	68fb      	ldr	r3, [r7, #12]
 8017248:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801724a:	68fb      	ldr	r3, [r7, #12]
 801724c:	2200      	movs	r2, #0
 801724e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8017250:	68fb      	ldr	r3, [r7, #12]
 8017252:	681a      	ldr	r2, [r3, #0]
 8017254:	68fb      	ldr	r3, [r7, #12]
 8017256:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017258:	68fb      	ldr	r3, [r7, #12]
 801725a:	681a      	ldr	r2, [r3, #0]
 801725c:	68fb      	ldr	r3, [r7, #12]
 801725e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017260:	3b01      	subs	r3, #1
 8017262:	68f9      	ldr	r1, [r7, #12]
 8017264:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8017266:	fb01 f303 	mul.w	r3, r1, r3
 801726a:	441a      	add	r2, r3
 801726c:	68fb      	ldr	r3, [r7, #12]
 801726e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8017270:	68fb      	ldr	r3, [r7, #12]
 8017272:	22ff      	movs	r2, #255	@ 0xff
 8017274:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8017278:	68fb      	ldr	r3, [r7, #12]
 801727a:	22ff      	movs	r2, #255	@ 0xff
 801727c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8017280:	683b      	ldr	r3, [r7, #0]
 8017282:	2b00      	cmp	r3, #0
 8017284:	d114      	bne.n	80172b0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017286:	68fb      	ldr	r3, [r7, #12]
 8017288:	691b      	ldr	r3, [r3, #16]
 801728a:	2b00      	cmp	r3, #0
 801728c:	d01a      	beq.n	80172c4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801728e:	68fb      	ldr	r3, [r7, #12]
 8017290:	3310      	adds	r3, #16
 8017292:	4618      	mov	r0, r3
 8017294:	f001 fa06 	bl	80186a4 <xTaskRemoveFromEventList>
 8017298:	4603      	mov	r3, r0
 801729a:	2b00      	cmp	r3, #0
 801729c:	d012      	beq.n	80172c4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801729e:	4b0d      	ldr	r3, [pc, #52]	@ (80172d4 <xQueueGenericReset+0xd0>)
 80172a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80172a4:	601a      	str	r2, [r3, #0]
 80172a6:	f3bf 8f4f 	dsb	sy
 80172aa:	f3bf 8f6f 	isb	sy
 80172ae:	e009      	b.n	80172c4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80172b0:	68fb      	ldr	r3, [r7, #12]
 80172b2:	3310      	adds	r3, #16
 80172b4:	4618      	mov	r0, r3
 80172b6:	f7ff fef0 	bl	801709a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80172ba:	68fb      	ldr	r3, [r7, #12]
 80172bc:	3324      	adds	r3, #36	@ 0x24
 80172be:	4618      	mov	r0, r3
 80172c0:	f7ff feeb 	bl	801709a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80172c4:	f001 ff3a 	bl	801913c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80172c8:	2301      	movs	r3, #1
}
 80172ca:	4618      	mov	r0, r3
 80172cc:	3710      	adds	r7, #16
 80172ce:	46bd      	mov	sp, r7
 80172d0:	bd80      	pop	{r7, pc}
 80172d2:	bf00      	nop
 80172d4:	e000ed04 	.word	0xe000ed04

080172d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80172d8:	b580      	push	{r7, lr}
 80172da:	b08e      	sub	sp, #56	@ 0x38
 80172dc:	af02      	add	r7, sp, #8
 80172de:	60f8      	str	r0, [r7, #12]
 80172e0:	60b9      	str	r1, [r7, #8]
 80172e2:	607a      	str	r2, [r7, #4]
 80172e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80172e6:	68fb      	ldr	r3, [r7, #12]
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	d10b      	bne.n	8017304 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80172ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80172f0:	f383 8811 	msr	BASEPRI, r3
 80172f4:	f3bf 8f6f 	isb	sy
 80172f8:	f3bf 8f4f 	dsb	sy
 80172fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80172fe:	bf00      	nop
 8017300:	bf00      	nop
 8017302:	e7fd      	b.n	8017300 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8017304:	683b      	ldr	r3, [r7, #0]
 8017306:	2b00      	cmp	r3, #0
 8017308:	d10b      	bne.n	8017322 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 801730a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801730e:	f383 8811 	msr	BASEPRI, r3
 8017312:	f3bf 8f6f 	isb	sy
 8017316:	f3bf 8f4f 	dsb	sy
 801731a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801731c:	bf00      	nop
 801731e:	bf00      	nop
 8017320:	e7fd      	b.n	801731e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	2b00      	cmp	r3, #0
 8017326:	d002      	beq.n	801732e <xQueueGenericCreateStatic+0x56>
 8017328:	68bb      	ldr	r3, [r7, #8]
 801732a:	2b00      	cmp	r3, #0
 801732c:	d001      	beq.n	8017332 <xQueueGenericCreateStatic+0x5a>
 801732e:	2301      	movs	r3, #1
 8017330:	e000      	b.n	8017334 <xQueueGenericCreateStatic+0x5c>
 8017332:	2300      	movs	r3, #0
 8017334:	2b00      	cmp	r3, #0
 8017336:	d10b      	bne.n	8017350 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8017338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801733c:	f383 8811 	msr	BASEPRI, r3
 8017340:	f3bf 8f6f 	isb	sy
 8017344:	f3bf 8f4f 	dsb	sy
 8017348:	623b      	str	r3, [r7, #32]
}
 801734a:	bf00      	nop
 801734c:	bf00      	nop
 801734e:	e7fd      	b.n	801734c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	2b00      	cmp	r3, #0
 8017354:	d102      	bne.n	801735c <xQueueGenericCreateStatic+0x84>
 8017356:	68bb      	ldr	r3, [r7, #8]
 8017358:	2b00      	cmp	r3, #0
 801735a:	d101      	bne.n	8017360 <xQueueGenericCreateStatic+0x88>
 801735c:	2301      	movs	r3, #1
 801735e:	e000      	b.n	8017362 <xQueueGenericCreateStatic+0x8a>
 8017360:	2300      	movs	r3, #0
 8017362:	2b00      	cmp	r3, #0
 8017364:	d10b      	bne.n	801737e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8017366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801736a:	f383 8811 	msr	BASEPRI, r3
 801736e:	f3bf 8f6f 	isb	sy
 8017372:	f3bf 8f4f 	dsb	sy
 8017376:	61fb      	str	r3, [r7, #28]
}
 8017378:	bf00      	nop
 801737a:	bf00      	nop
 801737c:	e7fd      	b.n	801737a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801737e:	2350      	movs	r3, #80	@ 0x50
 8017380:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8017382:	697b      	ldr	r3, [r7, #20]
 8017384:	2b50      	cmp	r3, #80	@ 0x50
 8017386:	d00b      	beq.n	80173a0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8017388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801738c:	f383 8811 	msr	BASEPRI, r3
 8017390:	f3bf 8f6f 	isb	sy
 8017394:	f3bf 8f4f 	dsb	sy
 8017398:	61bb      	str	r3, [r7, #24]
}
 801739a:	bf00      	nop
 801739c:	bf00      	nop
 801739e:	e7fd      	b.n	801739c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80173a0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80173a2:	683b      	ldr	r3, [r7, #0]
 80173a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80173a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80173a8:	2b00      	cmp	r3, #0
 80173aa:	d00d      	beq.n	80173c8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80173ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80173ae:	2201      	movs	r2, #1
 80173b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80173b4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80173b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80173ba:	9300      	str	r3, [sp, #0]
 80173bc:	4613      	mov	r3, r2
 80173be:	687a      	ldr	r2, [r7, #4]
 80173c0:	68b9      	ldr	r1, [r7, #8]
 80173c2:	68f8      	ldr	r0, [r7, #12]
 80173c4:	f000 f840 	bl	8017448 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80173c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80173ca:	4618      	mov	r0, r3
 80173cc:	3730      	adds	r7, #48	@ 0x30
 80173ce:	46bd      	mov	sp, r7
 80173d0:	bd80      	pop	{r7, pc}

080173d2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80173d2:	b580      	push	{r7, lr}
 80173d4:	b08a      	sub	sp, #40	@ 0x28
 80173d6:	af02      	add	r7, sp, #8
 80173d8:	60f8      	str	r0, [r7, #12]
 80173da:	60b9      	str	r1, [r7, #8]
 80173dc:	4613      	mov	r3, r2
 80173de:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80173e0:	68fb      	ldr	r3, [r7, #12]
 80173e2:	2b00      	cmp	r3, #0
 80173e4:	d10b      	bne.n	80173fe <xQueueGenericCreate+0x2c>
	__asm volatile
 80173e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80173ea:	f383 8811 	msr	BASEPRI, r3
 80173ee:	f3bf 8f6f 	isb	sy
 80173f2:	f3bf 8f4f 	dsb	sy
 80173f6:	613b      	str	r3, [r7, #16]
}
 80173f8:	bf00      	nop
 80173fa:	bf00      	nop
 80173fc:	e7fd      	b.n	80173fa <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80173fe:	68fb      	ldr	r3, [r7, #12]
 8017400:	68ba      	ldr	r2, [r7, #8]
 8017402:	fb02 f303 	mul.w	r3, r2, r3
 8017406:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8017408:	69fb      	ldr	r3, [r7, #28]
 801740a:	3350      	adds	r3, #80	@ 0x50
 801740c:	4618      	mov	r0, r3
 801740e:	f001 ff85 	bl	801931c <pvPortMalloc>
 8017412:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8017414:	69bb      	ldr	r3, [r7, #24]
 8017416:	2b00      	cmp	r3, #0
 8017418:	d011      	beq.n	801743e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801741a:	69bb      	ldr	r3, [r7, #24]
 801741c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801741e:	697b      	ldr	r3, [r7, #20]
 8017420:	3350      	adds	r3, #80	@ 0x50
 8017422:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8017424:	69bb      	ldr	r3, [r7, #24]
 8017426:	2200      	movs	r2, #0
 8017428:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801742c:	79fa      	ldrb	r2, [r7, #7]
 801742e:	69bb      	ldr	r3, [r7, #24]
 8017430:	9300      	str	r3, [sp, #0]
 8017432:	4613      	mov	r3, r2
 8017434:	697a      	ldr	r2, [r7, #20]
 8017436:	68b9      	ldr	r1, [r7, #8]
 8017438:	68f8      	ldr	r0, [r7, #12]
 801743a:	f000 f805 	bl	8017448 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801743e:	69bb      	ldr	r3, [r7, #24]
	}
 8017440:	4618      	mov	r0, r3
 8017442:	3720      	adds	r7, #32
 8017444:	46bd      	mov	sp, r7
 8017446:	bd80      	pop	{r7, pc}

08017448 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8017448:	b580      	push	{r7, lr}
 801744a:	b084      	sub	sp, #16
 801744c:	af00      	add	r7, sp, #0
 801744e:	60f8      	str	r0, [r7, #12]
 8017450:	60b9      	str	r1, [r7, #8]
 8017452:	607a      	str	r2, [r7, #4]
 8017454:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8017456:	68bb      	ldr	r3, [r7, #8]
 8017458:	2b00      	cmp	r3, #0
 801745a:	d103      	bne.n	8017464 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801745c:	69bb      	ldr	r3, [r7, #24]
 801745e:	69ba      	ldr	r2, [r7, #24]
 8017460:	601a      	str	r2, [r3, #0]
 8017462:	e002      	b.n	801746a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8017464:	69bb      	ldr	r3, [r7, #24]
 8017466:	687a      	ldr	r2, [r7, #4]
 8017468:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801746a:	69bb      	ldr	r3, [r7, #24]
 801746c:	68fa      	ldr	r2, [r7, #12]
 801746e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8017470:	69bb      	ldr	r3, [r7, #24]
 8017472:	68ba      	ldr	r2, [r7, #8]
 8017474:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8017476:	2101      	movs	r1, #1
 8017478:	69b8      	ldr	r0, [r7, #24]
 801747a:	f7ff fec3 	bl	8017204 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801747e:	69bb      	ldr	r3, [r7, #24]
 8017480:	78fa      	ldrb	r2, [r7, #3]
 8017482:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8017486:	bf00      	nop
 8017488:	3710      	adds	r7, #16
 801748a:	46bd      	mov	sp, r7
 801748c:	bd80      	pop	{r7, pc}

0801748e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801748e:	b580      	push	{r7, lr}
 8017490:	b082      	sub	sp, #8
 8017492:	af00      	add	r7, sp, #0
 8017494:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	2b00      	cmp	r3, #0
 801749a:	d00e      	beq.n	80174ba <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	2200      	movs	r2, #0
 80174a0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	2200      	movs	r2, #0
 80174a6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	2200      	movs	r2, #0
 80174ac:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80174ae:	2300      	movs	r3, #0
 80174b0:	2200      	movs	r2, #0
 80174b2:	2100      	movs	r1, #0
 80174b4:	6878      	ldr	r0, [r7, #4]
 80174b6:	f000 f837 	bl	8017528 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80174ba:	bf00      	nop
 80174bc:	3708      	adds	r7, #8
 80174be:	46bd      	mov	sp, r7
 80174c0:	bd80      	pop	{r7, pc}

080174c2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80174c2:	b580      	push	{r7, lr}
 80174c4:	b086      	sub	sp, #24
 80174c6:	af00      	add	r7, sp, #0
 80174c8:	4603      	mov	r3, r0
 80174ca:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80174cc:	2301      	movs	r3, #1
 80174ce:	617b      	str	r3, [r7, #20]
 80174d0:	2300      	movs	r3, #0
 80174d2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80174d4:	79fb      	ldrb	r3, [r7, #7]
 80174d6:	461a      	mov	r2, r3
 80174d8:	6939      	ldr	r1, [r7, #16]
 80174da:	6978      	ldr	r0, [r7, #20]
 80174dc:	f7ff ff79 	bl	80173d2 <xQueueGenericCreate>
 80174e0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80174e2:	68f8      	ldr	r0, [r7, #12]
 80174e4:	f7ff ffd3 	bl	801748e <prvInitialiseMutex>

		return xNewQueue;
 80174e8:	68fb      	ldr	r3, [r7, #12]
	}
 80174ea:	4618      	mov	r0, r3
 80174ec:	3718      	adds	r7, #24
 80174ee:	46bd      	mov	sp, r7
 80174f0:	bd80      	pop	{r7, pc}

080174f2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80174f2:	b580      	push	{r7, lr}
 80174f4:	b088      	sub	sp, #32
 80174f6:	af02      	add	r7, sp, #8
 80174f8:	4603      	mov	r3, r0
 80174fa:	6039      	str	r1, [r7, #0]
 80174fc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80174fe:	2301      	movs	r3, #1
 8017500:	617b      	str	r3, [r7, #20]
 8017502:	2300      	movs	r3, #0
 8017504:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8017506:	79fb      	ldrb	r3, [r7, #7]
 8017508:	9300      	str	r3, [sp, #0]
 801750a:	683b      	ldr	r3, [r7, #0]
 801750c:	2200      	movs	r2, #0
 801750e:	6939      	ldr	r1, [r7, #16]
 8017510:	6978      	ldr	r0, [r7, #20]
 8017512:	f7ff fee1 	bl	80172d8 <xQueueGenericCreateStatic>
 8017516:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8017518:	68f8      	ldr	r0, [r7, #12]
 801751a:	f7ff ffb8 	bl	801748e <prvInitialiseMutex>

		return xNewQueue;
 801751e:	68fb      	ldr	r3, [r7, #12]
	}
 8017520:	4618      	mov	r0, r3
 8017522:	3718      	adds	r7, #24
 8017524:	46bd      	mov	sp, r7
 8017526:	bd80      	pop	{r7, pc}

08017528 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8017528:	b580      	push	{r7, lr}
 801752a:	b08e      	sub	sp, #56	@ 0x38
 801752c:	af00      	add	r7, sp, #0
 801752e:	60f8      	str	r0, [r7, #12]
 8017530:	60b9      	str	r1, [r7, #8]
 8017532:	607a      	str	r2, [r7, #4]
 8017534:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8017536:	2300      	movs	r3, #0
 8017538:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801753a:	68fb      	ldr	r3, [r7, #12]
 801753c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801753e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017540:	2b00      	cmp	r3, #0
 8017542:	d10b      	bne.n	801755c <xQueueGenericSend+0x34>
	__asm volatile
 8017544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017548:	f383 8811 	msr	BASEPRI, r3
 801754c:	f3bf 8f6f 	isb	sy
 8017550:	f3bf 8f4f 	dsb	sy
 8017554:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8017556:	bf00      	nop
 8017558:	bf00      	nop
 801755a:	e7fd      	b.n	8017558 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801755c:	68bb      	ldr	r3, [r7, #8]
 801755e:	2b00      	cmp	r3, #0
 8017560:	d103      	bne.n	801756a <xQueueGenericSend+0x42>
 8017562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017566:	2b00      	cmp	r3, #0
 8017568:	d101      	bne.n	801756e <xQueueGenericSend+0x46>
 801756a:	2301      	movs	r3, #1
 801756c:	e000      	b.n	8017570 <xQueueGenericSend+0x48>
 801756e:	2300      	movs	r3, #0
 8017570:	2b00      	cmp	r3, #0
 8017572:	d10b      	bne.n	801758c <xQueueGenericSend+0x64>
	__asm volatile
 8017574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017578:	f383 8811 	msr	BASEPRI, r3
 801757c:	f3bf 8f6f 	isb	sy
 8017580:	f3bf 8f4f 	dsb	sy
 8017584:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8017586:	bf00      	nop
 8017588:	bf00      	nop
 801758a:	e7fd      	b.n	8017588 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801758c:	683b      	ldr	r3, [r7, #0]
 801758e:	2b02      	cmp	r3, #2
 8017590:	d103      	bne.n	801759a <xQueueGenericSend+0x72>
 8017592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017596:	2b01      	cmp	r3, #1
 8017598:	d101      	bne.n	801759e <xQueueGenericSend+0x76>
 801759a:	2301      	movs	r3, #1
 801759c:	e000      	b.n	80175a0 <xQueueGenericSend+0x78>
 801759e:	2300      	movs	r3, #0
 80175a0:	2b00      	cmp	r3, #0
 80175a2:	d10b      	bne.n	80175bc <xQueueGenericSend+0x94>
	__asm volatile
 80175a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80175a8:	f383 8811 	msr	BASEPRI, r3
 80175ac:	f3bf 8f6f 	isb	sy
 80175b0:	f3bf 8f4f 	dsb	sy
 80175b4:	623b      	str	r3, [r7, #32]
}
 80175b6:	bf00      	nop
 80175b8:	bf00      	nop
 80175ba:	e7fd      	b.n	80175b8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80175bc:	f001 fa32 	bl	8018a24 <xTaskGetSchedulerState>
 80175c0:	4603      	mov	r3, r0
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	d102      	bne.n	80175cc <xQueueGenericSend+0xa4>
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	d101      	bne.n	80175d0 <xQueueGenericSend+0xa8>
 80175cc:	2301      	movs	r3, #1
 80175ce:	e000      	b.n	80175d2 <xQueueGenericSend+0xaa>
 80175d0:	2300      	movs	r3, #0
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	d10b      	bne.n	80175ee <xQueueGenericSend+0xc6>
	__asm volatile
 80175d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80175da:	f383 8811 	msr	BASEPRI, r3
 80175de:	f3bf 8f6f 	isb	sy
 80175e2:	f3bf 8f4f 	dsb	sy
 80175e6:	61fb      	str	r3, [r7, #28]
}
 80175e8:	bf00      	nop
 80175ea:	bf00      	nop
 80175ec:	e7fd      	b.n	80175ea <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80175ee:	f001 fd73 	bl	80190d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80175f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80175f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80175f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80175f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80175fa:	429a      	cmp	r2, r3
 80175fc:	d302      	bcc.n	8017604 <xQueueGenericSend+0xdc>
 80175fe:	683b      	ldr	r3, [r7, #0]
 8017600:	2b02      	cmp	r3, #2
 8017602:	d129      	bne.n	8017658 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017604:	683a      	ldr	r2, [r7, #0]
 8017606:	68b9      	ldr	r1, [r7, #8]
 8017608:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801760a:	f000 faed 	bl	8017be8 <prvCopyDataToQueue>
 801760e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017614:	2b00      	cmp	r3, #0
 8017616:	d010      	beq.n	801763a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801761a:	3324      	adds	r3, #36	@ 0x24
 801761c:	4618      	mov	r0, r3
 801761e:	f001 f841 	bl	80186a4 <xTaskRemoveFromEventList>
 8017622:	4603      	mov	r3, r0
 8017624:	2b00      	cmp	r3, #0
 8017626:	d013      	beq.n	8017650 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8017628:	4b3f      	ldr	r3, [pc, #252]	@ (8017728 <xQueueGenericSend+0x200>)
 801762a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801762e:	601a      	str	r2, [r3, #0]
 8017630:	f3bf 8f4f 	dsb	sy
 8017634:	f3bf 8f6f 	isb	sy
 8017638:	e00a      	b.n	8017650 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801763a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801763c:	2b00      	cmp	r3, #0
 801763e:	d007      	beq.n	8017650 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8017640:	4b39      	ldr	r3, [pc, #228]	@ (8017728 <xQueueGenericSend+0x200>)
 8017642:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017646:	601a      	str	r2, [r3, #0]
 8017648:	f3bf 8f4f 	dsb	sy
 801764c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8017650:	f001 fd74 	bl	801913c <vPortExitCritical>
				return pdPASS;
 8017654:	2301      	movs	r3, #1
 8017656:	e063      	b.n	8017720 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	2b00      	cmp	r3, #0
 801765c:	d103      	bne.n	8017666 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801765e:	f001 fd6d 	bl	801913c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8017662:	2300      	movs	r3, #0
 8017664:	e05c      	b.n	8017720 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017668:	2b00      	cmp	r3, #0
 801766a:	d106      	bne.n	801767a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801766c:	f107 0314 	add.w	r3, r7, #20
 8017670:	4618      	mov	r0, r3
 8017672:	f001 f87b 	bl	801876c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017676:	2301      	movs	r3, #1
 8017678:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801767a:	f001 fd5f 	bl	801913c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801767e:	f000 fe29 	bl	80182d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017682:	f001 fd29 	bl	80190d8 <vPortEnterCritical>
 8017686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017688:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801768c:	b25b      	sxtb	r3, r3
 801768e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017692:	d103      	bne.n	801769c <xQueueGenericSend+0x174>
 8017694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017696:	2200      	movs	r2, #0
 8017698:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801769c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801769e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80176a2:	b25b      	sxtb	r3, r3
 80176a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80176a8:	d103      	bne.n	80176b2 <xQueueGenericSend+0x18a>
 80176aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80176ac:	2200      	movs	r2, #0
 80176ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80176b2:	f001 fd43 	bl	801913c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80176b6:	1d3a      	adds	r2, r7, #4
 80176b8:	f107 0314 	add.w	r3, r7, #20
 80176bc:	4611      	mov	r1, r2
 80176be:	4618      	mov	r0, r3
 80176c0:	f001 f86a 	bl	8018798 <xTaskCheckForTimeOut>
 80176c4:	4603      	mov	r3, r0
 80176c6:	2b00      	cmp	r3, #0
 80176c8:	d124      	bne.n	8017714 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80176ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80176cc:	f000 fb84 	bl	8017dd8 <prvIsQueueFull>
 80176d0:	4603      	mov	r3, r0
 80176d2:	2b00      	cmp	r3, #0
 80176d4:	d018      	beq.n	8017708 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80176d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80176d8:	3310      	adds	r3, #16
 80176da:	687a      	ldr	r2, [r7, #4]
 80176dc:	4611      	mov	r1, r2
 80176de:	4618      	mov	r0, r3
 80176e0:	f000 ffba 	bl	8018658 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80176e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80176e6:	f000 fb0f 	bl	8017d08 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80176ea:	f000 fe01 	bl	80182f0 <xTaskResumeAll>
 80176ee:	4603      	mov	r3, r0
 80176f0:	2b00      	cmp	r3, #0
 80176f2:	f47f af7c 	bne.w	80175ee <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80176f6:	4b0c      	ldr	r3, [pc, #48]	@ (8017728 <xQueueGenericSend+0x200>)
 80176f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80176fc:	601a      	str	r2, [r3, #0]
 80176fe:	f3bf 8f4f 	dsb	sy
 8017702:	f3bf 8f6f 	isb	sy
 8017706:	e772      	b.n	80175ee <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8017708:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801770a:	f000 fafd 	bl	8017d08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801770e:	f000 fdef 	bl	80182f0 <xTaskResumeAll>
 8017712:	e76c      	b.n	80175ee <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8017714:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017716:	f000 faf7 	bl	8017d08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801771a:	f000 fde9 	bl	80182f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801771e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8017720:	4618      	mov	r0, r3
 8017722:	3738      	adds	r7, #56	@ 0x38
 8017724:	46bd      	mov	sp, r7
 8017726:	bd80      	pop	{r7, pc}
 8017728:	e000ed04 	.word	0xe000ed04

0801772c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801772c:	b580      	push	{r7, lr}
 801772e:	b08e      	sub	sp, #56	@ 0x38
 8017730:	af00      	add	r7, sp, #0
 8017732:	6078      	str	r0, [r7, #4]
 8017734:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017736:	687b      	ldr	r3, [r7, #4]
 8017738:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801773a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801773c:	2b00      	cmp	r3, #0
 801773e:	d10b      	bne.n	8017758 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8017740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017744:	f383 8811 	msr	BASEPRI, r3
 8017748:	f3bf 8f6f 	isb	sy
 801774c:	f3bf 8f4f 	dsb	sy
 8017750:	623b      	str	r3, [r7, #32]
}
 8017752:	bf00      	nop
 8017754:	bf00      	nop
 8017756:	e7fd      	b.n	8017754 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8017758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801775a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801775c:	2b00      	cmp	r3, #0
 801775e:	d00b      	beq.n	8017778 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8017760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017764:	f383 8811 	msr	BASEPRI, r3
 8017768:	f3bf 8f6f 	isb	sy
 801776c:	f3bf 8f4f 	dsb	sy
 8017770:	61fb      	str	r3, [r7, #28]
}
 8017772:	bf00      	nop
 8017774:	bf00      	nop
 8017776:	e7fd      	b.n	8017774 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8017778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801777a:	681b      	ldr	r3, [r3, #0]
 801777c:	2b00      	cmp	r3, #0
 801777e:	d103      	bne.n	8017788 <xQueueGiveFromISR+0x5c>
 8017780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017782:	689b      	ldr	r3, [r3, #8]
 8017784:	2b00      	cmp	r3, #0
 8017786:	d101      	bne.n	801778c <xQueueGiveFromISR+0x60>
 8017788:	2301      	movs	r3, #1
 801778a:	e000      	b.n	801778e <xQueueGiveFromISR+0x62>
 801778c:	2300      	movs	r3, #0
 801778e:	2b00      	cmp	r3, #0
 8017790:	d10b      	bne.n	80177aa <xQueueGiveFromISR+0x7e>
	__asm volatile
 8017792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017796:	f383 8811 	msr	BASEPRI, r3
 801779a:	f3bf 8f6f 	isb	sy
 801779e:	f3bf 8f4f 	dsb	sy
 80177a2:	61bb      	str	r3, [r7, #24]
}
 80177a4:	bf00      	nop
 80177a6:	bf00      	nop
 80177a8:	e7fd      	b.n	80177a6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80177aa:	f001 fd75 	bl	8019298 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80177ae:	f3ef 8211 	mrs	r2, BASEPRI
 80177b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80177b6:	f383 8811 	msr	BASEPRI, r3
 80177ba:	f3bf 8f6f 	isb	sy
 80177be:	f3bf 8f4f 	dsb	sy
 80177c2:	617a      	str	r2, [r7, #20]
 80177c4:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80177c6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80177c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80177ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80177cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80177ce:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80177d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80177d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80177d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80177d6:	429a      	cmp	r2, r3
 80177d8:	d22b      	bcs.n	8017832 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80177da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80177dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80177e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80177e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80177e6:	1c5a      	adds	r2, r3, #1
 80177e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80177ea:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80177ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80177f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80177f4:	d112      	bne.n	801781c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80177f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80177f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80177fa:	2b00      	cmp	r3, #0
 80177fc:	d016      	beq.n	801782c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80177fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017800:	3324      	adds	r3, #36	@ 0x24
 8017802:	4618      	mov	r0, r3
 8017804:	f000 ff4e 	bl	80186a4 <xTaskRemoveFromEventList>
 8017808:	4603      	mov	r3, r0
 801780a:	2b00      	cmp	r3, #0
 801780c:	d00e      	beq.n	801782c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801780e:	683b      	ldr	r3, [r7, #0]
 8017810:	2b00      	cmp	r3, #0
 8017812:	d00b      	beq.n	801782c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8017814:	683b      	ldr	r3, [r7, #0]
 8017816:	2201      	movs	r2, #1
 8017818:	601a      	str	r2, [r3, #0]
 801781a:	e007      	b.n	801782c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801781c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017820:	3301      	adds	r3, #1
 8017822:	b2db      	uxtb	r3, r3
 8017824:	b25a      	sxtb	r2, r3
 8017826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017828:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 801782c:	2301      	movs	r3, #1
 801782e:	637b      	str	r3, [r7, #52]	@ 0x34
 8017830:	e001      	b.n	8017836 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8017832:	2300      	movs	r3, #0
 8017834:	637b      	str	r3, [r7, #52]	@ 0x34
 8017836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017838:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801783a:	68fb      	ldr	r3, [r7, #12]
 801783c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8017840:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017842:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8017844:	4618      	mov	r0, r3
 8017846:	3738      	adds	r7, #56	@ 0x38
 8017848:	46bd      	mov	sp, r7
 801784a:	bd80      	pop	{r7, pc}

0801784c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801784c:	b580      	push	{r7, lr}
 801784e:	b08e      	sub	sp, #56	@ 0x38
 8017850:	af00      	add	r7, sp, #0
 8017852:	6078      	str	r0, [r7, #4]
 8017854:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8017856:	2300      	movs	r3, #0
 8017858:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801785e:	2300      	movs	r3, #0
 8017860:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017864:	2b00      	cmp	r3, #0
 8017866:	d10b      	bne.n	8017880 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8017868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801786c:	f383 8811 	msr	BASEPRI, r3
 8017870:	f3bf 8f6f 	isb	sy
 8017874:	f3bf 8f4f 	dsb	sy
 8017878:	623b      	str	r3, [r7, #32]
}
 801787a:	bf00      	nop
 801787c:	bf00      	nop
 801787e:	e7fd      	b.n	801787c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8017880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017884:	2b00      	cmp	r3, #0
 8017886:	d00b      	beq.n	80178a0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8017888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801788c:	f383 8811 	msr	BASEPRI, r3
 8017890:	f3bf 8f6f 	isb	sy
 8017894:	f3bf 8f4f 	dsb	sy
 8017898:	61fb      	str	r3, [r7, #28]
}
 801789a:	bf00      	nop
 801789c:	bf00      	nop
 801789e:	e7fd      	b.n	801789c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80178a0:	f001 f8c0 	bl	8018a24 <xTaskGetSchedulerState>
 80178a4:	4603      	mov	r3, r0
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	d102      	bne.n	80178b0 <xQueueSemaphoreTake+0x64>
 80178aa:	683b      	ldr	r3, [r7, #0]
 80178ac:	2b00      	cmp	r3, #0
 80178ae:	d101      	bne.n	80178b4 <xQueueSemaphoreTake+0x68>
 80178b0:	2301      	movs	r3, #1
 80178b2:	e000      	b.n	80178b6 <xQueueSemaphoreTake+0x6a>
 80178b4:	2300      	movs	r3, #0
 80178b6:	2b00      	cmp	r3, #0
 80178b8:	d10b      	bne.n	80178d2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80178ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80178be:	f383 8811 	msr	BASEPRI, r3
 80178c2:	f3bf 8f6f 	isb	sy
 80178c6:	f3bf 8f4f 	dsb	sy
 80178ca:	61bb      	str	r3, [r7, #24]
}
 80178cc:	bf00      	nop
 80178ce:	bf00      	nop
 80178d0:	e7fd      	b.n	80178ce <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80178d2:	f001 fc01 	bl	80190d8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80178d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80178d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80178da:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80178dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178de:	2b00      	cmp	r3, #0
 80178e0:	d024      	beq.n	801792c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80178e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178e4:	1e5a      	subs	r2, r3, #1
 80178e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80178e8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80178ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80178ec:	681b      	ldr	r3, [r3, #0]
 80178ee:	2b00      	cmp	r3, #0
 80178f0:	d104      	bne.n	80178fc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80178f2:	f001 fa43 	bl	8018d7c <pvTaskIncrementMutexHeldCount>
 80178f6:	4602      	mov	r2, r0
 80178f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80178fa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80178fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80178fe:	691b      	ldr	r3, [r3, #16]
 8017900:	2b00      	cmp	r3, #0
 8017902:	d00f      	beq.n	8017924 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017906:	3310      	adds	r3, #16
 8017908:	4618      	mov	r0, r3
 801790a:	f000 fecb 	bl	80186a4 <xTaskRemoveFromEventList>
 801790e:	4603      	mov	r3, r0
 8017910:	2b00      	cmp	r3, #0
 8017912:	d007      	beq.n	8017924 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017914:	4b54      	ldr	r3, [pc, #336]	@ (8017a68 <xQueueSemaphoreTake+0x21c>)
 8017916:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801791a:	601a      	str	r2, [r3, #0]
 801791c:	f3bf 8f4f 	dsb	sy
 8017920:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017924:	f001 fc0a 	bl	801913c <vPortExitCritical>
				return pdPASS;
 8017928:	2301      	movs	r3, #1
 801792a:	e098      	b.n	8017a5e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801792c:	683b      	ldr	r3, [r7, #0]
 801792e:	2b00      	cmp	r3, #0
 8017930:	d112      	bne.n	8017958 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8017932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017934:	2b00      	cmp	r3, #0
 8017936:	d00b      	beq.n	8017950 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8017938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801793c:	f383 8811 	msr	BASEPRI, r3
 8017940:	f3bf 8f6f 	isb	sy
 8017944:	f3bf 8f4f 	dsb	sy
 8017948:	617b      	str	r3, [r7, #20]
}
 801794a:	bf00      	nop
 801794c:	bf00      	nop
 801794e:	e7fd      	b.n	801794c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8017950:	f001 fbf4 	bl	801913c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017954:	2300      	movs	r3, #0
 8017956:	e082      	b.n	8017a5e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801795a:	2b00      	cmp	r3, #0
 801795c:	d106      	bne.n	801796c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801795e:	f107 030c 	add.w	r3, r7, #12
 8017962:	4618      	mov	r0, r3
 8017964:	f000 ff02 	bl	801876c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017968:	2301      	movs	r3, #1
 801796a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801796c:	f001 fbe6 	bl	801913c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017970:	f000 fcb0 	bl	80182d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017974:	f001 fbb0 	bl	80190d8 <vPortEnterCritical>
 8017978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801797a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801797e:	b25b      	sxtb	r3, r3
 8017980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017984:	d103      	bne.n	801798e <xQueueSemaphoreTake+0x142>
 8017986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017988:	2200      	movs	r2, #0
 801798a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801798e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017990:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8017994:	b25b      	sxtb	r3, r3
 8017996:	f1b3 3fff 	cmp.w	r3, #4294967295
 801799a:	d103      	bne.n	80179a4 <xQueueSemaphoreTake+0x158>
 801799c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801799e:	2200      	movs	r2, #0
 80179a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80179a4:	f001 fbca 	bl	801913c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80179a8:	463a      	mov	r2, r7
 80179aa:	f107 030c 	add.w	r3, r7, #12
 80179ae:	4611      	mov	r1, r2
 80179b0:	4618      	mov	r0, r3
 80179b2:	f000 fef1 	bl	8018798 <xTaskCheckForTimeOut>
 80179b6:	4603      	mov	r3, r0
 80179b8:	2b00      	cmp	r3, #0
 80179ba:	d132      	bne.n	8017a22 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80179bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80179be:	f000 f9f5 	bl	8017dac <prvIsQueueEmpty>
 80179c2:	4603      	mov	r3, r0
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	d026      	beq.n	8017a16 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80179c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80179ca:	681b      	ldr	r3, [r3, #0]
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	d109      	bne.n	80179e4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80179d0:	f001 fb82 	bl	80190d8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80179d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80179d6:	689b      	ldr	r3, [r3, #8]
 80179d8:	4618      	mov	r0, r3
 80179da:	f001 f841 	bl	8018a60 <xTaskPriorityInherit>
 80179de:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80179e0:	f001 fbac 	bl	801913c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80179e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80179e6:	3324      	adds	r3, #36	@ 0x24
 80179e8:	683a      	ldr	r2, [r7, #0]
 80179ea:	4611      	mov	r1, r2
 80179ec:	4618      	mov	r0, r3
 80179ee:	f000 fe33 	bl	8018658 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80179f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80179f4:	f000 f988 	bl	8017d08 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80179f8:	f000 fc7a 	bl	80182f0 <xTaskResumeAll>
 80179fc:	4603      	mov	r3, r0
 80179fe:	2b00      	cmp	r3, #0
 8017a00:	f47f af67 	bne.w	80178d2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8017a04:	4b18      	ldr	r3, [pc, #96]	@ (8017a68 <xQueueSemaphoreTake+0x21c>)
 8017a06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017a0a:	601a      	str	r2, [r3, #0]
 8017a0c:	f3bf 8f4f 	dsb	sy
 8017a10:	f3bf 8f6f 	isb	sy
 8017a14:	e75d      	b.n	80178d2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8017a16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8017a18:	f000 f976 	bl	8017d08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017a1c:	f000 fc68 	bl	80182f0 <xTaskResumeAll>
 8017a20:	e757      	b.n	80178d2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8017a22:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8017a24:	f000 f970 	bl	8017d08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017a28:	f000 fc62 	bl	80182f0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017a2c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8017a2e:	f000 f9bd 	bl	8017dac <prvIsQueueEmpty>
 8017a32:	4603      	mov	r3, r0
 8017a34:	2b00      	cmp	r3, #0
 8017a36:	f43f af4c 	beq.w	80178d2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8017a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a3c:	2b00      	cmp	r3, #0
 8017a3e:	d00d      	beq.n	8017a5c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8017a40:	f001 fb4a 	bl	80190d8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8017a44:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8017a46:	f000 f8b7 	bl	8017bb8 <prvGetDisinheritPriorityAfterTimeout>
 8017a4a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8017a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017a4e:	689b      	ldr	r3, [r3, #8]
 8017a50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017a52:	4618      	mov	r0, r3
 8017a54:	f001 f902 	bl	8018c5c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8017a58:	f001 fb70 	bl	801913c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017a5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8017a5e:	4618      	mov	r0, r3
 8017a60:	3738      	adds	r7, #56	@ 0x38
 8017a62:	46bd      	mov	sp, r7
 8017a64:	bd80      	pop	{r7, pc}
 8017a66:	bf00      	nop
 8017a68:	e000ed04 	.word	0xe000ed04

08017a6c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8017a6c:	b580      	push	{r7, lr}
 8017a6e:	b08e      	sub	sp, #56	@ 0x38
 8017a70:	af00      	add	r7, sp, #0
 8017a72:	60f8      	str	r0, [r7, #12]
 8017a74:	60b9      	str	r1, [r7, #8]
 8017a76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017a78:	68fb      	ldr	r3, [r7, #12]
 8017a7a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8017a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	d10b      	bne.n	8017a9a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8017a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017a86:	f383 8811 	msr	BASEPRI, r3
 8017a8a:	f3bf 8f6f 	isb	sy
 8017a8e:	f3bf 8f4f 	dsb	sy
 8017a92:	623b      	str	r3, [r7, #32]
}
 8017a94:	bf00      	nop
 8017a96:	bf00      	nop
 8017a98:	e7fd      	b.n	8017a96 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017a9a:	68bb      	ldr	r3, [r7, #8]
 8017a9c:	2b00      	cmp	r3, #0
 8017a9e:	d103      	bne.n	8017aa8 <xQueueReceiveFromISR+0x3c>
 8017aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	d101      	bne.n	8017aac <xQueueReceiveFromISR+0x40>
 8017aa8:	2301      	movs	r3, #1
 8017aaa:	e000      	b.n	8017aae <xQueueReceiveFromISR+0x42>
 8017aac:	2300      	movs	r3, #0
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	d10b      	bne.n	8017aca <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8017ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017ab6:	f383 8811 	msr	BASEPRI, r3
 8017aba:	f3bf 8f6f 	isb	sy
 8017abe:	f3bf 8f4f 	dsb	sy
 8017ac2:	61fb      	str	r3, [r7, #28]
}
 8017ac4:	bf00      	nop
 8017ac6:	bf00      	nop
 8017ac8:	e7fd      	b.n	8017ac6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017aca:	f001 fbe5 	bl	8019298 <vPortValidateInterruptPriority>
	__asm volatile
 8017ace:	f3ef 8211 	mrs	r2, BASEPRI
 8017ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017ad6:	f383 8811 	msr	BASEPRI, r3
 8017ada:	f3bf 8f6f 	isb	sy
 8017ade:	f3bf 8f4f 	dsb	sy
 8017ae2:	61ba      	str	r2, [r7, #24]
 8017ae4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8017ae6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017aee:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017af2:	2b00      	cmp	r3, #0
 8017af4:	d02f      	beq.n	8017b56 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8017af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017af8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8017afc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017b00:	68b9      	ldr	r1, [r7, #8]
 8017b02:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017b04:	f000 f8da 	bl	8017cbc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b0a:	1e5a      	subs	r2, r3, #1
 8017b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b0e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8017b10:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8017b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017b18:	d112      	bne.n	8017b40 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b1c:	691b      	ldr	r3, [r3, #16]
 8017b1e:	2b00      	cmp	r3, #0
 8017b20:	d016      	beq.n	8017b50 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b24:	3310      	adds	r3, #16
 8017b26:	4618      	mov	r0, r3
 8017b28:	f000 fdbc 	bl	80186a4 <xTaskRemoveFromEventList>
 8017b2c:	4603      	mov	r3, r0
 8017b2e:	2b00      	cmp	r3, #0
 8017b30:	d00e      	beq.n	8017b50 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8017b32:	687b      	ldr	r3, [r7, #4]
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	d00b      	beq.n	8017b50 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	2201      	movs	r2, #1
 8017b3c:	601a      	str	r2, [r3, #0]
 8017b3e:	e007      	b.n	8017b50 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8017b40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017b44:	3301      	adds	r3, #1
 8017b46:	b2db      	uxtb	r3, r3
 8017b48:	b25a      	sxtb	r2, r3
 8017b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8017b50:	2301      	movs	r3, #1
 8017b52:	637b      	str	r3, [r7, #52]	@ 0x34
 8017b54:	e001      	b.n	8017b5a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8017b56:	2300      	movs	r3, #0
 8017b58:	637b      	str	r3, [r7, #52]	@ 0x34
 8017b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017b5c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8017b5e:	693b      	ldr	r3, [r7, #16]
 8017b60:	f383 8811 	msr	BASEPRI, r3
}
 8017b64:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017b66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8017b68:	4618      	mov	r0, r3
 8017b6a:	3738      	adds	r7, #56	@ 0x38
 8017b6c:	46bd      	mov	sp, r7
 8017b6e:	bd80      	pop	{r7, pc}

08017b70 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8017b70:	b580      	push	{r7, lr}
 8017b72:	b084      	sub	sp, #16
 8017b74:	af00      	add	r7, sp, #0
 8017b76:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8017b7c:	68fb      	ldr	r3, [r7, #12]
 8017b7e:	2b00      	cmp	r3, #0
 8017b80:	d10b      	bne.n	8017b9a <vQueueDelete+0x2a>
	__asm volatile
 8017b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017b86:	f383 8811 	msr	BASEPRI, r3
 8017b8a:	f3bf 8f6f 	isb	sy
 8017b8e:	f3bf 8f4f 	dsb	sy
 8017b92:	60bb      	str	r3, [r7, #8]
}
 8017b94:	bf00      	nop
 8017b96:	bf00      	nop
 8017b98:	e7fd      	b.n	8017b96 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8017b9a:	68f8      	ldr	r0, [r7, #12]
 8017b9c:	f000 f934 	bl	8017e08 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8017ba0:	68fb      	ldr	r3, [r7, #12]
 8017ba2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d102      	bne.n	8017bb0 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8017baa:	68f8      	ldr	r0, [r7, #12]
 8017bac:	f001 fc84 	bl	80194b8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8017bb0:	bf00      	nop
 8017bb2:	3710      	adds	r7, #16
 8017bb4:	46bd      	mov	sp, r7
 8017bb6:	bd80      	pop	{r7, pc}

08017bb8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8017bb8:	b480      	push	{r7}
 8017bba:	b085      	sub	sp, #20
 8017bbc:	af00      	add	r7, sp, #0
 8017bbe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8017bc0:	687b      	ldr	r3, [r7, #4]
 8017bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d006      	beq.n	8017bd6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8017bc8:	687b      	ldr	r3, [r7, #4]
 8017bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017bcc:	681b      	ldr	r3, [r3, #0]
 8017bce:	f1c3 0307 	rsb	r3, r3, #7
 8017bd2:	60fb      	str	r3, [r7, #12]
 8017bd4:	e001      	b.n	8017bda <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8017bd6:	2300      	movs	r3, #0
 8017bd8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8017bda:	68fb      	ldr	r3, [r7, #12]
	}
 8017bdc:	4618      	mov	r0, r3
 8017bde:	3714      	adds	r7, #20
 8017be0:	46bd      	mov	sp, r7
 8017be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017be6:	4770      	bx	lr

08017be8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8017be8:	b580      	push	{r7, lr}
 8017bea:	b086      	sub	sp, #24
 8017bec:	af00      	add	r7, sp, #0
 8017bee:	60f8      	str	r0, [r7, #12]
 8017bf0:	60b9      	str	r1, [r7, #8]
 8017bf2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8017bf4:	2300      	movs	r3, #0
 8017bf6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017bf8:	68fb      	ldr	r3, [r7, #12]
 8017bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017bfc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8017bfe:	68fb      	ldr	r3, [r7, #12]
 8017c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017c02:	2b00      	cmp	r3, #0
 8017c04:	d10d      	bne.n	8017c22 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017c06:	68fb      	ldr	r3, [r7, #12]
 8017c08:	681b      	ldr	r3, [r3, #0]
 8017c0a:	2b00      	cmp	r3, #0
 8017c0c:	d14d      	bne.n	8017caa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017c0e:	68fb      	ldr	r3, [r7, #12]
 8017c10:	689b      	ldr	r3, [r3, #8]
 8017c12:	4618      	mov	r0, r3
 8017c14:	f000 ff9a 	bl	8018b4c <xTaskPriorityDisinherit>
 8017c18:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8017c1a:	68fb      	ldr	r3, [r7, #12]
 8017c1c:	2200      	movs	r2, #0
 8017c1e:	609a      	str	r2, [r3, #8]
 8017c20:	e043      	b.n	8017caa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	2b00      	cmp	r3, #0
 8017c26:	d119      	bne.n	8017c5c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017c28:	68fb      	ldr	r3, [r7, #12]
 8017c2a:	6858      	ldr	r0, [r3, #4]
 8017c2c:	68fb      	ldr	r3, [r7, #12]
 8017c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017c30:	461a      	mov	r2, r3
 8017c32:	68b9      	ldr	r1, [r7, #8]
 8017c34:	f001 fd92 	bl	801975c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017c38:	68fb      	ldr	r3, [r7, #12]
 8017c3a:	685a      	ldr	r2, [r3, #4]
 8017c3c:	68fb      	ldr	r3, [r7, #12]
 8017c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017c40:	441a      	add	r2, r3
 8017c42:	68fb      	ldr	r3, [r7, #12]
 8017c44:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017c46:	68fb      	ldr	r3, [r7, #12]
 8017c48:	685a      	ldr	r2, [r3, #4]
 8017c4a:	68fb      	ldr	r3, [r7, #12]
 8017c4c:	689b      	ldr	r3, [r3, #8]
 8017c4e:	429a      	cmp	r2, r3
 8017c50:	d32b      	bcc.n	8017caa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8017c52:	68fb      	ldr	r3, [r7, #12]
 8017c54:	681a      	ldr	r2, [r3, #0]
 8017c56:	68fb      	ldr	r3, [r7, #12]
 8017c58:	605a      	str	r2, [r3, #4]
 8017c5a:	e026      	b.n	8017caa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8017c5c:	68fb      	ldr	r3, [r7, #12]
 8017c5e:	68d8      	ldr	r0, [r3, #12]
 8017c60:	68fb      	ldr	r3, [r7, #12]
 8017c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017c64:	461a      	mov	r2, r3
 8017c66:	68b9      	ldr	r1, [r7, #8]
 8017c68:	f001 fd78 	bl	801975c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8017c6c:	68fb      	ldr	r3, [r7, #12]
 8017c6e:	68da      	ldr	r2, [r3, #12]
 8017c70:	68fb      	ldr	r3, [r7, #12]
 8017c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017c74:	425b      	negs	r3, r3
 8017c76:	441a      	add	r2, r3
 8017c78:	68fb      	ldr	r3, [r7, #12]
 8017c7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017c7c:	68fb      	ldr	r3, [r7, #12]
 8017c7e:	68da      	ldr	r2, [r3, #12]
 8017c80:	68fb      	ldr	r3, [r7, #12]
 8017c82:	681b      	ldr	r3, [r3, #0]
 8017c84:	429a      	cmp	r2, r3
 8017c86:	d207      	bcs.n	8017c98 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8017c88:	68fb      	ldr	r3, [r7, #12]
 8017c8a:	689a      	ldr	r2, [r3, #8]
 8017c8c:	68fb      	ldr	r3, [r7, #12]
 8017c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017c90:	425b      	negs	r3, r3
 8017c92:	441a      	add	r2, r3
 8017c94:	68fb      	ldr	r3, [r7, #12]
 8017c96:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	2b02      	cmp	r3, #2
 8017c9c:	d105      	bne.n	8017caa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017c9e:	693b      	ldr	r3, [r7, #16]
 8017ca0:	2b00      	cmp	r3, #0
 8017ca2:	d002      	beq.n	8017caa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8017ca4:	693b      	ldr	r3, [r7, #16]
 8017ca6:	3b01      	subs	r3, #1
 8017ca8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017caa:	693b      	ldr	r3, [r7, #16]
 8017cac:	1c5a      	adds	r2, r3, #1
 8017cae:	68fb      	ldr	r3, [r7, #12]
 8017cb0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8017cb2:	697b      	ldr	r3, [r7, #20]
}
 8017cb4:	4618      	mov	r0, r3
 8017cb6:	3718      	adds	r7, #24
 8017cb8:	46bd      	mov	sp, r7
 8017cba:	bd80      	pop	{r7, pc}

08017cbc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8017cbc:	b580      	push	{r7, lr}
 8017cbe:	b082      	sub	sp, #8
 8017cc0:	af00      	add	r7, sp, #0
 8017cc2:	6078      	str	r0, [r7, #4]
 8017cc4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8017cc6:	687b      	ldr	r3, [r7, #4]
 8017cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017cca:	2b00      	cmp	r3, #0
 8017ccc:	d018      	beq.n	8017d00 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	68da      	ldr	r2, [r3, #12]
 8017cd2:	687b      	ldr	r3, [r7, #4]
 8017cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017cd6:	441a      	add	r2, r3
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	68da      	ldr	r2, [r3, #12]
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	689b      	ldr	r3, [r3, #8]
 8017ce4:	429a      	cmp	r2, r3
 8017ce6:	d303      	bcc.n	8017cf0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8017ce8:	687b      	ldr	r3, [r7, #4]
 8017cea:	681a      	ldr	r2, [r3, #0]
 8017cec:	687b      	ldr	r3, [r7, #4]
 8017cee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	68d9      	ldr	r1, [r3, #12]
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017cf8:	461a      	mov	r2, r3
 8017cfa:	6838      	ldr	r0, [r7, #0]
 8017cfc:	f001 fd2e 	bl	801975c <memcpy>
	}
}
 8017d00:	bf00      	nop
 8017d02:	3708      	adds	r7, #8
 8017d04:	46bd      	mov	sp, r7
 8017d06:	bd80      	pop	{r7, pc}

08017d08 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8017d08:	b580      	push	{r7, lr}
 8017d0a:	b084      	sub	sp, #16
 8017d0c:	af00      	add	r7, sp, #0
 8017d0e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8017d10:	f001 f9e2 	bl	80190d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8017d1a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017d1c:	e011      	b.n	8017d42 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017d22:	2b00      	cmp	r3, #0
 8017d24:	d012      	beq.n	8017d4c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017d26:	687b      	ldr	r3, [r7, #4]
 8017d28:	3324      	adds	r3, #36	@ 0x24
 8017d2a:	4618      	mov	r0, r3
 8017d2c:	f000 fcba 	bl	80186a4 <xTaskRemoveFromEventList>
 8017d30:	4603      	mov	r3, r0
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	d001      	beq.n	8017d3a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8017d36:	f000 fd93 	bl	8018860 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8017d3a:	7bfb      	ldrb	r3, [r7, #15]
 8017d3c:	3b01      	subs	r3, #1
 8017d3e:	b2db      	uxtb	r3, r3
 8017d40:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	dce9      	bgt.n	8017d1e <prvUnlockQueue+0x16>
 8017d4a:	e000      	b.n	8017d4e <prvUnlockQueue+0x46>
					break;
 8017d4c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	22ff      	movs	r2, #255	@ 0xff
 8017d52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8017d56:	f001 f9f1 	bl	801913c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8017d5a:	f001 f9bd 	bl	80190d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8017d64:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017d66:	e011      	b.n	8017d8c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017d68:	687b      	ldr	r3, [r7, #4]
 8017d6a:	691b      	ldr	r3, [r3, #16]
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	d012      	beq.n	8017d96 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	3310      	adds	r3, #16
 8017d74:	4618      	mov	r0, r3
 8017d76:	f000 fc95 	bl	80186a4 <xTaskRemoveFromEventList>
 8017d7a:	4603      	mov	r3, r0
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	d001      	beq.n	8017d84 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8017d80:	f000 fd6e 	bl	8018860 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8017d84:	7bbb      	ldrb	r3, [r7, #14]
 8017d86:	3b01      	subs	r3, #1
 8017d88:	b2db      	uxtb	r3, r3
 8017d8a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017d8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017d90:	2b00      	cmp	r3, #0
 8017d92:	dce9      	bgt.n	8017d68 <prvUnlockQueue+0x60>
 8017d94:	e000      	b.n	8017d98 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8017d96:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8017d98:	687b      	ldr	r3, [r7, #4]
 8017d9a:	22ff      	movs	r2, #255	@ 0xff
 8017d9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8017da0:	f001 f9cc 	bl	801913c <vPortExitCritical>
}
 8017da4:	bf00      	nop
 8017da6:	3710      	adds	r7, #16
 8017da8:	46bd      	mov	sp, r7
 8017daa:	bd80      	pop	{r7, pc}

08017dac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8017dac:	b580      	push	{r7, lr}
 8017dae:	b084      	sub	sp, #16
 8017db0:	af00      	add	r7, sp, #0
 8017db2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017db4:	f001 f990 	bl	80190d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017dbc:	2b00      	cmp	r3, #0
 8017dbe:	d102      	bne.n	8017dc6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8017dc0:	2301      	movs	r3, #1
 8017dc2:	60fb      	str	r3, [r7, #12]
 8017dc4:	e001      	b.n	8017dca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8017dc6:	2300      	movs	r3, #0
 8017dc8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017dca:	f001 f9b7 	bl	801913c <vPortExitCritical>

	return xReturn;
 8017dce:	68fb      	ldr	r3, [r7, #12]
}
 8017dd0:	4618      	mov	r0, r3
 8017dd2:	3710      	adds	r7, #16
 8017dd4:	46bd      	mov	sp, r7
 8017dd6:	bd80      	pop	{r7, pc}

08017dd8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8017dd8:	b580      	push	{r7, lr}
 8017dda:	b084      	sub	sp, #16
 8017ddc:	af00      	add	r7, sp, #0
 8017dde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017de0:	f001 f97a 	bl	80190d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017de8:	687b      	ldr	r3, [r7, #4]
 8017dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017dec:	429a      	cmp	r2, r3
 8017dee:	d102      	bne.n	8017df6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8017df0:	2301      	movs	r3, #1
 8017df2:	60fb      	str	r3, [r7, #12]
 8017df4:	e001      	b.n	8017dfa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8017df6:	2300      	movs	r3, #0
 8017df8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017dfa:	f001 f99f 	bl	801913c <vPortExitCritical>

	return xReturn;
 8017dfe:	68fb      	ldr	r3, [r7, #12]
}
 8017e00:	4618      	mov	r0, r3
 8017e02:	3710      	adds	r7, #16
 8017e04:	46bd      	mov	sp, r7
 8017e06:	bd80      	pop	{r7, pc}

08017e08 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8017e08:	b480      	push	{r7}
 8017e0a:	b085      	sub	sp, #20
 8017e0c:	af00      	add	r7, sp, #0
 8017e0e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017e10:	2300      	movs	r3, #0
 8017e12:	60fb      	str	r3, [r7, #12]
 8017e14:	e016      	b.n	8017e44 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8017e16:	4a10      	ldr	r2, [pc, #64]	@ (8017e58 <vQueueUnregisterQueue+0x50>)
 8017e18:	68fb      	ldr	r3, [r7, #12]
 8017e1a:	00db      	lsls	r3, r3, #3
 8017e1c:	4413      	add	r3, r2
 8017e1e:	685b      	ldr	r3, [r3, #4]
 8017e20:	687a      	ldr	r2, [r7, #4]
 8017e22:	429a      	cmp	r2, r3
 8017e24:	d10b      	bne.n	8017e3e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8017e26:	4a0c      	ldr	r2, [pc, #48]	@ (8017e58 <vQueueUnregisterQueue+0x50>)
 8017e28:	68fb      	ldr	r3, [r7, #12]
 8017e2a:	2100      	movs	r1, #0
 8017e2c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8017e30:	4a09      	ldr	r2, [pc, #36]	@ (8017e58 <vQueueUnregisterQueue+0x50>)
 8017e32:	68fb      	ldr	r3, [r7, #12]
 8017e34:	00db      	lsls	r3, r3, #3
 8017e36:	4413      	add	r3, r2
 8017e38:	2200      	movs	r2, #0
 8017e3a:	605a      	str	r2, [r3, #4]
				break;
 8017e3c:	e006      	b.n	8017e4c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017e3e:	68fb      	ldr	r3, [r7, #12]
 8017e40:	3301      	adds	r3, #1
 8017e42:	60fb      	str	r3, [r7, #12]
 8017e44:	68fb      	ldr	r3, [r7, #12]
 8017e46:	2b07      	cmp	r3, #7
 8017e48:	d9e5      	bls.n	8017e16 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8017e4a:	bf00      	nop
 8017e4c:	bf00      	nop
 8017e4e:	3714      	adds	r7, #20
 8017e50:	46bd      	mov	sp, r7
 8017e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e56:	4770      	bx	lr
 8017e58:	24002dec 	.word	0x24002dec

08017e5c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8017e5c:	b580      	push	{r7, lr}
 8017e5e:	b08e      	sub	sp, #56	@ 0x38
 8017e60:	af04      	add	r7, sp, #16
 8017e62:	60f8      	str	r0, [r7, #12]
 8017e64:	60b9      	str	r1, [r7, #8]
 8017e66:	607a      	str	r2, [r7, #4]
 8017e68:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8017e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017e6c:	2b00      	cmp	r3, #0
 8017e6e:	d10b      	bne.n	8017e88 <xTaskCreateStatic+0x2c>
	__asm volatile
 8017e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017e74:	f383 8811 	msr	BASEPRI, r3
 8017e78:	f3bf 8f6f 	isb	sy
 8017e7c:	f3bf 8f4f 	dsb	sy
 8017e80:	623b      	str	r3, [r7, #32]
}
 8017e82:	bf00      	nop
 8017e84:	bf00      	nop
 8017e86:	e7fd      	b.n	8017e84 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8017e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	d10b      	bne.n	8017ea6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8017e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017e92:	f383 8811 	msr	BASEPRI, r3
 8017e96:	f3bf 8f6f 	isb	sy
 8017e9a:	f3bf 8f4f 	dsb	sy
 8017e9e:	61fb      	str	r3, [r7, #28]
}
 8017ea0:	bf00      	nop
 8017ea2:	bf00      	nop
 8017ea4:	e7fd      	b.n	8017ea2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8017ea6:	235c      	movs	r3, #92	@ 0x5c
 8017ea8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8017eaa:	693b      	ldr	r3, [r7, #16]
 8017eac:	2b5c      	cmp	r3, #92	@ 0x5c
 8017eae:	d00b      	beq.n	8017ec8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8017eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017eb4:	f383 8811 	msr	BASEPRI, r3
 8017eb8:	f3bf 8f6f 	isb	sy
 8017ebc:	f3bf 8f4f 	dsb	sy
 8017ec0:	61bb      	str	r3, [r7, #24]
}
 8017ec2:	bf00      	nop
 8017ec4:	bf00      	nop
 8017ec6:	e7fd      	b.n	8017ec4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8017ec8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8017eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017ecc:	2b00      	cmp	r3, #0
 8017ece:	d01e      	beq.n	8017f0e <xTaskCreateStatic+0xb2>
 8017ed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017ed2:	2b00      	cmp	r3, #0
 8017ed4:	d01b      	beq.n	8017f0e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017ed8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8017eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017edc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017ede:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8017ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ee2:	2202      	movs	r2, #2
 8017ee4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8017ee8:	2300      	movs	r3, #0
 8017eea:	9303      	str	r3, [sp, #12]
 8017eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017eee:	9302      	str	r3, [sp, #8]
 8017ef0:	f107 0314 	add.w	r3, r7, #20
 8017ef4:	9301      	str	r3, [sp, #4]
 8017ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ef8:	9300      	str	r3, [sp, #0]
 8017efa:	683b      	ldr	r3, [r7, #0]
 8017efc:	687a      	ldr	r2, [r7, #4]
 8017efe:	68b9      	ldr	r1, [r7, #8]
 8017f00:	68f8      	ldr	r0, [r7, #12]
 8017f02:	f000 f850 	bl	8017fa6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017f06:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017f08:	f000 f8de 	bl	80180c8 <prvAddNewTaskToReadyList>
 8017f0c:	e001      	b.n	8017f12 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8017f0e:	2300      	movs	r3, #0
 8017f10:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8017f12:	697b      	ldr	r3, [r7, #20]
	}
 8017f14:	4618      	mov	r0, r3
 8017f16:	3728      	adds	r7, #40	@ 0x28
 8017f18:	46bd      	mov	sp, r7
 8017f1a:	bd80      	pop	{r7, pc}

08017f1c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8017f1c:	b580      	push	{r7, lr}
 8017f1e:	b08c      	sub	sp, #48	@ 0x30
 8017f20:	af04      	add	r7, sp, #16
 8017f22:	60f8      	str	r0, [r7, #12]
 8017f24:	60b9      	str	r1, [r7, #8]
 8017f26:	603b      	str	r3, [r7, #0]
 8017f28:	4613      	mov	r3, r2
 8017f2a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8017f2c:	88fb      	ldrh	r3, [r7, #6]
 8017f2e:	009b      	lsls	r3, r3, #2
 8017f30:	4618      	mov	r0, r3
 8017f32:	f001 f9f3 	bl	801931c <pvPortMalloc>
 8017f36:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8017f38:	697b      	ldr	r3, [r7, #20]
 8017f3a:	2b00      	cmp	r3, #0
 8017f3c:	d00e      	beq.n	8017f5c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8017f3e:	205c      	movs	r0, #92	@ 0x5c
 8017f40:	f001 f9ec 	bl	801931c <pvPortMalloc>
 8017f44:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8017f46:	69fb      	ldr	r3, [r7, #28]
 8017f48:	2b00      	cmp	r3, #0
 8017f4a:	d003      	beq.n	8017f54 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8017f4c:	69fb      	ldr	r3, [r7, #28]
 8017f4e:	697a      	ldr	r2, [r7, #20]
 8017f50:	631a      	str	r2, [r3, #48]	@ 0x30
 8017f52:	e005      	b.n	8017f60 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8017f54:	6978      	ldr	r0, [r7, #20]
 8017f56:	f001 faaf 	bl	80194b8 <vPortFree>
 8017f5a:	e001      	b.n	8017f60 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8017f5c:	2300      	movs	r3, #0
 8017f5e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8017f60:	69fb      	ldr	r3, [r7, #28]
 8017f62:	2b00      	cmp	r3, #0
 8017f64:	d017      	beq.n	8017f96 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8017f66:	69fb      	ldr	r3, [r7, #28]
 8017f68:	2200      	movs	r2, #0
 8017f6a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8017f6e:	88fa      	ldrh	r2, [r7, #6]
 8017f70:	2300      	movs	r3, #0
 8017f72:	9303      	str	r3, [sp, #12]
 8017f74:	69fb      	ldr	r3, [r7, #28]
 8017f76:	9302      	str	r3, [sp, #8]
 8017f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f7a:	9301      	str	r3, [sp, #4]
 8017f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f7e:	9300      	str	r3, [sp, #0]
 8017f80:	683b      	ldr	r3, [r7, #0]
 8017f82:	68b9      	ldr	r1, [r7, #8]
 8017f84:	68f8      	ldr	r0, [r7, #12]
 8017f86:	f000 f80e 	bl	8017fa6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017f8a:	69f8      	ldr	r0, [r7, #28]
 8017f8c:	f000 f89c 	bl	80180c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8017f90:	2301      	movs	r3, #1
 8017f92:	61bb      	str	r3, [r7, #24]
 8017f94:	e002      	b.n	8017f9c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8017f96:	f04f 33ff 	mov.w	r3, #4294967295
 8017f9a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8017f9c:	69bb      	ldr	r3, [r7, #24]
	}
 8017f9e:	4618      	mov	r0, r3
 8017fa0:	3720      	adds	r7, #32
 8017fa2:	46bd      	mov	sp, r7
 8017fa4:	bd80      	pop	{r7, pc}

08017fa6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8017fa6:	b580      	push	{r7, lr}
 8017fa8:	b088      	sub	sp, #32
 8017faa:	af00      	add	r7, sp, #0
 8017fac:	60f8      	str	r0, [r7, #12]
 8017fae:	60b9      	str	r1, [r7, #8]
 8017fb0:	607a      	str	r2, [r7, #4]
 8017fb2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8017fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017fb6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	009b      	lsls	r3, r3, #2
 8017fbc:	461a      	mov	r2, r3
 8017fbe:	21a5      	movs	r1, #165	@ 0xa5
 8017fc0:	f001 fb9a 	bl	80196f8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8017fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017fc6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8017fc8:	6879      	ldr	r1, [r7, #4]
 8017fca:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8017fce:	440b      	add	r3, r1
 8017fd0:	009b      	lsls	r3, r3, #2
 8017fd2:	4413      	add	r3, r2
 8017fd4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8017fd6:	69bb      	ldr	r3, [r7, #24]
 8017fd8:	f023 0307 	bic.w	r3, r3, #7
 8017fdc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8017fde:	69bb      	ldr	r3, [r7, #24]
 8017fe0:	f003 0307 	and.w	r3, r3, #7
 8017fe4:	2b00      	cmp	r3, #0
 8017fe6:	d00b      	beq.n	8018000 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8017fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017fec:	f383 8811 	msr	BASEPRI, r3
 8017ff0:	f3bf 8f6f 	isb	sy
 8017ff4:	f3bf 8f4f 	dsb	sy
 8017ff8:	617b      	str	r3, [r7, #20]
}
 8017ffa:	bf00      	nop
 8017ffc:	bf00      	nop
 8017ffe:	e7fd      	b.n	8017ffc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8018000:	68bb      	ldr	r3, [r7, #8]
 8018002:	2b00      	cmp	r3, #0
 8018004:	d01f      	beq.n	8018046 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8018006:	2300      	movs	r3, #0
 8018008:	61fb      	str	r3, [r7, #28]
 801800a:	e012      	b.n	8018032 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801800c:	68ba      	ldr	r2, [r7, #8]
 801800e:	69fb      	ldr	r3, [r7, #28]
 8018010:	4413      	add	r3, r2
 8018012:	7819      	ldrb	r1, [r3, #0]
 8018014:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018016:	69fb      	ldr	r3, [r7, #28]
 8018018:	4413      	add	r3, r2
 801801a:	3334      	adds	r3, #52	@ 0x34
 801801c:	460a      	mov	r2, r1
 801801e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8018020:	68ba      	ldr	r2, [r7, #8]
 8018022:	69fb      	ldr	r3, [r7, #28]
 8018024:	4413      	add	r3, r2
 8018026:	781b      	ldrb	r3, [r3, #0]
 8018028:	2b00      	cmp	r3, #0
 801802a:	d006      	beq.n	801803a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801802c:	69fb      	ldr	r3, [r7, #28]
 801802e:	3301      	adds	r3, #1
 8018030:	61fb      	str	r3, [r7, #28]
 8018032:	69fb      	ldr	r3, [r7, #28]
 8018034:	2b0f      	cmp	r3, #15
 8018036:	d9e9      	bls.n	801800c <prvInitialiseNewTask+0x66>
 8018038:	e000      	b.n	801803c <prvInitialiseNewTask+0x96>
			{
				break;
 801803a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801803c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801803e:	2200      	movs	r2, #0
 8018040:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8018044:	e003      	b.n	801804e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8018046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018048:	2200      	movs	r2, #0
 801804a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801804e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018050:	2b06      	cmp	r3, #6
 8018052:	d901      	bls.n	8018058 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8018054:	2306      	movs	r3, #6
 8018056:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8018058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801805a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801805c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801805e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018060:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018062:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8018064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018066:	2200      	movs	r2, #0
 8018068:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801806a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801806c:	3304      	adds	r3, #4
 801806e:	4618      	mov	r0, r3
 8018070:	f7ff f833 	bl	80170da <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8018074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018076:	3318      	adds	r3, #24
 8018078:	4618      	mov	r0, r3
 801807a:	f7ff f82e 	bl	80170da <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801807e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018080:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018082:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018086:	f1c3 0207 	rsb	r2, r3, #7
 801808a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801808c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801808e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018090:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018092:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8018094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018096:	2200      	movs	r2, #0
 8018098:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801809a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801809c:	2200      	movs	r2, #0
 801809e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80180a2:	683a      	ldr	r2, [r7, #0]
 80180a4:	68f9      	ldr	r1, [r7, #12]
 80180a6:	69b8      	ldr	r0, [r7, #24]
 80180a8:	f000 fee2 	bl	8018e70 <pxPortInitialiseStack>
 80180ac:	4602      	mov	r2, r0
 80180ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80180b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80180b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80180b4:	2b00      	cmp	r3, #0
 80180b6:	d002      	beq.n	80180be <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80180b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80180ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80180bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80180be:	bf00      	nop
 80180c0:	3720      	adds	r7, #32
 80180c2:	46bd      	mov	sp, r7
 80180c4:	bd80      	pop	{r7, pc}
	...

080180c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80180c8:	b580      	push	{r7, lr}
 80180ca:	b082      	sub	sp, #8
 80180cc:	af00      	add	r7, sp, #0
 80180ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80180d0:	f001 f802 	bl	80190d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80180d4:	4b2c      	ldr	r3, [pc, #176]	@ (8018188 <prvAddNewTaskToReadyList+0xc0>)
 80180d6:	681b      	ldr	r3, [r3, #0]
 80180d8:	3301      	adds	r3, #1
 80180da:	4a2b      	ldr	r2, [pc, #172]	@ (8018188 <prvAddNewTaskToReadyList+0xc0>)
 80180dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80180de:	4b2b      	ldr	r3, [pc, #172]	@ (801818c <prvAddNewTaskToReadyList+0xc4>)
 80180e0:	681b      	ldr	r3, [r3, #0]
 80180e2:	2b00      	cmp	r3, #0
 80180e4:	d109      	bne.n	80180fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80180e6:	4a29      	ldr	r2, [pc, #164]	@ (801818c <prvAddNewTaskToReadyList+0xc4>)
 80180e8:	687b      	ldr	r3, [r7, #4]
 80180ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80180ec:	4b26      	ldr	r3, [pc, #152]	@ (8018188 <prvAddNewTaskToReadyList+0xc0>)
 80180ee:	681b      	ldr	r3, [r3, #0]
 80180f0:	2b01      	cmp	r3, #1
 80180f2:	d110      	bne.n	8018116 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80180f4:	f000 fbd8 	bl	80188a8 <prvInitialiseTaskLists>
 80180f8:	e00d      	b.n	8018116 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80180fa:	4b25      	ldr	r3, [pc, #148]	@ (8018190 <prvAddNewTaskToReadyList+0xc8>)
 80180fc:	681b      	ldr	r3, [r3, #0]
 80180fe:	2b00      	cmp	r3, #0
 8018100:	d109      	bne.n	8018116 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8018102:	4b22      	ldr	r3, [pc, #136]	@ (801818c <prvAddNewTaskToReadyList+0xc4>)
 8018104:	681b      	ldr	r3, [r3, #0]
 8018106:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801810c:	429a      	cmp	r2, r3
 801810e:	d802      	bhi.n	8018116 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8018110:	4a1e      	ldr	r2, [pc, #120]	@ (801818c <prvAddNewTaskToReadyList+0xc4>)
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8018116:	4b1f      	ldr	r3, [pc, #124]	@ (8018194 <prvAddNewTaskToReadyList+0xcc>)
 8018118:	681b      	ldr	r3, [r3, #0]
 801811a:	3301      	adds	r3, #1
 801811c:	4a1d      	ldr	r2, [pc, #116]	@ (8018194 <prvAddNewTaskToReadyList+0xcc>)
 801811e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8018120:	4b1c      	ldr	r3, [pc, #112]	@ (8018194 <prvAddNewTaskToReadyList+0xcc>)
 8018122:	681a      	ldr	r2, [r3, #0]
 8018124:	687b      	ldr	r3, [r7, #4]
 8018126:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801812c:	2201      	movs	r2, #1
 801812e:	409a      	lsls	r2, r3
 8018130:	4b19      	ldr	r3, [pc, #100]	@ (8018198 <prvAddNewTaskToReadyList+0xd0>)
 8018132:	681b      	ldr	r3, [r3, #0]
 8018134:	4313      	orrs	r3, r2
 8018136:	4a18      	ldr	r2, [pc, #96]	@ (8018198 <prvAddNewTaskToReadyList+0xd0>)
 8018138:	6013      	str	r3, [r2, #0]
 801813a:	687b      	ldr	r3, [r7, #4]
 801813c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801813e:	4613      	mov	r3, r2
 8018140:	009b      	lsls	r3, r3, #2
 8018142:	4413      	add	r3, r2
 8018144:	009b      	lsls	r3, r3, #2
 8018146:	4a15      	ldr	r2, [pc, #84]	@ (801819c <prvAddNewTaskToReadyList+0xd4>)
 8018148:	441a      	add	r2, r3
 801814a:	687b      	ldr	r3, [r7, #4]
 801814c:	3304      	adds	r3, #4
 801814e:	4619      	mov	r1, r3
 8018150:	4610      	mov	r0, r2
 8018152:	f7fe ffcf 	bl	80170f4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8018156:	f000 fff1 	bl	801913c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801815a:	4b0d      	ldr	r3, [pc, #52]	@ (8018190 <prvAddNewTaskToReadyList+0xc8>)
 801815c:	681b      	ldr	r3, [r3, #0]
 801815e:	2b00      	cmp	r3, #0
 8018160:	d00e      	beq.n	8018180 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8018162:	4b0a      	ldr	r3, [pc, #40]	@ (801818c <prvAddNewTaskToReadyList+0xc4>)
 8018164:	681b      	ldr	r3, [r3, #0]
 8018166:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801816c:	429a      	cmp	r2, r3
 801816e:	d207      	bcs.n	8018180 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8018170:	4b0b      	ldr	r3, [pc, #44]	@ (80181a0 <prvAddNewTaskToReadyList+0xd8>)
 8018172:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018176:	601a      	str	r2, [r3, #0]
 8018178:	f3bf 8f4f 	dsb	sy
 801817c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018180:	bf00      	nop
 8018182:	3708      	adds	r7, #8
 8018184:	46bd      	mov	sp, r7
 8018186:	bd80      	pop	{r7, pc}
 8018188:	24002f2c 	.word	0x24002f2c
 801818c:	24002e2c 	.word	0x24002e2c
 8018190:	24002f38 	.word	0x24002f38
 8018194:	24002f48 	.word	0x24002f48
 8018198:	24002f34 	.word	0x24002f34
 801819c:	24002e30 	.word	0x24002e30
 80181a0:	e000ed04 	.word	0xe000ed04

080181a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80181a4:	b580      	push	{r7, lr}
 80181a6:	b084      	sub	sp, #16
 80181a8:	af00      	add	r7, sp, #0
 80181aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80181ac:	2300      	movs	r3, #0
 80181ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80181b0:	687b      	ldr	r3, [r7, #4]
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	d018      	beq.n	80181e8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80181b6:	4b14      	ldr	r3, [pc, #80]	@ (8018208 <vTaskDelay+0x64>)
 80181b8:	681b      	ldr	r3, [r3, #0]
 80181ba:	2b00      	cmp	r3, #0
 80181bc:	d00b      	beq.n	80181d6 <vTaskDelay+0x32>
	__asm volatile
 80181be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80181c2:	f383 8811 	msr	BASEPRI, r3
 80181c6:	f3bf 8f6f 	isb	sy
 80181ca:	f3bf 8f4f 	dsb	sy
 80181ce:	60bb      	str	r3, [r7, #8]
}
 80181d0:	bf00      	nop
 80181d2:	bf00      	nop
 80181d4:	e7fd      	b.n	80181d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80181d6:	f000 f87d 	bl	80182d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80181da:	2100      	movs	r1, #0
 80181dc:	6878      	ldr	r0, [r7, #4]
 80181de:	f000 fde1 	bl	8018da4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80181e2:	f000 f885 	bl	80182f0 <xTaskResumeAll>
 80181e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80181e8:	68fb      	ldr	r3, [r7, #12]
 80181ea:	2b00      	cmp	r3, #0
 80181ec:	d107      	bne.n	80181fe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80181ee:	4b07      	ldr	r3, [pc, #28]	@ (801820c <vTaskDelay+0x68>)
 80181f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80181f4:	601a      	str	r2, [r3, #0]
 80181f6:	f3bf 8f4f 	dsb	sy
 80181fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80181fe:	bf00      	nop
 8018200:	3710      	adds	r7, #16
 8018202:	46bd      	mov	sp, r7
 8018204:	bd80      	pop	{r7, pc}
 8018206:	bf00      	nop
 8018208:	24002f54 	.word	0x24002f54
 801820c:	e000ed04 	.word	0xe000ed04

08018210 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8018210:	b580      	push	{r7, lr}
 8018212:	b08a      	sub	sp, #40	@ 0x28
 8018214:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8018216:	2300      	movs	r3, #0
 8018218:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801821a:	2300      	movs	r3, #0
 801821c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801821e:	463a      	mov	r2, r7
 8018220:	1d39      	adds	r1, r7, #4
 8018222:	f107 0308 	add.w	r3, r7, #8
 8018226:	4618      	mov	r0, r3
 8018228:	f7e9 fdda 	bl	8001de0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801822c:	6839      	ldr	r1, [r7, #0]
 801822e:	687b      	ldr	r3, [r7, #4]
 8018230:	68ba      	ldr	r2, [r7, #8]
 8018232:	9202      	str	r2, [sp, #8]
 8018234:	9301      	str	r3, [sp, #4]
 8018236:	2300      	movs	r3, #0
 8018238:	9300      	str	r3, [sp, #0]
 801823a:	2300      	movs	r3, #0
 801823c:	460a      	mov	r2, r1
 801823e:	491f      	ldr	r1, [pc, #124]	@ (80182bc <vTaskStartScheduler+0xac>)
 8018240:	481f      	ldr	r0, [pc, #124]	@ (80182c0 <vTaskStartScheduler+0xb0>)
 8018242:	f7ff fe0b 	bl	8017e5c <xTaskCreateStatic>
 8018246:	4603      	mov	r3, r0
 8018248:	4a1e      	ldr	r2, [pc, #120]	@ (80182c4 <vTaskStartScheduler+0xb4>)
 801824a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801824c:	4b1d      	ldr	r3, [pc, #116]	@ (80182c4 <vTaskStartScheduler+0xb4>)
 801824e:	681b      	ldr	r3, [r3, #0]
 8018250:	2b00      	cmp	r3, #0
 8018252:	d002      	beq.n	801825a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8018254:	2301      	movs	r3, #1
 8018256:	617b      	str	r3, [r7, #20]
 8018258:	e001      	b.n	801825e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801825a:	2300      	movs	r3, #0
 801825c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801825e:	697b      	ldr	r3, [r7, #20]
 8018260:	2b01      	cmp	r3, #1
 8018262:	d116      	bne.n	8018292 <vTaskStartScheduler+0x82>
	__asm volatile
 8018264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018268:	f383 8811 	msr	BASEPRI, r3
 801826c:	f3bf 8f6f 	isb	sy
 8018270:	f3bf 8f4f 	dsb	sy
 8018274:	613b      	str	r3, [r7, #16]
}
 8018276:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8018278:	4b13      	ldr	r3, [pc, #76]	@ (80182c8 <vTaskStartScheduler+0xb8>)
 801827a:	f04f 32ff 	mov.w	r2, #4294967295
 801827e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8018280:	4b12      	ldr	r3, [pc, #72]	@ (80182cc <vTaskStartScheduler+0xbc>)
 8018282:	2201      	movs	r2, #1
 8018284:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8018286:	4b12      	ldr	r3, [pc, #72]	@ (80182d0 <vTaskStartScheduler+0xc0>)
 8018288:	2200      	movs	r2, #0
 801828a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801828c:	f000 fe80 	bl	8018f90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8018290:	e00f      	b.n	80182b2 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8018292:	697b      	ldr	r3, [r7, #20]
 8018294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018298:	d10b      	bne.n	80182b2 <vTaskStartScheduler+0xa2>
	__asm volatile
 801829a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801829e:	f383 8811 	msr	BASEPRI, r3
 80182a2:	f3bf 8f6f 	isb	sy
 80182a6:	f3bf 8f4f 	dsb	sy
 80182aa:	60fb      	str	r3, [r7, #12]
}
 80182ac:	bf00      	nop
 80182ae:	bf00      	nop
 80182b0:	e7fd      	b.n	80182ae <vTaskStartScheduler+0x9e>
}
 80182b2:	bf00      	nop
 80182b4:	3718      	adds	r7, #24
 80182b6:	46bd      	mov	sp, r7
 80182b8:	bd80      	pop	{r7, pc}
 80182ba:	bf00      	nop
 80182bc:	08019b48 	.word	0x08019b48
 80182c0:	08018879 	.word	0x08018879
 80182c4:	24002f50 	.word	0x24002f50
 80182c8:	24002f4c 	.word	0x24002f4c
 80182cc:	24002f38 	.word	0x24002f38
 80182d0:	24002f30 	.word	0x24002f30

080182d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80182d4:	b480      	push	{r7}
 80182d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80182d8:	4b04      	ldr	r3, [pc, #16]	@ (80182ec <vTaskSuspendAll+0x18>)
 80182da:	681b      	ldr	r3, [r3, #0]
 80182dc:	3301      	adds	r3, #1
 80182de:	4a03      	ldr	r2, [pc, #12]	@ (80182ec <vTaskSuspendAll+0x18>)
 80182e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80182e2:	bf00      	nop
 80182e4:	46bd      	mov	sp, r7
 80182e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182ea:	4770      	bx	lr
 80182ec:	24002f54 	.word	0x24002f54

080182f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80182f0:	b580      	push	{r7, lr}
 80182f2:	b084      	sub	sp, #16
 80182f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80182f6:	2300      	movs	r3, #0
 80182f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80182fa:	2300      	movs	r3, #0
 80182fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80182fe:	4b42      	ldr	r3, [pc, #264]	@ (8018408 <xTaskResumeAll+0x118>)
 8018300:	681b      	ldr	r3, [r3, #0]
 8018302:	2b00      	cmp	r3, #0
 8018304:	d10b      	bne.n	801831e <xTaskResumeAll+0x2e>
	__asm volatile
 8018306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801830a:	f383 8811 	msr	BASEPRI, r3
 801830e:	f3bf 8f6f 	isb	sy
 8018312:	f3bf 8f4f 	dsb	sy
 8018316:	603b      	str	r3, [r7, #0]
}
 8018318:	bf00      	nop
 801831a:	bf00      	nop
 801831c:	e7fd      	b.n	801831a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801831e:	f000 fedb 	bl	80190d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8018322:	4b39      	ldr	r3, [pc, #228]	@ (8018408 <xTaskResumeAll+0x118>)
 8018324:	681b      	ldr	r3, [r3, #0]
 8018326:	3b01      	subs	r3, #1
 8018328:	4a37      	ldr	r2, [pc, #220]	@ (8018408 <xTaskResumeAll+0x118>)
 801832a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801832c:	4b36      	ldr	r3, [pc, #216]	@ (8018408 <xTaskResumeAll+0x118>)
 801832e:	681b      	ldr	r3, [r3, #0]
 8018330:	2b00      	cmp	r3, #0
 8018332:	d161      	bne.n	80183f8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8018334:	4b35      	ldr	r3, [pc, #212]	@ (801840c <xTaskResumeAll+0x11c>)
 8018336:	681b      	ldr	r3, [r3, #0]
 8018338:	2b00      	cmp	r3, #0
 801833a:	d05d      	beq.n	80183f8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801833c:	e02e      	b.n	801839c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801833e:	4b34      	ldr	r3, [pc, #208]	@ (8018410 <xTaskResumeAll+0x120>)
 8018340:	68db      	ldr	r3, [r3, #12]
 8018342:	68db      	ldr	r3, [r3, #12]
 8018344:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018346:	68fb      	ldr	r3, [r7, #12]
 8018348:	3318      	adds	r3, #24
 801834a:	4618      	mov	r0, r3
 801834c:	f7fe ff2f 	bl	80171ae <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018350:	68fb      	ldr	r3, [r7, #12]
 8018352:	3304      	adds	r3, #4
 8018354:	4618      	mov	r0, r3
 8018356:	f7fe ff2a 	bl	80171ae <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801835a:	68fb      	ldr	r3, [r7, #12]
 801835c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801835e:	2201      	movs	r2, #1
 8018360:	409a      	lsls	r2, r3
 8018362:	4b2c      	ldr	r3, [pc, #176]	@ (8018414 <xTaskResumeAll+0x124>)
 8018364:	681b      	ldr	r3, [r3, #0]
 8018366:	4313      	orrs	r3, r2
 8018368:	4a2a      	ldr	r2, [pc, #168]	@ (8018414 <xTaskResumeAll+0x124>)
 801836a:	6013      	str	r3, [r2, #0]
 801836c:	68fb      	ldr	r3, [r7, #12]
 801836e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018370:	4613      	mov	r3, r2
 8018372:	009b      	lsls	r3, r3, #2
 8018374:	4413      	add	r3, r2
 8018376:	009b      	lsls	r3, r3, #2
 8018378:	4a27      	ldr	r2, [pc, #156]	@ (8018418 <xTaskResumeAll+0x128>)
 801837a:	441a      	add	r2, r3
 801837c:	68fb      	ldr	r3, [r7, #12]
 801837e:	3304      	adds	r3, #4
 8018380:	4619      	mov	r1, r3
 8018382:	4610      	mov	r0, r2
 8018384:	f7fe feb6 	bl	80170f4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018388:	68fb      	ldr	r3, [r7, #12]
 801838a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801838c:	4b23      	ldr	r3, [pc, #140]	@ (801841c <xTaskResumeAll+0x12c>)
 801838e:	681b      	ldr	r3, [r3, #0]
 8018390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018392:	429a      	cmp	r2, r3
 8018394:	d302      	bcc.n	801839c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8018396:	4b22      	ldr	r3, [pc, #136]	@ (8018420 <xTaskResumeAll+0x130>)
 8018398:	2201      	movs	r2, #1
 801839a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801839c:	4b1c      	ldr	r3, [pc, #112]	@ (8018410 <xTaskResumeAll+0x120>)
 801839e:	681b      	ldr	r3, [r3, #0]
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	d1cc      	bne.n	801833e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80183a4:	68fb      	ldr	r3, [r7, #12]
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d001      	beq.n	80183ae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80183aa:	f000 fb1b 	bl	80189e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80183ae:	4b1d      	ldr	r3, [pc, #116]	@ (8018424 <xTaskResumeAll+0x134>)
 80183b0:	681b      	ldr	r3, [r3, #0]
 80183b2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	2b00      	cmp	r3, #0
 80183b8:	d010      	beq.n	80183dc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80183ba:	f000 f837 	bl	801842c <xTaskIncrementTick>
 80183be:	4603      	mov	r3, r0
 80183c0:	2b00      	cmp	r3, #0
 80183c2:	d002      	beq.n	80183ca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80183c4:	4b16      	ldr	r3, [pc, #88]	@ (8018420 <xTaskResumeAll+0x130>)
 80183c6:	2201      	movs	r2, #1
 80183c8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	3b01      	subs	r3, #1
 80183ce:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	2b00      	cmp	r3, #0
 80183d4:	d1f1      	bne.n	80183ba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80183d6:	4b13      	ldr	r3, [pc, #76]	@ (8018424 <xTaskResumeAll+0x134>)
 80183d8:	2200      	movs	r2, #0
 80183da:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80183dc:	4b10      	ldr	r3, [pc, #64]	@ (8018420 <xTaskResumeAll+0x130>)
 80183de:	681b      	ldr	r3, [r3, #0]
 80183e0:	2b00      	cmp	r3, #0
 80183e2:	d009      	beq.n	80183f8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80183e4:	2301      	movs	r3, #1
 80183e6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80183e8:	4b0f      	ldr	r3, [pc, #60]	@ (8018428 <xTaskResumeAll+0x138>)
 80183ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80183ee:	601a      	str	r2, [r3, #0]
 80183f0:	f3bf 8f4f 	dsb	sy
 80183f4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80183f8:	f000 fea0 	bl	801913c <vPortExitCritical>

	return xAlreadyYielded;
 80183fc:	68bb      	ldr	r3, [r7, #8]
}
 80183fe:	4618      	mov	r0, r3
 8018400:	3710      	adds	r7, #16
 8018402:	46bd      	mov	sp, r7
 8018404:	bd80      	pop	{r7, pc}
 8018406:	bf00      	nop
 8018408:	24002f54 	.word	0x24002f54
 801840c:	24002f2c 	.word	0x24002f2c
 8018410:	24002eec 	.word	0x24002eec
 8018414:	24002f34 	.word	0x24002f34
 8018418:	24002e30 	.word	0x24002e30
 801841c:	24002e2c 	.word	0x24002e2c
 8018420:	24002f40 	.word	0x24002f40
 8018424:	24002f3c 	.word	0x24002f3c
 8018428:	e000ed04 	.word	0xe000ed04

0801842c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801842c:	b580      	push	{r7, lr}
 801842e:	b086      	sub	sp, #24
 8018430:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8018432:	2300      	movs	r3, #0
 8018434:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018436:	4b4f      	ldr	r3, [pc, #316]	@ (8018574 <xTaskIncrementTick+0x148>)
 8018438:	681b      	ldr	r3, [r3, #0]
 801843a:	2b00      	cmp	r3, #0
 801843c:	f040 808f 	bne.w	801855e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8018440:	4b4d      	ldr	r3, [pc, #308]	@ (8018578 <xTaskIncrementTick+0x14c>)
 8018442:	681b      	ldr	r3, [r3, #0]
 8018444:	3301      	adds	r3, #1
 8018446:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8018448:	4a4b      	ldr	r2, [pc, #300]	@ (8018578 <xTaskIncrementTick+0x14c>)
 801844a:	693b      	ldr	r3, [r7, #16]
 801844c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801844e:	693b      	ldr	r3, [r7, #16]
 8018450:	2b00      	cmp	r3, #0
 8018452:	d121      	bne.n	8018498 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8018454:	4b49      	ldr	r3, [pc, #292]	@ (801857c <xTaskIncrementTick+0x150>)
 8018456:	681b      	ldr	r3, [r3, #0]
 8018458:	681b      	ldr	r3, [r3, #0]
 801845a:	2b00      	cmp	r3, #0
 801845c:	d00b      	beq.n	8018476 <xTaskIncrementTick+0x4a>
	__asm volatile
 801845e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018462:	f383 8811 	msr	BASEPRI, r3
 8018466:	f3bf 8f6f 	isb	sy
 801846a:	f3bf 8f4f 	dsb	sy
 801846e:	603b      	str	r3, [r7, #0]
}
 8018470:	bf00      	nop
 8018472:	bf00      	nop
 8018474:	e7fd      	b.n	8018472 <xTaskIncrementTick+0x46>
 8018476:	4b41      	ldr	r3, [pc, #260]	@ (801857c <xTaskIncrementTick+0x150>)
 8018478:	681b      	ldr	r3, [r3, #0]
 801847a:	60fb      	str	r3, [r7, #12]
 801847c:	4b40      	ldr	r3, [pc, #256]	@ (8018580 <xTaskIncrementTick+0x154>)
 801847e:	681b      	ldr	r3, [r3, #0]
 8018480:	4a3e      	ldr	r2, [pc, #248]	@ (801857c <xTaskIncrementTick+0x150>)
 8018482:	6013      	str	r3, [r2, #0]
 8018484:	4a3e      	ldr	r2, [pc, #248]	@ (8018580 <xTaskIncrementTick+0x154>)
 8018486:	68fb      	ldr	r3, [r7, #12]
 8018488:	6013      	str	r3, [r2, #0]
 801848a:	4b3e      	ldr	r3, [pc, #248]	@ (8018584 <xTaskIncrementTick+0x158>)
 801848c:	681b      	ldr	r3, [r3, #0]
 801848e:	3301      	adds	r3, #1
 8018490:	4a3c      	ldr	r2, [pc, #240]	@ (8018584 <xTaskIncrementTick+0x158>)
 8018492:	6013      	str	r3, [r2, #0]
 8018494:	f000 faa6 	bl	80189e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8018498:	4b3b      	ldr	r3, [pc, #236]	@ (8018588 <xTaskIncrementTick+0x15c>)
 801849a:	681b      	ldr	r3, [r3, #0]
 801849c:	693a      	ldr	r2, [r7, #16]
 801849e:	429a      	cmp	r2, r3
 80184a0:	d348      	bcc.n	8018534 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80184a2:	4b36      	ldr	r3, [pc, #216]	@ (801857c <xTaskIncrementTick+0x150>)
 80184a4:	681b      	ldr	r3, [r3, #0]
 80184a6:	681b      	ldr	r3, [r3, #0]
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	d104      	bne.n	80184b6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80184ac:	4b36      	ldr	r3, [pc, #216]	@ (8018588 <xTaskIncrementTick+0x15c>)
 80184ae:	f04f 32ff 	mov.w	r2, #4294967295
 80184b2:	601a      	str	r2, [r3, #0]
					break;
 80184b4:	e03e      	b.n	8018534 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80184b6:	4b31      	ldr	r3, [pc, #196]	@ (801857c <xTaskIncrementTick+0x150>)
 80184b8:	681b      	ldr	r3, [r3, #0]
 80184ba:	68db      	ldr	r3, [r3, #12]
 80184bc:	68db      	ldr	r3, [r3, #12]
 80184be:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80184c0:	68bb      	ldr	r3, [r7, #8]
 80184c2:	685b      	ldr	r3, [r3, #4]
 80184c4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80184c6:	693a      	ldr	r2, [r7, #16]
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	429a      	cmp	r2, r3
 80184cc:	d203      	bcs.n	80184d6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80184ce:	4a2e      	ldr	r2, [pc, #184]	@ (8018588 <xTaskIncrementTick+0x15c>)
 80184d0:	687b      	ldr	r3, [r7, #4]
 80184d2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80184d4:	e02e      	b.n	8018534 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80184d6:	68bb      	ldr	r3, [r7, #8]
 80184d8:	3304      	adds	r3, #4
 80184da:	4618      	mov	r0, r3
 80184dc:	f7fe fe67 	bl	80171ae <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80184e0:	68bb      	ldr	r3, [r7, #8]
 80184e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80184e4:	2b00      	cmp	r3, #0
 80184e6:	d004      	beq.n	80184f2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80184e8:	68bb      	ldr	r3, [r7, #8]
 80184ea:	3318      	adds	r3, #24
 80184ec:	4618      	mov	r0, r3
 80184ee:	f7fe fe5e 	bl	80171ae <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80184f2:	68bb      	ldr	r3, [r7, #8]
 80184f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80184f6:	2201      	movs	r2, #1
 80184f8:	409a      	lsls	r2, r3
 80184fa:	4b24      	ldr	r3, [pc, #144]	@ (801858c <xTaskIncrementTick+0x160>)
 80184fc:	681b      	ldr	r3, [r3, #0]
 80184fe:	4313      	orrs	r3, r2
 8018500:	4a22      	ldr	r2, [pc, #136]	@ (801858c <xTaskIncrementTick+0x160>)
 8018502:	6013      	str	r3, [r2, #0]
 8018504:	68bb      	ldr	r3, [r7, #8]
 8018506:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018508:	4613      	mov	r3, r2
 801850a:	009b      	lsls	r3, r3, #2
 801850c:	4413      	add	r3, r2
 801850e:	009b      	lsls	r3, r3, #2
 8018510:	4a1f      	ldr	r2, [pc, #124]	@ (8018590 <xTaskIncrementTick+0x164>)
 8018512:	441a      	add	r2, r3
 8018514:	68bb      	ldr	r3, [r7, #8]
 8018516:	3304      	adds	r3, #4
 8018518:	4619      	mov	r1, r3
 801851a:	4610      	mov	r0, r2
 801851c:	f7fe fdea 	bl	80170f4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018520:	68bb      	ldr	r3, [r7, #8]
 8018522:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018524:	4b1b      	ldr	r3, [pc, #108]	@ (8018594 <xTaskIncrementTick+0x168>)
 8018526:	681b      	ldr	r3, [r3, #0]
 8018528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801852a:	429a      	cmp	r2, r3
 801852c:	d3b9      	bcc.n	80184a2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 801852e:	2301      	movs	r3, #1
 8018530:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018532:	e7b6      	b.n	80184a2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8018534:	4b17      	ldr	r3, [pc, #92]	@ (8018594 <xTaskIncrementTick+0x168>)
 8018536:	681b      	ldr	r3, [r3, #0]
 8018538:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801853a:	4915      	ldr	r1, [pc, #84]	@ (8018590 <xTaskIncrementTick+0x164>)
 801853c:	4613      	mov	r3, r2
 801853e:	009b      	lsls	r3, r3, #2
 8018540:	4413      	add	r3, r2
 8018542:	009b      	lsls	r3, r3, #2
 8018544:	440b      	add	r3, r1
 8018546:	681b      	ldr	r3, [r3, #0]
 8018548:	2b01      	cmp	r3, #1
 801854a:	d901      	bls.n	8018550 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801854c:	2301      	movs	r3, #1
 801854e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8018550:	4b11      	ldr	r3, [pc, #68]	@ (8018598 <xTaskIncrementTick+0x16c>)
 8018552:	681b      	ldr	r3, [r3, #0]
 8018554:	2b00      	cmp	r3, #0
 8018556:	d007      	beq.n	8018568 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8018558:	2301      	movs	r3, #1
 801855a:	617b      	str	r3, [r7, #20]
 801855c:	e004      	b.n	8018568 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801855e:	4b0f      	ldr	r3, [pc, #60]	@ (801859c <xTaskIncrementTick+0x170>)
 8018560:	681b      	ldr	r3, [r3, #0]
 8018562:	3301      	adds	r3, #1
 8018564:	4a0d      	ldr	r2, [pc, #52]	@ (801859c <xTaskIncrementTick+0x170>)
 8018566:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8018568:	697b      	ldr	r3, [r7, #20]
}
 801856a:	4618      	mov	r0, r3
 801856c:	3718      	adds	r7, #24
 801856e:	46bd      	mov	sp, r7
 8018570:	bd80      	pop	{r7, pc}
 8018572:	bf00      	nop
 8018574:	24002f54 	.word	0x24002f54
 8018578:	24002f30 	.word	0x24002f30
 801857c:	24002ee4 	.word	0x24002ee4
 8018580:	24002ee8 	.word	0x24002ee8
 8018584:	24002f44 	.word	0x24002f44
 8018588:	24002f4c 	.word	0x24002f4c
 801858c:	24002f34 	.word	0x24002f34
 8018590:	24002e30 	.word	0x24002e30
 8018594:	24002e2c 	.word	0x24002e2c
 8018598:	24002f40 	.word	0x24002f40
 801859c:	24002f3c 	.word	0x24002f3c

080185a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80185a0:	b480      	push	{r7}
 80185a2:	b087      	sub	sp, #28
 80185a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80185a6:	4b27      	ldr	r3, [pc, #156]	@ (8018644 <vTaskSwitchContext+0xa4>)
 80185a8:	681b      	ldr	r3, [r3, #0]
 80185aa:	2b00      	cmp	r3, #0
 80185ac:	d003      	beq.n	80185b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80185ae:	4b26      	ldr	r3, [pc, #152]	@ (8018648 <vTaskSwitchContext+0xa8>)
 80185b0:	2201      	movs	r2, #1
 80185b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80185b4:	e040      	b.n	8018638 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80185b6:	4b24      	ldr	r3, [pc, #144]	@ (8018648 <vTaskSwitchContext+0xa8>)
 80185b8:	2200      	movs	r2, #0
 80185ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80185bc:	4b23      	ldr	r3, [pc, #140]	@ (801864c <vTaskSwitchContext+0xac>)
 80185be:	681b      	ldr	r3, [r3, #0]
 80185c0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80185c2:	68fb      	ldr	r3, [r7, #12]
 80185c4:	fab3 f383 	clz	r3, r3
 80185c8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80185ca:	7afb      	ldrb	r3, [r7, #11]
 80185cc:	f1c3 031f 	rsb	r3, r3, #31
 80185d0:	617b      	str	r3, [r7, #20]
 80185d2:	491f      	ldr	r1, [pc, #124]	@ (8018650 <vTaskSwitchContext+0xb0>)
 80185d4:	697a      	ldr	r2, [r7, #20]
 80185d6:	4613      	mov	r3, r2
 80185d8:	009b      	lsls	r3, r3, #2
 80185da:	4413      	add	r3, r2
 80185dc:	009b      	lsls	r3, r3, #2
 80185de:	440b      	add	r3, r1
 80185e0:	681b      	ldr	r3, [r3, #0]
 80185e2:	2b00      	cmp	r3, #0
 80185e4:	d10b      	bne.n	80185fe <vTaskSwitchContext+0x5e>
	__asm volatile
 80185e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80185ea:	f383 8811 	msr	BASEPRI, r3
 80185ee:	f3bf 8f6f 	isb	sy
 80185f2:	f3bf 8f4f 	dsb	sy
 80185f6:	607b      	str	r3, [r7, #4]
}
 80185f8:	bf00      	nop
 80185fa:	bf00      	nop
 80185fc:	e7fd      	b.n	80185fa <vTaskSwitchContext+0x5a>
 80185fe:	697a      	ldr	r2, [r7, #20]
 8018600:	4613      	mov	r3, r2
 8018602:	009b      	lsls	r3, r3, #2
 8018604:	4413      	add	r3, r2
 8018606:	009b      	lsls	r3, r3, #2
 8018608:	4a11      	ldr	r2, [pc, #68]	@ (8018650 <vTaskSwitchContext+0xb0>)
 801860a:	4413      	add	r3, r2
 801860c:	613b      	str	r3, [r7, #16]
 801860e:	693b      	ldr	r3, [r7, #16]
 8018610:	685b      	ldr	r3, [r3, #4]
 8018612:	685a      	ldr	r2, [r3, #4]
 8018614:	693b      	ldr	r3, [r7, #16]
 8018616:	605a      	str	r2, [r3, #4]
 8018618:	693b      	ldr	r3, [r7, #16]
 801861a:	685a      	ldr	r2, [r3, #4]
 801861c:	693b      	ldr	r3, [r7, #16]
 801861e:	3308      	adds	r3, #8
 8018620:	429a      	cmp	r2, r3
 8018622:	d104      	bne.n	801862e <vTaskSwitchContext+0x8e>
 8018624:	693b      	ldr	r3, [r7, #16]
 8018626:	685b      	ldr	r3, [r3, #4]
 8018628:	685a      	ldr	r2, [r3, #4]
 801862a:	693b      	ldr	r3, [r7, #16]
 801862c:	605a      	str	r2, [r3, #4]
 801862e:	693b      	ldr	r3, [r7, #16]
 8018630:	685b      	ldr	r3, [r3, #4]
 8018632:	68db      	ldr	r3, [r3, #12]
 8018634:	4a07      	ldr	r2, [pc, #28]	@ (8018654 <vTaskSwitchContext+0xb4>)
 8018636:	6013      	str	r3, [r2, #0]
}
 8018638:	bf00      	nop
 801863a:	371c      	adds	r7, #28
 801863c:	46bd      	mov	sp, r7
 801863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018642:	4770      	bx	lr
 8018644:	24002f54 	.word	0x24002f54
 8018648:	24002f40 	.word	0x24002f40
 801864c:	24002f34 	.word	0x24002f34
 8018650:	24002e30 	.word	0x24002e30
 8018654:	24002e2c 	.word	0x24002e2c

08018658 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8018658:	b580      	push	{r7, lr}
 801865a:	b084      	sub	sp, #16
 801865c:	af00      	add	r7, sp, #0
 801865e:	6078      	str	r0, [r7, #4]
 8018660:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8018662:	687b      	ldr	r3, [r7, #4]
 8018664:	2b00      	cmp	r3, #0
 8018666:	d10b      	bne.n	8018680 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8018668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801866c:	f383 8811 	msr	BASEPRI, r3
 8018670:	f3bf 8f6f 	isb	sy
 8018674:	f3bf 8f4f 	dsb	sy
 8018678:	60fb      	str	r3, [r7, #12]
}
 801867a:	bf00      	nop
 801867c:	bf00      	nop
 801867e:	e7fd      	b.n	801867c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018680:	4b07      	ldr	r3, [pc, #28]	@ (80186a0 <vTaskPlaceOnEventList+0x48>)
 8018682:	681b      	ldr	r3, [r3, #0]
 8018684:	3318      	adds	r3, #24
 8018686:	4619      	mov	r1, r3
 8018688:	6878      	ldr	r0, [r7, #4]
 801868a:	f7fe fd57 	bl	801713c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801868e:	2101      	movs	r1, #1
 8018690:	6838      	ldr	r0, [r7, #0]
 8018692:	f000 fb87 	bl	8018da4 <prvAddCurrentTaskToDelayedList>
}
 8018696:	bf00      	nop
 8018698:	3710      	adds	r7, #16
 801869a:	46bd      	mov	sp, r7
 801869c:	bd80      	pop	{r7, pc}
 801869e:	bf00      	nop
 80186a0:	24002e2c 	.word	0x24002e2c

080186a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80186a4:	b580      	push	{r7, lr}
 80186a6:	b086      	sub	sp, #24
 80186a8:	af00      	add	r7, sp, #0
 80186aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80186ac:	687b      	ldr	r3, [r7, #4]
 80186ae:	68db      	ldr	r3, [r3, #12]
 80186b0:	68db      	ldr	r3, [r3, #12]
 80186b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80186b4:	693b      	ldr	r3, [r7, #16]
 80186b6:	2b00      	cmp	r3, #0
 80186b8:	d10b      	bne.n	80186d2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80186ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80186be:	f383 8811 	msr	BASEPRI, r3
 80186c2:	f3bf 8f6f 	isb	sy
 80186c6:	f3bf 8f4f 	dsb	sy
 80186ca:	60fb      	str	r3, [r7, #12]
}
 80186cc:	bf00      	nop
 80186ce:	bf00      	nop
 80186d0:	e7fd      	b.n	80186ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80186d2:	693b      	ldr	r3, [r7, #16]
 80186d4:	3318      	adds	r3, #24
 80186d6:	4618      	mov	r0, r3
 80186d8:	f7fe fd69 	bl	80171ae <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80186dc:	4b1d      	ldr	r3, [pc, #116]	@ (8018754 <xTaskRemoveFromEventList+0xb0>)
 80186de:	681b      	ldr	r3, [r3, #0]
 80186e0:	2b00      	cmp	r3, #0
 80186e2:	d11c      	bne.n	801871e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80186e4:	693b      	ldr	r3, [r7, #16]
 80186e6:	3304      	adds	r3, #4
 80186e8:	4618      	mov	r0, r3
 80186ea:	f7fe fd60 	bl	80171ae <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80186ee:	693b      	ldr	r3, [r7, #16]
 80186f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80186f2:	2201      	movs	r2, #1
 80186f4:	409a      	lsls	r2, r3
 80186f6:	4b18      	ldr	r3, [pc, #96]	@ (8018758 <xTaskRemoveFromEventList+0xb4>)
 80186f8:	681b      	ldr	r3, [r3, #0]
 80186fa:	4313      	orrs	r3, r2
 80186fc:	4a16      	ldr	r2, [pc, #88]	@ (8018758 <xTaskRemoveFromEventList+0xb4>)
 80186fe:	6013      	str	r3, [r2, #0]
 8018700:	693b      	ldr	r3, [r7, #16]
 8018702:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018704:	4613      	mov	r3, r2
 8018706:	009b      	lsls	r3, r3, #2
 8018708:	4413      	add	r3, r2
 801870a:	009b      	lsls	r3, r3, #2
 801870c:	4a13      	ldr	r2, [pc, #76]	@ (801875c <xTaskRemoveFromEventList+0xb8>)
 801870e:	441a      	add	r2, r3
 8018710:	693b      	ldr	r3, [r7, #16]
 8018712:	3304      	adds	r3, #4
 8018714:	4619      	mov	r1, r3
 8018716:	4610      	mov	r0, r2
 8018718:	f7fe fcec 	bl	80170f4 <vListInsertEnd>
 801871c:	e005      	b.n	801872a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801871e:	693b      	ldr	r3, [r7, #16]
 8018720:	3318      	adds	r3, #24
 8018722:	4619      	mov	r1, r3
 8018724:	480e      	ldr	r0, [pc, #56]	@ (8018760 <xTaskRemoveFromEventList+0xbc>)
 8018726:	f7fe fce5 	bl	80170f4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801872a:	693b      	ldr	r3, [r7, #16]
 801872c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801872e:	4b0d      	ldr	r3, [pc, #52]	@ (8018764 <xTaskRemoveFromEventList+0xc0>)
 8018730:	681b      	ldr	r3, [r3, #0]
 8018732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018734:	429a      	cmp	r2, r3
 8018736:	d905      	bls.n	8018744 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8018738:	2301      	movs	r3, #1
 801873a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801873c:	4b0a      	ldr	r3, [pc, #40]	@ (8018768 <xTaskRemoveFromEventList+0xc4>)
 801873e:	2201      	movs	r2, #1
 8018740:	601a      	str	r2, [r3, #0]
 8018742:	e001      	b.n	8018748 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8018744:	2300      	movs	r3, #0
 8018746:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8018748:	697b      	ldr	r3, [r7, #20]
}
 801874a:	4618      	mov	r0, r3
 801874c:	3718      	adds	r7, #24
 801874e:	46bd      	mov	sp, r7
 8018750:	bd80      	pop	{r7, pc}
 8018752:	bf00      	nop
 8018754:	24002f54 	.word	0x24002f54
 8018758:	24002f34 	.word	0x24002f34
 801875c:	24002e30 	.word	0x24002e30
 8018760:	24002eec 	.word	0x24002eec
 8018764:	24002e2c 	.word	0x24002e2c
 8018768:	24002f40 	.word	0x24002f40

0801876c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801876c:	b480      	push	{r7}
 801876e:	b083      	sub	sp, #12
 8018770:	af00      	add	r7, sp, #0
 8018772:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8018774:	4b06      	ldr	r3, [pc, #24]	@ (8018790 <vTaskInternalSetTimeOutState+0x24>)
 8018776:	681a      	ldr	r2, [r3, #0]
 8018778:	687b      	ldr	r3, [r7, #4]
 801877a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801877c:	4b05      	ldr	r3, [pc, #20]	@ (8018794 <vTaskInternalSetTimeOutState+0x28>)
 801877e:	681a      	ldr	r2, [r3, #0]
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	605a      	str	r2, [r3, #4]
}
 8018784:	bf00      	nop
 8018786:	370c      	adds	r7, #12
 8018788:	46bd      	mov	sp, r7
 801878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801878e:	4770      	bx	lr
 8018790:	24002f44 	.word	0x24002f44
 8018794:	24002f30 	.word	0x24002f30

08018798 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8018798:	b580      	push	{r7, lr}
 801879a:	b088      	sub	sp, #32
 801879c:	af00      	add	r7, sp, #0
 801879e:	6078      	str	r0, [r7, #4]
 80187a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80187a2:	687b      	ldr	r3, [r7, #4]
 80187a4:	2b00      	cmp	r3, #0
 80187a6:	d10b      	bne.n	80187c0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80187a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80187ac:	f383 8811 	msr	BASEPRI, r3
 80187b0:	f3bf 8f6f 	isb	sy
 80187b4:	f3bf 8f4f 	dsb	sy
 80187b8:	613b      	str	r3, [r7, #16]
}
 80187ba:	bf00      	nop
 80187bc:	bf00      	nop
 80187be:	e7fd      	b.n	80187bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80187c0:	683b      	ldr	r3, [r7, #0]
 80187c2:	2b00      	cmp	r3, #0
 80187c4:	d10b      	bne.n	80187de <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80187c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80187ca:	f383 8811 	msr	BASEPRI, r3
 80187ce:	f3bf 8f6f 	isb	sy
 80187d2:	f3bf 8f4f 	dsb	sy
 80187d6:	60fb      	str	r3, [r7, #12]
}
 80187d8:	bf00      	nop
 80187da:	bf00      	nop
 80187dc:	e7fd      	b.n	80187da <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80187de:	f000 fc7b 	bl	80190d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80187e2:	4b1d      	ldr	r3, [pc, #116]	@ (8018858 <xTaskCheckForTimeOut+0xc0>)
 80187e4:	681b      	ldr	r3, [r3, #0]
 80187e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80187e8:	687b      	ldr	r3, [r7, #4]
 80187ea:	685b      	ldr	r3, [r3, #4]
 80187ec:	69ba      	ldr	r2, [r7, #24]
 80187ee:	1ad3      	subs	r3, r2, r3
 80187f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80187f2:	683b      	ldr	r3, [r7, #0]
 80187f4:	681b      	ldr	r3, [r3, #0]
 80187f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80187fa:	d102      	bne.n	8018802 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80187fc:	2300      	movs	r3, #0
 80187fe:	61fb      	str	r3, [r7, #28]
 8018800:	e023      	b.n	801884a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	681a      	ldr	r2, [r3, #0]
 8018806:	4b15      	ldr	r3, [pc, #84]	@ (801885c <xTaskCheckForTimeOut+0xc4>)
 8018808:	681b      	ldr	r3, [r3, #0]
 801880a:	429a      	cmp	r2, r3
 801880c:	d007      	beq.n	801881e <xTaskCheckForTimeOut+0x86>
 801880e:	687b      	ldr	r3, [r7, #4]
 8018810:	685b      	ldr	r3, [r3, #4]
 8018812:	69ba      	ldr	r2, [r7, #24]
 8018814:	429a      	cmp	r2, r3
 8018816:	d302      	bcc.n	801881e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8018818:	2301      	movs	r3, #1
 801881a:	61fb      	str	r3, [r7, #28]
 801881c:	e015      	b.n	801884a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801881e:	683b      	ldr	r3, [r7, #0]
 8018820:	681b      	ldr	r3, [r3, #0]
 8018822:	697a      	ldr	r2, [r7, #20]
 8018824:	429a      	cmp	r2, r3
 8018826:	d20b      	bcs.n	8018840 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8018828:	683b      	ldr	r3, [r7, #0]
 801882a:	681a      	ldr	r2, [r3, #0]
 801882c:	697b      	ldr	r3, [r7, #20]
 801882e:	1ad2      	subs	r2, r2, r3
 8018830:	683b      	ldr	r3, [r7, #0]
 8018832:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8018834:	6878      	ldr	r0, [r7, #4]
 8018836:	f7ff ff99 	bl	801876c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801883a:	2300      	movs	r3, #0
 801883c:	61fb      	str	r3, [r7, #28]
 801883e:	e004      	b.n	801884a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8018840:	683b      	ldr	r3, [r7, #0]
 8018842:	2200      	movs	r2, #0
 8018844:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8018846:	2301      	movs	r3, #1
 8018848:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801884a:	f000 fc77 	bl	801913c <vPortExitCritical>

	return xReturn;
 801884e:	69fb      	ldr	r3, [r7, #28]
}
 8018850:	4618      	mov	r0, r3
 8018852:	3720      	adds	r7, #32
 8018854:	46bd      	mov	sp, r7
 8018856:	bd80      	pop	{r7, pc}
 8018858:	24002f30 	.word	0x24002f30
 801885c:	24002f44 	.word	0x24002f44

08018860 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8018860:	b480      	push	{r7}
 8018862:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8018864:	4b03      	ldr	r3, [pc, #12]	@ (8018874 <vTaskMissedYield+0x14>)
 8018866:	2201      	movs	r2, #1
 8018868:	601a      	str	r2, [r3, #0]
}
 801886a:	bf00      	nop
 801886c:	46bd      	mov	sp, r7
 801886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018872:	4770      	bx	lr
 8018874:	24002f40 	.word	0x24002f40

08018878 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8018878:	b580      	push	{r7, lr}
 801887a:	b082      	sub	sp, #8
 801887c:	af00      	add	r7, sp, #0
 801887e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8018880:	f000 f852 	bl	8018928 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8018884:	4b06      	ldr	r3, [pc, #24]	@ (80188a0 <prvIdleTask+0x28>)
 8018886:	681b      	ldr	r3, [r3, #0]
 8018888:	2b01      	cmp	r3, #1
 801888a:	d9f9      	bls.n	8018880 <prvIdleTask+0x8>
			{
				taskYIELD();
 801888c:	4b05      	ldr	r3, [pc, #20]	@ (80188a4 <prvIdleTask+0x2c>)
 801888e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018892:	601a      	str	r2, [r3, #0]
 8018894:	f3bf 8f4f 	dsb	sy
 8018898:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801889c:	e7f0      	b.n	8018880 <prvIdleTask+0x8>
 801889e:	bf00      	nop
 80188a0:	24002e30 	.word	0x24002e30
 80188a4:	e000ed04 	.word	0xe000ed04

080188a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80188a8:	b580      	push	{r7, lr}
 80188aa:	b082      	sub	sp, #8
 80188ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80188ae:	2300      	movs	r3, #0
 80188b0:	607b      	str	r3, [r7, #4]
 80188b2:	e00c      	b.n	80188ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80188b4:	687a      	ldr	r2, [r7, #4]
 80188b6:	4613      	mov	r3, r2
 80188b8:	009b      	lsls	r3, r3, #2
 80188ba:	4413      	add	r3, r2
 80188bc:	009b      	lsls	r3, r3, #2
 80188be:	4a12      	ldr	r2, [pc, #72]	@ (8018908 <prvInitialiseTaskLists+0x60>)
 80188c0:	4413      	add	r3, r2
 80188c2:	4618      	mov	r0, r3
 80188c4:	f7fe fbe9 	bl	801709a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	3301      	adds	r3, #1
 80188cc:	607b      	str	r3, [r7, #4]
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	2b06      	cmp	r3, #6
 80188d2:	d9ef      	bls.n	80188b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80188d4:	480d      	ldr	r0, [pc, #52]	@ (801890c <prvInitialiseTaskLists+0x64>)
 80188d6:	f7fe fbe0 	bl	801709a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80188da:	480d      	ldr	r0, [pc, #52]	@ (8018910 <prvInitialiseTaskLists+0x68>)
 80188dc:	f7fe fbdd 	bl	801709a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80188e0:	480c      	ldr	r0, [pc, #48]	@ (8018914 <prvInitialiseTaskLists+0x6c>)
 80188e2:	f7fe fbda 	bl	801709a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80188e6:	480c      	ldr	r0, [pc, #48]	@ (8018918 <prvInitialiseTaskLists+0x70>)
 80188e8:	f7fe fbd7 	bl	801709a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80188ec:	480b      	ldr	r0, [pc, #44]	@ (801891c <prvInitialiseTaskLists+0x74>)
 80188ee:	f7fe fbd4 	bl	801709a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80188f2:	4b0b      	ldr	r3, [pc, #44]	@ (8018920 <prvInitialiseTaskLists+0x78>)
 80188f4:	4a05      	ldr	r2, [pc, #20]	@ (801890c <prvInitialiseTaskLists+0x64>)
 80188f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80188f8:	4b0a      	ldr	r3, [pc, #40]	@ (8018924 <prvInitialiseTaskLists+0x7c>)
 80188fa:	4a05      	ldr	r2, [pc, #20]	@ (8018910 <prvInitialiseTaskLists+0x68>)
 80188fc:	601a      	str	r2, [r3, #0]
}
 80188fe:	bf00      	nop
 8018900:	3708      	adds	r7, #8
 8018902:	46bd      	mov	sp, r7
 8018904:	bd80      	pop	{r7, pc}
 8018906:	bf00      	nop
 8018908:	24002e30 	.word	0x24002e30
 801890c:	24002ebc 	.word	0x24002ebc
 8018910:	24002ed0 	.word	0x24002ed0
 8018914:	24002eec 	.word	0x24002eec
 8018918:	24002f00 	.word	0x24002f00
 801891c:	24002f18 	.word	0x24002f18
 8018920:	24002ee4 	.word	0x24002ee4
 8018924:	24002ee8 	.word	0x24002ee8

08018928 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8018928:	b580      	push	{r7, lr}
 801892a:	b082      	sub	sp, #8
 801892c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801892e:	e019      	b.n	8018964 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8018930:	f000 fbd2 	bl	80190d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018934:	4b10      	ldr	r3, [pc, #64]	@ (8018978 <prvCheckTasksWaitingTermination+0x50>)
 8018936:	68db      	ldr	r3, [r3, #12]
 8018938:	68db      	ldr	r3, [r3, #12]
 801893a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	3304      	adds	r3, #4
 8018940:	4618      	mov	r0, r3
 8018942:	f7fe fc34 	bl	80171ae <uxListRemove>
				--uxCurrentNumberOfTasks;
 8018946:	4b0d      	ldr	r3, [pc, #52]	@ (801897c <prvCheckTasksWaitingTermination+0x54>)
 8018948:	681b      	ldr	r3, [r3, #0]
 801894a:	3b01      	subs	r3, #1
 801894c:	4a0b      	ldr	r2, [pc, #44]	@ (801897c <prvCheckTasksWaitingTermination+0x54>)
 801894e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8018950:	4b0b      	ldr	r3, [pc, #44]	@ (8018980 <prvCheckTasksWaitingTermination+0x58>)
 8018952:	681b      	ldr	r3, [r3, #0]
 8018954:	3b01      	subs	r3, #1
 8018956:	4a0a      	ldr	r2, [pc, #40]	@ (8018980 <prvCheckTasksWaitingTermination+0x58>)
 8018958:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801895a:	f000 fbef 	bl	801913c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801895e:	6878      	ldr	r0, [r7, #4]
 8018960:	f000 f810 	bl	8018984 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018964:	4b06      	ldr	r3, [pc, #24]	@ (8018980 <prvCheckTasksWaitingTermination+0x58>)
 8018966:	681b      	ldr	r3, [r3, #0]
 8018968:	2b00      	cmp	r3, #0
 801896a:	d1e1      	bne.n	8018930 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801896c:	bf00      	nop
 801896e:	bf00      	nop
 8018970:	3708      	adds	r7, #8
 8018972:	46bd      	mov	sp, r7
 8018974:	bd80      	pop	{r7, pc}
 8018976:	bf00      	nop
 8018978:	24002f00 	.word	0x24002f00
 801897c:	24002f2c 	.word	0x24002f2c
 8018980:	24002f14 	.word	0x24002f14

08018984 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8018984:	b580      	push	{r7, lr}
 8018986:	b084      	sub	sp, #16
 8018988:	af00      	add	r7, sp, #0
 801898a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8018992:	2b00      	cmp	r3, #0
 8018994:	d108      	bne.n	80189a8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801899a:	4618      	mov	r0, r3
 801899c:	f000 fd8c 	bl	80194b8 <vPortFree>
				vPortFree( pxTCB );
 80189a0:	6878      	ldr	r0, [r7, #4]
 80189a2:	f000 fd89 	bl	80194b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80189a6:	e019      	b.n	80189dc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80189a8:	687b      	ldr	r3, [r7, #4]
 80189aa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80189ae:	2b01      	cmp	r3, #1
 80189b0:	d103      	bne.n	80189ba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80189b2:	6878      	ldr	r0, [r7, #4]
 80189b4:	f000 fd80 	bl	80194b8 <vPortFree>
	}
 80189b8:	e010      	b.n	80189dc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80189ba:	687b      	ldr	r3, [r7, #4]
 80189bc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80189c0:	2b02      	cmp	r3, #2
 80189c2:	d00b      	beq.n	80189dc <prvDeleteTCB+0x58>
	__asm volatile
 80189c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80189c8:	f383 8811 	msr	BASEPRI, r3
 80189cc:	f3bf 8f6f 	isb	sy
 80189d0:	f3bf 8f4f 	dsb	sy
 80189d4:	60fb      	str	r3, [r7, #12]
}
 80189d6:	bf00      	nop
 80189d8:	bf00      	nop
 80189da:	e7fd      	b.n	80189d8 <prvDeleteTCB+0x54>
	}
 80189dc:	bf00      	nop
 80189de:	3710      	adds	r7, #16
 80189e0:	46bd      	mov	sp, r7
 80189e2:	bd80      	pop	{r7, pc}

080189e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80189e4:	b480      	push	{r7}
 80189e6:	b083      	sub	sp, #12
 80189e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80189ea:	4b0c      	ldr	r3, [pc, #48]	@ (8018a1c <prvResetNextTaskUnblockTime+0x38>)
 80189ec:	681b      	ldr	r3, [r3, #0]
 80189ee:	681b      	ldr	r3, [r3, #0]
 80189f0:	2b00      	cmp	r3, #0
 80189f2:	d104      	bne.n	80189fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80189f4:	4b0a      	ldr	r3, [pc, #40]	@ (8018a20 <prvResetNextTaskUnblockTime+0x3c>)
 80189f6:	f04f 32ff 	mov.w	r2, #4294967295
 80189fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80189fc:	e008      	b.n	8018a10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80189fe:	4b07      	ldr	r3, [pc, #28]	@ (8018a1c <prvResetNextTaskUnblockTime+0x38>)
 8018a00:	681b      	ldr	r3, [r3, #0]
 8018a02:	68db      	ldr	r3, [r3, #12]
 8018a04:	68db      	ldr	r3, [r3, #12]
 8018a06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8018a08:	687b      	ldr	r3, [r7, #4]
 8018a0a:	685b      	ldr	r3, [r3, #4]
 8018a0c:	4a04      	ldr	r2, [pc, #16]	@ (8018a20 <prvResetNextTaskUnblockTime+0x3c>)
 8018a0e:	6013      	str	r3, [r2, #0]
}
 8018a10:	bf00      	nop
 8018a12:	370c      	adds	r7, #12
 8018a14:	46bd      	mov	sp, r7
 8018a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a1a:	4770      	bx	lr
 8018a1c:	24002ee4 	.word	0x24002ee4
 8018a20:	24002f4c 	.word	0x24002f4c

08018a24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8018a24:	b480      	push	{r7}
 8018a26:	b083      	sub	sp, #12
 8018a28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8018a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8018a58 <xTaskGetSchedulerState+0x34>)
 8018a2c:	681b      	ldr	r3, [r3, #0]
 8018a2e:	2b00      	cmp	r3, #0
 8018a30:	d102      	bne.n	8018a38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8018a32:	2301      	movs	r3, #1
 8018a34:	607b      	str	r3, [r7, #4]
 8018a36:	e008      	b.n	8018a4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018a38:	4b08      	ldr	r3, [pc, #32]	@ (8018a5c <xTaskGetSchedulerState+0x38>)
 8018a3a:	681b      	ldr	r3, [r3, #0]
 8018a3c:	2b00      	cmp	r3, #0
 8018a3e:	d102      	bne.n	8018a46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8018a40:	2302      	movs	r3, #2
 8018a42:	607b      	str	r3, [r7, #4]
 8018a44:	e001      	b.n	8018a4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8018a46:	2300      	movs	r3, #0
 8018a48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8018a4a:	687b      	ldr	r3, [r7, #4]
	}
 8018a4c:	4618      	mov	r0, r3
 8018a4e:	370c      	adds	r7, #12
 8018a50:	46bd      	mov	sp, r7
 8018a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a56:	4770      	bx	lr
 8018a58:	24002f38 	.word	0x24002f38
 8018a5c:	24002f54 	.word	0x24002f54

08018a60 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8018a60:	b580      	push	{r7, lr}
 8018a62:	b084      	sub	sp, #16
 8018a64:	af00      	add	r7, sp, #0
 8018a66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8018a68:	687b      	ldr	r3, [r7, #4]
 8018a6a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8018a6c:	2300      	movs	r3, #0
 8018a6e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	2b00      	cmp	r3, #0
 8018a74:	d05e      	beq.n	8018b34 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8018a76:	68bb      	ldr	r3, [r7, #8]
 8018a78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018a7a:	4b31      	ldr	r3, [pc, #196]	@ (8018b40 <xTaskPriorityInherit+0xe0>)
 8018a7c:	681b      	ldr	r3, [r3, #0]
 8018a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018a80:	429a      	cmp	r2, r3
 8018a82:	d24e      	bcs.n	8018b22 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8018a84:	68bb      	ldr	r3, [r7, #8]
 8018a86:	699b      	ldr	r3, [r3, #24]
 8018a88:	2b00      	cmp	r3, #0
 8018a8a:	db06      	blt.n	8018a9a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018a8c:	4b2c      	ldr	r3, [pc, #176]	@ (8018b40 <xTaskPriorityInherit+0xe0>)
 8018a8e:	681b      	ldr	r3, [r3, #0]
 8018a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018a92:	f1c3 0207 	rsb	r2, r3, #7
 8018a96:	68bb      	ldr	r3, [r7, #8]
 8018a98:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8018a9a:	68bb      	ldr	r3, [r7, #8]
 8018a9c:	6959      	ldr	r1, [r3, #20]
 8018a9e:	68bb      	ldr	r3, [r7, #8]
 8018aa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018aa2:	4613      	mov	r3, r2
 8018aa4:	009b      	lsls	r3, r3, #2
 8018aa6:	4413      	add	r3, r2
 8018aa8:	009b      	lsls	r3, r3, #2
 8018aaa:	4a26      	ldr	r2, [pc, #152]	@ (8018b44 <xTaskPriorityInherit+0xe4>)
 8018aac:	4413      	add	r3, r2
 8018aae:	4299      	cmp	r1, r3
 8018ab0:	d12f      	bne.n	8018b12 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018ab2:	68bb      	ldr	r3, [r7, #8]
 8018ab4:	3304      	adds	r3, #4
 8018ab6:	4618      	mov	r0, r3
 8018ab8:	f7fe fb79 	bl	80171ae <uxListRemove>
 8018abc:	4603      	mov	r3, r0
 8018abe:	2b00      	cmp	r3, #0
 8018ac0:	d10a      	bne.n	8018ad8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8018ac2:	68bb      	ldr	r3, [r7, #8]
 8018ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018ac6:	2201      	movs	r2, #1
 8018ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8018acc:	43da      	mvns	r2, r3
 8018ace:	4b1e      	ldr	r3, [pc, #120]	@ (8018b48 <xTaskPriorityInherit+0xe8>)
 8018ad0:	681b      	ldr	r3, [r3, #0]
 8018ad2:	4013      	ands	r3, r2
 8018ad4:	4a1c      	ldr	r2, [pc, #112]	@ (8018b48 <xTaskPriorityInherit+0xe8>)
 8018ad6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018ad8:	4b19      	ldr	r3, [pc, #100]	@ (8018b40 <xTaskPriorityInherit+0xe0>)
 8018ada:	681b      	ldr	r3, [r3, #0]
 8018adc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018ade:	68bb      	ldr	r3, [r7, #8]
 8018ae0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8018ae2:	68bb      	ldr	r3, [r7, #8]
 8018ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018ae6:	2201      	movs	r2, #1
 8018ae8:	409a      	lsls	r2, r3
 8018aea:	4b17      	ldr	r3, [pc, #92]	@ (8018b48 <xTaskPriorityInherit+0xe8>)
 8018aec:	681b      	ldr	r3, [r3, #0]
 8018aee:	4313      	orrs	r3, r2
 8018af0:	4a15      	ldr	r2, [pc, #84]	@ (8018b48 <xTaskPriorityInherit+0xe8>)
 8018af2:	6013      	str	r3, [r2, #0]
 8018af4:	68bb      	ldr	r3, [r7, #8]
 8018af6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018af8:	4613      	mov	r3, r2
 8018afa:	009b      	lsls	r3, r3, #2
 8018afc:	4413      	add	r3, r2
 8018afe:	009b      	lsls	r3, r3, #2
 8018b00:	4a10      	ldr	r2, [pc, #64]	@ (8018b44 <xTaskPriorityInherit+0xe4>)
 8018b02:	441a      	add	r2, r3
 8018b04:	68bb      	ldr	r3, [r7, #8]
 8018b06:	3304      	adds	r3, #4
 8018b08:	4619      	mov	r1, r3
 8018b0a:	4610      	mov	r0, r2
 8018b0c:	f7fe faf2 	bl	80170f4 <vListInsertEnd>
 8018b10:	e004      	b.n	8018b1c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018b12:	4b0b      	ldr	r3, [pc, #44]	@ (8018b40 <xTaskPriorityInherit+0xe0>)
 8018b14:	681b      	ldr	r3, [r3, #0]
 8018b16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018b18:	68bb      	ldr	r3, [r7, #8]
 8018b1a:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8018b1c:	2301      	movs	r3, #1
 8018b1e:	60fb      	str	r3, [r7, #12]
 8018b20:	e008      	b.n	8018b34 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8018b22:	68bb      	ldr	r3, [r7, #8]
 8018b24:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018b26:	4b06      	ldr	r3, [pc, #24]	@ (8018b40 <xTaskPriorityInherit+0xe0>)
 8018b28:	681b      	ldr	r3, [r3, #0]
 8018b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018b2c:	429a      	cmp	r2, r3
 8018b2e:	d201      	bcs.n	8018b34 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8018b30:	2301      	movs	r3, #1
 8018b32:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018b34:	68fb      	ldr	r3, [r7, #12]
	}
 8018b36:	4618      	mov	r0, r3
 8018b38:	3710      	adds	r7, #16
 8018b3a:	46bd      	mov	sp, r7
 8018b3c:	bd80      	pop	{r7, pc}
 8018b3e:	bf00      	nop
 8018b40:	24002e2c 	.word	0x24002e2c
 8018b44:	24002e30 	.word	0x24002e30
 8018b48:	24002f34 	.word	0x24002f34

08018b4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8018b4c:	b580      	push	{r7, lr}
 8018b4e:	b086      	sub	sp, #24
 8018b50:	af00      	add	r7, sp, #0
 8018b52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8018b58:	2300      	movs	r3, #0
 8018b5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018b5c:	687b      	ldr	r3, [r7, #4]
 8018b5e:	2b00      	cmp	r3, #0
 8018b60:	d070      	beq.n	8018c44 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8018b62:	4b3b      	ldr	r3, [pc, #236]	@ (8018c50 <xTaskPriorityDisinherit+0x104>)
 8018b64:	681b      	ldr	r3, [r3, #0]
 8018b66:	693a      	ldr	r2, [r7, #16]
 8018b68:	429a      	cmp	r2, r3
 8018b6a:	d00b      	beq.n	8018b84 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8018b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018b70:	f383 8811 	msr	BASEPRI, r3
 8018b74:	f3bf 8f6f 	isb	sy
 8018b78:	f3bf 8f4f 	dsb	sy
 8018b7c:	60fb      	str	r3, [r7, #12]
}
 8018b7e:	bf00      	nop
 8018b80:	bf00      	nop
 8018b82:	e7fd      	b.n	8018b80 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8018b84:	693b      	ldr	r3, [r7, #16]
 8018b86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018b88:	2b00      	cmp	r3, #0
 8018b8a:	d10b      	bne.n	8018ba4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8018b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018b90:	f383 8811 	msr	BASEPRI, r3
 8018b94:	f3bf 8f6f 	isb	sy
 8018b98:	f3bf 8f4f 	dsb	sy
 8018b9c:	60bb      	str	r3, [r7, #8]
}
 8018b9e:	bf00      	nop
 8018ba0:	bf00      	nop
 8018ba2:	e7fd      	b.n	8018ba0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8018ba4:	693b      	ldr	r3, [r7, #16]
 8018ba6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018ba8:	1e5a      	subs	r2, r3, #1
 8018baa:	693b      	ldr	r3, [r7, #16]
 8018bac:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8018bae:	693b      	ldr	r3, [r7, #16]
 8018bb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018bb2:	693b      	ldr	r3, [r7, #16]
 8018bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018bb6:	429a      	cmp	r2, r3
 8018bb8:	d044      	beq.n	8018c44 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8018bba:	693b      	ldr	r3, [r7, #16]
 8018bbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018bbe:	2b00      	cmp	r3, #0
 8018bc0:	d140      	bne.n	8018c44 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018bc2:	693b      	ldr	r3, [r7, #16]
 8018bc4:	3304      	adds	r3, #4
 8018bc6:	4618      	mov	r0, r3
 8018bc8:	f7fe faf1 	bl	80171ae <uxListRemove>
 8018bcc:	4603      	mov	r3, r0
 8018bce:	2b00      	cmp	r3, #0
 8018bd0:	d115      	bne.n	8018bfe <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8018bd2:	693b      	ldr	r3, [r7, #16]
 8018bd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018bd6:	491f      	ldr	r1, [pc, #124]	@ (8018c54 <xTaskPriorityDisinherit+0x108>)
 8018bd8:	4613      	mov	r3, r2
 8018bda:	009b      	lsls	r3, r3, #2
 8018bdc:	4413      	add	r3, r2
 8018bde:	009b      	lsls	r3, r3, #2
 8018be0:	440b      	add	r3, r1
 8018be2:	681b      	ldr	r3, [r3, #0]
 8018be4:	2b00      	cmp	r3, #0
 8018be6:	d10a      	bne.n	8018bfe <xTaskPriorityDisinherit+0xb2>
 8018be8:	693b      	ldr	r3, [r7, #16]
 8018bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018bec:	2201      	movs	r2, #1
 8018bee:	fa02 f303 	lsl.w	r3, r2, r3
 8018bf2:	43da      	mvns	r2, r3
 8018bf4:	4b18      	ldr	r3, [pc, #96]	@ (8018c58 <xTaskPriorityDisinherit+0x10c>)
 8018bf6:	681b      	ldr	r3, [r3, #0]
 8018bf8:	4013      	ands	r3, r2
 8018bfa:	4a17      	ldr	r2, [pc, #92]	@ (8018c58 <xTaskPriorityDisinherit+0x10c>)
 8018bfc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018bfe:	693b      	ldr	r3, [r7, #16]
 8018c00:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018c02:	693b      	ldr	r3, [r7, #16]
 8018c04:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018c06:	693b      	ldr	r3, [r7, #16]
 8018c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018c0a:	f1c3 0207 	rsb	r2, r3, #7
 8018c0e:	693b      	ldr	r3, [r7, #16]
 8018c10:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8018c12:	693b      	ldr	r3, [r7, #16]
 8018c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018c16:	2201      	movs	r2, #1
 8018c18:	409a      	lsls	r2, r3
 8018c1a:	4b0f      	ldr	r3, [pc, #60]	@ (8018c58 <xTaskPriorityDisinherit+0x10c>)
 8018c1c:	681b      	ldr	r3, [r3, #0]
 8018c1e:	4313      	orrs	r3, r2
 8018c20:	4a0d      	ldr	r2, [pc, #52]	@ (8018c58 <xTaskPriorityDisinherit+0x10c>)
 8018c22:	6013      	str	r3, [r2, #0]
 8018c24:	693b      	ldr	r3, [r7, #16]
 8018c26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018c28:	4613      	mov	r3, r2
 8018c2a:	009b      	lsls	r3, r3, #2
 8018c2c:	4413      	add	r3, r2
 8018c2e:	009b      	lsls	r3, r3, #2
 8018c30:	4a08      	ldr	r2, [pc, #32]	@ (8018c54 <xTaskPriorityDisinherit+0x108>)
 8018c32:	441a      	add	r2, r3
 8018c34:	693b      	ldr	r3, [r7, #16]
 8018c36:	3304      	adds	r3, #4
 8018c38:	4619      	mov	r1, r3
 8018c3a:	4610      	mov	r0, r2
 8018c3c:	f7fe fa5a 	bl	80170f4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8018c40:	2301      	movs	r3, #1
 8018c42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018c44:	697b      	ldr	r3, [r7, #20]
	}
 8018c46:	4618      	mov	r0, r3
 8018c48:	3718      	adds	r7, #24
 8018c4a:	46bd      	mov	sp, r7
 8018c4c:	bd80      	pop	{r7, pc}
 8018c4e:	bf00      	nop
 8018c50:	24002e2c 	.word	0x24002e2c
 8018c54:	24002e30 	.word	0x24002e30
 8018c58:	24002f34 	.word	0x24002f34

08018c5c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8018c5c:	b580      	push	{r7, lr}
 8018c5e:	b088      	sub	sp, #32
 8018c60:	af00      	add	r7, sp, #0
 8018c62:	6078      	str	r0, [r7, #4]
 8018c64:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8018c66:	687b      	ldr	r3, [r7, #4]
 8018c68:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8018c6a:	2301      	movs	r3, #1
 8018c6c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018c6e:	687b      	ldr	r3, [r7, #4]
 8018c70:	2b00      	cmp	r3, #0
 8018c72:	d079      	beq.n	8018d68 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8018c74:	69bb      	ldr	r3, [r7, #24]
 8018c76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018c78:	2b00      	cmp	r3, #0
 8018c7a:	d10b      	bne.n	8018c94 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8018c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018c80:	f383 8811 	msr	BASEPRI, r3
 8018c84:	f3bf 8f6f 	isb	sy
 8018c88:	f3bf 8f4f 	dsb	sy
 8018c8c:	60fb      	str	r3, [r7, #12]
}
 8018c8e:	bf00      	nop
 8018c90:	bf00      	nop
 8018c92:	e7fd      	b.n	8018c90 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8018c94:	69bb      	ldr	r3, [r7, #24]
 8018c96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018c98:	683a      	ldr	r2, [r7, #0]
 8018c9a:	429a      	cmp	r2, r3
 8018c9c:	d902      	bls.n	8018ca4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8018c9e:	683b      	ldr	r3, [r7, #0]
 8018ca0:	61fb      	str	r3, [r7, #28]
 8018ca2:	e002      	b.n	8018caa <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8018ca4:	69bb      	ldr	r3, [r7, #24]
 8018ca6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018ca8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8018caa:	69bb      	ldr	r3, [r7, #24]
 8018cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018cae:	69fa      	ldr	r2, [r7, #28]
 8018cb0:	429a      	cmp	r2, r3
 8018cb2:	d059      	beq.n	8018d68 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8018cb4:	69bb      	ldr	r3, [r7, #24]
 8018cb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018cb8:	697a      	ldr	r2, [r7, #20]
 8018cba:	429a      	cmp	r2, r3
 8018cbc:	d154      	bne.n	8018d68 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8018cbe:	4b2c      	ldr	r3, [pc, #176]	@ (8018d70 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8018cc0:	681b      	ldr	r3, [r3, #0]
 8018cc2:	69ba      	ldr	r2, [r7, #24]
 8018cc4:	429a      	cmp	r2, r3
 8018cc6:	d10b      	bne.n	8018ce0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8018cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018ccc:	f383 8811 	msr	BASEPRI, r3
 8018cd0:	f3bf 8f6f 	isb	sy
 8018cd4:	f3bf 8f4f 	dsb	sy
 8018cd8:	60bb      	str	r3, [r7, #8]
}
 8018cda:	bf00      	nop
 8018cdc:	bf00      	nop
 8018cde:	e7fd      	b.n	8018cdc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8018ce0:	69bb      	ldr	r3, [r7, #24]
 8018ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018ce4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8018ce6:	69bb      	ldr	r3, [r7, #24]
 8018ce8:	69fa      	ldr	r2, [r7, #28]
 8018cea:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8018cec:	69bb      	ldr	r3, [r7, #24]
 8018cee:	699b      	ldr	r3, [r3, #24]
 8018cf0:	2b00      	cmp	r3, #0
 8018cf2:	db04      	blt.n	8018cfe <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018cf4:	69fb      	ldr	r3, [r7, #28]
 8018cf6:	f1c3 0207 	rsb	r2, r3, #7
 8018cfa:	69bb      	ldr	r3, [r7, #24]
 8018cfc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8018cfe:	69bb      	ldr	r3, [r7, #24]
 8018d00:	6959      	ldr	r1, [r3, #20]
 8018d02:	693a      	ldr	r2, [r7, #16]
 8018d04:	4613      	mov	r3, r2
 8018d06:	009b      	lsls	r3, r3, #2
 8018d08:	4413      	add	r3, r2
 8018d0a:	009b      	lsls	r3, r3, #2
 8018d0c:	4a19      	ldr	r2, [pc, #100]	@ (8018d74 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8018d0e:	4413      	add	r3, r2
 8018d10:	4299      	cmp	r1, r3
 8018d12:	d129      	bne.n	8018d68 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018d14:	69bb      	ldr	r3, [r7, #24]
 8018d16:	3304      	adds	r3, #4
 8018d18:	4618      	mov	r0, r3
 8018d1a:	f7fe fa48 	bl	80171ae <uxListRemove>
 8018d1e:	4603      	mov	r3, r0
 8018d20:	2b00      	cmp	r3, #0
 8018d22:	d10a      	bne.n	8018d3a <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8018d24:	69bb      	ldr	r3, [r7, #24]
 8018d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018d28:	2201      	movs	r2, #1
 8018d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8018d2e:	43da      	mvns	r2, r3
 8018d30:	4b11      	ldr	r3, [pc, #68]	@ (8018d78 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8018d32:	681b      	ldr	r3, [r3, #0]
 8018d34:	4013      	ands	r3, r2
 8018d36:	4a10      	ldr	r2, [pc, #64]	@ (8018d78 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8018d38:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8018d3a:	69bb      	ldr	r3, [r7, #24]
 8018d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018d3e:	2201      	movs	r2, #1
 8018d40:	409a      	lsls	r2, r3
 8018d42:	4b0d      	ldr	r3, [pc, #52]	@ (8018d78 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8018d44:	681b      	ldr	r3, [r3, #0]
 8018d46:	4313      	orrs	r3, r2
 8018d48:	4a0b      	ldr	r2, [pc, #44]	@ (8018d78 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8018d4a:	6013      	str	r3, [r2, #0]
 8018d4c:	69bb      	ldr	r3, [r7, #24]
 8018d4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018d50:	4613      	mov	r3, r2
 8018d52:	009b      	lsls	r3, r3, #2
 8018d54:	4413      	add	r3, r2
 8018d56:	009b      	lsls	r3, r3, #2
 8018d58:	4a06      	ldr	r2, [pc, #24]	@ (8018d74 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8018d5a:	441a      	add	r2, r3
 8018d5c:	69bb      	ldr	r3, [r7, #24]
 8018d5e:	3304      	adds	r3, #4
 8018d60:	4619      	mov	r1, r3
 8018d62:	4610      	mov	r0, r2
 8018d64:	f7fe f9c6 	bl	80170f4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018d68:	bf00      	nop
 8018d6a:	3720      	adds	r7, #32
 8018d6c:	46bd      	mov	sp, r7
 8018d6e:	bd80      	pop	{r7, pc}
 8018d70:	24002e2c 	.word	0x24002e2c
 8018d74:	24002e30 	.word	0x24002e30
 8018d78:	24002f34 	.word	0x24002f34

08018d7c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8018d7c:	b480      	push	{r7}
 8018d7e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8018d80:	4b07      	ldr	r3, [pc, #28]	@ (8018da0 <pvTaskIncrementMutexHeldCount+0x24>)
 8018d82:	681b      	ldr	r3, [r3, #0]
 8018d84:	2b00      	cmp	r3, #0
 8018d86:	d004      	beq.n	8018d92 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8018d88:	4b05      	ldr	r3, [pc, #20]	@ (8018da0 <pvTaskIncrementMutexHeldCount+0x24>)
 8018d8a:	681b      	ldr	r3, [r3, #0]
 8018d8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018d8e:	3201      	adds	r2, #1
 8018d90:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8018d92:	4b03      	ldr	r3, [pc, #12]	@ (8018da0 <pvTaskIncrementMutexHeldCount+0x24>)
 8018d94:	681b      	ldr	r3, [r3, #0]
	}
 8018d96:	4618      	mov	r0, r3
 8018d98:	46bd      	mov	sp, r7
 8018d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d9e:	4770      	bx	lr
 8018da0:	24002e2c 	.word	0x24002e2c

08018da4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018da4:	b580      	push	{r7, lr}
 8018da6:	b084      	sub	sp, #16
 8018da8:	af00      	add	r7, sp, #0
 8018daa:	6078      	str	r0, [r7, #4]
 8018dac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018dae:	4b29      	ldr	r3, [pc, #164]	@ (8018e54 <prvAddCurrentTaskToDelayedList+0xb0>)
 8018db0:	681b      	ldr	r3, [r3, #0]
 8018db2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018db4:	4b28      	ldr	r3, [pc, #160]	@ (8018e58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8018db6:	681b      	ldr	r3, [r3, #0]
 8018db8:	3304      	adds	r3, #4
 8018dba:	4618      	mov	r0, r3
 8018dbc:	f7fe f9f7 	bl	80171ae <uxListRemove>
 8018dc0:	4603      	mov	r3, r0
 8018dc2:	2b00      	cmp	r3, #0
 8018dc4:	d10b      	bne.n	8018dde <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8018dc6:	4b24      	ldr	r3, [pc, #144]	@ (8018e58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8018dc8:	681b      	ldr	r3, [r3, #0]
 8018dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018dcc:	2201      	movs	r2, #1
 8018dce:	fa02 f303 	lsl.w	r3, r2, r3
 8018dd2:	43da      	mvns	r2, r3
 8018dd4:	4b21      	ldr	r3, [pc, #132]	@ (8018e5c <prvAddCurrentTaskToDelayedList+0xb8>)
 8018dd6:	681b      	ldr	r3, [r3, #0]
 8018dd8:	4013      	ands	r3, r2
 8018dda:	4a20      	ldr	r2, [pc, #128]	@ (8018e5c <prvAddCurrentTaskToDelayedList+0xb8>)
 8018ddc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018dde:	687b      	ldr	r3, [r7, #4]
 8018de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018de4:	d10a      	bne.n	8018dfc <prvAddCurrentTaskToDelayedList+0x58>
 8018de6:	683b      	ldr	r3, [r7, #0]
 8018de8:	2b00      	cmp	r3, #0
 8018dea:	d007      	beq.n	8018dfc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018dec:	4b1a      	ldr	r3, [pc, #104]	@ (8018e58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8018dee:	681b      	ldr	r3, [r3, #0]
 8018df0:	3304      	adds	r3, #4
 8018df2:	4619      	mov	r1, r3
 8018df4:	481a      	ldr	r0, [pc, #104]	@ (8018e60 <prvAddCurrentTaskToDelayedList+0xbc>)
 8018df6:	f7fe f97d 	bl	80170f4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018dfa:	e026      	b.n	8018e4a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018dfc:	68fa      	ldr	r2, [r7, #12]
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	4413      	add	r3, r2
 8018e02:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018e04:	4b14      	ldr	r3, [pc, #80]	@ (8018e58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8018e06:	681b      	ldr	r3, [r3, #0]
 8018e08:	68ba      	ldr	r2, [r7, #8]
 8018e0a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8018e0c:	68ba      	ldr	r2, [r7, #8]
 8018e0e:	68fb      	ldr	r3, [r7, #12]
 8018e10:	429a      	cmp	r2, r3
 8018e12:	d209      	bcs.n	8018e28 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018e14:	4b13      	ldr	r3, [pc, #76]	@ (8018e64 <prvAddCurrentTaskToDelayedList+0xc0>)
 8018e16:	681a      	ldr	r2, [r3, #0]
 8018e18:	4b0f      	ldr	r3, [pc, #60]	@ (8018e58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8018e1a:	681b      	ldr	r3, [r3, #0]
 8018e1c:	3304      	adds	r3, #4
 8018e1e:	4619      	mov	r1, r3
 8018e20:	4610      	mov	r0, r2
 8018e22:	f7fe f98b 	bl	801713c <vListInsert>
}
 8018e26:	e010      	b.n	8018e4a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018e28:	4b0f      	ldr	r3, [pc, #60]	@ (8018e68 <prvAddCurrentTaskToDelayedList+0xc4>)
 8018e2a:	681a      	ldr	r2, [r3, #0]
 8018e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8018e58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8018e2e:	681b      	ldr	r3, [r3, #0]
 8018e30:	3304      	adds	r3, #4
 8018e32:	4619      	mov	r1, r3
 8018e34:	4610      	mov	r0, r2
 8018e36:	f7fe f981 	bl	801713c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8018e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8018e6c <prvAddCurrentTaskToDelayedList+0xc8>)
 8018e3c:	681b      	ldr	r3, [r3, #0]
 8018e3e:	68ba      	ldr	r2, [r7, #8]
 8018e40:	429a      	cmp	r2, r3
 8018e42:	d202      	bcs.n	8018e4a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8018e44:	4a09      	ldr	r2, [pc, #36]	@ (8018e6c <prvAddCurrentTaskToDelayedList+0xc8>)
 8018e46:	68bb      	ldr	r3, [r7, #8]
 8018e48:	6013      	str	r3, [r2, #0]
}
 8018e4a:	bf00      	nop
 8018e4c:	3710      	adds	r7, #16
 8018e4e:	46bd      	mov	sp, r7
 8018e50:	bd80      	pop	{r7, pc}
 8018e52:	bf00      	nop
 8018e54:	24002f30 	.word	0x24002f30
 8018e58:	24002e2c 	.word	0x24002e2c
 8018e5c:	24002f34 	.word	0x24002f34
 8018e60:	24002f18 	.word	0x24002f18
 8018e64:	24002ee8 	.word	0x24002ee8
 8018e68:	24002ee4 	.word	0x24002ee4
 8018e6c:	24002f4c 	.word	0x24002f4c

08018e70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8018e70:	b480      	push	{r7}
 8018e72:	b085      	sub	sp, #20
 8018e74:	af00      	add	r7, sp, #0
 8018e76:	60f8      	str	r0, [r7, #12]
 8018e78:	60b9      	str	r1, [r7, #8]
 8018e7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8018e7c:	68fb      	ldr	r3, [r7, #12]
 8018e7e:	3b04      	subs	r3, #4
 8018e80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8018e82:	68fb      	ldr	r3, [r7, #12]
 8018e84:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8018e88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018e8a:	68fb      	ldr	r3, [r7, #12]
 8018e8c:	3b04      	subs	r3, #4
 8018e8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8018e90:	68bb      	ldr	r3, [r7, #8]
 8018e92:	f023 0201 	bic.w	r2, r3, #1
 8018e96:	68fb      	ldr	r3, [r7, #12]
 8018e98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018e9a:	68fb      	ldr	r3, [r7, #12]
 8018e9c:	3b04      	subs	r3, #4
 8018e9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8018ea0:	4a0c      	ldr	r2, [pc, #48]	@ (8018ed4 <pxPortInitialiseStack+0x64>)
 8018ea2:	68fb      	ldr	r3, [r7, #12]
 8018ea4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8018ea6:	68fb      	ldr	r3, [r7, #12]
 8018ea8:	3b14      	subs	r3, #20
 8018eaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8018eac:	687a      	ldr	r2, [r7, #4]
 8018eae:	68fb      	ldr	r3, [r7, #12]
 8018eb0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8018eb2:	68fb      	ldr	r3, [r7, #12]
 8018eb4:	3b04      	subs	r3, #4
 8018eb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8018eb8:	68fb      	ldr	r3, [r7, #12]
 8018eba:	f06f 0202 	mvn.w	r2, #2
 8018ebe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8018ec0:	68fb      	ldr	r3, [r7, #12]
 8018ec2:	3b20      	subs	r3, #32
 8018ec4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8018ec6:	68fb      	ldr	r3, [r7, #12]
}
 8018ec8:	4618      	mov	r0, r3
 8018eca:	3714      	adds	r7, #20
 8018ecc:	46bd      	mov	sp, r7
 8018ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ed2:	4770      	bx	lr
 8018ed4:	08018ed9 	.word	0x08018ed9

08018ed8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8018ed8:	b480      	push	{r7}
 8018eda:	b085      	sub	sp, #20
 8018edc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8018ede:	2300      	movs	r3, #0
 8018ee0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8018ee2:	4b13      	ldr	r3, [pc, #76]	@ (8018f30 <prvTaskExitError+0x58>)
 8018ee4:	681b      	ldr	r3, [r3, #0]
 8018ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018eea:	d00b      	beq.n	8018f04 <prvTaskExitError+0x2c>
	__asm volatile
 8018eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018ef0:	f383 8811 	msr	BASEPRI, r3
 8018ef4:	f3bf 8f6f 	isb	sy
 8018ef8:	f3bf 8f4f 	dsb	sy
 8018efc:	60fb      	str	r3, [r7, #12]
}
 8018efe:	bf00      	nop
 8018f00:	bf00      	nop
 8018f02:	e7fd      	b.n	8018f00 <prvTaskExitError+0x28>
	__asm volatile
 8018f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018f08:	f383 8811 	msr	BASEPRI, r3
 8018f0c:	f3bf 8f6f 	isb	sy
 8018f10:	f3bf 8f4f 	dsb	sy
 8018f14:	60bb      	str	r3, [r7, #8]
}
 8018f16:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8018f18:	bf00      	nop
 8018f1a:	687b      	ldr	r3, [r7, #4]
 8018f1c:	2b00      	cmp	r3, #0
 8018f1e:	d0fc      	beq.n	8018f1a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8018f20:	bf00      	nop
 8018f22:	bf00      	nop
 8018f24:	3714      	adds	r7, #20
 8018f26:	46bd      	mov	sp, r7
 8018f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f2c:	4770      	bx	lr
 8018f2e:	bf00      	nop
 8018f30:	240000a4 	.word	0x240000a4
	...

08018f40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8018f40:	4b07      	ldr	r3, [pc, #28]	@ (8018f60 <pxCurrentTCBConst2>)
 8018f42:	6819      	ldr	r1, [r3, #0]
 8018f44:	6808      	ldr	r0, [r1, #0]
 8018f46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f4a:	f380 8809 	msr	PSP, r0
 8018f4e:	f3bf 8f6f 	isb	sy
 8018f52:	f04f 0000 	mov.w	r0, #0
 8018f56:	f380 8811 	msr	BASEPRI, r0
 8018f5a:	4770      	bx	lr
 8018f5c:	f3af 8000 	nop.w

08018f60 <pxCurrentTCBConst2>:
 8018f60:	24002e2c 	.word	0x24002e2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8018f64:	bf00      	nop
 8018f66:	bf00      	nop

08018f68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018f68:	4808      	ldr	r0, [pc, #32]	@ (8018f8c <prvPortStartFirstTask+0x24>)
 8018f6a:	6800      	ldr	r0, [r0, #0]
 8018f6c:	6800      	ldr	r0, [r0, #0]
 8018f6e:	f380 8808 	msr	MSP, r0
 8018f72:	f04f 0000 	mov.w	r0, #0
 8018f76:	f380 8814 	msr	CONTROL, r0
 8018f7a:	b662      	cpsie	i
 8018f7c:	b661      	cpsie	f
 8018f7e:	f3bf 8f4f 	dsb	sy
 8018f82:	f3bf 8f6f 	isb	sy
 8018f86:	df00      	svc	0
 8018f88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8018f8a:	bf00      	nop
 8018f8c:	e000ed08 	.word	0xe000ed08

08018f90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8018f90:	b580      	push	{r7, lr}
 8018f92:	b086      	sub	sp, #24
 8018f94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8018f96:	4b47      	ldr	r3, [pc, #284]	@ (80190b4 <xPortStartScheduler+0x124>)
 8018f98:	681b      	ldr	r3, [r3, #0]
 8018f9a:	4a47      	ldr	r2, [pc, #284]	@ (80190b8 <xPortStartScheduler+0x128>)
 8018f9c:	4293      	cmp	r3, r2
 8018f9e:	d10b      	bne.n	8018fb8 <xPortStartScheduler+0x28>
	__asm volatile
 8018fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018fa4:	f383 8811 	msr	BASEPRI, r3
 8018fa8:	f3bf 8f6f 	isb	sy
 8018fac:	f3bf 8f4f 	dsb	sy
 8018fb0:	60fb      	str	r3, [r7, #12]
}
 8018fb2:	bf00      	nop
 8018fb4:	bf00      	nop
 8018fb6:	e7fd      	b.n	8018fb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8018fb8:	4b3e      	ldr	r3, [pc, #248]	@ (80190b4 <xPortStartScheduler+0x124>)
 8018fba:	681b      	ldr	r3, [r3, #0]
 8018fbc:	4a3f      	ldr	r2, [pc, #252]	@ (80190bc <xPortStartScheduler+0x12c>)
 8018fbe:	4293      	cmp	r3, r2
 8018fc0:	d10b      	bne.n	8018fda <xPortStartScheduler+0x4a>
	__asm volatile
 8018fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018fc6:	f383 8811 	msr	BASEPRI, r3
 8018fca:	f3bf 8f6f 	isb	sy
 8018fce:	f3bf 8f4f 	dsb	sy
 8018fd2:	613b      	str	r3, [r7, #16]
}
 8018fd4:	bf00      	nop
 8018fd6:	bf00      	nop
 8018fd8:	e7fd      	b.n	8018fd6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8018fda:	4b39      	ldr	r3, [pc, #228]	@ (80190c0 <xPortStartScheduler+0x130>)
 8018fdc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8018fde:	697b      	ldr	r3, [r7, #20]
 8018fe0:	781b      	ldrb	r3, [r3, #0]
 8018fe2:	b2db      	uxtb	r3, r3
 8018fe4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8018fe6:	697b      	ldr	r3, [r7, #20]
 8018fe8:	22ff      	movs	r2, #255	@ 0xff
 8018fea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018fec:	697b      	ldr	r3, [r7, #20]
 8018fee:	781b      	ldrb	r3, [r3, #0]
 8018ff0:	b2db      	uxtb	r3, r3
 8018ff2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018ff4:	78fb      	ldrb	r3, [r7, #3]
 8018ff6:	b2db      	uxtb	r3, r3
 8018ff8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8018ffc:	b2da      	uxtb	r2, r3
 8018ffe:	4b31      	ldr	r3, [pc, #196]	@ (80190c4 <xPortStartScheduler+0x134>)
 8019000:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8019002:	4b31      	ldr	r3, [pc, #196]	@ (80190c8 <xPortStartScheduler+0x138>)
 8019004:	2207      	movs	r2, #7
 8019006:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019008:	e009      	b.n	801901e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801900a:	4b2f      	ldr	r3, [pc, #188]	@ (80190c8 <xPortStartScheduler+0x138>)
 801900c:	681b      	ldr	r3, [r3, #0]
 801900e:	3b01      	subs	r3, #1
 8019010:	4a2d      	ldr	r2, [pc, #180]	@ (80190c8 <xPortStartScheduler+0x138>)
 8019012:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8019014:	78fb      	ldrb	r3, [r7, #3]
 8019016:	b2db      	uxtb	r3, r3
 8019018:	005b      	lsls	r3, r3, #1
 801901a:	b2db      	uxtb	r3, r3
 801901c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801901e:	78fb      	ldrb	r3, [r7, #3]
 8019020:	b2db      	uxtb	r3, r3
 8019022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019026:	2b80      	cmp	r3, #128	@ 0x80
 8019028:	d0ef      	beq.n	801900a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801902a:	4b27      	ldr	r3, [pc, #156]	@ (80190c8 <xPortStartScheduler+0x138>)
 801902c:	681b      	ldr	r3, [r3, #0]
 801902e:	f1c3 0307 	rsb	r3, r3, #7
 8019032:	2b04      	cmp	r3, #4
 8019034:	d00b      	beq.n	801904e <xPortStartScheduler+0xbe>
	__asm volatile
 8019036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801903a:	f383 8811 	msr	BASEPRI, r3
 801903e:	f3bf 8f6f 	isb	sy
 8019042:	f3bf 8f4f 	dsb	sy
 8019046:	60bb      	str	r3, [r7, #8]
}
 8019048:	bf00      	nop
 801904a:	bf00      	nop
 801904c:	e7fd      	b.n	801904a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801904e:	4b1e      	ldr	r3, [pc, #120]	@ (80190c8 <xPortStartScheduler+0x138>)
 8019050:	681b      	ldr	r3, [r3, #0]
 8019052:	021b      	lsls	r3, r3, #8
 8019054:	4a1c      	ldr	r2, [pc, #112]	@ (80190c8 <xPortStartScheduler+0x138>)
 8019056:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8019058:	4b1b      	ldr	r3, [pc, #108]	@ (80190c8 <xPortStartScheduler+0x138>)
 801905a:	681b      	ldr	r3, [r3, #0]
 801905c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8019060:	4a19      	ldr	r2, [pc, #100]	@ (80190c8 <xPortStartScheduler+0x138>)
 8019062:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	b2da      	uxtb	r2, r3
 8019068:	697b      	ldr	r3, [r7, #20]
 801906a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801906c:	4b17      	ldr	r3, [pc, #92]	@ (80190cc <xPortStartScheduler+0x13c>)
 801906e:	681b      	ldr	r3, [r3, #0]
 8019070:	4a16      	ldr	r2, [pc, #88]	@ (80190cc <xPortStartScheduler+0x13c>)
 8019072:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8019076:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8019078:	4b14      	ldr	r3, [pc, #80]	@ (80190cc <xPortStartScheduler+0x13c>)
 801907a:	681b      	ldr	r3, [r3, #0]
 801907c:	4a13      	ldr	r2, [pc, #76]	@ (80190cc <xPortStartScheduler+0x13c>)
 801907e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8019082:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8019084:	f000 f8da 	bl	801923c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8019088:	4b11      	ldr	r3, [pc, #68]	@ (80190d0 <xPortStartScheduler+0x140>)
 801908a:	2200      	movs	r2, #0
 801908c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801908e:	f000 f8f9 	bl	8019284 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8019092:	4b10      	ldr	r3, [pc, #64]	@ (80190d4 <xPortStartScheduler+0x144>)
 8019094:	681b      	ldr	r3, [r3, #0]
 8019096:	4a0f      	ldr	r2, [pc, #60]	@ (80190d4 <xPortStartScheduler+0x144>)
 8019098:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801909c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801909e:	f7ff ff63 	bl	8018f68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80190a2:	f7ff fa7d 	bl	80185a0 <vTaskSwitchContext>
	prvTaskExitError();
 80190a6:	f7ff ff17 	bl	8018ed8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80190aa:	2300      	movs	r3, #0
}
 80190ac:	4618      	mov	r0, r3
 80190ae:	3718      	adds	r7, #24
 80190b0:	46bd      	mov	sp, r7
 80190b2:	bd80      	pop	{r7, pc}
 80190b4:	e000ed00 	.word	0xe000ed00
 80190b8:	410fc271 	.word	0x410fc271
 80190bc:	410fc270 	.word	0x410fc270
 80190c0:	e000e400 	.word	0xe000e400
 80190c4:	24002f58 	.word	0x24002f58
 80190c8:	24002f5c 	.word	0x24002f5c
 80190cc:	e000ed20 	.word	0xe000ed20
 80190d0:	240000a4 	.word	0x240000a4
 80190d4:	e000ef34 	.word	0xe000ef34

080190d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80190d8:	b480      	push	{r7}
 80190da:	b083      	sub	sp, #12
 80190dc:	af00      	add	r7, sp, #0
	__asm volatile
 80190de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80190e2:	f383 8811 	msr	BASEPRI, r3
 80190e6:	f3bf 8f6f 	isb	sy
 80190ea:	f3bf 8f4f 	dsb	sy
 80190ee:	607b      	str	r3, [r7, #4]
}
 80190f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80190f2:	4b10      	ldr	r3, [pc, #64]	@ (8019134 <vPortEnterCritical+0x5c>)
 80190f4:	681b      	ldr	r3, [r3, #0]
 80190f6:	3301      	adds	r3, #1
 80190f8:	4a0e      	ldr	r2, [pc, #56]	@ (8019134 <vPortEnterCritical+0x5c>)
 80190fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80190fc:	4b0d      	ldr	r3, [pc, #52]	@ (8019134 <vPortEnterCritical+0x5c>)
 80190fe:	681b      	ldr	r3, [r3, #0]
 8019100:	2b01      	cmp	r3, #1
 8019102:	d110      	bne.n	8019126 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8019104:	4b0c      	ldr	r3, [pc, #48]	@ (8019138 <vPortEnterCritical+0x60>)
 8019106:	681b      	ldr	r3, [r3, #0]
 8019108:	b2db      	uxtb	r3, r3
 801910a:	2b00      	cmp	r3, #0
 801910c:	d00b      	beq.n	8019126 <vPortEnterCritical+0x4e>
	__asm volatile
 801910e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019112:	f383 8811 	msr	BASEPRI, r3
 8019116:	f3bf 8f6f 	isb	sy
 801911a:	f3bf 8f4f 	dsb	sy
 801911e:	603b      	str	r3, [r7, #0]
}
 8019120:	bf00      	nop
 8019122:	bf00      	nop
 8019124:	e7fd      	b.n	8019122 <vPortEnterCritical+0x4a>
	}
}
 8019126:	bf00      	nop
 8019128:	370c      	adds	r7, #12
 801912a:	46bd      	mov	sp, r7
 801912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019130:	4770      	bx	lr
 8019132:	bf00      	nop
 8019134:	240000a4 	.word	0x240000a4
 8019138:	e000ed04 	.word	0xe000ed04

0801913c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801913c:	b480      	push	{r7}
 801913e:	b083      	sub	sp, #12
 8019140:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8019142:	4b12      	ldr	r3, [pc, #72]	@ (801918c <vPortExitCritical+0x50>)
 8019144:	681b      	ldr	r3, [r3, #0]
 8019146:	2b00      	cmp	r3, #0
 8019148:	d10b      	bne.n	8019162 <vPortExitCritical+0x26>
	__asm volatile
 801914a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801914e:	f383 8811 	msr	BASEPRI, r3
 8019152:	f3bf 8f6f 	isb	sy
 8019156:	f3bf 8f4f 	dsb	sy
 801915a:	607b      	str	r3, [r7, #4]
}
 801915c:	bf00      	nop
 801915e:	bf00      	nop
 8019160:	e7fd      	b.n	801915e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8019162:	4b0a      	ldr	r3, [pc, #40]	@ (801918c <vPortExitCritical+0x50>)
 8019164:	681b      	ldr	r3, [r3, #0]
 8019166:	3b01      	subs	r3, #1
 8019168:	4a08      	ldr	r2, [pc, #32]	@ (801918c <vPortExitCritical+0x50>)
 801916a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801916c:	4b07      	ldr	r3, [pc, #28]	@ (801918c <vPortExitCritical+0x50>)
 801916e:	681b      	ldr	r3, [r3, #0]
 8019170:	2b00      	cmp	r3, #0
 8019172:	d105      	bne.n	8019180 <vPortExitCritical+0x44>
 8019174:	2300      	movs	r3, #0
 8019176:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019178:	683b      	ldr	r3, [r7, #0]
 801917a:	f383 8811 	msr	BASEPRI, r3
}
 801917e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8019180:	bf00      	nop
 8019182:	370c      	adds	r7, #12
 8019184:	46bd      	mov	sp, r7
 8019186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801918a:	4770      	bx	lr
 801918c:	240000a4 	.word	0x240000a4

08019190 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8019190:	f3ef 8009 	mrs	r0, PSP
 8019194:	f3bf 8f6f 	isb	sy
 8019198:	4b15      	ldr	r3, [pc, #84]	@ (80191f0 <pxCurrentTCBConst>)
 801919a:	681a      	ldr	r2, [r3, #0]
 801919c:	f01e 0f10 	tst.w	lr, #16
 80191a0:	bf08      	it	eq
 80191a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80191a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191aa:	6010      	str	r0, [r2, #0]
 80191ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80191b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80191b4:	f380 8811 	msr	BASEPRI, r0
 80191b8:	f3bf 8f4f 	dsb	sy
 80191bc:	f3bf 8f6f 	isb	sy
 80191c0:	f7ff f9ee 	bl	80185a0 <vTaskSwitchContext>
 80191c4:	f04f 0000 	mov.w	r0, #0
 80191c8:	f380 8811 	msr	BASEPRI, r0
 80191cc:	bc09      	pop	{r0, r3}
 80191ce:	6819      	ldr	r1, [r3, #0]
 80191d0:	6808      	ldr	r0, [r1, #0]
 80191d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191d6:	f01e 0f10 	tst.w	lr, #16
 80191da:	bf08      	it	eq
 80191dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80191e0:	f380 8809 	msr	PSP, r0
 80191e4:	f3bf 8f6f 	isb	sy
 80191e8:	4770      	bx	lr
 80191ea:	bf00      	nop
 80191ec:	f3af 8000 	nop.w

080191f0 <pxCurrentTCBConst>:
 80191f0:	24002e2c 	.word	0x24002e2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80191f4:	bf00      	nop
 80191f6:	bf00      	nop

080191f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80191f8:	b580      	push	{r7, lr}
 80191fa:	b082      	sub	sp, #8
 80191fc:	af00      	add	r7, sp, #0
	__asm volatile
 80191fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019202:	f383 8811 	msr	BASEPRI, r3
 8019206:	f3bf 8f6f 	isb	sy
 801920a:	f3bf 8f4f 	dsb	sy
 801920e:	607b      	str	r3, [r7, #4]
}
 8019210:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8019212:	f7ff f90b 	bl	801842c <xTaskIncrementTick>
 8019216:	4603      	mov	r3, r0
 8019218:	2b00      	cmp	r3, #0
 801921a:	d003      	beq.n	8019224 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801921c:	4b06      	ldr	r3, [pc, #24]	@ (8019238 <SysTick_Handler+0x40>)
 801921e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019222:	601a      	str	r2, [r3, #0]
 8019224:	2300      	movs	r3, #0
 8019226:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019228:	683b      	ldr	r3, [r7, #0]
 801922a:	f383 8811 	msr	BASEPRI, r3
}
 801922e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8019230:	bf00      	nop
 8019232:	3708      	adds	r7, #8
 8019234:	46bd      	mov	sp, r7
 8019236:	bd80      	pop	{r7, pc}
 8019238:	e000ed04 	.word	0xe000ed04

0801923c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801923c:	b480      	push	{r7}
 801923e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019240:	4b0b      	ldr	r3, [pc, #44]	@ (8019270 <vPortSetupTimerInterrupt+0x34>)
 8019242:	2200      	movs	r2, #0
 8019244:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8019246:	4b0b      	ldr	r3, [pc, #44]	@ (8019274 <vPortSetupTimerInterrupt+0x38>)
 8019248:	2200      	movs	r2, #0
 801924a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801924c:	4b0a      	ldr	r3, [pc, #40]	@ (8019278 <vPortSetupTimerInterrupt+0x3c>)
 801924e:	681b      	ldr	r3, [r3, #0]
 8019250:	4a0a      	ldr	r2, [pc, #40]	@ (801927c <vPortSetupTimerInterrupt+0x40>)
 8019252:	fba2 2303 	umull	r2, r3, r2, r3
 8019256:	099b      	lsrs	r3, r3, #6
 8019258:	4a09      	ldr	r2, [pc, #36]	@ (8019280 <vPortSetupTimerInterrupt+0x44>)
 801925a:	3b01      	subs	r3, #1
 801925c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801925e:	4b04      	ldr	r3, [pc, #16]	@ (8019270 <vPortSetupTimerInterrupt+0x34>)
 8019260:	2207      	movs	r2, #7
 8019262:	601a      	str	r2, [r3, #0]
}
 8019264:	bf00      	nop
 8019266:	46bd      	mov	sp, r7
 8019268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801926c:	4770      	bx	lr
 801926e:	bf00      	nop
 8019270:	e000e010 	.word	0xe000e010
 8019274:	e000e018 	.word	0xe000e018
 8019278:	24000000 	.word	0x24000000
 801927c:	10624dd3 	.word	0x10624dd3
 8019280:	e000e014 	.word	0xe000e014

08019284 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8019284:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8019294 <vPortEnableVFP+0x10>
 8019288:	6801      	ldr	r1, [r0, #0]
 801928a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801928e:	6001      	str	r1, [r0, #0]
 8019290:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8019292:	bf00      	nop
 8019294:	e000ed88 	.word	0xe000ed88

08019298 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8019298:	b480      	push	{r7}
 801929a:	b085      	sub	sp, #20
 801929c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801929e:	f3ef 8305 	mrs	r3, IPSR
 80192a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80192a4:	68fb      	ldr	r3, [r7, #12]
 80192a6:	2b0f      	cmp	r3, #15
 80192a8:	d915      	bls.n	80192d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80192aa:	4a18      	ldr	r2, [pc, #96]	@ (801930c <vPortValidateInterruptPriority+0x74>)
 80192ac:	68fb      	ldr	r3, [r7, #12]
 80192ae:	4413      	add	r3, r2
 80192b0:	781b      	ldrb	r3, [r3, #0]
 80192b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80192b4:	4b16      	ldr	r3, [pc, #88]	@ (8019310 <vPortValidateInterruptPriority+0x78>)
 80192b6:	781b      	ldrb	r3, [r3, #0]
 80192b8:	7afa      	ldrb	r2, [r7, #11]
 80192ba:	429a      	cmp	r2, r3
 80192bc:	d20b      	bcs.n	80192d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80192be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80192c2:	f383 8811 	msr	BASEPRI, r3
 80192c6:	f3bf 8f6f 	isb	sy
 80192ca:	f3bf 8f4f 	dsb	sy
 80192ce:	607b      	str	r3, [r7, #4]
}
 80192d0:	bf00      	nop
 80192d2:	bf00      	nop
 80192d4:	e7fd      	b.n	80192d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80192d6:	4b0f      	ldr	r3, [pc, #60]	@ (8019314 <vPortValidateInterruptPriority+0x7c>)
 80192d8:	681b      	ldr	r3, [r3, #0]
 80192da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80192de:	4b0e      	ldr	r3, [pc, #56]	@ (8019318 <vPortValidateInterruptPriority+0x80>)
 80192e0:	681b      	ldr	r3, [r3, #0]
 80192e2:	429a      	cmp	r2, r3
 80192e4:	d90b      	bls.n	80192fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80192e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80192ea:	f383 8811 	msr	BASEPRI, r3
 80192ee:	f3bf 8f6f 	isb	sy
 80192f2:	f3bf 8f4f 	dsb	sy
 80192f6:	603b      	str	r3, [r7, #0]
}
 80192f8:	bf00      	nop
 80192fa:	bf00      	nop
 80192fc:	e7fd      	b.n	80192fa <vPortValidateInterruptPriority+0x62>
	}
 80192fe:	bf00      	nop
 8019300:	3714      	adds	r7, #20
 8019302:	46bd      	mov	sp, r7
 8019304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019308:	4770      	bx	lr
 801930a:	bf00      	nop
 801930c:	e000e3f0 	.word	0xe000e3f0
 8019310:	24002f58 	.word	0x24002f58
 8019314:	e000ed0c 	.word	0xe000ed0c
 8019318:	24002f5c 	.word	0x24002f5c

0801931c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801931c:	b580      	push	{r7, lr}
 801931e:	b08a      	sub	sp, #40	@ 0x28
 8019320:	af00      	add	r7, sp, #0
 8019322:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8019324:	2300      	movs	r3, #0
 8019326:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8019328:	f7fe ffd4 	bl	80182d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801932c:	4b5c      	ldr	r3, [pc, #368]	@ (80194a0 <pvPortMalloc+0x184>)
 801932e:	681b      	ldr	r3, [r3, #0]
 8019330:	2b00      	cmp	r3, #0
 8019332:	d101      	bne.n	8019338 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8019334:	f000 f924 	bl	8019580 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8019338:	4b5a      	ldr	r3, [pc, #360]	@ (80194a4 <pvPortMalloc+0x188>)
 801933a:	681a      	ldr	r2, [r3, #0]
 801933c:	687b      	ldr	r3, [r7, #4]
 801933e:	4013      	ands	r3, r2
 8019340:	2b00      	cmp	r3, #0
 8019342:	f040 8095 	bne.w	8019470 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8019346:	687b      	ldr	r3, [r7, #4]
 8019348:	2b00      	cmp	r3, #0
 801934a:	d01e      	beq.n	801938a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801934c:	2208      	movs	r2, #8
 801934e:	687b      	ldr	r3, [r7, #4]
 8019350:	4413      	add	r3, r2
 8019352:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8019354:	687b      	ldr	r3, [r7, #4]
 8019356:	f003 0307 	and.w	r3, r3, #7
 801935a:	2b00      	cmp	r3, #0
 801935c:	d015      	beq.n	801938a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801935e:	687b      	ldr	r3, [r7, #4]
 8019360:	f023 0307 	bic.w	r3, r3, #7
 8019364:	3308      	adds	r3, #8
 8019366:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019368:	687b      	ldr	r3, [r7, #4]
 801936a:	f003 0307 	and.w	r3, r3, #7
 801936e:	2b00      	cmp	r3, #0
 8019370:	d00b      	beq.n	801938a <pvPortMalloc+0x6e>
	__asm volatile
 8019372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019376:	f383 8811 	msr	BASEPRI, r3
 801937a:	f3bf 8f6f 	isb	sy
 801937e:	f3bf 8f4f 	dsb	sy
 8019382:	617b      	str	r3, [r7, #20]
}
 8019384:	bf00      	nop
 8019386:	bf00      	nop
 8019388:	e7fd      	b.n	8019386 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	2b00      	cmp	r3, #0
 801938e:	d06f      	beq.n	8019470 <pvPortMalloc+0x154>
 8019390:	4b45      	ldr	r3, [pc, #276]	@ (80194a8 <pvPortMalloc+0x18c>)
 8019392:	681b      	ldr	r3, [r3, #0]
 8019394:	687a      	ldr	r2, [r7, #4]
 8019396:	429a      	cmp	r2, r3
 8019398:	d86a      	bhi.n	8019470 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801939a:	4b44      	ldr	r3, [pc, #272]	@ (80194ac <pvPortMalloc+0x190>)
 801939c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801939e:	4b43      	ldr	r3, [pc, #268]	@ (80194ac <pvPortMalloc+0x190>)
 80193a0:	681b      	ldr	r3, [r3, #0]
 80193a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80193a4:	e004      	b.n	80193b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80193a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80193aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193ac:	681b      	ldr	r3, [r3, #0]
 80193ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80193b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193b2:	685b      	ldr	r3, [r3, #4]
 80193b4:	687a      	ldr	r2, [r7, #4]
 80193b6:	429a      	cmp	r2, r3
 80193b8:	d903      	bls.n	80193c2 <pvPortMalloc+0xa6>
 80193ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193bc:	681b      	ldr	r3, [r3, #0]
 80193be:	2b00      	cmp	r3, #0
 80193c0:	d1f1      	bne.n	80193a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80193c2:	4b37      	ldr	r3, [pc, #220]	@ (80194a0 <pvPortMalloc+0x184>)
 80193c4:	681b      	ldr	r3, [r3, #0]
 80193c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80193c8:	429a      	cmp	r2, r3
 80193ca:	d051      	beq.n	8019470 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80193cc:	6a3b      	ldr	r3, [r7, #32]
 80193ce:	681b      	ldr	r3, [r3, #0]
 80193d0:	2208      	movs	r2, #8
 80193d2:	4413      	add	r3, r2
 80193d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80193d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193d8:	681a      	ldr	r2, [r3, #0]
 80193da:	6a3b      	ldr	r3, [r7, #32]
 80193dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80193de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193e0:	685a      	ldr	r2, [r3, #4]
 80193e2:	687b      	ldr	r3, [r7, #4]
 80193e4:	1ad2      	subs	r2, r2, r3
 80193e6:	2308      	movs	r3, #8
 80193e8:	005b      	lsls	r3, r3, #1
 80193ea:	429a      	cmp	r2, r3
 80193ec:	d920      	bls.n	8019430 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80193ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80193f0:	687b      	ldr	r3, [r7, #4]
 80193f2:	4413      	add	r3, r2
 80193f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80193f6:	69bb      	ldr	r3, [r7, #24]
 80193f8:	f003 0307 	and.w	r3, r3, #7
 80193fc:	2b00      	cmp	r3, #0
 80193fe:	d00b      	beq.n	8019418 <pvPortMalloc+0xfc>
	__asm volatile
 8019400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019404:	f383 8811 	msr	BASEPRI, r3
 8019408:	f3bf 8f6f 	isb	sy
 801940c:	f3bf 8f4f 	dsb	sy
 8019410:	613b      	str	r3, [r7, #16]
}
 8019412:	bf00      	nop
 8019414:	bf00      	nop
 8019416:	e7fd      	b.n	8019414 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8019418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801941a:	685a      	ldr	r2, [r3, #4]
 801941c:	687b      	ldr	r3, [r7, #4]
 801941e:	1ad2      	subs	r2, r2, r3
 8019420:	69bb      	ldr	r3, [r7, #24]
 8019422:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8019424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019426:	687a      	ldr	r2, [r7, #4]
 8019428:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801942a:	69b8      	ldr	r0, [r7, #24]
 801942c:	f000 f90a 	bl	8019644 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8019430:	4b1d      	ldr	r3, [pc, #116]	@ (80194a8 <pvPortMalloc+0x18c>)
 8019432:	681a      	ldr	r2, [r3, #0]
 8019434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019436:	685b      	ldr	r3, [r3, #4]
 8019438:	1ad3      	subs	r3, r2, r3
 801943a:	4a1b      	ldr	r2, [pc, #108]	@ (80194a8 <pvPortMalloc+0x18c>)
 801943c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801943e:	4b1a      	ldr	r3, [pc, #104]	@ (80194a8 <pvPortMalloc+0x18c>)
 8019440:	681a      	ldr	r2, [r3, #0]
 8019442:	4b1b      	ldr	r3, [pc, #108]	@ (80194b0 <pvPortMalloc+0x194>)
 8019444:	681b      	ldr	r3, [r3, #0]
 8019446:	429a      	cmp	r2, r3
 8019448:	d203      	bcs.n	8019452 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801944a:	4b17      	ldr	r3, [pc, #92]	@ (80194a8 <pvPortMalloc+0x18c>)
 801944c:	681b      	ldr	r3, [r3, #0]
 801944e:	4a18      	ldr	r2, [pc, #96]	@ (80194b0 <pvPortMalloc+0x194>)
 8019450:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8019452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019454:	685a      	ldr	r2, [r3, #4]
 8019456:	4b13      	ldr	r3, [pc, #76]	@ (80194a4 <pvPortMalloc+0x188>)
 8019458:	681b      	ldr	r3, [r3, #0]
 801945a:	431a      	orrs	r2, r3
 801945c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801945e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8019460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019462:	2200      	movs	r2, #0
 8019464:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8019466:	4b13      	ldr	r3, [pc, #76]	@ (80194b4 <pvPortMalloc+0x198>)
 8019468:	681b      	ldr	r3, [r3, #0]
 801946a:	3301      	adds	r3, #1
 801946c:	4a11      	ldr	r2, [pc, #68]	@ (80194b4 <pvPortMalloc+0x198>)
 801946e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8019470:	f7fe ff3e 	bl	80182f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8019474:	69fb      	ldr	r3, [r7, #28]
 8019476:	f003 0307 	and.w	r3, r3, #7
 801947a:	2b00      	cmp	r3, #0
 801947c:	d00b      	beq.n	8019496 <pvPortMalloc+0x17a>
	__asm volatile
 801947e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019482:	f383 8811 	msr	BASEPRI, r3
 8019486:	f3bf 8f6f 	isb	sy
 801948a:	f3bf 8f4f 	dsb	sy
 801948e:	60fb      	str	r3, [r7, #12]
}
 8019490:	bf00      	nop
 8019492:	bf00      	nop
 8019494:	e7fd      	b.n	8019492 <pvPortMalloc+0x176>
	return pvReturn;
 8019496:	69fb      	ldr	r3, [r7, #28]
}
 8019498:	4618      	mov	r0, r3
 801949a:	3728      	adds	r7, #40	@ 0x28
 801949c:	46bd      	mov	sp, r7
 801949e:	bd80      	pop	{r7, pc}
 80194a0:	24005768 	.word	0x24005768
 80194a4:	2400577c 	.word	0x2400577c
 80194a8:	2400576c 	.word	0x2400576c
 80194ac:	24005760 	.word	0x24005760
 80194b0:	24005770 	.word	0x24005770
 80194b4:	24005774 	.word	0x24005774

080194b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80194b8:	b580      	push	{r7, lr}
 80194ba:	b086      	sub	sp, #24
 80194bc:	af00      	add	r7, sp, #0
 80194be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80194c4:	687b      	ldr	r3, [r7, #4]
 80194c6:	2b00      	cmp	r3, #0
 80194c8:	d04f      	beq.n	801956a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80194ca:	2308      	movs	r3, #8
 80194cc:	425b      	negs	r3, r3
 80194ce:	697a      	ldr	r2, [r7, #20]
 80194d0:	4413      	add	r3, r2
 80194d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80194d4:	697b      	ldr	r3, [r7, #20]
 80194d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80194d8:	693b      	ldr	r3, [r7, #16]
 80194da:	685a      	ldr	r2, [r3, #4]
 80194dc:	4b25      	ldr	r3, [pc, #148]	@ (8019574 <vPortFree+0xbc>)
 80194de:	681b      	ldr	r3, [r3, #0]
 80194e0:	4013      	ands	r3, r2
 80194e2:	2b00      	cmp	r3, #0
 80194e4:	d10b      	bne.n	80194fe <vPortFree+0x46>
	__asm volatile
 80194e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80194ea:	f383 8811 	msr	BASEPRI, r3
 80194ee:	f3bf 8f6f 	isb	sy
 80194f2:	f3bf 8f4f 	dsb	sy
 80194f6:	60fb      	str	r3, [r7, #12]
}
 80194f8:	bf00      	nop
 80194fa:	bf00      	nop
 80194fc:	e7fd      	b.n	80194fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80194fe:	693b      	ldr	r3, [r7, #16]
 8019500:	681b      	ldr	r3, [r3, #0]
 8019502:	2b00      	cmp	r3, #0
 8019504:	d00b      	beq.n	801951e <vPortFree+0x66>
	__asm volatile
 8019506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801950a:	f383 8811 	msr	BASEPRI, r3
 801950e:	f3bf 8f6f 	isb	sy
 8019512:	f3bf 8f4f 	dsb	sy
 8019516:	60bb      	str	r3, [r7, #8]
}
 8019518:	bf00      	nop
 801951a:	bf00      	nop
 801951c:	e7fd      	b.n	801951a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801951e:	693b      	ldr	r3, [r7, #16]
 8019520:	685a      	ldr	r2, [r3, #4]
 8019522:	4b14      	ldr	r3, [pc, #80]	@ (8019574 <vPortFree+0xbc>)
 8019524:	681b      	ldr	r3, [r3, #0]
 8019526:	4013      	ands	r3, r2
 8019528:	2b00      	cmp	r3, #0
 801952a:	d01e      	beq.n	801956a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801952c:	693b      	ldr	r3, [r7, #16]
 801952e:	681b      	ldr	r3, [r3, #0]
 8019530:	2b00      	cmp	r3, #0
 8019532:	d11a      	bne.n	801956a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019534:	693b      	ldr	r3, [r7, #16]
 8019536:	685a      	ldr	r2, [r3, #4]
 8019538:	4b0e      	ldr	r3, [pc, #56]	@ (8019574 <vPortFree+0xbc>)
 801953a:	681b      	ldr	r3, [r3, #0]
 801953c:	43db      	mvns	r3, r3
 801953e:	401a      	ands	r2, r3
 8019540:	693b      	ldr	r3, [r7, #16]
 8019542:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019544:	f7fe fec6 	bl	80182d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8019548:	693b      	ldr	r3, [r7, #16]
 801954a:	685a      	ldr	r2, [r3, #4]
 801954c:	4b0a      	ldr	r3, [pc, #40]	@ (8019578 <vPortFree+0xc0>)
 801954e:	681b      	ldr	r3, [r3, #0]
 8019550:	4413      	add	r3, r2
 8019552:	4a09      	ldr	r2, [pc, #36]	@ (8019578 <vPortFree+0xc0>)
 8019554:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8019556:	6938      	ldr	r0, [r7, #16]
 8019558:	f000 f874 	bl	8019644 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801955c:	4b07      	ldr	r3, [pc, #28]	@ (801957c <vPortFree+0xc4>)
 801955e:	681b      	ldr	r3, [r3, #0]
 8019560:	3301      	adds	r3, #1
 8019562:	4a06      	ldr	r2, [pc, #24]	@ (801957c <vPortFree+0xc4>)
 8019564:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8019566:	f7fe fec3 	bl	80182f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801956a:	bf00      	nop
 801956c:	3718      	adds	r7, #24
 801956e:	46bd      	mov	sp, r7
 8019570:	bd80      	pop	{r7, pc}
 8019572:	bf00      	nop
 8019574:	2400577c 	.word	0x2400577c
 8019578:	2400576c 	.word	0x2400576c
 801957c:	24005778 	.word	0x24005778

08019580 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8019580:	b480      	push	{r7}
 8019582:	b085      	sub	sp, #20
 8019584:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8019586:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 801958a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801958c:	4b27      	ldr	r3, [pc, #156]	@ (801962c <prvHeapInit+0xac>)
 801958e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8019590:	68fb      	ldr	r3, [r7, #12]
 8019592:	f003 0307 	and.w	r3, r3, #7
 8019596:	2b00      	cmp	r3, #0
 8019598:	d00c      	beq.n	80195b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801959a:	68fb      	ldr	r3, [r7, #12]
 801959c:	3307      	adds	r3, #7
 801959e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80195a0:	68fb      	ldr	r3, [r7, #12]
 80195a2:	f023 0307 	bic.w	r3, r3, #7
 80195a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80195a8:	68ba      	ldr	r2, [r7, #8]
 80195aa:	68fb      	ldr	r3, [r7, #12]
 80195ac:	1ad3      	subs	r3, r2, r3
 80195ae:	4a1f      	ldr	r2, [pc, #124]	@ (801962c <prvHeapInit+0xac>)
 80195b0:	4413      	add	r3, r2
 80195b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80195b4:	68fb      	ldr	r3, [r7, #12]
 80195b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80195b8:	4a1d      	ldr	r2, [pc, #116]	@ (8019630 <prvHeapInit+0xb0>)
 80195ba:	687b      	ldr	r3, [r7, #4]
 80195bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80195be:	4b1c      	ldr	r3, [pc, #112]	@ (8019630 <prvHeapInit+0xb0>)
 80195c0:	2200      	movs	r2, #0
 80195c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80195c4:	687b      	ldr	r3, [r7, #4]
 80195c6:	68ba      	ldr	r2, [r7, #8]
 80195c8:	4413      	add	r3, r2
 80195ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80195cc:	2208      	movs	r2, #8
 80195ce:	68fb      	ldr	r3, [r7, #12]
 80195d0:	1a9b      	subs	r3, r3, r2
 80195d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80195d4:	68fb      	ldr	r3, [r7, #12]
 80195d6:	f023 0307 	bic.w	r3, r3, #7
 80195da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80195dc:	68fb      	ldr	r3, [r7, #12]
 80195de:	4a15      	ldr	r2, [pc, #84]	@ (8019634 <prvHeapInit+0xb4>)
 80195e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80195e2:	4b14      	ldr	r3, [pc, #80]	@ (8019634 <prvHeapInit+0xb4>)
 80195e4:	681b      	ldr	r3, [r3, #0]
 80195e6:	2200      	movs	r2, #0
 80195e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80195ea:	4b12      	ldr	r3, [pc, #72]	@ (8019634 <prvHeapInit+0xb4>)
 80195ec:	681b      	ldr	r3, [r3, #0]
 80195ee:	2200      	movs	r2, #0
 80195f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80195f6:	683b      	ldr	r3, [r7, #0]
 80195f8:	68fa      	ldr	r2, [r7, #12]
 80195fa:	1ad2      	subs	r2, r2, r3
 80195fc:	683b      	ldr	r3, [r7, #0]
 80195fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8019600:	4b0c      	ldr	r3, [pc, #48]	@ (8019634 <prvHeapInit+0xb4>)
 8019602:	681a      	ldr	r2, [r3, #0]
 8019604:	683b      	ldr	r3, [r7, #0]
 8019606:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019608:	683b      	ldr	r3, [r7, #0]
 801960a:	685b      	ldr	r3, [r3, #4]
 801960c:	4a0a      	ldr	r2, [pc, #40]	@ (8019638 <prvHeapInit+0xb8>)
 801960e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019610:	683b      	ldr	r3, [r7, #0]
 8019612:	685b      	ldr	r3, [r3, #4]
 8019614:	4a09      	ldr	r2, [pc, #36]	@ (801963c <prvHeapInit+0xbc>)
 8019616:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8019618:	4b09      	ldr	r3, [pc, #36]	@ (8019640 <prvHeapInit+0xc0>)
 801961a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801961e:	601a      	str	r2, [r3, #0]
}
 8019620:	bf00      	nop
 8019622:	3714      	adds	r7, #20
 8019624:	46bd      	mov	sp, r7
 8019626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801962a:	4770      	bx	lr
 801962c:	24002f60 	.word	0x24002f60
 8019630:	24005760 	.word	0x24005760
 8019634:	24005768 	.word	0x24005768
 8019638:	24005770 	.word	0x24005770
 801963c:	2400576c 	.word	0x2400576c
 8019640:	2400577c 	.word	0x2400577c

08019644 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8019644:	b480      	push	{r7}
 8019646:	b085      	sub	sp, #20
 8019648:	af00      	add	r7, sp, #0
 801964a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801964c:	4b28      	ldr	r3, [pc, #160]	@ (80196f0 <prvInsertBlockIntoFreeList+0xac>)
 801964e:	60fb      	str	r3, [r7, #12]
 8019650:	e002      	b.n	8019658 <prvInsertBlockIntoFreeList+0x14>
 8019652:	68fb      	ldr	r3, [r7, #12]
 8019654:	681b      	ldr	r3, [r3, #0]
 8019656:	60fb      	str	r3, [r7, #12]
 8019658:	68fb      	ldr	r3, [r7, #12]
 801965a:	681b      	ldr	r3, [r3, #0]
 801965c:	687a      	ldr	r2, [r7, #4]
 801965e:	429a      	cmp	r2, r3
 8019660:	d8f7      	bhi.n	8019652 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019662:	68fb      	ldr	r3, [r7, #12]
 8019664:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8019666:	68fb      	ldr	r3, [r7, #12]
 8019668:	685b      	ldr	r3, [r3, #4]
 801966a:	68ba      	ldr	r2, [r7, #8]
 801966c:	4413      	add	r3, r2
 801966e:	687a      	ldr	r2, [r7, #4]
 8019670:	429a      	cmp	r2, r3
 8019672:	d108      	bne.n	8019686 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019674:	68fb      	ldr	r3, [r7, #12]
 8019676:	685a      	ldr	r2, [r3, #4]
 8019678:	687b      	ldr	r3, [r7, #4]
 801967a:	685b      	ldr	r3, [r3, #4]
 801967c:	441a      	add	r2, r3
 801967e:	68fb      	ldr	r3, [r7, #12]
 8019680:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8019682:	68fb      	ldr	r3, [r7, #12]
 8019684:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8019686:	687b      	ldr	r3, [r7, #4]
 8019688:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801968a:	687b      	ldr	r3, [r7, #4]
 801968c:	685b      	ldr	r3, [r3, #4]
 801968e:	68ba      	ldr	r2, [r7, #8]
 8019690:	441a      	add	r2, r3
 8019692:	68fb      	ldr	r3, [r7, #12]
 8019694:	681b      	ldr	r3, [r3, #0]
 8019696:	429a      	cmp	r2, r3
 8019698:	d118      	bne.n	80196cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801969a:	68fb      	ldr	r3, [r7, #12]
 801969c:	681a      	ldr	r2, [r3, #0]
 801969e:	4b15      	ldr	r3, [pc, #84]	@ (80196f4 <prvInsertBlockIntoFreeList+0xb0>)
 80196a0:	681b      	ldr	r3, [r3, #0]
 80196a2:	429a      	cmp	r2, r3
 80196a4:	d00d      	beq.n	80196c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80196a6:	687b      	ldr	r3, [r7, #4]
 80196a8:	685a      	ldr	r2, [r3, #4]
 80196aa:	68fb      	ldr	r3, [r7, #12]
 80196ac:	681b      	ldr	r3, [r3, #0]
 80196ae:	685b      	ldr	r3, [r3, #4]
 80196b0:	441a      	add	r2, r3
 80196b2:	687b      	ldr	r3, [r7, #4]
 80196b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80196b6:	68fb      	ldr	r3, [r7, #12]
 80196b8:	681b      	ldr	r3, [r3, #0]
 80196ba:	681a      	ldr	r2, [r3, #0]
 80196bc:	687b      	ldr	r3, [r7, #4]
 80196be:	601a      	str	r2, [r3, #0]
 80196c0:	e008      	b.n	80196d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80196c2:	4b0c      	ldr	r3, [pc, #48]	@ (80196f4 <prvInsertBlockIntoFreeList+0xb0>)
 80196c4:	681a      	ldr	r2, [r3, #0]
 80196c6:	687b      	ldr	r3, [r7, #4]
 80196c8:	601a      	str	r2, [r3, #0]
 80196ca:	e003      	b.n	80196d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80196cc:	68fb      	ldr	r3, [r7, #12]
 80196ce:	681a      	ldr	r2, [r3, #0]
 80196d0:	687b      	ldr	r3, [r7, #4]
 80196d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80196d4:	68fa      	ldr	r2, [r7, #12]
 80196d6:	687b      	ldr	r3, [r7, #4]
 80196d8:	429a      	cmp	r2, r3
 80196da:	d002      	beq.n	80196e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80196dc:	68fb      	ldr	r3, [r7, #12]
 80196de:	687a      	ldr	r2, [r7, #4]
 80196e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80196e2:	bf00      	nop
 80196e4:	3714      	adds	r7, #20
 80196e6:	46bd      	mov	sp, r7
 80196e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196ec:	4770      	bx	lr
 80196ee:	bf00      	nop
 80196f0:	24005760 	.word	0x24005760
 80196f4:	24005768 	.word	0x24005768

080196f8 <memset>:
 80196f8:	4402      	add	r2, r0
 80196fa:	4603      	mov	r3, r0
 80196fc:	4293      	cmp	r3, r2
 80196fe:	d100      	bne.n	8019702 <memset+0xa>
 8019700:	4770      	bx	lr
 8019702:	f803 1b01 	strb.w	r1, [r3], #1
 8019706:	e7f9      	b.n	80196fc <memset+0x4>

08019708 <__errno>:
 8019708:	4b01      	ldr	r3, [pc, #4]	@ (8019710 <__errno+0x8>)
 801970a:	6818      	ldr	r0, [r3, #0]
 801970c:	4770      	bx	lr
 801970e:	bf00      	nop
 8019710:	240000a8 	.word	0x240000a8

08019714 <__libc_init_array>:
 8019714:	b570      	push	{r4, r5, r6, lr}
 8019716:	4d0d      	ldr	r5, [pc, #52]	@ (801974c <__libc_init_array+0x38>)
 8019718:	4c0d      	ldr	r4, [pc, #52]	@ (8019750 <__libc_init_array+0x3c>)
 801971a:	1b64      	subs	r4, r4, r5
 801971c:	10a4      	asrs	r4, r4, #2
 801971e:	2600      	movs	r6, #0
 8019720:	42a6      	cmp	r6, r4
 8019722:	d109      	bne.n	8019738 <__libc_init_array+0x24>
 8019724:	4d0b      	ldr	r5, [pc, #44]	@ (8019754 <__libc_init_array+0x40>)
 8019726:	4c0c      	ldr	r4, [pc, #48]	@ (8019758 <__libc_init_array+0x44>)
 8019728:	f000 f956 	bl	80199d8 <_init>
 801972c:	1b64      	subs	r4, r4, r5
 801972e:	10a4      	asrs	r4, r4, #2
 8019730:	2600      	movs	r6, #0
 8019732:	42a6      	cmp	r6, r4
 8019734:	d105      	bne.n	8019742 <__libc_init_array+0x2e>
 8019736:	bd70      	pop	{r4, r5, r6, pc}
 8019738:	f855 3b04 	ldr.w	r3, [r5], #4
 801973c:	4798      	blx	r3
 801973e:	3601      	adds	r6, #1
 8019740:	e7ee      	b.n	8019720 <__libc_init_array+0xc>
 8019742:	f855 3b04 	ldr.w	r3, [r5], #4
 8019746:	4798      	blx	r3
 8019748:	3601      	adds	r6, #1
 801974a:	e7f2      	b.n	8019732 <__libc_init_array+0x1e>
 801974c:	0801a868 	.word	0x0801a868
 8019750:	0801a868 	.word	0x0801a868
 8019754:	0801a868 	.word	0x0801a868
 8019758:	0801a86c 	.word	0x0801a86c

0801975c <memcpy>:
 801975c:	440a      	add	r2, r1
 801975e:	4291      	cmp	r1, r2
 8019760:	f100 33ff 	add.w	r3, r0, #4294967295
 8019764:	d100      	bne.n	8019768 <memcpy+0xc>
 8019766:	4770      	bx	lr
 8019768:	b510      	push	{r4, lr}
 801976a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801976e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019772:	4291      	cmp	r1, r2
 8019774:	d1f9      	bne.n	801976a <memcpy+0xe>
 8019776:	bd10      	pop	{r4, pc}

08019778 <log>:
 8019778:	b4f0      	push	{r4, r5, r6, r7}
 801977a:	ee10 0a90 	vmov	r0, s1
 801977e:	ee10 3a10 	vmov	r3, s0
 8019782:	f04f 34ff 	mov.w	r4, #4294967295
 8019786:	429c      	cmp	r4, r3
 8019788:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 801978c:	4c72      	ldr	r4, [pc, #456]	@ (8019958 <log+0x1e0>)
 801978e:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 8019792:	418c      	sbcs	r4, r1
 8019794:	ed2d 8b02 	vpush	{d8}
 8019798:	ea4f 4210 	mov.w	r2, r0, lsr #16
 801979c:	d35a      	bcc.n	8019854 <log+0xdc>
 801979e:	4a6f      	ldr	r2, [pc, #444]	@ (801995c <log+0x1e4>)
 80197a0:	4290      	cmp	r0, r2
 80197a2:	bf08      	it	eq
 80197a4:	2b00      	cmpeq	r3, #0
 80197a6:	f000 80c7 	beq.w	8019938 <log+0x1c0>
 80197aa:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 80197ae:	ee30 0b47 	vsub.f64	d0, d0, d7
 80197b2:	4b6b      	ldr	r3, [pc, #428]	@ (8019960 <log+0x1e8>)
 80197b4:	ee20 2b00 	vmul.f64	d2, d0, d0
 80197b8:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 80197bc:	ee20 4b02 	vmul.f64	d4, d0, d2
 80197c0:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 80197c4:	eea6 7b00 	vfma.f64	d7, d6, d0
 80197c8:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 80197cc:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 80197d0:	eea6 7b02 	vfma.f64	d7, d6, d2
 80197d4:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 80197d8:	eea5 6b00 	vfma.f64	d6, d5, d0
 80197dc:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 80197e0:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 80197e4:	eea5 6b02 	vfma.f64	d6, d5, d2
 80197e8:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 80197ec:	eea3 5b00 	vfma.f64	d5, d3, d0
 80197f0:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 80197f4:	eea3 5b02 	vfma.f64	d5, d3, d2
 80197f8:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 80197fc:	eea3 5b04 	vfma.f64	d5, d3, d4
 8019800:	eea5 6b04 	vfma.f64	d6, d5, d4
 8019804:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8019808:	eea6 7b04 	vfma.f64	d7, d6, d4
 801980c:	eeb0 2b47 	vmov.f64	d2, d7
 8019810:	ed9f 7b4b 	vldr	d7, [pc, #300]	@ 8019940 <log+0x1c8>
 8019814:	eeb0 6b40 	vmov.f64	d6, d0
 8019818:	eeb0 3b40 	vmov.f64	d3, d0
 801981c:	eea0 6b07 	vfma.f64	d6, d0, d7
 8019820:	eea0 6b47 	vfms.f64	d6, d0, d7
 8019824:	ee30 8b46 	vsub.f64	d8, d0, d6
 8019828:	ee26 1b06 	vmul.f64	d1, d6, d6
 801982c:	eea1 3b05 	vfma.f64	d3, d1, d5
 8019830:	ee30 7b43 	vsub.f64	d7, d0, d3
 8019834:	ee30 0b06 	vadd.f64	d0, d0, d6
 8019838:	eea1 7b05 	vfma.f64	d7, d1, d5
 801983c:	ee25 5b08 	vmul.f64	d5, d5, d8
 8019840:	eea5 7b00 	vfma.f64	d7, d5, d0
 8019844:	eea2 7b04 	vfma.f64	d7, d2, d4
 8019848:	ee33 0b07 	vadd.f64	d0, d3, d7
 801984c:	ecbd 8b02 	vpop	{d8}
 8019850:	bcf0      	pop	{r4, r5, r6, r7}
 8019852:	4770      	bx	lr
 8019854:	f1a2 0410 	sub.w	r4, r2, #16
 8019858:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 801985c:	428c      	cmp	r4, r1
 801985e:	d923      	bls.n	80198a8 <log+0x130>
 8019860:	18d9      	adds	r1, r3, r3
 8019862:	eb40 0400 	adc.w	r4, r0, r0
 8019866:	4321      	orrs	r1, r4
 8019868:	d105      	bne.n	8019876 <log+0xfe>
 801986a:	ecbd 8b02 	vpop	{d8}
 801986e:	2001      	movs	r0, #1
 8019870:	bcf0      	pop	{r4, r5, r6, r7}
 8019872:	f000 b889 	b.w	8019988 <__math_divzero>
 8019876:	493b      	ldr	r1, [pc, #236]	@ (8019964 <log+0x1ec>)
 8019878:	4288      	cmp	r0, r1
 801987a:	bf08      	it	eq
 801987c:	2b00      	cmpeq	r3, #0
 801987e:	d0e5      	beq.n	801984c <log+0xd4>
 8019880:	0413      	lsls	r3, r2, #16
 8019882:	d403      	bmi.n	801988c <log+0x114>
 8019884:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8019888:	4393      	bics	r3, r2
 801988a:	d104      	bne.n	8019896 <log+0x11e>
 801988c:	ecbd 8b02 	vpop	{d8}
 8019890:	bcf0      	pop	{r4, r5, r6, r7}
 8019892:	f000 b891 	b.w	80199b8 <__math_invalid>
 8019896:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8019948 <log+0x1d0>
 801989a:	ee20 7b07 	vmul.f64	d7, d0, d7
 801989e:	ec53 2b17 	vmov	r2, r3, d7
 80198a2:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 80198a6:	4613      	mov	r3, r2
 80198a8:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 80198ac:	492c      	ldr	r1, [pc, #176]	@ (8019960 <log+0x1e8>)
 80198ae:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 80198b2:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 80198b6:	f3c2 3446 	ubfx	r4, r2, #13, #7
 80198ba:	ea4f 5c12 	mov.w	ip, r2, lsr #20
 80198be:	eb01 1504 	add.w	r5, r1, r4, lsl #4
 80198c2:	ea4f 5c0c 	mov.w	ip, ip, lsl #20
 80198c6:	ed95 7b24 	vldr	d7, [r5, #144]	@ 0x90
 80198ca:	1e1e      	subs	r6, r3, #0
 80198cc:	eba0 070c 	sub.w	r7, r0, ip
 80198d0:	ec47 6b16 	vmov	d6, r6, r7
 80198d4:	1512      	asrs	r2, r2, #20
 80198d6:	eea7 5b06 	vfma.f64	d5, d7, d6
 80198da:	ee07 2a90 	vmov	s15, r2
 80198de:	ee25 2b05 	vmul.f64	d2, d5, d5
 80198e2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80198e6:	ed91 4b00 	vldr	d4, [r1]
 80198ea:	ee25 1b02 	vmul.f64	d1, d5, d2
 80198ee:	ed95 7b26 	vldr	d7, [r5, #152]	@ 0x98
 80198f2:	eea4 7b06 	vfma.f64	d7, d4, d6
 80198f6:	ee35 4b07 	vadd.f64	d4, d5, d7
 80198fa:	ee37 0b44 	vsub.f64	d0, d7, d4
 80198fe:	ed91 7b02 	vldr	d7, [r1, #8]
 8019902:	ee30 0b05 	vadd.f64	d0, d0, d5
 8019906:	eea7 0b06 	vfma.f64	d0, d7, d6
 801990a:	ed91 7b04 	vldr	d7, [r1, #16]
 801990e:	ed91 6b08 	vldr	d6, [r1, #32]
 8019912:	eea7 0b02 	vfma.f64	d0, d7, d2
 8019916:	ed91 7b06 	vldr	d7, [r1, #24]
 801991a:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 801991e:	eea6 7b05 	vfma.f64	d7, d6, d5
 8019922:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 8019926:	eea3 6b05 	vfma.f64	d6, d3, d5
 801992a:	eea6 7b02 	vfma.f64	d7, d6, d2
 801992e:	eea1 0b07 	vfma.f64	d0, d1, d7
 8019932:	ee30 0b04 	vadd.f64	d0, d0, d4
 8019936:	e789      	b.n	801984c <log+0xd4>
 8019938:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 8019950 <log+0x1d8>
 801993c:	e786      	b.n	801984c <log+0xd4>
 801993e:	bf00      	nop
 8019940:	00000000 	.word	0x00000000
 8019944:	41a00000 	.word	0x41a00000
 8019948:	00000000 	.word	0x00000000
 801994c:	43300000 	.word	0x43300000
	...
 8019958:	000308ff 	.word	0x000308ff
 801995c:	3ff00000 	.word	0x3ff00000
 8019960:	08019fd0 	.word	0x08019fd0
 8019964:	7ff00000 	.word	0x7ff00000

08019968 <with_errno>:
 8019968:	b510      	push	{r4, lr}
 801996a:	ed2d 8b02 	vpush	{d8}
 801996e:	eeb0 8b40 	vmov.f64	d8, d0
 8019972:	4604      	mov	r4, r0
 8019974:	f7ff fec8 	bl	8019708 <__errno>
 8019978:	eeb0 0b48 	vmov.f64	d0, d8
 801997c:	ecbd 8b02 	vpop	{d8}
 8019980:	6004      	str	r4, [r0, #0]
 8019982:	bd10      	pop	{r4, pc}
 8019984:	0000      	movs	r0, r0
	...

08019988 <__math_divzero>:
 8019988:	b082      	sub	sp, #8
 801998a:	2800      	cmp	r0, #0
 801998c:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8019990:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8019994:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8019998:	ed8d 7b00 	vstr	d7, [sp]
 801999c:	ed9d 0b00 	vldr	d0, [sp]
 80199a0:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 80199b0 <__math_divzero+0x28>
 80199a4:	2022      	movs	r0, #34	@ 0x22
 80199a6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 80199aa:	b002      	add	sp, #8
 80199ac:	f7ff bfdc 	b.w	8019968 <with_errno>
	...

080199b8 <__math_invalid>:
 80199b8:	eeb0 7b40 	vmov.f64	d7, d0
 80199bc:	eeb4 7b47 	vcmp.f64	d7, d7
 80199c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199c4:	ee30 6b40 	vsub.f64	d6, d0, d0
 80199c8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 80199cc:	d602      	bvs.n	80199d4 <__math_invalid+0x1c>
 80199ce:	2021      	movs	r0, #33	@ 0x21
 80199d0:	f7ff bfca 	b.w	8019968 <with_errno>
 80199d4:	4770      	bx	lr
	...

080199d8 <_init>:
 80199d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80199da:	bf00      	nop
 80199dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80199de:	bc08      	pop	{r3}
 80199e0:	469e      	mov	lr, r3
 80199e2:	4770      	bx	lr

080199e4 <_fini>:
 80199e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80199e6:	bf00      	nop
 80199e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80199ea:	bc08      	pop	{r3}
 80199ec:	469e      	mov	lr, r3
 80199ee:	4770      	bx	lr
