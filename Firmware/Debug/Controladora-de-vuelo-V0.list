
Controladora-de-vuelo-V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018620  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d90  080188d0  080188d0  000198d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08019660  08019660  0001a660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08019668  08019668  0001a668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801966c  0801966c  0001a66c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000290  24000000  08019670  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006564  24000290  08019900  0001b290  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240067f4  08019900  0001b7f4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001b290  2**0
                  CONTENTS, READONLY
 10 .debug_info   00034231  00000000  00000000  0001b2be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000074a4  00000000  00000000  0004f4ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000027f0  00000000  00000000  00056998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001edf  00000000  00000000  00059188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000c3b8  00000000  00000000  0005b067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003cc8a  00000000  00000000  0006741f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016102e  00000000  00000000  000a40a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002050d7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b7f8  00000000  00000000  0020511c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006a  00000000  00000000  00210914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000290 	.word	0x24000290
 80002cc:	00000000 	.word	0x00000000
 80002d0:	080188b8 	.word	0x080188b8

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000294 	.word	0x24000294
 80002ec:	080188b8 	.word	0x080188b8

080002f0 <strcmp>:
 80002f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002f8:	2a01      	cmp	r2, #1
 80002fa:	bf28      	it	cs
 80002fc:	429a      	cmpcs	r2, r3
 80002fe:	d0f7      	beq.n	80002f0 <strcmp>
 8000300:	1ad0      	subs	r0, r2, r3
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_ldivmod>:
 8000728:	b97b      	cbnz	r3, 800074a <__aeabi_ldivmod+0x22>
 800072a:	b972      	cbnz	r2, 800074a <__aeabi_ldivmod+0x22>
 800072c:	2900      	cmp	r1, #0
 800072e:	bfbe      	ittt	lt
 8000730:	2000      	movlt	r0, #0
 8000732:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000736:	e006      	blt.n	8000746 <__aeabi_ldivmod+0x1e>
 8000738:	bf08      	it	eq
 800073a:	2800      	cmpeq	r0, #0
 800073c:	bf1c      	itt	ne
 800073e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000742:	f04f 30ff 	movne.w	r0, #4294967295
 8000746:	f000 b9ed 	b.w	8000b24 <__aeabi_idiv0>
 800074a:	f1ad 0c08 	sub.w	ip, sp, #8
 800074e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000752:	2900      	cmp	r1, #0
 8000754:	db09      	blt.n	800076a <__aeabi_ldivmod+0x42>
 8000756:	2b00      	cmp	r3, #0
 8000758:	db1a      	blt.n	8000790 <__aeabi_ldivmod+0x68>
 800075a:	f000 f885 	bl	8000868 <__udivmoddi4>
 800075e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000762:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000766:	b004      	add	sp, #16
 8000768:	4770      	bx	lr
 800076a:	4240      	negs	r0, r0
 800076c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000770:	2b00      	cmp	r3, #0
 8000772:	db1b      	blt.n	80007ac <__aeabi_ldivmod+0x84>
 8000774:	f000 f878 	bl	8000868 <__udivmoddi4>
 8000778:	f8dd e004 	ldr.w	lr, [sp, #4]
 800077c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000780:	b004      	add	sp, #16
 8000782:	4240      	negs	r0, r0
 8000784:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000788:	4252      	negs	r2, r2
 800078a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800078e:	4770      	bx	lr
 8000790:	4252      	negs	r2, r2
 8000792:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000796:	f000 f867 	bl	8000868 <__udivmoddi4>
 800079a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800079e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007a2:	b004      	add	sp, #16
 80007a4:	4240      	negs	r0, r0
 80007a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007aa:	4770      	bx	lr
 80007ac:	4252      	negs	r2, r2
 80007ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007b2:	f000 f859 	bl	8000868 <__udivmoddi4>
 80007b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007be:	b004      	add	sp, #16
 80007c0:	4252      	negs	r2, r2
 80007c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007c6:	4770      	bx	lr

080007c8 <__aeabi_uldivmod>:
 80007c8:	b953      	cbnz	r3, 80007e0 <__aeabi_uldivmod+0x18>
 80007ca:	b94a      	cbnz	r2, 80007e0 <__aeabi_uldivmod+0x18>
 80007cc:	2900      	cmp	r1, #0
 80007ce:	bf08      	it	eq
 80007d0:	2800      	cmpeq	r0, #0
 80007d2:	bf1c      	itt	ne
 80007d4:	f04f 31ff 	movne.w	r1, #4294967295
 80007d8:	f04f 30ff 	movne.w	r0, #4294967295
 80007dc:	f000 b9a2 	b.w	8000b24 <__aeabi_idiv0>
 80007e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007e8:	f000 f83e 	bl	8000868 <__udivmoddi4>
 80007ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f4:	b004      	add	sp, #16
 80007f6:	4770      	bx	lr

080007f8 <__aeabi_d2lz>:
 80007f8:	b508      	push	{r3, lr}
 80007fa:	4602      	mov	r2, r0
 80007fc:	460b      	mov	r3, r1
 80007fe:	ec43 2b17 	vmov	d7, r2, r3
 8000802:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800080a:	d403      	bmi.n	8000814 <__aeabi_d2lz+0x1c>
 800080c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000810:	f000 b80a 	b.w	8000828 <__aeabi_d2ulz>
 8000814:	eeb1 7b47 	vneg.f64	d7, d7
 8000818:	ec51 0b17 	vmov	r0, r1, d7
 800081c:	f000 f804 	bl	8000828 <__aeabi_d2ulz>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	bd08      	pop	{r3, pc}

08000828 <__aeabi_d2ulz>:
 8000828:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000858 <__aeabi_d2ulz+0x30>
 800082c:	ec41 0b17 	vmov	d7, r0, r1
 8000830:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000860 <__aeabi_d2ulz+0x38>
 8000834:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000838:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800083c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000840:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000844:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000848:	ee16 1a10 	vmov	r1, s12
 800084c:	ee17 0a90 	vmov	r0, s15
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	f3af 8000 	nop.w
 8000858:	00000000 	.word	0x00000000
 800085c:	3df00000 	.word	0x3df00000
 8000860:	00000000 	.word	0x00000000
 8000864:	41f00000 	.word	0x41f00000

08000868 <__udivmoddi4>:
 8000868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800086c:	9d08      	ldr	r5, [sp, #32]
 800086e:	460c      	mov	r4, r1
 8000870:	2b00      	cmp	r3, #0
 8000872:	d14e      	bne.n	8000912 <__udivmoddi4+0xaa>
 8000874:	4694      	mov	ip, r2
 8000876:	458c      	cmp	ip, r1
 8000878:	4686      	mov	lr, r0
 800087a:	fab2 f282 	clz	r2, r2
 800087e:	d962      	bls.n	8000946 <__udivmoddi4+0xde>
 8000880:	b14a      	cbz	r2, 8000896 <__udivmoddi4+0x2e>
 8000882:	f1c2 0320 	rsb	r3, r2, #32
 8000886:	4091      	lsls	r1, r2
 8000888:	fa20 f303 	lsr.w	r3, r0, r3
 800088c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000890:	4319      	orrs	r1, r3
 8000892:	fa00 fe02 	lsl.w	lr, r0, r2
 8000896:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800089a:	fa1f f68c 	uxth.w	r6, ip
 800089e:	fbb1 f4f7 	udiv	r4, r1, r7
 80008a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a6:	fb07 1114 	mls	r1, r7, r4, r1
 80008aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ae:	fb04 f106 	mul.w	r1, r4, r6
 80008b2:	4299      	cmp	r1, r3
 80008b4:	d90a      	bls.n	80008cc <__udivmoddi4+0x64>
 80008b6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80008be:	f080 8112 	bcs.w	8000ae6 <__udivmoddi4+0x27e>
 80008c2:	4299      	cmp	r1, r3
 80008c4:	f240 810f 	bls.w	8000ae6 <__udivmoddi4+0x27e>
 80008c8:	3c02      	subs	r4, #2
 80008ca:	4463      	add	r3, ip
 80008cc:	1a59      	subs	r1, r3, r1
 80008ce:	fa1f f38e 	uxth.w	r3, lr
 80008d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80008d6:	fb07 1110 	mls	r1, r7, r0, r1
 80008da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008de:	fb00 f606 	mul.w	r6, r0, r6
 80008e2:	429e      	cmp	r6, r3
 80008e4:	d90a      	bls.n	80008fc <__udivmoddi4+0x94>
 80008e6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80008ee:	f080 80fc 	bcs.w	8000aea <__udivmoddi4+0x282>
 80008f2:	429e      	cmp	r6, r3
 80008f4:	f240 80f9 	bls.w	8000aea <__udivmoddi4+0x282>
 80008f8:	4463      	add	r3, ip
 80008fa:	3802      	subs	r0, #2
 80008fc:	1b9b      	subs	r3, r3, r6
 80008fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000902:	2100      	movs	r1, #0
 8000904:	b11d      	cbz	r5, 800090e <__udivmoddi4+0xa6>
 8000906:	40d3      	lsrs	r3, r2
 8000908:	2200      	movs	r2, #0
 800090a:	e9c5 3200 	strd	r3, r2, [r5]
 800090e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000912:	428b      	cmp	r3, r1
 8000914:	d905      	bls.n	8000922 <__udivmoddi4+0xba>
 8000916:	b10d      	cbz	r5, 800091c <__udivmoddi4+0xb4>
 8000918:	e9c5 0100 	strd	r0, r1, [r5]
 800091c:	2100      	movs	r1, #0
 800091e:	4608      	mov	r0, r1
 8000920:	e7f5      	b.n	800090e <__udivmoddi4+0xa6>
 8000922:	fab3 f183 	clz	r1, r3
 8000926:	2900      	cmp	r1, #0
 8000928:	d146      	bne.n	80009b8 <__udivmoddi4+0x150>
 800092a:	42a3      	cmp	r3, r4
 800092c:	d302      	bcc.n	8000934 <__udivmoddi4+0xcc>
 800092e:	4290      	cmp	r0, r2
 8000930:	f0c0 80f0 	bcc.w	8000b14 <__udivmoddi4+0x2ac>
 8000934:	1a86      	subs	r6, r0, r2
 8000936:	eb64 0303 	sbc.w	r3, r4, r3
 800093a:	2001      	movs	r0, #1
 800093c:	2d00      	cmp	r5, #0
 800093e:	d0e6      	beq.n	800090e <__udivmoddi4+0xa6>
 8000940:	e9c5 6300 	strd	r6, r3, [r5]
 8000944:	e7e3      	b.n	800090e <__udivmoddi4+0xa6>
 8000946:	2a00      	cmp	r2, #0
 8000948:	f040 8090 	bne.w	8000a6c <__udivmoddi4+0x204>
 800094c:	eba1 040c 	sub.w	r4, r1, ip
 8000950:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000954:	fa1f f78c 	uxth.w	r7, ip
 8000958:	2101      	movs	r1, #1
 800095a:	fbb4 f6f8 	udiv	r6, r4, r8
 800095e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000962:	fb08 4416 	mls	r4, r8, r6, r4
 8000966:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800096a:	fb07 f006 	mul.w	r0, r7, r6
 800096e:	4298      	cmp	r0, r3
 8000970:	d908      	bls.n	8000984 <__udivmoddi4+0x11c>
 8000972:	eb1c 0303 	adds.w	r3, ip, r3
 8000976:	f106 34ff 	add.w	r4, r6, #4294967295
 800097a:	d202      	bcs.n	8000982 <__udivmoddi4+0x11a>
 800097c:	4298      	cmp	r0, r3
 800097e:	f200 80cd 	bhi.w	8000b1c <__udivmoddi4+0x2b4>
 8000982:	4626      	mov	r6, r4
 8000984:	1a1c      	subs	r4, r3, r0
 8000986:	fa1f f38e 	uxth.w	r3, lr
 800098a:	fbb4 f0f8 	udiv	r0, r4, r8
 800098e:	fb08 4410 	mls	r4, r8, r0, r4
 8000992:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000996:	fb00 f707 	mul.w	r7, r0, r7
 800099a:	429f      	cmp	r7, r3
 800099c:	d908      	bls.n	80009b0 <__udivmoddi4+0x148>
 800099e:	eb1c 0303 	adds.w	r3, ip, r3
 80009a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80009a6:	d202      	bcs.n	80009ae <__udivmoddi4+0x146>
 80009a8:	429f      	cmp	r7, r3
 80009aa:	f200 80b0 	bhi.w	8000b0e <__udivmoddi4+0x2a6>
 80009ae:	4620      	mov	r0, r4
 80009b0:	1bdb      	subs	r3, r3, r7
 80009b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009b6:	e7a5      	b.n	8000904 <__udivmoddi4+0x9c>
 80009b8:	f1c1 0620 	rsb	r6, r1, #32
 80009bc:	408b      	lsls	r3, r1
 80009be:	fa22 f706 	lsr.w	r7, r2, r6
 80009c2:	431f      	orrs	r7, r3
 80009c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80009c8:	fa04 f301 	lsl.w	r3, r4, r1
 80009cc:	ea43 030c 	orr.w	r3, r3, ip
 80009d0:	40f4      	lsrs	r4, r6
 80009d2:	fa00 f801 	lsl.w	r8, r0, r1
 80009d6:	0c38      	lsrs	r0, r7, #16
 80009d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009dc:	fbb4 fef0 	udiv	lr, r4, r0
 80009e0:	fa1f fc87 	uxth.w	ip, r7
 80009e4:	fb00 441e 	mls	r4, r0, lr, r4
 80009e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009ec:	fb0e f90c 	mul.w	r9, lr, ip
 80009f0:	45a1      	cmp	r9, r4
 80009f2:	fa02 f201 	lsl.w	r2, r2, r1
 80009f6:	d90a      	bls.n	8000a0e <__udivmoddi4+0x1a6>
 80009f8:	193c      	adds	r4, r7, r4
 80009fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009fe:	f080 8084 	bcs.w	8000b0a <__udivmoddi4+0x2a2>
 8000a02:	45a1      	cmp	r9, r4
 8000a04:	f240 8081 	bls.w	8000b0a <__udivmoddi4+0x2a2>
 8000a08:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a0c:	443c      	add	r4, r7
 8000a0e:	eba4 0409 	sub.w	r4, r4, r9
 8000a12:	fa1f f983 	uxth.w	r9, r3
 8000a16:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a1a:	fb00 4413 	mls	r4, r0, r3, r4
 8000a1e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a22:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a26:	45a4      	cmp	ip, r4
 8000a28:	d907      	bls.n	8000a3a <__udivmoddi4+0x1d2>
 8000a2a:	193c      	adds	r4, r7, r4
 8000a2c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a30:	d267      	bcs.n	8000b02 <__udivmoddi4+0x29a>
 8000a32:	45a4      	cmp	ip, r4
 8000a34:	d965      	bls.n	8000b02 <__udivmoddi4+0x29a>
 8000a36:	3b02      	subs	r3, #2
 8000a38:	443c      	add	r4, r7
 8000a3a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a3e:	fba0 9302 	umull	r9, r3, r0, r2
 8000a42:	eba4 040c 	sub.w	r4, r4, ip
 8000a46:	429c      	cmp	r4, r3
 8000a48:	46ce      	mov	lr, r9
 8000a4a:	469c      	mov	ip, r3
 8000a4c:	d351      	bcc.n	8000af2 <__udivmoddi4+0x28a>
 8000a4e:	d04e      	beq.n	8000aee <__udivmoddi4+0x286>
 8000a50:	b155      	cbz	r5, 8000a68 <__udivmoddi4+0x200>
 8000a52:	ebb8 030e 	subs.w	r3, r8, lr
 8000a56:	eb64 040c 	sbc.w	r4, r4, ip
 8000a5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000a5e:	40cb      	lsrs	r3, r1
 8000a60:	431e      	orrs	r6, r3
 8000a62:	40cc      	lsrs	r4, r1
 8000a64:	e9c5 6400 	strd	r6, r4, [r5]
 8000a68:	2100      	movs	r1, #0
 8000a6a:	e750      	b.n	800090e <__udivmoddi4+0xa6>
 8000a6c:	f1c2 0320 	rsb	r3, r2, #32
 8000a70:	fa20 f103 	lsr.w	r1, r0, r3
 8000a74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a78:	fa24 f303 	lsr.w	r3, r4, r3
 8000a7c:	4094      	lsls	r4, r2
 8000a7e:	430c      	orrs	r4, r1
 8000a80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a84:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a88:	fa1f f78c 	uxth.w	r7, ip
 8000a8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a90:	fb08 3110 	mls	r1, r8, r0, r3
 8000a94:	0c23      	lsrs	r3, r4, #16
 8000a96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a9a:	fb00 f107 	mul.w	r1, r0, r7
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	d908      	bls.n	8000ab4 <__udivmoddi4+0x24c>
 8000aa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000aa6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000aaa:	d22c      	bcs.n	8000b06 <__udivmoddi4+0x29e>
 8000aac:	4299      	cmp	r1, r3
 8000aae:	d92a      	bls.n	8000b06 <__udivmoddi4+0x29e>
 8000ab0:	3802      	subs	r0, #2
 8000ab2:	4463      	add	r3, ip
 8000ab4:	1a5b      	subs	r3, r3, r1
 8000ab6:	b2a4      	uxth	r4, r4
 8000ab8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000abc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ac0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ac4:	fb01 f307 	mul.w	r3, r1, r7
 8000ac8:	42a3      	cmp	r3, r4
 8000aca:	d908      	bls.n	8000ade <__udivmoddi4+0x276>
 8000acc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ad0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ad4:	d213      	bcs.n	8000afe <__udivmoddi4+0x296>
 8000ad6:	42a3      	cmp	r3, r4
 8000ad8:	d911      	bls.n	8000afe <__udivmoddi4+0x296>
 8000ada:	3902      	subs	r1, #2
 8000adc:	4464      	add	r4, ip
 8000ade:	1ae4      	subs	r4, r4, r3
 8000ae0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ae4:	e739      	b.n	800095a <__udivmoddi4+0xf2>
 8000ae6:	4604      	mov	r4, r0
 8000ae8:	e6f0      	b.n	80008cc <__udivmoddi4+0x64>
 8000aea:	4608      	mov	r0, r1
 8000aec:	e706      	b.n	80008fc <__udivmoddi4+0x94>
 8000aee:	45c8      	cmp	r8, r9
 8000af0:	d2ae      	bcs.n	8000a50 <__udivmoddi4+0x1e8>
 8000af2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000af6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000afa:	3801      	subs	r0, #1
 8000afc:	e7a8      	b.n	8000a50 <__udivmoddi4+0x1e8>
 8000afe:	4631      	mov	r1, r6
 8000b00:	e7ed      	b.n	8000ade <__udivmoddi4+0x276>
 8000b02:	4603      	mov	r3, r0
 8000b04:	e799      	b.n	8000a3a <__udivmoddi4+0x1d2>
 8000b06:	4630      	mov	r0, r6
 8000b08:	e7d4      	b.n	8000ab4 <__udivmoddi4+0x24c>
 8000b0a:	46d6      	mov	lr, sl
 8000b0c:	e77f      	b.n	8000a0e <__udivmoddi4+0x1a6>
 8000b0e:	4463      	add	r3, ip
 8000b10:	3802      	subs	r0, #2
 8000b12:	e74d      	b.n	80009b0 <__udivmoddi4+0x148>
 8000b14:	4606      	mov	r6, r0
 8000b16:	4623      	mov	r3, r4
 8000b18:	4608      	mov	r0, r1
 8000b1a:	e70f      	b.n	800093c <__udivmoddi4+0xd4>
 8000b1c:	3e02      	subs	r6, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	e730      	b.n	8000984 <__udivmoddi4+0x11c>
 8000b22:	bf00      	nop

08000b24 <__aeabi_idiv0>:
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <LPF_gyro_filter_init>:


Gyro_s actual_rates;

void LPF_gyro_filter_init(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
	// Inicializaciones
	LPF_gyros[0] = LPF_gyro_x ;
 8000b2e:	4b3e      	ldr	r3, [pc, #248]	@ (8000c28 <LPF_gyro_filter_init+0x100>)
 8000b30:	4a3e      	ldr	r2, [pc, #248]	@ (8000c2c <LPF_gyro_filter_init+0x104>)
 8000b32:	601a      	str	r2, [r3, #0]
	LPF_gyros[1] = LPF_gyro_y ;
 8000b34:	4b3c      	ldr	r3, [pc, #240]	@ (8000c28 <LPF_gyro_filter_init+0x100>)
 8000b36:	4a3d      	ldr	r2, [pc, #244]	@ (8000c2c <LPF_gyro_filter_init+0x104>)
 8000b38:	605a      	str	r2, [r3, #4]
	LPF_gyros[2] = LPF_gyro_z ;
 8000b3a:	4b3b      	ldr	r3, [pc, #236]	@ (8000c28 <LPF_gyro_filter_init+0x100>)
 8000b3c:	4a3b      	ldr	r2, [pc, #236]	@ (8000c2c <LPF_gyro_filter_init+0x104>)
 8000b3e:	609a      	str	r2, [r3, #8]
	for(int idx = 0;idx < 3; idx++)
 8000b40:	2300      	movs	r3, #0
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	e066      	b.n	8000c14 <LPF_gyro_filter_init+0xec>
	{
		//
		gyros_fltrs[idx].inicio 	= 1;
 8000b46:	4a3a      	ldr	r2, [pc, #232]	@ (8000c30 <LPF_gyro_filter_init+0x108>)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	212c      	movs	r1, #44	@ 0x2c
 8000b4c:	fb01 f303 	mul.w	r3, r1, r3
 8000b50:	4413      	add	r3, r2
 8000b52:	3328      	adds	r3, #40	@ 0x28
 8000b54:	2201      	movs	r2, #1
 8000b56:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].f_cutoff 	= LPF_gyros[idx] ;
 8000b58:	4a33      	ldr	r2, [pc, #204]	@ (8000c28 <LPF_gyro_filter_init+0x100>)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	4413      	add	r3, r2
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	4933      	ldr	r1, [pc, #204]	@ (8000c30 <LPF_gyro_filter_init+0x108>)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	202c      	movs	r0, #44	@ 0x2c
 8000b68:	fb00 f303 	mul.w	r3, r0, r3
 8000b6c:	440b      	add	r3, r1
 8000b6e:	3318      	adds	r3, #24
 8000b70:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].t_sample 	= SAMPLE_ATT ;
 8000b72:	4a2f      	ldr	r2, [pc, #188]	@ (8000c30 <LPF_gyro_filter_init+0x108>)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	212c      	movs	r1, #44	@ 0x2c
 8000b78:	fb01 f303 	mul.w	r3, r1, r3
 8000b7c:	4413      	add	r3, r2
 8000b7e:	331c      	adds	r3, #28
 8000b80:	4a2c      	ldr	r2, [pc, #176]	@ (8000c34 <LPF_gyro_filter_init+0x10c>)
 8000b82:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].Y_0 		= 0.0f ;
 8000b84:	4a2a      	ldr	r2, [pc, #168]	@ (8000c30 <LPF_gyro_filter_init+0x108>)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	212c      	movs	r1, #44	@ 0x2c
 8000b8a:	fb01 f303 	mul.w	r3, r1, r3
 8000b8e:	4413      	add	r3, r2
 8000b90:	3308      	adds	r3, #8
 8000b92:	f04f 0200 	mov.w	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].U_n 		= 0.0f;
 8000b98:	4a25      	ldr	r2, [pc, #148]	@ (8000c30 <LPF_gyro_filter_init+0x108>)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	212c      	movs	r1, #44	@ 0x2c
 8000b9e:	fb01 f303 	mul.w	r3, r1, r3
 8000ba2:	4413      	add	r3, r2
 8000ba4:	330c      	adds	r3, #12
 8000ba6:	f04f 0200 	mov.w	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].Y_n 		= 0.0f;
 8000bac:	4a20      	ldr	r2, [pc, #128]	@ (8000c30 <LPF_gyro_filter_init+0x108>)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	212c      	movs	r1, #44	@ 0x2c
 8000bb2:	fb01 f303 	mul.w	r3, r1, r3
 8000bb6:	4413      	add	r3, r2
 8000bb8:	f04f 0200 	mov.w	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].Y_nm1 		= 0.0f;
 8000bbe:	4a1c      	ldr	r2, [pc, #112]	@ (8000c30 <LPF_gyro_filter_init+0x108>)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	212c      	movs	r1, #44	@ 0x2c
 8000bc4:	fb01 f303 	mul.w	r3, r1, r3
 8000bc8:	4413      	add	r3, r2
 8000bca:	3304      	adds	r3, #4
 8000bcc:	f04f 0200 	mov.w	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].U_nm1 		= 0.0f;
 8000bd2:	4a17      	ldr	r2, [pc, #92]	@ (8000c30 <LPF_gyro_filter_init+0x108>)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	212c      	movs	r1, #44	@ 0x2c
 8000bd8:	fb01 f303 	mul.w	r3, r1, r3
 8000bdc:	4413      	add	r3, r2
 8000bde:	3310      	adds	r3, #16
 8000be0:	f04f 0200 	mov.w	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].t_n 		= 0.0f;
 8000be6:	4a12      	ldr	r2, [pc, #72]	@ (8000c30 <LPF_gyro_filter_init+0x108>)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	212c      	movs	r1, #44	@ 0x2c
 8000bec:	fb01 f303 	mul.w	r3, r1, r3
 8000bf0:	4413      	add	r3, r2
 8000bf2:	3320      	adds	r3, #32
 8000bf4:	f04f 0200 	mov.w	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].t_nm1 		= 0.0f;
 8000bfa:	4a0d      	ldr	r2, [pc, #52]	@ (8000c30 <LPF_gyro_filter_init+0x108>)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	212c      	movs	r1, #44	@ 0x2c
 8000c00:	fb01 f303 	mul.w	r3, r1, r3
 8000c04:	4413      	add	r3, r2
 8000c06:	3324      	adds	r3, #36	@ 0x24
 8000c08:	f04f 0200 	mov.w	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
	for(int idx = 0;idx < 3; idx++)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	3301      	adds	r3, #1
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	dd95      	ble.n	8000b46 <LPF_gyro_filter_init+0x1e>

	}

}
 8000c1a:	bf00      	nop
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	24000330 	.word	0x24000330
 8000c2c:	42480000 	.word	0x42480000
 8000c30:	240002ac 	.word	0x240002ac
 8000c34:	3ba3d70a 	.word	0x3ba3d70a

08000c38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c3e:	4b15      	ldr	r3, [pc, #84]	@ (8000c94 <MX_DMA_Init+0x5c>)
 8000c40:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000c44:	4a13      	ldr	r2, [pc, #76]	@ (8000c94 <MX_DMA_Init+0x5c>)
 8000c46:	f043 0301 	orr.w	r3, r3, #1
 8000c4a:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000c4e:	4b11      	ldr	r3, [pc, #68]	@ (8000c94 <MX_DMA_Init+0x5c>)
 8000c50:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000c54:	f003 0301 	and.w	r3, r3, #1
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2105      	movs	r1, #5
 8000c60:	200b      	movs	r0, #11
 8000c62:	f004 fcfd 	bl	8005660 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c66:	200b      	movs	r0, #11
 8000c68:	f004 fd14 	bl	8005694 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2105      	movs	r1, #5
 8000c70:	200c      	movs	r0, #12
 8000c72:	f004 fcf5 	bl	8005660 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000c76:	200c      	movs	r0, #12
 8000c78:	f004 fd0c 	bl	8005694 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2105      	movs	r1, #5
 8000c80:	200d      	movs	r0, #13
 8000c82:	f004 fced 	bl	8005660 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000c86:	200d      	movs	r0, #13
 8000c88:	f004 fd04 	bl	8005694 <HAL_NVIC_EnableIRQ>

}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	58024400 	.word	0x58024400

08000c98 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000c9c:	4b2e      	ldr	r3, [pc, #184]	@ (8000d58 <MX_FDCAN1_Init+0xc0>)
 8000c9e:	4a2f      	ldr	r2, [pc, #188]	@ (8000d5c <MX_FDCAN1_Init+0xc4>)
 8000ca0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000ca2:	4b2d      	ldr	r3, [pc, #180]	@ (8000d58 <MX_FDCAN1_Init+0xc0>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000ca8:	4b2b      	ldr	r3, [pc, #172]	@ (8000d58 <MX_FDCAN1_Init+0xc0>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000cae:	4b2a      	ldr	r3, [pc, #168]	@ (8000d58 <MX_FDCAN1_Init+0xc0>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000cb4:	4b28      	ldr	r3, [pc, #160]	@ (8000d58 <MX_FDCAN1_Init+0xc0>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000cba:	4b27      	ldr	r3, [pc, #156]	@ (8000d58 <MX_FDCAN1_Init+0xc0>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000cc0:	4b25      	ldr	r3, [pc, #148]	@ (8000d58 <MX_FDCAN1_Init+0xc0>)
 8000cc2:	2210      	movs	r2, #16
 8000cc4:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000cc6:	4b24      	ldr	r3, [pc, #144]	@ (8000d58 <MX_FDCAN1_Init+0xc0>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000ccc:	4b22      	ldr	r3, [pc, #136]	@ (8000d58 <MX_FDCAN1_Init+0xc0>)
 8000cce:	2202      	movs	r2, #2
 8000cd0:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000cd2:	4b21      	ldr	r3, [pc, #132]	@ (8000d58 <MX_FDCAN1_Init+0xc0>)
 8000cd4:	2202      	movs	r2, #2
 8000cd6:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000cd8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d58 <MX_FDCAN1_Init+0xc0>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000cde:	4b1e      	ldr	r3, [pc, #120]	@ (8000d58 <MX_FDCAN1_Init+0xc0>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000ce4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d58 <MX_FDCAN1_Init+0xc0>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000cea:	4b1b      	ldr	r3, [pc, #108]	@ (8000d58 <MX_FDCAN1_Init+0xc0>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000cf0:	4b19      	ldr	r3, [pc, #100]	@ (8000d58 <MX_FDCAN1_Init+0xc0>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000cf6:	4b18      	ldr	r3, [pc, #96]	@ (8000d58 <MX_FDCAN1_Init+0xc0>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000cfc:	4b16      	ldr	r3, [pc, #88]	@ (8000d58 <MX_FDCAN1_Init+0xc0>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000d02:	4b15      	ldr	r3, [pc, #84]	@ (8000d58 <MX_FDCAN1_Init+0xc0>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000d08:	4b13      	ldr	r3, [pc, #76]	@ (8000d58 <MX_FDCAN1_Init+0xc0>)
 8000d0a:	2204      	movs	r2, #4
 8000d0c:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000d0e:	4b12      	ldr	r3, [pc, #72]	@ (8000d58 <MX_FDCAN1_Init+0xc0>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000d14:	4b10      	ldr	r3, [pc, #64]	@ (8000d58 <MX_FDCAN1_Init+0xc0>)
 8000d16:	2204      	movs	r2, #4
 8000d18:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d58 <MX_FDCAN1_Init+0xc0>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000d20:	4b0d      	ldr	r3, [pc, #52]	@ (8000d58 <MX_FDCAN1_Init+0xc0>)
 8000d22:	2204      	movs	r2, #4
 8000d24:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000d26:	4b0c      	ldr	r3, [pc, #48]	@ (8000d58 <MX_FDCAN1_Init+0xc0>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d58 <MX_FDCAN1_Init+0xc0>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000d32:	4b09      	ldr	r3, [pc, #36]	@ (8000d58 <MX_FDCAN1_Init+0xc0>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000d38:	4b07      	ldr	r3, [pc, #28]	@ (8000d58 <MX_FDCAN1_Init+0xc0>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000d3e:	4b06      	ldr	r3, [pc, #24]	@ (8000d58 <MX_FDCAN1_Init+0xc0>)
 8000d40:	2204      	movs	r2, #4
 8000d42:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000d44:	4804      	ldr	r0, [pc, #16]	@ (8000d58 <MX_FDCAN1_Init+0xc0>)
 8000d46:	f007 fc15 	bl	8008574 <HAL_FDCAN_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000d50:	f001 f830 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	2400033c 	.word	0x2400033c
 8000d5c:	4000a000 	.word	0x4000a000

08000d60 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b0ba      	sub	sp, #232	@ 0xe8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d78:	f107 0310 	add.w	r3, r7, #16
 8000d7c:	22c0      	movs	r2, #192	@ 0xc0
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4618      	mov	r0, r3
 8000d82:	f015 fd80 	bl	8016886 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a2f      	ldr	r2, [pc, #188]	@ (8000e48 <HAL_FDCAN_MspInit+0xe8>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d157      	bne.n	8000e40 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000d90:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 8;
 8000da0:	2308      	movs	r3, #8
 8000da2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000da4:	2302      	movs	r3, #2
 8000da6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 8000da8:	2301      	movs	r3, #1
 8000daa:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000dac:	2302      	movs	r3, #2
 8000dae:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000db0:	23c0      	movs	r3, #192	@ 0xc0
 8000db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000db4:	2300      	movs	r3, #0
 8000db6:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8000dbc:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000dc0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dc4:	f107 0310 	add.w	r3, r7, #16
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f009 fa6f 	bl	800a2ac <HAL_RCCEx_PeriphCLKConfig>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 8000dd4:	f000 ffee 	bl	8001db4 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000dd8:	4b1c      	ldr	r3, [pc, #112]	@ (8000e4c <HAL_FDCAN_MspInit+0xec>)
 8000dda:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8000dde:	4a1b      	ldr	r2, [pc, #108]	@ (8000e4c <HAL_FDCAN_MspInit+0xec>)
 8000de0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000de4:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 8000de8:	4b18      	ldr	r3, [pc, #96]	@ (8000e4c <HAL_FDCAN_MspInit+0xec>)
 8000dea:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8000dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df6:	4b15      	ldr	r3, [pc, #84]	@ (8000e4c <HAL_FDCAN_MspInit+0xec>)
 8000df8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000dfc:	4a13      	ldr	r2, [pc, #76]	@ (8000e4c <HAL_FDCAN_MspInit+0xec>)
 8000dfe:	f043 0301 	orr.w	r3, r3, #1
 8000e02:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e06:	4b11      	ldr	r3, [pc, #68]	@ (8000e4c <HAL_FDCAN_MspInit+0xec>)
 8000e08:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e14:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000e18:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000e2e:	2309      	movs	r3, #9
 8000e30:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e34:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4805      	ldr	r0, [pc, #20]	@ (8000e50 <HAL_FDCAN_MspInit+0xf0>)
 8000e3c:	f007 fefe 	bl	8008c3c <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000e40:	bf00      	nop
 8000e42:	37e8      	adds	r7, #232	@ 0xe8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	4000a000 	.word	0x4000a000
 8000e4c:	58024400 	.word	0x58024400
 8000e50:	58020000 	.word	0x58020000

08000e54 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4a07      	ldr	r2, [pc, #28]	@ (8000e80 <vApplicationGetIdleTaskMemory+0x2c>)
 8000e64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	4a06      	ldr	r2, [pc, #24]	@ (8000e84 <vApplicationGetIdleTaskMemory+0x30>)
 8000e6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2280      	movs	r2, #128	@ 0x80
 8000e70:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000e72:	bf00      	nop
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	240003e8 	.word	0x240003e8
 8000e84:	2400043c 	.word	0x2400043c

08000e88 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000e88:	b5b0      	push	{r4, r5, r7, lr}
 8000e8a:	b096      	sub	sp, #88	@ 0x58
 8000e8c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task_1ms */
  osThreadDef(Task_1ms, fTask_1ms, osPriorityNormal, 0, 128);
 8000e8e:	4b1d      	ldr	r3, [pc, #116]	@ (8000f04 <MX_FREERTOS_Init+0x7c>)
 8000e90:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000e94:	461d      	mov	r5, r3
 8000e96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_1msHandle = osThreadCreate(osThread(Task_1ms), NULL);
 8000ea2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f012 fb7d 	bl	80135a8 <osThreadCreate>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	4a15      	ldr	r2, [pc, #84]	@ (8000f08 <MX_FREERTOS_Init+0x80>)
 8000eb2:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_10ms */
  osThreadDef(Task_10ms, fTask_10ms, osPriorityNormal, 0, 128);
 8000eb4:	4b15      	ldr	r3, [pc, #84]	@ (8000f0c <MX_FREERTOS_Init+0x84>)
 8000eb6:	f107 0420 	add.w	r4, r7, #32
 8000eba:	461d      	mov	r5, r3
 8000ebc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ebe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ec0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ec4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_10msHandle = osThreadCreate(osThread(Task_10ms), NULL);
 8000ec8:	f107 0320 	add.w	r3, r7, #32
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f012 fb6a 	bl	80135a8 <osThreadCreate>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	4a0e      	ldr	r2, [pc, #56]	@ (8000f10 <MX_FREERTOS_Init+0x88>)
 8000ed8:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_100ms */
  osThreadDef(Task_100ms, fTask_100ms, osPriorityNormal, 0, 128);
 8000eda:	4b0e      	ldr	r3, [pc, #56]	@ (8000f14 <MX_FREERTOS_Init+0x8c>)
 8000edc:	1d3c      	adds	r4, r7, #4
 8000ede:	461d      	mov	r5, r3
 8000ee0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ee2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ee4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ee8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_100msHandle = osThreadCreate(osThread(Task_100ms), NULL);
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f012 fb59 	bl	80135a8 <osThreadCreate>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	4a07      	ldr	r2, [pc, #28]	@ (8000f18 <MX_FREERTOS_Init+0x90>)
 8000efa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000efc:	bf00      	nop
 8000efe:	3758      	adds	r7, #88	@ 0x58
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bdb0      	pop	{r4, r5, r7, pc}
 8000f04:	080188dc 	.word	0x080188dc
 8000f08:	240003dc 	.word	0x240003dc
 8000f0c:	08018904 	.word	0x08018904
 8000f10:	240003e0 	.word	0x240003e0
 8000f14:	0801892c 	.word	0x0801892c
 8000f18:	240003e4 	.word	0x240003e4

08000f1c <fTask_1ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTask_1ms */
void fTask_1ms(void const * argument)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTask_1ms */
  /* Infinite loop */
	LPF_gyro_filter_init();
 8000f24:	f7ff fe00 	bl	8000b28 <LPF_gyro_filter_init>
  for(;;)
  {
	TimeOn_Counter++;
 8000f28:	4b07      	ldr	r3, [pc, #28]	@ (8000f48 <fTask_1ms+0x2c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	4a06      	ldr	r2, [pc, #24]	@ (8000f48 <fTask_1ms+0x2c>)
 8000f30:	6013      	str	r3, [r2, #0]
	LED_Tasks();
 8000f32:	f003 fc2d 	bl	8004790 <LED_Tasks>
	SBUS_IntegrityVerification();
 8000f36:	f004 f8ed 	bl	8005114 <SBUS_IntegrityVerification>
	NMEA_process_task();
 8000f3a:	f000 fdaf 	bl	8001a9c <NMEA_process_task>
    osDelay(1);
 8000f3e:	2001      	movs	r0, #1
 8000f40:	f012 fb7e 	bl	8013640 <osDelay>
	TimeOn_Counter++;
 8000f44:	bf00      	nop
 8000f46:	e7ef      	b.n	8000f28 <fTask_1ms+0xc>
 8000f48:	24000d74 	.word	0x24000d74

08000f4c <fTask_10ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTask_10ms */
void fTask_10ms(void const * argument)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTask_10ms */
  /* Infinite loop */
  for(;;)
  {
	BNO_Tasks();
 8000f54:	f003 fb58 	bl	8004608 <BNO_Tasks>
	BMP280_calculate();
 8000f58:	f002 fda8 	bl	8003aac <BMP280_calculate>

	PWM_Assign();
 8000f5c:	f003 fcca 	bl	80048f4 <PWM_Assign>
	SD_blackbox_write();
 8000f60:	f004 f9ba 	bl	80052d8 <SD_blackbox_write>
    osDelay(10);
 8000f64:	200a      	movs	r0, #10
 8000f66:	f012 fb6b 	bl	8013640 <osDelay>
  {
 8000f6a:	bf00      	nop
 8000f6c:	e7f2      	b.n	8000f54 <fTask_10ms+0x8>

08000f6e <fTask_100ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTask_100ms */
void fTask_100ms(void const * argument)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTask_100ms */
  /* Infinite loop */
  for(;;)
  {
	LR03_StateMachine();
 8000f76:	f003 fca5 	bl	80048c4 <LR03_StateMachine>
    osDelay(100);
 8000f7a:	2064      	movs	r0, #100	@ 0x64
 8000f7c:	f012 fb60 	bl	8013640 <osDelay>
	LR03_StateMachine();
 8000f80:	bf00      	nop
 8000f82:	e7f8      	b.n	8000f76 <fTask_100ms+0x8>

08000f84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	@ 0x28
 8000f88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
 8000f98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9a:	4b4e      	ldr	r3, [pc, #312]	@ (80010d4 <MX_GPIO_Init+0x150>)
 8000f9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fa0:	4a4c      	ldr	r2, [pc, #304]	@ (80010d4 <MX_GPIO_Init+0x150>)
 8000fa2:	f043 0304 	orr.w	r3, r3, #4
 8000fa6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000faa:	4b4a      	ldr	r3, [pc, #296]	@ (80010d4 <MX_GPIO_Init+0x150>)
 8000fac:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fb0:	f003 0304 	and.w	r3, r3, #4
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb8:	4b46      	ldr	r3, [pc, #280]	@ (80010d4 <MX_GPIO_Init+0x150>)
 8000fba:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fbe:	4a45      	ldr	r2, [pc, #276]	@ (80010d4 <MX_GPIO_Init+0x150>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000fc8:	4b42      	ldr	r3, [pc, #264]	@ (80010d4 <MX_GPIO_Init+0x150>)
 8000fca:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd6:	4b3f      	ldr	r3, [pc, #252]	@ (80010d4 <MX_GPIO_Init+0x150>)
 8000fd8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fdc:	4a3d      	ldr	r2, [pc, #244]	@ (80010d4 <MX_GPIO_Init+0x150>)
 8000fde:	f043 0302 	orr.w	r3, r3, #2
 8000fe2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000fe6:	4b3b      	ldr	r3, [pc, #236]	@ (80010d4 <MX_GPIO_Init+0x150>)
 8000fe8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fec:	f003 0302 	and.w	r3, r3, #2
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff4:	4b37      	ldr	r3, [pc, #220]	@ (80010d4 <MX_GPIO_Init+0x150>)
 8000ff6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ffa:	4a36      	ldr	r2, [pc, #216]	@ (80010d4 <MX_GPIO_Init+0x150>)
 8000ffc:	f043 0308 	orr.w	r3, r3, #8
 8001000:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001004:	4b33      	ldr	r3, [pc, #204]	@ (80010d4 <MX_GPIO_Init+0x150>)
 8001006:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800100a:	f003 0308 	and.w	r3, r3, #8
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8001012:	2200      	movs	r2, #0
 8001014:	f242 010f 	movw	r1, #8207	@ 0x200f
 8001018:	482f      	ldr	r0, [pc, #188]	@ (80010d8 <MX_GPIO_Init+0x154>)
 800101a:	f007 ffbf 	bl	8008f9c <HAL_GPIO_WritePin>
                          |LED_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_NSS_GPIO_Port, SD_NSS_Pin, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	2110      	movs	r1, #16
 8001022:	482e      	ldr	r0, [pc, #184]	@ (80010dc <MX_GPIO_Init+0x158>)
 8001024:	f007 ffba 	bl	8008f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IMU_BOOT_Pin|BME_NSS_Pin, GPIO_PIN_RESET);
 8001028:	2200      	movs	r2, #0
 800102a:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 800102e:	482c      	ldr	r0, [pc, #176]	@ (80010e0 <MX_GPIO_Init+0x15c>)
 8001030:	f007 ffb4 	bl	8008f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, GPIO_PIN_RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	2104      	movs	r1, #4
 8001038:	482a      	ldr	r0, [pc, #168]	@ (80010e4 <MX_GPIO_Init+0x160>)
 800103a:	f007 ffaf 	bl	8008f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 800103e:	f242 030f 	movw	r3, #8207	@ 0x200f
 8001042:	617b      	str	r3, [r7, #20]
                          |LED_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001044:	2301      	movs	r3, #1
 8001046:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104c:	2300      	movs	r3, #0
 800104e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	4619      	mov	r1, r3
 8001056:	4820      	ldr	r0, [pc, #128]	@ (80010d8 <MX_GPIO_Init+0x154>)
 8001058:	f007 fdf0 	bl	8008c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_NSS_Pin;
 800105c:	2310      	movs	r3, #16
 800105e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001060:	2301      	movs	r3, #1
 8001062:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2300      	movs	r3, #0
 800106a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_NSS_GPIO_Port, &GPIO_InitStruct);
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	4619      	mov	r1, r3
 8001072:	481a      	ldr	r0, [pc, #104]	@ (80010dc <MX_GPIO_Init+0x158>)
 8001074:	f007 fde2 	bl	8008c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IMU_BOOT_Pin|BME_NSS_Pin;
 8001078:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800107c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107e:	2301      	movs	r3, #1
 8001080:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001086:	2300      	movs	r3, #0
 8001088:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	4619      	mov	r1, r3
 8001090:	4813      	ldr	r0, [pc, #76]	@ (80010e0 <MX_GPIO_Init+0x15c>)
 8001092:	f007 fdd3 	bl	8008c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8001096:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800109a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800109c:	2300      	movs	r3, #0
 800109e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	4619      	mov	r1, r3
 80010aa:	480b      	ldr	r0, [pc, #44]	@ (80010d8 <MX_GPIO_Init+0x154>)
 80010ac:	f007 fdc6 	bl	8008c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_RST_Pin;
 80010b0:	2304      	movs	r3, #4
 80010b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b4:	2301      	movs	r3, #1
 80010b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	2300      	movs	r3, #0
 80010be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_RST_GPIO_Port, &GPIO_InitStruct);
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	4619      	mov	r1, r3
 80010c6:	4807      	ldr	r0, [pc, #28]	@ (80010e4 <MX_GPIO_Init+0x160>)
 80010c8:	f007 fdb8 	bl	8008c3c <HAL_GPIO_Init>

}
 80010cc:	bf00      	nop
 80010ce:	3728      	adds	r7, #40	@ 0x28
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	58024400 	.word	0x58024400
 80010d8:	58020800 	.word	0x58020800
 80010dc:	58020000 	.word	0x58020000
 80010e0:	58020400 	.word	0x58020400
 80010e4:	58020c00 	.word	0x58020c00

080010e8 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80010ec:	4b1b      	ldr	r3, [pc, #108]	@ (800115c <MX_I2C3_Init+0x74>)
 80010ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001160 <MX_I2C3_Init+0x78>)
 80010f0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20B0CCFF;
 80010f2:	4b1a      	ldr	r3, [pc, #104]	@ (800115c <MX_I2C3_Init+0x74>)
 80010f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001164 <MX_I2C3_Init+0x7c>)
 80010f6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80010f8:	4b18      	ldr	r3, [pc, #96]	@ (800115c <MX_I2C3_Init+0x74>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010fe:	4b17      	ldr	r3, [pc, #92]	@ (800115c <MX_I2C3_Init+0x74>)
 8001100:	2201      	movs	r2, #1
 8001102:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001104:	4b15      	ldr	r3, [pc, #84]	@ (800115c <MX_I2C3_Init+0x74>)
 8001106:	2200      	movs	r2, #0
 8001108:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800110a:	4b14      	ldr	r3, [pc, #80]	@ (800115c <MX_I2C3_Init+0x74>)
 800110c:	2200      	movs	r2, #0
 800110e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001110:	4b12      	ldr	r3, [pc, #72]	@ (800115c <MX_I2C3_Init+0x74>)
 8001112:	2200      	movs	r2, #0
 8001114:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001116:	4b11      	ldr	r3, [pc, #68]	@ (800115c <MX_I2C3_Init+0x74>)
 8001118:	2200      	movs	r2, #0
 800111a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800111c:	4b0f      	ldr	r3, [pc, #60]	@ (800115c <MX_I2C3_Init+0x74>)
 800111e:	2200      	movs	r2, #0
 8001120:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001122:	480e      	ldr	r0, [pc, #56]	@ (800115c <MX_I2C3_Init+0x74>)
 8001124:	f007 ff54 	bl	8008fd0 <HAL_I2C_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800112e:	f000 fe41 	bl	8001db4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001132:	2100      	movs	r1, #0
 8001134:	4809      	ldr	r0, [pc, #36]	@ (800115c <MX_I2C3_Init+0x74>)
 8001136:	f007 ffe7 	bl	8009108 <HAL_I2CEx_ConfigAnalogFilter>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001140:	f000 fe38 	bl	8001db4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001144:	2100      	movs	r1, #0
 8001146:	4805      	ldr	r0, [pc, #20]	@ (800115c <MX_I2C3_Init+0x74>)
 8001148:	f008 f829 	bl	800919e <HAL_I2CEx_ConfigDigitalFilter>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001152:	f000 fe2f 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	2400063c 	.word	0x2400063c
 8001160:	40005c00 	.word	0x40005c00
 8001164:	20b0ccff 	.word	0x20b0ccff

08001168 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b0bc      	sub	sp, #240	@ 0xf0
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001180:	f107 0318 	add.w	r3, r7, #24
 8001184:	22c0      	movs	r2, #192	@ 0xc0
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f015 fb7c 	bl	8016886 <memset>
  if(i2cHandle->Instance==I2C3)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a39      	ldr	r2, [pc, #228]	@ (8001278 <HAL_I2C_MspInit+0x110>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d16b      	bne.n	8001270 <HAL_I2C_MspInit+0x108>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001198:	f04f 0208 	mov.w	r2, #8
 800119c:	f04f 0300 	mov.w	r3, #0
 80011a0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011aa:	f107 0318 	add.w	r3, r7, #24
 80011ae:	4618      	mov	r0, r3
 80011b0:	f009 f87c 	bl	800a2ac <HAL_RCCEx_PeriphCLKConfig>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80011ba:	f000 fdfb 	bl	8001db4 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011be:	4b2f      	ldr	r3, [pc, #188]	@ (800127c <HAL_I2C_MspInit+0x114>)
 80011c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80011c4:	4a2d      	ldr	r2, [pc, #180]	@ (800127c <HAL_I2C_MspInit+0x114>)
 80011c6:	f043 0304 	orr.w	r3, r3, #4
 80011ca:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80011ce:	4b2b      	ldr	r3, [pc, #172]	@ (800127c <HAL_I2C_MspInit+0x114>)
 80011d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80011d4:	f003 0304 	and.w	r3, r3, #4
 80011d8:	617b      	str	r3, [r7, #20]
 80011da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011dc:	4b27      	ldr	r3, [pc, #156]	@ (800127c <HAL_I2C_MspInit+0x114>)
 80011de:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80011e2:	4a26      	ldr	r2, [pc, #152]	@ (800127c <HAL_I2C_MspInit+0x114>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80011ec:	4b23      	ldr	r3, [pc, #140]	@ (800127c <HAL_I2C_MspInit+0x114>)
 80011ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	613b      	str	r3, [r7, #16]
 80011f8:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001202:	2312      	movs	r3, #18
 8001204:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120e:	2300      	movs	r3, #0
 8001210:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001214:	2304      	movs	r3, #4
 8001216:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800121a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800121e:	4619      	mov	r1, r3
 8001220:	4817      	ldr	r0, [pc, #92]	@ (8001280 <HAL_I2C_MspInit+0x118>)
 8001222:	f007 fd0b 	bl	8008c3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001226:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800122a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800122e:	2312      	movs	r3, #18
 8001230:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123a:	2300      	movs	r3, #0
 800123c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001240:	2304      	movs	r3, #4
 8001242:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001246:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800124a:	4619      	mov	r1, r3
 800124c:	480d      	ldr	r0, [pc, #52]	@ (8001284 <HAL_I2C_MspInit+0x11c>)
 800124e:	f007 fcf5 	bl	8008c3c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001252:	4b0a      	ldr	r3, [pc, #40]	@ (800127c <HAL_I2C_MspInit+0x114>)
 8001254:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001258:	4a08      	ldr	r2, [pc, #32]	@ (800127c <HAL_I2C_MspInit+0x114>)
 800125a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800125e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001262:	4b06      	ldr	r3, [pc, #24]	@ (800127c <HAL_I2C_MspInit+0x114>)
 8001264:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001268:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001270:	bf00      	nop
 8001272:	37f0      	adds	r7, #240	@ 0xf0
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40005c00 	.word	0x40005c00
 800127c:	58024400 	.word	0x58024400
 8001280:	58020800 	.word	0x58020800
 8001284:	58020000 	.word	0x58020000

08001288 <default_CB>:
static float speed_fall_barrier;	/**< Barrier of decreasing speed*/
/**
 * default_CB() is a default function for all the CB pointers which do nothing.\n
 * The unregistering CB pointer is setting to pointer of this function.  
 */
static void default_CB(void){}
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <NMEA_parser>:
 * NMEA_parser is function which parses single correct NMEA message.\n
 * Inside this function all known types of NMEA message are recognized and nmea_data structure fields are set.\n
 * There is also implemented mechanism of recognizing specified events and calling corresponding to them callbacks.
 * @param[in]	message	pointer to buffer storing NMEA message.
 */
static void 	NMEA_parser(char *message){
 8001298:	b5b0      	push	{r4, r5, r7, lr}
 800129a:	b0b2      	sub	sp, #200	@ 0xc8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]

	NMEA_data previous_data = nmea_data;
 80012a0:	4ba9      	ldr	r3, [pc, #676]	@ (8001548 <NMEA_parser+0x2b0>)
 80012a2:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 80012a6:	461d      	mov	r5, r3
 80012a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80012b8:	e884 0003 	stmia.w	r4, {r0, r1}

	int num = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	char *fields[32]={NULL};
 80012c2:	f107 030c 	add.w	r3, r7, #12
 80012c6:	2280      	movs	r2, #128	@ 0x80
 80012c8:	2100      	movs	r1, #0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f015 fadb 	bl	8016886 <memset>
	fields[num++]=message;
 80012d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80012d4:	1c5a      	adds	r2, r3, #1
 80012d6:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	33c8      	adds	r3, #200	@ 0xc8
 80012de:	443b      	add	r3, r7
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	f843 2cbc 	str.w	r2, [r3, #-188]
	while ((message = strchr(message, ','))) {
 80012e6:	e00f      	b.n	8001308 <NMEA_parser+0x70>
		*message++ = 0;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	1c5a      	adds	r2, r3, #1
 80012ec:	607a      	str	r2, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	701a      	strb	r2, [r3, #0]
		fields[num++]=message;
 80012f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	33c8      	adds	r3, #200	@ 0xc8
 8001300:	443b      	add	r3, r7
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	f843 2cbc 	str.w	r2, [r3, #-188]
	while ((message = strchr(message, ','))) {
 8001308:	212c      	movs	r1, #44	@ 0x2c
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f015 fac3 	bl	8016896 <strchr>
 8001310:	6078      	str	r0, [r7, #4]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d1e7      	bne.n	80012e8 <NMEA_parser+0x50>
	}

	if(strcmp(fields[0],"$GPGLL")==0){
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	498c      	ldr	r1, [pc, #560]	@ (800154c <NMEA_parser+0x2b4>)
 800131c:	4618      	mov	r0, r3
 800131e:	f7fe ffe7 	bl	80002f0 <strcmp>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d11e      	bne.n	8001366 <NMEA_parser+0xce>

		nmea_data.latitude = atof(fields[1]);
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	4618      	mov	r0, r3
 800132c:	f014 fb5c 	bl	80159e8 <atof>
 8001330:	eeb0 7b40 	vmov.f64	d7, d0
 8001334:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001338:	4b83      	ldr	r3, [pc, #524]	@ (8001548 <NMEA_parser+0x2b0>)
 800133a:	edc3 7a02 	vstr	s15, [r3, #8]
		nmea_data.latitude_direction = *fields[2];
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	781a      	ldrb	r2, [r3, #0]
 8001342:	4b81      	ldr	r3, [pc, #516]	@ (8001548 <NMEA_parser+0x2b0>)
 8001344:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[3]);
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	4618      	mov	r0, r3
 800134a:	f014 fb4d 	bl	80159e8 <atof>
 800134e:	eeb0 7b40 	vmov.f64	d7, d0
 8001352:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001356:	4b7c      	ldr	r3, [pc, #496]	@ (8001548 <NMEA_parser+0x2b0>)
 8001358:	edc3 7a04 	vstr	s15, [r3, #16]
		nmea_data.longitude_direction = *fields[4];
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	781a      	ldrb	r2, [r3, #0]
 8001360:	4b79      	ldr	r3, [pc, #484]	@ (8001548 <NMEA_parser+0x2b0>)
 8001362:	751a      	strb	r2, [r3, #20]
 8001364:	e10d      	b.n	8001582 <NMEA_parser+0x2ea>

	}else if(strcmp(fields[0],"$GPRMC")==0){
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	4979      	ldr	r1, [pc, #484]	@ (8001550 <NMEA_parser+0x2b8>)
 800136a:	4618      	mov	r0, r3
 800136c:	f7fe ffc0 	bl	80002f0 <strcmp>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d130      	bne.n	80013d8 <NMEA_parser+0x140>

		nmea_data.UTC_time = atof(fields[1]);
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	4618      	mov	r0, r3
 800137a:	f014 fb35 	bl	80159e8 <atof>
 800137e:	eeb0 7b40 	vmov.f64	d7, d0
 8001382:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001386:	4b70      	ldr	r3, [pc, #448]	@ (8001548 <NMEA_parser+0x2b0>)
 8001388:	edc3 7a00 	vstr	s15, [r3]
		nmea_data.UT_date = atoi(fields[9]);
 800138c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800138e:	4618      	mov	r0, r3
 8001390:	f014 fb2d 	bl	80159ee <atoi>
 8001394:	4603      	mov	r3, r0
 8001396:	4a6c      	ldr	r2, [pc, #432]	@ (8001548 <NMEA_parser+0x2b0>)
 8001398:	6053      	str	r3, [r2, #4]

		nmea_data.latitude = atof(fields[3]);
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	4618      	mov	r0, r3
 800139e:	f014 fb23 	bl	80159e8 <atof>
 80013a2:	eeb0 7b40 	vmov.f64	d7, d0
 80013a6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80013aa:	4b67      	ldr	r3, [pc, #412]	@ (8001548 <NMEA_parser+0x2b0>)
 80013ac:	edc3 7a02 	vstr	s15, [r3, #8]
		nmea_data.latitude_direction = *fields[4];
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	781a      	ldrb	r2, [r3, #0]
 80013b4:	4b64      	ldr	r3, [pc, #400]	@ (8001548 <NMEA_parser+0x2b0>)
 80013b6:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[5]);
 80013b8:	6a3b      	ldr	r3, [r7, #32]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f014 fb14 	bl	80159e8 <atof>
 80013c0:	eeb0 7b40 	vmov.f64	d7, d0
 80013c4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80013c8:	4b5f      	ldr	r3, [pc, #380]	@ (8001548 <NMEA_parser+0x2b0>)
 80013ca:	edc3 7a04 	vstr	s15, [r3, #16]
		nmea_data.longitude_direction = *fields[6];
 80013ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d0:	781a      	ldrb	r2, [r3, #0]
 80013d2:	4b5d      	ldr	r3, [pc, #372]	@ (8001548 <NMEA_parser+0x2b0>)
 80013d4:	751a      	strb	r2, [r3, #20]
 80013d6:	e0d4      	b.n	8001582 <NMEA_parser+0x2ea>


	}else if(strcmp(fields[0],"$GPVTG")==0){
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	495e      	ldr	r1, [pc, #376]	@ (8001554 <NMEA_parser+0x2bc>)
 80013dc:	4618      	mov	r0, r3
 80013de:	f7fe ff87 	bl	80002f0 <strcmp>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d116      	bne.n	8001416 <NMEA_parser+0x17e>

		nmea_data.speed_knots =  atoi(fields[5]);
 80013e8:	6a3b      	ldr	r3, [r7, #32]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f014 faff 	bl	80159ee <atoi>
 80013f0:	ee07 0a90 	vmov	s15, r0
 80013f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013f8:	4b53      	ldr	r3, [pc, #332]	@ (8001548 <NMEA_parser+0x2b0>)
 80013fa:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		nmea_data.speed_kmph =  atoi(fields[7]);
 80013fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001400:	4618      	mov	r0, r3
 8001402:	f014 faf4 	bl	80159ee <atoi>
 8001406:	ee07 0a90 	vmov	s15, r0
 800140a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800140e:	4b4e      	ldr	r3, [pc, #312]	@ (8001548 <NMEA_parser+0x2b0>)
 8001410:	edc3 7a08 	vstr	s15, [r3, #32]
 8001414:	e0b5      	b.n	8001582 <NMEA_parser+0x2ea>

	}else if(strcmp(fields[0],"$GPGGA")==0){
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	494f      	ldr	r1, [pc, #316]	@ (8001558 <NMEA_parser+0x2c0>)
 800141a:	4618      	mov	r0, r3
 800141c:	f7fe ff68 	bl	80002f0 <strcmp>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d15c      	bne.n	80014e0 <NMEA_parser+0x248>

		nmea_data.UTC_time = atof(fields[1]);
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	4618      	mov	r0, r3
 800142a:	f014 fadd 	bl	80159e8 <atof>
 800142e:	eeb0 7b40 	vmov.f64	d7, d0
 8001432:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001436:	4b44      	ldr	r3, [pc, #272]	@ (8001548 <NMEA_parser+0x2b0>)
 8001438:	edc3 7a00 	vstr	s15, [r3]

		nmea_data.latitude = atof(fields[2]);
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	4618      	mov	r0, r3
 8001440:	f014 fad2 	bl	80159e8 <atof>
 8001444:	eeb0 7b40 	vmov.f64	d7, d0
 8001448:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800144c:	4b3e      	ldr	r3, [pc, #248]	@ (8001548 <NMEA_parser+0x2b0>)
 800144e:	edc3 7a02 	vstr	s15, [r3, #8]
		nmea_data.latitude_direction = *fields[3];
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	781a      	ldrb	r2, [r3, #0]
 8001456:	4b3c      	ldr	r3, [pc, #240]	@ (8001548 <NMEA_parser+0x2b0>)
 8001458:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[4]);
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	4618      	mov	r0, r3
 800145e:	f014 fac3 	bl	80159e8 <atof>
 8001462:	eeb0 7b40 	vmov.f64	d7, d0
 8001466:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800146a:	4b37      	ldr	r3, [pc, #220]	@ (8001548 <NMEA_parser+0x2b0>)
 800146c:	edc3 7a04 	vstr	s15, [r3, #16]
		nmea_data.longitude_direction = *fields[5];
 8001470:	6a3b      	ldr	r3, [r7, #32]
 8001472:	781a      	ldrb	r2, [r3, #0]
 8001474:	4b34      	ldr	r3, [pc, #208]	@ (8001548 <NMEA_parser+0x2b0>)
 8001476:	751a      	strb	r2, [r3, #20]

		nmea_data.fix = atoi(fields[6]);
 8001478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147a:	4618      	mov	r0, r3
 800147c:	f014 fab7 	bl	80159ee <atoi>
 8001480:	4603      	mov	r3, r0
 8001482:	b2da      	uxtb	r2, r3
 8001484:	4b30      	ldr	r3, [pc, #192]	@ (8001548 <NMEA_parser+0x2b0>)
 8001486:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		nmea_data.sat_in_use = atoi(fields[7]);
 800148a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800148c:	4618      	mov	r0, r3
 800148e:	f014 faae 	bl	80159ee <atoi>
 8001492:	4603      	mov	r3, r0
 8001494:	b2da      	uxtb	r2, r3
 8001496:	4b2c      	ldr	r3, [pc, #176]	@ (8001548 <NMEA_parser+0x2b0>)
 8001498:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		nmea_data.HDOP = atof(fields[8]);
 800149c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800149e:	4618      	mov	r0, r3
 80014a0:	f014 faa2 	bl	80159e8 <atof>
 80014a4:	eeb0 7b40 	vmov.f64	d7, d0
 80014a8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014ac:	4b26      	ldr	r3, [pc, #152]	@ (8001548 <NMEA_parser+0x2b0>)
 80014ae:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

		nmea_data.altitude = atof(fields[9]);
 80014b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014b4:	4618      	mov	r0, r3
 80014b6:	f014 fa97 	bl	80159e8 <atof>
 80014ba:	eeb0 7b40 	vmov.f64	d7, d0
 80014be:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014c2:	4b21      	ldr	r3, [pc, #132]	@ (8001548 <NMEA_parser+0x2b0>)
 80014c4:	edc3 7a06 	vstr	s15, [r3, #24]
		nmea_data.geoidal_separation = atof(fields[11]);
 80014c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014ca:	4618      	mov	r0, r3
 80014cc:	f014 fa8c 	bl	80159e8 <atof>
 80014d0:	eeb0 7b40 	vmov.f64	d7, d0
 80014d4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001548 <NMEA_parser+0x2b0>)
 80014da:	edc3 7a07 	vstr	s15, [r3, #28]
 80014de:	e050      	b.n	8001582 <NMEA_parser+0x2ea>

	}else if(strcmp(fields[0],"$GPGSA")==0){
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	491e      	ldr	r1, [pc, #120]	@ (800155c <NMEA_parser+0x2c4>)
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7fe ff03 	bl	80002f0 <strcmp>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d137      	bne.n	8001560 <NMEA_parser+0x2c8>

		nmea_data.fix_mode = atoi(fields[2]);
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f014 fa7b 	bl	80159ee <atoi>
 80014f8:	4603      	mov	r3, r0
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	4b12      	ldr	r3, [pc, #72]	@ (8001548 <NMEA_parser+0x2b0>)
 80014fe:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

		nmea_data.PDOP = atof(fields[15]);
 8001502:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001504:	4618      	mov	r0, r3
 8001506:	f014 fa6f 	bl	80159e8 <atof>
 800150a:	eeb0 7b40 	vmov.f64	d7, d0
 800150e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001512:	4b0d      	ldr	r3, [pc, #52]	@ (8001548 <NMEA_parser+0x2b0>)
 8001514:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		nmea_data.HDOP = atof(fields[16]);
 8001518:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800151a:	4618      	mov	r0, r3
 800151c:	f014 fa64 	bl	80159e8 <atof>
 8001520:	eeb0 7b40 	vmov.f64	d7, d0
 8001524:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001528:	4b07      	ldr	r3, [pc, #28]	@ (8001548 <NMEA_parser+0x2b0>)
 800152a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		nmea_data.VDOP = atof(fields[17]);
 800152e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001530:	4618      	mov	r0, r3
 8001532:	f014 fa59 	bl	80159e8 <atof>
 8001536:	eeb0 7b40 	vmov.f64	d7, d0
 800153a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800153e:	4b02      	ldr	r3, [pc, #8]	@ (8001548 <NMEA_parser+0x2b0>)
 8001540:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
 8001544:	e01d      	b.n	8001582 <NMEA_parser+0x2ea>
 8001546:	bf00      	nop
 8001548:	24000d38 	.word	0x24000d38
 800154c:	08018948 	.word	0x08018948
 8001550:	08018950 	.word	0x08018950
 8001554:	08018958 	.word	0x08018958
 8001558:	08018960 	.word	0x08018960
 800155c:	08018968 	.word	0x08018968

	}else if(strcmp(fields[0],"$GPGSV")==0){
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	4931      	ldr	r1, [pc, #196]	@ (8001628 <NMEA_parser+0x390>)
 8001564:	4618      	mov	r0, r3
 8001566:	f7fe fec3 	bl	80002f0 <strcmp>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d108      	bne.n	8001582 <NMEA_parser+0x2ea>
		nmea_data.sat_in_view = atoi(fields[3]);
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	4618      	mov	r0, r3
 8001574:	f014 fa3b 	bl	80159ee <atoi>
 8001578:	4603      	mov	r3, r0
 800157a:	b2da      	uxtb	r2, r3
 800157c:	4b2b      	ldr	r3, [pc, #172]	@ (800162c <NMEA_parser+0x394>)
 800157e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	}

	if (abs(nmea_data.speed_kmph - previous_data.speed_kmph) > speed_change_tolerance){
 8001582:	4b2a      	ldr	r3, [pc, #168]	@ (800162c <NMEA_parser+0x394>)
 8001584:	ed93 7a08 	vldr	s14, [r3, #32]
 8001588:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 800158c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001590:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001594:	ee17 3a90 	vmov	r3, s15
 8001598:	2b00      	cmp	r3, #0
 800159a:	bfb8      	it	lt
 800159c:	425b      	neglt	r3, r3
 800159e:	ee07 3a90 	vmov	s15, r3
 80015a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015a6:	4b22      	ldr	r3, [pc, #136]	@ (8001630 <NMEA_parser+0x398>)
 80015a8:	edd3 7a00 	vldr	s15, [r3]
 80015ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b4:	dd02      	ble.n	80015bc <NMEA_parser+0x324>
		speed_change_CB_fun_ptr();
 80015b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001634 <NMEA_parser+0x39c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4798      	blx	r3
	}

	if (nmea_data.speed_kmph > speed_raise_barrier && previous_data.speed_kmph <= speed_raise_barrier){
 80015bc:	4b1b      	ldr	r3, [pc, #108]	@ (800162c <NMEA_parser+0x394>)
 80015be:	ed93 7a08 	vldr	s14, [r3, #32]
 80015c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001638 <NMEA_parser+0x3a0>)
 80015c4:	edd3 7a00 	vldr	s15, [r3]
 80015c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d0:	dd0c      	ble.n	80015ec <NMEA_parser+0x354>
 80015d2:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 80015d6:	4b18      	ldr	r3, [pc, #96]	@ (8001638 <NMEA_parser+0x3a0>)
 80015d8:	edd3 7a00 	vldr	s15, [r3]
 80015dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e4:	d802      	bhi.n	80015ec <NMEA_parser+0x354>
		speed_raise_barrier_CB_fun_ptr();
 80015e6:	4b15      	ldr	r3, [pc, #84]	@ (800163c <NMEA_parser+0x3a4>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4798      	blx	r3
	}

	if (nmea_data.speed_kmph < speed_raise_barrier && previous_data.speed_kmph >= speed_raise_barrier){
 80015ec:	4b0f      	ldr	r3, [pc, #60]	@ (800162c <NMEA_parser+0x394>)
 80015ee:	ed93 7a08 	vldr	s14, [r3, #32]
 80015f2:	4b11      	ldr	r3, [pc, #68]	@ (8001638 <NMEA_parser+0x3a0>)
 80015f4:	edd3 7a00 	vldr	s15, [r3]
 80015f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001600:	d400      	bmi.n	8001604 <NMEA_parser+0x36c>
		speed_fall_barrier_CB_fun_ptr();
	}
}
 8001602:	e00d      	b.n	8001620 <NMEA_parser+0x388>
	if (nmea_data.speed_kmph < speed_raise_barrier && previous_data.speed_kmph >= speed_raise_barrier){
 8001604:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8001608:	4b0b      	ldr	r3, [pc, #44]	@ (8001638 <NMEA_parser+0x3a0>)
 800160a:	edd3 7a00 	vldr	s15, [r3]
 800160e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001616:	da00      	bge.n	800161a <NMEA_parser+0x382>
}
 8001618:	e002      	b.n	8001620 <NMEA_parser+0x388>
		speed_fall_barrier_CB_fun_ptr();
 800161a:	4b09      	ldr	r3, [pc, #36]	@ (8001640 <NMEA_parser+0x3a8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4798      	blx	r3
}
 8001620:	bf00      	nop
 8001622:	37c8      	adds	r7, #200	@ 0xc8
 8001624:	46bd      	mov	sp, r7
 8001626:	bdb0      	pop	{r4, r5, r7, pc}
 8001628:	08018970 	.word	0x08018970
 800162c:	24000d38 	.word	0x24000d38
 8001630:	24000d20 	.word	0x24000d20
 8001634:	24000d1c 	.word	0x24000d1c
 8001638:	24000d28 	.word	0x24000d28
 800163c:	24000d24 	.word	0x24000d24
 8001640:	24000d2c 	.word	0x24000d2c

08001644 <hx2int>:
 * hx2int is function which converts hex number written using characters to corresponding integer.
 * @param[in]	n2		is older position ix hex code
 * @param[in]	n1		is younger position ix hex code
 * @param[out]	uint8_t	is integer corresponding to input hex
 */
static uint8_t hx2int(uint8_t n2, uint8_t n1){
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	460a      	mov	r2, r1
 800164e:	71fb      	strb	r3, [r7, #7]
 8001650:	4613      	mov	r3, r2
 8001652:	71bb      	strb	r3, [r7, #6]
	if (n2 <= '9') n2-='0';
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	2b39      	cmp	r3, #57	@ 0x39
 8001658:	d803      	bhi.n	8001662 <hx2int+0x1e>
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	3b30      	subs	r3, #48	@ 0x30
 800165e:	71fb      	strb	r3, [r7, #7]
 8001660:	e002      	b.n	8001668 <hx2int+0x24>
	else n2=n2-'A'+10;
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	3b37      	subs	r3, #55	@ 0x37
 8001666:	71fb      	strb	r3, [r7, #7]

	if (n1 <= '9') n1-='0';
 8001668:	79bb      	ldrb	r3, [r7, #6]
 800166a:	2b39      	cmp	r3, #57	@ 0x39
 800166c:	d803      	bhi.n	8001676 <hx2int+0x32>
 800166e:	79bb      	ldrb	r3, [r7, #6]
 8001670:	3b30      	subs	r3, #48	@ 0x30
 8001672:	71bb      	strb	r3, [r7, #6]
 8001674:	e002      	b.n	800167c <hx2int+0x38>
	else n1=n1-'A'+10;
 8001676:	79bb      	ldrb	r3, [r7, #6]
 8001678:	3b37      	subs	r3, #55	@ 0x37
 800167a:	71bb      	strb	r3, [r7, #6]

	return n2*16+n1;
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	011b      	lsls	r3, r3, #4
 8001680:	b2da      	uxtb	r2, r3
 8001682:	79bb      	ldrb	r3, [r7, #6]
 8001684:	4413      	add	r3, r2
 8001686:	b2db      	uxtb	r3, r3

}
 8001688:	4618      	mov	r0, r3
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <NMEA_checksum_clc>:
 * NMEA_checksum_clc is function which calculates checksum of the message and compares it to checksum value given in NMEA message.\n
 * To convert given checksum it uses hx2int function.
 * @param[in]	message	pointer to buffer storing NMEA message.
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_checksum_clc(uint8_t * message){
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
	uint8_t index = 1;
 800169c:	2301      	movs	r3, #1
 800169e:	73fb      	strb	r3, [r7, #15]
	uint8_t checksum_clc =0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	73bb      	strb	r3, [r7, #14]

	while (message[index]!='*' && index<NMEA_WORKING_BUFFER_SIZE-2){
 80016a4:	e009      	b.n	80016ba <NMEA_checksum_clc+0x26>
		checksum_clc^=message[index++];
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
 80016a8:	1c5a      	adds	r2, r3, #1
 80016aa:	73fa      	strb	r2, [r7, #15]
 80016ac:	461a      	mov	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	781a      	ldrb	r2, [r3, #0]
 80016b4:	7bbb      	ldrb	r3, [r7, #14]
 80016b6:	4053      	eors	r3, r2
 80016b8:	73bb      	strb	r3, [r7, #14]
	while (message[index]!='*' && index<NMEA_WORKING_BUFFER_SIZE-2){
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	4413      	add	r3, r2
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80016c4:	d002      	beq.n	80016cc <NMEA_checksum_clc+0x38>
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
 80016c8:	2b7d      	cmp	r3, #125	@ 0x7d
 80016ca:	d9ec      	bls.n	80016a6 <NMEA_checksum_clc+0x12>
	}

	uint8_t checksum = hx2int(message[index+1],message[index+2]);
 80016cc:	7bfb      	ldrb	r3, [r7, #15]
 80016ce:	3301      	adds	r3, #1
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	4413      	add	r3, r2
 80016d4:	7818      	ldrb	r0, [r3, #0]
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
 80016d8:	3302      	adds	r3, #2
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	4413      	add	r3, r2
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	4619      	mov	r1, r3
 80016e2:	f7ff ffaf 	bl	8001644 <hx2int>
 80016e6:	4603      	mov	r3, r0
 80016e8:	737b      	strb	r3, [r7, #13]
	if (checksum!=checksum_clc){
 80016ea:	7b7a      	ldrb	r2, [r7, #13]
 80016ec:	7bbb      	ldrb	r3, [r7, #14]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d001      	beq.n	80016f6 <NMEA_checksum_clc+0x62>
		return NMEA_CHECKSUM_ERROR;
 80016f2:	2302      	movs	r3, #2
 80016f4:	e000      	b.n	80016f8 <NMEA_checksum_clc+0x64>
	}
	return NMEA_OK;
 80016f6:	2300      	movs	r3, #0


}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <NMEA_read_line>:

/**
 * NMEA_read_line is function which reads one NMEA message line from NMEA_UART_buffer circular buffer to NMEA_working_buffer.
 */
static void NMEA_read_line(void){
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
	int index = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	607b      	str	r3, [r7, #4]
	while (index < NMEA_WORKING_BUFFER_SIZE) NMEA_working_buffer[index++]=0;	// Clean up working buffer.
 800170a:	e005      	b.n	8001718 <NMEA_read_line+0x18>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	1c5a      	adds	r2, r3, #1
 8001710:	607a      	str	r2, [r7, #4]
 8001712:	4a2b      	ldr	r2, [pc, #172]	@ (80017c0 <NMEA_read_line+0xc0>)
 8001714:	2100      	movs	r1, #0
 8001716:	54d1      	strb	r1, [r2, r3]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2b7f      	cmp	r3, #127	@ 0x7f
 800171c:	ddf6      	ble.n	800170c <NMEA_read_line+0xc>

	index = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	607b      	str	r3, [r7, #4]
	while(NMEA_UART_buffer[UART_buffer_tail]!= '\n' && index < NMEA_WORKING_BUFFER_SIZE-2){
 8001722:	e01c      	b.n	800175e <NMEA_read_line+0x5e>
		NMEA_working_buffer[index]=NMEA_UART_buffer[UART_buffer_tail];
 8001724:	4b27      	ldr	r3, [pc, #156]	@ (80017c4 <NMEA_read_line+0xc4>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a27      	ldr	r2, [pc, #156]	@ (80017c8 <NMEA_read_line+0xc8>)
 800172a:	5cd1      	ldrb	r1, [r2, r3]
 800172c:	4a24      	ldr	r2, [pc, #144]	@ (80017c0 <NMEA_read_line+0xc0>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	460a      	mov	r2, r1
 8001734:	701a      	strb	r2, [r3, #0]
		NMEA_UART_buffer[UART_buffer_tail] = 0;
 8001736:	4b23      	ldr	r3, [pc, #140]	@ (80017c4 <NMEA_read_line+0xc4>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a23      	ldr	r2, [pc, #140]	@ (80017c8 <NMEA_read_line+0xc8>)
 800173c:	2100      	movs	r1, #0
 800173e:	54d1      	strb	r1, [r2, r3]
		UART_buffer_tail = (UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8001740:	4b20      	ldr	r3, [pc, #128]	@ (80017c4 <NMEA_read_line+0xc4>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	3301      	adds	r3, #1
 8001746:	425a      	negs	r2, r3
 8001748:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800174c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001750:	bf58      	it	pl
 8001752:	4253      	negpl	r3, r2
 8001754:	4a1b      	ldr	r2, [pc, #108]	@ (80017c4 <NMEA_read_line+0xc4>)
 8001756:	6013      	str	r3, [r2, #0]
		++index;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3301      	adds	r3, #1
 800175c:	607b      	str	r3, [r7, #4]
	while(NMEA_UART_buffer[UART_buffer_tail]!= '\n' && index < NMEA_WORKING_BUFFER_SIZE-2){
 800175e:	4b19      	ldr	r3, [pc, #100]	@ (80017c4 <NMEA_read_line+0xc4>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a19      	ldr	r2, [pc, #100]	@ (80017c8 <NMEA_read_line+0xc8>)
 8001764:	5cd3      	ldrb	r3, [r2, r3]
 8001766:	2b0a      	cmp	r3, #10
 8001768:	d002      	beq.n	8001770 <NMEA_read_line+0x70>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b7d      	cmp	r3, #125	@ 0x7d
 800176e:	ddd9      	ble.n	8001724 <NMEA_read_line+0x24>
	}
	NMEA_working_buffer[index]=NMEA_UART_buffer[UART_buffer_tail];
 8001770:	4b14      	ldr	r3, [pc, #80]	@ (80017c4 <NMEA_read_line+0xc4>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a14      	ldr	r2, [pc, #80]	@ (80017c8 <NMEA_read_line+0xc8>)
 8001776:	5cd1      	ldrb	r1, [r2, r3]
 8001778:	4a11      	ldr	r2, [pc, #68]	@ (80017c0 <NMEA_read_line+0xc0>)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	460a      	mov	r2, r1
 8001780:	701a      	strb	r2, [r3, #0]
	NMEA_UART_buffer[UART_buffer_tail] = 0;
 8001782:	4b10      	ldr	r3, [pc, #64]	@ (80017c4 <NMEA_read_line+0xc4>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a10      	ldr	r2, [pc, #64]	@ (80017c8 <NMEA_read_line+0xc8>)
 8001788:	2100      	movs	r1, #0
 800178a:	54d1      	strb	r1, [r2, r3]
	UART_buffer_tail = (UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 800178c:	4b0d      	ldr	r3, [pc, #52]	@ (80017c4 <NMEA_read_line+0xc4>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	3301      	adds	r3, #1
 8001792:	425a      	negs	r2, r3
 8001794:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001798:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800179c:	bf58      	it	pl
 800179e:	4253      	negpl	r3, r2
 80017a0:	4a08      	ldr	r2, [pc, #32]	@ (80017c4 <NMEA_read_line+0xc4>)
 80017a2:	6013      	str	r3, [r2, #0]
	++index;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3301      	adds	r3, #1
 80017a8:	607b      	str	r3, [r7, #4]
	--UART_buffer_lines;
 80017aa:	4b08      	ldr	r3, [pc, #32]	@ (80017cc <NMEA_read_line+0xcc>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	4a06      	ldr	r2, [pc, #24]	@ (80017cc <NMEA_read_line+0xcc>)
 80017b2:	6013      	str	r3, [r2, #0]

}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	24000c90 	.word	0x24000c90
 80017c4:	24000d14 	.word	0x24000d14
 80017c8:	24000890 	.word	0x24000890
 80017cc:	24000d18 	.word	0x24000d18

080017d0 <NMEA_init>:

void NMEA_init(UART_HandleTypeDef *huart, DMA_HandleTypeDef *DMA){
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
	HAL_Delay(10);
 80017da:	200a      	movs	r0, #10
 80017dc:	f003 fe64 	bl	80054a8 <HAL_Delay>
	NMEA_huart=huart;
 80017e0:	4a12      	ldr	r2, [pc, #72]	@ (800182c <NMEA_init+0x5c>)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6013      	str	r3, [r2, #0]
	NMEA_DMA=DMA;
 80017e6:	4a12      	ldr	r2, [pc, #72]	@ (8001830 <NMEA_init+0x60>)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	6013      	str	r3, [r2, #0]
	__HAL_UART_ENABLE_IT(NMEA_huart,UART_IT_IDLE);
 80017ec:	4b0f      	ldr	r3, [pc, #60]	@ (800182c <NMEA_init+0x5c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4b0d      	ldr	r3, [pc, #52]	@ (800182c <NMEA_init+0x5c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f042 0210 	orr.w	r2, r2, #16
 80017fe:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(NMEA_huart, NMEA_UART_DMA_buffer, NMEA_UART_DMA_BUFFER_SIZE);
 8001800:	4b0a      	ldr	r3, [pc, #40]	@ (800182c <NMEA_init+0x5c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001808:	490a      	ldr	r1, [pc, #40]	@ (8001834 <NMEA_init+0x64>)
 800180a:	4618      	mov	r0, r3
 800180c:	f00c ff5a 	bl	800e6c4 <HAL_UART_Receive_DMA>


	speed_change_CB_fun_ptr = &default_CB;
 8001810:	4b09      	ldr	r3, [pc, #36]	@ (8001838 <NMEA_init+0x68>)
 8001812:	4a0a      	ldr	r2, [pc, #40]	@ (800183c <NMEA_init+0x6c>)
 8001814:	601a      	str	r2, [r3, #0]
	speed_raise_barrier_CB_fun_ptr = &default_CB;
 8001816:	4b0a      	ldr	r3, [pc, #40]	@ (8001840 <NMEA_init+0x70>)
 8001818:	4a08      	ldr	r2, [pc, #32]	@ (800183c <NMEA_init+0x6c>)
 800181a:	601a      	str	r2, [r3, #0]
	speed_fall_barrier_CB_fun_ptr = &default_CB;
 800181c:	4b09      	ldr	r3, [pc, #36]	@ (8001844 <NMEA_init+0x74>)
 800181e:	4a07      	ldr	r2, [pc, #28]	@ (800183c <NMEA_init+0x6c>)
 8001820:	601a      	str	r2, [r3, #0]
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	24000d30 	.word	0x24000d30
 8001830:	24000d34 	.word	0x24000d34
 8001834:	24000690 	.word	0x24000690
 8001838:	24000d1c 	.word	0x24000d1c
 800183c:	08001289 	.word	0x08001289
 8001840:	24000d24 	.word	0x24000d24
 8001844:	24000d2c 	.word	0x24000d2c

08001848 <NMEA_UART_DMA_get_char>:
 * If buffer overflowes, the oldest NMEA message will be deleted to make space for incoming messages.\n
 * If new line character is detected ('\ n'), the line counter (UART_buffer_lines) increases.
 * @param[in]	DMA_char	character from DMA buffer
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_UART_DMA_get_char(uint8_t DMA_char){
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	71fb      	strb	r3, [r7, #7]
	int position = (UART_buffer_head + 1)%NMEA_UART_BUFFER_SIZE;
 8001852:	4b2d      	ldr	r3, [pc, #180]	@ (8001908 <NMEA_UART_DMA_get_char+0xc0>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	3301      	adds	r3, #1
 8001858:	425a      	negs	r2, r3
 800185a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800185e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001862:	bf58      	it	pl
 8001864:	4253      	negpl	r3, r2
 8001866:	60bb      	str	r3, [r7, #8]
	NMEA_status stat=NMEA_OK;
 8001868:	2300      	movs	r3, #0
 800186a:	73fb      	strb	r3, [r7, #15]

	if (position == UART_buffer_tail){		//buffer overflowed! make space for new message
 800186c:	4b27      	ldr	r3, [pc, #156]	@ (800190c <NMEA_UART_DMA_get_char+0xc4>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	68ba      	ldr	r2, [r7, #8]
 8001872:	429a      	cmp	r2, r3
 8001874:	d130      	bne.n	80018d8 <NMEA_UART_DMA_get_char+0x90>
		while (NMEA_UART_buffer[UART_buffer_tail]!='\n' && NMEA_UART_buffer[UART_buffer_tail]!=0){
 8001876:	e010      	b.n	800189a <NMEA_UART_DMA_get_char+0x52>
			NMEA_UART_buffer[UART_buffer_tail]=0;
 8001878:	4b24      	ldr	r3, [pc, #144]	@ (800190c <NMEA_UART_DMA_get_char+0xc4>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a24      	ldr	r2, [pc, #144]	@ (8001910 <NMEA_UART_DMA_get_char+0xc8>)
 800187e:	2100      	movs	r1, #0
 8001880:	54d1      	strb	r1, [r2, r3]
			UART_buffer_tail=(UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8001882:	4b22      	ldr	r3, [pc, #136]	@ (800190c <NMEA_UART_DMA_get_char+0xc4>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	3301      	adds	r3, #1
 8001888:	425a      	negs	r2, r3
 800188a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800188e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001892:	bf58      	it	pl
 8001894:	4253      	negpl	r3, r2
 8001896:	4a1d      	ldr	r2, [pc, #116]	@ (800190c <NMEA_UART_DMA_get_char+0xc4>)
 8001898:	6013      	str	r3, [r2, #0]
		while (NMEA_UART_buffer[UART_buffer_tail]!='\n' && NMEA_UART_buffer[UART_buffer_tail]!=0){
 800189a:	4b1c      	ldr	r3, [pc, #112]	@ (800190c <NMEA_UART_DMA_get_char+0xc4>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a1c      	ldr	r2, [pc, #112]	@ (8001910 <NMEA_UART_DMA_get_char+0xc8>)
 80018a0:	5cd3      	ldrb	r3, [r2, r3]
 80018a2:	2b0a      	cmp	r3, #10
 80018a4:	d005      	beq.n	80018b2 <NMEA_UART_DMA_get_char+0x6a>
 80018a6:	4b19      	ldr	r3, [pc, #100]	@ (800190c <NMEA_UART_DMA_get_char+0xc4>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a19      	ldr	r2, [pc, #100]	@ (8001910 <NMEA_UART_DMA_get_char+0xc8>)
 80018ac:	5cd3      	ldrb	r3, [r2, r3]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1e2      	bne.n	8001878 <NMEA_UART_DMA_get_char+0x30>
		}
		NMEA_UART_buffer[UART_buffer_tail]=0;
 80018b2:	4b16      	ldr	r3, [pc, #88]	@ (800190c <NMEA_UART_DMA_get_char+0xc4>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a16      	ldr	r2, [pc, #88]	@ (8001910 <NMEA_UART_DMA_get_char+0xc8>)
 80018b8:	2100      	movs	r1, #0
 80018ba:	54d1      	strb	r1, [r2, r3]
		UART_buffer_tail=(UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 80018bc:	4b13      	ldr	r3, [pc, #76]	@ (800190c <NMEA_UART_DMA_get_char+0xc4>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	3301      	adds	r3, #1
 80018c2:	425a      	negs	r2, r3
 80018c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018c8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80018cc:	bf58      	it	pl
 80018ce:	4253      	negpl	r3, r2
 80018d0:	4a0e      	ldr	r2, [pc, #56]	@ (800190c <NMEA_UART_DMA_get_char+0xc4>)
 80018d2:	6013      	str	r3, [r2, #0]
		stat=NMEA_BUFFER_OVERFLOWED;
 80018d4:	2301      	movs	r3, #1
 80018d6:	73fb      	strb	r3, [r7, #15]
	}

	NMEA_UART_buffer[UART_buffer_head]=DMA_char;
 80018d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001908 <NMEA_UART_DMA_get_char+0xc0>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	490c      	ldr	r1, [pc, #48]	@ (8001910 <NMEA_UART_DMA_get_char+0xc8>)
 80018de:	79fa      	ldrb	r2, [r7, #7]
 80018e0:	54ca      	strb	r2, [r1, r3]

	UART_buffer_head=position;
 80018e2:	4a09      	ldr	r2, [pc, #36]	@ (8001908 <NMEA_UART_DMA_get_char+0xc0>)
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	6013      	str	r3, [r2, #0]

	if(DMA_char=='\n'){
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	2b0a      	cmp	r3, #10
 80018ec:	d104      	bne.n	80018f8 <NMEA_UART_DMA_get_char+0xb0>
		++UART_buffer_lines;	//increment lines counter
 80018ee:	4b09      	ldr	r3, [pc, #36]	@ (8001914 <NMEA_UART_DMA_get_char+0xcc>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	3301      	adds	r3, #1
 80018f4:	4a07      	ldr	r2, [pc, #28]	@ (8001914 <NMEA_UART_DMA_get_char+0xcc>)
 80018f6:	6013      	str	r3, [r2, #0]
	}

	return stat;
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	24000d10 	.word	0x24000d10
 800190c:	24000d14 	.word	0x24000d14
 8001910:	24000890 	.word	0x24000890
 8001914:	24000d18 	.word	0x24000d18

08001918 <NMEA_UART_DMA_copy_buffer>:
/**
 * NMEA_UART_DMA_copy_buffer is a function which copies messages from DMA buffer to UART circular buffer.\n
 * To do so, it uses NMEA_UART_DMA_get_char function for every character in NMEA_UART_DMA_buffer from 0 to (NMEA_UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(NMEA_DMA)).
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_UART_DMA_copy_buffer(void){
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0


	NMEA_status stat=NMEA_OK;
 800191e:	2300      	movs	r3, #0
 8001920:	73fb      	strb	r3, [r7, #15]

	int data_length = NMEA_UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(NMEA_DMA);
 8001922:	4b4b      	ldr	r3, [pc, #300]	@ (8001a50 <NMEA_UART_DMA_copy_buffer+0x138>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a4a      	ldr	r2, [pc, #296]	@ (8001a54 <NMEA_UART_DMA_copy_buffer+0x13c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d059      	beq.n	80019e2 <NMEA_UART_DMA_copy_buffer+0xca>
 800192e:	4b48      	ldr	r3, [pc, #288]	@ (8001a50 <NMEA_UART_DMA_copy_buffer+0x138>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a48      	ldr	r2, [pc, #288]	@ (8001a58 <NMEA_UART_DMA_copy_buffer+0x140>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d053      	beq.n	80019e2 <NMEA_UART_DMA_copy_buffer+0xca>
 800193a:	4b45      	ldr	r3, [pc, #276]	@ (8001a50 <NMEA_UART_DMA_copy_buffer+0x138>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a46      	ldr	r2, [pc, #280]	@ (8001a5c <NMEA_UART_DMA_copy_buffer+0x144>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d04d      	beq.n	80019e2 <NMEA_UART_DMA_copy_buffer+0xca>
 8001946:	4b42      	ldr	r3, [pc, #264]	@ (8001a50 <NMEA_UART_DMA_copy_buffer+0x138>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a44      	ldr	r2, [pc, #272]	@ (8001a60 <NMEA_UART_DMA_copy_buffer+0x148>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d047      	beq.n	80019e2 <NMEA_UART_DMA_copy_buffer+0xca>
 8001952:	4b3f      	ldr	r3, [pc, #252]	@ (8001a50 <NMEA_UART_DMA_copy_buffer+0x138>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a42      	ldr	r2, [pc, #264]	@ (8001a64 <NMEA_UART_DMA_copy_buffer+0x14c>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d041      	beq.n	80019e2 <NMEA_UART_DMA_copy_buffer+0xca>
 800195e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a50 <NMEA_UART_DMA_copy_buffer+0x138>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a40      	ldr	r2, [pc, #256]	@ (8001a68 <NMEA_UART_DMA_copy_buffer+0x150>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d03b      	beq.n	80019e2 <NMEA_UART_DMA_copy_buffer+0xca>
 800196a:	4b39      	ldr	r3, [pc, #228]	@ (8001a50 <NMEA_UART_DMA_copy_buffer+0x138>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a3e      	ldr	r2, [pc, #248]	@ (8001a6c <NMEA_UART_DMA_copy_buffer+0x154>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d035      	beq.n	80019e2 <NMEA_UART_DMA_copy_buffer+0xca>
 8001976:	4b36      	ldr	r3, [pc, #216]	@ (8001a50 <NMEA_UART_DMA_copy_buffer+0x138>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a3c      	ldr	r2, [pc, #240]	@ (8001a70 <NMEA_UART_DMA_copy_buffer+0x158>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d02f      	beq.n	80019e2 <NMEA_UART_DMA_copy_buffer+0xca>
 8001982:	4b33      	ldr	r3, [pc, #204]	@ (8001a50 <NMEA_UART_DMA_copy_buffer+0x138>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a3a      	ldr	r2, [pc, #232]	@ (8001a74 <NMEA_UART_DMA_copy_buffer+0x15c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d029      	beq.n	80019e2 <NMEA_UART_DMA_copy_buffer+0xca>
 800198e:	4b30      	ldr	r3, [pc, #192]	@ (8001a50 <NMEA_UART_DMA_copy_buffer+0x138>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a38      	ldr	r2, [pc, #224]	@ (8001a78 <NMEA_UART_DMA_copy_buffer+0x160>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d023      	beq.n	80019e2 <NMEA_UART_DMA_copy_buffer+0xca>
 800199a:	4b2d      	ldr	r3, [pc, #180]	@ (8001a50 <NMEA_UART_DMA_copy_buffer+0x138>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a36      	ldr	r2, [pc, #216]	@ (8001a7c <NMEA_UART_DMA_copy_buffer+0x164>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d01d      	beq.n	80019e2 <NMEA_UART_DMA_copy_buffer+0xca>
 80019a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001a50 <NMEA_UART_DMA_copy_buffer+0x138>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a34      	ldr	r2, [pc, #208]	@ (8001a80 <NMEA_UART_DMA_copy_buffer+0x168>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d017      	beq.n	80019e2 <NMEA_UART_DMA_copy_buffer+0xca>
 80019b2:	4b27      	ldr	r3, [pc, #156]	@ (8001a50 <NMEA_UART_DMA_copy_buffer+0x138>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a32      	ldr	r2, [pc, #200]	@ (8001a84 <NMEA_UART_DMA_copy_buffer+0x16c>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d011      	beq.n	80019e2 <NMEA_UART_DMA_copy_buffer+0xca>
 80019be:	4b24      	ldr	r3, [pc, #144]	@ (8001a50 <NMEA_UART_DMA_copy_buffer+0x138>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a30      	ldr	r2, [pc, #192]	@ (8001a88 <NMEA_UART_DMA_copy_buffer+0x170>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d00b      	beq.n	80019e2 <NMEA_UART_DMA_copy_buffer+0xca>
 80019ca:	4b21      	ldr	r3, [pc, #132]	@ (8001a50 <NMEA_UART_DMA_copy_buffer+0x138>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a2e      	ldr	r2, [pc, #184]	@ (8001a8c <NMEA_UART_DMA_copy_buffer+0x174>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d005      	beq.n	80019e2 <NMEA_UART_DMA_copy_buffer+0xca>
 80019d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001a50 <NMEA_UART_DMA_copy_buffer+0x138>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a2c      	ldr	r2, [pc, #176]	@ (8001a90 <NMEA_UART_DMA_copy_buffer+0x178>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d106      	bne.n	80019f0 <NMEA_UART_DMA_copy_buffer+0xd8>
 80019e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001a50 <NMEA_UART_DMA_copy_buffer+0x138>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80019ee:	e005      	b.n	80019fc <NMEA_UART_DMA_copy_buffer+0xe4>
 80019f0:	4b17      	ldr	r3, [pc, #92]	@ (8001a50 <NMEA_UART_DMA_copy_buffer+0x138>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80019fc:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < data_length; i++){
 80019fe:	2300      	movs	r3, #0
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	e013      	b.n	8001a2c <NMEA_UART_DMA_copy_buffer+0x114>
		if (NMEA_UART_DMA_get_char(NMEA_UART_DMA_buffer[i])==NMEA_BUFFER_OVERFLOWED){
 8001a04:	4a23      	ldr	r2, [pc, #140]	@ (8001a94 <NMEA_UART_DMA_copy_buffer+0x17c>)
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	4413      	add	r3, r2
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff ff1b 	bl	8001848 <NMEA_UART_DMA_get_char>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d101      	bne.n	8001a1c <NMEA_UART_DMA_copy_buffer+0x104>
			stat=NMEA_BUFFER_OVERFLOWED;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	73fb      	strb	r3, [r7, #15]
		}
		NMEA_UART_DMA_buffer[i]=0;
 8001a1c:	4a1d      	ldr	r2, [pc, #116]	@ (8001a94 <NMEA_UART_DMA_copy_buffer+0x17c>)
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	4413      	add	r3, r2
 8001a22:	2200      	movs	r2, #0
 8001a24:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < data_length; i++){
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	68ba      	ldr	r2, [r7, #8]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	dbe7      	blt.n	8001a04 <NMEA_UART_DMA_copy_buffer+0xec>
	}

	HAL_UART_Receive_DMA(NMEA_huart, NMEA_UART_DMA_buffer, NMEA_UART_DMA_BUFFER_SIZE);
 8001a34:	4b18      	ldr	r3, [pc, #96]	@ (8001a98 <NMEA_UART_DMA_copy_buffer+0x180>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a3c:	4915      	ldr	r1, [pc, #84]	@ (8001a94 <NMEA_UART_DMA_copy_buffer+0x17c>)
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f00c fe40 	bl	800e6c4 <HAL_UART_Receive_DMA>
	return stat;
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	24000d34 	.word	0x24000d34
 8001a54:	40020010 	.word	0x40020010
 8001a58:	40020028 	.word	0x40020028
 8001a5c:	40020040 	.word	0x40020040
 8001a60:	40020058 	.word	0x40020058
 8001a64:	40020070 	.word	0x40020070
 8001a68:	40020088 	.word	0x40020088
 8001a6c:	400200a0 	.word	0x400200a0
 8001a70:	400200b8 	.word	0x400200b8
 8001a74:	40020410 	.word	0x40020410
 8001a78:	40020428 	.word	0x40020428
 8001a7c:	40020440 	.word	0x40020440
 8001a80:	40020458 	.word	0x40020458
 8001a84:	40020470 	.word	0x40020470
 8001a88:	40020488 	.word	0x40020488
 8001a8c:	400204a0 	.word	0x400204a0
 8001a90:	400204b8 	.word	0x400204b8
 8001a94:	24000690 	.word	0x24000690
 8001a98:	24000d30 	.word	0x24000d30

08001a9c <NMEA_process_task>:

NMEA_status NMEA_process_task(void){
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
	NMEA_status stat = NMEA_OK;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	71fb      	strb	r3, [r7, #7]
	while(UART_buffer_lines>0) {
 8001aa6:	e00d      	b.n	8001ac4 <NMEA_process_task+0x28>
		NMEA_read_line();
 8001aa8:	f7ff fe2a 	bl	8001700 <NMEA_read_line>
		if (NMEA_checksum_clc(NMEA_working_buffer) == NMEA_OK){
 8001aac:	480a      	ldr	r0, [pc, #40]	@ (8001ad8 <NMEA_process_task+0x3c>)
 8001aae:	f7ff fdf1 	bl	8001694 <NMEA_checksum_clc>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d103      	bne.n	8001ac0 <NMEA_process_task+0x24>
			NMEA_parser((char *)NMEA_working_buffer);
 8001ab8:	4807      	ldr	r0, [pc, #28]	@ (8001ad8 <NMEA_process_task+0x3c>)
 8001aba:	f7ff fbed 	bl	8001298 <NMEA_parser>
 8001abe:	e001      	b.n	8001ac4 <NMEA_process_task+0x28>
		}else stat = NMEA_CHECKSUM_ERROR;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	71fb      	strb	r3, [r7, #7]
	while(UART_buffer_lines>0) {
 8001ac4:	4b05      	ldr	r3, [pc, #20]	@ (8001adc <NMEA_process_task+0x40>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	dced      	bgt.n	8001aa8 <NMEA_process_task+0xc>
	}
	return stat;
 8001acc:	79fb      	ldrb	r3, [r7, #7]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	24000c90 	.word	0x24000c90
 8001adc:	24000d18 	.word	0x24000d18

08001ae0 <user_UART_IDLE_IT_handler>:

NMEA_status user_UART_IDLE_IT_handler(void){
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
	NMEA_status stat = NMEA_OK;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	71fb      	strb	r3, [r7, #7]
	if (__HAL_UART_GET_FLAG(NMEA_huart, UART_FLAG_IDLE) == SET) {
 8001aea:	4b0d      	ldr	r3, [pc, #52]	@ (8001b20 <user_UART_IDLE_IT_handler+0x40>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	f003 0310 	and.w	r3, r3, #16
 8001af6:	2b10      	cmp	r3, #16
 8001af8:	d10d      	bne.n	8001b16 <user_UART_IDLE_IT_handler+0x36>
		__HAL_UART_CLEAR_FLAG(NMEA_huart,UART_FLAG_IDLE);
 8001afa:	4b09      	ldr	r3, [pc, #36]	@ (8001b20 <user_UART_IDLE_IT_handler+0x40>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2210      	movs	r2, #16
 8001b02:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(NMEA_huart);
 8001b04:	4b06      	ldr	r3, [pc, #24]	@ (8001b20 <user_UART_IDLE_IT_handler+0x40>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f00c fe27 	bl	800e75c <HAL_UART_DMAStop>
		stat = NMEA_UART_DMA_copy_buffer();
 8001b0e:	f7ff ff03 	bl	8001918 <NMEA_UART_DMA_copy_buffer>
 8001b12:	4603      	mov	r3, r0
 8001b14:	71fb      	strb	r3, [r7, #7]
	}
	return stat;
 8001b16:	79fb      	ldrb	r3, [r7, #7]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	24000d30 	.word	0x24000d30

08001b24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001b28:	f000 f906 	bl	8001d38 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b2c:	f003 fc60 	bl	80053f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b30:	f000 f842 	bl	8001bb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b34:	f7ff fa26 	bl	8000f84 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b38:	f7ff f87e 	bl	8000c38 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8001b3c:	f7ff f8ac 	bl	8000c98 <MX_FDCAN1_Init>
  MX_I2C3_Init();
 8001b40:	f7ff fad2 	bl	80010e8 <MX_I2C3_Init>
  MX_SPI1_Init();
 8001b44:	f000 f93c 	bl	8001dc0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001b48:	f000 f990 	bl	8001e6c <MX_SPI2_Init>
  MX_TIM2_Init();
 8001b4c:	f000 fcc8 	bl	80024e0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b50:	f000 fd42 	bl	80025d8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001b54:	f000 fda6 	bl	80026a4 <MX_TIM4_Init>
  MX_UART4_Init();
 8001b58:	f000 ff5e 	bl	8002a18 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8001b5c:	f000 ffa8 	bl	8002ab0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001b60:	f001 f842 	bl	8002be8 <MX_USART6_UART_Init>
  MX_TIM13_Init();
 8001b64:	f000 fe1a 	bl	800279c <MX_TIM13_Init>
  MX_USART3_UART_Init();
 8001b68:	f000 fff2 	bl	8002b50 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8001b6c:	f00f ffe6 	bl	8011b3c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  BMP280_init();
 8001b70:	f001 ff76 	bl	8003a60 <BMP280_init>
  //SD_init();
  SBUS_init();
 8001b74:	f002 ff22 	bl	80049bc <SBUS_init>
  HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 8001b78:	2201      	movs	r2, #1
 8001b7a:	4909      	ldr	r1, [pc, #36]	@ (8001ba0 <main+0x7c>)
 8001b7c:	4809      	ldr	r0, [pc, #36]	@ (8001ba4 <main+0x80>)
 8001b7e:	f00c fda1 	bl	800e6c4 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_IT(&huart6, &LR03_RxByte,1);
 8001b82:	2201      	movs	r2, #1
 8001b84:	4908      	ldr	r1, [pc, #32]	@ (8001ba8 <main+0x84>)
 8001b86:	4809      	ldr	r0, [pc, #36]	@ (8001bac <main+0x88>)
 8001b88:	f00c fd50 	bl	800e62c <HAL_UART_Receive_IT>
  NMEA_init(&huart4, &hdma_uart4_rx);
 8001b8c:	4908      	ldr	r1, [pc, #32]	@ (8001bb0 <main+0x8c>)
 8001b8e:	4809      	ldr	r0, [pc, #36]	@ (8001bb4 <main+0x90>)
 8001b90:	f7ff fe1e 	bl	80017d0 <NMEA_init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001b94:	f7ff f978 	bl	8000e88 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001b98:	f011 fcff 	bl	801359a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b9c:	bf00      	nop
 8001b9e:	e7fd      	b.n	8001b9c <main+0x78>
 8001ba0:	240014f7 	.word	0x240014f7
 8001ba4:	24001130 	.word	0x24001130
 8001ba8:	24000d70 	.word	0x24000d70
 8001bac:	240011c4 	.word	0x240011c4
 8001bb0:	24001258 	.word	0x24001258
 8001bb4:	24001008 	.word	0x24001008

08001bb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b09c      	sub	sp, #112	@ 0x70
 8001bbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bc2:	224c      	movs	r2, #76	@ 0x4c
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f014 fe5d 	bl	8016886 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bcc:	1d3b      	adds	r3, r7, #4
 8001bce:	2220      	movs	r2, #32
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f014 fe57 	bl	8016886 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8001bd8:	4b30      	ldr	r3, [pc, #192]	@ (8001c9c <SystemClock_Config+0xe4>)
 8001bda:	f04f 32ff 	mov.w	r2, #4294967295
 8001bde:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001be2:	2002      	movs	r0, #2
 8001be4:	f007 fb28 	bl	8009238 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001be8:	2300      	movs	r3, #0
 8001bea:	603b      	str	r3, [r7, #0]
 8001bec:	4b2c      	ldr	r3, [pc, #176]	@ (8001ca0 <SystemClock_Config+0xe8>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	4a2b      	ldr	r2, [pc, #172]	@ (8001ca0 <SystemClock_Config+0xe8>)
 8001bf2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001bf6:	6193      	str	r3, [r2, #24]
 8001bf8:	4b29      	ldr	r3, [pc, #164]	@ (8001ca0 <SystemClock_Config+0xe8>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c00:	603b      	str	r3, [r7, #0]
 8001c02:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001c04:	bf00      	nop
 8001c06:	4b26      	ldr	r3, [pc, #152]	@ (8001ca0 <SystemClock_Config+0xe8>)
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c12:	d1f8      	bne.n	8001c06 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c14:	2302      	movs	r3, #2
 8001c16:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001c1c:	2340      	movs	r3, #64	@ 0x40
 8001c1e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c20:	2302      	movs	r3, #2
 8001c22:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c24:	2300      	movs	r3, #0
 8001c26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c28:	2304      	movs	r3, #4
 8001c2a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8001c2c:	2323      	movs	r3, #35	@ 0x23
 8001c2e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001c30:	2302      	movs	r3, #2
 8001c32:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c34:	2302      	movs	r3, #2
 8001c36:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001c3c:	230c      	movs	r3, #12
 8001c3e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001c40:	2300      	movs	r3, #0
 8001c42:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f007 fb2d 	bl	80092ac <HAL_RCC_OscConfig>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001c58:	f000 f8ac 	bl	8001db4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c5c:	233f      	movs	r3, #63	@ 0x3f
 8001c5e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c60:	2303      	movs	r3, #3
 8001c62:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001c64:	2300      	movs	r3, #0
 8001c66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001c6c:	2340      	movs	r3, #64	@ 0x40
 8001c6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001c70:	2340      	movs	r3, #64	@ 0x40
 8001c72:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001c74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c78:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001c7a:	2340      	movs	r3, #64	@ 0x40
 8001c7c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001c7e:	1d3b      	adds	r3, r7, #4
 8001c80:	2106      	movs	r1, #6
 8001c82:	4618      	mov	r0, r3
 8001c84:	f007 ff44 	bl	8009b10 <HAL_RCC_ClockConfig>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8001c8e:	f000 f891 	bl	8001db4 <Error_Handler>
  }
}
 8001c92:	bf00      	nop
 8001c94:	3770      	adds	r7, #112	@ 0x70
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	58024400 	.word	0x58024400
 8001ca0:	58024800 	.word	0x58024800

08001ca4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART1){
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a18      	ldr	r2, [pc, #96]	@ (8001d14 <HAL_UART_RxCpltCallback+0x70>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d10a      	bne.n	8001ccc <HAL_UART_RxCpltCallback+0x28>
		SBUS_Receive(SBUS_RxBuffer);
 8001cb6:	4b18      	ldr	r3, [pc, #96]	@ (8001d18 <HAL_UART_RxCpltCallback+0x74>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f002 fe8c 	bl	80049d8 <SBUS_Receive>
		HAL_UART_Receive_DMA(&huart1, &SBUS_RxBuffer, 1);
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	4915      	ldr	r1, [pc, #84]	@ (8001d18 <HAL_UART_RxCpltCallback+0x74>)
 8001cc4:	4815      	ldr	r0, [pc, #84]	@ (8001d1c <HAL_UART_RxCpltCallback+0x78>)
 8001cc6:	f00c fcfd 	bl	800e6c4 <HAL_UART_Receive_DMA>
    }
    else if(huart -> Instance == USART6){
    	LR03_Receive(LR03_RxByte);
    	HAL_UART_Receive_IT(&huart6, &LR03_RxByte,1);
    }
}
 8001cca:	e01e      	b.n	8001d0a <HAL_UART_RxCpltCallback+0x66>
    else if (huart -> Instance == USART3){
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a13      	ldr	r2, [pc, #76]	@ (8001d20 <HAL_UART_RxCpltCallback+0x7c>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d10a      	bne.n	8001cec <HAL_UART_RxCpltCallback+0x48>
        BNO_Receive(BNO_BufferByte);
 8001cd6:	4b13      	ldr	r3, [pc, #76]	@ (8001d24 <HAL_UART_RxCpltCallback+0x80>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f002 fbf4 	bl	80044c8 <BNO_Receive>
        HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	4910      	ldr	r1, [pc, #64]	@ (8001d24 <HAL_UART_RxCpltCallback+0x80>)
 8001ce4:	4810      	ldr	r0, [pc, #64]	@ (8001d28 <HAL_UART_RxCpltCallback+0x84>)
 8001ce6:	f00c fced 	bl	800e6c4 <HAL_UART_Receive_DMA>
}
 8001cea:	e00e      	b.n	8001d0a <HAL_UART_RxCpltCallback+0x66>
    else if(huart -> Instance == USART6){
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a0e      	ldr	r2, [pc, #56]	@ (8001d2c <HAL_UART_RxCpltCallback+0x88>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d109      	bne.n	8001d0a <HAL_UART_RxCpltCallback+0x66>
    	LR03_Receive(LR03_RxByte);
 8001cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d30 <HAL_UART_RxCpltCallback+0x8c>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f002 fdc6 	bl	800488c <LR03_Receive>
    	HAL_UART_Receive_IT(&huart6, &LR03_RxByte,1);
 8001d00:	2201      	movs	r2, #1
 8001d02:	490b      	ldr	r1, [pc, #44]	@ (8001d30 <HAL_UART_RxCpltCallback+0x8c>)
 8001d04:	480b      	ldr	r0, [pc, #44]	@ (8001d34 <HAL_UART_RxCpltCallback+0x90>)
 8001d06:	f00c fc91 	bl	800e62c <HAL_UART_Receive_IT>
}
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40011000 	.word	0x40011000
 8001d18:	24001681 	.word	0x24001681
 8001d1c:	2400109c 	.word	0x2400109c
 8001d20:	40004800 	.word	0x40004800
 8001d24:	240014f7 	.word	0x240014f7
 8001d28:	24001130 	.word	0x24001130
 8001d2c:	40011400 	.word	0x40011400
 8001d30:	24000d70 	.word	0x24000d70
 8001d34:	240011c4 	.word	0x240011c4

08001d38 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001d3e:	463b      	mov	r3, r7
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001d4a:	f003 fcb1 	bl	80056b0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001d5a:	231f      	movs	r3, #31
 8001d5c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001d5e:	2387      	movs	r3, #135	@ 0x87
 8001d60:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001d66:	2300      	movs	r3, #0
 8001d68:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001d72:	2300      	movs	r3, #0
 8001d74:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001d76:	2300      	movs	r3, #0
 8001d78:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001d7a:	463b      	mov	r3, r7
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f003 fccf 	bl	8005720 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001d82:	2004      	movs	r0, #4
 8001d84:	f003 fcac 	bl	80056e0 <HAL_MPU_Enable>

}
 8001d88:	bf00      	nop
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a04      	ldr	r2, [pc, #16]	@ (8001db0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d101      	bne.n	8001da6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001da2:	f003 fb61 	bl	8005468 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40014800 	.word	0x40014800

08001db4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001db8:	b672      	cpsid	i
}
 8001dba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dbc:	bf00      	nop
 8001dbe:	e7fd      	b.n	8001dbc <Error_Handler+0x8>

08001dc0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001dc4:	4b27      	ldr	r3, [pc, #156]	@ (8001e64 <MX_SPI1_Init+0xa4>)
 8001dc6:	4a28      	ldr	r2, [pc, #160]	@ (8001e68 <MX_SPI1_Init+0xa8>)
 8001dc8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001dca:	4b26      	ldr	r3, [pc, #152]	@ (8001e64 <MX_SPI1_Init+0xa4>)
 8001dcc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001dd0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001dd2:	4b24      	ldr	r3, [pc, #144]	@ (8001e64 <MX_SPI1_Init+0xa4>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dd8:	4b22      	ldr	r3, [pc, #136]	@ (8001e64 <MX_SPI1_Init+0xa4>)
 8001dda:	2207      	movs	r2, #7
 8001ddc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dde:	4b21      	ldr	r3, [pc, #132]	@ (8001e64 <MX_SPI1_Init+0xa4>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001de4:	4b1f      	ldr	r3, [pc, #124]	@ (8001e64 <MX_SPI1_Init+0xa4>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001dea:	4b1e      	ldr	r3, [pc, #120]	@ (8001e64 <MX_SPI1_Init+0xa4>)
 8001dec:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001df0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001df2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e64 <MX_SPI1_Init+0xa4>)
 8001df4:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 8001df8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dfa:	4b1a      	ldr	r3, [pc, #104]	@ (8001e64 <MX_SPI1_Init+0xa4>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e00:	4b18      	ldr	r3, [pc, #96]	@ (8001e64 <MX_SPI1_Init+0xa4>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e06:	4b17      	ldr	r3, [pc, #92]	@ (8001e64 <MX_SPI1_Init+0xa4>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001e0c:	4b15      	ldr	r3, [pc, #84]	@ (8001e64 <MX_SPI1_Init+0xa4>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e12:	4b14      	ldr	r3, [pc, #80]	@ (8001e64 <MX_SPI1_Init+0xa4>)
 8001e14:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e18:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001e1a:	4b12      	ldr	r3, [pc, #72]	@ (8001e64 <MX_SPI1_Init+0xa4>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001e20:	4b10      	ldr	r3, [pc, #64]	@ (8001e64 <MX_SPI1_Init+0xa4>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001e26:	4b0f      	ldr	r3, [pc, #60]	@ (8001e64 <MX_SPI1_Init+0xa4>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001e2c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e64 <MX_SPI1_Init+0xa4>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001e32:	4b0c      	ldr	r3, [pc, #48]	@ (8001e64 <MX_SPI1_Init+0xa4>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001e38:	4b0a      	ldr	r3, [pc, #40]	@ (8001e64 <MX_SPI1_Init+0xa4>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001e3e:	4b09      	ldr	r3, [pc, #36]	@ (8001e64 <MX_SPI1_Init+0xa4>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001e44:	4b07      	ldr	r3, [pc, #28]	@ (8001e64 <MX_SPI1_Init+0xa4>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001e4a:	4b06      	ldr	r3, [pc, #24]	@ (8001e64 <MX_SPI1_Init+0xa4>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e50:	4804      	ldr	r0, [pc, #16]	@ (8001e64 <MX_SPI1_Init+0xa4>)
 8001e52:	f00a f80b 	bl	800be6c <HAL_SPI_Init>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001e5c:	f7ff ffaa 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e60:	bf00      	nop
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	24000d78 	.word	0x24000d78
 8001e68:	40013000 	.word	0x40013000

08001e6c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001e70:	4b27      	ldr	r3, [pc, #156]	@ (8001f10 <MX_SPI2_Init+0xa4>)
 8001e72:	4a28      	ldr	r2, [pc, #160]	@ (8001f14 <MX_SPI2_Init+0xa8>)
 8001e74:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e76:	4b26      	ldr	r3, [pc, #152]	@ (8001f10 <MX_SPI2_Init+0xa4>)
 8001e78:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001e7c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e7e:	4b24      	ldr	r3, [pc, #144]	@ (8001f10 <MX_SPI2_Init+0xa4>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e84:	4b22      	ldr	r3, [pc, #136]	@ (8001f10 <MX_SPI2_Init+0xa4>)
 8001e86:	2207      	movs	r2, #7
 8001e88:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e8a:	4b21      	ldr	r3, [pc, #132]	@ (8001f10 <MX_SPI2_Init+0xa4>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e90:	4b1f      	ldr	r3, [pc, #124]	@ (8001f10 <MX_SPI2_Init+0xa4>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e96:	4b1e      	ldr	r3, [pc, #120]	@ (8001f10 <MX_SPI2_Init+0xa4>)
 8001e98:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001e9c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001e9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001f10 <MX_SPI2_Init+0xa4>)
 8001ea0:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8001ea4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ea6:	4b1a      	ldr	r3, [pc, #104]	@ (8001f10 <MX_SPI2_Init+0xa4>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001eac:	4b18      	ldr	r3, [pc, #96]	@ (8001f10 <MX_SPI2_Init+0xa4>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001eb2:	4b17      	ldr	r3, [pc, #92]	@ (8001f10 <MX_SPI2_Init+0xa4>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001eb8:	4b15      	ldr	r3, [pc, #84]	@ (8001f10 <MX_SPI2_Init+0xa4>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ebe:	4b14      	ldr	r3, [pc, #80]	@ (8001f10 <MX_SPI2_Init+0xa4>)
 8001ec0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ec4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001ec6:	4b12      	ldr	r3, [pc, #72]	@ (8001f10 <MX_SPI2_Init+0xa4>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001ecc:	4b10      	ldr	r3, [pc, #64]	@ (8001f10 <MX_SPI2_Init+0xa4>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001ed2:	4b0f      	ldr	r3, [pc, #60]	@ (8001f10 <MX_SPI2_Init+0xa4>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001ed8:	4b0d      	ldr	r3, [pc, #52]	@ (8001f10 <MX_SPI2_Init+0xa4>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001ede:	4b0c      	ldr	r3, [pc, #48]	@ (8001f10 <MX_SPI2_Init+0xa4>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8001f10 <MX_SPI2_Init+0xa4>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001eea:	4b09      	ldr	r3, [pc, #36]	@ (8001f10 <MX_SPI2_Init+0xa4>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001ef0:	4b07      	ldr	r3, [pc, #28]	@ (8001f10 <MX_SPI2_Init+0xa4>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001ef6:	4b06      	ldr	r3, [pc, #24]	@ (8001f10 <MX_SPI2_Init+0xa4>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001efc:	4804      	ldr	r0, [pc, #16]	@ (8001f10 <MX_SPI2_Init+0xa4>)
 8001efe:	f009 ffb5 	bl	800be6c <HAL_SPI_Init>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001f08:	f7ff ff54 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001f0c:	bf00      	nop
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	24000e00 	.word	0x24000e00
 8001f14:	40003800 	.word	0x40003800

08001f18 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b0bc      	sub	sp, #240	@ 0xf0
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f20:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f30:	f107 0318 	add.w	r3, r7, #24
 8001f34:	22c0      	movs	r2, #192	@ 0xc0
 8001f36:	2100      	movs	r1, #0
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f014 fca4 	bl	8016886 <memset>
  if(spiHandle->Instance==SPI1)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a4c      	ldr	r2, [pc, #304]	@ (8002074 <HAL_SPI_MspInit+0x15c>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d145      	bne.n	8001fd4 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001f48:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f4c:	f04f 0300 	mov.w	r3, #0
 8001f50:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001f54:	2300      	movs	r3, #0
 8001f56:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f58:	f107 0318 	add.w	r3, r7, #24
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f008 f9a5 	bl	800a2ac <HAL_RCCEx_PeriphCLKConfig>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001f68:	f7ff ff24 	bl	8001db4 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f6c:	4b42      	ldr	r3, [pc, #264]	@ (8002078 <HAL_SPI_MspInit+0x160>)
 8001f6e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001f72:	4a41      	ldr	r2, [pc, #260]	@ (8002078 <HAL_SPI_MspInit+0x160>)
 8001f74:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f78:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8001f7c:	4b3e      	ldr	r3, [pc, #248]	@ (8002078 <HAL_SPI_MspInit+0x160>)
 8001f7e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001f82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f86:	617b      	str	r3, [r7, #20]
 8001f88:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8a:	4b3b      	ldr	r3, [pc, #236]	@ (8002078 <HAL_SPI_MspInit+0x160>)
 8001f8c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f90:	4a39      	ldr	r2, [pc, #228]	@ (8002078 <HAL_SPI_MspInit+0x160>)
 8001f92:	f043 0301 	orr.w	r3, r3, #1
 8001f96:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001f9a:	4b37      	ldr	r3, [pc, #220]	@ (8002078 <HAL_SPI_MspInit+0x160>)
 8001f9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	613b      	str	r3, [r7, #16]
 8001fa6:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8001fa8:	23e0      	movs	r3, #224	@ 0xe0
 8001faa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fc0:	2305      	movs	r3, #5
 8001fc2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001fca:	4619      	mov	r1, r3
 8001fcc:	482b      	ldr	r0, [pc, #172]	@ (800207c <HAL_SPI_MspInit+0x164>)
 8001fce:	f006 fe35 	bl	8008c3c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001fd2:	e04a      	b.n	800206a <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI2)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a29      	ldr	r2, [pc, #164]	@ (8002080 <HAL_SPI_MspInit+0x168>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d145      	bne.n	800206a <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001fde:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001fe2:	f04f 0300 	mov.w	r3, #0
 8001fe6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fee:	f107 0318 	add.w	r3, r7, #24
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f008 f95a 	bl	800a2ac <HAL_RCCEx_PeriphCLKConfig>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8001ffe:	f7ff fed9 	bl	8001db4 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002002:	4b1d      	ldr	r3, [pc, #116]	@ (8002078 <HAL_SPI_MspInit+0x160>)
 8002004:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002008:	4a1b      	ldr	r2, [pc, #108]	@ (8002078 <HAL_SPI_MspInit+0x160>)
 800200a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800200e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002012:	4b19      	ldr	r3, [pc, #100]	@ (8002078 <HAL_SPI_MspInit+0x160>)
 8002014:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002018:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002020:	4b15      	ldr	r3, [pc, #84]	@ (8002078 <HAL_SPI_MspInit+0x160>)
 8002022:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002026:	4a14      	ldr	r2, [pc, #80]	@ (8002078 <HAL_SPI_MspInit+0x160>)
 8002028:	f043 0302 	orr.w	r3, r3, #2
 800202c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002030:	4b11      	ldr	r3, [pc, #68]	@ (8002078 <HAL_SPI_MspInit+0x160>)
 8002032:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	60bb      	str	r3, [r7, #8]
 800203c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BMP_SCK_Pin|BMP_MISO_Pin|BMP_MOSI_Pin;
 800203e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002042:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002046:	2302      	movs	r3, #2
 8002048:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002052:	2300      	movs	r3, #0
 8002054:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002058:	2305      	movs	r3, #5
 800205a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800205e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002062:	4619      	mov	r1, r3
 8002064:	4807      	ldr	r0, [pc, #28]	@ (8002084 <HAL_SPI_MspInit+0x16c>)
 8002066:	f006 fde9 	bl	8008c3c <HAL_GPIO_Init>
}
 800206a:	bf00      	nop
 800206c:	37f0      	adds	r7, #240	@ 0xf0
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40013000 	.word	0x40013000
 8002078:	58024400 	.word	0x58024400
 800207c:	58020000 	.word	0x58020000
 8002080:	40003800 	.word	0x40003800
 8002084:	58020400 	.word	0x58020400

08002088 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800208e:	4b0c      	ldr	r3, [pc, #48]	@ (80020c0 <HAL_MspInit+0x38>)
 8002090:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002094:	4a0a      	ldr	r2, [pc, #40]	@ (80020c0 <HAL_MspInit+0x38>)
 8002096:	f043 0302 	orr.w	r3, r3, #2
 800209a:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800209e:	4b08      	ldr	r3, [pc, #32]	@ (80020c0 <HAL_MspInit+0x38>)
 80020a0:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	607b      	str	r3, [r7, #4]
 80020aa:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020ac:	2200      	movs	r2, #0
 80020ae:	210f      	movs	r1, #15
 80020b0:	f06f 0001 	mvn.w	r0, #1
 80020b4:	f003 fad4 	bl	8005660 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020b8:	bf00      	nop
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	58024400 	.word	0x58024400

080020c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08e      	sub	sp, #56	@ 0x38
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b0f      	cmp	r3, #15
 80020d0:	d844      	bhi.n	800215c <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0);
 80020d2:	2200      	movs	r2, #0
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	2076      	movs	r0, #118	@ 0x76
 80020d8:	f003 fac2 	bl	8005660 <HAL_NVIC_SetPriority>

     /* Enable the TIM17 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80020dc:	2076      	movs	r0, #118	@ 0x76
 80020de:	f003 fad9 	bl	8005694 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80020e2:	4a24      	ldr	r2, [pc, #144]	@ (8002174 <HAL_InitTick+0xb0>)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80020e8:	4b23      	ldr	r3, [pc, #140]	@ (8002178 <HAL_InitTick+0xb4>)
 80020ea:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80020ee:	4a22      	ldr	r2, [pc, #136]	@ (8002178 <HAL_InitTick+0xb4>)
 80020f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020f4:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80020f8:	4b1f      	ldr	r3, [pc, #124]	@ (8002178 <HAL_InitTick+0xb4>)
 80020fa:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80020fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002102:	60bb      	str	r3, [r7, #8]
 8002104:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002106:	f107 020c 	add.w	r2, r7, #12
 800210a:	f107 0310 	add.w	r3, r7, #16
 800210e:	4611      	mov	r1, r2
 8002110:	4618      	mov	r0, r3
 8002112:	f008 f889 	bl	800a228 <HAL_RCC_GetClockConfig>
  /* Compute TIM17 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002116:	f008 f871 	bl	800a1fc <HAL_RCC_GetPCLK2Freq>
 800211a:	4603      	mov	r3, r0
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002122:	4a16      	ldr	r2, [pc, #88]	@ (800217c <HAL_InitTick+0xb8>)
 8002124:	fba2 2303 	umull	r2, r3, r2, r3
 8002128:	0c9b      	lsrs	r3, r3, #18
 800212a:	3b01      	subs	r3, #1
 800212c:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 800212e:	4b14      	ldr	r3, [pc, #80]	@ (8002180 <HAL_InitTick+0xbc>)
 8002130:	4a14      	ldr	r2, [pc, #80]	@ (8002184 <HAL_InitTick+0xc0>)
 8002132:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8002134:	4b12      	ldr	r3, [pc, #72]	@ (8002180 <HAL_InitTick+0xbc>)
 8002136:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800213a:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 800213c:	4a10      	ldr	r2, [pc, #64]	@ (8002180 <HAL_InitTick+0xbc>)
 800213e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002140:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8002142:	4b0f      	ldr	r3, [pc, #60]	@ (8002180 <HAL_InitTick+0xbc>)
 8002144:	2200      	movs	r2, #0
 8002146:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002148:	4b0d      	ldr	r3, [pc, #52]	@ (8002180 <HAL_InitTick+0xbc>)
 800214a:	2200      	movs	r2, #0
 800214c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 800214e:	480c      	ldr	r0, [pc, #48]	@ (8002180 <HAL_InitTick+0xbc>)
 8002150:	f00b f833 	bl	800d1ba <HAL_TIM_Base_Init>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d107      	bne.n	800216a <HAL_InitTick+0xa6>
 800215a:	e001      	b.n	8002160 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e005      	b.n	800216c <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8002160:	4807      	ldr	r0, [pc, #28]	@ (8002180 <HAL_InitTick+0xbc>)
 8002162:	f00b f881 	bl	800d268 <HAL_TIM_Base_Start_IT>
 8002166:	4603      	mov	r3, r0
 8002168:	e000      	b.n	800216c <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
}
 800216c:	4618      	mov	r0, r3
 800216e:	3738      	adds	r7, #56	@ 0x38
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	240000a4 	.word	0x240000a4
 8002178:	58024400 	.word	0x58024400
 800217c:	431bde83 	.word	0x431bde83
 8002180:	24000e88 	.word	0x24000e88
 8002184:	40014800 	.word	0x40014800

08002188 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800218c:	bf00      	nop
 800218e:	e7fd      	b.n	800218c <NMI_Handler+0x4>

08002190 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002194:	bf00      	nop
 8002196:	e7fd      	b.n	8002194 <HardFault_Handler+0x4>

08002198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800219c:	bf00      	nop
 800219e:	e7fd      	b.n	800219c <MemManage_Handler+0x4>

080021a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021a4:	bf00      	nop
 80021a6:	e7fd      	b.n	80021a4 <BusFault_Handler+0x4>

080021a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021ac:	bf00      	nop
 80021ae:	e7fd      	b.n	80021ac <UsageFault_Handler+0x4>

080021b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
	...

080021c0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80021c4:	4802      	ldr	r0, [pc, #8]	@ (80021d0 <DMA1_Stream0_IRQHandler+0x10>)
 80021c6:	f004 fe47 	bl	8006e58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	240012d0 	.word	0x240012d0

080021d4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80021d8:	4802      	ldr	r0, [pc, #8]	@ (80021e4 <DMA1_Stream1_IRQHandler+0x10>)
 80021da:	f004 fe3d 	bl	8006e58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	24001348 	.word	0x24001348

080021e8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80021ec:	4802      	ldr	r0, [pc, #8]	@ (80021f8 <DMA1_Stream2_IRQHandler+0x10>)
 80021ee:	f004 fe33 	bl	8006e58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	24001258 	.word	0x24001258

080021fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002200:	4802      	ldr	r0, [pc, #8]	@ (800220c <USART1_IRQHandler+0x10>)
 8002202:	f00c fc7d 	bl	800eb00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	2400109c 	.word	0x2400109c

08002210 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002214:	4802      	ldr	r0, [pc, #8]	@ (8002220 <USART3_IRQHandler+0x10>)
 8002216:	f00c fc73 	bl	800eb00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	24001130 	.word	0x24001130

08002224 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	user_UART_IDLE_IT_handler();
 8002228:	f7ff fc5a 	bl	8001ae0 <user_UART_IDLE_IT_handler>
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800222c:	4802      	ldr	r0, [pc, #8]	@ (8002238 <UART4_IRQHandler+0x14>)
 800222e:	f00c fc67 	bl	800eb00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	24001008 	.word	0x24001008

0800223c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002240:	4802      	ldr	r0, [pc, #8]	@ (800224c <USART6_IRQHandler+0x10>)
 8002242:	f00c fc5d 	bl	800eb00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	240011c4 	.word	0x240011c4

08002250 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002254:	4802      	ldr	r0, [pc, #8]	@ (8002260 <TIM17_IRQHandler+0x10>)
 8002256:	f00b f9e5 	bl	800d624 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	24000e88 	.word	0x24000e88

08002264 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  return 1;
 8002268:	2301      	movs	r3, #1
}
 800226a:	4618      	mov	r0, r3
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <_kill>:

int _kill(int pid, int sig)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800227e:	f014 fb6f 	bl	8016960 <__errno>
 8002282:	4603      	mov	r3, r0
 8002284:	2216      	movs	r2, #22
 8002286:	601a      	str	r2, [r3, #0]
  return -1;
 8002288:	f04f 33ff 	mov.w	r3, #4294967295
}
 800228c:	4618      	mov	r0, r3
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <_exit>:

void _exit (int status)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800229c:	f04f 31ff 	mov.w	r1, #4294967295
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7ff ffe7 	bl	8002274 <_kill>
  while (1) {}    /* Make sure we hang here */
 80022a6:	bf00      	nop
 80022a8:	e7fd      	b.n	80022a6 <_exit+0x12>

080022aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b086      	sub	sp, #24
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	60f8      	str	r0, [r7, #12]
 80022b2:	60b9      	str	r1, [r7, #8]
 80022b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
 80022ba:	e00a      	b.n	80022d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022bc:	f3af 8000 	nop.w
 80022c0:	4601      	mov	r1, r0
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	1c5a      	adds	r2, r3, #1
 80022c6:	60ba      	str	r2, [r7, #8]
 80022c8:	b2ca      	uxtb	r2, r1
 80022ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	3301      	adds	r3, #1
 80022d0:	617b      	str	r3, [r7, #20]
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	dbf0      	blt.n	80022bc <_read+0x12>
  }

  return len;
 80022da:	687b      	ldr	r3, [r7, #4]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	e009      	b.n	800230a <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	1c5a      	adds	r2, r3, #1
 80022fa:	60ba      	str	r2, [r7, #8]
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	3301      	adds	r3, #1
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	429a      	cmp	r2, r3
 8002310:	dbf1      	blt.n	80022f6 <_write+0x12>
  }
  return len;
 8002312:	687b      	ldr	r3, [r7, #4]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <_close>:

int _close(int file)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002324:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002328:	4618      	mov	r0, r3
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002344:	605a      	str	r2, [r3, #4]
  return 0;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <_isatty>:

int _isatty(int file)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800235c:	2301      	movs	r3, #1
}
 800235e:	4618      	mov	r0, r3
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800236a:	b480      	push	{r7}
 800236c:	b085      	sub	sp, #20
 800236e:	af00      	add	r7, sp, #0
 8002370:	60f8      	str	r0, [r7, #12]
 8002372:	60b9      	str	r1, [r7, #8]
 8002374:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800238c:	4a14      	ldr	r2, [pc, #80]	@ (80023e0 <_sbrk+0x5c>)
 800238e:	4b15      	ldr	r3, [pc, #84]	@ (80023e4 <_sbrk+0x60>)
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002398:	4b13      	ldr	r3, [pc, #76]	@ (80023e8 <_sbrk+0x64>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d102      	bne.n	80023a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023a0:	4b11      	ldr	r3, [pc, #68]	@ (80023e8 <_sbrk+0x64>)
 80023a2:	4a12      	ldr	r2, [pc, #72]	@ (80023ec <_sbrk+0x68>)
 80023a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023a6:	4b10      	ldr	r3, [pc, #64]	@ (80023e8 <_sbrk+0x64>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4413      	add	r3, r2
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d207      	bcs.n	80023c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023b4:	f014 fad4 	bl	8016960 <__errno>
 80023b8:	4603      	mov	r3, r0
 80023ba:	220c      	movs	r2, #12
 80023bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023be:	f04f 33ff 	mov.w	r3, #4294967295
 80023c2:	e009      	b.n	80023d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023c4:	4b08      	ldr	r3, [pc, #32]	@ (80023e8 <_sbrk+0x64>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ca:	4b07      	ldr	r3, [pc, #28]	@ (80023e8 <_sbrk+0x64>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4413      	add	r3, r2
 80023d2:	4a05      	ldr	r2, [pc, #20]	@ (80023e8 <_sbrk+0x64>)
 80023d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023d6:	68fb      	ldr	r3, [r7, #12]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3718      	adds	r7, #24
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	24100000 	.word	0x24100000
 80023e4:	00000400 	.word	0x00000400
 80023e8:	24000ed4 	.word	0x24000ed4
 80023ec:	240067f8 	.word	0x240067f8

080023f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80023f4:	4b32      	ldr	r3, [pc, #200]	@ (80024c0 <SystemInit+0xd0>)
 80023f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023fa:	4a31      	ldr	r2, [pc, #196]	@ (80024c0 <SystemInit+0xd0>)
 80023fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002400:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002404:	4b2f      	ldr	r3, [pc, #188]	@ (80024c4 <SystemInit+0xd4>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 030f 	and.w	r3, r3, #15
 800240c:	2b02      	cmp	r3, #2
 800240e:	d807      	bhi.n	8002420 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002410:	4b2c      	ldr	r3, [pc, #176]	@ (80024c4 <SystemInit+0xd4>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f023 030f 	bic.w	r3, r3, #15
 8002418:	4a2a      	ldr	r2, [pc, #168]	@ (80024c4 <SystemInit+0xd4>)
 800241a:	f043 0303 	orr.w	r3, r3, #3
 800241e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002420:	4b29      	ldr	r3, [pc, #164]	@ (80024c8 <SystemInit+0xd8>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a28      	ldr	r2, [pc, #160]	@ (80024c8 <SystemInit+0xd8>)
 8002426:	f043 0301 	orr.w	r3, r3, #1
 800242a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800242c:	4b26      	ldr	r3, [pc, #152]	@ (80024c8 <SystemInit+0xd8>)
 800242e:	2200      	movs	r2, #0
 8002430:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002432:	4b25      	ldr	r3, [pc, #148]	@ (80024c8 <SystemInit+0xd8>)
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	4924      	ldr	r1, [pc, #144]	@ (80024c8 <SystemInit+0xd8>)
 8002438:	4b24      	ldr	r3, [pc, #144]	@ (80024cc <SystemInit+0xdc>)
 800243a:	4013      	ands	r3, r2
 800243c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800243e:	4b21      	ldr	r3, [pc, #132]	@ (80024c4 <SystemInit+0xd4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 030c 	and.w	r3, r3, #12
 8002446:	2b00      	cmp	r3, #0
 8002448:	d007      	beq.n	800245a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800244a:	4b1e      	ldr	r3, [pc, #120]	@ (80024c4 <SystemInit+0xd4>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f023 030f 	bic.w	r3, r3, #15
 8002452:	4a1c      	ldr	r2, [pc, #112]	@ (80024c4 <SystemInit+0xd4>)
 8002454:	f043 0303 	orr.w	r3, r3, #3
 8002458:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800245a:	4b1b      	ldr	r3, [pc, #108]	@ (80024c8 <SystemInit+0xd8>)
 800245c:	2200      	movs	r2, #0
 800245e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8002460:	4b19      	ldr	r3, [pc, #100]	@ (80024c8 <SystemInit+0xd8>)
 8002462:	2200      	movs	r2, #0
 8002464:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8002466:	4b18      	ldr	r3, [pc, #96]	@ (80024c8 <SystemInit+0xd8>)
 8002468:	2200      	movs	r2, #0
 800246a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800246c:	4b16      	ldr	r3, [pc, #88]	@ (80024c8 <SystemInit+0xd8>)
 800246e:	4a18      	ldr	r2, [pc, #96]	@ (80024d0 <SystemInit+0xe0>)
 8002470:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002472:	4b15      	ldr	r3, [pc, #84]	@ (80024c8 <SystemInit+0xd8>)
 8002474:	4a17      	ldr	r2, [pc, #92]	@ (80024d4 <SystemInit+0xe4>)
 8002476:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002478:	4b13      	ldr	r3, [pc, #76]	@ (80024c8 <SystemInit+0xd8>)
 800247a:	4a17      	ldr	r2, [pc, #92]	@ (80024d8 <SystemInit+0xe8>)
 800247c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800247e:	4b12      	ldr	r3, [pc, #72]	@ (80024c8 <SystemInit+0xd8>)
 8002480:	2200      	movs	r2, #0
 8002482:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002484:	4b10      	ldr	r3, [pc, #64]	@ (80024c8 <SystemInit+0xd8>)
 8002486:	4a14      	ldr	r2, [pc, #80]	@ (80024d8 <SystemInit+0xe8>)
 8002488:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800248a:	4b0f      	ldr	r3, [pc, #60]	@ (80024c8 <SystemInit+0xd8>)
 800248c:	2200      	movs	r2, #0
 800248e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002490:	4b0d      	ldr	r3, [pc, #52]	@ (80024c8 <SystemInit+0xd8>)
 8002492:	4a11      	ldr	r2, [pc, #68]	@ (80024d8 <SystemInit+0xe8>)
 8002494:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002496:	4b0c      	ldr	r3, [pc, #48]	@ (80024c8 <SystemInit+0xd8>)
 8002498:	2200      	movs	r2, #0
 800249a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800249c:	4b0a      	ldr	r3, [pc, #40]	@ (80024c8 <SystemInit+0xd8>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a09      	ldr	r2, [pc, #36]	@ (80024c8 <SystemInit+0xd8>)
 80024a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80024a8:	4b07      	ldr	r3, [pc, #28]	@ (80024c8 <SystemInit+0xd8>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80024ae:	4b0b      	ldr	r3, [pc, #44]	@ (80024dc <SystemInit+0xec>)
 80024b0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80024b4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80024b6:	bf00      	nop
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	e000ed00 	.word	0xe000ed00
 80024c4:	52002000 	.word	0x52002000
 80024c8:	58024400 	.word	0x58024400
 80024cc:	eaf6ed7f 	.word	0xeaf6ed7f
 80024d0:	02020200 	.word	0x02020200
 80024d4:	01ff0000 	.word	0x01ff0000
 80024d8:	01010280 	.word	0x01010280
 80024dc:	52004000 	.word	0x52004000

080024e0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08a      	sub	sp, #40	@ 0x28
 80024e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024e6:	f107 031c 	add.w	r3, r7, #28
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	605a      	str	r2, [r3, #4]
 80024f0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024f2:	463b      	mov	r3, r7
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	605a      	str	r2, [r3, #4]
 80024fa:	609a      	str	r2, [r3, #8]
 80024fc:	60da      	str	r2, [r3, #12]
 80024fe:	611a      	str	r2, [r3, #16]
 8002500:	615a      	str	r2, [r3, #20]
 8002502:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002504:	4b33      	ldr	r3, [pc, #204]	@ (80025d4 <MX_TIM2_Init+0xf4>)
 8002506:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800250a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 280-1;
 800250c:	4b31      	ldr	r3, [pc, #196]	@ (80025d4 <MX_TIM2_Init+0xf4>)
 800250e:	f240 1217 	movw	r2, #279	@ 0x117
 8002512:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002514:	4b2f      	ldr	r3, [pc, #188]	@ (80025d4 <MX_TIM2_Init+0xf4>)
 8002516:	2200      	movs	r2, #0
 8002518:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7000;
 800251a:	4b2e      	ldr	r3, [pc, #184]	@ (80025d4 <MX_TIM2_Init+0xf4>)
 800251c:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8002520:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002522:	4b2c      	ldr	r3, [pc, #176]	@ (80025d4 <MX_TIM2_Init+0xf4>)
 8002524:	2200      	movs	r2, #0
 8002526:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002528:	4b2a      	ldr	r3, [pc, #168]	@ (80025d4 <MX_TIM2_Init+0xf4>)
 800252a:	2280      	movs	r2, #128	@ 0x80
 800252c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800252e:	4829      	ldr	r0, [pc, #164]	@ (80025d4 <MX_TIM2_Init+0xf4>)
 8002530:	f00a ff12 	bl	800d358 <HAL_TIM_PWM_Init>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 800253a:	f7ff fc3b 	bl	8001db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800253e:	2300      	movs	r3, #0
 8002540:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002542:	2300      	movs	r3, #0
 8002544:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002546:	f107 031c 	add.w	r3, r7, #28
 800254a:	4619      	mov	r1, r3
 800254c:	4821      	ldr	r0, [pc, #132]	@ (80025d4 <MX_TIM2_Init+0xf4>)
 800254e:	f00b fe4f 	bl	800e1f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8002558:	f7ff fc2c 	bl	8001db4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800255c:	2360      	movs	r3, #96	@ 0x60
 800255e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002560:	2300      	movs	r3, #0
 8002562:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002564:	2300      	movs	r3, #0
 8002566:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002568:	2300      	movs	r3, #0
 800256a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800256c:	463b      	mov	r3, r7
 800256e:	2200      	movs	r2, #0
 8002570:	4619      	mov	r1, r3
 8002572:	4818      	ldr	r0, [pc, #96]	@ (80025d4 <MX_TIM2_Init+0xf4>)
 8002574:	f00b f95e 	bl	800d834 <HAL_TIM_PWM_ConfigChannel>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800257e:	f7ff fc19 	bl	8001db4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002582:	463b      	mov	r3, r7
 8002584:	2204      	movs	r2, #4
 8002586:	4619      	mov	r1, r3
 8002588:	4812      	ldr	r0, [pc, #72]	@ (80025d4 <MX_TIM2_Init+0xf4>)
 800258a:	f00b f953 	bl	800d834 <HAL_TIM_PWM_ConfigChannel>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8002594:	f7ff fc0e 	bl	8001db4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002598:	463b      	mov	r3, r7
 800259a:	2208      	movs	r2, #8
 800259c:	4619      	mov	r1, r3
 800259e:	480d      	ldr	r0, [pc, #52]	@ (80025d4 <MX_TIM2_Init+0xf4>)
 80025a0:	f00b f948 	bl	800d834 <HAL_TIM_PWM_ConfigChannel>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 80025aa:	f7ff fc03 	bl	8001db4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80025ae:	463b      	mov	r3, r7
 80025b0:	220c      	movs	r2, #12
 80025b2:	4619      	mov	r1, r3
 80025b4:	4807      	ldr	r0, [pc, #28]	@ (80025d4 <MX_TIM2_Init+0xf4>)
 80025b6:	f00b f93d 	bl	800d834 <HAL_TIM_PWM_ConfigChannel>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 80025c0:	f7ff fbf8 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80025c4:	4803      	ldr	r0, [pc, #12]	@ (80025d4 <MX_TIM2_Init+0xf4>)
 80025c6:	f000 f97d 	bl	80028c4 <HAL_TIM_MspPostInit>

}
 80025ca:	bf00      	nop
 80025cc:	3728      	adds	r7, #40	@ 0x28
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	24000ed8 	.word	0x24000ed8

080025d8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b08a      	sub	sp, #40	@ 0x28
 80025dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025de:	f107 031c 	add.w	r3, r7, #28
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	605a      	str	r2, [r3, #4]
 80025e8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025ea:	463b      	mov	r3, r7
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	605a      	str	r2, [r3, #4]
 80025f2:	609a      	str	r2, [r3, #8]
 80025f4:	60da      	str	r2, [r3, #12]
 80025f6:	611a      	str	r2, [r3, #16]
 80025f8:	615a      	str	r2, [r3, #20]
 80025fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025fc:	4b27      	ldr	r3, [pc, #156]	@ (800269c <MX_TIM3_Init+0xc4>)
 80025fe:	4a28      	ldr	r2, [pc, #160]	@ (80026a0 <MX_TIM3_Init+0xc8>)
 8002600:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 280-1;
 8002602:	4b26      	ldr	r3, [pc, #152]	@ (800269c <MX_TIM3_Init+0xc4>)
 8002604:	f240 1217 	movw	r2, #279	@ 0x117
 8002608:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800260a:	4b24      	ldr	r3, [pc, #144]	@ (800269c <MX_TIM3_Init+0xc4>)
 800260c:	2200      	movs	r2, #0
 800260e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7000;
 8002610:	4b22      	ldr	r3, [pc, #136]	@ (800269c <MX_TIM3_Init+0xc4>)
 8002612:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8002616:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002618:	4b20      	ldr	r3, [pc, #128]	@ (800269c <MX_TIM3_Init+0xc4>)
 800261a:	2200      	movs	r2, #0
 800261c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800261e:	4b1f      	ldr	r3, [pc, #124]	@ (800269c <MX_TIM3_Init+0xc4>)
 8002620:	2280      	movs	r2, #128	@ 0x80
 8002622:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002624:	481d      	ldr	r0, [pc, #116]	@ (800269c <MX_TIM3_Init+0xc4>)
 8002626:	f00a fe97 	bl	800d358 <HAL_TIM_PWM_Init>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8002630:	f7ff fbc0 	bl	8001db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002634:	2300      	movs	r3, #0
 8002636:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002638:	2300      	movs	r3, #0
 800263a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800263c:	f107 031c 	add.w	r3, r7, #28
 8002640:	4619      	mov	r1, r3
 8002642:	4816      	ldr	r0, [pc, #88]	@ (800269c <MX_TIM3_Init+0xc4>)
 8002644:	f00b fdd4 	bl	800e1f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800264e:	f7ff fbb1 	bl	8001db4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002652:	2360      	movs	r3, #96	@ 0x60
 8002654:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002656:	2300      	movs	r3, #0
 8002658:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800265a:	2300      	movs	r3, #0
 800265c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800265e:	2300      	movs	r3, #0
 8002660:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002662:	463b      	mov	r3, r7
 8002664:	2200      	movs	r2, #0
 8002666:	4619      	mov	r1, r3
 8002668:	480c      	ldr	r0, [pc, #48]	@ (800269c <MX_TIM3_Init+0xc4>)
 800266a:	f00b f8e3 	bl	800d834 <HAL_TIM_PWM_ConfigChannel>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8002674:	f7ff fb9e 	bl	8001db4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002678:	463b      	mov	r3, r7
 800267a:	2204      	movs	r2, #4
 800267c:	4619      	mov	r1, r3
 800267e:	4807      	ldr	r0, [pc, #28]	@ (800269c <MX_TIM3_Init+0xc4>)
 8002680:	f00b f8d8 	bl	800d834 <HAL_TIM_PWM_ConfigChannel>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 800268a:	f7ff fb93 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800268e:	4803      	ldr	r0, [pc, #12]	@ (800269c <MX_TIM3_Init+0xc4>)
 8002690:	f000 f918 	bl	80028c4 <HAL_TIM_MspPostInit>

}
 8002694:	bf00      	nop
 8002696:	3728      	adds	r7, #40	@ 0x28
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	24000f24 	.word	0x24000f24
 80026a0:	40000400 	.word	0x40000400

080026a4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08a      	sub	sp, #40	@ 0x28
 80026a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026aa:	f107 031c 	add.w	r3, r7, #28
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	605a      	str	r2, [r3, #4]
 80026b4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026b6:	463b      	mov	r3, r7
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	609a      	str	r2, [r3, #8]
 80026c0:	60da      	str	r2, [r3, #12]
 80026c2:	611a      	str	r2, [r3, #16]
 80026c4:	615a      	str	r2, [r3, #20]
 80026c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80026c8:	4b32      	ldr	r3, [pc, #200]	@ (8002794 <MX_TIM4_Init+0xf0>)
 80026ca:	4a33      	ldr	r2, [pc, #204]	@ (8002798 <MX_TIM4_Init+0xf4>)
 80026cc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 280-1;
 80026ce:	4b31      	ldr	r3, [pc, #196]	@ (8002794 <MX_TIM4_Init+0xf0>)
 80026d0:	f240 1217 	movw	r2, #279	@ 0x117
 80026d4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026d6:	4b2f      	ldr	r3, [pc, #188]	@ (8002794 <MX_TIM4_Init+0xf0>)
 80026d8:	2200      	movs	r2, #0
 80026da:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7000;
 80026dc:	4b2d      	ldr	r3, [pc, #180]	@ (8002794 <MX_TIM4_Init+0xf0>)
 80026de:	f641 3258 	movw	r2, #7000	@ 0x1b58
 80026e2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026e4:	4b2b      	ldr	r3, [pc, #172]	@ (8002794 <MX_TIM4_Init+0xf0>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80026ea:	4b2a      	ldr	r3, [pc, #168]	@ (8002794 <MX_TIM4_Init+0xf0>)
 80026ec:	2280      	movs	r2, #128	@ 0x80
 80026ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80026f0:	4828      	ldr	r0, [pc, #160]	@ (8002794 <MX_TIM4_Init+0xf0>)
 80026f2:	f00a fe31 	bl	800d358 <HAL_TIM_PWM_Init>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 80026fc:	f7ff fb5a 	bl	8001db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002700:	2300      	movs	r3, #0
 8002702:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002704:	2300      	movs	r3, #0
 8002706:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002708:	f107 031c 	add.w	r3, r7, #28
 800270c:	4619      	mov	r1, r3
 800270e:	4821      	ldr	r0, [pc, #132]	@ (8002794 <MX_TIM4_Init+0xf0>)
 8002710:	f00b fd6e 	bl	800e1f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 800271a:	f7ff fb4b 	bl	8001db4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800271e:	2360      	movs	r3, #96	@ 0x60
 8002720:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002722:	2300      	movs	r3, #0
 8002724:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002726:	2300      	movs	r3, #0
 8002728:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800272a:	2300      	movs	r3, #0
 800272c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800272e:	463b      	mov	r3, r7
 8002730:	2200      	movs	r2, #0
 8002732:	4619      	mov	r1, r3
 8002734:	4817      	ldr	r0, [pc, #92]	@ (8002794 <MX_TIM4_Init+0xf0>)
 8002736:	f00b f87d 	bl	800d834 <HAL_TIM_PWM_ConfigChannel>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8002740:	f7ff fb38 	bl	8001db4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002744:	463b      	mov	r3, r7
 8002746:	2204      	movs	r2, #4
 8002748:	4619      	mov	r1, r3
 800274a:	4812      	ldr	r0, [pc, #72]	@ (8002794 <MX_TIM4_Init+0xf0>)
 800274c:	f00b f872 	bl	800d834 <HAL_TIM_PWM_ConfigChannel>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8002756:	f7ff fb2d 	bl	8001db4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800275a:	463b      	mov	r3, r7
 800275c:	2208      	movs	r2, #8
 800275e:	4619      	mov	r1, r3
 8002760:	480c      	ldr	r0, [pc, #48]	@ (8002794 <MX_TIM4_Init+0xf0>)
 8002762:	f00b f867 	bl	800d834 <HAL_TIM_PWM_ConfigChannel>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 800276c:	f7ff fb22 	bl	8001db4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002770:	463b      	mov	r3, r7
 8002772:	220c      	movs	r2, #12
 8002774:	4619      	mov	r1, r3
 8002776:	4807      	ldr	r0, [pc, #28]	@ (8002794 <MX_TIM4_Init+0xf0>)
 8002778:	f00b f85c 	bl	800d834 <HAL_TIM_PWM_ConfigChannel>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 8002782:	f7ff fb17 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002786:	4803      	ldr	r0, [pc, #12]	@ (8002794 <MX_TIM4_Init+0xf0>)
 8002788:	f000 f89c 	bl	80028c4 <HAL_TIM_MspPostInit>

}
 800278c:	bf00      	nop
 800278e:	3728      	adds	r7, #40	@ 0x28
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	24000f70 	.word	0x24000f70
 8002798:	40000800 	.word	0x40000800

0800279c <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80027a0:	4b0e      	ldr	r3, [pc, #56]	@ (80027dc <MX_TIM13_Init+0x40>)
 80027a2:	4a0f      	ldr	r2, [pc, #60]	@ (80027e0 <MX_TIM13_Init+0x44>)
 80027a4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 280-1;
 80027a6:	4b0d      	ldr	r3, [pc, #52]	@ (80027dc <MX_TIM13_Init+0x40>)
 80027a8:	f240 1217 	movw	r2, #279	@ 0x117
 80027ac:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027ae:	4b0b      	ldr	r3, [pc, #44]	@ (80027dc <MX_TIM13_Init+0x40>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 80027b4:	4b09      	ldr	r3, [pc, #36]	@ (80027dc <MX_TIM13_Init+0x40>)
 80027b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80027ba:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027bc:	4b07      	ldr	r3, [pc, #28]	@ (80027dc <MX_TIM13_Init+0x40>)
 80027be:	2200      	movs	r2, #0
 80027c0:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80027c2:	4b06      	ldr	r3, [pc, #24]	@ (80027dc <MX_TIM13_Init+0x40>)
 80027c4:	2280      	movs	r2, #128	@ 0x80
 80027c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80027c8:	4804      	ldr	r0, [pc, #16]	@ (80027dc <MX_TIM13_Init+0x40>)
 80027ca:	f00a fcf6 	bl	800d1ba <HAL_TIM_Base_Init>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 80027d4:	f7ff faee 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80027d8:	bf00      	nop
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	24000fbc 	.word	0x24000fbc
 80027e0:	40001c00 	.word	0x40001c00

080027e4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b087      	sub	sp, #28
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027f4:	d10f      	bne.n	8002816 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002874 <HAL_TIM_PWM_MspInit+0x90>)
 80027f8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80027fc:	4a1d      	ldr	r2, [pc, #116]	@ (8002874 <HAL_TIM_PWM_MspInit+0x90>)
 80027fe:	f043 0301 	orr.w	r3, r3, #1
 8002802:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002806:	4b1b      	ldr	r3, [pc, #108]	@ (8002874 <HAL_TIM_PWM_MspInit+0x90>)
 8002808:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	617b      	str	r3, [r7, #20]
 8002812:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002814:	e028      	b.n	8002868 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM3)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a17      	ldr	r2, [pc, #92]	@ (8002878 <HAL_TIM_PWM_MspInit+0x94>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d10f      	bne.n	8002840 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002820:	4b14      	ldr	r3, [pc, #80]	@ (8002874 <HAL_TIM_PWM_MspInit+0x90>)
 8002822:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002826:	4a13      	ldr	r2, [pc, #76]	@ (8002874 <HAL_TIM_PWM_MspInit+0x90>)
 8002828:	f043 0302 	orr.w	r3, r3, #2
 800282c:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002830:	4b10      	ldr	r3, [pc, #64]	@ (8002874 <HAL_TIM_PWM_MspInit+0x90>)
 8002832:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	613b      	str	r3, [r7, #16]
 800283c:	693b      	ldr	r3, [r7, #16]
}
 800283e:	e013      	b.n	8002868 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM4)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a0d      	ldr	r2, [pc, #52]	@ (800287c <HAL_TIM_PWM_MspInit+0x98>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d10e      	bne.n	8002868 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800284a:	4b0a      	ldr	r3, [pc, #40]	@ (8002874 <HAL_TIM_PWM_MspInit+0x90>)
 800284c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002850:	4a08      	ldr	r2, [pc, #32]	@ (8002874 <HAL_TIM_PWM_MspInit+0x90>)
 8002852:	f043 0304 	orr.w	r3, r3, #4
 8002856:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800285a:	4b06      	ldr	r3, [pc, #24]	@ (8002874 <HAL_TIM_PWM_MspInit+0x90>)
 800285c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	68fb      	ldr	r3, [r7, #12]
}
 8002868:	bf00      	nop
 800286a:	371c      	adds	r7, #28
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	58024400 	.word	0x58024400
 8002878:	40000400 	.word	0x40000400
 800287c:	40000800 	.word	0x40000800

08002880 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a0b      	ldr	r2, [pc, #44]	@ (80028bc <HAL_TIM_Base_MspInit+0x3c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d10e      	bne.n	80028b0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002892:	4b0b      	ldr	r3, [pc, #44]	@ (80028c0 <HAL_TIM_Base_MspInit+0x40>)
 8002894:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002898:	4a09      	ldr	r2, [pc, #36]	@ (80028c0 <HAL_TIM_Base_MspInit+0x40>)
 800289a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800289e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80028a2:	4b07      	ldr	r3, [pc, #28]	@ (80028c0 <HAL_TIM_Base_MspInit+0x40>)
 80028a4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80028a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ac:	60fb      	str	r3, [r7, #12]
 80028ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 80028b0:	bf00      	nop
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	40001c00 	.word	0x40001c00
 80028c0:	58024400 	.word	0x58024400

080028c4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08c      	sub	sp, #48	@ 0x30
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028cc:	f107 031c 	add.w	r3, r7, #28
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	605a      	str	r2, [r3, #4]
 80028d6:	609a      	str	r2, [r3, #8]
 80028d8:	60da      	str	r2, [r3, #12]
 80028da:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028e4:	d13f      	bne.n	8002966 <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e6:	4b47      	ldr	r3, [pc, #284]	@ (8002a04 <HAL_TIM_MspPostInit+0x140>)
 80028e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80028ec:	4a45      	ldr	r2, [pc, #276]	@ (8002a04 <HAL_TIM_MspPostInit+0x140>)
 80028ee:	f043 0301 	orr.w	r3, r3, #1
 80028f2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80028f6:	4b43      	ldr	r3, [pc, #268]	@ (8002a04 <HAL_TIM_MspPostInit+0x140>)
 80028f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	61bb      	str	r3, [r7, #24]
 8002902:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002904:	4b3f      	ldr	r3, [pc, #252]	@ (8002a04 <HAL_TIM_MspPostInit+0x140>)
 8002906:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800290a:	4a3e      	ldr	r2, [pc, #248]	@ (8002a04 <HAL_TIM_MspPostInit+0x140>)
 800290c:	f043 0302 	orr.w	r3, r3, #2
 8002910:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002914:	4b3b      	ldr	r3, [pc, #236]	@ (8002a04 <HAL_TIM_MspPostInit+0x140>)
 8002916:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	617b      	str	r3, [r7, #20]
 8002920:	697b      	ldr	r3, [r7, #20]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8002922:	f248 030c 	movw	r3, #32780	@ 0x800c
 8002926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002928:	2302      	movs	r3, #2
 800292a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292c:	2300      	movs	r3, #0
 800292e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002930:	2300      	movs	r3, #0
 8002932:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002934:	2301      	movs	r3, #1
 8002936:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002938:	f107 031c 	add.w	r3, r7, #28
 800293c:	4619      	mov	r1, r3
 800293e:	4832      	ldr	r0, [pc, #200]	@ (8002a08 <HAL_TIM_MspPostInit+0x144>)
 8002940:	f006 f97c 	bl	8008c3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002944:	2308      	movs	r3, #8
 8002946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002948:	2302      	movs	r3, #2
 800294a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294c:	2300      	movs	r3, #0
 800294e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002950:	2300      	movs	r3, #0
 8002952:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002954:	2301      	movs	r3, #1
 8002956:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002958:	f107 031c 	add.w	r3, r7, #28
 800295c:	4619      	mov	r1, r3
 800295e:	482b      	ldr	r0, [pc, #172]	@ (8002a0c <HAL_TIM_MspPostInit+0x148>)
 8002960:	f006 f96c 	bl	8008c3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002964:	e049      	b.n	80029fa <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM3)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a29      	ldr	r2, [pc, #164]	@ (8002a10 <HAL_TIM_MspPostInit+0x14c>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d11f      	bne.n	80029b0 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002970:	4b24      	ldr	r3, [pc, #144]	@ (8002a04 <HAL_TIM_MspPostInit+0x140>)
 8002972:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002976:	4a23      	ldr	r2, [pc, #140]	@ (8002a04 <HAL_TIM_MspPostInit+0x140>)
 8002978:	f043 0302 	orr.w	r3, r3, #2
 800297c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002980:	4b20      	ldr	r3, [pc, #128]	@ (8002a04 <HAL_TIM_MspPostInit+0x140>)
 8002982:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	613b      	str	r3, [r7, #16]
 800298c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800298e:	2330      	movs	r3, #48	@ 0x30
 8002990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002992:	2302      	movs	r3, #2
 8002994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002996:	2300      	movs	r3, #0
 8002998:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299a:	2300      	movs	r3, #0
 800299c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800299e:	2302      	movs	r3, #2
 80029a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029a2:	f107 031c 	add.w	r3, r7, #28
 80029a6:	4619      	mov	r1, r3
 80029a8:	4818      	ldr	r0, [pc, #96]	@ (8002a0c <HAL_TIM_MspPostInit+0x148>)
 80029aa:	f006 f947 	bl	8008c3c <HAL_GPIO_Init>
}
 80029ae:	e024      	b.n	80029fa <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM4)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a17      	ldr	r2, [pc, #92]	@ (8002a14 <HAL_TIM_MspPostInit+0x150>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d11f      	bne.n	80029fa <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ba:	4b12      	ldr	r3, [pc, #72]	@ (8002a04 <HAL_TIM_MspPostInit+0x140>)
 80029bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80029c0:	4a10      	ldr	r2, [pc, #64]	@ (8002a04 <HAL_TIM_MspPostInit+0x140>)
 80029c2:	f043 0302 	orr.w	r3, r3, #2
 80029c6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80029ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002a04 <HAL_TIM_MspPostInit+0x140>)
 80029cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80029d8:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80029dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029de:	2302      	movs	r3, #2
 80029e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e6:	2300      	movs	r3, #0
 80029e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80029ea:	2302      	movs	r3, #2
 80029ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ee:	f107 031c 	add.w	r3, r7, #28
 80029f2:	4619      	mov	r1, r3
 80029f4:	4805      	ldr	r0, [pc, #20]	@ (8002a0c <HAL_TIM_MspPostInit+0x148>)
 80029f6:	f006 f921 	bl	8008c3c <HAL_GPIO_Init>
}
 80029fa:	bf00      	nop
 80029fc:	3730      	adds	r7, #48	@ 0x30
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	58024400 	.word	0x58024400
 8002a08:	58020000 	.word	0x58020000
 8002a0c:	58020400 	.word	0x58020400
 8002a10:	40000400 	.word	0x40000400
 8002a14:	40000800 	.word	0x40000800

08002a18 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart3_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002a1c:	4b22      	ldr	r3, [pc, #136]	@ (8002aa8 <MX_UART4_Init+0x90>)
 8002a1e:	4a23      	ldr	r2, [pc, #140]	@ (8002aac <MX_UART4_Init+0x94>)
 8002a20:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002a22:	4b21      	ldr	r3, [pc, #132]	@ (8002aa8 <MX_UART4_Init+0x90>)
 8002a24:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002a28:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002a2a:	4b1f      	ldr	r3, [pc, #124]	@ (8002aa8 <MX_UART4_Init+0x90>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002a30:	4b1d      	ldr	r3, [pc, #116]	@ (8002aa8 <MX_UART4_Init+0x90>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002a36:	4b1c      	ldr	r3, [pc, #112]	@ (8002aa8 <MX_UART4_Init+0x90>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002a3c:	4b1a      	ldr	r3, [pc, #104]	@ (8002aa8 <MX_UART4_Init+0x90>)
 8002a3e:	220c      	movs	r2, #12
 8002a40:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a42:	4b19      	ldr	r3, [pc, #100]	@ (8002aa8 <MX_UART4_Init+0x90>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a48:	4b17      	ldr	r3, [pc, #92]	@ (8002aa8 <MX_UART4_Init+0x90>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a4e:	4b16      	ldr	r3, [pc, #88]	@ (8002aa8 <MX_UART4_Init+0x90>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a54:	4b14      	ldr	r3, [pc, #80]	@ (8002aa8 <MX_UART4_Init+0x90>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a5a:	4b13      	ldr	r3, [pc, #76]	@ (8002aa8 <MX_UART4_Init+0x90>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002a60:	4811      	ldr	r0, [pc, #68]	@ (8002aa8 <MX_UART4_Init+0x90>)
 8002a62:	f00b fc71 	bl	800e348 <HAL_UART_Init>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002a6c:	f7ff f9a2 	bl	8001db4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a70:	2100      	movs	r1, #0
 8002a72:	480d      	ldr	r0, [pc, #52]	@ (8002aa8 <MX_UART4_Init+0x90>)
 8002a74:	f00e ff97 	bl	80119a6 <HAL_UARTEx_SetTxFifoThreshold>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002a7e:	f7ff f999 	bl	8001db4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a82:	2100      	movs	r1, #0
 8002a84:	4808      	ldr	r0, [pc, #32]	@ (8002aa8 <MX_UART4_Init+0x90>)
 8002a86:	f00e ffcc 	bl	8011a22 <HAL_UARTEx_SetRxFifoThreshold>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002a90:	f7ff f990 	bl	8001db4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002a94:	4804      	ldr	r0, [pc, #16]	@ (8002aa8 <MX_UART4_Init+0x90>)
 8002a96:	f00e ff4d 	bl	8011934 <HAL_UARTEx_DisableFifoMode>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002aa0:	f7ff f988 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002aa4:	bf00      	nop
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	24001008 	.word	0x24001008
 8002aac:	40004c00 	.word	0x40004c00

08002ab0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ab4:	4b23      	ldr	r3, [pc, #140]	@ (8002b44 <MX_USART1_UART_Init+0x94>)
 8002ab6:	4a24      	ldr	r2, [pc, #144]	@ (8002b48 <MX_USART1_UART_Init+0x98>)
 8002ab8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8002aba:	4b22      	ldr	r3, [pc, #136]	@ (8002b44 <MX_USART1_UART_Init+0x94>)
 8002abc:	4a23      	ldr	r2, [pc, #140]	@ (8002b4c <MX_USART1_UART_Init+0x9c>)
 8002abe:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8002ac0:	4b20      	ldr	r3, [pc, #128]	@ (8002b44 <MX_USART1_UART_Init+0x94>)
 8002ac2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002ac6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ac8:	4b1e      	ldr	r3, [pc, #120]	@ (8002b44 <MX_USART1_UART_Init+0x94>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8002ace:	4b1d      	ldr	r3, [pc, #116]	@ (8002b44 <MX_USART1_UART_Init+0x94>)
 8002ad0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ad4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ad6:	4b1b      	ldr	r3, [pc, #108]	@ (8002b44 <MX_USART1_UART_Init+0x94>)
 8002ad8:	220c      	movs	r2, #12
 8002ada:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002adc:	4b19      	ldr	r3, [pc, #100]	@ (8002b44 <MX_USART1_UART_Init+0x94>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ae2:	4b18      	ldr	r3, [pc, #96]	@ (8002b44 <MX_USART1_UART_Init+0x94>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ae8:	4b16      	ldr	r3, [pc, #88]	@ (8002b44 <MX_USART1_UART_Init+0x94>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002aee:	4b15      	ldr	r3, [pc, #84]	@ (8002b44 <MX_USART1_UART_Init+0x94>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002af4:	4b13      	ldr	r3, [pc, #76]	@ (8002b44 <MX_USART1_UART_Init+0x94>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002afa:	4812      	ldr	r0, [pc, #72]	@ (8002b44 <MX_USART1_UART_Init+0x94>)
 8002afc:	f00b fc24 	bl	800e348 <HAL_UART_Init>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002b06:	f7ff f955 	bl	8001db4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	480d      	ldr	r0, [pc, #52]	@ (8002b44 <MX_USART1_UART_Init+0x94>)
 8002b0e:	f00e ff4a 	bl	80119a6 <HAL_UARTEx_SetTxFifoThreshold>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002b18:	f7ff f94c 	bl	8001db4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	4809      	ldr	r0, [pc, #36]	@ (8002b44 <MX_USART1_UART_Init+0x94>)
 8002b20:	f00e ff7f 	bl	8011a22 <HAL_UARTEx_SetRxFifoThreshold>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002b2a:	f7ff f943 	bl	8001db4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002b2e:	4805      	ldr	r0, [pc, #20]	@ (8002b44 <MX_USART1_UART_Init+0x94>)
 8002b30:	f00e ff00 	bl	8011934 <HAL_UARTEx_DisableFifoMode>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002b3a:	f7ff f93b 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b3e:	bf00      	nop
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	2400109c 	.word	0x2400109c
 8002b48:	40011000 	.word	0x40011000
 8002b4c:	000186a0 	.word	0x000186a0

08002b50 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002b54:	4b22      	ldr	r3, [pc, #136]	@ (8002be0 <MX_USART3_UART_Init+0x90>)
 8002b56:	4a23      	ldr	r2, [pc, #140]	@ (8002be4 <MX_USART3_UART_Init+0x94>)
 8002b58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002b5a:	4b21      	ldr	r3, [pc, #132]	@ (8002be0 <MX_USART3_UART_Init+0x90>)
 8002b5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002b60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002b62:	4b1f      	ldr	r3, [pc, #124]	@ (8002be0 <MX_USART3_UART_Init+0x90>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002b68:	4b1d      	ldr	r3, [pc, #116]	@ (8002be0 <MX_USART3_UART_Init+0x90>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8002be0 <MX_USART3_UART_Init+0x90>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002b74:	4b1a      	ldr	r3, [pc, #104]	@ (8002be0 <MX_USART3_UART_Init+0x90>)
 8002b76:	220c      	movs	r2, #12
 8002b78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b7a:	4b19      	ldr	r3, [pc, #100]	@ (8002be0 <MX_USART3_UART_Init+0x90>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b80:	4b17      	ldr	r3, [pc, #92]	@ (8002be0 <MX_USART3_UART_Init+0x90>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b86:	4b16      	ldr	r3, [pc, #88]	@ (8002be0 <MX_USART3_UART_Init+0x90>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b8c:	4b14      	ldr	r3, [pc, #80]	@ (8002be0 <MX_USART3_UART_Init+0x90>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b92:	4b13      	ldr	r3, [pc, #76]	@ (8002be0 <MX_USART3_UART_Init+0x90>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002b98:	4811      	ldr	r0, [pc, #68]	@ (8002be0 <MX_USART3_UART_Init+0x90>)
 8002b9a:	f00b fbd5 	bl	800e348 <HAL_UART_Init>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002ba4:	f7ff f906 	bl	8001db4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ba8:	2100      	movs	r1, #0
 8002baa:	480d      	ldr	r0, [pc, #52]	@ (8002be0 <MX_USART3_UART_Init+0x90>)
 8002bac:	f00e fefb 	bl	80119a6 <HAL_UARTEx_SetTxFifoThreshold>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002bb6:	f7ff f8fd 	bl	8001db4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bba:	2100      	movs	r1, #0
 8002bbc:	4808      	ldr	r0, [pc, #32]	@ (8002be0 <MX_USART3_UART_Init+0x90>)
 8002bbe:	f00e ff30 	bl	8011a22 <HAL_UARTEx_SetRxFifoThreshold>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002bc8:	f7ff f8f4 	bl	8001db4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002bcc:	4804      	ldr	r0, [pc, #16]	@ (8002be0 <MX_USART3_UART_Init+0x90>)
 8002bce:	f00e feb1 	bl	8011934 <HAL_UARTEx_DisableFifoMode>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002bd8:	f7ff f8ec 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002bdc:	bf00      	nop
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	24001130 	.word	0x24001130
 8002be4:	40004800 	.word	0x40004800

08002be8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002bec:	4b22      	ldr	r3, [pc, #136]	@ (8002c78 <MX_USART6_UART_Init+0x90>)
 8002bee:	4a23      	ldr	r2, [pc, #140]	@ (8002c7c <MX_USART6_UART_Init+0x94>)
 8002bf0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002bf2:	4b21      	ldr	r3, [pc, #132]	@ (8002c78 <MX_USART6_UART_Init+0x90>)
 8002bf4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002bf8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002bfa:	4b1f      	ldr	r3, [pc, #124]	@ (8002c78 <MX_USART6_UART_Init+0x90>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002c00:	4b1d      	ldr	r3, [pc, #116]	@ (8002c78 <MX_USART6_UART_Init+0x90>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002c06:	4b1c      	ldr	r3, [pc, #112]	@ (8002c78 <MX_USART6_UART_Init+0x90>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8002c78 <MX_USART6_UART_Init+0x90>)
 8002c0e:	220c      	movs	r2, #12
 8002c10:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c12:	4b19      	ldr	r3, [pc, #100]	@ (8002c78 <MX_USART6_UART_Init+0x90>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c18:	4b17      	ldr	r3, [pc, #92]	@ (8002c78 <MX_USART6_UART_Init+0x90>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c1e:	4b16      	ldr	r3, [pc, #88]	@ (8002c78 <MX_USART6_UART_Init+0x90>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c24:	4b14      	ldr	r3, [pc, #80]	@ (8002c78 <MX_USART6_UART_Init+0x90>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c2a:	4b13      	ldr	r3, [pc, #76]	@ (8002c78 <MX_USART6_UART_Init+0x90>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002c30:	4811      	ldr	r0, [pc, #68]	@ (8002c78 <MX_USART6_UART_Init+0x90>)
 8002c32:	f00b fb89 	bl	800e348 <HAL_UART_Init>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8002c3c:	f7ff f8ba 	bl	8001db4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c40:	2100      	movs	r1, #0
 8002c42:	480d      	ldr	r0, [pc, #52]	@ (8002c78 <MX_USART6_UART_Init+0x90>)
 8002c44:	f00e feaf 	bl	80119a6 <HAL_UARTEx_SetTxFifoThreshold>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8002c4e:	f7ff f8b1 	bl	8001db4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c52:	2100      	movs	r1, #0
 8002c54:	4808      	ldr	r0, [pc, #32]	@ (8002c78 <MX_USART6_UART_Init+0x90>)
 8002c56:	f00e fee4 	bl	8011a22 <HAL_UARTEx_SetRxFifoThreshold>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8002c60:	f7ff f8a8 	bl	8001db4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8002c64:	4804      	ldr	r0, [pc, #16]	@ (8002c78 <MX_USART6_UART_Init+0x90>)
 8002c66:	f00e fe65 	bl	8011934 <HAL_UARTEx_DisableFifoMode>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8002c70:	f7ff f8a0 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002c74:	bf00      	nop
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	240011c4 	.word	0x240011c4
 8002c7c:	40011400 	.word	0x40011400

08002c80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b0c0      	sub	sp, #256	@ 0x100
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c88:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	605a      	str	r2, [r3, #4]
 8002c92:	609a      	str	r2, [r3, #8]
 8002c94:	60da      	str	r2, [r3, #12]
 8002c96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c98:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002c9c:	22c0      	movs	r2, #192	@ 0xc0
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f013 fdf0 	bl	8016886 <memset>
  if(uartHandle->Instance==UART4)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a82      	ldr	r2, [pc, #520]	@ (8002eb4 <HAL_UART_MspInit+0x234>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d17c      	bne.n	8002daa <HAL_UART_MspInit+0x12a>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002cb0:	f04f 0202 	mov.w	r2, #2
 8002cb4:	f04f 0300 	mov.w	r3, #0
 8002cb8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cc2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f007 faf0 	bl	800a2ac <HAL_RCCEx_PeriphCLKConfig>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002cd2:	f7ff f86f 	bl	8001db4 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002cd6:	4b78      	ldr	r3, [pc, #480]	@ (8002eb8 <HAL_UART_MspInit+0x238>)
 8002cd8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002cdc:	4a76      	ldr	r2, [pc, #472]	@ (8002eb8 <HAL_UART_MspInit+0x238>)
 8002cde:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002ce2:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002ce6:	4b74      	ldr	r3, [pc, #464]	@ (8002eb8 <HAL_UART_MspInit+0x238>)
 8002ce8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002cec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf4:	4b70      	ldr	r3, [pc, #448]	@ (8002eb8 <HAL_UART_MspInit+0x238>)
 8002cf6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002cfa:	4a6f      	ldr	r2, [pc, #444]	@ (8002eb8 <HAL_UART_MspInit+0x238>)
 8002cfc:	f043 0301 	orr.w	r3, r3, #1
 8002d00:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002d04:	4b6c      	ldr	r3, [pc, #432]	@ (8002eb8 <HAL_UART_MspInit+0x238>)
 8002d06:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	623b      	str	r3, [r7, #32]
 8002d10:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d12:	2303      	movs	r3, #3
 8002d14:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d18:	2302      	movs	r3, #2
 8002d1a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d24:	2300      	movs	r3, #0
 8002d26:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002d2a:	2308      	movs	r3, #8
 8002d2c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d30:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002d34:	4619      	mov	r1, r3
 8002d36:	4861      	ldr	r0, [pc, #388]	@ (8002ebc <HAL_UART_MspInit+0x23c>)
 8002d38:	f005 ff80 	bl	8008c3c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8002d3c:	4b60      	ldr	r3, [pc, #384]	@ (8002ec0 <HAL_UART_MspInit+0x240>)
 8002d3e:	4a61      	ldr	r2, [pc, #388]	@ (8002ec4 <HAL_UART_MspInit+0x244>)
 8002d40:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8002d42:	4b5f      	ldr	r3, [pc, #380]	@ (8002ec0 <HAL_UART_MspInit+0x240>)
 8002d44:	223f      	movs	r2, #63	@ 0x3f
 8002d46:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d48:	4b5d      	ldr	r3, [pc, #372]	@ (8002ec0 <HAL_UART_MspInit+0x240>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d4e:	4b5c      	ldr	r3, [pc, #368]	@ (8002ec0 <HAL_UART_MspInit+0x240>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d54:	4b5a      	ldr	r3, [pc, #360]	@ (8002ec0 <HAL_UART_MspInit+0x240>)
 8002d56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d5a:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d5c:	4b58      	ldr	r3, [pc, #352]	@ (8002ec0 <HAL_UART_MspInit+0x240>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d62:	4b57      	ldr	r3, [pc, #348]	@ (8002ec0 <HAL_UART_MspInit+0x240>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8002d68:	4b55      	ldr	r3, [pc, #340]	@ (8002ec0 <HAL_UART_MspInit+0x240>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d6e:	4b54      	ldr	r3, [pc, #336]	@ (8002ec0 <HAL_UART_MspInit+0x240>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d74:	4b52      	ldr	r3, [pc, #328]	@ (8002ec0 <HAL_UART_MspInit+0x240>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002d7a:	4851      	ldr	r0, [pc, #324]	@ (8002ec0 <HAL_UART_MspInit+0x240>)
 8002d7c:	f002 fd10 	bl	80057a0 <HAL_DMA_Init>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8002d86:	f7ff f815 	bl	8001db4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a4c      	ldr	r2, [pc, #304]	@ (8002ec0 <HAL_UART_MspInit+0x240>)
 8002d8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002d92:	4a4b      	ldr	r2, [pc, #300]	@ (8002ec0 <HAL_UART_MspInit+0x240>)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002d98:	2200      	movs	r2, #0
 8002d9a:	2105      	movs	r1, #5
 8002d9c:	2034      	movs	r0, #52	@ 0x34
 8002d9e:	f002 fc5f 	bl	8005660 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002da2:	2034      	movs	r0, #52	@ 0x34
 8002da4:	f002 fc76 	bl	8005694 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002da8:	e16a      	b.n	8003080 <HAL_UART_MspInit+0x400>
  else if(uartHandle->Instance==USART1)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a46      	ldr	r2, [pc, #280]	@ (8002ec8 <HAL_UART_MspInit+0x248>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	f040 808f 	bne.w	8002ed4 <HAL_UART_MspInit+0x254>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002db6:	f04f 0201 	mov.w	r2, #1
 8002dba:	f04f 0300 	mov.w	r3, #0
 8002dbe:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dc8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f007 fa6d 	bl	800a2ac <HAL_RCCEx_PeriphCLKConfig>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <HAL_UART_MspInit+0x15c>
      Error_Handler();
 8002dd8:	f7fe ffec 	bl	8001db4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ddc:	4b36      	ldr	r3, [pc, #216]	@ (8002eb8 <HAL_UART_MspInit+0x238>)
 8002dde:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002de2:	4a35      	ldr	r2, [pc, #212]	@ (8002eb8 <HAL_UART_MspInit+0x238>)
 8002de4:	f043 0310 	orr.w	r3, r3, #16
 8002de8:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8002dec:	4b32      	ldr	r3, [pc, #200]	@ (8002eb8 <HAL_UART_MspInit+0x238>)
 8002dee:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002df2:	f003 0310 	and.w	r3, r3, #16
 8002df6:	61fb      	str	r3, [r7, #28]
 8002df8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dfa:	4b2f      	ldr	r3, [pc, #188]	@ (8002eb8 <HAL_UART_MspInit+0x238>)
 8002dfc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002e00:	4a2d      	ldr	r2, [pc, #180]	@ (8002eb8 <HAL_UART_MspInit+0x238>)
 8002e02:	f043 0301 	orr.w	r3, r3, #1
 8002e06:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002e0a:	4b2b      	ldr	r3, [pc, #172]	@ (8002eb8 <HAL_UART_MspInit+0x238>)
 8002e0c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	61bb      	str	r3, [r7, #24]
 8002e16:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|SBUS_RX_Pin;
 8002e18:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002e1c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e20:	2302      	movs	r3, #2
 8002e22:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e26:	2300      	movs	r3, #0
 8002e28:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e32:	2307      	movs	r3, #7
 8002e34:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e38:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	481f      	ldr	r0, [pc, #124]	@ (8002ebc <HAL_UART_MspInit+0x23c>)
 8002e40:	f005 fefc 	bl	8008c3c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8002e44:	4b21      	ldr	r3, [pc, #132]	@ (8002ecc <HAL_UART_MspInit+0x24c>)
 8002e46:	4a22      	ldr	r2, [pc, #136]	@ (8002ed0 <HAL_UART_MspInit+0x250>)
 8002e48:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002e4a:	4b20      	ldr	r3, [pc, #128]	@ (8002ecc <HAL_UART_MspInit+0x24c>)
 8002e4c:	2229      	movs	r2, #41	@ 0x29
 8002e4e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e50:	4b1e      	ldr	r3, [pc, #120]	@ (8002ecc <HAL_UART_MspInit+0x24c>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e56:	4b1d      	ldr	r3, [pc, #116]	@ (8002ecc <HAL_UART_MspInit+0x24c>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e5c:	4b1b      	ldr	r3, [pc, #108]	@ (8002ecc <HAL_UART_MspInit+0x24c>)
 8002e5e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e62:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e64:	4b19      	ldr	r3, [pc, #100]	@ (8002ecc <HAL_UART_MspInit+0x24c>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e6a:	4b18      	ldr	r3, [pc, #96]	@ (8002ecc <HAL_UART_MspInit+0x24c>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002e70:	4b16      	ldr	r3, [pc, #88]	@ (8002ecc <HAL_UART_MspInit+0x24c>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002e76:	4b15      	ldr	r3, [pc, #84]	@ (8002ecc <HAL_UART_MspInit+0x24c>)
 8002e78:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002e7c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e7e:	4b13      	ldr	r3, [pc, #76]	@ (8002ecc <HAL_UART_MspInit+0x24c>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002e84:	4811      	ldr	r0, [pc, #68]	@ (8002ecc <HAL_UART_MspInit+0x24c>)
 8002e86:	f002 fc8b 	bl	80057a0 <HAL_DMA_Init>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <HAL_UART_MspInit+0x214>
      Error_Handler();
 8002e90:	f7fe ff90 	bl	8001db4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a0d      	ldr	r2, [pc, #52]	@ (8002ecc <HAL_UART_MspInit+0x24c>)
 8002e98:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002e9c:	4a0b      	ldr	r2, [pc, #44]	@ (8002ecc <HAL_UART_MspInit+0x24c>)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	2105      	movs	r1, #5
 8002ea6:	2025      	movs	r0, #37	@ 0x25
 8002ea8:	f002 fbda 	bl	8005660 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002eac:	2025      	movs	r0, #37	@ 0x25
 8002eae:	f002 fbf1 	bl	8005694 <HAL_NVIC_EnableIRQ>
}
 8002eb2:	e0e5      	b.n	8003080 <HAL_UART_MspInit+0x400>
 8002eb4:	40004c00 	.word	0x40004c00
 8002eb8:	58024400 	.word	0x58024400
 8002ebc:	58020000 	.word	0x58020000
 8002ec0:	24001258 	.word	0x24001258
 8002ec4:	40020040 	.word	0x40020040
 8002ec8:	40011000 	.word	0x40011000
 8002ecc:	240012d0 	.word	0x240012d0
 8002ed0:	40020010 	.word	0x40020010
  else if(uartHandle->Instance==USART3)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a6c      	ldr	r2, [pc, #432]	@ (800308c <HAL_UART_MspInit+0x40c>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d17d      	bne.n	8002fda <HAL_UART_MspInit+0x35a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002ede:	f04f 0202 	mov.w	r2, #2
 8002ee2:	f04f 0300 	mov.w	r3, #0
 8002ee6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002eea:	2300      	movs	r3, #0
 8002eec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ef0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f007 f9d9 	bl	800a2ac <HAL_RCCEx_PeriphCLKConfig>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <HAL_UART_MspInit+0x284>
      Error_Handler();
 8002f00:	f7fe ff58 	bl	8001db4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f04:	4b62      	ldr	r3, [pc, #392]	@ (8003090 <HAL_UART_MspInit+0x410>)
 8002f06:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002f0a:	4a61      	ldr	r2, [pc, #388]	@ (8003090 <HAL_UART_MspInit+0x410>)
 8002f0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f10:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002f14:	4b5e      	ldr	r3, [pc, #376]	@ (8003090 <HAL_UART_MspInit+0x410>)
 8002f16:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002f1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f1e:	617b      	str	r3, [r7, #20]
 8002f20:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f22:	4b5b      	ldr	r3, [pc, #364]	@ (8003090 <HAL_UART_MspInit+0x410>)
 8002f24:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002f28:	4a59      	ldr	r2, [pc, #356]	@ (8003090 <HAL_UART_MspInit+0x410>)
 8002f2a:	f043 0304 	orr.w	r3, r3, #4
 8002f2e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002f32:	4b57      	ldr	r3, [pc, #348]	@ (8003090 <HAL_UART_MspInit+0x410>)
 8002f34:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002f38:	f003 0304 	and.w	r3, r3, #4
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002f40:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002f44:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f54:	2300      	movs	r3, #0
 8002f56:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f5a:	2307      	movs	r3, #7
 8002f5c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f60:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002f64:	4619      	mov	r1, r3
 8002f66:	484b      	ldr	r0, [pc, #300]	@ (8003094 <HAL_UART_MspInit+0x414>)
 8002f68:	f005 fe68 	bl	8008c3c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002f6c:	4b4a      	ldr	r3, [pc, #296]	@ (8003098 <HAL_UART_MspInit+0x418>)
 8002f6e:	4a4b      	ldr	r2, [pc, #300]	@ (800309c <HAL_UART_MspInit+0x41c>)
 8002f70:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002f72:	4b49      	ldr	r3, [pc, #292]	@ (8003098 <HAL_UART_MspInit+0x418>)
 8002f74:	222d      	movs	r2, #45	@ 0x2d
 8002f76:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f78:	4b47      	ldr	r3, [pc, #284]	@ (8003098 <HAL_UART_MspInit+0x418>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f7e:	4b46      	ldr	r3, [pc, #280]	@ (8003098 <HAL_UART_MspInit+0x418>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f84:	4b44      	ldr	r3, [pc, #272]	@ (8003098 <HAL_UART_MspInit+0x418>)
 8002f86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f8a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f8c:	4b42      	ldr	r3, [pc, #264]	@ (8003098 <HAL_UART_MspInit+0x418>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f92:	4b41      	ldr	r3, [pc, #260]	@ (8003098 <HAL_UART_MspInit+0x418>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002f98:	4b3f      	ldr	r3, [pc, #252]	@ (8003098 <HAL_UART_MspInit+0x418>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f9e:	4b3e      	ldr	r3, [pc, #248]	@ (8003098 <HAL_UART_MspInit+0x418>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fa4:	4b3c      	ldr	r3, [pc, #240]	@ (8003098 <HAL_UART_MspInit+0x418>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002faa:	483b      	ldr	r0, [pc, #236]	@ (8003098 <HAL_UART_MspInit+0x418>)
 8002fac:	f002 fbf8 	bl	80057a0 <HAL_DMA_Init>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <HAL_UART_MspInit+0x33a>
      Error_Handler();
 8002fb6:	f7fe fefd 	bl	8001db4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a36      	ldr	r2, [pc, #216]	@ (8003098 <HAL_UART_MspInit+0x418>)
 8002fbe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002fc2:	4a35      	ldr	r2, [pc, #212]	@ (8003098 <HAL_UART_MspInit+0x418>)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002fc8:	2200      	movs	r2, #0
 8002fca:	2105      	movs	r1, #5
 8002fcc:	2027      	movs	r0, #39	@ 0x27
 8002fce:	f002 fb47 	bl	8005660 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002fd2:	2027      	movs	r0, #39	@ 0x27
 8002fd4:	f002 fb5e 	bl	8005694 <HAL_NVIC_EnableIRQ>
}
 8002fd8:	e052      	b.n	8003080 <HAL_UART_MspInit+0x400>
  else if(uartHandle->Instance==USART6)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a30      	ldr	r2, [pc, #192]	@ (80030a0 <HAL_UART_MspInit+0x420>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d14d      	bne.n	8003080 <HAL_UART_MspInit+0x400>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002fe4:	f04f 0201 	mov.w	r2, #1
 8002fe8:	f04f 0300 	mov.w	r3, #0
 8002fec:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ff6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f007 f956 	bl	800a2ac <HAL_RCCEx_PeriphCLKConfig>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <HAL_UART_MspInit+0x38a>
      Error_Handler();
 8003006:	f7fe fed5 	bl	8001db4 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800300a:	4b21      	ldr	r3, [pc, #132]	@ (8003090 <HAL_UART_MspInit+0x410>)
 800300c:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8003010:	4a1f      	ldr	r2, [pc, #124]	@ (8003090 <HAL_UART_MspInit+0x410>)
 8003012:	f043 0320 	orr.w	r3, r3, #32
 8003016:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 800301a:	4b1d      	ldr	r3, [pc, #116]	@ (8003090 <HAL_UART_MspInit+0x410>)
 800301c:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8003020:	f003 0320 	and.w	r3, r3, #32
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003028:	4b19      	ldr	r3, [pc, #100]	@ (8003090 <HAL_UART_MspInit+0x410>)
 800302a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800302e:	4a18      	ldr	r2, [pc, #96]	@ (8003090 <HAL_UART_MspInit+0x410>)
 8003030:	f043 0304 	orr.w	r3, r3, #4
 8003034:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003038:	4b15      	ldr	r3, [pc, #84]	@ (8003090 <HAL_UART_MspInit+0x410>)
 800303a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800303e:	f003 0304 	and.w	r3, r3, #4
 8003042:	60bb      	str	r3, [r7, #8]
 8003044:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003046:	23c0      	movs	r3, #192	@ 0xc0
 8003048:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800304c:	2302      	movs	r3, #2
 800304e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003052:	2300      	movs	r3, #0
 8003054:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003058:	2300      	movs	r3, #0
 800305a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 800305e:	2307      	movs	r3, #7
 8003060:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003064:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003068:	4619      	mov	r1, r3
 800306a:	480a      	ldr	r0, [pc, #40]	@ (8003094 <HAL_UART_MspInit+0x414>)
 800306c:	f005 fde6 	bl	8008c3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8003070:	2200      	movs	r2, #0
 8003072:	2105      	movs	r1, #5
 8003074:	2047      	movs	r0, #71	@ 0x47
 8003076:	f002 faf3 	bl	8005660 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800307a:	2047      	movs	r0, #71	@ 0x47
 800307c:	f002 fb0a 	bl	8005694 <HAL_NVIC_EnableIRQ>
}
 8003080:	bf00      	nop
 8003082:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40004800 	.word	0x40004800
 8003090:	58024400 	.word	0x58024400
 8003094:	58020800 	.word	0x58020800
 8003098:	24001348 	.word	0x24001348
 800309c:	40020028 	.word	0x40020028
 80030a0:	40011400 	.word	0x40011400

080030a4 <Reset_UART>:
  /* USER CODE END USART6_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void Reset_UART(UART_HandleTypeDef *huart) {
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]

      // Clear any pending error flags
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF | UART_CLEAR_FEF | UART_CLEAR_NEF | UART_CLEAR_OREF);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	220f      	movs	r2, #15
 80030b2:	621a      	str	r2, [r3, #32]

    // Abort ongoing UART transfer
    if (HAL_UART_Abort_IT(huart) != HAL_OK) {
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f00b fbe7 	bl	800e888 <HAL_UART_Abort_IT>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <Reset_UART+0x20>
        // Abort Error
        Error_Handler();
 80030c0:	f7fe fe78 	bl	8001db4 <Error_Handler>
    }
     if(huart == &huart3){
    	 MX_USART3_UART_Init();
     }
*/
}
 80030c4:	bf00      	nop
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <BMP280_write>:
uint16_t dig_T1, dig_P1;
int16_t  dig_T2, dig_T3, dig_P2,dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;

int32_t T_raw, P_raw, t_fine;

void BMP280_write(uint8_t Address, uint8_t Data){
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	460a      	mov	r2, r1
 80030d6:	71fb      	strb	r3, [r7, #7]
 80030d8:	4613      	mov	r3, r2
 80030da:	71bb      	strb	r3, [r7, #6]
	BMP280_select();
 80030dc:	2200      	movs	r2, #0
 80030de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80030e2:	480f      	ldr	r0, [pc, #60]	@ (8003120 <BMP280_write+0x54>)
 80030e4:	f005 ff5a 	bl	8008f9c <HAL_GPIO_WritePin>
	Address &= 0x7F;
 80030e8:	79fb      	ldrb	r3, [r7, #7]
 80030ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80030f2:	1df9      	adds	r1, r7, #7
 80030f4:	2364      	movs	r3, #100	@ 0x64
 80030f6:	2201      	movs	r2, #1
 80030f8:	480a      	ldr	r0, [pc, #40]	@ (8003124 <BMP280_write+0x58>)
 80030fa:	f008 ffdb 	bl	800c0b4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BMP280, &Data, 1, 100);
 80030fe:	1db9      	adds	r1, r7, #6
 8003100:	2364      	movs	r3, #100	@ 0x64
 8003102:	2201      	movs	r2, #1
 8003104:	4807      	ldr	r0, [pc, #28]	@ (8003124 <BMP280_write+0x58>)
 8003106:	f008 ffd5 	bl	800c0b4 <HAL_SPI_Transmit>

	BMP280_unselect();
 800310a:	2201      	movs	r2, #1
 800310c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003110:	4803      	ldr	r0, [pc, #12]	@ (8003120 <BMP280_write+0x54>)
 8003112:	f005 ff43 	bl	8008f9c <HAL_GPIO_WritePin>
}
 8003116:	bf00      	nop
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	58020400 	.word	0x58020400
 8003124:	24000e00 	.word	0x24000e00

08003128 <BMP280_read>:

uint8_t BMP280_read(uint8_t Address){
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	4603      	mov	r3, r0
 8003130:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer = (Address|0x80);
 8003132:	79fb      	ldrb	r3, [r7, #7]
 8003134:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003138:	b2db      	uxtb	r3, r3
 800313a:	73fb      	strb	r3, [r7, #15]
	BMP280_select();
 800313c:	2200      	movs	r2, #0
 800313e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003142:	480e      	ldr	r0, [pc, #56]	@ (800317c <BMP280_read+0x54>)
 8003144:	f005 ff2a 	bl	8008f9c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Buffer, 1, 100);
 8003148:	f107 010f 	add.w	r1, r7, #15
 800314c:	2364      	movs	r3, #100	@ 0x64
 800314e:	2201      	movs	r2, #1
 8003150:	480b      	ldr	r0, [pc, #44]	@ (8003180 <BMP280_read+0x58>)
 8003152:	f008 ffaf 	bl	800c0b4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, &Buffer, 1, 100);
 8003156:	f107 010f 	add.w	r1, r7, #15
 800315a:	2364      	movs	r3, #100	@ 0x64
 800315c:	2201      	movs	r2, #1
 800315e:	4808      	ldr	r0, [pc, #32]	@ (8003180 <BMP280_read+0x58>)
 8003160:	f009 f996 	bl	800c490 <HAL_SPI_Receive>
	BMP280_unselect();
 8003164:	2201      	movs	r2, #1
 8003166:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800316a:	4804      	ldr	r0, [pc, #16]	@ (800317c <BMP280_read+0x54>)
 800316c:	f005 ff16 	bl	8008f9c <HAL_GPIO_WritePin>

	return Buffer;
 8003170:	7bfb      	ldrb	r3, [r7, #15]
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	58020400 	.word	0x58020400
 8003180:	24000e00 	.word	0x24000e00

08003184 <BMP280_config>:

void BMP280_config(void){
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
	BMP280_write(ctrl_meas, 0x57);
 8003188:	2157      	movs	r1, #87	@ 0x57
 800318a:	20f4      	movs	r0, #244	@ 0xf4
 800318c:	f7ff ff9e 	bl	80030cc <BMP280_write>
	BMP280_write(config, 0x10);
 8003190:	2110      	movs	r1, #16
 8003192:	20f5      	movs	r0, #245	@ 0xf5
 8003194:	f7ff ff9a 	bl	80030cc <BMP280_write>
}
 8003198:	bf00      	nop
 800319a:	bd80      	pop	{r7, pc}

0800319c <BMP280_calibrationData>:

void BMP280_reset(void){
	BMP280_write(reset, 0xB6);
}

void BMP280_calibrationData(void){
 800319c:	b580      	push	{r7, lr}
 800319e:	b088      	sub	sp, #32
 80031a0:	af00      	add	r7, sp, #0
	uint8_t Address = 0x88;
 80031a2:	2388      	movs	r3, #136	@ 0x88
 80031a4:	77fb      	strb	r3, [r7, #31]
	uint8_t Buffer[24] = {0};
 80031a6:	2300      	movs	r3, #0
 80031a8:	607b      	str	r3, [r7, #4]
 80031aa:	f107 0308 	add.w	r3, r7, #8
 80031ae:	2200      	movs	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	605a      	str	r2, [r3, #4]
 80031b4:	609a      	str	r2, [r3, #8]
 80031b6:	60da      	str	r2, [r3, #12]
 80031b8:	611a      	str	r2, [r3, #16]
	BMP280_select();
 80031ba:	2200      	movs	r2, #0
 80031bc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80031c0:	4843      	ldr	r0, [pc, #268]	@ (80032d0 <BMP280_calibrationData+0x134>)
 80031c2:	f005 feeb 	bl	8008f9c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80031c6:	f107 011f 	add.w	r1, r7, #31
 80031ca:	2364      	movs	r3, #100	@ 0x64
 80031cc:	2201      	movs	r2, #1
 80031ce:	4841      	ldr	r0, [pc, #260]	@ (80032d4 <BMP280_calibrationData+0x138>)
 80031d0:	f008 ff70 	bl	800c0b4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 24, 100);
 80031d4:	1d39      	adds	r1, r7, #4
 80031d6:	2364      	movs	r3, #100	@ 0x64
 80031d8:	2218      	movs	r2, #24
 80031da:	483e      	ldr	r0, [pc, #248]	@ (80032d4 <BMP280_calibrationData+0x138>)
 80031dc:	f009 f958 	bl	800c490 <HAL_SPI_Receive>
	BMP280_unselect();
 80031e0:	2201      	movs	r2, #1
 80031e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80031e6:	483a      	ldr	r0, [pc, #232]	@ (80032d0 <BMP280_calibrationData+0x134>)
 80031e8:	f005 fed8 	bl	8008f9c <HAL_GPIO_WritePin>

	dig_T1 = (Buffer[1]<<8)|Buffer[0];
 80031ec:	797b      	ldrb	r3, [r7, #5]
 80031ee:	021b      	lsls	r3, r3, #8
 80031f0:	b21a      	sxth	r2, r3
 80031f2:	793b      	ldrb	r3, [r7, #4]
 80031f4:	b21b      	sxth	r3, r3
 80031f6:	4313      	orrs	r3, r2
 80031f8:	b21b      	sxth	r3, r3
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	4b36      	ldr	r3, [pc, #216]	@ (80032d8 <BMP280_calibrationData+0x13c>)
 80031fe:	801a      	strh	r2, [r3, #0]
	dig_T2 = (Buffer[3]<<8)|Buffer[2];
 8003200:	79fb      	ldrb	r3, [r7, #7]
 8003202:	021b      	lsls	r3, r3, #8
 8003204:	b21a      	sxth	r2, r3
 8003206:	79bb      	ldrb	r3, [r7, #6]
 8003208:	b21b      	sxth	r3, r3
 800320a:	4313      	orrs	r3, r2
 800320c:	b21a      	sxth	r2, r3
 800320e:	4b33      	ldr	r3, [pc, #204]	@ (80032dc <BMP280_calibrationData+0x140>)
 8003210:	801a      	strh	r2, [r3, #0]
	dig_T3 = (Buffer[5]<<8)|Buffer[4];
 8003212:	7a7b      	ldrb	r3, [r7, #9]
 8003214:	021b      	lsls	r3, r3, #8
 8003216:	b21a      	sxth	r2, r3
 8003218:	7a3b      	ldrb	r3, [r7, #8]
 800321a:	b21b      	sxth	r3, r3
 800321c:	4313      	orrs	r3, r2
 800321e:	b21a      	sxth	r2, r3
 8003220:	4b2f      	ldr	r3, [pc, #188]	@ (80032e0 <BMP280_calibrationData+0x144>)
 8003222:	801a      	strh	r2, [r3, #0]

	dig_P1 = (Buffer[7]<<8)|Buffer[6];
 8003224:	7afb      	ldrb	r3, [r7, #11]
 8003226:	021b      	lsls	r3, r3, #8
 8003228:	b21a      	sxth	r2, r3
 800322a:	7abb      	ldrb	r3, [r7, #10]
 800322c:	b21b      	sxth	r3, r3
 800322e:	4313      	orrs	r3, r2
 8003230:	b21b      	sxth	r3, r3
 8003232:	b29a      	uxth	r2, r3
 8003234:	4b2b      	ldr	r3, [pc, #172]	@ (80032e4 <BMP280_calibrationData+0x148>)
 8003236:	801a      	strh	r2, [r3, #0]
	dig_P2 = (Buffer[9]<<8)|Buffer[8];
 8003238:	7b7b      	ldrb	r3, [r7, #13]
 800323a:	021b      	lsls	r3, r3, #8
 800323c:	b21a      	sxth	r2, r3
 800323e:	7b3b      	ldrb	r3, [r7, #12]
 8003240:	b21b      	sxth	r3, r3
 8003242:	4313      	orrs	r3, r2
 8003244:	b21a      	sxth	r2, r3
 8003246:	4b28      	ldr	r3, [pc, #160]	@ (80032e8 <BMP280_calibrationData+0x14c>)
 8003248:	801a      	strh	r2, [r3, #0]
	dig_P3 = (Buffer[11]<<8)|Buffer[10];
 800324a:	7bfb      	ldrb	r3, [r7, #15]
 800324c:	021b      	lsls	r3, r3, #8
 800324e:	b21a      	sxth	r2, r3
 8003250:	7bbb      	ldrb	r3, [r7, #14]
 8003252:	b21b      	sxth	r3, r3
 8003254:	4313      	orrs	r3, r2
 8003256:	b21a      	sxth	r2, r3
 8003258:	4b24      	ldr	r3, [pc, #144]	@ (80032ec <BMP280_calibrationData+0x150>)
 800325a:	801a      	strh	r2, [r3, #0]
	dig_P4 = (Buffer[13]<<8)|Buffer[12];
 800325c:	7c7b      	ldrb	r3, [r7, #17]
 800325e:	021b      	lsls	r3, r3, #8
 8003260:	b21a      	sxth	r2, r3
 8003262:	7c3b      	ldrb	r3, [r7, #16]
 8003264:	b21b      	sxth	r3, r3
 8003266:	4313      	orrs	r3, r2
 8003268:	b21a      	sxth	r2, r3
 800326a:	4b21      	ldr	r3, [pc, #132]	@ (80032f0 <BMP280_calibrationData+0x154>)
 800326c:	801a      	strh	r2, [r3, #0]
	dig_P5 = (Buffer[15]<<8)|Buffer[14];
 800326e:	7cfb      	ldrb	r3, [r7, #19]
 8003270:	021b      	lsls	r3, r3, #8
 8003272:	b21a      	sxth	r2, r3
 8003274:	7cbb      	ldrb	r3, [r7, #18]
 8003276:	b21b      	sxth	r3, r3
 8003278:	4313      	orrs	r3, r2
 800327a:	b21a      	sxth	r2, r3
 800327c:	4b1d      	ldr	r3, [pc, #116]	@ (80032f4 <BMP280_calibrationData+0x158>)
 800327e:	801a      	strh	r2, [r3, #0]
	dig_P6 = (Buffer[17]<<8)|Buffer[16];
 8003280:	7d7b      	ldrb	r3, [r7, #21]
 8003282:	021b      	lsls	r3, r3, #8
 8003284:	b21a      	sxth	r2, r3
 8003286:	7d3b      	ldrb	r3, [r7, #20]
 8003288:	b21b      	sxth	r3, r3
 800328a:	4313      	orrs	r3, r2
 800328c:	b21a      	sxth	r2, r3
 800328e:	4b1a      	ldr	r3, [pc, #104]	@ (80032f8 <BMP280_calibrationData+0x15c>)
 8003290:	801a      	strh	r2, [r3, #0]
	dig_P7 = (Buffer[19]<<8)|Buffer[18];
 8003292:	7dfb      	ldrb	r3, [r7, #23]
 8003294:	021b      	lsls	r3, r3, #8
 8003296:	b21a      	sxth	r2, r3
 8003298:	7dbb      	ldrb	r3, [r7, #22]
 800329a:	b21b      	sxth	r3, r3
 800329c:	4313      	orrs	r3, r2
 800329e:	b21a      	sxth	r2, r3
 80032a0:	4b16      	ldr	r3, [pc, #88]	@ (80032fc <BMP280_calibrationData+0x160>)
 80032a2:	801a      	strh	r2, [r3, #0]
	dig_P8 = (Buffer[21]<<8)|Buffer[20];
 80032a4:	7e7b      	ldrb	r3, [r7, #25]
 80032a6:	021b      	lsls	r3, r3, #8
 80032a8:	b21a      	sxth	r2, r3
 80032aa:	7e3b      	ldrb	r3, [r7, #24]
 80032ac:	b21b      	sxth	r3, r3
 80032ae:	4313      	orrs	r3, r2
 80032b0:	b21a      	sxth	r2, r3
 80032b2:	4b13      	ldr	r3, [pc, #76]	@ (8003300 <BMP280_calibrationData+0x164>)
 80032b4:	801a      	strh	r2, [r3, #0]
	dig_P9 = (Buffer[23]<<8)|Buffer[22];
 80032b6:	7efb      	ldrb	r3, [r7, #27]
 80032b8:	021b      	lsls	r3, r3, #8
 80032ba:	b21a      	sxth	r2, r3
 80032bc:	7ebb      	ldrb	r3, [r7, #26]
 80032be:	b21b      	sxth	r3, r3
 80032c0:	4313      	orrs	r3, r2
 80032c2:	b21a      	sxth	r2, r3
 80032c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003304 <BMP280_calibrationData+0x168>)
 80032c6:	801a      	strh	r2, [r3, #0]
}
 80032c8:	bf00      	nop
 80032ca:	3720      	adds	r7, #32
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	58020400 	.word	0x58020400
 80032d4:	24000e00 	.word	0x24000e00
 80032d8:	240013d4 	.word	0x240013d4
 80032dc:	240013d8 	.word	0x240013d8
 80032e0:	240013da 	.word	0x240013da
 80032e4:	240013d6 	.word	0x240013d6
 80032e8:	240013dc 	.word	0x240013dc
 80032ec:	240013de 	.word	0x240013de
 80032f0:	240013e0 	.word	0x240013e0
 80032f4:	240013e2 	.word	0x240013e2
 80032f8:	240013e4 	.word	0x240013e4
 80032fc:	240013e6 	.word	0x240013e6
 8003300:	240013e8 	.word	0x240013e8
 8003304:	240013ea 	.word	0x240013ea

08003308 <BMP280_readRawValues>:

void BMP280_readRawValues(void){
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
	uint8_t Address = press_msb;
 800330e:	23f7      	movs	r3, #247	@ 0xf7
 8003310:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[6] = {0};
 8003312:	2300      	movs	r3, #0
 8003314:	603b      	str	r3, [r7, #0]
 8003316:	2300      	movs	r3, #0
 8003318:	80bb      	strh	r3, [r7, #4]
	BMP280_select();
 800331a:	2200      	movs	r2, #0
 800331c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003320:	4817      	ldr	r0, [pc, #92]	@ (8003380 <BMP280_readRawValues+0x78>)
 8003322:	f005 fe3b 	bl	8008f9c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8003326:	1df9      	adds	r1, r7, #7
 8003328:	2364      	movs	r3, #100	@ 0x64
 800332a:	2201      	movs	r2, #1
 800332c:	4815      	ldr	r0, [pc, #84]	@ (8003384 <BMP280_readRawValues+0x7c>)
 800332e:	f008 fec1 	bl	800c0b4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 6, 100);
 8003332:	4639      	mov	r1, r7
 8003334:	2364      	movs	r3, #100	@ 0x64
 8003336:	2206      	movs	r2, #6
 8003338:	4812      	ldr	r0, [pc, #72]	@ (8003384 <BMP280_readRawValues+0x7c>)
 800333a:	f009 f8a9 	bl	800c490 <HAL_SPI_Receive>
	BMP280_unselect();
 800333e:	2201      	movs	r2, #1
 8003340:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003344:	480e      	ldr	r0, [pc, #56]	@ (8003380 <BMP280_readRawValues+0x78>)
 8003346:	f005 fe29 	bl	8008f9c <HAL_GPIO_WritePin>

	P_raw = (Buffer[0]<<12)|(Buffer[1]<<4)|(Buffer[2]>>4);
 800334a:	783b      	ldrb	r3, [r7, #0]
 800334c:	031a      	lsls	r2, r3, #12
 800334e:	787b      	ldrb	r3, [r7, #1]
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	4313      	orrs	r3, r2
 8003354:	78ba      	ldrb	r2, [r7, #2]
 8003356:	0912      	lsrs	r2, r2, #4
 8003358:	b2d2      	uxtb	r2, r2
 800335a:	4313      	orrs	r3, r2
 800335c:	4a0a      	ldr	r2, [pc, #40]	@ (8003388 <BMP280_readRawValues+0x80>)
 800335e:	6013      	str	r3, [r2, #0]
	T_raw = (Buffer[3]<<12)|(Buffer[4]<<4)|(Buffer[5]>>4);
 8003360:	78fb      	ldrb	r3, [r7, #3]
 8003362:	031a      	lsls	r2, r3, #12
 8003364:	793b      	ldrb	r3, [r7, #4]
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	4313      	orrs	r3, r2
 800336a:	797a      	ldrb	r2, [r7, #5]
 800336c:	0912      	lsrs	r2, r2, #4
 800336e:	b2d2      	uxtb	r2, r2
 8003370:	4313      	orrs	r3, r2
 8003372:	4a06      	ldr	r2, [pc, #24]	@ (800338c <BMP280_readRawValues+0x84>)
 8003374:	6013      	str	r3, [r2, #0]
}
 8003376:	bf00      	nop
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	58020400 	.word	0x58020400
 8003384:	24000e00 	.word	0x24000e00
 8003388:	240013f0 	.word	0x240013f0
 800338c:	240013ec 	.word	0x240013ec

08003390 <BMP280_measureT>:

int32_t BMP280_measureT(int32_t adc_T){
 8003390:	b480      	push	{r7}
 8003392:	b087      	sub	sp, #28
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 =  ((((T_raw>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8003398:	4b1a      	ldr	r3, [pc, #104]	@ (8003404 <BMP280_measureT+0x74>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	10da      	asrs	r2, r3, #3
 800339e:	4b1a      	ldr	r3, [pc, #104]	@ (8003408 <BMP280_measureT+0x78>)
 80033a0:	881b      	ldrh	r3, [r3, #0]
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	4a19      	ldr	r2, [pc, #100]	@ (800340c <BMP280_measureT+0x7c>)
 80033a8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80033ac:	fb02 f303 	mul.w	r3, r2, r3
 80033b0:	12db      	asrs	r3, r3, #11
 80033b2:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	111b      	asrs	r3, r3, #4
 80033b8:	4a13      	ldr	r2, [pc, #76]	@ (8003408 <BMP280_measureT+0x78>)
 80033ba:	8812      	ldrh	r2, [r2, #0]
 80033bc:	1a9b      	subs	r3, r3, r2
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	1112      	asrs	r2, r2, #4
 80033c2:	4911      	ldr	r1, [pc, #68]	@ (8003408 <BMP280_measureT+0x78>)
 80033c4:	8809      	ldrh	r1, [r1, #0]
 80033c6:	1a52      	subs	r2, r2, r1
 80033c8:	fb02 f303 	mul.w	r3, r2, r3
 80033cc:	131b      	asrs	r3, r3, #12
 80033ce:	4a10      	ldr	r2, [pc, #64]	@ (8003410 <BMP280_measureT+0x80>)
 80033d0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80033d4:	fb02 f303 	mul.w	r3, r2, r3
 80033d8:	139b      	asrs	r3, r3, #14
 80033da:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	4413      	add	r3, r2
 80033e2:	4a0c      	ldr	r2, [pc, #48]	@ (8003414 <BMP280_measureT+0x84>)
 80033e4:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 80033e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003414 <BMP280_measureT+0x84>)
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	4613      	mov	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	3380      	adds	r3, #128	@ 0x80
 80033f2:	121b      	asrs	r3, r3, #8
 80033f4:	60fb      	str	r3, [r7, #12]
	return T;
 80033f6:	68fb      	ldr	r3, [r7, #12]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	371c      	adds	r7, #28
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	240013ec 	.word	0x240013ec
 8003408:	240013d4 	.word	0x240013d4
 800340c:	240013d8 	.word	0x240013d8
 8003410:	240013da 	.word	0x240013da
 8003414:	240013f4 	.word	0x240013f4

08003418 <BMP280_measureP>:

uint32_t BMP280_measureP(int32_t adc_P){
 8003418:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800341c:	b0ca      	sub	sp, #296	@ 0x128
 800341e:	af00      	add	r7, sp, #0
 8003420:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8003424:	4baf      	ldr	r3, [pc, #700]	@ (80036e4 <BMP280_measureP+0x2cc>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	17da      	asrs	r2, r3, #31
 800342a:	461c      	mov	r4, r3
 800342c:	4615      	mov	r5, r2
 800342e:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8003432:	f145 3bff 	adc.w	fp, r5, #4294967295
 8003436:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 800343a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800343e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003442:	fb03 f102 	mul.w	r1, r3, r2
 8003446:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800344a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800344e:	fb02 f303 	mul.w	r3, r2, r3
 8003452:	18ca      	adds	r2, r1, r3
 8003454:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003458:	fba3 8903 	umull	r8, r9, r3, r3
 800345c:	eb02 0309 	add.w	r3, r2, r9
 8003460:	4699      	mov	r9, r3
 8003462:	4ba1      	ldr	r3, [pc, #644]	@ (80036e8 <BMP280_measureP+0x2d0>)
 8003464:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003468:	b21b      	sxth	r3, r3
 800346a:	17da      	asrs	r2, r3, #31
 800346c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003470:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003474:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8003478:	4603      	mov	r3, r0
 800347a:	fb03 f209 	mul.w	r2, r3, r9
 800347e:	460b      	mov	r3, r1
 8003480:	fb08 f303 	mul.w	r3, r8, r3
 8003484:	4413      	add	r3, r2
 8003486:	4602      	mov	r2, r0
 8003488:	fba8 1202 	umull	r1, r2, r8, r2
 800348c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003490:	460a      	mov	r2, r1
 8003492:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8003496:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800349a:	4413      	add	r3, r2
 800349c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80034a0:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80034a4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 80034a8:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 80034ac:	4b8f      	ldr	r3, [pc, #572]	@ (80036ec <BMP280_measureP+0x2d4>)
 80034ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034b2:	b21b      	sxth	r3, r3
 80034b4:	17da      	asrs	r2, r3, #31
 80034b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80034ba:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80034be:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80034c2:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80034c6:	462a      	mov	r2, r5
 80034c8:	fb02 f203 	mul.w	r2, r2, r3
 80034cc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80034d0:	4621      	mov	r1, r4
 80034d2:	fb01 f303 	mul.w	r3, r1, r3
 80034d6:	441a      	add	r2, r3
 80034d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80034dc:	4621      	mov	r1, r4
 80034de:	fba3 1301 	umull	r1, r3, r3, r1
 80034e2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80034e6:	460b      	mov	r3, r1
 80034e8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80034ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034f0:	18d3      	adds	r3, r2, r3
 80034f2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80034f6:	f04f 0000 	mov.w	r0, #0
 80034fa:	f04f 0100 	mov.w	r1, #0
 80034fe:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8003502:	462b      	mov	r3, r5
 8003504:	0459      	lsls	r1, r3, #17
 8003506:	4623      	mov	r3, r4
 8003508:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 800350c:	4623      	mov	r3, r4
 800350e:	0458      	lsls	r0, r3, #17
 8003510:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8003514:	1814      	adds	r4, r2, r0
 8003516:	643c      	str	r4, [r7, #64]	@ 0x40
 8003518:	414b      	adcs	r3, r1
 800351a:	647b      	str	r3, [r7, #68]	@ 0x44
 800351c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8003520:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8003524:	4b72      	ldr	r3, [pc, #456]	@ (80036f0 <BMP280_measureP+0x2d8>)
 8003526:	f9b3 3000 	ldrsh.w	r3, [r3]
 800352a:	b21b      	sxth	r3, r3
 800352c:	17da      	asrs	r2, r3, #31
 800352e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003532:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003536:	f04f 0000 	mov.w	r0, #0
 800353a:	f04f 0100 	mov.w	r1, #0
 800353e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003542:	00d9      	lsls	r1, r3, #3
 8003544:	2000      	movs	r0, #0
 8003546:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800354a:	1814      	adds	r4, r2, r0
 800354c:	63bc      	str	r4, [r7, #56]	@ 0x38
 800354e:	414b      	adcs	r3, r1
 8003550:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003552:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8003556:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 800355a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800355e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003562:	fb03 f102 	mul.w	r1, r3, r2
 8003566:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800356a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800356e:	fb02 f303 	mul.w	r3, r2, r3
 8003572:	18ca      	adds	r2, r1, r3
 8003574:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003578:	fba3 1303 	umull	r1, r3, r3, r3
 800357c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003580:	460b      	mov	r3, r1
 8003582:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003586:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800358a:	18d3      	adds	r3, r2, r3
 800358c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003590:	4b58      	ldr	r3, [pc, #352]	@ (80036f4 <BMP280_measureP+0x2dc>)
 8003592:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003596:	b21b      	sxth	r3, r3
 8003598:	17da      	asrs	r2, r3, #31
 800359a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800359e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80035a2:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80035a6:	462b      	mov	r3, r5
 80035a8:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80035ac:	4642      	mov	r2, r8
 80035ae:	fb02 f203 	mul.w	r2, r2, r3
 80035b2:	464b      	mov	r3, r9
 80035b4:	4621      	mov	r1, r4
 80035b6:	fb01 f303 	mul.w	r3, r1, r3
 80035ba:	4413      	add	r3, r2
 80035bc:	4622      	mov	r2, r4
 80035be:	4641      	mov	r1, r8
 80035c0:	fba2 1201 	umull	r1, r2, r2, r1
 80035c4:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80035c8:	460a      	mov	r2, r1
 80035ca:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 80035ce:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80035d2:	4413      	add	r3, r2
 80035d4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80035d8:	f04f 0000 	mov.w	r0, #0
 80035dc:	f04f 0100 	mov.w	r1, #0
 80035e0:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 80035e4:	4623      	mov	r3, r4
 80035e6:	0a18      	lsrs	r0, r3, #8
 80035e8:	462b      	mov	r3, r5
 80035ea:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80035ee:	462b      	mov	r3, r5
 80035f0:	1219      	asrs	r1, r3, #8
 80035f2:	4b41      	ldr	r3, [pc, #260]	@ (80036f8 <BMP280_measureP+0x2e0>)
 80035f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035f8:	b21b      	sxth	r3, r3
 80035fa:	17da      	asrs	r2, r3, #31
 80035fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003600:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003604:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003608:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 800360c:	464a      	mov	r2, r9
 800360e:	fb02 f203 	mul.w	r2, r2, r3
 8003612:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003616:	4644      	mov	r4, r8
 8003618:	fb04 f303 	mul.w	r3, r4, r3
 800361c:	441a      	add	r2, r3
 800361e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003622:	4644      	mov	r4, r8
 8003624:	fba3 4304 	umull	r4, r3, r3, r4
 8003628:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800362c:	4623      	mov	r3, r4
 800362e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003632:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003636:	18d3      	adds	r3, r2, r3
 8003638:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800363c:	f04f 0200 	mov.w	r2, #0
 8003640:	f04f 0300 	mov.w	r3, #0
 8003644:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8003648:	464c      	mov	r4, r9
 800364a:	0323      	lsls	r3, r4, #12
 800364c:	4644      	mov	r4, r8
 800364e:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8003652:	4644      	mov	r4, r8
 8003654:	0322      	lsls	r2, r4, #12
 8003656:	1884      	adds	r4, r0, r2
 8003658:	633c      	str	r4, [r7, #48]	@ 0x30
 800365a:	eb41 0303 	adc.w	r3, r1, r3
 800365e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003660:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8003664:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8003668:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800366c:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8003670:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8003674:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8003678:	4b20      	ldr	r3, [pc, #128]	@ (80036fc <BMP280_measureP+0x2e4>)
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	b29b      	uxth	r3, r3
 800367e:	2200      	movs	r2, #0
 8003680:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003684:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003688:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800368c:	462b      	mov	r3, r5
 800368e:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003692:	4642      	mov	r2, r8
 8003694:	fb02 f203 	mul.w	r2, r2, r3
 8003698:	464b      	mov	r3, r9
 800369a:	4621      	mov	r1, r4
 800369c:	fb01 f303 	mul.w	r3, r1, r3
 80036a0:	4413      	add	r3, r2
 80036a2:	4622      	mov	r2, r4
 80036a4:	4641      	mov	r1, r8
 80036a6:	fba2 1201 	umull	r1, r2, r2, r1
 80036aa:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80036ae:	460a      	mov	r2, r1
 80036b0:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 80036b4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80036b8:	4413      	add	r3, r2
 80036ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80036be:	f04f 0200 	mov.w	r2, #0
 80036c2:	f04f 0300 	mov.w	r3, #0
 80036c6:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80036ca:	4629      	mov	r1, r5
 80036cc:	104a      	asrs	r2, r1, #1
 80036ce:	4629      	mov	r1, r5
 80036d0:	17cb      	asrs	r3, r1, #31
 80036d2:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 80036d6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80036da:	4313      	orrs	r3, r2
 80036dc:	d110      	bne.n	8003700 <BMP280_measureP+0x2e8>
	{
	return 0;
 80036de:	2300      	movs	r3, #0
 80036e0:	e154      	b.n	800398c <BMP280_measureP+0x574>
 80036e2:	bf00      	nop
 80036e4:	240013f4 	.word	0x240013f4
 80036e8:	240013e4 	.word	0x240013e4
 80036ec:	240013e2 	.word	0x240013e2
 80036f0:	240013e0 	.word	0x240013e0
 80036f4:	240013de 	.word	0x240013de
 80036f8:	240013dc 	.word	0x240013dc
 80036fc:	240013d6 	.word	0x240013d6
	}
	p = 1048576-adc_P;
 8003700:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003704:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8003708:	17da      	asrs	r2, r3, #31
 800370a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800370c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800370e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8003712:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8003716:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800371a:	105b      	asrs	r3, r3, #1
 800371c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003720:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003724:	07db      	lsls	r3, r3, #31
 8003726:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800372a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800372e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8003732:	4621      	mov	r1, r4
 8003734:	1a89      	subs	r1, r1, r2
 8003736:	67b9      	str	r1, [r7, #120]	@ 0x78
 8003738:	4629      	mov	r1, r5
 800373a:	eb61 0303 	sbc.w	r3, r1, r3
 800373e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003740:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003744:	4622      	mov	r2, r4
 8003746:	462b      	mov	r3, r5
 8003748:	1891      	adds	r1, r2, r2
 800374a:	6239      	str	r1, [r7, #32]
 800374c:	415b      	adcs	r3, r3
 800374e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003750:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003754:	4621      	mov	r1, r4
 8003756:	1851      	adds	r1, r2, r1
 8003758:	61b9      	str	r1, [r7, #24]
 800375a:	4629      	mov	r1, r5
 800375c:	414b      	adcs	r3, r1
 800375e:	61fb      	str	r3, [r7, #28]
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800376c:	4649      	mov	r1, r9
 800376e:	018b      	lsls	r3, r1, #6
 8003770:	4641      	mov	r1, r8
 8003772:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003776:	4641      	mov	r1, r8
 8003778:	018a      	lsls	r2, r1, #6
 800377a:	4641      	mov	r1, r8
 800377c:	1889      	adds	r1, r1, r2
 800377e:	6139      	str	r1, [r7, #16]
 8003780:	4649      	mov	r1, r9
 8003782:	eb43 0101 	adc.w	r1, r3, r1
 8003786:	6179      	str	r1, [r7, #20]
 8003788:	f04f 0200 	mov.w	r2, #0
 800378c:	f04f 0300 	mov.w	r3, #0
 8003790:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8003794:	4649      	mov	r1, r9
 8003796:	008b      	lsls	r3, r1, #2
 8003798:	4641      	mov	r1, r8
 800379a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800379e:	4641      	mov	r1, r8
 80037a0:	008a      	lsls	r2, r1, #2
 80037a2:	4610      	mov	r0, r2
 80037a4:	4619      	mov	r1, r3
 80037a6:	4603      	mov	r3, r0
 80037a8:	4622      	mov	r2, r4
 80037aa:	189b      	adds	r3, r3, r2
 80037ac:	60bb      	str	r3, [r7, #8]
 80037ae:	460b      	mov	r3, r1
 80037b0:	462a      	mov	r2, r5
 80037b2:	eb42 0303 	adc.w	r3, r2, r3
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	f04f 0200 	mov.w	r2, #0
 80037bc:	f04f 0300 	mov.w	r3, #0
 80037c0:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80037c4:	4649      	mov	r1, r9
 80037c6:	008b      	lsls	r3, r1, #2
 80037c8:	4641      	mov	r1, r8
 80037ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037ce:	4641      	mov	r1, r8
 80037d0:	008a      	lsls	r2, r1, #2
 80037d2:	4610      	mov	r0, r2
 80037d4:	4619      	mov	r1, r3
 80037d6:	4603      	mov	r3, r0
 80037d8:	4622      	mov	r2, r4
 80037da:	189b      	adds	r3, r3, r2
 80037dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80037de:	462b      	mov	r3, r5
 80037e0:	460a      	mov	r2, r1
 80037e2:	eb42 0303 	adc.w	r3, r2, r3
 80037e6:	677b      	str	r3, [r7, #116]	@ 0x74
 80037e8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80037ec:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80037f0:	f7fc ff9a 	bl	8000728 <__aeabi_ldivmod>
 80037f4:	4602      	mov	r2, r0
 80037f6:	460b      	mov	r3, r1
 80037f8:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 80037fc:	4b66      	ldr	r3, [pc, #408]	@ (8003998 <BMP280_measureP+0x580>)
 80037fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003802:	b21b      	sxth	r3, r3
 8003804:	17da      	asrs	r2, r3, #31
 8003806:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003808:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800380a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800380e:	f04f 0000 	mov.w	r0, #0
 8003812:	f04f 0100 	mov.w	r1, #0
 8003816:	0b50      	lsrs	r0, r2, #13
 8003818:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800381c:	1359      	asrs	r1, r3, #13
 800381e:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8003822:	462b      	mov	r3, r5
 8003824:	fb00 f203 	mul.w	r2, r0, r3
 8003828:	4623      	mov	r3, r4
 800382a:	fb03 f301 	mul.w	r3, r3, r1
 800382e:	4413      	add	r3, r2
 8003830:	4622      	mov	r2, r4
 8003832:	fba2 1200 	umull	r1, r2, r2, r0
 8003836:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800383a:	460a      	mov	r2, r1
 800383c:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8003840:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003844:	4413      	add	r3, r2
 8003846:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800384a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800384e:	f04f 0000 	mov.w	r0, #0
 8003852:	f04f 0100 	mov.w	r1, #0
 8003856:	0b50      	lsrs	r0, r2, #13
 8003858:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800385c:	1359      	asrs	r1, r3, #13
 800385e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8003862:	462b      	mov	r3, r5
 8003864:	fb00 f203 	mul.w	r2, r0, r3
 8003868:	4623      	mov	r3, r4
 800386a:	fb03 f301 	mul.w	r3, r3, r1
 800386e:	4413      	add	r3, r2
 8003870:	4622      	mov	r2, r4
 8003872:	fba2 1200 	umull	r1, r2, r2, r0
 8003876:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800387a:	460a      	mov	r2, r1
 800387c:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8003880:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8003884:	4413      	add	r3, r2
 8003886:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800388a:	f04f 0200 	mov.w	r2, #0
 800388e:	f04f 0300 	mov.w	r3, #0
 8003892:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8003896:	4621      	mov	r1, r4
 8003898:	0e4a      	lsrs	r2, r1, #25
 800389a:	4629      	mov	r1, r5
 800389c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80038a0:	4629      	mov	r1, r5
 80038a2:	164b      	asrs	r3, r1, #25
 80038a4:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 80038a8:	4b3c      	ldr	r3, [pc, #240]	@ (800399c <BMP280_measureP+0x584>)
 80038aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038ae:	b21b      	sxth	r3, r3
 80038b0:	17da      	asrs	r2, r3, #31
 80038b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80038b4:	667a      	str	r2, [r7, #100]	@ 0x64
 80038b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80038ba:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80038be:	462a      	mov	r2, r5
 80038c0:	fb02 f203 	mul.w	r2, r2, r3
 80038c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c8:	4621      	mov	r1, r4
 80038ca:	fb01 f303 	mul.w	r3, r1, r3
 80038ce:	4413      	add	r3, r2
 80038d0:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80038d4:	4621      	mov	r1, r4
 80038d6:	fba2 1201 	umull	r1, r2, r2, r1
 80038da:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80038de:	460a      	mov	r2, r1
 80038e0:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 80038e4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80038e8:	4413      	add	r3, r2
 80038ea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80038ee:	f04f 0200 	mov.w	r2, #0
 80038f2:	f04f 0300 	mov.w	r3, #0
 80038f6:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 80038fa:	4621      	mov	r1, r4
 80038fc:	0cca      	lsrs	r2, r1, #19
 80038fe:	4629      	mov	r1, r5
 8003900:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8003904:	4629      	mov	r1, r5
 8003906:	14cb      	asrs	r3, r1, #19
 8003908:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 800390c:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8003910:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8003914:	1884      	adds	r4, r0, r2
 8003916:	65bc      	str	r4, [r7, #88]	@ 0x58
 8003918:	eb41 0303 	adc.w	r3, r1, r3
 800391c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800391e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8003922:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8003926:	4621      	mov	r1, r4
 8003928:	1889      	adds	r1, r1, r2
 800392a:	6539      	str	r1, [r7, #80]	@ 0x50
 800392c:	4629      	mov	r1, r5
 800392e:	eb43 0101 	adc.w	r1, r3, r1
 8003932:	6579      	str	r1, [r7, #84]	@ 0x54
 8003934:	f04f 0000 	mov.w	r0, #0
 8003938:	f04f 0100 	mov.w	r1, #0
 800393c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8003940:	4623      	mov	r3, r4
 8003942:	0a18      	lsrs	r0, r3, #8
 8003944:	462b      	mov	r3, r5
 8003946:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800394a:	462b      	mov	r3, r5
 800394c:	1219      	asrs	r1, r3, #8
 800394e:	4b14      	ldr	r3, [pc, #80]	@ (80039a0 <BMP280_measureP+0x588>)
 8003950:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003954:	b21b      	sxth	r3, r3
 8003956:	17da      	asrs	r2, r3, #31
 8003958:	64bb      	str	r3, [r7, #72]	@ 0x48
 800395a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800395c:	f04f 0200 	mov.w	r2, #0
 8003960:	f04f 0300 	mov.w	r3, #0
 8003964:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8003968:	464c      	mov	r4, r9
 800396a:	0123      	lsls	r3, r4, #4
 800396c:	4644      	mov	r4, r8
 800396e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8003972:	4644      	mov	r4, r8
 8003974:	0122      	lsls	r2, r4, #4
 8003976:	1884      	adds	r4, r0, r2
 8003978:	603c      	str	r4, [r7, #0]
 800397a:	eb41 0303 	adc.w	r3, r1, r3
 800397e:	607b      	str	r3, [r7, #4]
 8003980:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003984:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 8003988:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 800398c:	4618      	mov	r0, r3
 800398e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003992:	46bd      	mov	sp, r7
 8003994:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003998:	240013ea 	.word	0x240013ea
 800399c:	240013e8 	.word	0x240013e8
 80039a0:	240013e6 	.word	0x240013e6
 80039a4:	00000000 	.word	0x00000000

080039a8 <BMP280_measureH>:

uint16_t BMP280_measureH(uint32_t Pres, int32_t Temp){
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b088      	sub	sp, #32
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
	double var1, var2, h;

	if(Pres == 0) return 0;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d101      	bne.n	80039bc <BMP280_measureH+0x14>
 80039b8:	2300      	movs	r3, #0
 80039ba:	e03d      	b.n	8003a38 <BMP280_measureH+0x90>
	var1 = -log(((double)Pres)/101325);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	ee07 3a90 	vmov	s15, r3
 80039c2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80039c6:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8003a40 <BMP280_measureH+0x98>
 80039ca:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80039ce:	eeb0 0b46 	vmov.f64	d0, d6
 80039d2:	f014 fe45 	bl	8018660 <log>
 80039d6:	eeb0 7b40 	vmov.f64	d7, d0
 80039da:	eeb1 7b47 	vneg.f64	d7, d7
 80039de:	ed87 7b06 	vstr	d7, [r7, #24]

	if(var1 == 0) return 0;
 80039e2:	ed97 7b06 	vldr	d7, [r7, #24]
 80039e6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80039ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ee:	d101      	bne.n	80039f4 <BMP280_measureH+0x4c>
 80039f0:	2300      	movs	r3, #0
 80039f2:	e021      	b.n	8003a38 <BMP280_measureH+0x90>
	var2 = 0.0341663/((((double)Temp)/100)+273.15);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	ee07 3a90 	vmov	s15, r3
 80039fa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80039fe:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8003a48 <BMP280_measureH+0xa0>
 8003a02:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003a06:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 8003a50 <BMP280_measureH+0xa8>
 8003a0a:	ee37 6b06 	vadd.f64	d6, d7, d6
 8003a0e:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8003a58 <BMP280_measureH+0xb0>
 8003a12:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003a16:	ed87 7b04 	vstr	d7, [r7, #16]
	h = var1/var2;
 8003a1a:	ed97 5b06 	vldr	d5, [r7, #24]
 8003a1e:	ed97 6b04 	vldr	d6, [r7, #16]
 8003a22:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003a26:	ed87 7b02 	vstr	d7, [r7, #8]
	return (uint16_t)h;
 8003a2a:	ed97 7b02 	vldr	d7, [r7, #8]
 8003a2e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003a32:	ee17 3a90 	vmov	r3, s15
 8003a36:	b29b      	uxth	r3, r3
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3720      	adds	r7, #32
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	00000000 	.word	0x00000000
 8003a44:	40f8bcd0 	.word	0x40f8bcd0
 8003a48:	00000000 	.word	0x00000000
 8003a4c:	40590000 	.word	0x40590000
 8003a50:	66666666 	.word	0x66666666
 8003a54:	40711266 	.word	0x40711266
 8003a58:	ca402a92 	.word	0xca402a92
 8003a5c:	3fa17e3e 	.word	0x3fa17e3e

08003a60 <BMP280_init>:

void BMP280_init(void){
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
	BMP280_unselect();
 8003a64:	2201      	movs	r2, #1
 8003a66:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003a6a:	480d      	ldr	r0, [pc, #52]	@ (8003aa0 <BMP280_init+0x40>)
 8003a6c:	f005 fa96 	bl	8008f9c <HAL_GPIO_WritePin>
	BMP280_config();
 8003a70:	f7ff fb88 	bl	8003184 <BMP280_config>
	BMP280.ID = BMP280_read(0x89);
 8003a74:	2089      	movs	r0, #137	@ 0x89
 8003a76:	f7ff fb57 	bl	8003128 <BMP280_read>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	4b09      	ldr	r3, [pc, #36]	@ (8003aa4 <BMP280_init+0x44>)
 8003a80:	701a      	strb	r2, [r3, #0]
	BMP280_calibrationData();
 8003a82:	f7ff fb8b 	bl	800319c <BMP280_calibrationData>
	BMP280_readRawValues();
 8003a86:	f7ff fc3f 	bl	8003308 <BMP280_readRawValues>
	BMP280.Temp_inicial = BMP280_measureT(T_raw);
 8003a8a:	4b07      	ldr	r3, [pc, #28]	@ (8003aa8 <BMP280_init+0x48>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7ff fc7e 	bl	8003390 <BMP280_measureT>
 8003a94:	4603      	mov	r3, r0
 8003a96:	4a03      	ldr	r2, [pc, #12]	@ (8003aa4 <BMP280_init+0x44>)
 8003a98:	6093      	str	r3, [r2, #8]
}
 8003a9a:	bf00      	nop
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	58020400 	.word	0x58020400
 8003aa4:	240013c0 	.word	0x240013c0
 8003aa8:	240013ec 	.word	0x240013ec

08003aac <BMP280_calculate>:

void BMP280_calculate(void){
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
	//BMP280.ID = 0;
	BMP280.ID = BMP280_read(0x89);
 8003ab0:	2089      	movs	r0, #137	@ 0x89
 8003ab2:	f7ff fb39 	bl	8003128 <BMP280_read>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	461a      	mov	r2, r3
 8003aba:	4b16      	ldr	r3, [pc, #88]	@ (8003b14 <BMP280_calculate+0x68>)
 8003abc:	701a      	strb	r2, [r3, #0]
	BMP280_readRawValues();
 8003abe:	f7ff fc23 	bl	8003308 <BMP280_readRawValues>
	BMP280.Temp = BMP280_measureT(T_raw);
 8003ac2:	4b15      	ldr	r3, [pc, #84]	@ (8003b18 <BMP280_calculate+0x6c>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7ff fc62 	bl	8003390 <BMP280_measureT>
 8003acc:	4603      	mov	r3, r0
 8003ace:	4a11      	ldr	r2, [pc, #68]	@ (8003b14 <BMP280_calculate+0x68>)
 8003ad0:	6053      	str	r3, [r2, #4]
	BMP280.Pressure    		= BMP280_measureP(P_raw)/256;
 8003ad2:	4b12      	ldr	r3, [pc, #72]	@ (8003b1c <BMP280_calculate+0x70>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7ff fc9e 	bl	8003418 <BMP280_measureP>
 8003adc:	4603      	mov	r3, r0
 8003ade:	0a1b      	lsrs	r3, r3, #8
 8003ae0:	4a0c      	ldr	r2, [pc, #48]	@ (8003b14 <BMP280_calculate+0x68>)
 8003ae2:	60d3      	str	r3, [r2, #12]
	BMP280.Barometric_Altitude = BMP280_measureH(BMP280.Pressure, BMP280.Temp_inicial);
 8003ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8003b14 <BMP280_calculate+0x68>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	4a0a      	ldr	r2, [pc, #40]	@ (8003b14 <BMP280_calculate+0x68>)
 8003aea:	6892      	ldr	r2, [r2, #8]
 8003aec:	4611      	mov	r1, r2
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff ff5a 	bl	80039a8 <BMP280_measureH>
 8003af4:	4603      	mov	r3, r0
 8003af6:	461a      	mov	r2, r3
 8003af8:	4b06      	ldr	r3, [pc, #24]	@ (8003b14 <BMP280_calculate+0x68>)
 8003afa:	821a      	strh	r2, [r3, #16]

	if(BMP280.Barometric_Altitude > BMP280.Max_Altitude) BMP280.Max_Altitude = BMP280.Barometric_Altitude;
 8003afc:	4b05      	ldr	r3, [pc, #20]	@ (8003b14 <BMP280_calculate+0x68>)
 8003afe:	8a1a      	ldrh	r2, [r3, #16]
 8003b00:	4b04      	ldr	r3, [pc, #16]	@ (8003b14 <BMP280_calculate+0x68>)
 8003b02:	8a5b      	ldrh	r3, [r3, #18]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d903      	bls.n	8003b10 <BMP280_calculate+0x64>
 8003b08:	4b02      	ldr	r3, [pc, #8]	@ (8003b14 <BMP280_calculate+0x68>)
 8003b0a:	8a1a      	ldrh	r2, [r3, #16]
 8003b0c:	4b01      	ldr	r3, [pc, #4]	@ (8003b14 <BMP280_calculate+0x68>)
 8003b0e:	825a      	strh	r2, [r3, #18]
}
 8003b10:	bf00      	nop
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	240013c0 	.word	0x240013c0
 8003b18:	240013ec 	.word	0x240013ec
 8003b1c:	240013f0 	.word	0x240013f0

08003b20 <bno055_delay>:

BNO_CurrentState_e BNO_CurrentState = Init;

IMU_t IMU;

void bno055_delay(uint8_t time) {
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	4603      	mov	r3, r0
 8003b28:	71fb      	strb	r3, [r7, #7]
	BNO_DelayCounter += time;
 8003b2a:	4b06      	ldr	r3, [pc, #24]	@ (8003b44 <bno055_delay+0x24>)
 8003b2c:	781a      	ldrb	r2, [r3, #0]
 8003b2e:	79fb      	ldrb	r3, [r7, #7]
 8003b30:	4413      	add	r3, r2
 8003b32:	b2da      	uxtb	r2, r3
 8003b34:	4b03      	ldr	r3, [pc, #12]	@ (8003b44 <bno055_delay+0x24>)
 8003b36:	701a      	strb	r2, [r3, #0]
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr
 8003b44:	240014fb 	.word	0x240014fb

08003b48 <BNO_Read>:

HAL_StatusTypeDef BNO_Read(uint8_t Address,uint8_t Size){
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	4603      	mov	r3, r0
 8003b50:	460a      	mov	r2, r1
 8003b52:	71fb      	strb	r3, [r7, #7]
 8003b54:	4613      	mov	r3, r2
 8003b56:	71bb      	strb	r3, [r7, #6]
	uint8_t ReadCommand[4] = {0xAA, 0x01, Address, Size};
 8003b58:	23aa      	movs	r3, #170	@ 0xaa
 8003b5a:	723b      	strb	r3, [r7, #8]
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	727b      	strb	r3, [r7, #9]
 8003b60:	79fb      	ldrb	r3, [r7, #7]
 8003b62:	72bb      	strb	r3, [r7, #10]
 8003b64:	79bb      	ldrb	r3, [r7, #6]
 8003b66:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef uartError;

	BNO_RxBuffer[0] = Address;
 8003b68:	4a08      	ldr	r2, [pc, #32]	@ (8003b8c <BNO_Read+0x44>)
 8003b6a:	79fb      	ldrb	r3, [r7, #7]
 8003b6c:	7013      	strb	r3, [r2, #0]

	uartError = HAL_UART_Transmit(&huart3, ReadCommand, 4,100);
 8003b6e:	f107 0108 	add.w	r1, r7, #8
 8003b72:	2364      	movs	r3, #100	@ 0x64
 8003b74:	2204      	movs	r2, #4
 8003b76:	4806      	ldr	r0, [pc, #24]	@ (8003b90 <BNO_Read+0x48>)
 8003b78:	f00a fc36 	bl	800e3e8 <HAL_UART_Transmit>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	73fb      	strb	r3, [r7, #15]
	return uartError;
 8003b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	240013f8 	.word	0x240013f8
 8003b90:	24001130 	.word	0x24001130

08003b94 <BNO_Write>:

HAL_StatusTypeDef BNO_Write(uint8_t Address,uint8_t Data){
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	460a      	mov	r2, r1
 8003b9e:	71fb      	strb	r3, [r7, #7]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	71bb      	strb	r3, [r7, #6]
	uint8_t WriteCommand[5];
	HAL_StatusTypeDef uartError;

	WriteCommand[0] = 0xAA;
 8003ba4:	23aa      	movs	r3, #170	@ 0xaa
 8003ba6:	723b      	strb	r3, [r7, #8]
	WriteCommand[1] = 0x00;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	727b      	strb	r3, [r7, #9]
	WriteCommand[2] = Address;
 8003bac:	79fb      	ldrb	r3, [r7, #7]
 8003bae:	72bb      	strb	r3, [r7, #10]
	WriteCommand[3] = 1;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	72fb      	strb	r3, [r7, #11]
	WriteCommand[4] = Data;
 8003bb4:	79bb      	ldrb	r3, [r7, #6]
 8003bb6:	733b      	strb	r3, [r7, #12]

	uartError = HAL_UART_Transmit(&huart3, WriteCommand,5,100);
 8003bb8:	f107 0108 	add.w	r1, r7, #8
 8003bbc:	2364      	movs	r3, #100	@ 0x64
 8003bbe:	2205      	movs	r2, #5
 8003bc0:	4804      	ldr	r0, [pc, #16]	@ (8003bd4 <BNO_Write+0x40>)
 8003bc2:	f00a fc11 	bl	800e3e8 <HAL_UART_Transmit>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	73fb      	strb	r3, [r7, #15]
	return uartError;
 8003bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	24001130 	.word	0x24001130

08003bd8 <BNO_Write_MB>:

HAL_StatusTypeDef BNO_Write_MB(uint8_t Address,uint8_t Size, uint8_t *pData){
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b0c4      	sub	sp, #272	@ 0x110
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003be2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003bec:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	701a      	strb	r2, [r3, #0]
 8003bf4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003bf8:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8003bfc:	460a      	mov	r2, r1
 8003bfe:	701a      	strb	r2, [r3, #0]
    uint8_t WriteCommand[255];
    HAL_StatusTypeDef uartError;

    WriteCommand[0] = 0xAA;
 8003c00:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003c04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003c08:	22aa      	movs	r2, #170	@ 0xaa
 8003c0a:	701a      	strb	r2, [r3, #0]
    WriteCommand[1] = 0x00;
 8003c0c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003c10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003c14:	2200      	movs	r2, #0
 8003c16:	705a      	strb	r2, [r3, #1]
    WriteCommand[2] = Address;
 8003c18:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003c1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003c20:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003c24:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 8003c28:	7812      	ldrb	r2, [r2, #0]
 8003c2a:	709a      	strb	r2, [r3, #2]
    WriteCommand[3] = Size;
 8003c2c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003c30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003c34:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003c38:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8003c3c:	7812      	ldrb	r2, [r2, #0]
 8003c3e:	70da      	strb	r2, [r3, #3]

    for (uint8_t n = 0; n < Size; ++n) {
 8003c40:	2300      	movs	r3, #0
 8003c42:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8003c46:	e015      	b.n	8003c74 <BNO_Write_MB+0x9c>
        WriteCommand[n + 4] = pData[n];
 8003c48:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8003c4c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003c50:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8003c54:	6812      	ldr	r2, [r2, #0]
 8003c56:	441a      	add	r2, r3
 8003c58:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	7811      	ldrb	r1, [r2, #0]
 8003c60:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003c64:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8003c68:	54d1      	strb	r1, [r2, r3]
    for (uint8_t n = 0; n < Size; ++n) {
 8003c6a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8003c6e:	3301      	adds	r3, #1
 8003c70:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8003c74:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003c78:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8003c7c:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d3e0      	bcc.n	8003c48 <BNO_Write_MB+0x70>
    }

    uartError = HAL_UART_Transmit(&huart3, WriteCommand, (Size + 4),100);
 8003c86:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003c8a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	3304      	adds	r3, #4
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	f107 010c 	add.w	r1, r7, #12
 8003c9a:	2364      	movs	r3, #100	@ 0x64
 8003c9c:	4806      	ldr	r0, [pc, #24]	@ (8003cb8 <BNO_Write_MB+0xe0>)
 8003c9e:	f00a fba3 	bl	800e3e8 <HAL_UART_Transmit>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
    return uartError;
 8003ca8:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	24001130 	.word	0x24001130

08003cbc <BNO_Page0Adress>:

void BNO_Page0Adress(void){
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
	switch (BNO_RxBuffer[0]) {
 8003cc0:	4ba6      	ldr	r3, [pc, #664]	@ (8003f5c <BNO_Page0Adress+0x2a0>)
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	2b55      	cmp	r3, #85	@ 0x55
 8003cc6:	f300 8247 	bgt.w	8004158 <BNO_Page0Adress+0x49c>
 8003cca:	2b35      	cmp	r3, #53	@ 0x35
 8003ccc:	da0a      	bge.n	8003ce4 <BNO_Page0Adress+0x28>
 8003cce:	2b08      	cmp	r3, #8
 8003cd0:	f000 814a 	beq.w	8003f68 <BNO_Page0Adress+0x2ac>
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	f300 823f 	bgt.w	8004158 <BNO_Page0Adress+0x49c>
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d04c      	beq.n	8003d78 <BNO_Page0Adress+0xbc>
 8003cde:	2b07      	cmp	r3, #7
 8003ce0:	d064      	beq.n	8003dac <BNO_Page0Adress+0xf0>
			IMU.Roll = ((float)((int16_t)((BNO_RxBuffer[24] << 8) | BNO_RxBuffer[23])))/16;

			BNO_ErrorHandler = ReadSucces;
			break;
		default:
			break;
 8003ce2:	e239      	b.n	8004158 <BNO_Page0Adress+0x49c>
	switch (BNO_RxBuffer[0]) {
 8003ce4:	3b35      	subs	r3, #53	@ 0x35
 8003ce6:	2b20      	cmp	r3, #32
 8003ce8:	f200 8236 	bhi.w	8004158 <BNO_Page0Adress+0x49c>
 8003cec:	a201      	add	r2, pc, #4	@ (adr r2, 8003cf4 <BNO_Page0Adress+0x38>)
 8003cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf2:	bf00      	nop
 8003cf4:	08003df5 	.word	0x08003df5
 8003cf8:	08004159 	.word	0x08004159
 8003cfc:	08004159 	.word	0x08004159
 8003d00:	08004159 	.word	0x08004159
 8003d04:	08003dd1 	.word	0x08003dd1
 8003d08:	08004159 	.word	0x08004159
 8003d0c:	08003dbf 	.word	0x08003dbf
 8003d10:	08004159 	.word	0x08004159
 8003d14:	08003de3 	.word	0x08003de3
 8003d18:	08004159 	.word	0x08004159
 8003d1c:	08004159 	.word	0x08004159
 8003d20:	08004159 	.word	0x08004159
 8003d24:	08004159 	.word	0x08004159
 8003d28:	08004159 	.word	0x08004159
 8003d2c:	08004159 	.word	0x08004159
 8003d30:	08004159 	.word	0x08004159
 8003d34:	08004159 	.word	0x08004159
 8003d38:	08004159 	.word	0x08004159
 8003d3c:	08004159 	.word	0x08004159
 8003d40:	08004159 	.word	0x08004159
 8003d44:	08004159 	.word	0x08004159
 8003d48:	08004159 	.word	0x08004159
 8003d4c:	08004159 	.word	0x08004159
 8003d50:	08004159 	.word	0x08004159
 8003d54:	08004159 	.word	0x08004159
 8003d58:	08004159 	.word	0x08004159
 8003d5c:	08004159 	.word	0x08004159
 8003d60:	08004159 	.word	0x08004159
 8003d64:	08004159 	.word	0x08004159
 8003d68:	08004159 	.word	0x08004159
 8003d6c:	08004159 	.word	0x08004159
 8003d70:	08004159 	.word	0x08004159
 8003d74:	08003e4d 	.word	0x08003e4d
			if(BNO_RxBuffer[1] != 160) return;
 8003d78:	4b78      	ldr	r3, [pc, #480]	@ (8003f5c <BNO_Page0Adress+0x2a0>)
 8003d7a:	785b      	ldrb	r3, [r3, #1]
 8003d7c:	2ba0      	cmp	r3, #160	@ 0xa0
 8003d7e:	f040 81ed 	bne.w	800415c <BNO_Page0Adress+0x4a0>
			IMU.ID = BNO_RxBuffer[1];
 8003d82:	4b76      	ldr	r3, [pc, #472]	@ (8003f5c <BNO_Page0Adress+0x2a0>)
 8003d84:	785a      	ldrb	r2, [r3, #1]
 8003d86:	4b76      	ldr	r3, [pc, #472]	@ (8003f60 <BNO_Page0Adress+0x2a4>)
 8003d88:	701a      	strb	r2, [r3, #0]
			IMU.ACC.ID = BNO_RxBuffer[2];
 8003d8a:	4b74      	ldr	r3, [pc, #464]	@ (8003f5c <BNO_Page0Adress+0x2a0>)
 8003d8c:	789a      	ldrb	r2, [r3, #2]
 8003d8e:	4b74      	ldr	r3, [pc, #464]	@ (8003f60 <BNO_Page0Adress+0x2a4>)
 8003d90:	711a      	strb	r2, [r3, #4]
			IMU.MAG.ID = BNO_RxBuffer[3];
 8003d92:	4b72      	ldr	r3, [pc, #456]	@ (8003f5c <BNO_Page0Adress+0x2a0>)
 8003d94:	78da      	ldrb	r2, [r3, #3]
 8003d96:	4b72      	ldr	r3, [pc, #456]	@ (8003f60 <BNO_Page0Adress+0x2a4>)
 8003d98:	751a      	strb	r2, [r3, #20]
			IMU.GYR.ID = BNO_RxBuffer[4];
 8003d9a:	4b70      	ldr	r3, [pc, #448]	@ (8003f5c <BNO_Page0Adress+0x2a0>)
 8003d9c:	791a      	ldrb	r2, [r3, #4]
 8003d9e:	4b70      	ldr	r3, [pc, #448]	@ (8003f60 <BNO_Page0Adress+0x2a4>)
 8003da0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			BNO_ErrorHandler = ReadSucces;
 8003da4:	4b6f      	ldr	r3, [pc, #444]	@ (8003f64 <BNO_Page0Adress+0x2a8>)
 8003da6:	220b      	movs	r2, #11
 8003da8:	701a      	strb	r2, [r3, #0]
			break;
 8003daa:	e1d8      	b.n	800415e <BNO_Page0Adress+0x4a2>
			IMU.Page = BNO_RxBuffer[1];
 8003dac:	4b6b      	ldr	r3, [pc, #428]	@ (8003f5c <BNO_Page0Adress+0x2a0>)
 8003dae:	785a      	ldrb	r2, [r3, #1]
 8003db0:	4b6b      	ldr	r3, [pc, #428]	@ (8003f60 <BNO_Page0Adress+0x2a4>)
 8003db2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			BNO_ErrorHandler = ReadSucces;
 8003db6:	4b6b      	ldr	r3, [pc, #428]	@ (8003f64 <BNO_Page0Adress+0x2a8>)
 8003db8:	220b      	movs	r2, #11
 8003dba:	701a      	strb	r2, [r3, #0]
			break;
 8003dbc:	e1cf      	b.n	800415e <BNO_Page0Adress+0x4a2>
			IMU.Unit_Select = BNO_RxBuffer[1];
 8003dbe:	4b67      	ldr	r3, [pc, #412]	@ (8003f5c <BNO_Page0Adress+0x2a0>)
 8003dc0:	785a      	ldrb	r2, [r3, #1]
 8003dc2:	4b67      	ldr	r3, [pc, #412]	@ (8003f60 <BNO_Page0Adress+0x2a4>)
 8003dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			BNO_ErrorHandler = ReadSucces;
 8003dc8:	4b66      	ldr	r3, [pc, #408]	@ (8003f64 <BNO_Page0Adress+0x2a8>)
 8003dca:	220b      	movs	r2, #11
 8003dcc:	701a      	strb	r2, [r3, #0]
			break;
 8003dce:	e1c6      	b.n	800415e <BNO_Page0Adress+0x4a2>
			IMU.System_Status = BNO_RxBuffer[1];
 8003dd0:	4b62      	ldr	r3, [pc, #392]	@ (8003f5c <BNO_Page0Adress+0x2a0>)
 8003dd2:	785a      	ldrb	r2, [r3, #1]
 8003dd4:	4b62      	ldr	r3, [pc, #392]	@ (8003f60 <BNO_Page0Adress+0x2a4>)
 8003dd6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
			BNO_ErrorHandler = ReadSucces;
 8003dda:	4b62      	ldr	r3, [pc, #392]	@ (8003f64 <BNO_Page0Adress+0x2a8>)
 8003ddc:	220b      	movs	r2, #11
 8003dde:	701a      	strb	r2, [r3, #0]
			break;
 8003de0:	e1bd      	b.n	800415e <BNO_Page0Adress+0x4a2>
			IMU.Op_Mode = BNO_RxBuffer[1];
 8003de2:	4b5e      	ldr	r3, [pc, #376]	@ (8003f5c <BNO_Page0Adress+0x2a0>)
 8003de4:	785a      	ldrb	r2, [r3, #1]
 8003de6:	4b5e      	ldr	r3, [pc, #376]	@ (8003f60 <BNO_Page0Adress+0x2a4>)
 8003de8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
			BNO_ErrorHandler = ReadSucces;
 8003dec:	4b5d      	ldr	r3, [pc, #372]	@ (8003f64 <BNO_Page0Adress+0x2a8>)
 8003dee:	220b      	movs	r2, #11
 8003df0:	701a      	strb	r2, [r3, #0]
			break;
 8003df2:	e1b4      	b.n	800415e <BNO_Page0Adress+0x4a2>
			IMU.CalSatus.Full = BNO_RxBuffer[1];
 8003df4:	4b59      	ldr	r3, [pc, #356]	@ (8003f5c <BNO_Page0Adress+0x2a0>)
 8003df6:	785a      	ldrb	r2, [r3, #1]
 8003df8:	4b59      	ldr	r3, [pc, #356]	@ (8003f60 <BNO_Page0Adress+0x2a4>)
 8003dfa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			IMU.CalSatus.Sys = (BNO_RxBuffer[1] >> 6) & 0x03;
 8003dfe:	4b57      	ldr	r3, [pc, #348]	@ (8003f5c <BNO_Page0Adress+0x2a0>)
 8003e00:	785b      	ldrb	r3, [r3, #1]
 8003e02:	099b      	lsrs	r3, r3, #6
 8003e04:	b2da      	uxtb	r2, r3
 8003e06:	4b56      	ldr	r3, [pc, #344]	@ (8003f60 <BNO_Page0Adress+0x2a4>)
 8003e08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			IMU.CalSatus.Gyr = (BNO_RxBuffer[1] >> 4) & 0x03;
 8003e0c:	4b53      	ldr	r3, [pc, #332]	@ (8003f5c <BNO_Page0Adress+0x2a0>)
 8003e0e:	785b      	ldrb	r3, [r3, #1]
 8003e10:	091b      	lsrs	r3, r3, #4
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	f003 0303 	and.w	r3, r3, #3
 8003e18:	b2da      	uxtb	r2, r3
 8003e1a:	4b51      	ldr	r3, [pc, #324]	@ (8003f60 <BNO_Page0Adress+0x2a4>)
 8003e1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
			IMU.CalSatus.Acc = (BNO_RxBuffer[1] >> 2) & 0x03;
 8003e20:	4b4e      	ldr	r3, [pc, #312]	@ (8003f5c <BNO_Page0Adress+0x2a0>)
 8003e22:	785b      	ldrb	r3, [r3, #1]
 8003e24:	089b      	lsrs	r3, r3, #2
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	f003 0303 	and.w	r3, r3, #3
 8003e2c:	b2da      	uxtb	r2, r3
 8003e2e:	4b4c      	ldr	r3, [pc, #304]	@ (8003f60 <BNO_Page0Adress+0x2a4>)
 8003e30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
			IMU.CalSatus.Mag = BNO_RxBuffer[1] & 0x03;
 8003e34:	4b49      	ldr	r3, [pc, #292]	@ (8003f5c <BNO_Page0Adress+0x2a0>)
 8003e36:	785b      	ldrb	r3, [r3, #1]
 8003e38:	f003 0303 	and.w	r3, r3, #3
 8003e3c:	b2da      	uxtb	r2, r3
 8003e3e:	4b48      	ldr	r3, [pc, #288]	@ (8003f60 <BNO_Page0Adress+0x2a4>)
 8003e40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			BNO_ErrorHandler = ReadSucces;
 8003e44:	4b47      	ldr	r3, [pc, #284]	@ (8003f64 <BNO_Page0Adress+0x2a8>)
 8003e46:	220b      	movs	r2, #11
 8003e48:	701a      	strb	r2, [r3, #0]
			break;
 8003e4a:	e188      	b.n	800415e <BNO_Page0Adress+0x4a2>
			IMU.Calibration_Data.offset.accel.x = (int16_t)((BNO_RxBuffer[2] << 8) | BNO_RxBuffer[1]);
 8003e4c:	4b43      	ldr	r3, [pc, #268]	@ (8003f5c <BNO_Page0Adress+0x2a0>)
 8003e4e:	789b      	ldrb	r3, [r3, #2]
 8003e50:	021b      	lsls	r3, r3, #8
 8003e52:	b21a      	sxth	r2, r3
 8003e54:	4b41      	ldr	r3, [pc, #260]	@ (8003f5c <BNO_Page0Adress+0x2a0>)
 8003e56:	785b      	ldrb	r3, [r3, #1]
 8003e58:	b21b      	sxth	r3, r3
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	b21a      	sxth	r2, r3
 8003e5e:	4b40      	ldr	r3, [pc, #256]	@ (8003f60 <BNO_Page0Adress+0x2a4>)
 8003e60:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
			IMU.Calibration_Data.offset.accel.y = (int16_t)((BNO_RxBuffer[4] << 8) | BNO_RxBuffer[3]);
 8003e64:	4b3d      	ldr	r3, [pc, #244]	@ (8003f5c <BNO_Page0Adress+0x2a0>)
 8003e66:	791b      	ldrb	r3, [r3, #4]
 8003e68:	021b      	lsls	r3, r3, #8
 8003e6a:	b21a      	sxth	r2, r3
 8003e6c:	4b3b      	ldr	r3, [pc, #236]	@ (8003f5c <BNO_Page0Adress+0x2a0>)
 8003e6e:	78db      	ldrb	r3, [r3, #3]
 8003e70:	b21b      	sxth	r3, r3
 8003e72:	4313      	orrs	r3, r2
 8003e74:	b21a      	sxth	r2, r3
 8003e76:	4b3a      	ldr	r3, [pc, #232]	@ (8003f60 <BNO_Page0Adress+0x2a4>)
 8003e78:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
			IMU.Calibration_Data.offset.accel.z = (int16_t)((BNO_RxBuffer[6] << 8) | BNO_RxBuffer[5]);
 8003e7c:	4b37      	ldr	r3, [pc, #220]	@ (8003f5c <BNO_Page0Adress+0x2a0>)
 8003e7e:	799b      	ldrb	r3, [r3, #6]
 8003e80:	021b      	lsls	r3, r3, #8
 8003e82:	b21a      	sxth	r2, r3
 8003e84:	4b35      	ldr	r3, [pc, #212]	@ (8003f5c <BNO_Page0Adress+0x2a0>)
 8003e86:	795b      	ldrb	r3, [r3, #5]
 8003e88:	b21b      	sxth	r3, r3
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	b21a      	sxth	r2, r3
 8003e8e:	4b34      	ldr	r3, [pc, #208]	@ (8003f60 <BNO_Page0Adress+0x2a4>)
 8003e90:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
			IMU.Calibration_Data.offset.mag.x = (int16_t)((BNO_RxBuffer[8] << 8) | BNO_RxBuffer[7]);
 8003e94:	4b31      	ldr	r3, [pc, #196]	@ (8003f5c <BNO_Page0Adress+0x2a0>)
 8003e96:	7a1b      	ldrb	r3, [r3, #8]
 8003e98:	021b      	lsls	r3, r3, #8
 8003e9a:	b21a      	sxth	r2, r3
 8003e9c:	4b2f      	ldr	r3, [pc, #188]	@ (8003f5c <BNO_Page0Adress+0x2a0>)
 8003e9e:	79db      	ldrb	r3, [r3, #7]
 8003ea0:	b21b      	sxth	r3, r3
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	b21a      	sxth	r2, r3
 8003ea6:	4b2e      	ldr	r3, [pc, #184]	@ (8003f60 <BNO_Page0Adress+0x2a4>)
 8003ea8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
			IMU.Calibration_Data.offset.mag.y = (int16_t)((BNO_RxBuffer[10] << 8) | BNO_RxBuffer[9]);
 8003eac:	4b2b      	ldr	r3, [pc, #172]	@ (8003f5c <BNO_Page0Adress+0x2a0>)
 8003eae:	7a9b      	ldrb	r3, [r3, #10]
 8003eb0:	021b      	lsls	r3, r3, #8
 8003eb2:	b21a      	sxth	r2, r3
 8003eb4:	4b29      	ldr	r3, [pc, #164]	@ (8003f5c <BNO_Page0Adress+0x2a0>)
 8003eb6:	7a5b      	ldrb	r3, [r3, #9]
 8003eb8:	b21b      	sxth	r3, r3
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	b21a      	sxth	r2, r3
 8003ebe:	4b28      	ldr	r3, [pc, #160]	@ (8003f60 <BNO_Page0Adress+0x2a4>)
 8003ec0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
			IMU.Calibration_Data.offset.mag.z = (int16_t)((BNO_RxBuffer[12] << 8) | BNO_RxBuffer[11]);
 8003ec4:	4b25      	ldr	r3, [pc, #148]	@ (8003f5c <BNO_Page0Adress+0x2a0>)
 8003ec6:	7b1b      	ldrb	r3, [r3, #12]
 8003ec8:	021b      	lsls	r3, r3, #8
 8003eca:	b21a      	sxth	r2, r3
 8003ecc:	4b23      	ldr	r3, [pc, #140]	@ (8003f5c <BNO_Page0Adress+0x2a0>)
 8003ece:	7adb      	ldrb	r3, [r3, #11]
 8003ed0:	b21b      	sxth	r3, r3
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	b21a      	sxth	r2, r3
 8003ed6:	4b22      	ldr	r3, [pc, #136]	@ (8003f60 <BNO_Page0Adress+0x2a4>)
 8003ed8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
			IMU.Calibration_Data.offset.gyro.x = (int16_t)((BNO_RxBuffer[14] << 8) | BNO_RxBuffer[13]);
 8003edc:	4b1f      	ldr	r3, [pc, #124]	@ (8003f5c <BNO_Page0Adress+0x2a0>)
 8003ede:	7b9b      	ldrb	r3, [r3, #14]
 8003ee0:	021b      	lsls	r3, r3, #8
 8003ee2:	b21a      	sxth	r2, r3
 8003ee4:	4b1d      	ldr	r3, [pc, #116]	@ (8003f5c <BNO_Page0Adress+0x2a0>)
 8003ee6:	7b5b      	ldrb	r3, [r3, #13]
 8003ee8:	b21b      	sxth	r3, r3
 8003eea:	4313      	orrs	r3, r2
 8003eec:	b21a      	sxth	r2, r3
 8003eee:	4b1c      	ldr	r3, [pc, #112]	@ (8003f60 <BNO_Page0Adress+0x2a4>)
 8003ef0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
			IMU.Calibration_Data.offset.gyro.y = (int16_t)((BNO_RxBuffer[16] << 8) | BNO_RxBuffer[15]);
 8003ef4:	4b19      	ldr	r3, [pc, #100]	@ (8003f5c <BNO_Page0Adress+0x2a0>)
 8003ef6:	7c1b      	ldrb	r3, [r3, #16]
 8003ef8:	021b      	lsls	r3, r3, #8
 8003efa:	b21a      	sxth	r2, r3
 8003efc:	4b17      	ldr	r3, [pc, #92]	@ (8003f5c <BNO_Page0Adress+0x2a0>)
 8003efe:	7bdb      	ldrb	r3, [r3, #15]
 8003f00:	b21b      	sxth	r3, r3
 8003f02:	4313      	orrs	r3, r2
 8003f04:	b21a      	sxth	r2, r3
 8003f06:	4b16      	ldr	r3, [pc, #88]	@ (8003f60 <BNO_Page0Adress+0x2a4>)
 8003f08:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
			IMU.Calibration_Data.offset.gyro.z = (int16_t)((BNO_RxBuffer[18] << 8) | BNO_RxBuffer[17]);
 8003f0c:	4b13      	ldr	r3, [pc, #76]	@ (8003f5c <BNO_Page0Adress+0x2a0>)
 8003f0e:	7c9b      	ldrb	r3, [r3, #18]
 8003f10:	021b      	lsls	r3, r3, #8
 8003f12:	b21a      	sxth	r2, r3
 8003f14:	4b11      	ldr	r3, [pc, #68]	@ (8003f5c <BNO_Page0Adress+0x2a0>)
 8003f16:	7c5b      	ldrb	r3, [r3, #17]
 8003f18:	b21b      	sxth	r3, r3
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	b21a      	sxth	r2, r3
 8003f1e:	4b10      	ldr	r3, [pc, #64]	@ (8003f60 <BNO_Page0Adress+0x2a4>)
 8003f20:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
			IMU.Calibration_Data.radius.accel = (uint16_t)((BNO_RxBuffer[20] << 8) | BNO_RxBuffer[19]);
 8003f24:	4b0d      	ldr	r3, [pc, #52]	@ (8003f5c <BNO_Page0Adress+0x2a0>)
 8003f26:	7d1b      	ldrb	r3, [r3, #20]
 8003f28:	021b      	lsls	r3, r3, #8
 8003f2a:	b21a      	sxth	r2, r3
 8003f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003f5c <BNO_Page0Adress+0x2a0>)
 8003f2e:	7cdb      	ldrb	r3, [r3, #19]
 8003f30:	b21b      	sxth	r3, r3
 8003f32:	4313      	orrs	r3, r2
 8003f34:	b21b      	sxth	r3, r3
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	4b09      	ldr	r3, [pc, #36]	@ (8003f60 <BNO_Page0Adress+0x2a4>)
 8003f3a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
			IMU.Calibration_Data.radius.mag   = (uint16_t)((BNO_RxBuffer[22] << 8) | BNO_RxBuffer[21]);
 8003f3e:	4b07      	ldr	r3, [pc, #28]	@ (8003f5c <BNO_Page0Adress+0x2a0>)
 8003f40:	7d9b      	ldrb	r3, [r3, #22]
 8003f42:	021b      	lsls	r3, r3, #8
 8003f44:	b21a      	sxth	r2, r3
 8003f46:	4b05      	ldr	r3, [pc, #20]	@ (8003f5c <BNO_Page0Adress+0x2a0>)
 8003f48:	7d5b      	ldrb	r3, [r3, #21]
 8003f4a:	b21b      	sxth	r3, r3
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	b21b      	sxth	r3, r3
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	4b03      	ldr	r3, [pc, #12]	@ (8003f60 <BNO_Page0Adress+0x2a4>)
 8003f54:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
			break;
 8003f58:	e101      	b.n	800415e <BNO_Page0Adress+0x4a2>
 8003f5a:	bf00      	nop
 8003f5c:	240013f8 	.word	0x240013f8
 8003f60:	24001500 	.word	0x24001500
 8003f64:	240014f9 	.word	0x240014f9
			IMU.ACC.x = ((float)((int16_t)((BNO_RxBuffer[2] << 8) | BNO_RxBuffer[1])))/100;
 8003f68:	4b7f      	ldr	r3, [pc, #508]	@ (8004168 <BNO_Page0Adress+0x4ac>)
 8003f6a:	789b      	ldrb	r3, [r3, #2]
 8003f6c:	021b      	lsls	r3, r3, #8
 8003f6e:	b21a      	sxth	r2, r3
 8003f70:	4b7d      	ldr	r3, [pc, #500]	@ (8004168 <BNO_Page0Adress+0x4ac>)
 8003f72:	785b      	ldrb	r3, [r3, #1]
 8003f74:	b21b      	sxth	r3, r3
 8003f76:	4313      	orrs	r3, r2
 8003f78:	b21b      	sxth	r3, r3
 8003f7a:	ee07 3a90 	vmov	s15, r3
 8003f7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f82:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 800416c <BNO_Page0Adress+0x4b0>
 8003f86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f8a:	4b79      	ldr	r3, [pc, #484]	@ (8004170 <BNO_Page0Adress+0x4b4>)
 8003f8c:	edc3 7a02 	vstr	s15, [r3, #8]
			IMU.ACC.y = ((float)((int16_t)((BNO_RxBuffer[4] << 8) | BNO_RxBuffer[3])))/100;
 8003f90:	4b75      	ldr	r3, [pc, #468]	@ (8004168 <BNO_Page0Adress+0x4ac>)
 8003f92:	791b      	ldrb	r3, [r3, #4]
 8003f94:	021b      	lsls	r3, r3, #8
 8003f96:	b21a      	sxth	r2, r3
 8003f98:	4b73      	ldr	r3, [pc, #460]	@ (8004168 <BNO_Page0Adress+0x4ac>)
 8003f9a:	78db      	ldrb	r3, [r3, #3]
 8003f9c:	b21b      	sxth	r3, r3
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	b21b      	sxth	r3, r3
 8003fa2:	ee07 3a90 	vmov	s15, r3
 8003fa6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003faa:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800416c <BNO_Page0Adress+0x4b0>
 8003fae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fb2:	4b6f      	ldr	r3, [pc, #444]	@ (8004170 <BNO_Page0Adress+0x4b4>)
 8003fb4:	edc3 7a03 	vstr	s15, [r3, #12]
			IMU.ACC.z = ((float)((int16_t)((BNO_RxBuffer[6] << 8) | BNO_RxBuffer[5])))/100;
 8003fb8:	4b6b      	ldr	r3, [pc, #428]	@ (8004168 <BNO_Page0Adress+0x4ac>)
 8003fba:	799b      	ldrb	r3, [r3, #6]
 8003fbc:	021b      	lsls	r3, r3, #8
 8003fbe:	b21a      	sxth	r2, r3
 8003fc0:	4b69      	ldr	r3, [pc, #420]	@ (8004168 <BNO_Page0Adress+0x4ac>)
 8003fc2:	795b      	ldrb	r3, [r3, #5]
 8003fc4:	b21b      	sxth	r3, r3
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	b21b      	sxth	r3, r3
 8003fca:	ee07 3a90 	vmov	s15, r3
 8003fce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fd2:	eddf 6a66 	vldr	s13, [pc, #408]	@ 800416c <BNO_Page0Adress+0x4b0>
 8003fd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fda:	4b65      	ldr	r3, [pc, #404]	@ (8004170 <BNO_Page0Adress+0x4b4>)
 8003fdc:	edc3 7a04 	vstr	s15, [r3, #16]
			IMU.MAG.x = ((float)((int16_t)((BNO_RxBuffer[8] << 8) | BNO_RxBuffer[7])))/16;
 8003fe0:	4b61      	ldr	r3, [pc, #388]	@ (8004168 <BNO_Page0Adress+0x4ac>)
 8003fe2:	7a1b      	ldrb	r3, [r3, #8]
 8003fe4:	021b      	lsls	r3, r3, #8
 8003fe6:	b21a      	sxth	r2, r3
 8003fe8:	4b5f      	ldr	r3, [pc, #380]	@ (8004168 <BNO_Page0Adress+0x4ac>)
 8003fea:	79db      	ldrb	r3, [r3, #7]
 8003fec:	b21b      	sxth	r3, r3
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	b21b      	sxth	r3, r3
 8003ff2:	ee07 3a90 	vmov	s15, r3
 8003ff6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ffa:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8003ffe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004002:	4b5b      	ldr	r3, [pc, #364]	@ (8004170 <BNO_Page0Adress+0x4b4>)
 8004004:	edc3 7a06 	vstr	s15, [r3, #24]
			IMU.MAG.y = ((float)((int16_t)((BNO_RxBuffer[10] << 8) | BNO_RxBuffer[9])))/16;
 8004008:	4b57      	ldr	r3, [pc, #348]	@ (8004168 <BNO_Page0Adress+0x4ac>)
 800400a:	7a9b      	ldrb	r3, [r3, #10]
 800400c:	021b      	lsls	r3, r3, #8
 800400e:	b21a      	sxth	r2, r3
 8004010:	4b55      	ldr	r3, [pc, #340]	@ (8004168 <BNO_Page0Adress+0x4ac>)
 8004012:	7a5b      	ldrb	r3, [r3, #9]
 8004014:	b21b      	sxth	r3, r3
 8004016:	4313      	orrs	r3, r2
 8004018:	b21b      	sxth	r3, r3
 800401a:	ee07 3a90 	vmov	s15, r3
 800401e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004022:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8004026:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800402a:	4b51      	ldr	r3, [pc, #324]	@ (8004170 <BNO_Page0Adress+0x4b4>)
 800402c:	edc3 7a07 	vstr	s15, [r3, #28]
			IMU.MAG.z = ((float)((int16_t)((BNO_RxBuffer[12] << 8) | BNO_RxBuffer[11])))/16;
 8004030:	4b4d      	ldr	r3, [pc, #308]	@ (8004168 <BNO_Page0Adress+0x4ac>)
 8004032:	7b1b      	ldrb	r3, [r3, #12]
 8004034:	021b      	lsls	r3, r3, #8
 8004036:	b21a      	sxth	r2, r3
 8004038:	4b4b      	ldr	r3, [pc, #300]	@ (8004168 <BNO_Page0Adress+0x4ac>)
 800403a:	7adb      	ldrb	r3, [r3, #11]
 800403c:	b21b      	sxth	r3, r3
 800403e:	4313      	orrs	r3, r2
 8004040:	b21b      	sxth	r3, r3
 8004042:	ee07 3a90 	vmov	s15, r3
 8004046:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800404a:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800404e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004052:	4b47      	ldr	r3, [pc, #284]	@ (8004170 <BNO_Page0Adress+0x4b4>)
 8004054:	edc3 7a08 	vstr	s15, [r3, #32]
			IMU.GYR.x = ((float)((int16_t)((BNO_RxBuffer[14] << 8) | BNO_RxBuffer[13])))/16;
 8004058:	4b43      	ldr	r3, [pc, #268]	@ (8004168 <BNO_Page0Adress+0x4ac>)
 800405a:	7b9b      	ldrb	r3, [r3, #14]
 800405c:	021b      	lsls	r3, r3, #8
 800405e:	b21a      	sxth	r2, r3
 8004060:	4b41      	ldr	r3, [pc, #260]	@ (8004168 <BNO_Page0Adress+0x4ac>)
 8004062:	7b5b      	ldrb	r3, [r3, #13]
 8004064:	b21b      	sxth	r3, r3
 8004066:	4313      	orrs	r3, r2
 8004068:	b21b      	sxth	r3, r3
 800406a:	ee07 3a90 	vmov	s15, r3
 800406e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004072:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8004076:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800407a:	4b3d      	ldr	r3, [pc, #244]	@ (8004170 <BNO_Page0Adress+0x4b4>)
 800407c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
			IMU.GYR.y = -((float)((int16_t)((BNO_RxBuffer[16] << 8) | BNO_RxBuffer[15])))/16;
 8004080:	4b39      	ldr	r3, [pc, #228]	@ (8004168 <BNO_Page0Adress+0x4ac>)
 8004082:	7c1b      	ldrb	r3, [r3, #16]
 8004084:	021b      	lsls	r3, r3, #8
 8004086:	b21a      	sxth	r2, r3
 8004088:	4b37      	ldr	r3, [pc, #220]	@ (8004168 <BNO_Page0Adress+0x4ac>)
 800408a:	7bdb      	ldrb	r3, [r3, #15]
 800408c:	b21b      	sxth	r3, r3
 800408e:	4313      	orrs	r3, r2
 8004090:	b21b      	sxth	r3, r3
 8004092:	ee07 3a90 	vmov	s15, r3
 8004096:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800409a:	eeb1 7a67 	vneg.f32	s14, s15
 800409e:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80040a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040a6:	4b32      	ldr	r3, [pc, #200]	@ (8004170 <BNO_Page0Adress+0x4b4>)
 80040a8:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
			IMU.GYR.z = -((float)((int16_t)((BNO_RxBuffer[18] << 8) | BNO_RxBuffer[17])))/16;
 80040ac:	4b2e      	ldr	r3, [pc, #184]	@ (8004168 <BNO_Page0Adress+0x4ac>)
 80040ae:	7c9b      	ldrb	r3, [r3, #18]
 80040b0:	021b      	lsls	r3, r3, #8
 80040b2:	b21a      	sxth	r2, r3
 80040b4:	4b2c      	ldr	r3, [pc, #176]	@ (8004168 <BNO_Page0Adress+0x4ac>)
 80040b6:	7c5b      	ldrb	r3, [r3, #17]
 80040b8:	b21b      	sxth	r3, r3
 80040ba:	4313      	orrs	r3, r2
 80040bc:	b21b      	sxth	r3, r3
 80040be:	ee07 3a90 	vmov	s15, r3
 80040c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040c6:	eeb1 7a67 	vneg.f32	s14, s15
 80040ca:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80040ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040d2:	4b27      	ldr	r3, [pc, #156]	@ (8004170 <BNO_Page0Adress+0x4b4>)
 80040d4:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
			IMU.Heading = ((float)((int16_t)((BNO_RxBuffer[20] << 8) | BNO_RxBuffer[19])))/16;
 80040d8:	4b23      	ldr	r3, [pc, #140]	@ (8004168 <BNO_Page0Adress+0x4ac>)
 80040da:	7d1b      	ldrb	r3, [r3, #20]
 80040dc:	021b      	lsls	r3, r3, #8
 80040de:	b21a      	sxth	r2, r3
 80040e0:	4b21      	ldr	r3, [pc, #132]	@ (8004168 <BNO_Page0Adress+0x4ac>)
 80040e2:	7cdb      	ldrb	r3, [r3, #19]
 80040e4:	b21b      	sxth	r3, r3
 80040e6:	4313      	orrs	r3, r2
 80040e8:	b21b      	sxth	r3, r3
 80040ea:	ee07 3a90 	vmov	s15, r3
 80040ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040f2:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80040f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040fa:	4b1d      	ldr	r3, [pc, #116]	@ (8004170 <BNO_Page0Adress+0x4b4>)
 80040fc:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
			IMU.Pitch = ((float)((int16_t)((BNO_RxBuffer[22] << 8) | BNO_RxBuffer[21])))/16;
 8004100:	4b19      	ldr	r3, [pc, #100]	@ (8004168 <BNO_Page0Adress+0x4ac>)
 8004102:	7d9b      	ldrb	r3, [r3, #22]
 8004104:	021b      	lsls	r3, r3, #8
 8004106:	b21a      	sxth	r2, r3
 8004108:	4b17      	ldr	r3, [pc, #92]	@ (8004168 <BNO_Page0Adress+0x4ac>)
 800410a:	7d5b      	ldrb	r3, [r3, #21]
 800410c:	b21b      	sxth	r3, r3
 800410e:	4313      	orrs	r3, r2
 8004110:	b21b      	sxth	r3, r3
 8004112:	ee07 3a90 	vmov	s15, r3
 8004116:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800411a:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800411e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004122:	4b13      	ldr	r3, [pc, #76]	@ (8004170 <BNO_Page0Adress+0x4b4>)
 8004124:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
			IMU.Roll = ((float)((int16_t)((BNO_RxBuffer[24] << 8) | BNO_RxBuffer[23])))/16;
 8004128:	4b0f      	ldr	r3, [pc, #60]	@ (8004168 <BNO_Page0Adress+0x4ac>)
 800412a:	7e1b      	ldrb	r3, [r3, #24]
 800412c:	021b      	lsls	r3, r3, #8
 800412e:	b21a      	sxth	r2, r3
 8004130:	4b0d      	ldr	r3, [pc, #52]	@ (8004168 <BNO_Page0Adress+0x4ac>)
 8004132:	7ddb      	ldrb	r3, [r3, #23]
 8004134:	b21b      	sxth	r3, r3
 8004136:	4313      	orrs	r3, r2
 8004138:	b21b      	sxth	r3, r3
 800413a:	ee07 3a90 	vmov	s15, r3
 800413e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004142:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8004146:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800414a:	4b09      	ldr	r3, [pc, #36]	@ (8004170 <BNO_Page0Adress+0x4b4>)
 800414c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
			BNO_ErrorHandler = ReadSucces;
 8004150:	4b08      	ldr	r3, [pc, #32]	@ (8004174 <BNO_Page0Adress+0x4b8>)
 8004152:	220b      	movs	r2, #11
 8004154:	701a      	strb	r2, [r3, #0]
			break;
 8004156:	e002      	b.n	800415e <BNO_Page0Adress+0x4a2>
			break;
 8004158:	bf00      	nop
 800415a:	e000      	b.n	800415e <BNO_Page0Adress+0x4a2>
			if(BNO_RxBuffer[1] != 160) return;
 800415c:	bf00      	nop
	}
}
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	240013f8 	.word	0x240013f8
 800416c:	42c80000 	.word	0x42c80000
 8004170:	24001500 	.word	0x24001500
 8004174:	240014f9 	.word	0x240014f9

08004178 <BNO_Page1Adress>:

void BNO_Page1Adress(void){
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
	switch (BNO_RxBuffer[0]) {
 800417c:	4b09      	ldr	r3, [pc, #36]	@ (80041a4 <BNO_Page1Adress+0x2c>)
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	2b07      	cmp	r3, #7
 8004182:	d108      	bne.n	8004196 <BNO_Page1Adress+0x1e>
		case BNO055_PAGE_ID:
			IMU.Page = BNO_RxBuffer[1];
 8004184:	4b07      	ldr	r3, [pc, #28]	@ (80041a4 <BNO_Page1Adress+0x2c>)
 8004186:	785a      	ldrb	r2, [r3, #1]
 8004188:	4b07      	ldr	r3, [pc, #28]	@ (80041a8 <BNO_Page1Adress+0x30>)
 800418a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			BNO_ErrorHandler = ReadSucces;
 800418e:	4b07      	ldr	r3, [pc, #28]	@ (80041ac <BNO_Page1Adress+0x34>)
 8004190:	220b      	movs	r2, #11
 8004192:	701a      	strb	r2, [r3, #0]
			break;
 8004194:	e000      	b.n	8004198 <BNO_Page1Adress+0x20>

		default:
			break;
 8004196:	bf00      	nop
	}
}
 8004198:	bf00      	nop
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	240013f8 	.word	0x240013f8
 80041a8:	24001500 	.word	0x24001500
 80041ac:	240014f9 	.word	0x240014f9

080041b0 <BNO_EmptyingBuffer>:

void BNO_EmptyingBuffer(void){
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
	switch (IMU.Page) {
 80041b4:	4b0a      	ldr	r3, [pc, #40]	@ (80041e0 <BNO_EmptyingBuffer+0x30>)
 80041b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d002      	beq.n	80041c4 <BNO_EmptyingBuffer+0x14>
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d003      	beq.n	80041ca <BNO_EmptyingBuffer+0x1a>
			break;
		case 1:
			BNO_Page1Adress();
			break;
		default:
			break;
 80041c2:	e005      	b.n	80041d0 <BNO_EmptyingBuffer+0x20>
			BNO_Page0Adress();
 80041c4:	f7ff fd7a 	bl	8003cbc <BNO_Page0Adress>
			break;
 80041c8:	e002      	b.n	80041d0 <BNO_EmptyingBuffer+0x20>
			BNO_Page1Adress();
 80041ca:	f7ff ffd5 	bl	8004178 <BNO_Page1Adress>
			break;
 80041ce:	bf00      	nop
	}
	memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 80041d0:	22ff      	movs	r2, #255	@ 0xff
 80041d2:	2100      	movs	r1, #0
 80041d4:	4803      	ldr	r0, [pc, #12]	@ (80041e4 <BNO_EmptyingBuffer+0x34>)
 80041d6:	f012 fb56 	bl	8016886 <memset>
}
 80041da:	bf00      	nop
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	24001500 	.word	0x24001500
 80041e4:	240013f8 	.word	0x240013f8

080041e8 <BNO_SWReset>:
		default:
			break;
	}
}

void BNO_SWReset(void){
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
	BNO_Write(BNO055_SYS_TRIGGER,0x20);
 80041ec:	2120      	movs	r1, #32
 80041ee:	203f      	movs	r0, #63	@ 0x3f
 80041f0:	f7ff fcd0 	bl	8003b94 <BNO_Write>
	bno055_delay(70);
 80041f4:	2046      	movs	r0, #70	@ 0x46
 80041f6:	f7ff fc93 	bl	8003b20 <bno055_delay>
	IMU.ID = 0x00;
 80041fa:	4b04      	ldr	r3, [pc, #16]	@ (800420c <BNO_SWReset+0x24>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	701a      	strb	r2, [r3, #0]
	BNO_CurrentState = Configuration;
 8004200:	4b03      	ldr	r3, [pc, #12]	@ (8004210 <BNO_SWReset+0x28>)
 8004202:	2201      	movs	r2, #1
 8004204:	701a      	strb	r2, [r3, #0]
}
 8004206:	bf00      	nop
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	24001500 	.word	0x24001500
 8004210:	240014fc 	.word	0x240014fc

08004214 <bno055_setOperationMode>:

void bno055_setOperationMode(bno055_opmode_t mode) {
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	4603      	mov	r3, r0
 800421c:	71fb      	strb	r3, [r7, #7]
  BNO_Write(BNO055_OPR_MODE, mode);
 800421e:	79fb      	ldrb	r3, [r7, #7]
 8004220:	4619      	mov	r1, r3
 8004222:	203d      	movs	r0, #61	@ 0x3d
 8004224:	f7ff fcb6 	bl	8003b94 <BNO_Write>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8004228:	79fb      	ldrb	r3, [r7, #7]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d103      	bne.n	8004236 <bno055_setOperationMode+0x22>
    bno055_delay(5);
 800422e:	2005      	movs	r0, #5
 8004230:	f7ff fc76 	bl	8003b20 <bno055_delay>
  } else {
    bno055_delay(3);
  }
}
 8004234:	e002      	b.n	800423c <bno055_setOperationMode+0x28>
    bno055_delay(3);
 8004236:	2003      	movs	r0, #3
 8004238:	f7ff fc72 	bl	8003b20 <bno055_delay>
}
 800423c:	bf00      	nop
 800423e:	3708      	adds	r7, #8
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8004248:	2000      	movs	r0, #0
 800424a:	f7ff ffe3 	bl	8004214 <bno055_setOperationMode>
}
 800424e:	bf00      	nop
 8004250:	bd80      	pop	{r7, pc}

08004252 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8004252:	b580      	push	{r7, lr}
 8004254:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8004256:	200c      	movs	r0, #12
 8004258:	f7ff ffdc 	bl	8004214 <bno055_setOperationMode>
}
 800425c:	bf00      	nop
 800425e:	bd80      	pop	{r7, pc}

08004260 <BNO_GetCalibrationData>:

void BNO_GetCalibrationData(void){
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
	BNO_Read(BNO055_ACC_OFFSET_X_LSB, 22);
 8004264:	2116      	movs	r1, #22
 8004266:	2055      	movs	r0, #85	@ 0x55
 8004268:	f7ff fc6e 	bl	8003b48 <BNO_Read>
}
 800426c:	bf00      	nop
 800426e:	bd80      	pop	{r7, pc}

08004270 <BNO_SetCalibrationData>:

void BNO_SetCalibrationData(void){
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
	uint8_t buffer[22];

	  memcpy(&IMU.Calibration_Data.offset.accel, buffer, 6);
 8004276:	463b      	mov	r3, r7
 8004278:	2206      	movs	r2, #6
 800427a:	4619      	mov	r1, r3
 800427c:	4814      	ldr	r0, [pc, #80]	@ (80042d0 <BNO_SetCalibrationData+0x60>)
 800427e:	f012 fb9c 	bl	80169ba <memcpy>
	  memcpy(&IMU.Calibration_Data.offset.mag, buffer + 6, 6);
 8004282:	463b      	mov	r3, r7
 8004284:	3306      	adds	r3, #6
 8004286:	2206      	movs	r2, #6
 8004288:	4619      	mov	r1, r3
 800428a:	4812      	ldr	r0, [pc, #72]	@ (80042d4 <BNO_SetCalibrationData+0x64>)
 800428c:	f012 fb95 	bl	80169ba <memcpy>
	  memcpy(&IMU.Calibration_Data.offset.gyro, buffer + 12, 6);
 8004290:	463b      	mov	r3, r7
 8004292:	330c      	adds	r3, #12
 8004294:	2206      	movs	r2, #6
 8004296:	4619      	mov	r1, r3
 8004298:	480f      	ldr	r0, [pc, #60]	@ (80042d8 <BNO_SetCalibrationData+0x68>)
 800429a:	f012 fb8e 	bl	80169ba <memcpy>
	  memcpy(&IMU.Calibration_Data.radius.accel, buffer + 18, 2);
 800429e:	463b      	mov	r3, r7
 80042a0:	3312      	adds	r3, #18
 80042a2:	881b      	ldrh	r3, [r3, #0]
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	4b0d      	ldr	r3, [pc, #52]	@ (80042dc <BNO_SetCalibrationData+0x6c>)
 80042a8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
	  memcpy(&IMU.Calibration_Data.radius.mag, buffer + 20, 2);
 80042ac:	463b      	mov	r3, r7
 80042ae:	3314      	adds	r3, #20
 80042b0:	881b      	ldrh	r3, [r3, #0]
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	4b09      	ldr	r3, [pc, #36]	@ (80042dc <BNO_SetCalibrationData+0x6c>)
 80042b6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

	BNO_Write_MB(BNO055_ACC_OFFSET_X_LSB, 22, buffer);
 80042ba:	463b      	mov	r3, r7
 80042bc:	461a      	mov	r2, r3
 80042be:	2116      	movs	r1, #22
 80042c0:	2055      	movs	r0, #85	@ 0x55
 80042c2:	f7ff fc89 	bl	8003bd8 <BNO_Write_MB>
}
 80042c6:	bf00      	nop
 80042c8:	3718      	adds	r7, #24
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	24001556 	.word	0x24001556
 80042d4:	24001550 	.word	0x24001550
 80042d8:	2400154a 	.word	0x2400154a
 80042dc:	24001500 	.word	0x24001500

080042e0 <BNO_Init>:

void BNO_Init(void){
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, SET);
 80042e4:	2201      	movs	r2, #1
 80042e6:	2104      	movs	r1, #4
 80042e8:	4808      	ldr	r0, [pc, #32]	@ (800430c <BNO_Init+0x2c>)
 80042ea:	f004 fe57 	bl	8008f9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IMU_BOOT_GPIO_Port, IMU_BOOT_Pin, SET);
 80042ee:	2201      	movs	r2, #1
 80042f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80042f4:	4806      	ldr	r0, [pc, #24]	@ (8004310 <BNO_Init+0x30>)
 80042f6:	f004 fe51 	bl	8008f9c <HAL_GPIO_WritePin>

	bno055_delay(100);
 80042fa:	2064      	movs	r0, #100	@ 0x64
 80042fc:	f7ff fc10 	bl	8003b20 <bno055_delay>

	BNO_CurrentState = Reset;
 8004300:	4b04      	ldr	r3, [pc, #16]	@ (8004314 <BNO_Init+0x34>)
 8004302:	2204      	movs	r2, #4
 8004304:	701a      	strb	r2, [r3, #0]
}
 8004306:	bf00      	nop
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	58020c00 	.word	0x58020c00
 8004310:	58020400 	.word	0x58020400
 8004314:	240014fc 	.word	0x240014fc

08004318 <BNO_Config>:

void BNO_Config(void){
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
	static uint8_t ConfigFlag = 0;

	switch (ConfigFlag) {
 800431c:	4b20      	ldr	r3, [pc, #128]	@ (80043a0 <BNO_Config+0x88>)
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	2b03      	cmp	r3, #3
 8004322:	d839      	bhi.n	8004398 <BNO_Config+0x80>
 8004324:	a201      	add	r2, pc, #4	@ (adr r2, 800432c <BNO_Config+0x14>)
 8004326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432a:	bf00      	nop
 800432c:	0800433d 	.word	0x0800433d
 8004330:	0800434d 	.word	0x0800434d
 8004334:	08004359 	.word	0x08004359
 8004338:	0800437b 	.word	0x0800437b
		case 0:
			BNO_Write(BNO055_SYS_TRIGGER,0x00);
 800433c:	2100      	movs	r1, #0
 800433e:	203f      	movs	r0, #63	@ 0x3f
 8004340:	f7ff fc28 	bl	8003b94 <BNO_Write>
			ConfigFlag = 1;
 8004344:	4b16      	ldr	r3, [pc, #88]	@ (80043a0 <BNO_Config+0x88>)
 8004346:	2201      	movs	r2, #1
 8004348:	701a      	strb	r2, [r3, #0]
			break;
 800434a:	e026      	b.n	800439a <BNO_Config+0x82>
		case 1:
			bno055_setOperationModeConfig();
 800434c:	f7ff ff7a 	bl	8004244 <bno055_setOperationModeConfig>
			ConfigFlag = 2;
 8004350:	4b13      	ldr	r3, [pc, #76]	@ (80043a0 <BNO_Config+0x88>)
 8004352:	2202      	movs	r2, #2
 8004354:	701a      	strb	r2, [r3, #0]
			break;
 8004356:	e020      	b.n	800439a <BNO_Config+0x82>
		case 2:
			BNO_Read(BNO055_OPR_MODE, 1);
 8004358:	2101      	movs	r1, #1
 800435a:	203d      	movs	r0, #61	@ 0x3d
 800435c:	f7ff fbf4 	bl	8003b48 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_CONFIG){
 8004360:	4b10      	ldr	r3, [pc, #64]	@ (80043a4 <BNO_Config+0x8c>)
 8004362:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8004366:	2b00      	cmp	r3, #0
 8004368:	d103      	bne.n	8004372 <BNO_Config+0x5a>
				ConfigFlag = 3;
 800436a:	4b0d      	ldr	r3, [pc, #52]	@ (80043a0 <BNO_Config+0x88>)
 800436c:	2203      	movs	r2, #3
 800436e:	701a      	strb	r2, [r3, #0]
			}
			else ConfigFlag = 1;
			break;
 8004370:	e013      	b.n	800439a <BNO_Config+0x82>
			else ConfigFlag = 1;
 8004372:	4b0b      	ldr	r3, [pc, #44]	@ (80043a0 <BNO_Config+0x88>)
 8004374:	2201      	movs	r2, #1
 8004376:	701a      	strb	r2, [r3, #0]
			break;
 8004378:	e00f      	b.n	800439a <BNO_Config+0x82>
		case 3:
			BNO_Read(BNO055_CHIP_ID, 4);
 800437a:	2104      	movs	r1, #4
 800437c:	2000      	movs	r0, #0
 800437e:	f7ff fbe3 	bl	8003b48 <BNO_Read>

			if(IMU.ID == BNO055_ID){
 8004382:	4b08      	ldr	r3, [pc, #32]	@ (80043a4 <BNO_Config+0x8c>)
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	2ba0      	cmp	r3, #160	@ 0xa0
 8004388:	d102      	bne.n	8004390 <BNO_Config+0x78>
				BNO_CurrentState = Calibration;
 800438a:	4b07      	ldr	r3, [pc, #28]	@ (80043a8 <BNO_Config+0x90>)
 800438c:	2202      	movs	r2, #2
 800438e:	701a      	strb	r2, [r3, #0]
			}
			ConfigFlag = 0;
 8004390:	4b03      	ldr	r3, [pc, #12]	@ (80043a0 <BNO_Config+0x88>)
 8004392:	2200      	movs	r2, #0
 8004394:	701a      	strb	r2, [r3, #0]
			break;
 8004396:	e000      	b.n	800439a <BNO_Config+0x82>
		default:
			break;
 8004398:	bf00      	nop
	}

}
 800439a:	bf00      	nop
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	24001560 	.word	0x24001560
 80043a4:	24001500 	.word	0x24001500
 80043a8:	240014fc 	.word	0x240014fc

080043ac <BNO_CalibrationStatus>:

void BNO_CalibrationStatus(void){
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0
	static uint8_t CalibrationFlag = 0;
	static uint8_t Calibrated = 1;

	switch (CalibrationFlag) {
 80043b0:	4b3d      	ldr	r3, [pc, #244]	@ (80044a8 <BNO_CalibrationStatus+0xfc>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	2b07      	cmp	r3, #7
 80043b6:	d870      	bhi.n	800449a <BNO_CalibrationStatus+0xee>
 80043b8:	a201      	add	r2, pc, #4	@ (adr r2, 80043c0 <BNO_CalibrationStatus+0x14>)
 80043ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043be:	bf00      	nop
 80043c0:	080043e1 	.word	0x080043e1
 80043c4:	080043f1 	.word	0x080043f1
 80043c8:	080043fd 	.word	0x080043fd
 80043cc:	08004435 	.word	0x08004435
 80043d0:	0800444f 	.word	0x0800444f
 80043d4:	0800445b 	.word	0x0800445b
 80043d8:	0800447d 	.word	0x0800447d
 80043dc:	0800448f 	.word	0x0800448f
		case 0:
			BNO_Write(BNO055_SYS_TRIGGER,0x00);
 80043e0:	2100      	movs	r1, #0
 80043e2:	203f      	movs	r0, #63	@ 0x3f
 80043e4:	f7ff fbd6 	bl	8003b94 <BNO_Write>
			CalibrationFlag = 1;
 80043e8:	4b2f      	ldr	r3, [pc, #188]	@ (80044a8 <BNO_CalibrationStatus+0xfc>)
 80043ea:	2201      	movs	r2, #1
 80043ec:	701a      	strb	r2, [r3, #0]
			break;
 80043ee:	e059      	b.n	80044a4 <BNO_CalibrationStatus+0xf8>
		case 1:
			bno055_setOperationModeNDOF();
 80043f0:	f7ff ff2f 	bl	8004252 <bno055_setOperationModeNDOF>
			CalibrationFlag = 2;
 80043f4:	4b2c      	ldr	r3, [pc, #176]	@ (80044a8 <BNO_CalibrationStatus+0xfc>)
 80043f6:	2202      	movs	r2, #2
 80043f8:	701a      	strb	r2, [r3, #0]
			break;
 80043fa:	e053      	b.n	80044a4 <BNO_CalibrationStatus+0xf8>
		case 2:
			BNO_Read(BNO055_OPR_MODE, 1);
 80043fc:	2101      	movs	r1, #1
 80043fe:	203d      	movs	r0, #61	@ 0x3d
 8004400:	f7ff fba2 	bl	8003b48 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_NDOF){
 8004404:	4b29      	ldr	r3, [pc, #164]	@ (80044ac <BNO_CalibrationStatus+0x100>)
 8004406:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800440a:	2b0c      	cmp	r3, #12
 800440c:	d10e      	bne.n	800442c <BNO_CalibrationStatus+0x80>
				if(Calibrated){
 800440e:	4b28      	ldr	r3, [pc, #160]	@ (80044b0 <BNO_CalibrationStatus+0x104>)
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d006      	beq.n	8004424 <BNO_CalibrationStatus+0x78>
					CalibrationFlag = 0;
 8004416:	4b24      	ldr	r3, [pc, #144]	@ (80044a8 <BNO_CalibrationStatus+0xfc>)
 8004418:	2200      	movs	r2, #0
 800441a:	701a      	strb	r2, [r3, #0]
					BNO_CurrentState = Operation;
 800441c:	4b25      	ldr	r3, [pc, #148]	@ (80044b4 <BNO_CalibrationStatus+0x108>)
 800441e:	2203      	movs	r2, #3
 8004420:	701a      	strb	r2, [r3, #0]
				}
				else CalibrationFlag = 3;
			}
			else CalibrationFlag = 1;
			break;
 8004422:	e03f      	b.n	80044a4 <BNO_CalibrationStatus+0xf8>
				else CalibrationFlag = 3;
 8004424:	4b20      	ldr	r3, [pc, #128]	@ (80044a8 <BNO_CalibrationStatus+0xfc>)
 8004426:	2203      	movs	r2, #3
 8004428:	701a      	strb	r2, [r3, #0]
			break;
 800442a:	e03b      	b.n	80044a4 <BNO_CalibrationStatus+0xf8>
			else CalibrationFlag = 1;
 800442c:	4b1e      	ldr	r3, [pc, #120]	@ (80044a8 <BNO_CalibrationStatus+0xfc>)
 800442e:	2201      	movs	r2, #1
 8004430:	701a      	strb	r2, [r3, #0]
			break;
 8004432:	e037      	b.n	80044a4 <BNO_CalibrationStatus+0xf8>
		case 3:
			BNO_Read(BNO055_CALIB_STAT, 1);
 8004434:	2101      	movs	r1, #1
 8004436:	2035      	movs	r0, #53	@ 0x35
 8004438:	f7ff fb86 	bl	8003b48 <BNO_Read>
			if(IMU.CalSatus.Full == 0xFF){
 800443c:	4b1b      	ldr	r3, [pc, #108]	@ (80044ac <BNO_CalibrationStatus+0x100>)
 800443e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004442:	2bff      	cmp	r3, #255	@ 0xff
 8004444:	d12d      	bne.n	80044a2 <BNO_CalibrationStatus+0xf6>
				CalibrationFlag = 4;
 8004446:	4b18      	ldr	r3, [pc, #96]	@ (80044a8 <BNO_CalibrationStatus+0xfc>)
 8004448:	2204      	movs	r2, #4
 800444a:	701a      	strb	r2, [r3, #0]
			}
			break;
 800444c:	e029      	b.n	80044a2 <BNO_CalibrationStatus+0xf6>
		case 4:
			bno055_setOperationModeConfig();
 800444e:	f7ff fef9 	bl	8004244 <bno055_setOperationModeConfig>
			CalibrationFlag = 5;
 8004452:	4b15      	ldr	r3, [pc, #84]	@ (80044a8 <BNO_CalibrationStatus+0xfc>)
 8004454:	2205      	movs	r2, #5
 8004456:	701a      	strb	r2, [r3, #0]
			break;
 8004458:	e024      	b.n	80044a4 <BNO_CalibrationStatus+0xf8>
		case 5:
			BNO_Read(BNO055_OPR_MODE, 1);
 800445a:	2101      	movs	r1, #1
 800445c:	203d      	movs	r0, #61	@ 0x3d
 800445e:	f7ff fb73 	bl	8003b48 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_CONFIG){
 8004462:	4b12      	ldr	r3, [pc, #72]	@ (80044ac <BNO_CalibrationStatus+0x100>)
 8004464:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8004468:	2b00      	cmp	r3, #0
 800446a:	d103      	bne.n	8004474 <BNO_CalibrationStatus+0xc8>
				CalibrationFlag = 6;
 800446c:	4b0e      	ldr	r3, [pc, #56]	@ (80044a8 <BNO_CalibrationStatus+0xfc>)
 800446e:	2206      	movs	r2, #6
 8004470:	701a      	strb	r2, [r3, #0]

			}
			else CalibrationFlag = 4;
			break;
 8004472:	e017      	b.n	80044a4 <BNO_CalibrationStatus+0xf8>
			else CalibrationFlag = 4;
 8004474:	4b0c      	ldr	r3, [pc, #48]	@ (80044a8 <BNO_CalibrationStatus+0xfc>)
 8004476:	2204      	movs	r2, #4
 8004478:	701a      	strb	r2, [r3, #0]
			break;
 800447a:	e013      	b.n	80044a4 <BNO_CalibrationStatus+0xf8>
		case 6:
			BNO_GetCalibrationData();
 800447c:	f7ff fef0 	bl	8004260 <BNO_GetCalibrationData>
			Calibrated = 1;
 8004480:	4b0b      	ldr	r3, [pc, #44]	@ (80044b0 <BNO_CalibrationStatus+0x104>)
 8004482:	2201      	movs	r2, #1
 8004484:	701a      	strb	r2, [r3, #0]
			CalibrationFlag = 1;
 8004486:	4b08      	ldr	r3, [pc, #32]	@ (80044a8 <BNO_CalibrationStatus+0xfc>)
 8004488:	2201      	movs	r2, #1
 800448a:	701a      	strb	r2, [r3, #0]
			break;
 800448c:	e00a      	b.n	80044a4 <BNO_CalibrationStatus+0xf8>
		case 7:
			BNO_SetCalibrationData();
 800448e:	f7ff feef 	bl	8004270 <BNO_SetCalibrationData>
			CalibrationFlag = 1;
 8004492:	4b05      	ldr	r3, [pc, #20]	@ (80044a8 <BNO_CalibrationStatus+0xfc>)
 8004494:	2201      	movs	r2, #1
 8004496:	701a      	strb	r2, [r3, #0]
			break;
 8004498:	e004      	b.n	80044a4 <BNO_CalibrationStatus+0xf8>
		default:
			CalibrationFlag = 0;
 800449a:	4b03      	ldr	r3, [pc, #12]	@ (80044a8 <BNO_CalibrationStatus+0xfc>)
 800449c:	2200      	movs	r2, #0
 800449e:	701a      	strb	r2, [r3, #0]
			break;
 80044a0:	e000      	b.n	80044a4 <BNO_CalibrationStatus+0xf8>
			break;
 80044a2:	bf00      	nop
    	BNO_CurrentState = Operation;
    }
    else bno055_setOperationModeNDOF();
    */

}
 80044a4:	bf00      	nop
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	24001561 	.word	0x24001561
 80044ac:	24001500 	.word	0x24001500
 80044b0:	24000008 	.word	0x24000008
 80044b4:	240014fc 	.word	0x240014fc

080044b8 <BNO_GetData>:

void BNO_GetData(void){
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
	BNO_Read(BNO055_ACC_DATA_X_LSB,24);
 80044bc:	2118      	movs	r1, #24
 80044be:	2008      	movs	r0, #8
 80044c0:	f7ff fb42 	bl	8003b48 <BNO_Read>
}
 80044c4:	bf00      	nop
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <BNO_Receive>:

void BNO_Receive(uint8_t Buffer){
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	4603      	mov	r3, r0
 80044d0:	71fb      	strb	r3, [r7, #7]
	static uint8_t MsgSize = 0;
	static uint8_t Counter = 0;

	BNO_ComsCounter = 0;
 80044d2:	4b2c      	ldr	r3, [pc, #176]	@ (8004584 <BNO_Receive+0xbc>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	701a      	strb	r2, [r3, #0]

	switch (BNO_Rx_Status) {
 80044d8:	4b2b      	ldr	r3, [pc, #172]	@ (8004588 <BNO_Receive+0xc0>)
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	2bff      	cmp	r3, #255	@ 0xff
 80044de:	d027      	beq.n	8004530 <BNO_Receive+0x68>
 80044e0:	2bff      	cmp	r3, #255	@ 0xff
 80044e2:	dc46      	bgt.n	8004572 <BNO_Receive+0xaa>
 80044e4:	2bee      	cmp	r3, #238	@ 0xee
 80044e6:	d017      	beq.n	8004518 <BNO_Receive+0x50>
 80044e8:	2bee      	cmp	r3, #238	@ 0xee
 80044ea:	dc42      	bgt.n	8004572 <BNO_Receive+0xaa>
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d002      	beq.n	80044f6 <BNO_Receive+0x2e>
 80044f0:	2bbb      	cmp	r3, #187	@ 0xbb
 80044f2:	d00a      	beq.n	800450a <BNO_Receive+0x42>
				BNO_EmptyingBuffer();
			}

			break;
		default:
			break;
 80044f4:	e03d      	b.n	8004572 <BNO_Receive+0xaa>
			if(Buffer == Read_Response || Buffer == Header) BNO_Rx_Status = Buffer;
 80044f6:	79fb      	ldrb	r3, [r7, #7]
 80044f8:	2bbb      	cmp	r3, #187	@ 0xbb
 80044fa:	d002      	beq.n	8004502 <BNO_Receive+0x3a>
 80044fc:	79fb      	ldrb	r3, [r7, #7]
 80044fe:	2bee      	cmp	r3, #238	@ 0xee
 8004500:	d139      	bne.n	8004576 <BNO_Receive+0xae>
 8004502:	4a21      	ldr	r2, [pc, #132]	@ (8004588 <BNO_Receive+0xc0>)
 8004504:	79fb      	ldrb	r3, [r7, #7]
 8004506:	7013      	strb	r3, [r2, #0]
			break;
 8004508:	e035      	b.n	8004576 <BNO_Receive+0xae>
			MsgSize = Buffer;
 800450a:	4a20      	ldr	r2, [pc, #128]	@ (800458c <BNO_Receive+0xc4>)
 800450c:	79fb      	ldrb	r3, [r7, #7]
 800450e:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = Emptying_Buffer;
 8004510:	4b1d      	ldr	r3, [pc, #116]	@ (8004588 <BNO_Receive+0xc0>)
 8004512:	22ff      	movs	r2, #255	@ 0xff
 8004514:	701a      	strb	r2, [r3, #0]
			break;
 8004516:	e031      	b.n	800457c <BNO_Receive+0xb4>
			BNO_ErrorHandler = Buffer;
 8004518:	4a1d      	ldr	r2, [pc, #116]	@ (8004590 <BNO_Receive+0xc8>)
 800451a:	79fb      	ldrb	r3, [r7, #7]
 800451c:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = AwaitingMsg;
 800451e:	4b1a      	ldr	r3, [pc, #104]	@ (8004588 <BNO_Receive+0xc0>)
 8004520:	2200      	movs	r2, #0
 8004522:	701a      	strb	r2, [r3, #0]
			memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 8004524:	22ff      	movs	r2, #255	@ 0xff
 8004526:	2100      	movs	r1, #0
 8004528:	481a      	ldr	r0, [pc, #104]	@ (8004594 <BNO_Receive+0xcc>)
 800452a:	f012 f9ac 	bl	8016886 <memset>
			break;
 800452e:	e025      	b.n	800457c <BNO_Receive+0xb4>
			BNO_RxBuffer[Counter + 1] = Buffer;
 8004530:	4b19      	ldr	r3, [pc, #100]	@ (8004598 <BNO_Receive+0xd0>)
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	3301      	adds	r3, #1
 8004536:	4917      	ldr	r1, [pc, #92]	@ (8004594 <BNO_Receive+0xcc>)
 8004538:	79fa      	ldrb	r2, [r7, #7]
 800453a:	54ca      	strb	r2, [r1, r3]
			Counter++;
 800453c:	4b16      	ldr	r3, [pc, #88]	@ (8004598 <BNO_Receive+0xd0>)
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	3301      	adds	r3, #1
 8004542:	b2da      	uxtb	r2, r3
 8004544:	4b14      	ldr	r3, [pc, #80]	@ (8004598 <BNO_Receive+0xd0>)
 8004546:	701a      	strb	r2, [r3, #0]
			if(Counter == MsgSize){
 8004548:	4b13      	ldr	r3, [pc, #76]	@ (8004598 <BNO_Receive+0xd0>)
 800454a:	781a      	ldrb	r2, [r3, #0]
 800454c:	4b0f      	ldr	r3, [pc, #60]	@ (800458c <BNO_Receive+0xc4>)
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	429a      	cmp	r2, r3
 8004552:	d112      	bne.n	800457a <BNO_Receive+0xb2>
				Counter = 0;
 8004554:	4b10      	ldr	r3, [pc, #64]	@ (8004598 <BNO_Receive+0xd0>)
 8004556:	2200      	movs	r2, #0
 8004558:	701a      	strb	r2, [r3, #0]
				MsgSize = 0;
 800455a:	4b0c      	ldr	r3, [pc, #48]	@ (800458c <BNO_Receive+0xc4>)
 800455c:	2200      	movs	r2, #0
 800455e:	701a      	strb	r2, [r3, #0]
				BNO_Rx_Status = AwaitingMsg;
 8004560:	4b09      	ldr	r3, [pc, #36]	@ (8004588 <BNO_Receive+0xc0>)
 8004562:	2200      	movs	r2, #0
 8004564:	701a      	strb	r2, [r3, #0]
				BNO_ErrorHandler = ReadSucces;
 8004566:	4b0a      	ldr	r3, [pc, #40]	@ (8004590 <BNO_Receive+0xc8>)
 8004568:	220b      	movs	r2, #11
 800456a:	701a      	strb	r2, [r3, #0]
				BNO_EmptyingBuffer();
 800456c:	f7ff fe20 	bl	80041b0 <BNO_EmptyingBuffer>
			break;
 8004570:	e003      	b.n	800457a <BNO_Receive+0xb2>
			break;
 8004572:	bf00      	nop
 8004574:	e002      	b.n	800457c <BNO_Receive+0xb4>
			break;
 8004576:	bf00      	nop
 8004578:	e000      	b.n	800457c <BNO_Receive+0xb4>
			break;
 800457a:	bf00      	nop
	}
}
 800457c:	bf00      	nop
 800457e:	3708      	adds	r7, #8
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	240014fa 	.word	0x240014fa
 8004588:	240014f8 	.word	0x240014f8
 800458c:	24001562 	.word	0x24001562
 8004590:	240014f9 	.word	0x240014f9
 8004594:	240013f8 	.word	0x240013f8
 8004598:	24001563 	.word	0x24001563

0800459c <BNO_FaultManager>:

void BNO_FaultManager(void){
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
	if(BNO_ComsCounter > 3){
 80045a2:	4b13      	ldr	r3, [pc, #76]	@ (80045f0 <BNO_FaultManager+0x54>)
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	2b03      	cmp	r3, #3
 80045a8:	d90f      	bls.n	80045ca <BNO_FaultManager+0x2e>
		Reset_UART(&huart3);
 80045aa:	4812      	ldr	r0, [pc, #72]	@ (80045f4 <BNO_FaultManager+0x58>)
 80045ac:	f7fe fd7a 	bl	80030a4 <Reset_UART>
		BNO_Rx_Status = AwaitingMsg;
 80045b0:	4b11      	ldr	r3, [pc, #68]	@ (80045f8 <BNO_FaultManager+0x5c>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 80045b6:	2201      	movs	r2, #1
 80045b8:	4910      	ldr	r1, [pc, #64]	@ (80045fc <BNO_FaultManager+0x60>)
 80045ba:	480e      	ldr	r0, [pc, #56]	@ (80045f4 <BNO_FaultManager+0x58>)
 80045bc:	f00a f882 	bl	800e6c4 <HAL_UART_Receive_DMA>
		memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 80045c0:	22ff      	movs	r2, #255	@ 0xff
 80045c2:	2100      	movs	r1, #0
 80045c4:	480e      	ldr	r0, [pc, #56]	@ (8004600 <BNO_FaultManager+0x64>)
 80045c6:	f012 f95e 	bl	8016886 <memset>
	}
	if(BNO_ErrorHandler == WRONG_START_BYTE){
 80045ca:	4b0e      	ldr	r3, [pc, #56]	@ (8004604 <BNO_FaultManager+0x68>)
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	2b06      	cmp	r3, #6
 80045d0:	d10a      	bne.n	80045e8 <BNO_FaultManager+0x4c>
		uint8_t Buffer = 0x00;
 80045d2:	2300      	movs	r3, #0
 80045d4:	71fb      	strb	r3, [r7, #7]

		HAL_UART_Transmit_IT(&huart3, &Buffer, 1);
 80045d6:	1dfb      	adds	r3, r7, #7
 80045d8:	2201      	movs	r2, #1
 80045da:	4619      	mov	r1, r3
 80045dc:	4805      	ldr	r0, [pc, #20]	@ (80045f4 <BNO_FaultManager+0x58>)
 80045de:	f009 ff91 	bl	800e504 <HAL_UART_Transmit_IT>
		BNO_ErrorHandler = 0;
 80045e2:	4b08      	ldr	r3, [pc, #32]	@ (8004604 <BNO_FaultManager+0x68>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	701a      	strb	r2, [r3, #0]
	}
}
 80045e8:	bf00      	nop
 80045ea:	3708      	adds	r7, #8
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	240014fa 	.word	0x240014fa
 80045f4:	24001130 	.word	0x24001130
 80045f8:	240014f8 	.word	0x240014f8
 80045fc:	240014f7 	.word	0x240014f7
 8004600:	240013f8 	.word	0x240013f8
 8004604:	240014f9 	.word	0x240014f9

08004608 <BNO_Tasks>:

void BNO_Tasks(void){
 8004608:	b580      	push	{r7, lr}
 800460a:	af00      	add	r7, sp, #0
	if(BNO_DelayCounter == 0){
 800460c:	4b1b      	ldr	r3, [pc, #108]	@ (800467c <BNO_Tasks+0x74>)
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d128      	bne.n	8004666 <BNO_Tasks+0x5e>
		switch (BNO_CurrentState) {
 8004614:	4b1a      	ldr	r3, [pc, #104]	@ (8004680 <BNO_Tasks+0x78>)
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	2b04      	cmp	r3, #4
 800461a:	d81c      	bhi.n	8004656 <BNO_Tasks+0x4e>
 800461c:	a201      	add	r2, pc, #4	@ (adr r2, 8004624 <BNO_Tasks+0x1c>)
 800461e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004622:	bf00      	nop
 8004624:	08004639 	.word	0x08004639
 8004628:	08004645 	.word	0x08004645
 800462c:	0800464b 	.word	0x0800464b
 8004630:	08004651 	.word	0x08004651
 8004634:	0800463f 	.word	0x0800463f
			case Init:
				BNO_Init();
 8004638:	f7ff fe52 	bl	80042e0 <BNO_Init>
				break;
 800463c:	e00c      	b.n	8004658 <BNO_Tasks+0x50>
			case Reset:
				BNO_SWReset();
 800463e:	f7ff fdd3 	bl	80041e8 <BNO_SWReset>
			break;
 8004642:	e009      	b.n	8004658 <BNO_Tasks+0x50>
			case Configuration:
				BNO_Config();
 8004644:	f7ff fe68 	bl	8004318 <BNO_Config>
				break;
 8004648:	e006      	b.n	8004658 <BNO_Tasks+0x50>
			case Calibration:
				BNO_CalibrationStatus();
 800464a:	f7ff feaf 	bl	80043ac <BNO_CalibrationStatus>
				break;
 800464e:	e003      	b.n	8004658 <BNO_Tasks+0x50>
			case Operation:
				BNO_GetData();
 8004650:	f7ff ff32 	bl	80044b8 <BNO_GetData>
				break;
 8004654:	e000      	b.n	8004658 <BNO_Tasks+0x50>

			default:
				break;
 8004656:	bf00      	nop
		}
		++BNO_ComsCounter;
 8004658:	4b0a      	ldr	r3, [pc, #40]	@ (8004684 <BNO_Tasks+0x7c>)
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	3301      	adds	r3, #1
 800465e:	b2da      	uxtb	r2, r3
 8004660:	4b08      	ldr	r3, [pc, #32]	@ (8004684 <BNO_Tasks+0x7c>)
 8004662:	701a      	strb	r2, [r3, #0]
 8004664:	e005      	b.n	8004672 <BNO_Tasks+0x6a>
	}
	else{
		--BNO_DelayCounter;
 8004666:	4b05      	ldr	r3, [pc, #20]	@ (800467c <BNO_Tasks+0x74>)
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	3b01      	subs	r3, #1
 800466c:	b2da      	uxtb	r2, r3
 800466e:	4b03      	ldr	r3, [pc, #12]	@ (800467c <BNO_Tasks+0x74>)
 8004670:	701a      	strb	r2, [r3, #0]
	}
	BNO_FaultManager();
 8004672:	f7ff ff93 	bl	800459c <BNO_FaultManager>
}
 8004676:	bf00      	nop
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	240014fb 	.word	0x240014fb
 8004680:	240014fc 	.word	0x240014fc
 8004684:	240014fa 	.word	0x240014fa

08004688 <LED_blink>:

		.G_LED.LED_GPIO_GPIOx = LED_5_GPIO_Port,
		.G_LED.LED_GPIO_Pin   = LED_5_Pin
};

LED_config_t LED_blink(LED_config_t LED){
 8004688:	b084      	sub	sp, #16
 800468a:	b590      	push	{r4, r7, lr}
 800468c:	b083      	sub	sp, #12
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
 8004692:	f107 001c 	add.w	r0, r7, #28
 8004696:	e880 000e 	stmia.w	r0, {r1, r2, r3}

		switch (LED.Blink_status) {
 800469a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d002      	beq.n	80046a8 <LED_blink+0x20>
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d010      	beq.n	80046c8 <LED_blink+0x40>
 80046a6:	e01f      	b.n	80046e8 <LED_blink+0x60>
			case 0x00:
				if(LED.count >= LED.Time_Off){
 80046a8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80046aa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d31f      	bcc.n	80046f0 <LED_blink+0x68>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	8c39      	ldrh	r1, [r7, #32]
 80046b4:	2201      	movs	r2, #1
 80046b6:	4618      	mov	r0, r3
 80046b8:	f004 fc70 	bl	8008f9c <HAL_GPIO_WritePin>
					LED.Blink_status = 1;
 80046bc:	2301      	movs	r3, #1
 80046be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 80046c2:	2300      	movs	r3, #0
 80046c4:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 80046c6:	e013      	b.n	80046f0 <LED_blink+0x68>
			case 0x01:
				if(LED.count >= LED.Time_On){
 80046c8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80046ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d311      	bcc.n	80046f4 <LED_blink+0x6c>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	8c39      	ldrh	r1, [r7, #32]
 80046d4:	2200      	movs	r2, #0
 80046d6:	4618      	mov	r0, r3
 80046d8:	f004 fc60 	bl	8008f9c <HAL_GPIO_WritePin>
					LED.Blink_status = 0;
 80046dc:	2300      	movs	r3, #0
 80046de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 80046e2:	2300      	movs	r3, #0
 80046e4:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 80046e6:	e005      	b.n	80046f4 <LED_blink+0x6c>
			default:
				LED.Blink_status = 0;
 80046e8:	2300      	movs	r3, #0
 80046ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
				break;
 80046ee:	e002      	b.n	80046f6 <LED_blink+0x6e>
				break;
 80046f0:	bf00      	nop
 80046f2:	e000      	b.n	80046f6 <LED_blink+0x6e>
				break;
 80046f4:	bf00      	nop
		}

	LED.count++;
 80046f6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80046f8:	3301      	adds	r3, #1
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	853b      	strh	r3, [r7, #40]	@ 0x28
	return LED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	461c      	mov	r4, r3
 8004702:	f107 031c 	add.w	r3, r7, #28
 8004706:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004708:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004716:	b004      	add	sp, #16
 8004718:	4770      	bx	lr

0800471a <LED_Rutine>:

LED_config_t LED_Rutine(LED_config_t LED){
 800471a:	b084      	sub	sp, #16
 800471c:	b590      	push	{r4, r7, lr}
 800471e:	b085      	sub	sp, #20
 8004720:	af02      	add	r7, sp, #8
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	f107 001c 	add.w	r0, r7, #28
 8004728:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(LED.LED_status == 1){
 800472c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8004730:	2b01      	cmp	r3, #1
 8004732:	d117      	bne.n	8004764 <LED_Rutine+0x4a>
		switch (LED.Sequence) {
 8004734:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004738:	2b00      	cmp	r3, #0
 800473a:	d002      	beq.n	8004742 <LED_Rutine+0x28>
 800473c:	2b01      	cmp	r3, #1
 800473e:	d007      	beq.n	8004750 <LED_Rutine+0x36>
				break;
			case Blink:
				LED = LED_blink(LED);
				break;
			default:
				break;
 8004740:	e018      	b.n	8004774 <LED_Rutine+0x5a>
				HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	8c39      	ldrh	r1, [r7, #32]
 8004746:	2201      	movs	r2, #1
 8004748:	4618      	mov	r0, r3
 800474a:	f004 fc27 	bl	8008f9c <HAL_GPIO_WritePin>
				break;
 800474e:	e011      	b.n	8004774 <LED_Rutine+0x5a>
				LED = LED_blink(LED);
 8004750:	f107 001c 	add.w	r0, r7, #28
 8004754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004756:	9300      	str	r3, [sp, #0]
 8004758:	f107 031c 	add.w	r3, r7, #28
 800475c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800475e:	f7ff ff93 	bl	8004688 <LED_blink>
				break;
 8004762:	e007      	b.n	8004774 <LED_Rutine+0x5a>
		}
	}
	else{
		HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	8c39      	ldrh	r1, [r7, #32]
 8004768:	2200      	movs	r2, #0
 800476a:	4618      	mov	r0, r3
 800476c:	f004 fc16 	bl	8008f9c <HAL_GPIO_WritePin>
		LED.count = 0;
 8004770:	2300      	movs	r3, #0
 8004772:	853b      	strh	r3, [r7, #40]	@ 0x28
	}
	return LED;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	461c      	mov	r4, r3
 8004778:	f107 031c 	add.w	r3, r7, #28
 800477c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800477e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800478c:	b004      	add	sp, #16
 800478e:	4770      	bx	lr

08004790 <LED_Tasks>:

void LED_Tasks (void){
 8004790:	b590      	push	{r4, r7, lr}
 8004792:	b087      	sub	sp, #28
 8004794:	af02      	add	r7, sp, #8
	LED_Info.R_LED = LED_Rutine(LED_Info.R_LED);
 8004796:	4c24      	ldr	r4, [pc, #144]	@ (8004828 <LED_Tasks+0x98>)
 8004798:	4638      	mov	r0, r7
 800479a:	4b23      	ldr	r3, [pc, #140]	@ (8004828 <LED_Tasks+0x98>)
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	9200      	str	r2, [sp, #0]
 80047a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047a2:	f7ff ffba 	bl	800471a <LED_Rutine>
 80047a6:	463b      	mov	r3, r7
 80047a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED1 = LED_Rutine(LED_Info.B_LED1);
 80047ae:	4c1e      	ldr	r4, [pc, #120]	@ (8004828 <LED_Tasks+0x98>)
 80047b0:	4638      	mov	r0, r7
 80047b2:	4b1d      	ldr	r3, [pc, #116]	@ (8004828 <LED_Tasks+0x98>)
 80047b4:	69da      	ldr	r2, [r3, #28]
 80047b6:	9200      	str	r2, [sp, #0]
 80047b8:	3310      	adds	r3, #16
 80047ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047bc:	f7ff ffad 	bl	800471a <LED_Rutine>
 80047c0:	3410      	adds	r4, #16
 80047c2:	463b      	mov	r3, r7
 80047c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED2 = LED_Rutine(LED_Info.B_LED2);
 80047ca:	4c17      	ldr	r4, [pc, #92]	@ (8004828 <LED_Tasks+0x98>)
 80047cc:	4638      	mov	r0, r7
 80047ce:	4b16      	ldr	r3, [pc, #88]	@ (8004828 <LED_Tasks+0x98>)
 80047d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047d2:	9200      	str	r2, [sp, #0]
 80047d4:	3320      	adds	r3, #32
 80047d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047d8:	f7ff ff9f 	bl	800471a <LED_Rutine>
 80047dc:	3420      	adds	r4, #32
 80047de:	463b      	mov	r3, r7
 80047e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED3 = LED_Rutine(LED_Info.B_LED3);
 80047e6:	4c10      	ldr	r4, [pc, #64]	@ (8004828 <LED_Tasks+0x98>)
 80047e8:	4638      	mov	r0, r7
 80047ea:	4b0f      	ldr	r3, [pc, #60]	@ (8004828 <LED_Tasks+0x98>)
 80047ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047ee:	9200      	str	r2, [sp, #0]
 80047f0:	3330      	adds	r3, #48	@ 0x30
 80047f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047f4:	f7ff ff91 	bl	800471a <LED_Rutine>
 80047f8:	3430      	adds	r4, #48	@ 0x30
 80047fa:	463b      	mov	r3, r7
 80047fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.G_LED = LED_Rutine(LED_Info.G_LED);
 8004802:	4c09      	ldr	r4, [pc, #36]	@ (8004828 <LED_Tasks+0x98>)
 8004804:	4638      	mov	r0, r7
 8004806:	4b08      	ldr	r3, [pc, #32]	@ (8004828 <LED_Tasks+0x98>)
 8004808:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800480a:	9200      	str	r2, [sp, #0]
 800480c:	3340      	adds	r3, #64	@ 0x40
 800480e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004810:	f7ff ff83 	bl	800471a <LED_Rutine>
 8004814:	3440      	adds	r4, #64	@ 0x40
 8004816:	463b      	mov	r3, r7
 8004818:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800481a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800481e:	bf00      	nop
 8004820:	3714      	adds	r7, #20
 8004822:	46bd      	mov	sp, r7
 8004824:	bd90      	pop	{r4, r7, pc}
 8004826:	bf00      	nop
 8004828:	2400000c 	.word	0x2400000c

0800482c <LR03_AT>:

uint8_t LR03_RxBuffer[256] = {0};

uint8_t Test_1;

void LR03_AT(void){
 800482c:	b580      	push	{r7, lr}
 800482e:	af00      	add	r7, sp, #0

	HAL_UART_Transmit_IT(&huart6, (uint8_t*)"+++\r\n", 5);
 8004830:	2205      	movs	r2, #5
 8004832:	4903      	ldr	r1, [pc, #12]	@ (8004840 <LR03_AT+0x14>)
 8004834:	4803      	ldr	r0, [pc, #12]	@ (8004844 <LR03_AT+0x18>)
 8004836:	f009 fe65 	bl	800e504 <HAL_UART_Transmit_IT>
}
 800483a:	bf00      	nop
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	08018978 	.word	0x08018978
 8004844:	240011c4 	.word	0x240011c4

08004848 <LR03_Level>:

void LR03_Level(uint8_t Level){
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	4603      	mov	r3, r0
 8004850:	71fb      	strb	r3, [r7, #7]
	static uint8_t Level_Command[] = {"AT+LEVEL7\r\n"};
	if(Level > 7) Level = 7;
 8004852:	79fb      	ldrb	r3, [r7, #7]
 8004854:	2b07      	cmp	r3, #7
 8004856:	d901      	bls.n	800485c <LR03_Level+0x14>
 8004858:	2307      	movs	r3, #7
 800485a:	71fb      	strb	r3, [r7, #7]
	if(Level < 1) Level = 1;
 800485c:	79fb      	ldrb	r3, [r7, #7]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <LR03_Level+0x1e>
 8004862:	2301      	movs	r3, #1
 8004864:	71fb      	strb	r3, [r7, #7]
	Level_Command[8] = Level + 48;
 8004866:	79fb      	ldrb	r3, [r7, #7]
 8004868:	3330      	adds	r3, #48	@ 0x30
 800486a:	b2da      	uxtb	r2, r3
 800486c:	4b05      	ldr	r3, [pc, #20]	@ (8004884 <LR03_Level+0x3c>)
 800486e:	721a      	strb	r2, [r3, #8]
	HAL_UART_Transmit_IT(&huart6, Level_Command, 11);
 8004870:	220b      	movs	r2, #11
 8004872:	4904      	ldr	r1, [pc, #16]	@ (8004884 <LR03_Level+0x3c>)
 8004874:	4804      	ldr	r0, [pc, #16]	@ (8004888 <LR03_Level+0x40>)
 8004876:	f009 fe45 	bl	800e504 <HAL_UART_Transmit_IT>
}
 800487a:	bf00      	nop
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	2400005c 	.word	0x2400005c
 8004888:	240011c4 	.word	0x240011c4

0800488c <LR03_Receive>:

void LR03_Receive(uint8_t Data){
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	4603      	mov	r3, r0
 8004894:	71fb      	strb	r3, [r7, #7]
	static uint8_t DataPointer = 0;
	LR03_RxBuffer[DataPointer] = Data;
 8004896:	4b09      	ldr	r3, [pc, #36]	@ (80048bc <LR03_Receive+0x30>)
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	4619      	mov	r1, r3
 800489c:	4a08      	ldr	r2, [pc, #32]	@ (80048c0 <LR03_Receive+0x34>)
 800489e:	79fb      	ldrb	r3, [r7, #7]
 80048a0:	5453      	strb	r3, [r2, r1]
	DataPointer++;
 80048a2:	4b06      	ldr	r3, [pc, #24]	@ (80048bc <LR03_Receive+0x30>)
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	3301      	adds	r3, #1
 80048a8:	b2da      	uxtb	r2, r3
 80048aa:	4b04      	ldr	r3, [pc, #16]	@ (80048bc <LR03_Receive+0x30>)
 80048ac:	701a      	strb	r2, [r3, #0]
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	24001665 	.word	0x24001665
 80048c0:	24001564 	.word	0x24001564

080048c4 <LR03_StateMachine>:

void LR03_StateMachine(void){
 80048c4:	b580      	push	{r7, lr}
 80048c6:	af00      	add	r7, sp, #0

	switch (Test_1) {
 80048c8:	4b09      	ldr	r3, [pc, #36]	@ (80048f0 <LR03_StateMachine+0x2c>)
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d002      	beq.n	80048d6 <LR03_StateMachine+0x12>
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d003      	beq.n	80048dc <LR03_StateMachine+0x18>
			break;
		case 2:
			LR03_Level(7);
			break;
		default:
			break;
 80048d4:	e006      	b.n	80048e4 <LR03_StateMachine+0x20>
			LR03_AT();
 80048d6:	f7ff ffa9 	bl	800482c <LR03_AT>
			break;
 80048da:	e003      	b.n	80048e4 <LR03_StateMachine+0x20>
			LR03_Level(7);
 80048dc:	2007      	movs	r0, #7
 80048de:	f7ff ffb3 	bl	8004848 <LR03_Level>
			break;
 80048e2:	bf00      	nop
	}
	Test_1 = 0;
 80048e4:	4b02      	ldr	r3, [pc, #8]	@ (80048f0 <LR03_StateMachine+0x2c>)
 80048e6:	2200      	movs	r2, #0
 80048e8:	701a      	strb	r2, [r3, #0]
}
 80048ea:	bf00      	nop
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	24001664 	.word	0x24001664

080048f4 <PWM_Assign>:
Servo_mgmt_s PWM_Output = {
	    .S = {1500, 1500, 1500, 1500, 1500,
	          1500, 1500, 1500, 1500, 1500}
	};

void PWM_Assign(void) {
 80048f4:	b580      	push	{r7, lr}
 80048f6:	af00      	add	r7, sp, #0
    // Timer 2 (Canales 1, 2, 10, 9)
    TIM2->CCR1 = PWM_Output.S[0];  // Canal_1 (S[0])
 80048f8:	4b2a      	ldr	r3, [pc, #168]	@ (80049a4 <PWM_Assign+0xb0>)
 80048fa:	881a      	ldrh	r2, [r3, #0]
 80048fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004900:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2->CCR2 = PWM_Output.S[1];  // Canal_2 (S[1])
 8004902:	4b28      	ldr	r3, [pc, #160]	@ (80049a4 <PWM_Assign+0xb0>)
 8004904:	885a      	ldrh	r2, [r3, #2]
 8004906:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800490a:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM2->CCR3 = PWM_Output.S[9];  // Canal_10 (S[9])
 800490c:	4b25      	ldr	r3, [pc, #148]	@ (80049a4 <PWM_Assign+0xb0>)
 800490e:	8a5a      	ldrh	r2, [r3, #18]
 8004910:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004914:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2->CCR4 = PWM_Output.S[8];  // Canal_9 (S[8])
 8004916:	4b23      	ldr	r3, [pc, #140]	@ (80049a4 <PWM_Assign+0xb0>)
 8004918:	8a1a      	ldrh	r2, [r3, #16]
 800491a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800491e:	641a      	str	r2, [r3, #64]	@ 0x40

    // Timer 3 (Canales 3, 4)
    TIM3->CCR1 = PWM_Output.S[2];  // Canal_3 (S[2])
 8004920:	4b20      	ldr	r3, [pc, #128]	@ (80049a4 <PWM_Assign+0xb0>)
 8004922:	889a      	ldrh	r2, [r3, #4]
 8004924:	4b20      	ldr	r3, [pc, #128]	@ (80049a8 <PWM_Assign+0xb4>)
 8004926:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3->CCR2 = PWM_Output.S[3];  // Canal_4 (S[3])
 8004928:	4b1e      	ldr	r3, [pc, #120]	@ (80049a4 <PWM_Assign+0xb0>)
 800492a:	88da      	ldrh	r2, [r3, #6]
 800492c:	4b1e      	ldr	r3, [pc, #120]	@ (80049a8 <PWM_Assign+0xb4>)
 800492e:	639a      	str	r2, [r3, #56]	@ 0x38

    // Timer 4 (Canales 5-8)
    TIM4->CCR1 = PWM_Output.S[4];  // Canal_5 (S[4])
 8004930:	4b1c      	ldr	r3, [pc, #112]	@ (80049a4 <PWM_Assign+0xb0>)
 8004932:	891a      	ldrh	r2, [r3, #8]
 8004934:	4b1d      	ldr	r3, [pc, #116]	@ (80049ac <PWM_Assign+0xb8>)
 8004936:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM4->CCR2 = PWM_Output.S[5];  // Canal_6 (S[5])
 8004938:	4b1a      	ldr	r3, [pc, #104]	@ (80049a4 <PWM_Assign+0xb0>)
 800493a:	895a      	ldrh	r2, [r3, #10]
 800493c:	4b1b      	ldr	r3, [pc, #108]	@ (80049ac <PWM_Assign+0xb8>)
 800493e:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM4->CCR3 = PWM_Output.S[6];  // Canal_7 (S[6])
 8004940:	4b18      	ldr	r3, [pc, #96]	@ (80049a4 <PWM_Assign+0xb0>)
 8004942:	899a      	ldrh	r2, [r3, #12]
 8004944:	4b19      	ldr	r3, [pc, #100]	@ (80049ac <PWM_Assign+0xb8>)
 8004946:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM4->CCR4 = PWM_Output.S[7];  // Canal_8 (S[7])
 8004948:	4b16      	ldr	r3, [pc, #88]	@ (80049a4 <PWM_Assign+0xb0>)
 800494a:	89da      	ldrh	r2, [r3, #14]
 800494c:	4b17      	ldr	r3, [pc, #92]	@ (80049ac <PWM_Assign+0xb8>)
 800494e:	641a      	str	r2, [r3, #64]	@ 0x40

    // Iniciar PWM (igual que antes)
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8004950:	2100      	movs	r1, #0
 8004952:	4817      	ldr	r0, [pc, #92]	@ (80049b0 <PWM_Assign+0xbc>)
 8004954:	f008 fd58 	bl	800d408 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8004958:	2104      	movs	r1, #4
 800495a:	4815      	ldr	r0, [pc, #84]	@ (80049b0 <PWM_Assign+0xbc>)
 800495c:	f008 fd54 	bl	800d408 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8004960:	2108      	movs	r1, #8
 8004962:	4813      	ldr	r0, [pc, #76]	@ (80049b0 <PWM_Assign+0xbc>)
 8004964:	f008 fd50 	bl	800d408 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8004968:	210c      	movs	r1, #12
 800496a:	4811      	ldr	r0, [pc, #68]	@ (80049b0 <PWM_Assign+0xbc>)
 800496c:	f008 fd4c 	bl	800d408 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8004970:	2100      	movs	r1, #0
 8004972:	4810      	ldr	r0, [pc, #64]	@ (80049b4 <PWM_Assign+0xc0>)
 8004974:	f008 fd48 	bl	800d408 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8004978:	2104      	movs	r1, #4
 800497a:	480e      	ldr	r0, [pc, #56]	@ (80049b4 <PWM_Assign+0xc0>)
 800497c:	f008 fd44 	bl	800d408 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8004980:	2100      	movs	r1, #0
 8004982:	480d      	ldr	r0, [pc, #52]	@ (80049b8 <PWM_Assign+0xc4>)
 8004984:	f008 fd40 	bl	800d408 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8004988:	2104      	movs	r1, #4
 800498a:	480b      	ldr	r0, [pc, #44]	@ (80049b8 <PWM_Assign+0xc4>)
 800498c:	f008 fd3c 	bl	800d408 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004990:	2108      	movs	r1, #8
 8004992:	4809      	ldr	r0, [pc, #36]	@ (80049b8 <PWM_Assign+0xc4>)
 8004994:	f008 fd38 	bl	800d408 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004998:	210c      	movs	r1, #12
 800499a:	4807      	ldr	r0, [pc, #28]	@ (80049b8 <PWM_Assign+0xc4>)
 800499c:	f008 fd34 	bl	800d408 <HAL_TIM_PWM_Start>
}
 80049a0:	bf00      	nop
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	24000068 	.word	0x24000068
 80049a8:	40000400 	.word	0x40000400
 80049ac:	40000800 	.word	0x40000800
 80049b0:	24000ed8 	.word	0x24000ed8
 80049b4:	24000f24 	.word	0x24000f24
 80049b8:	24000f70 	.word	0x24000f70

080049bc <SBUS_init>:

extern UART_HandleTypeDef huart1;
#define SBUS_UART_handler &huart1


void SBUS_init(void){
 80049bc:	b580      	push	{r7, lr}
 80049be:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(SBUS_UART_handler, &SBUS_RxBuffer, 1);
 80049c0:	2201      	movs	r2, #1
 80049c2:	4903      	ldr	r1, [pc, #12]	@ (80049d0 <SBUS_init+0x14>)
 80049c4:	4803      	ldr	r0, [pc, #12]	@ (80049d4 <SBUS_init+0x18>)
 80049c6:	f009 fe7d 	bl	800e6c4 <HAL_UART_Receive_DMA>

}
 80049ca:	bf00      	nop
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	24001681 	.word	0x24001681
 80049d4:	2400109c 	.word	0x2400109c

080049d8 <SBUS_Receive>:

void SBUS_Receive(uint8_t SBUS_RxBuffer){
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	4603      	mov	r3, r0
 80049e0:	71fb      	strb	r3, [r7, #7]
	static uint8_t Actual_status = 0;
	static uint8_t RxCount;

	switch (Actual_status) {
 80049e2:	4b20      	ldr	r3, [pc, #128]	@ (8004a64 <SBUS_Receive+0x8c>)
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d002      	beq.n	80049f0 <SBUS_Receive+0x18>
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d017      	beq.n	8004a1e <SBUS_Receive+0x46>
 80049ee:	e02f      	b.n	8004a50 <SBUS_Receive+0x78>
		case 0:
			if(SBUS_RxBuffer == 0x0F){
 80049f0:	79fb      	ldrb	r3, [r7, #7]
 80049f2:	2b0f      	cmp	r3, #15
 80049f4:	d10f      	bne.n	8004a16 <SBUS_Receive+0x3e>
				SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 80049f6:	4b1c      	ldr	r3, [pc, #112]	@ (8004a68 <SBUS_Receive+0x90>)
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	4619      	mov	r1, r3
 80049fc:	4a1b      	ldr	r2, [pc, #108]	@ (8004a6c <SBUS_Receive+0x94>)
 80049fe:	79fb      	ldrb	r3, [r7, #7]
 8004a00:	5453      	strb	r3, [r2, r1]
				Actual_status = 1;
 8004a02:	4b18      	ldr	r3, [pc, #96]	@ (8004a64 <SBUS_Receive+0x8c>)
 8004a04:	2201      	movs	r2, #1
 8004a06:	701a      	strb	r2, [r3, #0]
				RxCount++;
 8004a08:	4b17      	ldr	r3, [pc, #92]	@ (8004a68 <SBUS_Receive+0x90>)
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	4b15      	ldr	r3, [pc, #84]	@ (8004a68 <SBUS_Receive+0x90>)
 8004a12:	701a      	strb	r2, [r3, #0]
			}
			else{
				RxCount = 0;
			}
			break;
 8004a14:	e021      	b.n	8004a5a <SBUS_Receive+0x82>
				RxCount = 0;
 8004a16:	4b14      	ldr	r3, [pc, #80]	@ (8004a68 <SBUS_Receive+0x90>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	701a      	strb	r2, [r3, #0]
			break;
 8004a1c:	e01d      	b.n	8004a5a <SBUS_Receive+0x82>
		case 1:
			SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 8004a1e:	4b12      	ldr	r3, [pc, #72]	@ (8004a68 <SBUS_Receive+0x90>)
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	4619      	mov	r1, r3
 8004a24:	4a11      	ldr	r2, [pc, #68]	@ (8004a6c <SBUS_Receive+0x94>)
 8004a26:	79fb      	ldrb	r3, [r7, #7]
 8004a28:	5453      	strb	r3, [r2, r1]
			RxCount++;
 8004a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8004a68 <SBUS_Receive+0x90>)
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	b2da      	uxtb	r2, r3
 8004a32:	4b0d      	ldr	r3, [pc, #52]	@ (8004a68 <SBUS_Receive+0x90>)
 8004a34:	701a      	strb	r2, [r3, #0]
			if(RxCount == 24){
 8004a36:	4b0c      	ldr	r3, [pc, #48]	@ (8004a68 <SBUS_Receive+0x90>)
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	2b18      	cmp	r3, #24
 8004a3c:	d10c      	bne.n	8004a58 <SBUS_Receive+0x80>
				RxCount = 0;
 8004a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8004a68 <SBUS_Receive+0x90>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	701a      	strb	r2, [r3, #0]
				Actual_status = 0;
 8004a44:	4b07      	ldr	r3, [pc, #28]	@ (8004a64 <SBUS_Receive+0x8c>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	701a      	strb	r2, [r3, #0]
				SBUS_getData();
 8004a4a:	f000 f811 	bl	8004a70 <SBUS_getData>
			}
			break;
 8004a4e:	e003      	b.n	8004a58 <SBUS_Receive+0x80>
		default:
			Actual_status = 0;
 8004a50:	4b04      	ldr	r3, [pc, #16]	@ (8004a64 <SBUS_Receive+0x8c>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	701a      	strb	r2, [r3, #0]
			break;
 8004a56:	e000      	b.n	8004a5a <SBUS_Receive+0x82>
			break;
 8004a58:	bf00      	nop
	}
}
 8004a5a:	bf00      	nop
 8004a5c:	3708      	adds	r7, #8
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	24001682 	.word	0x24001682
 8004a68:	24001683 	.word	0x24001683
 8004a6c:	24001668 	.word	0x24001668

08004a70 <SBUS_getData>:


void SBUS_getData(void){
 8004a70:	b480      	push	{r7}
 8004a72:	af00      	add	r7, sp, #0
	//Se hace el corrimiento de bits para dar la estructura de los 16 canales, donde cada canal esta compuesto por 11 bits
	//pero cada paquete es de 1 byte. Para cada canal se utilizan los 8 bits (O los que correspondan) de el byte 1
	//(O el que corresponda) como los bits menos significativos del canal 1, y los tres bits faltantes se toman los 3 bits
	// menos significativos (O los que correspondan) del byte 2 y se colocan como los 3 bits más significativos del canal 1.
	Radio_input.Canal_1 = ((SBUS_UART_Rx[1] | SBUS_UART_Rx[2] << 8) & 0x07FF);
 8004a74:	4b95      	ldr	r3, [pc, #596]	@ (8004ccc <SBUS_getData+0x25c>)
 8004a76:	785b      	ldrb	r3, [r3, #1]
 8004a78:	b21a      	sxth	r2, r3
 8004a7a:	4b94      	ldr	r3, [pc, #592]	@ (8004ccc <SBUS_getData+0x25c>)
 8004a7c:	789b      	ldrb	r3, [r3, #2]
 8004a7e:	021b      	lsls	r3, r3, #8
 8004a80:	b21b      	sxth	r3, r3
 8004a82:	4313      	orrs	r3, r2
 8004a84:	b21b      	sxth	r3, r3
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	4b90      	ldr	r3, [pc, #576]	@ (8004cd0 <SBUS_getData+0x260>)
 8004a90:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_2 = ((SBUS_UART_Rx[2] >> 3 | SBUS_UART_Rx[3] << 5) & 0x07FF);
 8004a92:	4b8e      	ldr	r3, [pc, #568]	@ (8004ccc <SBUS_getData+0x25c>)
 8004a94:	789b      	ldrb	r3, [r3, #2]
 8004a96:	08db      	lsrs	r3, r3, #3
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	b21a      	sxth	r2, r3
 8004a9c:	4b8b      	ldr	r3, [pc, #556]	@ (8004ccc <SBUS_getData+0x25c>)
 8004a9e:	78db      	ldrb	r3, [r3, #3]
 8004aa0:	015b      	lsls	r3, r3, #5
 8004aa2:	b21b      	sxth	r3, r3
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	b21b      	sxth	r3, r3
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	4b87      	ldr	r3, [pc, #540]	@ (8004cd0 <SBUS_getData+0x260>)
 8004ab2:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_3 = ((SBUS_UART_Rx[3] >> 6 | SBUS_UART_Rx[4] << 2 | SBUS_UART_Rx[5] << 10) & 0x07FF);
 8004ab4:	4b85      	ldr	r3, [pc, #532]	@ (8004ccc <SBUS_getData+0x25c>)
 8004ab6:	78db      	ldrb	r3, [r3, #3]
 8004ab8:	099b      	lsrs	r3, r3, #6
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	b21a      	sxth	r2, r3
 8004abe:	4b83      	ldr	r3, [pc, #524]	@ (8004ccc <SBUS_getData+0x25c>)
 8004ac0:	791b      	ldrb	r3, [r3, #4]
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	b21b      	sxth	r3, r3
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	b21a      	sxth	r2, r3
 8004aca:	4b80      	ldr	r3, [pc, #512]	@ (8004ccc <SBUS_getData+0x25c>)
 8004acc:	795b      	ldrb	r3, [r3, #5]
 8004ace:	029b      	lsls	r3, r3, #10
 8004ad0:	b21b      	sxth	r3, r3
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	b21b      	sxth	r3, r3
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	4b7c      	ldr	r3, [pc, #496]	@ (8004cd0 <SBUS_getData+0x260>)
 8004ae0:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_4 = ((SBUS_UART_Rx[5] >> 1 | SBUS_UART_Rx[6] << 7) & 0x07FF);
 8004ae2:	4b7a      	ldr	r3, [pc, #488]	@ (8004ccc <SBUS_getData+0x25c>)
 8004ae4:	795b      	ldrb	r3, [r3, #5]
 8004ae6:	085b      	lsrs	r3, r3, #1
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	b21a      	sxth	r2, r3
 8004aec:	4b77      	ldr	r3, [pc, #476]	@ (8004ccc <SBUS_getData+0x25c>)
 8004aee:	799b      	ldrb	r3, [r3, #6]
 8004af0:	01db      	lsls	r3, r3, #7
 8004af2:	b21b      	sxth	r3, r3
 8004af4:	4313      	orrs	r3, r2
 8004af6:	b21b      	sxth	r3, r3
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	4b73      	ldr	r3, [pc, #460]	@ (8004cd0 <SBUS_getData+0x260>)
 8004b02:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_5 = ((SBUS_UART_Rx[6] >> 4 | SBUS_UART_Rx[7] << 4) & 0x07FF);
 8004b04:	4b71      	ldr	r3, [pc, #452]	@ (8004ccc <SBUS_getData+0x25c>)
 8004b06:	799b      	ldrb	r3, [r3, #6]
 8004b08:	091b      	lsrs	r3, r3, #4
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	b21a      	sxth	r2, r3
 8004b0e:	4b6f      	ldr	r3, [pc, #444]	@ (8004ccc <SBUS_getData+0x25c>)
 8004b10:	79db      	ldrb	r3, [r3, #7]
 8004b12:	011b      	lsls	r3, r3, #4
 8004b14:	b21b      	sxth	r3, r3
 8004b16:	4313      	orrs	r3, r2
 8004b18:	b21b      	sxth	r3, r3
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	4b6b      	ldr	r3, [pc, #428]	@ (8004cd0 <SBUS_getData+0x260>)
 8004b24:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_6 = ((SBUS_UART_Rx[7] >> 7 | SBUS_UART_Rx[8] << 1 | SBUS_UART_Rx[9] << 9) & 0x07FF);
 8004b26:	4b69      	ldr	r3, [pc, #420]	@ (8004ccc <SBUS_getData+0x25c>)
 8004b28:	79db      	ldrb	r3, [r3, #7]
 8004b2a:	09db      	lsrs	r3, r3, #7
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	b21a      	sxth	r2, r3
 8004b30:	4b66      	ldr	r3, [pc, #408]	@ (8004ccc <SBUS_getData+0x25c>)
 8004b32:	7a1b      	ldrb	r3, [r3, #8]
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	b21b      	sxth	r3, r3
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	b21a      	sxth	r2, r3
 8004b3c:	4b63      	ldr	r3, [pc, #396]	@ (8004ccc <SBUS_getData+0x25c>)
 8004b3e:	7a5b      	ldrb	r3, [r3, #9]
 8004b40:	025b      	lsls	r3, r3, #9
 8004b42:	b21b      	sxth	r3, r3
 8004b44:	4313      	orrs	r3, r2
 8004b46:	b21b      	sxth	r3, r3
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	4b5f      	ldr	r3, [pc, #380]	@ (8004cd0 <SBUS_getData+0x260>)
 8004b52:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_7 = ((SBUS_UART_Rx[9] >> 2 | SBUS_UART_Rx[10] << 6) & 0x07FF);
 8004b54:	4b5d      	ldr	r3, [pc, #372]	@ (8004ccc <SBUS_getData+0x25c>)
 8004b56:	7a5b      	ldrb	r3, [r3, #9]
 8004b58:	089b      	lsrs	r3, r3, #2
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	b21a      	sxth	r2, r3
 8004b5e:	4b5b      	ldr	r3, [pc, #364]	@ (8004ccc <SBUS_getData+0x25c>)
 8004b60:	7a9b      	ldrb	r3, [r3, #10]
 8004b62:	019b      	lsls	r3, r3, #6
 8004b64:	b21b      	sxth	r3, r3
 8004b66:	4313      	orrs	r3, r2
 8004b68:	b21b      	sxth	r3, r3
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	4b57      	ldr	r3, [pc, #348]	@ (8004cd0 <SBUS_getData+0x260>)
 8004b74:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_8 = ((SBUS_UART_Rx[10] >> 5 | SBUS_UART_Rx[11] << 3) & 0x07FF);
 8004b76:	4b55      	ldr	r3, [pc, #340]	@ (8004ccc <SBUS_getData+0x25c>)
 8004b78:	7a9b      	ldrb	r3, [r3, #10]
 8004b7a:	095b      	lsrs	r3, r3, #5
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	b21a      	sxth	r2, r3
 8004b80:	4b52      	ldr	r3, [pc, #328]	@ (8004ccc <SBUS_getData+0x25c>)
 8004b82:	7adb      	ldrb	r3, [r3, #11]
 8004b84:	00db      	lsls	r3, r3, #3
 8004b86:	b21b      	sxth	r3, r3
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	b21b      	sxth	r3, r3
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	4b4e      	ldr	r3, [pc, #312]	@ (8004cd0 <SBUS_getData+0x260>)
 8004b96:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_9 = ((SBUS_UART_Rx[12] | SBUS_UART_Rx[13] << 8) & 0x07FF);
 8004b98:	4b4c      	ldr	r3, [pc, #304]	@ (8004ccc <SBUS_getData+0x25c>)
 8004b9a:	7b1b      	ldrb	r3, [r3, #12]
 8004b9c:	b21a      	sxth	r2, r3
 8004b9e:	4b4b      	ldr	r3, [pc, #300]	@ (8004ccc <SBUS_getData+0x25c>)
 8004ba0:	7b5b      	ldrb	r3, [r3, #13]
 8004ba2:	021b      	lsls	r3, r3, #8
 8004ba4:	b21b      	sxth	r3, r3
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	b21b      	sxth	r3, r3
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	4b47      	ldr	r3, [pc, #284]	@ (8004cd0 <SBUS_getData+0x260>)
 8004bb4:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_10 = ((SBUS_UART_Rx[13] >> 3 | SBUS_UART_Rx[14] << 5) & 0x07FF);
 8004bb6:	4b45      	ldr	r3, [pc, #276]	@ (8004ccc <SBUS_getData+0x25c>)
 8004bb8:	7b5b      	ldrb	r3, [r3, #13]
 8004bba:	08db      	lsrs	r3, r3, #3
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	b21a      	sxth	r2, r3
 8004bc0:	4b42      	ldr	r3, [pc, #264]	@ (8004ccc <SBUS_getData+0x25c>)
 8004bc2:	7b9b      	ldrb	r3, [r3, #14]
 8004bc4:	015b      	lsls	r3, r3, #5
 8004bc6:	b21b      	sxth	r3, r3
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	b21b      	sxth	r3, r3
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	4b3e      	ldr	r3, [pc, #248]	@ (8004cd0 <SBUS_getData+0x260>)
 8004bd6:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_11 = ((SBUS_UART_Rx[14] >> 6 | SBUS_UART_Rx[15] << 2 | SBUS_UART_Rx[16] << 10) & 0x07FF);
 8004bd8:	4b3c      	ldr	r3, [pc, #240]	@ (8004ccc <SBUS_getData+0x25c>)
 8004bda:	7b9b      	ldrb	r3, [r3, #14]
 8004bdc:	099b      	lsrs	r3, r3, #6
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	b21a      	sxth	r2, r3
 8004be2:	4b3a      	ldr	r3, [pc, #232]	@ (8004ccc <SBUS_getData+0x25c>)
 8004be4:	7bdb      	ldrb	r3, [r3, #15]
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	b21b      	sxth	r3, r3
 8004bea:	4313      	orrs	r3, r2
 8004bec:	b21a      	sxth	r2, r3
 8004bee:	4b37      	ldr	r3, [pc, #220]	@ (8004ccc <SBUS_getData+0x25c>)
 8004bf0:	7c1b      	ldrb	r3, [r3, #16]
 8004bf2:	029b      	lsls	r3, r3, #10
 8004bf4:	b21b      	sxth	r3, r3
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	b21b      	sxth	r3, r3
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	4b33      	ldr	r3, [pc, #204]	@ (8004cd0 <SBUS_getData+0x260>)
 8004c04:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_12 = ((SBUS_UART_Rx[16] >> 1 | SBUS_UART_Rx[17] << 7) & 0x07FF);
 8004c06:	4b31      	ldr	r3, [pc, #196]	@ (8004ccc <SBUS_getData+0x25c>)
 8004c08:	7c1b      	ldrb	r3, [r3, #16]
 8004c0a:	085b      	lsrs	r3, r3, #1
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	b21a      	sxth	r2, r3
 8004c10:	4b2e      	ldr	r3, [pc, #184]	@ (8004ccc <SBUS_getData+0x25c>)
 8004c12:	7c5b      	ldrb	r3, [r3, #17]
 8004c14:	01db      	lsls	r3, r3, #7
 8004c16:	b21b      	sxth	r3, r3
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	b21b      	sxth	r3, r3
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	4b2a      	ldr	r3, [pc, #168]	@ (8004cd0 <SBUS_getData+0x260>)
 8004c26:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_13 = ((SBUS_UART_Rx[17] >> 4 | SBUS_UART_Rx[18] << 4) & 0x07FF);
 8004c28:	4b28      	ldr	r3, [pc, #160]	@ (8004ccc <SBUS_getData+0x25c>)
 8004c2a:	7c5b      	ldrb	r3, [r3, #17]
 8004c2c:	091b      	lsrs	r3, r3, #4
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	b21a      	sxth	r2, r3
 8004c32:	4b26      	ldr	r3, [pc, #152]	@ (8004ccc <SBUS_getData+0x25c>)
 8004c34:	7c9b      	ldrb	r3, [r3, #18]
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	b21b      	sxth	r3, r3
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	b21b      	sxth	r3, r3
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	4b22      	ldr	r3, [pc, #136]	@ (8004cd0 <SBUS_getData+0x260>)
 8004c48:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_14 = ((SBUS_UART_Rx[18] >> 7 | SBUS_UART_Rx[19] << 1 | SBUS_UART_Rx[20] << 9) & 0x07FF);
 8004c4a:	4b20      	ldr	r3, [pc, #128]	@ (8004ccc <SBUS_getData+0x25c>)
 8004c4c:	7c9b      	ldrb	r3, [r3, #18]
 8004c4e:	09db      	lsrs	r3, r3, #7
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	b21a      	sxth	r2, r3
 8004c54:	4b1d      	ldr	r3, [pc, #116]	@ (8004ccc <SBUS_getData+0x25c>)
 8004c56:	7cdb      	ldrb	r3, [r3, #19]
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	b21b      	sxth	r3, r3
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	b21a      	sxth	r2, r3
 8004c60:	4b1a      	ldr	r3, [pc, #104]	@ (8004ccc <SBUS_getData+0x25c>)
 8004c62:	7d1b      	ldrb	r3, [r3, #20]
 8004c64:	025b      	lsls	r3, r3, #9
 8004c66:	b21b      	sxth	r3, r3
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	b21b      	sxth	r3, r3
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	4b16      	ldr	r3, [pc, #88]	@ (8004cd0 <SBUS_getData+0x260>)
 8004c76:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_15 = ((SBUS_UART_Rx[20] >> 2 | SBUS_UART_Rx[21] << 6) & 0x07FF);
 8004c78:	4b14      	ldr	r3, [pc, #80]	@ (8004ccc <SBUS_getData+0x25c>)
 8004c7a:	7d1b      	ldrb	r3, [r3, #20]
 8004c7c:	089b      	lsrs	r3, r3, #2
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	b21a      	sxth	r2, r3
 8004c82:	4b12      	ldr	r3, [pc, #72]	@ (8004ccc <SBUS_getData+0x25c>)
 8004c84:	7d5b      	ldrb	r3, [r3, #21]
 8004c86:	019b      	lsls	r3, r3, #6
 8004c88:	b21b      	sxth	r3, r3
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	b21b      	sxth	r3, r3
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	4b0e      	ldr	r3, [pc, #56]	@ (8004cd0 <SBUS_getData+0x260>)
 8004c98:	83da      	strh	r2, [r3, #30]
	Radio_input.Canal_16 = ((SBUS_UART_Rx[21] >> 5 | SBUS_UART_Rx[22] << 3) & 0x07FF);
 8004c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8004ccc <SBUS_getData+0x25c>)
 8004c9c:	7d5b      	ldrb	r3, [r3, #21]
 8004c9e:	095b      	lsrs	r3, r3, #5
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	b21a      	sxth	r2, r3
 8004ca4:	4b09      	ldr	r3, [pc, #36]	@ (8004ccc <SBUS_getData+0x25c>)
 8004ca6:	7d9b      	ldrb	r3, [r3, #22]
 8004ca8:	00db      	lsls	r3, r3, #3
 8004caa:	b21b      	sxth	r3, r3
 8004cac:	4313      	orrs	r3, r2
 8004cae:	b21b      	sxth	r3, r3
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	4b05      	ldr	r3, [pc, #20]	@ (8004cd0 <SBUS_getData+0x260>)
 8004cba:	841a      	strh	r2, [r3, #32]

	Radio_input.Canal_1 = (uint16_t)((((float)Radio_input.Canal_1 - 352) /1344 ) * 1000) + 1000;
 8004cbc:	4b04      	ldr	r3, [pc, #16]	@ (8004cd0 <SBUS_getData+0x260>)
 8004cbe:	885b      	ldrh	r3, [r3, #2]
 8004cc0:	ee07 3a90 	vmov	s15, r3
 8004cc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cc8:	e00a      	b.n	8004ce0 <SBUS_getData+0x270>
 8004cca:	bf00      	nop
 8004ccc:	24001668 	.word	0x24001668
 8004cd0:	2400007c 	.word	0x2400007c
 8004cd4:	43b00000 	.word	0x43b00000
 8004cd8:	44a80000 	.word	0x44a80000
 8004cdc:	447a0000 	.word	0x447a0000
 8004ce0:	ed1f 7a04 	vldr	s14, [pc, #-16]	@ 8004cd4 <SBUS_getData+0x264>
 8004ce4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004ce8:	ed5f 6a05 	vldr	s13, [pc, #-20]	@ 8004cd8 <SBUS_getData+0x268>
 8004cec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004cf0:	ed1f 7a06 	vldr	s14, [pc, #-24]	@ 8004cdc <SBUS_getData+0x26c>
 8004cf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cfc:	ee17 3a90 	vmov	r3, s15
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	4bd1      	ldr	r3, [pc, #836]	@ (8005050 <SBUS_getData+0x5e0>)
 8004d0a:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_2 = (uint16_t)((((float)Radio_input.Canal_2 - 352) /1344 ) * 1000) + 1000;
 8004d0c:	4bd0      	ldr	r3, [pc, #832]	@ (8005050 <SBUS_getData+0x5e0>)
 8004d0e:	889b      	ldrh	r3, [r3, #4]
 8004d10:	ee07 3a90 	vmov	s15, r3
 8004d14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d18:	ed9f 7ace 	vldr	s14, [pc, #824]	@ 8005054 <SBUS_getData+0x5e4>
 8004d1c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004d20:	eddf 6acd 	vldr	s13, [pc, #820]	@ 8005058 <SBUS_getData+0x5e8>
 8004d24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d28:	ed9f 7acc 	vldr	s14, [pc, #816]	@ 800505c <SBUS_getData+0x5ec>
 8004d2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d34:	ee17 3a90 	vmov	r3, s15
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	4bc3      	ldr	r3, [pc, #780]	@ (8005050 <SBUS_getData+0x5e0>)
 8004d42:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_3 = (uint16_t)((((float)Radio_input.Canal_3 - 352) /1344 ) * 1000) + 1000;
 8004d44:	4bc2      	ldr	r3, [pc, #776]	@ (8005050 <SBUS_getData+0x5e0>)
 8004d46:	88db      	ldrh	r3, [r3, #6]
 8004d48:	ee07 3a90 	vmov	s15, r3
 8004d4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d50:	ed9f 7ac0 	vldr	s14, [pc, #768]	@ 8005054 <SBUS_getData+0x5e4>
 8004d54:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004d58:	eddf 6abf 	vldr	s13, [pc, #764]	@ 8005058 <SBUS_getData+0x5e8>
 8004d5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d60:	ed9f 7abe 	vldr	s14, [pc, #760]	@ 800505c <SBUS_getData+0x5ec>
 8004d64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d6c:	ee17 3a90 	vmov	r3, s15
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	4bb5      	ldr	r3, [pc, #724]	@ (8005050 <SBUS_getData+0x5e0>)
 8004d7a:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_4 = (uint16_t)((((float)Radio_input.Canal_4 - 352) /1344 ) * 1000) + 1000;
 8004d7c:	4bb4      	ldr	r3, [pc, #720]	@ (8005050 <SBUS_getData+0x5e0>)
 8004d7e:	891b      	ldrh	r3, [r3, #8]
 8004d80:	ee07 3a90 	vmov	s15, r3
 8004d84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d88:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 8005054 <SBUS_getData+0x5e4>
 8004d8c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004d90:	eddf 6ab1 	vldr	s13, [pc, #708]	@ 8005058 <SBUS_getData+0x5e8>
 8004d94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d98:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 800505c <SBUS_getData+0x5ec>
 8004d9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004da0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004da4:	ee17 3a90 	vmov	r3, s15
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	4ba7      	ldr	r3, [pc, #668]	@ (8005050 <SBUS_getData+0x5e0>)
 8004db2:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_5 = (uint16_t)((((float)Radio_input.Canal_5 - 352) /1344 ) * 1000) + 1000;
 8004db4:	4ba6      	ldr	r3, [pc, #664]	@ (8005050 <SBUS_getData+0x5e0>)
 8004db6:	895b      	ldrh	r3, [r3, #10]
 8004db8:	ee07 3a90 	vmov	s15, r3
 8004dbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dc0:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 8005054 <SBUS_getData+0x5e4>
 8004dc4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004dc8:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8005058 <SBUS_getData+0x5e8>
 8004dcc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004dd0:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 800505c <SBUS_getData+0x5ec>
 8004dd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ddc:	ee17 3a90 	vmov	r3, s15
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	4b99      	ldr	r3, [pc, #612]	@ (8005050 <SBUS_getData+0x5e0>)
 8004dea:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_6 = (uint16_t)((((float)Radio_input.Canal_6 - 352) /1344 ) * 1000) + 1000;
 8004dec:	4b98      	ldr	r3, [pc, #608]	@ (8005050 <SBUS_getData+0x5e0>)
 8004dee:	899b      	ldrh	r3, [r3, #12]
 8004df0:	ee07 3a90 	vmov	s15, r3
 8004df4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004df8:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8005054 <SBUS_getData+0x5e4>
 8004dfc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004e00:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8005058 <SBUS_getData+0x5e8>
 8004e04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004e08:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 800505c <SBUS_getData+0x5ec>
 8004e0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e14:	ee17 3a90 	vmov	r3, s15
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	4b8b      	ldr	r3, [pc, #556]	@ (8005050 <SBUS_getData+0x5e0>)
 8004e22:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_7 = (uint16_t)((((float)Radio_input.Canal_7 - 352) /1344 ) * 1000) + 1000;
 8004e24:	4b8a      	ldr	r3, [pc, #552]	@ (8005050 <SBUS_getData+0x5e0>)
 8004e26:	89db      	ldrh	r3, [r3, #14]
 8004e28:	ee07 3a90 	vmov	s15, r3
 8004e2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e30:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8005054 <SBUS_getData+0x5e4>
 8004e34:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004e38:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8005058 <SBUS_getData+0x5e8>
 8004e3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004e40:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 800505c <SBUS_getData+0x5ec>
 8004e44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e4c:	ee17 3a90 	vmov	r3, s15
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	4b7d      	ldr	r3, [pc, #500]	@ (8005050 <SBUS_getData+0x5e0>)
 8004e5a:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_8 = (uint16_t)((((float)Radio_input.Canal_8 - 352) /1344 ) * 1000) + 1000;
 8004e5c:	4b7c      	ldr	r3, [pc, #496]	@ (8005050 <SBUS_getData+0x5e0>)
 8004e5e:	8a1b      	ldrh	r3, [r3, #16]
 8004e60:	ee07 3a90 	vmov	s15, r3
 8004e64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e68:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8005054 <SBUS_getData+0x5e4>
 8004e6c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004e70:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8005058 <SBUS_getData+0x5e8>
 8004e74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004e78:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 800505c <SBUS_getData+0x5ec>
 8004e7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e84:	ee17 3a90 	vmov	r3, s15
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	4b6f      	ldr	r3, [pc, #444]	@ (8005050 <SBUS_getData+0x5e0>)
 8004e92:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_9 = (uint16_t)((((float)Radio_input.Canal_9 - 352) /1344 ) * 1000) + 1000;
 8004e94:	4b6e      	ldr	r3, [pc, #440]	@ (8005050 <SBUS_getData+0x5e0>)
 8004e96:	8a5b      	ldrh	r3, [r3, #18]
 8004e98:	ee07 3a90 	vmov	s15, r3
 8004e9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ea0:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8005054 <SBUS_getData+0x5e4>
 8004ea4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004ea8:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8005058 <SBUS_getData+0x5e8>
 8004eac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004eb0:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 800505c <SBUS_getData+0x5ec>
 8004eb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004eb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ebc:	ee17 3a90 	vmov	r3, s15
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	4b61      	ldr	r3, [pc, #388]	@ (8005050 <SBUS_getData+0x5e0>)
 8004eca:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_10 = (uint16_t)((((float)Radio_input.Canal_10 - 352) /1344 ) * 1000) + 1000;
 8004ecc:	4b60      	ldr	r3, [pc, #384]	@ (8005050 <SBUS_getData+0x5e0>)
 8004ece:	8a9b      	ldrh	r3, [r3, #20]
 8004ed0:	ee07 3a90 	vmov	s15, r3
 8004ed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ed8:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8005054 <SBUS_getData+0x5e4>
 8004edc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004ee0:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8005058 <SBUS_getData+0x5e8>
 8004ee4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ee8:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 800505c <SBUS_getData+0x5ec>
 8004eec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ef0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ef4:	ee17 3a90 	vmov	r3, s15
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	4b53      	ldr	r3, [pc, #332]	@ (8005050 <SBUS_getData+0x5e0>)
 8004f02:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_11 = (uint16_t)((((float)Radio_input.Canal_11 - 352) /1344 ) * 1000) + 1000;
 8004f04:	4b52      	ldr	r3, [pc, #328]	@ (8005050 <SBUS_getData+0x5e0>)
 8004f06:	8adb      	ldrh	r3, [r3, #22]
 8004f08:	ee07 3a90 	vmov	s15, r3
 8004f0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f10:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8005054 <SBUS_getData+0x5e4>
 8004f14:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004f18:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005058 <SBUS_getData+0x5e8>
 8004f1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f20:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 800505c <SBUS_getData+0x5ec>
 8004f24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f2c:	ee17 3a90 	vmov	r3, s15
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	4b45      	ldr	r3, [pc, #276]	@ (8005050 <SBUS_getData+0x5e0>)
 8004f3a:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_12 = (uint16_t)((((float)Radio_input.Canal_12 - 352) /1344 ) * 1000) + 1000;
 8004f3c:	4b44      	ldr	r3, [pc, #272]	@ (8005050 <SBUS_getData+0x5e0>)
 8004f3e:	8b1b      	ldrh	r3, [r3, #24]
 8004f40:	ee07 3a90 	vmov	s15, r3
 8004f44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f48:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8005054 <SBUS_getData+0x5e4>
 8004f4c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004f50:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8005058 <SBUS_getData+0x5e8>
 8004f54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f58:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 800505c <SBUS_getData+0x5ec>
 8004f5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f64:	ee17 3a90 	vmov	r3, s15
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	4b37      	ldr	r3, [pc, #220]	@ (8005050 <SBUS_getData+0x5e0>)
 8004f72:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_13 = (uint16_t)((((float)Radio_input.Canal_13 - 352) /1344 ) * 1000) + 1000;
 8004f74:	4b36      	ldr	r3, [pc, #216]	@ (8005050 <SBUS_getData+0x5e0>)
 8004f76:	8b5b      	ldrh	r3, [r3, #26]
 8004f78:	ee07 3a90 	vmov	s15, r3
 8004f7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f80:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8005054 <SBUS_getData+0x5e4>
 8004f84:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004f88:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8005058 <SBUS_getData+0x5e8>
 8004f8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f90:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800505c <SBUS_getData+0x5ec>
 8004f94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f9c:	ee17 3a90 	vmov	r3, s15
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	4b29      	ldr	r3, [pc, #164]	@ (8005050 <SBUS_getData+0x5e0>)
 8004faa:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_14 = (uint16_t)((((float)Radio_input.Canal_14 - 352) /1344 ) * 1000) + 1000;
 8004fac:	4b28      	ldr	r3, [pc, #160]	@ (8005050 <SBUS_getData+0x5e0>)
 8004fae:	8b9b      	ldrh	r3, [r3, #28]
 8004fb0:	ee07 3a90 	vmov	s15, r3
 8004fb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fb8:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8005054 <SBUS_getData+0x5e4>
 8004fbc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004fc0:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8005058 <SBUS_getData+0x5e8>
 8004fc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004fc8:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 800505c <SBUS_getData+0x5ec>
 8004fcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fd4:	ee17 3a90 	vmov	r3, s15
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8004fde:	b29a      	uxth	r2, r3
 8004fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8005050 <SBUS_getData+0x5e0>)
 8004fe2:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_15 = (uint16_t)((((float)Radio_input.Canal_15 - 352) /1344 ) * 1000) + 1000;
 8004fe4:	4b1a      	ldr	r3, [pc, #104]	@ (8005050 <SBUS_getData+0x5e0>)
 8004fe6:	8bdb      	ldrh	r3, [r3, #30]
 8004fe8:	ee07 3a90 	vmov	s15, r3
 8004fec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ff0:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8005054 <SBUS_getData+0x5e4>
 8004ff4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004ff8:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8005058 <SBUS_getData+0x5e8>
 8004ffc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005000:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800505c <SBUS_getData+0x5ec>
 8005004:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005008:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800500c:	ee17 3a90 	vmov	r3, s15
 8005010:	b29b      	uxth	r3, r3
 8005012:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8005016:	b29a      	uxth	r2, r3
 8005018:	4b0d      	ldr	r3, [pc, #52]	@ (8005050 <SBUS_getData+0x5e0>)
 800501a:	83da      	strh	r2, [r3, #30]
	Radio_input.Canal_16 = (uint16_t)((((float)Radio_input.Canal_16 - 352) /1344 ) * 1000) + 1000;
 800501c:	4b0c      	ldr	r3, [pc, #48]	@ (8005050 <SBUS_getData+0x5e0>)
 800501e:	8c1b      	ldrh	r3, [r3, #32]
 8005020:	ee07 3a90 	vmov	s15, r3
 8005024:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005028:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8005054 <SBUS_getData+0x5e4>
 800502c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005030:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8005058 <SBUS_getData+0x5e8>
 8005034:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005038:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800505c <SBUS_getData+0x5ec>
 800503c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005040:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005044:	ee17 3a90 	vmov	r3, s15
 8005048:	b29b      	uxth	r3, r3
 800504a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800504e:	e007      	b.n	8005060 <SBUS_getData+0x5f0>
 8005050:	2400007c 	.word	0x2400007c
 8005054:	43b00000 	.word	0x43b00000
 8005058:	44a80000 	.word	0x44a80000
 800505c:	447a0000 	.word	0x447a0000
 8005060:	b29a      	uxth	r2, r3
 8005062:	4b2a      	ldr	r3, [pc, #168]	@ (800510c <SBUS_getData+0x69c>)
 8005064:	841a      	strh	r2, [r3, #32]

	//En el caso del byte 24, el primer bit menos significativo corresponde al canal 17, el segundo al canal 18, el tercero a el fail safe y
	//el cuarto a la perdida de paquetes. Los 4 restantes no se utilizan.

	Radio_input.Banderas = SBUS_UART_Rx[23];
 8005066:	4b2a      	ldr	r3, [pc, #168]	@ (8005110 <SBUS_getData+0x6a0>)
 8005068:	7dda      	ldrb	r2, [r3, #23]
 800506a:	4b28      	ldr	r3, [pc, #160]	@ (800510c <SBUS_getData+0x69c>)
 800506c:	701a      	strb	r2, [r3, #0]
	if(SBUS_UART_Rx[23]>=8){
 800506e:	4b28      	ldr	r3, [pc, #160]	@ (8005110 <SBUS_getData+0x6a0>)
 8005070:	7ddb      	ldrb	r3, [r3, #23]
 8005072:	2b07      	cmp	r3, #7
 8005074:	d90a      	bls.n	800508c <SBUS_getData+0x61c>
		SBUS_UART_Rx[23]-=8;
 8005076:	4b26      	ldr	r3, [pc, #152]	@ (8005110 <SBUS_getData+0x6a0>)
 8005078:	7ddb      	ldrb	r3, [r3, #23]
 800507a:	3b08      	subs	r3, #8
 800507c:	b2da      	uxtb	r2, r3
 800507e:	4b24      	ldr	r3, [pc, #144]	@ (8005110 <SBUS_getData+0x6a0>)
 8005080:	75da      	strb	r2, [r3, #23]
		Radio_input.fail_safe = FailSafe;
 8005082:	4b22      	ldr	r3, [pc, #136]	@ (800510c <SBUS_getData+0x69c>)
 8005084:	2235      	movs	r2, #53	@ 0x35
 8005086:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 800508a:	e003      	b.n	8005094 <SBUS_getData+0x624>
	}else Radio_input.fail_safe= Ok;
 800508c:	4b1f      	ldr	r3, [pc, #124]	@ (800510c <SBUS_getData+0x69c>)
 800508e:	22aa      	movs	r2, #170	@ 0xaa
 8005090:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

	if(SBUS_UART_Rx[23]>=4){
 8005094:	4b1e      	ldr	r3, [pc, #120]	@ (8005110 <SBUS_getData+0x6a0>)
 8005096:	7ddb      	ldrb	r3, [r3, #23]
 8005098:	2b03      	cmp	r3, #3
 800509a:	d90a      	bls.n	80050b2 <SBUS_getData+0x642>
		SBUS_UART_Rx[23]-=4;
 800509c:	4b1c      	ldr	r3, [pc, #112]	@ (8005110 <SBUS_getData+0x6a0>)
 800509e:	7ddb      	ldrb	r3, [r3, #23]
 80050a0:	3b04      	subs	r3, #4
 80050a2:	b2da      	uxtb	r2, r3
 80050a4:	4b1a      	ldr	r3, [pc, #104]	@ (8005110 <SBUS_getData+0x6a0>)
 80050a6:	75da      	strb	r2, [r3, #23]
		Radio_input.pkg_lost = Pkg_Lost;
 80050a8:	4b18      	ldr	r3, [pc, #96]	@ (800510c <SBUS_getData+0x69c>)
 80050aa:	2210      	movs	r2, #16
 80050ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80050b0:	e003      	b.n	80050ba <SBUS_getData+0x64a>
	}else Radio_input.pkg_lost=Ok;
 80050b2:	4b16      	ldr	r3, [pc, #88]	@ (800510c <SBUS_getData+0x69c>)
 80050b4:	22aa      	movs	r2, #170	@ 0xaa
 80050b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if(SBUS_UART_Rx[23]>=2){
 80050ba:	4b15      	ldr	r3, [pc, #84]	@ (8005110 <SBUS_getData+0x6a0>)
 80050bc:	7ddb      	ldrb	r3, [r3, #23]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d90a      	bls.n	80050d8 <SBUS_getData+0x668>
		SBUS_UART_Rx[23]-=2;
 80050c2:	4b13      	ldr	r3, [pc, #76]	@ (8005110 <SBUS_getData+0x6a0>)
 80050c4:	7ddb      	ldrb	r3, [r3, #23]
 80050c6:	3b02      	subs	r3, #2
 80050c8:	b2da      	uxtb	r2, r3
 80050ca:	4b11      	ldr	r3, [pc, #68]	@ (8005110 <SBUS_getData+0x6a0>)
 80050cc:	75da      	strb	r2, [r3, #23]
		Radio_input.Interruptor_2=ON;
 80050ce:	4b0f      	ldr	r3, [pc, #60]	@ (800510c <SBUS_getData+0x69c>)
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 80050d6:	e003      	b.n	80050e0 <SBUS_getData+0x670>
	}else Radio_input.Interruptor_2=OFF;
 80050d8:	4b0c      	ldr	r3, [pc, #48]	@ (800510c <SBUS_getData+0x69c>)
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

	if(SBUS_UART_Rx[23]){
 80050e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005110 <SBUS_getData+0x6a0>)
 80050e2:	7ddb      	ldrb	r3, [r3, #23]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d004      	beq.n	80050f2 <SBUS_getData+0x682>
		Radio_input.Interruptor_1=ON;
 80050e8:	4b08      	ldr	r3, [pc, #32]	@ (800510c <SBUS_getData+0x69c>)
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 80050f0:	e003      	b.n	80050fa <SBUS_getData+0x68a>
	}else Radio_input.Interruptor_1=OFF;
 80050f2:	4b06      	ldr	r3, [pc, #24]	@ (800510c <SBUS_getData+0x69c>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22


	Radio_input.Uart_Counter = 0;
 80050fa:	4b04      	ldr	r3, [pc, #16]	@ (800510c <SBUS_getData+0x69c>)
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

}
 8005102:	bf00      	nop
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr
 800510c:	2400007c 	.word	0x2400007c
 8005110:	24001668 	.word	0x24001668

08005114 <SBUS_IntegrityVerification>:

void SBUS_IntegrityVerification(void){
 8005114:	b480      	push	{r7}
 8005116:	af00      	add	r7, sp, #0

	if(Radio_input.Uart_Counter != 255){
 8005118:	4b0f      	ldr	r3, [pc, #60]	@ (8005158 <SBUS_IntegrityVerification+0x44>)
 800511a:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800511e:	2bff      	cmp	r3, #255	@ 0xff
 8005120:	d00c      	beq.n	800513c <SBUS_IntegrityVerification+0x28>
		Radio_input.Uart_Counter++;
 8005122:	4b0d      	ldr	r3, [pc, #52]	@ (8005158 <SBUS_IntegrityVerification+0x44>)
 8005124:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8005128:	3301      	adds	r3, #1
 800512a:	b2da      	uxtb	r2, r3
 800512c:	4b0a      	ldr	r3, [pc, #40]	@ (8005158 <SBUS_IntegrityVerification+0x44>)
 800512e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		Radio_input.uart_error = Ok;
 8005132:	4b09      	ldr	r3, [pc, #36]	@ (8005158 <SBUS_IntegrityVerification+0x44>)
 8005134:	22aa      	movs	r2, #170	@ 0xaa
 8005136:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	}
	else{
		Radio_input.uart_error = Uart_Error;
		Radio_input.fail_safe = FailSafe;
	}
}
 800513a:	e007      	b.n	800514c <SBUS_IntegrityVerification+0x38>
		Radio_input.uart_error = Uart_Error;
 800513c:	4b06      	ldr	r3, [pc, #24]	@ (8005158 <SBUS_IntegrityVerification+0x44>)
 800513e:	2220      	movs	r2, #32
 8005140:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		Radio_input.fail_safe = FailSafe;
 8005144:	4b04      	ldr	r3, [pc, #16]	@ (8005158 <SBUS_IntegrityVerification+0x44>)
 8005146:	2235      	movs	r2, #53	@ 0x35
 8005148:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 800514c:	bf00      	nop
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	2400007c 	.word	0x2400007c

0800515c <SD_blackbox_refresh>:
void SD_blackbox_init(void){

	f_open(&BlackBox, BlackBoxFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
}

void SD_blackbox_refresh(void){
 800515c:	b480      	push	{r7}
 800515e:	af00      	add	r7, sp, #0

	blackbox_data.Time = TimeOn_Counter;
 8005160:	4b58      	ldr	r3, [pc, #352]	@ (80052c4 <SD_blackbox_refresh+0x168>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a58      	ldr	r2, [pc, #352]	@ (80052c8 <SD_blackbox_refresh+0x16c>)
 8005166:	6353      	str	r3, [r2, #52]	@ 0x34

	blackbox_data.Ax = IMU.ACC.x;
 8005168:	4b58      	ldr	r3, [pc, #352]	@ (80052cc <SD_blackbox_refresh+0x170>)
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	4a56      	ldr	r2, [pc, #344]	@ (80052c8 <SD_blackbox_refresh+0x16c>)
 800516e:	6013      	str	r3, [r2, #0]
	blackbox_data.Ay = IMU.ACC.y;
 8005170:	4b56      	ldr	r3, [pc, #344]	@ (80052cc <SD_blackbox_refresh+0x170>)
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	4a54      	ldr	r2, [pc, #336]	@ (80052c8 <SD_blackbox_refresh+0x16c>)
 8005176:	6053      	str	r3, [r2, #4]
	blackbox_data.Az = IMU.ACC.z;
 8005178:	4b54      	ldr	r3, [pc, #336]	@ (80052cc <SD_blackbox_refresh+0x170>)
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	4a52      	ldr	r2, [pc, #328]	@ (80052c8 <SD_blackbox_refresh+0x16c>)
 800517e:	6093      	str	r3, [r2, #8]

	blackbox_data.Gx = IMU.GYR.x;
 8005180:	4b52      	ldr	r3, [pc, #328]	@ (80052cc <SD_blackbox_refresh+0x170>)
 8005182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005184:	4a50      	ldr	r2, [pc, #320]	@ (80052c8 <SD_blackbox_refresh+0x16c>)
 8005186:	60d3      	str	r3, [r2, #12]
	blackbox_data.Gy = IMU.GYR.y;
 8005188:	4b50      	ldr	r3, [pc, #320]	@ (80052cc <SD_blackbox_refresh+0x170>)
 800518a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800518c:	4a4e      	ldr	r2, [pc, #312]	@ (80052c8 <SD_blackbox_refresh+0x16c>)
 800518e:	6113      	str	r3, [r2, #16]
	blackbox_data.Gz = IMU.GYR.z;
 8005190:	4b4e      	ldr	r3, [pc, #312]	@ (80052cc <SD_blackbox_refresh+0x170>)
 8005192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005194:	4a4c      	ldr	r2, [pc, #304]	@ (80052c8 <SD_blackbox_refresh+0x16c>)
 8005196:	6153      	str	r3, [r2, #20]

	blackbox_data.Gfx = 0;
 8005198:	4b4b      	ldr	r3, [pc, #300]	@ (80052c8 <SD_blackbox_refresh+0x16c>)
 800519a:	f04f 0200 	mov.w	r2, #0
 800519e:	619a      	str	r2, [r3, #24]
	blackbox_data.Gfy = 0;
 80051a0:	4b49      	ldr	r3, [pc, #292]	@ (80052c8 <SD_blackbox_refresh+0x16c>)
 80051a2:	f04f 0200 	mov.w	r2, #0
 80051a6:	61da      	str	r2, [r3, #28]
	blackbox_data.Gfz = 0;
 80051a8:	4b47      	ldr	r3, [pc, #284]	@ (80052c8 <SD_blackbox_refresh+0x16c>)
 80051aa:	f04f 0200 	mov.w	r2, #0
 80051ae:	621a      	str	r2, [r3, #32]

	blackbox_data.Roll    = IMU.Roll;
 80051b0:	4b46      	ldr	r3, [pc, #280]	@ (80052cc <SD_blackbox_refresh+0x170>)
 80051b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051b4:	4a44      	ldr	r2, [pc, #272]	@ (80052c8 <SD_blackbox_refresh+0x16c>)
 80051b6:	6253      	str	r3, [r2, #36]	@ 0x24
	blackbox_data.Pitch   = IMU.Pitch;
 80051b8:	4b44      	ldr	r3, [pc, #272]	@ (80052cc <SD_blackbox_refresh+0x170>)
 80051ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051bc:	4a42      	ldr	r2, [pc, #264]	@ (80052c8 <SD_blackbox_refresh+0x16c>)
 80051be:	6293      	str	r3, [r2, #40]	@ 0x28
	blackbox_data.Heading = IMU.Heading;
 80051c0:	4b42      	ldr	r3, [pc, #264]	@ (80052cc <SD_blackbox_refresh+0x170>)
 80051c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051c4:	4a40      	ldr	r2, [pc, #256]	@ (80052c8 <SD_blackbox_refresh+0x16c>)
 80051c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

	blackbox_data.Alt = BMP280.Barometric_Altitude;
 80051c8:	4b41      	ldr	r3, [pc, #260]	@ (80052d0 <SD_blackbox_refresh+0x174>)
 80051ca:	8a1a      	ldrh	r2, [r3, #16]
 80051cc:	4b3e      	ldr	r3, [pc, #248]	@ (80052c8 <SD_blackbox_refresh+0x16c>)
 80051ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	blackbox_data.Latitude = 0;
 80051d2:	4b3d      	ldr	r3, [pc, #244]	@ (80052c8 <SD_blackbox_refresh+0x16c>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	639a      	str	r2, [r3, #56]	@ 0x38
	blackbox_data.Longitude= 0;
 80051d8:	4b3b      	ldr	r3, [pc, #236]	@ (80052c8 <SD_blackbox_refresh+0x16c>)
 80051da:	2200      	movs	r2, #0
 80051dc:	63da      	str	r2, [r3, #60]	@ 0x3c

	blackbox_data.ARSP = 0;
 80051de:	4b3a      	ldr	r3, [pc, #232]	@ (80052c8 <SD_blackbox_refresh+0x16c>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

	blackbox_data.Pressure = BMP280.Pressure;
 80051e6:	4b3a      	ldr	r3, [pc, #232]	@ (80052d0 <SD_blackbox_refresh+0x174>)
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	4a37      	ldr	r2, [pc, #220]	@ (80052c8 <SD_blackbox_refresh+0x16c>)
 80051ec:	6413      	str	r3, [r2, #64]	@ 0x40

	blackbox_data.SBUS_Flags = Radio_input.Banderas;
 80051ee:	4b39      	ldr	r3, [pc, #228]	@ (80052d4 <SD_blackbox_refresh+0x178>)
 80051f0:	781a      	ldrb	r2, [r3, #0]
 80051f2:	4b35      	ldr	r3, [pc, #212]	@ (80052c8 <SD_blackbox_refresh+0x16c>)
 80051f4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
	blackbox_data.Flight_Mode = 0;
 80051f8:	4b33      	ldr	r3, [pc, #204]	@ (80052c8 <SD_blackbox_refresh+0x16c>)
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

	blackbox_data.Canal_1 = Radio_input.Canal_1;
 8005200:	4b34      	ldr	r3, [pc, #208]	@ (80052d4 <SD_blackbox_refresh+0x178>)
 8005202:	885a      	ldrh	r2, [r3, #2]
 8005204:	4b30      	ldr	r3, [pc, #192]	@ (80052c8 <SD_blackbox_refresh+0x16c>)
 8005206:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	blackbox_data.Canal_2 = Radio_input.Canal_2;
 800520a:	4b32      	ldr	r3, [pc, #200]	@ (80052d4 <SD_blackbox_refresh+0x178>)
 800520c:	889a      	ldrh	r2, [r3, #4]
 800520e:	4b2e      	ldr	r3, [pc, #184]	@ (80052c8 <SD_blackbox_refresh+0x16c>)
 8005210:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
	blackbox_data.Canal_3 = Radio_input.Canal_3;
 8005214:	4b2f      	ldr	r3, [pc, #188]	@ (80052d4 <SD_blackbox_refresh+0x178>)
 8005216:	88da      	ldrh	r2, [r3, #6]
 8005218:	4b2b      	ldr	r3, [pc, #172]	@ (80052c8 <SD_blackbox_refresh+0x16c>)
 800521a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
	blackbox_data.Canal_4 = Radio_input.Canal_4;
 800521e:	4b2d      	ldr	r3, [pc, #180]	@ (80052d4 <SD_blackbox_refresh+0x178>)
 8005220:	891a      	ldrh	r2, [r3, #8]
 8005222:	4b29      	ldr	r3, [pc, #164]	@ (80052c8 <SD_blackbox_refresh+0x16c>)
 8005224:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
	blackbox_data.Canal_5 = Radio_input.Canal_5;
 8005228:	4b2a      	ldr	r3, [pc, #168]	@ (80052d4 <SD_blackbox_refresh+0x178>)
 800522a:	895a      	ldrh	r2, [r3, #10]
 800522c:	4b26      	ldr	r3, [pc, #152]	@ (80052c8 <SD_blackbox_refresh+0x16c>)
 800522e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
	blackbox_data.Canal_6 = Radio_input.Canal_6;
 8005232:	4b28      	ldr	r3, [pc, #160]	@ (80052d4 <SD_blackbox_refresh+0x178>)
 8005234:	899a      	ldrh	r2, [r3, #12]
 8005236:	4b24      	ldr	r3, [pc, #144]	@ (80052c8 <SD_blackbox_refresh+0x16c>)
 8005238:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
	blackbox_data.Canal_7 = Radio_input.Canal_7;
 800523c:	4b25      	ldr	r3, [pc, #148]	@ (80052d4 <SD_blackbox_refresh+0x178>)
 800523e:	89da      	ldrh	r2, [r3, #14]
 8005240:	4b21      	ldr	r3, [pc, #132]	@ (80052c8 <SD_blackbox_refresh+0x16c>)
 8005242:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
	blackbox_data.Canal_8 = Radio_input.Canal_8;
 8005246:	4b23      	ldr	r3, [pc, #140]	@ (80052d4 <SD_blackbox_refresh+0x178>)
 8005248:	8a1a      	ldrh	r2, [r3, #16]
 800524a:	4b1f      	ldr	r3, [pc, #124]	@ (80052c8 <SD_blackbox_refresh+0x16c>)
 800524c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
	blackbox_data.Canal_9 = Radio_input.Canal_9;
 8005250:	4b20      	ldr	r3, [pc, #128]	@ (80052d4 <SD_blackbox_refresh+0x178>)
 8005252:	8a5a      	ldrh	r2, [r3, #18]
 8005254:	4b1c      	ldr	r3, [pc, #112]	@ (80052c8 <SD_blackbox_refresh+0x16c>)
 8005256:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
	blackbox_data.Canal_10 = Radio_input.Canal_10;
 800525a:	4b1e      	ldr	r3, [pc, #120]	@ (80052d4 <SD_blackbox_refresh+0x178>)
 800525c:	8a9a      	ldrh	r2, [r3, #20]
 800525e:	4b1a      	ldr	r3, [pc, #104]	@ (80052c8 <SD_blackbox_refresh+0x16c>)
 8005260:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
	blackbox_data.Canal_11 = Radio_input.Canal_11;
 8005264:	4b1b      	ldr	r3, [pc, #108]	@ (80052d4 <SD_blackbox_refresh+0x178>)
 8005266:	8ada      	ldrh	r2, [r3, #22]
 8005268:	4b17      	ldr	r3, [pc, #92]	@ (80052c8 <SD_blackbox_refresh+0x16c>)
 800526a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
	blackbox_data.Canal_12 = Radio_input.Canal_12;
 800526e:	4b19      	ldr	r3, [pc, #100]	@ (80052d4 <SD_blackbox_refresh+0x178>)
 8005270:	8b1a      	ldrh	r2, [r3, #24]
 8005272:	4b15      	ldr	r3, [pc, #84]	@ (80052c8 <SD_blackbox_refresh+0x16c>)
 8005274:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
	blackbox_data.Canal_13 = Radio_input.Canal_13;
 8005278:	4b16      	ldr	r3, [pc, #88]	@ (80052d4 <SD_blackbox_refresh+0x178>)
 800527a:	8b5a      	ldrh	r2, [r3, #26]
 800527c:	4b12      	ldr	r3, [pc, #72]	@ (80052c8 <SD_blackbox_refresh+0x16c>)
 800527e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
	blackbox_data.Canal_14 = Radio_input.Canal_14;
 8005282:	4b14      	ldr	r3, [pc, #80]	@ (80052d4 <SD_blackbox_refresh+0x178>)
 8005284:	8b9a      	ldrh	r2, [r3, #28]
 8005286:	4b10      	ldr	r3, [pc, #64]	@ (80052c8 <SD_blackbox_refresh+0x16c>)
 8005288:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
	blackbox_data.Canal_15 = Radio_input.Canal_15;
 800528c:	4b11      	ldr	r3, [pc, #68]	@ (80052d4 <SD_blackbox_refresh+0x178>)
 800528e:	8bda      	ldrh	r2, [r3, #30]
 8005290:	4b0d      	ldr	r3, [pc, #52]	@ (80052c8 <SD_blackbox_refresh+0x16c>)
 8005292:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
	blackbox_data.Canal_16 = Radio_input.Canal_16;
 8005296:	4b0f      	ldr	r3, [pc, #60]	@ (80052d4 <SD_blackbox_refresh+0x178>)
 8005298:	8c1a      	ldrh	r2, [r3, #32]
 800529a:	4b0b      	ldr	r3, [pc, #44]	@ (80052c8 <SD_blackbox_refresh+0x16c>)
 800529c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

	blackbox_data.Interruptor_1 = Radio_input.Interruptor_1;
 80052a0:	4b0c      	ldr	r3, [pc, #48]	@ (80052d4 <SD_blackbox_refresh+0x178>)
 80052a2:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80052a6:	4b08      	ldr	r3, [pc, #32]	@ (80052c8 <SD_blackbox_refresh+0x16c>)
 80052a8:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
	blackbox_data.Interruptor_2 = Radio_input.Interruptor_2;
 80052ac:	4b09      	ldr	r3, [pc, #36]	@ (80052d4 <SD_blackbox_refresh+0x178>)
 80052ae:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 80052b2:	4b05      	ldr	r3, [pc, #20]	@ (80052c8 <SD_blackbox_refresh+0x16c>)
 80052b4:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
//	blackbox_data.OUT6  = PWM_Output.Canal_6;
//	blackbox_data.OUT7  = PWM_Output.Canal_7;
//	blackbox_data.OUT8  = PWM_Output.Canal_8;
//	blackbox_data.OUT9  = PWM_Output.Canal_9;
//	blackbox_data.OUT10 = PWM_Output.Canal_10;
}
 80052b8:	bf00      	nop
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	24000d74 	.word	0x24000d74
 80052c8:	240028ac 	.word	0x240028ac
 80052cc:	24001500 	.word	0x24001500
 80052d0:	240013c0 	.word	0x240013c0
 80052d4:	2400007c 	.word	0x2400007c

080052d8 <SD_blackbox_write>:
	BlackBoxFile[4] = ActualFile[4];

	f_open(&BlackBox, BlackBoxFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
}

void SD_blackbox_write(void){
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
	static uint8_t NewFileCount = 0;
	static uint32_t DataCount = 0;
	static uint16_t WriteCount = 0;

	SD_blackbox_refresh();
 80052de:	f7ff ff3d 	bl	800515c <SD_blackbox_refresh>

	blackbox_data.Nmsg = DataCount;
 80052e2:	4b26      	ldr	r3, [pc, #152]	@ (800537c <SD_blackbox_write+0xa4>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a26      	ldr	r2, [pc, #152]	@ (8005380 <SD_blackbox_write+0xa8>)
 80052e8:	6313      	str	r3, [r2, #48]	@ 0x30
	memcpy(&BlackBoxBuffer[WriteCount],&blackbox_data,sizeof(blackbox_data));
 80052ea:	4b26      	ldr	r3, [pc, #152]	@ (8005384 <SD_blackbox_write+0xac>)
 80052ec:	881b      	ldrh	r3, [r3, #0]
 80052ee:	461a      	mov	r2, r3
 80052f0:	4613      	mov	r3, r2
 80052f2:	021b      	lsls	r3, r3, #8
 80052f4:	1a9b      	subs	r3, r3, r2
 80052f6:	4a24      	ldr	r2, [pc, #144]	@ (8005388 <SD_blackbox_write+0xb0>)
 80052f8:	4413      	add	r3, r2
 80052fa:	2280      	movs	r2, #128	@ 0x80
 80052fc:	4920      	ldr	r1, [pc, #128]	@ (8005380 <SD_blackbox_write+0xa8>)
 80052fe:	4618      	mov	r0, r3
 8005300:	f011 fb5b 	bl	80169ba <memcpy>

	if(WriteCount == 15){
 8005304:	4b1f      	ldr	r3, [pc, #124]	@ (8005384 <SD_blackbox_write+0xac>)
 8005306:	881b      	ldrh	r3, [r3, #0]
 8005308:	2b0f      	cmp	r3, #15
 800530a:	d129      	bne.n	8005360 <SD_blackbox_write+0x88>
		for (uint8_t n = 0; n < 16; ++n) {
 800530c:	2300      	movs	r3, #0
 800530e:	71fb      	strb	r3, [r7, #7]
 8005310:	e00d      	b.n	800532e <SD_blackbox_write+0x56>
			f_write(&BlackBox, &BlackBoxBuffer[n], sizeof(blackbox_data), &bw);
 8005312:	79fa      	ldrb	r2, [r7, #7]
 8005314:	4613      	mov	r3, r2
 8005316:	021b      	lsls	r3, r3, #8
 8005318:	1a9b      	subs	r3, r3, r2
 800531a:	4a1b      	ldr	r2, [pc, #108]	@ (8005388 <SD_blackbox_write+0xb0>)
 800531c:	1899      	adds	r1, r3, r2
 800531e:	4b1b      	ldr	r3, [pc, #108]	@ (800538c <SD_blackbox_write+0xb4>)
 8005320:	2280      	movs	r2, #128	@ 0x80
 8005322:	481b      	ldr	r0, [pc, #108]	@ (8005390 <SD_blackbox_write+0xb8>)
 8005324:	f00d fe67 	bl	8012ff6 <f_write>
		for (uint8_t n = 0; n < 16; ++n) {
 8005328:	79fb      	ldrb	r3, [r7, #7]
 800532a:	3301      	adds	r3, #1
 800532c:	71fb      	strb	r3, [r7, #7]
 800532e:	79fb      	ldrb	r3, [r7, #7]
 8005330:	2b0f      	cmp	r3, #15
 8005332:	d9ee      	bls.n	8005312 <SD_blackbox_write+0x3a>
		}
		fresult = f_sync(&BlackBox);
 8005334:	4816      	ldr	r0, [pc, #88]	@ (8005390 <SD_blackbox_write+0xb8>)
 8005336:	f00e f802 	bl	801333e <f_sync>
 800533a:	4603      	mov	r3, r0
 800533c:	461a      	mov	r2, r3
 800533e:	4b15      	ldr	r3, [pc, #84]	@ (8005394 <SD_blackbox_write+0xbc>)
 8005340:	701a      	strb	r2, [r3, #0]
		WriteCount = 0;
 8005342:	4b10      	ldr	r3, [pc, #64]	@ (8005384 <SD_blackbox_write+0xac>)
 8005344:	2200      	movs	r2, #0
 8005346:	801a      	strh	r2, [r3, #0]
		++NewFileCount;
 8005348:	4b13      	ldr	r3, [pc, #76]	@ (8005398 <SD_blackbox_write+0xc0>)
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	3301      	adds	r3, #1
 800534e:	b2da      	uxtb	r2, r3
 8005350:	4b11      	ldr	r3, [pc, #68]	@ (8005398 <SD_blackbox_write+0xc0>)
 8005352:	701a      	strb	r2, [r3, #0]
		++DataCount;
 8005354:	4b09      	ldr	r3, [pc, #36]	@ (800537c <SD_blackbox_write+0xa4>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	3301      	adds	r3, #1
 800535a:	4a08      	ldr	r2, [pc, #32]	@ (800537c <SD_blackbox_write+0xa4>)
 800535c:	6013      	str	r3, [r2, #0]
		return;
 800535e:	e00a      	b.n	8005376 <SD_blackbox_write+0x9e>
	}
	++WriteCount;
 8005360:	4b08      	ldr	r3, [pc, #32]	@ (8005384 <SD_blackbox_write+0xac>)
 8005362:	881b      	ldrh	r3, [r3, #0]
 8005364:	3301      	adds	r3, #1
 8005366:	b29a      	uxth	r2, r3
 8005368:	4b06      	ldr	r3, [pc, #24]	@ (8005384 <SD_blackbox_write+0xac>)
 800536a:	801a      	strh	r2, [r3, #0]
	++DataCount;
 800536c:	4b03      	ldr	r3, [pc, #12]	@ (800537c <SD_blackbox_write+0xa4>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	3301      	adds	r3, #1
 8005372:	4a02      	ldr	r2, [pc, #8]	@ (800537c <SD_blackbox_write+0xa4>)
 8005374:	6013      	str	r3, [r2, #0]
}
 8005376:	3708      	adds	r7, #8
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	2400292c 	.word	0x2400292c
 8005380:	240028ac 	.word	0x240028ac
 8005384:	24002930 	.word	0x24002930
 8005388:	240018bc 	.word	0x240018bc
 800538c:	240018b8 	.word	0x240018b8
 8005390:	24001684 	.word	0x24001684
 8005394:	240018b4 	.word	0x240018b4
 8005398:	24002932 	.word	0x24002932

0800539c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800539c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80053d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80053a0:	f7fd f826 	bl	80023f0 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80053a4:	480c      	ldr	r0, [pc, #48]	@ (80053d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80053a6:	490d      	ldr	r1, [pc, #52]	@ (80053dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80053a8:	4a0d      	ldr	r2, [pc, #52]	@ (80053e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80053aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80053ac:	e002      	b.n	80053b4 <LoopCopyDataInit>

080053ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80053ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80053b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80053b2:	3304      	adds	r3, #4

080053b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80053b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80053b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80053b8:	d3f9      	bcc.n	80053ae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80053ba:	4a0a      	ldr	r2, [pc, #40]	@ (80053e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80053bc:	4c0a      	ldr	r4, [pc, #40]	@ (80053e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80053be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80053c0:	e001      	b.n	80053c6 <LoopFillZerobss>

080053c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80053c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80053c4:	3204      	adds	r2, #4

080053c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80053c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80053c8:	d3fb      	bcc.n	80053c2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80053ca:	f011 facf 	bl	801696c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80053ce:	f7fc fba9 	bl	8001b24 <main>
  bx  lr
 80053d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80053d4:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80053d8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80053dc:	24000290 	.word	0x24000290
  ldr r2, =_sidata
 80053e0:	08019670 	.word	0x08019670
  ldr r2, =_sbss
 80053e4:	24000290 	.word	0x24000290
  ldr r4, =_ebss
 80053e8:	240067f4 	.word	0x240067f4

080053ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80053ec:	e7fe      	b.n	80053ec <ADC_IRQHandler>
	...

080053f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80053f6:	2003      	movs	r0, #3
 80053f8:	f000 f927 	bl	800564a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80053fc:	f004 fd3e 	bl	8009e7c <HAL_RCC_GetSysClockFreq>
 8005400:	4602      	mov	r2, r0
 8005402:	4b15      	ldr	r3, [pc, #84]	@ (8005458 <HAL_Init+0x68>)
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	0a1b      	lsrs	r3, r3, #8
 8005408:	f003 030f 	and.w	r3, r3, #15
 800540c:	4913      	ldr	r1, [pc, #76]	@ (800545c <HAL_Init+0x6c>)
 800540e:	5ccb      	ldrb	r3, [r1, r3]
 8005410:	f003 031f 	and.w	r3, r3, #31
 8005414:	fa22 f303 	lsr.w	r3, r2, r3
 8005418:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800541a:	4b0f      	ldr	r3, [pc, #60]	@ (8005458 <HAL_Init+0x68>)
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	f003 030f 	and.w	r3, r3, #15
 8005422:	4a0e      	ldr	r2, [pc, #56]	@ (800545c <HAL_Init+0x6c>)
 8005424:	5cd3      	ldrb	r3, [r2, r3]
 8005426:	f003 031f 	and.w	r3, r3, #31
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	fa22 f303 	lsr.w	r3, r2, r3
 8005430:	4a0b      	ldr	r2, [pc, #44]	@ (8005460 <HAL_Init+0x70>)
 8005432:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005434:	4a0b      	ldr	r2, [pc, #44]	@ (8005464 <HAL_Init+0x74>)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800543a:	200f      	movs	r0, #15
 800543c:	f7fc fe42 	bl	80020c4 <HAL_InitTick>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e002      	b.n	8005450 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800544a:	f7fc fe1d 	bl	8002088 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3708      	adds	r7, #8
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	58024400 	.word	0x58024400
 800545c:	080189d4 	.word	0x080189d4
 8005460:	24000004 	.word	0x24000004
 8005464:	24000000 	.word	0x24000000

08005468 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005468:	b480      	push	{r7}
 800546a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800546c:	4b06      	ldr	r3, [pc, #24]	@ (8005488 <HAL_IncTick+0x20>)
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	461a      	mov	r2, r3
 8005472:	4b06      	ldr	r3, [pc, #24]	@ (800548c <HAL_IncTick+0x24>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4413      	add	r3, r2
 8005478:	4a04      	ldr	r2, [pc, #16]	@ (800548c <HAL_IncTick+0x24>)
 800547a:	6013      	str	r3, [r2, #0]
}
 800547c:	bf00      	nop
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	240000a8 	.word	0x240000a8
 800548c:	24002934 	.word	0x24002934

08005490 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005490:	b480      	push	{r7}
 8005492:	af00      	add	r7, sp, #0
  return uwTick;
 8005494:	4b03      	ldr	r3, [pc, #12]	@ (80054a4 <HAL_GetTick+0x14>)
 8005496:	681b      	ldr	r3, [r3, #0]
}
 8005498:	4618      	mov	r0, r3
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	24002934 	.word	0x24002934

080054a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80054b0:	f7ff ffee 	bl	8005490 <HAL_GetTick>
 80054b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c0:	d005      	beq.n	80054ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80054c2:	4b0a      	ldr	r3, [pc, #40]	@ (80054ec <HAL_Delay+0x44>)
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	461a      	mov	r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	4413      	add	r3, r2
 80054cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80054ce:	bf00      	nop
 80054d0:	f7ff ffde 	bl	8005490 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d8f7      	bhi.n	80054d0 <HAL_Delay+0x28>
  {
  }
}
 80054e0:	bf00      	nop
 80054e2:	bf00      	nop
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	240000a8 	.word	0x240000a8

080054f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f003 0307 	and.w	r3, r3, #7
 80054fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005500:	4b0b      	ldr	r3, [pc, #44]	@ (8005530 <__NVIC_SetPriorityGrouping+0x40>)
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800550c:	4013      	ands	r3, r2
 800550e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005518:	4b06      	ldr	r3, [pc, #24]	@ (8005534 <__NVIC_SetPriorityGrouping+0x44>)
 800551a:	4313      	orrs	r3, r2
 800551c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800551e:	4a04      	ldr	r2, [pc, #16]	@ (8005530 <__NVIC_SetPriorityGrouping+0x40>)
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	60d3      	str	r3, [r2, #12]
}
 8005524:	bf00      	nop
 8005526:	3714      	adds	r7, #20
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr
 8005530:	e000ed00 	.word	0xe000ed00
 8005534:	05fa0000 	.word	0x05fa0000

08005538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005538:	b480      	push	{r7}
 800553a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800553c:	4b04      	ldr	r3, [pc, #16]	@ (8005550 <__NVIC_GetPriorityGrouping+0x18>)
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	0a1b      	lsrs	r3, r3, #8
 8005542:	f003 0307 	and.w	r3, r3, #7
}
 8005546:	4618      	mov	r0, r3
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr
 8005550:	e000ed00 	.word	0xe000ed00

08005554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	4603      	mov	r3, r0
 800555c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800555e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005562:	2b00      	cmp	r3, #0
 8005564:	db0b      	blt.n	800557e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005566:	88fb      	ldrh	r3, [r7, #6]
 8005568:	f003 021f 	and.w	r2, r3, #31
 800556c:	4907      	ldr	r1, [pc, #28]	@ (800558c <__NVIC_EnableIRQ+0x38>)
 800556e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005572:	095b      	lsrs	r3, r3, #5
 8005574:	2001      	movs	r0, #1
 8005576:	fa00 f202 	lsl.w	r2, r0, r2
 800557a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800557e:	bf00      	nop
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	e000e100 	.word	0xe000e100

08005590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	4603      	mov	r3, r0
 8005598:	6039      	str	r1, [r7, #0]
 800559a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800559c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	db0a      	blt.n	80055ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	b2da      	uxtb	r2, r3
 80055a8:	490c      	ldr	r1, [pc, #48]	@ (80055dc <__NVIC_SetPriority+0x4c>)
 80055aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055ae:	0112      	lsls	r2, r2, #4
 80055b0:	b2d2      	uxtb	r2, r2
 80055b2:	440b      	add	r3, r1
 80055b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80055b8:	e00a      	b.n	80055d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	b2da      	uxtb	r2, r3
 80055be:	4908      	ldr	r1, [pc, #32]	@ (80055e0 <__NVIC_SetPriority+0x50>)
 80055c0:	88fb      	ldrh	r3, [r7, #6]
 80055c2:	f003 030f 	and.w	r3, r3, #15
 80055c6:	3b04      	subs	r3, #4
 80055c8:	0112      	lsls	r2, r2, #4
 80055ca:	b2d2      	uxtb	r2, r2
 80055cc:	440b      	add	r3, r1
 80055ce:	761a      	strb	r2, [r3, #24]
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr
 80055dc:	e000e100 	.word	0xe000e100
 80055e0:	e000ed00 	.word	0xe000ed00

080055e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b089      	sub	sp, #36	@ 0x24
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f003 0307 	and.w	r3, r3, #7
 80055f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	f1c3 0307 	rsb	r3, r3, #7
 80055fe:	2b04      	cmp	r3, #4
 8005600:	bf28      	it	cs
 8005602:	2304      	movcs	r3, #4
 8005604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	3304      	adds	r3, #4
 800560a:	2b06      	cmp	r3, #6
 800560c:	d902      	bls.n	8005614 <NVIC_EncodePriority+0x30>
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	3b03      	subs	r3, #3
 8005612:	e000      	b.n	8005616 <NVIC_EncodePriority+0x32>
 8005614:	2300      	movs	r3, #0
 8005616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005618:	f04f 32ff 	mov.w	r2, #4294967295
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	fa02 f303 	lsl.w	r3, r2, r3
 8005622:	43da      	mvns	r2, r3
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	401a      	ands	r2, r3
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800562c:	f04f 31ff 	mov.w	r1, #4294967295
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	fa01 f303 	lsl.w	r3, r1, r3
 8005636:	43d9      	mvns	r1, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800563c:	4313      	orrs	r3, r2
         );
}
 800563e:	4618      	mov	r0, r3
 8005640:	3724      	adds	r7, #36	@ 0x24
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b082      	sub	sp, #8
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f7ff ff4c 	bl	80054f0 <__NVIC_SetPriorityGrouping>
}
 8005658:	bf00      	nop
 800565a:	3708      	adds	r7, #8
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	4603      	mov	r3, r0
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
 800566c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800566e:	f7ff ff63 	bl	8005538 <__NVIC_GetPriorityGrouping>
 8005672:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	68b9      	ldr	r1, [r7, #8]
 8005678:	6978      	ldr	r0, [r7, #20]
 800567a:	f7ff ffb3 	bl	80055e4 <NVIC_EncodePriority>
 800567e:	4602      	mov	r2, r0
 8005680:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005684:	4611      	mov	r1, r2
 8005686:	4618      	mov	r0, r3
 8005688:	f7ff ff82 	bl	8005590 <__NVIC_SetPriority>
}
 800568c:	bf00      	nop
 800568e:	3718      	adds	r7, #24
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	4603      	mov	r3, r0
 800569c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800569e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7ff ff56 	bl	8005554 <__NVIC_EnableIRQ>
}
 80056a8:	bf00      	nop
 80056aa:	3708      	adds	r7, #8
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80056b0:	b480      	push	{r7}
 80056b2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80056b4:	f3bf 8f5f 	dmb	sy
}
 80056b8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80056ba:	4b07      	ldr	r3, [pc, #28]	@ (80056d8 <HAL_MPU_Disable+0x28>)
 80056bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056be:	4a06      	ldr	r2, [pc, #24]	@ (80056d8 <HAL_MPU_Disable+0x28>)
 80056c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056c4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80056c6:	4b05      	ldr	r3, [pc, #20]	@ (80056dc <HAL_MPU_Disable+0x2c>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	605a      	str	r2, [r3, #4]
}
 80056cc:	bf00      	nop
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	e000ed00 	.word	0xe000ed00
 80056dc:	e000ed90 	.word	0xe000ed90

080056e0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80056e8:	4a0b      	ldr	r2, [pc, #44]	@ (8005718 <HAL_MPU_Enable+0x38>)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f043 0301 	orr.w	r3, r3, #1
 80056f0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80056f2:	4b0a      	ldr	r3, [pc, #40]	@ (800571c <HAL_MPU_Enable+0x3c>)
 80056f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f6:	4a09      	ldr	r2, [pc, #36]	@ (800571c <HAL_MPU_Enable+0x3c>)
 80056f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056fc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80056fe:	f3bf 8f4f 	dsb	sy
}
 8005702:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005704:	f3bf 8f6f 	isb	sy
}
 8005708:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800570a:	bf00      	nop
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	e000ed90 	.word	0xe000ed90
 800571c:	e000ed00 	.word	0xe000ed00

08005720 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	785a      	ldrb	r2, [r3, #1]
 800572c:	4b1b      	ldr	r3, [pc, #108]	@ (800579c <HAL_MPU_ConfigRegion+0x7c>)
 800572e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8005730:	4b1a      	ldr	r3, [pc, #104]	@ (800579c <HAL_MPU_ConfigRegion+0x7c>)
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	4a19      	ldr	r2, [pc, #100]	@ (800579c <HAL_MPU_ConfigRegion+0x7c>)
 8005736:	f023 0301 	bic.w	r3, r3, #1
 800573a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800573c:	4a17      	ldr	r2, [pc, #92]	@ (800579c <HAL_MPU_ConfigRegion+0x7c>)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	7b1b      	ldrb	r3, [r3, #12]
 8005748:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	7adb      	ldrb	r3, [r3, #11]
 800574e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005750:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	7a9b      	ldrb	r3, [r3, #10]
 8005756:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005758:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	7b5b      	ldrb	r3, [r3, #13]
 800575e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005760:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	7b9b      	ldrb	r3, [r3, #14]
 8005766:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005768:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	7bdb      	ldrb	r3, [r3, #15]
 800576e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005770:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	7a5b      	ldrb	r3, [r3, #9]
 8005776:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005778:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	7a1b      	ldrb	r3, [r3, #8]
 800577e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005780:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	7812      	ldrb	r2, [r2, #0]
 8005786:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005788:	4a04      	ldr	r2, [pc, #16]	@ (800579c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800578a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800578c:	6113      	str	r3, [r2, #16]
}
 800578e:	bf00      	nop
 8005790:	370c      	adds	r7, #12
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	e000ed90 	.word	0xe000ed90

080057a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80057a8:	f7ff fe72 	bl	8005490 <HAL_GetTick>
 80057ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d101      	bne.n	80057b8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e37d      	b.n	8005eb4 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a66      	ldr	r2, [pc, #408]	@ (8005958 <HAL_DMA_Init+0x1b8>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d04a      	beq.n	8005858 <HAL_DMA_Init+0xb8>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a65      	ldr	r2, [pc, #404]	@ (800595c <HAL_DMA_Init+0x1bc>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d045      	beq.n	8005858 <HAL_DMA_Init+0xb8>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a63      	ldr	r2, [pc, #396]	@ (8005960 <HAL_DMA_Init+0x1c0>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d040      	beq.n	8005858 <HAL_DMA_Init+0xb8>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a62      	ldr	r2, [pc, #392]	@ (8005964 <HAL_DMA_Init+0x1c4>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d03b      	beq.n	8005858 <HAL_DMA_Init+0xb8>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a60      	ldr	r2, [pc, #384]	@ (8005968 <HAL_DMA_Init+0x1c8>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d036      	beq.n	8005858 <HAL_DMA_Init+0xb8>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a5f      	ldr	r2, [pc, #380]	@ (800596c <HAL_DMA_Init+0x1cc>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d031      	beq.n	8005858 <HAL_DMA_Init+0xb8>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a5d      	ldr	r2, [pc, #372]	@ (8005970 <HAL_DMA_Init+0x1d0>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d02c      	beq.n	8005858 <HAL_DMA_Init+0xb8>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a5c      	ldr	r2, [pc, #368]	@ (8005974 <HAL_DMA_Init+0x1d4>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d027      	beq.n	8005858 <HAL_DMA_Init+0xb8>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a5a      	ldr	r2, [pc, #360]	@ (8005978 <HAL_DMA_Init+0x1d8>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d022      	beq.n	8005858 <HAL_DMA_Init+0xb8>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a59      	ldr	r2, [pc, #356]	@ (800597c <HAL_DMA_Init+0x1dc>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d01d      	beq.n	8005858 <HAL_DMA_Init+0xb8>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a57      	ldr	r2, [pc, #348]	@ (8005980 <HAL_DMA_Init+0x1e0>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d018      	beq.n	8005858 <HAL_DMA_Init+0xb8>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a56      	ldr	r2, [pc, #344]	@ (8005984 <HAL_DMA_Init+0x1e4>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d013      	beq.n	8005858 <HAL_DMA_Init+0xb8>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a54      	ldr	r2, [pc, #336]	@ (8005988 <HAL_DMA_Init+0x1e8>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d00e      	beq.n	8005858 <HAL_DMA_Init+0xb8>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a53      	ldr	r2, [pc, #332]	@ (800598c <HAL_DMA_Init+0x1ec>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d009      	beq.n	8005858 <HAL_DMA_Init+0xb8>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a51      	ldr	r2, [pc, #324]	@ (8005990 <HAL_DMA_Init+0x1f0>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d004      	beq.n	8005858 <HAL_DMA_Init+0xb8>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a50      	ldr	r2, [pc, #320]	@ (8005994 <HAL_DMA_Init+0x1f4>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d101      	bne.n	800585c <HAL_DMA_Init+0xbc>
 8005858:	2301      	movs	r3, #1
 800585a:	e000      	b.n	800585e <HAL_DMA_Init+0xbe>
 800585c:	2300      	movs	r3, #0
 800585e:	2b00      	cmp	r3, #0
 8005860:	f000 813c 	beq.w	8005adc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2202      	movs	r2, #2
 8005868:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a37      	ldr	r2, [pc, #220]	@ (8005958 <HAL_DMA_Init+0x1b8>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d04a      	beq.n	8005914 <HAL_DMA_Init+0x174>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a36      	ldr	r2, [pc, #216]	@ (800595c <HAL_DMA_Init+0x1bc>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d045      	beq.n	8005914 <HAL_DMA_Init+0x174>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a34      	ldr	r2, [pc, #208]	@ (8005960 <HAL_DMA_Init+0x1c0>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d040      	beq.n	8005914 <HAL_DMA_Init+0x174>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a33      	ldr	r2, [pc, #204]	@ (8005964 <HAL_DMA_Init+0x1c4>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d03b      	beq.n	8005914 <HAL_DMA_Init+0x174>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a31      	ldr	r2, [pc, #196]	@ (8005968 <HAL_DMA_Init+0x1c8>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d036      	beq.n	8005914 <HAL_DMA_Init+0x174>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a30      	ldr	r2, [pc, #192]	@ (800596c <HAL_DMA_Init+0x1cc>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d031      	beq.n	8005914 <HAL_DMA_Init+0x174>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a2e      	ldr	r2, [pc, #184]	@ (8005970 <HAL_DMA_Init+0x1d0>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d02c      	beq.n	8005914 <HAL_DMA_Init+0x174>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a2d      	ldr	r2, [pc, #180]	@ (8005974 <HAL_DMA_Init+0x1d4>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d027      	beq.n	8005914 <HAL_DMA_Init+0x174>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a2b      	ldr	r2, [pc, #172]	@ (8005978 <HAL_DMA_Init+0x1d8>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d022      	beq.n	8005914 <HAL_DMA_Init+0x174>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a2a      	ldr	r2, [pc, #168]	@ (800597c <HAL_DMA_Init+0x1dc>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d01d      	beq.n	8005914 <HAL_DMA_Init+0x174>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a28      	ldr	r2, [pc, #160]	@ (8005980 <HAL_DMA_Init+0x1e0>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d018      	beq.n	8005914 <HAL_DMA_Init+0x174>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a27      	ldr	r2, [pc, #156]	@ (8005984 <HAL_DMA_Init+0x1e4>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d013      	beq.n	8005914 <HAL_DMA_Init+0x174>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a25      	ldr	r2, [pc, #148]	@ (8005988 <HAL_DMA_Init+0x1e8>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d00e      	beq.n	8005914 <HAL_DMA_Init+0x174>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a24      	ldr	r2, [pc, #144]	@ (800598c <HAL_DMA_Init+0x1ec>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d009      	beq.n	8005914 <HAL_DMA_Init+0x174>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a22      	ldr	r2, [pc, #136]	@ (8005990 <HAL_DMA_Init+0x1f0>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d004      	beq.n	8005914 <HAL_DMA_Init+0x174>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a21      	ldr	r2, [pc, #132]	@ (8005994 <HAL_DMA_Init+0x1f4>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d108      	bne.n	8005926 <HAL_DMA_Init+0x186>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f022 0201 	bic.w	r2, r2, #1
 8005922:	601a      	str	r2, [r3, #0]
 8005924:	e007      	b.n	8005936 <HAL_DMA_Init+0x196>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f022 0201 	bic.w	r2, r2, #1
 8005934:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005936:	e02f      	b.n	8005998 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005938:	f7ff fdaa 	bl	8005490 <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	2b05      	cmp	r3, #5
 8005944:	d928      	bls.n	8005998 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2220      	movs	r2, #32
 800594a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2203      	movs	r2, #3
 8005950:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e2ad      	b.n	8005eb4 <HAL_DMA_Init+0x714>
 8005958:	40020010 	.word	0x40020010
 800595c:	40020028 	.word	0x40020028
 8005960:	40020040 	.word	0x40020040
 8005964:	40020058 	.word	0x40020058
 8005968:	40020070 	.word	0x40020070
 800596c:	40020088 	.word	0x40020088
 8005970:	400200a0 	.word	0x400200a0
 8005974:	400200b8 	.word	0x400200b8
 8005978:	40020410 	.word	0x40020410
 800597c:	40020428 	.word	0x40020428
 8005980:	40020440 	.word	0x40020440
 8005984:	40020458 	.word	0x40020458
 8005988:	40020470 	.word	0x40020470
 800598c:	40020488 	.word	0x40020488
 8005990:	400204a0 	.word	0x400204a0
 8005994:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1c8      	bne.n	8005938 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	4b73      	ldr	r3, [pc, #460]	@ (8005b80 <HAL_DMA_Init+0x3e0>)
 80059b2:	4013      	ands	r3, r2
 80059b4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80059be:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059d6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a1b      	ldr	r3, [r3, #32]
 80059dc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e8:	2b04      	cmp	r3, #4
 80059ea:	d107      	bne.n	80059fc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059f4:	4313      	orrs	r3, r2
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	2b28      	cmp	r3, #40	@ 0x28
 8005a02:	d903      	bls.n	8005a0c <HAL_DMA_Init+0x26c>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a0a:	d91f      	bls.n	8005a4c <HAL_DMA_Init+0x2ac>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a12:	d903      	bls.n	8005a1c <HAL_DMA_Init+0x27c>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	2b42      	cmp	r3, #66	@ 0x42
 8005a1a:	d917      	bls.n	8005a4c <HAL_DMA_Init+0x2ac>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	2b46      	cmp	r3, #70	@ 0x46
 8005a22:	d903      	bls.n	8005a2c <HAL_DMA_Init+0x28c>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	2b48      	cmp	r3, #72	@ 0x48
 8005a2a:	d90f      	bls.n	8005a4c <HAL_DMA_Init+0x2ac>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	2b4e      	cmp	r3, #78	@ 0x4e
 8005a32:	d903      	bls.n	8005a3c <HAL_DMA_Init+0x29c>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	2b52      	cmp	r3, #82	@ 0x52
 8005a3a:	d907      	bls.n	8005a4c <HAL_DMA_Init+0x2ac>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	2b73      	cmp	r3, #115	@ 0x73
 8005a42:	d905      	bls.n	8005a50 <HAL_DMA_Init+0x2b0>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	2b77      	cmp	r3, #119	@ 0x77
 8005a4a:	d801      	bhi.n	8005a50 <HAL_DMA_Init+0x2b0>
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e000      	b.n	8005a52 <HAL_DMA_Init+0x2b2>
 8005a50:	2300      	movs	r3, #0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d003      	beq.n	8005a5e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a5c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	695b      	ldr	r3, [r3, #20]
 8005a6c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	f023 0307 	bic.w	r3, r3, #7
 8005a74:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a7a:	697a      	ldr	r2, [r7, #20]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a84:	2b04      	cmp	r3, #4
 8005a86:	d117      	bne.n	8005ab8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00e      	beq.n	8005ab8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f002 fbe0 	bl	8008260 <DMA_CheckFifoParam>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d008      	beq.n	8005ab8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2240      	movs	r2, #64	@ 0x40
 8005aaa:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e1fd      	b.n	8005eb4 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f002 fb1b 	bl	80080fc <DMA_CalcBaseAndBitshift>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ace:	f003 031f 	and.w	r3, r3, #31
 8005ad2:	223f      	movs	r2, #63	@ 0x3f
 8005ad4:	409a      	lsls	r2, r3
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	609a      	str	r2, [r3, #8]
 8005ada:	e0fd      	b.n	8005cd8 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a28      	ldr	r2, [pc, #160]	@ (8005b84 <HAL_DMA_Init+0x3e4>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d04a      	beq.n	8005b7c <HAL_DMA_Init+0x3dc>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a27      	ldr	r2, [pc, #156]	@ (8005b88 <HAL_DMA_Init+0x3e8>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d045      	beq.n	8005b7c <HAL_DMA_Init+0x3dc>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a25      	ldr	r2, [pc, #148]	@ (8005b8c <HAL_DMA_Init+0x3ec>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d040      	beq.n	8005b7c <HAL_DMA_Init+0x3dc>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a24      	ldr	r2, [pc, #144]	@ (8005b90 <HAL_DMA_Init+0x3f0>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d03b      	beq.n	8005b7c <HAL_DMA_Init+0x3dc>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a22      	ldr	r2, [pc, #136]	@ (8005b94 <HAL_DMA_Init+0x3f4>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d036      	beq.n	8005b7c <HAL_DMA_Init+0x3dc>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a21      	ldr	r2, [pc, #132]	@ (8005b98 <HAL_DMA_Init+0x3f8>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d031      	beq.n	8005b7c <HAL_DMA_Init+0x3dc>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a1f      	ldr	r2, [pc, #124]	@ (8005b9c <HAL_DMA_Init+0x3fc>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d02c      	beq.n	8005b7c <HAL_DMA_Init+0x3dc>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a1e      	ldr	r2, [pc, #120]	@ (8005ba0 <HAL_DMA_Init+0x400>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d027      	beq.n	8005b7c <HAL_DMA_Init+0x3dc>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a1c      	ldr	r2, [pc, #112]	@ (8005ba4 <HAL_DMA_Init+0x404>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d022      	beq.n	8005b7c <HAL_DMA_Init+0x3dc>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a1b      	ldr	r2, [pc, #108]	@ (8005ba8 <HAL_DMA_Init+0x408>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d01d      	beq.n	8005b7c <HAL_DMA_Init+0x3dc>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a19      	ldr	r2, [pc, #100]	@ (8005bac <HAL_DMA_Init+0x40c>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d018      	beq.n	8005b7c <HAL_DMA_Init+0x3dc>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a18      	ldr	r2, [pc, #96]	@ (8005bb0 <HAL_DMA_Init+0x410>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d013      	beq.n	8005b7c <HAL_DMA_Init+0x3dc>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a16      	ldr	r2, [pc, #88]	@ (8005bb4 <HAL_DMA_Init+0x414>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d00e      	beq.n	8005b7c <HAL_DMA_Init+0x3dc>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a15      	ldr	r2, [pc, #84]	@ (8005bb8 <HAL_DMA_Init+0x418>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d009      	beq.n	8005b7c <HAL_DMA_Init+0x3dc>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a13      	ldr	r2, [pc, #76]	@ (8005bbc <HAL_DMA_Init+0x41c>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d004      	beq.n	8005b7c <HAL_DMA_Init+0x3dc>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a12      	ldr	r2, [pc, #72]	@ (8005bc0 <HAL_DMA_Init+0x420>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d123      	bne.n	8005bc4 <HAL_DMA_Init+0x424>
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e022      	b.n	8005bc6 <HAL_DMA_Init+0x426>
 8005b80:	fe10803f 	.word	0xfe10803f
 8005b84:	48022c08 	.word	0x48022c08
 8005b88:	48022c1c 	.word	0x48022c1c
 8005b8c:	48022c30 	.word	0x48022c30
 8005b90:	48022c44 	.word	0x48022c44
 8005b94:	48022c58 	.word	0x48022c58
 8005b98:	48022c6c 	.word	0x48022c6c
 8005b9c:	48022c80 	.word	0x48022c80
 8005ba0:	48022c94 	.word	0x48022c94
 8005ba4:	58025408 	.word	0x58025408
 8005ba8:	5802541c 	.word	0x5802541c
 8005bac:	58025430 	.word	0x58025430
 8005bb0:	58025444 	.word	0x58025444
 8005bb4:	58025458 	.word	0x58025458
 8005bb8:	5802546c 	.word	0x5802546c
 8005bbc:	58025480 	.word	0x58025480
 8005bc0:	58025494 	.word	0x58025494
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d07d      	beq.n	8005cc6 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a7f      	ldr	r2, [pc, #508]	@ (8005dcc <HAL_DMA_Init+0x62c>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d021      	beq.n	8005c18 <HAL_DMA_Init+0x478>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a7d      	ldr	r2, [pc, #500]	@ (8005dd0 <HAL_DMA_Init+0x630>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d01c      	beq.n	8005c18 <HAL_DMA_Init+0x478>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a7c      	ldr	r2, [pc, #496]	@ (8005dd4 <HAL_DMA_Init+0x634>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d017      	beq.n	8005c18 <HAL_DMA_Init+0x478>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a7a      	ldr	r2, [pc, #488]	@ (8005dd8 <HAL_DMA_Init+0x638>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d012      	beq.n	8005c18 <HAL_DMA_Init+0x478>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a79      	ldr	r2, [pc, #484]	@ (8005ddc <HAL_DMA_Init+0x63c>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d00d      	beq.n	8005c18 <HAL_DMA_Init+0x478>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a77      	ldr	r2, [pc, #476]	@ (8005de0 <HAL_DMA_Init+0x640>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d008      	beq.n	8005c18 <HAL_DMA_Init+0x478>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a76      	ldr	r2, [pc, #472]	@ (8005de4 <HAL_DMA_Init+0x644>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d003      	beq.n	8005c18 <HAL_DMA_Init+0x478>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a74      	ldr	r2, [pc, #464]	@ (8005de8 <HAL_DMA_Init+0x648>)
 8005c16:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2202      	movs	r2, #2
 8005c1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	4b6e      	ldr	r3, [pc, #440]	@ (8005dec <HAL_DMA_Init+0x64c>)
 8005c34:	4013      	ands	r3, r2
 8005c36:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	2b40      	cmp	r3, #64	@ 0x40
 8005c3e:	d008      	beq.n	8005c52 <HAL_DMA_Init+0x4b2>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	2b80      	cmp	r3, #128	@ 0x80
 8005c46:	d102      	bne.n	8005c4e <HAL_DMA_Init+0x4ae>
 8005c48:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005c4c:	e002      	b.n	8005c54 <HAL_DMA_Init+0x4b4>
 8005c4e:	2300      	movs	r3, #0
 8005c50:	e000      	b.n	8005c54 <HAL_DMA_Init+0x4b4>
 8005c52:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	68d2      	ldr	r2, [r2, #12]
 8005c58:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005c5a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005c62:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005c6a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005c72:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	69db      	ldr	r3, [r3, #28]
 8005c78:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005c7a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a1b      	ldr	r3, [r3, #32]
 8005c80:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005c82:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005c84:	697a      	ldr	r2, [r7, #20]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	697a      	ldr	r2, [r7, #20]
 8005c90:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	461a      	mov	r2, r3
 8005c98:	4b55      	ldr	r3, [pc, #340]	@ (8005df0 <HAL_DMA_Init+0x650>)
 8005c9a:	4413      	add	r3, r2
 8005c9c:	4a55      	ldr	r2, [pc, #340]	@ (8005df4 <HAL_DMA_Init+0x654>)
 8005c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca2:	091b      	lsrs	r3, r3, #4
 8005ca4:	009a      	lsls	r2, r3, #2
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f002 fa26 	bl	80080fc <DMA_CalcBaseAndBitshift>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cb8:	f003 031f 	and.w	r3, r3, #31
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	409a      	lsls	r2, r3
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	605a      	str	r2, [r3, #4]
 8005cc4:	e008      	b.n	8005cd8 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2240      	movs	r2, #64	@ 0x40
 8005cca:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2203      	movs	r2, #3
 8005cd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e0ed      	b.n	8005eb4 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a46      	ldr	r2, [pc, #280]	@ (8005df8 <HAL_DMA_Init+0x658>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d072      	beq.n	8005dc8 <HAL_DMA_Init+0x628>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a45      	ldr	r2, [pc, #276]	@ (8005dfc <HAL_DMA_Init+0x65c>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d06d      	beq.n	8005dc8 <HAL_DMA_Init+0x628>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a43      	ldr	r2, [pc, #268]	@ (8005e00 <HAL_DMA_Init+0x660>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d068      	beq.n	8005dc8 <HAL_DMA_Init+0x628>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a42      	ldr	r2, [pc, #264]	@ (8005e04 <HAL_DMA_Init+0x664>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d063      	beq.n	8005dc8 <HAL_DMA_Init+0x628>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a40      	ldr	r2, [pc, #256]	@ (8005e08 <HAL_DMA_Init+0x668>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d05e      	beq.n	8005dc8 <HAL_DMA_Init+0x628>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a3f      	ldr	r2, [pc, #252]	@ (8005e0c <HAL_DMA_Init+0x66c>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d059      	beq.n	8005dc8 <HAL_DMA_Init+0x628>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a3d      	ldr	r2, [pc, #244]	@ (8005e10 <HAL_DMA_Init+0x670>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d054      	beq.n	8005dc8 <HAL_DMA_Init+0x628>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a3c      	ldr	r2, [pc, #240]	@ (8005e14 <HAL_DMA_Init+0x674>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d04f      	beq.n	8005dc8 <HAL_DMA_Init+0x628>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a3a      	ldr	r2, [pc, #232]	@ (8005e18 <HAL_DMA_Init+0x678>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d04a      	beq.n	8005dc8 <HAL_DMA_Init+0x628>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a39      	ldr	r2, [pc, #228]	@ (8005e1c <HAL_DMA_Init+0x67c>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d045      	beq.n	8005dc8 <HAL_DMA_Init+0x628>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a37      	ldr	r2, [pc, #220]	@ (8005e20 <HAL_DMA_Init+0x680>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d040      	beq.n	8005dc8 <HAL_DMA_Init+0x628>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a36      	ldr	r2, [pc, #216]	@ (8005e24 <HAL_DMA_Init+0x684>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d03b      	beq.n	8005dc8 <HAL_DMA_Init+0x628>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a34      	ldr	r2, [pc, #208]	@ (8005e28 <HAL_DMA_Init+0x688>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d036      	beq.n	8005dc8 <HAL_DMA_Init+0x628>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a33      	ldr	r2, [pc, #204]	@ (8005e2c <HAL_DMA_Init+0x68c>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d031      	beq.n	8005dc8 <HAL_DMA_Init+0x628>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a31      	ldr	r2, [pc, #196]	@ (8005e30 <HAL_DMA_Init+0x690>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d02c      	beq.n	8005dc8 <HAL_DMA_Init+0x628>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a30      	ldr	r2, [pc, #192]	@ (8005e34 <HAL_DMA_Init+0x694>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d027      	beq.n	8005dc8 <HAL_DMA_Init+0x628>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a13      	ldr	r2, [pc, #76]	@ (8005dcc <HAL_DMA_Init+0x62c>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d022      	beq.n	8005dc8 <HAL_DMA_Init+0x628>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a12      	ldr	r2, [pc, #72]	@ (8005dd0 <HAL_DMA_Init+0x630>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d01d      	beq.n	8005dc8 <HAL_DMA_Init+0x628>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a10      	ldr	r2, [pc, #64]	@ (8005dd4 <HAL_DMA_Init+0x634>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d018      	beq.n	8005dc8 <HAL_DMA_Init+0x628>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a0f      	ldr	r2, [pc, #60]	@ (8005dd8 <HAL_DMA_Init+0x638>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d013      	beq.n	8005dc8 <HAL_DMA_Init+0x628>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a0d      	ldr	r2, [pc, #52]	@ (8005ddc <HAL_DMA_Init+0x63c>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d00e      	beq.n	8005dc8 <HAL_DMA_Init+0x628>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a0c      	ldr	r2, [pc, #48]	@ (8005de0 <HAL_DMA_Init+0x640>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d009      	beq.n	8005dc8 <HAL_DMA_Init+0x628>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a0a      	ldr	r2, [pc, #40]	@ (8005de4 <HAL_DMA_Init+0x644>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d004      	beq.n	8005dc8 <HAL_DMA_Init+0x628>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a09      	ldr	r2, [pc, #36]	@ (8005de8 <HAL_DMA_Init+0x648>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d137      	bne.n	8005e38 <HAL_DMA_Init+0x698>
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e036      	b.n	8005e3a <HAL_DMA_Init+0x69a>
 8005dcc:	58025408 	.word	0x58025408
 8005dd0:	5802541c 	.word	0x5802541c
 8005dd4:	58025430 	.word	0x58025430
 8005dd8:	58025444 	.word	0x58025444
 8005ddc:	58025458 	.word	0x58025458
 8005de0:	5802546c 	.word	0x5802546c
 8005de4:	58025480 	.word	0x58025480
 8005de8:	58025494 	.word	0x58025494
 8005dec:	fffe000f 	.word	0xfffe000f
 8005df0:	a7fdabf8 	.word	0xa7fdabf8
 8005df4:	cccccccd 	.word	0xcccccccd
 8005df8:	40020010 	.word	0x40020010
 8005dfc:	40020028 	.word	0x40020028
 8005e00:	40020040 	.word	0x40020040
 8005e04:	40020058 	.word	0x40020058
 8005e08:	40020070 	.word	0x40020070
 8005e0c:	40020088 	.word	0x40020088
 8005e10:	400200a0 	.word	0x400200a0
 8005e14:	400200b8 	.word	0x400200b8
 8005e18:	40020410 	.word	0x40020410
 8005e1c:	40020428 	.word	0x40020428
 8005e20:	40020440 	.word	0x40020440
 8005e24:	40020458 	.word	0x40020458
 8005e28:	40020470 	.word	0x40020470
 8005e2c:	40020488 	.word	0x40020488
 8005e30:	400204a0 	.word	0x400204a0
 8005e34:	400204b8 	.word	0x400204b8
 8005e38:	2300      	movs	r3, #0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d032      	beq.n	8005ea4 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f002 fa8a 	bl	8008358 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	2b80      	cmp	r3, #128	@ 0x80
 8005e4a:	d102      	bne.n	8005e52 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	685a      	ldr	r2, [r3, #4]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e5a:	b2d2      	uxtb	r2, r2
 8005e5c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005e66:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d010      	beq.n	8005e92 <HAL_DMA_Init+0x6f2>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	2b08      	cmp	r3, #8
 8005e76:	d80c      	bhi.n	8005e92 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f002 fb07 	bl	800848c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e82:	2200      	movs	r2, #0
 8005e84:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005e8e:	605a      	str	r2, [r3, #4]
 8005e90:	e008      	b.n	8005ea4 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3718      	adds	r7, #24
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
 8005ec8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d101      	bne.n	8005ed8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e226      	b.n	8006326 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d101      	bne.n	8005ee6 <HAL_DMA_Start_IT+0x2a>
 8005ee2:	2302      	movs	r3, #2
 8005ee4:	e21f      	b.n	8006326 <HAL_DMA_Start_IT+0x46a>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	f040 820a 	bne.w	8006310 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2202      	movs	r2, #2
 8005f00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a68      	ldr	r2, [pc, #416]	@ (80060b0 <HAL_DMA_Start_IT+0x1f4>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d04a      	beq.n	8005faa <HAL_DMA_Start_IT+0xee>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a66      	ldr	r2, [pc, #408]	@ (80060b4 <HAL_DMA_Start_IT+0x1f8>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d045      	beq.n	8005faa <HAL_DMA_Start_IT+0xee>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a65      	ldr	r2, [pc, #404]	@ (80060b8 <HAL_DMA_Start_IT+0x1fc>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d040      	beq.n	8005faa <HAL_DMA_Start_IT+0xee>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a63      	ldr	r2, [pc, #396]	@ (80060bc <HAL_DMA_Start_IT+0x200>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d03b      	beq.n	8005faa <HAL_DMA_Start_IT+0xee>
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a62      	ldr	r2, [pc, #392]	@ (80060c0 <HAL_DMA_Start_IT+0x204>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d036      	beq.n	8005faa <HAL_DMA_Start_IT+0xee>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a60      	ldr	r2, [pc, #384]	@ (80060c4 <HAL_DMA_Start_IT+0x208>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d031      	beq.n	8005faa <HAL_DMA_Start_IT+0xee>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a5f      	ldr	r2, [pc, #380]	@ (80060c8 <HAL_DMA_Start_IT+0x20c>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d02c      	beq.n	8005faa <HAL_DMA_Start_IT+0xee>
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a5d      	ldr	r2, [pc, #372]	@ (80060cc <HAL_DMA_Start_IT+0x210>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d027      	beq.n	8005faa <HAL_DMA_Start_IT+0xee>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a5c      	ldr	r2, [pc, #368]	@ (80060d0 <HAL_DMA_Start_IT+0x214>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d022      	beq.n	8005faa <HAL_DMA_Start_IT+0xee>
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a5a      	ldr	r2, [pc, #360]	@ (80060d4 <HAL_DMA_Start_IT+0x218>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d01d      	beq.n	8005faa <HAL_DMA_Start_IT+0xee>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a59      	ldr	r2, [pc, #356]	@ (80060d8 <HAL_DMA_Start_IT+0x21c>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d018      	beq.n	8005faa <HAL_DMA_Start_IT+0xee>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a57      	ldr	r2, [pc, #348]	@ (80060dc <HAL_DMA_Start_IT+0x220>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d013      	beq.n	8005faa <HAL_DMA_Start_IT+0xee>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a56      	ldr	r2, [pc, #344]	@ (80060e0 <HAL_DMA_Start_IT+0x224>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d00e      	beq.n	8005faa <HAL_DMA_Start_IT+0xee>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a54      	ldr	r2, [pc, #336]	@ (80060e4 <HAL_DMA_Start_IT+0x228>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d009      	beq.n	8005faa <HAL_DMA_Start_IT+0xee>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a53      	ldr	r2, [pc, #332]	@ (80060e8 <HAL_DMA_Start_IT+0x22c>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d004      	beq.n	8005faa <HAL_DMA_Start_IT+0xee>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a51      	ldr	r2, [pc, #324]	@ (80060ec <HAL_DMA_Start_IT+0x230>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d108      	bne.n	8005fbc <HAL_DMA_Start_IT+0x100>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f022 0201 	bic.w	r2, r2, #1
 8005fb8:	601a      	str	r2, [r3, #0]
 8005fba:	e007      	b.n	8005fcc <HAL_DMA_Start_IT+0x110>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f022 0201 	bic.w	r2, r2, #1
 8005fca:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	68b9      	ldr	r1, [r7, #8]
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f001 feae 	bl	8007d34 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a34      	ldr	r2, [pc, #208]	@ (80060b0 <HAL_DMA_Start_IT+0x1f4>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d04a      	beq.n	8006078 <HAL_DMA_Start_IT+0x1bc>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a33      	ldr	r2, [pc, #204]	@ (80060b4 <HAL_DMA_Start_IT+0x1f8>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d045      	beq.n	8006078 <HAL_DMA_Start_IT+0x1bc>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a31      	ldr	r2, [pc, #196]	@ (80060b8 <HAL_DMA_Start_IT+0x1fc>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d040      	beq.n	8006078 <HAL_DMA_Start_IT+0x1bc>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a30      	ldr	r2, [pc, #192]	@ (80060bc <HAL_DMA_Start_IT+0x200>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d03b      	beq.n	8006078 <HAL_DMA_Start_IT+0x1bc>
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a2e      	ldr	r2, [pc, #184]	@ (80060c0 <HAL_DMA_Start_IT+0x204>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d036      	beq.n	8006078 <HAL_DMA_Start_IT+0x1bc>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a2d      	ldr	r2, [pc, #180]	@ (80060c4 <HAL_DMA_Start_IT+0x208>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d031      	beq.n	8006078 <HAL_DMA_Start_IT+0x1bc>
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a2b      	ldr	r2, [pc, #172]	@ (80060c8 <HAL_DMA_Start_IT+0x20c>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d02c      	beq.n	8006078 <HAL_DMA_Start_IT+0x1bc>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a2a      	ldr	r2, [pc, #168]	@ (80060cc <HAL_DMA_Start_IT+0x210>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d027      	beq.n	8006078 <HAL_DMA_Start_IT+0x1bc>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a28      	ldr	r2, [pc, #160]	@ (80060d0 <HAL_DMA_Start_IT+0x214>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d022      	beq.n	8006078 <HAL_DMA_Start_IT+0x1bc>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a27      	ldr	r2, [pc, #156]	@ (80060d4 <HAL_DMA_Start_IT+0x218>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d01d      	beq.n	8006078 <HAL_DMA_Start_IT+0x1bc>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a25      	ldr	r2, [pc, #148]	@ (80060d8 <HAL_DMA_Start_IT+0x21c>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d018      	beq.n	8006078 <HAL_DMA_Start_IT+0x1bc>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a24      	ldr	r2, [pc, #144]	@ (80060dc <HAL_DMA_Start_IT+0x220>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d013      	beq.n	8006078 <HAL_DMA_Start_IT+0x1bc>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a22      	ldr	r2, [pc, #136]	@ (80060e0 <HAL_DMA_Start_IT+0x224>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d00e      	beq.n	8006078 <HAL_DMA_Start_IT+0x1bc>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a21      	ldr	r2, [pc, #132]	@ (80060e4 <HAL_DMA_Start_IT+0x228>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d009      	beq.n	8006078 <HAL_DMA_Start_IT+0x1bc>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a1f      	ldr	r2, [pc, #124]	@ (80060e8 <HAL_DMA_Start_IT+0x22c>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d004      	beq.n	8006078 <HAL_DMA_Start_IT+0x1bc>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a1e      	ldr	r2, [pc, #120]	@ (80060ec <HAL_DMA_Start_IT+0x230>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d101      	bne.n	800607c <HAL_DMA_Start_IT+0x1c0>
 8006078:	2301      	movs	r3, #1
 800607a:	e000      	b.n	800607e <HAL_DMA_Start_IT+0x1c2>
 800607c:	2300      	movs	r3, #0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d036      	beq.n	80060f0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f023 021e 	bic.w	r2, r3, #30
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f042 0216 	orr.w	r2, r2, #22
 8006094:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800609a:	2b00      	cmp	r3, #0
 800609c:	d03e      	beq.n	800611c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f042 0208 	orr.w	r2, r2, #8
 80060ac:	601a      	str	r2, [r3, #0]
 80060ae:	e035      	b.n	800611c <HAL_DMA_Start_IT+0x260>
 80060b0:	40020010 	.word	0x40020010
 80060b4:	40020028 	.word	0x40020028
 80060b8:	40020040 	.word	0x40020040
 80060bc:	40020058 	.word	0x40020058
 80060c0:	40020070 	.word	0x40020070
 80060c4:	40020088 	.word	0x40020088
 80060c8:	400200a0 	.word	0x400200a0
 80060cc:	400200b8 	.word	0x400200b8
 80060d0:	40020410 	.word	0x40020410
 80060d4:	40020428 	.word	0x40020428
 80060d8:	40020440 	.word	0x40020440
 80060dc:	40020458 	.word	0x40020458
 80060e0:	40020470 	.word	0x40020470
 80060e4:	40020488 	.word	0x40020488
 80060e8:	400204a0 	.word	0x400204a0
 80060ec:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f023 020e 	bic.w	r2, r3, #14
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f042 020a 	orr.w	r2, r2, #10
 8006102:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006108:	2b00      	cmp	r3, #0
 800610a:	d007      	beq.n	800611c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f042 0204 	orr.w	r2, r2, #4
 800611a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a83      	ldr	r2, [pc, #524]	@ (8006330 <HAL_DMA_Start_IT+0x474>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d072      	beq.n	800620c <HAL_DMA_Start_IT+0x350>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a82      	ldr	r2, [pc, #520]	@ (8006334 <HAL_DMA_Start_IT+0x478>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d06d      	beq.n	800620c <HAL_DMA_Start_IT+0x350>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a80      	ldr	r2, [pc, #512]	@ (8006338 <HAL_DMA_Start_IT+0x47c>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d068      	beq.n	800620c <HAL_DMA_Start_IT+0x350>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a7f      	ldr	r2, [pc, #508]	@ (800633c <HAL_DMA_Start_IT+0x480>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d063      	beq.n	800620c <HAL_DMA_Start_IT+0x350>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a7d      	ldr	r2, [pc, #500]	@ (8006340 <HAL_DMA_Start_IT+0x484>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d05e      	beq.n	800620c <HAL_DMA_Start_IT+0x350>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a7c      	ldr	r2, [pc, #496]	@ (8006344 <HAL_DMA_Start_IT+0x488>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d059      	beq.n	800620c <HAL_DMA_Start_IT+0x350>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a7a      	ldr	r2, [pc, #488]	@ (8006348 <HAL_DMA_Start_IT+0x48c>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d054      	beq.n	800620c <HAL_DMA_Start_IT+0x350>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a79      	ldr	r2, [pc, #484]	@ (800634c <HAL_DMA_Start_IT+0x490>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d04f      	beq.n	800620c <HAL_DMA_Start_IT+0x350>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a77      	ldr	r2, [pc, #476]	@ (8006350 <HAL_DMA_Start_IT+0x494>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d04a      	beq.n	800620c <HAL_DMA_Start_IT+0x350>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a76      	ldr	r2, [pc, #472]	@ (8006354 <HAL_DMA_Start_IT+0x498>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d045      	beq.n	800620c <HAL_DMA_Start_IT+0x350>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a74      	ldr	r2, [pc, #464]	@ (8006358 <HAL_DMA_Start_IT+0x49c>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d040      	beq.n	800620c <HAL_DMA_Start_IT+0x350>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a73      	ldr	r2, [pc, #460]	@ (800635c <HAL_DMA_Start_IT+0x4a0>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d03b      	beq.n	800620c <HAL_DMA_Start_IT+0x350>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a71      	ldr	r2, [pc, #452]	@ (8006360 <HAL_DMA_Start_IT+0x4a4>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d036      	beq.n	800620c <HAL_DMA_Start_IT+0x350>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a70      	ldr	r2, [pc, #448]	@ (8006364 <HAL_DMA_Start_IT+0x4a8>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d031      	beq.n	800620c <HAL_DMA_Start_IT+0x350>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a6e      	ldr	r2, [pc, #440]	@ (8006368 <HAL_DMA_Start_IT+0x4ac>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d02c      	beq.n	800620c <HAL_DMA_Start_IT+0x350>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a6d      	ldr	r2, [pc, #436]	@ (800636c <HAL_DMA_Start_IT+0x4b0>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d027      	beq.n	800620c <HAL_DMA_Start_IT+0x350>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a6b      	ldr	r2, [pc, #428]	@ (8006370 <HAL_DMA_Start_IT+0x4b4>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d022      	beq.n	800620c <HAL_DMA_Start_IT+0x350>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a6a      	ldr	r2, [pc, #424]	@ (8006374 <HAL_DMA_Start_IT+0x4b8>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d01d      	beq.n	800620c <HAL_DMA_Start_IT+0x350>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a68      	ldr	r2, [pc, #416]	@ (8006378 <HAL_DMA_Start_IT+0x4bc>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d018      	beq.n	800620c <HAL_DMA_Start_IT+0x350>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a67      	ldr	r2, [pc, #412]	@ (800637c <HAL_DMA_Start_IT+0x4c0>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d013      	beq.n	800620c <HAL_DMA_Start_IT+0x350>
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a65      	ldr	r2, [pc, #404]	@ (8006380 <HAL_DMA_Start_IT+0x4c4>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d00e      	beq.n	800620c <HAL_DMA_Start_IT+0x350>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a64      	ldr	r2, [pc, #400]	@ (8006384 <HAL_DMA_Start_IT+0x4c8>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d009      	beq.n	800620c <HAL_DMA_Start_IT+0x350>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a62      	ldr	r2, [pc, #392]	@ (8006388 <HAL_DMA_Start_IT+0x4cc>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d004      	beq.n	800620c <HAL_DMA_Start_IT+0x350>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a61      	ldr	r2, [pc, #388]	@ (800638c <HAL_DMA_Start_IT+0x4d0>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d101      	bne.n	8006210 <HAL_DMA_Start_IT+0x354>
 800620c:	2301      	movs	r3, #1
 800620e:	e000      	b.n	8006212 <HAL_DMA_Start_IT+0x356>
 8006210:	2300      	movs	r3, #0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d01a      	beq.n	800624c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006220:	2b00      	cmp	r3, #0
 8006222:	d007      	beq.n	8006234 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800622e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006232:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006238:	2b00      	cmp	r3, #0
 800623a:	d007      	beq.n	800624c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006246:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800624a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a37      	ldr	r2, [pc, #220]	@ (8006330 <HAL_DMA_Start_IT+0x474>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d04a      	beq.n	80062ec <HAL_DMA_Start_IT+0x430>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a36      	ldr	r2, [pc, #216]	@ (8006334 <HAL_DMA_Start_IT+0x478>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d045      	beq.n	80062ec <HAL_DMA_Start_IT+0x430>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a34      	ldr	r2, [pc, #208]	@ (8006338 <HAL_DMA_Start_IT+0x47c>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d040      	beq.n	80062ec <HAL_DMA_Start_IT+0x430>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a33      	ldr	r2, [pc, #204]	@ (800633c <HAL_DMA_Start_IT+0x480>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d03b      	beq.n	80062ec <HAL_DMA_Start_IT+0x430>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a31      	ldr	r2, [pc, #196]	@ (8006340 <HAL_DMA_Start_IT+0x484>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d036      	beq.n	80062ec <HAL_DMA_Start_IT+0x430>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a30      	ldr	r2, [pc, #192]	@ (8006344 <HAL_DMA_Start_IT+0x488>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d031      	beq.n	80062ec <HAL_DMA_Start_IT+0x430>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a2e      	ldr	r2, [pc, #184]	@ (8006348 <HAL_DMA_Start_IT+0x48c>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d02c      	beq.n	80062ec <HAL_DMA_Start_IT+0x430>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a2d      	ldr	r2, [pc, #180]	@ (800634c <HAL_DMA_Start_IT+0x490>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d027      	beq.n	80062ec <HAL_DMA_Start_IT+0x430>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a2b      	ldr	r2, [pc, #172]	@ (8006350 <HAL_DMA_Start_IT+0x494>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d022      	beq.n	80062ec <HAL_DMA_Start_IT+0x430>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a2a      	ldr	r2, [pc, #168]	@ (8006354 <HAL_DMA_Start_IT+0x498>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d01d      	beq.n	80062ec <HAL_DMA_Start_IT+0x430>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a28      	ldr	r2, [pc, #160]	@ (8006358 <HAL_DMA_Start_IT+0x49c>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d018      	beq.n	80062ec <HAL_DMA_Start_IT+0x430>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a27      	ldr	r2, [pc, #156]	@ (800635c <HAL_DMA_Start_IT+0x4a0>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d013      	beq.n	80062ec <HAL_DMA_Start_IT+0x430>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a25      	ldr	r2, [pc, #148]	@ (8006360 <HAL_DMA_Start_IT+0x4a4>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d00e      	beq.n	80062ec <HAL_DMA_Start_IT+0x430>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a24      	ldr	r2, [pc, #144]	@ (8006364 <HAL_DMA_Start_IT+0x4a8>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d009      	beq.n	80062ec <HAL_DMA_Start_IT+0x430>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a22      	ldr	r2, [pc, #136]	@ (8006368 <HAL_DMA_Start_IT+0x4ac>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d004      	beq.n	80062ec <HAL_DMA_Start_IT+0x430>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a21      	ldr	r2, [pc, #132]	@ (800636c <HAL_DMA_Start_IT+0x4b0>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d108      	bne.n	80062fe <HAL_DMA_Start_IT+0x442>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f042 0201 	orr.w	r2, r2, #1
 80062fa:	601a      	str	r2, [r3, #0]
 80062fc:	e012      	b.n	8006324 <HAL_DMA_Start_IT+0x468>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f042 0201 	orr.w	r2, r2, #1
 800630c:	601a      	str	r2, [r3, #0]
 800630e:	e009      	b.n	8006324 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006316:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006324:	7dfb      	ldrb	r3, [r7, #23]
}
 8006326:	4618      	mov	r0, r3
 8006328:	3718      	adds	r7, #24
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	40020010 	.word	0x40020010
 8006334:	40020028 	.word	0x40020028
 8006338:	40020040 	.word	0x40020040
 800633c:	40020058 	.word	0x40020058
 8006340:	40020070 	.word	0x40020070
 8006344:	40020088 	.word	0x40020088
 8006348:	400200a0 	.word	0x400200a0
 800634c:	400200b8 	.word	0x400200b8
 8006350:	40020410 	.word	0x40020410
 8006354:	40020428 	.word	0x40020428
 8006358:	40020440 	.word	0x40020440
 800635c:	40020458 	.word	0x40020458
 8006360:	40020470 	.word	0x40020470
 8006364:	40020488 	.word	0x40020488
 8006368:	400204a0 	.word	0x400204a0
 800636c:	400204b8 	.word	0x400204b8
 8006370:	58025408 	.word	0x58025408
 8006374:	5802541c 	.word	0x5802541c
 8006378:	58025430 	.word	0x58025430
 800637c:	58025444 	.word	0x58025444
 8006380:	58025458 	.word	0x58025458
 8006384:	5802546c 	.word	0x5802546c
 8006388:	58025480 	.word	0x58025480
 800638c:	58025494 	.word	0x58025494

08006390 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b086      	sub	sp, #24
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006398:	f7ff f87a 	bl	8005490 <HAL_GetTick>
 800639c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d101      	bne.n	80063a8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e2dc      	b.n	8006962 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	d008      	beq.n	80063c6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2280      	movs	r2, #128	@ 0x80
 80063b8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e2cd      	b.n	8006962 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a76      	ldr	r2, [pc, #472]	@ (80065a4 <HAL_DMA_Abort+0x214>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d04a      	beq.n	8006466 <HAL_DMA_Abort+0xd6>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a74      	ldr	r2, [pc, #464]	@ (80065a8 <HAL_DMA_Abort+0x218>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d045      	beq.n	8006466 <HAL_DMA_Abort+0xd6>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a73      	ldr	r2, [pc, #460]	@ (80065ac <HAL_DMA_Abort+0x21c>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d040      	beq.n	8006466 <HAL_DMA_Abort+0xd6>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a71      	ldr	r2, [pc, #452]	@ (80065b0 <HAL_DMA_Abort+0x220>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d03b      	beq.n	8006466 <HAL_DMA_Abort+0xd6>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a70      	ldr	r2, [pc, #448]	@ (80065b4 <HAL_DMA_Abort+0x224>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d036      	beq.n	8006466 <HAL_DMA_Abort+0xd6>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a6e      	ldr	r2, [pc, #440]	@ (80065b8 <HAL_DMA_Abort+0x228>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d031      	beq.n	8006466 <HAL_DMA_Abort+0xd6>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a6d      	ldr	r2, [pc, #436]	@ (80065bc <HAL_DMA_Abort+0x22c>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d02c      	beq.n	8006466 <HAL_DMA_Abort+0xd6>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a6b      	ldr	r2, [pc, #428]	@ (80065c0 <HAL_DMA_Abort+0x230>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d027      	beq.n	8006466 <HAL_DMA_Abort+0xd6>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a6a      	ldr	r2, [pc, #424]	@ (80065c4 <HAL_DMA_Abort+0x234>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d022      	beq.n	8006466 <HAL_DMA_Abort+0xd6>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a68      	ldr	r2, [pc, #416]	@ (80065c8 <HAL_DMA_Abort+0x238>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d01d      	beq.n	8006466 <HAL_DMA_Abort+0xd6>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a67      	ldr	r2, [pc, #412]	@ (80065cc <HAL_DMA_Abort+0x23c>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d018      	beq.n	8006466 <HAL_DMA_Abort+0xd6>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a65      	ldr	r2, [pc, #404]	@ (80065d0 <HAL_DMA_Abort+0x240>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d013      	beq.n	8006466 <HAL_DMA_Abort+0xd6>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a64      	ldr	r2, [pc, #400]	@ (80065d4 <HAL_DMA_Abort+0x244>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d00e      	beq.n	8006466 <HAL_DMA_Abort+0xd6>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a62      	ldr	r2, [pc, #392]	@ (80065d8 <HAL_DMA_Abort+0x248>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d009      	beq.n	8006466 <HAL_DMA_Abort+0xd6>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a61      	ldr	r2, [pc, #388]	@ (80065dc <HAL_DMA_Abort+0x24c>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d004      	beq.n	8006466 <HAL_DMA_Abort+0xd6>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a5f      	ldr	r2, [pc, #380]	@ (80065e0 <HAL_DMA_Abort+0x250>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d101      	bne.n	800646a <HAL_DMA_Abort+0xda>
 8006466:	2301      	movs	r3, #1
 8006468:	e000      	b.n	800646c <HAL_DMA_Abort+0xdc>
 800646a:	2300      	movs	r3, #0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d013      	beq.n	8006498 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f022 021e 	bic.w	r2, r2, #30
 800647e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	695a      	ldr	r2, [r3, #20]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800648e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	617b      	str	r3, [r7, #20]
 8006496:	e00a      	b.n	80064ae <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f022 020e 	bic.w	r2, r2, #14
 80064a6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a3c      	ldr	r2, [pc, #240]	@ (80065a4 <HAL_DMA_Abort+0x214>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d072      	beq.n	800659e <HAL_DMA_Abort+0x20e>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a3a      	ldr	r2, [pc, #232]	@ (80065a8 <HAL_DMA_Abort+0x218>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d06d      	beq.n	800659e <HAL_DMA_Abort+0x20e>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a39      	ldr	r2, [pc, #228]	@ (80065ac <HAL_DMA_Abort+0x21c>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d068      	beq.n	800659e <HAL_DMA_Abort+0x20e>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a37      	ldr	r2, [pc, #220]	@ (80065b0 <HAL_DMA_Abort+0x220>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d063      	beq.n	800659e <HAL_DMA_Abort+0x20e>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a36      	ldr	r2, [pc, #216]	@ (80065b4 <HAL_DMA_Abort+0x224>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d05e      	beq.n	800659e <HAL_DMA_Abort+0x20e>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a34      	ldr	r2, [pc, #208]	@ (80065b8 <HAL_DMA_Abort+0x228>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d059      	beq.n	800659e <HAL_DMA_Abort+0x20e>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a33      	ldr	r2, [pc, #204]	@ (80065bc <HAL_DMA_Abort+0x22c>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d054      	beq.n	800659e <HAL_DMA_Abort+0x20e>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a31      	ldr	r2, [pc, #196]	@ (80065c0 <HAL_DMA_Abort+0x230>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d04f      	beq.n	800659e <HAL_DMA_Abort+0x20e>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a30      	ldr	r2, [pc, #192]	@ (80065c4 <HAL_DMA_Abort+0x234>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d04a      	beq.n	800659e <HAL_DMA_Abort+0x20e>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a2e      	ldr	r2, [pc, #184]	@ (80065c8 <HAL_DMA_Abort+0x238>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d045      	beq.n	800659e <HAL_DMA_Abort+0x20e>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a2d      	ldr	r2, [pc, #180]	@ (80065cc <HAL_DMA_Abort+0x23c>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d040      	beq.n	800659e <HAL_DMA_Abort+0x20e>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a2b      	ldr	r2, [pc, #172]	@ (80065d0 <HAL_DMA_Abort+0x240>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d03b      	beq.n	800659e <HAL_DMA_Abort+0x20e>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a2a      	ldr	r2, [pc, #168]	@ (80065d4 <HAL_DMA_Abort+0x244>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d036      	beq.n	800659e <HAL_DMA_Abort+0x20e>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a28      	ldr	r2, [pc, #160]	@ (80065d8 <HAL_DMA_Abort+0x248>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d031      	beq.n	800659e <HAL_DMA_Abort+0x20e>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a27      	ldr	r2, [pc, #156]	@ (80065dc <HAL_DMA_Abort+0x24c>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d02c      	beq.n	800659e <HAL_DMA_Abort+0x20e>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a25      	ldr	r2, [pc, #148]	@ (80065e0 <HAL_DMA_Abort+0x250>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d027      	beq.n	800659e <HAL_DMA_Abort+0x20e>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a24      	ldr	r2, [pc, #144]	@ (80065e4 <HAL_DMA_Abort+0x254>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d022      	beq.n	800659e <HAL_DMA_Abort+0x20e>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a22      	ldr	r2, [pc, #136]	@ (80065e8 <HAL_DMA_Abort+0x258>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d01d      	beq.n	800659e <HAL_DMA_Abort+0x20e>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a21      	ldr	r2, [pc, #132]	@ (80065ec <HAL_DMA_Abort+0x25c>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d018      	beq.n	800659e <HAL_DMA_Abort+0x20e>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a1f      	ldr	r2, [pc, #124]	@ (80065f0 <HAL_DMA_Abort+0x260>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d013      	beq.n	800659e <HAL_DMA_Abort+0x20e>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a1e      	ldr	r2, [pc, #120]	@ (80065f4 <HAL_DMA_Abort+0x264>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d00e      	beq.n	800659e <HAL_DMA_Abort+0x20e>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a1c      	ldr	r2, [pc, #112]	@ (80065f8 <HAL_DMA_Abort+0x268>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d009      	beq.n	800659e <HAL_DMA_Abort+0x20e>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a1b      	ldr	r2, [pc, #108]	@ (80065fc <HAL_DMA_Abort+0x26c>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d004      	beq.n	800659e <HAL_DMA_Abort+0x20e>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a19      	ldr	r2, [pc, #100]	@ (8006600 <HAL_DMA_Abort+0x270>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d132      	bne.n	8006604 <HAL_DMA_Abort+0x274>
 800659e:	2301      	movs	r3, #1
 80065a0:	e031      	b.n	8006606 <HAL_DMA_Abort+0x276>
 80065a2:	bf00      	nop
 80065a4:	40020010 	.word	0x40020010
 80065a8:	40020028 	.word	0x40020028
 80065ac:	40020040 	.word	0x40020040
 80065b0:	40020058 	.word	0x40020058
 80065b4:	40020070 	.word	0x40020070
 80065b8:	40020088 	.word	0x40020088
 80065bc:	400200a0 	.word	0x400200a0
 80065c0:	400200b8 	.word	0x400200b8
 80065c4:	40020410 	.word	0x40020410
 80065c8:	40020428 	.word	0x40020428
 80065cc:	40020440 	.word	0x40020440
 80065d0:	40020458 	.word	0x40020458
 80065d4:	40020470 	.word	0x40020470
 80065d8:	40020488 	.word	0x40020488
 80065dc:	400204a0 	.word	0x400204a0
 80065e0:	400204b8 	.word	0x400204b8
 80065e4:	58025408 	.word	0x58025408
 80065e8:	5802541c 	.word	0x5802541c
 80065ec:	58025430 	.word	0x58025430
 80065f0:	58025444 	.word	0x58025444
 80065f4:	58025458 	.word	0x58025458
 80065f8:	5802546c 	.word	0x5802546c
 80065fc:	58025480 	.word	0x58025480
 8006600:	58025494 	.word	0x58025494
 8006604:	2300      	movs	r3, #0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d007      	beq.n	800661a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006614:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006618:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a6d      	ldr	r2, [pc, #436]	@ (80067d4 <HAL_DMA_Abort+0x444>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d04a      	beq.n	80066ba <HAL_DMA_Abort+0x32a>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a6b      	ldr	r2, [pc, #428]	@ (80067d8 <HAL_DMA_Abort+0x448>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d045      	beq.n	80066ba <HAL_DMA_Abort+0x32a>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a6a      	ldr	r2, [pc, #424]	@ (80067dc <HAL_DMA_Abort+0x44c>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d040      	beq.n	80066ba <HAL_DMA_Abort+0x32a>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a68      	ldr	r2, [pc, #416]	@ (80067e0 <HAL_DMA_Abort+0x450>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d03b      	beq.n	80066ba <HAL_DMA_Abort+0x32a>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a67      	ldr	r2, [pc, #412]	@ (80067e4 <HAL_DMA_Abort+0x454>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d036      	beq.n	80066ba <HAL_DMA_Abort+0x32a>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a65      	ldr	r2, [pc, #404]	@ (80067e8 <HAL_DMA_Abort+0x458>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d031      	beq.n	80066ba <HAL_DMA_Abort+0x32a>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a64      	ldr	r2, [pc, #400]	@ (80067ec <HAL_DMA_Abort+0x45c>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d02c      	beq.n	80066ba <HAL_DMA_Abort+0x32a>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a62      	ldr	r2, [pc, #392]	@ (80067f0 <HAL_DMA_Abort+0x460>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d027      	beq.n	80066ba <HAL_DMA_Abort+0x32a>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a61      	ldr	r2, [pc, #388]	@ (80067f4 <HAL_DMA_Abort+0x464>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d022      	beq.n	80066ba <HAL_DMA_Abort+0x32a>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a5f      	ldr	r2, [pc, #380]	@ (80067f8 <HAL_DMA_Abort+0x468>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d01d      	beq.n	80066ba <HAL_DMA_Abort+0x32a>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a5e      	ldr	r2, [pc, #376]	@ (80067fc <HAL_DMA_Abort+0x46c>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d018      	beq.n	80066ba <HAL_DMA_Abort+0x32a>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a5c      	ldr	r2, [pc, #368]	@ (8006800 <HAL_DMA_Abort+0x470>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d013      	beq.n	80066ba <HAL_DMA_Abort+0x32a>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a5b      	ldr	r2, [pc, #364]	@ (8006804 <HAL_DMA_Abort+0x474>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d00e      	beq.n	80066ba <HAL_DMA_Abort+0x32a>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a59      	ldr	r2, [pc, #356]	@ (8006808 <HAL_DMA_Abort+0x478>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d009      	beq.n	80066ba <HAL_DMA_Abort+0x32a>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a58      	ldr	r2, [pc, #352]	@ (800680c <HAL_DMA_Abort+0x47c>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d004      	beq.n	80066ba <HAL_DMA_Abort+0x32a>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a56      	ldr	r2, [pc, #344]	@ (8006810 <HAL_DMA_Abort+0x480>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d108      	bne.n	80066cc <HAL_DMA_Abort+0x33c>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f022 0201 	bic.w	r2, r2, #1
 80066c8:	601a      	str	r2, [r3, #0]
 80066ca:	e007      	b.n	80066dc <HAL_DMA_Abort+0x34c>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f022 0201 	bic.w	r2, r2, #1
 80066da:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80066dc:	e013      	b.n	8006706 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80066de:	f7fe fed7 	bl	8005490 <HAL_GetTick>
 80066e2:	4602      	mov	r2, r0
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	2b05      	cmp	r3, #5
 80066ea:	d90c      	bls.n	8006706 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2220      	movs	r2, #32
 80066f0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2203      	movs	r2, #3
 80066f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e12d      	b.n	8006962 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0301 	and.w	r3, r3, #1
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1e5      	bne.n	80066de <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a2f      	ldr	r2, [pc, #188]	@ (80067d4 <HAL_DMA_Abort+0x444>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d04a      	beq.n	80067b2 <HAL_DMA_Abort+0x422>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a2d      	ldr	r2, [pc, #180]	@ (80067d8 <HAL_DMA_Abort+0x448>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d045      	beq.n	80067b2 <HAL_DMA_Abort+0x422>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a2c      	ldr	r2, [pc, #176]	@ (80067dc <HAL_DMA_Abort+0x44c>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d040      	beq.n	80067b2 <HAL_DMA_Abort+0x422>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a2a      	ldr	r2, [pc, #168]	@ (80067e0 <HAL_DMA_Abort+0x450>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d03b      	beq.n	80067b2 <HAL_DMA_Abort+0x422>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a29      	ldr	r2, [pc, #164]	@ (80067e4 <HAL_DMA_Abort+0x454>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d036      	beq.n	80067b2 <HAL_DMA_Abort+0x422>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a27      	ldr	r2, [pc, #156]	@ (80067e8 <HAL_DMA_Abort+0x458>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d031      	beq.n	80067b2 <HAL_DMA_Abort+0x422>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a26      	ldr	r2, [pc, #152]	@ (80067ec <HAL_DMA_Abort+0x45c>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d02c      	beq.n	80067b2 <HAL_DMA_Abort+0x422>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a24      	ldr	r2, [pc, #144]	@ (80067f0 <HAL_DMA_Abort+0x460>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d027      	beq.n	80067b2 <HAL_DMA_Abort+0x422>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a23      	ldr	r2, [pc, #140]	@ (80067f4 <HAL_DMA_Abort+0x464>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d022      	beq.n	80067b2 <HAL_DMA_Abort+0x422>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a21      	ldr	r2, [pc, #132]	@ (80067f8 <HAL_DMA_Abort+0x468>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d01d      	beq.n	80067b2 <HAL_DMA_Abort+0x422>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a20      	ldr	r2, [pc, #128]	@ (80067fc <HAL_DMA_Abort+0x46c>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d018      	beq.n	80067b2 <HAL_DMA_Abort+0x422>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a1e      	ldr	r2, [pc, #120]	@ (8006800 <HAL_DMA_Abort+0x470>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d013      	beq.n	80067b2 <HAL_DMA_Abort+0x422>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a1d      	ldr	r2, [pc, #116]	@ (8006804 <HAL_DMA_Abort+0x474>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d00e      	beq.n	80067b2 <HAL_DMA_Abort+0x422>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a1b      	ldr	r2, [pc, #108]	@ (8006808 <HAL_DMA_Abort+0x478>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d009      	beq.n	80067b2 <HAL_DMA_Abort+0x422>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a1a      	ldr	r2, [pc, #104]	@ (800680c <HAL_DMA_Abort+0x47c>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d004      	beq.n	80067b2 <HAL_DMA_Abort+0x422>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a18      	ldr	r2, [pc, #96]	@ (8006810 <HAL_DMA_Abort+0x480>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d101      	bne.n	80067b6 <HAL_DMA_Abort+0x426>
 80067b2:	2301      	movs	r3, #1
 80067b4:	e000      	b.n	80067b8 <HAL_DMA_Abort+0x428>
 80067b6:	2300      	movs	r3, #0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d02b      	beq.n	8006814 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067c0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067c6:	f003 031f 	and.w	r3, r3, #31
 80067ca:	223f      	movs	r2, #63	@ 0x3f
 80067cc:	409a      	lsls	r2, r3
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	609a      	str	r2, [r3, #8]
 80067d2:	e02a      	b.n	800682a <HAL_DMA_Abort+0x49a>
 80067d4:	40020010 	.word	0x40020010
 80067d8:	40020028 	.word	0x40020028
 80067dc:	40020040 	.word	0x40020040
 80067e0:	40020058 	.word	0x40020058
 80067e4:	40020070 	.word	0x40020070
 80067e8:	40020088 	.word	0x40020088
 80067ec:	400200a0 	.word	0x400200a0
 80067f0:	400200b8 	.word	0x400200b8
 80067f4:	40020410 	.word	0x40020410
 80067f8:	40020428 	.word	0x40020428
 80067fc:	40020440 	.word	0x40020440
 8006800:	40020458 	.word	0x40020458
 8006804:	40020470 	.word	0x40020470
 8006808:	40020488 	.word	0x40020488
 800680c:	400204a0 	.word	0x400204a0
 8006810:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006818:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800681e:	f003 031f 	and.w	r3, r3, #31
 8006822:	2201      	movs	r2, #1
 8006824:	409a      	lsls	r2, r3
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a4f      	ldr	r2, [pc, #316]	@ (800696c <HAL_DMA_Abort+0x5dc>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d072      	beq.n	800691a <HAL_DMA_Abort+0x58a>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a4d      	ldr	r2, [pc, #308]	@ (8006970 <HAL_DMA_Abort+0x5e0>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d06d      	beq.n	800691a <HAL_DMA_Abort+0x58a>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a4c      	ldr	r2, [pc, #304]	@ (8006974 <HAL_DMA_Abort+0x5e4>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d068      	beq.n	800691a <HAL_DMA_Abort+0x58a>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a4a      	ldr	r2, [pc, #296]	@ (8006978 <HAL_DMA_Abort+0x5e8>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d063      	beq.n	800691a <HAL_DMA_Abort+0x58a>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a49      	ldr	r2, [pc, #292]	@ (800697c <HAL_DMA_Abort+0x5ec>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d05e      	beq.n	800691a <HAL_DMA_Abort+0x58a>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a47      	ldr	r2, [pc, #284]	@ (8006980 <HAL_DMA_Abort+0x5f0>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d059      	beq.n	800691a <HAL_DMA_Abort+0x58a>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a46      	ldr	r2, [pc, #280]	@ (8006984 <HAL_DMA_Abort+0x5f4>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d054      	beq.n	800691a <HAL_DMA_Abort+0x58a>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a44      	ldr	r2, [pc, #272]	@ (8006988 <HAL_DMA_Abort+0x5f8>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d04f      	beq.n	800691a <HAL_DMA_Abort+0x58a>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a43      	ldr	r2, [pc, #268]	@ (800698c <HAL_DMA_Abort+0x5fc>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d04a      	beq.n	800691a <HAL_DMA_Abort+0x58a>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a41      	ldr	r2, [pc, #260]	@ (8006990 <HAL_DMA_Abort+0x600>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d045      	beq.n	800691a <HAL_DMA_Abort+0x58a>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a40      	ldr	r2, [pc, #256]	@ (8006994 <HAL_DMA_Abort+0x604>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d040      	beq.n	800691a <HAL_DMA_Abort+0x58a>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a3e      	ldr	r2, [pc, #248]	@ (8006998 <HAL_DMA_Abort+0x608>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d03b      	beq.n	800691a <HAL_DMA_Abort+0x58a>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a3d      	ldr	r2, [pc, #244]	@ (800699c <HAL_DMA_Abort+0x60c>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d036      	beq.n	800691a <HAL_DMA_Abort+0x58a>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a3b      	ldr	r2, [pc, #236]	@ (80069a0 <HAL_DMA_Abort+0x610>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d031      	beq.n	800691a <HAL_DMA_Abort+0x58a>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a3a      	ldr	r2, [pc, #232]	@ (80069a4 <HAL_DMA_Abort+0x614>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d02c      	beq.n	800691a <HAL_DMA_Abort+0x58a>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a38      	ldr	r2, [pc, #224]	@ (80069a8 <HAL_DMA_Abort+0x618>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d027      	beq.n	800691a <HAL_DMA_Abort+0x58a>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a37      	ldr	r2, [pc, #220]	@ (80069ac <HAL_DMA_Abort+0x61c>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d022      	beq.n	800691a <HAL_DMA_Abort+0x58a>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a35      	ldr	r2, [pc, #212]	@ (80069b0 <HAL_DMA_Abort+0x620>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d01d      	beq.n	800691a <HAL_DMA_Abort+0x58a>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a34      	ldr	r2, [pc, #208]	@ (80069b4 <HAL_DMA_Abort+0x624>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d018      	beq.n	800691a <HAL_DMA_Abort+0x58a>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a32      	ldr	r2, [pc, #200]	@ (80069b8 <HAL_DMA_Abort+0x628>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d013      	beq.n	800691a <HAL_DMA_Abort+0x58a>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a31      	ldr	r2, [pc, #196]	@ (80069bc <HAL_DMA_Abort+0x62c>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d00e      	beq.n	800691a <HAL_DMA_Abort+0x58a>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a2f      	ldr	r2, [pc, #188]	@ (80069c0 <HAL_DMA_Abort+0x630>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d009      	beq.n	800691a <HAL_DMA_Abort+0x58a>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a2e      	ldr	r2, [pc, #184]	@ (80069c4 <HAL_DMA_Abort+0x634>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d004      	beq.n	800691a <HAL_DMA_Abort+0x58a>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a2c      	ldr	r2, [pc, #176]	@ (80069c8 <HAL_DMA_Abort+0x638>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d101      	bne.n	800691e <HAL_DMA_Abort+0x58e>
 800691a:	2301      	movs	r3, #1
 800691c:	e000      	b.n	8006920 <HAL_DMA_Abort+0x590>
 800691e:	2300      	movs	r3, #0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d015      	beq.n	8006950 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800692c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00c      	beq.n	8006950 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006940:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006944:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800694e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3718      	adds	r7, #24
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	40020010 	.word	0x40020010
 8006970:	40020028 	.word	0x40020028
 8006974:	40020040 	.word	0x40020040
 8006978:	40020058 	.word	0x40020058
 800697c:	40020070 	.word	0x40020070
 8006980:	40020088 	.word	0x40020088
 8006984:	400200a0 	.word	0x400200a0
 8006988:	400200b8 	.word	0x400200b8
 800698c:	40020410 	.word	0x40020410
 8006990:	40020428 	.word	0x40020428
 8006994:	40020440 	.word	0x40020440
 8006998:	40020458 	.word	0x40020458
 800699c:	40020470 	.word	0x40020470
 80069a0:	40020488 	.word	0x40020488
 80069a4:	400204a0 	.word	0x400204a0
 80069a8:	400204b8 	.word	0x400204b8
 80069ac:	58025408 	.word	0x58025408
 80069b0:	5802541c 	.word	0x5802541c
 80069b4:	58025430 	.word	0x58025430
 80069b8:	58025444 	.word	0x58025444
 80069bc:	58025458 	.word	0x58025458
 80069c0:	5802546c 	.word	0x5802546c
 80069c4:	58025480 	.word	0x58025480
 80069c8:	58025494 	.word	0x58025494

080069cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d101      	bne.n	80069de <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e237      	b.n	8006e4e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d004      	beq.n	80069f4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2280      	movs	r2, #128	@ 0x80
 80069ee:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e22c      	b.n	8006e4e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a5c      	ldr	r2, [pc, #368]	@ (8006b6c <HAL_DMA_Abort_IT+0x1a0>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d04a      	beq.n	8006a94 <HAL_DMA_Abort_IT+0xc8>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a5b      	ldr	r2, [pc, #364]	@ (8006b70 <HAL_DMA_Abort_IT+0x1a4>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d045      	beq.n	8006a94 <HAL_DMA_Abort_IT+0xc8>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a59      	ldr	r2, [pc, #356]	@ (8006b74 <HAL_DMA_Abort_IT+0x1a8>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d040      	beq.n	8006a94 <HAL_DMA_Abort_IT+0xc8>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a58      	ldr	r2, [pc, #352]	@ (8006b78 <HAL_DMA_Abort_IT+0x1ac>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d03b      	beq.n	8006a94 <HAL_DMA_Abort_IT+0xc8>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a56      	ldr	r2, [pc, #344]	@ (8006b7c <HAL_DMA_Abort_IT+0x1b0>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d036      	beq.n	8006a94 <HAL_DMA_Abort_IT+0xc8>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a55      	ldr	r2, [pc, #340]	@ (8006b80 <HAL_DMA_Abort_IT+0x1b4>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d031      	beq.n	8006a94 <HAL_DMA_Abort_IT+0xc8>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a53      	ldr	r2, [pc, #332]	@ (8006b84 <HAL_DMA_Abort_IT+0x1b8>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d02c      	beq.n	8006a94 <HAL_DMA_Abort_IT+0xc8>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a52      	ldr	r2, [pc, #328]	@ (8006b88 <HAL_DMA_Abort_IT+0x1bc>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d027      	beq.n	8006a94 <HAL_DMA_Abort_IT+0xc8>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a50      	ldr	r2, [pc, #320]	@ (8006b8c <HAL_DMA_Abort_IT+0x1c0>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d022      	beq.n	8006a94 <HAL_DMA_Abort_IT+0xc8>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a4f      	ldr	r2, [pc, #316]	@ (8006b90 <HAL_DMA_Abort_IT+0x1c4>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d01d      	beq.n	8006a94 <HAL_DMA_Abort_IT+0xc8>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a4d      	ldr	r2, [pc, #308]	@ (8006b94 <HAL_DMA_Abort_IT+0x1c8>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d018      	beq.n	8006a94 <HAL_DMA_Abort_IT+0xc8>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a4c      	ldr	r2, [pc, #304]	@ (8006b98 <HAL_DMA_Abort_IT+0x1cc>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d013      	beq.n	8006a94 <HAL_DMA_Abort_IT+0xc8>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a4a      	ldr	r2, [pc, #296]	@ (8006b9c <HAL_DMA_Abort_IT+0x1d0>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d00e      	beq.n	8006a94 <HAL_DMA_Abort_IT+0xc8>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a49      	ldr	r2, [pc, #292]	@ (8006ba0 <HAL_DMA_Abort_IT+0x1d4>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d009      	beq.n	8006a94 <HAL_DMA_Abort_IT+0xc8>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a47      	ldr	r2, [pc, #284]	@ (8006ba4 <HAL_DMA_Abort_IT+0x1d8>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d004      	beq.n	8006a94 <HAL_DMA_Abort_IT+0xc8>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a46      	ldr	r2, [pc, #280]	@ (8006ba8 <HAL_DMA_Abort_IT+0x1dc>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d101      	bne.n	8006a98 <HAL_DMA_Abort_IT+0xcc>
 8006a94:	2301      	movs	r3, #1
 8006a96:	e000      	b.n	8006a9a <HAL_DMA_Abort_IT+0xce>
 8006a98:	2300      	movs	r3, #0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	f000 8086 	beq.w	8006bac <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2204      	movs	r2, #4
 8006aa4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a2f      	ldr	r2, [pc, #188]	@ (8006b6c <HAL_DMA_Abort_IT+0x1a0>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d04a      	beq.n	8006b48 <HAL_DMA_Abort_IT+0x17c>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a2e      	ldr	r2, [pc, #184]	@ (8006b70 <HAL_DMA_Abort_IT+0x1a4>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d045      	beq.n	8006b48 <HAL_DMA_Abort_IT+0x17c>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a2c      	ldr	r2, [pc, #176]	@ (8006b74 <HAL_DMA_Abort_IT+0x1a8>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d040      	beq.n	8006b48 <HAL_DMA_Abort_IT+0x17c>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a2b      	ldr	r2, [pc, #172]	@ (8006b78 <HAL_DMA_Abort_IT+0x1ac>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d03b      	beq.n	8006b48 <HAL_DMA_Abort_IT+0x17c>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a29      	ldr	r2, [pc, #164]	@ (8006b7c <HAL_DMA_Abort_IT+0x1b0>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d036      	beq.n	8006b48 <HAL_DMA_Abort_IT+0x17c>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a28      	ldr	r2, [pc, #160]	@ (8006b80 <HAL_DMA_Abort_IT+0x1b4>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d031      	beq.n	8006b48 <HAL_DMA_Abort_IT+0x17c>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a26      	ldr	r2, [pc, #152]	@ (8006b84 <HAL_DMA_Abort_IT+0x1b8>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d02c      	beq.n	8006b48 <HAL_DMA_Abort_IT+0x17c>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a25      	ldr	r2, [pc, #148]	@ (8006b88 <HAL_DMA_Abort_IT+0x1bc>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d027      	beq.n	8006b48 <HAL_DMA_Abort_IT+0x17c>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a23      	ldr	r2, [pc, #140]	@ (8006b8c <HAL_DMA_Abort_IT+0x1c0>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d022      	beq.n	8006b48 <HAL_DMA_Abort_IT+0x17c>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a22      	ldr	r2, [pc, #136]	@ (8006b90 <HAL_DMA_Abort_IT+0x1c4>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d01d      	beq.n	8006b48 <HAL_DMA_Abort_IT+0x17c>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a20      	ldr	r2, [pc, #128]	@ (8006b94 <HAL_DMA_Abort_IT+0x1c8>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d018      	beq.n	8006b48 <HAL_DMA_Abort_IT+0x17c>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a1f      	ldr	r2, [pc, #124]	@ (8006b98 <HAL_DMA_Abort_IT+0x1cc>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d013      	beq.n	8006b48 <HAL_DMA_Abort_IT+0x17c>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a1d      	ldr	r2, [pc, #116]	@ (8006b9c <HAL_DMA_Abort_IT+0x1d0>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d00e      	beq.n	8006b48 <HAL_DMA_Abort_IT+0x17c>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a1c      	ldr	r2, [pc, #112]	@ (8006ba0 <HAL_DMA_Abort_IT+0x1d4>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d009      	beq.n	8006b48 <HAL_DMA_Abort_IT+0x17c>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a1a      	ldr	r2, [pc, #104]	@ (8006ba4 <HAL_DMA_Abort_IT+0x1d8>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d004      	beq.n	8006b48 <HAL_DMA_Abort_IT+0x17c>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a19      	ldr	r2, [pc, #100]	@ (8006ba8 <HAL_DMA_Abort_IT+0x1dc>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d108      	bne.n	8006b5a <HAL_DMA_Abort_IT+0x18e>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f022 0201 	bic.w	r2, r2, #1
 8006b56:	601a      	str	r2, [r3, #0]
 8006b58:	e178      	b.n	8006e4c <HAL_DMA_Abort_IT+0x480>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f022 0201 	bic.w	r2, r2, #1
 8006b68:	601a      	str	r2, [r3, #0]
 8006b6a:	e16f      	b.n	8006e4c <HAL_DMA_Abort_IT+0x480>
 8006b6c:	40020010 	.word	0x40020010
 8006b70:	40020028 	.word	0x40020028
 8006b74:	40020040 	.word	0x40020040
 8006b78:	40020058 	.word	0x40020058
 8006b7c:	40020070 	.word	0x40020070
 8006b80:	40020088 	.word	0x40020088
 8006b84:	400200a0 	.word	0x400200a0
 8006b88:	400200b8 	.word	0x400200b8
 8006b8c:	40020410 	.word	0x40020410
 8006b90:	40020428 	.word	0x40020428
 8006b94:	40020440 	.word	0x40020440
 8006b98:	40020458 	.word	0x40020458
 8006b9c:	40020470 	.word	0x40020470
 8006ba0:	40020488 	.word	0x40020488
 8006ba4:	400204a0 	.word	0x400204a0
 8006ba8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f022 020e 	bic.w	r2, r2, #14
 8006bba:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a6c      	ldr	r2, [pc, #432]	@ (8006d74 <HAL_DMA_Abort_IT+0x3a8>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d04a      	beq.n	8006c5c <HAL_DMA_Abort_IT+0x290>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a6b      	ldr	r2, [pc, #428]	@ (8006d78 <HAL_DMA_Abort_IT+0x3ac>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d045      	beq.n	8006c5c <HAL_DMA_Abort_IT+0x290>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a69      	ldr	r2, [pc, #420]	@ (8006d7c <HAL_DMA_Abort_IT+0x3b0>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d040      	beq.n	8006c5c <HAL_DMA_Abort_IT+0x290>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a68      	ldr	r2, [pc, #416]	@ (8006d80 <HAL_DMA_Abort_IT+0x3b4>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d03b      	beq.n	8006c5c <HAL_DMA_Abort_IT+0x290>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a66      	ldr	r2, [pc, #408]	@ (8006d84 <HAL_DMA_Abort_IT+0x3b8>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d036      	beq.n	8006c5c <HAL_DMA_Abort_IT+0x290>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a65      	ldr	r2, [pc, #404]	@ (8006d88 <HAL_DMA_Abort_IT+0x3bc>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d031      	beq.n	8006c5c <HAL_DMA_Abort_IT+0x290>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a63      	ldr	r2, [pc, #396]	@ (8006d8c <HAL_DMA_Abort_IT+0x3c0>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d02c      	beq.n	8006c5c <HAL_DMA_Abort_IT+0x290>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a62      	ldr	r2, [pc, #392]	@ (8006d90 <HAL_DMA_Abort_IT+0x3c4>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d027      	beq.n	8006c5c <HAL_DMA_Abort_IT+0x290>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a60      	ldr	r2, [pc, #384]	@ (8006d94 <HAL_DMA_Abort_IT+0x3c8>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d022      	beq.n	8006c5c <HAL_DMA_Abort_IT+0x290>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a5f      	ldr	r2, [pc, #380]	@ (8006d98 <HAL_DMA_Abort_IT+0x3cc>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d01d      	beq.n	8006c5c <HAL_DMA_Abort_IT+0x290>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a5d      	ldr	r2, [pc, #372]	@ (8006d9c <HAL_DMA_Abort_IT+0x3d0>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d018      	beq.n	8006c5c <HAL_DMA_Abort_IT+0x290>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a5c      	ldr	r2, [pc, #368]	@ (8006da0 <HAL_DMA_Abort_IT+0x3d4>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d013      	beq.n	8006c5c <HAL_DMA_Abort_IT+0x290>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a5a      	ldr	r2, [pc, #360]	@ (8006da4 <HAL_DMA_Abort_IT+0x3d8>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d00e      	beq.n	8006c5c <HAL_DMA_Abort_IT+0x290>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a59      	ldr	r2, [pc, #356]	@ (8006da8 <HAL_DMA_Abort_IT+0x3dc>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d009      	beq.n	8006c5c <HAL_DMA_Abort_IT+0x290>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a57      	ldr	r2, [pc, #348]	@ (8006dac <HAL_DMA_Abort_IT+0x3e0>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d004      	beq.n	8006c5c <HAL_DMA_Abort_IT+0x290>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a56      	ldr	r2, [pc, #344]	@ (8006db0 <HAL_DMA_Abort_IT+0x3e4>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d108      	bne.n	8006c6e <HAL_DMA_Abort_IT+0x2a2>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f022 0201 	bic.w	r2, r2, #1
 8006c6a:	601a      	str	r2, [r3, #0]
 8006c6c:	e007      	b.n	8006c7e <HAL_DMA_Abort_IT+0x2b2>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f022 0201 	bic.w	r2, r2, #1
 8006c7c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a3c      	ldr	r2, [pc, #240]	@ (8006d74 <HAL_DMA_Abort_IT+0x3a8>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d072      	beq.n	8006d6e <HAL_DMA_Abort_IT+0x3a2>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a3a      	ldr	r2, [pc, #232]	@ (8006d78 <HAL_DMA_Abort_IT+0x3ac>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d06d      	beq.n	8006d6e <HAL_DMA_Abort_IT+0x3a2>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a39      	ldr	r2, [pc, #228]	@ (8006d7c <HAL_DMA_Abort_IT+0x3b0>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d068      	beq.n	8006d6e <HAL_DMA_Abort_IT+0x3a2>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a37      	ldr	r2, [pc, #220]	@ (8006d80 <HAL_DMA_Abort_IT+0x3b4>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d063      	beq.n	8006d6e <HAL_DMA_Abort_IT+0x3a2>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a36      	ldr	r2, [pc, #216]	@ (8006d84 <HAL_DMA_Abort_IT+0x3b8>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d05e      	beq.n	8006d6e <HAL_DMA_Abort_IT+0x3a2>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a34      	ldr	r2, [pc, #208]	@ (8006d88 <HAL_DMA_Abort_IT+0x3bc>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d059      	beq.n	8006d6e <HAL_DMA_Abort_IT+0x3a2>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a33      	ldr	r2, [pc, #204]	@ (8006d8c <HAL_DMA_Abort_IT+0x3c0>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d054      	beq.n	8006d6e <HAL_DMA_Abort_IT+0x3a2>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a31      	ldr	r2, [pc, #196]	@ (8006d90 <HAL_DMA_Abort_IT+0x3c4>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d04f      	beq.n	8006d6e <HAL_DMA_Abort_IT+0x3a2>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a30      	ldr	r2, [pc, #192]	@ (8006d94 <HAL_DMA_Abort_IT+0x3c8>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d04a      	beq.n	8006d6e <HAL_DMA_Abort_IT+0x3a2>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a2e      	ldr	r2, [pc, #184]	@ (8006d98 <HAL_DMA_Abort_IT+0x3cc>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d045      	beq.n	8006d6e <HAL_DMA_Abort_IT+0x3a2>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a2d      	ldr	r2, [pc, #180]	@ (8006d9c <HAL_DMA_Abort_IT+0x3d0>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d040      	beq.n	8006d6e <HAL_DMA_Abort_IT+0x3a2>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a2b      	ldr	r2, [pc, #172]	@ (8006da0 <HAL_DMA_Abort_IT+0x3d4>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d03b      	beq.n	8006d6e <HAL_DMA_Abort_IT+0x3a2>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a2a      	ldr	r2, [pc, #168]	@ (8006da4 <HAL_DMA_Abort_IT+0x3d8>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d036      	beq.n	8006d6e <HAL_DMA_Abort_IT+0x3a2>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a28      	ldr	r2, [pc, #160]	@ (8006da8 <HAL_DMA_Abort_IT+0x3dc>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d031      	beq.n	8006d6e <HAL_DMA_Abort_IT+0x3a2>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a27      	ldr	r2, [pc, #156]	@ (8006dac <HAL_DMA_Abort_IT+0x3e0>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d02c      	beq.n	8006d6e <HAL_DMA_Abort_IT+0x3a2>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a25      	ldr	r2, [pc, #148]	@ (8006db0 <HAL_DMA_Abort_IT+0x3e4>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d027      	beq.n	8006d6e <HAL_DMA_Abort_IT+0x3a2>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a24      	ldr	r2, [pc, #144]	@ (8006db4 <HAL_DMA_Abort_IT+0x3e8>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d022      	beq.n	8006d6e <HAL_DMA_Abort_IT+0x3a2>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a22      	ldr	r2, [pc, #136]	@ (8006db8 <HAL_DMA_Abort_IT+0x3ec>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d01d      	beq.n	8006d6e <HAL_DMA_Abort_IT+0x3a2>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a21      	ldr	r2, [pc, #132]	@ (8006dbc <HAL_DMA_Abort_IT+0x3f0>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d018      	beq.n	8006d6e <HAL_DMA_Abort_IT+0x3a2>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a1f      	ldr	r2, [pc, #124]	@ (8006dc0 <HAL_DMA_Abort_IT+0x3f4>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d013      	beq.n	8006d6e <HAL_DMA_Abort_IT+0x3a2>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a1e      	ldr	r2, [pc, #120]	@ (8006dc4 <HAL_DMA_Abort_IT+0x3f8>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d00e      	beq.n	8006d6e <HAL_DMA_Abort_IT+0x3a2>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a1c      	ldr	r2, [pc, #112]	@ (8006dc8 <HAL_DMA_Abort_IT+0x3fc>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d009      	beq.n	8006d6e <HAL_DMA_Abort_IT+0x3a2>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a1b      	ldr	r2, [pc, #108]	@ (8006dcc <HAL_DMA_Abort_IT+0x400>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d004      	beq.n	8006d6e <HAL_DMA_Abort_IT+0x3a2>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a19      	ldr	r2, [pc, #100]	@ (8006dd0 <HAL_DMA_Abort_IT+0x404>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d132      	bne.n	8006dd4 <HAL_DMA_Abort_IT+0x408>
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e031      	b.n	8006dd6 <HAL_DMA_Abort_IT+0x40a>
 8006d72:	bf00      	nop
 8006d74:	40020010 	.word	0x40020010
 8006d78:	40020028 	.word	0x40020028
 8006d7c:	40020040 	.word	0x40020040
 8006d80:	40020058 	.word	0x40020058
 8006d84:	40020070 	.word	0x40020070
 8006d88:	40020088 	.word	0x40020088
 8006d8c:	400200a0 	.word	0x400200a0
 8006d90:	400200b8 	.word	0x400200b8
 8006d94:	40020410 	.word	0x40020410
 8006d98:	40020428 	.word	0x40020428
 8006d9c:	40020440 	.word	0x40020440
 8006da0:	40020458 	.word	0x40020458
 8006da4:	40020470 	.word	0x40020470
 8006da8:	40020488 	.word	0x40020488
 8006dac:	400204a0 	.word	0x400204a0
 8006db0:	400204b8 	.word	0x400204b8
 8006db4:	58025408 	.word	0x58025408
 8006db8:	5802541c 	.word	0x5802541c
 8006dbc:	58025430 	.word	0x58025430
 8006dc0:	58025444 	.word	0x58025444
 8006dc4:	58025458 	.word	0x58025458
 8006dc8:	5802546c 	.word	0x5802546c
 8006dcc:	58025480 	.word	0x58025480
 8006dd0:	58025494 	.word	0x58025494
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d028      	beq.n	8006e2c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006de4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006de8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dee:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006df4:	f003 031f 	and.w	r3, r3, #31
 8006df8:	2201      	movs	r2, #1
 8006dfa:	409a      	lsls	r2, r3
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006e08:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00c      	beq.n	8006e2c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e1c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006e20:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006e2a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d003      	beq.n	8006e4c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006e4c:	2300      	movs	r3, #0
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3710      	adds	r7, #16
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop

08006e58 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b08a      	sub	sp, #40	@ 0x28
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006e60:	2300      	movs	r3, #0
 8006e62:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006e64:	4b67      	ldr	r3, [pc, #412]	@ (8007004 <HAL_DMA_IRQHandler+0x1ac>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a67      	ldr	r2, [pc, #412]	@ (8007008 <HAL_DMA_IRQHandler+0x1b0>)
 8006e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e6e:	0a9b      	lsrs	r3, r3, #10
 8006e70:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e76:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e7c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006e7e:	6a3b      	ldr	r3, [r7, #32]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a5f      	ldr	r2, [pc, #380]	@ (800700c <HAL_DMA_IRQHandler+0x1b4>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d04a      	beq.n	8006f2a <HAL_DMA_IRQHandler+0xd2>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a5d      	ldr	r2, [pc, #372]	@ (8007010 <HAL_DMA_IRQHandler+0x1b8>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d045      	beq.n	8006f2a <HAL_DMA_IRQHandler+0xd2>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a5c      	ldr	r2, [pc, #368]	@ (8007014 <HAL_DMA_IRQHandler+0x1bc>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d040      	beq.n	8006f2a <HAL_DMA_IRQHandler+0xd2>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a5a      	ldr	r2, [pc, #360]	@ (8007018 <HAL_DMA_IRQHandler+0x1c0>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d03b      	beq.n	8006f2a <HAL_DMA_IRQHandler+0xd2>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a59      	ldr	r2, [pc, #356]	@ (800701c <HAL_DMA_IRQHandler+0x1c4>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d036      	beq.n	8006f2a <HAL_DMA_IRQHandler+0xd2>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a57      	ldr	r2, [pc, #348]	@ (8007020 <HAL_DMA_IRQHandler+0x1c8>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d031      	beq.n	8006f2a <HAL_DMA_IRQHandler+0xd2>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a56      	ldr	r2, [pc, #344]	@ (8007024 <HAL_DMA_IRQHandler+0x1cc>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d02c      	beq.n	8006f2a <HAL_DMA_IRQHandler+0xd2>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a54      	ldr	r2, [pc, #336]	@ (8007028 <HAL_DMA_IRQHandler+0x1d0>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d027      	beq.n	8006f2a <HAL_DMA_IRQHandler+0xd2>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a53      	ldr	r2, [pc, #332]	@ (800702c <HAL_DMA_IRQHandler+0x1d4>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d022      	beq.n	8006f2a <HAL_DMA_IRQHandler+0xd2>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a51      	ldr	r2, [pc, #324]	@ (8007030 <HAL_DMA_IRQHandler+0x1d8>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d01d      	beq.n	8006f2a <HAL_DMA_IRQHandler+0xd2>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a50      	ldr	r2, [pc, #320]	@ (8007034 <HAL_DMA_IRQHandler+0x1dc>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d018      	beq.n	8006f2a <HAL_DMA_IRQHandler+0xd2>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a4e      	ldr	r2, [pc, #312]	@ (8007038 <HAL_DMA_IRQHandler+0x1e0>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d013      	beq.n	8006f2a <HAL_DMA_IRQHandler+0xd2>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a4d      	ldr	r2, [pc, #308]	@ (800703c <HAL_DMA_IRQHandler+0x1e4>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d00e      	beq.n	8006f2a <HAL_DMA_IRQHandler+0xd2>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a4b      	ldr	r2, [pc, #300]	@ (8007040 <HAL_DMA_IRQHandler+0x1e8>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d009      	beq.n	8006f2a <HAL_DMA_IRQHandler+0xd2>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a4a      	ldr	r2, [pc, #296]	@ (8007044 <HAL_DMA_IRQHandler+0x1ec>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d004      	beq.n	8006f2a <HAL_DMA_IRQHandler+0xd2>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a48      	ldr	r2, [pc, #288]	@ (8007048 <HAL_DMA_IRQHandler+0x1f0>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d101      	bne.n	8006f2e <HAL_DMA_IRQHandler+0xd6>
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e000      	b.n	8006f30 <HAL_DMA_IRQHandler+0xd8>
 8006f2e:	2300      	movs	r3, #0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f000 842b 	beq.w	800778c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f3a:	f003 031f 	and.w	r3, r3, #31
 8006f3e:	2208      	movs	r2, #8
 8006f40:	409a      	lsls	r2, r3
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	4013      	ands	r3, r2
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	f000 80a2 	beq.w	8007090 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a2e      	ldr	r2, [pc, #184]	@ (800700c <HAL_DMA_IRQHandler+0x1b4>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d04a      	beq.n	8006fec <HAL_DMA_IRQHandler+0x194>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a2d      	ldr	r2, [pc, #180]	@ (8007010 <HAL_DMA_IRQHandler+0x1b8>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d045      	beq.n	8006fec <HAL_DMA_IRQHandler+0x194>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a2b      	ldr	r2, [pc, #172]	@ (8007014 <HAL_DMA_IRQHandler+0x1bc>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d040      	beq.n	8006fec <HAL_DMA_IRQHandler+0x194>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a2a      	ldr	r2, [pc, #168]	@ (8007018 <HAL_DMA_IRQHandler+0x1c0>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d03b      	beq.n	8006fec <HAL_DMA_IRQHandler+0x194>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a28      	ldr	r2, [pc, #160]	@ (800701c <HAL_DMA_IRQHandler+0x1c4>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d036      	beq.n	8006fec <HAL_DMA_IRQHandler+0x194>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a27      	ldr	r2, [pc, #156]	@ (8007020 <HAL_DMA_IRQHandler+0x1c8>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d031      	beq.n	8006fec <HAL_DMA_IRQHandler+0x194>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a25      	ldr	r2, [pc, #148]	@ (8007024 <HAL_DMA_IRQHandler+0x1cc>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d02c      	beq.n	8006fec <HAL_DMA_IRQHandler+0x194>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a24      	ldr	r2, [pc, #144]	@ (8007028 <HAL_DMA_IRQHandler+0x1d0>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d027      	beq.n	8006fec <HAL_DMA_IRQHandler+0x194>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a22      	ldr	r2, [pc, #136]	@ (800702c <HAL_DMA_IRQHandler+0x1d4>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d022      	beq.n	8006fec <HAL_DMA_IRQHandler+0x194>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a21      	ldr	r2, [pc, #132]	@ (8007030 <HAL_DMA_IRQHandler+0x1d8>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d01d      	beq.n	8006fec <HAL_DMA_IRQHandler+0x194>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a1f      	ldr	r2, [pc, #124]	@ (8007034 <HAL_DMA_IRQHandler+0x1dc>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d018      	beq.n	8006fec <HAL_DMA_IRQHandler+0x194>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a1e      	ldr	r2, [pc, #120]	@ (8007038 <HAL_DMA_IRQHandler+0x1e0>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d013      	beq.n	8006fec <HAL_DMA_IRQHandler+0x194>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a1c      	ldr	r2, [pc, #112]	@ (800703c <HAL_DMA_IRQHandler+0x1e4>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d00e      	beq.n	8006fec <HAL_DMA_IRQHandler+0x194>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a1b      	ldr	r2, [pc, #108]	@ (8007040 <HAL_DMA_IRQHandler+0x1e8>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d009      	beq.n	8006fec <HAL_DMA_IRQHandler+0x194>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a19      	ldr	r2, [pc, #100]	@ (8007044 <HAL_DMA_IRQHandler+0x1ec>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d004      	beq.n	8006fec <HAL_DMA_IRQHandler+0x194>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a18      	ldr	r2, [pc, #96]	@ (8007048 <HAL_DMA_IRQHandler+0x1f0>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d12f      	bne.n	800704c <HAL_DMA_IRQHandler+0x1f4>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 0304 	and.w	r3, r3, #4
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	bf14      	ite	ne
 8006ffa:	2301      	movne	r3, #1
 8006ffc:	2300      	moveq	r3, #0
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	e02e      	b.n	8007060 <HAL_DMA_IRQHandler+0x208>
 8007002:	bf00      	nop
 8007004:	24000000 	.word	0x24000000
 8007008:	1b4e81b5 	.word	0x1b4e81b5
 800700c:	40020010 	.word	0x40020010
 8007010:	40020028 	.word	0x40020028
 8007014:	40020040 	.word	0x40020040
 8007018:	40020058 	.word	0x40020058
 800701c:	40020070 	.word	0x40020070
 8007020:	40020088 	.word	0x40020088
 8007024:	400200a0 	.word	0x400200a0
 8007028:	400200b8 	.word	0x400200b8
 800702c:	40020410 	.word	0x40020410
 8007030:	40020428 	.word	0x40020428
 8007034:	40020440 	.word	0x40020440
 8007038:	40020458 	.word	0x40020458
 800703c:	40020470 	.word	0x40020470
 8007040:	40020488 	.word	0x40020488
 8007044:	400204a0 	.word	0x400204a0
 8007048:	400204b8 	.word	0x400204b8
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 0308 	and.w	r3, r3, #8
 8007056:	2b00      	cmp	r3, #0
 8007058:	bf14      	ite	ne
 800705a:	2301      	movne	r3, #1
 800705c:	2300      	moveq	r3, #0
 800705e:	b2db      	uxtb	r3, r3
 8007060:	2b00      	cmp	r3, #0
 8007062:	d015      	beq.n	8007090 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f022 0204 	bic.w	r2, r2, #4
 8007072:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007078:	f003 031f 	and.w	r3, r3, #31
 800707c:	2208      	movs	r2, #8
 800707e:	409a      	lsls	r2, r3
 8007080:	6a3b      	ldr	r3, [r7, #32]
 8007082:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007088:	f043 0201 	orr.w	r2, r3, #1
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007094:	f003 031f 	and.w	r3, r3, #31
 8007098:	69ba      	ldr	r2, [r7, #24]
 800709a:	fa22 f303 	lsr.w	r3, r2, r3
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d06e      	beq.n	8007184 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a69      	ldr	r2, [pc, #420]	@ (8007250 <HAL_DMA_IRQHandler+0x3f8>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d04a      	beq.n	8007146 <HAL_DMA_IRQHandler+0x2ee>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a67      	ldr	r2, [pc, #412]	@ (8007254 <HAL_DMA_IRQHandler+0x3fc>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d045      	beq.n	8007146 <HAL_DMA_IRQHandler+0x2ee>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a66      	ldr	r2, [pc, #408]	@ (8007258 <HAL_DMA_IRQHandler+0x400>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d040      	beq.n	8007146 <HAL_DMA_IRQHandler+0x2ee>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a64      	ldr	r2, [pc, #400]	@ (800725c <HAL_DMA_IRQHandler+0x404>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d03b      	beq.n	8007146 <HAL_DMA_IRQHandler+0x2ee>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a63      	ldr	r2, [pc, #396]	@ (8007260 <HAL_DMA_IRQHandler+0x408>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d036      	beq.n	8007146 <HAL_DMA_IRQHandler+0x2ee>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a61      	ldr	r2, [pc, #388]	@ (8007264 <HAL_DMA_IRQHandler+0x40c>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d031      	beq.n	8007146 <HAL_DMA_IRQHandler+0x2ee>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a60      	ldr	r2, [pc, #384]	@ (8007268 <HAL_DMA_IRQHandler+0x410>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d02c      	beq.n	8007146 <HAL_DMA_IRQHandler+0x2ee>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a5e      	ldr	r2, [pc, #376]	@ (800726c <HAL_DMA_IRQHandler+0x414>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d027      	beq.n	8007146 <HAL_DMA_IRQHandler+0x2ee>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a5d      	ldr	r2, [pc, #372]	@ (8007270 <HAL_DMA_IRQHandler+0x418>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d022      	beq.n	8007146 <HAL_DMA_IRQHandler+0x2ee>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a5b      	ldr	r2, [pc, #364]	@ (8007274 <HAL_DMA_IRQHandler+0x41c>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d01d      	beq.n	8007146 <HAL_DMA_IRQHandler+0x2ee>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a5a      	ldr	r2, [pc, #360]	@ (8007278 <HAL_DMA_IRQHandler+0x420>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d018      	beq.n	8007146 <HAL_DMA_IRQHandler+0x2ee>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a58      	ldr	r2, [pc, #352]	@ (800727c <HAL_DMA_IRQHandler+0x424>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d013      	beq.n	8007146 <HAL_DMA_IRQHandler+0x2ee>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a57      	ldr	r2, [pc, #348]	@ (8007280 <HAL_DMA_IRQHandler+0x428>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d00e      	beq.n	8007146 <HAL_DMA_IRQHandler+0x2ee>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a55      	ldr	r2, [pc, #340]	@ (8007284 <HAL_DMA_IRQHandler+0x42c>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d009      	beq.n	8007146 <HAL_DMA_IRQHandler+0x2ee>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a54      	ldr	r2, [pc, #336]	@ (8007288 <HAL_DMA_IRQHandler+0x430>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d004      	beq.n	8007146 <HAL_DMA_IRQHandler+0x2ee>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a52      	ldr	r2, [pc, #328]	@ (800728c <HAL_DMA_IRQHandler+0x434>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d10a      	bne.n	800715c <HAL_DMA_IRQHandler+0x304>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	695b      	ldr	r3, [r3, #20]
 800714c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007150:	2b00      	cmp	r3, #0
 8007152:	bf14      	ite	ne
 8007154:	2301      	movne	r3, #1
 8007156:	2300      	moveq	r3, #0
 8007158:	b2db      	uxtb	r3, r3
 800715a:	e003      	b.n	8007164 <HAL_DMA_IRQHandler+0x30c>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2300      	movs	r3, #0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d00d      	beq.n	8007184 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800716c:	f003 031f 	and.w	r3, r3, #31
 8007170:	2201      	movs	r2, #1
 8007172:	409a      	lsls	r2, r3
 8007174:	6a3b      	ldr	r3, [r7, #32]
 8007176:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800717c:	f043 0202 	orr.w	r2, r3, #2
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007188:	f003 031f 	and.w	r3, r3, #31
 800718c:	2204      	movs	r2, #4
 800718e:	409a      	lsls	r2, r3
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	4013      	ands	r3, r2
 8007194:	2b00      	cmp	r3, #0
 8007196:	f000 808f 	beq.w	80072b8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a2c      	ldr	r2, [pc, #176]	@ (8007250 <HAL_DMA_IRQHandler+0x3f8>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d04a      	beq.n	800723a <HAL_DMA_IRQHandler+0x3e2>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a2a      	ldr	r2, [pc, #168]	@ (8007254 <HAL_DMA_IRQHandler+0x3fc>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d045      	beq.n	800723a <HAL_DMA_IRQHandler+0x3e2>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a29      	ldr	r2, [pc, #164]	@ (8007258 <HAL_DMA_IRQHandler+0x400>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d040      	beq.n	800723a <HAL_DMA_IRQHandler+0x3e2>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a27      	ldr	r2, [pc, #156]	@ (800725c <HAL_DMA_IRQHandler+0x404>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d03b      	beq.n	800723a <HAL_DMA_IRQHandler+0x3e2>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a26      	ldr	r2, [pc, #152]	@ (8007260 <HAL_DMA_IRQHandler+0x408>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d036      	beq.n	800723a <HAL_DMA_IRQHandler+0x3e2>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a24      	ldr	r2, [pc, #144]	@ (8007264 <HAL_DMA_IRQHandler+0x40c>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d031      	beq.n	800723a <HAL_DMA_IRQHandler+0x3e2>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a23      	ldr	r2, [pc, #140]	@ (8007268 <HAL_DMA_IRQHandler+0x410>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d02c      	beq.n	800723a <HAL_DMA_IRQHandler+0x3e2>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a21      	ldr	r2, [pc, #132]	@ (800726c <HAL_DMA_IRQHandler+0x414>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d027      	beq.n	800723a <HAL_DMA_IRQHandler+0x3e2>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a20      	ldr	r2, [pc, #128]	@ (8007270 <HAL_DMA_IRQHandler+0x418>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d022      	beq.n	800723a <HAL_DMA_IRQHandler+0x3e2>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a1e      	ldr	r2, [pc, #120]	@ (8007274 <HAL_DMA_IRQHandler+0x41c>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d01d      	beq.n	800723a <HAL_DMA_IRQHandler+0x3e2>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a1d      	ldr	r2, [pc, #116]	@ (8007278 <HAL_DMA_IRQHandler+0x420>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d018      	beq.n	800723a <HAL_DMA_IRQHandler+0x3e2>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a1b      	ldr	r2, [pc, #108]	@ (800727c <HAL_DMA_IRQHandler+0x424>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d013      	beq.n	800723a <HAL_DMA_IRQHandler+0x3e2>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a1a      	ldr	r2, [pc, #104]	@ (8007280 <HAL_DMA_IRQHandler+0x428>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d00e      	beq.n	800723a <HAL_DMA_IRQHandler+0x3e2>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a18      	ldr	r2, [pc, #96]	@ (8007284 <HAL_DMA_IRQHandler+0x42c>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d009      	beq.n	800723a <HAL_DMA_IRQHandler+0x3e2>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a17      	ldr	r2, [pc, #92]	@ (8007288 <HAL_DMA_IRQHandler+0x430>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d004      	beq.n	800723a <HAL_DMA_IRQHandler+0x3e2>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a15      	ldr	r2, [pc, #84]	@ (800728c <HAL_DMA_IRQHandler+0x434>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d12a      	bne.n	8007290 <HAL_DMA_IRQHandler+0x438>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0302 	and.w	r3, r3, #2
 8007244:	2b00      	cmp	r3, #0
 8007246:	bf14      	ite	ne
 8007248:	2301      	movne	r3, #1
 800724a:	2300      	moveq	r3, #0
 800724c:	b2db      	uxtb	r3, r3
 800724e:	e023      	b.n	8007298 <HAL_DMA_IRQHandler+0x440>
 8007250:	40020010 	.word	0x40020010
 8007254:	40020028 	.word	0x40020028
 8007258:	40020040 	.word	0x40020040
 800725c:	40020058 	.word	0x40020058
 8007260:	40020070 	.word	0x40020070
 8007264:	40020088 	.word	0x40020088
 8007268:	400200a0 	.word	0x400200a0
 800726c:	400200b8 	.word	0x400200b8
 8007270:	40020410 	.word	0x40020410
 8007274:	40020428 	.word	0x40020428
 8007278:	40020440 	.word	0x40020440
 800727c:	40020458 	.word	0x40020458
 8007280:	40020470 	.word	0x40020470
 8007284:	40020488 	.word	0x40020488
 8007288:	400204a0 	.word	0x400204a0
 800728c:	400204b8 	.word	0x400204b8
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2300      	movs	r3, #0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00d      	beq.n	80072b8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072a0:	f003 031f 	and.w	r3, r3, #31
 80072a4:	2204      	movs	r2, #4
 80072a6:	409a      	lsls	r2, r3
 80072a8:	6a3b      	ldr	r3, [r7, #32]
 80072aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072b0:	f043 0204 	orr.w	r2, r3, #4
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072bc:	f003 031f 	and.w	r3, r3, #31
 80072c0:	2210      	movs	r2, #16
 80072c2:	409a      	lsls	r2, r3
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	4013      	ands	r3, r2
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f000 80a6 	beq.w	800741a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a85      	ldr	r2, [pc, #532]	@ (80074e8 <HAL_DMA_IRQHandler+0x690>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d04a      	beq.n	800736e <HAL_DMA_IRQHandler+0x516>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a83      	ldr	r2, [pc, #524]	@ (80074ec <HAL_DMA_IRQHandler+0x694>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d045      	beq.n	800736e <HAL_DMA_IRQHandler+0x516>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a82      	ldr	r2, [pc, #520]	@ (80074f0 <HAL_DMA_IRQHandler+0x698>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d040      	beq.n	800736e <HAL_DMA_IRQHandler+0x516>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a80      	ldr	r2, [pc, #512]	@ (80074f4 <HAL_DMA_IRQHandler+0x69c>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d03b      	beq.n	800736e <HAL_DMA_IRQHandler+0x516>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a7f      	ldr	r2, [pc, #508]	@ (80074f8 <HAL_DMA_IRQHandler+0x6a0>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d036      	beq.n	800736e <HAL_DMA_IRQHandler+0x516>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a7d      	ldr	r2, [pc, #500]	@ (80074fc <HAL_DMA_IRQHandler+0x6a4>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d031      	beq.n	800736e <HAL_DMA_IRQHandler+0x516>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a7c      	ldr	r2, [pc, #496]	@ (8007500 <HAL_DMA_IRQHandler+0x6a8>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d02c      	beq.n	800736e <HAL_DMA_IRQHandler+0x516>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a7a      	ldr	r2, [pc, #488]	@ (8007504 <HAL_DMA_IRQHandler+0x6ac>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d027      	beq.n	800736e <HAL_DMA_IRQHandler+0x516>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a79      	ldr	r2, [pc, #484]	@ (8007508 <HAL_DMA_IRQHandler+0x6b0>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d022      	beq.n	800736e <HAL_DMA_IRQHandler+0x516>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a77      	ldr	r2, [pc, #476]	@ (800750c <HAL_DMA_IRQHandler+0x6b4>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d01d      	beq.n	800736e <HAL_DMA_IRQHandler+0x516>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a76      	ldr	r2, [pc, #472]	@ (8007510 <HAL_DMA_IRQHandler+0x6b8>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d018      	beq.n	800736e <HAL_DMA_IRQHandler+0x516>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a74      	ldr	r2, [pc, #464]	@ (8007514 <HAL_DMA_IRQHandler+0x6bc>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d013      	beq.n	800736e <HAL_DMA_IRQHandler+0x516>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a73      	ldr	r2, [pc, #460]	@ (8007518 <HAL_DMA_IRQHandler+0x6c0>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d00e      	beq.n	800736e <HAL_DMA_IRQHandler+0x516>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a71      	ldr	r2, [pc, #452]	@ (800751c <HAL_DMA_IRQHandler+0x6c4>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d009      	beq.n	800736e <HAL_DMA_IRQHandler+0x516>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a70      	ldr	r2, [pc, #448]	@ (8007520 <HAL_DMA_IRQHandler+0x6c8>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d004      	beq.n	800736e <HAL_DMA_IRQHandler+0x516>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a6e      	ldr	r2, [pc, #440]	@ (8007524 <HAL_DMA_IRQHandler+0x6cc>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d10a      	bne.n	8007384 <HAL_DMA_IRQHandler+0x52c>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 0308 	and.w	r3, r3, #8
 8007378:	2b00      	cmp	r3, #0
 800737a:	bf14      	ite	ne
 800737c:	2301      	movne	r3, #1
 800737e:	2300      	moveq	r3, #0
 8007380:	b2db      	uxtb	r3, r3
 8007382:	e009      	b.n	8007398 <HAL_DMA_IRQHandler+0x540>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f003 0304 	and.w	r3, r3, #4
 800738e:	2b00      	cmp	r3, #0
 8007390:	bf14      	ite	ne
 8007392:	2301      	movne	r3, #1
 8007394:	2300      	moveq	r3, #0
 8007396:	b2db      	uxtb	r3, r3
 8007398:	2b00      	cmp	r3, #0
 800739a:	d03e      	beq.n	800741a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073a0:	f003 031f 	and.w	r3, r3, #31
 80073a4:	2210      	movs	r2, #16
 80073a6:	409a      	lsls	r2, r3
 80073a8:	6a3b      	ldr	r3, [r7, #32]
 80073aa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d018      	beq.n	80073ec <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d108      	bne.n	80073da <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d024      	beq.n	800741a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	4798      	blx	r3
 80073d8:	e01f      	b.n	800741a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d01b      	beq.n	800741a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	4798      	blx	r3
 80073ea:	e016      	b.n	800741a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d107      	bne.n	800740a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f022 0208 	bic.w	r2, r2, #8
 8007408:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800740e:	2b00      	cmp	r3, #0
 8007410:	d003      	beq.n	800741a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800741e:	f003 031f 	and.w	r3, r3, #31
 8007422:	2220      	movs	r2, #32
 8007424:	409a      	lsls	r2, r3
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	4013      	ands	r3, r2
 800742a:	2b00      	cmp	r3, #0
 800742c:	f000 8110 	beq.w	8007650 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a2c      	ldr	r2, [pc, #176]	@ (80074e8 <HAL_DMA_IRQHandler+0x690>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d04a      	beq.n	80074d0 <HAL_DMA_IRQHandler+0x678>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a2b      	ldr	r2, [pc, #172]	@ (80074ec <HAL_DMA_IRQHandler+0x694>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d045      	beq.n	80074d0 <HAL_DMA_IRQHandler+0x678>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a29      	ldr	r2, [pc, #164]	@ (80074f0 <HAL_DMA_IRQHandler+0x698>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d040      	beq.n	80074d0 <HAL_DMA_IRQHandler+0x678>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a28      	ldr	r2, [pc, #160]	@ (80074f4 <HAL_DMA_IRQHandler+0x69c>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d03b      	beq.n	80074d0 <HAL_DMA_IRQHandler+0x678>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a26      	ldr	r2, [pc, #152]	@ (80074f8 <HAL_DMA_IRQHandler+0x6a0>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d036      	beq.n	80074d0 <HAL_DMA_IRQHandler+0x678>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a25      	ldr	r2, [pc, #148]	@ (80074fc <HAL_DMA_IRQHandler+0x6a4>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d031      	beq.n	80074d0 <HAL_DMA_IRQHandler+0x678>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a23      	ldr	r2, [pc, #140]	@ (8007500 <HAL_DMA_IRQHandler+0x6a8>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d02c      	beq.n	80074d0 <HAL_DMA_IRQHandler+0x678>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a22      	ldr	r2, [pc, #136]	@ (8007504 <HAL_DMA_IRQHandler+0x6ac>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d027      	beq.n	80074d0 <HAL_DMA_IRQHandler+0x678>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a20      	ldr	r2, [pc, #128]	@ (8007508 <HAL_DMA_IRQHandler+0x6b0>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d022      	beq.n	80074d0 <HAL_DMA_IRQHandler+0x678>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a1f      	ldr	r2, [pc, #124]	@ (800750c <HAL_DMA_IRQHandler+0x6b4>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d01d      	beq.n	80074d0 <HAL_DMA_IRQHandler+0x678>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a1d      	ldr	r2, [pc, #116]	@ (8007510 <HAL_DMA_IRQHandler+0x6b8>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d018      	beq.n	80074d0 <HAL_DMA_IRQHandler+0x678>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a1c      	ldr	r2, [pc, #112]	@ (8007514 <HAL_DMA_IRQHandler+0x6bc>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d013      	beq.n	80074d0 <HAL_DMA_IRQHandler+0x678>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a1a      	ldr	r2, [pc, #104]	@ (8007518 <HAL_DMA_IRQHandler+0x6c0>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d00e      	beq.n	80074d0 <HAL_DMA_IRQHandler+0x678>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a19      	ldr	r2, [pc, #100]	@ (800751c <HAL_DMA_IRQHandler+0x6c4>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d009      	beq.n	80074d0 <HAL_DMA_IRQHandler+0x678>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a17      	ldr	r2, [pc, #92]	@ (8007520 <HAL_DMA_IRQHandler+0x6c8>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d004      	beq.n	80074d0 <HAL_DMA_IRQHandler+0x678>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a16      	ldr	r2, [pc, #88]	@ (8007524 <HAL_DMA_IRQHandler+0x6cc>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d12b      	bne.n	8007528 <HAL_DMA_IRQHandler+0x6d0>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 0310 	and.w	r3, r3, #16
 80074da:	2b00      	cmp	r3, #0
 80074dc:	bf14      	ite	ne
 80074de:	2301      	movne	r3, #1
 80074e0:	2300      	moveq	r3, #0
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	e02a      	b.n	800753c <HAL_DMA_IRQHandler+0x6e4>
 80074e6:	bf00      	nop
 80074e8:	40020010 	.word	0x40020010
 80074ec:	40020028 	.word	0x40020028
 80074f0:	40020040 	.word	0x40020040
 80074f4:	40020058 	.word	0x40020058
 80074f8:	40020070 	.word	0x40020070
 80074fc:	40020088 	.word	0x40020088
 8007500:	400200a0 	.word	0x400200a0
 8007504:	400200b8 	.word	0x400200b8
 8007508:	40020410 	.word	0x40020410
 800750c:	40020428 	.word	0x40020428
 8007510:	40020440 	.word	0x40020440
 8007514:	40020458 	.word	0x40020458
 8007518:	40020470 	.word	0x40020470
 800751c:	40020488 	.word	0x40020488
 8007520:	400204a0 	.word	0x400204a0
 8007524:	400204b8 	.word	0x400204b8
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 0302 	and.w	r3, r3, #2
 8007532:	2b00      	cmp	r3, #0
 8007534:	bf14      	ite	ne
 8007536:	2301      	movne	r3, #1
 8007538:	2300      	moveq	r3, #0
 800753a:	b2db      	uxtb	r3, r3
 800753c:	2b00      	cmp	r3, #0
 800753e:	f000 8087 	beq.w	8007650 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007546:	f003 031f 	and.w	r3, r3, #31
 800754a:	2220      	movs	r2, #32
 800754c:	409a      	lsls	r2, r3
 800754e:	6a3b      	ldr	r3, [r7, #32]
 8007550:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007558:	b2db      	uxtb	r3, r3
 800755a:	2b04      	cmp	r3, #4
 800755c:	d139      	bne.n	80075d2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f022 0216 	bic.w	r2, r2, #22
 800756c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	695a      	ldr	r2, [r3, #20]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800757c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007582:	2b00      	cmp	r3, #0
 8007584:	d103      	bne.n	800758e <HAL_DMA_IRQHandler+0x736>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800758a:	2b00      	cmp	r3, #0
 800758c:	d007      	beq.n	800759e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f022 0208 	bic.w	r2, r2, #8
 800759c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075a2:	f003 031f 	and.w	r3, r3, #31
 80075a6:	223f      	movs	r2, #63	@ 0x3f
 80075a8:	409a      	lsls	r2, r3
 80075aa:	6a3b      	ldr	r3, [r7, #32]
 80075ac:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2201      	movs	r2, #1
 80075b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	f000 8382 	beq.w	8007ccc <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	4798      	blx	r3
          }
          return;
 80075d0:	e37c      	b.n	8007ccc <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d018      	beq.n	8007612 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d108      	bne.n	8007600 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d02c      	beq.n	8007650 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	4798      	blx	r3
 80075fe:	e027      	b.n	8007650 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007604:	2b00      	cmp	r3, #0
 8007606:	d023      	beq.n	8007650 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	4798      	blx	r3
 8007610:	e01e      	b.n	8007650 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800761c:	2b00      	cmp	r3, #0
 800761e:	d10f      	bne.n	8007640 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f022 0210 	bic.w	r2, r2, #16
 800762e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007644:	2b00      	cmp	r3, #0
 8007646:	d003      	beq.n	8007650 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007654:	2b00      	cmp	r3, #0
 8007656:	f000 833e 	beq.w	8007cd6 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800765e:	f003 0301 	and.w	r3, r3, #1
 8007662:	2b00      	cmp	r3, #0
 8007664:	f000 8088 	beq.w	8007778 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2204      	movs	r2, #4
 800766c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a89      	ldr	r2, [pc, #548]	@ (800789c <HAL_DMA_IRQHandler+0xa44>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d04a      	beq.n	8007710 <HAL_DMA_IRQHandler+0x8b8>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a88      	ldr	r2, [pc, #544]	@ (80078a0 <HAL_DMA_IRQHandler+0xa48>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d045      	beq.n	8007710 <HAL_DMA_IRQHandler+0x8b8>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a86      	ldr	r2, [pc, #536]	@ (80078a4 <HAL_DMA_IRQHandler+0xa4c>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d040      	beq.n	8007710 <HAL_DMA_IRQHandler+0x8b8>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a85      	ldr	r2, [pc, #532]	@ (80078a8 <HAL_DMA_IRQHandler+0xa50>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d03b      	beq.n	8007710 <HAL_DMA_IRQHandler+0x8b8>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a83      	ldr	r2, [pc, #524]	@ (80078ac <HAL_DMA_IRQHandler+0xa54>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d036      	beq.n	8007710 <HAL_DMA_IRQHandler+0x8b8>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a82      	ldr	r2, [pc, #520]	@ (80078b0 <HAL_DMA_IRQHandler+0xa58>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d031      	beq.n	8007710 <HAL_DMA_IRQHandler+0x8b8>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a80      	ldr	r2, [pc, #512]	@ (80078b4 <HAL_DMA_IRQHandler+0xa5c>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d02c      	beq.n	8007710 <HAL_DMA_IRQHandler+0x8b8>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a7f      	ldr	r2, [pc, #508]	@ (80078b8 <HAL_DMA_IRQHandler+0xa60>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d027      	beq.n	8007710 <HAL_DMA_IRQHandler+0x8b8>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a7d      	ldr	r2, [pc, #500]	@ (80078bc <HAL_DMA_IRQHandler+0xa64>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d022      	beq.n	8007710 <HAL_DMA_IRQHandler+0x8b8>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a7c      	ldr	r2, [pc, #496]	@ (80078c0 <HAL_DMA_IRQHandler+0xa68>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d01d      	beq.n	8007710 <HAL_DMA_IRQHandler+0x8b8>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a7a      	ldr	r2, [pc, #488]	@ (80078c4 <HAL_DMA_IRQHandler+0xa6c>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d018      	beq.n	8007710 <HAL_DMA_IRQHandler+0x8b8>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a79      	ldr	r2, [pc, #484]	@ (80078c8 <HAL_DMA_IRQHandler+0xa70>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d013      	beq.n	8007710 <HAL_DMA_IRQHandler+0x8b8>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a77      	ldr	r2, [pc, #476]	@ (80078cc <HAL_DMA_IRQHandler+0xa74>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d00e      	beq.n	8007710 <HAL_DMA_IRQHandler+0x8b8>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a76      	ldr	r2, [pc, #472]	@ (80078d0 <HAL_DMA_IRQHandler+0xa78>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d009      	beq.n	8007710 <HAL_DMA_IRQHandler+0x8b8>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a74      	ldr	r2, [pc, #464]	@ (80078d4 <HAL_DMA_IRQHandler+0xa7c>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d004      	beq.n	8007710 <HAL_DMA_IRQHandler+0x8b8>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a73      	ldr	r2, [pc, #460]	@ (80078d8 <HAL_DMA_IRQHandler+0xa80>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d108      	bne.n	8007722 <HAL_DMA_IRQHandler+0x8ca>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f022 0201 	bic.w	r2, r2, #1
 800771e:	601a      	str	r2, [r3, #0]
 8007720:	e007      	b.n	8007732 <HAL_DMA_IRQHandler+0x8da>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f022 0201 	bic.w	r2, r2, #1
 8007730:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	3301      	adds	r3, #1
 8007736:	60fb      	str	r3, [r7, #12]
 8007738:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800773a:	429a      	cmp	r2, r3
 800773c:	d307      	bcc.n	800774e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 0301 	and.w	r3, r3, #1
 8007748:	2b00      	cmp	r3, #0
 800774a:	d1f2      	bne.n	8007732 <HAL_DMA_IRQHandler+0x8da>
 800774c:	e000      	b.n	8007750 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800774e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 0301 	and.w	r3, r3, #1
 800775a:	2b00      	cmp	r3, #0
 800775c:	d004      	beq.n	8007768 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2203      	movs	r2, #3
 8007762:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8007766:	e003      	b.n	8007770 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800777c:	2b00      	cmp	r3, #0
 800777e:	f000 82aa 	beq.w	8007cd6 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	4798      	blx	r3
 800778a:	e2a4      	b.n	8007cd6 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a52      	ldr	r2, [pc, #328]	@ (80078dc <HAL_DMA_IRQHandler+0xa84>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d04a      	beq.n	800782c <HAL_DMA_IRQHandler+0x9d4>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a51      	ldr	r2, [pc, #324]	@ (80078e0 <HAL_DMA_IRQHandler+0xa88>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d045      	beq.n	800782c <HAL_DMA_IRQHandler+0x9d4>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a4f      	ldr	r2, [pc, #316]	@ (80078e4 <HAL_DMA_IRQHandler+0xa8c>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d040      	beq.n	800782c <HAL_DMA_IRQHandler+0x9d4>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a4e      	ldr	r2, [pc, #312]	@ (80078e8 <HAL_DMA_IRQHandler+0xa90>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d03b      	beq.n	800782c <HAL_DMA_IRQHandler+0x9d4>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a4c      	ldr	r2, [pc, #304]	@ (80078ec <HAL_DMA_IRQHandler+0xa94>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d036      	beq.n	800782c <HAL_DMA_IRQHandler+0x9d4>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a4b      	ldr	r2, [pc, #300]	@ (80078f0 <HAL_DMA_IRQHandler+0xa98>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d031      	beq.n	800782c <HAL_DMA_IRQHandler+0x9d4>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a49      	ldr	r2, [pc, #292]	@ (80078f4 <HAL_DMA_IRQHandler+0xa9c>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d02c      	beq.n	800782c <HAL_DMA_IRQHandler+0x9d4>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a48      	ldr	r2, [pc, #288]	@ (80078f8 <HAL_DMA_IRQHandler+0xaa0>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d027      	beq.n	800782c <HAL_DMA_IRQHandler+0x9d4>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a46      	ldr	r2, [pc, #280]	@ (80078fc <HAL_DMA_IRQHandler+0xaa4>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d022      	beq.n	800782c <HAL_DMA_IRQHandler+0x9d4>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a45      	ldr	r2, [pc, #276]	@ (8007900 <HAL_DMA_IRQHandler+0xaa8>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d01d      	beq.n	800782c <HAL_DMA_IRQHandler+0x9d4>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a43      	ldr	r2, [pc, #268]	@ (8007904 <HAL_DMA_IRQHandler+0xaac>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d018      	beq.n	800782c <HAL_DMA_IRQHandler+0x9d4>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a42      	ldr	r2, [pc, #264]	@ (8007908 <HAL_DMA_IRQHandler+0xab0>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d013      	beq.n	800782c <HAL_DMA_IRQHandler+0x9d4>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a40      	ldr	r2, [pc, #256]	@ (800790c <HAL_DMA_IRQHandler+0xab4>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d00e      	beq.n	800782c <HAL_DMA_IRQHandler+0x9d4>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a3f      	ldr	r2, [pc, #252]	@ (8007910 <HAL_DMA_IRQHandler+0xab8>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d009      	beq.n	800782c <HAL_DMA_IRQHandler+0x9d4>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a3d      	ldr	r2, [pc, #244]	@ (8007914 <HAL_DMA_IRQHandler+0xabc>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d004      	beq.n	800782c <HAL_DMA_IRQHandler+0x9d4>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a3c      	ldr	r2, [pc, #240]	@ (8007918 <HAL_DMA_IRQHandler+0xac0>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d101      	bne.n	8007830 <HAL_DMA_IRQHandler+0x9d8>
 800782c:	2301      	movs	r3, #1
 800782e:	e000      	b.n	8007832 <HAL_DMA_IRQHandler+0x9da>
 8007830:	2300      	movs	r3, #0
 8007832:	2b00      	cmp	r3, #0
 8007834:	f000 824f 	beq.w	8007cd6 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007844:	f003 031f 	and.w	r3, r3, #31
 8007848:	2204      	movs	r2, #4
 800784a:	409a      	lsls	r2, r3
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	4013      	ands	r3, r2
 8007850:	2b00      	cmp	r3, #0
 8007852:	f000 80dd 	beq.w	8007a10 <HAL_DMA_IRQHandler+0xbb8>
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	f003 0304 	and.w	r3, r3, #4
 800785c:	2b00      	cmp	r3, #0
 800785e:	f000 80d7 	beq.w	8007a10 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007866:	f003 031f 	and.w	r3, r3, #31
 800786a:	2204      	movs	r2, #4
 800786c:	409a      	lsls	r2, r3
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007878:	2b00      	cmp	r3, #0
 800787a:	d059      	beq.n	8007930 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007882:	2b00      	cmp	r3, #0
 8007884:	d14a      	bne.n	800791c <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800788a:	2b00      	cmp	r3, #0
 800788c:	f000 8220 	beq.w	8007cd0 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007898:	e21a      	b.n	8007cd0 <HAL_DMA_IRQHandler+0xe78>
 800789a:	bf00      	nop
 800789c:	40020010 	.word	0x40020010
 80078a0:	40020028 	.word	0x40020028
 80078a4:	40020040 	.word	0x40020040
 80078a8:	40020058 	.word	0x40020058
 80078ac:	40020070 	.word	0x40020070
 80078b0:	40020088 	.word	0x40020088
 80078b4:	400200a0 	.word	0x400200a0
 80078b8:	400200b8 	.word	0x400200b8
 80078bc:	40020410 	.word	0x40020410
 80078c0:	40020428 	.word	0x40020428
 80078c4:	40020440 	.word	0x40020440
 80078c8:	40020458 	.word	0x40020458
 80078cc:	40020470 	.word	0x40020470
 80078d0:	40020488 	.word	0x40020488
 80078d4:	400204a0 	.word	0x400204a0
 80078d8:	400204b8 	.word	0x400204b8
 80078dc:	48022c08 	.word	0x48022c08
 80078e0:	48022c1c 	.word	0x48022c1c
 80078e4:	48022c30 	.word	0x48022c30
 80078e8:	48022c44 	.word	0x48022c44
 80078ec:	48022c58 	.word	0x48022c58
 80078f0:	48022c6c 	.word	0x48022c6c
 80078f4:	48022c80 	.word	0x48022c80
 80078f8:	48022c94 	.word	0x48022c94
 80078fc:	58025408 	.word	0x58025408
 8007900:	5802541c 	.word	0x5802541c
 8007904:	58025430 	.word	0x58025430
 8007908:	58025444 	.word	0x58025444
 800790c:	58025458 	.word	0x58025458
 8007910:	5802546c 	.word	0x5802546c
 8007914:	58025480 	.word	0x58025480
 8007918:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007920:	2b00      	cmp	r3, #0
 8007922:	f000 81d5 	beq.w	8007cd0 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800792e:	e1cf      	b.n	8007cd0 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	f003 0320 	and.w	r3, r3, #32
 8007936:	2b00      	cmp	r3, #0
 8007938:	d160      	bne.n	80079fc <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a7f      	ldr	r2, [pc, #508]	@ (8007b3c <HAL_DMA_IRQHandler+0xce4>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d04a      	beq.n	80079da <HAL_DMA_IRQHandler+0xb82>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a7d      	ldr	r2, [pc, #500]	@ (8007b40 <HAL_DMA_IRQHandler+0xce8>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d045      	beq.n	80079da <HAL_DMA_IRQHandler+0xb82>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a7c      	ldr	r2, [pc, #496]	@ (8007b44 <HAL_DMA_IRQHandler+0xcec>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d040      	beq.n	80079da <HAL_DMA_IRQHandler+0xb82>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a7a      	ldr	r2, [pc, #488]	@ (8007b48 <HAL_DMA_IRQHandler+0xcf0>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d03b      	beq.n	80079da <HAL_DMA_IRQHandler+0xb82>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a79      	ldr	r2, [pc, #484]	@ (8007b4c <HAL_DMA_IRQHandler+0xcf4>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d036      	beq.n	80079da <HAL_DMA_IRQHandler+0xb82>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a77      	ldr	r2, [pc, #476]	@ (8007b50 <HAL_DMA_IRQHandler+0xcf8>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d031      	beq.n	80079da <HAL_DMA_IRQHandler+0xb82>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a76      	ldr	r2, [pc, #472]	@ (8007b54 <HAL_DMA_IRQHandler+0xcfc>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d02c      	beq.n	80079da <HAL_DMA_IRQHandler+0xb82>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a74      	ldr	r2, [pc, #464]	@ (8007b58 <HAL_DMA_IRQHandler+0xd00>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d027      	beq.n	80079da <HAL_DMA_IRQHandler+0xb82>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a73      	ldr	r2, [pc, #460]	@ (8007b5c <HAL_DMA_IRQHandler+0xd04>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d022      	beq.n	80079da <HAL_DMA_IRQHandler+0xb82>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a71      	ldr	r2, [pc, #452]	@ (8007b60 <HAL_DMA_IRQHandler+0xd08>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d01d      	beq.n	80079da <HAL_DMA_IRQHandler+0xb82>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a70      	ldr	r2, [pc, #448]	@ (8007b64 <HAL_DMA_IRQHandler+0xd0c>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d018      	beq.n	80079da <HAL_DMA_IRQHandler+0xb82>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a6e      	ldr	r2, [pc, #440]	@ (8007b68 <HAL_DMA_IRQHandler+0xd10>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d013      	beq.n	80079da <HAL_DMA_IRQHandler+0xb82>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a6d      	ldr	r2, [pc, #436]	@ (8007b6c <HAL_DMA_IRQHandler+0xd14>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d00e      	beq.n	80079da <HAL_DMA_IRQHandler+0xb82>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a6b      	ldr	r2, [pc, #428]	@ (8007b70 <HAL_DMA_IRQHandler+0xd18>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d009      	beq.n	80079da <HAL_DMA_IRQHandler+0xb82>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a6a      	ldr	r2, [pc, #424]	@ (8007b74 <HAL_DMA_IRQHandler+0xd1c>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d004      	beq.n	80079da <HAL_DMA_IRQHandler+0xb82>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a68      	ldr	r2, [pc, #416]	@ (8007b78 <HAL_DMA_IRQHandler+0xd20>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d108      	bne.n	80079ec <HAL_DMA_IRQHandler+0xb94>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f022 0208 	bic.w	r2, r2, #8
 80079e8:	601a      	str	r2, [r3, #0]
 80079ea:	e007      	b.n	80079fc <HAL_DMA_IRQHandler+0xba4>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f022 0204 	bic.w	r2, r2, #4
 80079fa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	f000 8165 	beq.w	8007cd0 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a0e:	e15f      	b.n	8007cd0 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a14:	f003 031f 	and.w	r3, r3, #31
 8007a18:	2202      	movs	r2, #2
 8007a1a:	409a      	lsls	r2, r3
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	4013      	ands	r3, r2
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 80c5 	beq.w	8007bb0 <HAL_DMA_IRQHandler+0xd58>
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	f003 0302 	and.w	r3, r3, #2
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f000 80bf 	beq.w	8007bb0 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a36:	f003 031f 	and.w	r3, r3, #31
 8007a3a:	2202      	movs	r2, #2
 8007a3c:	409a      	lsls	r2, r3
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d018      	beq.n	8007a7e <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d109      	bne.n	8007a6a <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	f000 813a 	beq.w	8007cd4 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a68:	e134      	b.n	8007cd4 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	f000 8130 	beq.w	8007cd4 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a7c:	e12a      	b.n	8007cd4 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	f003 0320 	and.w	r3, r3, #32
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f040 8089 	bne.w	8007b9c <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a2b      	ldr	r2, [pc, #172]	@ (8007b3c <HAL_DMA_IRQHandler+0xce4>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d04a      	beq.n	8007b2a <HAL_DMA_IRQHandler+0xcd2>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a29      	ldr	r2, [pc, #164]	@ (8007b40 <HAL_DMA_IRQHandler+0xce8>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d045      	beq.n	8007b2a <HAL_DMA_IRQHandler+0xcd2>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a28      	ldr	r2, [pc, #160]	@ (8007b44 <HAL_DMA_IRQHandler+0xcec>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d040      	beq.n	8007b2a <HAL_DMA_IRQHandler+0xcd2>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a26      	ldr	r2, [pc, #152]	@ (8007b48 <HAL_DMA_IRQHandler+0xcf0>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d03b      	beq.n	8007b2a <HAL_DMA_IRQHandler+0xcd2>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a25      	ldr	r2, [pc, #148]	@ (8007b4c <HAL_DMA_IRQHandler+0xcf4>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d036      	beq.n	8007b2a <HAL_DMA_IRQHandler+0xcd2>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a23      	ldr	r2, [pc, #140]	@ (8007b50 <HAL_DMA_IRQHandler+0xcf8>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d031      	beq.n	8007b2a <HAL_DMA_IRQHandler+0xcd2>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a22      	ldr	r2, [pc, #136]	@ (8007b54 <HAL_DMA_IRQHandler+0xcfc>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d02c      	beq.n	8007b2a <HAL_DMA_IRQHandler+0xcd2>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a20      	ldr	r2, [pc, #128]	@ (8007b58 <HAL_DMA_IRQHandler+0xd00>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d027      	beq.n	8007b2a <HAL_DMA_IRQHandler+0xcd2>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a1f      	ldr	r2, [pc, #124]	@ (8007b5c <HAL_DMA_IRQHandler+0xd04>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d022      	beq.n	8007b2a <HAL_DMA_IRQHandler+0xcd2>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a1d      	ldr	r2, [pc, #116]	@ (8007b60 <HAL_DMA_IRQHandler+0xd08>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d01d      	beq.n	8007b2a <HAL_DMA_IRQHandler+0xcd2>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a1c      	ldr	r2, [pc, #112]	@ (8007b64 <HAL_DMA_IRQHandler+0xd0c>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d018      	beq.n	8007b2a <HAL_DMA_IRQHandler+0xcd2>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a1a      	ldr	r2, [pc, #104]	@ (8007b68 <HAL_DMA_IRQHandler+0xd10>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d013      	beq.n	8007b2a <HAL_DMA_IRQHandler+0xcd2>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a19      	ldr	r2, [pc, #100]	@ (8007b6c <HAL_DMA_IRQHandler+0xd14>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d00e      	beq.n	8007b2a <HAL_DMA_IRQHandler+0xcd2>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a17      	ldr	r2, [pc, #92]	@ (8007b70 <HAL_DMA_IRQHandler+0xd18>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d009      	beq.n	8007b2a <HAL_DMA_IRQHandler+0xcd2>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a16      	ldr	r2, [pc, #88]	@ (8007b74 <HAL_DMA_IRQHandler+0xd1c>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d004      	beq.n	8007b2a <HAL_DMA_IRQHandler+0xcd2>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a14      	ldr	r2, [pc, #80]	@ (8007b78 <HAL_DMA_IRQHandler+0xd20>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d128      	bne.n	8007b7c <HAL_DMA_IRQHandler+0xd24>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f022 0214 	bic.w	r2, r2, #20
 8007b38:	601a      	str	r2, [r3, #0]
 8007b3a:	e027      	b.n	8007b8c <HAL_DMA_IRQHandler+0xd34>
 8007b3c:	40020010 	.word	0x40020010
 8007b40:	40020028 	.word	0x40020028
 8007b44:	40020040 	.word	0x40020040
 8007b48:	40020058 	.word	0x40020058
 8007b4c:	40020070 	.word	0x40020070
 8007b50:	40020088 	.word	0x40020088
 8007b54:	400200a0 	.word	0x400200a0
 8007b58:	400200b8 	.word	0x400200b8
 8007b5c:	40020410 	.word	0x40020410
 8007b60:	40020428 	.word	0x40020428
 8007b64:	40020440 	.word	0x40020440
 8007b68:	40020458 	.word	0x40020458
 8007b6c:	40020470 	.word	0x40020470
 8007b70:	40020488 	.word	0x40020488
 8007b74:	400204a0 	.word	0x400204a0
 8007b78:	400204b8 	.word	0x400204b8
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f022 020a 	bic.w	r2, r2, #10
 8007b8a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	f000 8097 	beq.w	8007cd4 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007bae:	e091      	b.n	8007cd4 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bb4:	f003 031f 	and.w	r3, r3, #31
 8007bb8:	2208      	movs	r2, #8
 8007bba:	409a      	lsls	r2, r3
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	4013      	ands	r3, r2
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	f000 8088 	beq.w	8007cd6 <HAL_DMA_IRQHandler+0xe7e>
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	f003 0308 	and.w	r3, r3, #8
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	f000 8082 	beq.w	8007cd6 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a41      	ldr	r2, [pc, #260]	@ (8007cdc <HAL_DMA_IRQHandler+0xe84>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d04a      	beq.n	8007c72 <HAL_DMA_IRQHandler+0xe1a>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a3f      	ldr	r2, [pc, #252]	@ (8007ce0 <HAL_DMA_IRQHandler+0xe88>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d045      	beq.n	8007c72 <HAL_DMA_IRQHandler+0xe1a>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a3e      	ldr	r2, [pc, #248]	@ (8007ce4 <HAL_DMA_IRQHandler+0xe8c>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d040      	beq.n	8007c72 <HAL_DMA_IRQHandler+0xe1a>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a3c      	ldr	r2, [pc, #240]	@ (8007ce8 <HAL_DMA_IRQHandler+0xe90>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d03b      	beq.n	8007c72 <HAL_DMA_IRQHandler+0xe1a>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a3b      	ldr	r2, [pc, #236]	@ (8007cec <HAL_DMA_IRQHandler+0xe94>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d036      	beq.n	8007c72 <HAL_DMA_IRQHandler+0xe1a>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a39      	ldr	r2, [pc, #228]	@ (8007cf0 <HAL_DMA_IRQHandler+0xe98>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d031      	beq.n	8007c72 <HAL_DMA_IRQHandler+0xe1a>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a38      	ldr	r2, [pc, #224]	@ (8007cf4 <HAL_DMA_IRQHandler+0xe9c>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d02c      	beq.n	8007c72 <HAL_DMA_IRQHandler+0xe1a>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a36      	ldr	r2, [pc, #216]	@ (8007cf8 <HAL_DMA_IRQHandler+0xea0>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d027      	beq.n	8007c72 <HAL_DMA_IRQHandler+0xe1a>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a35      	ldr	r2, [pc, #212]	@ (8007cfc <HAL_DMA_IRQHandler+0xea4>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d022      	beq.n	8007c72 <HAL_DMA_IRQHandler+0xe1a>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a33      	ldr	r2, [pc, #204]	@ (8007d00 <HAL_DMA_IRQHandler+0xea8>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d01d      	beq.n	8007c72 <HAL_DMA_IRQHandler+0xe1a>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a32      	ldr	r2, [pc, #200]	@ (8007d04 <HAL_DMA_IRQHandler+0xeac>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d018      	beq.n	8007c72 <HAL_DMA_IRQHandler+0xe1a>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a30      	ldr	r2, [pc, #192]	@ (8007d08 <HAL_DMA_IRQHandler+0xeb0>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d013      	beq.n	8007c72 <HAL_DMA_IRQHandler+0xe1a>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a2f      	ldr	r2, [pc, #188]	@ (8007d0c <HAL_DMA_IRQHandler+0xeb4>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d00e      	beq.n	8007c72 <HAL_DMA_IRQHandler+0xe1a>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a2d      	ldr	r2, [pc, #180]	@ (8007d10 <HAL_DMA_IRQHandler+0xeb8>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d009      	beq.n	8007c72 <HAL_DMA_IRQHandler+0xe1a>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a2c      	ldr	r2, [pc, #176]	@ (8007d14 <HAL_DMA_IRQHandler+0xebc>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d004      	beq.n	8007c72 <HAL_DMA_IRQHandler+0xe1a>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a2a      	ldr	r2, [pc, #168]	@ (8007d18 <HAL_DMA_IRQHandler+0xec0>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d108      	bne.n	8007c84 <HAL_DMA_IRQHandler+0xe2c>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f022 021c 	bic.w	r2, r2, #28
 8007c80:	601a      	str	r2, [r3, #0]
 8007c82:	e007      	b.n	8007c94 <HAL_DMA_IRQHandler+0xe3c>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f022 020e 	bic.w	r2, r2, #14
 8007c92:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c98:	f003 031f 	and.w	r3, r3, #31
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	409a      	lsls	r2, r3
 8007ca0:	69fb      	ldr	r3, [r7, #28]
 8007ca2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2201      	movs	r2, #1
 8007cae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d009      	beq.n	8007cd6 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	4798      	blx	r3
 8007cca:	e004      	b.n	8007cd6 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8007ccc:	bf00      	nop
 8007cce:	e002      	b.n	8007cd6 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007cd0:	bf00      	nop
 8007cd2:	e000      	b.n	8007cd6 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007cd4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007cd6:	3728      	adds	r7, #40	@ 0x28
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	40020010 	.word	0x40020010
 8007ce0:	40020028 	.word	0x40020028
 8007ce4:	40020040 	.word	0x40020040
 8007ce8:	40020058 	.word	0x40020058
 8007cec:	40020070 	.word	0x40020070
 8007cf0:	40020088 	.word	0x40020088
 8007cf4:	400200a0 	.word	0x400200a0
 8007cf8:	400200b8 	.word	0x400200b8
 8007cfc:	40020410 	.word	0x40020410
 8007d00:	40020428 	.word	0x40020428
 8007d04:	40020440 	.word	0x40020440
 8007d08:	40020458 	.word	0x40020458
 8007d0c:	40020470 	.word	0x40020470
 8007d10:	40020488 	.word	0x40020488
 8007d14:	400204a0 	.word	0x400204a0
 8007d18:	400204b8 	.word	0x400204b8

08007d1c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	370c      	adds	r7, #12
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b087      	sub	sp, #28
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	607a      	str	r2, [r7, #4]
 8007d40:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d46:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d4c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a7f      	ldr	r2, [pc, #508]	@ (8007f50 <DMA_SetConfig+0x21c>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d072      	beq.n	8007e3e <DMA_SetConfig+0x10a>
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a7d      	ldr	r2, [pc, #500]	@ (8007f54 <DMA_SetConfig+0x220>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d06d      	beq.n	8007e3e <DMA_SetConfig+0x10a>
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a7c      	ldr	r2, [pc, #496]	@ (8007f58 <DMA_SetConfig+0x224>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d068      	beq.n	8007e3e <DMA_SetConfig+0x10a>
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a7a      	ldr	r2, [pc, #488]	@ (8007f5c <DMA_SetConfig+0x228>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d063      	beq.n	8007e3e <DMA_SetConfig+0x10a>
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a79      	ldr	r2, [pc, #484]	@ (8007f60 <DMA_SetConfig+0x22c>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d05e      	beq.n	8007e3e <DMA_SetConfig+0x10a>
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a77      	ldr	r2, [pc, #476]	@ (8007f64 <DMA_SetConfig+0x230>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d059      	beq.n	8007e3e <DMA_SetConfig+0x10a>
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a76      	ldr	r2, [pc, #472]	@ (8007f68 <DMA_SetConfig+0x234>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d054      	beq.n	8007e3e <DMA_SetConfig+0x10a>
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a74      	ldr	r2, [pc, #464]	@ (8007f6c <DMA_SetConfig+0x238>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d04f      	beq.n	8007e3e <DMA_SetConfig+0x10a>
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a73      	ldr	r2, [pc, #460]	@ (8007f70 <DMA_SetConfig+0x23c>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d04a      	beq.n	8007e3e <DMA_SetConfig+0x10a>
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a71      	ldr	r2, [pc, #452]	@ (8007f74 <DMA_SetConfig+0x240>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d045      	beq.n	8007e3e <DMA_SetConfig+0x10a>
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a70      	ldr	r2, [pc, #448]	@ (8007f78 <DMA_SetConfig+0x244>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d040      	beq.n	8007e3e <DMA_SetConfig+0x10a>
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a6e      	ldr	r2, [pc, #440]	@ (8007f7c <DMA_SetConfig+0x248>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d03b      	beq.n	8007e3e <DMA_SetConfig+0x10a>
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a6d      	ldr	r2, [pc, #436]	@ (8007f80 <DMA_SetConfig+0x24c>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d036      	beq.n	8007e3e <DMA_SetConfig+0x10a>
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a6b      	ldr	r2, [pc, #428]	@ (8007f84 <DMA_SetConfig+0x250>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d031      	beq.n	8007e3e <DMA_SetConfig+0x10a>
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a6a      	ldr	r2, [pc, #424]	@ (8007f88 <DMA_SetConfig+0x254>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d02c      	beq.n	8007e3e <DMA_SetConfig+0x10a>
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a68      	ldr	r2, [pc, #416]	@ (8007f8c <DMA_SetConfig+0x258>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d027      	beq.n	8007e3e <DMA_SetConfig+0x10a>
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a67      	ldr	r2, [pc, #412]	@ (8007f90 <DMA_SetConfig+0x25c>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d022      	beq.n	8007e3e <DMA_SetConfig+0x10a>
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a65      	ldr	r2, [pc, #404]	@ (8007f94 <DMA_SetConfig+0x260>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d01d      	beq.n	8007e3e <DMA_SetConfig+0x10a>
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a64      	ldr	r2, [pc, #400]	@ (8007f98 <DMA_SetConfig+0x264>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d018      	beq.n	8007e3e <DMA_SetConfig+0x10a>
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a62      	ldr	r2, [pc, #392]	@ (8007f9c <DMA_SetConfig+0x268>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d013      	beq.n	8007e3e <DMA_SetConfig+0x10a>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a61      	ldr	r2, [pc, #388]	@ (8007fa0 <DMA_SetConfig+0x26c>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d00e      	beq.n	8007e3e <DMA_SetConfig+0x10a>
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a5f      	ldr	r2, [pc, #380]	@ (8007fa4 <DMA_SetConfig+0x270>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d009      	beq.n	8007e3e <DMA_SetConfig+0x10a>
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a5e      	ldr	r2, [pc, #376]	@ (8007fa8 <DMA_SetConfig+0x274>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d004      	beq.n	8007e3e <DMA_SetConfig+0x10a>
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a5c      	ldr	r2, [pc, #368]	@ (8007fac <DMA_SetConfig+0x278>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d101      	bne.n	8007e42 <DMA_SetConfig+0x10e>
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e000      	b.n	8007e44 <DMA_SetConfig+0x110>
 8007e42:	2300      	movs	r3, #0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d00d      	beq.n	8007e64 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007e50:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d004      	beq.n	8007e64 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007e62:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a39      	ldr	r2, [pc, #228]	@ (8007f50 <DMA_SetConfig+0x21c>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d04a      	beq.n	8007f04 <DMA_SetConfig+0x1d0>
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a38      	ldr	r2, [pc, #224]	@ (8007f54 <DMA_SetConfig+0x220>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d045      	beq.n	8007f04 <DMA_SetConfig+0x1d0>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a36      	ldr	r2, [pc, #216]	@ (8007f58 <DMA_SetConfig+0x224>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d040      	beq.n	8007f04 <DMA_SetConfig+0x1d0>
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a35      	ldr	r2, [pc, #212]	@ (8007f5c <DMA_SetConfig+0x228>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d03b      	beq.n	8007f04 <DMA_SetConfig+0x1d0>
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a33      	ldr	r2, [pc, #204]	@ (8007f60 <DMA_SetConfig+0x22c>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d036      	beq.n	8007f04 <DMA_SetConfig+0x1d0>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a32      	ldr	r2, [pc, #200]	@ (8007f64 <DMA_SetConfig+0x230>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d031      	beq.n	8007f04 <DMA_SetConfig+0x1d0>
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a30      	ldr	r2, [pc, #192]	@ (8007f68 <DMA_SetConfig+0x234>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d02c      	beq.n	8007f04 <DMA_SetConfig+0x1d0>
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a2f      	ldr	r2, [pc, #188]	@ (8007f6c <DMA_SetConfig+0x238>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d027      	beq.n	8007f04 <DMA_SetConfig+0x1d0>
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a2d      	ldr	r2, [pc, #180]	@ (8007f70 <DMA_SetConfig+0x23c>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d022      	beq.n	8007f04 <DMA_SetConfig+0x1d0>
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a2c      	ldr	r2, [pc, #176]	@ (8007f74 <DMA_SetConfig+0x240>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d01d      	beq.n	8007f04 <DMA_SetConfig+0x1d0>
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a2a      	ldr	r2, [pc, #168]	@ (8007f78 <DMA_SetConfig+0x244>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d018      	beq.n	8007f04 <DMA_SetConfig+0x1d0>
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a29      	ldr	r2, [pc, #164]	@ (8007f7c <DMA_SetConfig+0x248>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d013      	beq.n	8007f04 <DMA_SetConfig+0x1d0>
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a27      	ldr	r2, [pc, #156]	@ (8007f80 <DMA_SetConfig+0x24c>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d00e      	beq.n	8007f04 <DMA_SetConfig+0x1d0>
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a26      	ldr	r2, [pc, #152]	@ (8007f84 <DMA_SetConfig+0x250>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d009      	beq.n	8007f04 <DMA_SetConfig+0x1d0>
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a24      	ldr	r2, [pc, #144]	@ (8007f88 <DMA_SetConfig+0x254>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d004      	beq.n	8007f04 <DMA_SetConfig+0x1d0>
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a23      	ldr	r2, [pc, #140]	@ (8007f8c <DMA_SetConfig+0x258>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d101      	bne.n	8007f08 <DMA_SetConfig+0x1d4>
 8007f04:	2301      	movs	r3, #1
 8007f06:	e000      	b.n	8007f0a <DMA_SetConfig+0x1d6>
 8007f08:	2300      	movs	r3, #0
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d059      	beq.n	8007fc2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f12:	f003 031f 	and.w	r3, r3, #31
 8007f16:	223f      	movs	r2, #63	@ 0x3f
 8007f18:	409a      	lsls	r2, r3
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007f2c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	683a      	ldr	r2, [r7, #0]
 8007f34:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	2b40      	cmp	r3, #64	@ 0x40
 8007f3c:	d138      	bne.n	8007fb0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	68ba      	ldr	r2, [r7, #8]
 8007f4c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007f4e:	e0ae      	b.n	80080ae <DMA_SetConfig+0x37a>
 8007f50:	40020010 	.word	0x40020010
 8007f54:	40020028 	.word	0x40020028
 8007f58:	40020040 	.word	0x40020040
 8007f5c:	40020058 	.word	0x40020058
 8007f60:	40020070 	.word	0x40020070
 8007f64:	40020088 	.word	0x40020088
 8007f68:	400200a0 	.word	0x400200a0
 8007f6c:	400200b8 	.word	0x400200b8
 8007f70:	40020410 	.word	0x40020410
 8007f74:	40020428 	.word	0x40020428
 8007f78:	40020440 	.word	0x40020440
 8007f7c:	40020458 	.word	0x40020458
 8007f80:	40020470 	.word	0x40020470
 8007f84:	40020488 	.word	0x40020488
 8007f88:	400204a0 	.word	0x400204a0
 8007f8c:	400204b8 	.word	0x400204b8
 8007f90:	58025408 	.word	0x58025408
 8007f94:	5802541c 	.word	0x5802541c
 8007f98:	58025430 	.word	0x58025430
 8007f9c:	58025444 	.word	0x58025444
 8007fa0:	58025458 	.word	0x58025458
 8007fa4:	5802546c 	.word	0x5802546c
 8007fa8:	58025480 	.word	0x58025480
 8007fac:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68ba      	ldr	r2, [r7, #8]
 8007fb6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	60da      	str	r2, [r3, #12]
}
 8007fc0:	e075      	b.n	80080ae <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a3d      	ldr	r2, [pc, #244]	@ (80080bc <DMA_SetConfig+0x388>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d04a      	beq.n	8008062 <DMA_SetConfig+0x32e>
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a3b      	ldr	r2, [pc, #236]	@ (80080c0 <DMA_SetConfig+0x38c>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d045      	beq.n	8008062 <DMA_SetConfig+0x32e>
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a3a      	ldr	r2, [pc, #232]	@ (80080c4 <DMA_SetConfig+0x390>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d040      	beq.n	8008062 <DMA_SetConfig+0x32e>
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a38      	ldr	r2, [pc, #224]	@ (80080c8 <DMA_SetConfig+0x394>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d03b      	beq.n	8008062 <DMA_SetConfig+0x32e>
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a37      	ldr	r2, [pc, #220]	@ (80080cc <DMA_SetConfig+0x398>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d036      	beq.n	8008062 <DMA_SetConfig+0x32e>
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a35      	ldr	r2, [pc, #212]	@ (80080d0 <DMA_SetConfig+0x39c>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d031      	beq.n	8008062 <DMA_SetConfig+0x32e>
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a34      	ldr	r2, [pc, #208]	@ (80080d4 <DMA_SetConfig+0x3a0>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d02c      	beq.n	8008062 <DMA_SetConfig+0x32e>
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a32      	ldr	r2, [pc, #200]	@ (80080d8 <DMA_SetConfig+0x3a4>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d027      	beq.n	8008062 <DMA_SetConfig+0x32e>
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a31      	ldr	r2, [pc, #196]	@ (80080dc <DMA_SetConfig+0x3a8>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d022      	beq.n	8008062 <DMA_SetConfig+0x32e>
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a2f      	ldr	r2, [pc, #188]	@ (80080e0 <DMA_SetConfig+0x3ac>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d01d      	beq.n	8008062 <DMA_SetConfig+0x32e>
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a2e      	ldr	r2, [pc, #184]	@ (80080e4 <DMA_SetConfig+0x3b0>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d018      	beq.n	8008062 <DMA_SetConfig+0x32e>
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a2c      	ldr	r2, [pc, #176]	@ (80080e8 <DMA_SetConfig+0x3b4>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d013      	beq.n	8008062 <DMA_SetConfig+0x32e>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a2b      	ldr	r2, [pc, #172]	@ (80080ec <DMA_SetConfig+0x3b8>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d00e      	beq.n	8008062 <DMA_SetConfig+0x32e>
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a29      	ldr	r2, [pc, #164]	@ (80080f0 <DMA_SetConfig+0x3bc>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d009      	beq.n	8008062 <DMA_SetConfig+0x32e>
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a28      	ldr	r2, [pc, #160]	@ (80080f4 <DMA_SetConfig+0x3c0>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d004      	beq.n	8008062 <DMA_SetConfig+0x32e>
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a26      	ldr	r2, [pc, #152]	@ (80080f8 <DMA_SetConfig+0x3c4>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d101      	bne.n	8008066 <DMA_SetConfig+0x332>
 8008062:	2301      	movs	r3, #1
 8008064:	e000      	b.n	8008068 <DMA_SetConfig+0x334>
 8008066:	2300      	movs	r3, #0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d020      	beq.n	80080ae <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008070:	f003 031f 	and.w	r3, r3, #31
 8008074:	2201      	movs	r2, #1
 8008076:	409a      	lsls	r2, r3
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	683a      	ldr	r2, [r7, #0]
 8008082:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	2b40      	cmp	r3, #64	@ 0x40
 800808a:	d108      	bne.n	800809e <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	68ba      	ldr	r2, [r7, #8]
 800809a:	60da      	str	r2, [r3, #12]
}
 800809c:	e007      	b.n	80080ae <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	68ba      	ldr	r2, [r7, #8]
 80080a4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	60da      	str	r2, [r3, #12]
}
 80080ae:	bf00      	nop
 80080b0:	371c      	adds	r7, #28
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	48022c08 	.word	0x48022c08
 80080c0:	48022c1c 	.word	0x48022c1c
 80080c4:	48022c30 	.word	0x48022c30
 80080c8:	48022c44 	.word	0x48022c44
 80080cc:	48022c58 	.word	0x48022c58
 80080d0:	48022c6c 	.word	0x48022c6c
 80080d4:	48022c80 	.word	0x48022c80
 80080d8:	48022c94 	.word	0x48022c94
 80080dc:	58025408 	.word	0x58025408
 80080e0:	5802541c 	.word	0x5802541c
 80080e4:	58025430 	.word	0x58025430
 80080e8:	58025444 	.word	0x58025444
 80080ec:	58025458 	.word	0x58025458
 80080f0:	5802546c 	.word	0x5802546c
 80080f4:	58025480 	.word	0x58025480
 80080f8:	58025494 	.word	0x58025494

080080fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b085      	sub	sp, #20
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a42      	ldr	r2, [pc, #264]	@ (8008214 <DMA_CalcBaseAndBitshift+0x118>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d04a      	beq.n	80081a4 <DMA_CalcBaseAndBitshift+0xa8>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a41      	ldr	r2, [pc, #260]	@ (8008218 <DMA_CalcBaseAndBitshift+0x11c>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d045      	beq.n	80081a4 <DMA_CalcBaseAndBitshift+0xa8>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a3f      	ldr	r2, [pc, #252]	@ (800821c <DMA_CalcBaseAndBitshift+0x120>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d040      	beq.n	80081a4 <DMA_CalcBaseAndBitshift+0xa8>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a3e      	ldr	r2, [pc, #248]	@ (8008220 <DMA_CalcBaseAndBitshift+0x124>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d03b      	beq.n	80081a4 <DMA_CalcBaseAndBitshift+0xa8>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a3c      	ldr	r2, [pc, #240]	@ (8008224 <DMA_CalcBaseAndBitshift+0x128>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d036      	beq.n	80081a4 <DMA_CalcBaseAndBitshift+0xa8>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a3b      	ldr	r2, [pc, #236]	@ (8008228 <DMA_CalcBaseAndBitshift+0x12c>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d031      	beq.n	80081a4 <DMA_CalcBaseAndBitshift+0xa8>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a39      	ldr	r2, [pc, #228]	@ (800822c <DMA_CalcBaseAndBitshift+0x130>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d02c      	beq.n	80081a4 <DMA_CalcBaseAndBitshift+0xa8>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a38      	ldr	r2, [pc, #224]	@ (8008230 <DMA_CalcBaseAndBitshift+0x134>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d027      	beq.n	80081a4 <DMA_CalcBaseAndBitshift+0xa8>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a36      	ldr	r2, [pc, #216]	@ (8008234 <DMA_CalcBaseAndBitshift+0x138>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d022      	beq.n	80081a4 <DMA_CalcBaseAndBitshift+0xa8>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a35      	ldr	r2, [pc, #212]	@ (8008238 <DMA_CalcBaseAndBitshift+0x13c>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d01d      	beq.n	80081a4 <DMA_CalcBaseAndBitshift+0xa8>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a33      	ldr	r2, [pc, #204]	@ (800823c <DMA_CalcBaseAndBitshift+0x140>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d018      	beq.n	80081a4 <DMA_CalcBaseAndBitshift+0xa8>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a32      	ldr	r2, [pc, #200]	@ (8008240 <DMA_CalcBaseAndBitshift+0x144>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d013      	beq.n	80081a4 <DMA_CalcBaseAndBitshift+0xa8>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a30      	ldr	r2, [pc, #192]	@ (8008244 <DMA_CalcBaseAndBitshift+0x148>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d00e      	beq.n	80081a4 <DMA_CalcBaseAndBitshift+0xa8>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a2f      	ldr	r2, [pc, #188]	@ (8008248 <DMA_CalcBaseAndBitshift+0x14c>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d009      	beq.n	80081a4 <DMA_CalcBaseAndBitshift+0xa8>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a2d      	ldr	r2, [pc, #180]	@ (800824c <DMA_CalcBaseAndBitshift+0x150>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d004      	beq.n	80081a4 <DMA_CalcBaseAndBitshift+0xa8>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a2c      	ldr	r2, [pc, #176]	@ (8008250 <DMA_CalcBaseAndBitshift+0x154>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d101      	bne.n	80081a8 <DMA_CalcBaseAndBitshift+0xac>
 80081a4:	2301      	movs	r3, #1
 80081a6:	e000      	b.n	80081aa <DMA_CalcBaseAndBitshift+0xae>
 80081a8:	2300      	movs	r3, #0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d024      	beq.n	80081f8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	3b10      	subs	r3, #16
 80081b6:	4a27      	ldr	r2, [pc, #156]	@ (8008254 <DMA_CalcBaseAndBitshift+0x158>)
 80081b8:	fba2 2303 	umull	r2, r3, r2, r3
 80081bc:	091b      	lsrs	r3, r3, #4
 80081be:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f003 0307 	and.w	r3, r3, #7
 80081c6:	4a24      	ldr	r2, [pc, #144]	@ (8008258 <DMA_CalcBaseAndBitshift+0x15c>)
 80081c8:	5cd3      	ldrb	r3, [r2, r3]
 80081ca:	461a      	mov	r2, r3
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2b03      	cmp	r3, #3
 80081d4:	d908      	bls.n	80081e8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	461a      	mov	r2, r3
 80081dc:	4b1f      	ldr	r3, [pc, #124]	@ (800825c <DMA_CalcBaseAndBitshift+0x160>)
 80081de:	4013      	ands	r3, r2
 80081e0:	1d1a      	adds	r2, r3, #4
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	659a      	str	r2, [r3, #88]	@ 0x58
 80081e6:	e00d      	b.n	8008204 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	461a      	mov	r2, r3
 80081ee:	4b1b      	ldr	r3, [pc, #108]	@ (800825c <DMA_CalcBaseAndBitshift+0x160>)
 80081f0:	4013      	ands	r3, r2
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80081f6:	e005      	b.n	8008204 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8008208:	4618      	mov	r0, r3
 800820a:	3714      	adds	r7, #20
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr
 8008214:	40020010 	.word	0x40020010
 8008218:	40020028 	.word	0x40020028
 800821c:	40020040 	.word	0x40020040
 8008220:	40020058 	.word	0x40020058
 8008224:	40020070 	.word	0x40020070
 8008228:	40020088 	.word	0x40020088
 800822c:	400200a0 	.word	0x400200a0
 8008230:	400200b8 	.word	0x400200b8
 8008234:	40020410 	.word	0x40020410
 8008238:	40020428 	.word	0x40020428
 800823c:	40020440 	.word	0x40020440
 8008240:	40020458 	.word	0x40020458
 8008244:	40020470 	.word	0x40020470
 8008248:	40020488 	.word	0x40020488
 800824c:	400204a0 	.word	0x400204a0
 8008250:	400204b8 	.word	0x400204b8
 8008254:	aaaaaaab 	.word	0xaaaaaaab
 8008258:	080189e4 	.word	0x080189e4
 800825c:	fffffc00 	.word	0xfffffc00

08008260 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008268:	2300      	movs	r3, #0
 800826a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	699b      	ldr	r3, [r3, #24]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d120      	bne.n	80082b6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008278:	2b03      	cmp	r3, #3
 800827a:	d858      	bhi.n	800832e <DMA_CheckFifoParam+0xce>
 800827c:	a201      	add	r2, pc, #4	@ (adr r2, 8008284 <DMA_CheckFifoParam+0x24>)
 800827e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008282:	bf00      	nop
 8008284:	08008295 	.word	0x08008295
 8008288:	080082a7 	.word	0x080082a7
 800828c:	08008295 	.word	0x08008295
 8008290:	0800832f 	.word	0x0800832f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008298:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800829c:	2b00      	cmp	r3, #0
 800829e:	d048      	beq.n	8008332 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80082a0:	2301      	movs	r3, #1
 80082a2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80082a4:	e045      	b.n	8008332 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082aa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80082ae:	d142      	bne.n	8008336 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80082b0:	2301      	movs	r3, #1
 80082b2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80082b4:	e03f      	b.n	8008336 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	699b      	ldr	r3, [r3, #24]
 80082ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082be:	d123      	bne.n	8008308 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082c4:	2b03      	cmp	r3, #3
 80082c6:	d838      	bhi.n	800833a <DMA_CheckFifoParam+0xda>
 80082c8:	a201      	add	r2, pc, #4	@ (adr r2, 80082d0 <DMA_CheckFifoParam+0x70>)
 80082ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ce:	bf00      	nop
 80082d0:	080082e1 	.word	0x080082e1
 80082d4:	080082e7 	.word	0x080082e7
 80082d8:	080082e1 	.word	0x080082e1
 80082dc:	080082f9 	.word	0x080082f9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80082e0:	2301      	movs	r3, #1
 80082e2:	73fb      	strb	r3, [r7, #15]
        break;
 80082e4:	e030      	b.n	8008348 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d025      	beq.n	800833e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80082f6:	e022      	b.n	800833e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082fc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008300:	d11f      	bne.n	8008342 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008306:	e01c      	b.n	8008342 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800830c:	2b02      	cmp	r3, #2
 800830e:	d902      	bls.n	8008316 <DMA_CheckFifoParam+0xb6>
 8008310:	2b03      	cmp	r3, #3
 8008312:	d003      	beq.n	800831c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008314:	e018      	b.n	8008348 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	73fb      	strb	r3, [r7, #15]
        break;
 800831a:	e015      	b.n	8008348 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008320:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008324:	2b00      	cmp	r3, #0
 8008326:	d00e      	beq.n	8008346 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	73fb      	strb	r3, [r7, #15]
    break;
 800832c:	e00b      	b.n	8008346 <DMA_CheckFifoParam+0xe6>
        break;
 800832e:	bf00      	nop
 8008330:	e00a      	b.n	8008348 <DMA_CheckFifoParam+0xe8>
        break;
 8008332:	bf00      	nop
 8008334:	e008      	b.n	8008348 <DMA_CheckFifoParam+0xe8>
        break;
 8008336:	bf00      	nop
 8008338:	e006      	b.n	8008348 <DMA_CheckFifoParam+0xe8>
        break;
 800833a:	bf00      	nop
 800833c:	e004      	b.n	8008348 <DMA_CheckFifoParam+0xe8>
        break;
 800833e:	bf00      	nop
 8008340:	e002      	b.n	8008348 <DMA_CheckFifoParam+0xe8>
        break;
 8008342:	bf00      	nop
 8008344:	e000      	b.n	8008348 <DMA_CheckFifoParam+0xe8>
    break;
 8008346:	bf00      	nop
    }
  }

  return status;
 8008348:	7bfb      	ldrb	r3, [r7, #15]
}
 800834a:	4618      	mov	r0, r3
 800834c:	3714      	adds	r7, #20
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop

08008358 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008358:	b480      	push	{r7}
 800835a:	b085      	sub	sp, #20
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a38      	ldr	r2, [pc, #224]	@ (800844c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d022      	beq.n	80083b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a36      	ldr	r2, [pc, #216]	@ (8008450 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d01d      	beq.n	80083b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a35      	ldr	r2, [pc, #212]	@ (8008454 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d018      	beq.n	80083b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a33      	ldr	r2, [pc, #204]	@ (8008458 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d013      	beq.n	80083b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a32      	ldr	r2, [pc, #200]	@ (800845c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d00e      	beq.n	80083b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a30      	ldr	r2, [pc, #192]	@ (8008460 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d009      	beq.n	80083b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a2f      	ldr	r2, [pc, #188]	@ (8008464 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d004      	beq.n	80083b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a2d      	ldr	r2, [pc, #180]	@ (8008468 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d101      	bne.n	80083ba <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80083b6:	2301      	movs	r3, #1
 80083b8:	e000      	b.n	80083bc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80083ba:	2300      	movs	r3, #0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d01a      	beq.n	80083f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	b2db      	uxtb	r3, r3
 80083c6:	3b08      	subs	r3, #8
 80083c8:	4a28      	ldr	r2, [pc, #160]	@ (800846c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80083ca:	fba2 2303 	umull	r2, r3, r2, r3
 80083ce:	091b      	lsrs	r3, r3, #4
 80083d0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80083d2:	68fa      	ldr	r2, [r7, #12]
 80083d4:	4b26      	ldr	r3, [pc, #152]	@ (8008470 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80083d6:	4413      	add	r3, r2
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	461a      	mov	r2, r3
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	4a24      	ldr	r2, [pc, #144]	@ (8008474 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80083e4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f003 031f 	and.w	r3, r3, #31
 80083ec:	2201      	movs	r2, #1
 80083ee:	409a      	lsls	r2, r3
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80083f4:	e024      	b.n	8008440 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	b2db      	uxtb	r3, r3
 80083fc:	3b10      	subs	r3, #16
 80083fe:	4a1e      	ldr	r2, [pc, #120]	@ (8008478 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008400:	fba2 2303 	umull	r2, r3, r2, r3
 8008404:	091b      	lsrs	r3, r3, #4
 8008406:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	4a1c      	ldr	r2, [pc, #112]	@ (800847c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d806      	bhi.n	800841e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	4a1b      	ldr	r2, [pc, #108]	@ (8008480 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d902      	bls.n	800841e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	3308      	adds	r3, #8
 800841c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800841e:	68fa      	ldr	r2, [r7, #12]
 8008420:	4b18      	ldr	r3, [pc, #96]	@ (8008484 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008422:	4413      	add	r3, r2
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	461a      	mov	r2, r3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	4a16      	ldr	r2, [pc, #88]	@ (8008488 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008430:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f003 031f 	and.w	r3, r3, #31
 8008438:	2201      	movs	r2, #1
 800843a:	409a      	lsls	r2, r3
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008440:	bf00      	nop
 8008442:	3714      	adds	r7, #20
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr
 800844c:	58025408 	.word	0x58025408
 8008450:	5802541c 	.word	0x5802541c
 8008454:	58025430 	.word	0x58025430
 8008458:	58025444 	.word	0x58025444
 800845c:	58025458 	.word	0x58025458
 8008460:	5802546c 	.word	0x5802546c
 8008464:	58025480 	.word	0x58025480
 8008468:	58025494 	.word	0x58025494
 800846c:	cccccccd 	.word	0xcccccccd
 8008470:	16009600 	.word	0x16009600
 8008474:	58025880 	.word	0x58025880
 8008478:	aaaaaaab 	.word	0xaaaaaaab
 800847c:	400204b8 	.word	0x400204b8
 8008480:	4002040f 	.word	0x4002040f
 8008484:	10008200 	.word	0x10008200
 8008488:	40020880 	.word	0x40020880

0800848c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800848c:	b480      	push	{r7}
 800848e:	b085      	sub	sp, #20
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	b2db      	uxtb	r3, r3
 800849a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d04a      	beq.n	8008538 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2b08      	cmp	r3, #8
 80084a6:	d847      	bhi.n	8008538 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a25      	ldr	r2, [pc, #148]	@ (8008544 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d022      	beq.n	80084f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a24      	ldr	r2, [pc, #144]	@ (8008548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d01d      	beq.n	80084f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a22      	ldr	r2, [pc, #136]	@ (800854c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d018      	beq.n	80084f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a21      	ldr	r2, [pc, #132]	@ (8008550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d013      	beq.n	80084f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a1f      	ldr	r2, [pc, #124]	@ (8008554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d00e      	beq.n	80084f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a1e      	ldr	r2, [pc, #120]	@ (8008558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d009      	beq.n	80084f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a1c      	ldr	r2, [pc, #112]	@ (800855c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d004      	beq.n	80084f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a1b      	ldr	r2, [pc, #108]	@ (8008560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d101      	bne.n	80084fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80084f8:	2301      	movs	r3, #1
 80084fa:	e000      	b.n	80084fe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80084fc:	2300      	movs	r3, #0
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d00a      	beq.n	8008518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008502:	68fa      	ldr	r2, [r7, #12]
 8008504:	4b17      	ldr	r3, [pc, #92]	@ (8008564 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008506:	4413      	add	r3, r2
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	461a      	mov	r2, r3
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	4a15      	ldr	r2, [pc, #84]	@ (8008568 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008514:	671a      	str	r2, [r3, #112]	@ 0x70
 8008516:	e009      	b.n	800852c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008518:	68fa      	ldr	r2, [r7, #12]
 800851a:	4b14      	ldr	r3, [pc, #80]	@ (800856c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800851c:	4413      	add	r3, r2
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	461a      	mov	r2, r3
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	4a11      	ldr	r2, [pc, #68]	@ (8008570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800852a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	3b01      	subs	r3, #1
 8008530:	2201      	movs	r2, #1
 8008532:	409a      	lsls	r2, r3
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8008538:	bf00      	nop
 800853a:	3714      	adds	r7, #20
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr
 8008544:	58025408 	.word	0x58025408
 8008548:	5802541c 	.word	0x5802541c
 800854c:	58025430 	.word	0x58025430
 8008550:	58025444 	.word	0x58025444
 8008554:	58025458 	.word	0x58025458
 8008558:	5802546c 	.word	0x5802546c
 800855c:	58025480 	.word	0x58025480
 8008560:	58025494 	.word	0x58025494
 8008564:	1600963f 	.word	0x1600963f
 8008568:	58025940 	.word	0x58025940
 800856c:	1000823f 	.word	0x1000823f
 8008570:	40020940 	.word	0x40020940

08008574 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b098      	sub	sp, #96	@ 0x60
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800857c:	4a84      	ldr	r2, [pc, #528]	@ (8008790 <HAL_FDCAN_Init+0x21c>)
 800857e:	f107 030c 	add.w	r3, r7, #12
 8008582:	4611      	mov	r1, r2
 8008584:	224c      	movs	r2, #76	@ 0x4c
 8008586:	4618      	mov	r0, r3
 8008588:	f00e fa17 	bl	80169ba <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d101      	bne.n	8008596 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8008592:	2301      	movs	r3, #1
 8008594:	e1c6      	b.n	8008924 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a7e      	ldr	r2, [pc, #504]	@ (8008794 <HAL_FDCAN_Init+0x220>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d106      	bne.n	80085ae <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80085a8:	461a      	mov	r2, r3
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d106      	bne.n	80085c8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f7f8 fbcc 	bl	8000d60 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	699a      	ldr	r2, [r3, #24]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f022 0210 	bic.w	r2, r2, #16
 80085d6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80085d8:	f7fc ff5a 	bl	8005490 <HAL_GetTick>
 80085dc:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80085de:	e014      	b.n	800860a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80085e0:	f7fc ff56 	bl	8005490 <HAL_GetTick>
 80085e4:	4602      	mov	r2, r0
 80085e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80085e8:	1ad3      	subs	r3, r2, r3
 80085ea:	2b0a      	cmp	r3, #10
 80085ec:	d90d      	bls.n	800860a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80085f4:	f043 0201 	orr.w	r2, r3, #1
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2203      	movs	r2, #3
 8008602:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8008606:	2301      	movs	r3, #1
 8008608:	e18c      	b.n	8008924 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	699b      	ldr	r3, [r3, #24]
 8008610:	f003 0308 	and.w	r3, r3, #8
 8008614:	2b08      	cmp	r3, #8
 8008616:	d0e3      	beq.n	80085e0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	699a      	ldr	r2, [r3, #24]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f042 0201 	orr.w	r2, r2, #1
 8008626:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008628:	f7fc ff32 	bl	8005490 <HAL_GetTick>
 800862c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800862e:	e014      	b.n	800865a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008630:	f7fc ff2e 	bl	8005490 <HAL_GetTick>
 8008634:	4602      	mov	r2, r0
 8008636:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008638:	1ad3      	subs	r3, r2, r3
 800863a:	2b0a      	cmp	r3, #10
 800863c:	d90d      	bls.n	800865a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008644:	f043 0201 	orr.w	r2, r3, #1
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2203      	movs	r2, #3
 8008652:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	e164      	b.n	8008924 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	699b      	ldr	r3, [r3, #24]
 8008660:	f003 0301 	and.w	r3, r3, #1
 8008664:	2b00      	cmp	r3, #0
 8008666:	d0e3      	beq.n	8008630 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	699a      	ldr	r2, [r3, #24]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f042 0202 	orr.w	r2, r2, #2
 8008676:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	7c1b      	ldrb	r3, [r3, #16]
 800867c:	2b01      	cmp	r3, #1
 800867e:	d108      	bne.n	8008692 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	699a      	ldr	r2, [r3, #24]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800868e:	619a      	str	r2, [r3, #24]
 8008690:	e007      	b.n	80086a2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	699a      	ldr	r2, [r3, #24]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80086a0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	7c5b      	ldrb	r3, [r3, #17]
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d108      	bne.n	80086bc <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	699a      	ldr	r2, [r3, #24]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80086b8:	619a      	str	r2, [r3, #24]
 80086ba:	e007      	b.n	80086cc <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	699a      	ldr	r2, [r3, #24]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80086ca:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	7c9b      	ldrb	r3, [r3, #18]
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d108      	bne.n	80086e6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	699a      	ldr	r2, [r3, #24]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80086e2:	619a      	str	r2, [r3, #24]
 80086e4:	e007      	b.n	80086f6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	699a      	ldr	r2, [r3, #24]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80086f4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	699b      	ldr	r3, [r3, #24]
 80086fc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	689a      	ldr	r2, [r3, #8]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	430a      	orrs	r2, r1
 800870a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	699a      	ldr	r2, [r3, #24]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800871a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	691a      	ldr	r2, [r3, #16]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f022 0210 	bic.w	r2, r2, #16
 800872a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	2b01      	cmp	r3, #1
 8008732:	d108      	bne.n	8008746 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	699a      	ldr	r2, [r3, #24]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f042 0204 	orr.w	r2, r2, #4
 8008742:	619a      	str	r2, [r3, #24]
 8008744:	e030      	b.n	80087a8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	68db      	ldr	r3, [r3, #12]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d02c      	beq.n	80087a8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	68db      	ldr	r3, [r3, #12]
 8008752:	2b02      	cmp	r3, #2
 8008754:	d020      	beq.n	8008798 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	699a      	ldr	r2, [r3, #24]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008764:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	691a      	ldr	r2, [r3, #16]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f042 0210 	orr.w	r2, r2, #16
 8008774:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	2b03      	cmp	r3, #3
 800877c:	d114      	bne.n	80087a8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	699a      	ldr	r2, [r3, #24]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f042 0220 	orr.w	r2, r2, #32
 800878c:	619a      	str	r2, [r3, #24]
 800878e:	e00b      	b.n	80087a8 <HAL_FDCAN_Init+0x234>
 8008790:	08018980 	.word	0x08018980
 8008794:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	699a      	ldr	r2, [r3, #24]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f042 0220 	orr.w	r2, r2, #32
 80087a6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	699b      	ldr	r3, [r3, #24]
 80087ac:	3b01      	subs	r3, #1
 80087ae:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	69db      	ldr	r3, [r3, #28]
 80087b4:	3b01      	subs	r3, #1
 80087b6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80087b8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6a1b      	ldr	r3, [r3, #32]
 80087be:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80087c0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	695b      	ldr	r3, [r3, #20]
 80087c8:	3b01      	subs	r3, #1
 80087ca:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80087d0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80087d2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80087dc:	d115      	bne.n	800880a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087e2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087e8:	3b01      	subs	r3, #1
 80087ea:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80087ec:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087f2:	3b01      	subs	r3, #1
 80087f4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80087f6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087fe:	3b01      	subs	r3, #1
 8008800:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8008806:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008808:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800880e:	2b00      	cmp	r3, #0
 8008810:	d00a      	beq.n	8008828 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	430a      	orrs	r2, r1
 8008824:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008830:	4413      	add	r3, r2
 8008832:	2b00      	cmp	r3, #0
 8008834:	d011      	beq.n	800885a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800883e:	f023 0107 	bic.w	r1, r3, #7
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	3360      	adds	r3, #96	@ 0x60
 800884a:	443b      	add	r3, r7
 800884c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	430a      	orrs	r2, r1
 8008856:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800885e:	2b00      	cmp	r3, #0
 8008860:	d011      	beq.n	8008886 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800886a:	f023 0107 	bic.w	r1, r3, #7
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	3360      	adds	r3, #96	@ 0x60
 8008876:	443b      	add	r3, r7
 8008878:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	430a      	orrs	r2, r1
 8008882:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800888a:	2b00      	cmp	r3, #0
 800888c:	d012      	beq.n	80088b4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008896:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	3360      	adds	r3, #96	@ 0x60
 80088a2:	443b      	add	r3, r7
 80088a4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80088a8:	011a      	lsls	r2, r3, #4
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	430a      	orrs	r2, r1
 80088b0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d012      	beq.n	80088e2 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80088c4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	3360      	adds	r3, #96	@ 0x60
 80088d0:	443b      	add	r3, r7
 80088d2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80088d6:	021a      	lsls	r2, r3, #8
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	430a      	orrs	r2, r1
 80088de:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a11      	ldr	r2, [pc, #68]	@ (800892c <HAL_FDCAN_Init+0x3b8>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d107      	bne.n	80088fc <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	689a      	ldr	r2, [r3, #8]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	f022 0203 	bic.w	r2, r2, #3
 80088fa:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 f80b 	bl	8008930 <FDCAN_CalcultateRamBlockAddresses>
 800891a:	4603      	mov	r3, r0
 800891c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8008920:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8008924:	4618      	mov	r0, r3
 8008926:	3760      	adds	r7, #96	@ 0x60
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}
 800892c:	4000a000 	.word	0x4000a000

08008930 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8008930:	b480      	push	{r7}
 8008932:	b085      	sub	sp, #20
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800893c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8008946:	4ba7      	ldr	r3, [pc, #668]	@ (8008be4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008948:	4013      	ands	r3, r2
 800894a:	68ba      	ldr	r2, [r7, #8]
 800894c:	0091      	lsls	r1, r2, #2
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	6812      	ldr	r2, [r2, #0]
 8008952:	430b      	orrs	r3, r1
 8008954:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008960:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008968:	041a      	lsls	r2, r3, #16
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	430a      	orrs	r2, r1
 8008970:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008978:	68ba      	ldr	r2, [r7, #8]
 800897a:	4413      	add	r3, r2
 800897c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008986:	4b97      	ldr	r3, [pc, #604]	@ (8008be4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008988:	4013      	ands	r3, r2
 800898a:	68ba      	ldr	r2, [r7, #8]
 800898c:	0091      	lsls	r1, r2, #2
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	6812      	ldr	r2, [r2, #0]
 8008992:	430b      	orrs	r3, r1
 8008994:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089a0:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089a8:	041a      	lsls	r2, r3, #16
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	430a      	orrs	r2, r1
 80089b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089b8:	005b      	lsls	r3, r3, #1
 80089ba:	68ba      	ldr	r2, [r7, #8]
 80089bc:	4413      	add	r3, r2
 80089be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80089c8:	4b86      	ldr	r3, [pc, #536]	@ (8008be4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80089ca:	4013      	ands	r3, r2
 80089cc:	68ba      	ldr	r2, [r7, #8]
 80089ce:	0091      	lsls	r1, r2, #2
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	6812      	ldr	r2, [r2, #0]
 80089d4:	430b      	orrs	r3, r1
 80089d6:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80089e2:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089ea:	041a      	lsls	r2, r3, #16
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	430a      	orrs	r2, r1
 80089f2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80089fe:	fb02 f303 	mul.w	r3, r2, r3
 8008a02:	68ba      	ldr	r2, [r7, #8]
 8008a04:	4413      	add	r3, r2
 8008a06:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8008a10:	4b74      	ldr	r3, [pc, #464]	@ (8008be4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008a12:	4013      	ands	r3, r2
 8008a14:	68ba      	ldr	r2, [r7, #8]
 8008a16:	0091      	lsls	r1, r2, #2
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	6812      	ldr	r2, [r2, #0]
 8008a1c:	430b      	orrs	r3, r1
 8008a1e:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008a2a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a32:	041a      	lsls	r2, r3, #16
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	430a      	orrs	r2, r1
 8008a3a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008a46:	fb02 f303 	mul.w	r3, r2, r3
 8008a4a:	68ba      	ldr	r2, [r7, #8]
 8008a4c:	4413      	add	r3, r2
 8008a4e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8008a58:	4b62      	ldr	r3, [pc, #392]	@ (8008be4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008a5a:	4013      	ands	r3, r2
 8008a5c:	68ba      	ldr	r2, [r7, #8]
 8008a5e:	0091      	lsls	r1, r2, #2
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	6812      	ldr	r2, [r2, #0]
 8008a64:	430b      	orrs	r3, r1
 8008a66:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008a72:	fb02 f303 	mul.w	r3, r2, r3
 8008a76:	68ba      	ldr	r2, [r7, #8]
 8008a78:	4413      	add	r3, r2
 8008a7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8008a84:	4b57      	ldr	r3, [pc, #348]	@ (8008be4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008a86:	4013      	ands	r3, r2
 8008a88:	68ba      	ldr	r2, [r7, #8]
 8008a8a:	0091      	lsls	r1, r2, #2
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	6812      	ldr	r2, [r2, #0]
 8008a90:	430b      	orrs	r3, r1
 8008a92:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a9e:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008aa6:	041a      	lsls	r2, r3, #16
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	430a      	orrs	r2, r1
 8008aae:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ab6:	005b      	lsls	r3, r3, #1
 8008ab8:	68ba      	ldr	r2, [r7, #8]
 8008aba:	4413      	add	r3, r2
 8008abc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8008ac6:	4b47      	ldr	r3, [pc, #284]	@ (8008be4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008ac8:	4013      	ands	r3, r2
 8008aca:	68ba      	ldr	r2, [r7, #8]
 8008acc:	0091      	lsls	r1, r2, #2
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	6812      	ldr	r2, [r2, #0]
 8008ad2:	430b      	orrs	r3, r1
 8008ad4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008ae0:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ae8:	041a      	lsls	r2, r3, #16
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	430a      	orrs	r2, r1
 8008af0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008afc:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b04:	061a      	lsls	r2, r3, #24
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	430a      	orrs	r2, r1
 8008b0c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b14:	4b34      	ldr	r3, [pc, #208]	@ (8008be8 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8008b16:	4413      	add	r3, r2
 8008b18:	009a      	lsls	r2, r3, #2
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	441a      	add	r2, r3
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b36:	00db      	lsls	r3, r3, #3
 8008b38:	441a      	add	r2, r3
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b46:	6879      	ldr	r1, [r7, #4]
 8008b48:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8008b4a:	fb01 f303 	mul.w	r3, r1, r3
 8008b4e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8008b50:	441a      	add	r2, r3
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b5e:	6879      	ldr	r1, [r7, #4]
 8008b60:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8008b62:	fb01 f303 	mul.w	r3, r1, r3
 8008b66:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8008b68:	441a      	add	r2, r3
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b76:	6879      	ldr	r1, [r7, #4]
 8008b78:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8008b7a:	fb01 f303 	mul.w	r3, r1, r3
 8008b7e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8008b80:	441a      	add	r2, r3
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b92:	00db      	lsls	r3, r3, #3
 8008b94:	441a      	add	r2, r3
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ba6:	6879      	ldr	r1, [r7, #4]
 8008ba8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8008baa:	fb01 f303 	mul.w	r3, r1, r3
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	441a      	add	r2, r3
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bc2:	6879      	ldr	r1, [r7, #4]
 8008bc4:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8008bc6:	fb01 f303 	mul.w	r3, r1, r3
 8008bca:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8008bcc:	441a      	add	r2, r3
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bda:	4a04      	ldr	r2, [pc, #16]	@ (8008bec <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d915      	bls.n	8008c0c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8008be0:	e006      	b.n	8008bf0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8008be2:	bf00      	nop
 8008be4:	ffff0003 	.word	0xffff0003
 8008be8:	10002b00 	.word	0x10002b00
 8008bec:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008bf6:	f043 0220 	orr.w	r2, r3, #32
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2203      	movs	r2, #3
 8008c04:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	e010      	b.n	8008c2e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c10:	60fb      	str	r3, [r7, #12]
 8008c12:	e005      	b.n	8008c20 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2200      	movs	r2, #0
 8008c18:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	3304      	adds	r3, #4
 8008c1e:	60fb      	str	r3, [r7, #12]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c26:	68fa      	ldr	r2, [r7, #12]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d3f3      	bcc.n	8008c14 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008c2c:	2300      	movs	r3, #0
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3714      	adds	r7, #20
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr
 8008c3a:	bf00      	nop

08008c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b089      	sub	sp, #36	@ 0x24
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008c46:	2300      	movs	r3, #0
 8008c48:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008c4a:	4b89      	ldr	r3, [pc, #548]	@ (8008e70 <HAL_GPIO_Init+0x234>)
 8008c4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008c4e:	e194      	b.n	8008f7a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	2101      	movs	r1, #1
 8008c56:	69fb      	ldr	r3, [r7, #28]
 8008c58:	fa01 f303 	lsl.w	r3, r1, r3
 8008c5c:	4013      	ands	r3, r2
 8008c5e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	f000 8186 	beq.w	8008f74 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	f003 0303 	and.w	r3, r3, #3
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d005      	beq.n	8008c80 <HAL_GPIO_Init+0x44>
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	f003 0303 	and.w	r3, r3, #3
 8008c7c:	2b02      	cmp	r3, #2
 8008c7e:	d130      	bne.n	8008ce2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	005b      	lsls	r3, r3, #1
 8008c8a:	2203      	movs	r2, #3
 8008c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c90:	43db      	mvns	r3, r3
 8008c92:	69ba      	ldr	r2, [r7, #24]
 8008c94:	4013      	ands	r3, r2
 8008c96:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	68da      	ldr	r2, [r3, #12]
 8008c9c:	69fb      	ldr	r3, [r7, #28]
 8008c9e:	005b      	lsls	r3, r3, #1
 8008ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ca4:	69ba      	ldr	r2, [r7, #24]
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	69ba      	ldr	r2, [r7, #24]
 8008cae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	69fb      	ldr	r3, [r7, #28]
 8008cba:	fa02 f303 	lsl.w	r3, r2, r3
 8008cbe:	43db      	mvns	r3, r3
 8008cc0:	69ba      	ldr	r2, [r7, #24]
 8008cc2:	4013      	ands	r3, r2
 8008cc4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	091b      	lsrs	r3, r3, #4
 8008ccc:	f003 0201 	and.w	r2, r3, #1
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd6:	69ba      	ldr	r2, [r7, #24]
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	69ba      	ldr	r2, [r7, #24]
 8008ce0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	f003 0303 	and.w	r3, r3, #3
 8008cea:	2b03      	cmp	r3, #3
 8008cec:	d017      	beq.n	8008d1e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	68db      	ldr	r3, [r3, #12]
 8008cf2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008cf4:	69fb      	ldr	r3, [r7, #28]
 8008cf6:	005b      	lsls	r3, r3, #1
 8008cf8:	2203      	movs	r2, #3
 8008cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8008cfe:	43db      	mvns	r3, r3
 8008d00:	69ba      	ldr	r2, [r7, #24]
 8008d02:	4013      	ands	r3, r2
 8008d04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	689a      	ldr	r2, [r3, #8]
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	005b      	lsls	r3, r3, #1
 8008d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d12:	69ba      	ldr	r2, [r7, #24]
 8008d14:	4313      	orrs	r3, r2
 8008d16:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	69ba      	ldr	r2, [r7, #24]
 8008d1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	f003 0303 	and.w	r3, r3, #3
 8008d26:	2b02      	cmp	r3, #2
 8008d28:	d123      	bne.n	8008d72 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008d2a:	69fb      	ldr	r3, [r7, #28]
 8008d2c:	08da      	lsrs	r2, r3, #3
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	3208      	adds	r2, #8
 8008d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008d38:	69fb      	ldr	r3, [r7, #28]
 8008d3a:	f003 0307 	and.w	r3, r3, #7
 8008d3e:	009b      	lsls	r3, r3, #2
 8008d40:	220f      	movs	r2, #15
 8008d42:	fa02 f303 	lsl.w	r3, r2, r3
 8008d46:	43db      	mvns	r3, r3
 8008d48:	69ba      	ldr	r2, [r7, #24]
 8008d4a:	4013      	ands	r3, r2
 8008d4c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	691a      	ldr	r2, [r3, #16]
 8008d52:	69fb      	ldr	r3, [r7, #28]
 8008d54:	f003 0307 	and.w	r3, r3, #7
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d5e:	69ba      	ldr	r2, [r7, #24]
 8008d60:	4313      	orrs	r3, r2
 8008d62:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008d64:	69fb      	ldr	r3, [r7, #28]
 8008d66:	08da      	lsrs	r2, r3, #3
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	3208      	adds	r2, #8
 8008d6c:	69b9      	ldr	r1, [r7, #24]
 8008d6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008d78:	69fb      	ldr	r3, [r7, #28]
 8008d7a:	005b      	lsls	r3, r3, #1
 8008d7c:	2203      	movs	r2, #3
 8008d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d82:	43db      	mvns	r3, r3
 8008d84:	69ba      	ldr	r2, [r7, #24]
 8008d86:	4013      	ands	r3, r2
 8008d88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	f003 0203 	and.w	r2, r3, #3
 8008d92:	69fb      	ldr	r3, [r7, #28]
 8008d94:	005b      	lsls	r3, r3, #1
 8008d96:	fa02 f303 	lsl.w	r3, r2, r3
 8008d9a:	69ba      	ldr	r2, [r7, #24]
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	69ba      	ldr	r2, [r7, #24]
 8008da4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	f000 80e0 	beq.w	8008f74 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008db4:	4b2f      	ldr	r3, [pc, #188]	@ (8008e74 <HAL_GPIO_Init+0x238>)
 8008db6:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8008dba:	4a2e      	ldr	r2, [pc, #184]	@ (8008e74 <HAL_GPIO_Init+0x238>)
 8008dbc:	f043 0302 	orr.w	r3, r3, #2
 8008dc0:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8008dc4:	4b2b      	ldr	r3, [pc, #172]	@ (8008e74 <HAL_GPIO_Init+0x238>)
 8008dc6:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8008dca:	f003 0302 	and.w	r3, r3, #2
 8008dce:	60fb      	str	r3, [r7, #12]
 8008dd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008dd2:	4a29      	ldr	r2, [pc, #164]	@ (8008e78 <HAL_GPIO_Init+0x23c>)
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	089b      	lsrs	r3, r3, #2
 8008dd8:	3302      	adds	r3, #2
 8008dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008de0:	69fb      	ldr	r3, [r7, #28]
 8008de2:	f003 0303 	and.w	r3, r3, #3
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	220f      	movs	r2, #15
 8008dea:	fa02 f303 	lsl.w	r3, r2, r3
 8008dee:	43db      	mvns	r3, r3
 8008df0:	69ba      	ldr	r2, [r7, #24]
 8008df2:	4013      	ands	r3, r2
 8008df4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	4a20      	ldr	r2, [pc, #128]	@ (8008e7c <HAL_GPIO_Init+0x240>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d052      	beq.n	8008ea4 <HAL_GPIO_Init+0x268>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	4a1f      	ldr	r2, [pc, #124]	@ (8008e80 <HAL_GPIO_Init+0x244>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d031      	beq.n	8008e6a <HAL_GPIO_Init+0x22e>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	4a1e      	ldr	r2, [pc, #120]	@ (8008e84 <HAL_GPIO_Init+0x248>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d02b      	beq.n	8008e66 <HAL_GPIO_Init+0x22a>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	4a1d      	ldr	r2, [pc, #116]	@ (8008e88 <HAL_GPIO_Init+0x24c>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d025      	beq.n	8008e62 <HAL_GPIO_Init+0x226>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	4a1c      	ldr	r2, [pc, #112]	@ (8008e8c <HAL_GPIO_Init+0x250>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d01f      	beq.n	8008e5e <HAL_GPIO_Init+0x222>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	4a1b      	ldr	r2, [pc, #108]	@ (8008e90 <HAL_GPIO_Init+0x254>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d019      	beq.n	8008e5a <HAL_GPIO_Init+0x21e>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	4a1a      	ldr	r2, [pc, #104]	@ (8008e94 <HAL_GPIO_Init+0x258>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d013      	beq.n	8008e56 <HAL_GPIO_Init+0x21a>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	4a19      	ldr	r2, [pc, #100]	@ (8008e98 <HAL_GPIO_Init+0x25c>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d00d      	beq.n	8008e52 <HAL_GPIO_Init+0x216>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	4a18      	ldr	r2, [pc, #96]	@ (8008e9c <HAL_GPIO_Init+0x260>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d007      	beq.n	8008e4e <HAL_GPIO_Init+0x212>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	4a17      	ldr	r2, [pc, #92]	@ (8008ea0 <HAL_GPIO_Init+0x264>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d101      	bne.n	8008e4a <HAL_GPIO_Init+0x20e>
 8008e46:	2309      	movs	r3, #9
 8008e48:	e02d      	b.n	8008ea6 <HAL_GPIO_Init+0x26a>
 8008e4a:	230a      	movs	r3, #10
 8008e4c:	e02b      	b.n	8008ea6 <HAL_GPIO_Init+0x26a>
 8008e4e:	2308      	movs	r3, #8
 8008e50:	e029      	b.n	8008ea6 <HAL_GPIO_Init+0x26a>
 8008e52:	2307      	movs	r3, #7
 8008e54:	e027      	b.n	8008ea6 <HAL_GPIO_Init+0x26a>
 8008e56:	2306      	movs	r3, #6
 8008e58:	e025      	b.n	8008ea6 <HAL_GPIO_Init+0x26a>
 8008e5a:	2305      	movs	r3, #5
 8008e5c:	e023      	b.n	8008ea6 <HAL_GPIO_Init+0x26a>
 8008e5e:	2304      	movs	r3, #4
 8008e60:	e021      	b.n	8008ea6 <HAL_GPIO_Init+0x26a>
 8008e62:	2303      	movs	r3, #3
 8008e64:	e01f      	b.n	8008ea6 <HAL_GPIO_Init+0x26a>
 8008e66:	2302      	movs	r3, #2
 8008e68:	e01d      	b.n	8008ea6 <HAL_GPIO_Init+0x26a>
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e01b      	b.n	8008ea6 <HAL_GPIO_Init+0x26a>
 8008e6e:	bf00      	nop
 8008e70:	58000080 	.word	0x58000080
 8008e74:	58024400 	.word	0x58024400
 8008e78:	58000400 	.word	0x58000400
 8008e7c:	58020000 	.word	0x58020000
 8008e80:	58020400 	.word	0x58020400
 8008e84:	58020800 	.word	0x58020800
 8008e88:	58020c00 	.word	0x58020c00
 8008e8c:	58021000 	.word	0x58021000
 8008e90:	58021400 	.word	0x58021400
 8008e94:	58021800 	.word	0x58021800
 8008e98:	58021c00 	.word	0x58021c00
 8008e9c:	58022000 	.word	0x58022000
 8008ea0:	58022400 	.word	0x58022400
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	69fa      	ldr	r2, [r7, #28]
 8008ea8:	f002 0203 	and.w	r2, r2, #3
 8008eac:	0092      	lsls	r2, r2, #2
 8008eae:	4093      	lsls	r3, r2
 8008eb0:	69ba      	ldr	r2, [r7, #24]
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008eb6:	4938      	ldr	r1, [pc, #224]	@ (8008f98 <HAL_GPIO_Init+0x35c>)
 8008eb8:	69fb      	ldr	r3, [r7, #28]
 8008eba:	089b      	lsrs	r3, r3, #2
 8008ebc:	3302      	adds	r3, #2
 8008ebe:	69ba      	ldr	r2, [r7, #24]
 8008ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008ec4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	43db      	mvns	r3, r3
 8008ed0:	69ba      	ldr	r2, [r7, #24]
 8008ed2:	4013      	ands	r3, r2
 8008ed4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d003      	beq.n	8008eea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008ee2:	69ba      	ldr	r2, [r7, #24]
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008eea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008ef2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	43db      	mvns	r3, r3
 8008efe:	69ba      	ldr	r2, [r7, #24]
 8008f00:	4013      	ands	r3, r2
 8008f02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d003      	beq.n	8008f18 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008f10:	69ba      	ldr	r2, [r7, #24]
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	4313      	orrs	r3, r2
 8008f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008f18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008f1c:	69bb      	ldr	r3, [r7, #24]
 8008f1e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	43db      	mvns	r3, r3
 8008f2a:	69ba      	ldr	r2, [r7, #24]
 8008f2c:	4013      	ands	r3, r2
 8008f2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d003      	beq.n	8008f44 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008f3c:	69ba      	ldr	r2, [r7, #24]
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	4313      	orrs	r3, r2
 8008f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	69ba      	ldr	r2, [r7, #24]
 8008f48:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	43db      	mvns	r3, r3
 8008f54:	69ba      	ldr	r2, [r7, #24]
 8008f56:	4013      	ands	r3, r2
 8008f58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d003      	beq.n	8008f6e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008f66:	69ba      	ldr	r2, [r7, #24]
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	69ba      	ldr	r2, [r7, #24]
 8008f72:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008f74:	69fb      	ldr	r3, [r7, #28]
 8008f76:	3301      	adds	r3, #1
 8008f78:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	69fb      	ldr	r3, [r7, #28]
 8008f80:	fa22 f303 	lsr.w	r3, r2, r3
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	f47f ae63 	bne.w	8008c50 <HAL_GPIO_Init+0x14>
  }
}
 8008f8a:	bf00      	nop
 8008f8c:	bf00      	nop
 8008f8e:	3724      	adds	r7, #36	@ 0x24
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr
 8008f98:	58000400 	.word	0x58000400

08008f9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b083      	sub	sp, #12
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	807b      	strh	r3, [r7, #2]
 8008fa8:	4613      	mov	r3, r2
 8008faa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008fac:	787b      	ldrb	r3, [r7, #1]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d003      	beq.n	8008fba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008fb2:	887a      	ldrh	r2, [r7, #2]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008fb8:	e003      	b.n	8008fc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008fba:	887b      	ldrh	r3, [r7, #2]
 8008fbc:	041a      	lsls	r2, r3, #16
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	619a      	str	r2, [r3, #24]
}
 8008fc2:	bf00      	nop
 8008fc4:	370c      	adds	r7, #12
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fcc:	4770      	bx	lr
	...

08008fd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b082      	sub	sp, #8
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d101      	bne.n	8008fe2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e08b      	b.n	80090fa <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d106      	bne.n	8008ffc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f7f8 f8b6 	bl	8001168 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2224      	movs	r2, #36	@ 0x24
 8009000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f022 0201 	bic.w	r2, r2, #1
 8009012:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	685a      	ldr	r2, [r3, #4]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009020:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	689a      	ldr	r2, [r3, #8]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009030:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	2b01      	cmp	r3, #1
 8009038:	d107      	bne.n	800904a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	689a      	ldr	r2, [r3, #8]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009046:	609a      	str	r2, [r3, #8]
 8009048:	e006      	b.n	8009058 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	689a      	ldr	r2, [r3, #8]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8009056:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	68db      	ldr	r3, [r3, #12]
 800905c:	2b02      	cmp	r3, #2
 800905e:	d108      	bne.n	8009072 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	685a      	ldr	r2, [r3, #4]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800906e:	605a      	str	r2, [r3, #4]
 8009070:	e007      	b.n	8009082 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	685a      	ldr	r2, [r3, #4]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009080:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	6859      	ldr	r1, [r3, #4]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681a      	ldr	r2, [r3, #0]
 800908c:	4b1d      	ldr	r3, [pc, #116]	@ (8009104 <HAL_I2C_Init+0x134>)
 800908e:	430b      	orrs	r3, r1
 8009090:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	68da      	ldr	r2, [r3, #12]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80090a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	691a      	ldr	r2, [r3, #16]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	695b      	ldr	r3, [r3, #20]
 80090aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	699b      	ldr	r3, [r3, #24]
 80090b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	430a      	orrs	r2, r1
 80090ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	69d9      	ldr	r1, [r3, #28]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6a1a      	ldr	r2, [r3, #32]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	430a      	orrs	r2, r1
 80090ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f042 0201 	orr.w	r2, r2, #1
 80090da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2200      	movs	r2, #0
 80090e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2220      	movs	r2, #32
 80090e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2200      	movs	r2, #0
 80090ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2200      	movs	r2, #0
 80090f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80090f8:	2300      	movs	r3, #0
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3708      	adds	r7, #8
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	02008000 	.word	0x02008000

08009108 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009118:	b2db      	uxtb	r3, r3
 800911a:	2b20      	cmp	r3, #32
 800911c:	d138      	bne.n	8009190 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009124:	2b01      	cmp	r3, #1
 8009126:	d101      	bne.n	800912c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009128:	2302      	movs	r3, #2
 800912a:	e032      	b.n	8009192 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2201      	movs	r2, #1
 8009130:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2224      	movs	r2, #36	@ 0x24
 8009138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f022 0201 	bic.w	r2, r2, #1
 800914a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800915a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	6819      	ldr	r1, [r3, #0]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	683a      	ldr	r2, [r7, #0]
 8009168:	430a      	orrs	r2, r1
 800916a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f042 0201 	orr.w	r2, r2, #1
 800917a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2220      	movs	r2, #32
 8009180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2200      	movs	r2, #0
 8009188:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800918c:	2300      	movs	r3, #0
 800918e:	e000      	b.n	8009192 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009190:	2302      	movs	r3, #2
  }
}
 8009192:	4618      	mov	r0, r3
 8009194:	370c      	adds	r7, #12
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr

0800919e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800919e:	b480      	push	{r7}
 80091a0:	b085      	sub	sp, #20
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
 80091a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80091ae:	b2db      	uxtb	r3, r3
 80091b0:	2b20      	cmp	r3, #32
 80091b2:	d139      	bne.n	8009228 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	d101      	bne.n	80091c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80091be:	2302      	movs	r3, #2
 80091c0:	e033      	b.n	800922a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2201      	movs	r2, #1
 80091c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2224      	movs	r2, #36	@ 0x24
 80091ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	681a      	ldr	r2, [r3, #0]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f022 0201 	bic.w	r2, r2, #1
 80091e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80091f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	021b      	lsls	r3, r3, #8
 80091f6:	68fa      	ldr	r2, [r7, #12]
 80091f8:	4313      	orrs	r3, r2
 80091fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	68fa      	ldr	r2, [r7, #12]
 8009202:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f042 0201 	orr.w	r2, r2, #1
 8009212:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2220      	movs	r2, #32
 8009218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009224:	2300      	movs	r3, #0
 8009226:	e000      	b.n	800922a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009228:	2302      	movs	r3, #2
  }
}
 800922a:	4618      	mov	r0, r3
 800922c:	3714      	adds	r7, #20
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr
	...

08009238 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009240:	4b19      	ldr	r3, [pc, #100]	@ (80092a8 <HAL_PWREx_ConfigSupply+0x70>)
 8009242:	68db      	ldr	r3, [r3, #12]
 8009244:	f003 0304 	and.w	r3, r3, #4
 8009248:	2b04      	cmp	r3, #4
 800924a:	d00a      	beq.n	8009262 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800924c:	4b16      	ldr	r3, [pc, #88]	@ (80092a8 <HAL_PWREx_ConfigSupply+0x70>)
 800924e:	68db      	ldr	r3, [r3, #12]
 8009250:	f003 0307 	and.w	r3, r3, #7
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	429a      	cmp	r2, r3
 8009258:	d001      	beq.n	800925e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800925a:	2301      	movs	r3, #1
 800925c:	e01f      	b.n	800929e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800925e:	2300      	movs	r3, #0
 8009260:	e01d      	b.n	800929e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009262:	4b11      	ldr	r3, [pc, #68]	@ (80092a8 <HAL_PWREx_ConfigSupply+0x70>)
 8009264:	68db      	ldr	r3, [r3, #12]
 8009266:	f023 0207 	bic.w	r2, r3, #7
 800926a:	490f      	ldr	r1, [pc, #60]	@ (80092a8 <HAL_PWREx_ConfigSupply+0x70>)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	4313      	orrs	r3, r2
 8009270:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009272:	f7fc f90d 	bl	8005490 <HAL_GetTick>
 8009276:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009278:	e009      	b.n	800928e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800927a:	f7fc f909 	bl	8005490 <HAL_GetTick>
 800927e:	4602      	mov	r2, r0
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	1ad3      	subs	r3, r2, r3
 8009284:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009288:	d901      	bls.n	800928e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800928a:	2301      	movs	r3, #1
 800928c:	e007      	b.n	800929e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800928e:	4b06      	ldr	r3, [pc, #24]	@ (80092a8 <HAL_PWREx_ConfigSupply+0x70>)
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009296:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800929a:	d1ee      	bne.n	800927a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800929c:	2300      	movs	r3, #0
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	58024800 	.word	0x58024800

080092ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b08c      	sub	sp, #48	@ 0x30
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d102      	bne.n	80092c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80092ba:	2301      	movs	r3, #1
 80092bc:	f000 bc1f 	b.w	8009afe <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f003 0301 	and.w	r3, r3, #1
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	f000 80b3 	beq.w	8009434 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80092ce:	4b95      	ldr	r3, [pc, #596]	@ (8009524 <HAL_RCC_OscConfig+0x278>)
 80092d0:	691b      	ldr	r3, [r3, #16]
 80092d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80092d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80092d8:	4b92      	ldr	r3, [pc, #584]	@ (8009524 <HAL_RCC_OscConfig+0x278>)
 80092da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80092de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092e0:	2b10      	cmp	r3, #16
 80092e2:	d007      	beq.n	80092f4 <HAL_RCC_OscConfig+0x48>
 80092e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092e6:	2b18      	cmp	r3, #24
 80092e8:	d112      	bne.n	8009310 <HAL_RCC_OscConfig+0x64>
 80092ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ec:	f003 0303 	and.w	r3, r3, #3
 80092f0:	2b02      	cmp	r3, #2
 80092f2:	d10d      	bne.n	8009310 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80092f4:	4b8b      	ldr	r3, [pc, #556]	@ (8009524 <HAL_RCC_OscConfig+0x278>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	f000 8098 	beq.w	8009432 <HAL_RCC_OscConfig+0x186>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	2b00      	cmp	r3, #0
 8009308:	f040 8093 	bne.w	8009432 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800930c:	2301      	movs	r3, #1
 800930e:	e3f6      	b.n	8009afe <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009318:	d106      	bne.n	8009328 <HAL_RCC_OscConfig+0x7c>
 800931a:	4b82      	ldr	r3, [pc, #520]	@ (8009524 <HAL_RCC_OscConfig+0x278>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4a81      	ldr	r2, [pc, #516]	@ (8009524 <HAL_RCC_OscConfig+0x278>)
 8009320:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009324:	6013      	str	r3, [r2, #0]
 8009326:	e058      	b.n	80093da <HAL_RCC_OscConfig+0x12e>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d112      	bne.n	8009356 <HAL_RCC_OscConfig+0xaa>
 8009330:	4b7c      	ldr	r3, [pc, #496]	@ (8009524 <HAL_RCC_OscConfig+0x278>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a7b      	ldr	r2, [pc, #492]	@ (8009524 <HAL_RCC_OscConfig+0x278>)
 8009336:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800933a:	6013      	str	r3, [r2, #0]
 800933c:	4b79      	ldr	r3, [pc, #484]	@ (8009524 <HAL_RCC_OscConfig+0x278>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4a78      	ldr	r2, [pc, #480]	@ (8009524 <HAL_RCC_OscConfig+0x278>)
 8009342:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009346:	6013      	str	r3, [r2, #0]
 8009348:	4b76      	ldr	r3, [pc, #472]	@ (8009524 <HAL_RCC_OscConfig+0x278>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a75      	ldr	r2, [pc, #468]	@ (8009524 <HAL_RCC_OscConfig+0x278>)
 800934e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009352:	6013      	str	r3, [r2, #0]
 8009354:	e041      	b.n	80093da <HAL_RCC_OscConfig+0x12e>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800935e:	d112      	bne.n	8009386 <HAL_RCC_OscConfig+0xda>
 8009360:	4b70      	ldr	r3, [pc, #448]	@ (8009524 <HAL_RCC_OscConfig+0x278>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4a6f      	ldr	r2, [pc, #444]	@ (8009524 <HAL_RCC_OscConfig+0x278>)
 8009366:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800936a:	6013      	str	r3, [r2, #0]
 800936c:	4b6d      	ldr	r3, [pc, #436]	@ (8009524 <HAL_RCC_OscConfig+0x278>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a6c      	ldr	r2, [pc, #432]	@ (8009524 <HAL_RCC_OscConfig+0x278>)
 8009372:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009376:	6013      	str	r3, [r2, #0]
 8009378:	4b6a      	ldr	r3, [pc, #424]	@ (8009524 <HAL_RCC_OscConfig+0x278>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a69      	ldr	r2, [pc, #420]	@ (8009524 <HAL_RCC_OscConfig+0x278>)
 800937e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009382:	6013      	str	r3, [r2, #0]
 8009384:	e029      	b.n	80093da <HAL_RCC_OscConfig+0x12e>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800938e:	d112      	bne.n	80093b6 <HAL_RCC_OscConfig+0x10a>
 8009390:	4b64      	ldr	r3, [pc, #400]	@ (8009524 <HAL_RCC_OscConfig+0x278>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a63      	ldr	r2, [pc, #396]	@ (8009524 <HAL_RCC_OscConfig+0x278>)
 8009396:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800939a:	6013      	str	r3, [r2, #0]
 800939c:	4b61      	ldr	r3, [pc, #388]	@ (8009524 <HAL_RCC_OscConfig+0x278>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a60      	ldr	r2, [pc, #384]	@ (8009524 <HAL_RCC_OscConfig+0x278>)
 80093a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80093a6:	6013      	str	r3, [r2, #0]
 80093a8:	4b5e      	ldr	r3, [pc, #376]	@ (8009524 <HAL_RCC_OscConfig+0x278>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4a5d      	ldr	r2, [pc, #372]	@ (8009524 <HAL_RCC_OscConfig+0x278>)
 80093ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80093b2:	6013      	str	r3, [r2, #0]
 80093b4:	e011      	b.n	80093da <HAL_RCC_OscConfig+0x12e>
 80093b6:	4b5b      	ldr	r3, [pc, #364]	@ (8009524 <HAL_RCC_OscConfig+0x278>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a5a      	ldr	r2, [pc, #360]	@ (8009524 <HAL_RCC_OscConfig+0x278>)
 80093bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80093c0:	6013      	str	r3, [r2, #0]
 80093c2:	4b58      	ldr	r3, [pc, #352]	@ (8009524 <HAL_RCC_OscConfig+0x278>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4a57      	ldr	r2, [pc, #348]	@ (8009524 <HAL_RCC_OscConfig+0x278>)
 80093c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80093cc:	6013      	str	r3, [r2, #0]
 80093ce:	4b55      	ldr	r3, [pc, #340]	@ (8009524 <HAL_RCC_OscConfig+0x278>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a54      	ldr	r2, [pc, #336]	@ (8009524 <HAL_RCC_OscConfig+0x278>)
 80093d4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80093d8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d013      	beq.n	800940a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093e2:	f7fc f855 	bl	8005490 <HAL_GetTick>
 80093e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80093e8:	e008      	b.n	80093fc <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80093ea:	f7fc f851 	bl	8005490 <HAL_GetTick>
 80093ee:	4602      	mov	r2, r0
 80093f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093f2:	1ad3      	subs	r3, r2, r3
 80093f4:	2b64      	cmp	r3, #100	@ 0x64
 80093f6:	d901      	bls.n	80093fc <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80093f8:	2303      	movs	r3, #3
 80093fa:	e380      	b.n	8009afe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80093fc:	4b49      	ldr	r3, [pc, #292]	@ (8009524 <HAL_RCC_OscConfig+0x278>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009404:	2b00      	cmp	r3, #0
 8009406:	d0f0      	beq.n	80093ea <HAL_RCC_OscConfig+0x13e>
 8009408:	e014      	b.n	8009434 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800940a:	f7fc f841 	bl	8005490 <HAL_GetTick>
 800940e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009410:	e008      	b.n	8009424 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009412:	f7fc f83d 	bl	8005490 <HAL_GetTick>
 8009416:	4602      	mov	r2, r0
 8009418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800941a:	1ad3      	subs	r3, r2, r3
 800941c:	2b64      	cmp	r3, #100	@ 0x64
 800941e:	d901      	bls.n	8009424 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8009420:	2303      	movs	r3, #3
 8009422:	e36c      	b.n	8009afe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009424:	4b3f      	ldr	r3, [pc, #252]	@ (8009524 <HAL_RCC_OscConfig+0x278>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800942c:	2b00      	cmp	r3, #0
 800942e:	d1f0      	bne.n	8009412 <HAL_RCC_OscConfig+0x166>
 8009430:	e000      	b.n	8009434 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009432:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f003 0302 	and.w	r3, r3, #2
 800943c:	2b00      	cmp	r3, #0
 800943e:	f000 808c 	beq.w	800955a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009442:	4b38      	ldr	r3, [pc, #224]	@ (8009524 <HAL_RCC_OscConfig+0x278>)
 8009444:	691b      	ldr	r3, [r3, #16]
 8009446:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800944a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800944c:	4b35      	ldr	r3, [pc, #212]	@ (8009524 <HAL_RCC_OscConfig+0x278>)
 800944e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009450:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009452:	6a3b      	ldr	r3, [r7, #32]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d007      	beq.n	8009468 <HAL_RCC_OscConfig+0x1bc>
 8009458:	6a3b      	ldr	r3, [r7, #32]
 800945a:	2b18      	cmp	r3, #24
 800945c:	d137      	bne.n	80094ce <HAL_RCC_OscConfig+0x222>
 800945e:	69fb      	ldr	r3, [r7, #28]
 8009460:	f003 0303 	and.w	r3, r3, #3
 8009464:	2b00      	cmp	r3, #0
 8009466:	d132      	bne.n	80094ce <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009468:	4b2e      	ldr	r3, [pc, #184]	@ (8009524 <HAL_RCC_OscConfig+0x278>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f003 0304 	and.w	r3, r3, #4
 8009470:	2b00      	cmp	r3, #0
 8009472:	d005      	beq.n	8009480 <HAL_RCC_OscConfig+0x1d4>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	68db      	ldr	r3, [r3, #12]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d101      	bne.n	8009480 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800947c:	2301      	movs	r3, #1
 800947e:	e33e      	b.n	8009afe <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009480:	4b28      	ldr	r3, [pc, #160]	@ (8009524 <HAL_RCC_OscConfig+0x278>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f023 0219 	bic.w	r2, r3, #25
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	68db      	ldr	r3, [r3, #12]
 800948c:	4925      	ldr	r1, [pc, #148]	@ (8009524 <HAL_RCC_OscConfig+0x278>)
 800948e:	4313      	orrs	r3, r2
 8009490:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009492:	f7fb fffd 	bl	8005490 <HAL_GetTick>
 8009496:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009498:	e008      	b.n	80094ac <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800949a:	f7fb fff9 	bl	8005490 <HAL_GetTick>
 800949e:	4602      	mov	r2, r0
 80094a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094a2:	1ad3      	subs	r3, r2, r3
 80094a4:	2b02      	cmp	r3, #2
 80094a6:	d901      	bls.n	80094ac <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80094a8:	2303      	movs	r3, #3
 80094aa:	e328      	b.n	8009afe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80094ac:	4b1d      	ldr	r3, [pc, #116]	@ (8009524 <HAL_RCC_OscConfig+0x278>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f003 0304 	and.w	r3, r3, #4
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d0f0      	beq.n	800949a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094b8:	4b1a      	ldr	r3, [pc, #104]	@ (8009524 <HAL_RCC_OscConfig+0x278>)
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	691b      	ldr	r3, [r3, #16]
 80094c4:	061b      	lsls	r3, r3, #24
 80094c6:	4917      	ldr	r1, [pc, #92]	@ (8009524 <HAL_RCC_OscConfig+0x278>)
 80094c8:	4313      	orrs	r3, r2
 80094ca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80094cc:	e045      	b.n	800955a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	68db      	ldr	r3, [r3, #12]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d028      	beq.n	8009528 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80094d6:	4b13      	ldr	r3, [pc, #76]	@ (8009524 <HAL_RCC_OscConfig+0x278>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f023 0219 	bic.w	r2, r3, #25
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	68db      	ldr	r3, [r3, #12]
 80094e2:	4910      	ldr	r1, [pc, #64]	@ (8009524 <HAL_RCC_OscConfig+0x278>)
 80094e4:	4313      	orrs	r3, r2
 80094e6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094e8:	f7fb ffd2 	bl	8005490 <HAL_GetTick>
 80094ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80094ee:	e008      	b.n	8009502 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80094f0:	f7fb ffce 	bl	8005490 <HAL_GetTick>
 80094f4:	4602      	mov	r2, r0
 80094f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094f8:	1ad3      	subs	r3, r2, r3
 80094fa:	2b02      	cmp	r3, #2
 80094fc:	d901      	bls.n	8009502 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80094fe:	2303      	movs	r3, #3
 8009500:	e2fd      	b.n	8009afe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009502:	4b08      	ldr	r3, [pc, #32]	@ (8009524 <HAL_RCC_OscConfig+0x278>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f003 0304 	and.w	r3, r3, #4
 800950a:	2b00      	cmp	r3, #0
 800950c:	d0f0      	beq.n	80094f0 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800950e:	4b05      	ldr	r3, [pc, #20]	@ (8009524 <HAL_RCC_OscConfig+0x278>)
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	691b      	ldr	r3, [r3, #16]
 800951a:	061b      	lsls	r3, r3, #24
 800951c:	4901      	ldr	r1, [pc, #4]	@ (8009524 <HAL_RCC_OscConfig+0x278>)
 800951e:	4313      	orrs	r3, r2
 8009520:	604b      	str	r3, [r1, #4]
 8009522:	e01a      	b.n	800955a <HAL_RCC_OscConfig+0x2ae>
 8009524:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009528:	4b97      	ldr	r3, [pc, #604]	@ (8009788 <HAL_RCC_OscConfig+0x4dc>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a96      	ldr	r2, [pc, #600]	@ (8009788 <HAL_RCC_OscConfig+0x4dc>)
 800952e:	f023 0301 	bic.w	r3, r3, #1
 8009532:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009534:	f7fb ffac 	bl	8005490 <HAL_GetTick>
 8009538:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800953a:	e008      	b.n	800954e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800953c:	f7fb ffa8 	bl	8005490 <HAL_GetTick>
 8009540:	4602      	mov	r2, r0
 8009542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009544:	1ad3      	subs	r3, r2, r3
 8009546:	2b02      	cmp	r3, #2
 8009548:	d901      	bls.n	800954e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800954a:	2303      	movs	r3, #3
 800954c:	e2d7      	b.n	8009afe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800954e:	4b8e      	ldr	r3, [pc, #568]	@ (8009788 <HAL_RCC_OscConfig+0x4dc>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f003 0304 	and.w	r3, r3, #4
 8009556:	2b00      	cmp	r3, #0
 8009558:	d1f0      	bne.n	800953c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f003 0310 	and.w	r3, r3, #16
 8009562:	2b00      	cmp	r3, #0
 8009564:	d06a      	beq.n	800963c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009566:	4b88      	ldr	r3, [pc, #544]	@ (8009788 <HAL_RCC_OscConfig+0x4dc>)
 8009568:	691b      	ldr	r3, [r3, #16]
 800956a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800956e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009570:	4b85      	ldr	r3, [pc, #532]	@ (8009788 <HAL_RCC_OscConfig+0x4dc>)
 8009572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009574:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009576:	69bb      	ldr	r3, [r7, #24]
 8009578:	2b08      	cmp	r3, #8
 800957a:	d007      	beq.n	800958c <HAL_RCC_OscConfig+0x2e0>
 800957c:	69bb      	ldr	r3, [r7, #24]
 800957e:	2b18      	cmp	r3, #24
 8009580:	d11b      	bne.n	80095ba <HAL_RCC_OscConfig+0x30e>
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	f003 0303 	and.w	r3, r3, #3
 8009588:	2b01      	cmp	r3, #1
 800958a:	d116      	bne.n	80095ba <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800958c:	4b7e      	ldr	r3, [pc, #504]	@ (8009788 <HAL_RCC_OscConfig+0x4dc>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009594:	2b00      	cmp	r3, #0
 8009596:	d005      	beq.n	80095a4 <HAL_RCC_OscConfig+0x2f8>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	69db      	ldr	r3, [r3, #28]
 800959c:	2b80      	cmp	r3, #128	@ 0x80
 800959e:	d001      	beq.n	80095a4 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80095a0:	2301      	movs	r3, #1
 80095a2:	e2ac      	b.n	8009afe <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80095a4:	4b78      	ldr	r3, [pc, #480]	@ (8009788 <HAL_RCC_OscConfig+0x4dc>)
 80095a6:	68db      	ldr	r3, [r3, #12]
 80095a8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6a1b      	ldr	r3, [r3, #32]
 80095b0:	061b      	lsls	r3, r3, #24
 80095b2:	4975      	ldr	r1, [pc, #468]	@ (8009788 <HAL_RCC_OscConfig+0x4dc>)
 80095b4:	4313      	orrs	r3, r2
 80095b6:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80095b8:	e040      	b.n	800963c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	69db      	ldr	r3, [r3, #28]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d023      	beq.n	800960a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80095c2:	4b71      	ldr	r3, [pc, #452]	@ (8009788 <HAL_RCC_OscConfig+0x4dc>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a70      	ldr	r2, [pc, #448]	@ (8009788 <HAL_RCC_OscConfig+0x4dc>)
 80095c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095ce:	f7fb ff5f 	bl	8005490 <HAL_GetTick>
 80095d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80095d4:	e008      	b.n	80095e8 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80095d6:	f7fb ff5b 	bl	8005490 <HAL_GetTick>
 80095da:	4602      	mov	r2, r0
 80095dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095de:	1ad3      	subs	r3, r2, r3
 80095e0:	2b02      	cmp	r3, #2
 80095e2:	d901      	bls.n	80095e8 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80095e4:	2303      	movs	r3, #3
 80095e6:	e28a      	b.n	8009afe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80095e8:	4b67      	ldr	r3, [pc, #412]	@ (8009788 <HAL_RCC_OscConfig+0x4dc>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d0f0      	beq.n	80095d6 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80095f4:	4b64      	ldr	r3, [pc, #400]	@ (8009788 <HAL_RCC_OscConfig+0x4dc>)
 80095f6:	68db      	ldr	r3, [r3, #12]
 80095f8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6a1b      	ldr	r3, [r3, #32]
 8009600:	061b      	lsls	r3, r3, #24
 8009602:	4961      	ldr	r1, [pc, #388]	@ (8009788 <HAL_RCC_OscConfig+0x4dc>)
 8009604:	4313      	orrs	r3, r2
 8009606:	60cb      	str	r3, [r1, #12]
 8009608:	e018      	b.n	800963c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800960a:	4b5f      	ldr	r3, [pc, #380]	@ (8009788 <HAL_RCC_OscConfig+0x4dc>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4a5e      	ldr	r2, [pc, #376]	@ (8009788 <HAL_RCC_OscConfig+0x4dc>)
 8009610:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009614:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009616:	f7fb ff3b 	bl	8005490 <HAL_GetTick>
 800961a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800961c:	e008      	b.n	8009630 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800961e:	f7fb ff37 	bl	8005490 <HAL_GetTick>
 8009622:	4602      	mov	r2, r0
 8009624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009626:	1ad3      	subs	r3, r2, r3
 8009628:	2b02      	cmp	r3, #2
 800962a:	d901      	bls.n	8009630 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800962c:	2303      	movs	r3, #3
 800962e:	e266      	b.n	8009afe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009630:	4b55      	ldr	r3, [pc, #340]	@ (8009788 <HAL_RCC_OscConfig+0x4dc>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009638:	2b00      	cmp	r3, #0
 800963a:	d1f0      	bne.n	800961e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f003 0308 	and.w	r3, r3, #8
 8009644:	2b00      	cmp	r3, #0
 8009646:	d036      	beq.n	80096b6 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	695b      	ldr	r3, [r3, #20]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d019      	beq.n	8009684 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009650:	4b4d      	ldr	r3, [pc, #308]	@ (8009788 <HAL_RCC_OscConfig+0x4dc>)
 8009652:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009654:	4a4c      	ldr	r2, [pc, #304]	@ (8009788 <HAL_RCC_OscConfig+0x4dc>)
 8009656:	f043 0301 	orr.w	r3, r3, #1
 800965a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800965c:	f7fb ff18 	bl	8005490 <HAL_GetTick>
 8009660:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009662:	e008      	b.n	8009676 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009664:	f7fb ff14 	bl	8005490 <HAL_GetTick>
 8009668:	4602      	mov	r2, r0
 800966a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800966c:	1ad3      	subs	r3, r2, r3
 800966e:	2b02      	cmp	r3, #2
 8009670:	d901      	bls.n	8009676 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8009672:	2303      	movs	r3, #3
 8009674:	e243      	b.n	8009afe <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009676:	4b44      	ldr	r3, [pc, #272]	@ (8009788 <HAL_RCC_OscConfig+0x4dc>)
 8009678:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800967a:	f003 0302 	and.w	r3, r3, #2
 800967e:	2b00      	cmp	r3, #0
 8009680:	d0f0      	beq.n	8009664 <HAL_RCC_OscConfig+0x3b8>
 8009682:	e018      	b.n	80096b6 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009684:	4b40      	ldr	r3, [pc, #256]	@ (8009788 <HAL_RCC_OscConfig+0x4dc>)
 8009686:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009688:	4a3f      	ldr	r2, [pc, #252]	@ (8009788 <HAL_RCC_OscConfig+0x4dc>)
 800968a:	f023 0301 	bic.w	r3, r3, #1
 800968e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009690:	f7fb fefe 	bl	8005490 <HAL_GetTick>
 8009694:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009696:	e008      	b.n	80096aa <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009698:	f7fb fefa 	bl	8005490 <HAL_GetTick>
 800969c:	4602      	mov	r2, r0
 800969e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a0:	1ad3      	subs	r3, r2, r3
 80096a2:	2b02      	cmp	r3, #2
 80096a4:	d901      	bls.n	80096aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80096a6:	2303      	movs	r3, #3
 80096a8:	e229      	b.n	8009afe <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80096aa:	4b37      	ldr	r3, [pc, #220]	@ (8009788 <HAL_RCC_OscConfig+0x4dc>)
 80096ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096ae:	f003 0302 	and.w	r3, r3, #2
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d1f0      	bne.n	8009698 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f003 0320 	and.w	r3, r3, #32
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d036      	beq.n	8009730 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	699b      	ldr	r3, [r3, #24]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d019      	beq.n	80096fe <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80096ca:	4b2f      	ldr	r3, [pc, #188]	@ (8009788 <HAL_RCC_OscConfig+0x4dc>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4a2e      	ldr	r2, [pc, #184]	@ (8009788 <HAL_RCC_OscConfig+0x4dc>)
 80096d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80096d4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80096d6:	f7fb fedb 	bl	8005490 <HAL_GetTick>
 80096da:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80096dc:	e008      	b.n	80096f0 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80096de:	f7fb fed7 	bl	8005490 <HAL_GetTick>
 80096e2:	4602      	mov	r2, r0
 80096e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096e6:	1ad3      	subs	r3, r2, r3
 80096e8:	2b02      	cmp	r3, #2
 80096ea:	d901      	bls.n	80096f0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80096ec:	2303      	movs	r3, #3
 80096ee:	e206      	b.n	8009afe <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80096f0:	4b25      	ldr	r3, [pc, #148]	@ (8009788 <HAL_RCC_OscConfig+0x4dc>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d0f0      	beq.n	80096de <HAL_RCC_OscConfig+0x432>
 80096fc:	e018      	b.n	8009730 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80096fe:	4b22      	ldr	r3, [pc, #136]	@ (8009788 <HAL_RCC_OscConfig+0x4dc>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4a21      	ldr	r2, [pc, #132]	@ (8009788 <HAL_RCC_OscConfig+0x4dc>)
 8009704:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009708:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800970a:	f7fb fec1 	bl	8005490 <HAL_GetTick>
 800970e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009710:	e008      	b.n	8009724 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009712:	f7fb febd 	bl	8005490 <HAL_GetTick>
 8009716:	4602      	mov	r2, r0
 8009718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800971a:	1ad3      	subs	r3, r2, r3
 800971c:	2b02      	cmp	r3, #2
 800971e:	d901      	bls.n	8009724 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8009720:	2303      	movs	r3, #3
 8009722:	e1ec      	b.n	8009afe <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009724:	4b18      	ldr	r3, [pc, #96]	@ (8009788 <HAL_RCC_OscConfig+0x4dc>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800972c:	2b00      	cmp	r3, #0
 800972e:	d1f0      	bne.n	8009712 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f003 0304 	and.w	r3, r3, #4
 8009738:	2b00      	cmp	r3, #0
 800973a:	f000 80af 	beq.w	800989c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800973e:	4b13      	ldr	r3, [pc, #76]	@ (800978c <HAL_RCC_OscConfig+0x4e0>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a12      	ldr	r2, [pc, #72]	@ (800978c <HAL_RCC_OscConfig+0x4e0>)
 8009744:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009748:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800974a:	f7fb fea1 	bl	8005490 <HAL_GetTick>
 800974e:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009750:	e008      	b.n	8009764 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009752:	f7fb fe9d 	bl	8005490 <HAL_GetTick>
 8009756:	4602      	mov	r2, r0
 8009758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800975a:	1ad3      	subs	r3, r2, r3
 800975c:	2b64      	cmp	r3, #100	@ 0x64
 800975e:	d901      	bls.n	8009764 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8009760:	2303      	movs	r3, #3
 8009762:	e1cc      	b.n	8009afe <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009764:	4b09      	ldr	r3, [pc, #36]	@ (800978c <HAL_RCC_OscConfig+0x4e0>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800976c:	2b00      	cmp	r3, #0
 800976e:	d0f0      	beq.n	8009752 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	689b      	ldr	r3, [r3, #8]
 8009774:	2b01      	cmp	r3, #1
 8009776:	d10b      	bne.n	8009790 <HAL_RCC_OscConfig+0x4e4>
 8009778:	4b03      	ldr	r3, [pc, #12]	@ (8009788 <HAL_RCC_OscConfig+0x4dc>)
 800977a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800977c:	4a02      	ldr	r2, [pc, #8]	@ (8009788 <HAL_RCC_OscConfig+0x4dc>)
 800977e:	f043 0301 	orr.w	r3, r3, #1
 8009782:	6713      	str	r3, [r2, #112]	@ 0x70
 8009784:	e05b      	b.n	800983e <HAL_RCC_OscConfig+0x592>
 8009786:	bf00      	nop
 8009788:	58024400 	.word	0x58024400
 800978c:	58024800 	.word	0x58024800
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d112      	bne.n	80097be <HAL_RCC_OscConfig+0x512>
 8009798:	4b9d      	ldr	r3, [pc, #628]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 800979a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800979c:	4a9c      	ldr	r2, [pc, #624]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 800979e:	f023 0301 	bic.w	r3, r3, #1
 80097a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80097a4:	4b9a      	ldr	r3, [pc, #616]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 80097a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097a8:	4a99      	ldr	r2, [pc, #612]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 80097aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80097ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80097b0:	4b97      	ldr	r3, [pc, #604]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 80097b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097b4:	4a96      	ldr	r2, [pc, #600]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 80097b6:	f023 0304 	bic.w	r3, r3, #4
 80097ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80097bc:	e03f      	b.n	800983e <HAL_RCC_OscConfig+0x592>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	689b      	ldr	r3, [r3, #8]
 80097c2:	2b05      	cmp	r3, #5
 80097c4:	d112      	bne.n	80097ec <HAL_RCC_OscConfig+0x540>
 80097c6:	4b92      	ldr	r3, [pc, #584]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 80097c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097ca:	4a91      	ldr	r2, [pc, #580]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 80097cc:	f043 0304 	orr.w	r3, r3, #4
 80097d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80097d2:	4b8f      	ldr	r3, [pc, #572]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 80097d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097d6:	4a8e      	ldr	r2, [pc, #568]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 80097d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80097dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80097de:	4b8c      	ldr	r3, [pc, #560]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 80097e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097e2:	4a8b      	ldr	r2, [pc, #556]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 80097e4:	f043 0301 	orr.w	r3, r3, #1
 80097e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80097ea:	e028      	b.n	800983e <HAL_RCC_OscConfig+0x592>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	689b      	ldr	r3, [r3, #8]
 80097f0:	2b85      	cmp	r3, #133	@ 0x85
 80097f2:	d112      	bne.n	800981a <HAL_RCC_OscConfig+0x56e>
 80097f4:	4b86      	ldr	r3, [pc, #536]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 80097f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097f8:	4a85      	ldr	r2, [pc, #532]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 80097fa:	f043 0304 	orr.w	r3, r3, #4
 80097fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8009800:	4b83      	ldr	r3, [pc, #524]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 8009802:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009804:	4a82      	ldr	r2, [pc, #520]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 8009806:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800980a:	6713      	str	r3, [r2, #112]	@ 0x70
 800980c:	4b80      	ldr	r3, [pc, #512]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 800980e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009810:	4a7f      	ldr	r2, [pc, #508]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 8009812:	f043 0301 	orr.w	r3, r3, #1
 8009816:	6713      	str	r3, [r2, #112]	@ 0x70
 8009818:	e011      	b.n	800983e <HAL_RCC_OscConfig+0x592>
 800981a:	4b7d      	ldr	r3, [pc, #500]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 800981c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800981e:	4a7c      	ldr	r2, [pc, #496]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 8009820:	f023 0301 	bic.w	r3, r3, #1
 8009824:	6713      	str	r3, [r2, #112]	@ 0x70
 8009826:	4b7a      	ldr	r3, [pc, #488]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 8009828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800982a:	4a79      	ldr	r2, [pc, #484]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 800982c:	f023 0304 	bic.w	r3, r3, #4
 8009830:	6713      	str	r3, [r2, #112]	@ 0x70
 8009832:	4b77      	ldr	r3, [pc, #476]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 8009834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009836:	4a76      	ldr	r2, [pc, #472]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 8009838:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800983c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	689b      	ldr	r3, [r3, #8]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d015      	beq.n	8009872 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009846:	f7fb fe23 	bl	8005490 <HAL_GetTick>
 800984a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800984c:	e00a      	b.n	8009864 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800984e:	f7fb fe1f 	bl	8005490 <HAL_GetTick>
 8009852:	4602      	mov	r2, r0
 8009854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009856:	1ad3      	subs	r3, r2, r3
 8009858:	f241 3288 	movw	r2, #5000	@ 0x1388
 800985c:	4293      	cmp	r3, r2
 800985e:	d901      	bls.n	8009864 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8009860:	2303      	movs	r3, #3
 8009862:	e14c      	b.n	8009afe <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009864:	4b6a      	ldr	r3, [pc, #424]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 8009866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009868:	f003 0302 	and.w	r3, r3, #2
 800986c:	2b00      	cmp	r3, #0
 800986e:	d0ee      	beq.n	800984e <HAL_RCC_OscConfig+0x5a2>
 8009870:	e014      	b.n	800989c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009872:	f7fb fe0d 	bl	8005490 <HAL_GetTick>
 8009876:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009878:	e00a      	b.n	8009890 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800987a:	f7fb fe09 	bl	8005490 <HAL_GetTick>
 800987e:	4602      	mov	r2, r0
 8009880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009882:	1ad3      	subs	r3, r2, r3
 8009884:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009888:	4293      	cmp	r3, r2
 800988a:	d901      	bls.n	8009890 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800988c:	2303      	movs	r3, #3
 800988e:	e136      	b.n	8009afe <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009890:	4b5f      	ldr	r3, [pc, #380]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 8009892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009894:	f003 0302 	and.w	r3, r3, #2
 8009898:	2b00      	cmp	r3, #0
 800989a:	d1ee      	bne.n	800987a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	f000 812b 	beq.w	8009afc <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80098a6:	4b5a      	ldr	r3, [pc, #360]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 80098a8:	691b      	ldr	r3, [r3, #16]
 80098aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80098ae:	2b18      	cmp	r3, #24
 80098b0:	f000 80bb 	beq.w	8009a2a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098b8:	2b02      	cmp	r3, #2
 80098ba:	f040 8095 	bne.w	80099e8 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80098be:	4b54      	ldr	r3, [pc, #336]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a53      	ldr	r2, [pc, #332]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 80098c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80098c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098ca:	f7fb fde1 	bl	8005490 <HAL_GetTick>
 80098ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80098d0:	e008      	b.n	80098e4 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80098d2:	f7fb fddd 	bl	8005490 <HAL_GetTick>
 80098d6:	4602      	mov	r2, r0
 80098d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098da:	1ad3      	subs	r3, r2, r3
 80098dc:	2b02      	cmp	r3, #2
 80098de:	d901      	bls.n	80098e4 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80098e0:	2303      	movs	r3, #3
 80098e2:	e10c      	b.n	8009afe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80098e4:	4b4a      	ldr	r3, [pc, #296]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d1f0      	bne.n	80098d2 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80098f0:	4b47      	ldr	r3, [pc, #284]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 80098f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80098f4:	4b47      	ldr	r3, [pc, #284]	@ (8009a14 <HAL_RCC_OscConfig+0x768>)
 80098f6:	4013      	ands	r3, r2
 80098f8:	687a      	ldr	r2, [r7, #4]
 80098fa:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009900:	0112      	lsls	r2, r2, #4
 8009902:	430a      	orrs	r2, r1
 8009904:	4942      	ldr	r1, [pc, #264]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 8009906:	4313      	orrs	r3, r2
 8009908:	628b      	str	r3, [r1, #40]	@ 0x28
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800990e:	3b01      	subs	r3, #1
 8009910:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009918:	3b01      	subs	r3, #1
 800991a:	025b      	lsls	r3, r3, #9
 800991c:	b29b      	uxth	r3, r3
 800991e:	431a      	orrs	r2, r3
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009924:	3b01      	subs	r3, #1
 8009926:	041b      	lsls	r3, r3, #16
 8009928:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800992c:	431a      	orrs	r2, r3
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009932:	3b01      	subs	r3, #1
 8009934:	061b      	lsls	r3, r3, #24
 8009936:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800993a:	4935      	ldr	r1, [pc, #212]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 800993c:	4313      	orrs	r3, r2
 800993e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009940:	4b33      	ldr	r3, [pc, #204]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 8009942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009944:	4a32      	ldr	r2, [pc, #200]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 8009946:	f023 0301 	bic.w	r3, r3, #1
 800994a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800994c:	4b30      	ldr	r3, [pc, #192]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 800994e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009950:	4b31      	ldr	r3, [pc, #196]	@ (8009a18 <HAL_RCC_OscConfig+0x76c>)
 8009952:	4013      	ands	r3, r2
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009958:	00d2      	lsls	r2, r2, #3
 800995a:	492d      	ldr	r1, [pc, #180]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 800995c:	4313      	orrs	r3, r2
 800995e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009960:	4b2b      	ldr	r3, [pc, #172]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 8009962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009964:	f023 020c 	bic.w	r2, r3, #12
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800996c:	4928      	ldr	r1, [pc, #160]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 800996e:	4313      	orrs	r3, r2
 8009970:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009972:	4b27      	ldr	r3, [pc, #156]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 8009974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009976:	f023 0202 	bic.w	r2, r3, #2
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800997e:	4924      	ldr	r1, [pc, #144]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 8009980:	4313      	orrs	r3, r2
 8009982:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009984:	4b22      	ldr	r3, [pc, #136]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 8009986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009988:	4a21      	ldr	r2, [pc, #132]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 800998a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800998e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009990:	4b1f      	ldr	r3, [pc, #124]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 8009992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009994:	4a1e      	ldr	r2, [pc, #120]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 8009996:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800999a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800999c:	4b1c      	ldr	r3, [pc, #112]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 800999e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099a0:	4a1b      	ldr	r2, [pc, #108]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 80099a2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80099a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80099a8:	4b19      	ldr	r3, [pc, #100]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 80099aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099ac:	4a18      	ldr	r2, [pc, #96]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 80099ae:	f043 0301 	orr.w	r3, r3, #1
 80099b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80099b4:	4b16      	ldr	r3, [pc, #88]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a15      	ldr	r2, [pc, #84]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 80099ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80099be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099c0:	f7fb fd66 	bl	8005490 <HAL_GetTick>
 80099c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80099c6:	e008      	b.n	80099da <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80099c8:	f7fb fd62 	bl	8005490 <HAL_GetTick>
 80099cc:	4602      	mov	r2, r0
 80099ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099d0:	1ad3      	subs	r3, r2, r3
 80099d2:	2b02      	cmp	r3, #2
 80099d4:	d901      	bls.n	80099da <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80099d6:	2303      	movs	r3, #3
 80099d8:	e091      	b.n	8009afe <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80099da:	4b0d      	ldr	r3, [pc, #52]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d0f0      	beq.n	80099c8 <HAL_RCC_OscConfig+0x71c>
 80099e6:	e089      	b.n	8009afc <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80099e8:	4b09      	ldr	r3, [pc, #36]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a08      	ldr	r2, [pc, #32]	@ (8009a10 <HAL_RCC_OscConfig+0x764>)
 80099ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80099f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099f4:	f7fb fd4c 	bl	8005490 <HAL_GetTick>
 80099f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80099fa:	e00f      	b.n	8009a1c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80099fc:	f7fb fd48 	bl	8005490 <HAL_GetTick>
 8009a00:	4602      	mov	r2, r0
 8009a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a04:	1ad3      	subs	r3, r2, r3
 8009a06:	2b02      	cmp	r3, #2
 8009a08:	d908      	bls.n	8009a1c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8009a0a:	2303      	movs	r3, #3
 8009a0c:	e077      	b.n	8009afe <HAL_RCC_OscConfig+0x852>
 8009a0e:	bf00      	nop
 8009a10:	58024400 	.word	0x58024400
 8009a14:	fffffc0c 	.word	0xfffffc0c
 8009a18:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009a1c:	4b3a      	ldr	r3, [pc, #232]	@ (8009b08 <HAL_RCC_OscConfig+0x85c>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d1e9      	bne.n	80099fc <HAL_RCC_OscConfig+0x750>
 8009a28:	e068      	b.n	8009afc <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009a2a:	4b37      	ldr	r3, [pc, #220]	@ (8009b08 <HAL_RCC_OscConfig+0x85c>)
 8009a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a2e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009a30:	4b35      	ldr	r3, [pc, #212]	@ (8009b08 <HAL_RCC_OscConfig+0x85c>)
 8009a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a34:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a3a:	2b01      	cmp	r3, #1
 8009a3c:	d031      	beq.n	8009aa2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	f003 0203 	and.w	r2, r3, #3
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d12a      	bne.n	8009aa2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	091b      	lsrs	r3, r3, #4
 8009a50:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d122      	bne.n	8009aa2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a66:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d11a      	bne.n	8009aa2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	0a5b      	lsrs	r3, r3, #9
 8009a70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a78:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d111      	bne.n	8009aa2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	0c1b      	lsrs	r3, r3, #16
 8009a82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a8a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d108      	bne.n	8009aa2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	0e1b      	lsrs	r3, r3, #24
 8009a94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a9c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	d001      	beq.n	8009aa6 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e02b      	b.n	8009afe <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009aa6:	4b18      	ldr	r3, [pc, #96]	@ (8009b08 <HAL_RCC_OscConfig+0x85c>)
 8009aa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009aaa:	08db      	lsrs	r3, r3, #3
 8009aac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ab0:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ab6:	693a      	ldr	r2, [r7, #16]
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	d01f      	beq.n	8009afc <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009abc:	4b12      	ldr	r3, [pc, #72]	@ (8009b08 <HAL_RCC_OscConfig+0x85c>)
 8009abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ac0:	4a11      	ldr	r2, [pc, #68]	@ (8009b08 <HAL_RCC_OscConfig+0x85c>)
 8009ac2:	f023 0301 	bic.w	r3, r3, #1
 8009ac6:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009ac8:	f7fb fce2 	bl	8005490 <HAL_GetTick>
 8009acc:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009ace:	bf00      	nop
 8009ad0:	f7fb fcde 	bl	8005490 <HAL_GetTick>
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d0f9      	beq.n	8009ad0 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009adc:	4b0a      	ldr	r3, [pc, #40]	@ (8009b08 <HAL_RCC_OscConfig+0x85c>)
 8009ade:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8009b0c <HAL_RCC_OscConfig+0x860>)
 8009ae2:	4013      	ands	r3, r2
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009ae8:	00d2      	lsls	r2, r2, #3
 8009aea:	4907      	ldr	r1, [pc, #28]	@ (8009b08 <HAL_RCC_OscConfig+0x85c>)
 8009aec:	4313      	orrs	r3, r2
 8009aee:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009af0:	4b05      	ldr	r3, [pc, #20]	@ (8009b08 <HAL_RCC_OscConfig+0x85c>)
 8009af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009af4:	4a04      	ldr	r2, [pc, #16]	@ (8009b08 <HAL_RCC_OscConfig+0x85c>)
 8009af6:	f043 0301 	orr.w	r3, r3, #1
 8009afa:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009afc:	2300      	movs	r3, #0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3730      	adds	r7, #48	@ 0x30
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
 8009b06:	bf00      	nop
 8009b08:	58024400 	.word	0x58024400
 8009b0c:	ffff0007 	.word	0xffff0007

08009b10 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b086      	sub	sp, #24
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d101      	bne.n	8009b24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009b20:	2301      	movs	r3, #1
 8009b22:	e19c      	b.n	8009e5e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009b24:	4b8a      	ldr	r3, [pc, #552]	@ (8009d50 <HAL_RCC_ClockConfig+0x240>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f003 030f 	and.w	r3, r3, #15
 8009b2c:	683a      	ldr	r2, [r7, #0]
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d910      	bls.n	8009b54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b32:	4b87      	ldr	r3, [pc, #540]	@ (8009d50 <HAL_RCC_ClockConfig+0x240>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f023 020f 	bic.w	r2, r3, #15
 8009b3a:	4985      	ldr	r1, [pc, #532]	@ (8009d50 <HAL_RCC_ClockConfig+0x240>)
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b42:	4b83      	ldr	r3, [pc, #524]	@ (8009d50 <HAL_RCC_ClockConfig+0x240>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f003 030f 	and.w	r3, r3, #15
 8009b4a:	683a      	ldr	r2, [r7, #0]
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	d001      	beq.n	8009b54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009b50:	2301      	movs	r3, #1
 8009b52:	e184      	b.n	8009e5e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f003 0304 	and.w	r3, r3, #4
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d010      	beq.n	8009b82 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	691a      	ldr	r2, [r3, #16]
 8009b64:	4b7b      	ldr	r3, [pc, #492]	@ (8009d54 <HAL_RCC_ClockConfig+0x244>)
 8009b66:	699b      	ldr	r3, [r3, #24]
 8009b68:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d908      	bls.n	8009b82 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009b70:	4b78      	ldr	r3, [pc, #480]	@ (8009d54 <HAL_RCC_ClockConfig+0x244>)
 8009b72:	699b      	ldr	r3, [r3, #24]
 8009b74:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	691b      	ldr	r3, [r3, #16]
 8009b7c:	4975      	ldr	r1, [pc, #468]	@ (8009d54 <HAL_RCC_ClockConfig+0x244>)
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f003 0308 	and.w	r3, r3, #8
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d010      	beq.n	8009bb0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	695a      	ldr	r2, [r3, #20]
 8009b92:	4b70      	ldr	r3, [pc, #448]	@ (8009d54 <HAL_RCC_ClockConfig+0x244>)
 8009b94:	69db      	ldr	r3, [r3, #28]
 8009b96:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d908      	bls.n	8009bb0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009b9e:	4b6d      	ldr	r3, [pc, #436]	@ (8009d54 <HAL_RCC_ClockConfig+0x244>)
 8009ba0:	69db      	ldr	r3, [r3, #28]
 8009ba2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	695b      	ldr	r3, [r3, #20]
 8009baa:	496a      	ldr	r1, [pc, #424]	@ (8009d54 <HAL_RCC_ClockConfig+0x244>)
 8009bac:	4313      	orrs	r3, r2
 8009bae:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f003 0310 	and.w	r3, r3, #16
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d010      	beq.n	8009bde <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	699a      	ldr	r2, [r3, #24]
 8009bc0:	4b64      	ldr	r3, [pc, #400]	@ (8009d54 <HAL_RCC_ClockConfig+0x244>)
 8009bc2:	69db      	ldr	r3, [r3, #28]
 8009bc4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	d908      	bls.n	8009bde <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009bcc:	4b61      	ldr	r3, [pc, #388]	@ (8009d54 <HAL_RCC_ClockConfig+0x244>)
 8009bce:	69db      	ldr	r3, [r3, #28]
 8009bd0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	699b      	ldr	r3, [r3, #24]
 8009bd8:	495e      	ldr	r1, [pc, #376]	@ (8009d54 <HAL_RCC_ClockConfig+0x244>)
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f003 0320 	and.w	r3, r3, #32
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d010      	beq.n	8009c0c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	69da      	ldr	r2, [r3, #28]
 8009bee:	4b59      	ldr	r3, [pc, #356]	@ (8009d54 <HAL_RCC_ClockConfig+0x244>)
 8009bf0:	6a1b      	ldr	r3, [r3, #32]
 8009bf2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d908      	bls.n	8009c0c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009bfa:	4b56      	ldr	r3, [pc, #344]	@ (8009d54 <HAL_RCC_ClockConfig+0x244>)
 8009bfc:	6a1b      	ldr	r3, [r3, #32]
 8009bfe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	69db      	ldr	r3, [r3, #28]
 8009c06:	4953      	ldr	r1, [pc, #332]	@ (8009d54 <HAL_RCC_ClockConfig+0x244>)
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f003 0302 	and.w	r3, r3, #2
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d010      	beq.n	8009c3a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	68da      	ldr	r2, [r3, #12]
 8009c1c:	4b4d      	ldr	r3, [pc, #308]	@ (8009d54 <HAL_RCC_ClockConfig+0x244>)
 8009c1e:	699b      	ldr	r3, [r3, #24]
 8009c20:	f003 030f 	and.w	r3, r3, #15
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d908      	bls.n	8009c3a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009c28:	4b4a      	ldr	r3, [pc, #296]	@ (8009d54 <HAL_RCC_ClockConfig+0x244>)
 8009c2a:	699b      	ldr	r3, [r3, #24]
 8009c2c:	f023 020f 	bic.w	r2, r3, #15
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	4947      	ldr	r1, [pc, #284]	@ (8009d54 <HAL_RCC_ClockConfig+0x244>)
 8009c36:	4313      	orrs	r3, r2
 8009c38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f003 0301 	and.w	r3, r3, #1
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d055      	beq.n	8009cf2 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009c46:	4b43      	ldr	r3, [pc, #268]	@ (8009d54 <HAL_RCC_ClockConfig+0x244>)
 8009c48:	699b      	ldr	r3, [r3, #24]
 8009c4a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	689b      	ldr	r3, [r3, #8]
 8009c52:	4940      	ldr	r1, [pc, #256]	@ (8009d54 <HAL_RCC_ClockConfig+0x244>)
 8009c54:	4313      	orrs	r3, r2
 8009c56:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	2b02      	cmp	r3, #2
 8009c5e:	d107      	bne.n	8009c70 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009c60:	4b3c      	ldr	r3, [pc, #240]	@ (8009d54 <HAL_RCC_ClockConfig+0x244>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d121      	bne.n	8009cb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	e0f6      	b.n	8009e5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	2b03      	cmp	r3, #3
 8009c76:	d107      	bne.n	8009c88 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009c78:	4b36      	ldr	r3, [pc, #216]	@ (8009d54 <HAL_RCC_ClockConfig+0x244>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d115      	bne.n	8009cb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009c84:	2301      	movs	r3, #1
 8009c86:	e0ea      	b.n	8009e5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d107      	bne.n	8009ca0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009c90:	4b30      	ldr	r3, [pc, #192]	@ (8009d54 <HAL_RCC_ClockConfig+0x244>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d109      	bne.n	8009cb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	e0de      	b.n	8009e5e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009ca0:	4b2c      	ldr	r3, [pc, #176]	@ (8009d54 <HAL_RCC_ClockConfig+0x244>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f003 0304 	and.w	r3, r3, #4
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d101      	bne.n	8009cb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009cac:	2301      	movs	r3, #1
 8009cae:	e0d6      	b.n	8009e5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009cb0:	4b28      	ldr	r3, [pc, #160]	@ (8009d54 <HAL_RCC_ClockConfig+0x244>)
 8009cb2:	691b      	ldr	r3, [r3, #16]
 8009cb4:	f023 0207 	bic.w	r2, r3, #7
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	4925      	ldr	r1, [pc, #148]	@ (8009d54 <HAL_RCC_ClockConfig+0x244>)
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009cc2:	f7fb fbe5 	bl	8005490 <HAL_GetTick>
 8009cc6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009cc8:	e00a      	b.n	8009ce0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009cca:	f7fb fbe1 	bl	8005490 <HAL_GetTick>
 8009cce:	4602      	mov	r2, r0
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	1ad3      	subs	r3, r2, r3
 8009cd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d901      	bls.n	8009ce0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009cdc:	2303      	movs	r3, #3
 8009cde:	e0be      	b.n	8009e5e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009ce0:	4b1c      	ldr	r3, [pc, #112]	@ (8009d54 <HAL_RCC_ClockConfig+0x244>)
 8009ce2:	691b      	ldr	r3, [r3, #16]
 8009ce4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	685b      	ldr	r3, [r3, #4]
 8009cec:	00db      	lsls	r3, r3, #3
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d1eb      	bne.n	8009cca <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f003 0302 	and.w	r3, r3, #2
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d010      	beq.n	8009d20 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	68da      	ldr	r2, [r3, #12]
 8009d02:	4b14      	ldr	r3, [pc, #80]	@ (8009d54 <HAL_RCC_ClockConfig+0x244>)
 8009d04:	699b      	ldr	r3, [r3, #24]
 8009d06:	f003 030f 	and.w	r3, r3, #15
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	d208      	bcs.n	8009d20 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009d0e:	4b11      	ldr	r3, [pc, #68]	@ (8009d54 <HAL_RCC_ClockConfig+0x244>)
 8009d10:	699b      	ldr	r3, [r3, #24]
 8009d12:	f023 020f 	bic.w	r2, r3, #15
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	490e      	ldr	r1, [pc, #56]	@ (8009d54 <HAL_RCC_ClockConfig+0x244>)
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009d20:	4b0b      	ldr	r3, [pc, #44]	@ (8009d50 <HAL_RCC_ClockConfig+0x240>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f003 030f 	and.w	r3, r3, #15
 8009d28:	683a      	ldr	r2, [r7, #0]
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d214      	bcs.n	8009d58 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d2e:	4b08      	ldr	r3, [pc, #32]	@ (8009d50 <HAL_RCC_ClockConfig+0x240>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f023 020f 	bic.w	r2, r3, #15
 8009d36:	4906      	ldr	r1, [pc, #24]	@ (8009d50 <HAL_RCC_ClockConfig+0x240>)
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d3e:	4b04      	ldr	r3, [pc, #16]	@ (8009d50 <HAL_RCC_ClockConfig+0x240>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f003 030f 	and.w	r3, r3, #15
 8009d46:	683a      	ldr	r2, [r7, #0]
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d005      	beq.n	8009d58 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	e086      	b.n	8009e5e <HAL_RCC_ClockConfig+0x34e>
 8009d50:	52002000 	.word	0x52002000
 8009d54:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f003 0304 	and.w	r3, r3, #4
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d010      	beq.n	8009d86 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	691a      	ldr	r2, [r3, #16]
 8009d68:	4b3f      	ldr	r3, [pc, #252]	@ (8009e68 <HAL_RCC_ClockConfig+0x358>)
 8009d6a:	699b      	ldr	r3, [r3, #24]
 8009d6c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009d70:	429a      	cmp	r2, r3
 8009d72:	d208      	bcs.n	8009d86 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009d74:	4b3c      	ldr	r3, [pc, #240]	@ (8009e68 <HAL_RCC_ClockConfig+0x358>)
 8009d76:	699b      	ldr	r3, [r3, #24]
 8009d78:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	691b      	ldr	r3, [r3, #16]
 8009d80:	4939      	ldr	r1, [pc, #228]	@ (8009e68 <HAL_RCC_ClockConfig+0x358>)
 8009d82:	4313      	orrs	r3, r2
 8009d84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f003 0308 	and.w	r3, r3, #8
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d010      	beq.n	8009db4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	695a      	ldr	r2, [r3, #20]
 8009d96:	4b34      	ldr	r3, [pc, #208]	@ (8009e68 <HAL_RCC_ClockConfig+0x358>)
 8009d98:	69db      	ldr	r3, [r3, #28]
 8009d9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d208      	bcs.n	8009db4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009da2:	4b31      	ldr	r3, [pc, #196]	@ (8009e68 <HAL_RCC_ClockConfig+0x358>)
 8009da4:	69db      	ldr	r3, [r3, #28]
 8009da6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	695b      	ldr	r3, [r3, #20]
 8009dae:	492e      	ldr	r1, [pc, #184]	@ (8009e68 <HAL_RCC_ClockConfig+0x358>)
 8009db0:	4313      	orrs	r3, r2
 8009db2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f003 0310 	and.w	r3, r3, #16
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d010      	beq.n	8009de2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	699a      	ldr	r2, [r3, #24]
 8009dc4:	4b28      	ldr	r3, [pc, #160]	@ (8009e68 <HAL_RCC_ClockConfig+0x358>)
 8009dc6:	69db      	ldr	r3, [r3, #28]
 8009dc8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d208      	bcs.n	8009de2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009dd0:	4b25      	ldr	r3, [pc, #148]	@ (8009e68 <HAL_RCC_ClockConfig+0x358>)
 8009dd2:	69db      	ldr	r3, [r3, #28]
 8009dd4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	699b      	ldr	r3, [r3, #24]
 8009ddc:	4922      	ldr	r1, [pc, #136]	@ (8009e68 <HAL_RCC_ClockConfig+0x358>)
 8009dde:	4313      	orrs	r3, r2
 8009de0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f003 0320 	and.w	r3, r3, #32
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d010      	beq.n	8009e10 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	69da      	ldr	r2, [r3, #28]
 8009df2:	4b1d      	ldr	r3, [pc, #116]	@ (8009e68 <HAL_RCC_ClockConfig+0x358>)
 8009df4:	6a1b      	ldr	r3, [r3, #32]
 8009df6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d208      	bcs.n	8009e10 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8009e68 <HAL_RCC_ClockConfig+0x358>)
 8009e00:	6a1b      	ldr	r3, [r3, #32]
 8009e02:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	69db      	ldr	r3, [r3, #28]
 8009e0a:	4917      	ldr	r1, [pc, #92]	@ (8009e68 <HAL_RCC_ClockConfig+0x358>)
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8009e10:	f000 f834 	bl	8009e7c <HAL_RCC_GetSysClockFreq>
 8009e14:	4602      	mov	r2, r0
 8009e16:	4b14      	ldr	r3, [pc, #80]	@ (8009e68 <HAL_RCC_ClockConfig+0x358>)
 8009e18:	699b      	ldr	r3, [r3, #24]
 8009e1a:	0a1b      	lsrs	r3, r3, #8
 8009e1c:	f003 030f 	and.w	r3, r3, #15
 8009e20:	4912      	ldr	r1, [pc, #72]	@ (8009e6c <HAL_RCC_ClockConfig+0x35c>)
 8009e22:	5ccb      	ldrb	r3, [r1, r3]
 8009e24:	f003 031f 	and.w	r3, r3, #31
 8009e28:	fa22 f303 	lsr.w	r3, r2, r3
 8009e2c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8009e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8009e68 <HAL_RCC_ClockConfig+0x358>)
 8009e30:	699b      	ldr	r3, [r3, #24]
 8009e32:	f003 030f 	and.w	r3, r3, #15
 8009e36:	4a0d      	ldr	r2, [pc, #52]	@ (8009e6c <HAL_RCC_ClockConfig+0x35c>)
 8009e38:	5cd3      	ldrb	r3, [r2, r3]
 8009e3a:	f003 031f 	and.w	r3, r3, #31
 8009e3e:	693a      	ldr	r2, [r7, #16]
 8009e40:	fa22 f303 	lsr.w	r3, r2, r3
 8009e44:	4a0a      	ldr	r2, [pc, #40]	@ (8009e70 <HAL_RCC_ClockConfig+0x360>)
 8009e46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009e48:	4a0a      	ldr	r2, [pc, #40]	@ (8009e74 <HAL_RCC_ClockConfig+0x364>)
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8009e78 <HAL_RCC_ClockConfig+0x368>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4618      	mov	r0, r3
 8009e54:	f7f8 f936 	bl	80020c4 <HAL_InitTick>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3718      	adds	r7, #24
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}
 8009e66:	bf00      	nop
 8009e68:	58024400 	.word	0x58024400
 8009e6c:	080189d4 	.word	0x080189d4
 8009e70:	24000004 	.word	0x24000004
 8009e74:	24000000 	.word	0x24000000
 8009e78:	240000a4 	.word	0x240000a4

08009e7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b089      	sub	sp, #36	@ 0x24
 8009e80:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009e82:	4bb3      	ldr	r3, [pc, #716]	@ (800a150 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e84:	691b      	ldr	r3, [r3, #16]
 8009e86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009e8a:	2b18      	cmp	r3, #24
 8009e8c:	f200 8155 	bhi.w	800a13a <HAL_RCC_GetSysClockFreq+0x2be>
 8009e90:	a201      	add	r2, pc, #4	@ (adr r2, 8009e98 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e96:	bf00      	nop
 8009e98:	08009efd 	.word	0x08009efd
 8009e9c:	0800a13b 	.word	0x0800a13b
 8009ea0:	0800a13b 	.word	0x0800a13b
 8009ea4:	0800a13b 	.word	0x0800a13b
 8009ea8:	0800a13b 	.word	0x0800a13b
 8009eac:	0800a13b 	.word	0x0800a13b
 8009eb0:	0800a13b 	.word	0x0800a13b
 8009eb4:	0800a13b 	.word	0x0800a13b
 8009eb8:	08009f23 	.word	0x08009f23
 8009ebc:	0800a13b 	.word	0x0800a13b
 8009ec0:	0800a13b 	.word	0x0800a13b
 8009ec4:	0800a13b 	.word	0x0800a13b
 8009ec8:	0800a13b 	.word	0x0800a13b
 8009ecc:	0800a13b 	.word	0x0800a13b
 8009ed0:	0800a13b 	.word	0x0800a13b
 8009ed4:	0800a13b 	.word	0x0800a13b
 8009ed8:	08009f29 	.word	0x08009f29
 8009edc:	0800a13b 	.word	0x0800a13b
 8009ee0:	0800a13b 	.word	0x0800a13b
 8009ee4:	0800a13b 	.word	0x0800a13b
 8009ee8:	0800a13b 	.word	0x0800a13b
 8009eec:	0800a13b 	.word	0x0800a13b
 8009ef0:	0800a13b 	.word	0x0800a13b
 8009ef4:	0800a13b 	.word	0x0800a13b
 8009ef8:	08009f2f 	.word	0x08009f2f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009efc:	4b94      	ldr	r3, [pc, #592]	@ (800a150 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f003 0320 	and.w	r3, r3, #32
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d009      	beq.n	8009f1c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f08:	4b91      	ldr	r3, [pc, #580]	@ (800a150 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	08db      	lsrs	r3, r3, #3
 8009f0e:	f003 0303 	and.w	r3, r3, #3
 8009f12:	4a90      	ldr	r2, [pc, #576]	@ (800a154 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009f14:	fa22 f303 	lsr.w	r3, r2, r3
 8009f18:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009f1a:	e111      	b.n	800a140 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009f1c:	4b8d      	ldr	r3, [pc, #564]	@ (800a154 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009f1e:	61bb      	str	r3, [r7, #24]
      break;
 8009f20:	e10e      	b.n	800a140 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009f22:	4b8d      	ldr	r3, [pc, #564]	@ (800a158 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009f24:	61bb      	str	r3, [r7, #24]
      break;
 8009f26:	e10b      	b.n	800a140 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009f28:	4b8c      	ldr	r3, [pc, #560]	@ (800a15c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009f2a:	61bb      	str	r3, [r7, #24]
      break;
 8009f2c:	e108      	b.n	800a140 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f2e:	4b88      	ldr	r3, [pc, #544]	@ (800a150 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f32:	f003 0303 	and.w	r3, r3, #3
 8009f36:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009f38:	4b85      	ldr	r3, [pc, #532]	@ (800a150 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f3c:	091b      	lsrs	r3, r3, #4
 8009f3e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009f42:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009f44:	4b82      	ldr	r3, [pc, #520]	@ (800a150 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f48:	f003 0301 	and.w	r3, r3, #1
 8009f4c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009f4e:	4b80      	ldr	r3, [pc, #512]	@ (800a150 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f52:	08db      	lsrs	r3, r3, #3
 8009f54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f58:	68fa      	ldr	r2, [r7, #12]
 8009f5a:	fb02 f303 	mul.w	r3, r2, r3
 8009f5e:	ee07 3a90 	vmov	s15, r3
 8009f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f66:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	f000 80e1 	beq.w	800a134 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	2b02      	cmp	r3, #2
 8009f76:	f000 8083 	beq.w	800a080 <HAL_RCC_GetSysClockFreq+0x204>
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	2b02      	cmp	r3, #2
 8009f7e:	f200 80a1 	bhi.w	800a0c4 <HAL_RCC_GetSysClockFreq+0x248>
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d003      	beq.n	8009f90 <HAL_RCC_GetSysClockFreq+0x114>
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d056      	beq.n	800a03c <HAL_RCC_GetSysClockFreq+0x1c0>
 8009f8e:	e099      	b.n	800a0c4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f90:	4b6f      	ldr	r3, [pc, #444]	@ (800a150 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f003 0320 	and.w	r3, r3, #32
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d02d      	beq.n	8009ff8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f9c:	4b6c      	ldr	r3, [pc, #432]	@ (800a150 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	08db      	lsrs	r3, r3, #3
 8009fa2:	f003 0303 	and.w	r3, r3, #3
 8009fa6:	4a6b      	ldr	r2, [pc, #428]	@ (800a154 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8009fac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	ee07 3a90 	vmov	s15, r3
 8009fb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	ee07 3a90 	vmov	s15, r3
 8009fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fc6:	4b62      	ldr	r3, [pc, #392]	@ (800a150 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fce:	ee07 3a90 	vmov	s15, r3
 8009fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8009fda:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800a160 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fe6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ff2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009ff6:	e087      	b.n	800a108 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	ee07 3a90 	vmov	s15, r3
 8009ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a002:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800a164 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a00a:	4b51      	ldr	r3, [pc, #324]	@ (800a150 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a00c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a00e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a012:	ee07 3a90 	vmov	s15, r3
 800a016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a01a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a01e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800a160 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a02a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a02e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a032:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a036:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a03a:	e065      	b.n	800a108 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	ee07 3a90 	vmov	s15, r3
 800a042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a046:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800a168 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a04a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a04e:	4b40      	ldr	r3, [pc, #256]	@ (800a150 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a056:	ee07 3a90 	vmov	s15, r3
 800a05a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a05e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a062:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800a160 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a06a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a06e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a07a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a07e:	e043      	b.n	800a108 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	ee07 3a90 	vmov	s15, r3
 800a086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a08a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800a16c <HAL_RCC_GetSysClockFreq+0x2f0>
 800a08e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a092:	4b2f      	ldr	r3, [pc, #188]	@ (800a150 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a09a:	ee07 3a90 	vmov	s15, r3
 800a09e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0a2:	ed97 6a02 	vldr	s12, [r7, #8]
 800a0a6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800a160 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a0aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a0c2:	e021      	b.n	800a108 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	ee07 3a90 	vmov	s15, r3
 800a0ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0ce:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800a168 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a0d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0d6:	4b1e      	ldr	r3, [pc, #120]	@ (800a150 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a0d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0de:	ee07 3a90 	vmov	s15, r3
 800a0e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0e6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a0ea:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800a160 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a0ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a102:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a106:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a108:	4b11      	ldr	r3, [pc, #68]	@ (800a150 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a10a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a10c:	0a5b      	lsrs	r3, r3, #9
 800a10e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a112:	3301      	adds	r3, #1
 800a114:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	ee07 3a90 	vmov	s15, r3
 800a11c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a120:	edd7 6a07 	vldr	s13, [r7, #28]
 800a124:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a128:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a12c:	ee17 3a90 	vmov	r3, s15
 800a130:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a132:	e005      	b.n	800a140 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a134:	2300      	movs	r3, #0
 800a136:	61bb      	str	r3, [r7, #24]
      break;
 800a138:	e002      	b.n	800a140 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a13a:	4b07      	ldr	r3, [pc, #28]	@ (800a158 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a13c:	61bb      	str	r3, [r7, #24]
      break;
 800a13e:	bf00      	nop
  }

  return sysclockfreq;
 800a140:	69bb      	ldr	r3, [r7, #24]
}
 800a142:	4618      	mov	r0, r3
 800a144:	3724      	adds	r7, #36	@ 0x24
 800a146:	46bd      	mov	sp, r7
 800a148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14c:	4770      	bx	lr
 800a14e:	bf00      	nop
 800a150:	58024400 	.word	0x58024400
 800a154:	03d09000 	.word	0x03d09000
 800a158:	003d0900 	.word	0x003d0900
 800a15c:	016e3600 	.word	0x016e3600
 800a160:	46000000 	.word	0x46000000
 800a164:	4c742400 	.word	0x4c742400
 800a168:	4a742400 	.word	0x4a742400
 800a16c:	4bb71b00 	.word	0x4bb71b00

0800a170 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b082      	sub	sp, #8
 800a174:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800a176:	f7ff fe81 	bl	8009e7c <HAL_RCC_GetSysClockFreq>
 800a17a:	4602      	mov	r2, r0
 800a17c:	4b10      	ldr	r3, [pc, #64]	@ (800a1c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800a17e:	699b      	ldr	r3, [r3, #24]
 800a180:	0a1b      	lsrs	r3, r3, #8
 800a182:	f003 030f 	and.w	r3, r3, #15
 800a186:	490f      	ldr	r1, [pc, #60]	@ (800a1c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800a188:	5ccb      	ldrb	r3, [r1, r3]
 800a18a:	f003 031f 	and.w	r3, r3, #31
 800a18e:	fa22 f303 	lsr.w	r3, r2, r3
 800a192:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800a194:	4b0a      	ldr	r3, [pc, #40]	@ (800a1c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800a196:	699b      	ldr	r3, [r3, #24]
 800a198:	f003 030f 	and.w	r3, r3, #15
 800a19c:	4a09      	ldr	r2, [pc, #36]	@ (800a1c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800a19e:	5cd3      	ldrb	r3, [r2, r3]
 800a1a0:	f003 031f 	and.w	r3, r3, #31
 800a1a4:	687a      	ldr	r2, [r7, #4]
 800a1a6:	fa22 f303 	lsr.w	r3, r2, r3
 800a1aa:	4a07      	ldr	r2, [pc, #28]	@ (800a1c8 <HAL_RCC_GetHCLKFreq+0x58>)
 800a1ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a1ae:	4a07      	ldr	r2, [pc, #28]	@ (800a1cc <HAL_RCC_GetHCLKFreq+0x5c>)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a1b4:	4b04      	ldr	r3, [pc, #16]	@ (800a1c8 <HAL_RCC_GetHCLKFreq+0x58>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3708      	adds	r7, #8
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}
 800a1c0:	58024400 	.word	0x58024400
 800a1c4:	080189d4 	.word	0x080189d4
 800a1c8:	24000004 	.word	0x24000004
 800a1cc:	24000000 	.word	0x24000000

0800a1d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800a1d4:	f7ff ffcc 	bl	800a170 <HAL_RCC_GetHCLKFreq>
 800a1d8:	4602      	mov	r2, r0
 800a1da:	4b06      	ldr	r3, [pc, #24]	@ (800a1f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a1dc:	69db      	ldr	r3, [r3, #28]
 800a1de:	091b      	lsrs	r3, r3, #4
 800a1e0:	f003 0307 	and.w	r3, r3, #7
 800a1e4:	4904      	ldr	r1, [pc, #16]	@ (800a1f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a1e6:	5ccb      	ldrb	r3, [r1, r3]
 800a1e8:	f003 031f 	and.w	r3, r3, #31
 800a1ec:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	bd80      	pop	{r7, pc}
 800a1f4:	58024400 	.word	0x58024400
 800a1f8:	080189d4 	.word	0x080189d4

0800a1fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800a200:	f7ff ffb6 	bl	800a170 <HAL_RCC_GetHCLKFreq>
 800a204:	4602      	mov	r2, r0
 800a206:	4b06      	ldr	r3, [pc, #24]	@ (800a220 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a208:	69db      	ldr	r3, [r3, #28]
 800a20a:	0a1b      	lsrs	r3, r3, #8
 800a20c:	f003 0307 	and.w	r3, r3, #7
 800a210:	4904      	ldr	r1, [pc, #16]	@ (800a224 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a212:	5ccb      	ldrb	r3, [r1, r3]
 800a214:	f003 031f 	and.w	r3, r3, #31
 800a218:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	bd80      	pop	{r7, pc}
 800a220:	58024400 	.word	0x58024400
 800a224:	080189d4 	.word	0x080189d4

0800a228 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a228:	b480      	push	{r7}
 800a22a:	b083      	sub	sp, #12
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	223f      	movs	r2, #63	@ 0x3f
 800a236:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a238:	4b1a      	ldr	r3, [pc, #104]	@ (800a2a4 <HAL_RCC_GetClockConfig+0x7c>)
 800a23a:	691b      	ldr	r3, [r3, #16]
 800a23c:	f003 0207 	and.w	r2, r3, #7
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 800a244:	4b17      	ldr	r3, [pc, #92]	@ (800a2a4 <HAL_RCC_GetClockConfig+0x7c>)
 800a246:	699b      	ldr	r3, [r3, #24]
 800a248:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 800a250:	4b14      	ldr	r3, [pc, #80]	@ (800a2a4 <HAL_RCC_GetClockConfig+0x7c>)
 800a252:	699b      	ldr	r3, [r3, #24]
 800a254:	f003 020f 	and.w	r2, r3, #15
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 800a25c:	4b11      	ldr	r3, [pc, #68]	@ (800a2a4 <HAL_RCC_GetClockConfig+0x7c>)
 800a25e:	699b      	ldr	r3, [r3, #24]
 800a260:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 800a268:	4b0e      	ldr	r3, [pc, #56]	@ (800a2a4 <HAL_RCC_GetClockConfig+0x7c>)
 800a26a:	69db      	ldr	r3, [r3, #28]
 800a26c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 800a274:	4b0b      	ldr	r3, [pc, #44]	@ (800a2a4 <HAL_RCC_GetClockConfig+0x7c>)
 800a276:	69db      	ldr	r3, [r3, #28]
 800a278:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 800a280:	4b08      	ldr	r3, [pc, #32]	@ (800a2a4 <HAL_RCC_GetClockConfig+0x7c>)
 800a282:	6a1b      	ldr	r3, [r3, #32]
 800a284:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a28c:	4b06      	ldr	r3, [pc, #24]	@ (800a2a8 <HAL_RCC_GetClockConfig+0x80>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f003 020f 	and.w	r2, r3, #15
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	601a      	str	r2, [r3, #0]
}
 800a298:	bf00      	nop
 800a29a:	370c      	adds	r7, #12
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr
 800a2a4:	58024400 	.word	0x58024400
 800a2a8:	52002000 	.word	0x52002000

0800a2ac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a2ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a2b0:	b0c8      	sub	sp, #288	@ 0x120
 800a2b2:	af00      	add	r7, sp, #0
 800a2b4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a2be:	2300      	movs	r3, #0
 800a2c0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a2c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2cc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800a2d0:	2500      	movs	r5, #0
 800a2d2:	ea54 0305 	orrs.w	r3, r4, r5
 800a2d6:	d049      	beq.n	800a36c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a2d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2de:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a2e2:	d02f      	beq.n	800a344 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a2e4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a2e8:	d828      	bhi.n	800a33c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a2ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a2ee:	d01a      	beq.n	800a326 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a2f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a2f4:	d822      	bhi.n	800a33c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d003      	beq.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a2fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a2fe:	d007      	beq.n	800a310 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a300:	e01c      	b.n	800a33c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a302:	4ba7      	ldr	r3, [pc, #668]	@ (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a306:	4aa6      	ldr	r2, [pc, #664]	@ (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a308:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a30c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a30e:	e01a      	b.n	800a346 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a310:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a314:	3308      	adds	r3, #8
 800a316:	2102      	movs	r1, #2
 800a318:	4618      	mov	r0, r3
 800a31a:	f001 fc43 	bl	800bba4 <RCCEx_PLL2_Config>
 800a31e:	4603      	mov	r3, r0
 800a320:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a324:	e00f      	b.n	800a346 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a326:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a32a:	3328      	adds	r3, #40	@ 0x28
 800a32c:	2102      	movs	r1, #2
 800a32e:	4618      	mov	r0, r3
 800a330:	f001 fcea 	bl	800bd08 <RCCEx_PLL3_Config>
 800a334:	4603      	mov	r3, r0
 800a336:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a33a:	e004      	b.n	800a346 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a33c:	2301      	movs	r3, #1
 800a33e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a342:	e000      	b.n	800a346 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a344:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a346:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d10a      	bne.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a34e:	4b94      	ldr	r3, [pc, #592]	@ (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a350:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a352:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a356:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a35a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a35c:	4a90      	ldr	r2, [pc, #576]	@ (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a35e:	430b      	orrs	r3, r1
 800a360:	6513      	str	r3, [r2, #80]	@ 0x50
 800a362:	e003      	b.n	800a36c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a364:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a368:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a36c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a374:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800a378:	f04f 0900 	mov.w	r9, #0
 800a37c:	ea58 0309 	orrs.w	r3, r8, r9
 800a380:	d047      	beq.n	800a412 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a382:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a388:	2b04      	cmp	r3, #4
 800a38a:	d82a      	bhi.n	800a3e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a38c:	a201      	add	r2, pc, #4	@ (adr r2, 800a394 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a38e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a392:	bf00      	nop
 800a394:	0800a3a9 	.word	0x0800a3a9
 800a398:	0800a3b7 	.word	0x0800a3b7
 800a39c:	0800a3cd 	.word	0x0800a3cd
 800a3a0:	0800a3eb 	.word	0x0800a3eb
 800a3a4:	0800a3eb 	.word	0x0800a3eb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3a8:	4b7d      	ldr	r3, [pc, #500]	@ (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a3aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3ac:	4a7c      	ldr	r2, [pc, #496]	@ (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a3ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a3b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a3b4:	e01a      	b.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a3b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3ba:	3308      	adds	r3, #8
 800a3bc:	2100      	movs	r1, #0
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f001 fbf0 	bl	800bba4 <RCCEx_PLL2_Config>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a3ca:	e00f      	b.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a3cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3d0:	3328      	adds	r3, #40	@ 0x28
 800a3d2:	2100      	movs	r1, #0
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f001 fc97 	bl	800bd08 <RCCEx_PLL3_Config>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a3e0:	e004      	b.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a3e8:	e000      	b.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a3ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d10a      	bne.n	800a40a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a3f4:	4b6a      	ldr	r3, [pc, #424]	@ (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a3f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3f8:	f023 0107 	bic.w	r1, r3, #7
 800a3fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a402:	4a67      	ldr	r2, [pc, #412]	@ (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a404:	430b      	orrs	r3, r1
 800a406:	6513      	str	r3, [r2, #80]	@ 0x50
 800a408:	e003      	b.n	800a412 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a40a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a40e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800a412:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800a41e:	f04f 0b00 	mov.w	fp, #0
 800a422:	ea5a 030b 	orrs.w	r3, sl, fp
 800a426:	d054      	beq.n	800a4d2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800a428:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a42c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a42e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800a432:	d036      	beq.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800a434:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800a438:	d82f      	bhi.n	800a49a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a43a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a43e:	d032      	beq.n	800a4a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a440:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a444:	d829      	bhi.n	800a49a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a446:	2bc0      	cmp	r3, #192	@ 0xc0
 800a448:	d02f      	beq.n	800a4aa <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800a44a:	2bc0      	cmp	r3, #192	@ 0xc0
 800a44c:	d825      	bhi.n	800a49a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a44e:	2b80      	cmp	r3, #128	@ 0x80
 800a450:	d018      	beq.n	800a484 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800a452:	2b80      	cmp	r3, #128	@ 0x80
 800a454:	d821      	bhi.n	800a49a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a456:	2b00      	cmp	r3, #0
 800a458:	d002      	beq.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800a45a:	2b40      	cmp	r3, #64	@ 0x40
 800a45c:	d007      	beq.n	800a46e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800a45e:	e01c      	b.n	800a49a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a460:	4b4f      	ldr	r3, [pc, #316]	@ (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a464:	4a4e      	ldr	r2, [pc, #312]	@ (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a466:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a46a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800a46c:	e01e      	b.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a46e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a472:	3308      	adds	r3, #8
 800a474:	2100      	movs	r1, #0
 800a476:	4618      	mov	r0, r3
 800a478:	f001 fb94 	bl	800bba4 <RCCEx_PLL2_Config>
 800a47c:	4603      	mov	r3, r0
 800a47e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800a482:	e013      	b.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a484:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a488:	3328      	adds	r3, #40	@ 0x28
 800a48a:	2100      	movs	r1, #0
 800a48c:	4618      	mov	r0, r3
 800a48e:	f001 fc3b 	bl	800bd08 <RCCEx_PLL3_Config>
 800a492:	4603      	mov	r3, r0
 800a494:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800a498:	e008      	b.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a49a:	2301      	movs	r3, #1
 800a49c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a4a0:	e004      	b.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800a4a2:	bf00      	nop
 800a4a4:	e002      	b.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800a4a6:	bf00      	nop
 800a4a8:	e000      	b.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800a4aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d10a      	bne.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800a4b4:	4b3a      	ldr	r3, [pc, #232]	@ (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a4b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4b8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800a4bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a4c2:	4a37      	ldr	r2, [pc, #220]	@ (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a4c4:	430b      	orrs	r3, r1
 800a4c6:	6513      	str	r3, [r2, #80]	@ 0x50
 800a4c8:	e003      	b.n	800a4d2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4ca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a4ce:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800a4d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4da:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800a4de:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800a4e8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800a4ec:	460b      	mov	r3, r1
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	d05c      	beq.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800a4f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4f8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800a4fc:	d03b      	beq.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a4fe:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800a502:	d834      	bhi.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800a504:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a508:	d037      	beq.n	800a57a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800a50a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a50e:	d82e      	bhi.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800a510:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a514:	d033      	beq.n	800a57e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a516:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a51a:	d828      	bhi.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800a51c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a520:	d01a      	beq.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800a522:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a526:	d822      	bhi.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d003      	beq.n	800a534 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800a52c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a530:	d007      	beq.n	800a542 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800a532:	e01c      	b.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a534:	4b1a      	ldr	r3, [pc, #104]	@ (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a538:	4a19      	ldr	r2, [pc, #100]	@ (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a53a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a53e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800a540:	e01e      	b.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a542:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a546:	3308      	adds	r3, #8
 800a548:	2100      	movs	r1, #0
 800a54a:	4618      	mov	r0, r3
 800a54c:	f001 fb2a 	bl	800bba4 <RCCEx_PLL2_Config>
 800a550:	4603      	mov	r3, r0
 800a552:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800a556:	e013      	b.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a558:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a55c:	3328      	adds	r3, #40	@ 0x28
 800a55e:	2100      	movs	r1, #0
 800a560:	4618      	mov	r0, r3
 800a562:	f001 fbd1 	bl	800bd08 <RCCEx_PLL3_Config>
 800a566:	4603      	mov	r3, r0
 800a568:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800a56c:	e008      	b.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a56e:	2301      	movs	r3, #1
 800a570:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a574:	e004      	b.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800a576:	bf00      	nop
 800a578:	e002      	b.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800a57a:	bf00      	nop
 800a57c:	e000      	b.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800a57e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a580:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a584:	2b00      	cmp	r3, #0
 800a586:	d10d      	bne.n	800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800a588:	4b05      	ldr	r3, [pc, #20]	@ (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a58a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a58c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800a590:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a594:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a596:	4a02      	ldr	r2, [pc, #8]	@ (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a598:	430b      	orrs	r3, r1
 800a59a:	6513      	str	r3, [r2, #80]	@ 0x50
 800a59c:	e006      	b.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0x300>
 800a59e:	bf00      	nop
 800a5a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a5a8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a5ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800a5b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a5bc:	2300      	movs	r3, #0
 800a5be:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a5c2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	d03a      	beq.n	800a642 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800a5cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5d2:	2b30      	cmp	r3, #48	@ 0x30
 800a5d4:	d01f      	beq.n	800a616 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800a5d6:	2b30      	cmp	r3, #48	@ 0x30
 800a5d8:	d819      	bhi.n	800a60e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800a5da:	2b20      	cmp	r3, #32
 800a5dc:	d00c      	beq.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800a5de:	2b20      	cmp	r3, #32
 800a5e0:	d815      	bhi.n	800a60e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d019      	beq.n	800a61a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800a5e6:	2b10      	cmp	r3, #16
 800a5e8:	d111      	bne.n	800a60e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5ea:	4bae      	ldr	r3, [pc, #696]	@ (800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a5ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5ee:	4aad      	ldr	r2, [pc, #692]	@ (800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a5f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a5f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a5f6:	e011      	b.n	800a61c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a5f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5fc:	3308      	adds	r3, #8
 800a5fe:	2102      	movs	r1, #2
 800a600:	4618      	mov	r0, r3
 800a602:	f001 facf 	bl	800bba4 <RCCEx_PLL2_Config>
 800a606:	4603      	mov	r3, r0
 800a608:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a60c:	e006      	b.n	800a61c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a60e:	2301      	movs	r3, #1
 800a610:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a614:	e002      	b.n	800a61c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800a616:	bf00      	nop
 800a618:	e000      	b.n	800a61c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800a61a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a61c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a620:	2b00      	cmp	r3, #0
 800a622:	d10a      	bne.n	800a63a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a624:	4b9f      	ldr	r3, [pc, #636]	@ (800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a626:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a628:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800a62c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a632:	4a9c      	ldr	r2, [pc, #624]	@ (800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a634:	430b      	orrs	r3, r1
 800a636:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a638:	e003      	b.n	800a642 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a63a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a63e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a642:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a64a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800a64e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a652:	2300      	movs	r3, #0
 800a654:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a658:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a65c:	460b      	mov	r3, r1
 800a65e:	4313      	orrs	r3, r2
 800a660:	d051      	beq.n	800a706 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a662:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a666:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a668:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a66c:	d035      	beq.n	800a6da <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800a66e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a672:	d82e      	bhi.n	800a6d2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800a674:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a678:	d031      	beq.n	800a6de <HAL_RCCEx_PeriphCLKConfig+0x432>
 800a67a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a67e:	d828      	bhi.n	800a6d2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800a680:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a684:	d01a      	beq.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x410>
 800a686:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a68a:	d822      	bhi.n	800a6d2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d003      	beq.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800a690:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a694:	d007      	beq.n	800a6a6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800a696:	e01c      	b.n	800a6d2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a698:	4b82      	ldr	r3, [pc, #520]	@ (800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a69a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a69c:	4a81      	ldr	r2, [pc, #516]	@ (800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a69e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a6a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a6a4:	e01c      	b.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a6a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6aa:	3308      	adds	r3, #8
 800a6ac:	2100      	movs	r1, #0
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f001 fa78 	bl	800bba4 <RCCEx_PLL2_Config>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a6ba:	e011      	b.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a6bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6c0:	3328      	adds	r3, #40	@ 0x28
 800a6c2:	2100      	movs	r1, #0
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f001 fb1f 	bl	800bd08 <RCCEx_PLL3_Config>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a6d0:	e006      	b.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a6d8:	e002      	b.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800a6da:	bf00      	nop
 800a6dc:	e000      	b.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800a6de:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d10a      	bne.n	800a6fe <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a6e8:	4b6e      	ldr	r3, [pc, #440]	@ (800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a6ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6ec:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800a6f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6f6:	4a6b      	ldr	r2, [pc, #428]	@ (800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a6f8:	430b      	orrs	r3, r1
 800a6fa:	6513      	str	r3, [r2, #80]	@ 0x50
 800a6fc:	e003      	b.n	800a706 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a702:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a706:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a70e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800a712:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a716:	2300      	movs	r3, #0
 800a718:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a71c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a720:	460b      	mov	r3, r1
 800a722:	4313      	orrs	r3, r2
 800a724:	d053      	beq.n	800a7ce <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a726:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a72a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a72c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a730:	d033      	beq.n	800a79a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800a732:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a736:	d82c      	bhi.n	800a792 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800a738:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a73c:	d02f      	beq.n	800a79e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800a73e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a742:	d826      	bhi.n	800a792 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800a744:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a748:	d02b      	beq.n	800a7a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a74a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a74e:	d820      	bhi.n	800a792 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800a750:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a754:	d012      	beq.n	800a77c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800a756:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a75a:	d81a      	bhi.n	800a792 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d022      	beq.n	800a7a6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800a760:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a764:	d115      	bne.n	800a792 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a766:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a76a:	3308      	adds	r3, #8
 800a76c:	2101      	movs	r1, #1
 800a76e:	4618      	mov	r0, r3
 800a770:	f001 fa18 	bl	800bba4 <RCCEx_PLL2_Config>
 800a774:	4603      	mov	r3, r0
 800a776:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a77a:	e015      	b.n	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a77c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a780:	3328      	adds	r3, #40	@ 0x28
 800a782:	2101      	movs	r1, #1
 800a784:	4618      	mov	r0, r3
 800a786:	f001 fabf 	bl	800bd08 <RCCEx_PLL3_Config>
 800a78a:	4603      	mov	r3, r0
 800a78c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a790:	e00a      	b.n	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a792:	2301      	movs	r3, #1
 800a794:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a798:	e006      	b.n	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800a79a:	bf00      	nop
 800a79c:	e004      	b.n	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800a79e:	bf00      	nop
 800a7a0:	e002      	b.n	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800a7a2:	bf00      	nop
 800a7a4:	e000      	b.n	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800a7a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d10a      	bne.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a7b0:	4b3c      	ldr	r3, [pc, #240]	@ (800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a7b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7b4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800a7b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a7be:	4a39      	ldr	r2, [pc, #228]	@ (800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a7c0:	430b      	orrs	r3, r1
 800a7c2:	6513      	str	r3, [r2, #80]	@ 0x50
 800a7c4:	e003      	b.n	800a7ce <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7c6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a7ca:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a7ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800a7da:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a7de:	2300      	movs	r3, #0
 800a7e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a7e4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a7e8:	460b      	mov	r3, r1
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	d060      	beq.n	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a7ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a7f6:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800a7fa:	d039      	beq.n	800a870 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800a7fc:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800a800:	d832      	bhi.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800a802:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a806:	d035      	beq.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800a808:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a80c:	d82c      	bhi.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800a80e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a812:	d031      	beq.n	800a878 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800a814:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a818:	d826      	bhi.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800a81a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a81e:	d02d      	beq.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800a820:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a824:	d820      	bhi.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800a826:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a82a:	d012      	beq.n	800a852 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800a82c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a830:	d81a      	bhi.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800a832:	2b00      	cmp	r3, #0
 800a834:	d024      	beq.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a836:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a83a:	d115      	bne.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a83c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a840:	3308      	adds	r3, #8
 800a842:	2101      	movs	r1, #1
 800a844:	4618      	mov	r0, r3
 800a846:	f001 f9ad 	bl	800bba4 <RCCEx_PLL2_Config>
 800a84a:	4603      	mov	r3, r0
 800a84c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a850:	e017      	b.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a852:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a856:	3328      	adds	r3, #40	@ 0x28
 800a858:	2101      	movs	r1, #1
 800a85a:	4618      	mov	r0, r3
 800a85c:	f001 fa54 	bl	800bd08 <RCCEx_PLL3_Config>
 800a860:	4603      	mov	r3, r0
 800a862:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a866:	e00c      	b.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a868:	2301      	movs	r3, #1
 800a86a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a86e:	e008      	b.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a870:	bf00      	nop
 800a872:	e006      	b.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a874:	bf00      	nop
 800a876:	e004      	b.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a878:	bf00      	nop
 800a87a:	e002      	b.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a87c:	bf00      	nop
 800a87e:	e000      	b.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a880:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a882:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a886:	2b00      	cmp	r3, #0
 800a888:	d10e      	bne.n	800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a88a:	4b06      	ldr	r3, [pc, #24]	@ (800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a88c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a88e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a892:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a896:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a89a:	4a02      	ldr	r2, [pc, #8]	@ (800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a89c:	430b      	orrs	r3, r1
 800a89e:	6593      	str	r3, [r2, #88]	@ 0x58
 800a8a0:	e006      	b.n	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800a8a2:	bf00      	nop
 800a8a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a8ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a8b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800a8bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a8c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	d037      	beq.n	800a940 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a8d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a8d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8da:	d00e      	beq.n	800a8fa <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800a8dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8e0:	d816      	bhi.n	800a910 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d018      	beq.n	800a918 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800a8e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a8ea:	d111      	bne.n	800a910 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8ec:	4bc4      	ldr	r3, [pc, #784]	@ (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a8ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8f0:	4ac3      	ldr	r2, [pc, #780]	@ (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a8f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a8f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a8f8:	e00f      	b.n	800a91a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a8fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8fe:	3308      	adds	r3, #8
 800a900:	2101      	movs	r1, #1
 800a902:	4618      	mov	r0, r3
 800a904:	f001 f94e 	bl	800bba4 <RCCEx_PLL2_Config>
 800a908:	4603      	mov	r3, r0
 800a90a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a90e:	e004      	b.n	800a91a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a910:	2301      	movs	r3, #1
 800a912:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a916:	e000      	b.n	800a91a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800a918:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a91a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d10a      	bne.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a922:	4bb7      	ldr	r3, [pc, #732]	@ (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a924:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a926:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a92a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a92e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a930:	4ab3      	ldr	r2, [pc, #716]	@ (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a932:	430b      	orrs	r3, r1
 800a934:	6513      	str	r3, [r2, #80]	@ 0x50
 800a936:	e003      	b.n	800a940 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a938:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a93c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a940:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a948:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800a94c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a950:	2300      	movs	r3, #0
 800a952:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a956:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800a95a:	460b      	mov	r3, r1
 800a95c:	4313      	orrs	r3, r2
 800a95e:	d039      	beq.n	800a9d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a960:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a964:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a966:	2b03      	cmp	r3, #3
 800a968:	d81c      	bhi.n	800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800a96a:	a201      	add	r2, pc, #4	@ (adr r2, 800a970 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800a96c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a970:	0800a9ad 	.word	0x0800a9ad
 800a974:	0800a981 	.word	0x0800a981
 800a978:	0800a98f 	.word	0x0800a98f
 800a97c:	0800a9ad 	.word	0x0800a9ad
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a980:	4b9f      	ldr	r3, [pc, #636]	@ (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a984:	4a9e      	ldr	r2, [pc, #632]	@ (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a986:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a98a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a98c:	e00f      	b.n	800a9ae <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a98e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a992:	3308      	adds	r3, #8
 800a994:	2102      	movs	r1, #2
 800a996:	4618      	mov	r0, r3
 800a998:	f001 f904 	bl	800bba4 <RCCEx_PLL2_Config>
 800a99c:	4603      	mov	r3, r0
 800a99e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a9a2:	e004      	b.n	800a9ae <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a9aa:	e000      	b.n	800a9ae <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800a9ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d10a      	bne.n	800a9cc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a9b6:	4b92      	ldr	r3, [pc, #584]	@ (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a9b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a9ba:	f023 0103 	bic.w	r1, r3, #3
 800a9be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a9c4:	4a8e      	ldr	r2, [pc, #568]	@ (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a9c6:	430b      	orrs	r3, r1
 800a9c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a9ca:	e003      	b.n	800a9d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a9d0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a9d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9dc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800a9e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a9ea:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800a9ee:	460b      	mov	r3, r1
 800a9f0:	4313      	orrs	r3, r2
 800a9f2:	f000 8099 	beq.w	800ab28 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a9f6:	4b83      	ldr	r3, [pc, #524]	@ (800ac04 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	4a82      	ldr	r2, [pc, #520]	@ (800ac04 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a9fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aa00:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aa02:	f7fa fd45 	bl	8005490 <HAL_GetTick>
 800aa06:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aa0a:	e00b      	b.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aa0c:	f7fa fd40 	bl	8005490 <HAL_GetTick>
 800aa10:	4602      	mov	r2, r0
 800aa12:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800aa16:	1ad3      	subs	r3, r2, r3
 800aa18:	2b64      	cmp	r3, #100	@ 0x64
 800aa1a:	d903      	bls.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800aa1c:	2303      	movs	r3, #3
 800aa1e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800aa22:	e005      	b.n	800aa30 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aa24:	4b77      	ldr	r3, [pc, #476]	@ (800ac04 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d0ed      	beq.n	800aa0c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800aa30:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d173      	bne.n	800ab20 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800aa38:	4b71      	ldr	r3, [pc, #452]	@ (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa3a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800aa3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa40:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800aa44:	4053      	eors	r3, r2
 800aa46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d015      	beq.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800aa4e:	4b6c      	ldr	r3, [pc, #432]	@ (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aa56:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800aa5a:	4b69      	ldr	r3, [pc, #420]	@ (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa5e:	4a68      	ldr	r2, [pc, #416]	@ (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aa64:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800aa66:	4b66      	ldr	r3, [pc, #408]	@ (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa6a:	4a65      	ldr	r2, [pc, #404]	@ (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aa70:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800aa72:	4a63      	ldr	r2, [pc, #396]	@ (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa78:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800aa7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800aa82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa86:	d118      	bne.n	800aaba <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa88:	f7fa fd02 	bl	8005490 <HAL_GetTick>
 800aa8c:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aa90:	e00d      	b.n	800aaae <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa92:	f7fa fcfd 	bl	8005490 <HAL_GetTick>
 800aa96:	4602      	mov	r2, r0
 800aa98:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800aa9c:	1ad2      	subs	r2, r2, r3
 800aa9e:	f241 3388 	movw	r3, #5000	@ 0x1388
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d903      	bls.n	800aaae <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800aaa6:	2303      	movs	r3, #3
 800aaa8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 800aaac:	e005      	b.n	800aaba <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aaae:	4b54      	ldr	r3, [pc, #336]	@ (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aab2:	f003 0302 	and.w	r3, r3, #2
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d0eb      	beq.n	800aa92 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800aaba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d129      	bne.n	800ab16 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aac2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aac6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800aaca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aace:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aad2:	d10e      	bne.n	800aaf2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800aad4:	4b4a      	ldr	r3, [pc, #296]	@ (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aad6:	691b      	ldr	r3, [r3, #16]
 800aad8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800aadc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aae0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800aae4:	091a      	lsrs	r2, r3, #4
 800aae6:	4b48      	ldr	r3, [pc, #288]	@ (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800aae8:	4013      	ands	r3, r2
 800aaea:	4a45      	ldr	r2, [pc, #276]	@ (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aaec:	430b      	orrs	r3, r1
 800aaee:	6113      	str	r3, [r2, #16]
 800aaf0:	e005      	b.n	800aafe <HAL_RCCEx_PeriphCLKConfig+0x852>
 800aaf2:	4b43      	ldr	r3, [pc, #268]	@ (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aaf4:	691b      	ldr	r3, [r3, #16]
 800aaf6:	4a42      	ldr	r2, [pc, #264]	@ (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aaf8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800aafc:	6113      	str	r3, [r2, #16]
 800aafe:	4b40      	ldr	r3, [pc, #256]	@ (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ab00:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800ab02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab06:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ab0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab0e:	4a3c      	ldr	r2, [pc, #240]	@ (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ab10:	430b      	orrs	r3, r1
 800ab12:	6713      	str	r3, [r2, #112]	@ 0x70
 800ab14:	e008      	b.n	800ab28 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ab16:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ab1a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800ab1e:	e003      	b.n	800ab28 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab20:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ab24:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ab28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab30:	f002 0301 	and.w	r3, r2, #1
 800ab34:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ab38:	2300      	movs	r3, #0
 800ab3a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ab3e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ab42:	460b      	mov	r3, r1
 800ab44:	4313      	orrs	r3, r2
 800ab46:	f000 8090 	beq.w	800ac6a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800ab4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab52:	2b28      	cmp	r3, #40	@ 0x28
 800ab54:	d870      	bhi.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800ab56:	a201      	add	r2, pc, #4	@ (adr r2, 800ab5c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800ab58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab5c:	0800ac41 	.word	0x0800ac41
 800ab60:	0800ac39 	.word	0x0800ac39
 800ab64:	0800ac39 	.word	0x0800ac39
 800ab68:	0800ac39 	.word	0x0800ac39
 800ab6c:	0800ac39 	.word	0x0800ac39
 800ab70:	0800ac39 	.word	0x0800ac39
 800ab74:	0800ac39 	.word	0x0800ac39
 800ab78:	0800ac39 	.word	0x0800ac39
 800ab7c:	0800ac0d 	.word	0x0800ac0d
 800ab80:	0800ac39 	.word	0x0800ac39
 800ab84:	0800ac39 	.word	0x0800ac39
 800ab88:	0800ac39 	.word	0x0800ac39
 800ab8c:	0800ac39 	.word	0x0800ac39
 800ab90:	0800ac39 	.word	0x0800ac39
 800ab94:	0800ac39 	.word	0x0800ac39
 800ab98:	0800ac39 	.word	0x0800ac39
 800ab9c:	0800ac23 	.word	0x0800ac23
 800aba0:	0800ac39 	.word	0x0800ac39
 800aba4:	0800ac39 	.word	0x0800ac39
 800aba8:	0800ac39 	.word	0x0800ac39
 800abac:	0800ac39 	.word	0x0800ac39
 800abb0:	0800ac39 	.word	0x0800ac39
 800abb4:	0800ac39 	.word	0x0800ac39
 800abb8:	0800ac39 	.word	0x0800ac39
 800abbc:	0800ac41 	.word	0x0800ac41
 800abc0:	0800ac39 	.word	0x0800ac39
 800abc4:	0800ac39 	.word	0x0800ac39
 800abc8:	0800ac39 	.word	0x0800ac39
 800abcc:	0800ac39 	.word	0x0800ac39
 800abd0:	0800ac39 	.word	0x0800ac39
 800abd4:	0800ac39 	.word	0x0800ac39
 800abd8:	0800ac39 	.word	0x0800ac39
 800abdc:	0800ac41 	.word	0x0800ac41
 800abe0:	0800ac39 	.word	0x0800ac39
 800abe4:	0800ac39 	.word	0x0800ac39
 800abe8:	0800ac39 	.word	0x0800ac39
 800abec:	0800ac39 	.word	0x0800ac39
 800abf0:	0800ac39 	.word	0x0800ac39
 800abf4:	0800ac39 	.word	0x0800ac39
 800abf8:	0800ac39 	.word	0x0800ac39
 800abfc:	0800ac41 	.word	0x0800ac41
 800ac00:	58024400 	.word	0x58024400
 800ac04:	58024800 	.word	0x58024800
 800ac08:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ac0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac10:	3308      	adds	r3, #8
 800ac12:	2101      	movs	r1, #1
 800ac14:	4618      	mov	r0, r3
 800ac16:	f000 ffc5 	bl	800bba4 <RCCEx_PLL2_Config>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ac20:	e00f      	b.n	800ac42 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ac22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac26:	3328      	adds	r3, #40	@ 0x28
 800ac28:	2101      	movs	r1, #1
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f001 f86c 	bl	800bd08 <RCCEx_PLL3_Config>
 800ac30:	4603      	mov	r3, r0
 800ac32:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ac36:	e004      	b.n	800ac42 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac38:	2301      	movs	r3, #1
 800ac3a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ac3e:	e000      	b.n	800ac42 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800ac40:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac42:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d10b      	bne.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ac4a:	4bc0      	ldr	r3, [pc, #768]	@ (800af4c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ac4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac4e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800ac52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac5a:	4abc      	ldr	r2, [pc, #752]	@ (800af4c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ac5c:	430b      	orrs	r3, r1
 800ac5e:	6553      	str	r3, [r2, #84]	@ 0x54
 800ac60:	e003      	b.n	800ac6a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac62:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ac66:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ac6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac72:	f002 0302 	and.w	r3, r2, #2
 800ac76:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ac80:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800ac84:	460b      	mov	r3, r1
 800ac86:	4313      	orrs	r3, r2
 800ac88:	d043      	beq.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800ac8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac92:	2b05      	cmp	r3, #5
 800ac94:	d824      	bhi.n	800ace0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800ac96:	a201      	add	r2, pc, #4	@ (adr r2, 800ac9c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800ac98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac9c:	0800ace9 	.word	0x0800ace9
 800aca0:	0800acb5 	.word	0x0800acb5
 800aca4:	0800accb 	.word	0x0800accb
 800aca8:	0800ace9 	.word	0x0800ace9
 800acac:	0800ace9 	.word	0x0800ace9
 800acb0:	0800ace9 	.word	0x0800ace9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800acb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acb8:	3308      	adds	r3, #8
 800acba:	2101      	movs	r1, #1
 800acbc:	4618      	mov	r0, r3
 800acbe:	f000 ff71 	bl	800bba4 <RCCEx_PLL2_Config>
 800acc2:	4603      	mov	r3, r0
 800acc4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800acc8:	e00f      	b.n	800acea <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800acca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acce:	3328      	adds	r3, #40	@ 0x28
 800acd0:	2101      	movs	r1, #1
 800acd2:	4618      	mov	r0, r3
 800acd4:	f001 f818 	bl	800bd08 <RCCEx_PLL3_Config>
 800acd8:	4603      	mov	r3, r0
 800acda:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800acde:	e004      	b.n	800acea <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ace0:	2301      	movs	r3, #1
 800ace2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ace6:	e000      	b.n	800acea <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800ace8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800acea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d10b      	bne.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800acf2:	4b96      	ldr	r3, [pc, #600]	@ (800af4c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800acf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acf6:	f023 0107 	bic.w	r1, r3, #7
 800acfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad02:	4a92      	ldr	r2, [pc, #584]	@ (800af4c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ad04:	430b      	orrs	r3, r1
 800ad06:	6553      	str	r3, [r2, #84]	@ 0x54
 800ad08:	e003      	b.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad0a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ad0e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ad12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad1a:	f002 0304 	and.w	r3, r2, #4
 800ad1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ad22:	2300      	movs	r3, #0
 800ad24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ad28:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800ad2c:	460b      	mov	r3, r1
 800ad2e:	4313      	orrs	r3, r2
 800ad30:	d043      	beq.n	800adba <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800ad32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ad3a:	2b05      	cmp	r3, #5
 800ad3c:	d824      	bhi.n	800ad88 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800ad3e:	a201      	add	r2, pc, #4	@ (adr r2, 800ad44 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800ad40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad44:	0800ad91 	.word	0x0800ad91
 800ad48:	0800ad5d 	.word	0x0800ad5d
 800ad4c:	0800ad73 	.word	0x0800ad73
 800ad50:	0800ad91 	.word	0x0800ad91
 800ad54:	0800ad91 	.word	0x0800ad91
 800ad58:	0800ad91 	.word	0x0800ad91
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ad5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad60:	3308      	adds	r3, #8
 800ad62:	2101      	movs	r1, #1
 800ad64:	4618      	mov	r0, r3
 800ad66:	f000 ff1d 	bl	800bba4 <RCCEx_PLL2_Config>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ad70:	e00f      	b.n	800ad92 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad76:	3328      	adds	r3, #40	@ 0x28
 800ad78:	2101      	movs	r1, #1
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f000 ffc4 	bl	800bd08 <RCCEx_PLL3_Config>
 800ad80:	4603      	mov	r3, r0
 800ad82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ad86:	e004      	b.n	800ad92 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad88:	2301      	movs	r3, #1
 800ad8a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ad8e:	e000      	b.n	800ad92 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800ad90:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad92:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d10b      	bne.n	800adb2 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ad9a:	4b6c      	ldr	r3, [pc, #432]	@ (800af4c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ad9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad9e:	f023 0107 	bic.w	r1, r3, #7
 800ada2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ada6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800adaa:	4a68      	ldr	r2, [pc, #416]	@ (800af4c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800adac:	430b      	orrs	r3, r1
 800adae:	6593      	str	r3, [r2, #88]	@ 0x58
 800adb0:	e003      	b.n	800adba <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adb2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800adb6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800adba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800adbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc2:	f002 0320 	and.w	r3, r2, #32
 800adc6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800adca:	2300      	movs	r3, #0
 800adcc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800add0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800add4:	460b      	mov	r3, r1
 800add6:	4313      	orrs	r3, r2
 800add8:	d055      	beq.n	800ae86 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800adda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800adde:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ade2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ade6:	d033      	beq.n	800ae50 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800ade8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800adec:	d82c      	bhi.n	800ae48 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800adee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800adf2:	d02f      	beq.n	800ae54 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800adf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800adf8:	d826      	bhi.n	800ae48 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800adfa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800adfe:	d02b      	beq.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800ae00:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ae04:	d820      	bhi.n	800ae48 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800ae06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae0a:	d012      	beq.n	800ae32 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800ae0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae10:	d81a      	bhi.n	800ae48 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d022      	beq.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800ae16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae1a:	d115      	bne.n	800ae48 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ae1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae20:	3308      	adds	r3, #8
 800ae22:	2100      	movs	r1, #0
 800ae24:	4618      	mov	r0, r3
 800ae26:	f000 febd 	bl	800bba4 <RCCEx_PLL2_Config>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ae30:	e015      	b.n	800ae5e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ae32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae36:	3328      	adds	r3, #40	@ 0x28
 800ae38:	2102      	movs	r1, #2
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f000 ff64 	bl	800bd08 <RCCEx_PLL3_Config>
 800ae40:	4603      	mov	r3, r0
 800ae42:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ae46:	e00a      	b.n	800ae5e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ae4e:	e006      	b.n	800ae5e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800ae50:	bf00      	nop
 800ae52:	e004      	b.n	800ae5e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800ae54:	bf00      	nop
 800ae56:	e002      	b.n	800ae5e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800ae58:	bf00      	nop
 800ae5a:	e000      	b.n	800ae5e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800ae5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae5e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d10b      	bne.n	800ae7e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ae66:	4b39      	ldr	r3, [pc, #228]	@ (800af4c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ae68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae6a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800ae6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ae76:	4a35      	ldr	r2, [pc, #212]	@ (800af4c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ae78:	430b      	orrs	r3, r1
 800ae7a:	6553      	str	r3, [r2, #84]	@ 0x54
 800ae7c:	e003      	b.n	800ae86 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae7e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ae82:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ae86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800ae92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ae96:	2300      	movs	r3, #0
 800ae98:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ae9c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800aea0:	460b      	mov	r3, r1
 800aea2:	4313      	orrs	r3, r2
 800aea4:	d058      	beq.n	800af58 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800aea6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aeaa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800aeae:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800aeb2:	d033      	beq.n	800af1c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800aeb4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800aeb8:	d82c      	bhi.n	800af14 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800aeba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aebe:	d02f      	beq.n	800af20 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800aec0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aec4:	d826      	bhi.n	800af14 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800aec6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aeca:	d02b      	beq.n	800af24 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800aecc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aed0:	d820      	bhi.n	800af14 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800aed2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aed6:	d012      	beq.n	800aefe <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800aed8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aedc:	d81a      	bhi.n	800af14 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d022      	beq.n	800af28 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800aee2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aee6:	d115      	bne.n	800af14 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aee8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aeec:	3308      	adds	r3, #8
 800aeee:	2100      	movs	r1, #0
 800aef0:	4618      	mov	r0, r3
 800aef2:	f000 fe57 	bl	800bba4 <RCCEx_PLL2_Config>
 800aef6:	4603      	mov	r3, r0
 800aef8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800aefc:	e015      	b.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aefe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af02:	3328      	adds	r3, #40	@ 0x28
 800af04:	2102      	movs	r1, #2
 800af06:	4618      	mov	r0, r3
 800af08:	f000 fefe 	bl	800bd08 <RCCEx_PLL3_Config>
 800af0c:	4603      	mov	r3, r0
 800af0e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800af12:	e00a      	b.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af14:	2301      	movs	r3, #1
 800af16:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800af1a:	e006      	b.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800af1c:	bf00      	nop
 800af1e:	e004      	b.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800af20:	bf00      	nop
 800af22:	e002      	b.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800af24:	bf00      	nop
 800af26:	e000      	b.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800af28:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af2a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d10e      	bne.n	800af50 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800af32:	4b06      	ldr	r3, [pc, #24]	@ (800af4c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800af34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af36:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800af3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800af42:	4a02      	ldr	r2, [pc, #8]	@ (800af4c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800af44:	430b      	orrs	r3, r1
 800af46:	6593      	str	r3, [r2, #88]	@ 0x58
 800af48:	e006      	b.n	800af58 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800af4a:	bf00      	nop
 800af4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af50:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800af54:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800af58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af60:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800af64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800af68:	2300      	movs	r3, #0
 800af6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800af6e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800af72:	460b      	mov	r3, r1
 800af74:	4313      	orrs	r3, r2
 800af76:	d055      	beq.n	800b024 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800af78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af7c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800af80:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800af84:	d033      	beq.n	800afee <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800af86:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800af8a:	d82c      	bhi.n	800afe6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800af8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800af90:	d02f      	beq.n	800aff2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800af92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800af96:	d826      	bhi.n	800afe6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800af98:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800af9c:	d02b      	beq.n	800aff6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800af9e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800afa2:	d820      	bhi.n	800afe6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800afa4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800afa8:	d012      	beq.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800afaa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800afae:	d81a      	bhi.n	800afe6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d022      	beq.n	800affa <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800afb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800afb8:	d115      	bne.n	800afe6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800afba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afbe:	3308      	adds	r3, #8
 800afc0:	2100      	movs	r1, #0
 800afc2:	4618      	mov	r0, r3
 800afc4:	f000 fdee 	bl	800bba4 <RCCEx_PLL2_Config>
 800afc8:	4603      	mov	r3, r0
 800afca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800afce:	e015      	b.n	800affc <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800afd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afd4:	3328      	adds	r3, #40	@ 0x28
 800afd6:	2102      	movs	r1, #2
 800afd8:	4618      	mov	r0, r3
 800afda:	f000 fe95 	bl	800bd08 <RCCEx_PLL3_Config>
 800afde:	4603      	mov	r3, r0
 800afe0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800afe4:	e00a      	b.n	800affc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800afe6:	2301      	movs	r3, #1
 800afe8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800afec:	e006      	b.n	800affc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800afee:	bf00      	nop
 800aff0:	e004      	b.n	800affc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800aff2:	bf00      	nop
 800aff4:	e002      	b.n	800affc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800aff6:	bf00      	nop
 800aff8:	e000      	b.n	800affc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800affa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800affc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b000:	2b00      	cmp	r3, #0
 800b002:	d10b      	bne.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b004:	4ba1      	ldr	r3, [pc, #644]	@ (800b28c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b008:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800b00c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b010:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b014:	4a9d      	ldr	r2, [pc, #628]	@ (800b28c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b016:	430b      	orrs	r3, r1
 800b018:	6593      	str	r3, [r2, #88]	@ 0x58
 800b01a:	e003      	b.n	800b024 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b01c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b020:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b024:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b02c:	f002 0308 	and.w	r3, r2, #8
 800b030:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b034:	2300      	movs	r3, #0
 800b036:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b03a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800b03e:	460b      	mov	r3, r1
 800b040:	4313      	orrs	r3, r2
 800b042:	d01e      	beq.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b044:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b048:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b04c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b050:	d10c      	bne.n	800b06c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b052:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b056:	3328      	adds	r3, #40	@ 0x28
 800b058:	2102      	movs	r1, #2
 800b05a:	4618      	mov	r0, r3
 800b05c:	f000 fe54 	bl	800bd08 <RCCEx_PLL3_Config>
 800b060:	4603      	mov	r3, r0
 800b062:	2b00      	cmp	r3, #0
 800b064:	d002      	beq.n	800b06c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800b066:	2301      	movs	r3, #1
 800b068:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b06c:	4b87      	ldr	r3, [pc, #540]	@ (800b28c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b06e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b070:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b074:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b078:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b07c:	4a83      	ldr	r2, [pc, #524]	@ (800b28c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b07e:	430b      	orrs	r3, r1
 800b080:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b082:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b08a:	f002 0310 	and.w	r3, r2, #16
 800b08e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b092:	2300      	movs	r3, #0
 800b094:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b098:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800b09c:	460b      	mov	r3, r1
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	d01e      	beq.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b0a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b0aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b0ae:	d10c      	bne.n	800b0ca <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b0b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0b4:	3328      	adds	r3, #40	@ 0x28
 800b0b6:	2102      	movs	r1, #2
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f000 fe25 	bl	800bd08 <RCCEx_PLL3_Config>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d002      	beq.n	800b0ca <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b0ca:	4b70      	ldr	r3, [pc, #448]	@ (800b28c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b0cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b0ce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b0d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b0da:	4a6c      	ldr	r2, [pc, #432]	@ (800b28c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b0dc:	430b      	orrs	r3, r1
 800b0de:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b0e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800b0ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b0f6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800b0fa:	460b      	mov	r3, r1
 800b0fc:	4313      	orrs	r3, r2
 800b0fe:	d03e      	beq.n	800b17e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b100:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b104:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b108:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b10c:	d022      	beq.n	800b154 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800b10e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b112:	d81b      	bhi.n	800b14c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b114:	2b00      	cmp	r3, #0
 800b116:	d003      	beq.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800b118:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b11c:	d00b      	beq.n	800b136 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800b11e:	e015      	b.n	800b14c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b120:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b124:	3308      	adds	r3, #8
 800b126:	2100      	movs	r1, #0
 800b128:	4618      	mov	r0, r3
 800b12a:	f000 fd3b 	bl	800bba4 <RCCEx_PLL2_Config>
 800b12e:	4603      	mov	r3, r0
 800b130:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b134:	e00f      	b.n	800b156 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b136:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b13a:	3328      	adds	r3, #40	@ 0x28
 800b13c:	2102      	movs	r1, #2
 800b13e:	4618      	mov	r0, r3
 800b140:	f000 fde2 	bl	800bd08 <RCCEx_PLL3_Config>
 800b144:	4603      	mov	r3, r0
 800b146:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b14a:	e004      	b.n	800b156 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b14c:	2301      	movs	r3, #1
 800b14e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b152:	e000      	b.n	800b156 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800b154:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b156:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d10b      	bne.n	800b176 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b15e:	4b4b      	ldr	r3, [pc, #300]	@ (800b28c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b162:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b166:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b16a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b16e:	4a47      	ldr	r2, [pc, #284]	@ (800b28c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b170:	430b      	orrs	r3, r1
 800b172:	6593      	str	r3, [r2, #88]	@ 0x58
 800b174:	e003      	b.n	800b17e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b176:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b17a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b17e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b186:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800b18a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b18c:	2300      	movs	r3, #0
 800b18e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b190:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800b194:	460b      	mov	r3, r1
 800b196:	4313      	orrs	r3, r2
 800b198:	d03b      	beq.n	800b212 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b19a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b19e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b1a6:	d01f      	beq.n	800b1e8 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800b1a8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b1ac:	d818      	bhi.n	800b1e0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b1ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b1b2:	d003      	beq.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800b1b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b1b8:	d007      	beq.n	800b1ca <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800b1ba:	e011      	b.n	800b1e0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1bc:	4b33      	ldr	r3, [pc, #204]	@ (800b28c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b1be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1c0:	4a32      	ldr	r2, [pc, #200]	@ (800b28c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b1c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b1c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b1c8:	e00f      	b.n	800b1ea <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b1ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1ce:	3328      	adds	r3, #40	@ 0x28
 800b1d0:	2101      	movs	r1, #1
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f000 fd98 	bl	800bd08 <RCCEx_PLL3_Config>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800b1de:	e004      	b.n	800b1ea <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b1e6:	e000      	b.n	800b1ea <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800b1e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d10b      	bne.n	800b20a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b1f2:	4b26      	ldr	r3, [pc, #152]	@ (800b28c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b1f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b1f6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b1fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b202:	4a22      	ldr	r2, [pc, #136]	@ (800b28c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b204:	430b      	orrs	r3, r1
 800b206:	6553      	str	r3, [r2, #84]	@ 0x54
 800b208:	e003      	b.n	800b212 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b20a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b20e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b212:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b21a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800b21e:	673b      	str	r3, [r7, #112]	@ 0x70
 800b220:	2300      	movs	r3, #0
 800b222:	677b      	str	r3, [r7, #116]	@ 0x74
 800b224:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800b228:	460b      	mov	r3, r1
 800b22a:	4313      	orrs	r3, r2
 800b22c:	d034      	beq.n	800b298 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b22e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b232:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b234:	2b00      	cmp	r3, #0
 800b236:	d003      	beq.n	800b240 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800b238:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b23c:	d007      	beq.n	800b24e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800b23e:	e011      	b.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b240:	4b12      	ldr	r3, [pc, #72]	@ (800b28c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b244:	4a11      	ldr	r2, [pc, #68]	@ (800b28c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b246:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b24a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b24c:	e00e      	b.n	800b26c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b24e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b252:	3308      	adds	r3, #8
 800b254:	2102      	movs	r1, #2
 800b256:	4618      	mov	r0, r3
 800b258:	f000 fca4 	bl	800bba4 <RCCEx_PLL2_Config>
 800b25c:	4603      	mov	r3, r0
 800b25e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b262:	e003      	b.n	800b26c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800b264:	2301      	movs	r3, #1
 800b266:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b26a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b26c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b270:	2b00      	cmp	r3, #0
 800b272:	d10d      	bne.n	800b290 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b274:	4b05      	ldr	r3, [pc, #20]	@ (800b28c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b276:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b278:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b27c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b280:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b282:	4a02      	ldr	r2, [pc, #8]	@ (800b28c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b284:	430b      	orrs	r3, r1
 800b286:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b288:	e006      	b.n	800b298 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800b28a:	bf00      	nop
 800b28c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b290:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b294:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b298:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800b2a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b2aa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800b2ae:	460b      	mov	r3, r1
 800b2b0:	4313      	orrs	r3, r2
 800b2b2:	d00c      	beq.n	800b2ce <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b2b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2b8:	3328      	adds	r3, #40	@ 0x28
 800b2ba:	2102      	movs	r1, #2
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f000 fd23 	bl	800bd08 <RCCEx_PLL3_Config>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d002      	beq.n	800b2ce <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b2ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800b2da:	663b      	str	r3, [r7, #96]	@ 0x60
 800b2dc:	2300      	movs	r3, #0
 800b2de:	667b      	str	r3, [r7, #100]	@ 0x64
 800b2e0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800b2e4:	460b      	mov	r3, r1
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	d038      	beq.n	800b35c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b2ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b2f6:	d018      	beq.n	800b32a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800b2f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b2fc:	d811      	bhi.n	800b322 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800b2fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b302:	d014      	beq.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800b304:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b308:	d80b      	bhi.n	800b322 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d011      	beq.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800b30e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b312:	d106      	bne.n	800b322 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b314:	4bc3      	ldr	r3, [pc, #780]	@ (800b624 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b318:	4ac2      	ldr	r2, [pc, #776]	@ (800b624 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b31a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b31e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b320:	e008      	b.n	800b334 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b322:	2301      	movs	r3, #1
 800b324:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b328:	e004      	b.n	800b334 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800b32a:	bf00      	nop
 800b32c:	e002      	b.n	800b334 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800b32e:	bf00      	nop
 800b330:	e000      	b.n	800b334 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800b332:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b334:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d10b      	bne.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b33c:	4bb9      	ldr	r3, [pc, #740]	@ (800b624 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b33e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b340:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b344:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b348:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b34c:	4ab5      	ldr	r2, [pc, #724]	@ (800b624 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b34e:	430b      	orrs	r3, r1
 800b350:	6553      	str	r3, [r2, #84]	@ 0x54
 800b352:	e003      	b.n	800b35c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b354:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b358:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b35c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b364:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800b368:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b36a:	2300      	movs	r3, #0
 800b36c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b36e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800b372:	460b      	mov	r3, r1
 800b374:	4313      	orrs	r3, r2
 800b376:	d009      	beq.n	800b38c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b378:	4baa      	ldr	r3, [pc, #680]	@ (800b624 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b37a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b37c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b380:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b384:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b386:	4aa7      	ldr	r2, [pc, #668]	@ (800b624 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b388:	430b      	orrs	r3, r1
 800b38a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b38c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b394:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800b398:	653b      	str	r3, [r7, #80]	@ 0x50
 800b39a:	2300      	movs	r3, #0
 800b39c:	657b      	str	r3, [r7, #84]	@ 0x54
 800b39e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800b3a2:	460b      	mov	r3, r1
 800b3a4:	4313      	orrs	r3, r2
 800b3a6:	d009      	beq.n	800b3bc <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b3a8:	4b9e      	ldr	r3, [pc, #632]	@ (800b624 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b3aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b3ac:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800b3b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b3b6:	4a9b      	ldr	r2, [pc, #620]	@ (800b624 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b3b8:	430b      	orrs	r3, r1
 800b3ba:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800b3bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800b3c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b3ce:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800b3d2:	460b      	mov	r3, r1
 800b3d4:	4313      	orrs	r3, r2
 800b3d6:	d009      	beq.n	800b3ec <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800b3d8:	4b92      	ldr	r3, [pc, #584]	@ (800b624 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b3da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b3dc:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 800b3e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b3e6:	4a8f      	ldr	r2, [pc, #572]	@ (800b624 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b3e8:	430b      	orrs	r3, r1
 800b3ea:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b3ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800b3f8:	643b      	str	r3, [r7, #64]	@ 0x40
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	647b      	str	r3, [r7, #68]	@ 0x44
 800b3fe:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800b402:	460b      	mov	r3, r1
 800b404:	4313      	orrs	r3, r2
 800b406:	d00e      	beq.n	800b426 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b408:	4b86      	ldr	r3, [pc, #536]	@ (800b624 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b40a:	691b      	ldr	r3, [r3, #16]
 800b40c:	4a85      	ldr	r2, [pc, #532]	@ (800b624 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b40e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b412:	6113      	str	r3, [r2, #16]
 800b414:	4b83      	ldr	r3, [pc, #524]	@ (800b624 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b416:	6919      	ldr	r1, [r3, #16]
 800b418:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b41c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b420:	4a80      	ldr	r2, [pc, #512]	@ (800b624 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b422:	430b      	orrs	r3, r1
 800b424:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b426:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800b432:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b434:	2300      	movs	r3, #0
 800b436:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b438:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800b43c:	460b      	mov	r3, r1
 800b43e:	4313      	orrs	r3, r2
 800b440:	d009      	beq.n	800b456 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b442:	4b78      	ldr	r3, [pc, #480]	@ (800b624 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b446:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800b44a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b44e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b450:	4a74      	ldr	r2, [pc, #464]	@ (800b624 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b452:	430b      	orrs	r3, r1
 800b454:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b456:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b45e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800b462:	633b      	str	r3, [r7, #48]	@ 0x30
 800b464:	2300      	movs	r3, #0
 800b466:	637b      	str	r3, [r7, #52]	@ 0x34
 800b468:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800b46c:	460b      	mov	r3, r1
 800b46e:	4313      	orrs	r3, r2
 800b470:	d00a      	beq.n	800b488 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b472:	4b6c      	ldr	r3, [pc, #432]	@ (800b624 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b476:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800b47a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b47e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b482:	4a68      	ldr	r2, [pc, #416]	@ (800b624 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b484:	430b      	orrs	r3, r1
 800b486:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b488:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b490:	2100      	movs	r1, #0
 800b492:	62b9      	str	r1, [r7, #40]	@ 0x28
 800b494:	f003 0301 	and.w	r3, r3, #1
 800b498:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b49a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800b49e:	460b      	mov	r3, r1
 800b4a0:	4313      	orrs	r3, r2
 800b4a2:	d011      	beq.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b4a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4a8:	3308      	adds	r3, #8
 800b4aa:	2100      	movs	r1, #0
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f000 fb79 	bl	800bba4 <RCCEx_PLL2_Config>
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800b4b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d003      	beq.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b4c4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b4c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d0:	2100      	movs	r1, #0
 800b4d2:	6239      	str	r1, [r7, #32]
 800b4d4:	f003 0302 	and.w	r3, r3, #2
 800b4d8:	627b      	str	r3, [r7, #36]	@ 0x24
 800b4da:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b4de:	460b      	mov	r3, r1
 800b4e0:	4313      	orrs	r3, r2
 800b4e2:	d011      	beq.n	800b508 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b4e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4e8:	3308      	adds	r3, #8
 800b4ea:	2101      	movs	r1, #1
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f000 fb59 	bl	800bba4 <RCCEx_PLL2_Config>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800b4f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d003      	beq.n	800b508 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b500:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b504:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b508:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b510:	2100      	movs	r1, #0
 800b512:	61b9      	str	r1, [r7, #24]
 800b514:	f003 0304 	and.w	r3, r3, #4
 800b518:	61fb      	str	r3, [r7, #28]
 800b51a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b51e:	460b      	mov	r3, r1
 800b520:	4313      	orrs	r3, r2
 800b522:	d011      	beq.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b524:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b528:	3308      	adds	r3, #8
 800b52a:	2102      	movs	r1, #2
 800b52c:	4618      	mov	r0, r3
 800b52e:	f000 fb39 	bl	800bba4 <RCCEx_PLL2_Config>
 800b532:	4603      	mov	r3, r0
 800b534:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800b538:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d003      	beq.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b540:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b544:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b548:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b550:	2100      	movs	r1, #0
 800b552:	6139      	str	r1, [r7, #16]
 800b554:	f003 0308 	and.w	r3, r3, #8
 800b558:	617b      	str	r3, [r7, #20]
 800b55a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b55e:	460b      	mov	r3, r1
 800b560:	4313      	orrs	r3, r2
 800b562:	d011      	beq.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b564:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b568:	3328      	adds	r3, #40	@ 0x28
 800b56a:	2100      	movs	r1, #0
 800b56c:	4618      	mov	r0, r3
 800b56e:	f000 fbcb 	bl	800bd08 <RCCEx_PLL3_Config>
 800b572:	4603      	mov	r3, r0
 800b574:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800b578:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d003      	beq.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b580:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b584:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b588:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b590:	2100      	movs	r1, #0
 800b592:	60b9      	str	r1, [r7, #8]
 800b594:	f003 0310 	and.w	r3, r3, #16
 800b598:	60fb      	str	r3, [r7, #12]
 800b59a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b59e:	460b      	mov	r3, r1
 800b5a0:	4313      	orrs	r3, r2
 800b5a2:	d011      	beq.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b5a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5a8:	3328      	adds	r3, #40	@ 0x28
 800b5aa:	2101      	movs	r1, #1
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f000 fbab 	bl	800bd08 <RCCEx_PLL3_Config>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800b5b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d003      	beq.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b5c4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b5c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d0:	2100      	movs	r1, #0
 800b5d2:	6039      	str	r1, [r7, #0]
 800b5d4:	f003 0320 	and.w	r3, r3, #32
 800b5d8:	607b      	str	r3, [r7, #4]
 800b5da:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b5de:	460b      	mov	r3, r1
 800b5e0:	4313      	orrs	r3, r2
 800b5e2:	d011      	beq.n	800b608 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b5e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5e8:	3328      	adds	r3, #40	@ 0x28
 800b5ea:	2102      	movs	r1, #2
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f000 fb8b 	bl	800bd08 <RCCEx_PLL3_Config>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800b5f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d003      	beq.n	800b608 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b600:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b604:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800b608:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d101      	bne.n	800b614 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800b610:	2300      	movs	r3, #0
 800b612:	e000      	b.n	800b616 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800b614:	2301      	movs	r3, #1
}
 800b616:	4618      	mov	r0, r3
 800b618:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800b61c:	46bd      	mov	sp, r7
 800b61e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b622:	bf00      	nop
 800b624:	58024400 	.word	0x58024400

0800b628 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800b62c:	f7fe fda0 	bl	800a170 <HAL_RCC_GetHCLKFreq>
 800b630:	4602      	mov	r2, r0
 800b632:	4b06      	ldr	r3, [pc, #24]	@ (800b64c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b634:	6a1b      	ldr	r3, [r3, #32]
 800b636:	091b      	lsrs	r3, r3, #4
 800b638:	f003 0307 	and.w	r3, r3, #7
 800b63c:	4904      	ldr	r1, [pc, #16]	@ (800b650 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b63e:	5ccb      	ldrb	r3, [r1, r3]
 800b640:	f003 031f 	and.w	r3, r3, #31
 800b644:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b648:	4618      	mov	r0, r3
 800b64a:	bd80      	pop	{r7, pc}
 800b64c:	58024400 	.word	0x58024400
 800b650:	080189d4 	.word	0x080189d4

0800b654 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b654:	b480      	push	{r7}
 800b656:	b089      	sub	sp, #36	@ 0x24
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b65c:	4ba1      	ldr	r3, [pc, #644]	@ (800b8e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b65e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b660:	f003 0303 	and.w	r3, r3, #3
 800b664:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b666:	4b9f      	ldr	r3, [pc, #636]	@ (800b8e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b66a:	0b1b      	lsrs	r3, r3, #12
 800b66c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b670:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b672:	4b9c      	ldr	r3, [pc, #624]	@ (800b8e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b676:	091b      	lsrs	r3, r3, #4
 800b678:	f003 0301 	and.w	r3, r3, #1
 800b67c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b67e:	4b99      	ldr	r3, [pc, #612]	@ (800b8e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b680:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b682:	08db      	lsrs	r3, r3, #3
 800b684:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b688:	693a      	ldr	r2, [r7, #16]
 800b68a:	fb02 f303 	mul.w	r3, r2, r3
 800b68e:	ee07 3a90 	vmov	s15, r3
 800b692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b696:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	f000 8111 	beq.w	800b8c4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b6a2:	69bb      	ldr	r3, [r7, #24]
 800b6a4:	2b02      	cmp	r3, #2
 800b6a6:	f000 8083 	beq.w	800b7b0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b6aa:	69bb      	ldr	r3, [r7, #24]
 800b6ac:	2b02      	cmp	r3, #2
 800b6ae:	f200 80a1 	bhi.w	800b7f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b6b2:	69bb      	ldr	r3, [r7, #24]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d003      	beq.n	800b6c0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b6b8:	69bb      	ldr	r3, [r7, #24]
 800b6ba:	2b01      	cmp	r3, #1
 800b6bc:	d056      	beq.n	800b76c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b6be:	e099      	b.n	800b7f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b6c0:	4b88      	ldr	r3, [pc, #544]	@ (800b8e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f003 0320 	and.w	r3, r3, #32
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d02d      	beq.n	800b728 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b6cc:	4b85      	ldr	r3, [pc, #532]	@ (800b8e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	08db      	lsrs	r3, r3, #3
 800b6d2:	f003 0303 	and.w	r3, r3, #3
 800b6d6:	4a84      	ldr	r2, [pc, #528]	@ (800b8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b6d8:	fa22 f303 	lsr.w	r3, r2, r3
 800b6dc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	ee07 3a90 	vmov	s15, r3
 800b6e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	ee07 3a90 	vmov	s15, r3
 800b6ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6f6:	4b7b      	ldr	r3, [pc, #492]	@ (800b8e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6fe:	ee07 3a90 	vmov	s15, r3
 800b702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b706:	ed97 6a03 	vldr	s12, [r7, #12]
 800b70a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b8ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b70e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b716:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b71a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b71e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b722:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b726:	e087      	b.n	800b838 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	ee07 3a90 	vmov	s15, r3
 800b72e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b732:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b8f0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b736:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b73a:	4b6a      	ldr	r3, [pc, #424]	@ (800b8e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b73c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b73e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b742:	ee07 3a90 	vmov	s15, r3
 800b746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b74a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b74e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b8ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b752:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b756:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b75a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b75e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b762:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b766:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b76a:	e065      	b.n	800b838 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	ee07 3a90 	vmov	s15, r3
 800b772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b776:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b8f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b77a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b77e:	4b59      	ldr	r3, [pc, #356]	@ (800b8e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b786:	ee07 3a90 	vmov	s15, r3
 800b78a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b78e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b792:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b8ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b796:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b79a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b79e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b7a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7ae:	e043      	b.n	800b838 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b7b0:	697b      	ldr	r3, [r7, #20]
 800b7b2:	ee07 3a90 	vmov	s15, r3
 800b7b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7ba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b8f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b7be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7c2:	4b48      	ldr	r3, [pc, #288]	@ (800b8e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7ca:	ee07 3a90 	vmov	s15, r3
 800b7ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7d6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b8ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b7da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b7e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7f2:	e021      	b.n	800b838 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	ee07 3a90 	vmov	s15, r3
 800b7fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7fe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b8f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b806:	4b37      	ldr	r3, [pc, #220]	@ (800b8e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b80a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b80e:	ee07 3a90 	vmov	s15, r3
 800b812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b816:	ed97 6a03 	vldr	s12, [r7, #12]
 800b81a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b8ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b81e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b826:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b82a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b82e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b832:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b836:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b838:	4b2a      	ldr	r3, [pc, #168]	@ (800b8e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b83a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b83c:	0a5b      	lsrs	r3, r3, #9
 800b83e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b842:	ee07 3a90 	vmov	s15, r3
 800b846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b84a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b84e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b852:	edd7 6a07 	vldr	s13, [r7, #28]
 800b856:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b85a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b85e:	ee17 2a90 	vmov	r2, s15
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b866:	4b1f      	ldr	r3, [pc, #124]	@ (800b8e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b86a:	0c1b      	lsrs	r3, r3, #16
 800b86c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b870:	ee07 3a90 	vmov	s15, r3
 800b874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b878:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b87c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b880:	edd7 6a07 	vldr	s13, [r7, #28]
 800b884:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b888:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b88c:	ee17 2a90 	vmov	r2, s15
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b894:	4b13      	ldr	r3, [pc, #76]	@ (800b8e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b898:	0e1b      	lsrs	r3, r3, #24
 800b89a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b89e:	ee07 3a90 	vmov	s15, r3
 800b8a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b8aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b8ae:	edd7 6a07 	vldr	s13, [r7, #28]
 800b8b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b8b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8ba:	ee17 2a90 	vmov	r2, s15
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b8c2:	e008      	b.n	800b8d6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	609a      	str	r2, [r3, #8]
}
 800b8d6:	bf00      	nop
 800b8d8:	3724      	adds	r7, #36	@ 0x24
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e0:	4770      	bx	lr
 800b8e2:	bf00      	nop
 800b8e4:	58024400 	.word	0x58024400
 800b8e8:	03d09000 	.word	0x03d09000
 800b8ec:	46000000 	.word	0x46000000
 800b8f0:	4c742400 	.word	0x4c742400
 800b8f4:	4a742400 	.word	0x4a742400
 800b8f8:	4bb71b00 	.word	0x4bb71b00

0800b8fc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	b089      	sub	sp, #36	@ 0x24
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b904:	4ba1      	ldr	r3, [pc, #644]	@ (800bb8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b908:	f003 0303 	and.w	r3, r3, #3
 800b90c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b90e:	4b9f      	ldr	r3, [pc, #636]	@ (800bb8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b912:	0d1b      	lsrs	r3, r3, #20
 800b914:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b918:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b91a:	4b9c      	ldr	r3, [pc, #624]	@ (800bb8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b91c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b91e:	0a1b      	lsrs	r3, r3, #8
 800b920:	f003 0301 	and.w	r3, r3, #1
 800b924:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b926:	4b99      	ldr	r3, [pc, #612]	@ (800bb8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b92a:	08db      	lsrs	r3, r3, #3
 800b92c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b930:	693a      	ldr	r2, [r7, #16]
 800b932:	fb02 f303 	mul.w	r3, r2, r3
 800b936:	ee07 3a90 	vmov	s15, r3
 800b93a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b93e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b942:	697b      	ldr	r3, [r7, #20]
 800b944:	2b00      	cmp	r3, #0
 800b946:	f000 8111 	beq.w	800bb6c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b94a:	69bb      	ldr	r3, [r7, #24]
 800b94c:	2b02      	cmp	r3, #2
 800b94e:	f000 8083 	beq.w	800ba58 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b952:	69bb      	ldr	r3, [r7, #24]
 800b954:	2b02      	cmp	r3, #2
 800b956:	f200 80a1 	bhi.w	800ba9c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b95a:	69bb      	ldr	r3, [r7, #24]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d003      	beq.n	800b968 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b960:	69bb      	ldr	r3, [r7, #24]
 800b962:	2b01      	cmp	r3, #1
 800b964:	d056      	beq.n	800ba14 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b966:	e099      	b.n	800ba9c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b968:	4b88      	ldr	r3, [pc, #544]	@ (800bb8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f003 0320 	and.w	r3, r3, #32
 800b970:	2b00      	cmp	r3, #0
 800b972:	d02d      	beq.n	800b9d0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b974:	4b85      	ldr	r3, [pc, #532]	@ (800bb8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	08db      	lsrs	r3, r3, #3
 800b97a:	f003 0303 	and.w	r3, r3, #3
 800b97e:	4a84      	ldr	r2, [pc, #528]	@ (800bb90 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b980:	fa22 f303 	lsr.w	r3, r2, r3
 800b984:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	ee07 3a90 	vmov	s15, r3
 800b98c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b990:	697b      	ldr	r3, [r7, #20]
 800b992:	ee07 3a90 	vmov	s15, r3
 800b996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b99a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b99e:	4b7b      	ldr	r3, [pc, #492]	@ (800bb8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9a6:	ee07 3a90 	vmov	s15, r3
 800b9aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9b2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800bb94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b9b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b9c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b9ce:	e087      	b.n	800bae0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	ee07 3a90 	vmov	s15, r3
 800b9d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9da:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bb98 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b9de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9e2:	4b6a      	ldr	r3, [pc, #424]	@ (800bb8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9ea:	ee07 3a90 	vmov	s15, r3
 800b9ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9f6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800bb94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b9fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba12:	e065      	b.n	800bae0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ba14:	697b      	ldr	r3, [r7, #20]
 800ba16:	ee07 3a90 	vmov	s15, r3
 800ba1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba1e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bb9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ba22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba26:	4b59      	ldr	r3, [pc, #356]	@ (800bb8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba2e:	ee07 3a90 	vmov	s15, r3
 800ba32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba36:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba3a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800bb94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba56:	e043      	b.n	800bae0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	ee07 3a90 	vmov	s15, r3
 800ba5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba62:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bba0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ba66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba6a:	4b48      	ldr	r3, [pc, #288]	@ (800bb8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba72:	ee07 3a90 	vmov	s15, r3
 800ba76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba7a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba7e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800bb94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba9a:	e021      	b.n	800bae0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ba9c:	697b      	ldr	r3, [r7, #20]
 800ba9e:	ee07 3a90 	vmov	s15, r3
 800baa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baa6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bb9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800baaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800baae:	4b37      	ldr	r3, [pc, #220]	@ (800bb8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bab6:	ee07 3a90 	vmov	s15, r3
 800baba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800babe:	ed97 6a03 	vldr	s12, [r7, #12]
 800bac2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bb94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800baca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bace:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bada:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bade:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800bae0:	4b2a      	ldr	r3, [pc, #168]	@ (800bb8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bae4:	0a5b      	lsrs	r3, r3, #9
 800bae6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800baea:	ee07 3a90 	vmov	s15, r3
 800baee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baf2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800baf6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bafa:	edd7 6a07 	vldr	s13, [r7, #28]
 800bafe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb06:	ee17 2a90 	vmov	r2, s15
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800bb0e:	4b1f      	ldr	r3, [pc, #124]	@ (800bb8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb12:	0c1b      	lsrs	r3, r3, #16
 800bb14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb18:	ee07 3a90 	vmov	s15, r3
 800bb1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb20:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bb24:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb28:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb34:	ee17 2a90 	vmov	r2, s15
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800bb3c:	4b13      	ldr	r3, [pc, #76]	@ (800bb8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb40:	0e1b      	lsrs	r3, r3, #24
 800bb42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb46:	ee07 3a90 	vmov	s15, r3
 800bb4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bb52:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb56:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb62:	ee17 2a90 	vmov	r2, s15
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bb6a:	e008      	b.n	800bb7e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2200      	movs	r2, #0
 800bb70:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2200      	movs	r2, #0
 800bb76:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	609a      	str	r2, [r3, #8]
}
 800bb7e:	bf00      	nop
 800bb80:	3724      	adds	r7, #36	@ 0x24
 800bb82:	46bd      	mov	sp, r7
 800bb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb88:	4770      	bx	lr
 800bb8a:	bf00      	nop
 800bb8c:	58024400 	.word	0x58024400
 800bb90:	03d09000 	.word	0x03d09000
 800bb94:	46000000 	.word	0x46000000
 800bb98:	4c742400 	.word	0x4c742400
 800bb9c:	4a742400 	.word	0x4a742400
 800bba0:	4bb71b00 	.word	0x4bb71b00

0800bba4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b084      	sub	sp, #16
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
 800bbac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bbae:	2300      	movs	r3, #0
 800bbb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bbb2:	4b53      	ldr	r3, [pc, #332]	@ (800bd00 <RCCEx_PLL2_Config+0x15c>)
 800bbb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbb6:	f003 0303 	and.w	r3, r3, #3
 800bbba:	2b03      	cmp	r3, #3
 800bbbc:	d101      	bne.n	800bbc2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	e099      	b.n	800bcf6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bbc2:	4b4f      	ldr	r3, [pc, #316]	@ (800bd00 <RCCEx_PLL2_Config+0x15c>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	4a4e      	ldr	r2, [pc, #312]	@ (800bd00 <RCCEx_PLL2_Config+0x15c>)
 800bbc8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bbcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bbce:	f7f9 fc5f 	bl	8005490 <HAL_GetTick>
 800bbd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bbd4:	e008      	b.n	800bbe8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bbd6:	f7f9 fc5b 	bl	8005490 <HAL_GetTick>
 800bbda:	4602      	mov	r2, r0
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	1ad3      	subs	r3, r2, r3
 800bbe0:	2b02      	cmp	r3, #2
 800bbe2:	d901      	bls.n	800bbe8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bbe4:	2303      	movs	r3, #3
 800bbe6:	e086      	b.n	800bcf6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bbe8:	4b45      	ldr	r3, [pc, #276]	@ (800bd00 <RCCEx_PLL2_Config+0x15c>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d1f0      	bne.n	800bbd6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bbf4:	4b42      	ldr	r3, [pc, #264]	@ (800bd00 <RCCEx_PLL2_Config+0x15c>)
 800bbf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbf8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	031b      	lsls	r3, r3, #12
 800bc02:	493f      	ldr	r1, [pc, #252]	@ (800bd00 <RCCEx_PLL2_Config+0x15c>)
 800bc04:	4313      	orrs	r3, r2
 800bc06:	628b      	str	r3, [r1, #40]	@ 0x28
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	685b      	ldr	r3, [r3, #4]
 800bc0c:	3b01      	subs	r3, #1
 800bc0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	689b      	ldr	r3, [r3, #8]
 800bc16:	3b01      	subs	r3, #1
 800bc18:	025b      	lsls	r3, r3, #9
 800bc1a:	b29b      	uxth	r3, r3
 800bc1c:	431a      	orrs	r2, r3
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	68db      	ldr	r3, [r3, #12]
 800bc22:	3b01      	subs	r3, #1
 800bc24:	041b      	lsls	r3, r3, #16
 800bc26:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bc2a:	431a      	orrs	r2, r3
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	691b      	ldr	r3, [r3, #16]
 800bc30:	3b01      	subs	r3, #1
 800bc32:	061b      	lsls	r3, r3, #24
 800bc34:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bc38:	4931      	ldr	r1, [pc, #196]	@ (800bd00 <RCCEx_PLL2_Config+0x15c>)
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bc3e:	4b30      	ldr	r3, [pc, #192]	@ (800bd00 <RCCEx_PLL2_Config+0x15c>)
 800bc40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc42:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	695b      	ldr	r3, [r3, #20]
 800bc4a:	492d      	ldr	r1, [pc, #180]	@ (800bd00 <RCCEx_PLL2_Config+0x15c>)
 800bc4c:	4313      	orrs	r3, r2
 800bc4e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bc50:	4b2b      	ldr	r3, [pc, #172]	@ (800bd00 <RCCEx_PLL2_Config+0x15c>)
 800bc52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc54:	f023 0220 	bic.w	r2, r3, #32
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	699b      	ldr	r3, [r3, #24]
 800bc5c:	4928      	ldr	r1, [pc, #160]	@ (800bd00 <RCCEx_PLL2_Config+0x15c>)
 800bc5e:	4313      	orrs	r3, r2
 800bc60:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bc62:	4b27      	ldr	r3, [pc, #156]	@ (800bd00 <RCCEx_PLL2_Config+0x15c>)
 800bc64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc66:	4a26      	ldr	r2, [pc, #152]	@ (800bd00 <RCCEx_PLL2_Config+0x15c>)
 800bc68:	f023 0310 	bic.w	r3, r3, #16
 800bc6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bc6e:	4b24      	ldr	r3, [pc, #144]	@ (800bd00 <RCCEx_PLL2_Config+0x15c>)
 800bc70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bc72:	4b24      	ldr	r3, [pc, #144]	@ (800bd04 <RCCEx_PLL2_Config+0x160>)
 800bc74:	4013      	ands	r3, r2
 800bc76:	687a      	ldr	r2, [r7, #4]
 800bc78:	69d2      	ldr	r2, [r2, #28]
 800bc7a:	00d2      	lsls	r2, r2, #3
 800bc7c:	4920      	ldr	r1, [pc, #128]	@ (800bd00 <RCCEx_PLL2_Config+0x15c>)
 800bc7e:	4313      	orrs	r3, r2
 800bc80:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bc82:	4b1f      	ldr	r3, [pc, #124]	@ (800bd00 <RCCEx_PLL2_Config+0x15c>)
 800bc84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc86:	4a1e      	ldr	r2, [pc, #120]	@ (800bd00 <RCCEx_PLL2_Config+0x15c>)
 800bc88:	f043 0310 	orr.w	r3, r3, #16
 800bc8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d106      	bne.n	800bca2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bc94:	4b1a      	ldr	r3, [pc, #104]	@ (800bd00 <RCCEx_PLL2_Config+0x15c>)
 800bc96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc98:	4a19      	ldr	r2, [pc, #100]	@ (800bd00 <RCCEx_PLL2_Config+0x15c>)
 800bc9a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bc9e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bca0:	e00f      	b.n	800bcc2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	2b01      	cmp	r3, #1
 800bca6:	d106      	bne.n	800bcb6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bca8:	4b15      	ldr	r3, [pc, #84]	@ (800bd00 <RCCEx_PLL2_Config+0x15c>)
 800bcaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcac:	4a14      	ldr	r2, [pc, #80]	@ (800bd00 <RCCEx_PLL2_Config+0x15c>)
 800bcae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bcb2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bcb4:	e005      	b.n	800bcc2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bcb6:	4b12      	ldr	r3, [pc, #72]	@ (800bd00 <RCCEx_PLL2_Config+0x15c>)
 800bcb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcba:	4a11      	ldr	r2, [pc, #68]	@ (800bd00 <RCCEx_PLL2_Config+0x15c>)
 800bcbc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bcc0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bcc2:	4b0f      	ldr	r3, [pc, #60]	@ (800bd00 <RCCEx_PLL2_Config+0x15c>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	4a0e      	ldr	r2, [pc, #56]	@ (800bd00 <RCCEx_PLL2_Config+0x15c>)
 800bcc8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bccc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bcce:	f7f9 fbdf 	bl	8005490 <HAL_GetTick>
 800bcd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bcd4:	e008      	b.n	800bce8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bcd6:	f7f9 fbdb 	bl	8005490 <HAL_GetTick>
 800bcda:	4602      	mov	r2, r0
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	1ad3      	subs	r3, r2, r3
 800bce0:	2b02      	cmp	r3, #2
 800bce2:	d901      	bls.n	800bce8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bce4:	2303      	movs	r3, #3
 800bce6:	e006      	b.n	800bcf6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bce8:	4b05      	ldr	r3, [pc, #20]	@ (800bd00 <RCCEx_PLL2_Config+0x15c>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d0f0      	beq.n	800bcd6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bcf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3710      	adds	r7, #16
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}
 800bcfe:	bf00      	nop
 800bd00:	58024400 	.word	0x58024400
 800bd04:	ffff0007 	.word	0xffff0007

0800bd08 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b084      	sub	sp, #16
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bd12:	2300      	movs	r3, #0
 800bd14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bd16:	4b53      	ldr	r3, [pc, #332]	@ (800be64 <RCCEx_PLL3_Config+0x15c>)
 800bd18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd1a:	f003 0303 	and.w	r3, r3, #3
 800bd1e:	2b03      	cmp	r3, #3
 800bd20:	d101      	bne.n	800bd26 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bd22:	2301      	movs	r3, #1
 800bd24:	e099      	b.n	800be5a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bd26:	4b4f      	ldr	r3, [pc, #316]	@ (800be64 <RCCEx_PLL3_Config+0x15c>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	4a4e      	ldr	r2, [pc, #312]	@ (800be64 <RCCEx_PLL3_Config+0x15c>)
 800bd2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bd30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bd32:	f7f9 fbad 	bl	8005490 <HAL_GetTick>
 800bd36:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bd38:	e008      	b.n	800bd4c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bd3a:	f7f9 fba9 	bl	8005490 <HAL_GetTick>
 800bd3e:	4602      	mov	r2, r0
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	1ad3      	subs	r3, r2, r3
 800bd44:	2b02      	cmp	r3, #2
 800bd46:	d901      	bls.n	800bd4c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bd48:	2303      	movs	r3, #3
 800bd4a:	e086      	b.n	800be5a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bd4c:	4b45      	ldr	r3, [pc, #276]	@ (800be64 <RCCEx_PLL3_Config+0x15c>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d1f0      	bne.n	800bd3a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bd58:	4b42      	ldr	r3, [pc, #264]	@ (800be64 <RCCEx_PLL3_Config+0x15c>)
 800bd5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd5c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	051b      	lsls	r3, r3, #20
 800bd66:	493f      	ldr	r1, [pc, #252]	@ (800be64 <RCCEx_PLL3_Config+0x15c>)
 800bd68:	4313      	orrs	r3, r2
 800bd6a:	628b      	str	r3, [r1, #40]	@ 0x28
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	685b      	ldr	r3, [r3, #4]
 800bd70:	3b01      	subs	r3, #1
 800bd72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	689b      	ldr	r3, [r3, #8]
 800bd7a:	3b01      	subs	r3, #1
 800bd7c:	025b      	lsls	r3, r3, #9
 800bd7e:	b29b      	uxth	r3, r3
 800bd80:	431a      	orrs	r2, r3
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	68db      	ldr	r3, [r3, #12]
 800bd86:	3b01      	subs	r3, #1
 800bd88:	041b      	lsls	r3, r3, #16
 800bd8a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bd8e:	431a      	orrs	r2, r3
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	691b      	ldr	r3, [r3, #16]
 800bd94:	3b01      	subs	r3, #1
 800bd96:	061b      	lsls	r3, r3, #24
 800bd98:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bd9c:	4931      	ldr	r1, [pc, #196]	@ (800be64 <RCCEx_PLL3_Config+0x15c>)
 800bd9e:	4313      	orrs	r3, r2
 800bda0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bda2:	4b30      	ldr	r3, [pc, #192]	@ (800be64 <RCCEx_PLL3_Config+0x15c>)
 800bda4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bda6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	695b      	ldr	r3, [r3, #20]
 800bdae:	492d      	ldr	r1, [pc, #180]	@ (800be64 <RCCEx_PLL3_Config+0x15c>)
 800bdb0:	4313      	orrs	r3, r2
 800bdb2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bdb4:	4b2b      	ldr	r3, [pc, #172]	@ (800be64 <RCCEx_PLL3_Config+0x15c>)
 800bdb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdb8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	699b      	ldr	r3, [r3, #24]
 800bdc0:	4928      	ldr	r1, [pc, #160]	@ (800be64 <RCCEx_PLL3_Config+0x15c>)
 800bdc2:	4313      	orrs	r3, r2
 800bdc4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bdc6:	4b27      	ldr	r3, [pc, #156]	@ (800be64 <RCCEx_PLL3_Config+0x15c>)
 800bdc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdca:	4a26      	ldr	r2, [pc, #152]	@ (800be64 <RCCEx_PLL3_Config+0x15c>)
 800bdcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bdd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bdd2:	4b24      	ldr	r3, [pc, #144]	@ (800be64 <RCCEx_PLL3_Config+0x15c>)
 800bdd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bdd6:	4b24      	ldr	r3, [pc, #144]	@ (800be68 <RCCEx_PLL3_Config+0x160>)
 800bdd8:	4013      	ands	r3, r2
 800bdda:	687a      	ldr	r2, [r7, #4]
 800bddc:	69d2      	ldr	r2, [r2, #28]
 800bdde:	00d2      	lsls	r2, r2, #3
 800bde0:	4920      	ldr	r1, [pc, #128]	@ (800be64 <RCCEx_PLL3_Config+0x15c>)
 800bde2:	4313      	orrs	r3, r2
 800bde4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bde6:	4b1f      	ldr	r3, [pc, #124]	@ (800be64 <RCCEx_PLL3_Config+0x15c>)
 800bde8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdea:	4a1e      	ldr	r2, [pc, #120]	@ (800be64 <RCCEx_PLL3_Config+0x15c>)
 800bdec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bdf0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d106      	bne.n	800be06 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bdf8:	4b1a      	ldr	r3, [pc, #104]	@ (800be64 <RCCEx_PLL3_Config+0x15c>)
 800bdfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdfc:	4a19      	ldr	r2, [pc, #100]	@ (800be64 <RCCEx_PLL3_Config+0x15c>)
 800bdfe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800be02:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800be04:	e00f      	b.n	800be26 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	2b01      	cmp	r3, #1
 800be0a:	d106      	bne.n	800be1a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800be0c:	4b15      	ldr	r3, [pc, #84]	@ (800be64 <RCCEx_PLL3_Config+0x15c>)
 800be0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be10:	4a14      	ldr	r2, [pc, #80]	@ (800be64 <RCCEx_PLL3_Config+0x15c>)
 800be12:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800be16:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800be18:	e005      	b.n	800be26 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800be1a:	4b12      	ldr	r3, [pc, #72]	@ (800be64 <RCCEx_PLL3_Config+0x15c>)
 800be1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be1e:	4a11      	ldr	r2, [pc, #68]	@ (800be64 <RCCEx_PLL3_Config+0x15c>)
 800be20:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800be24:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800be26:	4b0f      	ldr	r3, [pc, #60]	@ (800be64 <RCCEx_PLL3_Config+0x15c>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	4a0e      	ldr	r2, [pc, #56]	@ (800be64 <RCCEx_PLL3_Config+0x15c>)
 800be2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800be30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be32:	f7f9 fb2d 	bl	8005490 <HAL_GetTick>
 800be36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800be38:	e008      	b.n	800be4c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800be3a:	f7f9 fb29 	bl	8005490 <HAL_GetTick>
 800be3e:	4602      	mov	r2, r0
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	1ad3      	subs	r3, r2, r3
 800be44:	2b02      	cmp	r3, #2
 800be46:	d901      	bls.n	800be4c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800be48:	2303      	movs	r3, #3
 800be4a:	e006      	b.n	800be5a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800be4c:	4b05      	ldr	r3, [pc, #20]	@ (800be64 <RCCEx_PLL3_Config+0x15c>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800be54:	2b00      	cmp	r3, #0
 800be56:	d0f0      	beq.n	800be3a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800be58:	7bfb      	ldrb	r3, [r7, #15]
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3710      	adds	r7, #16
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}
 800be62:	bf00      	nop
 800be64:	58024400 	.word	0x58024400
 800be68:	ffff0007 	.word	0xffff0007

0800be6c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b084      	sub	sp, #16
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d101      	bne.n	800be7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800be7a:	2301      	movs	r3, #1
 800be7c:	e10f      	b.n	800c09e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2200      	movs	r2, #0
 800be82:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	4a87      	ldr	r2, [pc, #540]	@ (800c0a8 <HAL_SPI_Init+0x23c>)
 800be8a:	4293      	cmp	r3, r2
 800be8c:	d00f      	beq.n	800beae <HAL_SPI_Init+0x42>
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	4a86      	ldr	r2, [pc, #536]	@ (800c0ac <HAL_SPI_Init+0x240>)
 800be94:	4293      	cmp	r3, r2
 800be96:	d00a      	beq.n	800beae <HAL_SPI_Init+0x42>
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	4a84      	ldr	r2, [pc, #528]	@ (800c0b0 <HAL_SPI_Init+0x244>)
 800be9e:	4293      	cmp	r3, r2
 800bea0:	d005      	beq.n	800beae <HAL_SPI_Init+0x42>
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	68db      	ldr	r3, [r3, #12]
 800bea6:	2b0f      	cmp	r3, #15
 800bea8:	d901      	bls.n	800beae <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800beaa:	2301      	movs	r3, #1
 800beac:	e0f7      	b.n	800c09e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f001 f968 	bl	800d184 <SPI_GetPacketSize>
 800beb4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	4a7b      	ldr	r2, [pc, #492]	@ (800c0a8 <HAL_SPI_Init+0x23c>)
 800bebc:	4293      	cmp	r3, r2
 800bebe:	d00c      	beq.n	800beda <HAL_SPI_Init+0x6e>
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	4a79      	ldr	r2, [pc, #484]	@ (800c0ac <HAL_SPI_Init+0x240>)
 800bec6:	4293      	cmp	r3, r2
 800bec8:	d007      	beq.n	800beda <HAL_SPI_Init+0x6e>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	4a78      	ldr	r2, [pc, #480]	@ (800c0b0 <HAL_SPI_Init+0x244>)
 800bed0:	4293      	cmp	r3, r2
 800bed2:	d002      	beq.n	800beda <HAL_SPI_Init+0x6e>
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	2b08      	cmp	r3, #8
 800bed8:	d811      	bhi.n	800befe <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bede:	4a72      	ldr	r2, [pc, #456]	@ (800c0a8 <HAL_SPI_Init+0x23c>)
 800bee0:	4293      	cmp	r3, r2
 800bee2:	d009      	beq.n	800bef8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	4a70      	ldr	r2, [pc, #448]	@ (800c0ac <HAL_SPI_Init+0x240>)
 800beea:	4293      	cmp	r3, r2
 800beec:	d004      	beq.n	800bef8 <HAL_SPI_Init+0x8c>
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	4a6f      	ldr	r2, [pc, #444]	@ (800c0b0 <HAL_SPI_Init+0x244>)
 800bef4:	4293      	cmp	r3, r2
 800bef6:	d104      	bne.n	800bf02 <HAL_SPI_Init+0x96>
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	2b10      	cmp	r3, #16
 800befc:	d901      	bls.n	800bf02 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800befe:	2301      	movs	r3, #1
 800bf00:	e0cd      	b.n	800c09e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bf08:	b2db      	uxtb	r3, r3
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d106      	bne.n	800bf1c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2200      	movs	r2, #0
 800bf12:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f7f5 fffe 	bl	8001f18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2202      	movs	r2, #2
 800bf20:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	681a      	ldr	r2, [r3, #0]
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f022 0201 	bic.w	r2, r2, #1
 800bf32:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	689b      	ldr	r3, [r3, #8]
 800bf3a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800bf3e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	699b      	ldr	r3, [r3, #24]
 800bf44:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bf48:	d119      	bne.n	800bf7e <HAL_SPI_Init+0x112>
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	685b      	ldr	r3, [r3, #4]
 800bf4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bf52:	d103      	bne.n	800bf5c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d008      	beq.n	800bf6e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d10c      	bne.n	800bf7e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bf68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bf6c:	d107      	bne.n	800bf7e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	681a      	ldr	r2, [r3, #0]
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800bf7c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	685b      	ldr	r3, [r3, #4]
 800bf82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d00f      	beq.n	800bfaa <HAL_SPI_Init+0x13e>
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	68db      	ldr	r3, [r3, #12]
 800bf8e:	2b06      	cmp	r3, #6
 800bf90:	d90b      	bls.n	800bfaa <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	430a      	orrs	r2, r1
 800bfa6:	601a      	str	r2, [r3, #0]
 800bfa8:	e007      	b.n	800bfba <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	681a      	ldr	r2, [r3, #0]
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bfb8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	69da      	ldr	r2, [r3, #28]
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfc2:	431a      	orrs	r2, r3
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	431a      	orrs	r2, r3
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfcc:	ea42 0103 	orr.w	r1, r2, r3
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	68da      	ldr	r2, [r3, #12]
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	430a      	orrs	r2, r1
 800bfda:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfe4:	431a      	orrs	r2, r3
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfea:	431a      	orrs	r2, r3
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	699b      	ldr	r3, [r3, #24]
 800bff0:	431a      	orrs	r2, r3
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	691b      	ldr	r3, [r3, #16]
 800bff6:	431a      	orrs	r2, r3
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	695b      	ldr	r3, [r3, #20]
 800bffc:	431a      	orrs	r2, r3
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6a1b      	ldr	r3, [r3, #32]
 800c002:	431a      	orrs	r2, r3
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	685b      	ldr	r3, [r3, #4]
 800c008:	431a      	orrs	r2, r3
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c00e:	431a      	orrs	r2, r3
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	689b      	ldr	r3, [r3, #8]
 800c014:	431a      	orrs	r2, r3
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c01a:	ea42 0103 	orr.w	r1, r2, r3
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	430a      	orrs	r2, r1
 800c028:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	685b      	ldr	r3, [r3, #4]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d113      	bne.n	800c05a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	689b      	ldr	r3, [r3, #8]
 800c038:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c044:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	689b      	ldr	r3, [r3, #8]
 800c04c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c058:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	f022 0201 	bic.w	r2, r2, #1
 800c068:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	685b      	ldr	r3, [r3, #4]
 800c06e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c072:	2b00      	cmp	r3, #0
 800c074:	d00a      	beq.n	800c08c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	68db      	ldr	r3, [r3, #12]
 800c07c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	430a      	orrs	r2, r1
 800c08a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2200      	movs	r2, #0
 800c090:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2201      	movs	r2, #1
 800c098:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800c09c:	2300      	movs	r3, #0
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3710      	adds	r7, #16
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}
 800c0a6:	bf00      	nop
 800c0a8:	40013000 	.word	0x40013000
 800c0ac:	40003800 	.word	0x40003800
 800c0b0:	40003c00 	.word	0x40003c00

0800c0b4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b088      	sub	sp, #32
 800c0b8:	af02      	add	r7, sp, #8
 800c0ba:	60f8      	str	r0, [r7, #12]
 800c0bc:	60b9      	str	r1, [r7, #8]
 800c0be:	603b      	str	r3, [r7, #0]
 800c0c0:	4613      	mov	r3, r2
 800c0c2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	3320      	adds	r3, #32
 800c0ca:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c0cc:	f7f9 f9e0 	bl	8005490 <HAL_GetTick>
 800c0d0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c0d8:	b2db      	uxtb	r3, r3
 800c0da:	2b01      	cmp	r3, #1
 800c0dc:	d001      	beq.n	800c0e2 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800c0de:	2302      	movs	r3, #2
 800c0e0:	e1d1      	b.n	800c486 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d002      	beq.n	800c0ee <HAL_SPI_Transmit+0x3a>
 800c0e8:	88fb      	ldrh	r3, [r7, #6]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d101      	bne.n	800c0f2 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800c0ee:	2301      	movs	r3, #1
 800c0f0:	e1c9      	b.n	800c486 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800c0f8:	2b01      	cmp	r3, #1
 800c0fa:	d101      	bne.n	800c100 <HAL_SPI_Transmit+0x4c>
 800c0fc:	2302      	movs	r3, #2
 800c0fe:	e1c2      	b.n	800c486 <HAL_SPI_Transmit+0x3d2>
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	2201      	movs	r2, #1
 800c104:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	2203      	movs	r2, #3
 800c10c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	2200      	movs	r2, #0
 800c114:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	68ba      	ldr	r2, [r7, #8]
 800c11c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	88fa      	ldrh	r2, [r7, #6]
 800c122:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	88fa      	ldrh	r2, [r7, #6]
 800c12a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	2200      	movs	r2, #0
 800c132:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	2200      	movs	r2, #0
 800c138:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	2200      	movs	r2, #0
 800c140:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	2200      	movs	r2, #0
 800c148:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	2200      	movs	r2, #0
 800c14e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	689b      	ldr	r3, [r3, #8]
 800c154:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800c158:	d108      	bne.n	800c16c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	681a      	ldr	r2, [r3, #0]
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c168:	601a      	str	r2, [r3, #0]
 800c16a:	e009      	b.n	800c180 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	68db      	ldr	r3, [r3, #12]
 800c172:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800c17e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	685a      	ldr	r2, [r3, #4]
 800c186:	4b96      	ldr	r3, [pc, #600]	@ (800c3e0 <HAL_SPI_Transmit+0x32c>)
 800c188:	4013      	ands	r3, r2
 800c18a:	88f9      	ldrh	r1, [r7, #6]
 800c18c:	68fa      	ldr	r2, [r7, #12]
 800c18e:	6812      	ldr	r2, [r2, #0]
 800c190:	430b      	orrs	r3, r1
 800c192:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	681a      	ldr	r2, [r3, #0]
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f042 0201 	orr.w	r2, r2, #1
 800c1a2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	685b      	ldr	r3, [r3, #4]
 800c1a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c1ac:	d107      	bne.n	800c1be <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	681a      	ldr	r2, [r3, #0]
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c1bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	68db      	ldr	r3, [r3, #12]
 800c1c2:	2b0f      	cmp	r3, #15
 800c1c4:	d947      	bls.n	800c256 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c1c6:	e03f      	b.n	800c248 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	695b      	ldr	r3, [r3, #20]
 800c1ce:	f003 0302 	and.w	r3, r3, #2
 800c1d2:	2b02      	cmp	r3, #2
 800c1d4:	d114      	bne.n	800c200 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	6812      	ldr	r2, [r2, #0]
 800c1e0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c1e6:	1d1a      	adds	r2, r3, #4
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c1f2:	b29b      	uxth	r3, r3
 800c1f4:	3b01      	subs	r3, #1
 800c1f6:	b29a      	uxth	r2, r3
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c1fe:	e023      	b.n	800c248 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c200:	f7f9 f946 	bl	8005490 <HAL_GetTick>
 800c204:	4602      	mov	r2, r0
 800c206:	693b      	ldr	r3, [r7, #16]
 800c208:	1ad3      	subs	r3, r2, r3
 800c20a:	683a      	ldr	r2, [r7, #0]
 800c20c:	429a      	cmp	r2, r3
 800c20e:	d803      	bhi.n	800c218 <HAL_SPI_Transmit+0x164>
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c216:	d102      	bne.n	800c21e <HAL_SPI_Transmit+0x16a>
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d114      	bne.n	800c248 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c21e:	68f8      	ldr	r0, [r7, #12]
 800c220:	f000 fee2 	bl	800cfe8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c22a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	2201      	movs	r2, #1
 800c238:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	2200      	movs	r2, #0
 800c240:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c244:	2303      	movs	r3, #3
 800c246:	e11e      	b.n	800c486 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c24e:	b29b      	uxth	r3, r3
 800c250:	2b00      	cmp	r3, #0
 800c252:	d1b9      	bne.n	800c1c8 <HAL_SPI_Transmit+0x114>
 800c254:	e0f1      	b.n	800c43a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	68db      	ldr	r3, [r3, #12]
 800c25a:	2b07      	cmp	r3, #7
 800c25c:	f240 80e6 	bls.w	800c42c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c260:	e05d      	b.n	800c31e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	695b      	ldr	r3, [r3, #20]
 800c268:	f003 0302 	and.w	r3, r3, #2
 800c26c:	2b02      	cmp	r3, #2
 800c26e:	d132      	bne.n	800c2d6 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c276:	b29b      	uxth	r3, r3
 800c278:	2b01      	cmp	r3, #1
 800c27a:	d918      	bls.n	800c2ae <HAL_SPI_Transmit+0x1fa>
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c280:	2b00      	cmp	r3, #0
 800c282:	d014      	beq.n	800c2ae <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	6812      	ldr	r2, [r2, #0]
 800c28e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c294:	1d1a      	adds	r2, r3, #4
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c2a0:	b29b      	uxth	r3, r3
 800c2a2:	3b02      	subs	r3, #2
 800c2a4:	b29a      	uxth	r2, r3
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c2ac:	e037      	b.n	800c31e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c2b2:	881a      	ldrh	r2, [r3, #0]
 800c2b4:	697b      	ldr	r3, [r7, #20]
 800c2b6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c2bc:	1c9a      	adds	r2, r3, #2
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c2c8:	b29b      	uxth	r3, r3
 800c2ca:	3b01      	subs	r3, #1
 800c2cc:	b29a      	uxth	r2, r3
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c2d4:	e023      	b.n	800c31e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c2d6:	f7f9 f8db 	bl	8005490 <HAL_GetTick>
 800c2da:	4602      	mov	r2, r0
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	1ad3      	subs	r3, r2, r3
 800c2e0:	683a      	ldr	r2, [r7, #0]
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	d803      	bhi.n	800c2ee <HAL_SPI_Transmit+0x23a>
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2ec:	d102      	bne.n	800c2f4 <HAL_SPI_Transmit+0x240>
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d114      	bne.n	800c31e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c2f4:	68f8      	ldr	r0, [r7, #12]
 800c2f6:	f000 fe77 	bl	800cfe8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c300:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	2201      	movs	r2, #1
 800c30e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	2200      	movs	r2, #0
 800c316:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c31a:	2303      	movs	r3, #3
 800c31c:	e0b3      	b.n	800c486 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c324:	b29b      	uxth	r3, r3
 800c326:	2b00      	cmp	r3, #0
 800c328:	d19b      	bne.n	800c262 <HAL_SPI_Transmit+0x1ae>
 800c32a:	e086      	b.n	800c43a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	695b      	ldr	r3, [r3, #20]
 800c332:	f003 0302 	and.w	r3, r3, #2
 800c336:	2b02      	cmp	r3, #2
 800c338:	d154      	bne.n	800c3e4 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c340:	b29b      	uxth	r3, r3
 800c342:	2b03      	cmp	r3, #3
 800c344:	d918      	bls.n	800c378 <HAL_SPI_Transmit+0x2c4>
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c34a:	2b40      	cmp	r3, #64	@ 0x40
 800c34c:	d914      	bls.n	800c378 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	6812      	ldr	r2, [r2, #0]
 800c358:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c35e:	1d1a      	adds	r2, r3, #4
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c36a:	b29b      	uxth	r3, r3
 800c36c:	3b04      	subs	r3, #4
 800c36e:	b29a      	uxth	r2, r3
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c376:	e059      	b.n	800c42c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c37e:	b29b      	uxth	r3, r3
 800c380:	2b01      	cmp	r3, #1
 800c382:	d917      	bls.n	800c3b4 <HAL_SPI_Transmit+0x300>
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d013      	beq.n	800c3b4 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c390:	881a      	ldrh	r2, [r3, #0]
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c39a:	1c9a      	adds	r2, r3, #2
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c3a6:	b29b      	uxth	r3, r3
 800c3a8:	3b02      	subs	r3, #2
 800c3aa:	b29a      	uxth	r2, r3
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c3b2:	e03b      	b.n	800c42c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	3320      	adds	r3, #32
 800c3be:	7812      	ldrb	r2, [r2, #0]
 800c3c0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c3c6:	1c5a      	adds	r2, r3, #1
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c3d2:	b29b      	uxth	r3, r3
 800c3d4:	3b01      	subs	r3, #1
 800c3d6:	b29a      	uxth	r2, r3
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c3de:	e025      	b.n	800c42c <HAL_SPI_Transmit+0x378>
 800c3e0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c3e4:	f7f9 f854 	bl	8005490 <HAL_GetTick>
 800c3e8:	4602      	mov	r2, r0
 800c3ea:	693b      	ldr	r3, [r7, #16]
 800c3ec:	1ad3      	subs	r3, r2, r3
 800c3ee:	683a      	ldr	r2, [r7, #0]
 800c3f0:	429a      	cmp	r2, r3
 800c3f2:	d803      	bhi.n	800c3fc <HAL_SPI_Transmit+0x348>
 800c3f4:	683b      	ldr	r3, [r7, #0]
 800c3f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3fa:	d102      	bne.n	800c402 <HAL_SPI_Transmit+0x34e>
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d114      	bne.n	800c42c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c402:	68f8      	ldr	r0, [r7, #12]
 800c404:	f000 fdf0 	bl	800cfe8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c40e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	2201      	movs	r2, #1
 800c41c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	2200      	movs	r2, #0
 800c424:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c428:	2303      	movs	r3, #3
 800c42a:	e02c      	b.n	800c486 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c432:	b29b      	uxth	r3, r3
 800c434:	2b00      	cmp	r3, #0
 800c436:	f47f af79 	bne.w	800c32c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800c43a:	693b      	ldr	r3, [r7, #16]
 800c43c:	9300      	str	r3, [sp, #0]
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	2200      	movs	r2, #0
 800c442:	2108      	movs	r1, #8
 800c444:	68f8      	ldr	r0, [r7, #12]
 800c446:	f000 fe6f 	bl	800d128 <SPI_WaitOnFlagUntilTimeout>
 800c44a:	4603      	mov	r3, r0
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d007      	beq.n	800c460 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c456:	f043 0220 	orr.w	r2, r3, #32
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c460:	68f8      	ldr	r0, [r7, #12]
 800c462:	f000 fdc1 	bl	800cfe8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	2201      	movs	r2, #1
 800c46a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	2200      	movs	r2, #0
 800c472:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d001      	beq.n	800c484 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800c480:	2301      	movs	r3, #1
 800c482:	e000      	b.n	800c486 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800c484:	2300      	movs	r3, #0
  }
}
 800c486:	4618      	mov	r0, r3
 800c488:	3718      	adds	r7, #24
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}
 800c48e:	bf00      	nop

0800c490 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b088      	sub	sp, #32
 800c494:	af00      	add	r7, sp, #0
 800c496:	60f8      	str	r0, [r7, #12]
 800c498:	60b9      	str	r1, [r7, #8]
 800c49a:	603b      	str	r3, [r7, #0]
 800c49c:	4613      	mov	r3, r2
 800c49e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4a4:	095b      	lsrs	r3, r3, #5
 800c4a6:	b29b      	uxth	r3, r3
 800c4a8:	3301      	adds	r3, #1
 800c4aa:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	3330      	adds	r3, #48	@ 0x30
 800c4b2:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c4b4:	f7f8 ffec 	bl	8005490 <HAL_GetTick>
 800c4b8:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c4c0:	b2db      	uxtb	r3, r3
 800c4c2:	2b01      	cmp	r3, #1
 800c4c4:	d001      	beq.n	800c4ca <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800c4c6:	2302      	movs	r3, #2
 800c4c8:	e250      	b.n	800c96c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c4ca:	68bb      	ldr	r3, [r7, #8]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d002      	beq.n	800c4d6 <HAL_SPI_Receive+0x46>
 800c4d0:	88fb      	ldrh	r3, [r7, #6]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d101      	bne.n	800c4da <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	e248      	b.n	800c96c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800c4e0:	2b01      	cmp	r3, #1
 800c4e2:	d101      	bne.n	800c4e8 <HAL_SPI_Receive+0x58>
 800c4e4:	2302      	movs	r3, #2
 800c4e6:	e241      	b.n	800c96c <HAL_SPI_Receive+0x4dc>
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	2201      	movs	r2, #1
 800c4ec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	2204      	movs	r2, #4
 800c4f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	68ba      	ldr	r2, [r7, #8]
 800c504:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	88fa      	ldrh	r2, [r7, #6]
 800c50a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	88fa      	ldrh	r2, [r7, #6]
 800c512:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	2200      	movs	r2, #0
 800c51a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	2200      	movs	r2, #0
 800c520:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	2200      	movs	r2, #0
 800c528:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	2200      	movs	r2, #0
 800c530:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	2200      	movs	r2, #0
 800c536:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	689b      	ldr	r3, [r3, #8]
 800c53c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800c540:	d108      	bne.n	800c554 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	681a      	ldr	r2, [r3, #0]
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c550:	601a      	str	r2, [r3, #0]
 800c552:	e009      	b.n	800c568 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	68db      	ldr	r3, [r3, #12]
 800c55a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800c566:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	685a      	ldr	r2, [r3, #4]
 800c56e:	4b95      	ldr	r3, [pc, #596]	@ (800c7c4 <HAL_SPI_Receive+0x334>)
 800c570:	4013      	ands	r3, r2
 800c572:	88f9      	ldrh	r1, [r7, #6]
 800c574:	68fa      	ldr	r2, [r7, #12]
 800c576:	6812      	ldr	r2, [r2, #0]
 800c578:	430b      	orrs	r3, r1
 800c57a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	681a      	ldr	r2, [r3, #0]
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f042 0201 	orr.w	r2, r2, #1
 800c58a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	685b      	ldr	r3, [r3, #4]
 800c590:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c594:	d107      	bne.n	800c5a6 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	681a      	ldr	r2, [r3, #0]
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c5a4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	68db      	ldr	r3, [r3, #12]
 800c5aa:	2b0f      	cmp	r3, #15
 800c5ac:	d96c      	bls.n	800c688 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c5ae:	e064      	b.n	800c67a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	695b      	ldr	r3, [r3, #20]
 800c5b6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	695b      	ldr	r3, [r3, #20]
 800c5be:	f003 0301 	and.w	r3, r3, #1
 800c5c2:	2b01      	cmp	r3, #1
 800c5c4:	d114      	bne.n	800c5f0 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	681a      	ldr	r2, [r3, #0]
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c5ce:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c5d0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c5d6:	1d1a      	adds	r2, r3, #4
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c5e2:	b29b      	uxth	r3, r3
 800c5e4:	3b01      	subs	r3, #1
 800c5e6:	b29a      	uxth	r2, r3
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c5ee:	e044      	b.n	800c67a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c5f6:	b29b      	uxth	r3, r3
 800c5f8:	8bfa      	ldrh	r2, [r7, #30]
 800c5fa:	429a      	cmp	r2, r3
 800c5fc:	d919      	bls.n	800c632 <HAL_SPI_Receive+0x1a2>
 800c5fe:	693b      	ldr	r3, [r7, #16]
 800c600:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c604:	2b00      	cmp	r3, #0
 800c606:	d014      	beq.n	800c632 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	681a      	ldr	r2, [r3, #0]
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c610:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c612:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c618:	1d1a      	adds	r2, r3, #4
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c624:	b29b      	uxth	r3, r3
 800c626:	3b01      	subs	r3, #1
 800c628:	b29a      	uxth	r2, r3
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c630:	e023      	b.n	800c67a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c632:	f7f8 ff2d 	bl	8005490 <HAL_GetTick>
 800c636:	4602      	mov	r2, r0
 800c638:	697b      	ldr	r3, [r7, #20]
 800c63a:	1ad3      	subs	r3, r2, r3
 800c63c:	683a      	ldr	r2, [r7, #0]
 800c63e:	429a      	cmp	r2, r3
 800c640:	d803      	bhi.n	800c64a <HAL_SPI_Receive+0x1ba>
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c648:	d102      	bne.n	800c650 <HAL_SPI_Receive+0x1c0>
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d114      	bne.n	800c67a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c650:	68f8      	ldr	r0, [r7, #12]
 800c652:	f000 fcc9 	bl	800cfe8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c65c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	2201      	movs	r2, #1
 800c66a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	2200      	movs	r2, #0
 800c672:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c676:	2303      	movs	r3, #3
 800c678:	e178      	b.n	800c96c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c680:	b29b      	uxth	r3, r3
 800c682:	2b00      	cmp	r3, #0
 800c684:	d194      	bne.n	800c5b0 <HAL_SPI_Receive+0x120>
 800c686:	e15e      	b.n	800c946 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	68db      	ldr	r3, [r3, #12]
 800c68c:	2b07      	cmp	r3, #7
 800c68e:	f240 8153 	bls.w	800c938 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c692:	e08f      	b.n	800c7b4 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	695b      	ldr	r3, [r3, #20]
 800c69a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	695b      	ldr	r3, [r3, #20]
 800c6a2:	f003 0301 	and.w	r3, r3, #1
 800c6a6:	2b01      	cmp	r3, #1
 800c6a8:	d114      	bne.n	800c6d4 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c6ae:	69ba      	ldr	r2, [r7, #24]
 800c6b0:	8812      	ldrh	r2, [r2, #0]
 800c6b2:	b292      	uxth	r2, r2
 800c6b4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c6ba:	1c9a      	adds	r2, r3, #2
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c6c6:	b29b      	uxth	r3, r3
 800c6c8:	3b01      	subs	r3, #1
 800c6ca:	b29a      	uxth	r2, r3
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c6d2:	e06f      	b.n	800c7b4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c6da:	b29b      	uxth	r3, r3
 800c6dc:	8bfa      	ldrh	r2, [r7, #30]
 800c6de:	429a      	cmp	r2, r3
 800c6e0:	d924      	bls.n	800c72c <HAL_SPI_Receive+0x29c>
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d01f      	beq.n	800c72c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c6f0:	69ba      	ldr	r2, [r7, #24]
 800c6f2:	8812      	ldrh	r2, [r2, #0]
 800c6f4:	b292      	uxth	r2, r2
 800c6f6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c6fc:	1c9a      	adds	r2, r3, #2
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c706:	69ba      	ldr	r2, [r7, #24]
 800c708:	8812      	ldrh	r2, [r2, #0]
 800c70a:	b292      	uxth	r2, r2
 800c70c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c712:	1c9a      	adds	r2, r3, #2
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c71e:	b29b      	uxth	r3, r3
 800c720:	3b02      	subs	r3, #2
 800c722:	b29a      	uxth	r2, r3
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c72a:	e043      	b.n	800c7b4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c732:	b29b      	uxth	r3, r3
 800c734:	2b01      	cmp	r3, #1
 800c736:	d119      	bne.n	800c76c <HAL_SPI_Receive+0x2dc>
 800c738:	693b      	ldr	r3, [r7, #16]
 800c73a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d014      	beq.n	800c76c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c746:	69ba      	ldr	r2, [r7, #24]
 800c748:	8812      	ldrh	r2, [r2, #0]
 800c74a:	b292      	uxth	r2, r2
 800c74c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c752:	1c9a      	adds	r2, r3, #2
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c75e:	b29b      	uxth	r3, r3
 800c760:	3b01      	subs	r3, #1
 800c762:	b29a      	uxth	r2, r3
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c76a:	e023      	b.n	800c7b4 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c76c:	f7f8 fe90 	bl	8005490 <HAL_GetTick>
 800c770:	4602      	mov	r2, r0
 800c772:	697b      	ldr	r3, [r7, #20]
 800c774:	1ad3      	subs	r3, r2, r3
 800c776:	683a      	ldr	r2, [r7, #0]
 800c778:	429a      	cmp	r2, r3
 800c77a:	d803      	bhi.n	800c784 <HAL_SPI_Receive+0x2f4>
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c782:	d102      	bne.n	800c78a <HAL_SPI_Receive+0x2fa>
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d114      	bne.n	800c7b4 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c78a:	68f8      	ldr	r0, [r7, #12]
 800c78c:	f000 fc2c 	bl	800cfe8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c796:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	2201      	movs	r2, #1
 800c7a4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c7b0:	2303      	movs	r3, #3
 800c7b2:	e0db      	b.n	800c96c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c7ba:	b29b      	uxth	r3, r3
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	f47f af69 	bne.w	800c694 <HAL_SPI_Receive+0x204>
 800c7c2:	e0c0      	b.n	800c946 <HAL_SPI_Receive+0x4b6>
 800c7c4:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	695b      	ldr	r3, [r3, #20]
 800c7ce:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	695b      	ldr	r3, [r3, #20]
 800c7d6:	f003 0301 	and.w	r3, r3, #1
 800c7da:	2b01      	cmp	r3, #1
 800c7dc:	d117      	bne.n	800c80e <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c7ea:	7812      	ldrb	r2, [r2, #0]
 800c7ec:	b2d2      	uxtb	r2, r2
 800c7ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c7f4:	1c5a      	adds	r2, r3, #1
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c800:	b29b      	uxth	r3, r3
 800c802:	3b01      	subs	r3, #1
 800c804:	b29a      	uxth	r2, r3
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c80c:	e094      	b.n	800c938 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c814:	b29b      	uxth	r3, r3
 800c816:	8bfa      	ldrh	r2, [r7, #30]
 800c818:	429a      	cmp	r2, r3
 800c81a:	d946      	bls.n	800c8aa <HAL_SPI_Receive+0x41a>
 800c81c:	693b      	ldr	r3, [r7, #16]
 800c81e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c822:	2b00      	cmp	r3, #0
 800c824:	d041      	beq.n	800c8aa <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c832:	7812      	ldrb	r2, [r2, #0]
 800c834:	b2d2      	uxtb	r2, r2
 800c836:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c83c:	1c5a      	adds	r2, r3, #1
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c84e:	7812      	ldrb	r2, [r2, #0]
 800c850:	b2d2      	uxtb	r2, r2
 800c852:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c858:	1c5a      	adds	r2, r3, #1
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c86a:	7812      	ldrb	r2, [r2, #0]
 800c86c:	b2d2      	uxtb	r2, r2
 800c86e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c874:	1c5a      	adds	r2, r3, #1
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c886:	7812      	ldrb	r2, [r2, #0]
 800c888:	b2d2      	uxtb	r2, r2
 800c88a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c890:	1c5a      	adds	r2, r3, #1
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c89c:	b29b      	uxth	r3, r3
 800c89e:	3b04      	subs	r3, #4
 800c8a0:	b29a      	uxth	r2, r3
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c8a8:	e046      	b.n	800c938 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c8b0:	b29b      	uxth	r3, r3
 800c8b2:	2b03      	cmp	r3, #3
 800c8b4:	d81c      	bhi.n	800c8f0 <HAL_SPI_Receive+0x460>
 800c8b6:	693b      	ldr	r3, [r7, #16]
 800c8b8:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d017      	beq.n	800c8f0 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c8cc:	7812      	ldrb	r2, [r2, #0]
 800c8ce:	b2d2      	uxtb	r2, r2
 800c8d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c8d6:	1c5a      	adds	r2, r3, #1
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c8e2:	b29b      	uxth	r3, r3
 800c8e4:	3b01      	subs	r3, #1
 800c8e6:	b29a      	uxth	r2, r3
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c8ee:	e023      	b.n	800c938 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c8f0:	f7f8 fdce 	bl	8005490 <HAL_GetTick>
 800c8f4:	4602      	mov	r2, r0
 800c8f6:	697b      	ldr	r3, [r7, #20]
 800c8f8:	1ad3      	subs	r3, r2, r3
 800c8fa:	683a      	ldr	r2, [r7, #0]
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	d803      	bhi.n	800c908 <HAL_SPI_Receive+0x478>
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c906:	d102      	bne.n	800c90e <HAL_SPI_Receive+0x47e>
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d114      	bne.n	800c938 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c90e:	68f8      	ldr	r0, [r7, #12]
 800c910:	f000 fb6a 	bl	800cfe8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c91a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	2201      	movs	r2, #1
 800c928:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	2200      	movs	r2, #0
 800c930:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c934:	2303      	movs	r3, #3
 800c936:	e019      	b.n	800c96c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c93e:	b29b      	uxth	r3, r3
 800c940:	2b00      	cmp	r3, #0
 800c942:	f47f af41 	bne.w	800c7c8 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c946:	68f8      	ldr	r0, [r7, #12]
 800c948:	f000 fb4e 	bl	800cfe8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	2201      	movs	r2, #1
 800c950:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	2200      	movs	r2, #0
 800c958:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c962:	2b00      	cmp	r3, #0
 800c964:	d001      	beq.n	800c96a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800c966:	2301      	movs	r3, #1
 800c968:	e000      	b.n	800c96c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800c96a:	2300      	movs	r3, #0
  }
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	3720      	adds	r7, #32
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}

0800c974 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b08e      	sub	sp, #56	@ 0x38
 800c978:	af02      	add	r7, sp, #8
 800c97a:	60f8      	str	r0, [r7, #12]
 800c97c:	60b9      	str	r1, [r7, #8]
 800c97e:	607a      	str	r2, [r7, #4]
 800c980:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	3320      	adds	r3, #32
 800c988:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	3330      	adds	r3, #48	@ 0x30
 800c990:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c996:	095b      	lsrs	r3, r3, #5
 800c998:	b29b      	uxth	r3, r3
 800c99a:	3301      	adds	r3, #1
 800c99c:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c99e:	f7f8 fd77 	bl	8005490 <HAL_GetTick>
 800c9a2:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800c9a4:	887b      	ldrh	r3, [r7, #2]
 800c9a6:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800c9a8:	887b      	ldrh	r3, [r7, #2]
 800c9aa:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c9b2:	b2db      	uxtb	r3, r3
 800c9b4:	2b01      	cmp	r3, #1
 800c9b6:	d001      	beq.n	800c9bc <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800c9b8:	2302      	movs	r3, #2
 800c9ba:	e310      	b.n	800cfde <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d005      	beq.n	800c9ce <HAL_SPI_TransmitReceive+0x5a>
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d002      	beq.n	800c9ce <HAL_SPI_TransmitReceive+0x5a>
 800c9c8:	887b      	ldrh	r3, [r7, #2]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d101      	bne.n	800c9d2 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	e305      	b.n	800cfde <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800c9d8:	2b01      	cmp	r3, #1
 800c9da:	d101      	bne.n	800c9e0 <HAL_SPI_TransmitReceive+0x6c>
 800c9dc:	2302      	movs	r3, #2
 800c9de:	e2fe      	b.n	800cfde <HAL_SPI_TransmitReceive+0x66a>
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	2201      	movs	r2, #1
 800c9e4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	2205      	movs	r2, #5
 800c9ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	687a      	ldr	r2, [r7, #4]
 800c9fc:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	887a      	ldrh	r2, [r7, #2]
 800ca02:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	887a      	ldrh	r2, [r7, #2]
 800ca0a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	68ba      	ldr	r2, [r7, #8]
 800ca12:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	887a      	ldrh	r2, [r7, #2]
 800ca18:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	887a      	ldrh	r2, [r7, #2]
 800ca20:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	2200      	movs	r2, #0
 800ca28:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	68da      	ldr	r2, [r3, #12]
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800ca3e:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	4a70      	ldr	r2, [pc, #448]	@ (800cc08 <HAL_SPI_TransmitReceive+0x294>)
 800ca46:	4293      	cmp	r3, r2
 800ca48:	d009      	beq.n	800ca5e <HAL_SPI_TransmitReceive+0xea>
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	4a6f      	ldr	r2, [pc, #444]	@ (800cc0c <HAL_SPI_TransmitReceive+0x298>)
 800ca50:	4293      	cmp	r3, r2
 800ca52:	d004      	beq.n	800ca5e <HAL_SPI_TransmitReceive+0xea>
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	4a6d      	ldr	r2, [pc, #436]	@ (800cc10 <HAL_SPI_TransmitReceive+0x29c>)
 800ca5a:	4293      	cmp	r3, r2
 800ca5c:	d102      	bne.n	800ca64 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800ca5e:	2310      	movs	r3, #16
 800ca60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ca62:	e001      	b.n	800ca68 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800ca64:	2308      	movs	r3, #8
 800ca66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	685a      	ldr	r2, [r3, #4]
 800ca6e:	4b69      	ldr	r3, [pc, #420]	@ (800cc14 <HAL_SPI_TransmitReceive+0x2a0>)
 800ca70:	4013      	ands	r3, r2
 800ca72:	8879      	ldrh	r1, [r7, #2]
 800ca74:	68fa      	ldr	r2, [r7, #12]
 800ca76:	6812      	ldr	r2, [r2, #0]
 800ca78:	430b      	orrs	r3, r1
 800ca7a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	681a      	ldr	r2, [r3, #0]
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	f042 0201 	orr.w	r2, r2, #1
 800ca8a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	685b      	ldr	r3, [r3, #4]
 800ca90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ca94:	d107      	bne.n	800caa6 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	681a      	ldr	r2, [r3, #0]
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800caa4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	68db      	ldr	r3, [r3, #12]
 800caaa:	2b0f      	cmp	r3, #15
 800caac:	f240 80a2 	bls.w	800cbf4 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800cab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cab2:	089b      	lsrs	r3, r3, #2
 800cab4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cab6:	e094      	b.n	800cbe2 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	695b      	ldr	r3, [r3, #20]
 800cabe:	f003 0302 	and.w	r3, r3, #2
 800cac2:	2b02      	cmp	r3, #2
 800cac4:	d120      	bne.n	800cb08 <HAL_SPI_TransmitReceive+0x194>
 800cac6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d01d      	beq.n	800cb08 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800cacc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800cace:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800cad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cad2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800cad4:	429a      	cmp	r2, r3
 800cad6:	d217      	bcs.n	800cb08 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	6812      	ldr	r2, [r2, #0]
 800cae2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cae8:	1d1a      	adds	r2, r3, #4
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800caf4:	b29b      	uxth	r3, r3
 800caf6:	3b01      	subs	r3, #1
 800caf8:	b29a      	uxth	r2, r3
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cb06:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	695b      	ldr	r3, [r3, #20]
 800cb0e:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800cb10:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d065      	beq.n	800cbe2 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	695b      	ldr	r3, [r3, #20]
 800cb1c:	f003 0301 	and.w	r3, r3, #1
 800cb20:	2b01      	cmp	r3, #1
 800cb22:	d118      	bne.n	800cb56 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	681a      	ldr	r2, [r3, #0]
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb2c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800cb2e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb34:	1d1a      	adds	r2, r3, #4
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cb40:	b29b      	uxth	r3, r3
 800cb42:	3b01      	subs	r3, #1
 800cb44:	b29a      	uxth	r2, r3
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cb52:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cb54:	e045      	b.n	800cbe2 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800cb56:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800cb58:	8bfb      	ldrh	r3, [r7, #30]
 800cb5a:	429a      	cmp	r2, r3
 800cb5c:	d21d      	bcs.n	800cb9a <HAL_SPI_TransmitReceive+0x226>
 800cb5e:	697b      	ldr	r3, [r7, #20]
 800cb60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d018      	beq.n	800cb9a <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	681a      	ldr	r2, [r3, #0]
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb70:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800cb72:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb78:	1d1a      	adds	r2, r3, #4
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cb84:	b29b      	uxth	r3, r3
 800cb86:	3b01      	subs	r3, #1
 800cb88:	b29a      	uxth	r2, r3
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cb96:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cb98:	e023      	b.n	800cbe2 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cb9a:	f7f8 fc79 	bl	8005490 <HAL_GetTick>
 800cb9e:	4602      	mov	r2, r0
 800cba0:	69bb      	ldr	r3, [r7, #24]
 800cba2:	1ad3      	subs	r3, r2, r3
 800cba4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cba6:	429a      	cmp	r2, r3
 800cba8:	d803      	bhi.n	800cbb2 <HAL_SPI_TransmitReceive+0x23e>
 800cbaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbb0:	d102      	bne.n	800cbb8 <HAL_SPI_TransmitReceive+0x244>
 800cbb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d114      	bne.n	800cbe2 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800cbb8:	68f8      	ldr	r0, [r7, #12]
 800cbba:	f000 fa15 	bl	800cfe8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cbc4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	2201      	movs	r2, #1
 800cbd2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	2200      	movs	r2, #0
 800cbda:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800cbde:	2303      	movs	r3, #3
 800cbe0:	e1fd      	b.n	800cfde <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cbe2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	f47f af67 	bne.w	800cab8 <HAL_SPI_TransmitReceive+0x144>
 800cbea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	f47f af63 	bne.w	800cab8 <HAL_SPI_TransmitReceive+0x144>
 800cbf2:	e1ce      	b.n	800cf92 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	68db      	ldr	r3, [r3, #12]
 800cbf8:	2b07      	cmp	r3, #7
 800cbfa:	f240 81c2 	bls.w	800cf82 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800cbfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc00:	085b      	lsrs	r3, r3, #1
 800cc02:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cc04:	e0c9      	b.n	800cd9a <HAL_SPI_TransmitReceive+0x426>
 800cc06:	bf00      	nop
 800cc08:	40013000 	.word	0x40013000
 800cc0c:	40003800 	.word	0x40003800
 800cc10:	40003c00 	.word	0x40003c00
 800cc14:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	695b      	ldr	r3, [r3, #20]
 800cc1e:	f003 0302 	and.w	r3, r3, #2
 800cc22:	2b02      	cmp	r3, #2
 800cc24:	d11f      	bne.n	800cc66 <HAL_SPI_TransmitReceive+0x2f2>
 800cc26:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d01c      	beq.n	800cc66 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800cc2c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800cc2e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800cc30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc32:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800cc34:	429a      	cmp	r2, r3
 800cc36:	d216      	bcs.n	800cc66 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cc3c:	881a      	ldrh	r2, [r3, #0]
 800cc3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc40:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cc46:	1c9a      	adds	r2, r3, #2
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cc52:	b29b      	uxth	r3, r3
 800cc54:	3b01      	subs	r3, #1
 800cc56:	b29a      	uxth	r2, r3
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cc64:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	695b      	ldr	r3, [r3, #20]
 800cc6c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800cc6e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	f000 8092 	beq.w	800cd9a <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	695b      	ldr	r3, [r3, #20]
 800cc7c:	f003 0301 	and.w	r3, r3, #1
 800cc80:	2b01      	cmp	r3, #1
 800cc82:	d118      	bne.n	800ccb6 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc88:	6a3a      	ldr	r2, [r7, #32]
 800cc8a:	8812      	ldrh	r2, [r2, #0]
 800cc8c:	b292      	uxth	r2, r2
 800cc8e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc94:	1c9a      	adds	r2, r3, #2
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cca0:	b29b      	uxth	r3, r3
 800cca2:	3b01      	subs	r3, #1
 800cca4:	b29a      	uxth	r2, r3
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ccb2:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ccb4:	e071      	b.n	800cd9a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ccb6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ccb8:	8bfb      	ldrh	r3, [r7, #30]
 800ccba:	429a      	cmp	r2, r3
 800ccbc:	d228      	bcs.n	800cd10 <HAL_SPI_TransmitReceive+0x39c>
 800ccbe:	697b      	ldr	r3, [r7, #20]
 800ccc0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d023      	beq.n	800cd10 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cccc:	6a3a      	ldr	r2, [r7, #32]
 800ccce:	8812      	ldrh	r2, [r2, #0]
 800ccd0:	b292      	uxth	r2, r2
 800ccd2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ccd8:	1c9a      	adds	r2, r3, #2
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cce2:	6a3a      	ldr	r2, [r7, #32]
 800cce4:	8812      	ldrh	r2, [r2, #0]
 800cce6:	b292      	uxth	r2, r2
 800cce8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ccee:	1c9a      	adds	r2, r3, #2
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ccfa:	b29b      	uxth	r3, r3
 800ccfc:	3b02      	subs	r3, #2
 800ccfe:	b29a      	uxth	r2, r3
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cd0c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cd0e:	e044      	b.n	800cd9a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800cd10:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cd12:	2b01      	cmp	r3, #1
 800cd14:	d11d      	bne.n	800cd52 <HAL_SPI_TransmitReceive+0x3de>
 800cd16:	697b      	ldr	r3, [r7, #20]
 800cd18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d018      	beq.n	800cd52 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd24:	6a3a      	ldr	r2, [r7, #32]
 800cd26:	8812      	ldrh	r2, [r2, #0]
 800cd28:	b292      	uxth	r2, r2
 800cd2a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd30:	1c9a      	adds	r2, r3, #2
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cd3c:	b29b      	uxth	r3, r3
 800cd3e:	3b01      	subs	r3, #1
 800cd40:	b29a      	uxth	r2, r3
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cd4e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cd50:	e023      	b.n	800cd9a <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cd52:	f7f8 fb9d 	bl	8005490 <HAL_GetTick>
 800cd56:	4602      	mov	r2, r0
 800cd58:	69bb      	ldr	r3, [r7, #24]
 800cd5a:	1ad3      	subs	r3, r2, r3
 800cd5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cd5e:	429a      	cmp	r2, r3
 800cd60:	d803      	bhi.n	800cd6a <HAL_SPI_TransmitReceive+0x3f6>
 800cd62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd68:	d102      	bne.n	800cd70 <HAL_SPI_TransmitReceive+0x3fc>
 800cd6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d114      	bne.n	800cd9a <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800cd70:	68f8      	ldr	r0, [r7, #12]
 800cd72:	f000 f939 	bl	800cfe8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cd7c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	2201      	movs	r2, #1
 800cd8a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	2200      	movs	r2, #0
 800cd92:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800cd96:	2303      	movs	r3, #3
 800cd98:	e121      	b.n	800cfde <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cd9a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	f47f af3b 	bne.w	800cc18 <HAL_SPI_TransmitReceive+0x2a4>
 800cda2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	f47f af37 	bne.w	800cc18 <HAL_SPI_TransmitReceive+0x2a4>
 800cdaa:	e0f2      	b.n	800cf92 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	695b      	ldr	r3, [r3, #20]
 800cdb2:	f003 0302 	and.w	r3, r3, #2
 800cdb6:	2b02      	cmp	r3, #2
 800cdb8:	d121      	bne.n	800cdfe <HAL_SPI_TransmitReceive+0x48a>
 800cdba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d01e      	beq.n	800cdfe <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800cdc0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800cdc2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800cdc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdc6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800cdc8:	429a      	cmp	r2, r3
 800cdca:	d218      	bcs.n	800cdfe <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	3320      	adds	r3, #32
 800cdd6:	7812      	ldrb	r2, [r2, #0]
 800cdd8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cdde:	1c5a      	adds	r2, r3, #1
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cdea:	b29b      	uxth	r3, r3
 800cdec:	3b01      	subs	r3, #1
 800cdee:	b29a      	uxth	r2, r3
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cdfc:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	695b      	ldr	r3, [r3, #20]
 800ce04:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800ce06:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	f000 80ba 	beq.w	800cf82 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	695b      	ldr	r3, [r3, #20]
 800ce14:	f003 0301 	and.w	r3, r3, #1
 800ce18:	2b01      	cmp	r3, #1
 800ce1a:	d11b      	bne.n	800ce54 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce28:	7812      	ldrb	r2, [r2, #0]
 800ce2a:	b2d2      	uxtb	r2, r2
 800ce2c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce32:	1c5a      	adds	r2, r3, #1
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ce3e:	b29b      	uxth	r3, r3
 800ce40:	3b01      	subs	r3, #1
 800ce42:	b29a      	uxth	r2, r3
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ce50:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ce52:	e096      	b.n	800cf82 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ce54:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ce56:	8bfb      	ldrh	r3, [r7, #30]
 800ce58:	429a      	cmp	r2, r3
 800ce5a:	d24a      	bcs.n	800cef2 <HAL_SPI_TransmitReceive+0x57e>
 800ce5c:	697b      	ldr	r3, [r7, #20]
 800ce5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d045      	beq.n	800cef2 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce72:	7812      	ldrb	r2, [r2, #0]
 800ce74:	b2d2      	uxtb	r2, r2
 800ce76:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce7c:	1c5a      	adds	r2, r3, #1
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce8e:	7812      	ldrb	r2, [r2, #0]
 800ce90:	b2d2      	uxtb	r2, r2
 800ce92:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce98:	1c5a      	adds	r2, r3, #1
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ceaa:	7812      	ldrb	r2, [r2, #0]
 800ceac:	b2d2      	uxtb	r2, r2
 800ceae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ceb4:	1c5a      	adds	r2, r3, #1
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cec6:	7812      	ldrb	r2, [r2, #0]
 800cec8:	b2d2      	uxtb	r2, r2
 800ceca:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ced0:	1c5a      	adds	r2, r3, #1
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cedc:	b29b      	uxth	r3, r3
 800cede:	3b04      	subs	r3, #4
 800cee0:	b29a      	uxth	r2, r3
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ceee:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cef0:	e047      	b.n	800cf82 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800cef2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cef4:	2b03      	cmp	r3, #3
 800cef6:	d820      	bhi.n	800cf3a <HAL_SPI_TransmitReceive+0x5c6>
 800cef8:	697b      	ldr	r3, [r7, #20]
 800cefa:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d01b      	beq.n	800cf3a <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf0e:	7812      	ldrb	r2, [r2, #0]
 800cf10:	b2d2      	uxtb	r2, r2
 800cf12:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf18:	1c5a      	adds	r2, r3, #1
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cf24:	b29b      	uxth	r3, r3
 800cf26:	3b01      	subs	r3, #1
 800cf28:	b29a      	uxth	r2, r3
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cf36:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cf38:	e023      	b.n	800cf82 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cf3a:	f7f8 faa9 	bl	8005490 <HAL_GetTick>
 800cf3e:	4602      	mov	r2, r0
 800cf40:	69bb      	ldr	r3, [r7, #24]
 800cf42:	1ad3      	subs	r3, r2, r3
 800cf44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cf46:	429a      	cmp	r2, r3
 800cf48:	d803      	bhi.n	800cf52 <HAL_SPI_TransmitReceive+0x5de>
 800cf4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf50:	d102      	bne.n	800cf58 <HAL_SPI_TransmitReceive+0x5e4>
 800cf52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d114      	bne.n	800cf82 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800cf58:	68f8      	ldr	r0, [r7, #12]
 800cf5a:	f000 f845 	bl	800cfe8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cf64:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	2201      	movs	r2, #1
 800cf72:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	2200      	movs	r2, #0
 800cf7a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800cf7e:	2303      	movs	r3, #3
 800cf80:	e02d      	b.n	800cfde <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cf82:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	f47f af11 	bne.w	800cdac <HAL_SPI_TransmitReceive+0x438>
 800cf8a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	f47f af0d 	bne.w	800cdac <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800cf92:	69bb      	ldr	r3, [r7, #24]
 800cf94:	9300      	str	r3, [sp, #0]
 800cf96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf98:	2200      	movs	r2, #0
 800cf9a:	2108      	movs	r1, #8
 800cf9c:	68f8      	ldr	r0, [r7, #12]
 800cf9e:	f000 f8c3 	bl	800d128 <SPI_WaitOnFlagUntilTimeout>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d007      	beq.n	800cfb8 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cfae:	f043 0220 	orr.w	r2, r3, #32
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800cfb8:	68f8      	ldr	r0, [r7, #12]
 800cfba:	f000 f815 	bl	800cfe8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	2201      	movs	r2, #1
 800cfc2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	2200      	movs	r2, #0
 800cfca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d001      	beq.n	800cfdc <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800cfd8:	2301      	movs	r3, #1
 800cfda:	e000      	b.n	800cfde <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800cfdc:	2300      	movs	r3, #0
  }
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3730      	adds	r7, #48	@ 0x30
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}
 800cfe6:	bf00      	nop

0800cfe8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800cfe8:	b480      	push	{r7}
 800cfea:	b085      	sub	sp, #20
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	695b      	ldr	r3, [r3, #20]
 800cff6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	699a      	ldr	r2, [r3, #24]
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	f042 0208 	orr.w	r2, r2, #8
 800d006:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	699a      	ldr	r2, [r3, #24]
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	f042 0210 	orr.w	r2, r2, #16
 800d016:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	681a      	ldr	r2, [r3, #0]
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	f022 0201 	bic.w	r2, r2, #1
 800d026:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	6919      	ldr	r1, [r3, #16]
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681a      	ldr	r2, [r3, #0]
 800d032:	4b3c      	ldr	r3, [pc, #240]	@ (800d124 <SPI_CloseTransfer+0x13c>)
 800d034:	400b      	ands	r3, r1
 800d036:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	689a      	ldr	r2, [r3, #8]
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800d046:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d04e:	b2db      	uxtb	r3, r3
 800d050:	2b04      	cmp	r3, #4
 800d052:	d014      	beq.n	800d07e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	f003 0320 	and.w	r3, r3, #32
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d00f      	beq.n	800d07e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d064:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	699a      	ldr	r2, [r3, #24]
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	f042 0220 	orr.w	r2, r2, #32
 800d07c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d084:	b2db      	uxtb	r3, r3
 800d086:	2b03      	cmp	r3, #3
 800d088:	d014      	beq.n	800d0b4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d090:	2b00      	cmp	r3, #0
 800d092:	d00f      	beq.n	800d0b4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d09a:	f043 0204 	orr.w	r2, r3, #4
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	699a      	ldr	r2, [r3, #24]
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d0b2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d00f      	beq.n	800d0de <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d0c4:	f043 0201 	orr.w	r2, r3, #1
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	699a      	ldr	r2, [r3, #24]
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d0dc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d00f      	beq.n	800d108 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d0ee:	f043 0208 	orr.w	r2, r3, #8
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	699a      	ldr	r2, [r3, #24]
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d106:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2200      	movs	r2, #0
 800d10c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2200      	movs	r2, #0
 800d114:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800d118:	bf00      	nop
 800d11a:	3714      	adds	r7, #20
 800d11c:	46bd      	mov	sp, r7
 800d11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d122:	4770      	bx	lr
 800d124:	fffffc90 	.word	0xfffffc90

0800d128 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b084      	sub	sp, #16
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	60f8      	str	r0, [r7, #12]
 800d130:	60b9      	str	r1, [r7, #8]
 800d132:	603b      	str	r3, [r7, #0]
 800d134:	4613      	mov	r3, r2
 800d136:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d138:	e010      	b.n	800d15c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d13a:	f7f8 f9a9 	bl	8005490 <HAL_GetTick>
 800d13e:	4602      	mov	r2, r0
 800d140:	69bb      	ldr	r3, [r7, #24]
 800d142:	1ad3      	subs	r3, r2, r3
 800d144:	683a      	ldr	r2, [r7, #0]
 800d146:	429a      	cmp	r2, r3
 800d148:	d803      	bhi.n	800d152 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d150:	d102      	bne.n	800d158 <SPI_WaitOnFlagUntilTimeout+0x30>
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d101      	bne.n	800d15c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800d158:	2303      	movs	r3, #3
 800d15a:	e00f      	b.n	800d17c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	695a      	ldr	r2, [r3, #20]
 800d162:	68bb      	ldr	r3, [r7, #8]
 800d164:	4013      	ands	r3, r2
 800d166:	68ba      	ldr	r2, [r7, #8]
 800d168:	429a      	cmp	r2, r3
 800d16a:	bf0c      	ite	eq
 800d16c:	2301      	moveq	r3, #1
 800d16e:	2300      	movne	r3, #0
 800d170:	b2db      	uxtb	r3, r3
 800d172:	461a      	mov	r2, r3
 800d174:	79fb      	ldrb	r3, [r7, #7]
 800d176:	429a      	cmp	r2, r3
 800d178:	d0df      	beq.n	800d13a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800d17a:	2300      	movs	r3, #0
}
 800d17c:	4618      	mov	r0, r3
 800d17e:	3710      	adds	r7, #16
 800d180:	46bd      	mov	sp, r7
 800d182:	bd80      	pop	{r7, pc}

0800d184 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800d184:	b480      	push	{r7}
 800d186:	b085      	sub	sp, #20
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d190:	095b      	lsrs	r3, r3, #5
 800d192:	3301      	adds	r3, #1
 800d194:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	68db      	ldr	r3, [r3, #12]
 800d19a:	3301      	adds	r3, #1
 800d19c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d19e:	68bb      	ldr	r3, [r7, #8]
 800d1a0:	3307      	adds	r3, #7
 800d1a2:	08db      	lsrs	r3, r3, #3
 800d1a4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d1a6:	68bb      	ldr	r3, [r7, #8]
 800d1a8:	68fa      	ldr	r2, [r7, #12]
 800d1aa:	fb02 f303 	mul.w	r3, r2, r3
}
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	3714      	adds	r7, #20
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b8:	4770      	bx	lr

0800d1ba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d1ba:	b580      	push	{r7, lr}
 800d1bc:	b082      	sub	sp, #8
 800d1be:	af00      	add	r7, sp, #0
 800d1c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d101      	bne.n	800d1cc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d1c8:	2301      	movs	r3, #1
 800d1ca:	e049      	b.n	800d260 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d1d2:	b2db      	uxtb	r3, r3
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d106      	bne.n	800d1e6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2200      	movs	r2, #0
 800d1dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f7f5 fb4d 	bl	8002880 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2202      	movs	r2, #2
 800d1ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681a      	ldr	r2, [r3, #0]
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	3304      	adds	r3, #4
 800d1f6:	4619      	mov	r1, r3
 800d1f8:	4610      	mov	r0, r2
 800d1fa:	f000 fc57 	bl	800daac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2201      	movs	r2, #1
 800d202:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	2201      	movs	r2, #1
 800d20a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2201      	movs	r2, #1
 800d212:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2201      	movs	r2, #1
 800d21a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	2201      	movs	r2, #1
 800d222:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	2201      	movs	r2, #1
 800d22a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2201      	movs	r2, #1
 800d232:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	2201      	movs	r2, #1
 800d23a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	2201      	movs	r2, #1
 800d242:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2201      	movs	r2, #1
 800d24a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	2201      	movs	r2, #1
 800d252:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2201      	movs	r2, #1
 800d25a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d25e:	2300      	movs	r3, #0
}
 800d260:	4618      	mov	r0, r3
 800d262:	3708      	adds	r7, #8
 800d264:	46bd      	mov	sp, r7
 800d266:	bd80      	pop	{r7, pc}

0800d268 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d268:	b480      	push	{r7}
 800d26a:	b085      	sub	sp, #20
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d276:	b2db      	uxtb	r3, r3
 800d278:	2b01      	cmp	r3, #1
 800d27a:	d001      	beq.n	800d280 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d27c:	2301      	movs	r3, #1
 800d27e:	e054      	b.n	800d32a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2202      	movs	r2, #2
 800d284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	68da      	ldr	r2, [r3, #12]
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	f042 0201 	orr.w	r2, r2, #1
 800d296:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	4a26      	ldr	r2, [pc, #152]	@ (800d338 <HAL_TIM_Base_Start_IT+0xd0>)
 800d29e:	4293      	cmp	r3, r2
 800d2a0:	d022      	beq.n	800d2e8 <HAL_TIM_Base_Start_IT+0x80>
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d2aa:	d01d      	beq.n	800d2e8 <HAL_TIM_Base_Start_IT+0x80>
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	4a22      	ldr	r2, [pc, #136]	@ (800d33c <HAL_TIM_Base_Start_IT+0xd4>)
 800d2b2:	4293      	cmp	r3, r2
 800d2b4:	d018      	beq.n	800d2e8 <HAL_TIM_Base_Start_IT+0x80>
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	4a21      	ldr	r2, [pc, #132]	@ (800d340 <HAL_TIM_Base_Start_IT+0xd8>)
 800d2bc:	4293      	cmp	r3, r2
 800d2be:	d013      	beq.n	800d2e8 <HAL_TIM_Base_Start_IT+0x80>
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	4a1f      	ldr	r2, [pc, #124]	@ (800d344 <HAL_TIM_Base_Start_IT+0xdc>)
 800d2c6:	4293      	cmp	r3, r2
 800d2c8:	d00e      	beq.n	800d2e8 <HAL_TIM_Base_Start_IT+0x80>
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	4a1e      	ldr	r2, [pc, #120]	@ (800d348 <HAL_TIM_Base_Start_IT+0xe0>)
 800d2d0:	4293      	cmp	r3, r2
 800d2d2:	d009      	beq.n	800d2e8 <HAL_TIM_Base_Start_IT+0x80>
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	4a1c      	ldr	r2, [pc, #112]	@ (800d34c <HAL_TIM_Base_Start_IT+0xe4>)
 800d2da:	4293      	cmp	r3, r2
 800d2dc:	d004      	beq.n	800d2e8 <HAL_TIM_Base_Start_IT+0x80>
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	4a1b      	ldr	r2, [pc, #108]	@ (800d350 <HAL_TIM_Base_Start_IT+0xe8>)
 800d2e4:	4293      	cmp	r3, r2
 800d2e6:	d115      	bne.n	800d314 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	689a      	ldr	r2, [r3, #8]
 800d2ee:	4b19      	ldr	r3, [pc, #100]	@ (800d354 <HAL_TIM_Base_Start_IT+0xec>)
 800d2f0:	4013      	ands	r3, r2
 800d2f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	2b06      	cmp	r3, #6
 800d2f8:	d015      	beq.n	800d326 <HAL_TIM_Base_Start_IT+0xbe>
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d300:	d011      	beq.n	800d326 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	681a      	ldr	r2, [r3, #0]
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	f042 0201 	orr.w	r2, r2, #1
 800d310:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d312:	e008      	b.n	800d326 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	681a      	ldr	r2, [r3, #0]
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	f042 0201 	orr.w	r2, r2, #1
 800d322:	601a      	str	r2, [r3, #0]
 800d324:	e000      	b.n	800d328 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d326:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d328:	2300      	movs	r3, #0
}
 800d32a:	4618      	mov	r0, r3
 800d32c:	3714      	adds	r7, #20
 800d32e:	46bd      	mov	sp, r7
 800d330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d334:	4770      	bx	lr
 800d336:	bf00      	nop
 800d338:	40010000 	.word	0x40010000
 800d33c:	40000400 	.word	0x40000400
 800d340:	40000800 	.word	0x40000800
 800d344:	40000c00 	.word	0x40000c00
 800d348:	40010400 	.word	0x40010400
 800d34c:	40001800 	.word	0x40001800
 800d350:	40014000 	.word	0x40014000
 800d354:	00010007 	.word	0x00010007

0800d358 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b082      	sub	sp, #8
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d101      	bne.n	800d36a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d366:	2301      	movs	r3, #1
 800d368:	e049      	b.n	800d3fe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d370:	b2db      	uxtb	r3, r3
 800d372:	2b00      	cmp	r3, #0
 800d374:	d106      	bne.n	800d384 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2200      	movs	r2, #0
 800d37a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f7f5 fa30 	bl	80027e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2202      	movs	r2, #2
 800d388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681a      	ldr	r2, [r3, #0]
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	3304      	adds	r3, #4
 800d394:	4619      	mov	r1, r3
 800d396:	4610      	mov	r0, r2
 800d398:	f000 fb88 	bl	800daac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2201      	movs	r2, #1
 800d3a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2201      	movs	r2, #1
 800d3a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2201      	movs	r2, #1
 800d3b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2201      	movs	r2, #1
 800d3b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2201      	movs	r2, #1
 800d3c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2201      	movs	r2, #1
 800d3c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2201      	movs	r2, #1
 800d3d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2201      	movs	r2, #1
 800d3d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2201      	movs	r2, #1
 800d3e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2201      	movs	r2, #1
 800d3e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2201      	movs	r2, #1
 800d3f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2201      	movs	r2, #1
 800d3f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d3fc:	2300      	movs	r3, #0
}
 800d3fe:	4618      	mov	r0, r3
 800d400:	3708      	adds	r7, #8
 800d402:	46bd      	mov	sp, r7
 800d404:	bd80      	pop	{r7, pc}
	...

0800d408 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b084      	sub	sp, #16
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
 800d410:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d109      	bne.n	800d42c <HAL_TIM_PWM_Start+0x24>
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d41e:	b2db      	uxtb	r3, r3
 800d420:	2b01      	cmp	r3, #1
 800d422:	bf14      	ite	ne
 800d424:	2301      	movne	r3, #1
 800d426:	2300      	moveq	r3, #0
 800d428:	b2db      	uxtb	r3, r3
 800d42a:	e03c      	b.n	800d4a6 <HAL_TIM_PWM_Start+0x9e>
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	2b04      	cmp	r3, #4
 800d430:	d109      	bne.n	800d446 <HAL_TIM_PWM_Start+0x3e>
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d438:	b2db      	uxtb	r3, r3
 800d43a:	2b01      	cmp	r3, #1
 800d43c:	bf14      	ite	ne
 800d43e:	2301      	movne	r3, #1
 800d440:	2300      	moveq	r3, #0
 800d442:	b2db      	uxtb	r3, r3
 800d444:	e02f      	b.n	800d4a6 <HAL_TIM_PWM_Start+0x9e>
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	2b08      	cmp	r3, #8
 800d44a:	d109      	bne.n	800d460 <HAL_TIM_PWM_Start+0x58>
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d452:	b2db      	uxtb	r3, r3
 800d454:	2b01      	cmp	r3, #1
 800d456:	bf14      	ite	ne
 800d458:	2301      	movne	r3, #1
 800d45a:	2300      	moveq	r3, #0
 800d45c:	b2db      	uxtb	r3, r3
 800d45e:	e022      	b.n	800d4a6 <HAL_TIM_PWM_Start+0x9e>
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	2b0c      	cmp	r3, #12
 800d464:	d109      	bne.n	800d47a <HAL_TIM_PWM_Start+0x72>
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d46c:	b2db      	uxtb	r3, r3
 800d46e:	2b01      	cmp	r3, #1
 800d470:	bf14      	ite	ne
 800d472:	2301      	movne	r3, #1
 800d474:	2300      	moveq	r3, #0
 800d476:	b2db      	uxtb	r3, r3
 800d478:	e015      	b.n	800d4a6 <HAL_TIM_PWM_Start+0x9e>
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	2b10      	cmp	r3, #16
 800d47e:	d109      	bne.n	800d494 <HAL_TIM_PWM_Start+0x8c>
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d486:	b2db      	uxtb	r3, r3
 800d488:	2b01      	cmp	r3, #1
 800d48a:	bf14      	ite	ne
 800d48c:	2301      	movne	r3, #1
 800d48e:	2300      	moveq	r3, #0
 800d490:	b2db      	uxtb	r3, r3
 800d492:	e008      	b.n	800d4a6 <HAL_TIM_PWM_Start+0x9e>
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d49a:	b2db      	uxtb	r3, r3
 800d49c:	2b01      	cmp	r3, #1
 800d49e:	bf14      	ite	ne
 800d4a0:	2301      	movne	r3, #1
 800d4a2:	2300      	moveq	r3, #0
 800d4a4:	b2db      	uxtb	r3, r3
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d001      	beq.n	800d4ae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d4aa:	2301      	movs	r3, #1
 800d4ac:	e0a1      	b.n	800d5f2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d104      	bne.n	800d4be <HAL_TIM_PWM_Start+0xb6>
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2202      	movs	r2, #2
 800d4b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d4bc:	e023      	b.n	800d506 <HAL_TIM_PWM_Start+0xfe>
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	2b04      	cmp	r3, #4
 800d4c2:	d104      	bne.n	800d4ce <HAL_TIM_PWM_Start+0xc6>
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2202      	movs	r2, #2
 800d4c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d4cc:	e01b      	b.n	800d506 <HAL_TIM_PWM_Start+0xfe>
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	2b08      	cmp	r3, #8
 800d4d2:	d104      	bne.n	800d4de <HAL_TIM_PWM_Start+0xd6>
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	2202      	movs	r2, #2
 800d4d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d4dc:	e013      	b.n	800d506 <HAL_TIM_PWM_Start+0xfe>
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	2b0c      	cmp	r3, #12
 800d4e2:	d104      	bne.n	800d4ee <HAL_TIM_PWM_Start+0xe6>
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2202      	movs	r2, #2
 800d4e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d4ec:	e00b      	b.n	800d506 <HAL_TIM_PWM_Start+0xfe>
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	2b10      	cmp	r3, #16
 800d4f2:	d104      	bne.n	800d4fe <HAL_TIM_PWM_Start+0xf6>
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2202      	movs	r2, #2
 800d4f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d4fc:	e003      	b.n	800d506 <HAL_TIM_PWM_Start+0xfe>
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2202      	movs	r2, #2
 800d502:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	2201      	movs	r2, #1
 800d50c:	6839      	ldr	r1, [r7, #0]
 800d50e:	4618      	mov	r0, r3
 800d510:	f000 fe48 	bl	800e1a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	4a38      	ldr	r2, [pc, #224]	@ (800d5fc <HAL_TIM_PWM_Start+0x1f4>)
 800d51a:	4293      	cmp	r3, r2
 800d51c:	d013      	beq.n	800d546 <HAL_TIM_PWM_Start+0x13e>
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	4a37      	ldr	r2, [pc, #220]	@ (800d600 <HAL_TIM_PWM_Start+0x1f8>)
 800d524:	4293      	cmp	r3, r2
 800d526:	d00e      	beq.n	800d546 <HAL_TIM_PWM_Start+0x13e>
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	4a35      	ldr	r2, [pc, #212]	@ (800d604 <HAL_TIM_PWM_Start+0x1fc>)
 800d52e:	4293      	cmp	r3, r2
 800d530:	d009      	beq.n	800d546 <HAL_TIM_PWM_Start+0x13e>
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	4a34      	ldr	r2, [pc, #208]	@ (800d608 <HAL_TIM_PWM_Start+0x200>)
 800d538:	4293      	cmp	r3, r2
 800d53a:	d004      	beq.n	800d546 <HAL_TIM_PWM_Start+0x13e>
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	4a32      	ldr	r2, [pc, #200]	@ (800d60c <HAL_TIM_PWM_Start+0x204>)
 800d542:	4293      	cmp	r3, r2
 800d544:	d101      	bne.n	800d54a <HAL_TIM_PWM_Start+0x142>
 800d546:	2301      	movs	r3, #1
 800d548:	e000      	b.n	800d54c <HAL_TIM_PWM_Start+0x144>
 800d54a:	2300      	movs	r3, #0
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d007      	beq.n	800d560 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d55e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	4a25      	ldr	r2, [pc, #148]	@ (800d5fc <HAL_TIM_PWM_Start+0x1f4>)
 800d566:	4293      	cmp	r3, r2
 800d568:	d022      	beq.n	800d5b0 <HAL_TIM_PWM_Start+0x1a8>
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d572:	d01d      	beq.n	800d5b0 <HAL_TIM_PWM_Start+0x1a8>
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	4a25      	ldr	r2, [pc, #148]	@ (800d610 <HAL_TIM_PWM_Start+0x208>)
 800d57a:	4293      	cmp	r3, r2
 800d57c:	d018      	beq.n	800d5b0 <HAL_TIM_PWM_Start+0x1a8>
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	4a24      	ldr	r2, [pc, #144]	@ (800d614 <HAL_TIM_PWM_Start+0x20c>)
 800d584:	4293      	cmp	r3, r2
 800d586:	d013      	beq.n	800d5b0 <HAL_TIM_PWM_Start+0x1a8>
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	4a22      	ldr	r2, [pc, #136]	@ (800d618 <HAL_TIM_PWM_Start+0x210>)
 800d58e:	4293      	cmp	r3, r2
 800d590:	d00e      	beq.n	800d5b0 <HAL_TIM_PWM_Start+0x1a8>
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	4a1a      	ldr	r2, [pc, #104]	@ (800d600 <HAL_TIM_PWM_Start+0x1f8>)
 800d598:	4293      	cmp	r3, r2
 800d59a:	d009      	beq.n	800d5b0 <HAL_TIM_PWM_Start+0x1a8>
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	4a1e      	ldr	r2, [pc, #120]	@ (800d61c <HAL_TIM_PWM_Start+0x214>)
 800d5a2:	4293      	cmp	r3, r2
 800d5a4:	d004      	beq.n	800d5b0 <HAL_TIM_PWM_Start+0x1a8>
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	4a16      	ldr	r2, [pc, #88]	@ (800d604 <HAL_TIM_PWM_Start+0x1fc>)
 800d5ac:	4293      	cmp	r3, r2
 800d5ae:	d115      	bne.n	800d5dc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	689a      	ldr	r2, [r3, #8]
 800d5b6:	4b1a      	ldr	r3, [pc, #104]	@ (800d620 <HAL_TIM_PWM_Start+0x218>)
 800d5b8:	4013      	ands	r3, r2
 800d5ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	2b06      	cmp	r3, #6
 800d5c0:	d015      	beq.n	800d5ee <HAL_TIM_PWM_Start+0x1e6>
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d5c8:	d011      	beq.n	800d5ee <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	681a      	ldr	r2, [r3, #0]
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	f042 0201 	orr.w	r2, r2, #1
 800d5d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d5da:	e008      	b.n	800d5ee <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	681a      	ldr	r2, [r3, #0]
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	f042 0201 	orr.w	r2, r2, #1
 800d5ea:	601a      	str	r2, [r3, #0]
 800d5ec:	e000      	b.n	800d5f0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d5ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d5f0:	2300      	movs	r3, #0
}
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	3710      	adds	r7, #16
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bd80      	pop	{r7, pc}
 800d5fa:	bf00      	nop
 800d5fc:	40010000 	.word	0x40010000
 800d600:	40010400 	.word	0x40010400
 800d604:	40014000 	.word	0x40014000
 800d608:	40014400 	.word	0x40014400
 800d60c:	40014800 	.word	0x40014800
 800d610:	40000400 	.word	0x40000400
 800d614:	40000800 	.word	0x40000800
 800d618:	40000c00 	.word	0x40000c00
 800d61c:	40001800 	.word	0x40001800
 800d620:	00010007 	.word	0x00010007

0800d624 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b084      	sub	sp, #16
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	68db      	ldr	r3, [r3, #12]
 800d632:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	691b      	ldr	r3, [r3, #16]
 800d63a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d63c:	68bb      	ldr	r3, [r7, #8]
 800d63e:	f003 0302 	and.w	r3, r3, #2
 800d642:	2b00      	cmp	r3, #0
 800d644:	d020      	beq.n	800d688 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	f003 0302 	and.w	r3, r3, #2
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d01b      	beq.n	800d688 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	f06f 0202 	mvn.w	r2, #2
 800d658:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2201      	movs	r2, #1
 800d65e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	699b      	ldr	r3, [r3, #24]
 800d666:	f003 0303 	and.w	r3, r3, #3
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d003      	beq.n	800d676 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d66e:	6878      	ldr	r0, [r7, #4]
 800d670:	f000 f9fe 	bl	800da70 <HAL_TIM_IC_CaptureCallback>
 800d674:	e005      	b.n	800d682 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d676:	6878      	ldr	r0, [r7, #4]
 800d678:	f000 f9f0 	bl	800da5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f000 fa01 	bl	800da84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2200      	movs	r2, #0
 800d686:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d688:	68bb      	ldr	r3, [r7, #8]
 800d68a:	f003 0304 	and.w	r3, r3, #4
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d020      	beq.n	800d6d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	f003 0304 	and.w	r3, r3, #4
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d01b      	beq.n	800d6d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	f06f 0204 	mvn.w	r2, #4
 800d6a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	2202      	movs	r2, #2
 800d6aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	699b      	ldr	r3, [r3, #24]
 800d6b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d003      	beq.n	800d6c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d6ba:	6878      	ldr	r0, [r7, #4]
 800d6bc:	f000 f9d8 	bl	800da70 <HAL_TIM_IC_CaptureCallback>
 800d6c0:	e005      	b.n	800d6ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d6c2:	6878      	ldr	r0, [r7, #4]
 800d6c4:	f000 f9ca 	bl	800da5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d6c8:	6878      	ldr	r0, [r7, #4]
 800d6ca:	f000 f9db 	bl	800da84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	f003 0308 	and.w	r3, r3, #8
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d020      	beq.n	800d720 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	f003 0308 	and.w	r3, r3, #8
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d01b      	beq.n	800d720 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	f06f 0208 	mvn.w	r2, #8
 800d6f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	2204      	movs	r2, #4
 800d6f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	69db      	ldr	r3, [r3, #28]
 800d6fe:	f003 0303 	and.w	r3, r3, #3
 800d702:	2b00      	cmp	r3, #0
 800d704:	d003      	beq.n	800d70e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f000 f9b2 	bl	800da70 <HAL_TIM_IC_CaptureCallback>
 800d70c:	e005      	b.n	800d71a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d70e:	6878      	ldr	r0, [r7, #4]
 800d710:	f000 f9a4 	bl	800da5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d714:	6878      	ldr	r0, [r7, #4]
 800d716:	f000 f9b5 	bl	800da84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2200      	movs	r2, #0
 800d71e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d720:	68bb      	ldr	r3, [r7, #8]
 800d722:	f003 0310 	and.w	r3, r3, #16
 800d726:	2b00      	cmp	r3, #0
 800d728:	d020      	beq.n	800d76c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	f003 0310 	and.w	r3, r3, #16
 800d730:	2b00      	cmp	r3, #0
 800d732:	d01b      	beq.n	800d76c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	f06f 0210 	mvn.w	r2, #16
 800d73c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	2208      	movs	r2, #8
 800d742:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	69db      	ldr	r3, [r3, #28]
 800d74a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d003      	beq.n	800d75a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d752:	6878      	ldr	r0, [r7, #4]
 800d754:	f000 f98c 	bl	800da70 <HAL_TIM_IC_CaptureCallback>
 800d758:	e005      	b.n	800d766 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f000 f97e 	bl	800da5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f000 f98f 	bl	800da84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	2200      	movs	r2, #0
 800d76a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d76c:	68bb      	ldr	r3, [r7, #8]
 800d76e:	f003 0301 	and.w	r3, r3, #1
 800d772:	2b00      	cmp	r3, #0
 800d774:	d00c      	beq.n	800d790 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	f003 0301 	and.w	r3, r3, #1
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d007      	beq.n	800d790 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	f06f 0201 	mvn.w	r2, #1
 800d788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d78a:	6878      	ldr	r0, [r7, #4]
 800d78c:	f7f4 fb00 	bl	8001d90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d790:	68bb      	ldr	r3, [r7, #8]
 800d792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d796:	2b00      	cmp	r3, #0
 800d798:	d104      	bne.n	800d7a4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d79a:	68bb      	ldr	r3, [r7, #8]
 800d79c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d00c      	beq.n	800d7be <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d007      	beq.n	800d7be <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800d7b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d7b8:	6878      	ldr	r0, [r7, #4]
 800d7ba:	f000 fdb1 	bl	800e320 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d7be:	68bb      	ldr	r3, [r7, #8]
 800d7c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d00c      	beq.n	800d7e2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d007      	beq.n	800d7e2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d7da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d7dc:	6878      	ldr	r0, [r7, #4]
 800d7de:	f000 fda9 	bl	800e334 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d7e2:	68bb      	ldr	r3, [r7, #8]
 800d7e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d00c      	beq.n	800d806 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d007      	beq.n	800d806 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d7fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d800:	6878      	ldr	r0, [r7, #4]
 800d802:	f000 f949 	bl	800da98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d806:	68bb      	ldr	r3, [r7, #8]
 800d808:	f003 0320 	and.w	r3, r3, #32
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d00c      	beq.n	800d82a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	f003 0320 	and.w	r3, r3, #32
 800d816:	2b00      	cmp	r3, #0
 800d818:	d007      	beq.n	800d82a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	f06f 0220 	mvn.w	r2, #32
 800d822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d824:	6878      	ldr	r0, [r7, #4]
 800d826:	f000 fd71 	bl	800e30c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d82a:	bf00      	nop
 800d82c:	3710      	adds	r7, #16
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd80      	pop	{r7, pc}
	...

0800d834 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b086      	sub	sp, #24
 800d838:	af00      	add	r7, sp, #0
 800d83a:	60f8      	str	r0, [r7, #12]
 800d83c:	60b9      	str	r1, [r7, #8]
 800d83e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d840:	2300      	movs	r3, #0
 800d842:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d84a:	2b01      	cmp	r3, #1
 800d84c:	d101      	bne.n	800d852 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d84e:	2302      	movs	r3, #2
 800d850:	e0ff      	b.n	800da52 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	2201      	movs	r2, #1
 800d856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	2b14      	cmp	r3, #20
 800d85e:	f200 80f0 	bhi.w	800da42 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d862:	a201      	add	r2, pc, #4	@ (adr r2, 800d868 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d868:	0800d8bd 	.word	0x0800d8bd
 800d86c:	0800da43 	.word	0x0800da43
 800d870:	0800da43 	.word	0x0800da43
 800d874:	0800da43 	.word	0x0800da43
 800d878:	0800d8fd 	.word	0x0800d8fd
 800d87c:	0800da43 	.word	0x0800da43
 800d880:	0800da43 	.word	0x0800da43
 800d884:	0800da43 	.word	0x0800da43
 800d888:	0800d93f 	.word	0x0800d93f
 800d88c:	0800da43 	.word	0x0800da43
 800d890:	0800da43 	.word	0x0800da43
 800d894:	0800da43 	.word	0x0800da43
 800d898:	0800d97f 	.word	0x0800d97f
 800d89c:	0800da43 	.word	0x0800da43
 800d8a0:	0800da43 	.word	0x0800da43
 800d8a4:	0800da43 	.word	0x0800da43
 800d8a8:	0800d9c1 	.word	0x0800d9c1
 800d8ac:	0800da43 	.word	0x0800da43
 800d8b0:	0800da43 	.word	0x0800da43
 800d8b4:	0800da43 	.word	0x0800da43
 800d8b8:	0800da01 	.word	0x0800da01
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	68b9      	ldr	r1, [r7, #8]
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	f000 f998 	bl	800dbf8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	699a      	ldr	r2, [r3, #24]
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	f042 0208 	orr.w	r2, r2, #8
 800d8d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	699a      	ldr	r2, [r3, #24]
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	f022 0204 	bic.w	r2, r2, #4
 800d8e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	6999      	ldr	r1, [r3, #24]
 800d8ee:	68bb      	ldr	r3, [r7, #8]
 800d8f0:	691a      	ldr	r2, [r3, #16]
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	430a      	orrs	r2, r1
 800d8f8:	619a      	str	r2, [r3, #24]
      break;
 800d8fa:	e0a5      	b.n	800da48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	68b9      	ldr	r1, [r7, #8]
 800d902:	4618      	mov	r0, r3
 800d904:	f000 fa08 	bl	800dd18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	699a      	ldr	r2, [r3, #24]
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d916:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	699a      	ldr	r2, [r3, #24]
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d926:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	6999      	ldr	r1, [r3, #24]
 800d92e:	68bb      	ldr	r3, [r7, #8]
 800d930:	691b      	ldr	r3, [r3, #16]
 800d932:	021a      	lsls	r2, r3, #8
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	430a      	orrs	r2, r1
 800d93a:	619a      	str	r2, [r3, #24]
      break;
 800d93c:	e084      	b.n	800da48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	68b9      	ldr	r1, [r7, #8]
 800d944:	4618      	mov	r0, r3
 800d946:	f000 fa71 	bl	800de2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	69da      	ldr	r2, [r3, #28]
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	f042 0208 	orr.w	r2, r2, #8
 800d958:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	69da      	ldr	r2, [r3, #28]
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	f022 0204 	bic.w	r2, r2, #4
 800d968:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	69d9      	ldr	r1, [r3, #28]
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	691a      	ldr	r2, [r3, #16]
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	430a      	orrs	r2, r1
 800d97a:	61da      	str	r2, [r3, #28]
      break;
 800d97c:	e064      	b.n	800da48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	68b9      	ldr	r1, [r7, #8]
 800d984:	4618      	mov	r0, r3
 800d986:	f000 fad9 	bl	800df3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	69da      	ldr	r2, [r3, #28]
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d998:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	69da      	ldr	r2, [r3, #28]
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d9a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	69d9      	ldr	r1, [r3, #28]
 800d9b0:	68bb      	ldr	r3, [r7, #8]
 800d9b2:	691b      	ldr	r3, [r3, #16]
 800d9b4:	021a      	lsls	r2, r3, #8
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	430a      	orrs	r2, r1
 800d9bc:	61da      	str	r2, [r3, #28]
      break;
 800d9be:	e043      	b.n	800da48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	68b9      	ldr	r1, [r7, #8]
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f000 fb22 	bl	800e010 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	f042 0208 	orr.w	r2, r2, #8
 800d9da:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	f022 0204 	bic.w	r2, r2, #4
 800d9ea:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	691a      	ldr	r2, [r3, #16]
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	430a      	orrs	r2, r1
 800d9fc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d9fe:	e023      	b.n	800da48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	68b9      	ldr	r1, [r7, #8]
 800da06:	4618      	mov	r0, r3
 800da08:	f000 fb66 	bl	800e0d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800da1a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800da2a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800da32:	68bb      	ldr	r3, [r7, #8]
 800da34:	691b      	ldr	r3, [r3, #16]
 800da36:	021a      	lsls	r2, r3, #8
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	430a      	orrs	r2, r1
 800da3e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800da40:	e002      	b.n	800da48 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800da42:	2301      	movs	r3, #1
 800da44:	75fb      	strb	r3, [r7, #23]
      break;
 800da46:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	2200      	movs	r2, #0
 800da4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800da50:	7dfb      	ldrb	r3, [r7, #23]
}
 800da52:	4618      	mov	r0, r3
 800da54:	3718      	adds	r7, #24
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}
 800da5a:	bf00      	nop

0800da5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800da5c:	b480      	push	{r7}
 800da5e:	b083      	sub	sp, #12
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800da64:	bf00      	nop
 800da66:	370c      	adds	r7, #12
 800da68:	46bd      	mov	sp, r7
 800da6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6e:	4770      	bx	lr

0800da70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800da70:	b480      	push	{r7}
 800da72:	b083      	sub	sp, #12
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800da78:	bf00      	nop
 800da7a:	370c      	adds	r7, #12
 800da7c:	46bd      	mov	sp, r7
 800da7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da82:	4770      	bx	lr

0800da84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800da84:	b480      	push	{r7}
 800da86:	b083      	sub	sp, #12
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800da8c:	bf00      	nop
 800da8e:	370c      	adds	r7, #12
 800da90:	46bd      	mov	sp, r7
 800da92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da96:	4770      	bx	lr

0800da98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800da98:	b480      	push	{r7}
 800da9a:	b083      	sub	sp, #12
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800daa0:	bf00      	nop
 800daa2:	370c      	adds	r7, #12
 800daa4:	46bd      	mov	sp, r7
 800daa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daaa:	4770      	bx	lr

0800daac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800daac:	b480      	push	{r7}
 800daae:	b085      	sub	sp, #20
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
 800dab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	4a46      	ldr	r2, [pc, #280]	@ (800dbd8 <TIM_Base_SetConfig+0x12c>)
 800dac0:	4293      	cmp	r3, r2
 800dac2:	d013      	beq.n	800daec <TIM_Base_SetConfig+0x40>
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800daca:	d00f      	beq.n	800daec <TIM_Base_SetConfig+0x40>
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	4a43      	ldr	r2, [pc, #268]	@ (800dbdc <TIM_Base_SetConfig+0x130>)
 800dad0:	4293      	cmp	r3, r2
 800dad2:	d00b      	beq.n	800daec <TIM_Base_SetConfig+0x40>
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	4a42      	ldr	r2, [pc, #264]	@ (800dbe0 <TIM_Base_SetConfig+0x134>)
 800dad8:	4293      	cmp	r3, r2
 800dada:	d007      	beq.n	800daec <TIM_Base_SetConfig+0x40>
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	4a41      	ldr	r2, [pc, #260]	@ (800dbe4 <TIM_Base_SetConfig+0x138>)
 800dae0:	4293      	cmp	r3, r2
 800dae2:	d003      	beq.n	800daec <TIM_Base_SetConfig+0x40>
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	4a40      	ldr	r2, [pc, #256]	@ (800dbe8 <TIM_Base_SetConfig+0x13c>)
 800dae8:	4293      	cmp	r3, r2
 800daea:	d108      	bne.n	800dafe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800daf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	685b      	ldr	r3, [r3, #4]
 800daf8:	68fa      	ldr	r2, [r7, #12]
 800dafa:	4313      	orrs	r3, r2
 800dafc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	4a35      	ldr	r2, [pc, #212]	@ (800dbd8 <TIM_Base_SetConfig+0x12c>)
 800db02:	4293      	cmp	r3, r2
 800db04:	d01f      	beq.n	800db46 <TIM_Base_SetConfig+0x9a>
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db0c:	d01b      	beq.n	800db46 <TIM_Base_SetConfig+0x9a>
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	4a32      	ldr	r2, [pc, #200]	@ (800dbdc <TIM_Base_SetConfig+0x130>)
 800db12:	4293      	cmp	r3, r2
 800db14:	d017      	beq.n	800db46 <TIM_Base_SetConfig+0x9a>
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	4a31      	ldr	r2, [pc, #196]	@ (800dbe0 <TIM_Base_SetConfig+0x134>)
 800db1a:	4293      	cmp	r3, r2
 800db1c:	d013      	beq.n	800db46 <TIM_Base_SetConfig+0x9a>
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	4a30      	ldr	r2, [pc, #192]	@ (800dbe4 <TIM_Base_SetConfig+0x138>)
 800db22:	4293      	cmp	r3, r2
 800db24:	d00f      	beq.n	800db46 <TIM_Base_SetConfig+0x9a>
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	4a2f      	ldr	r2, [pc, #188]	@ (800dbe8 <TIM_Base_SetConfig+0x13c>)
 800db2a:	4293      	cmp	r3, r2
 800db2c:	d00b      	beq.n	800db46 <TIM_Base_SetConfig+0x9a>
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	4a2e      	ldr	r2, [pc, #184]	@ (800dbec <TIM_Base_SetConfig+0x140>)
 800db32:	4293      	cmp	r3, r2
 800db34:	d007      	beq.n	800db46 <TIM_Base_SetConfig+0x9a>
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	4a2d      	ldr	r2, [pc, #180]	@ (800dbf0 <TIM_Base_SetConfig+0x144>)
 800db3a:	4293      	cmp	r3, r2
 800db3c:	d003      	beq.n	800db46 <TIM_Base_SetConfig+0x9a>
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	4a2c      	ldr	r2, [pc, #176]	@ (800dbf4 <TIM_Base_SetConfig+0x148>)
 800db42:	4293      	cmp	r3, r2
 800db44:	d108      	bne.n	800db58 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800db4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800db4e:	683b      	ldr	r3, [r7, #0]
 800db50:	68db      	ldr	r3, [r3, #12]
 800db52:	68fa      	ldr	r2, [r7, #12]
 800db54:	4313      	orrs	r3, r2
 800db56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	695b      	ldr	r3, [r3, #20]
 800db62:	4313      	orrs	r3, r2
 800db64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	68fa      	ldr	r2, [r7, #12]
 800db6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	689a      	ldr	r2, [r3, #8]
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800db74:	683b      	ldr	r3, [r7, #0]
 800db76:	681a      	ldr	r2, [r3, #0]
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	4a16      	ldr	r2, [pc, #88]	@ (800dbd8 <TIM_Base_SetConfig+0x12c>)
 800db80:	4293      	cmp	r3, r2
 800db82:	d00f      	beq.n	800dba4 <TIM_Base_SetConfig+0xf8>
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	4a18      	ldr	r2, [pc, #96]	@ (800dbe8 <TIM_Base_SetConfig+0x13c>)
 800db88:	4293      	cmp	r3, r2
 800db8a:	d00b      	beq.n	800dba4 <TIM_Base_SetConfig+0xf8>
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	4a17      	ldr	r2, [pc, #92]	@ (800dbec <TIM_Base_SetConfig+0x140>)
 800db90:	4293      	cmp	r3, r2
 800db92:	d007      	beq.n	800dba4 <TIM_Base_SetConfig+0xf8>
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	4a16      	ldr	r2, [pc, #88]	@ (800dbf0 <TIM_Base_SetConfig+0x144>)
 800db98:	4293      	cmp	r3, r2
 800db9a:	d003      	beq.n	800dba4 <TIM_Base_SetConfig+0xf8>
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	4a15      	ldr	r2, [pc, #84]	@ (800dbf4 <TIM_Base_SetConfig+0x148>)
 800dba0:	4293      	cmp	r3, r2
 800dba2:	d103      	bne.n	800dbac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	691a      	ldr	r2, [r3, #16]
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	2201      	movs	r2, #1
 800dbb0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	691b      	ldr	r3, [r3, #16]
 800dbb6:	f003 0301 	and.w	r3, r3, #1
 800dbba:	2b01      	cmp	r3, #1
 800dbbc:	d105      	bne.n	800dbca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	691b      	ldr	r3, [r3, #16]
 800dbc2:	f023 0201 	bic.w	r2, r3, #1
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	611a      	str	r2, [r3, #16]
  }
}
 800dbca:	bf00      	nop
 800dbcc:	3714      	adds	r7, #20
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd4:	4770      	bx	lr
 800dbd6:	bf00      	nop
 800dbd8:	40010000 	.word	0x40010000
 800dbdc:	40000400 	.word	0x40000400
 800dbe0:	40000800 	.word	0x40000800
 800dbe4:	40000c00 	.word	0x40000c00
 800dbe8:	40010400 	.word	0x40010400
 800dbec:	40014000 	.word	0x40014000
 800dbf0:	40014400 	.word	0x40014400
 800dbf4:	40014800 	.word	0x40014800

0800dbf8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dbf8:	b480      	push	{r7}
 800dbfa:	b087      	sub	sp, #28
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
 800dc00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	6a1b      	ldr	r3, [r3, #32]
 800dc06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	6a1b      	ldr	r3, [r3, #32]
 800dc0c:	f023 0201 	bic.w	r2, r3, #1
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	685b      	ldr	r3, [r3, #4]
 800dc18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	699b      	ldr	r3, [r3, #24]
 800dc1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800dc20:	68fa      	ldr	r2, [r7, #12]
 800dc22:	4b37      	ldr	r3, [pc, #220]	@ (800dd00 <TIM_OC1_SetConfig+0x108>)
 800dc24:	4013      	ands	r3, r2
 800dc26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	f023 0303 	bic.w	r3, r3, #3
 800dc2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dc30:	683b      	ldr	r3, [r7, #0]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	68fa      	ldr	r2, [r7, #12]
 800dc36:	4313      	orrs	r3, r2
 800dc38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800dc3a:	697b      	ldr	r3, [r7, #20]
 800dc3c:	f023 0302 	bic.w	r3, r3, #2
 800dc40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	689b      	ldr	r3, [r3, #8]
 800dc46:	697a      	ldr	r2, [r7, #20]
 800dc48:	4313      	orrs	r3, r2
 800dc4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	4a2d      	ldr	r2, [pc, #180]	@ (800dd04 <TIM_OC1_SetConfig+0x10c>)
 800dc50:	4293      	cmp	r3, r2
 800dc52:	d00f      	beq.n	800dc74 <TIM_OC1_SetConfig+0x7c>
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	4a2c      	ldr	r2, [pc, #176]	@ (800dd08 <TIM_OC1_SetConfig+0x110>)
 800dc58:	4293      	cmp	r3, r2
 800dc5a:	d00b      	beq.n	800dc74 <TIM_OC1_SetConfig+0x7c>
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	4a2b      	ldr	r2, [pc, #172]	@ (800dd0c <TIM_OC1_SetConfig+0x114>)
 800dc60:	4293      	cmp	r3, r2
 800dc62:	d007      	beq.n	800dc74 <TIM_OC1_SetConfig+0x7c>
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	4a2a      	ldr	r2, [pc, #168]	@ (800dd10 <TIM_OC1_SetConfig+0x118>)
 800dc68:	4293      	cmp	r3, r2
 800dc6a:	d003      	beq.n	800dc74 <TIM_OC1_SetConfig+0x7c>
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	4a29      	ldr	r2, [pc, #164]	@ (800dd14 <TIM_OC1_SetConfig+0x11c>)
 800dc70:	4293      	cmp	r3, r2
 800dc72:	d10c      	bne.n	800dc8e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800dc74:	697b      	ldr	r3, [r7, #20]
 800dc76:	f023 0308 	bic.w	r3, r3, #8
 800dc7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800dc7c:	683b      	ldr	r3, [r7, #0]
 800dc7e:	68db      	ldr	r3, [r3, #12]
 800dc80:	697a      	ldr	r2, [r7, #20]
 800dc82:	4313      	orrs	r3, r2
 800dc84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800dc86:	697b      	ldr	r3, [r7, #20]
 800dc88:	f023 0304 	bic.w	r3, r3, #4
 800dc8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	4a1c      	ldr	r2, [pc, #112]	@ (800dd04 <TIM_OC1_SetConfig+0x10c>)
 800dc92:	4293      	cmp	r3, r2
 800dc94:	d00f      	beq.n	800dcb6 <TIM_OC1_SetConfig+0xbe>
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	4a1b      	ldr	r2, [pc, #108]	@ (800dd08 <TIM_OC1_SetConfig+0x110>)
 800dc9a:	4293      	cmp	r3, r2
 800dc9c:	d00b      	beq.n	800dcb6 <TIM_OC1_SetConfig+0xbe>
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	4a1a      	ldr	r2, [pc, #104]	@ (800dd0c <TIM_OC1_SetConfig+0x114>)
 800dca2:	4293      	cmp	r3, r2
 800dca4:	d007      	beq.n	800dcb6 <TIM_OC1_SetConfig+0xbe>
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	4a19      	ldr	r2, [pc, #100]	@ (800dd10 <TIM_OC1_SetConfig+0x118>)
 800dcaa:	4293      	cmp	r3, r2
 800dcac:	d003      	beq.n	800dcb6 <TIM_OC1_SetConfig+0xbe>
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	4a18      	ldr	r2, [pc, #96]	@ (800dd14 <TIM_OC1_SetConfig+0x11c>)
 800dcb2:	4293      	cmp	r3, r2
 800dcb4:	d111      	bne.n	800dcda <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800dcb6:	693b      	ldr	r3, [r7, #16]
 800dcb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dcbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800dcbe:	693b      	ldr	r3, [r7, #16]
 800dcc0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800dcc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	695b      	ldr	r3, [r3, #20]
 800dcca:	693a      	ldr	r2, [r7, #16]
 800dccc:	4313      	orrs	r3, r2
 800dcce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	699b      	ldr	r3, [r3, #24]
 800dcd4:	693a      	ldr	r2, [r7, #16]
 800dcd6:	4313      	orrs	r3, r2
 800dcd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	693a      	ldr	r2, [r7, #16]
 800dcde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	68fa      	ldr	r2, [r7, #12]
 800dce4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	685a      	ldr	r2, [r3, #4]
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	697a      	ldr	r2, [r7, #20]
 800dcf2:	621a      	str	r2, [r3, #32]
}
 800dcf4:	bf00      	nop
 800dcf6:	371c      	adds	r7, #28
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfe:	4770      	bx	lr
 800dd00:	fffeff8f 	.word	0xfffeff8f
 800dd04:	40010000 	.word	0x40010000
 800dd08:	40010400 	.word	0x40010400
 800dd0c:	40014000 	.word	0x40014000
 800dd10:	40014400 	.word	0x40014400
 800dd14:	40014800 	.word	0x40014800

0800dd18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dd18:	b480      	push	{r7}
 800dd1a:	b087      	sub	sp, #28
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
 800dd20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	6a1b      	ldr	r3, [r3, #32]
 800dd26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	6a1b      	ldr	r3, [r3, #32]
 800dd2c:	f023 0210 	bic.w	r2, r3, #16
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	685b      	ldr	r3, [r3, #4]
 800dd38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	699b      	ldr	r3, [r3, #24]
 800dd3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800dd40:	68fa      	ldr	r2, [r7, #12]
 800dd42:	4b34      	ldr	r3, [pc, #208]	@ (800de14 <TIM_OC2_SetConfig+0xfc>)
 800dd44:	4013      	ands	r3, r2
 800dd46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dd4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dd50:	683b      	ldr	r3, [r7, #0]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	021b      	lsls	r3, r3, #8
 800dd56:	68fa      	ldr	r2, [r7, #12]
 800dd58:	4313      	orrs	r3, r2
 800dd5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800dd5c:	697b      	ldr	r3, [r7, #20]
 800dd5e:	f023 0320 	bic.w	r3, r3, #32
 800dd62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800dd64:	683b      	ldr	r3, [r7, #0]
 800dd66:	689b      	ldr	r3, [r3, #8]
 800dd68:	011b      	lsls	r3, r3, #4
 800dd6a:	697a      	ldr	r2, [r7, #20]
 800dd6c:	4313      	orrs	r3, r2
 800dd6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	4a29      	ldr	r2, [pc, #164]	@ (800de18 <TIM_OC2_SetConfig+0x100>)
 800dd74:	4293      	cmp	r3, r2
 800dd76:	d003      	beq.n	800dd80 <TIM_OC2_SetConfig+0x68>
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	4a28      	ldr	r2, [pc, #160]	@ (800de1c <TIM_OC2_SetConfig+0x104>)
 800dd7c:	4293      	cmp	r3, r2
 800dd7e:	d10d      	bne.n	800dd9c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800dd80:	697b      	ldr	r3, [r7, #20]
 800dd82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dd86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	68db      	ldr	r3, [r3, #12]
 800dd8c:	011b      	lsls	r3, r3, #4
 800dd8e:	697a      	ldr	r2, [r7, #20]
 800dd90:	4313      	orrs	r3, r2
 800dd92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800dd94:	697b      	ldr	r3, [r7, #20]
 800dd96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dd9a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	4a1e      	ldr	r2, [pc, #120]	@ (800de18 <TIM_OC2_SetConfig+0x100>)
 800dda0:	4293      	cmp	r3, r2
 800dda2:	d00f      	beq.n	800ddc4 <TIM_OC2_SetConfig+0xac>
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	4a1d      	ldr	r2, [pc, #116]	@ (800de1c <TIM_OC2_SetConfig+0x104>)
 800dda8:	4293      	cmp	r3, r2
 800ddaa:	d00b      	beq.n	800ddc4 <TIM_OC2_SetConfig+0xac>
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	4a1c      	ldr	r2, [pc, #112]	@ (800de20 <TIM_OC2_SetConfig+0x108>)
 800ddb0:	4293      	cmp	r3, r2
 800ddb2:	d007      	beq.n	800ddc4 <TIM_OC2_SetConfig+0xac>
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	4a1b      	ldr	r2, [pc, #108]	@ (800de24 <TIM_OC2_SetConfig+0x10c>)
 800ddb8:	4293      	cmp	r3, r2
 800ddba:	d003      	beq.n	800ddc4 <TIM_OC2_SetConfig+0xac>
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	4a1a      	ldr	r2, [pc, #104]	@ (800de28 <TIM_OC2_SetConfig+0x110>)
 800ddc0:	4293      	cmp	r3, r2
 800ddc2:	d113      	bne.n	800ddec <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ddc4:	693b      	ldr	r3, [r7, #16]
 800ddc6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ddca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ddcc:	693b      	ldr	r3, [r7, #16]
 800ddce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ddd2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ddd4:	683b      	ldr	r3, [r7, #0]
 800ddd6:	695b      	ldr	r3, [r3, #20]
 800ddd8:	009b      	lsls	r3, r3, #2
 800ddda:	693a      	ldr	r2, [r7, #16]
 800dddc:	4313      	orrs	r3, r2
 800ddde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800dde0:	683b      	ldr	r3, [r7, #0]
 800dde2:	699b      	ldr	r3, [r3, #24]
 800dde4:	009b      	lsls	r3, r3, #2
 800dde6:	693a      	ldr	r2, [r7, #16]
 800dde8:	4313      	orrs	r3, r2
 800ddea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	693a      	ldr	r2, [r7, #16]
 800ddf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	68fa      	ldr	r2, [r7, #12]
 800ddf6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	685a      	ldr	r2, [r3, #4]
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	697a      	ldr	r2, [r7, #20]
 800de04:	621a      	str	r2, [r3, #32]
}
 800de06:	bf00      	nop
 800de08:	371c      	adds	r7, #28
 800de0a:	46bd      	mov	sp, r7
 800de0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de10:	4770      	bx	lr
 800de12:	bf00      	nop
 800de14:	feff8fff 	.word	0xfeff8fff
 800de18:	40010000 	.word	0x40010000
 800de1c:	40010400 	.word	0x40010400
 800de20:	40014000 	.word	0x40014000
 800de24:	40014400 	.word	0x40014400
 800de28:	40014800 	.word	0x40014800

0800de2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800de2c:	b480      	push	{r7}
 800de2e:	b087      	sub	sp, #28
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
 800de34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	6a1b      	ldr	r3, [r3, #32]
 800de3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	6a1b      	ldr	r3, [r3, #32]
 800de40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	685b      	ldr	r3, [r3, #4]
 800de4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	69db      	ldr	r3, [r3, #28]
 800de52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800de54:	68fa      	ldr	r2, [r7, #12]
 800de56:	4b33      	ldr	r3, [pc, #204]	@ (800df24 <TIM_OC3_SetConfig+0xf8>)
 800de58:	4013      	ands	r3, r2
 800de5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	f023 0303 	bic.w	r3, r3, #3
 800de62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	68fa      	ldr	r2, [r7, #12]
 800de6a:	4313      	orrs	r3, r2
 800de6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800de6e:	697b      	ldr	r3, [r7, #20]
 800de70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800de74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	689b      	ldr	r3, [r3, #8]
 800de7a:	021b      	lsls	r3, r3, #8
 800de7c:	697a      	ldr	r2, [r7, #20]
 800de7e:	4313      	orrs	r3, r2
 800de80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	4a28      	ldr	r2, [pc, #160]	@ (800df28 <TIM_OC3_SetConfig+0xfc>)
 800de86:	4293      	cmp	r3, r2
 800de88:	d003      	beq.n	800de92 <TIM_OC3_SetConfig+0x66>
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	4a27      	ldr	r2, [pc, #156]	@ (800df2c <TIM_OC3_SetConfig+0x100>)
 800de8e:	4293      	cmp	r3, r2
 800de90:	d10d      	bne.n	800deae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800de92:	697b      	ldr	r3, [r7, #20]
 800de94:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800de98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	68db      	ldr	r3, [r3, #12]
 800de9e:	021b      	lsls	r3, r3, #8
 800dea0:	697a      	ldr	r2, [r7, #20]
 800dea2:	4313      	orrs	r3, r2
 800dea4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800dea6:	697b      	ldr	r3, [r7, #20]
 800dea8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800deac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	4a1d      	ldr	r2, [pc, #116]	@ (800df28 <TIM_OC3_SetConfig+0xfc>)
 800deb2:	4293      	cmp	r3, r2
 800deb4:	d00f      	beq.n	800ded6 <TIM_OC3_SetConfig+0xaa>
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	4a1c      	ldr	r2, [pc, #112]	@ (800df2c <TIM_OC3_SetConfig+0x100>)
 800deba:	4293      	cmp	r3, r2
 800debc:	d00b      	beq.n	800ded6 <TIM_OC3_SetConfig+0xaa>
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	4a1b      	ldr	r2, [pc, #108]	@ (800df30 <TIM_OC3_SetConfig+0x104>)
 800dec2:	4293      	cmp	r3, r2
 800dec4:	d007      	beq.n	800ded6 <TIM_OC3_SetConfig+0xaa>
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	4a1a      	ldr	r2, [pc, #104]	@ (800df34 <TIM_OC3_SetConfig+0x108>)
 800deca:	4293      	cmp	r3, r2
 800decc:	d003      	beq.n	800ded6 <TIM_OC3_SetConfig+0xaa>
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	4a19      	ldr	r2, [pc, #100]	@ (800df38 <TIM_OC3_SetConfig+0x10c>)
 800ded2:	4293      	cmp	r3, r2
 800ded4:	d113      	bne.n	800defe <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ded6:	693b      	ldr	r3, [r7, #16]
 800ded8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dedc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800dede:	693b      	ldr	r3, [r7, #16]
 800dee0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800dee4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	695b      	ldr	r3, [r3, #20]
 800deea:	011b      	lsls	r3, r3, #4
 800deec:	693a      	ldr	r2, [r7, #16]
 800deee:	4313      	orrs	r3, r2
 800def0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	699b      	ldr	r3, [r3, #24]
 800def6:	011b      	lsls	r3, r3, #4
 800def8:	693a      	ldr	r2, [r7, #16]
 800defa:	4313      	orrs	r3, r2
 800defc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	693a      	ldr	r2, [r7, #16]
 800df02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	68fa      	ldr	r2, [r7, #12]
 800df08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	685a      	ldr	r2, [r3, #4]
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	697a      	ldr	r2, [r7, #20]
 800df16:	621a      	str	r2, [r3, #32]
}
 800df18:	bf00      	nop
 800df1a:	371c      	adds	r7, #28
 800df1c:	46bd      	mov	sp, r7
 800df1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df22:	4770      	bx	lr
 800df24:	fffeff8f 	.word	0xfffeff8f
 800df28:	40010000 	.word	0x40010000
 800df2c:	40010400 	.word	0x40010400
 800df30:	40014000 	.word	0x40014000
 800df34:	40014400 	.word	0x40014400
 800df38:	40014800 	.word	0x40014800

0800df3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800df3c:	b480      	push	{r7}
 800df3e:	b087      	sub	sp, #28
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
 800df44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	6a1b      	ldr	r3, [r3, #32]
 800df4a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	6a1b      	ldr	r3, [r3, #32]
 800df50:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	685b      	ldr	r3, [r3, #4]
 800df5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	69db      	ldr	r3, [r3, #28]
 800df62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800df64:	68fa      	ldr	r2, [r7, #12]
 800df66:	4b24      	ldr	r3, [pc, #144]	@ (800dff8 <TIM_OC4_SetConfig+0xbc>)
 800df68:	4013      	ands	r3, r2
 800df6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800df72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800df74:	683b      	ldr	r3, [r7, #0]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	021b      	lsls	r3, r3, #8
 800df7a:	68fa      	ldr	r2, [r7, #12]
 800df7c:	4313      	orrs	r3, r2
 800df7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800df80:	693b      	ldr	r3, [r7, #16]
 800df82:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800df86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	689b      	ldr	r3, [r3, #8]
 800df8c:	031b      	lsls	r3, r3, #12
 800df8e:	693a      	ldr	r2, [r7, #16]
 800df90:	4313      	orrs	r3, r2
 800df92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	4a19      	ldr	r2, [pc, #100]	@ (800dffc <TIM_OC4_SetConfig+0xc0>)
 800df98:	4293      	cmp	r3, r2
 800df9a:	d00f      	beq.n	800dfbc <TIM_OC4_SetConfig+0x80>
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	4a18      	ldr	r2, [pc, #96]	@ (800e000 <TIM_OC4_SetConfig+0xc4>)
 800dfa0:	4293      	cmp	r3, r2
 800dfa2:	d00b      	beq.n	800dfbc <TIM_OC4_SetConfig+0x80>
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	4a17      	ldr	r2, [pc, #92]	@ (800e004 <TIM_OC4_SetConfig+0xc8>)
 800dfa8:	4293      	cmp	r3, r2
 800dfaa:	d007      	beq.n	800dfbc <TIM_OC4_SetConfig+0x80>
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	4a16      	ldr	r2, [pc, #88]	@ (800e008 <TIM_OC4_SetConfig+0xcc>)
 800dfb0:	4293      	cmp	r3, r2
 800dfb2:	d003      	beq.n	800dfbc <TIM_OC4_SetConfig+0x80>
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	4a15      	ldr	r2, [pc, #84]	@ (800e00c <TIM_OC4_SetConfig+0xd0>)
 800dfb8:	4293      	cmp	r3, r2
 800dfba:	d109      	bne.n	800dfd0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800dfc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800dfc4:	683b      	ldr	r3, [r7, #0]
 800dfc6:	695b      	ldr	r3, [r3, #20]
 800dfc8:	019b      	lsls	r3, r3, #6
 800dfca:	697a      	ldr	r2, [r7, #20]
 800dfcc:	4313      	orrs	r3, r2
 800dfce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	697a      	ldr	r2, [r7, #20]
 800dfd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	68fa      	ldr	r2, [r7, #12]
 800dfda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dfdc:	683b      	ldr	r3, [r7, #0]
 800dfde:	685a      	ldr	r2, [r3, #4]
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	693a      	ldr	r2, [r7, #16]
 800dfe8:	621a      	str	r2, [r3, #32]
}
 800dfea:	bf00      	nop
 800dfec:	371c      	adds	r7, #28
 800dfee:	46bd      	mov	sp, r7
 800dff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff4:	4770      	bx	lr
 800dff6:	bf00      	nop
 800dff8:	feff8fff 	.word	0xfeff8fff
 800dffc:	40010000 	.word	0x40010000
 800e000:	40010400 	.word	0x40010400
 800e004:	40014000 	.word	0x40014000
 800e008:	40014400 	.word	0x40014400
 800e00c:	40014800 	.word	0x40014800

0800e010 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e010:	b480      	push	{r7}
 800e012:	b087      	sub	sp, #28
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
 800e018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6a1b      	ldr	r3, [r3, #32]
 800e01e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	6a1b      	ldr	r3, [r3, #32]
 800e024:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	685b      	ldr	r3, [r3, #4]
 800e030:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e038:	68fa      	ldr	r2, [r7, #12]
 800e03a:	4b21      	ldr	r3, [pc, #132]	@ (800e0c0 <TIM_OC5_SetConfig+0xb0>)
 800e03c:	4013      	ands	r3, r2
 800e03e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	68fa      	ldr	r2, [r7, #12]
 800e046:	4313      	orrs	r3, r2
 800e048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e04a:	693b      	ldr	r3, [r7, #16]
 800e04c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e050:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	689b      	ldr	r3, [r3, #8]
 800e056:	041b      	lsls	r3, r3, #16
 800e058:	693a      	ldr	r2, [r7, #16]
 800e05a:	4313      	orrs	r3, r2
 800e05c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	4a18      	ldr	r2, [pc, #96]	@ (800e0c4 <TIM_OC5_SetConfig+0xb4>)
 800e062:	4293      	cmp	r3, r2
 800e064:	d00f      	beq.n	800e086 <TIM_OC5_SetConfig+0x76>
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	4a17      	ldr	r2, [pc, #92]	@ (800e0c8 <TIM_OC5_SetConfig+0xb8>)
 800e06a:	4293      	cmp	r3, r2
 800e06c:	d00b      	beq.n	800e086 <TIM_OC5_SetConfig+0x76>
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	4a16      	ldr	r2, [pc, #88]	@ (800e0cc <TIM_OC5_SetConfig+0xbc>)
 800e072:	4293      	cmp	r3, r2
 800e074:	d007      	beq.n	800e086 <TIM_OC5_SetConfig+0x76>
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	4a15      	ldr	r2, [pc, #84]	@ (800e0d0 <TIM_OC5_SetConfig+0xc0>)
 800e07a:	4293      	cmp	r3, r2
 800e07c:	d003      	beq.n	800e086 <TIM_OC5_SetConfig+0x76>
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	4a14      	ldr	r2, [pc, #80]	@ (800e0d4 <TIM_OC5_SetConfig+0xc4>)
 800e082:	4293      	cmp	r3, r2
 800e084:	d109      	bne.n	800e09a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e086:	697b      	ldr	r3, [r7, #20]
 800e088:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e08c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	695b      	ldr	r3, [r3, #20]
 800e092:	021b      	lsls	r3, r3, #8
 800e094:	697a      	ldr	r2, [r7, #20]
 800e096:	4313      	orrs	r3, r2
 800e098:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	697a      	ldr	r2, [r7, #20]
 800e09e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	68fa      	ldr	r2, [r7, #12]
 800e0a4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e0a6:	683b      	ldr	r3, [r7, #0]
 800e0a8:	685a      	ldr	r2, [r3, #4]
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	693a      	ldr	r2, [r7, #16]
 800e0b2:	621a      	str	r2, [r3, #32]
}
 800e0b4:	bf00      	nop
 800e0b6:	371c      	adds	r7, #28
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0be:	4770      	bx	lr
 800e0c0:	fffeff8f 	.word	0xfffeff8f
 800e0c4:	40010000 	.word	0x40010000
 800e0c8:	40010400 	.word	0x40010400
 800e0cc:	40014000 	.word	0x40014000
 800e0d0:	40014400 	.word	0x40014400
 800e0d4:	40014800 	.word	0x40014800

0800e0d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e0d8:	b480      	push	{r7}
 800e0da:	b087      	sub	sp, #28
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
 800e0e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	6a1b      	ldr	r3, [r3, #32]
 800e0e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	6a1b      	ldr	r3, [r3, #32]
 800e0ec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	685b      	ldr	r3, [r3, #4]
 800e0f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e0fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e100:	68fa      	ldr	r2, [r7, #12]
 800e102:	4b22      	ldr	r3, [pc, #136]	@ (800e18c <TIM_OC6_SetConfig+0xb4>)
 800e104:	4013      	ands	r3, r2
 800e106:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	021b      	lsls	r3, r3, #8
 800e10e:	68fa      	ldr	r2, [r7, #12]
 800e110:	4313      	orrs	r3, r2
 800e112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e114:	693b      	ldr	r3, [r7, #16]
 800e116:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e11a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	689b      	ldr	r3, [r3, #8]
 800e120:	051b      	lsls	r3, r3, #20
 800e122:	693a      	ldr	r2, [r7, #16]
 800e124:	4313      	orrs	r3, r2
 800e126:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	4a19      	ldr	r2, [pc, #100]	@ (800e190 <TIM_OC6_SetConfig+0xb8>)
 800e12c:	4293      	cmp	r3, r2
 800e12e:	d00f      	beq.n	800e150 <TIM_OC6_SetConfig+0x78>
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	4a18      	ldr	r2, [pc, #96]	@ (800e194 <TIM_OC6_SetConfig+0xbc>)
 800e134:	4293      	cmp	r3, r2
 800e136:	d00b      	beq.n	800e150 <TIM_OC6_SetConfig+0x78>
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	4a17      	ldr	r2, [pc, #92]	@ (800e198 <TIM_OC6_SetConfig+0xc0>)
 800e13c:	4293      	cmp	r3, r2
 800e13e:	d007      	beq.n	800e150 <TIM_OC6_SetConfig+0x78>
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	4a16      	ldr	r2, [pc, #88]	@ (800e19c <TIM_OC6_SetConfig+0xc4>)
 800e144:	4293      	cmp	r3, r2
 800e146:	d003      	beq.n	800e150 <TIM_OC6_SetConfig+0x78>
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	4a15      	ldr	r2, [pc, #84]	@ (800e1a0 <TIM_OC6_SetConfig+0xc8>)
 800e14c:	4293      	cmp	r3, r2
 800e14e:	d109      	bne.n	800e164 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e150:	697b      	ldr	r3, [r7, #20]
 800e152:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e156:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e158:	683b      	ldr	r3, [r7, #0]
 800e15a:	695b      	ldr	r3, [r3, #20]
 800e15c:	029b      	lsls	r3, r3, #10
 800e15e:	697a      	ldr	r2, [r7, #20]
 800e160:	4313      	orrs	r3, r2
 800e162:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	697a      	ldr	r2, [r7, #20]
 800e168:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	68fa      	ldr	r2, [r7, #12]
 800e16e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	685a      	ldr	r2, [r3, #4]
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	693a      	ldr	r2, [r7, #16]
 800e17c:	621a      	str	r2, [r3, #32]
}
 800e17e:	bf00      	nop
 800e180:	371c      	adds	r7, #28
 800e182:	46bd      	mov	sp, r7
 800e184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e188:	4770      	bx	lr
 800e18a:	bf00      	nop
 800e18c:	feff8fff 	.word	0xfeff8fff
 800e190:	40010000 	.word	0x40010000
 800e194:	40010400 	.word	0x40010400
 800e198:	40014000 	.word	0x40014000
 800e19c:	40014400 	.word	0x40014400
 800e1a0:	40014800 	.word	0x40014800

0800e1a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e1a4:	b480      	push	{r7}
 800e1a6:	b087      	sub	sp, #28
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	60f8      	str	r0, [r7, #12]
 800e1ac:	60b9      	str	r1, [r7, #8]
 800e1ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e1b0:	68bb      	ldr	r3, [r7, #8]
 800e1b2:	f003 031f 	and.w	r3, r3, #31
 800e1b6:	2201      	movs	r2, #1
 800e1b8:	fa02 f303 	lsl.w	r3, r2, r3
 800e1bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	6a1a      	ldr	r2, [r3, #32]
 800e1c2:	697b      	ldr	r3, [r7, #20]
 800e1c4:	43db      	mvns	r3, r3
 800e1c6:	401a      	ands	r2, r3
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	6a1a      	ldr	r2, [r3, #32]
 800e1d0:	68bb      	ldr	r3, [r7, #8]
 800e1d2:	f003 031f 	and.w	r3, r3, #31
 800e1d6:	6879      	ldr	r1, [r7, #4]
 800e1d8:	fa01 f303 	lsl.w	r3, r1, r3
 800e1dc:	431a      	orrs	r2, r3
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	621a      	str	r2, [r3, #32]
}
 800e1e2:	bf00      	nop
 800e1e4:	371c      	adds	r7, #28
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ec:	4770      	bx	lr
	...

0800e1f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e1f0:	b480      	push	{r7}
 800e1f2:	b085      	sub	sp, #20
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
 800e1f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e200:	2b01      	cmp	r3, #1
 800e202:	d101      	bne.n	800e208 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e204:	2302      	movs	r3, #2
 800e206:	e06d      	b.n	800e2e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	2201      	movs	r2, #1
 800e20c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	2202      	movs	r2, #2
 800e214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	685b      	ldr	r3, [r3, #4]
 800e21e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	689b      	ldr	r3, [r3, #8]
 800e226:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	4a30      	ldr	r2, [pc, #192]	@ (800e2f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e22e:	4293      	cmp	r3, r2
 800e230:	d004      	beq.n	800e23c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	4a2f      	ldr	r2, [pc, #188]	@ (800e2f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e238:	4293      	cmp	r3, r2
 800e23a:	d108      	bne.n	800e24e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e242:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	685b      	ldr	r3, [r3, #4]
 800e248:	68fa      	ldr	r2, [r7, #12]
 800e24a:	4313      	orrs	r3, r2
 800e24c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e254:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	68fa      	ldr	r2, [r7, #12]
 800e25c:	4313      	orrs	r3, r2
 800e25e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	68fa      	ldr	r2, [r7, #12]
 800e266:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	4a20      	ldr	r2, [pc, #128]	@ (800e2f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e26e:	4293      	cmp	r3, r2
 800e270:	d022      	beq.n	800e2b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e27a:	d01d      	beq.n	800e2b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	4a1d      	ldr	r2, [pc, #116]	@ (800e2f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e282:	4293      	cmp	r3, r2
 800e284:	d018      	beq.n	800e2b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	4a1c      	ldr	r2, [pc, #112]	@ (800e2fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e28c:	4293      	cmp	r3, r2
 800e28e:	d013      	beq.n	800e2b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	4a1a      	ldr	r2, [pc, #104]	@ (800e300 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e296:	4293      	cmp	r3, r2
 800e298:	d00e      	beq.n	800e2b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	4a15      	ldr	r2, [pc, #84]	@ (800e2f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e2a0:	4293      	cmp	r3, r2
 800e2a2:	d009      	beq.n	800e2b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	4a16      	ldr	r2, [pc, #88]	@ (800e304 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e2aa:	4293      	cmp	r3, r2
 800e2ac:	d004      	beq.n	800e2b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	4a15      	ldr	r2, [pc, #84]	@ (800e308 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e2b4:	4293      	cmp	r3, r2
 800e2b6:	d10c      	bne.n	800e2d2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e2b8:	68bb      	ldr	r3, [r7, #8]
 800e2ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e2be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	689b      	ldr	r3, [r3, #8]
 800e2c4:	68ba      	ldr	r2, [r7, #8]
 800e2c6:	4313      	orrs	r3, r2
 800e2c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	68ba      	ldr	r2, [r7, #8]
 800e2d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	2201      	movs	r2, #1
 800e2d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2200      	movs	r2, #0
 800e2de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e2e2:	2300      	movs	r3, #0
}
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	3714      	adds	r7, #20
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ee:	4770      	bx	lr
 800e2f0:	40010000 	.word	0x40010000
 800e2f4:	40010400 	.word	0x40010400
 800e2f8:	40000400 	.word	0x40000400
 800e2fc:	40000800 	.word	0x40000800
 800e300:	40000c00 	.word	0x40000c00
 800e304:	40001800 	.word	0x40001800
 800e308:	40014000 	.word	0x40014000

0800e30c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e30c:	b480      	push	{r7}
 800e30e:	b083      	sub	sp, #12
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e314:	bf00      	nop
 800e316:	370c      	adds	r7, #12
 800e318:	46bd      	mov	sp, r7
 800e31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31e:	4770      	bx	lr

0800e320 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e320:	b480      	push	{r7}
 800e322:	b083      	sub	sp, #12
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e328:	bf00      	nop
 800e32a:	370c      	adds	r7, #12
 800e32c:	46bd      	mov	sp, r7
 800e32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e332:	4770      	bx	lr

0800e334 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e334:	b480      	push	{r7}
 800e336:	b083      	sub	sp, #12
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e33c:	bf00      	nop
 800e33e:	370c      	adds	r7, #12
 800e340:	46bd      	mov	sp, r7
 800e342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e346:	4770      	bx	lr

0800e348 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b082      	sub	sp, #8
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d101      	bne.n	800e35a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e356:	2301      	movs	r3, #1
 800e358:	e042      	b.n	800e3e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e360:	2b00      	cmp	r3, #0
 800e362:	d106      	bne.n	800e372 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	2200      	movs	r2, #0
 800e368:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e36c:	6878      	ldr	r0, [r7, #4]
 800e36e:	f7f4 fc87 	bl	8002c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	2224      	movs	r2, #36	@ 0x24
 800e376:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	681a      	ldr	r2, [r3, #0]
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	f022 0201 	bic.w	r2, r2, #1
 800e388:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d002      	beq.n	800e398 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e392:	6878      	ldr	r0, [r7, #4]
 800e394:	f001 fe0e 	bl	800ffb4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e398:	6878      	ldr	r0, [r7, #4]
 800e39a:	f000 ff9f 	bl	800f2dc <UART_SetConfig>
 800e39e:	4603      	mov	r3, r0
 800e3a0:	2b01      	cmp	r3, #1
 800e3a2:	d101      	bne.n	800e3a8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e3a4:	2301      	movs	r3, #1
 800e3a6:	e01b      	b.n	800e3e0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	685a      	ldr	r2, [r3, #4]
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e3b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	689a      	ldr	r2, [r3, #8]
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e3c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	681a      	ldr	r2, [r3, #0]
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	f042 0201 	orr.w	r2, r2, #1
 800e3d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e3d8:	6878      	ldr	r0, [r7, #4]
 800e3da:	f001 fe8d 	bl	80100f8 <UART_CheckIdleState>
 800e3de:	4603      	mov	r3, r0
}
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	3708      	adds	r7, #8
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}

0800e3e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b08a      	sub	sp, #40	@ 0x28
 800e3ec:	af02      	add	r7, sp, #8
 800e3ee:	60f8      	str	r0, [r7, #12]
 800e3f0:	60b9      	str	r1, [r7, #8]
 800e3f2:	603b      	str	r3, [r7, #0]
 800e3f4:	4613      	mov	r3, r2
 800e3f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e3fe:	2b20      	cmp	r3, #32
 800e400:	d17b      	bne.n	800e4fa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e402:	68bb      	ldr	r3, [r7, #8]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d002      	beq.n	800e40e <HAL_UART_Transmit+0x26>
 800e408:	88fb      	ldrh	r3, [r7, #6]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d101      	bne.n	800e412 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e40e:	2301      	movs	r3, #1
 800e410:	e074      	b.n	800e4fc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	2200      	movs	r2, #0
 800e416:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	2221      	movs	r2, #33	@ 0x21
 800e41e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e422:	f7f7 f835 	bl	8005490 <HAL_GetTick>
 800e426:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	88fa      	ldrh	r2, [r7, #6]
 800e42c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	88fa      	ldrh	r2, [r7, #6]
 800e434:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	689b      	ldr	r3, [r3, #8]
 800e43c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e440:	d108      	bne.n	800e454 <HAL_UART_Transmit+0x6c>
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	691b      	ldr	r3, [r3, #16]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d104      	bne.n	800e454 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e44a:	2300      	movs	r3, #0
 800e44c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e44e:	68bb      	ldr	r3, [r7, #8]
 800e450:	61bb      	str	r3, [r7, #24]
 800e452:	e003      	b.n	800e45c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e454:	68bb      	ldr	r3, [r7, #8]
 800e456:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e458:	2300      	movs	r3, #0
 800e45a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e45c:	e030      	b.n	800e4c0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e45e:	683b      	ldr	r3, [r7, #0]
 800e460:	9300      	str	r3, [sp, #0]
 800e462:	697b      	ldr	r3, [r7, #20]
 800e464:	2200      	movs	r2, #0
 800e466:	2180      	movs	r1, #128	@ 0x80
 800e468:	68f8      	ldr	r0, [r7, #12]
 800e46a:	f001 feef 	bl	801024c <UART_WaitOnFlagUntilTimeout>
 800e46e:	4603      	mov	r3, r0
 800e470:	2b00      	cmp	r3, #0
 800e472:	d005      	beq.n	800e480 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	2220      	movs	r2, #32
 800e478:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800e47c:	2303      	movs	r3, #3
 800e47e:	e03d      	b.n	800e4fc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e480:	69fb      	ldr	r3, [r7, #28]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d10b      	bne.n	800e49e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e486:	69bb      	ldr	r3, [r7, #24]
 800e488:	881b      	ldrh	r3, [r3, #0]
 800e48a:	461a      	mov	r2, r3
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e494:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e496:	69bb      	ldr	r3, [r7, #24]
 800e498:	3302      	adds	r3, #2
 800e49a:	61bb      	str	r3, [r7, #24]
 800e49c:	e007      	b.n	800e4ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e49e:	69fb      	ldr	r3, [r7, #28]
 800e4a0:	781a      	ldrb	r2, [r3, #0]
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e4a8:	69fb      	ldr	r3, [r7, #28]
 800e4aa:	3301      	adds	r3, #1
 800e4ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e4b4:	b29b      	uxth	r3, r3
 800e4b6:	3b01      	subs	r3, #1
 800e4b8:	b29a      	uxth	r2, r3
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e4c6:	b29b      	uxth	r3, r3
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d1c8      	bne.n	800e45e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e4cc:	683b      	ldr	r3, [r7, #0]
 800e4ce:	9300      	str	r3, [sp, #0]
 800e4d0:	697b      	ldr	r3, [r7, #20]
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	2140      	movs	r1, #64	@ 0x40
 800e4d6:	68f8      	ldr	r0, [r7, #12]
 800e4d8:	f001 feb8 	bl	801024c <UART_WaitOnFlagUntilTimeout>
 800e4dc:	4603      	mov	r3, r0
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d005      	beq.n	800e4ee <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	2220      	movs	r2, #32
 800e4e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800e4ea:	2303      	movs	r3, #3
 800e4ec:	e006      	b.n	800e4fc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	2220      	movs	r2, #32
 800e4f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	e000      	b.n	800e4fc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e4fa:	2302      	movs	r3, #2
  }
}
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	3720      	adds	r7, #32
 800e500:	46bd      	mov	sp, r7
 800e502:	bd80      	pop	{r7, pc}

0800e504 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800e504:	b480      	push	{r7}
 800e506:	b091      	sub	sp, #68	@ 0x44
 800e508:	af00      	add	r7, sp, #0
 800e50a:	60f8      	str	r0, [r7, #12]
 800e50c:	60b9      	str	r1, [r7, #8]
 800e50e:	4613      	mov	r3, r2
 800e510:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e518:	2b20      	cmp	r3, #32
 800e51a:	d178      	bne.n	800e60e <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e51c:	68bb      	ldr	r3, [r7, #8]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d002      	beq.n	800e528 <HAL_UART_Transmit_IT+0x24>
 800e522:	88fb      	ldrh	r3, [r7, #6]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d101      	bne.n	800e52c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800e528:	2301      	movs	r3, #1
 800e52a:	e071      	b.n	800e610 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	68ba      	ldr	r2, [r7, #8]
 800e530:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	88fa      	ldrh	r2, [r7, #6]
 800e536:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	88fa      	ldrh	r2, [r7, #6]
 800e53e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	2200      	movs	r2, #0
 800e546:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	2200      	movs	r2, #0
 800e54c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	2221      	movs	r2, #33	@ 0x21
 800e554:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e55c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e560:	d12a      	bne.n	800e5b8 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	689b      	ldr	r3, [r3, #8]
 800e566:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e56a:	d107      	bne.n	800e57c <HAL_UART_Transmit_IT+0x78>
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	691b      	ldr	r3, [r3, #16]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d103      	bne.n	800e57c <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	4a29      	ldr	r2, [pc, #164]	@ (800e61c <HAL_UART_Transmit_IT+0x118>)
 800e578:	679a      	str	r2, [r3, #120]	@ 0x78
 800e57a:	e002      	b.n	800e582 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	4a28      	ldr	r2, [pc, #160]	@ (800e620 <HAL_UART_Transmit_IT+0x11c>)
 800e580:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	3308      	adds	r3, #8
 800e588:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e58a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e58c:	e853 3f00 	ldrex	r3, [r3]
 800e590:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e594:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800e598:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	3308      	adds	r3, #8
 800e5a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e5a2:	637a      	str	r2, [r7, #52]	@ 0x34
 800e5a4:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e5a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e5aa:	e841 2300 	strex	r3, r2, [r1]
 800e5ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800e5b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d1e5      	bne.n	800e582 <HAL_UART_Transmit_IT+0x7e>
 800e5b6:	e028      	b.n	800e60a <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	689b      	ldr	r3, [r3, #8]
 800e5bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e5c0:	d107      	bne.n	800e5d2 <HAL_UART_Transmit_IT+0xce>
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	691b      	ldr	r3, [r3, #16]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d103      	bne.n	800e5d2 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	4a15      	ldr	r2, [pc, #84]	@ (800e624 <HAL_UART_Transmit_IT+0x120>)
 800e5ce:	679a      	str	r2, [r3, #120]	@ 0x78
 800e5d0:	e002      	b.n	800e5d8 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	4a14      	ldr	r2, [pc, #80]	@ (800e628 <HAL_UART_Transmit_IT+0x124>)
 800e5d6:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5de:	697b      	ldr	r3, [r7, #20]
 800e5e0:	e853 3f00 	ldrex	r3, [r3]
 800e5e4:	613b      	str	r3, [r7, #16]
   return(result);
 800e5e6:	693b      	ldr	r3, [r7, #16]
 800e5e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e5ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	461a      	mov	r2, r3
 800e5f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e5f6:	623b      	str	r3, [r7, #32]
 800e5f8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5fa:	69f9      	ldr	r1, [r7, #28]
 800e5fc:	6a3a      	ldr	r2, [r7, #32]
 800e5fe:	e841 2300 	strex	r3, r2, [r1]
 800e602:	61bb      	str	r3, [r7, #24]
   return(result);
 800e604:	69bb      	ldr	r3, [r7, #24]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d1e6      	bne.n	800e5d8 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800e60a:	2300      	movs	r3, #0
 800e60c:	e000      	b.n	800e610 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800e60e:	2302      	movs	r3, #2
  }
}
 800e610:	4618      	mov	r0, r3
 800e612:	3744      	adds	r7, #68	@ 0x44
 800e614:	46bd      	mov	sp, r7
 800e616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61a:	4770      	bx	lr
 800e61c:	08010d81 	.word	0x08010d81
 800e620:	08010ca1 	.word	0x08010ca1
 800e624:	08010bdf 	.word	0x08010bdf
 800e628:	08010b27 	.word	0x08010b27

0800e62c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b08a      	sub	sp, #40	@ 0x28
 800e630:	af00      	add	r7, sp, #0
 800e632:	60f8      	str	r0, [r7, #12]
 800e634:	60b9      	str	r1, [r7, #8]
 800e636:	4613      	mov	r3, r2
 800e638:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e640:	2b20      	cmp	r3, #32
 800e642:	d137      	bne.n	800e6b4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800e644:	68bb      	ldr	r3, [r7, #8]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d002      	beq.n	800e650 <HAL_UART_Receive_IT+0x24>
 800e64a:	88fb      	ldrh	r3, [r7, #6]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d101      	bne.n	800e654 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800e650:	2301      	movs	r3, #1
 800e652:	e030      	b.n	800e6b6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	2200      	movs	r2, #0
 800e658:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	4a18      	ldr	r2, [pc, #96]	@ (800e6c0 <HAL_UART_Receive_IT+0x94>)
 800e660:	4293      	cmp	r3, r2
 800e662:	d01f      	beq.n	800e6a4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	685b      	ldr	r3, [r3, #4]
 800e66a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d018      	beq.n	800e6a4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e678:	697b      	ldr	r3, [r7, #20]
 800e67a:	e853 3f00 	ldrex	r3, [r3]
 800e67e:	613b      	str	r3, [r7, #16]
   return(result);
 800e680:	693b      	ldr	r3, [r7, #16]
 800e682:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e686:	627b      	str	r3, [r7, #36]	@ 0x24
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	461a      	mov	r2, r3
 800e68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e690:	623b      	str	r3, [r7, #32]
 800e692:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e694:	69f9      	ldr	r1, [r7, #28]
 800e696:	6a3a      	ldr	r2, [r7, #32]
 800e698:	e841 2300 	strex	r3, r2, [r1]
 800e69c:	61bb      	str	r3, [r7, #24]
   return(result);
 800e69e:	69bb      	ldr	r3, [r7, #24]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d1e6      	bne.n	800e672 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e6a4:	88fb      	ldrh	r3, [r7, #6]
 800e6a6:	461a      	mov	r2, r3
 800e6a8:	68b9      	ldr	r1, [r7, #8]
 800e6aa:	68f8      	ldr	r0, [r7, #12]
 800e6ac:	f001 fe3c 	bl	8010328 <UART_Start_Receive_IT>
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	e000      	b.n	800e6b6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e6b4:	2302      	movs	r3, #2
  }
}
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	3728      	adds	r7, #40	@ 0x28
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	bd80      	pop	{r7, pc}
 800e6be:	bf00      	nop
 800e6c0:	58000c00 	.word	0x58000c00

0800e6c4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b08a      	sub	sp, #40	@ 0x28
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	60f8      	str	r0, [r7, #12]
 800e6cc:	60b9      	str	r1, [r7, #8]
 800e6ce:	4613      	mov	r3, r2
 800e6d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e6d8:	2b20      	cmp	r3, #32
 800e6da:	d137      	bne.n	800e74c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800e6dc:	68bb      	ldr	r3, [r7, #8]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d002      	beq.n	800e6e8 <HAL_UART_Receive_DMA+0x24>
 800e6e2:	88fb      	ldrh	r3, [r7, #6]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d101      	bne.n	800e6ec <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800e6e8:	2301      	movs	r3, #1
 800e6ea:	e030      	b.n	800e74e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	4a18      	ldr	r2, [pc, #96]	@ (800e758 <HAL_UART_Receive_DMA+0x94>)
 800e6f8:	4293      	cmp	r3, r2
 800e6fa:	d01f      	beq.n	800e73c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	685b      	ldr	r3, [r3, #4]
 800e702:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e706:	2b00      	cmp	r3, #0
 800e708:	d018      	beq.n	800e73c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e710:	697b      	ldr	r3, [r7, #20]
 800e712:	e853 3f00 	ldrex	r3, [r3]
 800e716:	613b      	str	r3, [r7, #16]
   return(result);
 800e718:	693b      	ldr	r3, [r7, #16]
 800e71a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e71e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	461a      	mov	r2, r3
 800e726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e728:	623b      	str	r3, [r7, #32]
 800e72a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e72c:	69f9      	ldr	r1, [r7, #28]
 800e72e:	6a3a      	ldr	r2, [r7, #32]
 800e730:	e841 2300 	strex	r3, r2, [r1]
 800e734:	61bb      	str	r3, [r7, #24]
   return(result);
 800e736:	69bb      	ldr	r3, [r7, #24]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d1e6      	bne.n	800e70a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e73c:	88fb      	ldrh	r3, [r7, #6]
 800e73e:	461a      	mov	r2, r3
 800e740:	68b9      	ldr	r1, [r7, #8]
 800e742:	68f8      	ldr	r0, [r7, #12]
 800e744:	f001 ff12 	bl	801056c <UART_Start_Receive_DMA>
 800e748:	4603      	mov	r3, r0
 800e74a:	e000      	b.n	800e74e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e74c:	2302      	movs	r3, #2
  }
}
 800e74e:	4618      	mov	r0, r3
 800e750:	3728      	adds	r7, #40	@ 0x28
 800e752:	46bd      	mov	sp, r7
 800e754:	bd80      	pop	{r7, pc}
 800e756:	bf00      	nop
 800e758:	58000c00 	.word	0x58000c00

0800e75c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b090      	sub	sp, #64	@ 0x40
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e76a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e772:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	689b      	ldr	r3, [r3, #8]
 800e77a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e77e:	2b80      	cmp	r3, #128	@ 0x80
 800e780:	d139      	bne.n	800e7f6 <HAL_UART_DMAStop+0x9a>
 800e782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e784:	2b21      	cmp	r3, #33	@ 0x21
 800e786:	d136      	bne.n	800e7f6 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	3308      	adds	r3, #8
 800e78e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e790:	6a3b      	ldr	r3, [r7, #32]
 800e792:	e853 3f00 	ldrex	r3, [r3]
 800e796:	61fb      	str	r3, [r7, #28]
   return(result);
 800e798:	69fb      	ldr	r3, [r7, #28]
 800e79a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e79e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	3308      	adds	r3, #8
 800e7a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e7a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e7aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e7ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e7b0:	e841 2300 	strex	r3, r2, [r1]
 800e7b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e7b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d1e5      	bne.n	800e788 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d015      	beq.n	800e7f0 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	f7f7 fde1 	bl	8006390 <HAL_DMA_Abort>
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d00d      	beq.n	800e7f0 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f7f9 fa9f 	bl	8007d1c <HAL_DMA_GetError>
 800e7de:	4603      	mov	r3, r0
 800e7e0:	2b20      	cmp	r3, #32
 800e7e2:	d105      	bne.n	800e7f0 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2210      	movs	r2, #16
 800e7e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800e7ec:	2303      	movs	r3, #3
 800e7ee:	e047      	b.n	800e880 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800e7f0:	6878      	ldr	r0, [r7, #4]
 800e7f2:	f001 ff61 	bl	80106b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	689b      	ldr	r3, [r3, #8]
 800e7fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e800:	2b40      	cmp	r3, #64	@ 0x40
 800e802:	d13c      	bne.n	800e87e <HAL_UART_DMAStop+0x122>
 800e804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e806:	2b22      	cmp	r3, #34	@ 0x22
 800e808:	d139      	bne.n	800e87e <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	3308      	adds	r3, #8
 800e810:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	e853 3f00 	ldrex	r3, [r3]
 800e818:	60bb      	str	r3, [r7, #8]
   return(result);
 800e81a:	68bb      	ldr	r3, [r7, #8]
 800e81c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e820:	633b      	str	r3, [r7, #48]	@ 0x30
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	3308      	adds	r3, #8
 800e828:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e82a:	61ba      	str	r2, [r7, #24]
 800e82c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e82e:	6979      	ldr	r1, [r7, #20]
 800e830:	69ba      	ldr	r2, [r7, #24]
 800e832:	e841 2300 	strex	r3, r2, [r1]
 800e836:	613b      	str	r3, [r7, #16]
   return(result);
 800e838:	693b      	ldr	r3, [r7, #16]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d1e5      	bne.n	800e80a <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e844:	2b00      	cmp	r3, #0
 800e846:	d017      	beq.n	800e878 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e84e:	4618      	mov	r0, r3
 800e850:	f7f7 fd9e 	bl	8006390 <HAL_DMA_Abort>
 800e854:	4603      	mov	r3, r0
 800e856:	2b00      	cmp	r3, #0
 800e858:	d00e      	beq.n	800e878 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e860:	4618      	mov	r0, r3
 800e862:	f7f9 fa5b 	bl	8007d1c <HAL_DMA_GetError>
 800e866:	4603      	mov	r3, r0
 800e868:	2b20      	cmp	r3, #32
 800e86a:	d105      	bne.n	800e878 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	2210      	movs	r2, #16
 800e870:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800e874:	2303      	movs	r3, #3
 800e876:	e003      	b.n	800e880 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800e878:	6878      	ldr	r0, [r7, #4]
 800e87a:	f001 ff5f 	bl	801073c <UART_EndRxTransfer>
  }

  return HAL_OK;
 800e87e:	2300      	movs	r3, #0
}
 800e880:	4618      	mov	r0, r3
 800e882:	3740      	adds	r7, #64	@ 0x40
 800e884:	46bd      	mov	sp, r7
 800e886:	bd80      	pop	{r7, pc}

0800e888 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b0a2      	sub	sp, #136	@ 0x88
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 800e890:	2301      	movs	r3, #1
 800e892:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e89c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e89e:	e853 3f00 	ldrex	r3, [r3]
 800e8a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e8a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e8a6:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800e8aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	461a      	mov	r2, r3
 800e8b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e8b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e8ba:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8bc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e8be:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e8c0:	e841 2300 	strex	r3, r2, [r1]
 800e8c4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e8c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d1e4      	bne.n	800e896 <HAL_UART_Abort_IT+0xe>
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	3308      	adds	r3, #8
 800e8d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e8d6:	e853 3f00 	ldrex	r3, [r3]
 800e8da:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e8dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e8de:	4b85      	ldr	r3, [pc, #532]	@ (800eaf4 <HAL_UART_Abort_IT+0x26c>)
 800e8e0:	4013      	ands	r3, r2
 800e8e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	3308      	adds	r3, #8
 800e8ea:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e8ec:	65ba      	str	r2, [r7, #88]	@ 0x58
 800e8ee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e8f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e8f4:	e841 2300 	strex	r3, r2, [r1]
 800e8f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e8fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d1e5      	bne.n	800e8cc <HAL_UART_Abort_IT+0x44>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e904:	2b01      	cmp	r3, #1
 800e906:	d118      	bne.n	800e93a <HAL_UART_Abort_IT+0xb2>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e90e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e910:	e853 3f00 	ldrex	r3, [r3]
 800e914:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e918:	f023 0310 	bic.w	r3, r3, #16
 800e91c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	461a      	mov	r2, r3
 800e924:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e926:	647b      	str	r3, [r7, #68]	@ 0x44
 800e928:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e92a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e92c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e92e:	e841 2300 	strex	r3, r2, [r1]
 800e932:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e934:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e936:	2b00      	cmp	r3, #0
 800e938:	d1e6      	bne.n	800e908 <HAL_UART_Abort_IT+0x80>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d00f      	beq.n	800e962 <HAL_UART_Abort_IT+0xda>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	689b      	ldr	r3, [r3, #8]
 800e948:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e94c:	2b80      	cmp	r3, #128	@ 0x80
 800e94e:	d104      	bne.n	800e95a <HAL_UART_Abort_IT+0xd2>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e954:	4a68      	ldr	r2, [pc, #416]	@ (800eaf8 <HAL_UART_Abort_IT+0x270>)
 800e956:	651a      	str	r2, [r3, #80]	@ 0x50
 800e958:	e003      	b.n	800e962 <HAL_UART_Abort_IT+0xda>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e95e:	2200      	movs	r2, #0
 800e960:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d011      	beq.n	800e990 <HAL_UART_Abort_IT+0x108>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	689b      	ldr	r3, [r3, #8]
 800e972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e976:	2b40      	cmp	r3, #64	@ 0x40
 800e978:	d105      	bne.n	800e986 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e980:	4a5e      	ldr	r2, [pc, #376]	@ (800eafc <HAL_UART_Abort_IT+0x274>)
 800e982:	651a      	str	r2, [r3, #80]	@ 0x50
 800e984:	e004      	b.n	800e990 <HAL_UART_Abort_IT+0x108>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e98c:	2200      	movs	r2, #0
 800e98e:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	689b      	ldr	r3, [r3, #8]
 800e996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e99a:	2b80      	cmp	r3, #128	@ 0x80
 800e99c:	d12d      	bne.n	800e9fa <HAL_UART_Abort_IT+0x172>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	3308      	adds	r3, #8
 800e9a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9a8:	e853 3f00 	ldrex	r3, [r3]
 800e9ac:	623b      	str	r3, [r7, #32]
   return(result);
 800e9ae:	6a3b      	ldr	r3, [r7, #32]
 800e9b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e9b4:	677b      	str	r3, [r7, #116]	@ 0x74
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	3308      	adds	r3, #8
 800e9bc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800e9be:	633a      	str	r2, [r7, #48]	@ 0x30
 800e9c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e9c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e9c6:	e841 2300 	strex	r3, r2, [r1]
 800e9ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e9cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d1e5      	bne.n	800e99e <HAL_UART_Abort_IT+0x116>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d00f      	beq.n	800e9fa <HAL_UART_Abort_IT+0x172>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f7f7 fff4 	bl	80069cc <HAL_DMA_Abort_IT>
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d004      	beq.n	800e9f4 <HAL_UART_Abort_IT+0x16c>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	651a      	str	r2, [r3, #80]	@ 0x50
 800e9f2:	e002      	b.n	800e9fa <HAL_UART_Abort_IT+0x172>
      }
      else
      {
        abortcplt = 0U;
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	689b      	ldr	r3, [r3, #8]
 800ea00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ea04:	2b40      	cmp	r3, #64	@ 0x40
 800ea06:	d133      	bne.n	800ea70 <HAL_UART_Abort_IT+0x1e8>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	3308      	adds	r3, #8
 800ea0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea10:	693b      	ldr	r3, [r7, #16]
 800ea12:	e853 3f00 	ldrex	r3, [r3]
 800ea16:	60fb      	str	r3, [r7, #12]
   return(result);
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ea1e:	673b      	str	r3, [r7, #112]	@ 0x70
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	3308      	adds	r3, #8
 800ea26:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ea28:	61fa      	str	r2, [r7, #28]
 800ea2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea2c:	69b9      	ldr	r1, [r7, #24]
 800ea2e:	69fa      	ldr	r2, [r7, #28]
 800ea30:	e841 2300 	strex	r3, r2, [r1]
 800ea34:	617b      	str	r3, [r7, #20]
   return(result);
 800ea36:	697b      	ldr	r3, [r7, #20]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d1e5      	bne.n	800ea08 <HAL_UART_Abort_IT+0x180>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d014      	beq.n	800ea70 <HAL_UART_Abort_IT+0x1e8>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	f7f7 ffbd 	bl	80069cc <HAL_DMA_Abort_IT>
 800ea52:	4603      	mov	r3, r0
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d008      	beq.n	800ea6a <HAL_UART_Abort_IT+0x1e2>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea5e:	2200      	movs	r2, #0
 800ea60:	651a      	str	r2, [r3, #80]	@ 0x50
        abortcplt = 1U;
 800ea62:	2301      	movs	r3, #1
 800ea64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ea68:	e002      	b.n	800ea70 <HAL_UART_Abort_IT+0x1e8>
      }
      else
      {
        abortcplt = 0U;
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 800ea70:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ea74:	2b01      	cmp	r3, #1
 800ea76:	d138      	bne.n	800eaea <HAL_UART_Abort_IT+0x262>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->RxXferCount = 0U;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	2200      	movs	r2, #0
 800ea84:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	675a      	str	r2, [r3, #116]	@ 0x74
    huart->TxISR = NULL;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	2200      	movs	r2, #0
 800ea92:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	2200      	movs	r2, #0
 800ea98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	220f      	movs	r2, #15
 800eaa2:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800eaa8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800eaac:	d107      	bne.n	800eabe <HAL_UART_Abort_IT+0x236>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	699a      	ldr	r2, [r3, #24]
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	f042 0210 	orr.w	r2, r2, #16
 800eabc:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	699a      	ldr	r2, [r3, #24]
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	f042 0208 	orr.w	r2, r2, #8
 800eacc:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	2220      	movs	r2, #32
 800ead2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    huart->RxState = HAL_UART_STATE_READY;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	2220      	movs	r2, #32
 800eada:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	2200      	movs	r2, #0
 800eae2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800eae4:	6878      	ldr	r0, [r7, #4]
 800eae6:	f000 fbe3 	bl	800f2b0 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800eaea:	2300      	movs	r3, #0
}
 800eaec:	4618      	mov	r0, r3
 800eaee:	3788      	adds	r7, #136	@ 0x88
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	bd80      	pop	{r7, pc}
 800eaf4:	ef7ffffe 	.word	0xef7ffffe
 800eaf8:	08010a1b 	.word	0x08010a1b
 800eafc:	08010aa7 	.word	0x08010aa7

0800eb00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b0ba      	sub	sp, #232	@ 0xe8
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	69db      	ldr	r3, [r3, #28]
 800eb0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	689b      	ldr	r3, [r3, #8]
 800eb22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800eb26:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800eb2a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800eb2e:	4013      	ands	r3, r2
 800eb30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800eb34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d11b      	bne.n	800eb74 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800eb3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb40:	f003 0320 	and.w	r3, r3, #32
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d015      	beq.n	800eb74 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800eb48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eb4c:	f003 0320 	and.w	r3, r3, #32
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d105      	bne.n	800eb60 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800eb54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800eb58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d009      	beq.n	800eb74 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	f000 8377 	beq.w	800f258 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eb6e:	6878      	ldr	r0, [r7, #4]
 800eb70:	4798      	blx	r3
      }
      return;
 800eb72:	e371      	b.n	800f258 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800eb74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	f000 8123 	beq.w	800edc4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800eb7e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800eb82:	4b8d      	ldr	r3, [pc, #564]	@ (800edb8 <HAL_UART_IRQHandler+0x2b8>)
 800eb84:	4013      	ands	r3, r2
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d106      	bne.n	800eb98 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800eb8a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800eb8e:	4b8b      	ldr	r3, [pc, #556]	@ (800edbc <HAL_UART_IRQHandler+0x2bc>)
 800eb90:	4013      	ands	r3, r2
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	f000 8116 	beq.w	800edc4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800eb98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb9c:	f003 0301 	and.w	r3, r3, #1
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d011      	beq.n	800ebc8 <HAL_UART_IRQHandler+0xc8>
 800eba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eba8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d00b      	beq.n	800ebc8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	2201      	movs	r2, #1
 800ebb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ebbe:	f043 0201 	orr.w	r2, r3, #1
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ebc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ebcc:	f003 0302 	and.w	r3, r3, #2
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d011      	beq.n	800ebf8 <HAL_UART_IRQHandler+0xf8>
 800ebd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ebd8:	f003 0301 	and.w	r3, r3, #1
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d00b      	beq.n	800ebf8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	2202      	movs	r2, #2
 800ebe6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ebee:	f043 0204 	orr.w	r2, r3, #4
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ebf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ebfc:	f003 0304 	and.w	r3, r3, #4
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d011      	beq.n	800ec28 <HAL_UART_IRQHandler+0x128>
 800ec04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ec08:	f003 0301 	and.w	r3, r3, #1
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d00b      	beq.n	800ec28 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	2204      	movs	r2, #4
 800ec16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ec1e:	f043 0202 	orr.w	r2, r3, #2
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ec28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ec2c:	f003 0308 	and.w	r3, r3, #8
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d017      	beq.n	800ec64 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ec34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ec38:	f003 0320 	and.w	r3, r3, #32
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d105      	bne.n	800ec4c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ec40:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ec44:	4b5c      	ldr	r3, [pc, #368]	@ (800edb8 <HAL_UART_IRQHandler+0x2b8>)
 800ec46:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d00b      	beq.n	800ec64 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	2208      	movs	r2, #8
 800ec52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ec5a:	f043 0208 	orr.w	r2, r3, #8
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ec64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ec68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d012      	beq.n	800ec96 <HAL_UART_IRQHandler+0x196>
 800ec70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ec74:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d00c      	beq.n	800ec96 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ec84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ec8c:	f043 0220 	orr.w	r2, r3, #32
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	f000 82dd 	beq.w	800f25c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800eca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eca6:	f003 0320 	and.w	r3, r3, #32
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d013      	beq.n	800ecd6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ecae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ecb2:	f003 0320 	and.w	r3, r3, #32
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d105      	bne.n	800ecc6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ecba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ecbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d007      	beq.n	800ecd6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d003      	beq.n	800ecd6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ecd2:	6878      	ldr	r0, [r7, #4]
 800ecd4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ecdc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	689b      	ldr	r3, [r3, #8]
 800ece6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ecea:	2b40      	cmp	r3, #64	@ 0x40
 800ecec:	d005      	beq.n	800ecfa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ecee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ecf2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d054      	beq.n	800eda4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ecfa:	6878      	ldr	r0, [r7, #4]
 800ecfc:	f001 fd1e 	bl	801073c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	689b      	ldr	r3, [r3, #8]
 800ed06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ed0a:	2b40      	cmp	r3, #64	@ 0x40
 800ed0c:	d146      	bne.n	800ed9c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	3308      	adds	r3, #8
 800ed14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ed1c:	e853 3f00 	ldrex	r3, [r3]
 800ed20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ed24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ed28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ed2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	3308      	adds	r3, #8
 800ed36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ed3a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ed3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ed46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ed4a:	e841 2300 	strex	r3, r2, [r1]
 800ed4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ed52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d1d9      	bne.n	800ed0e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d017      	beq.n	800ed94 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed6a:	4a15      	ldr	r2, [pc, #84]	@ (800edc0 <HAL_UART_IRQHandler+0x2c0>)
 800ed6c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed74:	4618      	mov	r0, r3
 800ed76:	f7f7 fe29 	bl	80069cc <HAL_DMA_Abort_IT>
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d019      	beq.n	800edb4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed88:	687a      	ldr	r2, [r7, #4]
 800ed8a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800ed8e:	4610      	mov	r0, r2
 800ed90:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed92:	e00f      	b.n	800edb4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ed94:	6878      	ldr	r0, [r7, #4]
 800ed96:	f000 fa81 	bl	800f29c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed9a:	e00b      	b.n	800edb4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ed9c:	6878      	ldr	r0, [r7, #4]
 800ed9e:	f000 fa7d 	bl	800f29c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eda2:	e007      	b.n	800edb4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800eda4:	6878      	ldr	r0, [r7, #4]
 800eda6:	f000 fa79 	bl	800f29c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	2200      	movs	r2, #0
 800edae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800edb2:	e253      	b.n	800f25c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800edb4:	bf00      	nop
    return;
 800edb6:	e251      	b.n	800f25c <HAL_UART_IRQHandler+0x75c>
 800edb8:	10000001 	.word	0x10000001
 800edbc:	04000120 	.word	0x04000120
 800edc0:	080109ef 	.word	0x080109ef

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800edc8:	2b01      	cmp	r3, #1
 800edca:	f040 81e7 	bne.w	800f19c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800edce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800edd2:	f003 0310 	and.w	r3, r3, #16
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	f000 81e0 	beq.w	800f19c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800eddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ede0:	f003 0310 	and.w	r3, r3, #16
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	f000 81d9 	beq.w	800f19c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	2210      	movs	r2, #16
 800edf0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	689b      	ldr	r3, [r3, #8]
 800edf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800edfc:	2b40      	cmp	r3, #64	@ 0x40
 800edfe:	f040 8151 	bne.w	800f0a4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	4a96      	ldr	r2, [pc, #600]	@ (800f064 <HAL_UART_IRQHandler+0x564>)
 800ee0c:	4293      	cmp	r3, r2
 800ee0e:	d068      	beq.n	800eee2 <HAL_UART_IRQHandler+0x3e2>
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	4a93      	ldr	r2, [pc, #588]	@ (800f068 <HAL_UART_IRQHandler+0x568>)
 800ee1a:	4293      	cmp	r3, r2
 800ee1c:	d061      	beq.n	800eee2 <HAL_UART_IRQHandler+0x3e2>
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	4a91      	ldr	r2, [pc, #580]	@ (800f06c <HAL_UART_IRQHandler+0x56c>)
 800ee28:	4293      	cmp	r3, r2
 800ee2a:	d05a      	beq.n	800eee2 <HAL_UART_IRQHandler+0x3e2>
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	4a8e      	ldr	r2, [pc, #568]	@ (800f070 <HAL_UART_IRQHandler+0x570>)
 800ee36:	4293      	cmp	r3, r2
 800ee38:	d053      	beq.n	800eee2 <HAL_UART_IRQHandler+0x3e2>
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	4a8c      	ldr	r2, [pc, #560]	@ (800f074 <HAL_UART_IRQHandler+0x574>)
 800ee44:	4293      	cmp	r3, r2
 800ee46:	d04c      	beq.n	800eee2 <HAL_UART_IRQHandler+0x3e2>
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	4a89      	ldr	r2, [pc, #548]	@ (800f078 <HAL_UART_IRQHandler+0x578>)
 800ee52:	4293      	cmp	r3, r2
 800ee54:	d045      	beq.n	800eee2 <HAL_UART_IRQHandler+0x3e2>
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	4a87      	ldr	r2, [pc, #540]	@ (800f07c <HAL_UART_IRQHandler+0x57c>)
 800ee60:	4293      	cmp	r3, r2
 800ee62:	d03e      	beq.n	800eee2 <HAL_UART_IRQHandler+0x3e2>
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	4a84      	ldr	r2, [pc, #528]	@ (800f080 <HAL_UART_IRQHandler+0x580>)
 800ee6e:	4293      	cmp	r3, r2
 800ee70:	d037      	beq.n	800eee2 <HAL_UART_IRQHandler+0x3e2>
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	4a82      	ldr	r2, [pc, #520]	@ (800f084 <HAL_UART_IRQHandler+0x584>)
 800ee7c:	4293      	cmp	r3, r2
 800ee7e:	d030      	beq.n	800eee2 <HAL_UART_IRQHandler+0x3e2>
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	4a7f      	ldr	r2, [pc, #508]	@ (800f088 <HAL_UART_IRQHandler+0x588>)
 800ee8a:	4293      	cmp	r3, r2
 800ee8c:	d029      	beq.n	800eee2 <HAL_UART_IRQHandler+0x3e2>
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	4a7d      	ldr	r2, [pc, #500]	@ (800f08c <HAL_UART_IRQHandler+0x58c>)
 800ee98:	4293      	cmp	r3, r2
 800ee9a:	d022      	beq.n	800eee2 <HAL_UART_IRQHandler+0x3e2>
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	4a7a      	ldr	r2, [pc, #488]	@ (800f090 <HAL_UART_IRQHandler+0x590>)
 800eea6:	4293      	cmp	r3, r2
 800eea8:	d01b      	beq.n	800eee2 <HAL_UART_IRQHandler+0x3e2>
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	4a78      	ldr	r2, [pc, #480]	@ (800f094 <HAL_UART_IRQHandler+0x594>)
 800eeb4:	4293      	cmp	r3, r2
 800eeb6:	d014      	beq.n	800eee2 <HAL_UART_IRQHandler+0x3e2>
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	4a75      	ldr	r2, [pc, #468]	@ (800f098 <HAL_UART_IRQHandler+0x598>)
 800eec2:	4293      	cmp	r3, r2
 800eec4:	d00d      	beq.n	800eee2 <HAL_UART_IRQHandler+0x3e2>
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	4a73      	ldr	r2, [pc, #460]	@ (800f09c <HAL_UART_IRQHandler+0x59c>)
 800eed0:	4293      	cmp	r3, r2
 800eed2:	d006      	beq.n	800eee2 <HAL_UART_IRQHandler+0x3e2>
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	4a70      	ldr	r2, [pc, #448]	@ (800f0a0 <HAL_UART_IRQHandler+0x5a0>)
 800eede:	4293      	cmp	r3, r2
 800eee0:	d106      	bne.n	800eef0 <HAL_UART_IRQHandler+0x3f0>
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	685b      	ldr	r3, [r3, #4]
 800eeec:	b29b      	uxth	r3, r3
 800eeee:	e005      	b.n	800eefc <HAL_UART_IRQHandler+0x3fc>
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	685b      	ldr	r3, [r3, #4]
 800eefa:	b29b      	uxth	r3, r3
 800eefc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ef00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	f000 81ab 	beq.w	800f260 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ef10:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ef14:	429a      	cmp	r2, r3
 800ef16:	f080 81a3 	bcs.w	800f260 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ef20:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef2a:	69db      	ldr	r3, [r3, #28]
 800ef2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ef30:	f000 8087 	beq.w	800f042 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ef40:	e853 3f00 	ldrex	r3, [r3]
 800ef44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ef48:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ef4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ef50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	461a      	mov	r2, r3
 800ef5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ef5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ef62:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef66:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ef6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ef6e:	e841 2300 	strex	r3, r2, [r1]
 800ef72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ef76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d1da      	bne.n	800ef34 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	3308      	adds	r3, #8
 800ef84:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ef88:	e853 3f00 	ldrex	r3, [r3]
 800ef8c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ef8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ef90:	f023 0301 	bic.w	r3, r3, #1
 800ef94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	3308      	adds	r3, #8
 800ef9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800efa2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800efa6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efa8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800efaa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800efae:	e841 2300 	strex	r3, r2, [r1]
 800efb2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800efb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d1e1      	bne.n	800ef7e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	3308      	adds	r3, #8
 800efc0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800efc4:	e853 3f00 	ldrex	r3, [r3]
 800efc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800efca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800efcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800efd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	3308      	adds	r3, #8
 800efda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800efde:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800efe0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efe2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800efe4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800efe6:	e841 2300 	strex	r3, r2, [r1]
 800efea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800efec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d1e3      	bne.n	800efba <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	2220      	movs	r2, #32
 800eff6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	2200      	movs	r2, #0
 800effe:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f006:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f008:	e853 3f00 	ldrex	r3, [r3]
 800f00c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f00e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f010:	f023 0310 	bic.w	r3, r3, #16
 800f014:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	461a      	mov	r2, r3
 800f01e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f022:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f024:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f026:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f028:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f02a:	e841 2300 	strex	r3, r2, [r1]
 800f02e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f030:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f032:	2b00      	cmp	r3, #0
 800f034:	d1e4      	bne.n	800f000 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f03c:	4618      	mov	r0, r3
 800f03e:	f7f7 f9a7 	bl	8006390 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	2202      	movs	r2, #2
 800f046:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f054:	b29b      	uxth	r3, r3
 800f056:	1ad3      	subs	r3, r2, r3
 800f058:	b29b      	uxth	r3, r3
 800f05a:	4619      	mov	r1, r3
 800f05c:	6878      	ldr	r0, [r7, #4]
 800f05e:	f000 f931 	bl	800f2c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f062:	e0fd      	b.n	800f260 <HAL_UART_IRQHandler+0x760>
 800f064:	40020010 	.word	0x40020010
 800f068:	40020028 	.word	0x40020028
 800f06c:	40020040 	.word	0x40020040
 800f070:	40020058 	.word	0x40020058
 800f074:	40020070 	.word	0x40020070
 800f078:	40020088 	.word	0x40020088
 800f07c:	400200a0 	.word	0x400200a0
 800f080:	400200b8 	.word	0x400200b8
 800f084:	40020410 	.word	0x40020410
 800f088:	40020428 	.word	0x40020428
 800f08c:	40020440 	.word	0x40020440
 800f090:	40020458 	.word	0x40020458
 800f094:	40020470 	.word	0x40020470
 800f098:	40020488 	.word	0x40020488
 800f09c:	400204a0 	.word	0x400204a0
 800f0a0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f0b0:	b29b      	uxth	r3, r3
 800f0b2:	1ad3      	subs	r3, r2, r3
 800f0b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f0be:	b29b      	uxth	r3, r3
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	f000 80cf 	beq.w	800f264 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800f0c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	f000 80ca 	beq.w	800f264 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0d8:	e853 3f00 	ldrex	r3, [r3]
 800f0dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f0de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f0e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f0e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	461a      	mov	r2, r3
 800f0ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f0f2:	647b      	str	r3, [r7, #68]	@ 0x44
 800f0f4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f0f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f0fa:	e841 2300 	strex	r3, r2, [r1]
 800f0fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f100:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f102:	2b00      	cmp	r3, #0
 800f104:	d1e4      	bne.n	800f0d0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	3308      	adds	r3, #8
 800f10c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f10e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f110:	e853 3f00 	ldrex	r3, [r3]
 800f114:	623b      	str	r3, [r7, #32]
   return(result);
 800f116:	6a3a      	ldr	r2, [r7, #32]
 800f118:	4b55      	ldr	r3, [pc, #340]	@ (800f270 <HAL_UART_IRQHandler+0x770>)
 800f11a:	4013      	ands	r3, r2
 800f11c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	3308      	adds	r3, #8
 800f126:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800f12a:	633a      	str	r2, [r7, #48]	@ 0x30
 800f12c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f12e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f130:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f132:	e841 2300 	strex	r3, r2, [r1]
 800f136:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d1e3      	bne.n	800f106 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	2220      	movs	r2, #32
 800f142:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	2200      	movs	r2, #0
 800f14a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	2200      	movs	r2, #0
 800f150:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f158:	693b      	ldr	r3, [r7, #16]
 800f15a:	e853 3f00 	ldrex	r3, [r3]
 800f15e:	60fb      	str	r3, [r7, #12]
   return(result);
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	f023 0310 	bic.w	r3, r3, #16
 800f166:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	461a      	mov	r2, r3
 800f170:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800f174:	61fb      	str	r3, [r7, #28]
 800f176:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f178:	69b9      	ldr	r1, [r7, #24]
 800f17a:	69fa      	ldr	r2, [r7, #28]
 800f17c:	e841 2300 	strex	r3, r2, [r1]
 800f180:	617b      	str	r3, [r7, #20]
   return(result);
 800f182:	697b      	ldr	r3, [r7, #20]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d1e4      	bne.n	800f152 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	2202      	movs	r2, #2
 800f18c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f18e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f192:	4619      	mov	r1, r3
 800f194:	6878      	ldr	r0, [r7, #4]
 800f196:	f000 f895 	bl	800f2c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f19a:	e063      	b.n	800f264 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f19c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f1a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d00e      	beq.n	800f1c6 <HAL_UART_IRQHandler+0x6c6>
 800f1a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f1ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d008      	beq.n	800f1c6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800f1bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f1be:	6878      	ldr	r0, [r7, #4]
 800f1c0:	f002 fb9a 	bl	80118f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f1c4:	e051      	b.n	800f26a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f1c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f1ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d014      	beq.n	800f1fc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f1d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f1d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d105      	bne.n	800f1ea <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f1de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f1e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d008      	beq.n	800f1fc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d03a      	beq.n	800f268 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f1f6:	6878      	ldr	r0, [r7, #4]
 800f1f8:	4798      	blx	r3
    }
    return;
 800f1fa:	e035      	b.n	800f268 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f1fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f204:	2b00      	cmp	r3, #0
 800f206:	d009      	beq.n	800f21c <HAL_UART_IRQHandler+0x71c>
 800f208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f20c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f210:	2b00      	cmp	r3, #0
 800f212:	d003      	beq.n	800f21c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800f214:	6878      	ldr	r0, [r7, #4]
 800f216:	f001 fe28 	bl	8010e6a <UART_EndTransmit_IT>
    return;
 800f21a:	e026      	b.n	800f26a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f21c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f220:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f224:	2b00      	cmp	r3, #0
 800f226:	d009      	beq.n	800f23c <HAL_UART_IRQHandler+0x73c>
 800f228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f22c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800f230:	2b00      	cmp	r3, #0
 800f232:	d003      	beq.n	800f23c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f234:	6878      	ldr	r0, [r7, #4]
 800f236:	f002 fb73 	bl	8011920 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f23a:	e016      	b.n	800f26a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f23c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f240:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f244:	2b00      	cmp	r3, #0
 800f246:	d010      	beq.n	800f26a <HAL_UART_IRQHandler+0x76a>
 800f248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	da0c      	bge.n	800f26a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f250:	6878      	ldr	r0, [r7, #4]
 800f252:	f002 fb5b 	bl	801190c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f256:	e008      	b.n	800f26a <HAL_UART_IRQHandler+0x76a>
      return;
 800f258:	bf00      	nop
 800f25a:	e006      	b.n	800f26a <HAL_UART_IRQHandler+0x76a>
    return;
 800f25c:	bf00      	nop
 800f25e:	e004      	b.n	800f26a <HAL_UART_IRQHandler+0x76a>
      return;
 800f260:	bf00      	nop
 800f262:	e002      	b.n	800f26a <HAL_UART_IRQHandler+0x76a>
      return;
 800f264:	bf00      	nop
 800f266:	e000      	b.n	800f26a <HAL_UART_IRQHandler+0x76a>
    return;
 800f268:	bf00      	nop
  }
}
 800f26a:	37e8      	adds	r7, #232	@ 0xe8
 800f26c:	46bd      	mov	sp, r7
 800f26e:	bd80      	pop	{r7, pc}
 800f270:	effffffe 	.word	0xeffffffe

0800f274 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f274:	b480      	push	{r7}
 800f276:	b083      	sub	sp, #12
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f27c:	bf00      	nop
 800f27e:	370c      	adds	r7, #12
 800f280:	46bd      	mov	sp, r7
 800f282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f286:	4770      	bx	lr

0800f288 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f288:	b480      	push	{r7}
 800f28a:	b083      	sub	sp, #12
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800f290:	bf00      	nop
 800f292:	370c      	adds	r7, #12
 800f294:	46bd      	mov	sp, r7
 800f296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29a:	4770      	bx	lr

0800f29c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f29c:	b480      	push	{r7}
 800f29e:	b083      	sub	sp, #12
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f2a4:	bf00      	nop
 800f2a6:	370c      	adds	r7, #12
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ae:	4770      	bx	lr

0800f2b0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800f2b0:	b480      	push	{r7}
 800f2b2:	b083      	sub	sp, #12
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800f2b8:	bf00      	nop
 800f2ba:	370c      	adds	r7, #12
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c2:	4770      	bx	lr

0800f2c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f2c4:	b480      	push	{r7}
 800f2c6:	b083      	sub	sp, #12
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
 800f2cc:	460b      	mov	r3, r1
 800f2ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f2d0:	bf00      	nop
 800f2d2:	370c      	adds	r7, #12
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2da:	4770      	bx	lr

0800f2dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f2dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f2e0:	b092      	sub	sp, #72	@ 0x48
 800f2e2:	af00      	add	r7, sp, #0
 800f2e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f2ec:	697b      	ldr	r3, [r7, #20]
 800f2ee:	689a      	ldr	r2, [r3, #8]
 800f2f0:	697b      	ldr	r3, [r7, #20]
 800f2f2:	691b      	ldr	r3, [r3, #16]
 800f2f4:	431a      	orrs	r2, r3
 800f2f6:	697b      	ldr	r3, [r7, #20]
 800f2f8:	695b      	ldr	r3, [r3, #20]
 800f2fa:	431a      	orrs	r2, r3
 800f2fc:	697b      	ldr	r3, [r7, #20]
 800f2fe:	69db      	ldr	r3, [r3, #28]
 800f300:	4313      	orrs	r3, r2
 800f302:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f304:	697b      	ldr	r3, [r7, #20]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	681a      	ldr	r2, [r3, #0]
 800f30a:	4bbe      	ldr	r3, [pc, #760]	@ (800f604 <UART_SetConfig+0x328>)
 800f30c:	4013      	ands	r3, r2
 800f30e:	697a      	ldr	r2, [r7, #20]
 800f310:	6812      	ldr	r2, [r2, #0]
 800f312:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f314:	430b      	orrs	r3, r1
 800f316:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f318:	697b      	ldr	r3, [r7, #20]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	685b      	ldr	r3, [r3, #4]
 800f31e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f322:	697b      	ldr	r3, [r7, #20]
 800f324:	68da      	ldr	r2, [r3, #12]
 800f326:	697b      	ldr	r3, [r7, #20]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	430a      	orrs	r2, r1
 800f32c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f32e:	697b      	ldr	r3, [r7, #20]
 800f330:	699b      	ldr	r3, [r3, #24]
 800f332:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f334:	697b      	ldr	r3, [r7, #20]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	4ab3      	ldr	r2, [pc, #716]	@ (800f608 <UART_SetConfig+0x32c>)
 800f33a:	4293      	cmp	r3, r2
 800f33c:	d004      	beq.n	800f348 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f33e:	697b      	ldr	r3, [r7, #20]
 800f340:	6a1b      	ldr	r3, [r3, #32]
 800f342:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f344:	4313      	orrs	r3, r2
 800f346:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f348:	697b      	ldr	r3, [r7, #20]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	689a      	ldr	r2, [r3, #8]
 800f34e:	4baf      	ldr	r3, [pc, #700]	@ (800f60c <UART_SetConfig+0x330>)
 800f350:	4013      	ands	r3, r2
 800f352:	697a      	ldr	r2, [r7, #20]
 800f354:	6812      	ldr	r2, [r2, #0]
 800f356:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f358:	430b      	orrs	r3, r1
 800f35a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f35c:	697b      	ldr	r3, [r7, #20]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f362:	f023 010f 	bic.w	r1, r3, #15
 800f366:	697b      	ldr	r3, [r7, #20]
 800f368:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f36a:	697b      	ldr	r3, [r7, #20]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	430a      	orrs	r2, r1
 800f370:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f372:	697b      	ldr	r3, [r7, #20]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	4aa6      	ldr	r2, [pc, #664]	@ (800f610 <UART_SetConfig+0x334>)
 800f378:	4293      	cmp	r3, r2
 800f37a:	d177      	bne.n	800f46c <UART_SetConfig+0x190>
 800f37c:	4ba5      	ldr	r3, [pc, #660]	@ (800f614 <UART_SetConfig+0x338>)
 800f37e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f380:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f384:	2b28      	cmp	r3, #40	@ 0x28
 800f386:	d86d      	bhi.n	800f464 <UART_SetConfig+0x188>
 800f388:	a201      	add	r2, pc, #4	@ (adr r2, 800f390 <UART_SetConfig+0xb4>)
 800f38a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f38e:	bf00      	nop
 800f390:	0800f435 	.word	0x0800f435
 800f394:	0800f465 	.word	0x0800f465
 800f398:	0800f465 	.word	0x0800f465
 800f39c:	0800f465 	.word	0x0800f465
 800f3a0:	0800f465 	.word	0x0800f465
 800f3a4:	0800f465 	.word	0x0800f465
 800f3a8:	0800f465 	.word	0x0800f465
 800f3ac:	0800f465 	.word	0x0800f465
 800f3b0:	0800f43d 	.word	0x0800f43d
 800f3b4:	0800f465 	.word	0x0800f465
 800f3b8:	0800f465 	.word	0x0800f465
 800f3bc:	0800f465 	.word	0x0800f465
 800f3c0:	0800f465 	.word	0x0800f465
 800f3c4:	0800f465 	.word	0x0800f465
 800f3c8:	0800f465 	.word	0x0800f465
 800f3cc:	0800f465 	.word	0x0800f465
 800f3d0:	0800f445 	.word	0x0800f445
 800f3d4:	0800f465 	.word	0x0800f465
 800f3d8:	0800f465 	.word	0x0800f465
 800f3dc:	0800f465 	.word	0x0800f465
 800f3e0:	0800f465 	.word	0x0800f465
 800f3e4:	0800f465 	.word	0x0800f465
 800f3e8:	0800f465 	.word	0x0800f465
 800f3ec:	0800f465 	.word	0x0800f465
 800f3f0:	0800f44d 	.word	0x0800f44d
 800f3f4:	0800f465 	.word	0x0800f465
 800f3f8:	0800f465 	.word	0x0800f465
 800f3fc:	0800f465 	.word	0x0800f465
 800f400:	0800f465 	.word	0x0800f465
 800f404:	0800f465 	.word	0x0800f465
 800f408:	0800f465 	.word	0x0800f465
 800f40c:	0800f465 	.word	0x0800f465
 800f410:	0800f455 	.word	0x0800f455
 800f414:	0800f465 	.word	0x0800f465
 800f418:	0800f465 	.word	0x0800f465
 800f41c:	0800f465 	.word	0x0800f465
 800f420:	0800f465 	.word	0x0800f465
 800f424:	0800f465 	.word	0x0800f465
 800f428:	0800f465 	.word	0x0800f465
 800f42c:	0800f465 	.word	0x0800f465
 800f430:	0800f45d 	.word	0x0800f45d
 800f434:	2301      	movs	r3, #1
 800f436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f43a:	e326      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f43c:	2304      	movs	r3, #4
 800f43e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f442:	e322      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f444:	2308      	movs	r3, #8
 800f446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f44a:	e31e      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f44c:	2310      	movs	r3, #16
 800f44e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f452:	e31a      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f454:	2320      	movs	r3, #32
 800f456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f45a:	e316      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f45c:	2340      	movs	r3, #64	@ 0x40
 800f45e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f462:	e312      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f464:	2380      	movs	r3, #128	@ 0x80
 800f466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f46a:	e30e      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f46c:	697b      	ldr	r3, [r7, #20]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	4a69      	ldr	r2, [pc, #420]	@ (800f618 <UART_SetConfig+0x33c>)
 800f472:	4293      	cmp	r3, r2
 800f474:	d130      	bne.n	800f4d8 <UART_SetConfig+0x1fc>
 800f476:	4b67      	ldr	r3, [pc, #412]	@ (800f614 <UART_SetConfig+0x338>)
 800f478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f47a:	f003 0307 	and.w	r3, r3, #7
 800f47e:	2b05      	cmp	r3, #5
 800f480:	d826      	bhi.n	800f4d0 <UART_SetConfig+0x1f4>
 800f482:	a201      	add	r2, pc, #4	@ (adr r2, 800f488 <UART_SetConfig+0x1ac>)
 800f484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f488:	0800f4a1 	.word	0x0800f4a1
 800f48c:	0800f4a9 	.word	0x0800f4a9
 800f490:	0800f4b1 	.word	0x0800f4b1
 800f494:	0800f4b9 	.word	0x0800f4b9
 800f498:	0800f4c1 	.word	0x0800f4c1
 800f49c:	0800f4c9 	.word	0x0800f4c9
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4a6:	e2f0      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f4a8:	2304      	movs	r3, #4
 800f4aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4ae:	e2ec      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f4b0:	2308      	movs	r3, #8
 800f4b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4b6:	e2e8      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f4b8:	2310      	movs	r3, #16
 800f4ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4be:	e2e4      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f4c0:	2320      	movs	r3, #32
 800f4c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4c6:	e2e0      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f4c8:	2340      	movs	r3, #64	@ 0x40
 800f4ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4ce:	e2dc      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f4d0:	2380      	movs	r3, #128	@ 0x80
 800f4d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4d6:	e2d8      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f4d8:	697b      	ldr	r3, [r7, #20]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	4a4f      	ldr	r2, [pc, #316]	@ (800f61c <UART_SetConfig+0x340>)
 800f4de:	4293      	cmp	r3, r2
 800f4e0:	d130      	bne.n	800f544 <UART_SetConfig+0x268>
 800f4e2:	4b4c      	ldr	r3, [pc, #304]	@ (800f614 <UART_SetConfig+0x338>)
 800f4e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f4e6:	f003 0307 	and.w	r3, r3, #7
 800f4ea:	2b05      	cmp	r3, #5
 800f4ec:	d826      	bhi.n	800f53c <UART_SetConfig+0x260>
 800f4ee:	a201      	add	r2, pc, #4	@ (adr r2, 800f4f4 <UART_SetConfig+0x218>)
 800f4f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4f4:	0800f50d 	.word	0x0800f50d
 800f4f8:	0800f515 	.word	0x0800f515
 800f4fc:	0800f51d 	.word	0x0800f51d
 800f500:	0800f525 	.word	0x0800f525
 800f504:	0800f52d 	.word	0x0800f52d
 800f508:	0800f535 	.word	0x0800f535
 800f50c:	2300      	movs	r3, #0
 800f50e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f512:	e2ba      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f514:	2304      	movs	r3, #4
 800f516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f51a:	e2b6      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f51c:	2308      	movs	r3, #8
 800f51e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f522:	e2b2      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f524:	2310      	movs	r3, #16
 800f526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f52a:	e2ae      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f52c:	2320      	movs	r3, #32
 800f52e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f532:	e2aa      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f534:	2340      	movs	r3, #64	@ 0x40
 800f536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f53a:	e2a6      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f53c:	2380      	movs	r3, #128	@ 0x80
 800f53e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f542:	e2a2      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f544:	697b      	ldr	r3, [r7, #20]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	4a35      	ldr	r2, [pc, #212]	@ (800f620 <UART_SetConfig+0x344>)
 800f54a:	4293      	cmp	r3, r2
 800f54c:	d130      	bne.n	800f5b0 <UART_SetConfig+0x2d4>
 800f54e:	4b31      	ldr	r3, [pc, #196]	@ (800f614 <UART_SetConfig+0x338>)
 800f550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f552:	f003 0307 	and.w	r3, r3, #7
 800f556:	2b05      	cmp	r3, #5
 800f558:	d826      	bhi.n	800f5a8 <UART_SetConfig+0x2cc>
 800f55a:	a201      	add	r2, pc, #4	@ (adr r2, 800f560 <UART_SetConfig+0x284>)
 800f55c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f560:	0800f579 	.word	0x0800f579
 800f564:	0800f581 	.word	0x0800f581
 800f568:	0800f589 	.word	0x0800f589
 800f56c:	0800f591 	.word	0x0800f591
 800f570:	0800f599 	.word	0x0800f599
 800f574:	0800f5a1 	.word	0x0800f5a1
 800f578:	2300      	movs	r3, #0
 800f57a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f57e:	e284      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f580:	2304      	movs	r3, #4
 800f582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f586:	e280      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f588:	2308      	movs	r3, #8
 800f58a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f58e:	e27c      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f590:	2310      	movs	r3, #16
 800f592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f596:	e278      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f598:	2320      	movs	r3, #32
 800f59a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f59e:	e274      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f5a0:	2340      	movs	r3, #64	@ 0x40
 800f5a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5a6:	e270      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f5a8:	2380      	movs	r3, #128	@ 0x80
 800f5aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5ae:	e26c      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f5b0:	697b      	ldr	r3, [r7, #20]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	4a1b      	ldr	r2, [pc, #108]	@ (800f624 <UART_SetConfig+0x348>)
 800f5b6:	4293      	cmp	r3, r2
 800f5b8:	d142      	bne.n	800f640 <UART_SetConfig+0x364>
 800f5ba:	4b16      	ldr	r3, [pc, #88]	@ (800f614 <UART_SetConfig+0x338>)
 800f5bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f5be:	f003 0307 	and.w	r3, r3, #7
 800f5c2:	2b05      	cmp	r3, #5
 800f5c4:	d838      	bhi.n	800f638 <UART_SetConfig+0x35c>
 800f5c6:	a201      	add	r2, pc, #4	@ (adr r2, 800f5cc <UART_SetConfig+0x2f0>)
 800f5c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5cc:	0800f5e5 	.word	0x0800f5e5
 800f5d0:	0800f5ed 	.word	0x0800f5ed
 800f5d4:	0800f5f5 	.word	0x0800f5f5
 800f5d8:	0800f5fd 	.word	0x0800f5fd
 800f5dc:	0800f629 	.word	0x0800f629
 800f5e0:	0800f631 	.word	0x0800f631
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5ea:	e24e      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f5ec:	2304      	movs	r3, #4
 800f5ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5f2:	e24a      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f5f4:	2308      	movs	r3, #8
 800f5f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5fa:	e246      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f5fc:	2310      	movs	r3, #16
 800f5fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f602:	e242      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f604:	cfff69f3 	.word	0xcfff69f3
 800f608:	58000c00 	.word	0x58000c00
 800f60c:	11fff4ff 	.word	0x11fff4ff
 800f610:	40011000 	.word	0x40011000
 800f614:	58024400 	.word	0x58024400
 800f618:	40004400 	.word	0x40004400
 800f61c:	40004800 	.word	0x40004800
 800f620:	40004c00 	.word	0x40004c00
 800f624:	40005000 	.word	0x40005000
 800f628:	2320      	movs	r3, #32
 800f62a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f62e:	e22c      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f630:	2340      	movs	r3, #64	@ 0x40
 800f632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f636:	e228      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f638:	2380      	movs	r3, #128	@ 0x80
 800f63a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f63e:	e224      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f640:	697b      	ldr	r3, [r7, #20]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	4ab1      	ldr	r2, [pc, #708]	@ (800f90c <UART_SetConfig+0x630>)
 800f646:	4293      	cmp	r3, r2
 800f648:	d176      	bne.n	800f738 <UART_SetConfig+0x45c>
 800f64a:	4bb1      	ldr	r3, [pc, #708]	@ (800f910 <UART_SetConfig+0x634>)
 800f64c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f64e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f652:	2b28      	cmp	r3, #40	@ 0x28
 800f654:	d86c      	bhi.n	800f730 <UART_SetConfig+0x454>
 800f656:	a201      	add	r2, pc, #4	@ (adr r2, 800f65c <UART_SetConfig+0x380>)
 800f658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f65c:	0800f701 	.word	0x0800f701
 800f660:	0800f731 	.word	0x0800f731
 800f664:	0800f731 	.word	0x0800f731
 800f668:	0800f731 	.word	0x0800f731
 800f66c:	0800f731 	.word	0x0800f731
 800f670:	0800f731 	.word	0x0800f731
 800f674:	0800f731 	.word	0x0800f731
 800f678:	0800f731 	.word	0x0800f731
 800f67c:	0800f709 	.word	0x0800f709
 800f680:	0800f731 	.word	0x0800f731
 800f684:	0800f731 	.word	0x0800f731
 800f688:	0800f731 	.word	0x0800f731
 800f68c:	0800f731 	.word	0x0800f731
 800f690:	0800f731 	.word	0x0800f731
 800f694:	0800f731 	.word	0x0800f731
 800f698:	0800f731 	.word	0x0800f731
 800f69c:	0800f711 	.word	0x0800f711
 800f6a0:	0800f731 	.word	0x0800f731
 800f6a4:	0800f731 	.word	0x0800f731
 800f6a8:	0800f731 	.word	0x0800f731
 800f6ac:	0800f731 	.word	0x0800f731
 800f6b0:	0800f731 	.word	0x0800f731
 800f6b4:	0800f731 	.word	0x0800f731
 800f6b8:	0800f731 	.word	0x0800f731
 800f6bc:	0800f719 	.word	0x0800f719
 800f6c0:	0800f731 	.word	0x0800f731
 800f6c4:	0800f731 	.word	0x0800f731
 800f6c8:	0800f731 	.word	0x0800f731
 800f6cc:	0800f731 	.word	0x0800f731
 800f6d0:	0800f731 	.word	0x0800f731
 800f6d4:	0800f731 	.word	0x0800f731
 800f6d8:	0800f731 	.word	0x0800f731
 800f6dc:	0800f721 	.word	0x0800f721
 800f6e0:	0800f731 	.word	0x0800f731
 800f6e4:	0800f731 	.word	0x0800f731
 800f6e8:	0800f731 	.word	0x0800f731
 800f6ec:	0800f731 	.word	0x0800f731
 800f6f0:	0800f731 	.word	0x0800f731
 800f6f4:	0800f731 	.word	0x0800f731
 800f6f8:	0800f731 	.word	0x0800f731
 800f6fc:	0800f729 	.word	0x0800f729
 800f700:	2301      	movs	r3, #1
 800f702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f706:	e1c0      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f708:	2304      	movs	r3, #4
 800f70a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f70e:	e1bc      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f710:	2308      	movs	r3, #8
 800f712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f716:	e1b8      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f718:	2310      	movs	r3, #16
 800f71a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f71e:	e1b4      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f720:	2320      	movs	r3, #32
 800f722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f726:	e1b0      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f728:	2340      	movs	r3, #64	@ 0x40
 800f72a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f72e:	e1ac      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f730:	2380      	movs	r3, #128	@ 0x80
 800f732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f736:	e1a8      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f738:	697b      	ldr	r3, [r7, #20]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	4a75      	ldr	r2, [pc, #468]	@ (800f914 <UART_SetConfig+0x638>)
 800f73e:	4293      	cmp	r3, r2
 800f740:	d130      	bne.n	800f7a4 <UART_SetConfig+0x4c8>
 800f742:	4b73      	ldr	r3, [pc, #460]	@ (800f910 <UART_SetConfig+0x634>)
 800f744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f746:	f003 0307 	and.w	r3, r3, #7
 800f74a:	2b05      	cmp	r3, #5
 800f74c:	d826      	bhi.n	800f79c <UART_SetConfig+0x4c0>
 800f74e:	a201      	add	r2, pc, #4	@ (adr r2, 800f754 <UART_SetConfig+0x478>)
 800f750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f754:	0800f76d 	.word	0x0800f76d
 800f758:	0800f775 	.word	0x0800f775
 800f75c:	0800f77d 	.word	0x0800f77d
 800f760:	0800f785 	.word	0x0800f785
 800f764:	0800f78d 	.word	0x0800f78d
 800f768:	0800f795 	.word	0x0800f795
 800f76c:	2300      	movs	r3, #0
 800f76e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f772:	e18a      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f774:	2304      	movs	r3, #4
 800f776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f77a:	e186      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f77c:	2308      	movs	r3, #8
 800f77e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f782:	e182      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f784:	2310      	movs	r3, #16
 800f786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f78a:	e17e      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f78c:	2320      	movs	r3, #32
 800f78e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f792:	e17a      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f794:	2340      	movs	r3, #64	@ 0x40
 800f796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f79a:	e176      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f79c:	2380      	movs	r3, #128	@ 0x80
 800f79e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7a2:	e172      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f7a4:	697b      	ldr	r3, [r7, #20]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	4a5b      	ldr	r2, [pc, #364]	@ (800f918 <UART_SetConfig+0x63c>)
 800f7aa:	4293      	cmp	r3, r2
 800f7ac:	d130      	bne.n	800f810 <UART_SetConfig+0x534>
 800f7ae:	4b58      	ldr	r3, [pc, #352]	@ (800f910 <UART_SetConfig+0x634>)
 800f7b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f7b2:	f003 0307 	and.w	r3, r3, #7
 800f7b6:	2b05      	cmp	r3, #5
 800f7b8:	d826      	bhi.n	800f808 <UART_SetConfig+0x52c>
 800f7ba:	a201      	add	r2, pc, #4	@ (adr r2, 800f7c0 <UART_SetConfig+0x4e4>)
 800f7bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7c0:	0800f7d9 	.word	0x0800f7d9
 800f7c4:	0800f7e1 	.word	0x0800f7e1
 800f7c8:	0800f7e9 	.word	0x0800f7e9
 800f7cc:	0800f7f1 	.word	0x0800f7f1
 800f7d0:	0800f7f9 	.word	0x0800f7f9
 800f7d4:	0800f801 	.word	0x0800f801
 800f7d8:	2300      	movs	r3, #0
 800f7da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7de:	e154      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f7e0:	2304      	movs	r3, #4
 800f7e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7e6:	e150      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f7e8:	2308      	movs	r3, #8
 800f7ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7ee:	e14c      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f7f0:	2310      	movs	r3, #16
 800f7f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7f6:	e148      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f7f8:	2320      	movs	r3, #32
 800f7fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7fe:	e144      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f800:	2340      	movs	r3, #64	@ 0x40
 800f802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f806:	e140      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f808:	2380      	movs	r3, #128	@ 0x80
 800f80a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f80e:	e13c      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f810:	697b      	ldr	r3, [r7, #20]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	4a41      	ldr	r2, [pc, #260]	@ (800f91c <UART_SetConfig+0x640>)
 800f816:	4293      	cmp	r3, r2
 800f818:	f040 8082 	bne.w	800f920 <UART_SetConfig+0x644>
 800f81c:	4b3c      	ldr	r3, [pc, #240]	@ (800f910 <UART_SetConfig+0x634>)
 800f81e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f820:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f824:	2b28      	cmp	r3, #40	@ 0x28
 800f826:	d86d      	bhi.n	800f904 <UART_SetConfig+0x628>
 800f828:	a201      	add	r2, pc, #4	@ (adr r2, 800f830 <UART_SetConfig+0x554>)
 800f82a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f82e:	bf00      	nop
 800f830:	0800f8d5 	.word	0x0800f8d5
 800f834:	0800f905 	.word	0x0800f905
 800f838:	0800f905 	.word	0x0800f905
 800f83c:	0800f905 	.word	0x0800f905
 800f840:	0800f905 	.word	0x0800f905
 800f844:	0800f905 	.word	0x0800f905
 800f848:	0800f905 	.word	0x0800f905
 800f84c:	0800f905 	.word	0x0800f905
 800f850:	0800f8dd 	.word	0x0800f8dd
 800f854:	0800f905 	.word	0x0800f905
 800f858:	0800f905 	.word	0x0800f905
 800f85c:	0800f905 	.word	0x0800f905
 800f860:	0800f905 	.word	0x0800f905
 800f864:	0800f905 	.word	0x0800f905
 800f868:	0800f905 	.word	0x0800f905
 800f86c:	0800f905 	.word	0x0800f905
 800f870:	0800f8e5 	.word	0x0800f8e5
 800f874:	0800f905 	.word	0x0800f905
 800f878:	0800f905 	.word	0x0800f905
 800f87c:	0800f905 	.word	0x0800f905
 800f880:	0800f905 	.word	0x0800f905
 800f884:	0800f905 	.word	0x0800f905
 800f888:	0800f905 	.word	0x0800f905
 800f88c:	0800f905 	.word	0x0800f905
 800f890:	0800f8ed 	.word	0x0800f8ed
 800f894:	0800f905 	.word	0x0800f905
 800f898:	0800f905 	.word	0x0800f905
 800f89c:	0800f905 	.word	0x0800f905
 800f8a0:	0800f905 	.word	0x0800f905
 800f8a4:	0800f905 	.word	0x0800f905
 800f8a8:	0800f905 	.word	0x0800f905
 800f8ac:	0800f905 	.word	0x0800f905
 800f8b0:	0800f8f5 	.word	0x0800f8f5
 800f8b4:	0800f905 	.word	0x0800f905
 800f8b8:	0800f905 	.word	0x0800f905
 800f8bc:	0800f905 	.word	0x0800f905
 800f8c0:	0800f905 	.word	0x0800f905
 800f8c4:	0800f905 	.word	0x0800f905
 800f8c8:	0800f905 	.word	0x0800f905
 800f8cc:	0800f905 	.word	0x0800f905
 800f8d0:	0800f8fd 	.word	0x0800f8fd
 800f8d4:	2301      	movs	r3, #1
 800f8d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8da:	e0d6      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f8dc:	2304      	movs	r3, #4
 800f8de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8e2:	e0d2      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f8e4:	2308      	movs	r3, #8
 800f8e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8ea:	e0ce      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f8ec:	2310      	movs	r3, #16
 800f8ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8f2:	e0ca      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f8f4:	2320      	movs	r3, #32
 800f8f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8fa:	e0c6      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f8fc:	2340      	movs	r3, #64	@ 0x40
 800f8fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f902:	e0c2      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f904:	2380      	movs	r3, #128	@ 0x80
 800f906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f90a:	e0be      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f90c:	40011400 	.word	0x40011400
 800f910:	58024400 	.word	0x58024400
 800f914:	40007800 	.word	0x40007800
 800f918:	40007c00 	.word	0x40007c00
 800f91c:	40011800 	.word	0x40011800
 800f920:	697b      	ldr	r3, [r7, #20]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	4aad      	ldr	r2, [pc, #692]	@ (800fbdc <UART_SetConfig+0x900>)
 800f926:	4293      	cmp	r3, r2
 800f928:	d176      	bne.n	800fa18 <UART_SetConfig+0x73c>
 800f92a:	4bad      	ldr	r3, [pc, #692]	@ (800fbe0 <UART_SetConfig+0x904>)
 800f92c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f92e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f932:	2b28      	cmp	r3, #40	@ 0x28
 800f934:	d86c      	bhi.n	800fa10 <UART_SetConfig+0x734>
 800f936:	a201      	add	r2, pc, #4	@ (adr r2, 800f93c <UART_SetConfig+0x660>)
 800f938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f93c:	0800f9e1 	.word	0x0800f9e1
 800f940:	0800fa11 	.word	0x0800fa11
 800f944:	0800fa11 	.word	0x0800fa11
 800f948:	0800fa11 	.word	0x0800fa11
 800f94c:	0800fa11 	.word	0x0800fa11
 800f950:	0800fa11 	.word	0x0800fa11
 800f954:	0800fa11 	.word	0x0800fa11
 800f958:	0800fa11 	.word	0x0800fa11
 800f95c:	0800f9e9 	.word	0x0800f9e9
 800f960:	0800fa11 	.word	0x0800fa11
 800f964:	0800fa11 	.word	0x0800fa11
 800f968:	0800fa11 	.word	0x0800fa11
 800f96c:	0800fa11 	.word	0x0800fa11
 800f970:	0800fa11 	.word	0x0800fa11
 800f974:	0800fa11 	.word	0x0800fa11
 800f978:	0800fa11 	.word	0x0800fa11
 800f97c:	0800f9f1 	.word	0x0800f9f1
 800f980:	0800fa11 	.word	0x0800fa11
 800f984:	0800fa11 	.word	0x0800fa11
 800f988:	0800fa11 	.word	0x0800fa11
 800f98c:	0800fa11 	.word	0x0800fa11
 800f990:	0800fa11 	.word	0x0800fa11
 800f994:	0800fa11 	.word	0x0800fa11
 800f998:	0800fa11 	.word	0x0800fa11
 800f99c:	0800f9f9 	.word	0x0800f9f9
 800f9a0:	0800fa11 	.word	0x0800fa11
 800f9a4:	0800fa11 	.word	0x0800fa11
 800f9a8:	0800fa11 	.word	0x0800fa11
 800f9ac:	0800fa11 	.word	0x0800fa11
 800f9b0:	0800fa11 	.word	0x0800fa11
 800f9b4:	0800fa11 	.word	0x0800fa11
 800f9b8:	0800fa11 	.word	0x0800fa11
 800f9bc:	0800fa01 	.word	0x0800fa01
 800f9c0:	0800fa11 	.word	0x0800fa11
 800f9c4:	0800fa11 	.word	0x0800fa11
 800f9c8:	0800fa11 	.word	0x0800fa11
 800f9cc:	0800fa11 	.word	0x0800fa11
 800f9d0:	0800fa11 	.word	0x0800fa11
 800f9d4:	0800fa11 	.word	0x0800fa11
 800f9d8:	0800fa11 	.word	0x0800fa11
 800f9dc:	0800fa09 	.word	0x0800fa09
 800f9e0:	2301      	movs	r3, #1
 800f9e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9e6:	e050      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f9e8:	2304      	movs	r3, #4
 800f9ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9ee:	e04c      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f9f0:	2308      	movs	r3, #8
 800f9f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9f6:	e048      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800f9f8:	2310      	movs	r3, #16
 800f9fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9fe:	e044      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800fa00:	2320      	movs	r3, #32
 800fa02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa06:	e040      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800fa08:	2340      	movs	r3, #64	@ 0x40
 800fa0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa0e:	e03c      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800fa10:	2380      	movs	r3, #128	@ 0x80
 800fa12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa16:	e038      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800fa18:	697b      	ldr	r3, [r7, #20]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	4a71      	ldr	r2, [pc, #452]	@ (800fbe4 <UART_SetConfig+0x908>)
 800fa1e:	4293      	cmp	r3, r2
 800fa20:	d130      	bne.n	800fa84 <UART_SetConfig+0x7a8>
 800fa22:	4b6f      	ldr	r3, [pc, #444]	@ (800fbe0 <UART_SetConfig+0x904>)
 800fa24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fa26:	f003 0307 	and.w	r3, r3, #7
 800fa2a:	2b05      	cmp	r3, #5
 800fa2c:	d826      	bhi.n	800fa7c <UART_SetConfig+0x7a0>
 800fa2e:	a201      	add	r2, pc, #4	@ (adr r2, 800fa34 <UART_SetConfig+0x758>)
 800fa30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa34:	0800fa4d 	.word	0x0800fa4d
 800fa38:	0800fa55 	.word	0x0800fa55
 800fa3c:	0800fa5d 	.word	0x0800fa5d
 800fa40:	0800fa65 	.word	0x0800fa65
 800fa44:	0800fa6d 	.word	0x0800fa6d
 800fa48:	0800fa75 	.word	0x0800fa75
 800fa4c:	2302      	movs	r3, #2
 800fa4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa52:	e01a      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800fa54:	2304      	movs	r3, #4
 800fa56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa5a:	e016      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800fa5c:	2308      	movs	r3, #8
 800fa5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa62:	e012      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800fa64:	2310      	movs	r3, #16
 800fa66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa6a:	e00e      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800fa6c:	2320      	movs	r3, #32
 800fa6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa72:	e00a      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800fa74:	2340      	movs	r3, #64	@ 0x40
 800fa76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa7a:	e006      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800fa7c:	2380      	movs	r3, #128	@ 0x80
 800fa7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa82:	e002      	b.n	800fa8a <UART_SetConfig+0x7ae>
 800fa84:	2380      	movs	r3, #128	@ 0x80
 800fa86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fa8a:	697b      	ldr	r3, [r7, #20]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	4a55      	ldr	r2, [pc, #340]	@ (800fbe4 <UART_SetConfig+0x908>)
 800fa90:	4293      	cmp	r3, r2
 800fa92:	f040 80f8 	bne.w	800fc86 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fa96:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fa9a:	2b20      	cmp	r3, #32
 800fa9c:	dc46      	bgt.n	800fb2c <UART_SetConfig+0x850>
 800fa9e:	2b02      	cmp	r3, #2
 800faa0:	db75      	blt.n	800fb8e <UART_SetConfig+0x8b2>
 800faa2:	3b02      	subs	r3, #2
 800faa4:	2b1e      	cmp	r3, #30
 800faa6:	d872      	bhi.n	800fb8e <UART_SetConfig+0x8b2>
 800faa8:	a201      	add	r2, pc, #4	@ (adr r2, 800fab0 <UART_SetConfig+0x7d4>)
 800faaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800faae:	bf00      	nop
 800fab0:	0800fb33 	.word	0x0800fb33
 800fab4:	0800fb8f 	.word	0x0800fb8f
 800fab8:	0800fb3b 	.word	0x0800fb3b
 800fabc:	0800fb8f 	.word	0x0800fb8f
 800fac0:	0800fb8f 	.word	0x0800fb8f
 800fac4:	0800fb8f 	.word	0x0800fb8f
 800fac8:	0800fb4b 	.word	0x0800fb4b
 800facc:	0800fb8f 	.word	0x0800fb8f
 800fad0:	0800fb8f 	.word	0x0800fb8f
 800fad4:	0800fb8f 	.word	0x0800fb8f
 800fad8:	0800fb8f 	.word	0x0800fb8f
 800fadc:	0800fb8f 	.word	0x0800fb8f
 800fae0:	0800fb8f 	.word	0x0800fb8f
 800fae4:	0800fb8f 	.word	0x0800fb8f
 800fae8:	0800fb5b 	.word	0x0800fb5b
 800faec:	0800fb8f 	.word	0x0800fb8f
 800faf0:	0800fb8f 	.word	0x0800fb8f
 800faf4:	0800fb8f 	.word	0x0800fb8f
 800faf8:	0800fb8f 	.word	0x0800fb8f
 800fafc:	0800fb8f 	.word	0x0800fb8f
 800fb00:	0800fb8f 	.word	0x0800fb8f
 800fb04:	0800fb8f 	.word	0x0800fb8f
 800fb08:	0800fb8f 	.word	0x0800fb8f
 800fb0c:	0800fb8f 	.word	0x0800fb8f
 800fb10:	0800fb8f 	.word	0x0800fb8f
 800fb14:	0800fb8f 	.word	0x0800fb8f
 800fb18:	0800fb8f 	.word	0x0800fb8f
 800fb1c:	0800fb8f 	.word	0x0800fb8f
 800fb20:	0800fb8f 	.word	0x0800fb8f
 800fb24:	0800fb8f 	.word	0x0800fb8f
 800fb28:	0800fb81 	.word	0x0800fb81
 800fb2c:	2b40      	cmp	r3, #64	@ 0x40
 800fb2e:	d02a      	beq.n	800fb86 <UART_SetConfig+0x8aa>
 800fb30:	e02d      	b.n	800fb8e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800fb32:	f7fb fd79 	bl	800b628 <HAL_RCCEx_GetD3PCLK1Freq>
 800fb36:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fb38:	e02f      	b.n	800fb9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fb3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fb3e:	4618      	mov	r0, r3
 800fb40:	f7fb fd88 	bl	800b654 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fb44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fb48:	e027      	b.n	800fb9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fb4a:	f107 0318 	add.w	r3, r7, #24
 800fb4e:	4618      	mov	r0, r3
 800fb50:	f7fb fed4 	bl	800b8fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fb54:	69fb      	ldr	r3, [r7, #28]
 800fb56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fb58:	e01f      	b.n	800fb9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fb5a:	4b21      	ldr	r3, [pc, #132]	@ (800fbe0 <UART_SetConfig+0x904>)
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	f003 0320 	and.w	r3, r3, #32
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d009      	beq.n	800fb7a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fb66:	4b1e      	ldr	r3, [pc, #120]	@ (800fbe0 <UART_SetConfig+0x904>)
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	08db      	lsrs	r3, r3, #3
 800fb6c:	f003 0303 	and.w	r3, r3, #3
 800fb70:	4a1d      	ldr	r2, [pc, #116]	@ (800fbe8 <UART_SetConfig+0x90c>)
 800fb72:	fa22 f303 	lsr.w	r3, r2, r3
 800fb76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fb78:	e00f      	b.n	800fb9a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800fb7a:	4b1b      	ldr	r3, [pc, #108]	@ (800fbe8 <UART_SetConfig+0x90c>)
 800fb7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fb7e:	e00c      	b.n	800fb9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fb80:	4b1a      	ldr	r3, [pc, #104]	@ (800fbec <UART_SetConfig+0x910>)
 800fb82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fb84:	e009      	b.n	800fb9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fb86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fb8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fb8c:	e005      	b.n	800fb9a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800fb8e:	2300      	movs	r3, #0
 800fb90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800fb92:	2301      	movs	r3, #1
 800fb94:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800fb98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fb9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	f000 81ee 	beq.w	800ff7e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fba2:	697b      	ldr	r3, [r7, #20]
 800fba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fba6:	4a12      	ldr	r2, [pc, #72]	@ (800fbf0 <UART_SetConfig+0x914>)
 800fba8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fbac:	461a      	mov	r2, r3
 800fbae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fbb0:	fbb3 f3f2 	udiv	r3, r3, r2
 800fbb4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fbb6:	697b      	ldr	r3, [r7, #20]
 800fbb8:	685a      	ldr	r2, [r3, #4]
 800fbba:	4613      	mov	r3, r2
 800fbbc:	005b      	lsls	r3, r3, #1
 800fbbe:	4413      	add	r3, r2
 800fbc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fbc2:	429a      	cmp	r2, r3
 800fbc4:	d305      	bcc.n	800fbd2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fbc6:	697b      	ldr	r3, [r7, #20]
 800fbc8:	685b      	ldr	r3, [r3, #4]
 800fbca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fbcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fbce:	429a      	cmp	r2, r3
 800fbd0:	d910      	bls.n	800fbf4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800fbd2:	2301      	movs	r3, #1
 800fbd4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fbd8:	e1d1      	b.n	800ff7e <UART_SetConfig+0xca2>
 800fbda:	bf00      	nop
 800fbdc:	40011c00 	.word	0x40011c00
 800fbe0:	58024400 	.word	0x58024400
 800fbe4:	58000c00 	.word	0x58000c00
 800fbe8:	03d09000 	.word	0x03d09000
 800fbec:	003d0900 	.word	0x003d0900
 800fbf0:	080189ec 	.word	0x080189ec
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fbf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	60bb      	str	r3, [r7, #8]
 800fbfa:	60fa      	str	r2, [r7, #12]
 800fbfc:	697b      	ldr	r3, [r7, #20]
 800fbfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc00:	4ac0      	ldr	r2, [pc, #768]	@ (800ff04 <UART_SetConfig+0xc28>)
 800fc02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc06:	b29b      	uxth	r3, r3
 800fc08:	2200      	movs	r2, #0
 800fc0a:	603b      	str	r3, [r7, #0]
 800fc0c:	607a      	str	r2, [r7, #4]
 800fc0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fc16:	f7f0 fdd7 	bl	80007c8 <__aeabi_uldivmod>
 800fc1a:	4602      	mov	r2, r0
 800fc1c:	460b      	mov	r3, r1
 800fc1e:	4610      	mov	r0, r2
 800fc20:	4619      	mov	r1, r3
 800fc22:	f04f 0200 	mov.w	r2, #0
 800fc26:	f04f 0300 	mov.w	r3, #0
 800fc2a:	020b      	lsls	r3, r1, #8
 800fc2c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fc30:	0202      	lsls	r2, r0, #8
 800fc32:	6979      	ldr	r1, [r7, #20]
 800fc34:	6849      	ldr	r1, [r1, #4]
 800fc36:	0849      	lsrs	r1, r1, #1
 800fc38:	2000      	movs	r0, #0
 800fc3a:	460c      	mov	r4, r1
 800fc3c:	4605      	mov	r5, r0
 800fc3e:	eb12 0804 	adds.w	r8, r2, r4
 800fc42:	eb43 0905 	adc.w	r9, r3, r5
 800fc46:	697b      	ldr	r3, [r7, #20]
 800fc48:	685b      	ldr	r3, [r3, #4]
 800fc4a:	2200      	movs	r2, #0
 800fc4c:	469a      	mov	sl, r3
 800fc4e:	4693      	mov	fp, r2
 800fc50:	4652      	mov	r2, sl
 800fc52:	465b      	mov	r3, fp
 800fc54:	4640      	mov	r0, r8
 800fc56:	4649      	mov	r1, r9
 800fc58:	f7f0 fdb6 	bl	80007c8 <__aeabi_uldivmod>
 800fc5c:	4602      	mov	r2, r0
 800fc5e:	460b      	mov	r3, r1
 800fc60:	4613      	mov	r3, r2
 800fc62:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fc64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fc6a:	d308      	bcc.n	800fc7e <UART_SetConfig+0x9a2>
 800fc6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fc72:	d204      	bcs.n	800fc7e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800fc74:	697b      	ldr	r3, [r7, #20]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fc7a:	60da      	str	r2, [r3, #12]
 800fc7c:	e17f      	b.n	800ff7e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800fc7e:	2301      	movs	r3, #1
 800fc80:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fc84:	e17b      	b.n	800ff7e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fc86:	697b      	ldr	r3, [r7, #20]
 800fc88:	69db      	ldr	r3, [r3, #28]
 800fc8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fc8e:	f040 80bd 	bne.w	800fe0c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800fc92:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fc96:	2b20      	cmp	r3, #32
 800fc98:	dc48      	bgt.n	800fd2c <UART_SetConfig+0xa50>
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	db7b      	blt.n	800fd96 <UART_SetConfig+0xaba>
 800fc9e:	2b20      	cmp	r3, #32
 800fca0:	d879      	bhi.n	800fd96 <UART_SetConfig+0xaba>
 800fca2:	a201      	add	r2, pc, #4	@ (adr r2, 800fca8 <UART_SetConfig+0x9cc>)
 800fca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fca8:	0800fd33 	.word	0x0800fd33
 800fcac:	0800fd3b 	.word	0x0800fd3b
 800fcb0:	0800fd97 	.word	0x0800fd97
 800fcb4:	0800fd97 	.word	0x0800fd97
 800fcb8:	0800fd43 	.word	0x0800fd43
 800fcbc:	0800fd97 	.word	0x0800fd97
 800fcc0:	0800fd97 	.word	0x0800fd97
 800fcc4:	0800fd97 	.word	0x0800fd97
 800fcc8:	0800fd53 	.word	0x0800fd53
 800fccc:	0800fd97 	.word	0x0800fd97
 800fcd0:	0800fd97 	.word	0x0800fd97
 800fcd4:	0800fd97 	.word	0x0800fd97
 800fcd8:	0800fd97 	.word	0x0800fd97
 800fcdc:	0800fd97 	.word	0x0800fd97
 800fce0:	0800fd97 	.word	0x0800fd97
 800fce4:	0800fd97 	.word	0x0800fd97
 800fce8:	0800fd63 	.word	0x0800fd63
 800fcec:	0800fd97 	.word	0x0800fd97
 800fcf0:	0800fd97 	.word	0x0800fd97
 800fcf4:	0800fd97 	.word	0x0800fd97
 800fcf8:	0800fd97 	.word	0x0800fd97
 800fcfc:	0800fd97 	.word	0x0800fd97
 800fd00:	0800fd97 	.word	0x0800fd97
 800fd04:	0800fd97 	.word	0x0800fd97
 800fd08:	0800fd97 	.word	0x0800fd97
 800fd0c:	0800fd97 	.word	0x0800fd97
 800fd10:	0800fd97 	.word	0x0800fd97
 800fd14:	0800fd97 	.word	0x0800fd97
 800fd18:	0800fd97 	.word	0x0800fd97
 800fd1c:	0800fd97 	.word	0x0800fd97
 800fd20:	0800fd97 	.word	0x0800fd97
 800fd24:	0800fd97 	.word	0x0800fd97
 800fd28:	0800fd89 	.word	0x0800fd89
 800fd2c:	2b40      	cmp	r3, #64	@ 0x40
 800fd2e:	d02e      	beq.n	800fd8e <UART_SetConfig+0xab2>
 800fd30:	e031      	b.n	800fd96 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fd32:	f7fa fa4d 	bl	800a1d0 <HAL_RCC_GetPCLK1Freq>
 800fd36:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fd38:	e033      	b.n	800fda2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fd3a:	f7fa fa5f 	bl	800a1fc <HAL_RCC_GetPCLK2Freq>
 800fd3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fd40:	e02f      	b.n	800fda2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fd42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fd46:	4618      	mov	r0, r3
 800fd48:	f7fb fc84 	bl	800b654 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fd4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd50:	e027      	b.n	800fda2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fd52:	f107 0318 	add.w	r3, r7, #24
 800fd56:	4618      	mov	r0, r3
 800fd58:	f7fb fdd0 	bl	800b8fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fd5c:	69fb      	ldr	r3, [r7, #28]
 800fd5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd60:	e01f      	b.n	800fda2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fd62:	4b69      	ldr	r3, [pc, #420]	@ (800ff08 <UART_SetConfig+0xc2c>)
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	f003 0320 	and.w	r3, r3, #32
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d009      	beq.n	800fd82 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fd6e:	4b66      	ldr	r3, [pc, #408]	@ (800ff08 <UART_SetConfig+0xc2c>)
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	08db      	lsrs	r3, r3, #3
 800fd74:	f003 0303 	and.w	r3, r3, #3
 800fd78:	4a64      	ldr	r2, [pc, #400]	@ (800ff0c <UART_SetConfig+0xc30>)
 800fd7a:	fa22 f303 	lsr.w	r3, r2, r3
 800fd7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fd80:	e00f      	b.n	800fda2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800fd82:	4b62      	ldr	r3, [pc, #392]	@ (800ff0c <UART_SetConfig+0xc30>)
 800fd84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd86:	e00c      	b.n	800fda2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fd88:	4b61      	ldr	r3, [pc, #388]	@ (800ff10 <UART_SetConfig+0xc34>)
 800fd8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd8c:	e009      	b.n	800fda2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fd8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fd92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd94:	e005      	b.n	800fda2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800fd96:	2300      	movs	r3, #0
 800fd98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800fd9a:	2301      	movs	r3, #1
 800fd9c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800fda0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fda2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	f000 80ea 	beq.w	800ff7e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fdaa:	697b      	ldr	r3, [r7, #20]
 800fdac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdae:	4a55      	ldr	r2, [pc, #340]	@ (800ff04 <UART_SetConfig+0xc28>)
 800fdb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fdb4:	461a      	mov	r2, r3
 800fdb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fdb8:	fbb3 f3f2 	udiv	r3, r3, r2
 800fdbc:	005a      	lsls	r2, r3, #1
 800fdbe:	697b      	ldr	r3, [r7, #20]
 800fdc0:	685b      	ldr	r3, [r3, #4]
 800fdc2:	085b      	lsrs	r3, r3, #1
 800fdc4:	441a      	add	r2, r3
 800fdc6:	697b      	ldr	r3, [r7, #20]
 800fdc8:	685b      	ldr	r3, [r3, #4]
 800fdca:	fbb2 f3f3 	udiv	r3, r2, r3
 800fdce:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fdd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdd2:	2b0f      	cmp	r3, #15
 800fdd4:	d916      	bls.n	800fe04 <UART_SetConfig+0xb28>
 800fdd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fddc:	d212      	bcs.n	800fe04 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fdde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fde0:	b29b      	uxth	r3, r3
 800fde2:	f023 030f 	bic.w	r3, r3, #15
 800fde6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fde8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdea:	085b      	lsrs	r3, r3, #1
 800fdec:	b29b      	uxth	r3, r3
 800fdee:	f003 0307 	and.w	r3, r3, #7
 800fdf2:	b29a      	uxth	r2, r3
 800fdf4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800fdf6:	4313      	orrs	r3, r2
 800fdf8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800fdfa:	697b      	ldr	r3, [r7, #20]
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800fe00:	60da      	str	r2, [r3, #12]
 800fe02:	e0bc      	b.n	800ff7e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800fe04:	2301      	movs	r3, #1
 800fe06:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fe0a:	e0b8      	b.n	800ff7e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800fe0c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fe10:	2b20      	cmp	r3, #32
 800fe12:	dc4b      	bgt.n	800feac <UART_SetConfig+0xbd0>
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	f2c0 8087 	blt.w	800ff28 <UART_SetConfig+0xc4c>
 800fe1a:	2b20      	cmp	r3, #32
 800fe1c:	f200 8084 	bhi.w	800ff28 <UART_SetConfig+0xc4c>
 800fe20:	a201      	add	r2, pc, #4	@ (adr r2, 800fe28 <UART_SetConfig+0xb4c>)
 800fe22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe26:	bf00      	nop
 800fe28:	0800feb3 	.word	0x0800feb3
 800fe2c:	0800febb 	.word	0x0800febb
 800fe30:	0800ff29 	.word	0x0800ff29
 800fe34:	0800ff29 	.word	0x0800ff29
 800fe38:	0800fec3 	.word	0x0800fec3
 800fe3c:	0800ff29 	.word	0x0800ff29
 800fe40:	0800ff29 	.word	0x0800ff29
 800fe44:	0800ff29 	.word	0x0800ff29
 800fe48:	0800fed3 	.word	0x0800fed3
 800fe4c:	0800ff29 	.word	0x0800ff29
 800fe50:	0800ff29 	.word	0x0800ff29
 800fe54:	0800ff29 	.word	0x0800ff29
 800fe58:	0800ff29 	.word	0x0800ff29
 800fe5c:	0800ff29 	.word	0x0800ff29
 800fe60:	0800ff29 	.word	0x0800ff29
 800fe64:	0800ff29 	.word	0x0800ff29
 800fe68:	0800fee3 	.word	0x0800fee3
 800fe6c:	0800ff29 	.word	0x0800ff29
 800fe70:	0800ff29 	.word	0x0800ff29
 800fe74:	0800ff29 	.word	0x0800ff29
 800fe78:	0800ff29 	.word	0x0800ff29
 800fe7c:	0800ff29 	.word	0x0800ff29
 800fe80:	0800ff29 	.word	0x0800ff29
 800fe84:	0800ff29 	.word	0x0800ff29
 800fe88:	0800ff29 	.word	0x0800ff29
 800fe8c:	0800ff29 	.word	0x0800ff29
 800fe90:	0800ff29 	.word	0x0800ff29
 800fe94:	0800ff29 	.word	0x0800ff29
 800fe98:	0800ff29 	.word	0x0800ff29
 800fe9c:	0800ff29 	.word	0x0800ff29
 800fea0:	0800ff29 	.word	0x0800ff29
 800fea4:	0800ff29 	.word	0x0800ff29
 800fea8:	0800ff1b 	.word	0x0800ff1b
 800feac:	2b40      	cmp	r3, #64	@ 0x40
 800feae:	d037      	beq.n	800ff20 <UART_SetConfig+0xc44>
 800feb0:	e03a      	b.n	800ff28 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800feb2:	f7fa f98d 	bl	800a1d0 <HAL_RCC_GetPCLK1Freq>
 800feb6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800feb8:	e03c      	b.n	800ff34 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800feba:	f7fa f99f 	bl	800a1fc <HAL_RCC_GetPCLK2Freq>
 800febe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fec0:	e038      	b.n	800ff34 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fec2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fec6:	4618      	mov	r0, r3
 800fec8:	f7fb fbc4 	bl	800b654 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fed0:	e030      	b.n	800ff34 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fed2:	f107 0318 	add.w	r3, r7, #24
 800fed6:	4618      	mov	r0, r3
 800fed8:	f7fb fd10 	bl	800b8fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fedc:	69fb      	ldr	r3, [r7, #28]
 800fede:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fee0:	e028      	b.n	800ff34 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fee2:	4b09      	ldr	r3, [pc, #36]	@ (800ff08 <UART_SetConfig+0xc2c>)
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	f003 0320 	and.w	r3, r3, #32
 800feea:	2b00      	cmp	r3, #0
 800feec:	d012      	beq.n	800ff14 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800feee:	4b06      	ldr	r3, [pc, #24]	@ (800ff08 <UART_SetConfig+0xc2c>)
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	08db      	lsrs	r3, r3, #3
 800fef4:	f003 0303 	and.w	r3, r3, #3
 800fef8:	4a04      	ldr	r2, [pc, #16]	@ (800ff0c <UART_SetConfig+0xc30>)
 800fefa:	fa22 f303 	lsr.w	r3, r2, r3
 800fefe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ff00:	e018      	b.n	800ff34 <UART_SetConfig+0xc58>
 800ff02:	bf00      	nop
 800ff04:	080189ec 	.word	0x080189ec
 800ff08:	58024400 	.word	0x58024400
 800ff0c:	03d09000 	.word	0x03d09000
 800ff10:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800ff14:	4b24      	ldr	r3, [pc, #144]	@ (800ffa8 <UART_SetConfig+0xccc>)
 800ff16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff18:	e00c      	b.n	800ff34 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ff1a:	4b24      	ldr	r3, [pc, #144]	@ (800ffac <UART_SetConfig+0xcd0>)
 800ff1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff1e:	e009      	b.n	800ff34 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ff20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ff24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff26:	e005      	b.n	800ff34 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800ff28:	2300      	movs	r3, #0
 800ff2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ff2c:	2301      	movs	r3, #1
 800ff2e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ff32:	bf00      	nop
    }

    if (pclk != 0U)
 800ff34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d021      	beq.n	800ff7e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ff3a:	697b      	ldr	r3, [r7, #20]
 800ff3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff3e:	4a1c      	ldr	r2, [pc, #112]	@ (800ffb0 <UART_SetConfig+0xcd4>)
 800ff40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ff44:	461a      	mov	r2, r3
 800ff46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff48:	fbb3 f2f2 	udiv	r2, r3, r2
 800ff4c:	697b      	ldr	r3, [r7, #20]
 800ff4e:	685b      	ldr	r3, [r3, #4]
 800ff50:	085b      	lsrs	r3, r3, #1
 800ff52:	441a      	add	r2, r3
 800ff54:	697b      	ldr	r3, [r7, #20]
 800ff56:	685b      	ldr	r3, [r3, #4]
 800ff58:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff5c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ff5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff60:	2b0f      	cmp	r3, #15
 800ff62:	d909      	bls.n	800ff78 <UART_SetConfig+0xc9c>
 800ff64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ff6a:	d205      	bcs.n	800ff78 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ff6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff6e:	b29a      	uxth	r2, r3
 800ff70:	697b      	ldr	r3, [r7, #20]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	60da      	str	r2, [r3, #12]
 800ff76:	e002      	b.n	800ff7e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ff78:	2301      	movs	r3, #1
 800ff7a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ff7e:	697b      	ldr	r3, [r7, #20]
 800ff80:	2201      	movs	r2, #1
 800ff82:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ff86:	697b      	ldr	r3, [r7, #20]
 800ff88:	2201      	movs	r2, #1
 800ff8a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ff8e:	697b      	ldr	r3, [r7, #20]
 800ff90:	2200      	movs	r2, #0
 800ff92:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ff94:	697b      	ldr	r3, [r7, #20]
 800ff96:	2200      	movs	r2, #0
 800ff98:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ff9a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	3748      	adds	r7, #72	@ 0x48
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ffa8:	03d09000 	.word	0x03d09000
 800ffac:	003d0900 	.word	0x003d0900
 800ffb0:	080189ec 	.word	0x080189ec

0800ffb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ffb4:	b480      	push	{r7}
 800ffb6:	b083      	sub	sp, #12
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ffc0:	f003 0308 	and.w	r3, r3, #8
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d00a      	beq.n	800ffde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	685b      	ldr	r3, [r3, #4]
 800ffce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	430a      	orrs	r2, r1
 800ffdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ffe2:	f003 0301 	and.w	r3, r3, #1
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d00a      	beq.n	8010000 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	685b      	ldr	r3, [r3, #4]
 800fff0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	430a      	orrs	r2, r1
 800fffe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010004:	f003 0302 	and.w	r3, r3, #2
 8010008:	2b00      	cmp	r3, #0
 801000a:	d00a      	beq.n	8010022 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	685b      	ldr	r3, [r3, #4]
 8010012:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	430a      	orrs	r2, r1
 8010020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010026:	f003 0304 	and.w	r3, r3, #4
 801002a:	2b00      	cmp	r3, #0
 801002c:	d00a      	beq.n	8010044 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	685b      	ldr	r3, [r3, #4]
 8010034:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	430a      	orrs	r2, r1
 8010042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010048:	f003 0310 	and.w	r3, r3, #16
 801004c:	2b00      	cmp	r3, #0
 801004e:	d00a      	beq.n	8010066 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	689b      	ldr	r3, [r3, #8]
 8010056:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	430a      	orrs	r2, r1
 8010064:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801006a:	f003 0320 	and.w	r3, r3, #32
 801006e:	2b00      	cmp	r3, #0
 8010070:	d00a      	beq.n	8010088 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	689b      	ldr	r3, [r3, #8]
 8010078:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	430a      	orrs	r2, r1
 8010086:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801008c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010090:	2b00      	cmp	r3, #0
 8010092:	d01a      	beq.n	80100ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	685b      	ldr	r3, [r3, #4]
 801009a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	430a      	orrs	r2, r1
 80100a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80100ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80100b2:	d10a      	bne.n	80100ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	685b      	ldr	r3, [r3, #4]
 80100ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	430a      	orrs	r2, r1
 80100c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80100ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d00a      	beq.n	80100ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	685b      	ldr	r3, [r3, #4]
 80100dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	430a      	orrs	r2, r1
 80100ea:	605a      	str	r2, [r3, #4]
  }
}
 80100ec:	bf00      	nop
 80100ee:	370c      	adds	r7, #12
 80100f0:	46bd      	mov	sp, r7
 80100f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f6:	4770      	bx	lr

080100f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80100f8:	b580      	push	{r7, lr}
 80100fa:	b098      	sub	sp, #96	@ 0x60
 80100fc:	af02      	add	r7, sp, #8
 80100fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	2200      	movs	r2, #0
 8010104:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010108:	f7f5 f9c2 	bl	8005490 <HAL_GetTick>
 801010c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	f003 0308 	and.w	r3, r3, #8
 8010118:	2b08      	cmp	r3, #8
 801011a:	d12f      	bne.n	801017c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801011c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010120:	9300      	str	r3, [sp, #0]
 8010122:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010124:	2200      	movs	r2, #0
 8010126:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801012a:	6878      	ldr	r0, [r7, #4]
 801012c:	f000 f88e 	bl	801024c <UART_WaitOnFlagUntilTimeout>
 8010130:	4603      	mov	r3, r0
 8010132:	2b00      	cmp	r3, #0
 8010134:	d022      	beq.n	801017c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801013c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801013e:	e853 3f00 	ldrex	r3, [r3]
 8010142:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010146:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801014a:	653b      	str	r3, [r7, #80]	@ 0x50
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	461a      	mov	r2, r3
 8010152:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010154:	647b      	str	r3, [r7, #68]	@ 0x44
 8010156:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010158:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801015a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801015c:	e841 2300 	strex	r3, r2, [r1]
 8010160:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010162:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010164:	2b00      	cmp	r3, #0
 8010166:	d1e6      	bne.n	8010136 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	2220      	movs	r2, #32
 801016c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	2200      	movs	r2, #0
 8010174:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010178:	2303      	movs	r3, #3
 801017a:	e063      	b.n	8010244 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	f003 0304 	and.w	r3, r3, #4
 8010186:	2b04      	cmp	r3, #4
 8010188:	d149      	bne.n	801021e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801018a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801018e:	9300      	str	r3, [sp, #0]
 8010190:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010192:	2200      	movs	r2, #0
 8010194:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010198:	6878      	ldr	r0, [r7, #4]
 801019a:	f000 f857 	bl	801024c <UART_WaitOnFlagUntilTimeout>
 801019e:	4603      	mov	r3, r0
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d03c      	beq.n	801021e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101ac:	e853 3f00 	ldrex	r3, [r3]
 80101b0:	623b      	str	r3, [r7, #32]
   return(result);
 80101b2:	6a3b      	ldr	r3, [r7, #32]
 80101b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80101b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	461a      	mov	r2, r3
 80101c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80101c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80101c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80101c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80101ca:	e841 2300 	strex	r3, r2, [r1]
 80101ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80101d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d1e6      	bne.n	80101a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	3308      	adds	r3, #8
 80101dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101de:	693b      	ldr	r3, [r7, #16]
 80101e0:	e853 3f00 	ldrex	r3, [r3]
 80101e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	f023 0301 	bic.w	r3, r3, #1
 80101ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	3308      	adds	r3, #8
 80101f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80101f6:	61fa      	str	r2, [r7, #28]
 80101f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101fa:	69b9      	ldr	r1, [r7, #24]
 80101fc:	69fa      	ldr	r2, [r7, #28]
 80101fe:	e841 2300 	strex	r3, r2, [r1]
 8010202:	617b      	str	r3, [r7, #20]
   return(result);
 8010204:	697b      	ldr	r3, [r7, #20]
 8010206:	2b00      	cmp	r3, #0
 8010208:	d1e5      	bne.n	80101d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	2220      	movs	r2, #32
 801020e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	2200      	movs	r2, #0
 8010216:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801021a:	2303      	movs	r3, #3
 801021c:	e012      	b.n	8010244 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	2220      	movs	r2, #32
 8010222:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	2220      	movs	r2, #32
 801022a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	2200      	movs	r2, #0
 8010232:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	2200      	movs	r2, #0
 8010238:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	2200      	movs	r2, #0
 801023e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010242:	2300      	movs	r3, #0
}
 8010244:	4618      	mov	r0, r3
 8010246:	3758      	adds	r7, #88	@ 0x58
 8010248:	46bd      	mov	sp, r7
 801024a:	bd80      	pop	{r7, pc}

0801024c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801024c:	b580      	push	{r7, lr}
 801024e:	b084      	sub	sp, #16
 8010250:	af00      	add	r7, sp, #0
 8010252:	60f8      	str	r0, [r7, #12]
 8010254:	60b9      	str	r1, [r7, #8]
 8010256:	603b      	str	r3, [r7, #0]
 8010258:	4613      	mov	r3, r2
 801025a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801025c:	e04f      	b.n	80102fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801025e:	69bb      	ldr	r3, [r7, #24]
 8010260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010264:	d04b      	beq.n	80102fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010266:	f7f5 f913 	bl	8005490 <HAL_GetTick>
 801026a:	4602      	mov	r2, r0
 801026c:	683b      	ldr	r3, [r7, #0]
 801026e:	1ad3      	subs	r3, r2, r3
 8010270:	69ba      	ldr	r2, [r7, #24]
 8010272:	429a      	cmp	r2, r3
 8010274:	d302      	bcc.n	801027c <UART_WaitOnFlagUntilTimeout+0x30>
 8010276:	69bb      	ldr	r3, [r7, #24]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d101      	bne.n	8010280 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801027c:	2303      	movs	r3, #3
 801027e:	e04e      	b.n	801031e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	f003 0304 	and.w	r3, r3, #4
 801028a:	2b00      	cmp	r3, #0
 801028c:	d037      	beq.n	80102fe <UART_WaitOnFlagUntilTimeout+0xb2>
 801028e:	68bb      	ldr	r3, [r7, #8]
 8010290:	2b80      	cmp	r3, #128	@ 0x80
 8010292:	d034      	beq.n	80102fe <UART_WaitOnFlagUntilTimeout+0xb2>
 8010294:	68bb      	ldr	r3, [r7, #8]
 8010296:	2b40      	cmp	r3, #64	@ 0x40
 8010298:	d031      	beq.n	80102fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	69db      	ldr	r3, [r3, #28]
 80102a0:	f003 0308 	and.w	r3, r3, #8
 80102a4:	2b08      	cmp	r3, #8
 80102a6:	d110      	bne.n	80102ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	2208      	movs	r2, #8
 80102ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80102b0:	68f8      	ldr	r0, [r7, #12]
 80102b2:	f000 fa43 	bl	801073c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	2208      	movs	r2, #8
 80102ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	2200      	movs	r2, #0
 80102c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80102c6:	2301      	movs	r3, #1
 80102c8:	e029      	b.n	801031e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	69db      	ldr	r3, [r3, #28]
 80102d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80102d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80102d8:	d111      	bne.n	80102fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80102e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80102e4:	68f8      	ldr	r0, [r7, #12]
 80102e6:	f000 fa29 	bl	801073c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	2220      	movs	r2, #32
 80102ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	2200      	movs	r2, #0
 80102f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80102fa:	2303      	movs	r3, #3
 80102fc:	e00f      	b.n	801031e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	69da      	ldr	r2, [r3, #28]
 8010304:	68bb      	ldr	r3, [r7, #8]
 8010306:	4013      	ands	r3, r2
 8010308:	68ba      	ldr	r2, [r7, #8]
 801030a:	429a      	cmp	r2, r3
 801030c:	bf0c      	ite	eq
 801030e:	2301      	moveq	r3, #1
 8010310:	2300      	movne	r3, #0
 8010312:	b2db      	uxtb	r3, r3
 8010314:	461a      	mov	r2, r3
 8010316:	79fb      	ldrb	r3, [r7, #7]
 8010318:	429a      	cmp	r2, r3
 801031a:	d0a0      	beq.n	801025e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801031c:	2300      	movs	r3, #0
}
 801031e:	4618      	mov	r0, r3
 8010320:	3710      	adds	r7, #16
 8010322:	46bd      	mov	sp, r7
 8010324:	bd80      	pop	{r7, pc}
	...

08010328 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010328:	b480      	push	{r7}
 801032a:	b0a3      	sub	sp, #140	@ 0x8c
 801032c:	af00      	add	r7, sp, #0
 801032e:	60f8      	str	r0, [r7, #12]
 8010330:	60b9      	str	r1, [r7, #8]
 8010332:	4613      	mov	r3, r2
 8010334:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	68ba      	ldr	r2, [r7, #8]
 801033a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	88fa      	ldrh	r2, [r7, #6]
 8010340:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	88fa      	ldrh	r2, [r7, #6]
 8010348:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	2200      	movs	r2, #0
 8010350:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	689b      	ldr	r3, [r3, #8]
 8010356:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801035a:	d10e      	bne.n	801037a <UART_Start_Receive_IT+0x52>
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	691b      	ldr	r3, [r3, #16]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d105      	bne.n	8010370 <UART_Start_Receive_IT+0x48>
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	f240 12ff 	movw	r2, #511	@ 0x1ff
 801036a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801036e:	e02d      	b.n	80103cc <UART_Start_Receive_IT+0xa4>
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	22ff      	movs	r2, #255	@ 0xff
 8010374:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010378:	e028      	b.n	80103cc <UART_Start_Receive_IT+0xa4>
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	689b      	ldr	r3, [r3, #8]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d10d      	bne.n	801039e <UART_Start_Receive_IT+0x76>
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	691b      	ldr	r3, [r3, #16]
 8010386:	2b00      	cmp	r3, #0
 8010388:	d104      	bne.n	8010394 <UART_Start_Receive_IT+0x6c>
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	22ff      	movs	r2, #255	@ 0xff
 801038e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010392:	e01b      	b.n	80103cc <UART_Start_Receive_IT+0xa4>
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	227f      	movs	r2, #127	@ 0x7f
 8010398:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801039c:	e016      	b.n	80103cc <UART_Start_Receive_IT+0xa4>
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	689b      	ldr	r3, [r3, #8]
 80103a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80103a6:	d10d      	bne.n	80103c4 <UART_Start_Receive_IT+0x9c>
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	691b      	ldr	r3, [r3, #16]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d104      	bne.n	80103ba <UART_Start_Receive_IT+0x92>
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	227f      	movs	r2, #127	@ 0x7f
 80103b4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80103b8:	e008      	b.n	80103cc <UART_Start_Receive_IT+0xa4>
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	223f      	movs	r2, #63	@ 0x3f
 80103be:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80103c2:	e003      	b.n	80103cc <UART_Start_Receive_IT+0xa4>
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	2200      	movs	r2, #0
 80103c8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	2200      	movs	r2, #0
 80103d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	2222      	movs	r2, #34	@ 0x22
 80103d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	3308      	adds	r3, #8
 80103e2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80103e6:	e853 3f00 	ldrex	r3, [r3]
 80103ea:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80103ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80103ee:	f043 0301 	orr.w	r3, r3, #1
 80103f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	3308      	adds	r3, #8
 80103fc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8010400:	673a      	str	r2, [r7, #112]	@ 0x70
 8010402:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010404:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8010406:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8010408:	e841 2300 	strex	r3, r2, [r1]
 801040c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 801040e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010410:	2b00      	cmp	r3, #0
 8010412:	d1e3      	bne.n	80103dc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010418:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801041c:	d14f      	bne.n	80104be <UART_Start_Receive_IT+0x196>
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8010424:	88fa      	ldrh	r2, [r7, #6]
 8010426:	429a      	cmp	r2, r3
 8010428:	d349      	bcc.n	80104be <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	689b      	ldr	r3, [r3, #8]
 801042e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010432:	d107      	bne.n	8010444 <UART_Start_Receive_IT+0x11c>
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	691b      	ldr	r3, [r3, #16]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d103      	bne.n	8010444 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	4a47      	ldr	r2, [pc, #284]	@ (801055c <UART_Start_Receive_IT+0x234>)
 8010440:	675a      	str	r2, [r3, #116]	@ 0x74
 8010442:	e002      	b.n	801044a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	4a46      	ldr	r2, [pc, #280]	@ (8010560 <UART_Start_Receive_IT+0x238>)
 8010448:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	691b      	ldr	r3, [r3, #16]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d01a      	beq.n	8010488 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010458:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801045a:	e853 3f00 	ldrex	r3, [r3]
 801045e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8010460:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010462:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010466:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	461a      	mov	r2, r3
 8010470:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8010474:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010476:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010478:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801047a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801047c:	e841 2300 	strex	r3, r2, [r1]
 8010480:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8010482:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010484:	2b00      	cmp	r3, #0
 8010486:	d1e4      	bne.n	8010452 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	3308      	adds	r3, #8
 801048e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010490:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010492:	e853 3f00 	ldrex	r3, [r3]
 8010496:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801049a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801049e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	3308      	adds	r3, #8
 80104a6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80104a8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80104aa:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104ac:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80104ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80104b0:	e841 2300 	strex	r3, r2, [r1]
 80104b4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80104b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d1e5      	bne.n	8010488 <UART_Start_Receive_IT+0x160>
 80104bc:	e046      	b.n	801054c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	689b      	ldr	r3, [r3, #8]
 80104c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80104c6:	d107      	bne.n	80104d8 <UART_Start_Receive_IT+0x1b0>
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	691b      	ldr	r3, [r3, #16]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d103      	bne.n	80104d8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	4a24      	ldr	r2, [pc, #144]	@ (8010564 <UART_Start_Receive_IT+0x23c>)
 80104d4:	675a      	str	r2, [r3, #116]	@ 0x74
 80104d6:	e002      	b.n	80104de <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	4a23      	ldr	r2, [pc, #140]	@ (8010568 <UART_Start_Receive_IT+0x240>)
 80104dc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	691b      	ldr	r3, [r3, #16]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d019      	beq.n	801051a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104ee:	e853 3f00 	ldrex	r3, [r3]
 80104f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80104f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104f6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80104fa:	677b      	str	r3, [r7, #116]	@ 0x74
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	461a      	mov	r2, r3
 8010502:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010504:	637b      	str	r3, [r7, #52]	@ 0x34
 8010506:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010508:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801050a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801050c:	e841 2300 	strex	r3, r2, [r1]
 8010510:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8010512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010514:	2b00      	cmp	r3, #0
 8010516:	d1e6      	bne.n	80104e6 <UART_Start_Receive_IT+0x1be>
 8010518:	e018      	b.n	801054c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010520:	697b      	ldr	r3, [r7, #20]
 8010522:	e853 3f00 	ldrex	r3, [r3]
 8010526:	613b      	str	r3, [r7, #16]
   return(result);
 8010528:	693b      	ldr	r3, [r7, #16]
 801052a:	f043 0320 	orr.w	r3, r3, #32
 801052e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	461a      	mov	r2, r3
 8010536:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010538:	623b      	str	r3, [r7, #32]
 801053a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801053c:	69f9      	ldr	r1, [r7, #28]
 801053e:	6a3a      	ldr	r2, [r7, #32]
 8010540:	e841 2300 	strex	r3, r2, [r1]
 8010544:	61bb      	str	r3, [r7, #24]
   return(result);
 8010546:	69bb      	ldr	r3, [r7, #24]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d1e6      	bne.n	801051a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 801054c:	2300      	movs	r3, #0
}
 801054e:	4618      	mov	r0, r3
 8010550:	378c      	adds	r7, #140	@ 0x8c
 8010552:	46bd      	mov	sp, r7
 8010554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010558:	4770      	bx	lr
 801055a:	bf00      	nop
 801055c:	08011591 	.word	0x08011591
 8010560:	08011231 	.word	0x08011231
 8010564:	08011079 	.word	0x08011079
 8010568:	08010ec1 	.word	0x08010ec1

0801056c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801056c:	b580      	push	{r7, lr}
 801056e:	b096      	sub	sp, #88	@ 0x58
 8010570:	af00      	add	r7, sp, #0
 8010572:	60f8      	str	r0, [r7, #12]
 8010574:	60b9      	str	r1, [r7, #8]
 8010576:	4613      	mov	r3, r2
 8010578:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	68ba      	ldr	r2, [r7, #8]
 801057e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	88fa      	ldrh	r2, [r7, #6]
 8010584:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	2200      	movs	r2, #0
 801058c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	2222      	movs	r2, #34	@ 0x22
 8010594:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d02d      	beq.n	80105fe <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80105a8:	4a40      	ldr	r2, [pc, #256]	@ (80106ac <UART_Start_Receive_DMA+0x140>)
 80105aa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80105b2:	4a3f      	ldr	r2, [pc, #252]	@ (80106b0 <UART_Start_Receive_DMA+0x144>)
 80105b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80105bc:	4a3d      	ldr	r2, [pc, #244]	@ (80106b4 <UART_Start_Receive_DMA+0x148>)
 80105be:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80105c6:	2200      	movs	r2, #0
 80105c8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	3324      	adds	r3, #36	@ 0x24
 80105d6:	4619      	mov	r1, r3
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80105dc:	461a      	mov	r2, r3
 80105de:	88fb      	ldrh	r3, [r7, #6]
 80105e0:	f7f5 fc6c 	bl	8005ebc <HAL_DMA_Start_IT>
 80105e4:	4603      	mov	r3, r0
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d009      	beq.n	80105fe <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	2210      	movs	r2, #16
 80105ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	2220      	movs	r2, #32
 80105f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80105fa:	2301      	movs	r3, #1
 80105fc:	e051      	b.n	80106a2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	691b      	ldr	r3, [r3, #16]
 8010602:	2b00      	cmp	r3, #0
 8010604:	d018      	beq.n	8010638 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801060c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801060e:	e853 3f00 	ldrex	r3, [r3]
 8010612:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010616:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801061a:	657b      	str	r3, [r7, #84]	@ 0x54
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	461a      	mov	r2, r3
 8010622:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010624:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010626:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010628:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801062a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801062c:	e841 2300 	strex	r3, r2, [r1]
 8010630:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8010632:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010634:	2b00      	cmp	r3, #0
 8010636:	d1e6      	bne.n	8010606 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	3308      	adds	r3, #8
 801063e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010642:	e853 3f00 	ldrex	r3, [r3]
 8010646:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801064a:	f043 0301 	orr.w	r3, r3, #1
 801064e:	653b      	str	r3, [r7, #80]	@ 0x50
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	3308      	adds	r3, #8
 8010656:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010658:	637a      	str	r2, [r7, #52]	@ 0x34
 801065a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801065c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801065e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010660:	e841 2300 	strex	r3, r2, [r1]
 8010664:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8010666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010668:	2b00      	cmp	r3, #0
 801066a:	d1e5      	bne.n	8010638 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	3308      	adds	r3, #8
 8010672:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010674:	697b      	ldr	r3, [r7, #20]
 8010676:	e853 3f00 	ldrex	r3, [r3]
 801067a:	613b      	str	r3, [r7, #16]
   return(result);
 801067c:	693b      	ldr	r3, [r7, #16]
 801067e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010682:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	3308      	adds	r3, #8
 801068a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801068c:	623a      	str	r2, [r7, #32]
 801068e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010690:	69f9      	ldr	r1, [r7, #28]
 8010692:	6a3a      	ldr	r2, [r7, #32]
 8010694:	e841 2300 	strex	r3, r2, [r1]
 8010698:	61bb      	str	r3, [r7, #24]
   return(result);
 801069a:	69bb      	ldr	r3, [r7, #24]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d1e5      	bne.n	801066c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80106a0:	2300      	movs	r3, #0
}
 80106a2:	4618      	mov	r0, r3
 80106a4:	3758      	adds	r7, #88	@ 0x58
 80106a6:	46bd      	mov	sp, r7
 80106a8:	bd80      	pop	{r7, pc}
 80106aa:	bf00      	nop
 80106ac:	08010809 	.word	0x08010809
 80106b0:	08010931 	.word	0x08010931
 80106b4:	0801096f 	.word	0x0801096f

080106b8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80106b8:	b480      	push	{r7}
 80106ba:	b08f      	sub	sp, #60	@ 0x3c
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106c6:	6a3b      	ldr	r3, [r7, #32]
 80106c8:	e853 3f00 	ldrex	r3, [r3]
 80106cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80106ce:	69fb      	ldr	r3, [r7, #28]
 80106d0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80106d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	461a      	mov	r2, r3
 80106dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80106de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80106e0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80106e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80106e6:	e841 2300 	strex	r3, r2, [r1]
 80106ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80106ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d1e6      	bne.n	80106c0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	3308      	adds	r3, #8
 80106f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	e853 3f00 	ldrex	r3, [r3]
 8010700:	60bb      	str	r3, [r7, #8]
   return(result);
 8010702:	68bb      	ldr	r3, [r7, #8]
 8010704:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8010708:	633b      	str	r3, [r7, #48]	@ 0x30
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	3308      	adds	r3, #8
 8010710:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010712:	61ba      	str	r2, [r7, #24]
 8010714:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010716:	6979      	ldr	r1, [r7, #20]
 8010718:	69ba      	ldr	r2, [r7, #24]
 801071a:	e841 2300 	strex	r3, r2, [r1]
 801071e:	613b      	str	r3, [r7, #16]
   return(result);
 8010720:	693b      	ldr	r3, [r7, #16]
 8010722:	2b00      	cmp	r3, #0
 8010724:	d1e5      	bne.n	80106f2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	2220      	movs	r2, #32
 801072a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 801072e:	bf00      	nop
 8010730:	373c      	adds	r7, #60	@ 0x3c
 8010732:	46bd      	mov	sp, r7
 8010734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010738:	4770      	bx	lr
	...

0801073c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801073c:	b480      	push	{r7}
 801073e:	b095      	sub	sp, #84	@ 0x54
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801074a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801074c:	e853 3f00 	ldrex	r3, [r3]
 8010750:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010754:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010758:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	461a      	mov	r2, r3
 8010760:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010762:	643b      	str	r3, [r7, #64]	@ 0x40
 8010764:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010766:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010768:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801076a:	e841 2300 	strex	r3, r2, [r1]
 801076e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010772:	2b00      	cmp	r3, #0
 8010774:	d1e6      	bne.n	8010744 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	3308      	adds	r3, #8
 801077c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801077e:	6a3b      	ldr	r3, [r7, #32]
 8010780:	e853 3f00 	ldrex	r3, [r3]
 8010784:	61fb      	str	r3, [r7, #28]
   return(result);
 8010786:	69fa      	ldr	r2, [r7, #28]
 8010788:	4b1e      	ldr	r3, [pc, #120]	@ (8010804 <UART_EndRxTransfer+0xc8>)
 801078a:	4013      	ands	r3, r2
 801078c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	3308      	adds	r3, #8
 8010794:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010796:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010798:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801079a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801079c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801079e:	e841 2300 	strex	r3, r2, [r1]
 80107a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80107a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d1e5      	bne.n	8010776 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80107ae:	2b01      	cmp	r3, #1
 80107b0:	d118      	bne.n	80107e4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	e853 3f00 	ldrex	r3, [r3]
 80107be:	60bb      	str	r3, [r7, #8]
   return(result);
 80107c0:	68bb      	ldr	r3, [r7, #8]
 80107c2:	f023 0310 	bic.w	r3, r3, #16
 80107c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	461a      	mov	r2, r3
 80107ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80107d0:	61bb      	str	r3, [r7, #24]
 80107d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107d4:	6979      	ldr	r1, [r7, #20]
 80107d6:	69ba      	ldr	r2, [r7, #24]
 80107d8:	e841 2300 	strex	r3, r2, [r1]
 80107dc:	613b      	str	r3, [r7, #16]
   return(result);
 80107de:	693b      	ldr	r3, [r7, #16]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d1e6      	bne.n	80107b2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	2220      	movs	r2, #32
 80107e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	2200      	movs	r2, #0
 80107f0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	2200      	movs	r2, #0
 80107f6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80107f8:	bf00      	nop
 80107fa:	3754      	adds	r7, #84	@ 0x54
 80107fc:	46bd      	mov	sp, r7
 80107fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010802:	4770      	bx	lr
 8010804:	effffffe 	.word	0xeffffffe

08010808 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010808:	b580      	push	{r7, lr}
 801080a:	b09c      	sub	sp, #112	@ 0x70
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010814:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	69db      	ldr	r3, [r3, #28]
 801081a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801081e:	d071      	beq.n	8010904 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8010820:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010822:	2200      	movs	r2, #0
 8010824:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010828:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801082e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010830:	e853 3f00 	ldrex	r3, [r3]
 8010834:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010836:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010838:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801083c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801083e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	461a      	mov	r2, r3
 8010844:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010846:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010848:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801084a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801084c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801084e:	e841 2300 	strex	r3, r2, [r1]
 8010852:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010854:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010856:	2b00      	cmp	r3, #0
 8010858:	d1e6      	bne.n	8010828 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801085a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	3308      	adds	r3, #8
 8010860:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010864:	e853 3f00 	ldrex	r3, [r3]
 8010868:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801086a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801086c:	f023 0301 	bic.w	r3, r3, #1
 8010870:	667b      	str	r3, [r7, #100]	@ 0x64
 8010872:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	3308      	adds	r3, #8
 8010878:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801087a:	647a      	str	r2, [r7, #68]	@ 0x44
 801087c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801087e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010880:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010882:	e841 2300 	strex	r3, r2, [r1]
 8010886:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801088a:	2b00      	cmp	r3, #0
 801088c:	d1e5      	bne.n	801085a <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801088e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	3308      	adds	r3, #8
 8010894:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010898:	e853 3f00 	ldrex	r3, [r3]
 801089c:	623b      	str	r3, [r7, #32]
   return(result);
 801089e:	6a3b      	ldr	r3, [r7, #32]
 80108a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80108a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80108a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	3308      	adds	r3, #8
 80108ac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80108ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80108b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80108b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80108b6:	e841 2300 	strex	r3, r2, [r1]
 80108ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80108bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d1e5      	bne.n	801088e <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80108c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80108c4:	2220      	movs	r2, #32
 80108c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80108ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80108cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80108ce:	2b01      	cmp	r3, #1
 80108d0:	d118      	bne.n	8010904 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80108d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108d8:	693b      	ldr	r3, [r7, #16]
 80108da:	e853 3f00 	ldrex	r3, [r3]
 80108de:	60fb      	str	r3, [r7, #12]
   return(result);
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	f023 0310 	bic.w	r3, r3, #16
 80108e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80108e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	461a      	mov	r2, r3
 80108ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80108f0:	61fb      	str	r3, [r7, #28]
 80108f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108f4:	69b9      	ldr	r1, [r7, #24]
 80108f6:	69fa      	ldr	r2, [r7, #28]
 80108f8:	e841 2300 	strex	r3, r2, [r1]
 80108fc:	617b      	str	r3, [r7, #20]
   return(result);
 80108fe:	697b      	ldr	r3, [r7, #20]
 8010900:	2b00      	cmp	r3, #0
 8010902:	d1e6      	bne.n	80108d2 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010904:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010906:	2200      	movs	r2, #0
 8010908:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801090a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801090c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801090e:	2b01      	cmp	r3, #1
 8010910:	d107      	bne.n	8010922 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010912:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010914:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010918:	4619      	mov	r1, r3
 801091a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801091c:	f7fe fcd2 	bl	800f2c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010920:	e002      	b.n	8010928 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8010922:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010924:	f7f1 f9be 	bl	8001ca4 <HAL_UART_RxCpltCallback>
}
 8010928:	bf00      	nop
 801092a:	3770      	adds	r7, #112	@ 0x70
 801092c:	46bd      	mov	sp, r7
 801092e:	bd80      	pop	{r7, pc}

08010930 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010930:	b580      	push	{r7, lr}
 8010932:	b084      	sub	sp, #16
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801093c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	2201      	movs	r2, #1
 8010942:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010948:	2b01      	cmp	r3, #1
 801094a:	d109      	bne.n	8010960 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010952:	085b      	lsrs	r3, r3, #1
 8010954:	b29b      	uxth	r3, r3
 8010956:	4619      	mov	r1, r3
 8010958:	68f8      	ldr	r0, [r7, #12]
 801095a:	f7fe fcb3 	bl	800f2c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801095e:	e002      	b.n	8010966 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8010960:	68f8      	ldr	r0, [r7, #12]
 8010962:	f7fe fc91 	bl	800f288 <HAL_UART_RxHalfCpltCallback>
}
 8010966:	bf00      	nop
 8010968:	3710      	adds	r7, #16
 801096a:	46bd      	mov	sp, r7
 801096c:	bd80      	pop	{r7, pc}

0801096e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801096e:	b580      	push	{r7, lr}
 8010970:	b086      	sub	sp, #24
 8010972:	af00      	add	r7, sp, #0
 8010974:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801097a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801097c:	697b      	ldr	r3, [r7, #20]
 801097e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010982:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010984:	697b      	ldr	r3, [r7, #20]
 8010986:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801098a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801098c:	697b      	ldr	r3, [r7, #20]
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	689b      	ldr	r3, [r3, #8]
 8010992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010996:	2b80      	cmp	r3, #128	@ 0x80
 8010998:	d109      	bne.n	80109ae <UART_DMAError+0x40>
 801099a:	693b      	ldr	r3, [r7, #16]
 801099c:	2b21      	cmp	r3, #33	@ 0x21
 801099e:	d106      	bne.n	80109ae <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80109a0:	697b      	ldr	r3, [r7, #20]
 80109a2:	2200      	movs	r2, #0
 80109a4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80109a8:	6978      	ldr	r0, [r7, #20]
 80109aa:	f7ff fe85 	bl	80106b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80109ae:	697b      	ldr	r3, [r7, #20]
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	689b      	ldr	r3, [r3, #8]
 80109b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80109b8:	2b40      	cmp	r3, #64	@ 0x40
 80109ba:	d109      	bne.n	80109d0 <UART_DMAError+0x62>
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	2b22      	cmp	r3, #34	@ 0x22
 80109c0:	d106      	bne.n	80109d0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80109c2:	697b      	ldr	r3, [r7, #20]
 80109c4:	2200      	movs	r2, #0
 80109c6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80109ca:	6978      	ldr	r0, [r7, #20]
 80109cc:	f7ff feb6 	bl	801073c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80109d0:	697b      	ldr	r3, [r7, #20]
 80109d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80109d6:	f043 0210 	orr.w	r2, r3, #16
 80109da:	697b      	ldr	r3, [r7, #20]
 80109dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80109e0:	6978      	ldr	r0, [r7, #20]
 80109e2:	f7fe fc5b 	bl	800f29c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80109e6:	bf00      	nop
 80109e8:	3718      	adds	r7, #24
 80109ea:	46bd      	mov	sp, r7
 80109ec:	bd80      	pop	{r7, pc}

080109ee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80109ee:	b580      	push	{r7, lr}
 80109f0:	b084      	sub	sp, #16
 80109f2:	af00      	add	r7, sp, #0
 80109f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80109fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	2200      	movs	r2, #0
 8010a00:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	2200      	movs	r2, #0
 8010a08:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010a0c:	68f8      	ldr	r0, [r7, #12]
 8010a0e:	f7fe fc45 	bl	800f29c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010a12:	bf00      	nop
 8010a14:	3710      	adds	r7, #16
 8010a16:	46bd      	mov	sp, r7
 8010a18:	bd80      	pop	{r7, pc}

08010a1a <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8010a1a:	b580      	push	{r7, lr}
 8010a1c:	b084      	sub	sp, #16
 8010a1e:	af00      	add	r7, sp, #0
 8010a20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a26:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010a2c:	2200      	movs	r2, #0
 8010a2e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d005      	beq.n	8010a46 <UART_DMATxAbortCallback+0x2c>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010a40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d12b      	bne.n	8010a9e <UART_DMATxAbortCallback+0x84>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	2200      	movs	r2, #0
 8010a4a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	2200      	movs	r2, #0
 8010a52:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	2200      	movs	r2, #0
 8010a5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	220f      	movs	r2, #15
 8010a64:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010a6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010a6e:	d107      	bne.n	8010a80 <UART_DMATxAbortCallback+0x66>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	699a      	ldr	r2, [r3, #24]
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	f042 0210 	orr.w	r2, r2, #16
 8010a7e:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	2220      	movs	r2, #32
 8010a84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	2220      	movs	r2, #32
 8010a8c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	2200      	movs	r2, #0
 8010a94:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8010a96:	68f8      	ldr	r0, [r7, #12]
 8010a98:	f7fe fc0a 	bl	800f2b0 <HAL_UART_AbortCpltCallback>
 8010a9c:	e000      	b.n	8010aa0 <UART_DMATxAbortCallback+0x86>
      return;
 8010a9e:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010aa0:	3710      	adds	r7, #16
 8010aa2:	46bd      	mov	sp, r7
 8010aa4:	bd80      	pop	{r7, pc}

08010aa6 <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8010aa6:	b580      	push	{r7, lr}
 8010aa8:	b084      	sub	sp, #16
 8010aaa:	af00      	add	r7, sp, #0
 8010aac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010ab2:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010aba:	2200      	movs	r2, #0
 8010abc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d004      	beq.n	8010ad0 <UART_DMARxAbortCallback+0x2a>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010aca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d126      	bne.n	8010b1e <UART_DMARxAbortCallback+0x78>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	2200      	movs	r2, #0
 8010adc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	2200      	movs	r2, #0
 8010ae4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	220f      	movs	r2, #15
 8010aee:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	699a      	ldr	r2, [r3, #24]
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	f042 0208 	orr.w	r2, r2, #8
 8010afe:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	2220      	movs	r2, #32
 8010b04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	2220      	movs	r2, #32
 8010b0c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	2200      	movs	r2, #0
 8010b14:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8010b16:	68f8      	ldr	r0, [r7, #12]
 8010b18:	f7fe fbca 	bl	800f2b0 <HAL_UART_AbortCpltCallback>
 8010b1c:	e000      	b.n	8010b20 <UART_DMARxAbortCallback+0x7a>
      return;
 8010b1e:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010b20:	3710      	adds	r7, #16
 8010b22:	46bd      	mov	sp, r7
 8010b24:	bd80      	pop	{r7, pc}

08010b26 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8010b26:	b480      	push	{r7}
 8010b28:	b08f      	sub	sp, #60	@ 0x3c
 8010b2a:	af00      	add	r7, sp, #0
 8010b2c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010b34:	2b21      	cmp	r3, #33	@ 0x21
 8010b36:	d14c      	bne.n	8010bd2 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010b3e:	b29b      	uxth	r3, r3
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d132      	bne.n	8010baa <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b4a:	6a3b      	ldr	r3, [r7, #32]
 8010b4c:	e853 3f00 	ldrex	r3, [r3]
 8010b50:	61fb      	str	r3, [r7, #28]
   return(result);
 8010b52:	69fb      	ldr	r3, [r7, #28]
 8010b54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010b58:	637b      	str	r3, [r7, #52]	@ 0x34
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	461a      	mov	r2, r3
 8010b60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010b64:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010b68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010b6a:	e841 2300 	strex	r3, r2, [r1]
 8010b6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d1e6      	bne.n	8010b44 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	e853 3f00 	ldrex	r3, [r3]
 8010b82:	60bb      	str	r3, [r7, #8]
   return(result);
 8010b84:	68bb      	ldr	r3, [r7, #8]
 8010b86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010b8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	461a      	mov	r2, r3
 8010b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b94:	61bb      	str	r3, [r7, #24]
 8010b96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b98:	6979      	ldr	r1, [r7, #20]
 8010b9a:	69ba      	ldr	r2, [r7, #24]
 8010b9c:	e841 2300 	strex	r3, r2, [r1]
 8010ba0:	613b      	str	r3, [r7, #16]
   return(result);
 8010ba2:	693b      	ldr	r3, [r7, #16]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d1e6      	bne.n	8010b76 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8010ba8:	e013      	b.n	8010bd2 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010bae:	781a      	ldrb	r2, [r3, #0]
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010bba:	1c5a      	adds	r2, r3, #1
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010bc6:	b29b      	uxth	r3, r3
 8010bc8:	3b01      	subs	r3, #1
 8010bca:	b29a      	uxth	r2, r3
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8010bd2:	bf00      	nop
 8010bd4:	373c      	adds	r7, #60	@ 0x3c
 8010bd6:	46bd      	mov	sp, r7
 8010bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bdc:	4770      	bx	lr

08010bde <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8010bde:	b480      	push	{r7}
 8010be0:	b091      	sub	sp, #68	@ 0x44
 8010be2:	af00      	add	r7, sp, #0
 8010be4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010bec:	2b21      	cmp	r3, #33	@ 0x21
 8010bee:	d151      	bne.n	8010c94 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010bf6:	b29b      	uxth	r3, r3
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d132      	bne.n	8010c62 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c04:	e853 3f00 	ldrex	r3, [r3]
 8010c08:	623b      	str	r3, [r7, #32]
   return(result);
 8010c0a:	6a3b      	ldr	r3, [r7, #32]
 8010c0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010c10:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	461a      	mov	r2, r3
 8010c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c1a:	633b      	str	r3, [r7, #48]	@ 0x30
 8010c1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010c20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010c22:	e841 2300 	strex	r3, r2, [r1]
 8010c26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d1e6      	bne.n	8010bfc <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c34:	693b      	ldr	r3, [r7, #16]
 8010c36:	e853 3f00 	ldrex	r3, [r3]
 8010c3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c42:	637b      	str	r3, [r7, #52]	@ 0x34
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	461a      	mov	r2, r3
 8010c4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c4c:	61fb      	str	r3, [r7, #28]
 8010c4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c50:	69b9      	ldr	r1, [r7, #24]
 8010c52:	69fa      	ldr	r2, [r7, #28]
 8010c54:	e841 2300 	strex	r3, r2, [r1]
 8010c58:	617b      	str	r3, [r7, #20]
   return(result);
 8010c5a:	697b      	ldr	r3, [r7, #20]
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d1e6      	bne.n	8010c2e <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8010c60:	e018      	b.n	8010c94 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8010c68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c6a:	881b      	ldrh	r3, [r3, #0]
 8010c6c:	461a      	mov	r2, r3
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010c76:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010c7c:	1c9a      	adds	r2, r3, #2
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010c88:	b29b      	uxth	r3, r3
 8010c8a:	3b01      	subs	r3, #1
 8010c8c:	b29a      	uxth	r2, r3
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8010c94:	bf00      	nop
 8010c96:	3744      	adds	r7, #68	@ 0x44
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c9e:	4770      	bx	lr

08010ca0 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010ca0:	b480      	push	{r7}
 8010ca2:	b091      	sub	sp, #68	@ 0x44
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010cae:	2b21      	cmp	r3, #33	@ 0x21
 8010cb0:	d160      	bne.n	8010d74 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010cb8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8010cba:	e057      	b.n	8010d6c <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010cc2:	b29b      	uxth	r3, r3
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d133      	bne.n	8010d30 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	3308      	adds	r3, #8
 8010cce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cd2:	e853 3f00 	ldrex	r3, [r3]
 8010cd6:	623b      	str	r3, [r7, #32]
   return(result);
 8010cd8:	6a3b      	ldr	r3, [r7, #32]
 8010cda:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8010cde:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	3308      	adds	r3, #8
 8010ce6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010ce8:	633a      	str	r2, [r7, #48]	@ 0x30
 8010cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010cee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010cf0:	e841 2300 	strex	r3, r2, [r1]
 8010cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d1e5      	bne.n	8010cc8 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d02:	693b      	ldr	r3, [r7, #16]
 8010d04:	e853 3f00 	ldrex	r3, [r3]
 8010d08:	60fb      	str	r3, [r7, #12]
   return(result);
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010d10:	637b      	str	r3, [r7, #52]	@ 0x34
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	461a      	mov	r2, r3
 8010d18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d1a:	61fb      	str	r3, [r7, #28]
 8010d1c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d1e:	69b9      	ldr	r1, [r7, #24]
 8010d20:	69fa      	ldr	r2, [r7, #28]
 8010d22:	e841 2300 	strex	r3, r2, [r1]
 8010d26:	617b      	str	r3, [r7, #20]
   return(result);
 8010d28:	697b      	ldr	r3, [r7, #20]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d1e6      	bne.n	8010cfc <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8010d2e:	e021      	b.n	8010d74 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	69db      	ldr	r3, [r3, #28]
 8010d36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d013      	beq.n	8010d66 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010d42:	781a      	ldrb	r2, [r3, #0]
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010d4e:	1c5a      	adds	r2, r3, #1
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010d5a:	b29b      	uxth	r3, r3
 8010d5c:	3b01      	subs	r3, #1
 8010d5e:	b29a      	uxth	r2, r3
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8010d66:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010d68:	3b01      	subs	r3, #1
 8010d6a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8010d6c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d1a4      	bne.n	8010cbc <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8010d72:	e7ff      	b.n	8010d74 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8010d74:	bf00      	nop
 8010d76:	3744      	adds	r7, #68	@ 0x44
 8010d78:	46bd      	mov	sp, r7
 8010d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d7e:	4770      	bx	lr

08010d80 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010d80:	b480      	push	{r7}
 8010d82:	b091      	sub	sp, #68	@ 0x44
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010d8e:	2b21      	cmp	r3, #33	@ 0x21
 8010d90:	d165      	bne.n	8010e5e <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010d98:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8010d9a:	e05c      	b.n	8010e56 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010da2:	b29b      	uxth	r3, r3
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d133      	bne.n	8010e10 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	3308      	adds	r3, #8
 8010dae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010db0:	6a3b      	ldr	r3, [r7, #32]
 8010db2:	e853 3f00 	ldrex	r3, [r3]
 8010db6:	61fb      	str	r3, [r7, #28]
   return(result);
 8010db8:	69fb      	ldr	r3, [r7, #28]
 8010dba:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8010dbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	3308      	adds	r3, #8
 8010dc6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010dc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010dca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dcc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010dce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010dd0:	e841 2300 	strex	r3, r2, [r1]
 8010dd4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d1e5      	bne.n	8010da8 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	e853 3f00 	ldrex	r3, [r3]
 8010de8:	60bb      	str	r3, [r7, #8]
   return(result);
 8010dea:	68bb      	ldr	r3, [r7, #8]
 8010dec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010df0:	633b      	str	r3, [r7, #48]	@ 0x30
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	461a      	mov	r2, r3
 8010df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010dfa:	61bb      	str	r3, [r7, #24]
 8010dfc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dfe:	6979      	ldr	r1, [r7, #20]
 8010e00:	69ba      	ldr	r2, [r7, #24]
 8010e02:	e841 2300 	strex	r3, r2, [r1]
 8010e06:	613b      	str	r3, [r7, #16]
   return(result);
 8010e08:	693b      	ldr	r3, [r7, #16]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d1e6      	bne.n	8010ddc <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8010e0e:	e026      	b.n	8010e5e <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	69db      	ldr	r3, [r3, #28]
 8010e16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d018      	beq.n	8010e50 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010e22:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8010e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e26:	881b      	ldrh	r3, [r3, #0]
 8010e28:	461a      	mov	r2, r3
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010e32:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010e38:	1c9a      	adds	r2, r3, #2
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010e44:	b29b      	uxth	r3, r3
 8010e46:	3b01      	subs	r3, #1
 8010e48:	b29a      	uxth	r2, r3
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8010e50:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010e52:	3b01      	subs	r3, #1
 8010e54:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8010e56:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d19f      	bne.n	8010d9c <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8010e5c:	e7ff      	b.n	8010e5e <UART_TxISR_16BIT_FIFOEN+0xde>
 8010e5e:	bf00      	nop
 8010e60:	3744      	adds	r7, #68	@ 0x44
 8010e62:	46bd      	mov	sp, r7
 8010e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e68:	4770      	bx	lr

08010e6a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010e6a:	b580      	push	{r7, lr}
 8010e6c:	b088      	sub	sp, #32
 8010e6e:	af00      	add	r7, sp, #0
 8010e70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	e853 3f00 	ldrex	r3, [r3]
 8010e7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8010e80:	68bb      	ldr	r3, [r7, #8]
 8010e82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010e86:	61fb      	str	r3, [r7, #28]
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	461a      	mov	r2, r3
 8010e8e:	69fb      	ldr	r3, [r7, #28]
 8010e90:	61bb      	str	r3, [r7, #24]
 8010e92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e94:	6979      	ldr	r1, [r7, #20]
 8010e96:	69ba      	ldr	r2, [r7, #24]
 8010e98:	e841 2300 	strex	r3, r2, [r1]
 8010e9c:	613b      	str	r3, [r7, #16]
   return(result);
 8010e9e:	693b      	ldr	r3, [r7, #16]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d1e6      	bne.n	8010e72 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	2220      	movs	r2, #32
 8010ea8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	2200      	movs	r2, #0
 8010eb0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010eb2:	6878      	ldr	r0, [r7, #4]
 8010eb4:	f7fe f9de 	bl	800f274 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010eb8:	bf00      	nop
 8010eba:	3720      	adds	r7, #32
 8010ebc:	46bd      	mov	sp, r7
 8010ebe:	bd80      	pop	{r7, pc}

08010ec0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b09c      	sub	sp, #112	@ 0x70
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010ece:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010ed8:	2b22      	cmp	r3, #34	@ 0x22
 8010eda:	f040 80be 	bne.w	801105a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ee4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010ee8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8010eec:	b2d9      	uxtb	r1, r3
 8010eee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8010ef2:	b2da      	uxtb	r2, r3
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010ef8:	400a      	ands	r2, r1
 8010efa:	b2d2      	uxtb	r2, r2
 8010efc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010f02:	1c5a      	adds	r2, r3, #1
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010f0e:	b29b      	uxth	r3, r3
 8010f10:	3b01      	subs	r3, #1
 8010f12:	b29a      	uxth	r2, r3
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010f20:	b29b      	uxth	r3, r3
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	f040 80a1 	bne.w	801106a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010f30:	e853 3f00 	ldrex	r3, [r3]
 8010f34:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010f36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010f38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010f3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	461a      	mov	r2, r3
 8010f44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010f46:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010f48:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f4a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010f4c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010f4e:	e841 2300 	strex	r3, r2, [r1]
 8010f52:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010f54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d1e6      	bne.n	8010f28 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	3308      	adds	r3, #8
 8010f60:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f64:	e853 3f00 	ldrex	r3, [r3]
 8010f68:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010f6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f6c:	f023 0301 	bic.w	r3, r3, #1
 8010f70:	667b      	str	r3, [r7, #100]	@ 0x64
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	3308      	adds	r3, #8
 8010f78:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010f7a:	647a      	str	r2, [r7, #68]	@ 0x44
 8010f7c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f7e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010f80:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010f82:	e841 2300 	strex	r3, r2, [r1]
 8010f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010f88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d1e5      	bne.n	8010f5a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	2220      	movs	r2, #32
 8010f92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	2200      	movs	r2, #0
 8010f9a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	4a33      	ldr	r2, [pc, #204]	@ (8011074 <UART_RxISR_8BIT+0x1b4>)
 8010fa8:	4293      	cmp	r3, r2
 8010faa:	d01f      	beq.n	8010fec <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	685b      	ldr	r3, [r3, #4]
 8010fb2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d018      	beq.n	8010fec <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fc2:	e853 3f00 	ldrex	r3, [r3]
 8010fc6:	623b      	str	r3, [r7, #32]
   return(result);
 8010fc8:	6a3b      	ldr	r3, [r7, #32]
 8010fca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8010fce:	663b      	str	r3, [r7, #96]	@ 0x60
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	461a      	mov	r2, r3
 8010fd6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010fd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8010fda:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fdc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010fde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010fe0:	e841 2300 	strex	r3, r2, [r1]
 8010fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d1e6      	bne.n	8010fba <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010ff0:	2b01      	cmp	r3, #1
 8010ff2:	d12e      	bne.n	8011052 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	2200      	movs	r2, #0
 8010ff8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011000:	693b      	ldr	r3, [r7, #16]
 8011002:	e853 3f00 	ldrex	r3, [r3]
 8011006:	60fb      	str	r3, [r7, #12]
   return(result);
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	f023 0310 	bic.w	r3, r3, #16
 801100e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	461a      	mov	r2, r3
 8011016:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011018:	61fb      	str	r3, [r7, #28]
 801101a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801101c:	69b9      	ldr	r1, [r7, #24]
 801101e:	69fa      	ldr	r2, [r7, #28]
 8011020:	e841 2300 	strex	r3, r2, [r1]
 8011024:	617b      	str	r3, [r7, #20]
   return(result);
 8011026:	697b      	ldr	r3, [r7, #20]
 8011028:	2b00      	cmp	r3, #0
 801102a:	d1e6      	bne.n	8010ffa <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	69db      	ldr	r3, [r3, #28]
 8011032:	f003 0310 	and.w	r3, r3, #16
 8011036:	2b10      	cmp	r3, #16
 8011038:	d103      	bne.n	8011042 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	2210      	movs	r2, #16
 8011040:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011048:	4619      	mov	r1, r3
 801104a:	6878      	ldr	r0, [r7, #4]
 801104c:	f7fe f93a 	bl	800f2c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011050:	e00b      	b.n	801106a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011052:	6878      	ldr	r0, [r7, #4]
 8011054:	f7f0 fe26 	bl	8001ca4 <HAL_UART_RxCpltCallback>
}
 8011058:	e007      	b.n	801106a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	699a      	ldr	r2, [r3, #24]
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	f042 0208 	orr.w	r2, r2, #8
 8011068:	619a      	str	r2, [r3, #24]
}
 801106a:	bf00      	nop
 801106c:	3770      	adds	r7, #112	@ 0x70
 801106e:	46bd      	mov	sp, r7
 8011070:	bd80      	pop	{r7, pc}
 8011072:	bf00      	nop
 8011074:	58000c00 	.word	0x58000c00

08011078 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8011078:	b580      	push	{r7, lr}
 801107a:	b09c      	sub	sp, #112	@ 0x70
 801107c:	af00      	add	r7, sp, #0
 801107e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011086:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011090:	2b22      	cmp	r3, #34	@ 0x22
 8011092:	f040 80be 	bne.w	8011212 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801109c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80110a4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80110a6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80110aa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80110ae:	4013      	ands	r3, r2
 80110b0:	b29a      	uxth	r2, r3
 80110b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80110b4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80110ba:	1c9a      	adds	r2, r3, #2
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80110c6:	b29b      	uxth	r3, r3
 80110c8:	3b01      	subs	r3, #1
 80110ca:	b29a      	uxth	r2, r3
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80110d8:	b29b      	uxth	r3, r3
 80110da:	2b00      	cmp	r3, #0
 80110dc:	f040 80a1 	bne.w	8011222 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80110e8:	e853 3f00 	ldrex	r3, [r3]
 80110ec:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80110ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80110f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80110f4:	667b      	str	r3, [r7, #100]	@ 0x64
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	461a      	mov	r2, r3
 80110fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80110fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8011100:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011102:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011104:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011106:	e841 2300 	strex	r3, r2, [r1]
 801110a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801110c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801110e:	2b00      	cmp	r3, #0
 8011110:	d1e6      	bne.n	80110e0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	3308      	adds	r3, #8
 8011118:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801111a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801111c:	e853 3f00 	ldrex	r3, [r3]
 8011120:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011124:	f023 0301 	bic.w	r3, r3, #1
 8011128:	663b      	str	r3, [r7, #96]	@ 0x60
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	3308      	adds	r3, #8
 8011130:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011132:	643a      	str	r2, [r7, #64]	@ 0x40
 8011134:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011136:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011138:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801113a:	e841 2300 	strex	r3, r2, [r1]
 801113e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011142:	2b00      	cmp	r3, #0
 8011144:	d1e5      	bne.n	8011112 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	2220      	movs	r2, #32
 801114a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	2200      	movs	r2, #0
 8011152:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	2200      	movs	r2, #0
 8011158:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	4a33      	ldr	r2, [pc, #204]	@ (801122c <UART_RxISR_16BIT+0x1b4>)
 8011160:	4293      	cmp	r3, r2
 8011162:	d01f      	beq.n	80111a4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	685b      	ldr	r3, [r3, #4]
 801116a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801116e:	2b00      	cmp	r3, #0
 8011170:	d018      	beq.n	80111a4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011178:	6a3b      	ldr	r3, [r7, #32]
 801117a:	e853 3f00 	ldrex	r3, [r3]
 801117e:	61fb      	str	r3, [r7, #28]
   return(result);
 8011180:	69fb      	ldr	r3, [r7, #28]
 8011182:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8011186:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	461a      	mov	r2, r3
 801118e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011190:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011192:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011194:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011196:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011198:	e841 2300 	strex	r3, r2, [r1]
 801119c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801119e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d1e6      	bne.n	8011172 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80111a8:	2b01      	cmp	r3, #1
 80111aa:	d12e      	bne.n	801120a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	2200      	movs	r2, #0
 80111b0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	e853 3f00 	ldrex	r3, [r3]
 80111be:	60bb      	str	r3, [r7, #8]
   return(result);
 80111c0:	68bb      	ldr	r3, [r7, #8]
 80111c2:	f023 0310 	bic.w	r3, r3, #16
 80111c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	461a      	mov	r2, r3
 80111ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80111d0:	61bb      	str	r3, [r7, #24]
 80111d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111d4:	6979      	ldr	r1, [r7, #20]
 80111d6:	69ba      	ldr	r2, [r7, #24]
 80111d8:	e841 2300 	strex	r3, r2, [r1]
 80111dc:	613b      	str	r3, [r7, #16]
   return(result);
 80111de:	693b      	ldr	r3, [r7, #16]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d1e6      	bne.n	80111b2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	69db      	ldr	r3, [r3, #28]
 80111ea:	f003 0310 	and.w	r3, r3, #16
 80111ee:	2b10      	cmp	r3, #16
 80111f0:	d103      	bne.n	80111fa <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	2210      	movs	r2, #16
 80111f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011200:	4619      	mov	r1, r3
 8011202:	6878      	ldr	r0, [r7, #4]
 8011204:	f7fe f85e 	bl	800f2c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011208:	e00b      	b.n	8011222 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801120a:	6878      	ldr	r0, [r7, #4]
 801120c:	f7f0 fd4a 	bl	8001ca4 <HAL_UART_RxCpltCallback>
}
 8011210:	e007      	b.n	8011222 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	699a      	ldr	r2, [r3, #24]
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	f042 0208 	orr.w	r2, r2, #8
 8011220:	619a      	str	r2, [r3, #24]
}
 8011222:	bf00      	nop
 8011224:	3770      	adds	r7, #112	@ 0x70
 8011226:	46bd      	mov	sp, r7
 8011228:	bd80      	pop	{r7, pc}
 801122a:	bf00      	nop
 801122c:	58000c00 	.word	0x58000c00

08011230 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011230:	b580      	push	{r7, lr}
 8011232:	b0ac      	sub	sp, #176	@ 0xb0
 8011234:	af00      	add	r7, sp, #0
 8011236:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801123e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	69db      	ldr	r3, [r3, #28]
 8011248:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	689b      	ldr	r3, [r3, #8]
 801125c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011266:	2b22      	cmp	r3, #34	@ 0x22
 8011268:	f040 8180 	bne.w	801156c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011272:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011276:	e123      	b.n	80114c0 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801127e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011282:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8011286:	b2d9      	uxtb	r1, r3
 8011288:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 801128c:	b2da      	uxtb	r2, r3
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011292:	400a      	ands	r2, r1
 8011294:	b2d2      	uxtb	r2, r2
 8011296:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801129c:	1c5a      	adds	r2, r3, #1
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80112a8:	b29b      	uxth	r3, r3
 80112aa:	3b01      	subs	r3, #1
 80112ac:	b29a      	uxth	r2, r3
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	69db      	ldr	r3, [r3, #28]
 80112ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80112be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80112c2:	f003 0307 	and.w	r3, r3, #7
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d053      	beq.n	8011372 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80112ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80112ce:	f003 0301 	and.w	r3, r3, #1
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d011      	beq.n	80112fa <UART_RxISR_8BIT_FIFOEN+0xca>
 80112d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80112da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d00b      	beq.n	80112fa <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	2201      	movs	r2, #1
 80112e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80112f0:	f043 0201 	orr.w	r2, r3, #1
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80112fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80112fe:	f003 0302 	and.w	r3, r3, #2
 8011302:	2b00      	cmp	r3, #0
 8011304:	d011      	beq.n	801132a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8011306:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801130a:	f003 0301 	and.w	r3, r3, #1
 801130e:	2b00      	cmp	r3, #0
 8011310:	d00b      	beq.n	801132a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	2202      	movs	r2, #2
 8011318:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011320:	f043 0204 	orr.w	r2, r3, #4
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801132a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801132e:	f003 0304 	and.w	r3, r3, #4
 8011332:	2b00      	cmp	r3, #0
 8011334:	d011      	beq.n	801135a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8011336:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801133a:	f003 0301 	and.w	r3, r3, #1
 801133e:	2b00      	cmp	r3, #0
 8011340:	d00b      	beq.n	801135a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	2204      	movs	r2, #4
 8011348:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011350:	f043 0202 	orr.w	r2, r3, #2
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011360:	2b00      	cmp	r3, #0
 8011362:	d006      	beq.n	8011372 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011364:	6878      	ldr	r0, [r7, #4]
 8011366:	f7fd ff99 	bl	800f29c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	2200      	movs	r2, #0
 801136e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011378:	b29b      	uxth	r3, r3
 801137a:	2b00      	cmp	r3, #0
 801137c:	f040 80a0 	bne.w	80114c0 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011386:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011388:	e853 3f00 	ldrex	r3, [r3]
 801138c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 801138e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011390:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011394:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	461a      	mov	r2, r3
 801139e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80113a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80113a4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113a6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80113a8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80113aa:	e841 2300 	strex	r3, r2, [r1]
 80113ae:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80113b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d1e4      	bne.n	8011380 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	3308      	adds	r3, #8
 80113bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80113c0:	e853 3f00 	ldrex	r3, [r3]
 80113c4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80113c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80113c8:	4b6e      	ldr	r3, [pc, #440]	@ (8011584 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80113ca:	4013      	ands	r3, r2
 80113cc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	3308      	adds	r3, #8
 80113d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80113da:	66ba      	str	r2, [r7, #104]	@ 0x68
 80113dc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113de:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80113e0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80113e2:	e841 2300 	strex	r3, r2, [r1]
 80113e6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80113e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d1e3      	bne.n	80113b6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	2220      	movs	r2, #32
 80113f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	2200      	movs	r2, #0
 80113fa:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	2200      	movs	r2, #0
 8011400:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	4a60      	ldr	r2, [pc, #384]	@ (8011588 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8011408:	4293      	cmp	r3, r2
 801140a:	d021      	beq.n	8011450 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	685b      	ldr	r3, [r3, #4]
 8011412:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011416:	2b00      	cmp	r3, #0
 8011418:	d01a      	beq.n	8011450 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011420:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011422:	e853 3f00 	ldrex	r3, [r3]
 8011426:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8011428:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801142a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801142e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	461a      	mov	r2, r3
 8011438:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801143c:	657b      	str	r3, [r7, #84]	@ 0x54
 801143e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011440:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011442:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011444:	e841 2300 	strex	r3, r2, [r1]
 8011448:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801144a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801144c:	2b00      	cmp	r3, #0
 801144e:	d1e4      	bne.n	801141a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011454:	2b01      	cmp	r3, #1
 8011456:	d130      	bne.n	80114ba <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	2200      	movs	r2, #0
 801145c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011466:	e853 3f00 	ldrex	r3, [r3]
 801146a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801146c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801146e:	f023 0310 	bic.w	r3, r3, #16
 8011472:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	461a      	mov	r2, r3
 801147c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011480:	643b      	str	r3, [r7, #64]	@ 0x40
 8011482:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011484:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011486:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011488:	e841 2300 	strex	r3, r2, [r1]
 801148c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801148e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011490:	2b00      	cmp	r3, #0
 8011492:	d1e4      	bne.n	801145e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	69db      	ldr	r3, [r3, #28]
 801149a:	f003 0310 	and.w	r3, r3, #16
 801149e:	2b10      	cmp	r3, #16
 80114a0:	d103      	bne.n	80114aa <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	2210      	movs	r2, #16
 80114a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80114b0:	4619      	mov	r1, r3
 80114b2:	6878      	ldr	r0, [r7, #4]
 80114b4:	f7fd ff06 	bl	800f2c4 <HAL_UARTEx_RxEventCallback>
 80114b8:	e002      	b.n	80114c0 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80114ba:	6878      	ldr	r0, [r7, #4]
 80114bc:	f7f0 fbf2 	bl	8001ca4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80114c0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d006      	beq.n	80114d6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80114c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80114cc:	f003 0320 	and.w	r3, r3, #32
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	f47f aed1 	bne.w	8011278 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80114dc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80114e0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d049      	beq.n	801157c <UART_RxISR_8BIT_FIFOEN+0x34c>
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80114ee:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80114f2:	429a      	cmp	r2, r3
 80114f4:	d242      	bcs.n	801157c <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	3308      	adds	r3, #8
 80114fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114fe:	6a3b      	ldr	r3, [r7, #32]
 8011500:	e853 3f00 	ldrex	r3, [r3]
 8011504:	61fb      	str	r3, [r7, #28]
   return(result);
 8011506:	69fb      	ldr	r3, [r7, #28]
 8011508:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801150c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	3308      	adds	r3, #8
 8011516:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801151a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801151c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801151e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011520:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011522:	e841 2300 	strex	r3, r2, [r1]
 8011526:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801152a:	2b00      	cmp	r3, #0
 801152c:	d1e3      	bne.n	80114f6 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	4a16      	ldr	r2, [pc, #88]	@ (801158c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8011532:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	e853 3f00 	ldrex	r3, [r3]
 8011540:	60bb      	str	r3, [r7, #8]
   return(result);
 8011542:	68bb      	ldr	r3, [r7, #8]
 8011544:	f043 0320 	orr.w	r3, r3, #32
 8011548:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	461a      	mov	r2, r3
 8011552:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8011556:	61bb      	str	r3, [r7, #24]
 8011558:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801155a:	6979      	ldr	r1, [r7, #20]
 801155c:	69ba      	ldr	r2, [r7, #24]
 801155e:	e841 2300 	strex	r3, r2, [r1]
 8011562:	613b      	str	r3, [r7, #16]
   return(result);
 8011564:	693b      	ldr	r3, [r7, #16]
 8011566:	2b00      	cmp	r3, #0
 8011568:	d1e4      	bne.n	8011534 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801156a:	e007      	b.n	801157c <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	699a      	ldr	r2, [r3, #24]
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	f042 0208 	orr.w	r2, r2, #8
 801157a:	619a      	str	r2, [r3, #24]
}
 801157c:	bf00      	nop
 801157e:	37b0      	adds	r7, #176	@ 0xb0
 8011580:	46bd      	mov	sp, r7
 8011582:	bd80      	pop	{r7, pc}
 8011584:	effffffe 	.word	0xeffffffe
 8011588:	58000c00 	.word	0x58000c00
 801158c:	08010ec1 	.word	0x08010ec1

08011590 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011590:	b580      	push	{r7, lr}
 8011592:	b0ae      	sub	sp, #184	@ 0xb8
 8011594:	af00      	add	r7, sp, #0
 8011596:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801159e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	69db      	ldr	r3, [r3, #28]
 80115a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	689b      	ldr	r3, [r3, #8]
 80115bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80115c6:	2b22      	cmp	r3, #34	@ 0x22
 80115c8:	f040 8184 	bne.w	80118d4 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80115d2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80115d6:	e127      	b.n	8011828 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115de:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80115e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80115ea:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80115ee:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80115f2:	4013      	ands	r3, r2
 80115f4:	b29a      	uxth	r2, r3
 80115f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80115fa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011600:	1c9a      	adds	r2, r3, #2
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801160c:	b29b      	uxth	r3, r3
 801160e:	3b01      	subs	r3, #1
 8011610:	b29a      	uxth	r2, r3
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	69db      	ldr	r3, [r3, #28]
 801161e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8011622:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011626:	f003 0307 	and.w	r3, r3, #7
 801162a:	2b00      	cmp	r3, #0
 801162c:	d053      	beq.n	80116d6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801162e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011632:	f003 0301 	and.w	r3, r3, #1
 8011636:	2b00      	cmp	r3, #0
 8011638:	d011      	beq.n	801165e <UART_RxISR_16BIT_FIFOEN+0xce>
 801163a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801163e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011642:	2b00      	cmp	r3, #0
 8011644:	d00b      	beq.n	801165e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	2201      	movs	r2, #1
 801164c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011654:	f043 0201 	orr.w	r2, r3, #1
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801165e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011662:	f003 0302 	and.w	r3, r3, #2
 8011666:	2b00      	cmp	r3, #0
 8011668:	d011      	beq.n	801168e <UART_RxISR_16BIT_FIFOEN+0xfe>
 801166a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801166e:	f003 0301 	and.w	r3, r3, #1
 8011672:	2b00      	cmp	r3, #0
 8011674:	d00b      	beq.n	801168e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	2202      	movs	r2, #2
 801167c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011684:	f043 0204 	orr.w	r2, r3, #4
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801168e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011692:	f003 0304 	and.w	r3, r3, #4
 8011696:	2b00      	cmp	r3, #0
 8011698:	d011      	beq.n	80116be <UART_RxISR_16BIT_FIFOEN+0x12e>
 801169a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801169e:	f003 0301 	and.w	r3, r3, #1
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d00b      	beq.n	80116be <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	2204      	movs	r2, #4
 80116ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80116b4:	f043 0202 	orr.w	r2, r3, #2
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d006      	beq.n	80116d6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80116c8:	6878      	ldr	r0, [r7, #4]
 80116ca:	f7fd fde7 	bl	800f29c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	2200      	movs	r2, #0
 80116d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80116dc:	b29b      	uxth	r3, r3
 80116de:	2b00      	cmp	r3, #0
 80116e0:	f040 80a2 	bne.w	8011828 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80116ec:	e853 3f00 	ldrex	r3, [r3]
 80116f0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80116f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80116f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80116f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	461a      	mov	r2, r3
 8011702:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011706:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801170a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801170c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801170e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8011712:	e841 2300 	strex	r3, r2, [r1]
 8011716:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8011718:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801171a:	2b00      	cmp	r3, #0
 801171c:	d1e2      	bne.n	80116e4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	3308      	adds	r3, #8
 8011724:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011726:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011728:	e853 3f00 	ldrex	r3, [r3]
 801172c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801172e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011730:	4b6e      	ldr	r3, [pc, #440]	@ (80118ec <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8011732:	4013      	ands	r3, r2
 8011734:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	3308      	adds	r3, #8
 801173e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8011742:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8011744:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011746:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8011748:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801174a:	e841 2300 	strex	r3, r2, [r1]
 801174e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8011750:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011752:	2b00      	cmp	r3, #0
 8011754:	d1e3      	bne.n	801171e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	2220      	movs	r2, #32
 801175a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	2200      	movs	r2, #0
 8011762:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	2200      	movs	r2, #0
 8011768:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	4a60      	ldr	r2, [pc, #384]	@ (80118f0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8011770:	4293      	cmp	r3, r2
 8011772:	d021      	beq.n	80117b8 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	685b      	ldr	r3, [r3, #4]
 801177a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801177e:	2b00      	cmp	r3, #0
 8011780:	d01a      	beq.n	80117b8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011788:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801178a:	e853 3f00 	ldrex	r3, [r3]
 801178e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8011790:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011792:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8011796:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	461a      	mov	r2, r3
 80117a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80117a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80117a6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80117aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80117ac:	e841 2300 	strex	r3, r2, [r1]
 80117b0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80117b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d1e4      	bne.n	8011782 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80117bc:	2b01      	cmp	r3, #1
 80117be:	d130      	bne.n	8011822 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	2200      	movs	r2, #0
 80117c4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117ce:	e853 3f00 	ldrex	r3, [r3]
 80117d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80117d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80117d6:	f023 0310 	bic.w	r3, r3, #16
 80117da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	461a      	mov	r2, r3
 80117e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80117e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80117ea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80117ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80117f0:	e841 2300 	strex	r3, r2, [r1]
 80117f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80117f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d1e4      	bne.n	80117c6 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	69db      	ldr	r3, [r3, #28]
 8011802:	f003 0310 	and.w	r3, r3, #16
 8011806:	2b10      	cmp	r3, #16
 8011808:	d103      	bne.n	8011812 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	2210      	movs	r2, #16
 8011810:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011818:	4619      	mov	r1, r3
 801181a:	6878      	ldr	r0, [r7, #4]
 801181c:	f7fd fd52 	bl	800f2c4 <HAL_UARTEx_RxEventCallback>
 8011820:	e002      	b.n	8011828 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8011822:	6878      	ldr	r0, [r7, #4]
 8011824:	f7f0 fa3e 	bl	8001ca4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011828:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 801182c:	2b00      	cmp	r3, #0
 801182e:	d006      	beq.n	801183e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8011830:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011834:	f003 0320 	and.w	r3, r3, #32
 8011838:	2b00      	cmp	r3, #0
 801183a:	f47f aecd 	bne.w	80115d8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011844:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8011848:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 801184c:	2b00      	cmp	r3, #0
 801184e:	d049      	beq.n	80118e4 <UART_RxISR_16BIT_FIFOEN+0x354>
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011856:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 801185a:	429a      	cmp	r2, r3
 801185c:	d242      	bcs.n	80118e4 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	3308      	adds	r3, #8
 8011864:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011868:	e853 3f00 	ldrex	r3, [r3]
 801186c:	623b      	str	r3, [r7, #32]
   return(result);
 801186e:	6a3b      	ldr	r3, [r7, #32]
 8011870:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011874:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	3308      	adds	r3, #8
 801187e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8011882:	633a      	str	r2, [r7, #48]	@ 0x30
 8011884:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011886:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011888:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801188a:	e841 2300 	strex	r3, r2, [r1]
 801188e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011892:	2b00      	cmp	r3, #0
 8011894:	d1e3      	bne.n	801185e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	4a16      	ldr	r2, [pc, #88]	@ (80118f4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801189a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118a2:	693b      	ldr	r3, [r7, #16]
 80118a4:	e853 3f00 	ldrex	r3, [r3]
 80118a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	f043 0320 	orr.w	r3, r3, #32
 80118b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	461a      	mov	r2, r3
 80118ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80118be:	61fb      	str	r3, [r7, #28]
 80118c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118c2:	69b9      	ldr	r1, [r7, #24]
 80118c4:	69fa      	ldr	r2, [r7, #28]
 80118c6:	e841 2300 	strex	r3, r2, [r1]
 80118ca:	617b      	str	r3, [r7, #20]
   return(result);
 80118cc:	697b      	ldr	r3, [r7, #20]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d1e4      	bne.n	801189c <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80118d2:	e007      	b.n	80118e4 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	699a      	ldr	r2, [r3, #24]
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	f042 0208 	orr.w	r2, r2, #8
 80118e2:	619a      	str	r2, [r3, #24]
}
 80118e4:	bf00      	nop
 80118e6:	37b8      	adds	r7, #184	@ 0xb8
 80118e8:	46bd      	mov	sp, r7
 80118ea:	bd80      	pop	{r7, pc}
 80118ec:	effffffe 	.word	0xeffffffe
 80118f0:	58000c00 	.word	0x58000c00
 80118f4:	08011079 	.word	0x08011079

080118f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80118f8:	b480      	push	{r7}
 80118fa:	b083      	sub	sp, #12
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8011900:	bf00      	nop
 8011902:	370c      	adds	r7, #12
 8011904:	46bd      	mov	sp, r7
 8011906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801190a:	4770      	bx	lr

0801190c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801190c:	b480      	push	{r7}
 801190e:	b083      	sub	sp, #12
 8011910:	af00      	add	r7, sp, #0
 8011912:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8011914:	bf00      	nop
 8011916:	370c      	adds	r7, #12
 8011918:	46bd      	mov	sp, r7
 801191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801191e:	4770      	bx	lr

08011920 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8011920:	b480      	push	{r7}
 8011922:	b083      	sub	sp, #12
 8011924:	af00      	add	r7, sp, #0
 8011926:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8011928:	bf00      	nop
 801192a:	370c      	adds	r7, #12
 801192c:	46bd      	mov	sp, r7
 801192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011932:	4770      	bx	lr

08011934 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011934:	b480      	push	{r7}
 8011936:	b085      	sub	sp, #20
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011942:	2b01      	cmp	r3, #1
 8011944:	d101      	bne.n	801194a <HAL_UARTEx_DisableFifoMode+0x16>
 8011946:	2302      	movs	r3, #2
 8011948:	e027      	b.n	801199a <HAL_UARTEx_DisableFifoMode+0x66>
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	2201      	movs	r2, #1
 801194e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	2224      	movs	r2, #36	@ 0x24
 8011956:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	681a      	ldr	r2, [r3, #0]
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	f022 0201 	bic.w	r2, r2, #1
 8011970:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8011978:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	2200      	movs	r2, #0
 801197e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	68fa      	ldr	r2, [r7, #12]
 8011986:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	2220      	movs	r2, #32
 801198c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	2200      	movs	r2, #0
 8011994:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011998:	2300      	movs	r3, #0
}
 801199a:	4618      	mov	r0, r3
 801199c:	3714      	adds	r7, #20
 801199e:	46bd      	mov	sp, r7
 80119a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a4:	4770      	bx	lr

080119a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80119a6:	b580      	push	{r7, lr}
 80119a8:	b084      	sub	sp, #16
 80119aa:	af00      	add	r7, sp, #0
 80119ac:	6078      	str	r0, [r7, #4]
 80119ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80119b6:	2b01      	cmp	r3, #1
 80119b8:	d101      	bne.n	80119be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80119ba:	2302      	movs	r3, #2
 80119bc:	e02d      	b.n	8011a1a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	2201      	movs	r2, #1
 80119c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	2224      	movs	r2, #36	@ 0x24
 80119ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	681a      	ldr	r2, [r3, #0]
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	f022 0201 	bic.w	r2, r2, #1
 80119e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	689b      	ldr	r3, [r3, #8]
 80119ec:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	683a      	ldr	r2, [r7, #0]
 80119f6:	430a      	orrs	r2, r1
 80119f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80119fa:	6878      	ldr	r0, [r7, #4]
 80119fc:	f000 f850 	bl	8011aa0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	68fa      	ldr	r2, [r7, #12]
 8011a06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	2220      	movs	r2, #32
 8011a0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	2200      	movs	r2, #0
 8011a14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011a18:	2300      	movs	r3, #0
}
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	3710      	adds	r7, #16
 8011a1e:	46bd      	mov	sp, r7
 8011a20:	bd80      	pop	{r7, pc}

08011a22 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011a22:	b580      	push	{r7, lr}
 8011a24:	b084      	sub	sp, #16
 8011a26:	af00      	add	r7, sp, #0
 8011a28:	6078      	str	r0, [r7, #4]
 8011a2a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011a32:	2b01      	cmp	r3, #1
 8011a34:	d101      	bne.n	8011a3a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011a36:	2302      	movs	r3, #2
 8011a38:	e02d      	b.n	8011a96 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	2201      	movs	r2, #1
 8011a3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	2224      	movs	r2, #36	@ 0x24
 8011a46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	681a      	ldr	r2, [r3, #0]
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	f022 0201 	bic.w	r2, r2, #1
 8011a60:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	689b      	ldr	r3, [r3, #8]
 8011a68:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	683a      	ldr	r2, [r7, #0]
 8011a72:	430a      	orrs	r2, r1
 8011a74:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011a76:	6878      	ldr	r0, [r7, #4]
 8011a78:	f000 f812 	bl	8011aa0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	68fa      	ldr	r2, [r7, #12]
 8011a82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	2220      	movs	r2, #32
 8011a88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	2200      	movs	r2, #0
 8011a90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011a94:	2300      	movs	r3, #0
}
 8011a96:	4618      	mov	r0, r3
 8011a98:	3710      	adds	r7, #16
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	bd80      	pop	{r7, pc}
	...

08011aa0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011aa0:	b480      	push	{r7}
 8011aa2:	b085      	sub	sp, #20
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d108      	bne.n	8011ac2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	2201      	movs	r2, #1
 8011ab4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	2201      	movs	r2, #1
 8011abc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011ac0:	e031      	b.n	8011b26 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011ac2:	2310      	movs	r3, #16
 8011ac4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011ac6:	2310      	movs	r3, #16
 8011ac8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	689b      	ldr	r3, [r3, #8]
 8011ad0:	0e5b      	lsrs	r3, r3, #25
 8011ad2:	b2db      	uxtb	r3, r3
 8011ad4:	f003 0307 	and.w	r3, r3, #7
 8011ad8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	689b      	ldr	r3, [r3, #8]
 8011ae0:	0f5b      	lsrs	r3, r3, #29
 8011ae2:	b2db      	uxtb	r3, r3
 8011ae4:	f003 0307 	and.w	r3, r3, #7
 8011ae8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011aea:	7bbb      	ldrb	r3, [r7, #14]
 8011aec:	7b3a      	ldrb	r2, [r7, #12]
 8011aee:	4911      	ldr	r1, [pc, #68]	@ (8011b34 <UARTEx_SetNbDataToProcess+0x94>)
 8011af0:	5c8a      	ldrb	r2, [r1, r2]
 8011af2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011af6:	7b3a      	ldrb	r2, [r7, #12]
 8011af8:	490f      	ldr	r1, [pc, #60]	@ (8011b38 <UARTEx_SetNbDataToProcess+0x98>)
 8011afa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011afc:	fb93 f3f2 	sdiv	r3, r3, r2
 8011b00:	b29a      	uxth	r2, r3
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011b08:	7bfb      	ldrb	r3, [r7, #15]
 8011b0a:	7b7a      	ldrb	r2, [r7, #13]
 8011b0c:	4909      	ldr	r1, [pc, #36]	@ (8011b34 <UARTEx_SetNbDataToProcess+0x94>)
 8011b0e:	5c8a      	ldrb	r2, [r1, r2]
 8011b10:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011b14:	7b7a      	ldrb	r2, [r7, #13]
 8011b16:	4908      	ldr	r1, [pc, #32]	@ (8011b38 <UARTEx_SetNbDataToProcess+0x98>)
 8011b18:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011b1a:	fb93 f3f2 	sdiv	r3, r3, r2
 8011b1e:	b29a      	uxth	r2, r3
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8011b26:	bf00      	nop
 8011b28:	3714      	adds	r7, #20
 8011b2a:	46bd      	mov	sp, r7
 8011b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b30:	4770      	bx	lr
 8011b32:	bf00      	nop
 8011b34:	08018a04 	.word	0x08018a04
 8011b38:	08018a0c 	.word	0x08018a0c

08011b3c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011b3c:	b580      	push	{r7, lr}
 8011b3e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8011b40:	4904      	ldr	r1, [pc, #16]	@ (8011b54 <MX_FATFS_Init+0x18>)
 8011b42:	4805      	ldr	r0, [pc, #20]	@ (8011b58 <MX_FATFS_Init+0x1c>)
 8011b44:	f001 fcd0 	bl	80134e8 <FATFS_LinkDriver>
 8011b48:	4603      	mov	r3, r0
 8011b4a:	461a      	mov	r2, r3
 8011b4c:	4b03      	ldr	r3, [pc, #12]	@ (8011b5c <MX_FATFS_Init+0x20>)
 8011b4e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8011b50:	bf00      	nop
 8011b52:	bd80      	pop	{r7, pc}
 8011b54:	2400293c 	.word	0x2400293c
 8011b58:	240000ac 	.word	0x240000ac
 8011b5c:	24002938 	.word	0x24002938

08011b60 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8011b60:	b480      	push	{r7}
 8011b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8011b64:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8011b66:	4618      	mov	r0, r3
 8011b68:	46bd      	mov	sp, r7
 8011b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b6e:	4770      	bx	lr

08011b70 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8011b70:	b580      	push	{r7, lr}
 8011b72:	b082      	sub	sp, #8
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	4603      	mov	r3, r0
 8011b78:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8011b7a:	79fb      	ldrb	r3, [r7, #7]
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	f000 f9fd 	bl	8011f7c <SD_disk_initialize>
 8011b82:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8011b84:	4618      	mov	r0, r3
 8011b86:	3708      	adds	r7, #8
 8011b88:	46bd      	mov	sp, r7
 8011b8a:	bd80      	pop	{r7, pc}

08011b8c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b082      	sub	sp, #8
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	4603      	mov	r3, r0
 8011b94:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8011b96:	79fb      	ldrb	r3, [r7, #7]
 8011b98:	4618      	mov	r0, r3
 8011b9a:	f000 fad5 	bl	8012148 <SD_disk_status>
 8011b9e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	3708      	adds	r7, #8
 8011ba4:	46bd      	mov	sp, r7
 8011ba6:	bd80      	pop	{r7, pc}

08011ba8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8011ba8:	b580      	push	{r7, lr}
 8011baa:	b084      	sub	sp, #16
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	60b9      	str	r1, [r7, #8]
 8011bb0:	607a      	str	r2, [r7, #4]
 8011bb2:	603b      	str	r3, [r7, #0]
 8011bb4:	4603      	mov	r3, r0
 8011bb6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8011bb8:	7bf8      	ldrb	r0, [r7, #15]
 8011bba:	683b      	ldr	r3, [r7, #0]
 8011bbc:	687a      	ldr	r2, [r7, #4]
 8011bbe:	68b9      	ldr	r1, [r7, #8]
 8011bc0:	f000 fad8 	bl	8012174 <SD_disk_read>
 8011bc4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	3710      	adds	r7, #16
 8011bca:	46bd      	mov	sp, r7
 8011bcc:	bd80      	pop	{r7, pc}

08011bce <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8011bce:	b580      	push	{r7, lr}
 8011bd0:	b084      	sub	sp, #16
 8011bd2:	af00      	add	r7, sp, #0
 8011bd4:	60b9      	str	r1, [r7, #8]
 8011bd6:	607a      	str	r2, [r7, #4]
 8011bd8:	603b      	str	r3, [r7, #0]
 8011bda:	4603      	mov	r3, r0
 8011bdc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8011bde:	7bf8      	ldrb	r0, [r7, #15]
 8011be0:	683b      	ldr	r3, [r7, #0]
 8011be2:	687a      	ldr	r2, [r7, #4]
 8011be4:	68b9      	ldr	r1, [r7, #8]
 8011be6:	f000 fb2f 	bl	8012248 <SD_disk_write>
 8011bea:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8011bec:	4618      	mov	r0, r3
 8011bee:	3710      	adds	r7, #16
 8011bf0:	46bd      	mov	sp, r7
 8011bf2:	bd80      	pop	{r7, pc}

08011bf4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8011bf4:	b580      	push	{r7, lr}
 8011bf6:	b082      	sub	sp, #8
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	4603      	mov	r3, r0
 8011bfc:	603a      	str	r2, [r7, #0]
 8011bfe:	71fb      	strb	r3, [r7, #7]
 8011c00:	460b      	mov	r3, r1
 8011c02:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8011c04:	79b9      	ldrb	r1, [r7, #6]
 8011c06:	79fb      	ldrb	r3, [r7, #7]
 8011c08:	683a      	ldr	r2, [r7, #0]
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	f000 fba0 	bl	8012350 <SD_disk_ioctl>
 8011c10:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8011c12:	4618      	mov	r0, r3
 8011c14:	3708      	adds	r7, #8
 8011c16:	46bd      	mov	sp, r7
 8011c18:	bd80      	pop	{r7, pc}
	...

08011c1c <SELECT>:

//-----[ SPI Functions ]-----

/* slave select */
static void SELECT(void)
{
 8011c1c:	b580      	push	{r7, lr}
 8011c1e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8011c20:	2200      	movs	r2, #0
 8011c22:	2110      	movs	r1, #16
 8011c24:	4802      	ldr	r0, [pc, #8]	@ (8011c30 <SELECT+0x14>)
 8011c26:	f7f7 f9b9 	bl	8008f9c <HAL_GPIO_WritePin>
}
 8011c2a:	bf00      	nop
 8011c2c:	bd80      	pop	{r7, pc}
 8011c2e:	bf00      	nop
 8011c30:	58020000 	.word	0x58020000

08011c34 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8011c34:	b580      	push	{r7, lr}
 8011c36:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8011c38:	2201      	movs	r2, #1
 8011c3a:	2110      	movs	r1, #16
 8011c3c:	4802      	ldr	r0, [pc, #8]	@ (8011c48 <DESELECT+0x14>)
 8011c3e:	f7f7 f9ad 	bl	8008f9c <HAL_GPIO_WritePin>
}
 8011c42:	bf00      	nop
 8011c44:	bd80      	pop	{r7, pc}
 8011c46:	bf00      	nop
 8011c48:	58020000 	.word	0x58020000

08011c4c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8011c4c:	b580      	push	{r7, lr}
 8011c4e:	b082      	sub	sp, #8
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	4603      	mov	r3, r0
 8011c54:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8011c56:	bf00      	nop
 8011c58:	4b08      	ldr	r3, [pc, #32]	@ (8011c7c <SPI_TxByte+0x30>)
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	695b      	ldr	r3, [r3, #20]
 8011c5e:	f003 0302 	and.w	r3, r3, #2
 8011c62:	2b02      	cmp	r3, #2
 8011c64:	d1f8      	bne.n	8011c58 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8011c66:	1df9      	adds	r1, r7, #7
 8011c68:	2364      	movs	r3, #100	@ 0x64
 8011c6a:	2201      	movs	r2, #1
 8011c6c:	4803      	ldr	r0, [pc, #12]	@ (8011c7c <SPI_TxByte+0x30>)
 8011c6e:	f7fa fa21 	bl	800c0b4 <HAL_SPI_Transmit>
}
 8011c72:	bf00      	nop
 8011c74:	3708      	adds	r7, #8
 8011c76:	46bd      	mov	sp, r7
 8011c78:	bd80      	pop	{r7, pc}
 8011c7a:	bf00      	nop
 8011c7c:	24000d78 	.word	0x24000d78

08011c80 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8011c80:	b580      	push	{r7, lr}
 8011c82:	b082      	sub	sp, #8
 8011c84:	af00      	add	r7, sp, #0
 8011c86:	6078      	str	r0, [r7, #4]
 8011c88:	460b      	mov	r3, r1
 8011c8a:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8011c8c:	bf00      	nop
 8011c8e:	4b08      	ldr	r3, [pc, #32]	@ (8011cb0 <SPI_TxBuffer+0x30>)
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	695b      	ldr	r3, [r3, #20]
 8011c94:	f003 0302 	and.w	r3, r3, #2
 8011c98:	2b02      	cmp	r3, #2
 8011c9a:	d1f8      	bne.n	8011c8e <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8011c9c:	887a      	ldrh	r2, [r7, #2]
 8011c9e:	2364      	movs	r3, #100	@ 0x64
 8011ca0:	6879      	ldr	r1, [r7, #4]
 8011ca2:	4803      	ldr	r0, [pc, #12]	@ (8011cb0 <SPI_TxBuffer+0x30>)
 8011ca4:	f7fa fa06 	bl	800c0b4 <HAL_SPI_Transmit>
}
 8011ca8:	bf00      	nop
 8011caa:	3708      	adds	r7, #8
 8011cac:	46bd      	mov	sp, r7
 8011cae:	bd80      	pop	{r7, pc}
 8011cb0:	24000d78 	.word	0x24000d78

08011cb4 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	b084      	sub	sp, #16
 8011cb8:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8011cba:	23ff      	movs	r3, #255	@ 0xff
 8011cbc:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8011cbe:	bf00      	nop
 8011cc0:	4b09      	ldr	r3, [pc, #36]	@ (8011ce8 <SPI_RxByte+0x34>)
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	695b      	ldr	r3, [r3, #20]
 8011cc6:	f003 0302 	and.w	r3, r3, #2
 8011cca:	2b02      	cmp	r3, #2
 8011ccc:	d1f8      	bne.n	8011cc0 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8011cce:	1dba      	adds	r2, r7, #6
 8011cd0:	1df9      	adds	r1, r7, #7
 8011cd2:	2364      	movs	r3, #100	@ 0x64
 8011cd4:	9300      	str	r3, [sp, #0]
 8011cd6:	2301      	movs	r3, #1
 8011cd8:	4803      	ldr	r0, [pc, #12]	@ (8011ce8 <SPI_RxByte+0x34>)
 8011cda:	f7fa fe4b 	bl	800c974 <HAL_SPI_TransmitReceive>
  return data;
 8011cde:	79bb      	ldrb	r3, [r7, #6]
}
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	3708      	adds	r7, #8
 8011ce4:	46bd      	mov	sp, r7
 8011ce6:	bd80      	pop	{r7, pc}
 8011ce8:	24000d78 	.word	0x24000d78

08011cec <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b082      	sub	sp, #8
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8011cf4:	f7ff ffde 	bl	8011cb4 <SPI_RxByte>
 8011cf8:	4603      	mov	r3, r0
 8011cfa:	461a      	mov	r2, r3
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	701a      	strb	r2, [r3, #0]
}
 8011d00:	bf00      	nop
 8011d02:	3708      	adds	r7, #8
 8011d04:	46bd      	mov	sp, r7
 8011d06:	bd80      	pop	{r7, pc}

08011d08 <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b082      	sub	sp, #8
 8011d0c:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 8011d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8011d38 <SD_ReadyWait+0x30>)
 8011d10:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8011d14:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8011d16:	f7ff ffcd 	bl	8011cb4 <SPI_RxByte>
 8011d1a:	4603      	mov	r3, r0
 8011d1c:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8011d1e:	79fb      	ldrb	r3, [r7, #7]
 8011d20:	2bff      	cmp	r3, #255	@ 0xff
 8011d22:	d003      	beq.n	8011d2c <SD_ReadyWait+0x24>
 8011d24:	4b04      	ldr	r3, [pc, #16]	@ (8011d38 <SD_ReadyWait+0x30>)
 8011d26:	881b      	ldrh	r3, [r3, #0]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d1f4      	bne.n	8011d16 <SD_ReadyWait+0xe>
  return res;
 8011d2c:	79fb      	ldrb	r3, [r7, #7]
}
 8011d2e:	4618      	mov	r0, r3
 8011d30:	3708      	adds	r7, #8
 8011d32:	46bd      	mov	sp, r7
 8011d34:	bd80      	pop	{r7, pc}
 8011d36:	bf00      	nop
 8011d38:	24002942 	.word	0x24002942

08011d3c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8011d3c:	b580      	push	{r7, lr}
 8011d3e:	b084      	sub	sp, #16
 8011d40:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 8011d42:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8011d46:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 8011d48:	f7ff ff74 	bl	8011c34 <DESELECT>
  for(int i = 0; i < 10; i++)
 8011d4c:	2300      	movs	r3, #0
 8011d4e:	60bb      	str	r3, [r7, #8]
 8011d50:	e005      	b.n	8011d5e <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8011d52:	20ff      	movs	r0, #255	@ 0xff
 8011d54:	f7ff ff7a 	bl	8011c4c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8011d58:	68bb      	ldr	r3, [r7, #8]
 8011d5a:	3301      	adds	r3, #1
 8011d5c:	60bb      	str	r3, [r7, #8]
 8011d5e:	68bb      	ldr	r3, [r7, #8]
 8011d60:	2b09      	cmp	r3, #9
 8011d62:	ddf6      	ble.n	8011d52 <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 8011d64:	f7ff ff5a 	bl	8011c1c <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8011d68:	2340      	movs	r3, #64	@ 0x40
 8011d6a:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8011d6c:	2300      	movs	r3, #0
 8011d6e:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8011d70:	2300      	movs	r3, #0
 8011d72:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8011d74:	2300      	movs	r3, #0
 8011d76:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8011d78:	2300      	movs	r3, #0
 8011d7a:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 8011d7c:	2395      	movs	r3, #149	@ 0x95
 8011d7e:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 8011d80:	463b      	mov	r3, r7
 8011d82:	2106      	movs	r1, #6
 8011d84:	4618      	mov	r0, r3
 8011d86:	f7ff ff7b 	bl	8011c80 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8011d8a:	e002      	b.n	8011d92 <SD_PowerOn+0x56>
  {
    cnt--;
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	3b01      	subs	r3, #1
 8011d90:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8011d92:	f7ff ff8f 	bl	8011cb4 <SPI_RxByte>
 8011d96:	4603      	mov	r3, r0
 8011d98:	2b01      	cmp	r3, #1
 8011d9a:	d002      	beq.n	8011da2 <SD_PowerOn+0x66>
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d1f4      	bne.n	8011d8c <SD_PowerOn+0x50>
  }
  DESELECT();
 8011da2:	f7ff ff47 	bl	8011c34 <DESELECT>
  SPI_TxByte(0XFF);
 8011da6:	20ff      	movs	r0, #255	@ 0xff
 8011da8:	f7ff ff50 	bl	8011c4c <SPI_TxByte>
  PowerFlag = 1;
 8011dac:	4b03      	ldr	r3, [pc, #12]	@ (8011dbc <SD_PowerOn+0x80>)
 8011dae:	2201      	movs	r2, #1
 8011db0:	701a      	strb	r2, [r3, #0]
}
 8011db2:	bf00      	nop
 8011db4:	3710      	adds	r7, #16
 8011db6:	46bd      	mov	sp, r7
 8011db8:	bd80      	pop	{r7, pc}
 8011dba:	bf00      	nop
 8011dbc:	24002945 	.word	0x24002945

08011dc0 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8011dc0:	b480      	push	{r7}
 8011dc2:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8011dc4:	4b03      	ldr	r3, [pc, #12]	@ (8011dd4 <SD_PowerOff+0x14>)
 8011dc6:	2200      	movs	r2, #0
 8011dc8:	701a      	strb	r2, [r3, #0]
}
 8011dca:	bf00      	nop
 8011dcc:	46bd      	mov	sp, r7
 8011dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd2:	4770      	bx	lr
 8011dd4:	24002945 	.word	0x24002945

08011dd8 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8011dd8:	b480      	push	{r7}
 8011dda:	af00      	add	r7, sp, #0
  return PowerFlag;
 8011ddc:	4b03      	ldr	r3, [pc, #12]	@ (8011dec <SD_CheckPower+0x14>)
 8011dde:	781b      	ldrb	r3, [r3, #0]
}
 8011de0:	4618      	mov	r0, r3
 8011de2:	46bd      	mov	sp, r7
 8011de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011de8:	4770      	bx	lr
 8011dea:	bf00      	nop
 8011dec:	24002945 	.word	0x24002945

08011df0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8011df0:	b580      	push	{r7, lr}
 8011df2:	b084      	sub	sp, #16
 8011df4:	af00      	add	r7, sp, #0
 8011df6:	6078      	str	r0, [r7, #4]
 8011df8:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 8011dfa:	4b13      	ldr	r3, [pc, #76]	@ (8011e48 <SD_RxDataBlock+0x58>)
 8011dfc:	22c8      	movs	r2, #200	@ 0xc8
 8011dfe:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8011e00:	f7ff ff58 	bl	8011cb4 <SPI_RxByte>
 8011e04:	4603      	mov	r3, r0
 8011e06:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8011e08:	7bfb      	ldrb	r3, [r7, #15]
 8011e0a:	2bff      	cmp	r3, #255	@ 0xff
 8011e0c:	d103      	bne.n	8011e16 <SD_RxDataBlock+0x26>
 8011e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8011e48 <SD_RxDataBlock+0x58>)
 8011e10:	881b      	ldrh	r3, [r3, #0]
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d1f4      	bne.n	8011e00 <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 8011e16:	7bfb      	ldrb	r3, [r7, #15]
 8011e18:	2bfe      	cmp	r3, #254	@ 0xfe
 8011e1a:	d001      	beq.n	8011e20 <SD_RxDataBlock+0x30>
 8011e1c:	2300      	movs	r3, #0
 8011e1e:	e00f      	b.n	8011e40 <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	1c5a      	adds	r2, r3, #1
 8011e24:	607a      	str	r2, [r7, #4]
 8011e26:	4618      	mov	r0, r3
 8011e28:	f7ff ff60 	bl	8011cec <SPI_RxBytePtr>
  } while(len--);
 8011e2c:	683b      	ldr	r3, [r7, #0]
 8011e2e:	1e5a      	subs	r2, r3, #1
 8011e30:	603a      	str	r2, [r7, #0]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d1f4      	bne.n	8011e20 <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 8011e36:	f7ff ff3d 	bl	8011cb4 <SPI_RxByte>
  SPI_RxByte();
 8011e3a:	f7ff ff3b 	bl	8011cb4 <SPI_RxByte>
  return TRUE;
 8011e3e:	2301      	movs	r3, #1
}
 8011e40:	4618      	mov	r0, r3
 8011e42:	3710      	adds	r7, #16
 8011e44:	46bd      	mov	sp, r7
 8011e46:	bd80      	pop	{r7, pc}
 8011e48:	24002940 	.word	0x24002940

08011e4c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8011e4c:	b580      	push	{r7, lr}
 8011e4e:	b084      	sub	sp, #16
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	6078      	str	r0, [r7, #4]
 8011e54:	460b      	mov	r3, r1
 8011e56:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8011e58:	2300      	movs	r3, #0
 8011e5a:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8011e5c:	f7ff ff54 	bl	8011d08 <SD_ReadyWait>
 8011e60:	4603      	mov	r3, r0
 8011e62:	2bff      	cmp	r3, #255	@ 0xff
 8011e64:	d001      	beq.n	8011e6a <SD_TxDataBlock+0x1e>
 8011e66:	2300      	movs	r3, #0
 8011e68:	e02f      	b.n	8011eca <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 8011e6a:	78fb      	ldrb	r3, [r7, #3]
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	f7ff feed 	bl	8011c4c <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8011e72:	78fb      	ldrb	r3, [r7, #3]
 8011e74:	2bfd      	cmp	r3, #253	@ 0xfd
 8011e76:	d020      	beq.n	8011eba <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8011e78:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8011e7c:	6878      	ldr	r0, [r7, #4]
 8011e7e:	f7ff feff 	bl	8011c80 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 8011e82:	f7ff ff17 	bl	8011cb4 <SPI_RxByte>
    SPI_RxByte();
 8011e86:	f7ff ff15 	bl	8011cb4 <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 8011e8a:	e00b      	b.n	8011ea4 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8011e8c:	f7ff ff12 	bl	8011cb4 <SPI_RxByte>
 8011e90:	4603      	mov	r3, r0
 8011e92:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8011e94:	7bfb      	ldrb	r3, [r7, #15]
 8011e96:	f003 031f 	and.w	r3, r3, #31
 8011e9a:	2b05      	cmp	r3, #5
 8011e9c:	d006      	beq.n	8011eac <SD_TxDataBlock+0x60>
      i++;
 8011e9e:	7bbb      	ldrb	r3, [r7, #14]
 8011ea0:	3301      	adds	r3, #1
 8011ea2:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8011ea4:	7bbb      	ldrb	r3, [r7, #14]
 8011ea6:	2b40      	cmp	r3, #64	@ 0x40
 8011ea8:	d9f0      	bls.n	8011e8c <SD_TxDataBlock+0x40>
 8011eaa:	e000      	b.n	8011eae <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8011eac:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8011eae:	bf00      	nop
 8011eb0:	f7ff ff00 	bl	8011cb4 <SPI_RxByte>
 8011eb4:	4603      	mov	r3, r0
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d0fa      	beq.n	8011eb0 <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8011eba:	7bfb      	ldrb	r3, [r7, #15]
 8011ebc:	f003 031f 	and.w	r3, r3, #31
 8011ec0:	2b05      	cmp	r3, #5
 8011ec2:	d101      	bne.n	8011ec8 <SD_TxDataBlock+0x7c>
 8011ec4:	2301      	movs	r3, #1
 8011ec6:	e000      	b.n	8011eca <SD_TxDataBlock+0x7e>

  return FALSE;
 8011ec8:	2300      	movs	r3, #0
}
 8011eca:	4618      	mov	r0, r3
 8011ecc:	3710      	adds	r7, #16
 8011ece:	46bd      	mov	sp, r7
 8011ed0:	bd80      	pop	{r7, pc}

08011ed2 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8011ed2:	b580      	push	{r7, lr}
 8011ed4:	b084      	sub	sp, #16
 8011ed6:	af00      	add	r7, sp, #0
 8011ed8:	4603      	mov	r3, r0
 8011eda:	6039      	str	r1, [r7, #0]
 8011edc:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8011ede:	f7ff ff13 	bl	8011d08 <SD_ReadyWait>
 8011ee2:	4603      	mov	r3, r0
 8011ee4:	2bff      	cmp	r3, #255	@ 0xff
 8011ee6:	d001      	beq.n	8011eec <SD_SendCmd+0x1a>
 8011ee8:	23ff      	movs	r3, #255	@ 0xff
 8011eea:	e042      	b.n	8011f72 <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8011eec:	79fb      	ldrb	r3, [r7, #7]
 8011eee:	4618      	mov	r0, r3
 8011ef0:	f7ff feac 	bl	8011c4c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8011ef4:	683b      	ldr	r3, [r7, #0]
 8011ef6:	0e1b      	lsrs	r3, r3, #24
 8011ef8:	b2db      	uxtb	r3, r3
 8011efa:	4618      	mov	r0, r3
 8011efc:	f7ff fea6 	bl	8011c4c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8011f00:	683b      	ldr	r3, [r7, #0]
 8011f02:	0c1b      	lsrs	r3, r3, #16
 8011f04:	b2db      	uxtb	r3, r3
 8011f06:	4618      	mov	r0, r3
 8011f08:	f7ff fea0 	bl	8011c4c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8011f0c:	683b      	ldr	r3, [r7, #0]
 8011f0e:	0a1b      	lsrs	r3, r3, #8
 8011f10:	b2db      	uxtb	r3, r3
 8011f12:	4618      	mov	r0, r3
 8011f14:	f7ff fe9a 	bl	8011c4c <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8011f18:	683b      	ldr	r3, [r7, #0]
 8011f1a:	b2db      	uxtb	r3, r3
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	f7ff fe95 	bl	8011c4c <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8011f22:	79fb      	ldrb	r3, [r7, #7]
 8011f24:	2b40      	cmp	r3, #64	@ 0x40
 8011f26:	d102      	bne.n	8011f2e <SD_SendCmd+0x5c>
 8011f28:	2395      	movs	r3, #149	@ 0x95
 8011f2a:	73fb      	strb	r3, [r7, #15]
 8011f2c:	e007      	b.n	8011f3e <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 8011f2e:	79fb      	ldrb	r3, [r7, #7]
 8011f30:	2b48      	cmp	r3, #72	@ 0x48
 8011f32:	d102      	bne.n	8011f3a <SD_SendCmd+0x68>
 8011f34:	2387      	movs	r3, #135	@ 0x87
 8011f36:	73fb      	strb	r3, [r7, #15]
 8011f38:	e001      	b.n	8011f3e <SD_SendCmd+0x6c>
  else crc = 1;
 8011f3a:	2301      	movs	r3, #1
 8011f3c:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 8011f3e:	7bfb      	ldrb	r3, [r7, #15]
 8011f40:	4618      	mov	r0, r3
 8011f42:	f7ff fe83 	bl	8011c4c <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8011f46:	79fb      	ldrb	r3, [r7, #7]
 8011f48:	2b4c      	cmp	r3, #76	@ 0x4c
 8011f4a:	d101      	bne.n	8011f50 <SD_SendCmd+0x7e>
 8011f4c:	f7ff feb2 	bl	8011cb4 <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 8011f50:	230a      	movs	r3, #10
 8011f52:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8011f54:	f7ff feae 	bl	8011cb4 <SPI_RxByte>
 8011f58:	4603      	mov	r3, r0
 8011f5a:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8011f5c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	da05      	bge.n	8011f70 <SD_SendCmd+0x9e>
 8011f64:	7bbb      	ldrb	r3, [r7, #14]
 8011f66:	3b01      	subs	r3, #1
 8011f68:	73bb      	strb	r3, [r7, #14]
 8011f6a:	7bbb      	ldrb	r3, [r7, #14]
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d1f1      	bne.n	8011f54 <SD_SendCmd+0x82>

  return res;
 8011f70:	7b7b      	ldrb	r3, [r7, #13]
}
 8011f72:	4618      	mov	r0, r3
 8011f74:	3710      	adds	r7, #16
 8011f76:	46bd      	mov	sp, r7
 8011f78:	bd80      	pop	{r7, pc}
	...

08011f7c <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8011f7c:	b590      	push	{r4, r7, lr}
 8011f7e:	b085      	sub	sp, #20
 8011f80:	af00      	add	r7, sp, #0
 8011f82:	4603      	mov	r3, r0
 8011f84:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8011f86:	79fb      	ldrb	r3, [r7, #7]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d001      	beq.n	8011f90 <SD_disk_initialize+0x14>
 8011f8c:	2301      	movs	r3, #1
 8011f8e:	e0d1      	b.n	8012134 <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8011f90:	4b6a      	ldr	r3, [pc, #424]	@ (801213c <SD_disk_initialize+0x1c0>)
 8011f92:	781b      	ldrb	r3, [r3, #0]
 8011f94:	b2db      	uxtb	r3, r3
 8011f96:	f003 0302 	and.w	r3, r3, #2
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d003      	beq.n	8011fa6 <SD_disk_initialize+0x2a>
 8011f9e:	4b67      	ldr	r3, [pc, #412]	@ (801213c <SD_disk_initialize+0x1c0>)
 8011fa0:	781b      	ldrb	r3, [r3, #0]
 8011fa2:	b2db      	uxtb	r3, r3
 8011fa4:	e0c6      	b.n	8012134 <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 8011fa6:	f7ff fec9 	bl	8011d3c <SD_PowerOn>
  /* slave select */
  SELECT();
 8011faa:	f7ff fe37 	bl	8011c1c <SELECT>
  /* check disk type */
  type = 0;
 8011fae:	2300      	movs	r3, #0
 8011fb0:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8011fb2:	2100      	movs	r1, #0
 8011fb4:	2040      	movs	r0, #64	@ 0x40
 8011fb6:	f7ff ff8c 	bl	8011ed2 <SD_SendCmd>
 8011fba:	4603      	mov	r3, r0
 8011fbc:	2b01      	cmp	r3, #1
 8011fbe:	f040 80a1 	bne.w	8012104 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8011fc2:	4b5f      	ldr	r3, [pc, #380]	@ (8012140 <SD_disk_initialize+0x1c4>)
 8011fc4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011fc8:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8011fca:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8011fce:	2048      	movs	r0, #72	@ 0x48
 8011fd0:	f7ff ff7f 	bl	8011ed2 <SD_SendCmd>
 8011fd4:	4603      	mov	r3, r0
 8011fd6:	2b01      	cmp	r3, #1
 8011fd8:	d155      	bne.n	8012086 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8011fda:	2300      	movs	r3, #0
 8011fdc:	73fb      	strb	r3, [r7, #15]
 8011fde:	e00c      	b.n	8011ffa <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8011fe0:	7bfc      	ldrb	r4, [r7, #15]
 8011fe2:	f7ff fe67 	bl	8011cb4 <SPI_RxByte>
 8011fe6:	4603      	mov	r3, r0
 8011fe8:	461a      	mov	r2, r3
 8011fea:	f104 0310 	add.w	r3, r4, #16
 8011fee:	443b      	add	r3, r7
 8011ff0:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8011ff4:	7bfb      	ldrb	r3, [r7, #15]
 8011ff6:	3301      	adds	r3, #1
 8011ff8:	73fb      	strb	r3, [r7, #15]
 8011ffa:	7bfb      	ldrb	r3, [r7, #15]
 8011ffc:	2b03      	cmp	r3, #3
 8011ffe:	d9ef      	bls.n	8011fe0 <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8012000:	7abb      	ldrb	r3, [r7, #10]
 8012002:	2b01      	cmp	r3, #1
 8012004:	d17e      	bne.n	8012104 <SD_disk_initialize+0x188>
 8012006:	7afb      	ldrb	r3, [r7, #11]
 8012008:	2baa      	cmp	r3, #170	@ 0xaa
 801200a:	d17b      	bne.n	8012104 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 801200c:	2100      	movs	r1, #0
 801200e:	2077      	movs	r0, #119	@ 0x77
 8012010:	f7ff ff5f 	bl	8011ed2 <SD_SendCmd>
 8012014:	4603      	mov	r3, r0
 8012016:	2b01      	cmp	r3, #1
 8012018:	d807      	bhi.n	801202a <SD_disk_initialize+0xae>
 801201a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 801201e:	2069      	movs	r0, #105	@ 0x69
 8012020:	f7ff ff57 	bl	8011ed2 <SD_SendCmd>
 8012024:	4603      	mov	r3, r0
 8012026:	2b00      	cmp	r3, #0
 8012028:	d004      	beq.n	8012034 <SD_disk_initialize+0xb8>
        } while (Timer1);
 801202a:	4b45      	ldr	r3, [pc, #276]	@ (8012140 <SD_disk_initialize+0x1c4>)
 801202c:	881b      	ldrh	r3, [r3, #0]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d1ec      	bne.n	801200c <SD_disk_initialize+0x90>
 8012032:	e000      	b.n	8012036 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8012034:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8012036:	4b42      	ldr	r3, [pc, #264]	@ (8012140 <SD_disk_initialize+0x1c4>)
 8012038:	881b      	ldrh	r3, [r3, #0]
 801203a:	2b00      	cmp	r3, #0
 801203c:	d062      	beq.n	8012104 <SD_disk_initialize+0x188>
 801203e:	2100      	movs	r1, #0
 8012040:	207a      	movs	r0, #122	@ 0x7a
 8012042:	f7ff ff46 	bl	8011ed2 <SD_SendCmd>
 8012046:	4603      	mov	r3, r0
 8012048:	2b00      	cmp	r3, #0
 801204a:	d15b      	bne.n	8012104 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 801204c:	2300      	movs	r3, #0
 801204e:	73fb      	strb	r3, [r7, #15]
 8012050:	e00c      	b.n	801206c <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 8012052:	7bfc      	ldrb	r4, [r7, #15]
 8012054:	f7ff fe2e 	bl	8011cb4 <SPI_RxByte>
 8012058:	4603      	mov	r3, r0
 801205a:	461a      	mov	r2, r3
 801205c:	f104 0310 	add.w	r3, r4, #16
 8012060:	443b      	add	r3, r7
 8012062:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8012066:	7bfb      	ldrb	r3, [r7, #15]
 8012068:	3301      	adds	r3, #1
 801206a:	73fb      	strb	r3, [r7, #15]
 801206c:	7bfb      	ldrb	r3, [r7, #15]
 801206e:	2b03      	cmp	r3, #3
 8012070:	d9ef      	bls.n	8012052 <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8012072:	7a3b      	ldrb	r3, [r7, #8]
 8012074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012078:	2b00      	cmp	r3, #0
 801207a:	d001      	beq.n	8012080 <SD_disk_initialize+0x104>
 801207c:	230c      	movs	r3, #12
 801207e:	e000      	b.n	8012082 <SD_disk_initialize+0x106>
 8012080:	2304      	movs	r3, #4
 8012082:	73bb      	strb	r3, [r7, #14]
 8012084:	e03e      	b.n	8012104 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8012086:	2100      	movs	r1, #0
 8012088:	2077      	movs	r0, #119	@ 0x77
 801208a:	f7ff ff22 	bl	8011ed2 <SD_SendCmd>
 801208e:	4603      	mov	r3, r0
 8012090:	2b01      	cmp	r3, #1
 8012092:	d808      	bhi.n	80120a6 <SD_disk_initialize+0x12a>
 8012094:	2100      	movs	r1, #0
 8012096:	2069      	movs	r0, #105	@ 0x69
 8012098:	f7ff ff1b 	bl	8011ed2 <SD_SendCmd>
 801209c:	4603      	mov	r3, r0
 801209e:	2b01      	cmp	r3, #1
 80120a0:	d801      	bhi.n	80120a6 <SD_disk_initialize+0x12a>
 80120a2:	2302      	movs	r3, #2
 80120a4:	e000      	b.n	80120a8 <SD_disk_initialize+0x12c>
 80120a6:	2301      	movs	r3, #1
 80120a8:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 80120aa:	7bbb      	ldrb	r3, [r7, #14]
 80120ac:	2b02      	cmp	r3, #2
 80120ae:	d10e      	bne.n	80120ce <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80120b0:	2100      	movs	r1, #0
 80120b2:	2077      	movs	r0, #119	@ 0x77
 80120b4:	f7ff ff0d 	bl	8011ed2 <SD_SendCmd>
 80120b8:	4603      	mov	r3, r0
 80120ba:	2b01      	cmp	r3, #1
 80120bc:	d80e      	bhi.n	80120dc <SD_disk_initialize+0x160>
 80120be:	2100      	movs	r1, #0
 80120c0:	2069      	movs	r0, #105	@ 0x69
 80120c2:	f7ff ff06 	bl	8011ed2 <SD_SendCmd>
 80120c6:	4603      	mov	r3, r0
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d107      	bne.n	80120dc <SD_disk_initialize+0x160>
 80120cc:	e00c      	b.n	80120e8 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80120ce:	2100      	movs	r1, #0
 80120d0:	2041      	movs	r0, #65	@ 0x41
 80120d2:	f7ff fefe 	bl	8011ed2 <SD_SendCmd>
 80120d6:	4603      	mov	r3, r0
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d004      	beq.n	80120e6 <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 80120dc:	4b18      	ldr	r3, [pc, #96]	@ (8012140 <SD_disk_initialize+0x1c4>)
 80120de:	881b      	ldrh	r3, [r3, #0]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d1e2      	bne.n	80120aa <SD_disk_initialize+0x12e>
 80120e4:	e000      	b.n	80120e8 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80120e6:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80120e8:	4b15      	ldr	r3, [pc, #84]	@ (8012140 <SD_disk_initialize+0x1c4>)
 80120ea:	881b      	ldrh	r3, [r3, #0]
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d007      	beq.n	8012100 <SD_disk_initialize+0x184>
 80120f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80120f4:	2050      	movs	r0, #80	@ 0x50
 80120f6:	f7ff feec 	bl	8011ed2 <SD_SendCmd>
 80120fa:	4603      	mov	r3, r0
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d001      	beq.n	8012104 <SD_disk_initialize+0x188>
 8012100:	2300      	movs	r3, #0
 8012102:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 8012104:	4a0f      	ldr	r2, [pc, #60]	@ (8012144 <SD_disk_initialize+0x1c8>)
 8012106:	7bbb      	ldrb	r3, [r7, #14]
 8012108:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 801210a:	f7ff fd93 	bl	8011c34 <DESELECT>
  SPI_RxByte();
 801210e:	f7ff fdd1 	bl	8011cb4 <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 8012112:	7bbb      	ldrb	r3, [r7, #14]
 8012114:	2b00      	cmp	r3, #0
 8012116:	d008      	beq.n	801212a <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8012118:	4b08      	ldr	r3, [pc, #32]	@ (801213c <SD_disk_initialize+0x1c0>)
 801211a:	781b      	ldrb	r3, [r3, #0]
 801211c:	b2db      	uxtb	r3, r3
 801211e:	f023 0301 	bic.w	r3, r3, #1
 8012122:	b2da      	uxtb	r2, r3
 8012124:	4b05      	ldr	r3, [pc, #20]	@ (801213c <SD_disk_initialize+0x1c0>)
 8012126:	701a      	strb	r2, [r3, #0]
 8012128:	e001      	b.n	801212e <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 801212a:	f7ff fe49 	bl	8011dc0 <SD_PowerOff>
  }
  return Stat;
 801212e:	4b03      	ldr	r3, [pc, #12]	@ (801213c <SD_disk_initialize+0x1c0>)
 8012130:	781b      	ldrb	r3, [r3, #0]
 8012132:	b2db      	uxtb	r3, r3
}
 8012134:	4618      	mov	r0, r3
 8012136:	3714      	adds	r7, #20
 8012138:	46bd      	mov	sp, r7
 801213a:	bd90      	pop	{r4, r7, pc}
 801213c:	240000c0 	.word	0x240000c0
 8012140:	24002940 	.word	0x24002940
 8012144:	24002944 	.word	0x24002944

08012148 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8012148:	b480      	push	{r7}
 801214a:	b083      	sub	sp, #12
 801214c:	af00      	add	r7, sp, #0
 801214e:	4603      	mov	r3, r0
 8012150:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 8012152:	79fb      	ldrb	r3, [r7, #7]
 8012154:	2b00      	cmp	r3, #0
 8012156:	d001      	beq.n	801215c <SD_disk_status+0x14>
 8012158:	2301      	movs	r3, #1
 801215a:	e002      	b.n	8012162 <SD_disk_status+0x1a>
  return Stat;
 801215c:	4b04      	ldr	r3, [pc, #16]	@ (8012170 <SD_disk_status+0x28>)
 801215e:	781b      	ldrb	r3, [r3, #0]
 8012160:	b2db      	uxtb	r3, r3
}
 8012162:	4618      	mov	r0, r3
 8012164:	370c      	adds	r7, #12
 8012166:	46bd      	mov	sp, r7
 8012168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801216c:	4770      	bx	lr
 801216e:	bf00      	nop
 8012170:	240000c0 	.word	0x240000c0

08012174 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8012174:	b580      	push	{r7, lr}
 8012176:	b084      	sub	sp, #16
 8012178:	af00      	add	r7, sp, #0
 801217a:	60b9      	str	r1, [r7, #8]
 801217c:	607a      	str	r2, [r7, #4]
 801217e:	603b      	str	r3, [r7, #0]
 8012180:	4603      	mov	r3, r0
 8012182:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8012184:	7bfb      	ldrb	r3, [r7, #15]
 8012186:	2b00      	cmp	r3, #0
 8012188:	d102      	bne.n	8012190 <SD_disk_read+0x1c>
 801218a:	683b      	ldr	r3, [r7, #0]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d101      	bne.n	8012194 <SD_disk_read+0x20>
 8012190:	2304      	movs	r3, #4
 8012192:	e051      	b.n	8012238 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8012194:	4b2a      	ldr	r3, [pc, #168]	@ (8012240 <SD_disk_read+0xcc>)
 8012196:	781b      	ldrb	r3, [r3, #0]
 8012198:	b2db      	uxtb	r3, r3
 801219a:	f003 0301 	and.w	r3, r3, #1
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d001      	beq.n	80121a6 <SD_disk_read+0x32>
 80121a2:	2303      	movs	r3, #3
 80121a4:	e048      	b.n	8012238 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 80121a6:	4b27      	ldr	r3, [pc, #156]	@ (8012244 <SD_disk_read+0xd0>)
 80121a8:	781b      	ldrb	r3, [r3, #0]
 80121aa:	f003 0304 	and.w	r3, r3, #4
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d102      	bne.n	80121b8 <SD_disk_read+0x44>
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	025b      	lsls	r3, r3, #9
 80121b6:	607b      	str	r3, [r7, #4]

  SELECT();
 80121b8:	f7ff fd30 	bl	8011c1c <SELECT>

  if (count == 1)
 80121bc:	683b      	ldr	r3, [r7, #0]
 80121be:	2b01      	cmp	r3, #1
 80121c0:	d111      	bne.n	80121e6 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80121c2:	6879      	ldr	r1, [r7, #4]
 80121c4:	2051      	movs	r0, #81	@ 0x51
 80121c6:	f7ff fe84 	bl	8011ed2 <SD_SendCmd>
 80121ca:	4603      	mov	r3, r0
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d129      	bne.n	8012224 <SD_disk_read+0xb0>
 80121d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80121d4:	68b8      	ldr	r0, [r7, #8]
 80121d6:	f7ff fe0b 	bl	8011df0 <SD_RxDataBlock>
 80121da:	4603      	mov	r3, r0
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d021      	beq.n	8012224 <SD_disk_read+0xb0>
 80121e0:	2300      	movs	r3, #0
 80121e2:	603b      	str	r3, [r7, #0]
 80121e4:	e01e      	b.n	8012224 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 80121e6:	6879      	ldr	r1, [r7, #4]
 80121e8:	2052      	movs	r0, #82	@ 0x52
 80121ea:	f7ff fe72 	bl	8011ed2 <SD_SendCmd>
 80121ee:	4603      	mov	r3, r0
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d117      	bne.n	8012224 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 80121f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80121f8:	68b8      	ldr	r0, [r7, #8]
 80121fa:	f7ff fdf9 	bl	8011df0 <SD_RxDataBlock>
 80121fe:	4603      	mov	r3, r0
 8012200:	2b00      	cmp	r3, #0
 8012202:	d00a      	beq.n	801221a <SD_disk_read+0xa6>
        buff += 512;
 8012204:	68bb      	ldr	r3, [r7, #8]
 8012206:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 801220a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 801220c:	683b      	ldr	r3, [r7, #0]
 801220e:	3b01      	subs	r3, #1
 8012210:	603b      	str	r3, [r7, #0]
 8012212:	683b      	ldr	r3, [r7, #0]
 8012214:	2b00      	cmp	r3, #0
 8012216:	d1ed      	bne.n	80121f4 <SD_disk_read+0x80>
 8012218:	e000      	b.n	801221c <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 801221a:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 801221c:	2100      	movs	r1, #0
 801221e:	204c      	movs	r0, #76	@ 0x4c
 8012220:	f7ff fe57 	bl	8011ed2 <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8012224:	f7ff fd06 	bl	8011c34 <DESELECT>
  SPI_RxByte();
 8012228:	f7ff fd44 	bl	8011cb4 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 801222c:	683b      	ldr	r3, [r7, #0]
 801222e:	2b00      	cmp	r3, #0
 8012230:	bf14      	ite	ne
 8012232:	2301      	movne	r3, #1
 8012234:	2300      	moveq	r3, #0
 8012236:	b2db      	uxtb	r3, r3
}
 8012238:	4618      	mov	r0, r3
 801223a:	3710      	adds	r7, #16
 801223c:	46bd      	mov	sp, r7
 801223e:	bd80      	pop	{r7, pc}
 8012240:	240000c0 	.word	0x240000c0
 8012244:	24002944 	.word	0x24002944

08012248 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8012248:	b580      	push	{r7, lr}
 801224a:	b084      	sub	sp, #16
 801224c:	af00      	add	r7, sp, #0
 801224e:	60b9      	str	r1, [r7, #8]
 8012250:	607a      	str	r2, [r7, #4]
 8012252:	603b      	str	r3, [r7, #0]
 8012254:	4603      	mov	r3, r0
 8012256:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8012258:	7bfb      	ldrb	r3, [r7, #15]
 801225a:	2b00      	cmp	r3, #0
 801225c:	d102      	bne.n	8012264 <SD_disk_write+0x1c>
 801225e:	683b      	ldr	r3, [r7, #0]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d101      	bne.n	8012268 <SD_disk_write+0x20>
 8012264:	2304      	movs	r3, #4
 8012266:	e06b      	b.n	8012340 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8012268:	4b37      	ldr	r3, [pc, #220]	@ (8012348 <SD_disk_write+0x100>)
 801226a:	781b      	ldrb	r3, [r3, #0]
 801226c:	b2db      	uxtb	r3, r3
 801226e:	f003 0301 	and.w	r3, r3, #1
 8012272:	2b00      	cmp	r3, #0
 8012274:	d001      	beq.n	801227a <SD_disk_write+0x32>
 8012276:	2303      	movs	r3, #3
 8012278:	e062      	b.n	8012340 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 801227a:	4b33      	ldr	r3, [pc, #204]	@ (8012348 <SD_disk_write+0x100>)
 801227c:	781b      	ldrb	r3, [r3, #0]
 801227e:	b2db      	uxtb	r3, r3
 8012280:	f003 0304 	and.w	r3, r3, #4
 8012284:	2b00      	cmp	r3, #0
 8012286:	d001      	beq.n	801228c <SD_disk_write+0x44>
 8012288:	2302      	movs	r3, #2
 801228a:	e059      	b.n	8012340 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 801228c:	4b2f      	ldr	r3, [pc, #188]	@ (801234c <SD_disk_write+0x104>)
 801228e:	781b      	ldrb	r3, [r3, #0]
 8012290:	f003 0304 	and.w	r3, r3, #4
 8012294:	2b00      	cmp	r3, #0
 8012296:	d102      	bne.n	801229e <SD_disk_write+0x56>
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	025b      	lsls	r3, r3, #9
 801229c:	607b      	str	r3, [r7, #4]

  SELECT();
 801229e:	f7ff fcbd 	bl	8011c1c <SELECT>

  if (count == 1)
 80122a2:	683b      	ldr	r3, [r7, #0]
 80122a4:	2b01      	cmp	r3, #1
 80122a6:	d110      	bne.n	80122ca <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80122a8:	6879      	ldr	r1, [r7, #4]
 80122aa:	2058      	movs	r0, #88	@ 0x58
 80122ac:	f7ff fe11 	bl	8011ed2 <SD_SendCmd>
 80122b0:	4603      	mov	r3, r0
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d13a      	bne.n	801232c <SD_disk_write+0xe4>
 80122b6:	21fe      	movs	r1, #254	@ 0xfe
 80122b8:	68b8      	ldr	r0, [r7, #8]
 80122ba:	f7ff fdc7 	bl	8011e4c <SD_TxDataBlock>
 80122be:	4603      	mov	r3, r0
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d033      	beq.n	801232c <SD_disk_write+0xe4>
      count = 0;
 80122c4:	2300      	movs	r3, #0
 80122c6:	603b      	str	r3, [r7, #0]
 80122c8:	e030      	b.n	801232c <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 80122ca:	4b20      	ldr	r3, [pc, #128]	@ (801234c <SD_disk_write+0x104>)
 80122cc:	781b      	ldrb	r3, [r3, #0]
 80122ce:	f003 0302 	and.w	r3, r3, #2
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d007      	beq.n	80122e6 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80122d6:	2100      	movs	r1, #0
 80122d8:	2077      	movs	r0, #119	@ 0x77
 80122da:	f7ff fdfa 	bl	8011ed2 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80122de:	6839      	ldr	r1, [r7, #0]
 80122e0:	2057      	movs	r0, #87	@ 0x57
 80122e2:	f7ff fdf6 	bl	8011ed2 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80122e6:	6879      	ldr	r1, [r7, #4]
 80122e8:	2059      	movs	r0, #89	@ 0x59
 80122ea:	f7ff fdf2 	bl	8011ed2 <SD_SendCmd>
 80122ee:	4603      	mov	r3, r0
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d11b      	bne.n	801232c <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80122f4:	21fc      	movs	r1, #252	@ 0xfc
 80122f6:	68b8      	ldr	r0, [r7, #8]
 80122f8:	f7ff fda8 	bl	8011e4c <SD_TxDataBlock>
 80122fc:	4603      	mov	r3, r0
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d00a      	beq.n	8012318 <SD_disk_write+0xd0>
        buff += 512;
 8012302:	68bb      	ldr	r3, [r7, #8]
 8012304:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8012308:	60bb      	str	r3, [r7, #8]
      } while (--count);
 801230a:	683b      	ldr	r3, [r7, #0]
 801230c:	3b01      	subs	r3, #1
 801230e:	603b      	str	r3, [r7, #0]
 8012310:	683b      	ldr	r3, [r7, #0]
 8012312:	2b00      	cmp	r3, #0
 8012314:	d1ee      	bne.n	80122f4 <SD_disk_write+0xac>
 8012316:	e000      	b.n	801231a <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8012318:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 801231a:	21fd      	movs	r1, #253	@ 0xfd
 801231c:	2000      	movs	r0, #0
 801231e:	f7ff fd95 	bl	8011e4c <SD_TxDataBlock>
 8012322:	4603      	mov	r3, r0
 8012324:	2b00      	cmp	r3, #0
 8012326:	d101      	bne.n	801232c <SD_disk_write+0xe4>
      {
        count = 1;
 8012328:	2301      	movs	r3, #1
 801232a:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 801232c:	f7ff fc82 	bl	8011c34 <DESELECT>
  SPI_RxByte();
 8012330:	f7ff fcc0 	bl	8011cb4 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8012334:	683b      	ldr	r3, [r7, #0]
 8012336:	2b00      	cmp	r3, #0
 8012338:	bf14      	ite	ne
 801233a:	2301      	movne	r3, #1
 801233c:	2300      	moveq	r3, #0
 801233e:	b2db      	uxtb	r3, r3
}
 8012340:	4618      	mov	r0, r3
 8012342:	3710      	adds	r7, #16
 8012344:	46bd      	mov	sp, r7
 8012346:	bd80      	pop	{r7, pc}
 8012348:	240000c0 	.word	0x240000c0
 801234c:	24002944 	.word	0x24002944

08012350 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8012350:	b590      	push	{r4, r7, lr}
 8012352:	b08b      	sub	sp, #44	@ 0x2c
 8012354:	af00      	add	r7, sp, #0
 8012356:	4603      	mov	r3, r0
 8012358:	603a      	str	r2, [r7, #0]
 801235a:	71fb      	strb	r3, [r7, #7]
 801235c:	460b      	mov	r3, r1
 801235e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8012360:	683b      	ldr	r3, [r7, #0]
 8012362:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8012364:	79fb      	ldrb	r3, [r7, #7]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d001      	beq.n	801236e <SD_disk_ioctl+0x1e>
 801236a:	2304      	movs	r3, #4
 801236c:	e113      	b.n	8012596 <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 801236e:	2301      	movs	r3, #1
 8012370:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8012374:	79bb      	ldrb	r3, [r7, #6]
 8012376:	2b05      	cmp	r3, #5
 8012378:	d124      	bne.n	80123c4 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 801237a:	6a3b      	ldr	r3, [r7, #32]
 801237c:	781b      	ldrb	r3, [r3, #0]
 801237e:	2b02      	cmp	r3, #2
 8012380:	d012      	beq.n	80123a8 <SD_disk_ioctl+0x58>
 8012382:	2b02      	cmp	r3, #2
 8012384:	dc1a      	bgt.n	80123bc <SD_disk_ioctl+0x6c>
 8012386:	2b00      	cmp	r3, #0
 8012388:	d002      	beq.n	8012390 <SD_disk_ioctl+0x40>
 801238a:	2b01      	cmp	r3, #1
 801238c:	d006      	beq.n	801239c <SD_disk_ioctl+0x4c>
 801238e:	e015      	b.n	80123bc <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8012390:	f7ff fd16 	bl	8011dc0 <SD_PowerOff>
      res = RES_OK;
 8012394:	2300      	movs	r3, #0
 8012396:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 801239a:	e0fa      	b.n	8012592 <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 801239c:	f7ff fcce 	bl	8011d3c <SD_PowerOn>
      res = RES_OK;
 80123a0:	2300      	movs	r3, #0
 80123a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80123a6:	e0f4      	b.n	8012592 <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 80123a8:	6a3b      	ldr	r3, [r7, #32]
 80123aa:	1c5c      	adds	r4, r3, #1
 80123ac:	f7ff fd14 	bl	8011dd8 <SD_CheckPower>
 80123b0:	4603      	mov	r3, r0
 80123b2:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 80123b4:	2300      	movs	r3, #0
 80123b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80123ba:	e0ea      	b.n	8012592 <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 80123bc:	2304      	movs	r3, #4
 80123be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80123c2:	e0e6      	b.n	8012592 <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 80123c4:	4b76      	ldr	r3, [pc, #472]	@ (80125a0 <SD_disk_ioctl+0x250>)
 80123c6:	781b      	ldrb	r3, [r3, #0]
 80123c8:	b2db      	uxtb	r3, r3
 80123ca:	f003 0301 	and.w	r3, r3, #1
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d001      	beq.n	80123d6 <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 80123d2:	2303      	movs	r3, #3
 80123d4:	e0df      	b.n	8012596 <SD_disk_ioctl+0x246>
    }
    SELECT();
 80123d6:	f7ff fc21 	bl	8011c1c <SELECT>
    switch (ctrl)
 80123da:	79bb      	ldrb	r3, [r7, #6]
 80123dc:	2b0d      	cmp	r3, #13
 80123de:	f200 80c9 	bhi.w	8012574 <SD_disk_ioctl+0x224>
 80123e2:	a201      	add	r2, pc, #4	@ (adr r2, 80123e8 <SD_disk_ioctl+0x98>)
 80123e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123e8:	080124df 	.word	0x080124df
 80123ec:	08012421 	.word	0x08012421
 80123f0:	080124cf 	.word	0x080124cf
 80123f4:	08012575 	.word	0x08012575
 80123f8:	08012575 	.word	0x08012575
 80123fc:	08012575 	.word	0x08012575
 8012400:	08012575 	.word	0x08012575
 8012404:	08012575 	.word	0x08012575
 8012408:	08012575 	.word	0x08012575
 801240c:	08012575 	.word	0x08012575
 8012410:	08012575 	.word	0x08012575
 8012414:	080124f1 	.word	0x080124f1
 8012418:	08012515 	.word	0x08012515
 801241c:	08012539 	.word	0x08012539
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8012420:	2100      	movs	r1, #0
 8012422:	2049      	movs	r0, #73	@ 0x49
 8012424:	f7ff fd55 	bl	8011ed2 <SD_SendCmd>
 8012428:	4603      	mov	r3, r0
 801242a:	2b00      	cmp	r3, #0
 801242c:	f040 80a6 	bne.w	801257c <SD_disk_ioctl+0x22c>
 8012430:	f107 030c 	add.w	r3, r7, #12
 8012434:	2110      	movs	r1, #16
 8012436:	4618      	mov	r0, r3
 8012438:	f7ff fcda 	bl	8011df0 <SD_RxDataBlock>
 801243c:	4603      	mov	r3, r0
 801243e:	2b00      	cmp	r3, #0
 8012440:	f000 809c 	beq.w	801257c <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 8012444:	7b3b      	ldrb	r3, [r7, #12]
 8012446:	099b      	lsrs	r3, r3, #6
 8012448:	b2db      	uxtb	r3, r3
 801244a:	2b01      	cmp	r3, #1
 801244c:	d10d      	bne.n	801246a <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 801244e:	7d7b      	ldrb	r3, [r7, #21]
 8012450:	461a      	mov	r2, r3
 8012452:	7d3b      	ldrb	r3, [r7, #20]
 8012454:	021b      	lsls	r3, r3, #8
 8012456:	b29b      	uxth	r3, r3
 8012458:	4413      	add	r3, r2
 801245a:	b29b      	uxth	r3, r3
 801245c:	3301      	adds	r3, #1
 801245e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8012460:	8bfb      	ldrh	r3, [r7, #30]
 8012462:	029a      	lsls	r2, r3, #10
 8012464:	683b      	ldr	r3, [r7, #0]
 8012466:	601a      	str	r2, [r3, #0]
 8012468:	e02d      	b.n	80124c6 <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 801246a:	7c7b      	ldrb	r3, [r7, #17]
 801246c:	f003 030f 	and.w	r3, r3, #15
 8012470:	b2da      	uxtb	r2, r3
 8012472:	7dbb      	ldrb	r3, [r7, #22]
 8012474:	09db      	lsrs	r3, r3, #7
 8012476:	b2db      	uxtb	r3, r3
 8012478:	4413      	add	r3, r2
 801247a:	b2da      	uxtb	r2, r3
 801247c:	7d7b      	ldrb	r3, [r7, #21]
 801247e:	005b      	lsls	r3, r3, #1
 8012480:	b2db      	uxtb	r3, r3
 8012482:	f003 0306 	and.w	r3, r3, #6
 8012486:	b2db      	uxtb	r3, r3
 8012488:	4413      	add	r3, r2
 801248a:	b2db      	uxtb	r3, r3
 801248c:	3302      	adds	r3, #2
 801248e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8012492:	7d3b      	ldrb	r3, [r7, #20]
 8012494:	099b      	lsrs	r3, r3, #6
 8012496:	b2db      	uxtb	r3, r3
 8012498:	461a      	mov	r2, r3
 801249a:	7cfb      	ldrb	r3, [r7, #19]
 801249c:	009b      	lsls	r3, r3, #2
 801249e:	b29b      	uxth	r3, r3
 80124a0:	4413      	add	r3, r2
 80124a2:	b29a      	uxth	r2, r3
 80124a4:	7cbb      	ldrb	r3, [r7, #18]
 80124a6:	029b      	lsls	r3, r3, #10
 80124a8:	b29b      	uxth	r3, r3
 80124aa:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80124ae:	b29b      	uxth	r3, r3
 80124b0:	4413      	add	r3, r2
 80124b2:	b29b      	uxth	r3, r3
 80124b4:	3301      	adds	r3, #1
 80124b6:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80124b8:	8bfa      	ldrh	r2, [r7, #30]
 80124ba:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80124be:	3b09      	subs	r3, #9
 80124c0:	409a      	lsls	r2, r3
 80124c2:	683b      	ldr	r3, [r7, #0]
 80124c4:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 80124c6:	2300      	movs	r3, #0
 80124c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 80124cc:	e056      	b.n	801257c <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 80124ce:	683b      	ldr	r3, [r7, #0]
 80124d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80124d4:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80124d6:	2300      	movs	r3, #0
 80124d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80124dc:	e055      	b.n	801258a <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80124de:	f7ff fc13 	bl	8011d08 <SD_ReadyWait>
 80124e2:	4603      	mov	r3, r0
 80124e4:	2bff      	cmp	r3, #255	@ 0xff
 80124e6:	d14b      	bne.n	8012580 <SD_disk_ioctl+0x230>
 80124e8:	2300      	movs	r3, #0
 80124ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80124ee:	e047      	b.n	8012580 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80124f0:	2100      	movs	r1, #0
 80124f2:	2049      	movs	r0, #73	@ 0x49
 80124f4:	f7ff fced 	bl	8011ed2 <SD_SendCmd>
 80124f8:	4603      	mov	r3, r0
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d142      	bne.n	8012584 <SD_disk_ioctl+0x234>
 80124fe:	2110      	movs	r1, #16
 8012500:	6a38      	ldr	r0, [r7, #32]
 8012502:	f7ff fc75 	bl	8011df0 <SD_RxDataBlock>
 8012506:	4603      	mov	r3, r0
 8012508:	2b00      	cmp	r3, #0
 801250a:	d03b      	beq.n	8012584 <SD_disk_ioctl+0x234>
 801250c:	2300      	movs	r3, #0
 801250e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8012512:	e037      	b.n	8012584 <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8012514:	2100      	movs	r1, #0
 8012516:	204a      	movs	r0, #74	@ 0x4a
 8012518:	f7ff fcdb 	bl	8011ed2 <SD_SendCmd>
 801251c:	4603      	mov	r3, r0
 801251e:	2b00      	cmp	r3, #0
 8012520:	d132      	bne.n	8012588 <SD_disk_ioctl+0x238>
 8012522:	2110      	movs	r1, #16
 8012524:	6a38      	ldr	r0, [r7, #32]
 8012526:	f7ff fc63 	bl	8011df0 <SD_RxDataBlock>
 801252a:	4603      	mov	r3, r0
 801252c:	2b00      	cmp	r3, #0
 801252e:	d02b      	beq.n	8012588 <SD_disk_ioctl+0x238>
 8012530:	2300      	movs	r3, #0
 8012532:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8012536:	e027      	b.n	8012588 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8012538:	2100      	movs	r1, #0
 801253a:	207a      	movs	r0, #122	@ 0x7a
 801253c:	f7ff fcc9 	bl	8011ed2 <SD_SendCmd>
 8012540:	4603      	mov	r3, r0
 8012542:	2b00      	cmp	r3, #0
 8012544:	d116      	bne.n	8012574 <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 8012546:	2300      	movs	r3, #0
 8012548:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801254c:	e00b      	b.n	8012566 <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 801254e:	6a3c      	ldr	r4, [r7, #32]
 8012550:	1c63      	adds	r3, r4, #1
 8012552:	623b      	str	r3, [r7, #32]
 8012554:	f7ff fbae 	bl	8011cb4 <SPI_RxByte>
 8012558:	4603      	mov	r3, r0
 801255a:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 801255c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012560:	3301      	adds	r3, #1
 8012562:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012566:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801256a:	2b03      	cmp	r3, #3
 801256c:	d9ef      	bls.n	801254e <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 801256e:	2300      	movs	r3, #0
 8012570:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 8012574:	2304      	movs	r3, #4
 8012576:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801257a:	e006      	b.n	801258a <SD_disk_ioctl+0x23a>
      break;
 801257c:	bf00      	nop
 801257e:	e004      	b.n	801258a <SD_disk_ioctl+0x23a>
      break;
 8012580:	bf00      	nop
 8012582:	e002      	b.n	801258a <SD_disk_ioctl+0x23a>
      break;
 8012584:	bf00      	nop
 8012586:	e000      	b.n	801258a <SD_disk_ioctl+0x23a>
      break;
 8012588:	bf00      	nop
    }
    DESELECT();
 801258a:	f7ff fb53 	bl	8011c34 <DESELECT>
    SPI_RxByte();
 801258e:	f7ff fb91 	bl	8011cb4 <SPI_RxByte>
  }
  return res;
 8012592:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8012596:	4618      	mov	r0, r3
 8012598:	372c      	adds	r7, #44	@ 0x2c
 801259a:	46bd      	mov	sp, r7
 801259c:	bd90      	pop	{r4, r7, pc}
 801259e:	bf00      	nop
 80125a0:	240000c0 	.word	0x240000c0

080125a4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80125a4:	b580      	push	{r7, lr}
 80125a6:	b084      	sub	sp, #16
 80125a8:	af00      	add	r7, sp, #0
 80125aa:	4603      	mov	r3, r0
 80125ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80125ae:	79fb      	ldrb	r3, [r7, #7]
 80125b0:	4a08      	ldr	r2, [pc, #32]	@ (80125d4 <disk_status+0x30>)
 80125b2:	009b      	lsls	r3, r3, #2
 80125b4:	4413      	add	r3, r2
 80125b6:	685b      	ldr	r3, [r3, #4]
 80125b8:	685b      	ldr	r3, [r3, #4]
 80125ba:	79fa      	ldrb	r2, [r7, #7]
 80125bc:	4905      	ldr	r1, [pc, #20]	@ (80125d4 <disk_status+0x30>)
 80125be:	440a      	add	r2, r1
 80125c0:	7a12      	ldrb	r2, [r2, #8]
 80125c2:	4610      	mov	r0, r2
 80125c4:	4798      	blx	r3
 80125c6:	4603      	mov	r3, r0
 80125c8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80125ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80125cc:	4618      	mov	r0, r3
 80125ce:	3710      	adds	r7, #16
 80125d0:	46bd      	mov	sp, r7
 80125d2:	bd80      	pop	{r7, pc}
 80125d4:	24002948 	.word	0x24002948

080125d8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80125d8:	b590      	push	{r4, r7, lr}
 80125da:	b087      	sub	sp, #28
 80125dc:	af00      	add	r7, sp, #0
 80125de:	60b9      	str	r1, [r7, #8]
 80125e0:	607a      	str	r2, [r7, #4]
 80125e2:	603b      	str	r3, [r7, #0]
 80125e4:	4603      	mov	r3, r0
 80125e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80125e8:	7bfb      	ldrb	r3, [r7, #15]
 80125ea:	4a0a      	ldr	r2, [pc, #40]	@ (8012614 <disk_read+0x3c>)
 80125ec:	009b      	lsls	r3, r3, #2
 80125ee:	4413      	add	r3, r2
 80125f0:	685b      	ldr	r3, [r3, #4]
 80125f2:	689c      	ldr	r4, [r3, #8]
 80125f4:	7bfb      	ldrb	r3, [r7, #15]
 80125f6:	4a07      	ldr	r2, [pc, #28]	@ (8012614 <disk_read+0x3c>)
 80125f8:	4413      	add	r3, r2
 80125fa:	7a18      	ldrb	r0, [r3, #8]
 80125fc:	683b      	ldr	r3, [r7, #0]
 80125fe:	687a      	ldr	r2, [r7, #4]
 8012600:	68b9      	ldr	r1, [r7, #8]
 8012602:	47a0      	blx	r4
 8012604:	4603      	mov	r3, r0
 8012606:	75fb      	strb	r3, [r7, #23]
  return res;
 8012608:	7dfb      	ldrb	r3, [r7, #23]
}
 801260a:	4618      	mov	r0, r3
 801260c:	371c      	adds	r7, #28
 801260e:	46bd      	mov	sp, r7
 8012610:	bd90      	pop	{r4, r7, pc}
 8012612:	bf00      	nop
 8012614:	24002948 	.word	0x24002948

08012618 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8012618:	b590      	push	{r4, r7, lr}
 801261a:	b087      	sub	sp, #28
 801261c:	af00      	add	r7, sp, #0
 801261e:	60b9      	str	r1, [r7, #8]
 8012620:	607a      	str	r2, [r7, #4]
 8012622:	603b      	str	r3, [r7, #0]
 8012624:	4603      	mov	r3, r0
 8012626:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8012628:	7bfb      	ldrb	r3, [r7, #15]
 801262a:	4a0a      	ldr	r2, [pc, #40]	@ (8012654 <disk_write+0x3c>)
 801262c:	009b      	lsls	r3, r3, #2
 801262e:	4413      	add	r3, r2
 8012630:	685b      	ldr	r3, [r3, #4]
 8012632:	68dc      	ldr	r4, [r3, #12]
 8012634:	7bfb      	ldrb	r3, [r7, #15]
 8012636:	4a07      	ldr	r2, [pc, #28]	@ (8012654 <disk_write+0x3c>)
 8012638:	4413      	add	r3, r2
 801263a:	7a18      	ldrb	r0, [r3, #8]
 801263c:	683b      	ldr	r3, [r7, #0]
 801263e:	687a      	ldr	r2, [r7, #4]
 8012640:	68b9      	ldr	r1, [r7, #8]
 8012642:	47a0      	blx	r4
 8012644:	4603      	mov	r3, r0
 8012646:	75fb      	strb	r3, [r7, #23]
  return res;
 8012648:	7dfb      	ldrb	r3, [r7, #23]
}
 801264a:	4618      	mov	r0, r3
 801264c:	371c      	adds	r7, #28
 801264e:	46bd      	mov	sp, r7
 8012650:	bd90      	pop	{r4, r7, pc}
 8012652:	bf00      	nop
 8012654:	24002948 	.word	0x24002948

08012658 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012658:	b580      	push	{r7, lr}
 801265a:	b084      	sub	sp, #16
 801265c:	af00      	add	r7, sp, #0
 801265e:	4603      	mov	r3, r0
 8012660:	603a      	str	r2, [r7, #0]
 8012662:	71fb      	strb	r3, [r7, #7]
 8012664:	460b      	mov	r3, r1
 8012666:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012668:	79fb      	ldrb	r3, [r7, #7]
 801266a:	4a09      	ldr	r2, [pc, #36]	@ (8012690 <disk_ioctl+0x38>)
 801266c:	009b      	lsls	r3, r3, #2
 801266e:	4413      	add	r3, r2
 8012670:	685b      	ldr	r3, [r3, #4]
 8012672:	691b      	ldr	r3, [r3, #16]
 8012674:	79fa      	ldrb	r2, [r7, #7]
 8012676:	4906      	ldr	r1, [pc, #24]	@ (8012690 <disk_ioctl+0x38>)
 8012678:	440a      	add	r2, r1
 801267a:	7a10      	ldrb	r0, [r2, #8]
 801267c:	79b9      	ldrb	r1, [r7, #6]
 801267e:	683a      	ldr	r2, [r7, #0]
 8012680:	4798      	blx	r3
 8012682:	4603      	mov	r3, r0
 8012684:	73fb      	strb	r3, [r7, #15]
  return res;
 8012686:	7bfb      	ldrb	r3, [r7, #15]
}
 8012688:	4618      	mov	r0, r3
 801268a:	3710      	adds	r7, #16
 801268c:	46bd      	mov	sp, r7
 801268e:	bd80      	pop	{r7, pc}
 8012690:	24002948 	.word	0x24002948

08012694 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8012694:	b480      	push	{r7}
 8012696:	b085      	sub	sp, #20
 8012698:	af00      	add	r7, sp, #0
 801269a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	3301      	adds	r3, #1
 80126a0:	781b      	ldrb	r3, [r3, #0]
 80126a2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80126a4:	89fb      	ldrh	r3, [r7, #14]
 80126a6:	021b      	lsls	r3, r3, #8
 80126a8:	b21a      	sxth	r2, r3
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	781b      	ldrb	r3, [r3, #0]
 80126ae:	b21b      	sxth	r3, r3
 80126b0:	4313      	orrs	r3, r2
 80126b2:	b21b      	sxth	r3, r3
 80126b4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80126b6:	89fb      	ldrh	r3, [r7, #14]
}
 80126b8:	4618      	mov	r0, r3
 80126ba:	3714      	adds	r7, #20
 80126bc:	46bd      	mov	sp, r7
 80126be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c2:	4770      	bx	lr

080126c4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80126c4:	b480      	push	{r7}
 80126c6:	b085      	sub	sp, #20
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	3303      	adds	r3, #3
 80126d0:	781b      	ldrb	r3, [r3, #0]
 80126d2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	021b      	lsls	r3, r3, #8
 80126d8:	687a      	ldr	r2, [r7, #4]
 80126da:	3202      	adds	r2, #2
 80126dc:	7812      	ldrb	r2, [r2, #0]
 80126de:	4313      	orrs	r3, r2
 80126e0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	021b      	lsls	r3, r3, #8
 80126e6:	687a      	ldr	r2, [r7, #4]
 80126e8:	3201      	adds	r2, #1
 80126ea:	7812      	ldrb	r2, [r2, #0]
 80126ec:	4313      	orrs	r3, r2
 80126ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	021b      	lsls	r3, r3, #8
 80126f4:	687a      	ldr	r2, [r7, #4]
 80126f6:	7812      	ldrb	r2, [r2, #0]
 80126f8:	4313      	orrs	r3, r2
 80126fa:	60fb      	str	r3, [r7, #12]
	return rv;
 80126fc:	68fb      	ldr	r3, [r7, #12]
}
 80126fe:	4618      	mov	r0, r3
 8012700:	3714      	adds	r7, #20
 8012702:	46bd      	mov	sp, r7
 8012704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012708:	4770      	bx	lr

0801270a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801270a:	b480      	push	{r7}
 801270c:	b083      	sub	sp, #12
 801270e:	af00      	add	r7, sp, #0
 8012710:	6078      	str	r0, [r7, #4]
 8012712:	460b      	mov	r3, r1
 8012714:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	1c5a      	adds	r2, r3, #1
 801271a:	607a      	str	r2, [r7, #4]
 801271c:	887a      	ldrh	r2, [r7, #2]
 801271e:	b2d2      	uxtb	r2, r2
 8012720:	701a      	strb	r2, [r3, #0]
 8012722:	887b      	ldrh	r3, [r7, #2]
 8012724:	0a1b      	lsrs	r3, r3, #8
 8012726:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	1c5a      	adds	r2, r3, #1
 801272c:	607a      	str	r2, [r7, #4]
 801272e:	887a      	ldrh	r2, [r7, #2]
 8012730:	b2d2      	uxtb	r2, r2
 8012732:	701a      	strb	r2, [r3, #0]
}
 8012734:	bf00      	nop
 8012736:	370c      	adds	r7, #12
 8012738:	46bd      	mov	sp, r7
 801273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801273e:	4770      	bx	lr

08012740 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8012740:	b480      	push	{r7}
 8012742:	b083      	sub	sp, #12
 8012744:	af00      	add	r7, sp, #0
 8012746:	6078      	str	r0, [r7, #4]
 8012748:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	1c5a      	adds	r2, r3, #1
 801274e:	607a      	str	r2, [r7, #4]
 8012750:	683a      	ldr	r2, [r7, #0]
 8012752:	b2d2      	uxtb	r2, r2
 8012754:	701a      	strb	r2, [r3, #0]
 8012756:	683b      	ldr	r3, [r7, #0]
 8012758:	0a1b      	lsrs	r3, r3, #8
 801275a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	1c5a      	adds	r2, r3, #1
 8012760:	607a      	str	r2, [r7, #4]
 8012762:	683a      	ldr	r2, [r7, #0]
 8012764:	b2d2      	uxtb	r2, r2
 8012766:	701a      	strb	r2, [r3, #0]
 8012768:	683b      	ldr	r3, [r7, #0]
 801276a:	0a1b      	lsrs	r3, r3, #8
 801276c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	1c5a      	adds	r2, r3, #1
 8012772:	607a      	str	r2, [r7, #4]
 8012774:	683a      	ldr	r2, [r7, #0]
 8012776:	b2d2      	uxtb	r2, r2
 8012778:	701a      	strb	r2, [r3, #0]
 801277a:	683b      	ldr	r3, [r7, #0]
 801277c:	0a1b      	lsrs	r3, r3, #8
 801277e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	1c5a      	adds	r2, r3, #1
 8012784:	607a      	str	r2, [r7, #4]
 8012786:	683a      	ldr	r2, [r7, #0]
 8012788:	b2d2      	uxtb	r2, r2
 801278a:	701a      	strb	r2, [r3, #0]
}
 801278c:	bf00      	nop
 801278e:	370c      	adds	r7, #12
 8012790:	46bd      	mov	sp, r7
 8012792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012796:	4770      	bx	lr

08012798 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8012798:	b480      	push	{r7}
 801279a:	b087      	sub	sp, #28
 801279c:	af00      	add	r7, sp, #0
 801279e:	60f8      	str	r0, [r7, #12]
 80127a0:	60b9      	str	r1, [r7, #8]
 80127a2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80127a8:	68bb      	ldr	r3, [r7, #8]
 80127aa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d00d      	beq.n	80127ce <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80127b2:	693a      	ldr	r2, [r7, #16]
 80127b4:	1c53      	adds	r3, r2, #1
 80127b6:	613b      	str	r3, [r7, #16]
 80127b8:	697b      	ldr	r3, [r7, #20]
 80127ba:	1c59      	adds	r1, r3, #1
 80127bc:	6179      	str	r1, [r7, #20]
 80127be:	7812      	ldrb	r2, [r2, #0]
 80127c0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	3b01      	subs	r3, #1
 80127c6:	607b      	str	r3, [r7, #4]
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d1f1      	bne.n	80127b2 <mem_cpy+0x1a>
	}
}
 80127ce:	bf00      	nop
 80127d0:	371c      	adds	r7, #28
 80127d2:	46bd      	mov	sp, r7
 80127d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d8:	4770      	bx	lr

080127da <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80127da:	b480      	push	{r7}
 80127dc:	b087      	sub	sp, #28
 80127de:	af00      	add	r7, sp, #0
 80127e0:	60f8      	str	r0, [r7, #12]
 80127e2:	60b9      	str	r1, [r7, #8]
 80127e4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80127ea:	697b      	ldr	r3, [r7, #20]
 80127ec:	1c5a      	adds	r2, r3, #1
 80127ee:	617a      	str	r2, [r7, #20]
 80127f0:	68ba      	ldr	r2, [r7, #8]
 80127f2:	b2d2      	uxtb	r2, r2
 80127f4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	3b01      	subs	r3, #1
 80127fa:	607b      	str	r3, [r7, #4]
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d1f3      	bne.n	80127ea <mem_set+0x10>
}
 8012802:	bf00      	nop
 8012804:	bf00      	nop
 8012806:	371c      	adds	r7, #28
 8012808:	46bd      	mov	sp, r7
 801280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801280e:	4770      	bx	lr

08012810 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8012810:	b580      	push	{r7, lr}
 8012812:	b082      	sub	sp, #8
 8012814:	af00      	add	r7, sp, #0
 8012816:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	2b00      	cmp	r3, #0
 801281c:	d009      	beq.n	8012832 <lock_fs+0x22>
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	691b      	ldr	r3, [r3, #16]
 8012822:	4618      	mov	r0, r3
 8012824:	f000 fe6f 	bl	8013506 <ff_req_grant>
 8012828:	4603      	mov	r3, r0
 801282a:	2b00      	cmp	r3, #0
 801282c:	d001      	beq.n	8012832 <lock_fs+0x22>
 801282e:	2301      	movs	r3, #1
 8012830:	e000      	b.n	8012834 <lock_fs+0x24>
 8012832:	2300      	movs	r3, #0
}
 8012834:	4618      	mov	r0, r3
 8012836:	3708      	adds	r7, #8
 8012838:	46bd      	mov	sp, r7
 801283a:	bd80      	pop	{r7, pc}

0801283c <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 801283c:	b580      	push	{r7, lr}
 801283e:	b082      	sub	sp, #8
 8012840:	af00      	add	r7, sp, #0
 8012842:	6078      	str	r0, [r7, #4]
 8012844:	460b      	mov	r3, r1
 8012846:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	2b00      	cmp	r3, #0
 801284c:	d00d      	beq.n	801286a <unlock_fs+0x2e>
 801284e:	78fb      	ldrb	r3, [r7, #3]
 8012850:	2b0c      	cmp	r3, #12
 8012852:	d00a      	beq.n	801286a <unlock_fs+0x2e>
 8012854:	78fb      	ldrb	r3, [r7, #3]
 8012856:	2b0b      	cmp	r3, #11
 8012858:	d007      	beq.n	801286a <unlock_fs+0x2e>
 801285a:	78fb      	ldrb	r3, [r7, #3]
 801285c:	2b0f      	cmp	r3, #15
 801285e:	d004      	beq.n	801286a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	691b      	ldr	r3, [r3, #16]
 8012864:	4618      	mov	r0, r3
 8012866:	f000 fe63 	bl	8013530 <ff_rel_grant>
	}
}
 801286a:	bf00      	nop
 801286c:	3708      	adds	r7, #8
 801286e:	46bd      	mov	sp, r7
 8012870:	bd80      	pop	{r7, pc}

08012872 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8012872:	b580      	push	{r7, lr}
 8012874:	b086      	sub	sp, #24
 8012876:	af00      	add	r7, sp, #0
 8012878:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801287a:	2300      	movs	r3, #0
 801287c:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	78db      	ldrb	r3, [r3, #3]
 8012882:	2b00      	cmp	r3, #0
 8012884:	d034      	beq.n	80128f0 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801288a:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	7858      	ldrb	r0, [r3, #1]
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8012896:	2301      	movs	r3, #1
 8012898:	697a      	ldr	r2, [r7, #20]
 801289a:	f7ff febd 	bl	8012618 <disk_write>
 801289e:	4603      	mov	r3, r0
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d002      	beq.n	80128aa <sync_window+0x38>
			res = FR_DISK_ERR;
 80128a4:	2301      	movs	r3, #1
 80128a6:	73fb      	strb	r3, [r7, #15]
 80128a8:	e022      	b.n	80128f0 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	2200      	movs	r2, #0
 80128ae:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80128b4:	697a      	ldr	r2, [r7, #20]
 80128b6:	1ad2      	subs	r2, r2, r3
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	6a1b      	ldr	r3, [r3, #32]
 80128bc:	429a      	cmp	r2, r3
 80128be:	d217      	bcs.n	80128f0 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	789b      	ldrb	r3, [r3, #2]
 80128c4:	613b      	str	r3, [r7, #16]
 80128c6:	e010      	b.n	80128ea <sync_window+0x78>
					wsect += fs->fsize;
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	6a1b      	ldr	r3, [r3, #32]
 80128cc:	697a      	ldr	r2, [r7, #20]
 80128ce:	4413      	add	r3, r2
 80128d0:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	7858      	ldrb	r0, [r3, #1]
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80128dc:	2301      	movs	r3, #1
 80128de:	697a      	ldr	r2, [r7, #20]
 80128e0:	f7ff fe9a 	bl	8012618 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80128e4:	693b      	ldr	r3, [r7, #16]
 80128e6:	3b01      	subs	r3, #1
 80128e8:	613b      	str	r3, [r7, #16]
 80128ea:	693b      	ldr	r3, [r7, #16]
 80128ec:	2b01      	cmp	r3, #1
 80128ee:	d8eb      	bhi.n	80128c8 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80128f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80128f2:	4618      	mov	r0, r3
 80128f4:	3718      	adds	r7, #24
 80128f6:	46bd      	mov	sp, r7
 80128f8:	bd80      	pop	{r7, pc}

080128fa <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80128fa:	b580      	push	{r7, lr}
 80128fc:	b084      	sub	sp, #16
 80128fe:	af00      	add	r7, sp, #0
 8012900:	6078      	str	r0, [r7, #4]
 8012902:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8012904:	2300      	movs	r3, #0
 8012906:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801290c:	683a      	ldr	r2, [r7, #0]
 801290e:	429a      	cmp	r2, r3
 8012910:	d01b      	beq.n	801294a <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8012912:	6878      	ldr	r0, [r7, #4]
 8012914:	f7ff ffad 	bl	8012872 <sync_window>
 8012918:	4603      	mov	r3, r0
 801291a:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801291c:	7bfb      	ldrb	r3, [r7, #15]
 801291e:	2b00      	cmp	r3, #0
 8012920:	d113      	bne.n	801294a <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	7858      	ldrb	r0, [r3, #1]
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801292c:	2301      	movs	r3, #1
 801292e:	683a      	ldr	r2, [r7, #0]
 8012930:	f7ff fe52 	bl	80125d8 <disk_read>
 8012934:	4603      	mov	r3, r0
 8012936:	2b00      	cmp	r3, #0
 8012938:	d004      	beq.n	8012944 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801293a:	f04f 33ff 	mov.w	r3, #4294967295
 801293e:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8012940:	2301      	movs	r3, #1
 8012942:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	683a      	ldr	r2, [r7, #0]
 8012948:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 801294a:	7bfb      	ldrb	r3, [r7, #15]
}
 801294c:	4618      	mov	r0, r3
 801294e:	3710      	adds	r7, #16
 8012950:	46bd      	mov	sp, r7
 8012952:	bd80      	pop	{r7, pc}

08012954 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8012954:	b580      	push	{r7, lr}
 8012956:	b084      	sub	sp, #16
 8012958:	af00      	add	r7, sp, #0
 801295a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801295c:	6878      	ldr	r0, [r7, #4]
 801295e:	f7ff ff88 	bl	8012872 <sync_window>
 8012962:	4603      	mov	r3, r0
 8012964:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012966:	7bfb      	ldrb	r3, [r7, #15]
 8012968:	2b00      	cmp	r3, #0
 801296a:	d158      	bne.n	8012a1e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	781b      	ldrb	r3, [r3, #0]
 8012970:	2b03      	cmp	r3, #3
 8012972:	d148      	bne.n	8012a06 <sync_fs+0xb2>
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	791b      	ldrb	r3, [r3, #4]
 8012978:	2b01      	cmp	r3, #1
 801297a:	d144      	bne.n	8012a06 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	3338      	adds	r3, #56	@ 0x38
 8012980:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012984:	2100      	movs	r1, #0
 8012986:	4618      	mov	r0, r3
 8012988:	f7ff ff27 	bl	80127da <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	3338      	adds	r3, #56	@ 0x38
 8012990:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8012994:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8012998:	4618      	mov	r0, r3
 801299a:	f7ff feb6 	bl	801270a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	3338      	adds	r3, #56	@ 0x38
 80129a2:	4921      	ldr	r1, [pc, #132]	@ (8012a28 <sync_fs+0xd4>)
 80129a4:	4618      	mov	r0, r3
 80129a6:	f7ff fecb 	bl	8012740 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	3338      	adds	r3, #56	@ 0x38
 80129ae:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80129b2:	491e      	ldr	r1, [pc, #120]	@ (8012a2c <sync_fs+0xd8>)
 80129b4:	4618      	mov	r0, r3
 80129b6:	f7ff fec3 	bl	8012740 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	3338      	adds	r3, #56	@ 0x38
 80129be:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	699b      	ldr	r3, [r3, #24]
 80129c6:	4619      	mov	r1, r3
 80129c8:	4610      	mov	r0, r2
 80129ca:	f7ff feb9 	bl	8012740 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	3338      	adds	r3, #56	@ 0x38
 80129d2:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	695b      	ldr	r3, [r3, #20]
 80129da:	4619      	mov	r1, r3
 80129dc:	4610      	mov	r0, r2
 80129de:	f7ff feaf 	bl	8012740 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80129e6:	1c5a      	adds	r2, r3, #1
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	7858      	ldrb	r0, [r3, #1]
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80129fa:	2301      	movs	r3, #1
 80129fc:	f7ff fe0c 	bl	8012618 <disk_write>
			fs->fsi_flag = 0;
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	2200      	movs	r2, #0
 8012a04:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	785b      	ldrb	r3, [r3, #1]
 8012a0a:	2200      	movs	r2, #0
 8012a0c:	2100      	movs	r1, #0
 8012a0e:	4618      	mov	r0, r3
 8012a10:	f7ff fe22 	bl	8012658 <disk_ioctl>
 8012a14:	4603      	mov	r3, r0
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d001      	beq.n	8012a1e <sync_fs+0xca>
 8012a1a:	2301      	movs	r3, #1
 8012a1c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8012a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a20:	4618      	mov	r0, r3
 8012a22:	3710      	adds	r7, #16
 8012a24:	46bd      	mov	sp, r7
 8012a26:	bd80      	pop	{r7, pc}
 8012a28:	41615252 	.word	0x41615252
 8012a2c:	61417272 	.word	0x61417272

08012a30 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8012a30:	b480      	push	{r7}
 8012a32:	b083      	sub	sp, #12
 8012a34:	af00      	add	r7, sp, #0
 8012a36:	6078      	str	r0, [r7, #4]
 8012a38:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8012a3a:	683b      	ldr	r3, [r7, #0]
 8012a3c:	3b02      	subs	r3, #2
 8012a3e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	69db      	ldr	r3, [r3, #28]
 8012a44:	3b02      	subs	r3, #2
 8012a46:	683a      	ldr	r2, [r7, #0]
 8012a48:	429a      	cmp	r2, r3
 8012a4a:	d301      	bcc.n	8012a50 <clust2sect+0x20>
 8012a4c:	2300      	movs	r3, #0
 8012a4e:	e008      	b.n	8012a62 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	895b      	ldrh	r3, [r3, #10]
 8012a54:	461a      	mov	r2, r3
 8012a56:	683b      	ldr	r3, [r7, #0]
 8012a58:	fb03 f202 	mul.w	r2, r3, r2
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012a60:	4413      	add	r3, r2
}
 8012a62:	4618      	mov	r0, r3
 8012a64:	370c      	adds	r7, #12
 8012a66:	46bd      	mov	sp, r7
 8012a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a6c:	4770      	bx	lr

08012a6e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8012a6e:	b580      	push	{r7, lr}
 8012a70:	b086      	sub	sp, #24
 8012a72:	af00      	add	r7, sp, #0
 8012a74:	6078      	str	r0, [r7, #4]
 8012a76:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8012a7e:	683b      	ldr	r3, [r7, #0]
 8012a80:	2b01      	cmp	r3, #1
 8012a82:	d904      	bls.n	8012a8e <get_fat+0x20>
 8012a84:	693b      	ldr	r3, [r7, #16]
 8012a86:	69db      	ldr	r3, [r3, #28]
 8012a88:	683a      	ldr	r2, [r7, #0]
 8012a8a:	429a      	cmp	r2, r3
 8012a8c:	d302      	bcc.n	8012a94 <get_fat+0x26>
		val = 1;	/* Internal error */
 8012a8e:	2301      	movs	r3, #1
 8012a90:	617b      	str	r3, [r7, #20]
 8012a92:	e08e      	b.n	8012bb2 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8012a94:	f04f 33ff 	mov.w	r3, #4294967295
 8012a98:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8012a9a:	693b      	ldr	r3, [r7, #16]
 8012a9c:	781b      	ldrb	r3, [r3, #0]
 8012a9e:	2b03      	cmp	r3, #3
 8012aa0:	d061      	beq.n	8012b66 <get_fat+0xf8>
 8012aa2:	2b03      	cmp	r3, #3
 8012aa4:	dc7b      	bgt.n	8012b9e <get_fat+0x130>
 8012aa6:	2b01      	cmp	r3, #1
 8012aa8:	d002      	beq.n	8012ab0 <get_fat+0x42>
 8012aaa:	2b02      	cmp	r3, #2
 8012aac:	d041      	beq.n	8012b32 <get_fat+0xc4>
 8012aae:	e076      	b.n	8012b9e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8012ab0:	683b      	ldr	r3, [r7, #0]
 8012ab2:	60fb      	str	r3, [r7, #12]
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	085b      	lsrs	r3, r3, #1
 8012ab8:	68fa      	ldr	r2, [r7, #12]
 8012aba:	4413      	add	r3, r2
 8012abc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012abe:	693b      	ldr	r3, [r7, #16]
 8012ac0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	0a5b      	lsrs	r3, r3, #9
 8012ac6:	4413      	add	r3, r2
 8012ac8:	4619      	mov	r1, r3
 8012aca:	6938      	ldr	r0, [r7, #16]
 8012acc:	f7ff ff15 	bl	80128fa <move_window>
 8012ad0:	4603      	mov	r3, r0
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d166      	bne.n	8012ba4 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	1c5a      	adds	r2, r3, #1
 8012ada:	60fa      	str	r2, [r7, #12]
 8012adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012ae0:	693a      	ldr	r2, [r7, #16]
 8012ae2:	4413      	add	r3, r2
 8012ae4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012ae8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012aea:	693b      	ldr	r3, [r7, #16]
 8012aec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	0a5b      	lsrs	r3, r3, #9
 8012af2:	4413      	add	r3, r2
 8012af4:	4619      	mov	r1, r3
 8012af6:	6938      	ldr	r0, [r7, #16]
 8012af8:	f7ff feff 	bl	80128fa <move_window>
 8012afc:	4603      	mov	r3, r0
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d152      	bne.n	8012ba8 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012b08:	693a      	ldr	r2, [r7, #16]
 8012b0a:	4413      	add	r3, r2
 8012b0c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012b10:	021b      	lsls	r3, r3, #8
 8012b12:	68ba      	ldr	r2, [r7, #8]
 8012b14:	4313      	orrs	r3, r2
 8012b16:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012b18:	683b      	ldr	r3, [r7, #0]
 8012b1a:	f003 0301 	and.w	r3, r3, #1
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d002      	beq.n	8012b28 <get_fat+0xba>
 8012b22:	68bb      	ldr	r3, [r7, #8]
 8012b24:	091b      	lsrs	r3, r3, #4
 8012b26:	e002      	b.n	8012b2e <get_fat+0xc0>
 8012b28:	68bb      	ldr	r3, [r7, #8]
 8012b2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012b2e:	617b      	str	r3, [r7, #20]
			break;
 8012b30:	e03f      	b.n	8012bb2 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012b32:	693b      	ldr	r3, [r7, #16]
 8012b34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012b36:	683b      	ldr	r3, [r7, #0]
 8012b38:	0a1b      	lsrs	r3, r3, #8
 8012b3a:	4413      	add	r3, r2
 8012b3c:	4619      	mov	r1, r3
 8012b3e:	6938      	ldr	r0, [r7, #16]
 8012b40:	f7ff fedb 	bl	80128fa <move_window>
 8012b44:	4603      	mov	r3, r0
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d130      	bne.n	8012bac <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8012b4a:	693b      	ldr	r3, [r7, #16]
 8012b4c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8012b50:	683b      	ldr	r3, [r7, #0]
 8012b52:	005b      	lsls	r3, r3, #1
 8012b54:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8012b58:	4413      	add	r3, r2
 8012b5a:	4618      	mov	r0, r3
 8012b5c:	f7ff fd9a 	bl	8012694 <ld_word>
 8012b60:	4603      	mov	r3, r0
 8012b62:	617b      	str	r3, [r7, #20]
			break;
 8012b64:	e025      	b.n	8012bb2 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012b66:	693b      	ldr	r3, [r7, #16]
 8012b68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012b6a:	683b      	ldr	r3, [r7, #0]
 8012b6c:	09db      	lsrs	r3, r3, #7
 8012b6e:	4413      	add	r3, r2
 8012b70:	4619      	mov	r1, r3
 8012b72:	6938      	ldr	r0, [r7, #16]
 8012b74:	f7ff fec1 	bl	80128fa <move_window>
 8012b78:	4603      	mov	r3, r0
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d118      	bne.n	8012bb0 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012b7e:	693b      	ldr	r3, [r7, #16]
 8012b80:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8012b84:	683b      	ldr	r3, [r7, #0]
 8012b86:	009b      	lsls	r3, r3, #2
 8012b88:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8012b8c:	4413      	add	r3, r2
 8012b8e:	4618      	mov	r0, r3
 8012b90:	f7ff fd98 	bl	80126c4 <ld_dword>
 8012b94:	4603      	mov	r3, r0
 8012b96:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8012b9a:	617b      	str	r3, [r7, #20]
			break;
 8012b9c:	e009      	b.n	8012bb2 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8012b9e:	2301      	movs	r3, #1
 8012ba0:	617b      	str	r3, [r7, #20]
 8012ba2:	e006      	b.n	8012bb2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012ba4:	bf00      	nop
 8012ba6:	e004      	b.n	8012bb2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012ba8:	bf00      	nop
 8012baa:	e002      	b.n	8012bb2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012bac:	bf00      	nop
 8012bae:	e000      	b.n	8012bb2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012bb0:	bf00      	nop
		}
	}

	return val;
 8012bb2:	697b      	ldr	r3, [r7, #20]
}
 8012bb4:	4618      	mov	r0, r3
 8012bb6:	3718      	adds	r7, #24
 8012bb8:	46bd      	mov	sp, r7
 8012bba:	bd80      	pop	{r7, pc}

08012bbc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8012bbc:	b590      	push	{r4, r7, lr}
 8012bbe:	b089      	sub	sp, #36	@ 0x24
 8012bc0:	af00      	add	r7, sp, #0
 8012bc2:	60f8      	str	r0, [r7, #12]
 8012bc4:	60b9      	str	r1, [r7, #8]
 8012bc6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8012bc8:	2302      	movs	r3, #2
 8012bca:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012bcc:	68bb      	ldr	r3, [r7, #8]
 8012bce:	2b01      	cmp	r3, #1
 8012bd0:	f240 80d9 	bls.w	8012d86 <put_fat+0x1ca>
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	69db      	ldr	r3, [r3, #28]
 8012bd8:	68ba      	ldr	r2, [r7, #8]
 8012bda:	429a      	cmp	r2, r3
 8012bdc:	f080 80d3 	bcs.w	8012d86 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	781b      	ldrb	r3, [r3, #0]
 8012be4:	2b03      	cmp	r3, #3
 8012be6:	f000 8096 	beq.w	8012d16 <put_fat+0x15a>
 8012bea:	2b03      	cmp	r3, #3
 8012bec:	f300 80cb 	bgt.w	8012d86 <put_fat+0x1ca>
 8012bf0:	2b01      	cmp	r3, #1
 8012bf2:	d002      	beq.n	8012bfa <put_fat+0x3e>
 8012bf4:	2b02      	cmp	r3, #2
 8012bf6:	d06e      	beq.n	8012cd6 <put_fat+0x11a>
 8012bf8:	e0c5      	b.n	8012d86 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8012bfa:	68bb      	ldr	r3, [r7, #8]
 8012bfc:	61bb      	str	r3, [r7, #24]
 8012bfe:	69bb      	ldr	r3, [r7, #24]
 8012c00:	085b      	lsrs	r3, r3, #1
 8012c02:	69ba      	ldr	r2, [r7, #24]
 8012c04:	4413      	add	r3, r2
 8012c06:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012c0c:	69bb      	ldr	r3, [r7, #24]
 8012c0e:	0a5b      	lsrs	r3, r3, #9
 8012c10:	4413      	add	r3, r2
 8012c12:	4619      	mov	r1, r3
 8012c14:	68f8      	ldr	r0, [r7, #12]
 8012c16:	f7ff fe70 	bl	80128fa <move_window>
 8012c1a:	4603      	mov	r3, r0
 8012c1c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012c1e:	7ffb      	ldrb	r3, [r7, #31]
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	f040 80a9 	bne.w	8012d78 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8012c2c:	69bb      	ldr	r3, [r7, #24]
 8012c2e:	1c59      	adds	r1, r3, #1
 8012c30:	61b9      	str	r1, [r7, #24]
 8012c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c36:	4413      	add	r3, r2
 8012c38:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8012c3a:	68bb      	ldr	r3, [r7, #8]
 8012c3c:	f003 0301 	and.w	r3, r3, #1
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d00d      	beq.n	8012c60 <put_fat+0xa4>
 8012c44:	697b      	ldr	r3, [r7, #20]
 8012c46:	781b      	ldrb	r3, [r3, #0]
 8012c48:	b25b      	sxtb	r3, r3
 8012c4a:	f003 030f 	and.w	r3, r3, #15
 8012c4e:	b25a      	sxtb	r2, r3
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	b2db      	uxtb	r3, r3
 8012c54:	011b      	lsls	r3, r3, #4
 8012c56:	b25b      	sxtb	r3, r3
 8012c58:	4313      	orrs	r3, r2
 8012c5a:	b25b      	sxtb	r3, r3
 8012c5c:	b2db      	uxtb	r3, r3
 8012c5e:	e001      	b.n	8012c64 <put_fat+0xa8>
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	b2db      	uxtb	r3, r3
 8012c64:	697a      	ldr	r2, [r7, #20]
 8012c66:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012c68:	68fb      	ldr	r3, [r7, #12]
 8012c6a:	2201      	movs	r2, #1
 8012c6c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012c72:	69bb      	ldr	r3, [r7, #24]
 8012c74:	0a5b      	lsrs	r3, r3, #9
 8012c76:	4413      	add	r3, r2
 8012c78:	4619      	mov	r1, r3
 8012c7a:	68f8      	ldr	r0, [r7, #12]
 8012c7c:	f7ff fe3d 	bl	80128fa <move_window>
 8012c80:	4603      	mov	r3, r0
 8012c82:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012c84:	7ffb      	ldrb	r3, [r7, #31]
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d178      	bne.n	8012d7c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8012c90:	69bb      	ldr	r3, [r7, #24]
 8012c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c96:	4413      	add	r3, r2
 8012c98:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8012c9a:	68bb      	ldr	r3, [r7, #8]
 8012c9c:	f003 0301 	and.w	r3, r3, #1
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d003      	beq.n	8012cac <put_fat+0xf0>
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	091b      	lsrs	r3, r3, #4
 8012ca8:	b2db      	uxtb	r3, r3
 8012caa:	e00e      	b.n	8012cca <put_fat+0x10e>
 8012cac:	697b      	ldr	r3, [r7, #20]
 8012cae:	781b      	ldrb	r3, [r3, #0]
 8012cb0:	b25b      	sxtb	r3, r3
 8012cb2:	f023 030f 	bic.w	r3, r3, #15
 8012cb6:	b25a      	sxtb	r2, r3
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	0a1b      	lsrs	r3, r3, #8
 8012cbc:	b25b      	sxtb	r3, r3
 8012cbe:	f003 030f 	and.w	r3, r3, #15
 8012cc2:	b25b      	sxtb	r3, r3
 8012cc4:	4313      	orrs	r3, r2
 8012cc6:	b25b      	sxtb	r3, r3
 8012cc8:	b2db      	uxtb	r3, r3
 8012cca:	697a      	ldr	r2, [r7, #20]
 8012ccc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	2201      	movs	r2, #1
 8012cd2:	70da      	strb	r2, [r3, #3]
			break;
 8012cd4:	e057      	b.n	8012d86 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012cda:	68bb      	ldr	r3, [r7, #8]
 8012cdc:	0a1b      	lsrs	r3, r3, #8
 8012cde:	4413      	add	r3, r2
 8012ce0:	4619      	mov	r1, r3
 8012ce2:	68f8      	ldr	r0, [r7, #12]
 8012ce4:	f7ff fe09 	bl	80128fa <move_window>
 8012ce8:	4603      	mov	r3, r0
 8012cea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012cec:	7ffb      	ldrb	r3, [r7, #31]
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d146      	bne.n	8012d80 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8012cf8:	68bb      	ldr	r3, [r7, #8]
 8012cfa:	005b      	lsls	r3, r3, #1
 8012cfc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8012d00:	4413      	add	r3, r2
 8012d02:	687a      	ldr	r2, [r7, #4]
 8012d04:	b292      	uxth	r2, r2
 8012d06:	4611      	mov	r1, r2
 8012d08:	4618      	mov	r0, r3
 8012d0a:	f7ff fcfe 	bl	801270a <st_word>
			fs->wflag = 1;
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	2201      	movs	r2, #1
 8012d12:	70da      	strb	r2, [r3, #3]
			break;
 8012d14:	e037      	b.n	8012d86 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012d1a:	68bb      	ldr	r3, [r7, #8]
 8012d1c:	09db      	lsrs	r3, r3, #7
 8012d1e:	4413      	add	r3, r2
 8012d20:	4619      	mov	r1, r3
 8012d22:	68f8      	ldr	r0, [r7, #12]
 8012d24:	f7ff fde9 	bl	80128fa <move_window>
 8012d28:	4603      	mov	r3, r0
 8012d2a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012d2c:	7ffb      	ldrb	r3, [r7, #31]
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d128      	bne.n	8012d84 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8012d3e:	68bb      	ldr	r3, [r7, #8]
 8012d40:	009b      	lsls	r3, r3, #2
 8012d42:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8012d46:	4413      	add	r3, r2
 8012d48:	4618      	mov	r0, r3
 8012d4a:	f7ff fcbb 	bl	80126c4 <ld_dword>
 8012d4e:	4603      	mov	r3, r0
 8012d50:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8012d54:	4323      	orrs	r3, r4
 8012d56:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8012d5e:	68bb      	ldr	r3, [r7, #8]
 8012d60:	009b      	lsls	r3, r3, #2
 8012d62:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8012d66:	4413      	add	r3, r2
 8012d68:	6879      	ldr	r1, [r7, #4]
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	f7ff fce8 	bl	8012740 <st_dword>
			fs->wflag = 1;
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	2201      	movs	r2, #1
 8012d74:	70da      	strb	r2, [r3, #3]
			break;
 8012d76:	e006      	b.n	8012d86 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012d78:	bf00      	nop
 8012d7a:	e004      	b.n	8012d86 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012d7c:	bf00      	nop
 8012d7e:	e002      	b.n	8012d86 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012d80:	bf00      	nop
 8012d82:	e000      	b.n	8012d86 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012d84:	bf00      	nop
		}
	}
	return res;
 8012d86:	7ffb      	ldrb	r3, [r7, #31]
}
 8012d88:	4618      	mov	r0, r3
 8012d8a:	3724      	adds	r7, #36	@ 0x24
 8012d8c:	46bd      	mov	sp, r7
 8012d8e:	bd90      	pop	{r4, r7, pc}

08012d90 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8012d90:	b580      	push	{r7, lr}
 8012d92:	b088      	sub	sp, #32
 8012d94:	af00      	add	r7, sp, #0
 8012d96:	6078      	str	r0, [r7, #4]
 8012d98:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	681b      	ldr	r3, [r3, #0]
 8012d9e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8012da0:	683b      	ldr	r3, [r7, #0]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d10d      	bne.n	8012dc2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8012da6:	693b      	ldr	r3, [r7, #16]
 8012da8:	695b      	ldr	r3, [r3, #20]
 8012daa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012dac:	69bb      	ldr	r3, [r7, #24]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d004      	beq.n	8012dbc <create_chain+0x2c>
 8012db2:	693b      	ldr	r3, [r7, #16]
 8012db4:	69db      	ldr	r3, [r3, #28]
 8012db6:	69ba      	ldr	r2, [r7, #24]
 8012db8:	429a      	cmp	r2, r3
 8012dba:	d31b      	bcc.n	8012df4 <create_chain+0x64>
 8012dbc:	2301      	movs	r3, #1
 8012dbe:	61bb      	str	r3, [r7, #24]
 8012dc0:	e018      	b.n	8012df4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012dc2:	6839      	ldr	r1, [r7, #0]
 8012dc4:	6878      	ldr	r0, [r7, #4]
 8012dc6:	f7ff fe52 	bl	8012a6e <get_fat>
 8012dca:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	2b01      	cmp	r3, #1
 8012dd0:	d801      	bhi.n	8012dd6 <create_chain+0x46>
 8012dd2:	2301      	movs	r3, #1
 8012dd4:	e070      	b.n	8012eb8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ddc:	d101      	bne.n	8012de2 <create_chain+0x52>
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	e06a      	b.n	8012eb8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012de2:	693b      	ldr	r3, [r7, #16]
 8012de4:	69db      	ldr	r3, [r3, #28]
 8012de6:	68fa      	ldr	r2, [r7, #12]
 8012de8:	429a      	cmp	r2, r3
 8012dea:	d201      	bcs.n	8012df0 <create_chain+0x60>
 8012dec:	68fb      	ldr	r3, [r7, #12]
 8012dee:	e063      	b.n	8012eb8 <create_chain+0x128>
		scl = clst;
 8012df0:	683b      	ldr	r3, [r7, #0]
 8012df2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8012df4:	69bb      	ldr	r3, [r7, #24]
 8012df6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8012df8:	69fb      	ldr	r3, [r7, #28]
 8012dfa:	3301      	adds	r3, #1
 8012dfc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012dfe:	693b      	ldr	r3, [r7, #16]
 8012e00:	69db      	ldr	r3, [r3, #28]
 8012e02:	69fa      	ldr	r2, [r7, #28]
 8012e04:	429a      	cmp	r2, r3
 8012e06:	d307      	bcc.n	8012e18 <create_chain+0x88>
				ncl = 2;
 8012e08:	2302      	movs	r3, #2
 8012e0a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8012e0c:	69fa      	ldr	r2, [r7, #28]
 8012e0e:	69bb      	ldr	r3, [r7, #24]
 8012e10:	429a      	cmp	r2, r3
 8012e12:	d901      	bls.n	8012e18 <create_chain+0x88>
 8012e14:	2300      	movs	r3, #0
 8012e16:	e04f      	b.n	8012eb8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8012e18:	69f9      	ldr	r1, [r7, #28]
 8012e1a:	6878      	ldr	r0, [r7, #4]
 8012e1c:	f7ff fe27 	bl	8012a6e <get_fat>
 8012e20:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d00e      	beq.n	8012e46 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	2b01      	cmp	r3, #1
 8012e2c:	d003      	beq.n	8012e36 <create_chain+0xa6>
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e34:	d101      	bne.n	8012e3a <create_chain+0xaa>
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	e03e      	b.n	8012eb8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8012e3a:	69fa      	ldr	r2, [r7, #28]
 8012e3c:	69bb      	ldr	r3, [r7, #24]
 8012e3e:	429a      	cmp	r2, r3
 8012e40:	d1da      	bne.n	8012df8 <create_chain+0x68>
 8012e42:	2300      	movs	r3, #0
 8012e44:	e038      	b.n	8012eb8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8012e46:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8012e48:	f04f 32ff 	mov.w	r2, #4294967295
 8012e4c:	69f9      	ldr	r1, [r7, #28]
 8012e4e:	6938      	ldr	r0, [r7, #16]
 8012e50:	f7ff feb4 	bl	8012bbc <put_fat>
 8012e54:	4603      	mov	r3, r0
 8012e56:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8012e58:	7dfb      	ldrb	r3, [r7, #23]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d109      	bne.n	8012e72 <create_chain+0xe2>
 8012e5e:	683b      	ldr	r3, [r7, #0]
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d006      	beq.n	8012e72 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8012e64:	69fa      	ldr	r2, [r7, #28]
 8012e66:	6839      	ldr	r1, [r7, #0]
 8012e68:	6938      	ldr	r0, [r7, #16]
 8012e6a:	f7ff fea7 	bl	8012bbc <put_fat>
 8012e6e:	4603      	mov	r3, r0
 8012e70:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8012e72:	7dfb      	ldrb	r3, [r7, #23]
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d116      	bne.n	8012ea6 <create_chain+0x116>
		fs->last_clst = ncl;
 8012e78:	693b      	ldr	r3, [r7, #16]
 8012e7a:	69fa      	ldr	r2, [r7, #28]
 8012e7c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012e7e:	693b      	ldr	r3, [r7, #16]
 8012e80:	699a      	ldr	r2, [r3, #24]
 8012e82:	693b      	ldr	r3, [r7, #16]
 8012e84:	69db      	ldr	r3, [r3, #28]
 8012e86:	3b02      	subs	r3, #2
 8012e88:	429a      	cmp	r2, r3
 8012e8a:	d804      	bhi.n	8012e96 <create_chain+0x106>
 8012e8c:	693b      	ldr	r3, [r7, #16]
 8012e8e:	699b      	ldr	r3, [r3, #24]
 8012e90:	1e5a      	subs	r2, r3, #1
 8012e92:	693b      	ldr	r3, [r7, #16]
 8012e94:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8012e96:	693b      	ldr	r3, [r7, #16]
 8012e98:	791b      	ldrb	r3, [r3, #4]
 8012e9a:	f043 0301 	orr.w	r3, r3, #1
 8012e9e:	b2da      	uxtb	r2, r3
 8012ea0:	693b      	ldr	r3, [r7, #16]
 8012ea2:	711a      	strb	r2, [r3, #4]
 8012ea4:	e007      	b.n	8012eb6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012ea6:	7dfb      	ldrb	r3, [r7, #23]
 8012ea8:	2b01      	cmp	r3, #1
 8012eaa:	d102      	bne.n	8012eb2 <create_chain+0x122>
 8012eac:	f04f 33ff 	mov.w	r3, #4294967295
 8012eb0:	e000      	b.n	8012eb4 <create_chain+0x124>
 8012eb2:	2301      	movs	r3, #1
 8012eb4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012eb6:	69fb      	ldr	r3, [r7, #28]
}
 8012eb8:	4618      	mov	r0, r3
 8012eba:	3720      	adds	r7, #32
 8012ebc:	46bd      	mov	sp, r7
 8012ebe:	bd80      	pop	{r7, pc}

08012ec0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8012ec0:	b480      	push	{r7}
 8012ec2:	b087      	sub	sp, #28
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	6078      	str	r0, [r7, #4]
 8012ec8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012ed4:	3304      	adds	r3, #4
 8012ed6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8012ed8:	683b      	ldr	r3, [r7, #0]
 8012eda:	0a5b      	lsrs	r3, r3, #9
 8012edc:	68fa      	ldr	r2, [r7, #12]
 8012ede:	8952      	ldrh	r2, [r2, #10]
 8012ee0:	fbb3 f3f2 	udiv	r3, r3, r2
 8012ee4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012ee6:	693b      	ldr	r3, [r7, #16]
 8012ee8:	1d1a      	adds	r2, r3, #4
 8012eea:	613a      	str	r2, [r7, #16]
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012ef0:	68bb      	ldr	r3, [r7, #8]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d101      	bne.n	8012efa <clmt_clust+0x3a>
 8012ef6:	2300      	movs	r3, #0
 8012ef8:	e010      	b.n	8012f1c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8012efa:	697a      	ldr	r2, [r7, #20]
 8012efc:	68bb      	ldr	r3, [r7, #8]
 8012efe:	429a      	cmp	r2, r3
 8012f00:	d307      	bcc.n	8012f12 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8012f02:	697a      	ldr	r2, [r7, #20]
 8012f04:	68bb      	ldr	r3, [r7, #8]
 8012f06:	1ad3      	subs	r3, r2, r3
 8012f08:	617b      	str	r3, [r7, #20]
 8012f0a:	693b      	ldr	r3, [r7, #16]
 8012f0c:	3304      	adds	r3, #4
 8012f0e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012f10:	e7e9      	b.n	8012ee6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8012f12:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8012f14:	693b      	ldr	r3, [r7, #16]
 8012f16:	681a      	ldr	r2, [r3, #0]
 8012f18:	697b      	ldr	r3, [r7, #20]
 8012f1a:	4413      	add	r3, r2
}
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	371c      	adds	r7, #28
 8012f20:	46bd      	mov	sp, r7
 8012f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f26:	4770      	bx	lr

08012f28 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8012f28:	b580      	push	{r7, lr}
 8012f2a:	b084      	sub	sp, #16
 8012f2c:	af00      	add	r7, sp, #0
 8012f2e:	60f8      	str	r0, [r7, #12]
 8012f30:	60b9      	str	r1, [r7, #8]
 8012f32:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012f34:	68bb      	ldr	r3, [r7, #8]
 8012f36:	331a      	adds	r3, #26
 8012f38:	687a      	ldr	r2, [r7, #4]
 8012f3a:	b292      	uxth	r2, r2
 8012f3c:	4611      	mov	r1, r2
 8012f3e:	4618      	mov	r0, r3
 8012f40:	f7ff fbe3 	bl	801270a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	781b      	ldrb	r3, [r3, #0]
 8012f48:	2b03      	cmp	r3, #3
 8012f4a:	d109      	bne.n	8012f60 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012f4c:	68bb      	ldr	r3, [r7, #8]
 8012f4e:	f103 0214 	add.w	r2, r3, #20
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	0c1b      	lsrs	r3, r3, #16
 8012f56:	b29b      	uxth	r3, r3
 8012f58:	4619      	mov	r1, r3
 8012f5a:	4610      	mov	r0, r2
 8012f5c:	f7ff fbd5 	bl	801270a <st_word>
	}
}
 8012f60:	bf00      	nop
 8012f62:	3710      	adds	r7, #16
 8012f64:	46bd      	mov	sp, r7
 8012f66:	bd80      	pop	{r7, pc}

08012f68 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012f68:	b580      	push	{r7, lr}
 8012f6a:	b084      	sub	sp, #16
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	6078      	str	r0, [r7, #4]
 8012f70:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8012f72:	2309      	movs	r3, #9
 8012f74:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d02e      	beq.n	8012fda <validate+0x72>
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d02a      	beq.n	8012fda <validate+0x72>
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	781b      	ldrb	r3, [r3, #0]
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d025      	beq.n	8012fda <validate+0x72>
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	889a      	ldrh	r2, [r3, #4]
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	88db      	ldrh	r3, [r3, #6]
 8012f98:	429a      	cmp	r2, r3
 8012f9a:	d11e      	bne.n	8012fda <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	f7ff fc35 	bl	8012810 <lock_fs>
 8012fa6:	4603      	mov	r3, r0
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d014      	beq.n	8012fd6 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	785b      	ldrb	r3, [r3, #1]
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	f7ff faf6 	bl	80125a4 <disk_status>
 8012fb8:	4603      	mov	r3, r0
 8012fba:	f003 0301 	and.w	r3, r3, #1
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d102      	bne.n	8012fc8 <validate+0x60>
				res = FR_OK;
 8012fc2:	2300      	movs	r3, #0
 8012fc4:	73fb      	strb	r3, [r7, #15]
 8012fc6:	e008      	b.n	8012fda <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	2100      	movs	r1, #0
 8012fce:	4618      	mov	r0, r3
 8012fd0:	f7ff fc34 	bl	801283c <unlock_fs>
 8012fd4:	e001      	b.n	8012fda <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8012fd6:	230f      	movs	r3, #15
 8012fd8:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012fda:	7bfb      	ldrb	r3, [r7, #15]
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d102      	bne.n	8012fe6 <validate+0x7e>
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	e000      	b.n	8012fe8 <validate+0x80>
 8012fe6:	2300      	movs	r3, #0
 8012fe8:	683a      	ldr	r2, [r7, #0]
 8012fea:	6013      	str	r3, [r2, #0]
	return res;
 8012fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fee:	4618      	mov	r0, r3
 8012ff0:	3710      	adds	r7, #16
 8012ff2:	46bd      	mov	sp, r7
 8012ff4:	bd80      	pop	{r7, pc}

08012ff6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8012ff6:	b580      	push	{r7, lr}
 8012ff8:	b08c      	sub	sp, #48	@ 0x30
 8012ffa:	af00      	add	r7, sp, #0
 8012ffc:	60f8      	str	r0, [r7, #12]
 8012ffe:	60b9      	str	r1, [r7, #8]
 8013000:	607a      	str	r2, [r7, #4]
 8013002:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013004:	68bb      	ldr	r3, [r7, #8]
 8013006:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013008:	683b      	ldr	r3, [r7, #0]
 801300a:	2200      	movs	r2, #0
 801300c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	f107 0210 	add.w	r2, r7, #16
 8013014:	4611      	mov	r1, r2
 8013016:	4618      	mov	r0, r3
 8013018:	f7ff ffa6 	bl	8012f68 <validate>
 801301c:	4603      	mov	r3, r0
 801301e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013022:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013026:	2b00      	cmp	r3, #0
 8013028:	d107      	bne.n	801303a <f_write+0x44>
 801302a:	68fb      	ldr	r3, [r7, #12]
 801302c:	7d5b      	ldrb	r3, [r3, #21]
 801302e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8013032:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013036:	2b00      	cmp	r3, #0
 8013038:	d009      	beq.n	801304e <f_write+0x58>
 801303a:	693b      	ldr	r3, [r7, #16]
 801303c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8013040:	4611      	mov	r1, r2
 8013042:	4618      	mov	r0, r3
 8013044:	f7ff fbfa 	bl	801283c <unlock_fs>
 8013048:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801304c:	e173      	b.n	8013336 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	7d1b      	ldrb	r3, [r3, #20]
 8013052:	f003 0302 	and.w	r3, r3, #2
 8013056:	2b00      	cmp	r3, #0
 8013058:	d106      	bne.n	8013068 <f_write+0x72>
 801305a:	693b      	ldr	r3, [r7, #16]
 801305c:	2107      	movs	r1, #7
 801305e:	4618      	mov	r0, r3
 8013060:	f7ff fbec 	bl	801283c <unlock_fs>
 8013064:	2307      	movs	r3, #7
 8013066:	e166      	b.n	8013336 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	699a      	ldr	r2, [r3, #24]
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	441a      	add	r2, r3
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	699b      	ldr	r3, [r3, #24]
 8013074:	429a      	cmp	r2, r3
 8013076:	f080 814b 	bcs.w	8013310 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	699b      	ldr	r3, [r3, #24]
 801307e:	43db      	mvns	r3, r3
 8013080:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013082:	e145      	b.n	8013310 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013084:	68fb      	ldr	r3, [r7, #12]
 8013086:	699b      	ldr	r3, [r3, #24]
 8013088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801308c:	2b00      	cmp	r3, #0
 801308e:	f040 8101 	bne.w	8013294 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	699b      	ldr	r3, [r3, #24]
 8013096:	0a5b      	lsrs	r3, r3, #9
 8013098:	693a      	ldr	r2, [r7, #16]
 801309a:	8952      	ldrh	r2, [r2, #10]
 801309c:	3a01      	subs	r2, #1
 801309e:	4013      	ands	r3, r2
 80130a0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80130a2:	69bb      	ldr	r3, [r7, #24]
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d14d      	bne.n	8013144 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	699b      	ldr	r3, [r3, #24]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d10c      	bne.n	80130ca <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	689b      	ldr	r3, [r3, #8]
 80130b4:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80130b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d11a      	bne.n	80130f2 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	2100      	movs	r1, #0
 80130c0:	4618      	mov	r0, r3
 80130c2:	f7ff fe65 	bl	8012d90 <create_chain>
 80130c6:	62b8      	str	r0, [r7, #40]	@ 0x28
 80130c8:	e013      	b.n	80130f2 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d007      	beq.n	80130e2 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	699b      	ldr	r3, [r3, #24]
 80130d6:	4619      	mov	r1, r3
 80130d8:	68f8      	ldr	r0, [r7, #12]
 80130da:	f7ff fef1 	bl	8012ec0 <clmt_clust>
 80130de:	62b8      	str	r0, [r7, #40]	@ 0x28
 80130e0:	e007      	b.n	80130f2 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80130e2:	68fa      	ldr	r2, [r7, #12]
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	69db      	ldr	r3, [r3, #28]
 80130e8:	4619      	mov	r1, r3
 80130ea:	4610      	mov	r0, r2
 80130ec:	f7ff fe50 	bl	8012d90 <create_chain>
 80130f0:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80130f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	f000 8110 	beq.w	801331a <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80130fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130fc:	2b01      	cmp	r3, #1
 80130fe:	d109      	bne.n	8013114 <f_write+0x11e>
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	2202      	movs	r2, #2
 8013104:	755a      	strb	r2, [r3, #21]
 8013106:	693b      	ldr	r3, [r7, #16]
 8013108:	2102      	movs	r1, #2
 801310a:	4618      	mov	r0, r3
 801310c:	f7ff fb96 	bl	801283c <unlock_fs>
 8013110:	2302      	movs	r3, #2
 8013112:	e110      	b.n	8013336 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013116:	f1b3 3fff 	cmp.w	r3, #4294967295
 801311a:	d109      	bne.n	8013130 <f_write+0x13a>
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	2201      	movs	r2, #1
 8013120:	755a      	strb	r2, [r3, #21]
 8013122:	693b      	ldr	r3, [r7, #16]
 8013124:	2101      	movs	r1, #1
 8013126:	4618      	mov	r0, r3
 8013128:	f7ff fb88 	bl	801283c <unlock_fs>
 801312c:	2301      	movs	r3, #1
 801312e:	e102      	b.n	8013336 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013134:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	689b      	ldr	r3, [r3, #8]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d102      	bne.n	8013144 <f_write+0x14e>
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013142:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	7d1b      	ldrb	r3, [r3, #20]
 8013148:	b25b      	sxtb	r3, r3
 801314a:	2b00      	cmp	r3, #0
 801314c:	da1d      	bge.n	801318a <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801314e:	693b      	ldr	r3, [r7, #16]
 8013150:	7858      	ldrb	r0, [r3, #1]
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	6a1a      	ldr	r2, [r3, #32]
 801315c:	2301      	movs	r3, #1
 801315e:	f7ff fa5b 	bl	8012618 <disk_write>
 8013162:	4603      	mov	r3, r0
 8013164:	2b00      	cmp	r3, #0
 8013166:	d009      	beq.n	801317c <f_write+0x186>
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	2201      	movs	r2, #1
 801316c:	755a      	strb	r2, [r3, #21]
 801316e:	693b      	ldr	r3, [r7, #16]
 8013170:	2101      	movs	r1, #1
 8013172:	4618      	mov	r0, r3
 8013174:	f7ff fb62 	bl	801283c <unlock_fs>
 8013178:	2301      	movs	r3, #1
 801317a:	e0dc      	b.n	8013336 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	7d1b      	ldrb	r3, [r3, #20]
 8013180:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013184:	b2da      	uxtb	r2, r3
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801318a:	693a      	ldr	r2, [r7, #16]
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	69db      	ldr	r3, [r3, #28]
 8013190:	4619      	mov	r1, r3
 8013192:	4610      	mov	r0, r2
 8013194:	f7ff fc4c 	bl	8012a30 <clust2sect>
 8013198:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801319a:	697b      	ldr	r3, [r7, #20]
 801319c:	2b00      	cmp	r3, #0
 801319e:	d109      	bne.n	80131b4 <f_write+0x1be>
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	2202      	movs	r2, #2
 80131a4:	755a      	strb	r2, [r3, #21]
 80131a6:	693b      	ldr	r3, [r7, #16]
 80131a8:	2102      	movs	r1, #2
 80131aa:	4618      	mov	r0, r3
 80131ac:	f7ff fb46 	bl	801283c <unlock_fs>
 80131b0:	2302      	movs	r3, #2
 80131b2:	e0c0      	b.n	8013336 <f_write+0x340>
			sect += csect;
 80131b4:	697a      	ldr	r2, [r7, #20]
 80131b6:	69bb      	ldr	r3, [r7, #24]
 80131b8:	4413      	add	r3, r2
 80131ba:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	0a5b      	lsrs	r3, r3, #9
 80131c0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80131c2:	6a3b      	ldr	r3, [r7, #32]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d041      	beq.n	801324c <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80131c8:	69ba      	ldr	r2, [r7, #24]
 80131ca:	6a3b      	ldr	r3, [r7, #32]
 80131cc:	4413      	add	r3, r2
 80131ce:	693a      	ldr	r2, [r7, #16]
 80131d0:	8952      	ldrh	r2, [r2, #10]
 80131d2:	4293      	cmp	r3, r2
 80131d4:	d905      	bls.n	80131e2 <f_write+0x1ec>
					cc = fs->csize - csect;
 80131d6:	693b      	ldr	r3, [r7, #16]
 80131d8:	895b      	ldrh	r3, [r3, #10]
 80131da:	461a      	mov	r2, r3
 80131dc:	69bb      	ldr	r3, [r7, #24]
 80131de:	1ad3      	subs	r3, r2, r3
 80131e0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80131e2:	693b      	ldr	r3, [r7, #16]
 80131e4:	7858      	ldrb	r0, [r3, #1]
 80131e6:	6a3b      	ldr	r3, [r7, #32]
 80131e8:	697a      	ldr	r2, [r7, #20]
 80131ea:	69f9      	ldr	r1, [r7, #28]
 80131ec:	f7ff fa14 	bl	8012618 <disk_write>
 80131f0:	4603      	mov	r3, r0
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d009      	beq.n	801320a <f_write+0x214>
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	2201      	movs	r2, #1
 80131fa:	755a      	strb	r2, [r3, #21]
 80131fc:	693b      	ldr	r3, [r7, #16]
 80131fe:	2101      	movs	r1, #1
 8013200:	4618      	mov	r0, r3
 8013202:	f7ff fb1b 	bl	801283c <unlock_fs>
 8013206:	2301      	movs	r3, #1
 8013208:	e095      	b.n	8013336 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	6a1a      	ldr	r2, [r3, #32]
 801320e:	697b      	ldr	r3, [r7, #20]
 8013210:	1ad3      	subs	r3, r2, r3
 8013212:	6a3a      	ldr	r2, [r7, #32]
 8013214:	429a      	cmp	r2, r3
 8013216:	d915      	bls.n	8013244 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	6a1a      	ldr	r2, [r3, #32]
 8013222:	697b      	ldr	r3, [r7, #20]
 8013224:	1ad3      	subs	r3, r2, r3
 8013226:	025b      	lsls	r3, r3, #9
 8013228:	69fa      	ldr	r2, [r7, #28]
 801322a:	4413      	add	r3, r2
 801322c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013230:	4619      	mov	r1, r3
 8013232:	f7ff fab1 	bl	8012798 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	7d1b      	ldrb	r3, [r3, #20]
 801323a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801323e:	b2da      	uxtb	r2, r3
 8013240:	68fb      	ldr	r3, [r7, #12]
 8013242:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013244:	6a3b      	ldr	r3, [r7, #32]
 8013246:	025b      	lsls	r3, r3, #9
 8013248:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801324a:	e044      	b.n	80132d6 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	6a1b      	ldr	r3, [r3, #32]
 8013250:	697a      	ldr	r2, [r7, #20]
 8013252:	429a      	cmp	r2, r3
 8013254:	d01b      	beq.n	801328e <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	699a      	ldr	r2, [r3, #24]
 801325a:	68fb      	ldr	r3, [r7, #12]
 801325c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801325e:	429a      	cmp	r2, r3
 8013260:	d215      	bcs.n	801328e <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013262:	693b      	ldr	r3, [r7, #16]
 8013264:	7858      	ldrb	r0, [r3, #1]
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801326c:	2301      	movs	r3, #1
 801326e:	697a      	ldr	r2, [r7, #20]
 8013270:	f7ff f9b2 	bl	80125d8 <disk_read>
 8013274:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013276:	2b00      	cmp	r3, #0
 8013278:	d009      	beq.n	801328e <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	2201      	movs	r2, #1
 801327e:	755a      	strb	r2, [r3, #21]
 8013280:	693b      	ldr	r3, [r7, #16]
 8013282:	2101      	movs	r1, #1
 8013284:	4618      	mov	r0, r3
 8013286:	f7ff fad9 	bl	801283c <unlock_fs>
 801328a:	2301      	movs	r3, #1
 801328c:	e053      	b.n	8013336 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	697a      	ldr	r2, [r7, #20]
 8013292:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	699b      	ldr	r3, [r3, #24]
 8013298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801329c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80132a0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80132a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	429a      	cmp	r2, r3
 80132a8:	d901      	bls.n	80132ae <f_write+0x2b8>
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	699b      	ldr	r3, [r3, #24]
 80132b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80132bc:	4413      	add	r3, r2
 80132be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80132c0:	69f9      	ldr	r1, [r7, #28]
 80132c2:	4618      	mov	r0, r3
 80132c4:	f7ff fa68 	bl	8012798 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	7d1b      	ldrb	r3, [r3, #20]
 80132cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80132d0:	b2da      	uxtb	r2, r3
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80132d6:	69fa      	ldr	r2, [r7, #28]
 80132d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132da:	4413      	add	r3, r2
 80132dc:	61fb      	str	r3, [r7, #28]
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	699a      	ldr	r2, [r3, #24]
 80132e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132e4:	441a      	add	r2, r3
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	619a      	str	r2, [r3, #24]
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	68da      	ldr	r2, [r3, #12]
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	699b      	ldr	r3, [r3, #24]
 80132f2:	429a      	cmp	r2, r3
 80132f4:	bf38      	it	cc
 80132f6:	461a      	movcc	r2, r3
 80132f8:	68fb      	ldr	r3, [r7, #12]
 80132fa:	60da      	str	r2, [r3, #12]
 80132fc:	683b      	ldr	r3, [r7, #0]
 80132fe:	681a      	ldr	r2, [r3, #0]
 8013300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013302:	441a      	add	r2, r3
 8013304:	683b      	ldr	r3, [r7, #0]
 8013306:	601a      	str	r2, [r3, #0]
 8013308:	687a      	ldr	r2, [r7, #4]
 801330a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801330c:	1ad3      	subs	r3, r2, r3
 801330e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	2b00      	cmp	r3, #0
 8013314:	f47f aeb6 	bne.w	8013084 <f_write+0x8e>
 8013318:	e000      	b.n	801331c <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801331a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	7d1b      	ldrb	r3, [r3, #20]
 8013320:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013324:	b2da      	uxtb	r2, r3
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801332a:	693b      	ldr	r3, [r7, #16]
 801332c:	2100      	movs	r1, #0
 801332e:	4618      	mov	r0, r3
 8013330:	f7ff fa84 	bl	801283c <unlock_fs>
 8013334:	2300      	movs	r3, #0
}
 8013336:	4618      	mov	r0, r3
 8013338:	3730      	adds	r7, #48	@ 0x30
 801333a:	46bd      	mov	sp, r7
 801333c:	bd80      	pop	{r7, pc}

0801333e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801333e:	b580      	push	{r7, lr}
 8013340:	b086      	sub	sp, #24
 8013342:	af00      	add	r7, sp, #0
 8013344:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	f107 0208 	add.w	r2, r7, #8
 801334c:	4611      	mov	r1, r2
 801334e:	4618      	mov	r0, r3
 8013350:	f7ff fe0a 	bl	8012f68 <validate>
 8013354:	4603      	mov	r3, r0
 8013356:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013358:	7dfb      	ldrb	r3, [r7, #23]
 801335a:	2b00      	cmp	r3, #0
 801335c:	d16d      	bne.n	801343a <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	7d1b      	ldrb	r3, [r3, #20]
 8013362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013366:	2b00      	cmp	r3, #0
 8013368:	d067      	beq.n	801343a <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	7d1b      	ldrb	r3, [r3, #20]
 801336e:	b25b      	sxtb	r3, r3
 8013370:	2b00      	cmp	r3, #0
 8013372:	da1a      	bge.n	80133aa <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013374:	68bb      	ldr	r3, [r7, #8]
 8013376:	7858      	ldrb	r0, [r3, #1]
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	6a1a      	ldr	r2, [r3, #32]
 8013382:	2301      	movs	r3, #1
 8013384:	f7ff f948 	bl	8012618 <disk_write>
 8013388:	4603      	mov	r3, r0
 801338a:	2b00      	cmp	r3, #0
 801338c:	d006      	beq.n	801339c <f_sync+0x5e>
 801338e:	68bb      	ldr	r3, [r7, #8]
 8013390:	2101      	movs	r1, #1
 8013392:	4618      	mov	r0, r3
 8013394:	f7ff fa52 	bl	801283c <unlock_fs>
 8013398:	2301      	movs	r3, #1
 801339a:	e055      	b.n	8013448 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	7d1b      	ldrb	r3, [r3, #20]
 80133a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80133a4:	b2da      	uxtb	r2, r3
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80133aa:	f7fe fbd9 	bl	8011b60 <get_fattime>
 80133ae:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80133b0:	68ba      	ldr	r2, [r7, #8]
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80133b6:	4619      	mov	r1, r3
 80133b8:	4610      	mov	r0, r2
 80133ba:	f7ff fa9e 	bl	80128fa <move_window>
 80133be:	4603      	mov	r3, r0
 80133c0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80133c2:	7dfb      	ldrb	r3, [r7, #23]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d138      	bne.n	801343a <f_sync+0xfc>
					dir = fp->dir_ptr;
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80133cc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80133ce:	68fb      	ldr	r3, [r7, #12]
 80133d0:	330b      	adds	r3, #11
 80133d2:	781a      	ldrb	r2, [r3, #0]
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	330b      	adds	r3, #11
 80133d8:	f042 0220 	orr.w	r2, r2, #32
 80133dc:	b2d2      	uxtb	r2, r2
 80133de:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	6818      	ldr	r0, [r3, #0]
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	689b      	ldr	r3, [r3, #8]
 80133e8:	461a      	mov	r2, r3
 80133ea:	68f9      	ldr	r1, [r7, #12]
 80133ec:	f7ff fd9c 	bl	8012f28 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	f103 021c 	add.w	r2, r3, #28
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	68db      	ldr	r3, [r3, #12]
 80133fa:	4619      	mov	r1, r3
 80133fc:	4610      	mov	r0, r2
 80133fe:	f7ff f99f 	bl	8012740 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013402:	68fb      	ldr	r3, [r7, #12]
 8013404:	3316      	adds	r3, #22
 8013406:	6939      	ldr	r1, [r7, #16]
 8013408:	4618      	mov	r0, r3
 801340a:	f7ff f999 	bl	8012740 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	3312      	adds	r3, #18
 8013412:	2100      	movs	r1, #0
 8013414:	4618      	mov	r0, r3
 8013416:	f7ff f978 	bl	801270a <st_word>
					fs->wflag = 1;
 801341a:	68bb      	ldr	r3, [r7, #8]
 801341c:	2201      	movs	r2, #1
 801341e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013420:	68bb      	ldr	r3, [r7, #8]
 8013422:	4618      	mov	r0, r3
 8013424:	f7ff fa96 	bl	8012954 <sync_fs>
 8013428:	4603      	mov	r3, r0
 801342a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	7d1b      	ldrb	r3, [r3, #20]
 8013430:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013434:	b2da      	uxtb	r2, r3
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801343a:	68bb      	ldr	r3, [r7, #8]
 801343c:	7dfa      	ldrb	r2, [r7, #23]
 801343e:	4611      	mov	r1, r2
 8013440:	4618      	mov	r0, r3
 8013442:	f7ff f9fb 	bl	801283c <unlock_fs>
 8013446:	7dfb      	ldrb	r3, [r7, #23]
}
 8013448:	4618      	mov	r0, r3
 801344a:	3718      	adds	r7, #24
 801344c:	46bd      	mov	sp, r7
 801344e:	bd80      	pop	{r7, pc}

08013450 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013450:	b480      	push	{r7}
 8013452:	b087      	sub	sp, #28
 8013454:	af00      	add	r7, sp, #0
 8013456:	60f8      	str	r0, [r7, #12]
 8013458:	60b9      	str	r1, [r7, #8]
 801345a:	4613      	mov	r3, r2
 801345c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801345e:	2301      	movs	r3, #1
 8013460:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8013462:	2300      	movs	r3, #0
 8013464:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013466:	4b1f      	ldr	r3, [pc, #124]	@ (80134e4 <FATFS_LinkDriverEx+0x94>)
 8013468:	7a5b      	ldrb	r3, [r3, #9]
 801346a:	b2db      	uxtb	r3, r3
 801346c:	2b00      	cmp	r3, #0
 801346e:	d131      	bne.n	80134d4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013470:	4b1c      	ldr	r3, [pc, #112]	@ (80134e4 <FATFS_LinkDriverEx+0x94>)
 8013472:	7a5b      	ldrb	r3, [r3, #9]
 8013474:	b2db      	uxtb	r3, r3
 8013476:	461a      	mov	r2, r3
 8013478:	4b1a      	ldr	r3, [pc, #104]	@ (80134e4 <FATFS_LinkDriverEx+0x94>)
 801347a:	2100      	movs	r1, #0
 801347c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801347e:	4b19      	ldr	r3, [pc, #100]	@ (80134e4 <FATFS_LinkDriverEx+0x94>)
 8013480:	7a5b      	ldrb	r3, [r3, #9]
 8013482:	b2db      	uxtb	r3, r3
 8013484:	4a17      	ldr	r2, [pc, #92]	@ (80134e4 <FATFS_LinkDriverEx+0x94>)
 8013486:	009b      	lsls	r3, r3, #2
 8013488:	4413      	add	r3, r2
 801348a:	68fa      	ldr	r2, [r7, #12]
 801348c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801348e:	4b15      	ldr	r3, [pc, #84]	@ (80134e4 <FATFS_LinkDriverEx+0x94>)
 8013490:	7a5b      	ldrb	r3, [r3, #9]
 8013492:	b2db      	uxtb	r3, r3
 8013494:	461a      	mov	r2, r3
 8013496:	4b13      	ldr	r3, [pc, #76]	@ (80134e4 <FATFS_LinkDriverEx+0x94>)
 8013498:	4413      	add	r3, r2
 801349a:	79fa      	ldrb	r2, [r7, #7]
 801349c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801349e:	4b11      	ldr	r3, [pc, #68]	@ (80134e4 <FATFS_LinkDriverEx+0x94>)
 80134a0:	7a5b      	ldrb	r3, [r3, #9]
 80134a2:	b2db      	uxtb	r3, r3
 80134a4:	1c5a      	adds	r2, r3, #1
 80134a6:	b2d1      	uxtb	r1, r2
 80134a8:	4a0e      	ldr	r2, [pc, #56]	@ (80134e4 <FATFS_LinkDriverEx+0x94>)
 80134aa:	7251      	strb	r1, [r2, #9]
 80134ac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80134ae:	7dbb      	ldrb	r3, [r7, #22]
 80134b0:	3330      	adds	r3, #48	@ 0x30
 80134b2:	b2da      	uxtb	r2, r3
 80134b4:	68bb      	ldr	r3, [r7, #8]
 80134b6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80134b8:	68bb      	ldr	r3, [r7, #8]
 80134ba:	3301      	adds	r3, #1
 80134bc:	223a      	movs	r2, #58	@ 0x3a
 80134be:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80134c0:	68bb      	ldr	r3, [r7, #8]
 80134c2:	3302      	adds	r3, #2
 80134c4:	222f      	movs	r2, #47	@ 0x2f
 80134c6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80134c8:	68bb      	ldr	r3, [r7, #8]
 80134ca:	3303      	adds	r3, #3
 80134cc:	2200      	movs	r2, #0
 80134ce:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80134d0:	2300      	movs	r3, #0
 80134d2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80134d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80134d6:	4618      	mov	r0, r3
 80134d8:	371c      	adds	r7, #28
 80134da:	46bd      	mov	sp, r7
 80134dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134e0:	4770      	bx	lr
 80134e2:	bf00      	nop
 80134e4:	24002948 	.word	0x24002948

080134e8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80134e8:	b580      	push	{r7, lr}
 80134ea:	b082      	sub	sp, #8
 80134ec:	af00      	add	r7, sp, #0
 80134ee:	6078      	str	r0, [r7, #4]
 80134f0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80134f2:	2200      	movs	r2, #0
 80134f4:	6839      	ldr	r1, [r7, #0]
 80134f6:	6878      	ldr	r0, [r7, #4]
 80134f8:	f7ff ffaa 	bl	8013450 <FATFS_LinkDriverEx>
 80134fc:	4603      	mov	r3, r0
}
 80134fe:	4618      	mov	r0, r3
 8013500:	3708      	adds	r7, #8
 8013502:	46bd      	mov	sp, r7
 8013504:	bd80      	pop	{r7, pc}

08013506 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8013506:	b580      	push	{r7, lr}
 8013508:	b084      	sub	sp, #16
 801350a:	af00      	add	r7, sp, #0
 801350c:	6078      	str	r0, [r7, #4]
  int ret = 0;
 801350e:	2300      	movs	r3, #0
 8013510:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8013512:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8013516:	6878      	ldr	r0, [r7, #4]
 8013518:	f000 f8a6 	bl	8013668 <osSemaphoreWait>
 801351c:	4603      	mov	r3, r0
 801351e:	2b00      	cmp	r3, #0
 8013520:	d101      	bne.n	8013526 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8013522:	2301      	movs	r3, #1
 8013524:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8013526:	68fb      	ldr	r3, [r7, #12]
}
 8013528:	4618      	mov	r0, r3
 801352a:	3710      	adds	r7, #16
 801352c:	46bd      	mov	sp, r7
 801352e:	bd80      	pop	{r7, pc}

08013530 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8013530:	b580      	push	{r7, lr}
 8013532:	b082      	sub	sp, #8
 8013534:	af00      	add	r7, sp, #0
 8013536:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8013538:	6878      	ldr	r0, [r7, #4]
 801353a:	f000 f8e3 	bl	8013704 <osSemaphoreRelease>
#endif
}
 801353e:	bf00      	nop
 8013540:	3708      	adds	r7, #8
 8013542:	46bd      	mov	sp, r7
 8013544:	bd80      	pop	{r7, pc}

08013546 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8013546:	b480      	push	{r7}
 8013548:	b085      	sub	sp, #20
 801354a:	af00      	add	r7, sp, #0
 801354c:	4603      	mov	r3, r0
 801354e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8013550:	2300      	movs	r3, #0
 8013552:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8013554:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013558:	2b84      	cmp	r3, #132	@ 0x84
 801355a:	d005      	beq.n	8013568 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 801355c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	4413      	add	r3, r2
 8013564:	3303      	adds	r3, #3
 8013566:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8013568:	68fb      	ldr	r3, [r7, #12]
}
 801356a:	4618      	mov	r0, r3
 801356c:	3714      	adds	r7, #20
 801356e:	46bd      	mov	sp, r7
 8013570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013574:	4770      	bx	lr

08013576 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8013576:	b480      	push	{r7}
 8013578:	b083      	sub	sp, #12
 801357a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801357c:	f3ef 8305 	mrs	r3, IPSR
 8013580:	607b      	str	r3, [r7, #4]
  return(result);
 8013582:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8013584:	2b00      	cmp	r3, #0
 8013586:	bf14      	ite	ne
 8013588:	2301      	movne	r3, #1
 801358a:	2300      	moveq	r3, #0
 801358c:	b2db      	uxtb	r3, r3
}
 801358e:	4618      	mov	r0, r3
 8013590:	370c      	adds	r7, #12
 8013592:	46bd      	mov	sp, r7
 8013594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013598:	4770      	bx	lr

0801359a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801359a:	b580      	push	{r7, lr}
 801359c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801359e:	f000 ffb5 	bl	801450c <vTaskStartScheduler>
  
  return osOK;
 80135a2:	2300      	movs	r3, #0
}
 80135a4:	4618      	mov	r0, r3
 80135a6:	bd80      	pop	{r7, pc}

080135a8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80135a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80135aa:	b089      	sub	sp, #36	@ 0x24
 80135ac:	af04      	add	r7, sp, #16
 80135ae:	6078      	str	r0, [r7, #4]
 80135b0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	695b      	ldr	r3, [r3, #20]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d020      	beq.n	80135fc <osThreadCreate+0x54>
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	699b      	ldr	r3, [r3, #24]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d01c      	beq.n	80135fc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	685c      	ldr	r4, [r3, #4]
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	691e      	ldr	r6, [r3, #16]
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80135d4:	4618      	mov	r0, r3
 80135d6:	f7ff ffb6 	bl	8013546 <makeFreeRtosPriority>
 80135da:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	695b      	ldr	r3, [r3, #20]
 80135e0:	687a      	ldr	r2, [r7, #4]
 80135e2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80135e4:	9202      	str	r2, [sp, #8]
 80135e6:	9301      	str	r3, [sp, #4]
 80135e8:	9100      	str	r1, [sp, #0]
 80135ea:	683b      	ldr	r3, [r7, #0]
 80135ec:	4632      	mov	r2, r6
 80135ee:	4629      	mov	r1, r5
 80135f0:	4620      	mov	r0, r4
 80135f2:	f000 fdbd 	bl	8014170 <xTaskCreateStatic>
 80135f6:	4603      	mov	r3, r0
 80135f8:	60fb      	str	r3, [r7, #12]
 80135fa:	e01c      	b.n	8013636 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	685c      	ldr	r4, [r3, #4]
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013608:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013610:	4618      	mov	r0, r3
 8013612:	f7ff ff98 	bl	8013546 <makeFreeRtosPriority>
 8013616:	4602      	mov	r2, r0
 8013618:	f107 030c 	add.w	r3, r7, #12
 801361c:	9301      	str	r3, [sp, #4]
 801361e:	9200      	str	r2, [sp, #0]
 8013620:	683b      	ldr	r3, [r7, #0]
 8013622:	4632      	mov	r2, r6
 8013624:	4629      	mov	r1, r5
 8013626:	4620      	mov	r0, r4
 8013628:	f000 fe02 	bl	8014230 <xTaskCreate>
 801362c:	4603      	mov	r3, r0
 801362e:	2b01      	cmp	r3, #1
 8013630:	d001      	beq.n	8013636 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8013632:	2300      	movs	r3, #0
 8013634:	e000      	b.n	8013638 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8013636:	68fb      	ldr	r3, [r7, #12]
}
 8013638:	4618      	mov	r0, r3
 801363a:	3714      	adds	r7, #20
 801363c:	46bd      	mov	sp, r7
 801363e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013640 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8013640:	b580      	push	{r7, lr}
 8013642:	b084      	sub	sp, #16
 8013644:	af00      	add	r7, sp, #0
 8013646:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	2b00      	cmp	r3, #0
 8013650:	d001      	beq.n	8013656 <osDelay+0x16>
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	e000      	b.n	8013658 <osDelay+0x18>
 8013656:	2301      	movs	r3, #1
 8013658:	4618      	mov	r0, r3
 801365a:	f000 ff21 	bl	80144a0 <vTaskDelay>
  
  return osOK;
 801365e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8013660:	4618      	mov	r0, r3
 8013662:	3710      	adds	r7, #16
 8013664:	46bd      	mov	sp, r7
 8013666:	bd80      	pop	{r7, pc}

08013668 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8013668:	b580      	push	{r7, lr}
 801366a:	b084      	sub	sp, #16
 801366c:	af00      	add	r7, sp, #0
 801366e:	6078      	str	r0, [r7, #4]
 8013670:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8013672:	2300      	movs	r3, #0
 8013674:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	2b00      	cmp	r3, #0
 801367a:	d101      	bne.n	8013680 <osSemaphoreWait+0x18>
    return osErrorParameter;
 801367c:	2380      	movs	r3, #128	@ 0x80
 801367e:	e03a      	b.n	80136f6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8013680:	2300      	movs	r3, #0
 8013682:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8013684:	683b      	ldr	r3, [r7, #0]
 8013686:	f1b3 3fff 	cmp.w	r3, #4294967295
 801368a:	d103      	bne.n	8013694 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 801368c:	f04f 33ff 	mov.w	r3, #4294967295
 8013690:	60fb      	str	r3, [r7, #12]
 8013692:	e009      	b.n	80136a8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8013694:	683b      	ldr	r3, [r7, #0]
 8013696:	2b00      	cmp	r3, #0
 8013698:	d006      	beq.n	80136a8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 801369a:	683b      	ldr	r3, [r7, #0]
 801369c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 801369e:	68fb      	ldr	r3, [r7, #12]
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d101      	bne.n	80136a8 <osSemaphoreWait+0x40>
      ticks = 1;
 80136a4:	2301      	movs	r3, #1
 80136a6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80136a8:	f7ff ff65 	bl	8013576 <inHandlerMode>
 80136ac:	4603      	mov	r3, r0
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d017      	beq.n	80136e2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80136b2:	f107 0308 	add.w	r3, r7, #8
 80136b6:	461a      	mov	r2, r3
 80136b8:	2100      	movs	r1, #0
 80136ba:	6878      	ldr	r0, [r7, #4]
 80136bc:	f000 fbae 	bl	8013e1c <xQueueReceiveFromISR>
 80136c0:	4603      	mov	r3, r0
 80136c2:	2b01      	cmp	r3, #1
 80136c4:	d001      	beq.n	80136ca <osSemaphoreWait+0x62>
      return osErrorOS;
 80136c6:	23ff      	movs	r3, #255	@ 0xff
 80136c8:	e015      	b.n	80136f6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80136ca:	68bb      	ldr	r3, [r7, #8]
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d011      	beq.n	80136f4 <osSemaphoreWait+0x8c>
 80136d0:	4b0b      	ldr	r3, [pc, #44]	@ (8013700 <osSemaphoreWait+0x98>)
 80136d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80136d6:	601a      	str	r2, [r3, #0]
 80136d8:	f3bf 8f4f 	dsb	sy
 80136dc:	f3bf 8f6f 	isb	sy
 80136e0:	e008      	b.n	80136f4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80136e2:	68f9      	ldr	r1, [r7, #12]
 80136e4:	6878      	ldr	r0, [r7, #4]
 80136e6:	f000 fa89 	bl	8013bfc <xQueueSemaphoreTake>
 80136ea:	4603      	mov	r3, r0
 80136ec:	2b01      	cmp	r3, #1
 80136ee:	d001      	beq.n	80136f4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80136f0:	23ff      	movs	r3, #255	@ 0xff
 80136f2:	e000      	b.n	80136f6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80136f4:	2300      	movs	r3, #0
}
 80136f6:	4618      	mov	r0, r3
 80136f8:	3710      	adds	r7, #16
 80136fa:	46bd      	mov	sp, r7
 80136fc:	bd80      	pop	{r7, pc}
 80136fe:	bf00      	nop
 8013700:	e000ed04 	.word	0xe000ed04

08013704 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8013704:	b580      	push	{r7, lr}
 8013706:	b084      	sub	sp, #16
 8013708:	af00      	add	r7, sp, #0
 801370a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 801370c:	2300      	movs	r3, #0
 801370e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8013710:	2300      	movs	r3, #0
 8013712:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8013714:	f7ff ff2f 	bl	8013576 <inHandlerMode>
 8013718:	4603      	mov	r3, r0
 801371a:	2b00      	cmp	r3, #0
 801371c:	d016      	beq.n	801374c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801371e:	f107 0308 	add.w	r3, r7, #8
 8013722:	4619      	mov	r1, r3
 8013724:	6878      	ldr	r0, [r7, #4]
 8013726:	f000 f9d9 	bl	8013adc <xQueueGiveFromISR>
 801372a:	4603      	mov	r3, r0
 801372c:	2b01      	cmp	r3, #1
 801372e:	d001      	beq.n	8013734 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8013730:	23ff      	movs	r3, #255	@ 0xff
 8013732:	e017      	b.n	8013764 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8013734:	68bb      	ldr	r3, [r7, #8]
 8013736:	2b00      	cmp	r3, #0
 8013738:	d013      	beq.n	8013762 <osSemaphoreRelease+0x5e>
 801373a:	4b0c      	ldr	r3, [pc, #48]	@ (801376c <osSemaphoreRelease+0x68>)
 801373c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013740:	601a      	str	r2, [r3, #0]
 8013742:	f3bf 8f4f 	dsb	sy
 8013746:	f3bf 8f6f 	isb	sy
 801374a:	e00a      	b.n	8013762 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 801374c:	2300      	movs	r3, #0
 801374e:	2200      	movs	r2, #0
 8013750:	2100      	movs	r1, #0
 8013752:	6878      	ldr	r0, [r7, #4]
 8013754:	f000 f8c0 	bl	80138d8 <xQueueGenericSend>
 8013758:	4603      	mov	r3, r0
 801375a:	2b01      	cmp	r3, #1
 801375c:	d001      	beq.n	8013762 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 801375e:	23ff      	movs	r3, #255	@ 0xff
 8013760:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8013762:	68fb      	ldr	r3, [r7, #12]
}
 8013764:	4618      	mov	r0, r3
 8013766:	3710      	adds	r7, #16
 8013768:	46bd      	mov	sp, r7
 801376a:	bd80      	pop	{r7, pc}
 801376c:	e000ed04 	.word	0xe000ed04

08013770 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013770:	b480      	push	{r7}
 8013772:	b083      	sub	sp, #12
 8013774:	af00      	add	r7, sp, #0
 8013776:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	f103 0208 	add.w	r2, r3, #8
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	f04f 32ff 	mov.w	r2, #4294967295
 8013788:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	f103 0208 	add.w	r2, r3, #8
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	f103 0208 	add.w	r2, r3, #8
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	2200      	movs	r2, #0
 80137a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80137a4:	bf00      	nop
 80137a6:	370c      	adds	r7, #12
 80137a8:	46bd      	mov	sp, r7
 80137aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ae:	4770      	bx	lr

080137b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80137b0:	b480      	push	{r7}
 80137b2:	b083      	sub	sp, #12
 80137b4:	af00      	add	r7, sp, #0
 80137b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	2200      	movs	r2, #0
 80137bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80137be:	bf00      	nop
 80137c0:	370c      	adds	r7, #12
 80137c2:	46bd      	mov	sp, r7
 80137c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c8:	4770      	bx	lr

080137ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80137ca:	b480      	push	{r7}
 80137cc:	b085      	sub	sp, #20
 80137ce:	af00      	add	r7, sp, #0
 80137d0:	6078      	str	r0, [r7, #4]
 80137d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	685b      	ldr	r3, [r3, #4]
 80137d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80137da:	683b      	ldr	r3, [r7, #0]
 80137dc:	68fa      	ldr	r2, [r7, #12]
 80137de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	689a      	ldr	r2, [r3, #8]
 80137e4:	683b      	ldr	r3, [r7, #0]
 80137e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80137e8:	68fb      	ldr	r3, [r7, #12]
 80137ea:	689b      	ldr	r3, [r3, #8]
 80137ec:	683a      	ldr	r2, [r7, #0]
 80137ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	683a      	ldr	r2, [r7, #0]
 80137f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80137f6:	683b      	ldr	r3, [r7, #0]
 80137f8:	687a      	ldr	r2, [r7, #4]
 80137fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	681b      	ldr	r3, [r3, #0]
 8013800:	1c5a      	adds	r2, r3, #1
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	601a      	str	r2, [r3, #0]
}
 8013806:	bf00      	nop
 8013808:	3714      	adds	r7, #20
 801380a:	46bd      	mov	sp, r7
 801380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013810:	4770      	bx	lr

08013812 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013812:	b480      	push	{r7}
 8013814:	b085      	sub	sp, #20
 8013816:	af00      	add	r7, sp, #0
 8013818:	6078      	str	r0, [r7, #4]
 801381a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801381c:	683b      	ldr	r3, [r7, #0]
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013822:	68bb      	ldr	r3, [r7, #8]
 8013824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013828:	d103      	bne.n	8013832 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	691b      	ldr	r3, [r3, #16]
 801382e:	60fb      	str	r3, [r7, #12]
 8013830:	e00c      	b.n	801384c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	3308      	adds	r3, #8
 8013836:	60fb      	str	r3, [r7, #12]
 8013838:	e002      	b.n	8013840 <vListInsert+0x2e>
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	685b      	ldr	r3, [r3, #4]
 801383e:	60fb      	str	r3, [r7, #12]
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	685b      	ldr	r3, [r3, #4]
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	68ba      	ldr	r2, [r7, #8]
 8013848:	429a      	cmp	r2, r3
 801384a:	d2f6      	bcs.n	801383a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	685a      	ldr	r2, [r3, #4]
 8013850:	683b      	ldr	r3, [r7, #0]
 8013852:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013854:	683b      	ldr	r3, [r7, #0]
 8013856:	685b      	ldr	r3, [r3, #4]
 8013858:	683a      	ldr	r2, [r7, #0]
 801385a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801385c:	683b      	ldr	r3, [r7, #0]
 801385e:	68fa      	ldr	r2, [r7, #12]
 8013860:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	683a      	ldr	r2, [r7, #0]
 8013866:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013868:	683b      	ldr	r3, [r7, #0]
 801386a:	687a      	ldr	r2, [r7, #4]
 801386c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	1c5a      	adds	r2, r3, #1
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	601a      	str	r2, [r3, #0]
}
 8013878:	bf00      	nop
 801387a:	3714      	adds	r7, #20
 801387c:	46bd      	mov	sp, r7
 801387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013882:	4770      	bx	lr

08013884 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013884:	b480      	push	{r7}
 8013886:	b085      	sub	sp, #20
 8013888:	af00      	add	r7, sp, #0
 801388a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	691b      	ldr	r3, [r3, #16]
 8013890:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	685b      	ldr	r3, [r3, #4]
 8013896:	687a      	ldr	r2, [r7, #4]
 8013898:	6892      	ldr	r2, [r2, #8]
 801389a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	689b      	ldr	r3, [r3, #8]
 80138a0:	687a      	ldr	r2, [r7, #4]
 80138a2:	6852      	ldr	r2, [r2, #4]
 80138a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	685b      	ldr	r3, [r3, #4]
 80138aa:	687a      	ldr	r2, [r7, #4]
 80138ac:	429a      	cmp	r2, r3
 80138ae:	d103      	bne.n	80138b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	689a      	ldr	r2, [r3, #8]
 80138b4:	68fb      	ldr	r3, [r7, #12]
 80138b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	2200      	movs	r2, #0
 80138bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	1e5a      	subs	r2, r3, #1
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	681b      	ldr	r3, [r3, #0]
}
 80138cc:	4618      	mov	r0, r3
 80138ce:	3714      	adds	r7, #20
 80138d0:	46bd      	mov	sp, r7
 80138d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d6:	4770      	bx	lr

080138d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80138d8:	b580      	push	{r7, lr}
 80138da:	b08e      	sub	sp, #56	@ 0x38
 80138dc:	af00      	add	r7, sp, #0
 80138de:	60f8      	str	r0, [r7, #12]
 80138e0:	60b9      	str	r1, [r7, #8]
 80138e2:	607a      	str	r2, [r7, #4]
 80138e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80138e6:	2300      	movs	r3, #0
 80138e8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80138ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d10b      	bne.n	801390c <xQueueGenericSend+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80138f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80138f8:	f383 8811 	msr	BASEPRI, r3
 80138fc:	f3bf 8f6f 	isb	sy
 8013900:	f3bf 8f4f 	dsb	sy
 8013904:	62bb      	str	r3, [r7, #40]	@ 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8013906:	bf00      	nop
 8013908:	bf00      	nop
 801390a:	e7fd      	b.n	8013908 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801390c:	68bb      	ldr	r3, [r7, #8]
 801390e:	2b00      	cmp	r3, #0
 8013910:	d103      	bne.n	801391a <xQueueGenericSend+0x42>
 8013912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013916:	2b00      	cmp	r3, #0
 8013918:	d101      	bne.n	801391e <xQueueGenericSend+0x46>
 801391a:	2301      	movs	r3, #1
 801391c:	e000      	b.n	8013920 <xQueueGenericSend+0x48>
 801391e:	2300      	movs	r3, #0
 8013920:	2b00      	cmp	r3, #0
 8013922:	d10b      	bne.n	801393c <xQueueGenericSend+0x64>
	__asm volatile
 8013924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013928:	f383 8811 	msr	BASEPRI, r3
 801392c:	f3bf 8f6f 	isb	sy
 8013930:	f3bf 8f4f 	dsb	sy
 8013934:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8013936:	bf00      	nop
 8013938:	bf00      	nop
 801393a:	e7fd      	b.n	8013938 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801393c:	683b      	ldr	r3, [r7, #0]
 801393e:	2b02      	cmp	r3, #2
 8013940:	d103      	bne.n	801394a <xQueueGenericSend+0x72>
 8013942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013946:	2b01      	cmp	r3, #1
 8013948:	d101      	bne.n	801394e <xQueueGenericSend+0x76>
 801394a:	2301      	movs	r3, #1
 801394c:	e000      	b.n	8013950 <xQueueGenericSend+0x78>
 801394e:	2300      	movs	r3, #0
 8013950:	2b00      	cmp	r3, #0
 8013952:	d10b      	bne.n	801396c <xQueueGenericSend+0x94>
	__asm volatile
 8013954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013958:	f383 8811 	msr	BASEPRI, r3
 801395c:	f3bf 8f6f 	isb	sy
 8013960:	f3bf 8f4f 	dsb	sy
 8013964:	623b      	str	r3, [r7, #32]
}
 8013966:	bf00      	nop
 8013968:	bf00      	nop
 801396a:	e7fd      	b.n	8013968 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801396c:	f001 f9d8 	bl	8014d20 <xTaskGetSchedulerState>
 8013970:	4603      	mov	r3, r0
 8013972:	2b00      	cmp	r3, #0
 8013974:	d102      	bne.n	801397c <xQueueGenericSend+0xa4>
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	2b00      	cmp	r3, #0
 801397a:	d101      	bne.n	8013980 <xQueueGenericSend+0xa8>
 801397c:	2301      	movs	r3, #1
 801397e:	e000      	b.n	8013982 <xQueueGenericSend+0xaa>
 8013980:	2300      	movs	r3, #0
 8013982:	2b00      	cmp	r3, #0
 8013984:	d10b      	bne.n	801399e <xQueueGenericSend+0xc6>
	__asm volatile
 8013986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801398a:	f383 8811 	msr	BASEPRI, r3
 801398e:	f3bf 8f6f 	isb	sy
 8013992:	f3bf 8f4f 	dsb	sy
 8013996:	61fb      	str	r3, [r7, #28]
}
 8013998:	bf00      	nop
 801399a:	bf00      	nop
 801399c:	e7fd      	b.n	801399a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801399e:	f001 fd13 	bl	80153c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80139a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80139a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80139aa:	429a      	cmp	r2, r3
 80139ac:	d302      	bcc.n	80139b4 <xQueueGenericSend+0xdc>
 80139ae:	683b      	ldr	r3, [r7, #0]
 80139b0:	2b02      	cmp	r3, #2
 80139b2:	d129      	bne.n	8013a08 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80139b4:	683a      	ldr	r2, [r7, #0]
 80139b6:	68b9      	ldr	r1, [r7, #8]
 80139b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80139ba:	f000 fac9 	bl	8013f50 <prvCopyDataToQueue>
 80139be:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80139c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d010      	beq.n	80139ea <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80139c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139ca:	3324      	adds	r3, #36	@ 0x24
 80139cc:	4618      	mov	r0, r3
 80139ce:	f000 ffe7 	bl	80149a0 <xTaskRemoveFromEventList>
 80139d2:	4603      	mov	r3, r0
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d013      	beq.n	8013a00 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80139d8:	4b3f      	ldr	r3, [pc, #252]	@ (8013ad8 <xQueueGenericSend+0x200>)
 80139da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80139de:	601a      	str	r2, [r3, #0]
 80139e0:	f3bf 8f4f 	dsb	sy
 80139e4:	f3bf 8f6f 	isb	sy
 80139e8:	e00a      	b.n	8013a00 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80139ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d007      	beq.n	8013a00 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80139f0:	4b39      	ldr	r3, [pc, #228]	@ (8013ad8 <xQueueGenericSend+0x200>)
 80139f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80139f6:	601a      	str	r2, [r3, #0]
 80139f8:	f3bf 8f4f 	dsb	sy
 80139fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013a00:	f001 fd14 	bl	801542c <vPortExitCritical>
				return pdPASS;
 8013a04:	2301      	movs	r3, #1
 8013a06:	e063      	b.n	8013ad0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d103      	bne.n	8013a16 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013a0e:	f001 fd0d 	bl	801542c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013a12:	2300      	movs	r3, #0
 8013a14:	e05c      	b.n	8013ad0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d106      	bne.n	8013a2a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013a1c:	f107 0314 	add.w	r3, r7, #20
 8013a20:	4618      	mov	r0, r3
 8013a22:	f001 f821 	bl	8014a68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013a26:	2301      	movs	r3, #1
 8013a28:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013a2a:	f001 fcff 	bl	801542c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013a2e:	f000 fdcf 	bl	80145d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013a32:	f001 fcc9 	bl	80153c8 <vPortEnterCritical>
 8013a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013a3c:	b25b      	sxtb	r3, r3
 8013a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a42:	d103      	bne.n	8013a4c <xQueueGenericSend+0x174>
 8013a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a46:	2200      	movs	r2, #0
 8013a48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013a52:	b25b      	sxtb	r3, r3
 8013a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a58:	d103      	bne.n	8013a62 <xQueueGenericSend+0x18a>
 8013a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a5c:	2200      	movs	r2, #0
 8013a5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013a62:	f001 fce3 	bl	801542c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013a66:	1d3a      	adds	r2, r7, #4
 8013a68:	f107 0314 	add.w	r3, r7, #20
 8013a6c:	4611      	mov	r1, r2
 8013a6e:	4618      	mov	r0, r3
 8013a70:	f001 f810 	bl	8014a94 <xTaskCheckForTimeOut>
 8013a74:	4603      	mov	r3, r0
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d124      	bne.n	8013ac4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013a7a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013a7c:	f000 fb60 	bl	8014140 <prvIsQueueFull>
 8013a80:	4603      	mov	r3, r0
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d018      	beq.n	8013ab8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a88:	3310      	adds	r3, #16
 8013a8a:	687a      	ldr	r2, [r7, #4]
 8013a8c:	4611      	mov	r1, r2
 8013a8e:	4618      	mov	r0, r3
 8013a90:	f000 ff60 	bl	8014954 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013a94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013a96:	f000 faeb 	bl	8014070 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013a9a:	f000 fda7 	bl	80145ec <xTaskResumeAll>
 8013a9e:	4603      	mov	r3, r0
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	f47f af7c 	bne.w	801399e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8013aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8013ad8 <xQueueGenericSend+0x200>)
 8013aa8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013aac:	601a      	str	r2, [r3, #0]
 8013aae:	f3bf 8f4f 	dsb	sy
 8013ab2:	f3bf 8f6f 	isb	sy
 8013ab6:	e772      	b.n	801399e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013ab8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013aba:	f000 fad9 	bl	8014070 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013abe:	f000 fd95 	bl	80145ec <xTaskResumeAll>
 8013ac2:	e76c      	b.n	801399e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013ac4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013ac6:	f000 fad3 	bl	8014070 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013aca:	f000 fd8f 	bl	80145ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013ace:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	3738      	adds	r7, #56	@ 0x38
 8013ad4:	46bd      	mov	sp, r7
 8013ad6:	bd80      	pop	{r7, pc}
 8013ad8:	e000ed04 	.word	0xe000ed04

08013adc <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013adc:	b580      	push	{r7, lr}
 8013ade:	b08e      	sub	sp, #56	@ 0x38
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	6078      	str	r0, [r7, #4]
 8013ae4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8013aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d10b      	bne.n	8013b08 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8013af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013af4:	f383 8811 	msr	BASEPRI, r3
 8013af8:	f3bf 8f6f 	isb	sy
 8013afc:	f3bf 8f4f 	dsb	sy
 8013b00:	623b      	str	r3, [r7, #32]
}
 8013b02:	bf00      	nop
 8013b04:	bf00      	nop
 8013b06:	e7fd      	b.n	8013b04 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d00b      	beq.n	8013b28 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8013b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b14:	f383 8811 	msr	BASEPRI, r3
 8013b18:	f3bf 8f6f 	isb	sy
 8013b1c:	f3bf 8f4f 	dsb	sy
 8013b20:	61fb      	str	r3, [r7, #28]
}
 8013b22:	bf00      	nop
 8013b24:	bf00      	nop
 8013b26:	e7fd      	b.n	8013b24 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8013b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d103      	bne.n	8013b38 <xQueueGiveFromISR+0x5c>
 8013b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b32:	689b      	ldr	r3, [r3, #8]
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d101      	bne.n	8013b3c <xQueueGiveFromISR+0x60>
 8013b38:	2301      	movs	r3, #1
 8013b3a:	e000      	b.n	8013b3e <xQueueGiveFromISR+0x62>
 8013b3c:	2300      	movs	r3, #0
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d10b      	bne.n	8013b5a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8013b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b46:	f383 8811 	msr	BASEPRI, r3
 8013b4a:	f3bf 8f6f 	isb	sy
 8013b4e:	f3bf 8f4f 	dsb	sy
 8013b52:	61bb      	str	r3, [r7, #24]
}
 8013b54:	bf00      	nop
 8013b56:	bf00      	nop
 8013b58:	e7fd      	b.n	8013b56 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013b5a:	f001 fd15 	bl	8015588 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013b5e:	f3ef 8211 	mrs	r2, BASEPRI
 8013b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b66:	f383 8811 	msr	BASEPRI, r3
 8013b6a:	f3bf 8f6f 	isb	sy
 8013b6e:	f3bf 8f4f 	dsb	sy
 8013b72:	617a      	str	r2, [r7, #20]
 8013b74:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013b76:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013b7e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8013b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013b84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013b86:	429a      	cmp	r2, r3
 8013b88:	d22b      	bcs.n	8013be2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013b90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b96:	1c5a      	adds	r2, r3, #1
 8013b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b9a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013b9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ba4:	d112      	bne.n	8013bcc <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d016      	beq.n	8013bdc <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013bb0:	3324      	adds	r3, #36	@ 0x24
 8013bb2:	4618      	mov	r0, r3
 8013bb4:	f000 fef4 	bl	80149a0 <xTaskRemoveFromEventList>
 8013bb8:	4603      	mov	r3, r0
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d00e      	beq.n	8013bdc <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013bbe:	683b      	ldr	r3, [r7, #0]
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d00b      	beq.n	8013bdc <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013bc4:	683b      	ldr	r3, [r7, #0]
 8013bc6:	2201      	movs	r2, #1
 8013bc8:	601a      	str	r2, [r3, #0]
 8013bca:	e007      	b.n	8013bdc <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013bcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013bd0:	3301      	adds	r3, #1
 8013bd2:	b2db      	uxtb	r3, r3
 8013bd4:	b25a      	sxtb	r2, r3
 8013bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013bd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8013bdc:	2301      	movs	r3, #1
 8013bde:	637b      	str	r3, [r7, #52]	@ 0x34
 8013be0:	e001      	b.n	8013be6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013be2:	2300      	movs	r3, #0
 8013be4:	637b      	str	r3, [r7, #52]	@ 0x34
 8013be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013be8:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013bf0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013bf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8013bf4:	4618      	mov	r0, r3
 8013bf6:	3738      	adds	r7, #56	@ 0x38
 8013bf8:	46bd      	mov	sp, r7
 8013bfa:	bd80      	pop	{r7, pc}

08013bfc <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8013bfc:	b580      	push	{r7, lr}
 8013bfe:	b08e      	sub	sp, #56	@ 0x38
 8013c00:	af00      	add	r7, sp, #0
 8013c02:	6078      	str	r0, [r7, #4]
 8013c04:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8013c06:	2300      	movs	r3, #0
 8013c08:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8013c0e:	2300      	movs	r3, #0
 8013c10:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013c12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d10b      	bne.n	8013c30 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8013c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c1c:	f383 8811 	msr	BASEPRI, r3
 8013c20:	f3bf 8f6f 	isb	sy
 8013c24:	f3bf 8f4f 	dsb	sy
 8013c28:	623b      	str	r3, [r7, #32]
}
 8013c2a:	bf00      	nop
 8013c2c:	bf00      	nop
 8013c2e:	e7fd      	b.n	8013c2c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d00b      	beq.n	8013c50 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8013c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c3c:	f383 8811 	msr	BASEPRI, r3
 8013c40:	f3bf 8f6f 	isb	sy
 8013c44:	f3bf 8f4f 	dsb	sy
 8013c48:	61fb      	str	r3, [r7, #28]
}
 8013c4a:	bf00      	nop
 8013c4c:	bf00      	nop
 8013c4e:	e7fd      	b.n	8013c4c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013c50:	f001 f866 	bl	8014d20 <xTaskGetSchedulerState>
 8013c54:	4603      	mov	r3, r0
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d102      	bne.n	8013c60 <xQueueSemaphoreTake+0x64>
 8013c5a:	683b      	ldr	r3, [r7, #0]
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d101      	bne.n	8013c64 <xQueueSemaphoreTake+0x68>
 8013c60:	2301      	movs	r3, #1
 8013c62:	e000      	b.n	8013c66 <xQueueSemaphoreTake+0x6a>
 8013c64:	2300      	movs	r3, #0
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d10b      	bne.n	8013c82 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8013c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c6e:	f383 8811 	msr	BASEPRI, r3
 8013c72:	f3bf 8f6f 	isb	sy
 8013c76:	f3bf 8f4f 	dsb	sy
 8013c7a:	61bb      	str	r3, [r7, #24]
}
 8013c7c:	bf00      	nop
 8013c7e:	bf00      	nop
 8013c80:	e7fd      	b.n	8013c7e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013c82:	f001 fba1 	bl	80153c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8013c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c8a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8013c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d024      	beq.n	8013cdc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8013c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c94:	1e5a      	subs	r2, r3, #1
 8013c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c98:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d104      	bne.n	8013cac <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8013ca2:	f001 f9e9 	bl	8015078 <pvTaskIncrementMutexHeldCount>
 8013ca6:	4602      	mov	r2, r0
 8013ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013caa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013cae:	691b      	ldr	r3, [r3, #16]
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d00f      	beq.n	8013cd4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013cb6:	3310      	adds	r3, #16
 8013cb8:	4618      	mov	r0, r3
 8013cba:	f000 fe71 	bl	80149a0 <xTaskRemoveFromEventList>
 8013cbe:	4603      	mov	r3, r0
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d007      	beq.n	8013cd4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013cc4:	4b54      	ldr	r3, [pc, #336]	@ (8013e18 <xQueueSemaphoreTake+0x21c>)
 8013cc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013cca:	601a      	str	r2, [r3, #0]
 8013ccc:	f3bf 8f4f 	dsb	sy
 8013cd0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013cd4:	f001 fbaa 	bl	801542c <vPortExitCritical>
				return pdPASS;
 8013cd8:	2301      	movs	r3, #1
 8013cda:	e098      	b.n	8013e0e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013cdc:	683b      	ldr	r3, [r7, #0]
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d112      	bne.n	8013d08 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8013ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d00b      	beq.n	8013d00 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8013ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013cec:	f383 8811 	msr	BASEPRI, r3
 8013cf0:	f3bf 8f6f 	isb	sy
 8013cf4:	f3bf 8f4f 	dsb	sy
 8013cf8:	617b      	str	r3, [r7, #20]
}
 8013cfa:	bf00      	nop
 8013cfc:	bf00      	nop
 8013cfe:	e7fd      	b.n	8013cfc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8013d00:	f001 fb94 	bl	801542c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013d04:	2300      	movs	r3, #0
 8013d06:	e082      	b.n	8013e0e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013d08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d106      	bne.n	8013d1c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013d0e:	f107 030c 	add.w	r3, r7, #12
 8013d12:	4618      	mov	r0, r3
 8013d14:	f000 fea8 	bl	8014a68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013d18:	2301      	movs	r3, #1
 8013d1a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013d1c:	f001 fb86 	bl	801542c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013d20:	f000 fc56 	bl	80145d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013d24:	f001 fb50 	bl	80153c8 <vPortEnterCritical>
 8013d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d2a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013d2e:	b25b      	sxtb	r3, r3
 8013d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d34:	d103      	bne.n	8013d3e <xQueueSemaphoreTake+0x142>
 8013d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d38:	2200      	movs	r2, #0
 8013d3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d40:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013d44:	b25b      	sxtb	r3, r3
 8013d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d4a:	d103      	bne.n	8013d54 <xQueueSemaphoreTake+0x158>
 8013d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d4e:	2200      	movs	r2, #0
 8013d50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013d54:	f001 fb6a 	bl	801542c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013d58:	463a      	mov	r2, r7
 8013d5a:	f107 030c 	add.w	r3, r7, #12
 8013d5e:	4611      	mov	r1, r2
 8013d60:	4618      	mov	r0, r3
 8013d62:	f000 fe97 	bl	8014a94 <xTaskCheckForTimeOut>
 8013d66:	4603      	mov	r3, r0
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d132      	bne.n	8013dd2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013d6c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013d6e:	f000 f9d1 	bl	8014114 <prvIsQueueEmpty>
 8013d72:	4603      	mov	r3, r0
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d026      	beq.n	8013dc6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d7a:	681b      	ldr	r3, [r3, #0]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d109      	bne.n	8013d94 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8013d80:	f001 fb22 	bl	80153c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d86:	689b      	ldr	r3, [r3, #8]
 8013d88:	4618      	mov	r0, r3
 8013d8a:	f000 ffe7 	bl	8014d5c <xTaskPriorityInherit>
 8013d8e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8013d90:	f001 fb4c 	bl	801542c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d96:	3324      	adds	r3, #36	@ 0x24
 8013d98:	683a      	ldr	r2, [r7, #0]
 8013d9a:	4611      	mov	r1, r2
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	f000 fdd9 	bl	8014954 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013da2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013da4:	f000 f964 	bl	8014070 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013da8:	f000 fc20 	bl	80145ec <xTaskResumeAll>
 8013dac:	4603      	mov	r3, r0
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	f47f af67 	bne.w	8013c82 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8013db4:	4b18      	ldr	r3, [pc, #96]	@ (8013e18 <xQueueSemaphoreTake+0x21c>)
 8013db6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013dba:	601a      	str	r2, [r3, #0]
 8013dbc:	f3bf 8f4f 	dsb	sy
 8013dc0:	f3bf 8f6f 	isb	sy
 8013dc4:	e75d      	b.n	8013c82 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8013dc6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013dc8:	f000 f952 	bl	8014070 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013dcc:	f000 fc0e 	bl	80145ec <xTaskResumeAll>
 8013dd0:	e757      	b.n	8013c82 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8013dd2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013dd4:	f000 f94c 	bl	8014070 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013dd8:	f000 fc08 	bl	80145ec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013ddc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013dde:	f000 f999 	bl	8014114 <prvIsQueueEmpty>
 8013de2:	4603      	mov	r3, r0
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	f43f af4c 	beq.w	8013c82 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8013dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d00d      	beq.n	8013e0c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8013df0:	f001 faea 	bl	80153c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8013df4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013df6:	f000 f893 	bl	8013f20 <prvGetDisinheritPriorityAfterTimeout>
 8013dfa:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8013dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013dfe:	689b      	ldr	r3, [r3, #8]
 8013e00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013e02:	4618      	mov	r0, r3
 8013e04:	f001 f8a8 	bl	8014f58 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8013e08:	f001 fb10 	bl	801542c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013e0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013e0e:	4618      	mov	r0, r3
 8013e10:	3738      	adds	r7, #56	@ 0x38
 8013e12:	46bd      	mov	sp, r7
 8013e14:	bd80      	pop	{r7, pc}
 8013e16:	bf00      	nop
 8013e18:	e000ed04 	.word	0xe000ed04

08013e1c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013e1c:	b580      	push	{r7, lr}
 8013e1e:	b08e      	sub	sp, #56	@ 0x38
 8013e20:	af00      	add	r7, sp, #0
 8013e22:	60f8      	str	r0, [r7, #12]
 8013e24:	60b9      	str	r1, [r7, #8]
 8013e26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8013e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d10b      	bne.n	8013e4a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8013e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e36:	f383 8811 	msr	BASEPRI, r3
 8013e3a:	f3bf 8f6f 	isb	sy
 8013e3e:	f3bf 8f4f 	dsb	sy
 8013e42:	623b      	str	r3, [r7, #32]
}
 8013e44:	bf00      	nop
 8013e46:	bf00      	nop
 8013e48:	e7fd      	b.n	8013e46 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013e4a:	68bb      	ldr	r3, [r7, #8]
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d103      	bne.n	8013e58 <xQueueReceiveFromISR+0x3c>
 8013e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d101      	bne.n	8013e5c <xQueueReceiveFromISR+0x40>
 8013e58:	2301      	movs	r3, #1
 8013e5a:	e000      	b.n	8013e5e <xQueueReceiveFromISR+0x42>
 8013e5c:	2300      	movs	r3, #0
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d10b      	bne.n	8013e7a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8013e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e66:	f383 8811 	msr	BASEPRI, r3
 8013e6a:	f3bf 8f6f 	isb	sy
 8013e6e:	f3bf 8f4f 	dsb	sy
 8013e72:	61fb      	str	r3, [r7, #28]
}
 8013e74:	bf00      	nop
 8013e76:	bf00      	nop
 8013e78:	e7fd      	b.n	8013e76 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013e7a:	f001 fb85 	bl	8015588 <vPortValidateInterruptPriority>
	__asm volatile
 8013e7e:	f3ef 8211 	mrs	r2, BASEPRI
 8013e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e86:	f383 8811 	msr	BASEPRI, r3
 8013e8a:	f3bf 8f6f 	isb	sy
 8013e8e:	f3bf 8f4f 	dsb	sy
 8013e92:	61ba      	str	r2, [r7, #24]
 8013e94:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013e96:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013e9e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d02f      	beq.n	8013f06 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ea8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013eac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013eb0:	68b9      	ldr	r1, [r7, #8]
 8013eb2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013eb4:	f000 f8b6 	bl	8014024 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013eba:	1e5a      	subs	r2, r3, #1
 8013ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ebe:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013ec0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ec8:	d112      	bne.n	8013ef0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ecc:	691b      	ldr	r3, [r3, #16]
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d016      	beq.n	8013f00 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ed4:	3310      	adds	r3, #16
 8013ed6:	4618      	mov	r0, r3
 8013ed8:	f000 fd62 	bl	80149a0 <xTaskRemoveFromEventList>
 8013edc:	4603      	mov	r3, r0
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d00e      	beq.n	8013f00 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d00b      	beq.n	8013f00 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	2201      	movs	r2, #1
 8013eec:	601a      	str	r2, [r3, #0]
 8013eee:	e007      	b.n	8013f00 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013ef0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013ef4:	3301      	adds	r3, #1
 8013ef6:	b2db      	uxtb	r3, r3
 8013ef8:	b25a      	sxtb	r2, r3
 8013efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013efc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8013f00:	2301      	movs	r3, #1
 8013f02:	637b      	str	r3, [r7, #52]	@ 0x34
 8013f04:	e001      	b.n	8013f0a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8013f06:	2300      	movs	r3, #0
 8013f08:	637b      	str	r3, [r7, #52]	@ 0x34
 8013f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f0c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013f0e:	693b      	ldr	r3, [r7, #16]
 8013f10:	f383 8811 	msr	BASEPRI, r3
}
 8013f14:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013f16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8013f18:	4618      	mov	r0, r3
 8013f1a:	3738      	adds	r7, #56	@ 0x38
 8013f1c:	46bd      	mov	sp, r7
 8013f1e:	bd80      	pop	{r7, pc}

08013f20 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8013f20:	b480      	push	{r7}
 8013f22:	b085      	sub	sp, #20
 8013f24:	af00      	add	r7, sp, #0
 8013f26:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d006      	beq.n	8013f3e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013f34:	681b      	ldr	r3, [r3, #0]
 8013f36:	f1c3 0307 	rsb	r3, r3, #7
 8013f3a:	60fb      	str	r3, [r7, #12]
 8013f3c:	e001      	b.n	8013f42 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8013f3e:	2300      	movs	r3, #0
 8013f40:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8013f42:	68fb      	ldr	r3, [r7, #12]
	}
 8013f44:	4618      	mov	r0, r3
 8013f46:	3714      	adds	r7, #20
 8013f48:	46bd      	mov	sp, r7
 8013f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f4e:	4770      	bx	lr

08013f50 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013f50:	b580      	push	{r7, lr}
 8013f52:	b086      	sub	sp, #24
 8013f54:	af00      	add	r7, sp, #0
 8013f56:	60f8      	str	r0, [r7, #12]
 8013f58:	60b9      	str	r1, [r7, #8]
 8013f5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013f5c:	2300      	movs	r3, #0
 8013f5e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013f64:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d10d      	bne.n	8013f8a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d14d      	bne.n	8014012 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	689b      	ldr	r3, [r3, #8]
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	f000 ff64 	bl	8014e48 <xTaskPriorityDisinherit>
 8013f80:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	2200      	movs	r2, #0
 8013f86:	609a      	str	r2, [r3, #8]
 8013f88:	e043      	b.n	8014012 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d119      	bne.n	8013fc4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	6858      	ldr	r0, [r3, #4]
 8013f94:	68fb      	ldr	r3, [r7, #12]
 8013f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013f98:	461a      	mov	r2, r3
 8013f9a:	68b9      	ldr	r1, [r7, #8]
 8013f9c:	f002 fd0d 	bl	80169ba <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	685a      	ldr	r2, [r3, #4]
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013fa8:	441a      	add	r2, r3
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	685a      	ldr	r2, [r3, #4]
 8013fb2:	68fb      	ldr	r3, [r7, #12]
 8013fb4:	689b      	ldr	r3, [r3, #8]
 8013fb6:	429a      	cmp	r2, r3
 8013fb8:	d32b      	bcc.n	8014012 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	681a      	ldr	r2, [r3, #0]
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	605a      	str	r2, [r3, #4]
 8013fc2:	e026      	b.n	8014012 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	68d8      	ldr	r0, [r3, #12]
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013fcc:	461a      	mov	r2, r3
 8013fce:	68b9      	ldr	r1, [r7, #8]
 8013fd0:	f002 fcf3 	bl	80169ba <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013fd4:	68fb      	ldr	r3, [r7, #12]
 8013fd6:	68da      	ldr	r2, [r3, #12]
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013fdc:	425b      	negs	r3, r3
 8013fde:	441a      	add	r2, r3
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013fe4:	68fb      	ldr	r3, [r7, #12]
 8013fe6:	68da      	ldr	r2, [r3, #12]
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	429a      	cmp	r2, r3
 8013fee:	d207      	bcs.n	8014000 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	689a      	ldr	r2, [r3, #8]
 8013ff4:	68fb      	ldr	r3, [r7, #12]
 8013ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013ff8:	425b      	negs	r3, r3
 8013ffa:	441a      	add	r2, r3
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	2b02      	cmp	r3, #2
 8014004:	d105      	bne.n	8014012 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014006:	693b      	ldr	r3, [r7, #16]
 8014008:	2b00      	cmp	r3, #0
 801400a:	d002      	beq.n	8014012 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801400c:	693b      	ldr	r3, [r7, #16]
 801400e:	3b01      	subs	r3, #1
 8014010:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014012:	693b      	ldr	r3, [r7, #16]
 8014014:	1c5a      	adds	r2, r3, #1
 8014016:	68fb      	ldr	r3, [r7, #12]
 8014018:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 801401a:	697b      	ldr	r3, [r7, #20]
}
 801401c:	4618      	mov	r0, r3
 801401e:	3718      	adds	r7, #24
 8014020:	46bd      	mov	sp, r7
 8014022:	bd80      	pop	{r7, pc}

08014024 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8014024:	b580      	push	{r7, lr}
 8014026:	b082      	sub	sp, #8
 8014028:	af00      	add	r7, sp, #0
 801402a:	6078      	str	r0, [r7, #4]
 801402c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014032:	2b00      	cmp	r3, #0
 8014034:	d018      	beq.n	8014068 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	68da      	ldr	r2, [r3, #12]
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801403e:	441a      	add	r2, r3
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	68da      	ldr	r2, [r3, #12]
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	689b      	ldr	r3, [r3, #8]
 801404c:	429a      	cmp	r2, r3
 801404e:	d303      	bcc.n	8014058 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	681a      	ldr	r2, [r3, #0]
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	68d9      	ldr	r1, [r3, #12]
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014060:	461a      	mov	r2, r3
 8014062:	6838      	ldr	r0, [r7, #0]
 8014064:	f002 fca9 	bl	80169ba <memcpy>
	}
}
 8014068:	bf00      	nop
 801406a:	3708      	adds	r7, #8
 801406c:	46bd      	mov	sp, r7
 801406e:	bd80      	pop	{r7, pc}

08014070 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014070:	b580      	push	{r7, lr}
 8014072:	b084      	sub	sp, #16
 8014074:	af00      	add	r7, sp, #0
 8014076:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8014078:	f001 f9a6 	bl	80153c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014082:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014084:	e011      	b.n	80140aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801408a:	2b00      	cmp	r3, #0
 801408c:	d012      	beq.n	80140b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	3324      	adds	r3, #36	@ 0x24
 8014092:	4618      	mov	r0, r3
 8014094:	f000 fc84 	bl	80149a0 <xTaskRemoveFromEventList>
 8014098:	4603      	mov	r3, r0
 801409a:	2b00      	cmp	r3, #0
 801409c:	d001      	beq.n	80140a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801409e:	f000 fd5d 	bl	8014b5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80140a2:	7bfb      	ldrb	r3, [r7, #15]
 80140a4:	3b01      	subs	r3, #1
 80140a6:	b2db      	uxtb	r3, r3
 80140a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80140aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	dce9      	bgt.n	8014086 <prvUnlockQueue+0x16>
 80140b2:	e000      	b.n	80140b6 <prvUnlockQueue+0x46>
					break;
 80140b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	22ff      	movs	r2, #255	@ 0xff
 80140ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80140be:	f001 f9b5 	bl	801542c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80140c2:	f001 f981 	bl	80153c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80140cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80140ce:	e011      	b.n	80140f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	691b      	ldr	r3, [r3, #16]
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d012      	beq.n	80140fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	3310      	adds	r3, #16
 80140dc:	4618      	mov	r0, r3
 80140de:	f000 fc5f 	bl	80149a0 <xTaskRemoveFromEventList>
 80140e2:	4603      	mov	r3, r0
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d001      	beq.n	80140ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80140e8:	f000 fd38 	bl	8014b5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80140ec:	7bbb      	ldrb	r3, [r7, #14]
 80140ee:	3b01      	subs	r3, #1
 80140f0:	b2db      	uxtb	r3, r3
 80140f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80140f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	dce9      	bgt.n	80140d0 <prvUnlockQueue+0x60>
 80140fc:	e000      	b.n	8014100 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80140fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	22ff      	movs	r2, #255	@ 0xff
 8014104:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8014108:	f001 f990 	bl	801542c <vPortExitCritical>
}
 801410c:	bf00      	nop
 801410e:	3710      	adds	r7, #16
 8014110:	46bd      	mov	sp, r7
 8014112:	bd80      	pop	{r7, pc}

08014114 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8014114:	b580      	push	{r7, lr}
 8014116:	b084      	sub	sp, #16
 8014118:	af00      	add	r7, sp, #0
 801411a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801411c:	f001 f954 	bl	80153c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014124:	2b00      	cmp	r3, #0
 8014126:	d102      	bne.n	801412e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8014128:	2301      	movs	r3, #1
 801412a:	60fb      	str	r3, [r7, #12]
 801412c:	e001      	b.n	8014132 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801412e:	2300      	movs	r3, #0
 8014130:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014132:	f001 f97b 	bl	801542c <vPortExitCritical>

	return xReturn;
 8014136:	68fb      	ldr	r3, [r7, #12]
}
 8014138:	4618      	mov	r0, r3
 801413a:	3710      	adds	r7, #16
 801413c:	46bd      	mov	sp, r7
 801413e:	bd80      	pop	{r7, pc}

08014140 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014140:	b580      	push	{r7, lr}
 8014142:	b084      	sub	sp, #16
 8014144:	af00      	add	r7, sp, #0
 8014146:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014148:	f001 f93e 	bl	80153c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014154:	429a      	cmp	r2, r3
 8014156:	d102      	bne.n	801415e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8014158:	2301      	movs	r3, #1
 801415a:	60fb      	str	r3, [r7, #12]
 801415c:	e001      	b.n	8014162 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801415e:	2300      	movs	r3, #0
 8014160:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014162:	f001 f963 	bl	801542c <vPortExitCritical>

	return xReturn;
 8014166:	68fb      	ldr	r3, [r7, #12]
}
 8014168:	4618      	mov	r0, r3
 801416a:	3710      	adds	r7, #16
 801416c:	46bd      	mov	sp, r7
 801416e:	bd80      	pop	{r7, pc}

08014170 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014170:	b580      	push	{r7, lr}
 8014172:	b08e      	sub	sp, #56	@ 0x38
 8014174:	af04      	add	r7, sp, #16
 8014176:	60f8      	str	r0, [r7, #12]
 8014178:	60b9      	str	r1, [r7, #8]
 801417a:	607a      	str	r2, [r7, #4]
 801417c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801417e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014180:	2b00      	cmp	r3, #0
 8014182:	d10b      	bne.n	801419c <xTaskCreateStatic+0x2c>
	__asm volatile
 8014184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014188:	f383 8811 	msr	BASEPRI, r3
 801418c:	f3bf 8f6f 	isb	sy
 8014190:	f3bf 8f4f 	dsb	sy
 8014194:	623b      	str	r3, [r7, #32]
}
 8014196:	bf00      	nop
 8014198:	bf00      	nop
 801419a:	e7fd      	b.n	8014198 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801419c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d10b      	bne.n	80141ba <xTaskCreateStatic+0x4a>
	__asm volatile
 80141a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80141a6:	f383 8811 	msr	BASEPRI, r3
 80141aa:	f3bf 8f6f 	isb	sy
 80141ae:	f3bf 8f4f 	dsb	sy
 80141b2:	61fb      	str	r3, [r7, #28]
}
 80141b4:	bf00      	nop
 80141b6:	bf00      	nop
 80141b8:	e7fd      	b.n	80141b6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80141ba:	2354      	movs	r3, #84	@ 0x54
 80141bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80141be:	693b      	ldr	r3, [r7, #16]
 80141c0:	2b54      	cmp	r3, #84	@ 0x54
 80141c2:	d00b      	beq.n	80141dc <xTaskCreateStatic+0x6c>
	__asm volatile
 80141c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80141c8:	f383 8811 	msr	BASEPRI, r3
 80141cc:	f3bf 8f6f 	isb	sy
 80141d0:	f3bf 8f4f 	dsb	sy
 80141d4:	61bb      	str	r3, [r7, #24]
}
 80141d6:	bf00      	nop
 80141d8:	bf00      	nop
 80141da:	e7fd      	b.n	80141d8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80141dc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80141de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d01e      	beq.n	8014222 <xTaskCreateStatic+0xb2>
 80141e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d01b      	beq.n	8014222 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80141ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80141ec:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80141ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80141f2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80141f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141f6:	2202      	movs	r2, #2
 80141f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80141fc:	2300      	movs	r3, #0
 80141fe:	9303      	str	r3, [sp, #12]
 8014200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014202:	9302      	str	r3, [sp, #8]
 8014204:	f107 0314 	add.w	r3, r7, #20
 8014208:	9301      	str	r3, [sp, #4]
 801420a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801420c:	9300      	str	r3, [sp, #0]
 801420e:	683b      	ldr	r3, [r7, #0]
 8014210:	687a      	ldr	r2, [r7, #4]
 8014212:	68b9      	ldr	r1, [r7, #8]
 8014214:	68f8      	ldr	r0, [r7, #12]
 8014216:	f000 f850 	bl	80142ba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801421a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801421c:	f000 f8d6 	bl	80143cc <prvAddNewTaskToReadyList>
 8014220:	e001      	b.n	8014226 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8014222:	2300      	movs	r3, #0
 8014224:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014226:	697b      	ldr	r3, [r7, #20]
	}
 8014228:	4618      	mov	r0, r3
 801422a:	3728      	adds	r7, #40	@ 0x28
 801422c:	46bd      	mov	sp, r7
 801422e:	bd80      	pop	{r7, pc}

08014230 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014230:	b580      	push	{r7, lr}
 8014232:	b08c      	sub	sp, #48	@ 0x30
 8014234:	af04      	add	r7, sp, #16
 8014236:	60f8      	str	r0, [r7, #12]
 8014238:	60b9      	str	r1, [r7, #8]
 801423a:	603b      	str	r3, [r7, #0]
 801423c:	4613      	mov	r3, r2
 801423e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014240:	88fb      	ldrh	r3, [r7, #6]
 8014242:	009b      	lsls	r3, r3, #2
 8014244:	4618      	mov	r0, r3
 8014246:	f001 f9e1 	bl	801560c <pvPortMalloc>
 801424a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801424c:	697b      	ldr	r3, [r7, #20]
 801424e:	2b00      	cmp	r3, #0
 8014250:	d00e      	beq.n	8014270 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014252:	2054      	movs	r0, #84	@ 0x54
 8014254:	f001 f9da 	bl	801560c <pvPortMalloc>
 8014258:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801425a:	69fb      	ldr	r3, [r7, #28]
 801425c:	2b00      	cmp	r3, #0
 801425e:	d003      	beq.n	8014268 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014260:	69fb      	ldr	r3, [r7, #28]
 8014262:	697a      	ldr	r2, [r7, #20]
 8014264:	631a      	str	r2, [r3, #48]	@ 0x30
 8014266:	e005      	b.n	8014274 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014268:	6978      	ldr	r0, [r7, #20]
 801426a:	f001 fa9d 	bl	80157a8 <vPortFree>
 801426e:	e001      	b.n	8014274 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014270:	2300      	movs	r3, #0
 8014272:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014274:	69fb      	ldr	r3, [r7, #28]
 8014276:	2b00      	cmp	r3, #0
 8014278:	d017      	beq.n	80142aa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801427a:	69fb      	ldr	r3, [r7, #28]
 801427c:	2200      	movs	r2, #0
 801427e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014282:	88fa      	ldrh	r2, [r7, #6]
 8014284:	2300      	movs	r3, #0
 8014286:	9303      	str	r3, [sp, #12]
 8014288:	69fb      	ldr	r3, [r7, #28]
 801428a:	9302      	str	r3, [sp, #8]
 801428c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801428e:	9301      	str	r3, [sp, #4]
 8014290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014292:	9300      	str	r3, [sp, #0]
 8014294:	683b      	ldr	r3, [r7, #0]
 8014296:	68b9      	ldr	r1, [r7, #8]
 8014298:	68f8      	ldr	r0, [r7, #12]
 801429a:	f000 f80e 	bl	80142ba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801429e:	69f8      	ldr	r0, [r7, #28]
 80142a0:	f000 f894 	bl	80143cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80142a4:	2301      	movs	r3, #1
 80142a6:	61bb      	str	r3, [r7, #24]
 80142a8:	e002      	b.n	80142b0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80142aa:	f04f 33ff 	mov.w	r3, #4294967295
 80142ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80142b0:	69bb      	ldr	r3, [r7, #24]
	}
 80142b2:	4618      	mov	r0, r3
 80142b4:	3720      	adds	r7, #32
 80142b6:	46bd      	mov	sp, r7
 80142b8:	bd80      	pop	{r7, pc}

080142ba <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80142ba:	b580      	push	{r7, lr}
 80142bc:	b088      	sub	sp, #32
 80142be:	af00      	add	r7, sp, #0
 80142c0:	60f8      	str	r0, [r7, #12]
 80142c2:	60b9      	str	r1, [r7, #8]
 80142c4:	607a      	str	r2, [r7, #4]
 80142c6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80142c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80142ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80142cc:	6879      	ldr	r1, [r7, #4]
 80142ce:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80142d2:	440b      	add	r3, r1
 80142d4:	009b      	lsls	r3, r3, #2
 80142d6:	4413      	add	r3, r2
 80142d8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80142da:	69bb      	ldr	r3, [r7, #24]
 80142dc:	f023 0307 	bic.w	r3, r3, #7
 80142e0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80142e2:	69bb      	ldr	r3, [r7, #24]
 80142e4:	f003 0307 	and.w	r3, r3, #7
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d00b      	beq.n	8014304 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80142ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80142f0:	f383 8811 	msr	BASEPRI, r3
 80142f4:	f3bf 8f6f 	isb	sy
 80142f8:	f3bf 8f4f 	dsb	sy
 80142fc:	617b      	str	r3, [r7, #20]
}
 80142fe:	bf00      	nop
 8014300:	bf00      	nop
 8014302:	e7fd      	b.n	8014300 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014304:	68bb      	ldr	r3, [r7, #8]
 8014306:	2b00      	cmp	r3, #0
 8014308:	d01f      	beq.n	801434a <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801430a:	2300      	movs	r3, #0
 801430c:	61fb      	str	r3, [r7, #28]
 801430e:	e012      	b.n	8014336 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014310:	68ba      	ldr	r2, [r7, #8]
 8014312:	69fb      	ldr	r3, [r7, #28]
 8014314:	4413      	add	r3, r2
 8014316:	7819      	ldrb	r1, [r3, #0]
 8014318:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801431a:	69fb      	ldr	r3, [r7, #28]
 801431c:	4413      	add	r3, r2
 801431e:	3334      	adds	r3, #52	@ 0x34
 8014320:	460a      	mov	r2, r1
 8014322:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014324:	68ba      	ldr	r2, [r7, #8]
 8014326:	69fb      	ldr	r3, [r7, #28]
 8014328:	4413      	add	r3, r2
 801432a:	781b      	ldrb	r3, [r3, #0]
 801432c:	2b00      	cmp	r3, #0
 801432e:	d006      	beq.n	801433e <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014330:	69fb      	ldr	r3, [r7, #28]
 8014332:	3301      	adds	r3, #1
 8014334:	61fb      	str	r3, [r7, #28]
 8014336:	69fb      	ldr	r3, [r7, #28]
 8014338:	2b0f      	cmp	r3, #15
 801433a:	d9e9      	bls.n	8014310 <prvInitialiseNewTask+0x56>
 801433c:	e000      	b.n	8014340 <prvInitialiseNewTask+0x86>
			{
				break;
 801433e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014342:	2200      	movs	r2, #0
 8014344:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8014348:	e003      	b.n	8014352 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801434a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801434c:	2200      	movs	r2, #0
 801434e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014354:	2b06      	cmp	r3, #6
 8014356:	d901      	bls.n	801435c <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014358:	2306      	movs	r3, #6
 801435a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801435c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801435e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014360:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014364:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014366:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8014368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801436a:	2200      	movs	r2, #0
 801436c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801436e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014370:	3304      	adds	r3, #4
 8014372:	4618      	mov	r0, r3
 8014374:	f7ff fa1c 	bl	80137b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801437a:	3318      	adds	r3, #24
 801437c:	4618      	mov	r0, r3
 801437e:	f7ff fa17 	bl	80137b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014384:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014386:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801438a:	f1c3 0207 	rsb	r2, r3, #7
 801438e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014390:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014394:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014396:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801439a:	2200      	movs	r2, #0
 801439c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801439e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80143a0:	2200      	movs	r2, #0
 80143a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80143a6:	683a      	ldr	r2, [r7, #0]
 80143a8:	68f9      	ldr	r1, [r7, #12]
 80143aa:	69b8      	ldr	r0, [r7, #24]
 80143ac:	f000 fede 	bl	801516c <pxPortInitialiseStack>
 80143b0:	4602      	mov	r2, r0
 80143b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80143b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80143b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d002      	beq.n	80143c2 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80143bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80143c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80143c2:	bf00      	nop
 80143c4:	3720      	adds	r7, #32
 80143c6:	46bd      	mov	sp, r7
 80143c8:	bd80      	pop	{r7, pc}
	...

080143cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80143cc:	b580      	push	{r7, lr}
 80143ce:	b082      	sub	sp, #8
 80143d0:	af00      	add	r7, sp, #0
 80143d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80143d4:	f000 fff8 	bl	80153c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80143d8:	4b2a      	ldr	r3, [pc, #168]	@ (8014484 <prvAddNewTaskToReadyList+0xb8>)
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	3301      	adds	r3, #1
 80143de:	4a29      	ldr	r2, [pc, #164]	@ (8014484 <prvAddNewTaskToReadyList+0xb8>)
 80143e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80143e2:	4b29      	ldr	r3, [pc, #164]	@ (8014488 <prvAddNewTaskToReadyList+0xbc>)
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d109      	bne.n	80143fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80143ea:	4a27      	ldr	r2, [pc, #156]	@ (8014488 <prvAddNewTaskToReadyList+0xbc>)
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80143f0:	4b24      	ldr	r3, [pc, #144]	@ (8014484 <prvAddNewTaskToReadyList+0xb8>)
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	2b01      	cmp	r3, #1
 80143f6:	d110      	bne.n	801441a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80143f8:	f000 fbd4 	bl	8014ba4 <prvInitialiseTaskLists>
 80143fc:	e00d      	b.n	801441a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80143fe:	4b23      	ldr	r3, [pc, #140]	@ (801448c <prvAddNewTaskToReadyList+0xc0>)
 8014400:	681b      	ldr	r3, [r3, #0]
 8014402:	2b00      	cmp	r3, #0
 8014404:	d109      	bne.n	801441a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014406:	4b20      	ldr	r3, [pc, #128]	@ (8014488 <prvAddNewTaskToReadyList+0xbc>)
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014410:	429a      	cmp	r2, r3
 8014412:	d802      	bhi.n	801441a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014414:	4a1c      	ldr	r2, [pc, #112]	@ (8014488 <prvAddNewTaskToReadyList+0xbc>)
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801441a:	4b1d      	ldr	r3, [pc, #116]	@ (8014490 <prvAddNewTaskToReadyList+0xc4>)
 801441c:	681b      	ldr	r3, [r3, #0]
 801441e:	3301      	adds	r3, #1
 8014420:	4a1b      	ldr	r2, [pc, #108]	@ (8014490 <prvAddNewTaskToReadyList+0xc4>)
 8014422:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014428:	2201      	movs	r2, #1
 801442a:	409a      	lsls	r2, r3
 801442c:	4b19      	ldr	r3, [pc, #100]	@ (8014494 <prvAddNewTaskToReadyList+0xc8>)
 801442e:	681b      	ldr	r3, [r3, #0]
 8014430:	4313      	orrs	r3, r2
 8014432:	4a18      	ldr	r2, [pc, #96]	@ (8014494 <prvAddNewTaskToReadyList+0xc8>)
 8014434:	6013      	str	r3, [r2, #0]
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801443a:	4613      	mov	r3, r2
 801443c:	009b      	lsls	r3, r3, #2
 801443e:	4413      	add	r3, r2
 8014440:	009b      	lsls	r3, r3, #2
 8014442:	4a15      	ldr	r2, [pc, #84]	@ (8014498 <prvAddNewTaskToReadyList+0xcc>)
 8014444:	441a      	add	r2, r3
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	3304      	adds	r3, #4
 801444a:	4619      	mov	r1, r3
 801444c:	4610      	mov	r0, r2
 801444e:	f7ff f9bc 	bl	80137ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014452:	f000 ffeb 	bl	801542c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014456:	4b0d      	ldr	r3, [pc, #52]	@ (801448c <prvAddNewTaskToReadyList+0xc0>)
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	2b00      	cmp	r3, #0
 801445c:	d00e      	beq.n	801447c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801445e:	4b0a      	ldr	r3, [pc, #40]	@ (8014488 <prvAddNewTaskToReadyList+0xbc>)
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014468:	429a      	cmp	r2, r3
 801446a:	d207      	bcs.n	801447c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801446c:	4b0b      	ldr	r3, [pc, #44]	@ (801449c <prvAddNewTaskToReadyList+0xd0>)
 801446e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014472:	601a      	str	r2, [r3, #0]
 8014474:	f3bf 8f4f 	dsb	sy
 8014478:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801447c:	bf00      	nop
 801447e:	3708      	adds	r7, #8
 8014480:	46bd      	mov	sp, r7
 8014482:	bd80      	pop	{r7, pc}
 8014484:	24002a54 	.word	0x24002a54
 8014488:	24002954 	.word	0x24002954
 801448c:	24002a60 	.word	0x24002a60
 8014490:	24002a70 	.word	0x24002a70
 8014494:	24002a5c 	.word	0x24002a5c
 8014498:	24002958 	.word	0x24002958
 801449c:	e000ed04 	.word	0xe000ed04

080144a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80144a0:	b580      	push	{r7, lr}
 80144a2:	b084      	sub	sp, #16
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80144a8:	2300      	movs	r3, #0
 80144aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d018      	beq.n	80144e4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80144b2:	4b14      	ldr	r3, [pc, #80]	@ (8014504 <vTaskDelay+0x64>)
 80144b4:	681b      	ldr	r3, [r3, #0]
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d00b      	beq.n	80144d2 <vTaskDelay+0x32>
	__asm volatile
 80144ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80144be:	f383 8811 	msr	BASEPRI, r3
 80144c2:	f3bf 8f6f 	isb	sy
 80144c6:	f3bf 8f4f 	dsb	sy
 80144ca:	60bb      	str	r3, [r7, #8]
}
 80144cc:	bf00      	nop
 80144ce:	bf00      	nop
 80144d0:	e7fd      	b.n	80144ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80144d2:	f000 f87d 	bl	80145d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80144d6:	2100      	movs	r1, #0
 80144d8:	6878      	ldr	r0, [r7, #4]
 80144da:	f000 fde1 	bl	80150a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80144de:	f000 f885 	bl	80145ec <xTaskResumeAll>
 80144e2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80144e4:	68fb      	ldr	r3, [r7, #12]
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d107      	bne.n	80144fa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80144ea:	4b07      	ldr	r3, [pc, #28]	@ (8014508 <vTaskDelay+0x68>)
 80144ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80144f0:	601a      	str	r2, [r3, #0]
 80144f2:	f3bf 8f4f 	dsb	sy
 80144f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80144fa:	bf00      	nop
 80144fc:	3710      	adds	r7, #16
 80144fe:	46bd      	mov	sp, r7
 8014500:	bd80      	pop	{r7, pc}
 8014502:	bf00      	nop
 8014504:	24002a7c 	.word	0x24002a7c
 8014508:	e000ed04 	.word	0xe000ed04

0801450c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801450c:	b580      	push	{r7, lr}
 801450e:	b08a      	sub	sp, #40	@ 0x28
 8014510:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014512:	2300      	movs	r3, #0
 8014514:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014516:	2300      	movs	r3, #0
 8014518:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801451a:	463a      	mov	r2, r7
 801451c:	1d39      	adds	r1, r7, #4
 801451e:	f107 0308 	add.w	r3, r7, #8
 8014522:	4618      	mov	r0, r3
 8014524:	f7ec fc96 	bl	8000e54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014528:	6839      	ldr	r1, [r7, #0]
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	68ba      	ldr	r2, [r7, #8]
 801452e:	9202      	str	r2, [sp, #8]
 8014530:	9301      	str	r3, [sp, #4]
 8014532:	2300      	movs	r3, #0
 8014534:	9300      	str	r3, [sp, #0]
 8014536:	2300      	movs	r3, #0
 8014538:	460a      	mov	r2, r1
 801453a:	491f      	ldr	r1, [pc, #124]	@ (80145b8 <vTaskStartScheduler+0xac>)
 801453c:	481f      	ldr	r0, [pc, #124]	@ (80145bc <vTaskStartScheduler+0xb0>)
 801453e:	f7ff fe17 	bl	8014170 <xTaskCreateStatic>
 8014542:	4603      	mov	r3, r0
 8014544:	4a1e      	ldr	r2, [pc, #120]	@ (80145c0 <vTaskStartScheduler+0xb4>)
 8014546:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014548:	4b1d      	ldr	r3, [pc, #116]	@ (80145c0 <vTaskStartScheduler+0xb4>)
 801454a:	681b      	ldr	r3, [r3, #0]
 801454c:	2b00      	cmp	r3, #0
 801454e:	d002      	beq.n	8014556 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014550:	2301      	movs	r3, #1
 8014552:	617b      	str	r3, [r7, #20]
 8014554:	e001      	b.n	801455a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014556:	2300      	movs	r3, #0
 8014558:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801455a:	697b      	ldr	r3, [r7, #20]
 801455c:	2b01      	cmp	r3, #1
 801455e:	d116      	bne.n	801458e <vTaskStartScheduler+0x82>
	__asm volatile
 8014560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014564:	f383 8811 	msr	BASEPRI, r3
 8014568:	f3bf 8f6f 	isb	sy
 801456c:	f3bf 8f4f 	dsb	sy
 8014570:	613b      	str	r3, [r7, #16]
}
 8014572:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014574:	4b13      	ldr	r3, [pc, #76]	@ (80145c4 <vTaskStartScheduler+0xb8>)
 8014576:	f04f 32ff 	mov.w	r2, #4294967295
 801457a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801457c:	4b12      	ldr	r3, [pc, #72]	@ (80145c8 <vTaskStartScheduler+0xbc>)
 801457e:	2201      	movs	r2, #1
 8014580:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014582:	4b12      	ldr	r3, [pc, #72]	@ (80145cc <vTaskStartScheduler+0xc0>)
 8014584:	2200      	movs	r2, #0
 8014586:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014588:	f000 fe7a 	bl	8015280 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801458c:	e00f      	b.n	80145ae <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801458e:	697b      	ldr	r3, [r7, #20]
 8014590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014594:	d10b      	bne.n	80145ae <vTaskStartScheduler+0xa2>
	__asm volatile
 8014596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801459a:	f383 8811 	msr	BASEPRI, r3
 801459e:	f3bf 8f6f 	isb	sy
 80145a2:	f3bf 8f4f 	dsb	sy
 80145a6:	60fb      	str	r3, [r7, #12]
}
 80145a8:	bf00      	nop
 80145aa:	bf00      	nop
 80145ac:	e7fd      	b.n	80145aa <vTaskStartScheduler+0x9e>
}
 80145ae:	bf00      	nop
 80145b0:	3718      	adds	r7, #24
 80145b2:	46bd      	mov	sp, r7
 80145b4:	bd80      	pop	{r7, pc}
 80145b6:	bf00      	nop
 80145b8:	080189cc 	.word	0x080189cc
 80145bc:	08014b75 	.word	0x08014b75
 80145c0:	24002a78 	.word	0x24002a78
 80145c4:	24002a74 	.word	0x24002a74
 80145c8:	24002a60 	.word	0x24002a60
 80145cc:	24002a58 	.word	0x24002a58

080145d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80145d0:	b480      	push	{r7}
 80145d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80145d4:	4b04      	ldr	r3, [pc, #16]	@ (80145e8 <vTaskSuspendAll+0x18>)
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	3301      	adds	r3, #1
 80145da:	4a03      	ldr	r2, [pc, #12]	@ (80145e8 <vTaskSuspendAll+0x18>)
 80145dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80145de:	bf00      	nop
 80145e0:	46bd      	mov	sp, r7
 80145e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145e6:	4770      	bx	lr
 80145e8:	24002a7c 	.word	0x24002a7c

080145ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80145ec:	b580      	push	{r7, lr}
 80145ee:	b084      	sub	sp, #16
 80145f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80145f2:	2300      	movs	r3, #0
 80145f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80145f6:	2300      	movs	r3, #0
 80145f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80145fa:	4b42      	ldr	r3, [pc, #264]	@ (8014704 <xTaskResumeAll+0x118>)
 80145fc:	681b      	ldr	r3, [r3, #0]
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d10b      	bne.n	801461a <xTaskResumeAll+0x2e>
	__asm volatile
 8014602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014606:	f383 8811 	msr	BASEPRI, r3
 801460a:	f3bf 8f6f 	isb	sy
 801460e:	f3bf 8f4f 	dsb	sy
 8014612:	603b      	str	r3, [r7, #0]
}
 8014614:	bf00      	nop
 8014616:	bf00      	nop
 8014618:	e7fd      	b.n	8014616 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801461a:	f000 fed5 	bl	80153c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801461e:	4b39      	ldr	r3, [pc, #228]	@ (8014704 <xTaskResumeAll+0x118>)
 8014620:	681b      	ldr	r3, [r3, #0]
 8014622:	3b01      	subs	r3, #1
 8014624:	4a37      	ldr	r2, [pc, #220]	@ (8014704 <xTaskResumeAll+0x118>)
 8014626:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014628:	4b36      	ldr	r3, [pc, #216]	@ (8014704 <xTaskResumeAll+0x118>)
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	2b00      	cmp	r3, #0
 801462e:	d161      	bne.n	80146f4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014630:	4b35      	ldr	r3, [pc, #212]	@ (8014708 <xTaskResumeAll+0x11c>)
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	2b00      	cmp	r3, #0
 8014636:	d05d      	beq.n	80146f4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014638:	e02e      	b.n	8014698 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801463a:	4b34      	ldr	r3, [pc, #208]	@ (801470c <xTaskResumeAll+0x120>)
 801463c:	68db      	ldr	r3, [r3, #12]
 801463e:	68db      	ldr	r3, [r3, #12]
 8014640:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014642:	68fb      	ldr	r3, [r7, #12]
 8014644:	3318      	adds	r3, #24
 8014646:	4618      	mov	r0, r3
 8014648:	f7ff f91c 	bl	8013884 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801464c:	68fb      	ldr	r3, [r7, #12]
 801464e:	3304      	adds	r3, #4
 8014650:	4618      	mov	r0, r3
 8014652:	f7ff f917 	bl	8013884 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014656:	68fb      	ldr	r3, [r7, #12]
 8014658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801465a:	2201      	movs	r2, #1
 801465c:	409a      	lsls	r2, r3
 801465e:	4b2c      	ldr	r3, [pc, #176]	@ (8014710 <xTaskResumeAll+0x124>)
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	4313      	orrs	r3, r2
 8014664:	4a2a      	ldr	r2, [pc, #168]	@ (8014710 <xTaskResumeAll+0x124>)
 8014666:	6013      	str	r3, [r2, #0]
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801466c:	4613      	mov	r3, r2
 801466e:	009b      	lsls	r3, r3, #2
 8014670:	4413      	add	r3, r2
 8014672:	009b      	lsls	r3, r3, #2
 8014674:	4a27      	ldr	r2, [pc, #156]	@ (8014714 <xTaskResumeAll+0x128>)
 8014676:	441a      	add	r2, r3
 8014678:	68fb      	ldr	r3, [r7, #12]
 801467a:	3304      	adds	r3, #4
 801467c:	4619      	mov	r1, r3
 801467e:	4610      	mov	r0, r2
 8014680:	f7ff f8a3 	bl	80137ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014684:	68fb      	ldr	r3, [r7, #12]
 8014686:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014688:	4b23      	ldr	r3, [pc, #140]	@ (8014718 <xTaskResumeAll+0x12c>)
 801468a:	681b      	ldr	r3, [r3, #0]
 801468c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801468e:	429a      	cmp	r2, r3
 8014690:	d302      	bcc.n	8014698 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8014692:	4b22      	ldr	r3, [pc, #136]	@ (801471c <xTaskResumeAll+0x130>)
 8014694:	2201      	movs	r2, #1
 8014696:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014698:	4b1c      	ldr	r3, [pc, #112]	@ (801470c <xTaskResumeAll+0x120>)
 801469a:	681b      	ldr	r3, [r3, #0]
 801469c:	2b00      	cmp	r3, #0
 801469e:	d1cc      	bne.n	801463a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d001      	beq.n	80146aa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80146a6:	f000 fb1b 	bl	8014ce0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80146aa:	4b1d      	ldr	r3, [pc, #116]	@ (8014720 <xTaskResumeAll+0x134>)
 80146ac:	681b      	ldr	r3, [r3, #0]
 80146ae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d010      	beq.n	80146d8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80146b6:	f000 f837 	bl	8014728 <xTaskIncrementTick>
 80146ba:	4603      	mov	r3, r0
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d002      	beq.n	80146c6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80146c0:	4b16      	ldr	r3, [pc, #88]	@ (801471c <xTaskResumeAll+0x130>)
 80146c2:	2201      	movs	r2, #1
 80146c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	3b01      	subs	r3, #1
 80146ca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d1f1      	bne.n	80146b6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80146d2:	4b13      	ldr	r3, [pc, #76]	@ (8014720 <xTaskResumeAll+0x134>)
 80146d4:	2200      	movs	r2, #0
 80146d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80146d8:	4b10      	ldr	r3, [pc, #64]	@ (801471c <xTaskResumeAll+0x130>)
 80146da:	681b      	ldr	r3, [r3, #0]
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d009      	beq.n	80146f4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80146e0:	2301      	movs	r3, #1
 80146e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80146e4:	4b0f      	ldr	r3, [pc, #60]	@ (8014724 <xTaskResumeAll+0x138>)
 80146e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80146ea:	601a      	str	r2, [r3, #0]
 80146ec:	f3bf 8f4f 	dsb	sy
 80146f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80146f4:	f000 fe9a 	bl	801542c <vPortExitCritical>

	return xAlreadyYielded;
 80146f8:	68bb      	ldr	r3, [r7, #8]
}
 80146fa:	4618      	mov	r0, r3
 80146fc:	3710      	adds	r7, #16
 80146fe:	46bd      	mov	sp, r7
 8014700:	bd80      	pop	{r7, pc}
 8014702:	bf00      	nop
 8014704:	24002a7c 	.word	0x24002a7c
 8014708:	24002a54 	.word	0x24002a54
 801470c:	24002a14 	.word	0x24002a14
 8014710:	24002a5c 	.word	0x24002a5c
 8014714:	24002958 	.word	0x24002958
 8014718:	24002954 	.word	0x24002954
 801471c:	24002a68 	.word	0x24002a68
 8014720:	24002a64 	.word	0x24002a64
 8014724:	e000ed04 	.word	0xe000ed04

08014728 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014728:	b580      	push	{r7, lr}
 801472a:	b086      	sub	sp, #24
 801472c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801472e:	2300      	movs	r3, #0
 8014730:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014732:	4b4f      	ldr	r3, [pc, #316]	@ (8014870 <xTaskIncrementTick+0x148>)
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	2b00      	cmp	r3, #0
 8014738:	f040 808f 	bne.w	801485a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801473c:	4b4d      	ldr	r3, [pc, #308]	@ (8014874 <xTaskIncrementTick+0x14c>)
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	3301      	adds	r3, #1
 8014742:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014744:	4a4b      	ldr	r2, [pc, #300]	@ (8014874 <xTaskIncrementTick+0x14c>)
 8014746:	693b      	ldr	r3, [r7, #16]
 8014748:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801474a:	693b      	ldr	r3, [r7, #16]
 801474c:	2b00      	cmp	r3, #0
 801474e:	d121      	bne.n	8014794 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8014750:	4b49      	ldr	r3, [pc, #292]	@ (8014878 <xTaskIncrementTick+0x150>)
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	2b00      	cmp	r3, #0
 8014758:	d00b      	beq.n	8014772 <xTaskIncrementTick+0x4a>
	__asm volatile
 801475a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801475e:	f383 8811 	msr	BASEPRI, r3
 8014762:	f3bf 8f6f 	isb	sy
 8014766:	f3bf 8f4f 	dsb	sy
 801476a:	603b      	str	r3, [r7, #0]
}
 801476c:	bf00      	nop
 801476e:	bf00      	nop
 8014770:	e7fd      	b.n	801476e <xTaskIncrementTick+0x46>
 8014772:	4b41      	ldr	r3, [pc, #260]	@ (8014878 <xTaskIncrementTick+0x150>)
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	60fb      	str	r3, [r7, #12]
 8014778:	4b40      	ldr	r3, [pc, #256]	@ (801487c <xTaskIncrementTick+0x154>)
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	4a3e      	ldr	r2, [pc, #248]	@ (8014878 <xTaskIncrementTick+0x150>)
 801477e:	6013      	str	r3, [r2, #0]
 8014780:	4a3e      	ldr	r2, [pc, #248]	@ (801487c <xTaskIncrementTick+0x154>)
 8014782:	68fb      	ldr	r3, [r7, #12]
 8014784:	6013      	str	r3, [r2, #0]
 8014786:	4b3e      	ldr	r3, [pc, #248]	@ (8014880 <xTaskIncrementTick+0x158>)
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	3301      	adds	r3, #1
 801478c:	4a3c      	ldr	r2, [pc, #240]	@ (8014880 <xTaskIncrementTick+0x158>)
 801478e:	6013      	str	r3, [r2, #0]
 8014790:	f000 faa6 	bl	8014ce0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014794:	4b3b      	ldr	r3, [pc, #236]	@ (8014884 <xTaskIncrementTick+0x15c>)
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	693a      	ldr	r2, [r7, #16]
 801479a:	429a      	cmp	r2, r3
 801479c:	d348      	bcc.n	8014830 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801479e:	4b36      	ldr	r3, [pc, #216]	@ (8014878 <xTaskIncrementTick+0x150>)
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	681b      	ldr	r3, [r3, #0]
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d104      	bne.n	80147b2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80147a8:	4b36      	ldr	r3, [pc, #216]	@ (8014884 <xTaskIncrementTick+0x15c>)
 80147aa:	f04f 32ff 	mov.w	r2, #4294967295
 80147ae:	601a      	str	r2, [r3, #0]
					break;
 80147b0:	e03e      	b.n	8014830 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80147b2:	4b31      	ldr	r3, [pc, #196]	@ (8014878 <xTaskIncrementTick+0x150>)
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	68db      	ldr	r3, [r3, #12]
 80147b8:	68db      	ldr	r3, [r3, #12]
 80147ba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80147bc:	68bb      	ldr	r3, [r7, #8]
 80147be:	685b      	ldr	r3, [r3, #4]
 80147c0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80147c2:	693a      	ldr	r2, [r7, #16]
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	429a      	cmp	r2, r3
 80147c8:	d203      	bcs.n	80147d2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80147ca:	4a2e      	ldr	r2, [pc, #184]	@ (8014884 <xTaskIncrementTick+0x15c>)
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80147d0:	e02e      	b.n	8014830 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80147d2:	68bb      	ldr	r3, [r7, #8]
 80147d4:	3304      	adds	r3, #4
 80147d6:	4618      	mov	r0, r3
 80147d8:	f7ff f854 	bl	8013884 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80147dc:	68bb      	ldr	r3, [r7, #8]
 80147de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d004      	beq.n	80147ee <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80147e4:	68bb      	ldr	r3, [r7, #8]
 80147e6:	3318      	adds	r3, #24
 80147e8:	4618      	mov	r0, r3
 80147ea:	f7ff f84b 	bl	8013884 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80147ee:	68bb      	ldr	r3, [r7, #8]
 80147f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147f2:	2201      	movs	r2, #1
 80147f4:	409a      	lsls	r2, r3
 80147f6:	4b24      	ldr	r3, [pc, #144]	@ (8014888 <xTaskIncrementTick+0x160>)
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	4313      	orrs	r3, r2
 80147fc:	4a22      	ldr	r2, [pc, #136]	@ (8014888 <xTaskIncrementTick+0x160>)
 80147fe:	6013      	str	r3, [r2, #0]
 8014800:	68bb      	ldr	r3, [r7, #8]
 8014802:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014804:	4613      	mov	r3, r2
 8014806:	009b      	lsls	r3, r3, #2
 8014808:	4413      	add	r3, r2
 801480a:	009b      	lsls	r3, r3, #2
 801480c:	4a1f      	ldr	r2, [pc, #124]	@ (801488c <xTaskIncrementTick+0x164>)
 801480e:	441a      	add	r2, r3
 8014810:	68bb      	ldr	r3, [r7, #8]
 8014812:	3304      	adds	r3, #4
 8014814:	4619      	mov	r1, r3
 8014816:	4610      	mov	r0, r2
 8014818:	f7fe ffd7 	bl	80137ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801481c:	68bb      	ldr	r3, [r7, #8]
 801481e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014820:	4b1b      	ldr	r3, [pc, #108]	@ (8014890 <xTaskIncrementTick+0x168>)
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014826:	429a      	cmp	r2, r3
 8014828:	d3b9      	bcc.n	801479e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 801482a:	2301      	movs	r3, #1
 801482c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801482e:	e7b6      	b.n	801479e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014830:	4b17      	ldr	r3, [pc, #92]	@ (8014890 <xTaskIncrementTick+0x168>)
 8014832:	681b      	ldr	r3, [r3, #0]
 8014834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014836:	4915      	ldr	r1, [pc, #84]	@ (801488c <xTaskIncrementTick+0x164>)
 8014838:	4613      	mov	r3, r2
 801483a:	009b      	lsls	r3, r3, #2
 801483c:	4413      	add	r3, r2
 801483e:	009b      	lsls	r3, r3, #2
 8014840:	440b      	add	r3, r1
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	2b01      	cmp	r3, #1
 8014846:	d901      	bls.n	801484c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8014848:	2301      	movs	r3, #1
 801484a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801484c:	4b11      	ldr	r3, [pc, #68]	@ (8014894 <xTaskIncrementTick+0x16c>)
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	2b00      	cmp	r3, #0
 8014852:	d007      	beq.n	8014864 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8014854:	2301      	movs	r3, #1
 8014856:	617b      	str	r3, [r7, #20]
 8014858:	e004      	b.n	8014864 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801485a:	4b0f      	ldr	r3, [pc, #60]	@ (8014898 <xTaskIncrementTick+0x170>)
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	3301      	adds	r3, #1
 8014860:	4a0d      	ldr	r2, [pc, #52]	@ (8014898 <xTaskIncrementTick+0x170>)
 8014862:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8014864:	697b      	ldr	r3, [r7, #20]
}
 8014866:	4618      	mov	r0, r3
 8014868:	3718      	adds	r7, #24
 801486a:	46bd      	mov	sp, r7
 801486c:	bd80      	pop	{r7, pc}
 801486e:	bf00      	nop
 8014870:	24002a7c 	.word	0x24002a7c
 8014874:	24002a58 	.word	0x24002a58
 8014878:	24002a0c 	.word	0x24002a0c
 801487c:	24002a10 	.word	0x24002a10
 8014880:	24002a6c 	.word	0x24002a6c
 8014884:	24002a74 	.word	0x24002a74
 8014888:	24002a5c 	.word	0x24002a5c
 801488c:	24002958 	.word	0x24002958
 8014890:	24002954 	.word	0x24002954
 8014894:	24002a68 	.word	0x24002a68
 8014898:	24002a64 	.word	0x24002a64

0801489c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801489c:	b480      	push	{r7}
 801489e:	b087      	sub	sp, #28
 80148a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80148a2:	4b27      	ldr	r3, [pc, #156]	@ (8014940 <vTaskSwitchContext+0xa4>)
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d003      	beq.n	80148b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80148aa:	4b26      	ldr	r3, [pc, #152]	@ (8014944 <vTaskSwitchContext+0xa8>)
 80148ac:	2201      	movs	r2, #1
 80148ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80148b0:	e040      	b.n	8014934 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80148b2:	4b24      	ldr	r3, [pc, #144]	@ (8014944 <vTaskSwitchContext+0xa8>)
 80148b4:	2200      	movs	r2, #0
 80148b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80148b8:	4b23      	ldr	r3, [pc, #140]	@ (8014948 <vTaskSwitchContext+0xac>)
 80148ba:	681b      	ldr	r3, [r3, #0]
 80148bc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	fab3 f383 	clz	r3, r3
 80148c4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80148c6:	7afb      	ldrb	r3, [r7, #11]
 80148c8:	f1c3 031f 	rsb	r3, r3, #31
 80148cc:	617b      	str	r3, [r7, #20]
 80148ce:	491f      	ldr	r1, [pc, #124]	@ (801494c <vTaskSwitchContext+0xb0>)
 80148d0:	697a      	ldr	r2, [r7, #20]
 80148d2:	4613      	mov	r3, r2
 80148d4:	009b      	lsls	r3, r3, #2
 80148d6:	4413      	add	r3, r2
 80148d8:	009b      	lsls	r3, r3, #2
 80148da:	440b      	add	r3, r1
 80148dc:	681b      	ldr	r3, [r3, #0]
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d10b      	bne.n	80148fa <vTaskSwitchContext+0x5e>
	__asm volatile
 80148e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80148e6:	f383 8811 	msr	BASEPRI, r3
 80148ea:	f3bf 8f6f 	isb	sy
 80148ee:	f3bf 8f4f 	dsb	sy
 80148f2:	607b      	str	r3, [r7, #4]
}
 80148f4:	bf00      	nop
 80148f6:	bf00      	nop
 80148f8:	e7fd      	b.n	80148f6 <vTaskSwitchContext+0x5a>
 80148fa:	697a      	ldr	r2, [r7, #20]
 80148fc:	4613      	mov	r3, r2
 80148fe:	009b      	lsls	r3, r3, #2
 8014900:	4413      	add	r3, r2
 8014902:	009b      	lsls	r3, r3, #2
 8014904:	4a11      	ldr	r2, [pc, #68]	@ (801494c <vTaskSwitchContext+0xb0>)
 8014906:	4413      	add	r3, r2
 8014908:	613b      	str	r3, [r7, #16]
 801490a:	693b      	ldr	r3, [r7, #16]
 801490c:	685b      	ldr	r3, [r3, #4]
 801490e:	685a      	ldr	r2, [r3, #4]
 8014910:	693b      	ldr	r3, [r7, #16]
 8014912:	605a      	str	r2, [r3, #4]
 8014914:	693b      	ldr	r3, [r7, #16]
 8014916:	685a      	ldr	r2, [r3, #4]
 8014918:	693b      	ldr	r3, [r7, #16]
 801491a:	3308      	adds	r3, #8
 801491c:	429a      	cmp	r2, r3
 801491e:	d104      	bne.n	801492a <vTaskSwitchContext+0x8e>
 8014920:	693b      	ldr	r3, [r7, #16]
 8014922:	685b      	ldr	r3, [r3, #4]
 8014924:	685a      	ldr	r2, [r3, #4]
 8014926:	693b      	ldr	r3, [r7, #16]
 8014928:	605a      	str	r2, [r3, #4]
 801492a:	693b      	ldr	r3, [r7, #16]
 801492c:	685b      	ldr	r3, [r3, #4]
 801492e:	68db      	ldr	r3, [r3, #12]
 8014930:	4a07      	ldr	r2, [pc, #28]	@ (8014950 <vTaskSwitchContext+0xb4>)
 8014932:	6013      	str	r3, [r2, #0]
}
 8014934:	bf00      	nop
 8014936:	371c      	adds	r7, #28
 8014938:	46bd      	mov	sp, r7
 801493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801493e:	4770      	bx	lr
 8014940:	24002a7c 	.word	0x24002a7c
 8014944:	24002a68 	.word	0x24002a68
 8014948:	24002a5c 	.word	0x24002a5c
 801494c:	24002958 	.word	0x24002958
 8014950:	24002954 	.word	0x24002954

08014954 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014954:	b580      	push	{r7, lr}
 8014956:	b084      	sub	sp, #16
 8014958:	af00      	add	r7, sp, #0
 801495a:	6078      	str	r0, [r7, #4]
 801495c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	2b00      	cmp	r3, #0
 8014962:	d10b      	bne.n	801497c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8014964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014968:	f383 8811 	msr	BASEPRI, r3
 801496c:	f3bf 8f6f 	isb	sy
 8014970:	f3bf 8f4f 	dsb	sy
 8014974:	60fb      	str	r3, [r7, #12]
}
 8014976:	bf00      	nop
 8014978:	bf00      	nop
 801497a:	e7fd      	b.n	8014978 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801497c:	4b07      	ldr	r3, [pc, #28]	@ (801499c <vTaskPlaceOnEventList+0x48>)
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	3318      	adds	r3, #24
 8014982:	4619      	mov	r1, r3
 8014984:	6878      	ldr	r0, [r7, #4]
 8014986:	f7fe ff44 	bl	8013812 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801498a:	2101      	movs	r1, #1
 801498c:	6838      	ldr	r0, [r7, #0]
 801498e:	f000 fb87 	bl	80150a0 <prvAddCurrentTaskToDelayedList>
}
 8014992:	bf00      	nop
 8014994:	3710      	adds	r7, #16
 8014996:	46bd      	mov	sp, r7
 8014998:	bd80      	pop	{r7, pc}
 801499a:	bf00      	nop
 801499c:	24002954 	.word	0x24002954

080149a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80149a0:	b580      	push	{r7, lr}
 80149a2:	b086      	sub	sp, #24
 80149a4:	af00      	add	r7, sp, #0
 80149a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	68db      	ldr	r3, [r3, #12]
 80149ac:	68db      	ldr	r3, [r3, #12]
 80149ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80149b0:	693b      	ldr	r3, [r7, #16]
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d10b      	bne.n	80149ce <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80149b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80149ba:	f383 8811 	msr	BASEPRI, r3
 80149be:	f3bf 8f6f 	isb	sy
 80149c2:	f3bf 8f4f 	dsb	sy
 80149c6:	60fb      	str	r3, [r7, #12]
}
 80149c8:	bf00      	nop
 80149ca:	bf00      	nop
 80149cc:	e7fd      	b.n	80149ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80149ce:	693b      	ldr	r3, [r7, #16]
 80149d0:	3318      	adds	r3, #24
 80149d2:	4618      	mov	r0, r3
 80149d4:	f7fe ff56 	bl	8013884 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80149d8:	4b1d      	ldr	r3, [pc, #116]	@ (8014a50 <xTaskRemoveFromEventList+0xb0>)
 80149da:	681b      	ldr	r3, [r3, #0]
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d11c      	bne.n	8014a1a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80149e0:	693b      	ldr	r3, [r7, #16]
 80149e2:	3304      	adds	r3, #4
 80149e4:	4618      	mov	r0, r3
 80149e6:	f7fe ff4d 	bl	8013884 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80149ea:	693b      	ldr	r3, [r7, #16]
 80149ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80149ee:	2201      	movs	r2, #1
 80149f0:	409a      	lsls	r2, r3
 80149f2:	4b18      	ldr	r3, [pc, #96]	@ (8014a54 <xTaskRemoveFromEventList+0xb4>)
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	4313      	orrs	r3, r2
 80149f8:	4a16      	ldr	r2, [pc, #88]	@ (8014a54 <xTaskRemoveFromEventList+0xb4>)
 80149fa:	6013      	str	r3, [r2, #0]
 80149fc:	693b      	ldr	r3, [r7, #16]
 80149fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014a00:	4613      	mov	r3, r2
 8014a02:	009b      	lsls	r3, r3, #2
 8014a04:	4413      	add	r3, r2
 8014a06:	009b      	lsls	r3, r3, #2
 8014a08:	4a13      	ldr	r2, [pc, #76]	@ (8014a58 <xTaskRemoveFromEventList+0xb8>)
 8014a0a:	441a      	add	r2, r3
 8014a0c:	693b      	ldr	r3, [r7, #16]
 8014a0e:	3304      	adds	r3, #4
 8014a10:	4619      	mov	r1, r3
 8014a12:	4610      	mov	r0, r2
 8014a14:	f7fe fed9 	bl	80137ca <vListInsertEnd>
 8014a18:	e005      	b.n	8014a26 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014a1a:	693b      	ldr	r3, [r7, #16]
 8014a1c:	3318      	adds	r3, #24
 8014a1e:	4619      	mov	r1, r3
 8014a20:	480e      	ldr	r0, [pc, #56]	@ (8014a5c <xTaskRemoveFromEventList+0xbc>)
 8014a22:	f7fe fed2 	bl	80137ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014a26:	693b      	ldr	r3, [r7, #16]
 8014a28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8014a60 <xTaskRemoveFromEventList+0xc0>)
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a30:	429a      	cmp	r2, r3
 8014a32:	d905      	bls.n	8014a40 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014a34:	2301      	movs	r3, #1
 8014a36:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014a38:	4b0a      	ldr	r3, [pc, #40]	@ (8014a64 <xTaskRemoveFromEventList+0xc4>)
 8014a3a:	2201      	movs	r2, #1
 8014a3c:	601a      	str	r2, [r3, #0]
 8014a3e:	e001      	b.n	8014a44 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8014a40:	2300      	movs	r3, #0
 8014a42:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014a44:	697b      	ldr	r3, [r7, #20]
}
 8014a46:	4618      	mov	r0, r3
 8014a48:	3718      	adds	r7, #24
 8014a4a:	46bd      	mov	sp, r7
 8014a4c:	bd80      	pop	{r7, pc}
 8014a4e:	bf00      	nop
 8014a50:	24002a7c 	.word	0x24002a7c
 8014a54:	24002a5c 	.word	0x24002a5c
 8014a58:	24002958 	.word	0x24002958
 8014a5c:	24002a14 	.word	0x24002a14
 8014a60:	24002954 	.word	0x24002954
 8014a64:	24002a68 	.word	0x24002a68

08014a68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014a68:	b480      	push	{r7}
 8014a6a:	b083      	sub	sp, #12
 8014a6c:	af00      	add	r7, sp, #0
 8014a6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014a70:	4b06      	ldr	r3, [pc, #24]	@ (8014a8c <vTaskInternalSetTimeOutState+0x24>)
 8014a72:	681a      	ldr	r2, [r3, #0]
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014a78:	4b05      	ldr	r3, [pc, #20]	@ (8014a90 <vTaskInternalSetTimeOutState+0x28>)
 8014a7a:	681a      	ldr	r2, [r3, #0]
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	605a      	str	r2, [r3, #4]
}
 8014a80:	bf00      	nop
 8014a82:	370c      	adds	r7, #12
 8014a84:	46bd      	mov	sp, r7
 8014a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a8a:	4770      	bx	lr
 8014a8c:	24002a6c 	.word	0x24002a6c
 8014a90:	24002a58 	.word	0x24002a58

08014a94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014a94:	b580      	push	{r7, lr}
 8014a96:	b088      	sub	sp, #32
 8014a98:	af00      	add	r7, sp, #0
 8014a9a:	6078      	str	r0, [r7, #4]
 8014a9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d10b      	bne.n	8014abc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8014aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014aa8:	f383 8811 	msr	BASEPRI, r3
 8014aac:	f3bf 8f6f 	isb	sy
 8014ab0:	f3bf 8f4f 	dsb	sy
 8014ab4:	613b      	str	r3, [r7, #16]
}
 8014ab6:	bf00      	nop
 8014ab8:	bf00      	nop
 8014aba:	e7fd      	b.n	8014ab8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014abc:	683b      	ldr	r3, [r7, #0]
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d10b      	bne.n	8014ada <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8014ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ac6:	f383 8811 	msr	BASEPRI, r3
 8014aca:	f3bf 8f6f 	isb	sy
 8014ace:	f3bf 8f4f 	dsb	sy
 8014ad2:	60fb      	str	r3, [r7, #12]
}
 8014ad4:	bf00      	nop
 8014ad6:	bf00      	nop
 8014ad8:	e7fd      	b.n	8014ad6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8014ada:	f000 fc75 	bl	80153c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014ade:	4b1d      	ldr	r3, [pc, #116]	@ (8014b54 <xTaskCheckForTimeOut+0xc0>)
 8014ae0:	681b      	ldr	r3, [r3, #0]
 8014ae2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	685b      	ldr	r3, [r3, #4]
 8014ae8:	69ba      	ldr	r2, [r7, #24]
 8014aea:	1ad3      	subs	r3, r2, r3
 8014aec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014aee:	683b      	ldr	r3, [r7, #0]
 8014af0:	681b      	ldr	r3, [r3, #0]
 8014af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014af6:	d102      	bne.n	8014afe <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014af8:	2300      	movs	r3, #0
 8014afa:	61fb      	str	r3, [r7, #28]
 8014afc:	e023      	b.n	8014b46 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	681a      	ldr	r2, [r3, #0]
 8014b02:	4b15      	ldr	r3, [pc, #84]	@ (8014b58 <xTaskCheckForTimeOut+0xc4>)
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	429a      	cmp	r2, r3
 8014b08:	d007      	beq.n	8014b1a <xTaskCheckForTimeOut+0x86>
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	685b      	ldr	r3, [r3, #4]
 8014b0e:	69ba      	ldr	r2, [r7, #24]
 8014b10:	429a      	cmp	r2, r3
 8014b12:	d302      	bcc.n	8014b1a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014b14:	2301      	movs	r3, #1
 8014b16:	61fb      	str	r3, [r7, #28]
 8014b18:	e015      	b.n	8014b46 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014b1a:	683b      	ldr	r3, [r7, #0]
 8014b1c:	681b      	ldr	r3, [r3, #0]
 8014b1e:	697a      	ldr	r2, [r7, #20]
 8014b20:	429a      	cmp	r2, r3
 8014b22:	d20b      	bcs.n	8014b3c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014b24:	683b      	ldr	r3, [r7, #0]
 8014b26:	681a      	ldr	r2, [r3, #0]
 8014b28:	697b      	ldr	r3, [r7, #20]
 8014b2a:	1ad2      	subs	r2, r2, r3
 8014b2c:	683b      	ldr	r3, [r7, #0]
 8014b2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014b30:	6878      	ldr	r0, [r7, #4]
 8014b32:	f7ff ff99 	bl	8014a68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014b36:	2300      	movs	r3, #0
 8014b38:	61fb      	str	r3, [r7, #28]
 8014b3a:	e004      	b.n	8014b46 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8014b3c:	683b      	ldr	r3, [r7, #0]
 8014b3e:	2200      	movs	r2, #0
 8014b40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014b42:	2301      	movs	r3, #1
 8014b44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014b46:	f000 fc71 	bl	801542c <vPortExitCritical>

	return xReturn;
 8014b4a:	69fb      	ldr	r3, [r7, #28]
}
 8014b4c:	4618      	mov	r0, r3
 8014b4e:	3720      	adds	r7, #32
 8014b50:	46bd      	mov	sp, r7
 8014b52:	bd80      	pop	{r7, pc}
 8014b54:	24002a58 	.word	0x24002a58
 8014b58:	24002a6c 	.word	0x24002a6c

08014b5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014b5c:	b480      	push	{r7}
 8014b5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014b60:	4b03      	ldr	r3, [pc, #12]	@ (8014b70 <vTaskMissedYield+0x14>)
 8014b62:	2201      	movs	r2, #1
 8014b64:	601a      	str	r2, [r3, #0]
}
 8014b66:	bf00      	nop
 8014b68:	46bd      	mov	sp, r7
 8014b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b6e:	4770      	bx	lr
 8014b70:	24002a68 	.word	0x24002a68

08014b74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014b74:	b580      	push	{r7, lr}
 8014b76:	b082      	sub	sp, #8
 8014b78:	af00      	add	r7, sp, #0
 8014b7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014b7c:	f000 f852 	bl	8014c24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014b80:	4b06      	ldr	r3, [pc, #24]	@ (8014b9c <prvIdleTask+0x28>)
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	2b01      	cmp	r3, #1
 8014b86:	d9f9      	bls.n	8014b7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8014b88:	4b05      	ldr	r3, [pc, #20]	@ (8014ba0 <prvIdleTask+0x2c>)
 8014b8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014b8e:	601a      	str	r2, [r3, #0]
 8014b90:	f3bf 8f4f 	dsb	sy
 8014b94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014b98:	e7f0      	b.n	8014b7c <prvIdleTask+0x8>
 8014b9a:	bf00      	nop
 8014b9c:	24002958 	.word	0x24002958
 8014ba0:	e000ed04 	.word	0xe000ed04

08014ba4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014ba4:	b580      	push	{r7, lr}
 8014ba6:	b082      	sub	sp, #8
 8014ba8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014baa:	2300      	movs	r3, #0
 8014bac:	607b      	str	r3, [r7, #4]
 8014bae:	e00c      	b.n	8014bca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014bb0:	687a      	ldr	r2, [r7, #4]
 8014bb2:	4613      	mov	r3, r2
 8014bb4:	009b      	lsls	r3, r3, #2
 8014bb6:	4413      	add	r3, r2
 8014bb8:	009b      	lsls	r3, r3, #2
 8014bba:	4a12      	ldr	r2, [pc, #72]	@ (8014c04 <prvInitialiseTaskLists+0x60>)
 8014bbc:	4413      	add	r3, r2
 8014bbe:	4618      	mov	r0, r3
 8014bc0:	f7fe fdd6 	bl	8013770 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	3301      	adds	r3, #1
 8014bc8:	607b      	str	r3, [r7, #4]
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	2b06      	cmp	r3, #6
 8014bce:	d9ef      	bls.n	8014bb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014bd0:	480d      	ldr	r0, [pc, #52]	@ (8014c08 <prvInitialiseTaskLists+0x64>)
 8014bd2:	f7fe fdcd 	bl	8013770 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014bd6:	480d      	ldr	r0, [pc, #52]	@ (8014c0c <prvInitialiseTaskLists+0x68>)
 8014bd8:	f7fe fdca 	bl	8013770 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014bdc:	480c      	ldr	r0, [pc, #48]	@ (8014c10 <prvInitialiseTaskLists+0x6c>)
 8014bde:	f7fe fdc7 	bl	8013770 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014be2:	480c      	ldr	r0, [pc, #48]	@ (8014c14 <prvInitialiseTaskLists+0x70>)
 8014be4:	f7fe fdc4 	bl	8013770 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014be8:	480b      	ldr	r0, [pc, #44]	@ (8014c18 <prvInitialiseTaskLists+0x74>)
 8014bea:	f7fe fdc1 	bl	8013770 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014bee:	4b0b      	ldr	r3, [pc, #44]	@ (8014c1c <prvInitialiseTaskLists+0x78>)
 8014bf0:	4a05      	ldr	r2, [pc, #20]	@ (8014c08 <prvInitialiseTaskLists+0x64>)
 8014bf2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8014c20 <prvInitialiseTaskLists+0x7c>)
 8014bf6:	4a05      	ldr	r2, [pc, #20]	@ (8014c0c <prvInitialiseTaskLists+0x68>)
 8014bf8:	601a      	str	r2, [r3, #0]
}
 8014bfa:	bf00      	nop
 8014bfc:	3708      	adds	r7, #8
 8014bfe:	46bd      	mov	sp, r7
 8014c00:	bd80      	pop	{r7, pc}
 8014c02:	bf00      	nop
 8014c04:	24002958 	.word	0x24002958
 8014c08:	240029e4 	.word	0x240029e4
 8014c0c:	240029f8 	.word	0x240029f8
 8014c10:	24002a14 	.word	0x24002a14
 8014c14:	24002a28 	.word	0x24002a28
 8014c18:	24002a40 	.word	0x24002a40
 8014c1c:	24002a0c 	.word	0x24002a0c
 8014c20:	24002a10 	.word	0x24002a10

08014c24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014c24:	b580      	push	{r7, lr}
 8014c26:	b082      	sub	sp, #8
 8014c28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014c2a:	e019      	b.n	8014c60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014c2c:	f000 fbcc 	bl	80153c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014c30:	4b10      	ldr	r3, [pc, #64]	@ (8014c74 <prvCheckTasksWaitingTermination+0x50>)
 8014c32:	68db      	ldr	r3, [r3, #12]
 8014c34:	68db      	ldr	r3, [r3, #12]
 8014c36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	3304      	adds	r3, #4
 8014c3c:	4618      	mov	r0, r3
 8014c3e:	f7fe fe21 	bl	8013884 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014c42:	4b0d      	ldr	r3, [pc, #52]	@ (8014c78 <prvCheckTasksWaitingTermination+0x54>)
 8014c44:	681b      	ldr	r3, [r3, #0]
 8014c46:	3b01      	subs	r3, #1
 8014c48:	4a0b      	ldr	r2, [pc, #44]	@ (8014c78 <prvCheckTasksWaitingTermination+0x54>)
 8014c4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8014c7c <prvCheckTasksWaitingTermination+0x58>)
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	3b01      	subs	r3, #1
 8014c52:	4a0a      	ldr	r2, [pc, #40]	@ (8014c7c <prvCheckTasksWaitingTermination+0x58>)
 8014c54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014c56:	f000 fbe9 	bl	801542c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014c5a:	6878      	ldr	r0, [r7, #4]
 8014c5c:	f000 f810 	bl	8014c80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014c60:	4b06      	ldr	r3, [pc, #24]	@ (8014c7c <prvCheckTasksWaitingTermination+0x58>)
 8014c62:	681b      	ldr	r3, [r3, #0]
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d1e1      	bne.n	8014c2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014c68:	bf00      	nop
 8014c6a:	bf00      	nop
 8014c6c:	3708      	adds	r7, #8
 8014c6e:	46bd      	mov	sp, r7
 8014c70:	bd80      	pop	{r7, pc}
 8014c72:	bf00      	nop
 8014c74:	24002a28 	.word	0x24002a28
 8014c78:	24002a54 	.word	0x24002a54
 8014c7c:	24002a3c 	.word	0x24002a3c

08014c80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014c80:	b580      	push	{r7, lr}
 8014c82:	b084      	sub	sp, #16
 8014c84:	af00      	add	r7, sp, #0
 8014c86:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d108      	bne.n	8014ca4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014c96:	4618      	mov	r0, r3
 8014c98:	f000 fd86 	bl	80157a8 <vPortFree>
				vPortFree( pxTCB );
 8014c9c:	6878      	ldr	r0, [r7, #4]
 8014c9e:	f000 fd83 	bl	80157a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014ca2:	e019      	b.n	8014cd8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8014caa:	2b01      	cmp	r3, #1
 8014cac:	d103      	bne.n	8014cb6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8014cae:	6878      	ldr	r0, [r7, #4]
 8014cb0:	f000 fd7a 	bl	80157a8 <vPortFree>
	}
 8014cb4:	e010      	b.n	8014cd8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8014cbc:	2b02      	cmp	r3, #2
 8014cbe:	d00b      	beq.n	8014cd8 <prvDeleteTCB+0x58>
	__asm volatile
 8014cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014cc4:	f383 8811 	msr	BASEPRI, r3
 8014cc8:	f3bf 8f6f 	isb	sy
 8014ccc:	f3bf 8f4f 	dsb	sy
 8014cd0:	60fb      	str	r3, [r7, #12]
}
 8014cd2:	bf00      	nop
 8014cd4:	bf00      	nop
 8014cd6:	e7fd      	b.n	8014cd4 <prvDeleteTCB+0x54>
	}
 8014cd8:	bf00      	nop
 8014cda:	3710      	adds	r7, #16
 8014cdc:	46bd      	mov	sp, r7
 8014cde:	bd80      	pop	{r7, pc}

08014ce0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014ce0:	b480      	push	{r7}
 8014ce2:	b083      	sub	sp, #12
 8014ce4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8014d18 <prvResetNextTaskUnblockTime+0x38>)
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	681b      	ldr	r3, [r3, #0]
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d104      	bne.n	8014cfa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8014d1c <prvResetNextTaskUnblockTime+0x3c>)
 8014cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8014cf6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014cf8:	e008      	b.n	8014d0c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014cfa:	4b07      	ldr	r3, [pc, #28]	@ (8014d18 <prvResetNextTaskUnblockTime+0x38>)
 8014cfc:	681b      	ldr	r3, [r3, #0]
 8014cfe:	68db      	ldr	r3, [r3, #12]
 8014d00:	68db      	ldr	r3, [r3, #12]
 8014d02:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	685b      	ldr	r3, [r3, #4]
 8014d08:	4a04      	ldr	r2, [pc, #16]	@ (8014d1c <prvResetNextTaskUnblockTime+0x3c>)
 8014d0a:	6013      	str	r3, [r2, #0]
}
 8014d0c:	bf00      	nop
 8014d0e:	370c      	adds	r7, #12
 8014d10:	46bd      	mov	sp, r7
 8014d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d16:	4770      	bx	lr
 8014d18:	24002a0c 	.word	0x24002a0c
 8014d1c:	24002a74 	.word	0x24002a74

08014d20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014d20:	b480      	push	{r7}
 8014d22:	b083      	sub	sp, #12
 8014d24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014d26:	4b0b      	ldr	r3, [pc, #44]	@ (8014d54 <xTaskGetSchedulerState+0x34>)
 8014d28:	681b      	ldr	r3, [r3, #0]
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d102      	bne.n	8014d34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014d2e:	2301      	movs	r3, #1
 8014d30:	607b      	str	r3, [r7, #4]
 8014d32:	e008      	b.n	8014d46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014d34:	4b08      	ldr	r3, [pc, #32]	@ (8014d58 <xTaskGetSchedulerState+0x38>)
 8014d36:	681b      	ldr	r3, [r3, #0]
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	d102      	bne.n	8014d42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014d3c:	2302      	movs	r3, #2
 8014d3e:	607b      	str	r3, [r7, #4]
 8014d40:	e001      	b.n	8014d46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014d42:	2300      	movs	r3, #0
 8014d44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014d46:	687b      	ldr	r3, [r7, #4]
	}
 8014d48:	4618      	mov	r0, r3
 8014d4a:	370c      	adds	r7, #12
 8014d4c:	46bd      	mov	sp, r7
 8014d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d52:	4770      	bx	lr
 8014d54:	24002a60 	.word	0x24002a60
 8014d58:	24002a7c 	.word	0x24002a7c

08014d5c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8014d5c:	b580      	push	{r7, lr}
 8014d5e:	b084      	sub	sp, #16
 8014d60:	af00      	add	r7, sp, #0
 8014d62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014d68:	2300      	movs	r3, #0
 8014d6a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d05e      	beq.n	8014e30 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8014d72:	68bb      	ldr	r3, [r7, #8]
 8014d74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014d76:	4b31      	ldr	r3, [pc, #196]	@ (8014e3c <xTaskPriorityInherit+0xe0>)
 8014d78:	681b      	ldr	r3, [r3, #0]
 8014d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014d7c:	429a      	cmp	r2, r3
 8014d7e:	d24e      	bcs.n	8014e1e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014d80:	68bb      	ldr	r3, [r7, #8]
 8014d82:	699b      	ldr	r3, [r3, #24]
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	db06      	blt.n	8014d96 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014d88:	4b2c      	ldr	r3, [pc, #176]	@ (8014e3c <xTaskPriorityInherit+0xe0>)
 8014d8a:	681b      	ldr	r3, [r3, #0]
 8014d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014d8e:	f1c3 0207 	rsb	r2, r3, #7
 8014d92:	68bb      	ldr	r3, [r7, #8]
 8014d94:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8014d96:	68bb      	ldr	r3, [r7, #8]
 8014d98:	6959      	ldr	r1, [r3, #20]
 8014d9a:	68bb      	ldr	r3, [r7, #8]
 8014d9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014d9e:	4613      	mov	r3, r2
 8014da0:	009b      	lsls	r3, r3, #2
 8014da2:	4413      	add	r3, r2
 8014da4:	009b      	lsls	r3, r3, #2
 8014da6:	4a26      	ldr	r2, [pc, #152]	@ (8014e40 <xTaskPriorityInherit+0xe4>)
 8014da8:	4413      	add	r3, r2
 8014daa:	4299      	cmp	r1, r3
 8014dac:	d12f      	bne.n	8014e0e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014dae:	68bb      	ldr	r3, [r7, #8]
 8014db0:	3304      	adds	r3, #4
 8014db2:	4618      	mov	r0, r3
 8014db4:	f7fe fd66 	bl	8013884 <uxListRemove>
 8014db8:	4603      	mov	r3, r0
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d10a      	bne.n	8014dd4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8014dbe:	68bb      	ldr	r3, [r7, #8]
 8014dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014dc2:	2201      	movs	r2, #1
 8014dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8014dc8:	43da      	mvns	r2, r3
 8014dca:	4b1e      	ldr	r3, [pc, #120]	@ (8014e44 <xTaskPriorityInherit+0xe8>)
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	4013      	ands	r3, r2
 8014dd0:	4a1c      	ldr	r2, [pc, #112]	@ (8014e44 <xTaskPriorityInherit+0xe8>)
 8014dd2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014dd4:	4b19      	ldr	r3, [pc, #100]	@ (8014e3c <xTaskPriorityInherit+0xe0>)
 8014dd6:	681b      	ldr	r3, [r3, #0]
 8014dd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014dda:	68bb      	ldr	r3, [r7, #8]
 8014ddc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8014dde:	68bb      	ldr	r3, [r7, #8]
 8014de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014de2:	2201      	movs	r2, #1
 8014de4:	409a      	lsls	r2, r3
 8014de6:	4b17      	ldr	r3, [pc, #92]	@ (8014e44 <xTaskPriorityInherit+0xe8>)
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	4313      	orrs	r3, r2
 8014dec:	4a15      	ldr	r2, [pc, #84]	@ (8014e44 <xTaskPriorityInherit+0xe8>)
 8014dee:	6013      	str	r3, [r2, #0]
 8014df0:	68bb      	ldr	r3, [r7, #8]
 8014df2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014df4:	4613      	mov	r3, r2
 8014df6:	009b      	lsls	r3, r3, #2
 8014df8:	4413      	add	r3, r2
 8014dfa:	009b      	lsls	r3, r3, #2
 8014dfc:	4a10      	ldr	r2, [pc, #64]	@ (8014e40 <xTaskPriorityInherit+0xe4>)
 8014dfe:	441a      	add	r2, r3
 8014e00:	68bb      	ldr	r3, [r7, #8]
 8014e02:	3304      	adds	r3, #4
 8014e04:	4619      	mov	r1, r3
 8014e06:	4610      	mov	r0, r2
 8014e08:	f7fe fcdf 	bl	80137ca <vListInsertEnd>
 8014e0c:	e004      	b.n	8014e18 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8014e3c <xTaskPriorityInherit+0xe0>)
 8014e10:	681b      	ldr	r3, [r3, #0]
 8014e12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014e14:	68bb      	ldr	r3, [r7, #8]
 8014e16:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8014e18:	2301      	movs	r3, #1
 8014e1a:	60fb      	str	r3, [r7, #12]
 8014e1c:	e008      	b.n	8014e30 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8014e1e:	68bb      	ldr	r3, [r7, #8]
 8014e20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014e22:	4b06      	ldr	r3, [pc, #24]	@ (8014e3c <xTaskPriorityInherit+0xe0>)
 8014e24:	681b      	ldr	r3, [r3, #0]
 8014e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e28:	429a      	cmp	r2, r3
 8014e2a:	d201      	bcs.n	8014e30 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8014e2c:	2301      	movs	r3, #1
 8014e2e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014e30:	68fb      	ldr	r3, [r7, #12]
	}
 8014e32:	4618      	mov	r0, r3
 8014e34:	3710      	adds	r7, #16
 8014e36:	46bd      	mov	sp, r7
 8014e38:	bd80      	pop	{r7, pc}
 8014e3a:	bf00      	nop
 8014e3c:	24002954 	.word	0x24002954
 8014e40:	24002958 	.word	0x24002958
 8014e44:	24002a5c 	.word	0x24002a5c

08014e48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014e48:	b580      	push	{r7, lr}
 8014e4a:	b086      	sub	sp, #24
 8014e4c:	af00      	add	r7, sp, #0
 8014e4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014e54:	2300      	movs	r3, #0
 8014e56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d070      	beq.n	8014f40 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014e5e:	4b3b      	ldr	r3, [pc, #236]	@ (8014f4c <xTaskPriorityDisinherit+0x104>)
 8014e60:	681b      	ldr	r3, [r3, #0]
 8014e62:	693a      	ldr	r2, [r7, #16]
 8014e64:	429a      	cmp	r2, r3
 8014e66:	d00b      	beq.n	8014e80 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8014e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e6c:	f383 8811 	msr	BASEPRI, r3
 8014e70:	f3bf 8f6f 	isb	sy
 8014e74:	f3bf 8f4f 	dsb	sy
 8014e78:	60fb      	str	r3, [r7, #12]
}
 8014e7a:	bf00      	nop
 8014e7c:	bf00      	nop
 8014e7e:	e7fd      	b.n	8014e7c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8014e80:	693b      	ldr	r3, [r7, #16]
 8014e82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d10b      	bne.n	8014ea0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8014e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e8c:	f383 8811 	msr	BASEPRI, r3
 8014e90:	f3bf 8f6f 	isb	sy
 8014e94:	f3bf 8f4f 	dsb	sy
 8014e98:	60bb      	str	r3, [r7, #8]
}
 8014e9a:	bf00      	nop
 8014e9c:	bf00      	nop
 8014e9e:	e7fd      	b.n	8014e9c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8014ea0:	693b      	ldr	r3, [r7, #16]
 8014ea2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014ea4:	1e5a      	subs	r2, r3, #1
 8014ea6:	693b      	ldr	r3, [r7, #16]
 8014ea8:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014eaa:	693b      	ldr	r3, [r7, #16]
 8014eac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014eae:	693b      	ldr	r3, [r7, #16]
 8014eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014eb2:	429a      	cmp	r2, r3
 8014eb4:	d044      	beq.n	8014f40 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014eb6:	693b      	ldr	r3, [r7, #16]
 8014eb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d140      	bne.n	8014f40 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014ebe:	693b      	ldr	r3, [r7, #16]
 8014ec0:	3304      	adds	r3, #4
 8014ec2:	4618      	mov	r0, r3
 8014ec4:	f7fe fcde 	bl	8013884 <uxListRemove>
 8014ec8:	4603      	mov	r3, r0
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d115      	bne.n	8014efa <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014ece:	693b      	ldr	r3, [r7, #16]
 8014ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014ed2:	491f      	ldr	r1, [pc, #124]	@ (8014f50 <xTaskPriorityDisinherit+0x108>)
 8014ed4:	4613      	mov	r3, r2
 8014ed6:	009b      	lsls	r3, r3, #2
 8014ed8:	4413      	add	r3, r2
 8014eda:	009b      	lsls	r3, r3, #2
 8014edc:	440b      	add	r3, r1
 8014ede:	681b      	ldr	r3, [r3, #0]
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d10a      	bne.n	8014efa <xTaskPriorityDisinherit+0xb2>
 8014ee4:	693b      	ldr	r3, [r7, #16]
 8014ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ee8:	2201      	movs	r2, #1
 8014eea:	fa02 f303 	lsl.w	r3, r2, r3
 8014eee:	43da      	mvns	r2, r3
 8014ef0:	4b18      	ldr	r3, [pc, #96]	@ (8014f54 <xTaskPriorityDisinherit+0x10c>)
 8014ef2:	681b      	ldr	r3, [r3, #0]
 8014ef4:	4013      	ands	r3, r2
 8014ef6:	4a17      	ldr	r2, [pc, #92]	@ (8014f54 <xTaskPriorityDisinherit+0x10c>)
 8014ef8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014efa:	693b      	ldr	r3, [r7, #16]
 8014efc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014efe:	693b      	ldr	r3, [r7, #16]
 8014f00:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014f02:	693b      	ldr	r3, [r7, #16]
 8014f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f06:	f1c3 0207 	rsb	r2, r3, #7
 8014f0a:	693b      	ldr	r3, [r7, #16]
 8014f0c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014f0e:	693b      	ldr	r3, [r7, #16]
 8014f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f12:	2201      	movs	r2, #1
 8014f14:	409a      	lsls	r2, r3
 8014f16:	4b0f      	ldr	r3, [pc, #60]	@ (8014f54 <xTaskPriorityDisinherit+0x10c>)
 8014f18:	681b      	ldr	r3, [r3, #0]
 8014f1a:	4313      	orrs	r3, r2
 8014f1c:	4a0d      	ldr	r2, [pc, #52]	@ (8014f54 <xTaskPriorityDisinherit+0x10c>)
 8014f1e:	6013      	str	r3, [r2, #0]
 8014f20:	693b      	ldr	r3, [r7, #16]
 8014f22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014f24:	4613      	mov	r3, r2
 8014f26:	009b      	lsls	r3, r3, #2
 8014f28:	4413      	add	r3, r2
 8014f2a:	009b      	lsls	r3, r3, #2
 8014f2c:	4a08      	ldr	r2, [pc, #32]	@ (8014f50 <xTaskPriorityDisinherit+0x108>)
 8014f2e:	441a      	add	r2, r3
 8014f30:	693b      	ldr	r3, [r7, #16]
 8014f32:	3304      	adds	r3, #4
 8014f34:	4619      	mov	r1, r3
 8014f36:	4610      	mov	r0, r2
 8014f38:	f7fe fc47 	bl	80137ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014f3c:	2301      	movs	r3, #1
 8014f3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014f40:	697b      	ldr	r3, [r7, #20]
	}
 8014f42:	4618      	mov	r0, r3
 8014f44:	3718      	adds	r7, #24
 8014f46:	46bd      	mov	sp, r7
 8014f48:	bd80      	pop	{r7, pc}
 8014f4a:	bf00      	nop
 8014f4c:	24002954 	.word	0x24002954
 8014f50:	24002958 	.word	0x24002958
 8014f54:	24002a5c 	.word	0x24002a5c

08014f58 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8014f58:	b580      	push	{r7, lr}
 8014f5a:	b088      	sub	sp, #32
 8014f5c:	af00      	add	r7, sp, #0
 8014f5e:	6078      	str	r0, [r7, #4]
 8014f60:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8014f66:	2301      	movs	r3, #1
 8014f68:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d079      	beq.n	8015064 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8014f70:	69bb      	ldr	r3, [r7, #24]
 8014f72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014f74:	2b00      	cmp	r3, #0
 8014f76:	d10b      	bne.n	8014f90 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8014f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f7c:	f383 8811 	msr	BASEPRI, r3
 8014f80:	f3bf 8f6f 	isb	sy
 8014f84:	f3bf 8f4f 	dsb	sy
 8014f88:	60fb      	str	r3, [r7, #12]
}
 8014f8a:	bf00      	nop
 8014f8c:	bf00      	nop
 8014f8e:	e7fd      	b.n	8014f8c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8014f90:	69bb      	ldr	r3, [r7, #24]
 8014f92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014f94:	683a      	ldr	r2, [r7, #0]
 8014f96:	429a      	cmp	r2, r3
 8014f98:	d902      	bls.n	8014fa0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8014f9a:	683b      	ldr	r3, [r7, #0]
 8014f9c:	61fb      	str	r3, [r7, #28]
 8014f9e:	e002      	b.n	8014fa6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8014fa0:	69bb      	ldr	r3, [r7, #24]
 8014fa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014fa4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8014fa6:	69bb      	ldr	r3, [r7, #24]
 8014fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014faa:	69fa      	ldr	r2, [r7, #28]
 8014fac:	429a      	cmp	r2, r3
 8014fae:	d059      	beq.n	8015064 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8014fb0:	69bb      	ldr	r3, [r7, #24]
 8014fb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014fb4:	697a      	ldr	r2, [r7, #20]
 8014fb6:	429a      	cmp	r2, r3
 8014fb8:	d154      	bne.n	8015064 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8014fba:	4b2c      	ldr	r3, [pc, #176]	@ (801506c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8014fbc:	681b      	ldr	r3, [r3, #0]
 8014fbe:	69ba      	ldr	r2, [r7, #24]
 8014fc0:	429a      	cmp	r2, r3
 8014fc2:	d10b      	bne.n	8014fdc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8014fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014fc8:	f383 8811 	msr	BASEPRI, r3
 8014fcc:	f3bf 8f6f 	isb	sy
 8014fd0:	f3bf 8f4f 	dsb	sy
 8014fd4:	60bb      	str	r3, [r7, #8]
}
 8014fd6:	bf00      	nop
 8014fd8:	bf00      	nop
 8014fda:	e7fd      	b.n	8014fd8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8014fdc:	69bb      	ldr	r3, [r7, #24]
 8014fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014fe0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8014fe2:	69bb      	ldr	r3, [r7, #24]
 8014fe4:	69fa      	ldr	r2, [r7, #28]
 8014fe6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014fe8:	69bb      	ldr	r3, [r7, #24]
 8014fea:	699b      	ldr	r3, [r3, #24]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	db04      	blt.n	8014ffa <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014ff0:	69fb      	ldr	r3, [r7, #28]
 8014ff2:	f1c3 0207 	rsb	r2, r3, #7
 8014ff6:	69bb      	ldr	r3, [r7, #24]
 8014ff8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014ffa:	69bb      	ldr	r3, [r7, #24]
 8014ffc:	6959      	ldr	r1, [r3, #20]
 8014ffe:	693a      	ldr	r2, [r7, #16]
 8015000:	4613      	mov	r3, r2
 8015002:	009b      	lsls	r3, r3, #2
 8015004:	4413      	add	r3, r2
 8015006:	009b      	lsls	r3, r3, #2
 8015008:	4a19      	ldr	r2, [pc, #100]	@ (8015070 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801500a:	4413      	add	r3, r2
 801500c:	4299      	cmp	r1, r3
 801500e:	d129      	bne.n	8015064 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015010:	69bb      	ldr	r3, [r7, #24]
 8015012:	3304      	adds	r3, #4
 8015014:	4618      	mov	r0, r3
 8015016:	f7fe fc35 	bl	8013884 <uxListRemove>
 801501a:	4603      	mov	r3, r0
 801501c:	2b00      	cmp	r3, #0
 801501e:	d10a      	bne.n	8015036 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8015020:	69bb      	ldr	r3, [r7, #24]
 8015022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015024:	2201      	movs	r2, #1
 8015026:	fa02 f303 	lsl.w	r3, r2, r3
 801502a:	43da      	mvns	r2, r3
 801502c:	4b11      	ldr	r3, [pc, #68]	@ (8015074 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 801502e:	681b      	ldr	r3, [r3, #0]
 8015030:	4013      	ands	r3, r2
 8015032:	4a10      	ldr	r2, [pc, #64]	@ (8015074 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8015034:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8015036:	69bb      	ldr	r3, [r7, #24]
 8015038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801503a:	2201      	movs	r2, #1
 801503c:	409a      	lsls	r2, r3
 801503e:	4b0d      	ldr	r3, [pc, #52]	@ (8015074 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8015040:	681b      	ldr	r3, [r3, #0]
 8015042:	4313      	orrs	r3, r2
 8015044:	4a0b      	ldr	r2, [pc, #44]	@ (8015074 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8015046:	6013      	str	r3, [r2, #0]
 8015048:	69bb      	ldr	r3, [r7, #24]
 801504a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801504c:	4613      	mov	r3, r2
 801504e:	009b      	lsls	r3, r3, #2
 8015050:	4413      	add	r3, r2
 8015052:	009b      	lsls	r3, r3, #2
 8015054:	4a06      	ldr	r2, [pc, #24]	@ (8015070 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8015056:	441a      	add	r2, r3
 8015058:	69bb      	ldr	r3, [r7, #24]
 801505a:	3304      	adds	r3, #4
 801505c:	4619      	mov	r1, r3
 801505e:	4610      	mov	r0, r2
 8015060:	f7fe fbb3 	bl	80137ca <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015064:	bf00      	nop
 8015066:	3720      	adds	r7, #32
 8015068:	46bd      	mov	sp, r7
 801506a:	bd80      	pop	{r7, pc}
 801506c:	24002954 	.word	0x24002954
 8015070:	24002958 	.word	0x24002958
 8015074:	24002a5c 	.word	0x24002a5c

08015078 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8015078:	b480      	push	{r7}
 801507a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801507c:	4b07      	ldr	r3, [pc, #28]	@ (801509c <pvTaskIncrementMutexHeldCount+0x24>)
 801507e:	681b      	ldr	r3, [r3, #0]
 8015080:	2b00      	cmp	r3, #0
 8015082:	d004      	beq.n	801508e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8015084:	4b05      	ldr	r3, [pc, #20]	@ (801509c <pvTaskIncrementMutexHeldCount+0x24>)
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801508a:	3201      	adds	r2, #1
 801508c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 801508e:	4b03      	ldr	r3, [pc, #12]	@ (801509c <pvTaskIncrementMutexHeldCount+0x24>)
 8015090:	681b      	ldr	r3, [r3, #0]
	}
 8015092:	4618      	mov	r0, r3
 8015094:	46bd      	mov	sp, r7
 8015096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801509a:	4770      	bx	lr
 801509c:	24002954 	.word	0x24002954

080150a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80150a0:	b580      	push	{r7, lr}
 80150a2:	b084      	sub	sp, #16
 80150a4:	af00      	add	r7, sp, #0
 80150a6:	6078      	str	r0, [r7, #4]
 80150a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80150aa:	4b29      	ldr	r3, [pc, #164]	@ (8015150 <prvAddCurrentTaskToDelayedList+0xb0>)
 80150ac:	681b      	ldr	r3, [r3, #0]
 80150ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80150b0:	4b28      	ldr	r3, [pc, #160]	@ (8015154 <prvAddCurrentTaskToDelayedList+0xb4>)
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	3304      	adds	r3, #4
 80150b6:	4618      	mov	r0, r3
 80150b8:	f7fe fbe4 	bl	8013884 <uxListRemove>
 80150bc:	4603      	mov	r3, r0
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d10b      	bne.n	80150da <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80150c2:	4b24      	ldr	r3, [pc, #144]	@ (8015154 <prvAddCurrentTaskToDelayedList+0xb4>)
 80150c4:	681b      	ldr	r3, [r3, #0]
 80150c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80150c8:	2201      	movs	r2, #1
 80150ca:	fa02 f303 	lsl.w	r3, r2, r3
 80150ce:	43da      	mvns	r2, r3
 80150d0:	4b21      	ldr	r3, [pc, #132]	@ (8015158 <prvAddCurrentTaskToDelayedList+0xb8>)
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	4013      	ands	r3, r2
 80150d6:	4a20      	ldr	r2, [pc, #128]	@ (8015158 <prvAddCurrentTaskToDelayedList+0xb8>)
 80150d8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80150e0:	d10a      	bne.n	80150f8 <prvAddCurrentTaskToDelayedList+0x58>
 80150e2:	683b      	ldr	r3, [r7, #0]
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d007      	beq.n	80150f8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80150e8:	4b1a      	ldr	r3, [pc, #104]	@ (8015154 <prvAddCurrentTaskToDelayedList+0xb4>)
 80150ea:	681b      	ldr	r3, [r3, #0]
 80150ec:	3304      	adds	r3, #4
 80150ee:	4619      	mov	r1, r3
 80150f0:	481a      	ldr	r0, [pc, #104]	@ (801515c <prvAddCurrentTaskToDelayedList+0xbc>)
 80150f2:	f7fe fb6a 	bl	80137ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80150f6:	e026      	b.n	8015146 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80150f8:	68fa      	ldr	r2, [r7, #12]
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	4413      	add	r3, r2
 80150fe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015100:	4b14      	ldr	r3, [pc, #80]	@ (8015154 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015102:	681b      	ldr	r3, [r3, #0]
 8015104:	68ba      	ldr	r2, [r7, #8]
 8015106:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8015108:	68ba      	ldr	r2, [r7, #8]
 801510a:	68fb      	ldr	r3, [r7, #12]
 801510c:	429a      	cmp	r2, r3
 801510e:	d209      	bcs.n	8015124 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015110:	4b13      	ldr	r3, [pc, #76]	@ (8015160 <prvAddCurrentTaskToDelayedList+0xc0>)
 8015112:	681a      	ldr	r2, [r3, #0]
 8015114:	4b0f      	ldr	r3, [pc, #60]	@ (8015154 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	3304      	adds	r3, #4
 801511a:	4619      	mov	r1, r3
 801511c:	4610      	mov	r0, r2
 801511e:	f7fe fb78 	bl	8013812 <vListInsert>
}
 8015122:	e010      	b.n	8015146 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015124:	4b0f      	ldr	r3, [pc, #60]	@ (8015164 <prvAddCurrentTaskToDelayedList+0xc4>)
 8015126:	681a      	ldr	r2, [r3, #0]
 8015128:	4b0a      	ldr	r3, [pc, #40]	@ (8015154 <prvAddCurrentTaskToDelayedList+0xb4>)
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	3304      	adds	r3, #4
 801512e:	4619      	mov	r1, r3
 8015130:	4610      	mov	r0, r2
 8015132:	f7fe fb6e 	bl	8013812 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015136:	4b0c      	ldr	r3, [pc, #48]	@ (8015168 <prvAddCurrentTaskToDelayedList+0xc8>)
 8015138:	681b      	ldr	r3, [r3, #0]
 801513a:	68ba      	ldr	r2, [r7, #8]
 801513c:	429a      	cmp	r2, r3
 801513e:	d202      	bcs.n	8015146 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8015140:	4a09      	ldr	r2, [pc, #36]	@ (8015168 <prvAddCurrentTaskToDelayedList+0xc8>)
 8015142:	68bb      	ldr	r3, [r7, #8]
 8015144:	6013      	str	r3, [r2, #0]
}
 8015146:	bf00      	nop
 8015148:	3710      	adds	r7, #16
 801514a:	46bd      	mov	sp, r7
 801514c:	bd80      	pop	{r7, pc}
 801514e:	bf00      	nop
 8015150:	24002a58 	.word	0x24002a58
 8015154:	24002954 	.word	0x24002954
 8015158:	24002a5c 	.word	0x24002a5c
 801515c:	24002a40 	.word	0x24002a40
 8015160:	24002a10 	.word	0x24002a10
 8015164:	24002a0c 	.word	0x24002a0c
 8015168:	24002a74 	.word	0x24002a74

0801516c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801516c:	b480      	push	{r7}
 801516e:	b085      	sub	sp, #20
 8015170:	af00      	add	r7, sp, #0
 8015172:	60f8      	str	r0, [r7, #12]
 8015174:	60b9      	str	r1, [r7, #8]
 8015176:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	3b04      	subs	r3, #4
 801517c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8015184:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015186:	68fb      	ldr	r3, [r7, #12]
 8015188:	3b04      	subs	r3, #4
 801518a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801518c:	68bb      	ldr	r3, [r7, #8]
 801518e:	f023 0201 	bic.w	r2, r3, #1
 8015192:	68fb      	ldr	r3, [r7, #12]
 8015194:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	3b04      	subs	r3, #4
 801519a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801519c:	4a0c      	ldr	r2, [pc, #48]	@ (80151d0 <pxPortInitialiseStack+0x64>)
 801519e:	68fb      	ldr	r3, [r7, #12]
 80151a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80151a2:	68fb      	ldr	r3, [r7, #12]
 80151a4:	3b14      	subs	r3, #20
 80151a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80151a8:	687a      	ldr	r2, [r7, #4]
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80151ae:	68fb      	ldr	r3, [r7, #12]
 80151b0:	3b04      	subs	r3, #4
 80151b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	f06f 0202 	mvn.w	r2, #2
 80151ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80151bc:	68fb      	ldr	r3, [r7, #12]
 80151be:	3b20      	subs	r3, #32
 80151c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80151c2:	68fb      	ldr	r3, [r7, #12]
}
 80151c4:	4618      	mov	r0, r3
 80151c6:	3714      	adds	r7, #20
 80151c8:	46bd      	mov	sp, r7
 80151ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ce:	4770      	bx	lr
 80151d0:	080151d5 	.word	0x080151d5

080151d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80151d4:	b480      	push	{r7}
 80151d6:	b085      	sub	sp, #20
 80151d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80151da:	2300      	movs	r3, #0
 80151dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80151de:	4b13      	ldr	r3, [pc, #76]	@ (801522c <prvTaskExitError+0x58>)
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151e6:	d00b      	beq.n	8015200 <prvTaskExitError+0x2c>
	__asm volatile
 80151e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80151ec:	f383 8811 	msr	BASEPRI, r3
 80151f0:	f3bf 8f6f 	isb	sy
 80151f4:	f3bf 8f4f 	dsb	sy
 80151f8:	60fb      	str	r3, [r7, #12]
}
 80151fa:	bf00      	nop
 80151fc:	bf00      	nop
 80151fe:	e7fd      	b.n	80151fc <prvTaskExitError+0x28>
	__asm volatile
 8015200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015204:	f383 8811 	msr	BASEPRI, r3
 8015208:	f3bf 8f6f 	isb	sy
 801520c:	f3bf 8f4f 	dsb	sy
 8015210:	60bb      	str	r3, [r7, #8]
}
 8015212:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015214:	bf00      	nop
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	2b00      	cmp	r3, #0
 801521a:	d0fc      	beq.n	8015216 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801521c:	bf00      	nop
 801521e:	bf00      	nop
 8015220:	3714      	adds	r7, #20
 8015222:	46bd      	mov	sp, r7
 8015224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015228:	4770      	bx	lr
 801522a:	bf00      	nop
 801522c:	240000c4 	.word	0x240000c4

08015230 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015230:	4b07      	ldr	r3, [pc, #28]	@ (8015250 <pxCurrentTCBConst2>)
 8015232:	6819      	ldr	r1, [r3, #0]
 8015234:	6808      	ldr	r0, [r1, #0]
 8015236:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801523a:	f380 8809 	msr	PSP, r0
 801523e:	f3bf 8f6f 	isb	sy
 8015242:	f04f 0000 	mov.w	r0, #0
 8015246:	f380 8811 	msr	BASEPRI, r0
 801524a:	4770      	bx	lr
 801524c:	f3af 8000 	nop.w

08015250 <pxCurrentTCBConst2>:
 8015250:	24002954 	.word	0x24002954
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015254:	bf00      	nop
 8015256:	bf00      	nop

08015258 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015258:	4808      	ldr	r0, [pc, #32]	@ (801527c <prvPortStartFirstTask+0x24>)
 801525a:	6800      	ldr	r0, [r0, #0]
 801525c:	6800      	ldr	r0, [r0, #0]
 801525e:	f380 8808 	msr	MSP, r0
 8015262:	f04f 0000 	mov.w	r0, #0
 8015266:	f380 8814 	msr	CONTROL, r0
 801526a:	b662      	cpsie	i
 801526c:	b661      	cpsie	f
 801526e:	f3bf 8f4f 	dsb	sy
 8015272:	f3bf 8f6f 	isb	sy
 8015276:	df00      	svc	0
 8015278:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801527a:	bf00      	nop
 801527c:	e000ed08 	.word	0xe000ed08

08015280 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015280:	b580      	push	{r7, lr}
 8015282:	b086      	sub	sp, #24
 8015284:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015286:	4b47      	ldr	r3, [pc, #284]	@ (80153a4 <xPortStartScheduler+0x124>)
 8015288:	681b      	ldr	r3, [r3, #0]
 801528a:	4a47      	ldr	r2, [pc, #284]	@ (80153a8 <xPortStartScheduler+0x128>)
 801528c:	4293      	cmp	r3, r2
 801528e:	d10b      	bne.n	80152a8 <xPortStartScheduler+0x28>
	__asm volatile
 8015290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015294:	f383 8811 	msr	BASEPRI, r3
 8015298:	f3bf 8f6f 	isb	sy
 801529c:	f3bf 8f4f 	dsb	sy
 80152a0:	613b      	str	r3, [r7, #16]
}
 80152a2:	bf00      	nop
 80152a4:	bf00      	nop
 80152a6:	e7fd      	b.n	80152a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80152a8:	4b3e      	ldr	r3, [pc, #248]	@ (80153a4 <xPortStartScheduler+0x124>)
 80152aa:	681b      	ldr	r3, [r3, #0]
 80152ac:	4a3f      	ldr	r2, [pc, #252]	@ (80153ac <xPortStartScheduler+0x12c>)
 80152ae:	4293      	cmp	r3, r2
 80152b0:	d10b      	bne.n	80152ca <xPortStartScheduler+0x4a>
	__asm volatile
 80152b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80152b6:	f383 8811 	msr	BASEPRI, r3
 80152ba:	f3bf 8f6f 	isb	sy
 80152be:	f3bf 8f4f 	dsb	sy
 80152c2:	60fb      	str	r3, [r7, #12]
}
 80152c4:	bf00      	nop
 80152c6:	bf00      	nop
 80152c8:	e7fd      	b.n	80152c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80152ca:	4b39      	ldr	r3, [pc, #228]	@ (80153b0 <xPortStartScheduler+0x130>)
 80152cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80152ce:	697b      	ldr	r3, [r7, #20]
 80152d0:	781b      	ldrb	r3, [r3, #0]
 80152d2:	b2db      	uxtb	r3, r3
 80152d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80152d6:	697b      	ldr	r3, [r7, #20]
 80152d8:	22ff      	movs	r2, #255	@ 0xff
 80152da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80152dc:	697b      	ldr	r3, [r7, #20]
 80152de:	781b      	ldrb	r3, [r3, #0]
 80152e0:	b2db      	uxtb	r3, r3
 80152e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80152e4:	78fb      	ldrb	r3, [r7, #3]
 80152e6:	b2db      	uxtb	r3, r3
 80152e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80152ec:	b2da      	uxtb	r2, r3
 80152ee:	4b31      	ldr	r3, [pc, #196]	@ (80153b4 <xPortStartScheduler+0x134>)
 80152f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80152f2:	4b31      	ldr	r3, [pc, #196]	@ (80153b8 <xPortStartScheduler+0x138>)
 80152f4:	2207      	movs	r2, #7
 80152f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80152f8:	e009      	b.n	801530e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80152fa:	4b2f      	ldr	r3, [pc, #188]	@ (80153b8 <xPortStartScheduler+0x138>)
 80152fc:	681b      	ldr	r3, [r3, #0]
 80152fe:	3b01      	subs	r3, #1
 8015300:	4a2d      	ldr	r2, [pc, #180]	@ (80153b8 <xPortStartScheduler+0x138>)
 8015302:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015304:	78fb      	ldrb	r3, [r7, #3]
 8015306:	b2db      	uxtb	r3, r3
 8015308:	005b      	lsls	r3, r3, #1
 801530a:	b2db      	uxtb	r3, r3
 801530c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801530e:	78fb      	ldrb	r3, [r7, #3]
 8015310:	b2db      	uxtb	r3, r3
 8015312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015316:	2b80      	cmp	r3, #128	@ 0x80
 8015318:	d0ef      	beq.n	80152fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801531a:	4b27      	ldr	r3, [pc, #156]	@ (80153b8 <xPortStartScheduler+0x138>)
 801531c:	681b      	ldr	r3, [r3, #0]
 801531e:	f1c3 0307 	rsb	r3, r3, #7
 8015322:	2b04      	cmp	r3, #4
 8015324:	d00b      	beq.n	801533e <xPortStartScheduler+0xbe>
	__asm volatile
 8015326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801532a:	f383 8811 	msr	BASEPRI, r3
 801532e:	f3bf 8f6f 	isb	sy
 8015332:	f3bf 8f4f 	dsb	sy
 8015336:	60bb      	str	r3, [r7, #8]
}
 8015338:	bf00      	nop
 801533a:	bf00      	nop
 801533c:	e7fd      	b.n	801533a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801533e:	4b1e      	ldr	r3, [pc, #120]	@ (80153b8 <xPortStartScheduler+0x138>)
 8015340:	681b      	ldr	r3, [r3, #0]
 8015342:	021b      	lsls	r3, r3, #8
 8015344:	4a1c      	ldr	r2, [pc, #112]	@ (80153b8 <xPortStartScheduler+0x138>)
 8015346:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015348:	4b1b      	ldr	r3, [pc, #108]	@ (80153b8 <xPortStartScheduler+0x138>)
 801534a:	681b      	ldr	r3, [r3, #0]
 801534c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8015350:	4a19      	ldr	r2, [pc, #100]	@ (80153b8 <xPortStartScheduler+0x138>)
 8015352:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	b2da      	uxtb	r2, r3
 8015358:	697b      	ldr	r3, [r7, #20]
 801535a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801535c:	4b17      	ldr	r3, [pc, #92]	@ (80153bc <xPortStartScheduler+0x13c>)
 801535e:	681b      	ldr	r3, [r3, #0]
 8015360:	4a16      	ldr	r2, [pc, #88]	@ (80153bc <xPortStartScheduler+0x13c>)
 8015362:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8015366:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015368:	4b14      	ldr	r3, [pc, #80]	@ (80153bc <xPortStartScheduler+0x13c>)
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	4a13      	ldr	r2, [pc, #76]	@ (80153bc <xPortStartScheduler+0x13c>)
 801536e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8015372:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015374:	f000 f8da 	bl	801552c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015378:	4b11      	ldr	r3, [pc, #68]	@ (80153c0 <xPortStartScheduler+0x140>)
 801537a:	2200      	movs	r2, #0
 801537c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801537e:	f000 f8f9 	bl	8015574 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015382:	4b10      	ldr	r3, [pc, #64]	@ (80153c4 <xPortStartScheduler+0x144>)
 8015384:	681b      	ldr	r3, [r3, #0]
 8015386:	4a0f      	ldr	r2, [pc, #60]	@ (80153c4 <xPortStartScheduler+0x144>)
 8015388:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801538c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801538e:	f7ff ff63 	bl	8015258 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015392:	f7ff fa83 	bl	801489c <vTaskSwitchContext>
	prvTaskExitError();
 8015396:	f7ff ff1d 	bl	80151d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801539a:	2300      	movs	r3, #0
}
 801539c:	4618      	mov	r0, r3
 801539e:	3718      	adds	r7, #24
 80153a0:	46bd      	mov	sp, r7
 80153a2:	bd80      	pop	{r7, pc}
 80153a4:	e000ed00 	.word	0xe000ed00
 80153a8:	410fc271 	.word	0x410fc271
 80153ac:	410fc270 	.word	0x410fc270
 80153b0:	e000e400 	.word	0xe000e400
 80153b4:	24002a80 	.word	0x24002a80
 80153b8:	24002a84 	.word	0x24002a84
 80153bc:	e000ed20 	.word	0xe000ed20
 80153c0:	240000c4 	.word	0x240000c4
 80153c4:	e000ef34 	.word	0xe000ef34

080153c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80153c8:	b480      	push	{r7}
 80153ca:	b083      	sub	sp, #12
 80153cc:	af00      	add	r7, sp, #0
	__asm volatile
 80153ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80153d2:	f383 8811 	msr	BASEPRI, r3
 80153d6:	f3bf 8f6f 	isb	sy
 80153da:	f3bf 8f4f 	dsb	sy
 80153de:	607b      	str	r3, [r7, #4]
}
 80153e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80153e2:	4b10      	ldr	r3, [pc, #64]	@ (8015424 <vPortEnterCritical+0x5c>)
 80153e4:	681b      	ldr	r3, [r3, #0]
 80153e6:	3301      	adds	r3, #1
 80153e8:	4a0e      	ldr	r2, [pc, #56]	@ (8015424 <vPortEnterCritical+0x5c>)
 80153ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80153ec:	4b0d      	ldr	r3, [pc, #52]	@ (8015424 <vPortEnterCritical+0x5c>)
 80153ee:	681b      	ldr	r3, [r3, #0]
 80153f0:	2b01      	cmp	r3, #1
 80153f2:	d110      	bne.n	8015416 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80153f4:	4b0c      	ldr	r3, [pc, #48]	@ (8015428 <vPortEnterCritical+0x60>)
 80153f6:	681b      	ldr	r3, [r3, #0]
 80153f8:	b2db      	uxtb	r3, r3
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d00b      	beq.n	8015416 <vPortEnterCritical+0x4e>
	__asm volatile
 80153fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015402:	f383 8811 	msr	BASEPRI, r3
 8015406:	f3bf 8f6f 	isb	sy
 801540a:	f3bf 8f4f 	dsb	sy
 801540e:	603b      	str	r3, [r7, #0]
}
 8015410:	bf00      	nop
 8015412:	bf00      	nop
 8015414:	e7fd      	b.n	8015412 <vPortEnterCritical+0x4a>
	}
}
 8015416:	bf00      	nop
 8015418:	370c      	adds	r7, #12
 801541a:	46bd      	mov	sp, r7
 801541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015420:	4770      	bx	lr
 8015422:	bf00      	nop
 8015424:	240000c4 	.word	0x240000c4
 8015428:	e000ed04 	.word	0xe000ed04

0801542c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801542c:	b480      	push	{r7}
 801542e:	b083      	sub	sp, #12
 8015430:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015432:	4b12      	ldr	r3, [pc, #72]	@ (801547c <vPortExitCritical+0x50>)
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	2b00      	cmp	r3, #0
 8015438:	d10b      	bne.n	8015452 <vPortExitCritical+0x26>
	__asm volatile
 801543a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801543e:	f383 8811 	msr	BASEPRI, r3
 8015442:	f3bf 8f6f 	isb	sy
 8015446:	f3bf 8f4f 	dsb	sy
 801544a:	607b      	str	r3, [r7, #4]
}
 801544c:	bf00      	nop
 801544e:	bf00      	nop
 8015450:	e7fd      	b.n	801544e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015452:	4b0a      	ldr	r3, [pc, #40]	@ (801547c <vPortExitCritical+0x50>)
 8015454:	681b      	ldr	r3, [r3, #0]
 8015456:	3b01      	subs	r3, #1
 8015458:	4a08      	ldr	r2, [pc, #32]	@ (801547c <vPortExitCritical+0x50>)
 801545a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801545c:	4b07      	ldr	r3, [pc, #28]	@ (801547c <vPortExitCritical+0x50>)
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	2b00      	cmp	r3, #0
 8015462:	d105      	bne.n	8015470 <vPortExitCritical+0x44>
 8015464:	2300      	movs	r3, #0
 8015466:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015468:	683b      	ldr	r3, [r7, #0]
 801546a:	f383 8811 	msr	BASEPRI, r3
}
 801546e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015470:	bf00      	nop
 8015472:	370c      	adds	r7, #12
 8015474:	46bd      	mov	sp, r7
 8015476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801547a:	4770      	bx	lr
 801547c:	240000c4 	.word	0x240000c4

08015480 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015480:	f3ef 8009 	mrs	r0, PSP
 8015484:	f3bf 8f6f 	isb	sy
 8015488:	4b15      	ldr	r3, [pc, #84]	@ (80154e0 <pxCurrentTCBConst>)
 801548a:	681a      	ldr	r2, [r3, #0]
 801548c:	f01e 0f10 	tst.w	lr, #16
 8015490:	bf08      	it	eq
 8015492:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015496:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801549a:	6010      	str	r0, [r2, #0]
 801549c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80154a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80154a4:	f380 8811 	msr	BASEPRI, r0
 80154a8:	f3bf 8f4f 	dsb	sy
 80154ac:	f3bf 8f6f 	isb	sy
 80154b0:	f7ff f9f4 	bl	801489c <vTaskSwitchContext>
 80154b4:	f04f 0000 	mov.w	r0, #0
 80154b8:	f380 8811 	msr	BASEPRI, r0
 80154bc:	bc09      	pop	{r0, r3}
 80154be:	6819      	ldr	r1, [r3, #0]
 80154c0:	6808      	ldr	r0, [r1, #0]
 80154c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154c6:	f01e 0f10 	tst.w	lr, #16
 80154ca:	bf08      	it	eq
 80154cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80154d0:	f380 8809 	msr	PSP, r0
 80154d4:	f3bf 8f6f 	isb	sy
 80154d8:	4770      	bx	lr
 80154da:	bf00      	nop
 80154dc:	f3af 8000 	nop.w

080154e0 <pxCurrentTCBConst>:
 80154e0:	24002954 	.word	0x24002954
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80154e4:	bf00      	nop
 80154e6:	bf00      	nop

080154e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80154e8:	b580      	push	{r7, lr}
 80154ea:	b082      	sub	sp, #8
 80154ec:	af00      	add	r7, sp, #0
	__asm volatile
 80154ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80154f2:	f383 8811 	msr	BASEPRI, r3
 80154f6:	f3bf 8f6f 	isb	sy
 80154fa:	f3bf 8f4f 	dsb	sy
 80154fe:	607b      	str	r3, [r7, #4]
}
 8015500:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015502:	f7ff f911 	bl	8014728 <xTaskIncrementTick>
 8015506:	4603      	mov	r3, r0
 8015508:	2b00      	cmp	r3, #0
 801550a:	d003      	beq.n	8015514 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801550c:	4b06      	ldr	r3, [pc, #24]	@ (8015528 <SysTick_Handler+0x40>)
 801550e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015512:	601a      	str	r2, [r3, #0]
 8015514:	2300      	movs	r3, #0
 8015516:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015518:	683b      	ldr	r3, [r7, #0]
 801551a:	f383 8811 	msr	BASEPRI, r3
}
 801551e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015520:	bf00      	nop
 8015522:	3708      	adds	r7, #8
 8015524:	46bd      	mov	sp, r7
 8015526:	bd80      	pop	{r7, pc}
 8015528:	e000ed04 	.word	0xe000ed04

0801552c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801552c:	b480      	push	{r7}
 801552e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015530:	4b0b      	ldr	r3, [pc, #44]	@ (8015560 <vPortSetupTimerInterrupt+0x34>)
 8015532:	2200      	movs	r2, #0
 8015534:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015536:	4b0b      	ldr	r3, [pc, #44]	@ (8015564 <vPortSetupTimerInterrupt+0x38>)
 8015538:	2200      	movs	r2, #0
 801553a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801553c:	4b0a      	ldr	r3, [pc, #40]	@ (8015568 <vPortSetupTimerInterrupt+0x3c>)
 801553e:	681b      	ldr	r3, [r3, #0]
 8015540:	4a0a      	ldr	r2, [pc, #40]	@ (801556c <vPortSetupTimerInterrupt+0x40>)
 8015542:	fba2 2303 	umull	r2, r3, r2, r3
 8015546:	099b      	lsrs	r3, r3, #6
 8015548:	4a09      	ldr	r2, [pc, #36]	@ (8015570 <vPortSetupTimerInterrupt+0x44>)
 801554a:	3b01      	subs	r3, #1
 801554c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801554e:	4b04      	ldr	r3, [pc, #16]	@ (8015560 <vPortSetupTimerInterrupt+0x34>)
 8015550:	2207      	movs	r2, #7
 8015552:	601a      	str	r2, [r3, #0]
}
 8015554:	bf00      	nop
 8015556:	46bd      	mov	sp, r7
 8015558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801555c:	4770      	bx	lr
 801555e:	bf00      	nop
 8015560:	e000e010 	.word	0xe000e010
 8015564:	e000e018 	.word	0xe000e018
 8015568:	24000000 	.word	0x24000000
 801556c:	10624dd3 	.word	0x10624dd3
 8015570:	e000e014 	.word	0xe000e014

08015574 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015574:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8015584 <vPortEnableVFP+0x10>
 8015578:	6801      	ldr	r1, [r0, #0]
 801557a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801557e:	6001      	str	r1, [r0, #0]
 8015580:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015582:	bf00      	nop
 8015584:	e000ed88 	.word	0xe000ed88

08015588 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015588:	b480      	push	{r7}
 801558a:	b085      	sub	sp, #20
 801558c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801558e:	f3ef 8305 	mrs	r3, IPSR
 8015592:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	2b0f      	cmp	r3, #15
 8015598:	d915      	bls.n	80155c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801559a:	4a18      	ldr	r2, [pc, #96]	@ (80155fc <vPortValidateInterruptPriority+0x74>)
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	4413      	add	r3, r2
 80155a0:	781b      	ldrb	r3, [r3, #0]
 80155a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80155a4:	4b16      	ldr	r3, [pc, #88]	@ (8015600 <vPortValidateInterruptPriority+0x78>)
 80155a6:	781b      	ldrb	r3, [r3, #0]
 80155a8:	7afa      	ldrb	r2, [r7, #11]
 80155aa:	429a      	cmp	r2, r3
 80155ac:	d20b      	bcs.n	80155c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80155ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80155b2:	f383 8811 	msr	BASEPRI, r3
 80155b6:	f3bf 8f6f 	isb	sy
 80155ba:	f3bf 8f4f 	dsb	sy
 80155be:	607b      	str	r3, [r7, #4]
}
 80155c0:	bf00      	nop
 80155c2:	bf00      	nop
 80155c4:	e7fd      	b.n	80155c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80155c6:	4b0f      	ldr	r3, [pc, #60]	@ (8015604 <vPortValidateInterruptPriority+0x7c>)
 80155c8:	681b      	ldr	r3, [r3, #0]
 80155ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80155ce:	4b0e      	ldr	r3, [pc, #56]	@ (8015608 <vPortValidateInterruptPriority+0x80>)
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	429a      	cmp	r2, r3
 80155d4:	d90b      	bls.n	80155ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80155d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80155da:	f383 8811 	msr	BASEPRI, r3
 80155de:	f3bf 8f6f 	isb	sy
 80155e2:	f3bf 8f4f 	dsb	sy
 80155e6:	603b      	str	r3, [r7, #0]
}
 80155e8:	bf00      	nop
 80155ea:	bf00      	nop
 80155ec:	e7fd      	b.n	80155ea <vPortValidateInterruptPriority+0x62>
	}
 80155ee:	bf00      	nop
 80155f0:	3714      	adds	r7, #20
 80155f2:	46bd      	mov	sp, r7
 80155f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155f8:	4770      	bx	lr
 80155fa:	bf00      	nop
 80155fc:	e000e3f0 	.word	0xe000e3f0
 8015600:	24002a80 	.word	0x24002a80
 8015604:	e000ed0c 	.word	0xe000ed0c
 8015608:	24002a84 	.word	0x24002a84

0801560c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801560c:	b580      	push	{r7, lr}
 801560e:	b08a      	sub	sp, #40	@ 0x28
 8015610:	af00      	add	r7, sp, #0
 8015612:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015614:	2300      	movs	r3, #0
 8015616:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015618:	f7fe ffda 	bl	80145d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801561c:	4b5c      	ldr	r3, [pc, #368]	@ (8015790 <pvPortMalloc+0x184>)
 801561e:	681b      	ldr	r3, [r3, #0]
 8015620:	2b00      	cmp	r3, #0
 8015622:	d101      	bne.n	8015628 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015624:	f000 f924 	bl	8015870 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015628:	4b5a      	ldr	r3, [pc, #360]	@ (8015794 <pvPortMalloc+0x188>)
 801562a:	681a      	ldr	r2, [r3, #0]
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	4013      	ands	r3, r2
 8015630:	2b00      	cmp	r3, #0
 8015632:	f040 8095 	bne.w	8015760 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	2b00      	cmp	r3, #0
 801563a:	d01e      	beq.n	801567a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801563c:	2208      	movs	r2, #8
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	4413      	add	r3, r2
 8015642:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	f003 0307 	and.w	r3, r3, #7
 801564a:	2b00      	cmp	r3, #0
 801564c:	d015      	beq.n	801567a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	f023 0307 	bic.w	r3, r3, #7
 8015654:	3308      	adds	r3, #8
 8015656:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	f003 0307 	and.w	r3, r3, #7
 801565e:	2b00      	cmp	r3, #0
 8015660:	d00b      	beq.n	801567a <pvPortMalloc+0x6e>
	__asm volatile
 8015662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015666:	f383 8811 	msr	BASEPRI, r3
 801566a:	f3bf 8f6f 	isb	sy
 801566e:	f3bf 8f4f 	dsb	sy
 8015672:	617b      	str	r3, [r7, #20]
}
 8015674:	bf00      	nop
 8015676:	bf00      	nop
 8015678:	e7fd      	b.n	8015676 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	2b00      	cmp	r3, #0
 801567e:	d06f      	beq.n	8015760 <pvPortMalloc+0x154>
 8015680:	4b45      	ldr	r3, [pc, #276]	@ (8015798 <pvPortMalloc+0x18c>)
 8015682:	681b      	ldr	r3, [r3, #0]
 8015684:	687a      	ldr	r2, [r7, #4]
 8015686:	429a      	cmp	r2, r3
 8015688:	d86a      	bhi.n	8015760 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801568a:	4b44      	ldr	r3, [pc, #272]	@ (801579c <pvPortMalloc+0x190>)
 801568c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801568e:	4b43      	ldr	r3, [pc, #268]	@ (801579c <pvPortMalloc+0x190>)
 8015690:	681b      	ldr	r3, [r3, #0]
 8015692:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015694:	e004      	b.n	80156a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8015696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015698:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801569a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801569c:	681b      	ldr	r3, [r3, #0]
 801569e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80156a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156a2:	685b      	ldr	r3, [r3, #4]
 80156a4:	687a      	ldr	r2, [r7, #4]
 80156a6:	429a      	cmp	r2, r3
 80156a8:	d903      	bls.n	80156b2 <pvPortMalloc+0xa6>
 80156aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156ac:	681b      	ldr	r3, [r3, #0]
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d1f1      	bne.n	8015696 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80156b2:	4b37      	ldr	r3, [pc, #220]	@ (8015790 <pvPortMalloc+0x184>)
 80156b4:	681b      	ldr	r3, [r3, #0]
 80156b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80156b8:	429a      	cmp	r2, r3
 80156ba:	d051      	beq.n	8015760 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80156bc:	6a3b      	ldr	r3, [r7, #32]
 80156be:	681b      	ldr	r3, [r3, #0]
 80156c0:	2208      	movs	r2, #8
 80156c2:	4413      	add	r3, r2
 80156c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80156c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156c8:	681a      	ldr	r2, [r3, #0]
 80156ca:	6a3b      	ldr	r3, [r7, #32]
 80156cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80156ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156d0:	685a      	ldr	r2, [r3, #4]
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	1ad2      	subs	r2, r2, r3
 80156d6:	2308      	movs	r3, #8
 80156d8:	005b      	lsls	r3, r3, #1
 80156da:	429a      	cmp	r2, r3
 80156dc:	d920      	bls.n	8015720 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80156de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	4413      	add	r3, r2
 80156e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80156e6:	69bb      	ldr	r3, [r7, #24]
 80156e8:	f003 0307 	and.w	r3, r3, #7
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d00b      	beq.n	8015708 <pvPortMalloc+0xfc>
	__asm volatile
 80156f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80156f4:	f383 8811 	msr	BASEPRI, r3
 80156f8:	f3bf 8f6f 	isb	sy
 80156fc:	f3bf 8f4f 	dsb	sy
 8015700:	613b      	str	r3, [r7, #16]
}
 8015702:	bf00      	nop
 8015704:	bf00      	nop
 8015706:	e7fd      	b.n	8015704 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801570a:	685a      	ldr	r2, [r3, #4]
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	1ad2      	subs	r2, r2, r3
 8015710:	69bb      	ldr	r3, [r7, #24]
 8015712:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015716:	687a      	ldr	r2, [r7, #4]
 8015718:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801571a:	69b8      	ldr	r0, [r7, #24]
 801571c:	f000 f90a 	bl	8015934 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015720:	4b1d      	ldr	r3, [pc, #116]	@ (8015798 <pvPortMalloc+0x18c>)
 8015722:	681a      	ldr	r2, [r3, #0]
 8015724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015726:	685b      	ldr	r3, [r3, #4]
 8015728:	1ad3      	subs	r3, r2, r3
 801572a:	4a1b      	ldr	r2, [pc, #108]	@ (8015798 <pvPortMalloc+0x18c>)
 801572c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801572e:	4b1a      	ldr	r3, [pc, #104]	@ (8015798 <pvPortMalloc+0x18c>)
 8015730:	681a      	ldr	r2, [r3, #0]
 8015732:	4b1b      	ldr	r3, [pc, #108]	@ (80157a0 <pvPortMalloc+0x194>)
 8015734:	681b      	ldr	r3, [r3, #0]
 8015736:	429a      	cmp	r2, r3
 8015738:	d203      	bcs.n	8015742 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801573a:	4b17      	ldr	r3, [pc, #92]	@ (8015798 <pvPortMalloc+0x18c>)
 801573c:	681b      	ldr	r3, [r3, #0]
 801573e:	4a18      	ldr	r2, [pc, #96]	@ (80157a0 <pvPortMalloc+0x194>)
 8015740:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015744:	685a      	ldr	r2, [r3, #4]
 8015746:	4b13      	ldr	r3, [pc, #76]	@ (8015794 <pvPortMalloc+0x188>)
 8015748:	681b      	ldr	r3, [r3, #0]
 801574a:	431a      	orrs	r2, r3
 801574c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801574e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015752:	2200      	movs	r2, #0
 8015754:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8015756:	4b13      	ldr	r3, [pc, #76]	@ (80157a4 <pvPortMalloc+0x198>)
 8015758:	681b      	ldr	r3, [r3, #0]
 801575a:	3301      	adds	r3, #1
 801575c:	4a11      	ldr	r2, [pc, #68]	@ (80157a4 <pvPortMalloc+0x198>)
 801575e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015760:	f7fe ff44 	bl	80145ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015764:	69fb      	ldr	r3, [r7, #28]
 8015766:	f003 0307 	and.w	r3, r3, #7
 801576a:	2b00      	cmp	r3, #0
 801576c:	d00b      	beq.n	8015786 <pvPortMalloc+0x17a>
	__asm volatile
 801576e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015772:	f383 8811 	msr	BASEPRI, r3
 8015776:	f3bf 8f6f 	isb	sy
 801577a:	f3bf 8f4f 	dsb	sy
 801577e:	60fb      	str	r3, [r7, #12]
}
 8015780:	bf00      	nop
 8015782:	bf00      	nop
 8015784:	e7fd      	b.n	8015782 <pvPortMalloc+0x176>
	return pvReturn;
 8015786:	69fb      	ldr	r3, [r7, #28]
}
 8015788:	4618      	mov	r0, r3
 801578a:	3728      	adds	r7, #40	@ 0x28
 801578c:	46bd      	mov	sp, r7
 801578e:	bd80      	pop	{r7, pc}
 8015790:	24006690 	.word	0x24006690
 8015794:	240066a4 	.word	0x240066a4
 8015798:	24006694 	.word	0x24006694
 801579c:	24006688 	.word	0x24006688
 80157a0:	24006698 	.word	0x24006698
 80157a4:	2400669c 	.word	0x2400669c

080157a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80157a8:	b580      	push	{r7, lr}
 80157aa:	b086      	sub	sp, #24
 80157ac:	af00      	add	r7, sp, #0
 80157ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d04f      	beq.n	801585a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80157ba:	2308      	movs	r3, #8
 80157bc:	425b      	negs	r3, r3
 80157be:	697a      	ldr	r2, [r7, #20]
 80157c0:	4413      	add	r3, r2
 80157c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80157c4:	697b      	ldr	r3, [r7, #20]
 80157c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80157c8:	693b      	ldr	r3, [r7, #16]
 80157ca:	685a      	ldr	r2, [r3, #4]
 80157cc:	4b25      	ldr	r3, [pc, #148]	@ (8015864 <vPortFree+0xbc>)
 80157ce:	681b      	ldr	r3, [r3, #0]
 80157d0:	4013      	ands	r3, r2
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d10b      	bne.n	80157ee <vPortFree+0x46>
	__asm volatile
 80157d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80157da:	f383 8811 	msr	BASEPRI, r3
 80157de:	f3bf 8f6f 	isb	sy
 80157e2:	f3bf 8f4f 	dsb	sy
 80157e6:	60fb      	str	r3, [r7, #12]
}
 80157e8:	bf00      	nop
 80157ea:	bf00      	nop
 80157ec:	e7fd      	b.n	80157ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80157ee:	693b      	ldr	r3, [r7, #16]
 80157f0:	681b      	ldr	r3, [r3, #0]
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d00b      	beq.n	801580e <vPortFree+0x66>
	__asm volatile
 80157f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80157fa:	f383 8811 	msr	BASEPRI, r3
 80157fe:	f3bf 8f6f 	isb	sy
 8015802:	f3bf 8f4f 	dsb	sy
 8015806:	60bb      	str	r3, [r7, #8]
}
 8015808:	bf00      	nop
 801580a:	bf00      	nop
 801580c:	e7fd      	b.n	801580a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801580e:	693b      	ldr	r3, [r7, #16]
 8015810:	685a      	ldr	r2, [r3, #4]
 8015812:	4b14      	ldr	r3, [pc, #80]	@ (8015864 <vPortFree+0xbc>)
 8015814:	681b      	ldr	r3, [r3, #0]
 8015816:	4013      	ands	r3, r2
 8015818:	2b00      	cmp	r3, #0
 801581a:	d01e      	beq.n	801585a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801581c:	693b      	ldr	r3, [r7, #16]
 801581e:	681b      	ldr	r3, [r3, #0]
 8015820:	2b00      	cmp	r3, #0
 8015822:	d11a      	bne.n	801585a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015824:	693b      	ldr	r3, [r7, #16]
 8015826:	685a      	ldr	r2, [r3, #4]
 8015828:	4b0e      	ldr	r3, [pc, #56]	@ (8015864 <vPortFree+0xbc>)
 801582a:	681b      	ldr	r3, [r3, #0]
 801582c:	43db      	mvns	r3, r3
 801582e:	401a      	ands	r2, r3
 8015830:	693b      	ldr	r3, [r7, #16]
 8015832:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015834:	f7fe fecc 	bl	80145d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8015838:	693b      	ldr	r3, [r7, #16]
 801583a:	685a      	ldr	r2, [r3, #4]
 801583c:	4b0a      	ldr	r3, [pc, #40]	@ (8015868 <vPortFree+0xc0>)
 801583e:	681b      	ldr	r3, [r3, #0]
 8015840:	4413      	add	r3, r2
 8015842:	4a09      	ldr	r2, [pc, #36]	@ (8015868 <vPortFree+0xc0>)
 8015844:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8015846:	6938      	ldr	r0, [r7, #16]
 8015848:	f000 f874 	bl	8015934 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801584c:	4b07      	ldr	r3, [pc, #28]	@ (801586c <vPortFree+0xc4>)
 801584e:	681b      	ldr	r3, [r3, #0]
 8015850:	3301      	adds	r3, #1
 8015852:	4a06      	ldr	r2, [pc, #24]	@ (801586c <vPortFree+0xc4>)
 8015854:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8015856:	f7fe fec9 	bl	80145ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801585a:	bf00      	nop
 801585c:	3718      	adds	r7, #24
 801585e:	46bd      	mov	sp, r7
 8015860:	bd80      	pop	{r7, pc}
 8015862:	bf00      	nop
 8015864:	240066a4 	.word	0x240066a4
 8015868:	24006694 	.word	0x24006694
 801586c:	240066a0 	.word	0x240066a0

08015870 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015870:	b480      	push	{r7}
 8015872:	b085      	sub	sp, #20
 8015874:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8015876:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 801587a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801587c:	4b27      	ldr	r3, [pc, #156]	@ (801591c <prvHeapInit+0xac>)
 801587e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015880:	68fb      	ldr	r3, [r7, #12]
 8015882:	f003 0307 	and.w	r3, r3, #7
 8015886:	2b00      	cmp	r3, #0
 8015888:	d00c      	beq.n	80158a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801588a:	68fb      	ldr	r3, [r7, #12]
 801588c:	3307      	adds	r3, #7
 801588e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015890:	68fb      	ldr	r3, [r7, #12]
 8015892:	f023 0307 	bic.w	r3, r3, #7
 8015896:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8015898:	68ba      	ldr	r2, [r7, #8]
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	1ad3      	subs	r3, r2, r3
 801589e:	4a1f      	ldr	r2, [pc, #124]	@ (801591c <prvHeapInit+0xac>)
 80158a0:	4413      	add	r3, r2
 80158a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80158a8:	4a1d      	ldr	r2, [pc, #116]	@ (8015920 <prvHeapInit+0xb0>)
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80158ae:	4b1c      	ldr	r3, [pc, #112]	@ (8015920 <prvHeapInit+0xb0>)
 80158b0:	2200      	movs	r2, #0
 80158b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	68ba      	ldr	r2, [r7, #8]
 80158b8:	4413      	add	r3, r2
 80158ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80158bc:	2208      	movs	r2, #8
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	1a9b      	subs	r3, r3, r2
 80158c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80158c4:	68fb      	ldr	r3, [r7, #12]
 80158c6:	f023 0307 	bic.w	r3, r3, #7
 80158ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80158cc:	68fb      	ldr	r3, [r7, #12]
 80158ce:	4a15      	ldr	r2, [pc, #84]	@ (8015924 <prvHeapInit+0xb4>)
 80158d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80158d2:	4b14      	ldr	r3, [pc, #80]	@ (8015924 <prvHeapInit+0xb4>)
 80158d4:	681b      	ldr	r3, [r3, #0]
 80158d6:	2200      	movs	r2, #0
 80158d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80158da:	4b12      	ldr	r3, [pc, #72]	@ (8015924 <prvHeapInit+0xb4>)
 80158dc:	681b      	ldr	r3, [r3, #0]
 80158de:	2200      	movs	r2, #0
 80158e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80158e6:	683b      	ldr	r3, [r7, #0]
 80158e8:	68fa      	ldr	r2, [r7, #12]
 80158ea:	1ad2      	subs	r2, r2, r3
 80158ec:	683b      	ldr	r3, [r7, #0]
 80158ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80158f0:	4b0c      	ldr	r3, [pc, #48]	@ (8015924 <prvHeapInit+0xb4>)
 80158f2:	681a      	ldr	r2, [r3, #0]
 80158f4:	683b      	ldr	r3, [r7, #0]
 80158f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80158f8:	683b      	ldr	r3, [r7, #0]
 80158fa:	685b      	ldr	r3, [r3, #4]
 80158fc:	4a0a      	ldr	r2, [pc, #40]	@ (8015928 <prvHeapInit+0xb8>)
 80158fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015900:	683b      	ldr	r3, [r7, #0]
 8015902:	685b      	ldr	r3, [r3, #4]
 8015904:	4a09      	ldr	r2, [pc, #36]	@ (801592c <prvHeapInit+0xbc>)
 8015906:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015908:	4b09      	ldr	r3, [pc, #36]	@ (8015930 <prvHeapInit+0xc0>)
 801590a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801590e:	601a      	str	r2, [r3, #0]
}
 8015910:	bf00      	nop
 8015912:	3714      	adds	r7, #20
 8015914:	46bd      	mov	sp, r7
 8015916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801591a:	4770      	bx	lr
 801591c:	24002a88 	.word	0x24002a88
 8015920:	24006688 	.word	0x24006688
 8015924:	24006690 	.word	0x24006690
 8015928:	24006698 	.word	0x24006698
 801592c:	24006694 	.word	0x24006694
 8015930:	240066a4 	.word	0x240066a4

08015934 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015934:	b480      	push	{r7}
 8015936:	b085      	sub	sp, #20
 8015938:	af00      	add	r7, sp, #0
 801593a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801593c:	4b28      	ldr	r3, [pc, #160]	@ (80159e0 <prvInsertBlockIntoFreeList+0xac>)
 801593e:	60fb      	str	r3, [r7, #12]
 8015940:	e002      	b.n	8015948 <prvInsertBlockIntoFreeList+0x14>
 8015942:	68fb      	ldr	r3, [r7, #12]
 8015944:	681b      	ldr	r3, [r3, #0]
 8015946:	60fb      	str	r3, [r7, #12]
 8015948:	68fb      	ldr	r3, [r7, #12]
 801594a:	681b      	ldr	r3, [r3, #0]
 801594c:	687a      	ldr	r2, [r7, #4]
 801594e:	429a      	cmp	r2, r3
 8015950:	d8f7      	bhi.n	8015942 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015952:	68fb      	ldr	r3, [r7, #12]
 8015954:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8015956:	68fb      	ldr	r3, [r7, #12]
 8015958:	685b      	ldr	r3, [r3, #4]
 801595a:	68ba      	ldr	r2, [r7, #8]
 801595c:	4413      	add	r3, r2
 801595e:	687a      	ldr	r2, [r7, #4]
 8015960:	429a      	cmp	r2, r3
 8015962:	d108      	bne.n	8015976 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015964:	68fb      	ldr	r3, [r7, #12]
 8015966:	685a      	ldr	r2, [r3, #4]
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	685b      	ldr	r3, [r3, #4]
 801596c:	441a      	add	r2, r3
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015972:	68fb      	ldr	r3, [r7, #12]
 8015974:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	685b      	ldr	r3, [r3, #4]
 801597e:	68ba      	ldr	r2, [r7, #8]
 8015980:	441a      	add	r2, r3
 8015982:	68fb      	ldr	r3, [r7, #12]
 8015984:	681b      	ldr	r3, [r3, #0]
 8015986:	429a      	cmp	r2, r3
 8015988:	d118      	bne.n	80159bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801598a:	68fb      	ldr	r3, [r7, #12]
 801598c:	681a      	ldr	r2, [r3, #0]
 801598e:	4b15      	ldr	r3, [pc, #84]	@ (80159e4 <prvInsertBlockIntoFreeList+0xb0>)
 8015990:	681b      	ldr	r3, [r3, #0]
 8015992:	429a      	cmp	r2, r3
 8015994:	d00d      	beq.n	80159b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	685a      	ldr	r2, [r3, #4]
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	681b      	ldr	r3, [r3, #0]
 801599e:	685b      	ldr	r3, [r3, #4]
 80159a0:	441a      	add	r2, r3
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	681b      	ldr	r3, [r3, #0]
 80159aa:	681a      	ldr	r2, [r3, #0]
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	601a      	str	r2, [r3, #0]
 80159b0:	e008      	b.n	80159c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80159b2:	4b0c      	ldr	r3, [pc, #48]	@ (80159e4 <prvInsertBlockIntoFreeList+0xb0>)
 80159b4:	681a      	ldr	r2, [r3, #0]
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	601a      	str	r2, [r3, #0]
 80159ba:	e003      	b.n	80159c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80159bc:	68fb      	ldr	r3, [r7, #12]
 80159be:	681a      	ldr	r2, [r3, #0]
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80159c4:	68fa      	ldr	r2, [r7, #12]
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	429a      	cmp	r2, r3
 80159ca:	d002      	beq.n	80159d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80159cc:	68fb      	ldr	r3, [r7, #12]
 80159ce:	687a      	ldr	r2, [r7, #4]
 80159d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80159d2:	bf00      	nop
 80159d4:	3714      	adds	r7, #20
 80159d6:	46bd      	mov	sp, r7
 80159d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159dc:	4770      	bx	lr
 80159de:	bf00      	nop
 80159e0:	24006688 	.word	0x24006688
 80159e4:	24006690 	.word	0x24006690

080159e8 <atof>:
 80159e8:	2100      	movs	r1, #0
 80159ea:	f000 bdb7 	b.w	801655c <strtod>

080159ee <atoi>:
 80159ee:	220a      	movs	r2, #10
 80159f0:	2100      	movs	r1, #0
 80159f2:	f000 be39 	b.w	8016668 <strtol>

080159f6 <sulp>:
 80159f6:	b570      	push	{r4, r5, r6, lr}
 80159f8:	4604      	mov	r4, r0
 80159fa:	460d      	mov	r5, r1
 80159fc:	4616      	mov	r6, r2
 80159fe:	ec45 4b10 	vmov	d0, r4, r5
 8015a02:	f001 ffa9 	bl	8017958 <__ulp>
 8015a06:	b17e      	cbz	r6, 8015a28 <sulp+0x32>
 8015a08:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015a0c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	dd09      	ble.n	8015a28 <sulp+0x32>
 8015a14:	051b      	lsls	r3, r3, #20
 8015a16:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8015a1a:	2000      	movs	r0, #0
 8015a1c:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8015a20:	ec41 0b17 	vmov	d7, r0, r1
 8015a24:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015a28:	bd70      	pop	{r4, r5, r6, pc}
 8015a2a:	0000      	movs	r0, r0
 8015a2c:	0000      	movs	r0, r0
	...

08015a30 <_strtod_l>:
 8015a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a34:	ed2d 8b0a 	vpush	{d8-d12}
 8015a38:	b097      	sub	sp, #92	@ 0x5c
 8015a3a:	4688      	mov	r8, r1
 8015a3c:	920e      	str	r2, [sp, #56]	@ 0x38
 8015a3e:	2200      	movs	r2, #0
 8015a40:	9212      	str	r2, [sp, #72]	@ 0x48
 8015a42:	9005      	str	r0, [sp, #20]
 8015a44:	f04f 0a00 	mov.w	sl, #0
 8015a48:	f04f 0b00 	mov.w	fp, #0
 8015a4c:	460a      	mov	r2, r1
 8015a4e:	9211      	str	r2, [sp, #68]	@ 0x44
 8015a50:	7811      	ldrb	r1, [r2, #0]
 8015a52:	292b      	cmp	r1, #43	@ 0x2b
 8015a54:	d04c      	beq.n	8015af0 <_strtod_l+0xc0>
 8015a56:	d839      	bhi.n	8015acc <_strtod_l+0x9c>
 8015a58:	290d      	cmp	r1, #13
 8015a5a:	d833      	bhi.n	8015ac4 <_strtod_l+0x94>
 8015a5c:	2908      	cmp	r1, #8
 8015a5e:	d833      	bhi.n	8015ac8 <_strtod_l+0x98>
 8015a60:	2900      	cmp	r1, #0
 8015a62:	d03c      	beq.n	8015ade <_strtod_l+0xae>
 8015a64:	2200      	movs	r2, #0
 8015a66:	9208      	str	r2, [sp, #32]
 8015a68:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8015a6a:	782a      	ldrb	r2, [r5, #0]
 8015a6c:	2a30      	cmp	r2, #48	@ 0x30
 8015a6e:	f040 80b5 	bne.w	8015bdc <_strtod_l+0x1ac>
 8015a72:	786a      	ldrb	r2, [r5, #1]
 8015a74:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8015a78:	2a58      	cmp	r2, #88	@ 0x58
 8015a7a:	d170      	bne.n	8015b5e <_strtod_l+0x12e>
 8015a7c:	9302      	str	r3, [sp, #8]
 8015a7e:	9b08      	ldr	r3, [sp, #32]
 8015a80:	9301      	str	r3, [sp, #4]
 8015a82:	ab12      	add	r3, sp, #72	@ 0x48
 8015a84:	9300      	str	r3, [sp, #0]
 8015a86:	4a8b      	ldr	r2, [pc, #556]	@ (8015cb4 <_strtod_l+0x284>)
 8015a88:	9805      	ldr	r0, [sp, #20]
 8015a8a:	ab13      	add	r3, sp, #76	@ 0x4c
 8015a8c:	a911      	add	r1, sp, #68	@ 0x44
 8015a8e:	f001 f85d 	bl	8016b4c <__gethex>
 8015a92:	f010 060f 	ands.w	r6, r0, #15
 8015a96:	4604      	mov	r4, r0
 8015a98:	d005      	beq.n	8015aa6 <_strtod_l+0x76>
 8015a9a:	2e06      	cmp	r6, #6
 8015a9c:	d12a      	bne.n	8015af4 <_strtod_l+0xc4>
 8015a9e:	3501      	adds	r5, #1
 8015aa0:	2300      	movs	r3, #0
 8015aa2:	9511      	str	r5, [sp, #68]	@ 0x44
 8015aa4:	9308      	str	r3, [sp, #32]
 8015aa6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	f040 852f 	bne.w	801650c <_strtod_l+0xadc>
 8015aae:	9b08      	ldr	r3, [sp, #32]
 8015ab0:	ec4b ab10 	vmov	d0, sl, fp
 8015ab4:	b1cb      	cbz	r3, 8015aea <_strtod_l+0xba>
 8015ab6:	eeb1 0b40 	vneg.f64	d0, d0
 8015aba:	b017      	add	sp, #92	@ 0x5c
 8015abc:	ecbd 8b0a 	vpop	{d8-d12}
 8015ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ac4:	2920      	cmp	r1, #32
 8015ac6:	d1cd      	bne.n	8015a64 <_strtod_l+0x34>
 8015ac8:	3201      	adds	r2, #1
 8015aca:	e7c0      	b.n	8015a4e <_strtod_l+0x1e>
 8015acc:	292d      	cmp	r1, #45	@ 0x2d
 8015ace:	d1c9      	bne.n	8015a64 <_strtod_l+0x34>
 8015ad0:	2101      	movs	r1, #1
 8015ad2:	9108      	str	r1, [sp, #32]
 8015ad4:	1c51      	adds	r1, r2, #1
 8015ad6:	9111      	str	r1, [sp, #68]	@ 0x44
 8015ad8:	7852      	ldrb	r2, [r2, #1]
 8015ada:	2a00      	cmp	r2, #0
 8015adc:	d1c4      	bne.n	8015a68 <_strtod_l+0x38>
 8015ade:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015ae0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	f040 850f 	bne.w	8016508 <_strtod_l+0xad8>
 8015aea:	ec4b ab10 	vmov	d0, sl, fp
 8015aee:	e7e4      	b.n	8015aba <_strtod_l+0x8a>
 8015af0:	2100      	movs	r1, #0
 8015af2:	e7ee      	b.n	8015ad2 <_strtod_l+0xa2>
 8015af4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8015af6:	b13a      	cbz	r2, 8015b08 <_strtod_l+0xd8>
 8015af8:	2135      	movs	r1, #53	@ 0x35
 8015afa:	a814      	add	r0, sp, #80	@ 0x50
 8015afc:	f002 f823 	bl	8017b46 <__copybits>
 8015b00:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015b02:	9805      	ldr	r0, [sp, #20]
 8015b04:	f001 fbf4 	bl	80172f0 <_Bfree>
 8015b08:	1e73      	subs	r3, r6, #1
 8015b0a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8015b0c:	2b04      	cmp	r3, #4
 8015b0e:	d806      	bhi.n	8015b1e <_strtod_l+0xee>
 8015b10:	e8df f003 	tbb	[pc, r3]
 8015b14:	201d0314 	.word	0x201d0314
 8015b18:	14          	.byte	0x14
 8015b19:	00          	.byte	0x00
 8015b1a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8015b1e:	05e3      	lsls	r3, r4, #23
 8015b20:	bf48      	it	mi
 8015b22:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8015b26:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015b2a:	0d1b      	lsrs	r3, r3, #20
 8015b2c:	051b      	lsls	r3, r3, #20
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d1b9      	bne.n	8015aa6 <_strtod_l+0x76>
 8015b32:	f000 ff15 	bl	8016960 <__errno>
 8015b36:	2322      	movs	r3, #34	@ 0x22
 8015b38:	6003      	str	r3, [r0, #0]
 8015b3a:	e7b4      	b.n	8015aa6 <_strtod_l+0x76>
 8015b3c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8015b40:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8015b44:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8015b48:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8015b4c:	e7e7      	b.n	8015b1e <_strtod_l+0xee>
 8015b4e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8015cbc <_strtod_l+0x28c>
 8015b52:	e7e4      	b.n	8015b1e <_strtod_l+0xee>
 8015b54:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8015b58:	f04f 3aff 	mov.w	sl, #4294967295
 8015b5c:	e7df      	b.n	8015b1e <_strtod_l+0xee>
 8015b5e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015b60:	1c5a      	adds	r2, r3, #1
 8015b62:	9211      	str	r2, [sp, #68]	@ 0x44
 8015b64:	785b      	ldrb	r3, [r3, #1]
 8015b66:	2b30      	cmp	r3, #48	@ 0x30
 8015b68:	d0f9      	beq.n	8015b5e <_strtod_l+0x12e>
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	d09b      	beq.n	8015aa6 <_strtod_l+0x76>
 8015b6e:	2301      	movs	r3, #1
 8015b70:	2600      	movs	r6, #0
 8015b72:	9307      	str	r3, [sp, #28]
 8015b74:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015b76:	930a      	str	r3, [sp, #40]	@ 0x28
 8015b78:	46b1      	mov	r9, r6
 8015b7a:	4635      	mov	r5, r6
 8015b7c:	220a      	movs	r2, #10
 8015b7e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8015b80:	7804      	ldrb	r4, [r0, #0]
 8015b82:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8015b86:	b2d9      	uxtb	r1, r3
 8015b88:	2909      	cmp	r1, #9
 8015b8a:	d929      	bls.n	8015be0 <_strtod_l+0x1b0>
 8015b8c:	494a      	ldr	r1, [pc, #296]	@ (8015cb8 <_strtod_l+0x288>)
 8015b8e:	2201      	movs	r2, #1
 8015b90:	f000 fe8e 	bl	80168b0 <strncmp>
 8015b94:	b378      	cbz	r0, 8015bf6 <_strtod_l+0x1c6>
 8015b96:	2000      	movs	r0, #0
 8015b98:	4622      	mov	r2, r4
 8015b9a:	462b      	mov	r3, r5
 8015b9c:	4607      	mov	r7, r0
 8015b9e:	9006      	str	r0, [sp, #24]
 8015ba0:	2a65      	cmp	r2, #101	@ 0x65
 8015ba2:	d001      	beq.n	8015ba8 <_strtod_l+0x178>
 8015ba4:	2a45      	cmp	r2, #69	@ 0x45
 8015ba6:	d117      	bne.n	8015bd8 <_strtod_l+0x1a8>
 8015ba8:	b91b      	cbnz	r3, 8015bb2 <_strtod_l+0x182>
 8015baa:	9b07      	ldr	r3, [sp, #28]
 8015bac:	4303      	orrs	r3, r0
 8015bae:	d096      	beq.n	8015ade <_strtod_l+0xae>
 8015bb0:	2300      	movs	r3, #0
 8015bb2:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8015bb6:	f108 0201 	add.w	r2, r8, #1
 8015bba:	9211      	str	r2, [sp, #68]	@ 0x44
 8015bbc:	f898 2001 	ldrb.w	r2, [r8, #1]
 8015bc0:	2a2b      	cmp	r2, #43	@ 0x2b
 8015bc2:	d06b      	beq.n	8015c9c <_strtod_l+0x26c>
 8015bc4:	2a2d      	cmp	r2, #45	@ 0x2d
 8015bc6:	d071      	beq.n	8015cac <_strtod_l+0x27c>
 8015bc8:	f04f 0e00 	mov.w	lr, #0
 8015bcc:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8015bd0:	2c09      	cmp	r4, #9
 8015bd2:	d979      	bls.n	8015cc8 <_strtod_l+0x298>
 8015bd4:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8015bd8:	2400      	movs	r4, #0
 8015bda:	e094      	b.n	8015d06 <_strtod_l+0x2d6>
 8015bdc:	2300      	movs	r3, #0
 8015bde:	e7c7      	b.n	8015b70 <_strtod_l+0x140>
 8015be0:	2d08      	cmp	r5, #8
 8015be2:	f100 0001 	add.w	r0, r0, #1
 8015be6:	bfd4      	ite	le
 8015be8:	fb02 3909 	mlale	r9, r2, r9, r3
 8015bec:	fb02 3606 	mlagt	r6, r2, r6, r3
 8015bf0:	3501      	adds	r5, #1
 8015bf2:	9011      	str	r0, [sp, #68]	@ 0x44
 8015bf4:	e7c3      	b.n	8015b7e <_strtod_l+0x14e>
 8015bf6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015bf8:	1c5a      	adds	r2, r3, #1
 8015bfa:	9211      	str	r2, [sp, #68]	@ 0x44
 8015bfc:	785a      	ldrb	r2, [r3, #1]
 8015bfe:	b375      	cbz	r5, 8015c5e <_strtod_l+0x22e>
 8015c00:	4607      	mov	r7, r0
 8015c02:	462b      	mov	r3, r5
 8015c04:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8015c08:	2909      	cmp	r1, #9
 8015c0a:	d913      	bls.n	8015c34 <_strtod_l+0x204>
 8015c0c:	2101      	movs	r1, #1
 8015c0e:	9106      	str	r1, [sp, #24]
 8015c10:	e7c6      	b.n	8015ba0 <_strtod_l+0x170>
 8015c12:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015c14:	1c5a      	adds	r2, r3, #1
 8015c16:	9211      	str	r2, [sp, #68]	@ 0x44
 8015c18:	785a      	ldrb	r2, [r3, #1]
 8015c1a:	3001      	adds	r0, #1
 8015c1c:	2a30      	cmp	r2, #48	@ 0x30
 8015c1e:	d0f8      	beq.n	8015c12 <_strtod_l+0x1e2>
 8015c20:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8015c24:	2b08      	cmp	r3, #8
 8015c26:	f200 8476 	bhi.w	8016516 <_strtod_l+0xae6>
 8015c2a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015c2c:	930a      	str	r3, [sp, #40]	@ 0x28
 8015c2e:	4607      	mov	r7, r0
 8015c30:	2000      	movs	r0, #0
 8015c32:	4603      	mov	r3, r0
 8015c34:	3a30      	subs	r2, #48	@ 0x30
 8015c36:	f100 0101 	add.w	r1, r0, #1
 8015c3a:	d023      	beq.n	8015c84 <_strtod_l+0x254>
 8015c3c:	440f      	add	r7, r1
 8015c3e:	eb00 0c03 	add.w	ip, r0, r3
 8015c42:	4619      	mov	r1, r3
 8015c44:	240a      	movs	r4, #10
 8015c46:	4561      	cmp	r1, ip
 8015c48:	d10b      	bne.n	8015c62 <_strtod_l+0x232>
 8015c4a:	1c5c      	adds	r4, r3, #1
 8015c4c:	4403      	add	r3, r0
 8015c4e:	2b08      	cmp	r3, #8
 8015c50:	4404      	add	r4, r0
 8015c52:	dc11      	bgt.n	8015c78 <_strtod_l+0x248>
 8015c54:	230a      	movs	r3, #10
 8015c56:	fb03 2909 	mla	r9, r3, r9, r2
 8015c5a:	2100      	movs	r1, #0
 8015c5c:	e013      	b.n	8015c86 <_strtod_l+0x256>
 8015c5e:	4628      	mov	r0, r5
 8015c60:	e7dc      	b.n	8015c1c <_strtod_l+0x1ec>
 8015c62:	2908      	cmp	r1, #8
 8015c64:	f101 0101 	add.w	r1, r1, #1
 8015c68:	dc02      	bgt.n	8015c70 <_strtod_l+0x240>
 8015c6a:	fb04 f909 	mul.w	r9, r4, r9
 8015c6e:	e7ea      	b.n	8015c46 <_strtod_l+0x216>
 8015c70:	2910      	cmp	r1, #16
 8015c72:	bfd8      	it	le
 8015c74:	4366      	mulle	r6, r4
 8015c76:	e7e6      	b.n	8015c46 <_strtod_l+0x216>
 8015c78:	2b0f      	cmp	r3, #15
 8015c7a:	dcee      	bgt.n	8015c5a <_strtod_l+0x22a>
 8015c7c:	230a      	movs	r3, #10
 8015c7e:	fb03 2606 	mla	r6, r3, r6, r2
 8015c82:	e7ea      	b.n	8015c5a <_strtod_l+0x22a>
 8015c84:	461c      	mov	r4, r3
 8015c86:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015c88:	1c5a      	adds	r2, r3, #1
 8015c8a:	9211      	str	r2, [sp, #68]	@ 0x44
 8015c8c:	785a      	ldrb	r2, [r3, #1]
 8015c8e:	4608      	mov	r0, r1
 8015c90:	4623      	mov	r3, r4
 8015c92:	e7b7      	b.n	8015c04 <_strtod_l+0x1d4>
 8015c94:	2301      	movs	r3, #1
 8015c96:	2700      	movs	r7, #0
 8015c98:	9306      	str	r3, [sp, #24]
 8015c9a:	e786      	b.n	8015baa <_strtod_l+0x17a>
 8015c9c:	f04f 0e00 	mov.w	lr, #0
 8015ca0:	f108 0202 	add.w	r2, r8, #2
 8015ca4:	9211      	str	r2, [sp, #68]	@ 0x44
 8015ca6:	f898 2002 	ldrb.w	r2, [r8, #2]
 8015caa:	e78f      	b.n	8015bcc <_strtod_l+0x19c>
 8015cac:	f04f 0e01 	mov.w	lr, #1
 8015cb0:	e7f6      	b.n	8015ca0 <_strtod_l+0x270>
 8015cb2:	bf00      	nop
 8015cb4:	08018a38 	.word	0x08018a38
 8015cb8:	08018a14 	.word	0x08018a14
 8015cbc:	7ff00000 	.word	0x7ff00000
 8015cc0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015cc2:	1c54      	adds	r4, r2, #1
 8015cc4:	9411      	str	r4, [sp, #68]	@ 0x44
 8015cc6:	7852      	ldrb	r2, [r2, #1]
 8015cc8:	2a30      	cmp	r2, #48	@ 0x30
 8015cca:	d0f9      	beq.n	8015cc0 <_strtod_l+0x290>
 8015ccc:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8015cd0:	2c08      	cmp	r4, #8
 8015cd2:	d881      	bhi.n	8015bd8 <_strtod_l+0x1a8>
 8015cd4:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8015cd8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015cda:	9209      	str	r2, [sp, #36]	@ 0x24
 8015cdc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015cde:	1c51      	adds	r1, r2, #1
 8015ce0:	9111      	str	r1, [sp, #68]	@ 0x44
 8015ce2:	7852      	ldrb	r2, [r2, #1]
 8015ce4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8015ce8:	2c09      	cmp	r4, #9
 8015cea:	d938      	bls.n	8015d5e <_strtod_l+0x32e>
 8015cec:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8015cee:	1b0c      	subs	r4, r1, r4
 8015cf0:	2c08      	cmp	r4, #8
 8015cf2:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8015cf6:	dc02      	bgt.n	8015cfe <_strtod_l+0x2ce>
 8015cf8:	4564      	cmp	r4, ip
 8015cfa:	bfa8      	it	ge
 8015cfc:	4664      	movge	r4, ip
 8015cfe:	f1be 0f00 	cmp.w	lr, #0
 8015d02:	d000      	beq.n	8015d06 <_strtod_l+0x2d6>
 8015d04:	4264      	negs	r4, r4
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d14e      	bne.n	8015da8 <_strtod_l+0x378>
 8015d0a:	9b07      	ldr	r3, [sp, #28]
 8015d0c:	4318      	orrs	r0, r3
 8015d0e:	f47f aeca 	bne.w	8015aa6 <_strtod_l+0x76>
 8015d12:	9b06      	ldr	r3, [sp, #24]
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	f47f aee2 	bne.w	8015ade <_strtod_l+0xae>
 8015d1a:	2a69      	cmp	r2, #105	@ 0x69
 8015d1c:	d027      	beq.n	8015d6e <_strtod_l+0x33e>
 8015d1e:	dc24      	bgt.n	8015d6a <_strtod_l+0x33a>
 8015d20:	2a49      	cmp	r2, #73	@ 0x49
 8015d22:	d024      	beq.n	8015d6e <_strtod_l+0x33e>
 8015d24:	2a4e      	cmp	r2, #78	@ 0x4e
 8015d26:	f47f aeda 	bne.w	8015ade <_strtod_l+0xae>
 8015d2a:	4997      	ldr	r1, [pc, #604]	@ (8015f88 <_strtod_l+0x558>)
 8015d2c:	a811      	add	r0, sp, #68	@ 0x44
 8015d2e:	f001 f92f 	bl	8016f90 <__match>
 8015d32:	2800      	cmp	r0, #0
 8015d34:	f43f aed3 	beq.w	8015ade <_strtod_l+0xae>
 8015d38:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015d3a:	781b      	ldrb	r3, [r3, #0]
 8015d3c:	2b28      	cmp	r3, #40	@ 0x28
 8015d3e:	d12d      	bne.n	8015d9c <_strtod_l+0x36c>
 8015d40:	4992      	ldr	r1, [pc, #584]	@ (8015f8c <_strtod_l+0x55c>)
 8015d42:	aa14      	add	r2, sp, #80	@ 0x50
 8015d44:	a811      	add	r0, sp, #68	@ 0x44
 8015d46:	f001 f937 	bl	8016fb8 <__hexnan>
 8015d4a:	2805      	cmp	r0, #5
 8015d4c:	d126      	bne.n	8015d9c <_strtod_l+0x36c>
 8015d4e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015d50:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8015d54:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8015d58:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8015d5c:	e6a3      	b.n	8015aa6 <_strtod_l+0x76>
 8015d5e:	240a      	movs	r4, #10
 8015d60:	fb04 2c0c 	mla	ip, r4, ip, r2
 8015d64:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8015d68:	e7b8      	b.n	8015cdc <_strtod_l+0x2ac>
 8015d6a:	2a6e      	cmp	r2, #110	@ 0x6e
 8015d6c:	e7db      	b.n	8015d26 <_strtod_l+0x2f6>
 8015d6e:	4988      	ldr	r1, [pc, #544]	@ (8015f90 <_strtod_l+0x560>)
 8015d70:	a811      	add	r0, sp, #68	@ 0x44
 8015d72:	f001 f90d 	bl	8016f90 <__match>
 8015d76:	2800      	cmp	r0, #0
 8015d78:	f43f aeb1 	beq.w	8015ade <_strtod_l+0xae>
 8015d7c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015d7e:	4985      	ldr	r1, [pc, #532]	@ (8015f94 <_strtod_l+0x564>)
 8015d80:	3b01      	subs	r3, #1
 8015d82:	a811      	add	r0, sp, #68	@ 0x44
 8015d84:	9311      	str	r3, [sp, #68]	@ 0x44
 8015d86:	f001 f903 	bl	8016f90 <__match>
 8015d8a:	b910      	cbnz	r0, 8015d92 <_strtod_l+0x362>
 8015d8c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015d8e:	3301      	adds	r3, #1
 8015d90:	9311      	str	r3, [sp, #68]	@ 0x44
 8015d92:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8015fa8 <_strtod_l+0x578>
 8015d96:	f04f 0a00 	mov.w	sl, #0
 8015d9a:	e684      	b.n	8015aa6 <_strtod_l+0x76>
 8015d9c:	487e      	ldr	r0, [pc, #504]	@ (8015f98 <_strtod_l+0x568>)
 8015d9e:	f000 fe1b 	bl	80169d8 <nan>
 8015da2:	ec5b ab10 	vmov	sl, fp, d0
 8015da6:	e67e      	b.n	8015aa6 <_strtod_l+0x76>
 8015da8:	ee07 9a90 	vmov	s15, r9
 8015dac:	1be2      	subs	r2, r4, r7
 8015dae:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8015db2:	2d00      	cmp	r5, #0
 8015db4:	bf08      	it	eq
 8015db6:	461d      	moveq	r5, r3
 8015db8:	2b10      	cmp	r3, #16
 8015dba:	9209      	str	r2, [sp, #36]	@ 0x24
 8015dbc:	461a      	mov	r2, r3
 8015dbe:	bfa8      	it	ge
 8015dc0:	2210      	movge	r2, #16
 8015dc2:	2b09      	cmp	r3, #9
 8015dc4:	ec5b ab17 	vmov	sl, fp, d7
 8015dc8:	dc15      	bgt.n	8015df6 <_strtod_l+0x3c6>
 8015dca:	1be1      	subs	r1, r4, r7
 8015dcc:	2900      	cmp	r1, #0
 8015dce:	f43f ae6a 	beq.w	8015aa6 <_strtod_l+0x76>
 8015dd2:	eba4 0107 	sub.w	r1, r4, r7
 8015dd6:	dd72      	ble.n	8015ebe <_strtod_l+0x48e>
 8015dd8:	2916      	cmp	r1, #22
 8015dda:	dc59      	bgt.n	8015e90 <_strtod_l+0x460>
 8015ddc:	4b6f      	ldr	r3, [pc, #444]	@ (8015f9c <_strtod_l+0x56c>)
 8015dde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015de0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015de4:	ed93 7b00 	vldr	d7, [r3]
 8015de8:	ec4b ab16 	vmov	d6, sl, fp
 8015dec:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015df0:	ec5b ab17 	vmov	sl, fp, d7
 8015df4:	e657      	b.n	8015aa6 <_strtod_l+0x76>
 8015df6:	4969      	ldr	r1, [pc, #420]	@ (8015f9c <_strtod_l+0x56c>)
 8015df8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8015dfc:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8015e00:	ee06 6a90 	vmov	s13, r6
 8015e04:	2b0f      	cmp	r3, #15
 8015e06:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8015e0a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8015e0e:	ec5b ab16 	vmov	sl, fp, d6
 8015e12:	ddda      	ble.n	8015dca <_strtod_l+0x39a>
 8015e14:	1a9a      	subs	r2, r3, r2
 8015e16:	1be1      	subs	r1, r4, r7
 8015e18:	440a      	add	r2, r1
 8015e1a:	2a00      	cmp	r2, #0
 8015e1c:	f340 8094 	ble.w	8015f48 <_strtod_l+0x518>
 8015e20:	f012 000f 	ands.w	r0, r2, #15
 8015e24:	d00a      	beq.n	8015e3c <_strtod_l+0x40c>
 8015e26:	495d      	ldr	r1, [pc, #372]	@ (8015f9c <_strtod_l+0x56c>)
 8015e28:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8015e2c:	ed91 7b00 	vldr	d7, [r1]
 8015e30:	ec4b ab16 	vmov	d6, sl, fp
 8015e34:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015e38:	ec5b ab17 	vmov	sl, fp, d7
 8015e3c:	f032 020f 	bics.w	r2, r2, #15
 8015e40:	d073      	beq.n	8015f2a <_strtod_l+0x4fa>
 8015e42:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8015e46:	dd47      	ble.n	8015ed8 <_strtod_l+0x4a8>
 8015e48:	2400      	movs	r4, #0
 8015e4a:	4625      	mov	r5, r4
 8015e4c:	9407      	str	r4, [sp, #28]
 8015e4e:	4626      	mov	r6, r4
 8015e50:	9a05      	ldr	r2, [sp, #20]
 8015e52:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8015fa8 <_strtod_l+0x578>
 8015e56:	2322      	movs	r3, #34	@ 0x22
 8015e58:	6013      	str	r3, [r2, #0]
 8015e5a:	f04f 0a00 	mov.w	sl, #0
 8015e5e:	9b07      	ldr	r3, [sp, #28]
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	f43f ae20 	beq.w	8015aa6 <_strtod_l+0x76>
 8015e66:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015e68:	9805      	ldr	r0, [sp, #20]
 8015e6a:	f001 fa41 	bl	80172f0 <_Bfree>
 8015e6e:	9805      	ldr	r0, [sp, #20]
 8015e70:	4631      	mov	r1, r6
 8015e72:	f001 fa3d 	bl	80172f0 <_Bfree>
 8015e76:	9805      	ldr	r0, [sp, #20]
 8015e78:	4629      	mov	r1, r5
 8015e7a:	f001 fa39 	bl	80172f0 <_Bfree>
 8015e7e:	9907      	ldr	r1, [sp, #28]
 8015e80:	9805      	ldr	r0, [sp, #20]
 8015e82:	f001 fa35 	bl	80172f0 <_Bfree>
 8015e86:	9805      	ldr	r0, [sp, #20]
 8015e88:	4621      	mov	r1, r4
 8015e8a:	f001 fa31 	bl	80172f0 <_Bfree>
 8015e8e:	e60a      	b.n	8015aa6 <_strtod_l+0x76>
 8015e90:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8015e94:	1be0      	subs	r0, r4, r7
 8015e96:	4281      	cmp	r1, r0
 8015e98:	dbbc      	blt.n	8015e14 <_strtod_l+0x3e4>
 8015e9a:	4a40      	ldr	r2, [pc, #256]	@ (8015f9c <_strtod_l+0x56c>)
 8015e9c:	f1c3 030f 	rsb	r3, r3, #15
 8015ea0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8015ea4:	ed91 7b00 	vldr	d7, [r1]
 8015ea8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015eaa:	ec4b ab16 	vmov	d6, sl, fp
 8015eae:	1acb      	subs	r3, r1, r3
 8015eb0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8015eb4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015eb8:	ed92 6b00 	vldr	d6, [r2]
 8015ebc:	e796      	b.n	8015dec <_strtod_l+0x3bc>
 8015ebe:	3116      	adds	r1, #22
 8015ec0:	dba8      	blt.n	8015e14 <_strtod_l+0x3e4>
 8015ec2:	4b36      	ldr	r3, [pc, #216]	@ (8015f9c <_strtod_l+0x56c>)
 8015ec4:	1b3c      	subs	r4, r7, r4
 8015ec6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8015eca:	ed94 7b00 	vldr	d7, [r4]
 8015ece:	ec4b ab16 	vmov	d6, sl, fp
 8015ed2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8015ed6:	e78b      	b.n	8015df0 <_strtod_l+0x3c0>
 8015ed8:	2000      	movs	r0, #0
 8015eda:	ec4b ab17 	vmov	d7, sl, fp
 8015ede:	4e30      	ldr	r6, [pc, #192]	@ (8015fa0 <_strtod_l+0x570>)
 8015ee0:	1112      	asrs	r2, r2, #4
 8015ee2:	4601      	mov	r1, r0
 8015ee4:	2a01      	cmp	r2, #1
 8015ee6:	dc23      	bgt.n	8015f30 <_strtod_l+0x500>
 8015ee8:	b108      	cbz	r0, 8015eee <_strtod_l+0x4be>
 8015eea:	ec5b ab17 	vmov	sl, fp, d7
 8015eee:	4a2c      	ldr	r2, [pc, #176]	@ (8015fa0 <_strtod_l+0x570>)
 8015ef0:	482c      	ldr	r0, [pc, #176]	@ (8015fa4 <_strtod_l+0x574>)
 8015ef2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8015ef6:	ed92 7b00 	vldr	d7, [r2]
 8015efa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8015efe:	ec4b ab16 	vmov	d6, sl, fp
 8015f02:	4a29      	ldr	r2, [pc, #164]	@ (8015fa8 <_strtod_l+0x578>)
 8015f04:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015f08:	ee17 1a90 	vmov	r1, s15
 8015f0c:	400a      	ands	r2, r1
 8015f0e:	4282      	cmp	r2, r0
 8015f10:	ec5b ab17 	vmov	sl, fp, d7
 8015f14:	d898      	bhi.n	8015e48 <_strtod_l+0x418>
 8015f16:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8015f1a:	4282      	cmp	r2, r0
 8015f1c:	bf86      	itte	hi
 8015f1e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8015fac <_strtod_l+0x57c>
 8015f22:	f04f 3aff 	movhi.w	sl, #4294967295
 8015f26:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8015f2a:	2200      	movs	r2, #0
 8015f2c:	9206      	str	r2, [sp, #24]
 8015f2e:	e076      	b.n	801601e <_strtod_l+0x5ee>
 8015f30:	f012 0f01 	tst.w	r2, #1
 8015f34:	d004      	beq.n	8015f40 <_strtod_l+0x510>
 8015f36:	ed96 6b00 	vldr	d6, [r6]
 8015f3a:	2001      	movs	r0, #1
 8015f3c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015f40:	3101      	adds	r1, #1
 8015f42:	1052      	asrs	r2, r2, #1
 8015f44:	3608      	adds	r6, #8
 8015f46:	e7cd      	b.n	8015ee4 <_strtod_l+0x4b4>
 8015f48:	d0ef      	beq.n	8015f2a <_strtod_l+0x4fa>
 8015f4a:	4252      	negs	r2, r2
 8015f4c:	f012 000f 	ands.w	r0, r2, #15
 8015f50:	d00a      	beq.n	8015f68 <_strtod_l+0x538>
 8015f52:	4912      	ldr	r1, [pc, #72]	@ (8015f9c <_strtod_l+0x56c>)
 8015f54:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8015f58:	ed91 7b00 	vldr	d7, [r1]
 8015f5c:	ec4b ab16 	vmov	d6, sl, fp
 8015f60:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8015f64:	ec5b ab17 	vmov	sl, fp, d7
 8015f68:	1112      	asrs	r2, r2, #4
 8015f6a:	d0de      	beq.n	8015f2a <_strtod_l+0x4fa>
 8015f6c:	2a1f      	cmp	r2, #31
 8015f6e:	dd1f      	ble.n	8015fb0 <_strtod_l+0x580>
 8015f70:	2400      	movs	r4, #0
 8015f72:	4625      	mov	r5, r4
 8015f74:	9407      	str	r4, [sp, #28]
 8015f76:	4626      	mov	r6, r4
 8015f78:	9a05      	ldr	r2, [sp, #20]
 8015f7a:	2322      	movs	r3, #34	@ 0x22
 8015f7c:	f04f 0a00 	mov.w	sl, #0
 8015f80:	f04f 0b00 	mov.w	fp, #0
 8015f84:	6013      	str	r3, [r2, #0]
 8015f86:	e76a      	b.n	8015e5e <_strtod_l+0x42e>
 8015f88:	08018a1f 	.word	0x08018a1f
 8015f8c:	08018a24 	.word	0x08018a24
 8015f90:	08018a16 	.word	0x08018a16
 8015f94:	08018a19 	.word	0x08018a19
 8015f98:	08018d9b 	.word	0x08018d9b
 8015f9c:	08018c98 	.word	0x08018c98
 8015fa0:	08018c70 	.word	0x08018c70
 8015fa4:	7ca00000 	.word	0x7ca00000
 8015fa8:	7ff00000 	.word	0x7ff00000
 8015fac:	7fefffff 	.word	0x7fefffff
 8015fb0:	f012 0110 	ands.w	r1, r2, #16
 8015fb4:	bf18      	it	ne
 8015fb6:	216a      	movne	r1, #106	@ 0x6a
 8015fb8:	9106      	str	r1, [sp, #24]
 8015fba:	ec4b ab17 	vmov	d7, sl, fp
 8015fbe:	49b0      	ldr	r1, [pc, #704]	@ (8016280 <_strtod_l+0x850>)
 8015fc0:	2000      	movs	r0, #0
 8015fc2:	07d6      	lsls	r6, r2, #31
 8015fc4:	d504      	bpl.n	8015fd0 <_strtod_l+0x5a0>
 8015fc6:	ed91 6b00 	vldr	d6, [r1]
 8015fca:	2001      	movs	r0, #1
 8015fcc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015fd0:	1052      	asrs	r2, r2, #1
 8015fd2:	f101 0108 	add.w	r1, r1, #8
 8015fd6:	d1f4      	bne.n	8015fc2 <_strtod_l+0x592>
 8015fd8:	b108      	cbz	r0, 8015fde <_strtod_l+0x5ae>
 8015fda:	ec5b ab17 	vmov	sl, fp, d7
 8015fde:	9a06      	ldr	r2, [sp, #24]
 8015fe0:	b1b2      	cbz	r2, 8016010 <_strtod_l+0x5e0>
 8015fe2:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8015fe6:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8015fea:	2a00      	cmp	r2, #0
 8015fec:	4658      	mov	r0, fp
 8015fee:	dd0f      	ble.n	8016010 <_strtod_l+0x5e0>
 8015ff0:	2a1f      	cmp	r2, #31
 8015ff2:	dd55      	ble.n	80160a0 <_strtod_l+0x670>
 8015ff4:	2a34      	cmp	r2, #52	@ 0x34
 8015ff6:	bfde      	ittt	le
 8015ff8:	f04f 32ff 	movle.w	r2, #4294967295
 8015ffc:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8016000:	408a      	lslle	r2, r1
 8016002:	f04f 0a00 	mov.w	sl, #0
 8016006:	bfcc      	ite	gt
 8016008:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801600c:	ea02 0b00 	andle.w	fp, r2, r0
 8016010:	ec4b ab17 	vmov	d7, sl, fp
 8016014:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801601c:	d0a8      	beq.n	8015f70 <_strtod_l+0x540>
 801601e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016020:	9805      	ldr	r0, [sp, #20]
 8016022:	f8cd 9000 	str.w	r9, [sp]
 8016026:	462a      	mov	r2, r5
 8016028:	f001 f9ca 	bl	80173c0 <__s2b>
 801602c:	9007      	str	r0, [sp, #28]
 801602e:	2800      	cmp	r0, #0
 8016030:	f43f af0a 	beq.w	8015e48 <_strtod_l+0x418>
 8016034:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016036:	1b3f      	subs	r7, r7, r4
 8016038:	2b00      	cmp	r3, #0
 801603a:	bfb4      	ite	lt
 801603c:	463b      	movlt	r3, r7
 801603e:	2300      	movge	r3, #0
 8016040:	930a      	str	r3, [sp, #40]	@ 0x28
 8016042:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016044:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8016270 <_strtod_l+0x840>
 8016048:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801604c:	2400      	movs	r4, #0
 801604e:	930d      	str	r3, [sp, #52]	@ 0x34
 8016050:	4625      	mov	r5, r4
 8016052:	9b07      	ldr	r3, [sp, #28]
 8016054:	9805      	ldr	r0, [sp, #20]
 8016056:	6859      	ldr	r1, [r3, #4]
 8016058:	f001 f90a 	bl	8017270 <_Balloc>
 801605c:	4606      	mov	r6, r0
 801605e:	2800      	cmp	r0, #0
 8016060:	f43f aef6 	beq.w	8015e50 <_strtod_l+0x420>
 8016064:	9b07      	ldr	r3, [sp, #28]
 8016066:	691a      	ldr	r2, [r3, #16]
 8016068:	ec4b ab19 	vmov	d9, sl, fp
 801606c:	3202      	adds	r2, #2
 801606e:	f103 010c 	add.w	r1, r3, #12
 8016072:	0092      	lsls	r2, r2, #2
 8016074:	300c      	adds	r0, #12
 8016076:	f000 fca0 	bl	80169ba <memcpy>
 801607a:	eeb0 0b49 	vmov.f64	d0, d9
 801607e:	9805      	ldr	r0, [sp, #20]
 8016080:	aa14      	add	r2, sp, #80	@ 0x50
 8016082:	a913      	add	r1, sp, #76	@ 0x4c
 8016084:	f001 fcd8 	bl	8017a38 <__d2b>
 8016088:	9012      	str	r0, [sp, #72]	@ 0x48
 801608a:	2800      	cmp	r0, #0
 801608c:	f43f aee0 	beq.w	8015e50 <_strtod_l+0x420>
 8016090:	9805      	ldr	r0, [sp, #20]
 8016092:	2101      	movs	r1, #1
 8016094:	f001 fa2a 	bl	80174ec <__i2b>
 8016098:	4605      	mov	r5, r0
 801609a:	b940      	cbnz	r0, 80160ae <_strtod_l+0x67e>
 801609c:	2500      	movs	r5, #0
 801609e:	e6d7      	b.n	8015e50 <_strtod_l+0x420>
 80160a0:	f04f 31ff 	mov.w	r1, #4294967295
 80160a4:	fa01 f202 	lsl.w	r2, r1, r2
 80160a8:	ea02 0a0a 	and.w	sl, r2, sl
 80160ac:	e7b0      	b.n	8016010 <_strtod_l+0x5e0>
 80160ae:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 80160b0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80160b2:	2f00      	cmp	r7, #0
 80160b4:	bfab      	itete	ge
 80160b6:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 80160b8:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 80160ba:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 80160be:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 80160c2:	bfac      	ite	ge
 80160c4:	eb07 0903 	addge.w	r9, r7, r3
 80160c8:	eba3 0807 	sublt.w	r8, r3, r7
 80160cc:	9b06      	ldr	r3, [sp, #24]
 80160ce:	1aff      	subs	r7, r7, r3
 80160d0:	4417      	add	r7, r2
 80160d2:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 80160d6:	4a6b      	ldr	r2, [pc, #428]	@ (8016284 <_strtod_l+0x854>)
 80160d8:	3f01      	subs	r7, #1
 80160da:	4297      	cmp	r7, r2
 80160dc:	da51      	bge.n	8016182 <_strtod_l+0x752>
 80160de:	1bd1      	subs	r1, r2, r7
 80160e0:	291f      	cmp	r1, #31
 80160e2:	eba3 0301 	sub.w	r3, r3, r1
 80160e6:	f04f 0201 	mov.w	r2, #1
 80160ea:	dc3e      	bgt.n	801616a <_strtod_l+0x73a>
 80160ec:	408a      	lsls	r2, r1
 80160ee:	920c      	str	r2, [sp, #48]	@ 0x30
 80160f0:	2200      	movs	r2, #0
 80160f2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80160f4:	eb09 0703 	add.w	r7, r9, r3
 80160f8:	4498      	add	r8, r3
 80160fa:	9b06      	ldr	r3, [sp, #24]
 80160fc:	45b9      	cmp	r9, r7
 80160fe:	4498      	add	r8, r3
 8016100:	464b      	mov	r3, r9
 8016102:	bfa8      	it	ge
 8016104:	463b      	movge	r3, r7
 8016106:	4543      	cmp	r3, r8
 8016108:	bfa8      	it	ge
 801610a:	4643      	movge	r3, r8
 801610c:	2b00      	cmp	r3, #0
 801610e:	bfc2      	ittt	gt
 8016110:	1aff      	subgt	r7, r7, r3
 8016112:	eba8 0803 	subgt.w	r8, r8, r3
 8016116:	eba9 0903 	subgt.w	r9, r9, r3
 801611a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801611c:	2b00      	cmp	r3, #0
 801611e:	dd16      	ble.n	801614e <_strtod_l+0x71e>
 8016120:	4629      	mov	r1, r5
 8016122:	9805      	ldr	r0, [sp, #20]
 8016124:	461a      	mov	r2, r3
 8016126:	f001 faa1 	bl	801766c <__pow5mult>
 801612a:	4605      	mov	r5, r0
 801612c:	2800      	cmp	r0, #0
 801612e:	d0b5      	beq.n	801609c <_strtod_l+0x66c>
 8016130:	4601      	mov	r1, r0
 8016132:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016134:	9805      	ldr	r0, [sp, #20]
 8016136:	f001 f9ef 	bl	8017518 <__multiply>
 801613a:	900f      	str	r0, [sp, #60]	@ 0x3c
 801613c:	2800      	cmp	r0, #0
 801613e:	f43f ae87 	beq.w	8015e50 <_strtod_l+0x420>
 8016142:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016144:	9805      	ldr	r0, [sp, #20]
 8016146:	f001 f8d3 	bl	80172f0 <_Bfree>
 801614a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801614c:	9312      	str	r3, [sp, #72]	@ 0x48
 801614e:	2f00      	cmp	r7, #0
 8016150:	dc1b      	bgt.n	801618a <_strtod_l+0x75a>
 8016152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016154:	2b00      	cmp	r3, #0
 8016156:	dd21      	ble.n	801619c <_strtod_l+0x76c>
 8016158:	4631      	mov	r1, r6
 801615a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801615c:	9805      	ldr	r0, [sp, #20]
 801615e:	f001 fa85 	bl	801766c <__pow5mult>
 8016162:	4606      	mov	r6, r0
 8016164:	b9d0      	cbnz	r0, 801619c <_strtod_l+0x76c>
 8016166:	2600      	movs	r6, #0
 8016168:	e672      	b.n	8015e50 <_strtod_l+0x420>
 801616a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 801616e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8016172:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8016176:	37e2      	adds	r7, #226	@ 0xe2
 8016178:	fa02 f107 	lsl.w	r1, r2, r7
 801617c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801617e:	920c      	str	r2, [sp, #48]	@ 0x30
 8016180:	e7b8      	b.n	80160f4 <_strtod_l+0x6c4>
 8016182:	2200      	movs	r2, #0
 8016184:	920b      	str	r2, [sp, #44]	@ 0x2c
 8016186:	2201      	movs	r2, #1
 8016188:	e7f9      	b.n	801617e <_strtod_l+0x74e>
 801618a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801618c:	9805      	ldr	r0, [sp, #20]
 801618e:	463a      	mov	r2, r7
 8016190:	f001 fac6 	bl	8017720 <__lshift>
 8016194:	9012      	str	r0, [sp, #72]	@ 0x48
 8016196:	2800      	cmp	r0, #0
 8016198:	d1db      	bne.n	8016152 <_strtod_l+0x722>
 801619a:	e659      	b.n	8015e50 <_strtod_l+0x420>
 801619c:	f1b8 0f00 	cmp.w	r8, #0
 80161a0:	dd07      	ble.n	80161b2 <_strtod_l+0x782>
 80161a2:	4631      	mov	r1, r6
 80161a4:	9805      	ldr	r0, [sp, #20]
 80161a6:	4642      	mov	r2, r8
 80161a8:	f001 faba 	bl	8017720 <__lshift>
 80161ac:	4606      	mov	r6, r0
 80161ae:	2800      	cmp	r0, #0
 80161b0:	d0d9      	beq.n	8016166 <_strtod_l+0x736>
 80161b2:	f1b9 0f00 	cmp.w	r9, #0
 80161b6:	dd08      	ble.n	80161ca <_strtod_l+0x79a>
 80161b8:	4629      	mov	r1, r5
 80161ba:	9805      	ldr	r0, [sp, #20]
 80161bc:	464a      	mov	r2, r9
 80161be:	f001 faaf 	bl	8017720 <__lshift>
 80161c2:	4605      	mov	r5, r0
 80161c4:	2800      	cmp	r0, #0
 80161c6:	f43f ae43 	beq.w	8015e50 <_strtod_l+0x420>
 80161ca:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80161cc:	9805      	ldr	r0, [sp, #20]
 80161ce:	4632      	mov	r2, r6
 80161d0:	f001 fb2e 	bl	8017830 <__mdiff>
 80161d4:	4604      	mov	r4, r0
 80161d6:	2800      	cmp	r0, #0
 80161d8:	f43f ae3a 	beq.w	8015e50 <_strtod_l+0x420>
 80161dc:	2300      	movs	r3, #0
 80161de:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80161e2:	60c3      	str	r3, [r0, #12]
 80161e4:	4629      	mov	r1, r5
 80161e6:	f001 fb07 	bl	80177f8 <__mcmp>
 80161ea:	2800      	cmp	r0, #0
 80161ec:	da4e      	bge.n	801628c <_strtod_l+0x85c>
 80161ee:	ea58 080a 	orrs.w	r8, r8, sl
 80161f2:	d174      	bne.n	80162de <_strtod_l+0x8ae>
 80161f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d170      	bne.n	80162de <_strtod_l+0x8ae>
 80161fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016200:	0d1b      	lsrs	r3, r3, #20
 8016202:	051b      	lsls	r3, r3, #20
 8016204:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8016208:	d969      	bls.n	80162de <_strtod_l+0x8ae>
 801620a:	6963      	ldr	r3, [r4, #20]
 801620c:	b913      	cbnz	r3, 8016214 <_strtod_l+0x7e4>
 801620e:	6923      	ldr	r3, [r4, #16]
 8016210:	2b01      	cmp	r3, #1
 8016212:	dd64      	ble.n	80162de <_strtod_l+0x8ae>
 8016214:	4621      	mov	r1, r4
 8016216:	2201      	movs	r2, #1
 8016218:	9805      	ldr	r0, [sp, #20]
 801621a:	f001 fa81 	bl	8017720 <__lshift>
 801621e:	4629      	mov	r1, r5
 8016220:	4604      	mov	r4, r0
 8016222:	f001 fae9 	bl	80177f8 <__mcmp>
 8016226:	2800      	cmp	r0, #0
 8016228:	dd59      	ble.n	80162de <_strtod_l+0x8ae>
 801622a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801622e:	9a06      	ldr	r2, [sp, #24]
 8016230:	0d1b      	lsrs	r3, r3, #20
 8016232:	051b      	lsls	r3, r3, #20
 8016234:	2a00      	cmp	r2, #0
 8016236:	d070      	beq.n	801631a <_strtod_l+0x8ea>
 8016238:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801623c:	d86d      	bhi.n	801631a <_strtod_l+0x8ea>
 801623e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8016242:	f67f ae99 	bls.w	8015f78 <_strtod_l+0x548>
 8016246:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8016278 <_strtod_l+0x848>
 801624a:	ec4b ab16 	vmov	d6, sl, fp
 801624e:	4b0e      	ldr	r3, [pc, #56]	@ (8016288 <_strtod_l+0x858>)
 8016250:	ee26 7b07 	vmul.f64	d7, d6, d7
 8016254:	ee17 2a90 	vmov	r2, s15
 8016258:	4013      	ands	r3, r2
 801625a:	ec5b ab17 	vmov	sl, fp, d7
 801625e:	2b00      	cmp	r3, #0
 8016260:	f47f ae01 	bne.w	8015e66 <_strtod_l+0x436>
 8016264:	9a05      	ldr	r2, [sp, #20]
 8016266:	2322      	movs	r3, #34	@ 0x22
 8016268:	6013      	str	r3, [r2, #0]
 801626a:	e5fc      	b.n	8015e66 <_strtod_l+0x436>
 801626c:	f3af 8000 	nop.w
 8016270:	ffc00000 	.word	0xffc00000
 8016274:	41dfffff 	.word	0x41dfffff
 8016278:	00000000 	.word	0x00000000
 801627c:	39500000 	.word	0x39500000
 8016280:	08018a50 	.word	0x08018a50
 8016284:	fffffc02 	.word	0xfffffc02
 8016288:	7ff00000 	.word	0x7ff00000
 801628c:	46d9      	mov	r9, fp
 801628e:	d15d      	bne.n	801634c <_strtod_l+0x91c>
 8016290:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016294:	f1b8 0f00 	cmp.w	r8, #0
 8016298:	d02a      	beq.n	80162f0 <_strtod_l+0x8c0>
 801629a:	4aab      	ldr	r2, [pc, #684]	@ (8016548 <_strtod_l+0xb18>)
 801629c:	4293      	cmp	r3, r2
 801629e:	d12a      	bne.n	80162f6 <_strtod_l+0x8c6>
 80162a0:	9b06      	ldr	r3, [sp, #24]
 80162a2:	4652      	mov	r2, sl
 80162a4:	b1fb      	cbz	r3, 80162e6 <_strtod_l+0x8b6>
 80162a6:	4ba9      	ldr	r3, [pc, #676]	@ (801654c <_strtod_l+0xb1c>)
 80162a8:	ea0b 0303 	and.w	r3, fp, r3
 80162ac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80162b0:	f04f 31ff 	mov.w	r1, #4294967295
 80162b4:	d81a      	bhi.n	80162ec <_strtod_l+0x8bc>
 80162b6:	0d1b      	lsrs	r3, r3, #20
 80162b8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80162bc:	fa01 f303 	lsl.w	r3, r1, r3
 80162c0:	429a      	cmp	r2, r3
 80162c2:	d118      	bne.n	80162f6 <_strtod_l+0x8c6>
 80162c4:	4ba2      	ldr	r3, [pc, #648]	@ (8016550 <_strtod_l+0xb20>)
 80162c6:	4599      	cmp	r9, r3
 80162c8:	d102      	bne.n	80162d0 <_strtod_l+0x8a0>
 80162ca:	3201      	adds	r2, #1
 80162cc:	f43f adc0 	beq.w	8015e50 <_strtod_l+0x420>
 80162d0:	4b9e      	ldr	r3, [pc, #632]	@ (801654c <_strtod_l+0xb1c>)
 80162d2:	ea09 0303 	and.w	r3, r9, r3
 80162d6:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 80162da:	f04f 0a00 	mov.w	sl, #0
 80162de:	9b06      	ldr	r3, [sp, #24]
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	d1b0      	bne.n	8016246 <_strtod_l+0x816>
 80162e4:	e5bf      	b.n	8015e66 <_strtod_l+0x436>
 80162e6:	f04f 33ff 	mov.w	r3, #4294967295
 80162ea:	e7e9      	b.n	80162c0 <_strtod_l+0x890>
 80162ec:	460b      	mov	r3, r1
 80162ee:	e7e7      	b.n	80162c0 <_strtod_l+0x890>
 80162f0:	ea53 030a 	orrs.w	r3, r3, sl
 80162f4:	d099      	beq.n	801622a <_strtod_l+0x7fa>
 80162f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80162f8:	b1c3      	cbz	r3, 801632c <_strtod_l+0x8fc>
 80162fa:	ea13 0f09 	tst.w	r3, r9
 80162fe:	d0ee      	beq.n	80162de <_strtod_l+0x8ae>
 8016300:	9a06      	ldr	r2, [sp, #24]
 8016302:	4650      	mov	r0, sl
 8016304:	4659      	mov	r1, fp
 8016306:	f1b8 0f00 	cmp.w	r8, #0
 801630a:	d013      	beq.n	8016334 <_strtod_l+0x904>
 801630c:	f7ff fb73 	bl	80159f6 <sulp>
 8016310:	ee39 7b00 	vadd.f64	d7, d9, d0
 8016314:	ec5b ab17 	vmov	sl, fp, d7
 8016318:	e7e1      	b.n	80162de <_strtod_l+0x8ae>
 801631a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801631e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016322:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016326:	f04f 3aff 	mov.w	sl, #4294967295
 801632a:	e7d8      	b.n	80162de <_strtod_l+0x8ae>
 801632c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801632e:	ea13 0f0a 	tst.w	r3, sl
 8016332:	e7e4      	b.n	80162fe <_strtod_l+0x8ce>
 8016334:	f7ff fb5f 	bl	80159f6 <sulp>
 8016338:	ee39 0b40 	vsub.f64	d0, d9, d0
 801633c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8016340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016344:	ec5b ab10 	vmov	sl, fp, d0
 8016348:	d1c9      	bne.n	80162de <_strtod_l+0x8ae>
 801634a:	e615      	b.n	8015f78 <_strtod_l+0x548>
 801634c:	4629      	mov	r1, r5
 801634e:	4620      	mov	r0, r4
 8016350:	f001 fbca 	bl	8017ae8 <__ratio>
 8016354:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8016358:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801635c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016360:	d85d      	bhi.n	801641e <_strtod_l+0x9ee>
 8016362:	f1b8 0f00 	cmp.w	r8, #0
 8016366:	d164      	bne.n	8016432 <_strtod_l+0xa02>
 8016368:	f1ba 0f00 	cmp.w	sl, #0
 801636c:	d14b      	bne.n	8016406 <_strtod_l+0x9d6>
 801636e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016372:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8016376:	2b00      	cmp	r3, #0
 8016378:	d160      	bne.n	801643c <_strtod_l+0xa0c>
 801637a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 801637e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8016382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016386:	d401      	bmi.n	801638c <_strtod_l+0x95c>
 8016388:	ee20 8b08 	vmul.f64	d8, d0, d8
 801638c:	eeb1 ab48 	vneg.f64	d10, d8
 8016390:	486e      	ldr	r0, [pc, #440]	@ (801654c <_strtod_l+0xb1c>)
 8016392:	4970      	ldr	r1, [pc, #448]	@ (8016554 <_strtod_l+0xb24>)
 8016394:	ea09 0700 	and.w	r7, r9, r0
 8016398:	428f      	cmp	r7, r1
 801639a:	ec53 2b1a 	vmov	r2, r3, d10
 801639e:	d17d      	bne.n	801649c <_strtod_l+0xa6c>
 80163a0:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 80163a4:	ec4b ab1c 	vmov	d12, sl, fp
 80163a8:	eeb0 0b4c 	vmov.f64	d0, d12
 80163ac:	f001 fad4 	bl	8017958 <__ulp>
 80163b0:	4866      	ldr	r0, [pc, #408]	@ (801654c <_strtod_l+0xb1c>)
 80163b2:	eea0 cb0a 	vfma.f64	d12, d0, d10
 80163b6:	ee1c 3a90 	vmov	r3, s25
 80163ba:	4a67      	ldr	r2, [pc, #412]	@ (8016558 <_strtod_l+0xb28>)
 80163bc:	ea03 0100 	and.w	r1, r3, r0
 80163c0:	4291      	cmp	r1, r2
 80163c2:	ec5b ab1c 	vmov	sl, fp, d12
 80163c6:	d93c      	bls.n	8016442 <_strtod_l+0xa12>
 80163c8:	ee19 2a90 	vmov	r2, s19
 80163cc:	4b60      	ldr	r3, [pc, #384]	@ (8016550 <_strtod_l+0xb20>)
 80163ce:	429a      	cmp	r2, r3
 80163d0:	d104      	bne.n	80163dc <_strtod_l+0x9ac>
 80163d2:	ee19 3a10 	vmov	r3, s18
 80163d6:	3301      	adds	r3, #1
 80163d8:	f43f ad3a 	beq.w	8015e50 <_strtod_l+0x420>
 80163dc:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8016550 <_strtod_l+0xb20>
 80163e0:	f04f 3aff 	mov.w	sl, #4294967295
 80163e4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80163e6:	9805      	ldr	r0, [sp, #20]
 80163e8:	f000 ff82 	bl	80172f0 <_Bfree>
 80163ec:	9805      	ldr	r0, [sp, #20]
 80163ee:	4631      	mov	r1, r6
 80163f0:	f000 ff7e 	bl	80172f0 <_Bfree>
 80163f4:	9805      	ldr	r0, [sp, #20]
 80163f6:	4629      	mov	r1, r5
 80163f8:	f000 ff7a 	bl	80172f0 <_Bfree>
 80163fc:	9805      	ldr	r0, [sp, #20]
 80163fe:	4621      	mov	r1, r4
 8016400:	f000 ff76 	bl	80172f0 <_Bfree>
 8016404:	e625      	b.n	8016052 <_strtod_l+0x622>
 8016406:	f1ba 0f01 	cmp.w	sl, #1
 801640a:	d103      	bne.n	8016414 <_strtod_l+0x9e4>
 801640c:	f1bb 0f00 	cmp.w	fp, #0
 8016410:	f43f adb2 	beq.w	8015f78 <_strtod_l+0x548>
 8016414:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8016418:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 801641c:	e7b8      	b.n	8016390 <_strtod_l+0x960>
 801641e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8016422:	ee20 8b08 	vmul.f64	d8, d0, d8
 8016426:	f1b8 0f00 	cmp.w	r8, #0
 801642a:	d0af      	beq.n	801638c <_strtod_l+0x95c>
 801642c:	eeb0 ab48 	vmov.f64	d10, d8
 8016430:	e7ae      	b.n	8016390 <_strtod_l+0x960>
 8016432:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8016436:	eeb0 8b4a 	vmov.f64	d8, d10
 801643a:	e7a9      	b.n	8016390 <_strtod_l+0x960>
 801643c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8016440:	e7a6      	b.n	8016390 <_strtod_l+0x960>
 8016442:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8016446:	9b06      	ldr	r3, [sp, #24]
 8016448:	46d9      	mov	r9, fp
 801644a:	2b00      	cmp	r3, #0
 801644c:	d1ca      	bne.n	80163e4 <_strtod_l+0x9b4>
 801644e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016452:	0d1b      	lsrs	r3, r3, #20
 8016454:	051b      	lsls	r3, r3, #20
 8016456:	429f      	cmp	r7, r3
 8016458:	d1c4      	bne.n	80163e4 <_strtod_l+0x9b4>
 801645a:	ec51 0b18 	vmov	r0, r1, d8
 801645e:	f7ea f9cb 	bl	80007f8 <__aeabi_d2lz>
 8016462:	f7ea f933 	bl	80006cc <__aeabi_l2d>
 8016466:	f3cb 0913 	ubfx	r9, fp, #0, #20
 801646a:	ec41 0b17 	vmov	d7, r0, r1
 801646e:	ea49 090a 	orr.w	r9, r9, sl
 8016472:	ea59 0908 	orrs.w	r9, r9, r8
 8016476:	ee38 8b47 	vsub.f64	d8, d8, d7
 801647a:	d03c      	beq.n	80164f6 <_strtod_l+0xac6>
 801647c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8016530 <_strtod_l+0xb00>
 8016480:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8016484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016488:	f53f aced 	bmi.w	8015e66 <_strtod_l+0x436>
 801648c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8016538 <_strtod_l+0xb08>
 8016490:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8016494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016498:	dda4      	ble.n	80163e4 <_strtod_l+0x9b4>
 801649a:	e4e4      	b.n	8015e66 <_strtod_l+0x436>
 801649c:	9906      	ldr	r1, [sp, #24]
 801649e:	b1e1      	cbz	r1, 80164da <_strtod_l+0xaaa>
 80164a0:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 80164a4:	d819      	bhi.n	80164da <_strtod_l+0xaaa>
 80164a6:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80164aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164ae:	d811      	bhi.n	80164d4 <_strtod_l+0xaa4>
 80164b0:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 80164b4:	ee18 3a10 	vmov	r3, s16
 80164b8:	2b01      	cmp	r3, #1
 80164ba:	bf38      	it	cc
 80164bc:	2301      	movcc	r3, #1
 80164be:	ee08 3a10 	vmov	s16, r3
 80164c2:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 80164c6:	f1b8 0f00 	cmp.w	r8, #0
 80164ca:	d111      	bne.n	80164f0 <_strtod_l+0xac0>
 80164cc:	eeb1 7b48 	vneg.f64	d7, d8
 80164d0:	ec53 2b17 	vmov	r2, r3, d7
 80164d4:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 80164d8:	1bcb      	subs	r3, r1, r7
 80164da:	eeb0 0b49 	vmov.f64	d0, d9
 80164de:	ec43 2b1a 	vmov	d10, r2, r3
 80164e2:	f001 fa39 	bl	8017958 <__ulp>
 80164e6:	eeaa 9b00 	vfma.f64	d9, d10, d0
 80164ea:	ec5b ab19 	vmov	sl, fp, d9
 80164ee:	e7aa      	b.n	8016446 <_strtod_l+0xa16>
 80164f0:	eeb0 7b48 	vmov.f64	d7, d8
 80164f4:	e7ec      	b.n	80164d0 <_strtod_l+0xaa0>
 80164f6:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8016540 <_strtod_l+0xb10>
 80164fa:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80164fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016502:	f57f af6f 	bpl.w	80163e4 <_strtod_l+0x9b4>
 8016506:	e4ae      	b.n	8015e66 <_strtod_l+0x436>
 8016508:	2300      	movs	r3, #0
 801650a:	9308      	str	r3, [sp, #32]
 801650c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801650e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016510:	6013      	str	r3, [r2, #0]
 8016512:	f7ff bacc 	b.w	8015aae <_strtod_l+0x7e>
 8016516:	2a65      	cmp	r2, #101	@ 0x65
 8016518:	f43f abbc 	beq.w	8015c94 <_strtod_l+0x264>
 801651c:	2a45      	cmp	r2, #69	@ 0x45
 801651e:	f43f abb9 	beq.w	8015c94 <_strtod_l+0x264>
 8016522:	2301      	movs	r3, #1
 8016524:	9306      	str	r3, [sp, #24]
 8016526:	f7ff bbf0 	b.w	8015d0a <_strtod_l+0x2da>
 801652a:	bf00      	nop
 801652c:	f3af 8000 	nop.w
 8016530:	94a03595 	.word	0x94a03595
 8016534:	3fdfffff 	.word	0x3fdfffff
 8016538:	35afe535 	.word	0x35afe535
 801653c:	3fe00000 	.word	0x3fe00000
 8016540:	94a03595 	.word	0x94a03595
 8016544:	3fcfffff 	.word	0x3fcfffff
 8016548:	000fffff 	.word	0x000fffff
 801654c:	7ff00000 	.word	0x7ff00000
 8016550:	7fefffff 	.word	0x7fefffff
 8016554:	7fe00000 	.word	0x7fe00000
 8016558:	7c9fffff 	.word	0x7c9fffff

0801655c <strtod>:
 801655c:	460a      	mov	r2, r1
 801655e:	4601      	mov	r1, r0
 8016560:	4802      	ldr	r0, [pc, #8]	@ (801656c <strtod+0x10>)
 8016562:	4b03      	ldr	r3, [pc, #12]	@ (8016570 <strtod+0x14>)
 8016564:	6800      	ldr	r0, [r0, #0]
 8016566:	f7ff ba63 	b.w	8015a30 <_strtod_l>
 801656a:	bf00      	nop
 801656c:	24000240 	.word	0x24000240
 8016570:	240000d4 	.word	0x240000d4

08016574 <_strtol_l.constprop.0>:
 8016574:	2b24      	cmp	r3, #36	@ 0x24
 8016576:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801657a:	4686      	mov	lr, r0
 801657c:	4690      	mov	r8, r2
 801657e:	d801      	bhi.n	8016584 <_strtol_l.constprop.0+0x10>
 8016580:	2b01      	cmp	r3, #1
 8016582:	d106      	bne.n	8016592 <_strtol_l.constprop.0+0x1e>
 8016584:	f000 f9ec 	bl	8016960 <__errno>
 8016588:	2316      	movs	r3, #22
 801658a:	6003      	str	r3, [r0, #0]
 801658c:	2000      	movs	r0, #0
 801658e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016592:	4834      	ldr	r0, [pc, #208]	@ (8016664 <_strtol_l.constprop.0+0xf0>)
 8016594:	460d      	mov	r5, r1
 8016596:	462a      	mov	r2, r5
 8016598:	f815 4b01 	ldrb.w	r4, [r5], #1
 801659c:	5d06      	ldrb	r6, [r0, r4]
 801659e:	f016 0608 	ands.w	r6, r6, #8
 80165a2:	d1f8      	bne.n	8016596 <_strtol_l.constprop.0+0x22>
 80165a4:	2c2d      	cmp	r4, #45	@ 0x2d
 80165a6:	d12d      	bne.n	8016604 <_strtol_l.constprop.0+0x90>
 80165a8:	782c      	ldrb	r4, [r5, #0]
 80165aa:	2601      	movs	r6, #1
 80165ac:	1c95      	adds	r5, r2, #2
 80165ae:	f033 0210 	bics.w	r2, r3, #16
 80165b2:	d109      	bne.n	80165c8 <_strtol_l.constprop.0+0x54>
 80165b4:	2c30      	cmp	r4, #48	@ 0x30
 80165b6:	d12a      	bne.n	801660e <_strtol_l.constprop.0+0x9a>
 80165b8:	782a      	ldrb	r2, [r5, #0]
 80165ba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80165be:	2a58      	cmp	r2, #88	@ 0x58
 80165c0:	d125      	bne.n	801660e <_strtol_l.constprop.0+0x9a>
 80165c2:	786c      	ldrb	r4, [r5, #1]
 80165c4:	2310      	movs	r3, #16
 80165c6:	3502      	adds	r5, #2
 80165c8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80165cc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80165d0:	2200      	movs	r2, #0
 80165d2:	fbbc f9f3 	udiv	r9, ip, r3
 80165d6:	4610      	mov	r0, r2
 80165d8:	fb03 ca19 	mls	sl, r3, r9, ip
 80165dc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80165e0:	2f09      	cmp	r7, #9
 80165e2:	d81b      	bhi.n	801661c <_strtol_l.constprop.0+0xa8>
 80165e4:	463c      	mov	r4, r7
 80165e6:	42a3      	cmp	r3, r4
 80165e8:	dd27      	ble.n	801663a <_strtol_l.constprop.0+0xc6>
 80165ea:	1c57      	adds	r7, r2, #1
 80165ec:	d007      	beq.n	80165fe <_strtol_l.constprop.0+0x8a>
 80165ee:	4581      	cmp	r9, r0
 80165f0:	d320      	bcc.n	8016634 <_strtol_l.constprop.0+0xc0>
 80165f2:	d101      	bne.n	80165f8 <_strtol_l.constprop.0+0x84>
 80165f4:	45a2      	cmp	sl, r4
 80165f6:	db1d      	blt.n	8016634 <_strtol_l.constprop.0+0xc0>
 80165f8:	fb00 4003 	mla	r0, r0, r3, r4
 80165fc:	2201      	movs	r2, #1
 80165fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016602:	e7eb      	b.n	80165dc <_strtol_l.constprop.0+0x68>
 8016604:	2c2b      	cmp	r4, #43	@ 0x2b
 8016606:	bf04      	itt	eq
 8016608:	782c      	ldrbeq	r4, [r5, #0]
 801660a:	1c95      	addeq	r5, r2, #2
 801660c:	e7cf      	b.n	80165ae <_strtol_l.constprop.0+0x3a>
 801660e:	2b00      	cmp	r3, #0
 8016610:	d1da      	bne.n	80165c8 <_strtol_l.constprop.0+0x54>
 8016612:	2c30      	cmp	r4, #48	@ 0x30
 8016614:	bf0c      	ite	eq
 8016616:	2308      	moveq	r3, #8
 8016618:	230a      	movne	r3, #10
 801661a:	e7d5      	b.n	80165c8 <_strtol_l.constprop.0+0x54>
 801661c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8016620:	2f19      	cmp	r7, #25
 8016622:	d801      	bhi.n	8016628 <_strtol_l.constprop.0+0xb4>
 8016624:	3c37      	subs	r4, #55	@ 0x37
 8016626:	e7de      	b.n	80165e6 <_strtol_l.constprop.0+0x72>
 8016628:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801662c:	2f19      	cmp	r7, #25
 801662e:	d804      	bhi.n	801663a <_strtol_l.constprop.0+0xc6>
 8016630:	3c57      	subs	r4, #87	@ 0x57
 8016632:	e7d8      	b.n	80165e6 <_strtol_l.constprop.0+0x72>
 8016634:	f04f 32ff 	mov.w	r2, #4294967295
 8016638:	e7e1      	b.n	80165fe <_strtol_l.constprop.0+0x8a>
 801663a:	1c53      	adds	r3, r2, #1
 801663c:	d108      	bne.n	8016650 <_strtol_l.constprop.0+0xdc>
 801663e:	2322      	movs	r3, #34	@ 0x22
 8016640:	f8ce 3000 	str.w	r3, [lr]
 8016644:	4660      	mov	r0, ip
 8016646:	f1b8 0f00 	cmp.w	r8, #0
 801664a:	d0a0      	beq.n	801658e <_strtol_l.constprop.0+0x1a>
 801664c:	1e69      	subs	r1, r5, #1
 801664e:	e006      	b.n	801665e <_strtol_l.constprop.0+0xea>
 8016650:	b106      	cbz	r6, 8016654 <_strtol_l.constprop.0+0xe0>
 8016652:	4240      	negs	r0, r0
 8016654:	f1b8 0f00 	cmp.w	r8, #0
 8016658:	d099      	beq.n	801658e <_strtol_l.constprop.0+0x1a>
 801665a:	2a00      	cmp	r2, #0
 801665c:	d1f6      	bne.n	801664c <_strtol_l.constprop.0+0xd8>
 801665e:	f8c8 1000 	str.w	r1, [r8]
 8016662:	e794      	b.n	801658e <_strtol_l.constprop.0+0x1a>
 8016664:	08018a79 	.word	0x08018a79

08016668 <strtol>:
 8016668:	4613      	mov	r3, r2
 801666a:	460a      	mov	r2, r1
 801666c:	4601      	mov	r1, r0
 801666e:	4802      	ldr	r0, [pc, #8]	@ (8016678 <strtol+0x10>)
 8016670:	6800      	ldr	r0, [r0, #0]
 8016672:	f7ff bf7f 	b.w	8016574 <_strtol_l.constprop.0>
 8016676:	bf00      	nop
 8016678:	24000240 	.word	0x24000240

0801667c <std>:
 801667c:	2300      	movs	r3, #0
 801667e:	b510      	push	{r4, lr}
 8016680:	4604      	mov	r4, r0
 8016682:	e9c0 3300 	strd	r3, r3, [r0]
 8016686:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801668a:	6083      	str	r3, [r0, #8]
 801668c:	8181      	strh	r1, [r0, #12]
 801668e:	6643      	str	r3, [r0, #100]	@ 0x64
 8016690:	81c2      	strh	r2, [r0, #14]
 8016692:	6183      	str	r3, [r0, #24]
 8016694:	4619      	mov	r1, r3
 8016696:	2208      	movs	r2, #8
 8016698:	305c      	adds	r0, #92	@ 0x5c
 801669a:	f000 f8f4 	bl	8016886 <memset>
 801669e:	4b0d      	ldr	r3, [pc, #52]	@ (80166d4 <std+0x58>)
 80166a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80166a2:	4b0d      	ldr	r3, [pc, #52]	@ (80166d8 <std+0x5c>)
 80166a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80166a6:	4b0d      	ldr	r3, [pc, #52]	@ (80166dc <std+0x60>)
 80166a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80166aa:	4b0d      	ldr	r3, [pc, #52]	@ (80166e0 <std+0x64>)
 80166ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80166ae:	4b0d      	ldr	r3, [pc, #52]	@ (80166e4 <std+0x68>)
 80166b0:	6224      	str	r4, [r4, #32]
 80166b2:	429c      	cmp	r4, r3
 80166b4:	d006      	beq.n	80166c4 <std+0x48>
 80166b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80166ba:	4294      	cmp	r4, r2
 80166bc:	d002      	beq.n	80166c4 <std+0x48>
 80166be:	33d0      	adds	r3, #208	@ 0xd0
 80166c0:	429c      	cmp	r4, r3
 80166c2:	d105      	bne.n	80166d0 <std+0x54>
 80166c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80166c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80166cc:	f000 b972 	b.w	80169b4 <__retarget_lock_init_recursive>
 80166d0:	bd10      	pop	{r4, pc}
 80166d2:	bf00      	nop
 80166d4:	08016801 	.word	0x08016801
 80166d8:	08016823 	.word	0x08016823
 80166dc:	0801685b 	.word	0x0801685b
 80166e0:	0801687f 	.word	0x0801687f
 80166e4:	240066a8 	.word	0x240066a8

080166e8 <stdio_exit_handler>:
 80166e8:	4a02      	ldr	r2, [pc, #8]	@ (80166f4 <stdio_exit_handler+0xc>)
 80166ea:	4903      	ldr	r1, [pc, #12]	@ (80166f8 <stdio_exit_handler+0x10>)
 80166ec:	4803      	ldr	r0, [pc, #12]	@ (80166fc <stdio_exit_handler+0x14>)
 80166ee:	f000 b869 	b.w	80167c4 <_fwalk_sglue>
 80166f2:	bf00      	nop
 80166f4:	240000c8 	.word	0x240000c8
 80166f8:	08017cf1 	.word	0x08017cf1
 80166fc:	24000244 	.word	0x24000244

08016700 <cleanup_stdio>:
 8016700:	6841      	ldr	r1, [r0, #4]
 8016702:	4b0c      	ldr	r3, [pc, #48]	@ (8016734 <cleanup_stdio+0x34>)
 8016704:	4299      	cmp	r1, r3
 8016706:	b510      	push	{r4, lr}
 8016708:	4604      	mov	r4, r0
 801670a:	d001      	beq.n	8016710 <cleanup_stdio+0x10>
 801670c:	f001 faf0 	bl	8017cf0 <_fflush_r>
 8016710:	68a1      	ldr	r1, [r4, #8]
 8016712:	4b09      	ldr	r3, [pc, #36]	@ (8016738 <cleanup_stdio+0x38>)
 8016714:	4299      	cmp	r1, r3
 8016716:	d002      	beq.n	801671e <cleanup_stdio+0x1e>
 8016718:	4620      	mov	r0, r4
 801671a:	f001 fae9 	bl	8017cf0 <_fflush_r>
 801671e:	68e1      	ldr	r1, [r4, #12]
 8016720:	4b06      	ldr	r3, [pc, #24]	@ (801673c <cleanup_stdio+0x3c>)
 8016722:	4299      	cmp	r1, r3
 8016724:	d004      	beq.n	8016730 <cleanup_stdio+0x30>
 8016726:	4620      	mov	r0, r4
 8016728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801672c:	f001 bae0 	b.w	8017cf0 <_fflush_r>
 8016730:	bd10      	pop	{r4, pc}
 8016732:	bf00      	nop
 8016734:	240066a8 	.word	0x240066a8
 8016738:	24006710 	.word	0x24006710
 801673c:	24006778 	.word	0x24006778

08016740 <global_stdio_init.part.0>:
 8016740:	b510      	push	{r4, lr}
 8016742:	4b0b      	ldr	r3, [pc, #44]	@ (8016770 <global_stdio_init.part.0+0x30>)
 8016744:	4c0b      	ldr	r4, [pc, #44]	@ (8016774 <global_stdio_init.part.0+0x34>)
 8016746:	4a0c      	ldr	r2, [pc, #48]	@ (8016778 <global_stdio_init.part.0+0x38>)
 8016748:	601a      	str	r2, [r3, #0]
 801674a:	4620      	mov	r0, r4
 801674c:	2200      	movs	r2, #0
 801674e:	2104      	movs	r1, #4
 8016750:	f7ff ff94 	bl	801667c <std>
 8016754:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016758:	2201      	movs	r2, #1
 801675a:	2109      	movs	r1, #9
 801675c:	f7ff ff8e 	bl	801667c <std>
 8016760:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016764:	2202      	movs	r2, #2
 8016766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801676a:	2112      	movs	r1, #18
 801676c:	f7ff bf86 	b.w	801667c <std>
 8016770:	240067e0 	.word	0x240067e0
 8016774:	240066a8 	.word	0x240066a8
 8016778:	080166e9 	.word	0x080166e9

0801677c <__sfp_lock_acquire>:
 801677c:	4801      	ldr	r0, [pc, #4]	@ (8016784 <__sfp_lock_acquire+0x8>)
 801677e:	f000 b91a 	b.w	80169b6 <__retarget_lock_acquire_recursive>
 8016782:	bf00      	nop
 8016784:	240067e9 	.word	0x240067e9

08016788 <__sfp_lock_release>:
 8016788:	4801      	ldr	r0, [pc, #4]	@ (8016790 <__sfp_lock_release+0x8>)
 801678a:	f000 b915 	b.w	80169b8 <__retarget_lock_release_recursive>
 801678e:	bf00      	nop
 8016790:	240067e9 	.word	0x240067e9

08016794 <__sinit>:
 8016794:	b510      	push	{r4, lr}
 8016796:	4604      	mov	r4, r0
 8016798:	f7ff fff0 	bl	801677c <__sfp_lock_acquire>
 801679c:	6a23      	ldr	r3, [r4, #32]
 801679e:	b11b      	cbz	r3, 80167a8 <__sinit+0x14>
 80167a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80167a4:	f7ff bff0 	b.w	8016788 <__sfp_lock_release>
 80167a8:	4b04      	ldr	r3, [pc, #16]	@ (80167bc <__sinit+0x28>)
 80167aa:	6223      	str	r3, [r4, #32]
 80167ac:	4b04      	ldr	r3, [pc, #16]	@ (80167c0 <__sinit+0x2c>)
 80167ae:	681b      	ldr	r3, [r3, #0]
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	d1f5      	bne.n	80167a0 <__sinit+0xc>
 80167b4:	f7ff ffc4 	bl	8016740 <global_stdio_init.part.0>
 80167b8:	e7f2      	b.n	80167a0 <__sinit+0xc>
 80167ba:	bf00      	nop
 80167bc:	08016701 	.word	0x08016701
 80167c0:	240067e0 	.word	0x240067e0

080167c4 <_fwalk_sglue>:
 80167c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80167c8:	4607      	mov	r7, r0
 80167ca:	4688      	mov	r8, r1
 80167cc:	4614      	mov	r4, r2
 80167ce:	2600      	movs	r6, #0
 80167d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80167d4:	f1b9 0901 	subs.w	r9, r9, #1
 80167d8:	d505      	bpl.n	80167e6 <_fwalk_sglue+0x22>
 80167da:	6824      	ldr	r4, [r4, #0]
 80167dc:	2c00      	cmp	r4, #0
 80167de:	d1f7      	bne.n	80167d0 <_fwalk_sglue+0xc>
 80167e0:	4630      	mov	r0, r6
 80167e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80167e6:	89ab      	ldrh	r3, [r5, #12]
 80167e8:	2b01      	cmp	r3, #1
 80167ea:	d907      	bls.n	80167fc <_fwalk_sglue+0x38>
 80167ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80167f0:	3301      	adds	r3, #1
 80167f2:	d003      	beq.n	80167fc <_fwalk_sglue+0x38>
 80167f4:	4629      	mov	r1, r5
 80167f6:	4638      	mov	r0, r7
 80167f8:	47c0      	blx	r8
 80167fa:	4306      	orrs	r6, r0
 80167fc:	3568      	adds	r5, #104	@ 0x68
 80167fe:	e7e9      	b.n	80167d4 <_fwalk_sglue+0x10>

08016800 <__sread>:
 8016800:	b510      	push	{r4, lr}
 8016802:	460c      	mov	r4, r1
 8016804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016808:	f000 f886 	bl	8016918 <_read_r>
 801680c:	2800      	cmp	r0, #0
 801680e:	bfab      	itete	ge
 8016810:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016812:	89a3      	ldrhlt	r3, [r4, #12]
 8016814:	181b      	addge	r3, r3, r0
 8016816:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801681a:	bfac      	ite	ge
 801681c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801681e:	81a3      	strhlt	r3, [r4, #12]
 8016820:	bd10      	pop	{r4, pc}

08016822 <__swrite>:
 8016822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016826:	461f      	mov	r7, r3
 8016828:	898b      	ldrh	r3, [r1, #12]
 801682a:	05db      	lsls	r3, r3, #23
 801682c:	4605      	mov	r5, r0
 801682e:	460c      	mov	r4, r1
 8016830:	4616      	mov	r6, r2
 8016832:	d505      	bpl.n	8016840 <__swrite+0x1e>
 8016834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016838:	2302      	movs	r3, #2
 801683a:	2200      	movs	r2, #0
 801683c:	f000 f85a 	bl	80168f4 <_lseek_r>
 8016840:	89a3      	ldrh	r3, [r4, #12]
 8016842:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016846:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801684a:	81a3      	strh	r3, [r4, #12]
 801684c:	4632      	mov	r2, r6
 801684e:	463b      	mov	r3, r7
 8016850:	4628      	mov	r0, r5
 8016852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016856:	f000 b871 	b.w	801693c <_write_r>

0801685a <__sseek>:
 801685a:	b510      	push	{r4, lr}
 801685c:	460c      	mov	r4, r1
 801685e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016862:	f000 f847 	bl	80168f4 <_lseek_r>
 8016866:	1c43      	adds	r3, r0, #1
 8016868:	89a3      	ldrh	r3, [r4, #12]
 801686a:	bf15      	itete	ne
 801686c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801686e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016872:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016876:	81a3      	strheq	r3, [r4, #12]
 8016878:	bf18      	it	ne
 801687a:	81a3      	strhne	r3, [r4, #12]
 801687c:	bd10      	pop	{r4, pc}

0801687e <__sclose>:
 801687e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016882:	f000 b827 	b.w	80168d4 <_close_r>

08016886 <memset>:
 8016886:	4402      	add	r2, r0
 8016888:	4603      	mov	r3, r0
 801688a:	4293      	cmp	r3, r2
 801688c:	d100      	bne.n	8016890 <memset+0xa>
 801688e:	4770      	bx	lr
 8016890:	f803 1b01 	strb.w	r1, [r3], #1
 8016894:	e7f9      	b.n	801688a <memset+0x4>

08016896 <strchr>:
 8016896:	b2c9      	uxtb	r1, r1
 8016898:	4603      	mov	r3, r0
 801689a:	4618      	mov	r0, r3
 801689c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80168a0:	b112      	cbz	r2, 80168a8 <strchr+0x12>
 80168a2:	428a      	cmp	r2, r1
 80168a4:	d1f9      	bne.n	801689a <strchr+0x4>
 80168a6:	4770      	bx	lr
 80168a8:	2900      	cmp	r1, #0
 80168aa:	bf18      	it	ne
 80168ac:	2000      	movne	r0, #0
 80168ae:	4770      	bx	lr

080168b0 <strncmp>:
 80168b0:	b510      	push	{r4, lr}
 80168b2:	b16a      	cbz	r2, 80168d0 <strncmp+0x20>
 80168b4:	3901      	subs	r1, #1
 80168b6:	1884      	adds	r4, r0, r2
 80168b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80168bc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80168c0:	429a      	cmp	r2, r3
 80168c2:	d103      	bne.n	80168cc <strncmp+0x1c>
 80168c4:	42a0      	cmp	r0, r4
 80168c6:	d001      	beq.n	80168cc <strncmp+0x1c>
 80168c8:	2a00      	cmp	r2, #0
 80168ca:	d1f5      	bne.n	80168b8 <strncmp+0x8>
 80168cc:	1ad0      	subs	r0, r2, r3
 80168ce:	bd10      	pop	{r4, pc}
 80168d0:	4610      	mov	r0, r2
 80168d2:	e7fc      	b.n	80168ce <strncmp+0x1e>

080168d4 <_close_r>:
 80168d4:	b538      	push	{r3, r4, r5, lr}
 80168d6:	4d06      	ldr	r5, [pc, #24]	@ (80168f0 <_close_r+0x1c>)
 80168d8:	2300      	movs	r3, #0
 80168da:	4604      	mov	r4, r0
 80168dc:	4608      	mov	r0, r1
 80168de:	602b      	str	r3, [r5, #0]
 80168e0:	f7eb fd1c 	bl	800231c <_close>
 80168e4:	1c43      	adds	r3, r0, #1
 80168e6:	d102      	bne.n	80168ee <_close_r+0x1a>
 80168e8:	682b      	ldr	r3, [r5, #0]
 80168ea:	b103      	cbz	r3, 80168ee <_close_r+0x1a>
 80168ec:	6023      	str	r3, [r4, #0]
 80168ee:	bd38      	pop	{r3, r4, r5, pc}
 80168f0:	240067e4 	.word	0x240067e4

080168f4 <_lseek_r>:
 80168f4:	b538      	push	{r3, r4, r5, lr}
 80168f6:	4d07      	ldr	r5, [pc, #28]	@ (8016914 <_lseek_r+0x20>)
 80168f8:	4604      	mov	r4, r0
 80168fa:	4608      	mov	r0, r1
 80168fc:	4611      	mov	r1, r2
 80168fe:	2200      	movs	r2, #0
 8016900:	602a      	str	r2, [r5, #0]
 8016902:	461a      	mov	r2, r3
 8016904:	f7eb fd31 	bl	800236a <_lseek>
 8016908:	1c43      	adds	r3, r0, #1
 801690a:	d102      	bne.n	8016912 <_lseek_r+0x1e>
 801690c:	682b      	ldr	r3, [r5, #0]
 801690e:	b103      	cbz	r3, 8016912 <_lseek_r+0x1e>
 8016910:	6023      	str	r3, [r4, #0]
 8016912:	bd38      	pop	{r3, r4, r5, pc}
 8016914:	240067e4 	.word	0x240067e4

08016918 <_read_r>:
 8016918:	b538      	push	{r3, r4, r5, lr}
 801691a:	4d07      	ldr	r5, [pc, #28]	@ (8016938 <_read_r+0x20>)
 801691c:	4604      	mov	r4, r0
 801691e:	4608      	mov	r0, r1
 8016920:	4611      	mov	r1, r2
 8016922:	2200      	movs	r2, #0
 8016924:	602a      	str	r2, [r5, #0]
 8016926:	461a      	mov	r2, r3
 8016928:	f7eb fcbf 	bl	80022aa <_read>
 801692c:	1c43      	adds	r3, r0, #1
 801692e:	d102      	bne.n	8016936 <_read_r+0x1e>
 8016930:	682b      	ldr	r3, [r5, #0]
 8016932:	b103      	cbz	r3, 8016936 <_read_r+0x1e>
 8016934:	6023      	str	r3, [r4, #0]
 8016936:	bd38      	pop	{r3, r4, r5, pc}
 8016938:	240067e4 	.word	0x240067e4

0801693c <_write_r>:
 801693c:	b538      	push	{r3, r4, r5, lr}
 801693e:	4d07      	ldr	r5, [pc, #28]	@ (801695c <_write_r+0x20>)
 8016940:	4604      	mov	r4, r0
 8016942:	4608      	mov	r0, r1
 8016944:	4611      	mov	r1, r2
 8016946:	2200      	movs	r2, #0
 8016948:	602a      	str	r2, [r5, #0]
 801694a:	461a      	mov	r2, r3
 801694c:	f7eb fcca 	bl	80022e4 <_write>
 8016950:	1c43      	adds	r3, r0, #1
 8016952:	d102      	bne.n	801695a <_write_r+0x1e>
 8016954:	682b      	ldr	r3, [r5, #0]
 8016956:	b103      	cbz	r3, 801695a <_write_r+0x1e>
 8016958:	6023      	str	r3, [r4, #0]
 801695a:	bd38      	pop	{r3, r4, r5, pc}
 801695c:	240067e4 	.word	0x240067e4

08016960 <__errno>:
 8016960:	4b01      	ldr	r3, [pc, #4]	@ (8016968 <__errno+0x8>)
 8016962:	6818      	ldr	r0, [r3, #0]
 8016964:	4770      	bx	lr
 8016966:	bf00      	nop
 8016968:	24000240 	.word	0x24000240

0801696c <__libc_init_array>:
 801696c:	b570      	push	{r4, r5, r6, lr}
 801696e:	4d0d      	ldr	r5, [pc, #52]	@ (80169a4 <__libc_init_array+0x38>)
 8016970:	4c0d      	ldr	r4, [pc, #52]	@ (80169a8 <__libc_init_array+0x3c>)
 8016972:	1b64      	subs	r4, r4, r5
 8016974:	10a4      	asrs	r4, r4, #2
 8016976:	2600      	movs	r6, #0
 8016978:	42a6      	cmp	r6, r4
 801697a:	d109      	bne.n	8016990 <__libc_init_array+0x24>
 801697c:	4d0b      	ldr	r5, [pc, #44]	@ (80169ac <__libc_init_array+0x40>)
 801697e:	4c0c      	ldr	r4, [pc, #48]	@ (80169b0 <__libc_init_array+0x44>)
 8016980:	f001 ff9a 	bl	80188b8 <_init>
 8016984:	1b64      	subs	r4, r4, r5
 8016986:	10a4      	asrs	r4, r4, #2
 8016988:	2600      	movs	r6, #0
 801698a:	42a6      	cmp	r6, r4
 801698c:	d105      	bne.n	801699a <__libc_init_array+0x2e>
 801698e:	bd70      	pop	{r4, r5, r6, pc}
 8016990:	f855 3b04 	ldr.w	r3, [r5], #4
 8016994:	4798      	blx	r3
 8016996:	3601      	adds	r6, #1
 8016998:	e7ee      	b.n	8016978 <__libc_init_array+0xc>
 801699a:	f855 3b04 	ldr.w	r3, [r5], #4
 801699e:	4798      	blx	r3
 80169a0:	3601      	adds	r6, #1
 80169a2:	e7f2      	b.n	801698a <__libc_init_array+0x1e>
 80169a4:	08019668 	.word	0x08019668
 80169a8:	08019668 	.word	0x08019668
 80169ac:	08019668 	.word	0x08019668
 80169b0:	0801966c 	.word	0x0801966c

080169b4 <__retarget_lock_init_recursive>:
 80169b4:	4770      	bx	lr

080169b6 <__retarget_lock_acquire_recursive>:
 80169b6:	4770      	bx	lr

080169b8 <__retarget_lock_release_recursive>:
 80169b8:	4770      	bx	lr

080169ba <memcpy>:
 80169ba:	440a      	add	r2, r1
 80169bc:	4291      	cmp	r1, r2
 80169be:	f100 33ff 	add.w	r3, r0, #4294967295
 80169c2:	d100      	bne.n	80169c6 <memcpy+0xc>
 80169c4:	4770      	bx	lr
 80169c6:	b510      	push	{r4, lr}
 80169c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80169cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80169d0:	4291      	cmp	r1, r2
 80169d2:	d1f9      	bne.n	80169c8 <memcpy+0xe>
 80169d4:	bd10      	pop	{r4, pc}
	...

080169d8 <nan>:
 80169d8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80169e0 <nan+0x8>
 80169dc:	4770      	bx	lr
 80169de:	bf00      	nop
 80169e0:	00000000 	.word	0x00000000
 80169e4:	7ff80000 	.word	0x7ff80000

080169e8 <_free_r>:
 80169e8:	b538      	push	{r3, r4, r5, lr}
 80169ea:	4605      	mov	r5, r0
 80169ec:	2900      	cmp	r1, #0
 80169ee:	d041      	beq.n	8016a74 <_free_r+0x8c>
 80169f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80169f4:	1f0c      	subs	r4, r1, #4
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	bfb8      	it	lt
 80169fa:	18e4      	addlt	r4, r4, r3
 80169fc:	f000 fc2c 	bl	8017258 <__malloc_lock>
 8016a00:	4a1d      	ldr	r2, [pc, #116]	@ (8016a78 <_free_r+0x90>)
 8016a02:	6813      	ldr	r3, [r2, #0]
 8016a04:	b933      	cbnz	r3, 8016a14 <_free_r+0x2c>
 8016a06:	6063      	str	r3, [r4, #4]
 8016a08:	6014      	str	r4, [r2, #0]
 8016a0a:	4628      	mov	r0, r5
 8016a0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016a10:	f000 bc28 	b.w	8017264 <__malloc_unlock>
 8016a14:	42a3      	cmp	r3, r4
 8016a16:	d908      	bls.n	8016a2a <_free_r+0x42>
 8016a18:	6820      	ldr	r0, [r4, #0]
 8016a1a:	1821      	adds	r1, r4, r0
 8016a1c:	428b      	cmp	r3, r1
 8016a1e:	bf01      	itttt	eq
 8016a20:	6819      	ldreq	r1, [r3, #0]
 8016a22:	685b      	ldreq	r3, [r3, #4]
 8016a24:	1809      	addeq	r1, r1, r0
 8016a26:	6021      	streq	r1, [r4, #0]
 8016a28:	e7ed      	b.n	8016a06 <_free_r+0x1e>
 8016a2a:	461a      	mov	r2, r3
 8016a2c:	685b      	ldr	r3, [r3, #4]
 8016a2e:	b10b      	cbz	r3, 8016a34 <_free_r+0x4c>
 8016a30:	42a3      	cmp	r3, r4
 8016a32:	d9fa      	bls.n	8016a2a <_free_r+0x42>
 8016a34:	6811      	ldr	r1, [r2, #0]
 8016a36:	1850      	adds	r0, r2, r1
 8016a38:	42a0      	cmp	r0, r4
 8016a3a:	d10b      	bne.n	8016a54 <_free_r+0x6c>
 8016a3c:	6820      	ldr	r0, [r4, #0]
 8016a3e:	4401      	add	r1, r0
 8016a40:	1850      	adds	r0, r2, r1
 8016a42:	4283      	cmp	r3, r0
 8016a44:	6011      	str	r1, [r2, #0]
 8016a46:	d1e0      	bne.n	8016a0a <_free_r+0x22>
 8016a48:	6818      	ldr	r0, [r3, #0]
 8016a4a:	685b      	ldr	r3, [r3, #4]
 8016a4c:	6053      	str	r3, [r2, #4]
 8016a4e:	4408      	add	r0, r1
 8016a50:	6010      	str	r0, [r2, #0]
 8016a52:	e7da      	b.n	8016a0a <_free_r+0x22>
 8016a54:	d902      	bls.n	8016a5c <_free_r+0x74>
 8016a56:	230c      	movs	r3, #12
 8016a58:	602b      	str	r3, [r5, #0]
 8016a5a:	e7d6      	b.n	8016a0a <_free_r+0x22>
 8016a5c:	6820      	ldr	r0, [r4, #0]
 8016a5e:	1821      	adds	r1, r4, r0
 8016a60:	428b      	cmp	r3, r1
 8016a62:	bf04      	itt	eq
 8016a64:	6819      	ldreq	r1, [r3, #0]
 8016a66:	685b      	ldreq	r3, [r3, #4]
 8016a68:	6063      	str	r3, [r4, #4]
 8016a6a:	bf04      	itt	eq
 8016a6c:	1809      	addeq	r1, r1, r0
 8016a6e:	6021      	streq	r1, [r4, #0]
 8016a70:	6054      	str	r4, [r2, #4]
 8016a72:	e7ca      	b.n	8016a0a <_free_r+0x22>
 8016a74:	bd38      	pop	{r3, r4, r5, pc}
 8016a76:	bf00      	nop
 8016a78:	240067f0 	.word	0x240067f0

08016a7c <rshift>:
 8016a7c:	6903      	ldr	r3, [r0, #16]
 8016a7e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8016a82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016a86:	ea4f 1261 	mov.w	r2, r1, asr #5
 8016a8a:	f100 0414 	add.w	r4, r0, #20
 8016a8e:	dd45      	ble.n	8016b1c <rshift+0xa0>
 8016a90:	f011 011f 	ands.w	r1, r1, #31
 8016a94:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8016a98:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8016a9c:	d10c      	bne.n	8016ab8 <rshift+0x3c>
 8016a9e:	f100 0710 	add.w	r7, r0, #16
 8016aa2:	4629      	mov	r1, r5
 8016aa4:	42b1      	cmp	r1, r6
 8016aa6:	d334      	bcc.n	8016b12 <rshift+0x96>
 8016aa8:	1a9b      	subs	r3, r3, r2
 8016aaa:	009b      	lsls	r3, r3, #2
 8016aac:	1eea      	subs	r2, r5, #3
 8016aae:	4296      	cmp	r6, r2
 8016ab0:	bf38      	it	cc
 8016ab2:	2300      	movcc	r3, #0
 8016ab4:	4423      	add	r3, r4
 8016ab6:	e015      	b.n	8016ae4 <rshift+0x68>
 8016ab8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8016abc:	f1c1 0820 	rsb	r8, r1, #32
 8016ac0:	40cf      	lsrs	r7, r1
 8016ac2:	f105 0e04 	add.w	lr, r5, #4
 8016ac6:	46a1      	mov	r9, r4
 8016ac8:	4576      	cmp	r6, lr
 8016aca:	46f4      	mov	ip, lr
 8016acc:	d815      	bhi.n	8016afa <rshift+0x7e>
 8016ace:	1a9a      	subs	r2, r3, r2
 8016ad0:	0092      	lsls	r2, r2, #2
 8016ad2:	3a04      	subs	r2, #4
 8016ad4:	3501      	adds	r5, #1
 8016ad6:	42ae      	cmp	r6, r5
 8016ad8:	bf38      	it	cc
 8016ada:	2200      	movcc	r2, #0
 8016adc:	18a3      	adds	r3, r4, r2
 8016ade:	50a7      	str	r7, [r4, r2]
 8016ae0:	b107      	cbz	r7, 8016ae4 <rshift+0x68>
 8016ae2:	3304      	adds	r3, #4
 8016ae4:	1b1a      	subs	r2, r3, r4
 8016ae6:	42a3      	cmp	r3, r4
 8016ae8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016aec:	bf08      	it	eq
 8016aee:	2300      	moveq	r3, #0
 8016af0:	6102      	str	r2, [r0, #16]
 8016af2:	bf08      	it	eq
 8016af4:	6143      	streq	r3, [r0, #20]
 8016af6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016afa:	f8dc c000 	ldr.w	ip, [ip]
 8016afe:	fa0c fc08 	lsl.w	ip, ip, r8
 8016b02:	ea4c 0707 	orr.w	r7, ip, r7
 8016b06:	f849 7b04 	str.w	r7, [r9], #4
 8016b0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8016b0e:	40cf      	lsrs	r7, r1
 8016b10:	e7da      	b.n	8016ac8 <rshift+0x4c>
 8016b12:	f851 cb04 	ldr.w	ip, [r1], #4
 8016b16:	f847 cf04 	str.w	ip, [r7, #4]!
 8016b1a:	e7c3      	b.n	8016aa4 <rshift+0x28>
 8016b1c:	4623      	mov	r3, r4
 8016b1e:	e7e1      	b.n	8016ae4 <rshift+0x68>

08016b20 <__hexdig_fun>:
 8016b20:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8016b24:	2b09      	cmp	r3, #9
 8016b26:	d802      	bhi.n	8016b2e <__hexdig_fun+0xe>
 8016b28:	3820      	subs	r0, #32
 8016b2a:	b2c0      	uxtb	r0, r0
 8016b2c:	4770      	bx	lr
 8016b2e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8016b32:	2b05      	cmp	r3, #5
 8016b34:	d801      	bhi.n	8016b3a <__hexdig_fun+0x1a>
 8016b36:	3847      	subs	r0, #71	@ 0x47
 8016b38:	e7f7      	b.n	8016b2a <__hexdig_fun+0xa>
 8016b3a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8016b3e:	2b05      	cmp	r3, #5
 8016b40:	d801      	bhi.n	8016b46 <__hexdig_fun+0x26>
 8016b42:	3827      	subs	r0, #39	@ 0x27
 8016b44:	e7f1      	b.n	8016b2a <__hexdig_fun+0xa>
 8016b46:	2000      	movs	r0, #0
 8016b48:	4770      	bx	lr
	...

08016b4c <__gethex>:
 8016b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b50:	b085      	sub	sp, #20
 8016b52:	468a      	mov	sl, r1
 8016b54:	9302      	str	r3, [sp, #8]
 8016b56:	680b      	ldr	r3, [r1, #0]
 8016b58:	9001      	str	r0, [sp, #4]
 8016b5a:	4690      	mov	r8, r2
 8016b5c:	1c9c      	adds	r4, r3, #2
 8016b5e:	46a1      	mov	r9, r4
 8016b60:	f814 0b01 	ldrb.w	r0, [r4], #1
 8016b64:	2830      	cmp	r0, #48	@ 0x30
 8016b66:	d0fa      	beq.n	8016b5e <__gethex+0x12>
 8016b68:	eba9 0303 	sub.w	r3, r9, r3
 8016b6c:	f1a3 0b02 	sub.w	fp, r3, #2
 8016b70:	f7ff ffd6 	bl	8016b20 <__hexdig_fun>
 8016b74:	4605      	mov	r5, r0
 8016b76:	2800      	cmp	r0, #0
 8016b78:	d168      	bne.n	8016c4c <__gethex+0x100>
 8016b7a:	49a0      	ldr	r1, [pc, #640]	@ (8016dfc <__gethex+0x2b0>)
 8016b7c:	2201      	movs	r2, #1
 8016b7e:	4648      	mov	r0, r9
 8016b80:	f7ff fe96 	bl	80168b0 <strncmp>
 8016b84:	4607      	mov	r7, r0
 8016b86:	2800      	cmp	r0, #0
 8016b88:	d167      	bne.n	8016c5a <__gethex+0x10e>
 8016b8a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8016b8e:	4626      	mov	r6, r4
 8016b90:	f7ff ffc6 	bl	8016b20 <__hexdig_fun>
 8016b94:	2800      	cmp	r0, #0
 8016b96:	d062      	beq.n	8016c5e <__gethex+0x112>
 8016b98:	4623      	mov	r3, r4
 8016b9a:	7818      	ldrb	r0, [r3, #0]
 8016b9c:	2830      	cmp	r0, #48	@ 0x30
 8016b9e:	4699      	mov	r9, r3
 8016ba0:	f103 0301 	add.w	r3, r3, #1
 8016ba4:	d0f9      	beq.n	8016b9a <__gethex+0x4e>
 8016ba6:	f7ff ffbb 	bl	8016b20 <__hexdig_fun>
 8016baa:	fab0 f580 	clz	r5, r0
 8016bae:	096d      	lsrs	r5, r5, #5
 8016bb0:	f04f 0b01 	mov.w	fp, #1
 8016bb4:	464a      	mov	r2, r9
 8016bb6:	4616      	mov	r6, r2
 8016bb8:	3201      	adds	r2, #1
 8016bba:	7830      	ldrb	r0, [r6, #0]
 8016bbc:	f7ff ffb0 	bl	8016b20 <__hexdig_fun>
 8016bc0:	2800      	cmp	r0, #0
 8016bc2:	d1f8      	bne.n	8016bb6 <__gethex+0x6a>
 8016bc4:	498d      	ldr	r1, [pc, #564]	@ (8016dfc <__gethex+0x2b0>)
 8016bc6:	2201      	movs	r2, #1
 8016bc8:	4630      	mov	r0, r6
 8016bca:	f7ff fe71 	bl	80168b0 <strncmp>
 8016bce:	2800      	cmp	r0, #0
 8016bd0:	d13f      	bne.n	8016c52 <__gethex+0x106>
 8016bd2:	b944      	cbnz	r4, 8016be6 <__gethex+0x9a>
 8016bd4:	1c74      	adds	r4, r6, #1
 8016bd6:	4622      	mov	r2, r4
 8016bd8:	4616      	mov	r6, r2
 8016bda:	3201      	adds	r2, #1
 8016bdc:	7830      	ldrb	r0, [r6, #0]
 8016bde:	f7ff ff9f 	bl	8016b20 <__hexdig_fun>
 8016be2:	2800      	cmp	r0, #0
 8016be4:	d1f8      	bne.n	8016bd8 <__gethex+0x8c>
 8016be6:	1ba4      	subs	r4, r4, r6
 8016be8:	00a7      	lsls	r7, r4, #2
 8016bea:	7833      	ldrb	r3, [r6, #0]
 8016bec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8016bf0:	2b50      	cmp	r3, #80	@ 0x50
 8016bf2:	d13e      	bne.n	8016c72 <__gethex+0x126>
 8016bf4:	7873      	ldrb	r3, [r6, #1]
 8016bf6:	2b2b      	cmp	r3, #43	@ 0x2b
 8016bf8:	d033      	beq.n	8016c62 <__gethex+0x116>
 8016bfa:	2b2d      	cmp	r3, #45	@ 0x2d
 8016bfc:	d034      	beq.n	8016c68 <__gethex+0x11c>
 8016bfe:	1c71      	adds	r1, r6, #1
 8016c00:	2400      	movs	r4, #0
 8016c02:	7808      	ldrb	r0, [r1, #0]
 8016c04:	f7ff ff8c 	bl	8016b20 <__hexdig_fun>
 8016c08:	1e43      	subs	r3, r0, #1
 8016c0a:	b2db      	uxtb	r3, r3
 8016c0c:	2b18      	cmp	r3, #24
 8016c0e:	d830      	bhi.n	8016c72 <__gethex+0x126>
 8016c10:	f1a0 0210 	sub.w	r2, r0, #16
 8016c14:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016c18:	f7ff ff82 	bl	8016b20 <__hexdig_fun>
 8016c1c:	f100 3cff 	add.w	ip, r0, #4294967295
 8016c20:	fa5f fc8c 	uxtb.w	ip, ip
 8016c24:	f1bc 0f18 	cmp.w	ip, #24
 8016c28:	f04f 030a 	mov.w	r3, #10
 8016c2c:	d91e      	bls.n	8016c6c <__gethex+0x120>
 8016c2e:	b104      	cbz	r4, 8016c32 <__gethex+0xe6>
 8016c30:	4252      	negs	r2, r2
 8016c32:	4417      	add	r7, r2
 8016c34:	f8ca 1000 	str.w	r1, [sl]
 8016c38:	b1ed      	cbz	r5, 8016c76 <__gethex+0x12a>
 8016c3a:	f1bb 0f00 	cmp.w	fp, #0
 8016c3e:	bf0c      	ite	eq
 8016c40:	2506      	moveq	r5, #6
 8016c42:	2500      	movne	r5, #0
 8016c44:	4628      	mov	r0, r5
 8016c46:	b005      	add	sp, #20
 8016c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c4c:	2500      	movs	r5, #0
 8016c4e:	462c      	mov	r4, r5
 8016c50:	e7b0      	b.n	8016bb4 <__gethex+0x68>
 8016c52:	2c00      	cmp	r4, #0
 8016c54:	d1c7      	bne.n	8016be6 <__gethex+0x9a>
 8016c56:	4627      	mov	r7, r4
 8016c58:	e7c7      	b.n	8016bea <__gethex+0x9e>
 8016c5a:	464e      	mov	r6, r9
 8016c5c:	462f      	mov	r7, r5
 8016c5e:	2501      	movs	r5, #1
 8016c60:	e7c3      	b.n	8016bea <__gethex+0x9e>
 8016c62:	2400      	movs	r4, #0
 8016c64:	1cb1      	adds	r1, r6, #2
 8016c66:	e7cc      	b.n	8016c02 <__gethex+0xb6>
 8016c68:	2401      	movs	r4, #1
 8016c6a:	e7fb      	b.n	8016c64 <__gethex+0x118>
 8016c6c:	fb03 0002 	mla	r0, r3, r2, r0
 8016c70:	e7ce      	b.n	8016c10 <__gethex+0xc4>
 8016c72:	4631      	mov	r1, r6
 8016c74:	e7de      	b.n	8016c34 <__gethex+0xe8>
 8016c76:	eba6 0309 	sub.w	r3, r6, r9
 8016c7a:	3b01      	subs	r3, #1
 8016c7c:	4629      	mov	r1, r5
 8016c7e:	2b07      	cmp	r3, #7
 8016c80:	dc0a      	bgt.n	8016c98 <__gethex+0x14c>
 8016c82:	9801      	ldr	r0, [sp, #4]
 8016c84:	f000 faf4 	bl	8017270 <_Balloc>
 8016c88:	4604      	mov	r4, r0
 8016c8a:	b940      	cbnz	r0, 8016c9e <__gethex+0x152>
 8016c8c:	4b5c      	ldr	r3, [pc, #368]	@ (8016e00 <__gethex+0x2b4>)
 8016c8e:	4602      	mov	r2, r0
 8016c90:	21e4      	movs	r1, #228	@ 0xe4
 8016c92:	485c      	ldr	r0, [pc, #368]	@ (8016e04 <__gethex+0x2b8>)
 8016c94:	f001 f864 	bl	8017d60 <__assert_func>
 8016c98:	3101      	adds	r1, #1
 8016c9a:	105b      	asrs	r3, r3, #1
 8016c9c:	e7ef      	b.n	8016c7e <__gethex+0x132>
 8016c9e:	f100 0a14 	add.w	sl, r0, #20
 8016ca2:	2300      	movs	r3, #0
 8016ca4:	4655      	mov	r5, sl
 8016ca6:	469b      	mov	fp, r3
 8016ca8:	45b1      	cmp	r9, r6
 8016caa:	d337      	bcc.n	8016d1c <__gethex+0x1d0>
 8016cac:	f845 bb04 	str.w	fp, [r5], #4
 8016cb0:	eba5 050a 	sub.w	r5, r5, sl
 8016cb4:	10ad      	asrs	r5, r5, #2
 8016cb6:	6125      	str	r5, [r4, #16]
 8016cb8:	4658      	mov	r0, fp
 8016cba:	f000 fbcb 	bl	8017454 <__hi0bits>
 8016cbe:	016d      	lsls	r5, r5, #5
 8016cc0:	f8d8 6000 	ldr.w	r6, [r8]
 8016cc4:	1a2d      	subs	r5, r5, r0
 8016cc6:	42b5      	cmp	r5, r6
 8016cc8:	dd54      	ble.n	8016d74 <__gethex+0x228>
 8016cca:	1bad      	subs	r5, r5, r6
 8016ccc:	4629      	mov	r1, r5
 8016cce:	4620      	mov	r0, r4
 8016cd0:	f000 ff5c 	bl	8017b8c <__any_on>
 8016cd4:	4681      	mov	r9, r0
 8016cd6:	b178      	cbz	r0, 8016cf8 <__gethex+0x1ac>
 8016cd8:	1e6b      	subs	r3, r5, #1
 8016cda:	1159      	asrs	r1, r3, #5
 8016cdc:	f003 021f 	and.w	r2, r3, #31
 8016ce0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8016ce4:	f04f 0901 	mov.w	r9, #1
 8016ce8:	fa09 f202 	lsl.w	r2, r9, r2
 8016cec:	420a      	tst	r2, r1
 8016cee:	d003      	beq.n	8016cf8 <__gethex+0x1ac>
 8016cf0:	454b      	cmp	r3, r9
 8016cf2:	dc36      	bgt.n	8016d62 <__gethex+0x216>
 8016cf4:	f04f 0902 	mov.w	r9, #2
 8016cf8:	4629      	mov	r1, r5
 8016cfa:	4620      	mov	r0, r4
 8016cfc:	f7ff febe 	bl	8016a7c <rshift>
 8016d00:	442f      	add	r7, r5
 8016d02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016d06:	42bb      	cmp	r3, r7
 8016d08:	da42      	bge.n	8016d90 <__gethex+0x244>
 8016d0a:	9801      	ldr	r0, [sp, #4]
 8016d0c:	4621      	mov	r1, r4
 8016d0e:	f000 faef 	bl	80172f0 <_Bfree>
 8016d12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016d14:	2300      	movs	r3, #0
 8016d16:	6013      	str	r3, [r2, #0]
 8016d18:	25a3      	movs	r5, #163	@ 0xa3
 8016d1a:	e793      	b.n	8016c44 <__gethex+0xf8>
 8016d1c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8016d20:	2a2e      	cmp	r2, #46	@ 0x2e
 8016d22:	d012      	beq.n	8016d4a <__gethex+0x1fe>
 8016d24:	2b20      	cmp	r3, #32
 8016d26:	d104      	bne.n	8016d32 <__gethex+0x1e6>
 8016d28:	f845 bb04 	str.w	fp, [r5], #4
 8016d2c:	f04f 0b00 	mov.w	fp, #0
 8016d30:	465b      	mov	r3, fp
 8016d32:	7830      	ldrb	r0, [r6, #0]
 8016d34:	9303      	str	r3, [sp, #12]
 8016d36:	f7ff fef3 	bl	8016b20 <__hexdig_fun>
 8016d3a:	9b03      	ldr	r3, [sp, #12]
 8016d3c:	f000 000f 	and.w	r0, r0, #15
 8016d40:	4098      	lsls	r0, r3
 8016d42:	ea4b 0b00 	orr.w	fp, fp, r0
 8016d46:	3304      	adds	r3, #4
 8016d48:	e7ae      	b.n	8016ca8 <__gethex+0x15c>
 8016d4a:	45b1      	cmp	r9, r6
 8016d4c:	d8ea      	bhi.n	8016d24 <__gethex+0x1d8>
 8016d4e:	492b      	ldr	r1, [pc, #172]	@ (8016dfc <__gethex+0x2b0>)
 8016d50:	9303      	str	r3, [sp, #12]
 8016d52:	2201      	movs	r2, #1
 8016d54:	4630      	mov	r0, r6
 8016d56:	f7ff fdab 	bl	80168b0 <strncmp>
 8016d5a:	9b03      	ldr	r3, [sp, #12]
 8016d5c:	2800      	cmp	r0, #0
 8016d5e:	d1e1      	bne.n	8016d24 <__gethex+0x1d8>
 8016d60:	e7a2      	b.n	8016ca8 <__gethex+0x15c>
 8016d62:	1ea9      	subs	r1, r5, #2
 8016d64:	4620      	mov	r0, r4
 8016d66:	f000 ff11 	bl	8017b8c <__any_on>
 8016d6a:	2800      	cmp	r0, #0
 8016d6c:	d0c2      	beq.n	8016cf4 <__gethex+0x1a8>
 8016d6e:	f04f 0903 	mov.w	r9, #3
 8016d72:	e7c1      	b.n	8016cf8 <__gethex+0x1ac>
 8016d74:	da09      	bge.n	8016d8a <__gethex+0x23e>
 8016d76:	1b75      	subs	r5, r6, r5
 8016d78:	4621      	mov	r1, r4
 8016d7a:	9801      	ldr	r0, [sp, #4]
 8016d7c:	462a      	mov	r2, r5
 8016d7e:	f000 fccf 	bl	8017720 <__lshift>
 8016d82:	1b7f      	subs	r7, r7, r5
 8016d84:	4604      	mov	r4, r0
 8016d86:	f100 0a14 	add.w	sl, r0, #20
 8016d8a:	f04f 0900 	mov.w	r9, #0
 8016d8e:	e7b8      	b.n	8016d02 <__gethex+0x1b6>
 8016d90:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8016d94:	42bd      	cmp	r5, r7
 8016d96:	dd6f      	ble.n	8016e78 <__gethex+0x32c>
 8016d98:	1bed      	subs	r5, r5, r7
 8016d9a:	42ae      	cmp	r6, r5
 8016d9c:	dc34      	bgt.n	8016e08 <__gethex+0x2bc>
 8016d9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016da2:	2b02      	cmp	r3, #2
 8016da4:	d022      	beq.n	8016dec <__gethex+0x2a0>
 8016da6:	2b03      	cmp	r3, #3
 8016da8:	d024      	beq.n	8016df4 <__gethex+0x2a8>
 8016daa:	2b01      	cmp	r3, #1
 8016dac:	d115      	bne.n	8016dda <__gethex+0x28e>
 8016dae:	42ae      	cmp	r6, r5
 8016db0:	d113      	bne.n	8016dda <__gethex+0x28e>
 8016db2:	2e01      	cmp	r6, #1
 8016db4:	d10b      	bne.n	8016dce <__gethex+0x282>
 8016db6:	9a02      	ldr	r2, [sp, #8]
 8016db8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016dbc:	6013      	str	r3, [r2, #0]
 8016dbe:	2301      	movs	r3, #1
 8016dc0:	6123      	str	r3, [r4, #16]
 8016dc2:	f8ca 3000 	str.w	r3, [sl]
 8016dc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016dc8:	2562      	movs	r5, #98	@ 0x62
 8016dca:	601c      	str	r4, [r3, #0]
 8016dcc:	e73a      	b.n	8016c44 <__gethex+0xf8>
 8016dce:	1e71      	subs	r1, r6, #1
 8016dd0:	4620      	mov	r0, r4
 8016dd2:	f000 fedb 	bl	8017b8c <__any_on>
 8016dd6:	2800      	cmp	r0, #0
 8016dd8:	d1ed      	bne.n	8016db6 <__gethex+0x26a>
 8016dda:	9801      	ldr	r0, [sp, #4]
 8016ddc:	4621      	mov	r1, r4
 8016dde:	f000 fa87 	bl	80172f0 <_Bfree>
 8016de2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016de4:	2300      	movs	r3, #0
 8016de6:	6013      	str	r3, [r2, #0]
 8016de8:	2550      	movs	r5, #80	@ 0x50
 8016dea:	e72b      	b.n	8016c44 <__gethex+0xf8>
 8016dec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d1f3      	bne.n	8016dda <__gethex+0x28e>
 8016df2:	e7e0      	b.n	8016db6 <__gethex+0x26a>
 8016df4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	d1dd      	bne.n	8016db6 <__gethex+0x26a>
 8016dfa:	e7ee      	b.n	8016dda <__gethex+0x28e>
 8016dfc:	08018a14 	.word	0x08018a14
 8016e00:	08018b81 	.word	0x08018b81
 8016e04:	08018b92 	.word	0x08018b92
 8016e08:	1e6f      	subs	r7, r5, #1
 8016e0a:	f1b9 0f00 	cmp.w	r9, #0
 8016e0e:	d130      	bne.n	8016e72 <__gethex+0x326>
 8016e10:	b127      	cbz	r7, 8016e1c <__gethex+0x2d0>
 8016e12:	4639      	mov	r1, r7
 8016e14:	4620      	mov	r0, r4
 8016e16:	f000 feb9 	bl	8017b8c <__any_on>
 8016e1a:	4681      	mov	r9, r0
 8016e1c:	117a      	asrs	r2, r7, #5
 8016e1e:	2301      	movs	r3, #1
 8016e20:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8016e24:	f007 071f 	and.w	r7, r7, #31
 8016e28:	40bb      	lsls	r3, r7
 8016e2a:	4213      	tst	r3, r2
 8016e2c:	4629      	mov	r1, r5
 8016e2e:	4620      	mov	r0, r4
 8016e30:	bf18      	it	ne
 8016e32:	f049 0902 	orrne.w	r9, r9, #2
 8016e36:	f7ff fe21 	bl	8016a7c <rshift>
 8016e3a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8016e3e:	1b76      	subs	r6, r6, r5
 8016e40:	2502      	movs	r5, #2
 8016e42:	f1b9 0f00 	cmp.w	r9, #0
 8016e46:	d047      	beq.n	8016ed8 <__gethex+0x38c>
 8016e48:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016e4c:	2b02      	cmp	r3, #2
 8016e4e:	d015      	beq.n	8016e7c <__gethex+0x330>
 8016e50:	2b03      	cmp	r3, #3
 8016e52:	d017      	beq.n	8016e84 <__gethex+0x338>
 8016e54:	2b01      	cmp	r3, #1
 8016e56:	d109      	bne.n	8016e6c <__gethex+0x320>
 8016e58:	f019 0f02 	tst.w	r9, #2
 8016e5c:	d006      	beq.n	8016e6c <__gethex+0x320>
 8016e5e:	f8da 3000 	ldr.w	r3, [sl]
 8016e62:	ea49 0903 	orr.w	r9, r9, r3
 8016e66:	f019 0f01 	tst.w	r9, #1
 8016e6a:	d10e      	bne.n	8016e8a <__gethex+0x33e>
 8016e6c:	f045 0510 	orr.w	r5, r5, #16
 8016e70:	e032      	b.n	8016ed8 <__gethex+0x38c>
 8016e72:	f04f 0901 	mov.w	r9, #1
 8016e76:	e7d1      	b.n	8016e1c <__gethex+0x2d0>
 8016e78:	2501      	movs	r5, #1
 8016e7a:	e7e2      	b.n	8016e42 <__gethex+0x2f6>
 8016e7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016e7e:	f1c3 0301 	rsb	r3, r3, #1
 8016e82:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016e84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016e86:	2b00      	cmp	r3, #0
 8016e88:	d0f0      	beq.n	8016e6c <__gethex+0x320>
 8016e8a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8016e8e:	f104 0314 	add.w	r3, r4, #20
 8016e92:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8016e96:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8016e9a:	f04f 0c00 	mov.w	ip, #0
 8016e9e:	4618      	mov	r0, r3
 8016ea0:	f853 2b04 	ldr.w	r2, [r3], #4
 8016ea4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8016ea8:	d01b      	beq.n	8016ee2 <__gethex+0x396>
 8016eaa:	3201      	adds	r2, #1
 8016eac:	6002      	str	r2, [r0, #0]
 8016eae:	2d02      	cmp	r5, #2
 8016eb0:	f104 0314 	add.w	r3, r4, #20
 8016eb4:	d13c      	bne.n	8016f30 <__gethex+0x3e4>
 8016eb6:	f8d8 2000 	ldr.w	r2, [r8]
 8016eba:	3a01      	subs	r2, #1
 8016ebc:	42b2      	cmp	r2, r6
 8016ebe:	d109      	bne.n	8016ed4 <__gethex+0x388>
 8016ec0:	1171      	asrs	r1, r6, #5
 8016ec2:	2201      	movs	r2, #1
 8016ec4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016ec8:	f006 061f 	and.w	r6, r6, #31
 8016ecc:	fa02 f606 	lsl.w	r6, r2, r6
 8016ed0:	421e      	tst	r6, r3
 8016ed2:	d13a      	bne.n	8016f4a <__gethex+0x3fe>
 8016ed4:	f045 0520 	orr.w	r5, r5, #32
 8016ed8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016eda:	601c      	str	r4, [r3, #0]
 8016edc:	9b02      	ldr	r3, [sp, #8]
 8016ede:	601f      	str	r7, [r3, #0]
 8016ee0:	e6b0      	b.n	8016c44 <__gethex+0xf8>
 8016ee2:	4299      	cmp	r1, r3
 8016ee4:	f843 cc04 	str.w	ip, [r3, #-4]
 8016ee8:	d8d9      	bhi.n	8016e9e <__gethex+0x352>
 8016eea:	68a3      	ldr	r3, [r4, #8]
 8016eec:	459b      	cmp	fp, r3
 8016eee:	db17      	blt.n	8016f20 <__gethex+0x3d4>
 8016ef0:	6861      	ldr	r1, [r4, #4]
 8016ef2:	9801      	ldr	r0, [sp, #4]
 8016ef4:	3101      	adds	r1, #1
 8016ef6:	f000 f9bb 	bl	8017270 <_Balloc>
 8016efa:	4681      	mov	r9, r0
 8016efc:	b918      	cbnz	r0, 8016f06 <__gethex+0x3ba>
 8016efe:	4b1a      	ldr	r3, [pc, #104]	@ (8016f68 <__gethex+0x41c>)
 8016f00:	4602      	mov	r2, r0
 8016f02:	2184      	movs	r1, #132	@ 0x84
 8016f04:	e6c5      	b.n	8016c92 <__gethex+0x146>
 8016f06:	6922      	ldr	r2, [r4, #16]
 8016f08:	3202      	adds	r2, #2
 8016f0a:	f104 010c 	add.w	r1, r4, #12
 8016f0e:	0092      	lsls	r2, r2, #2
 8016f10:	300c      	adds	r0, #12
 8016f12:	f7ff fd52 	bl	80169ba <memcpy>
 8016f16:	4621      	mov	r1, r4
 8016f18:	9801      	ldr	r0, [sp, #4]
 8016f1a:	f000 f9e9 	bl	80172f0 <_Bfree>
 8016f1e:	464c      	mov	r4, r9
 8016f20:	6923      	ldr	r3, [r4, #16]
 8016f22:	1c5a      	adds	r2, r3, #1
 8016f24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016f28:	6122      	str	r2, [r4, #16]
 8016f2a:	2201      	movs	r2, #1
 8016f2c:	615a      	str	r2, [r3, #20]
 8016f2e:	e7be      	b.n	8016eae <__gethex+0x362>
 8016f30:	6922      	ldr	r2, [r4, #16]
 8016f32:	455a      	cmp	r2, fp
 8016f34:	dd0b      	ble.n	8016f4e <__gethex+0x402>
 8016f36:	2101      	movs	r1, #1
 8016f38:	4620      	mov	r0, r4
 8016f3a:	f7ff fd9f 	bl	8016a7c <rshift>
 8016f3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016f42:	3701      	adds	r7, #1
 8016f44:	42bb      	cmp	r3, r7
 8016f46:	f6ff aee0 	blt.w	8016d0a <__gethex+0x1be>
 8016f4a:	2501      	movs	r5, #1
 8016f4c:	e7c2      	b.n	8016ed4 <__gethex+0x388>
 8016f4e:	f016 061f 	ands.w	r6, r6, #31
 8016f52:	d0fa      	beq.n	8016f4a <__gethex+0x3fe>
 8016f54:	4453      	add	r3, sl
 8016f56:	f1c6 0620 	rsb	r6, r6, #32
 8016f5a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8016f5e:	f000 fa79 	bl	8017454 <__hi0bits>
 8016f62:	42b0      	cmp	r0, r6
 8016f64:	dbe7      	blt.n	8016f36 <__gethex+0x3ea>
 8016f66:	e7f0      	b.n	8016f4a <__gethex+0x3fe>
 8016f68:	08018b81 	.word	0x08018b81

08016f6c <L_shift>:
 8016f6c:	f1c2 0208 	rsb	r2, r2, #8
 8016f70:	0092      	lsls	r2, r2, #2
 8016f72:	b570      	push	{r4, r5, r6, lr}
 8016f74:	f1c2 0620 	rsb	r6, r2, #32
 8016f78:	6843      	ldr	r3, [r0, #4]
 8016f7a:	6804      	ldr	r4, [r0, #0]
 8016f7c:	fa03 f506 	lsl.w	r5, r3, r6
 8016f80:	432c      	orrs	r4, r5
 8016f82:	40d3      	lsrs	r3, r2
 8016f84:	6004      	str	r4, [r0, #0]
 8016f86:	f840 3f04 	str.w	r3, [r0, #4]!
 8016f8a:	4288      	cmp	r0, r1
 8016f8c:	d3f4      	bcc.n	8016f78 <L_shift+0xc>
 8016f8e:	bd70      	pop	{r4, r5, r6, pc}

08016f90 <__match>:
 8016f90:	b530      	push	{r4, r5, lr}
 8016f92:	6803      	ldr	r3, [r0, #0]
 8016f94:	3301      	adds	r3, #1
 8016f96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016f9a:	b914      	cbnz	r4, 8016fa2 <__match+0x12>
 8016f9c:	6003      	str	r3, [r0, #0]
 8016f9e:	2001      	movs	r0, #1
 8016fa0:	bd30      	pop	{r4, r5, pc}
 8016fa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016fa6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8016faa:	2d19      	cmp	r5, #25
 8016fac:	bf98      	it	ls
 8016fae:	3220      	addls	r2, #32
 8016fb0:	42a2      	cmp	r2, r4
 8016fb2:	d0f0      	beq.n	8016f96 <__match+0x6>
 8016fb4:	2000      	movs	r0, #0
 8016fb6:	e7f3      	b.n	8016fa0 <__match+0x10>

08016fb8 <__hexnan>:
 8016fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fbc:	680b      	ldr	r3, [r1, #0]
 8016fbe:	6801      	ldr	r1, [r0, #0]
 8016fc0:	115e      	asrs	r6, r3, #5
 8016fc2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8016fc6:	f013 031f 	ands.w	r3, r3, #31
 8016fca:	b087      	sub	sp, #28
 8016fcc:	bf18      	it	ne
 8016fce:	3604      	addne	r6, #4
 8016fd0:	2500      	movs	r5, #0
 8016fd2:	1f37      	subs	r7, r6, #4
 8016fd4:	4682      	mov	sl, r0
 8016fd6:	4690      	mov	r8, r2
 8016fd8:	9301      	str	r3, [sp, #4]
 8016fda:	f846 5c04 	str.w	r5, [r6, #-4]
 8016fde:	46b9      	mov	r9, r7
 8016fe0:	463c      	mov	r4, r7
 8016fe2:	9502      	str	r5, [sp, #8]
 8016fe4:	46ab      	mov	fp, r5
 8016fe6:	784a      	ldrb	r2, [r1, #1]
 8016fe8:	1c4b      	adds	r3, r1, #1
 8016fea:	9303      	str	r3, [sp, #12]
 8016fec:	b342      	cbz	r2, 8017040 <__hexnan+0x88>
 8016fee:	4610      	mov	r0, r2
 8016ff0:	9105      	str	r1, [sp, #20]
 8016ff2:	9204      	str	r2, [sp, #16]
 8016ff4:	f7ff fd94 	bl	8016b20 <__hexdig_fun>
 8016ff8:	2800      	cmp	r0, #0
 8016ffa:	d151      	bne.n	80170a0 <__hexnan+0xe8>
 8016ffc:	9a04      	ldr	r2, [sp, #16]
 8016ffe:	9905      	ldr	r1, [sp, #20]
 8017000:	2a20      	cmp	r2, #32
 8017002:	d818      	bhi.n	8017036 <__hexnan+0x7e>
 8017004:	9b02      	ldr	r3, [sp, #8]
 8017006:	459b      	cmp	fp, r3
 8017008:	dd13      	ble.n	8017032 <__hexnan+0x7a>
 801700a:	454c      	cmp	r4, r9
 801700c:	d206      	bcs.n	801701c <__hexnan+0x64>
 801700e:	2d07      	cmp	r5, #7
 8017010:	dc04      	bgt.n	801701c <__hexnan+0x64>
 8017012:	462a      	mov	r2, r5
 8017014:	4649      	mov	r1, r9
 8017016:	4620      	mov	r0, r4
 8017018:	f7ff ffa8 	bl	8016f6c <L_shift>
 801701c:	4544      	cmp	r4, r8
 801701e:	d952      	bls.n	80170c6 <__hexnan+0x10e>
 8017020:	2300      	movs	r3, #0
 8017022:	f1a4 0904 	sub.w	r9, r4, #4
 8017026:	f844 3c04 	str.w	r3, [r4, #-4]
 801702a:	f8cd b008 	str.w	fp, [sp, #8]
 801702e:	464c      	mov	r4, r9
 8017030:	461d      	mov	r5, r3
 8017032:	9903      	ldr	r1, [sp, #12]
 8017034:	e7d7      	b.n	8016fe6 <__hexnan+0x2e>
 8017036:	2a29      	cmp	r2, #41	@ 0x29
 8017038:	d157      	bne.n	80170ea <__hexnan+0x132>
 801703a:	3102      	adds	r1, #2
 801703c:	f8ca 1000 	str.w	r1, [sl]
 8017040:	f1bb 0f00 	cmp.w	fp, #0
 8017044:	d051      	beq.n	80170ea <__hexnan+0x132>
 8017046:	454c      	cmp	r4, r9
 8017048:	d206      	bcs.n	8017058 <__hexnan+0xa0>
 801704a:	2d07      	cmp	r5, #7
 801704c:	dc04      	bgt.n	8017058 <__hexnan+0xa0>
 801704e:	462a      	mov	r2, r5
 8017050:	4649      	mov	r1, r9
 8017052:	4620      	mov	r0, r4
 8017054:	f7ff ff8a 	bl	8016f6c <L_shift>
 8017058:	4544      	cmp	r4, r8
 801705a:	d936      	bls.n	80170ca <__hexnan+0x112>
 801705c:	f1a8 0204 	sub.w	r2, r8, #4
 8017060:	4623      	mov	r3, r4
 8017062:	f853 1b04 	ldr.w	r1, [r3], #4
 8017066:	f842 1f04 	str.w	r1, [r2, #4]!
 801706a:	429f      	cmp	r7, r3
 801706c:	d2f9      	bcs.n	8017062 <__hexnan+0xaa>
 801706e:	1b3b      	subs	r3, r7, r4
 8017070:	f023 0303 	bic.w	r3, r3, #3
 8017074:	3304      	adds	r3, #4
 8017076:	3401      	adds	r4, #1
 8017078:	3e03      	subs	r6, #3
 801707a:	42b4      	cmp	r4, r6
 801707c:	bf88      	it	hi
 801707e:	2304      	movhi	r3, #4
 8017080:	4443      	add	r3, r8
 8017082:	2200      	movs	r2, #0
 8017084:	f843 2b04 	str.w	r2, [r3], #4
 8017088:	429f      	cmp	r7, r3
 801708a:	d2fb      	bcs.n	8017084 <__hexnan+0xcc>
 801708c:	683b      	ldr	r3, [r7, #0]
 801708e:	b91b      	cbnz	r3, 8017098 <__hexnan+0xe0>
 8017090:	4547      	cmp	r7, r8
 8017092:	d128      	bne.n	80170e6 <__hexnan+0x12e>
 8017094:	2301      	movs	r3, #1
 8017096:	603b      	str	r3, [r7, #0]
 8017098:	2005      	movs	r0, #5
 801709a:	b007      	add	sp, #28
 801709c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170a0:	3501      	adds	r5, #1
 80170a2:	2d08      	cmp	r5, #8
 80170a4:	f10b 0b01 	add.w	fp, fp, #1
 80170a8:	dd06      	ble.n	80170b8 <__hexnan+0x100>
 80170aa:	4544      	cmp	r4, r8
 80170ac:	d9c1      	bls.n	8017032 <__hexnan+0x7a>
 80170ae:	2300      	movs	r3, #0
 80170b0:	f844 3c04 	str.w	r3, [r4, #-4]
 80170b4:	2501      	movs	r5, #1
 80170b6:	3c04      	subs	r4, #4
 80170b8:	6822      	ldr	r2, [r4, #0]
 80170ba:	f000 000f 	and.w	r0, r0, #15
 80170be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80170c2:	6020      	str	r0, [r4, #0]
 80170c4:	e7b5      	b.n	8017032 <__hexnan+0x7a>
 80170c6:	2508      	movs	r5, #8
 80170c8:	e7b3      	b.n	8017032 <__hexnan+0x7a>
 80170ca:	9b01      	ldr	r3, [sp, #4]
 80170cc:	2b00      	cmp	r3, #0
 80170ce:	d0dd      	beq.n	801708c <__hexnan+0xd4>
 80170d0:	f1c3 0320 	rsb	r3, r3, #32
 80170d4:	f04f 32ff 	mov.w	r2, #4294967295
 80170d8:	40da      	lsrs	r2, r3
 80170da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80170de:	4013      	ands	r3, r2
 80170e0:	f846 3c04 	str.w	r3, [r6, #-4]
 80170e4:	e7d2      	b.n	801708c <__hexnan+0xd4>
 80170e6:	3f04      	subs	r7, #4
 80170e8:	e7d0      	b.n	801708c <__hexnan+0xd4>
 80170ea:	2004      	movs	r0, #4
 80170ec:	e7d5      	b.n	801709a <__hexnan+0xe2>
	...

080170f0 <sbrk_aligned>:
 80170f0:	b570      	push	{r4, r5, r6, lr}
 80170f2:	4e0f      	ldr	r6, [pc, #60]	@ (8017130 <sbrk_aligned+0x40>)
 80170f4:	460c      	mov	r4, r1
 80170f6:	6831      	ldr	r1, [r6, #0]
 80170f8:	4605      	mov	r5, r0
 80170fa:	b911      	cbnz	r1, 8017102 <sbrk_aligned+0x12>
 80170fc:	f000 fe20 	bl	8017d40 <_sbrk_r>
 8017100:	6030      	str	r0, [r6, #0]
 8017102:	4621      	mov	r1, r4
 8017104:	4628      	mov	r0, r5
 8017106:	f000 fe1b 	bl	8017d40 <_sbrk_r>
 801710a:	1c43      	adds	r3, r0, #1
 801710c:	d103      	bne.n	8017116 <sbrk_aligned+0x26>
 801710e:	f04f 34ff 	mov.w	r4, #4294967295
 8017112:	4620      	mov	r0, r4
 8017114:	bd70      	pop	{r4, r5, r6, pc}
 8017116:	1cc4      	adds	r4, r0, #3
 8017118:	f024 0403 	bic.w	r4, r4, #3
 801711c:	42a0      	cmp	r0, r4
 801711e:	d0f8      	beq.n	8017112 <sbrk_aligned+0x22>
 8017120:	1a21      	subs	r1, r4, r0
 8017122:	4628      	mov	r0, r5
 8017124:	f000 fe0c 	bl	8017d40 <_sbrk_r>
 8017128:	3001      	adds	r0, #1
 801712a:	d1f2      	bne.n	8017112 <sbrk_aligned+0x22>
 801712c:	e7ef      	b.n	801710e <sbrk_aligned+0x1e>
 801712e:	bf00      	nop
 8017130:	240067ec 	.word	0x240067ec

08017134 <_malloc_r>:
 8017134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017138:	1ccd      	adds	r5, r1, #3
 801713a:	f025 0503 	bic.w	r5, r5, #3
 801713e:	3508      	adds	r5, #8
 8017140:	2d0c      	cmp	r5, #12
 8017142:	bf38      	it	cc
 8017144:	250c      	movcc	r5, #12
 8017146:	2d00      	cmp	r5, #0
 8017148:	4606      	mov	r6, r0
 801714a:	db01      	blt.n	8017150 <_malloc_r+0x1c>
 801714c:	42a9      	cmp	r1, r5
 801714e:	d904      	bls.n	801715a <_malloc_r+0x26>
 8017150:	230c      	movs	r3, #12
 8017152:	6033      	str	r3, [r6, #0]
 8017154:	2000      	movs	r0, #0
 8017156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801715a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017230 <_malloc_r+0xfc>
 801715e:	f000 f87b 	bl	8017258 <__malloc_lock>
 8017162:	f8d8 3000 	ldr.w	r3, [r8]
 8017166:	461c      	mov	r4, r3
 8017168:	bb44      	cbnz	r4, 80171bc <_malloc_r+0x88>
 801716a:	4629      	mov	r1, r5
 801716c:	4630      	mov	r0, r6
 801716e:	f7ff ffbf 	bl	80170f0 <sbrk_aligned>
 8017172:	1c43      	adds	r3, r0, #1
 8017174:	4604      	mov	r4, r0
 8017176:	d158      	bne.n	801722a <_malloc_r+0xf6>
 8017178:	f8d8 4000 	ldr.w	r4, [r8]
 801717c:	4627      	mov	r7, r4
 801717e:	2f00      	cmp	r7, #0
 8017180:	d143      	bne.n	801720a <_malloc_r+0xd6>
 8017182:	2c00      	cmp	r4, #0
 8017184:	d04b      	beq.n	801721e <_malloc_r+0xea>
 8017186:	6823      	ldr	r3, [r4, #0]
 8017188:	4639      	mov	r1, r7
 801718a:	4630      	mov	r0, r6
 801718c:	eb04 0903 	add.w	r9, r4, r3
 8017190:	f000 fdd6 	bl	8017d40 <_sbrk_r>
 8017194:	4581      	cmp	r9, r0
 8017196:	d142      	bne.n	801721e <_malloc_r+0xea>
 8017198:	6821      	ldr	r1, [r4, #0]
 801719a:	1a6d      	subs	r5, r5, r1
 801719c:	4629      	mov	r1, r5
 801719e:	4630      	mov	r0, r6
 80171a0:	f7ff ffa6 	bl	80170f0 <sbrk_aligned>
 80171a4:	3001      	adds	r0, #1
 80171a6:	d03a      	beq.n	801721e <_malloc_r+0xea>
 80171a8:	6823      	ldr	r3, [r4, #0]
 80171aa:	442b      	add	r3, r5
 80171ac:	6023      	str	r3, [r4, #0]
 80171ae:	f8d8 3000 	ldr.w	r3, [r8]
 80171b2:	685a      	ldr	r2, [r3, #4]
 80171b4:	bb62      	cbnz	r2, 8017210 <_malloc_r+0xdc>
 80171b6:	f8c8 7000 	str.w	r7, [r8]
 80171ba:	e00f      	b.n	80171dc <_malloc_r+0xa8>
 80171bc:	6822      	ldr	r2, [r4, #0]
 80171be:	1b52      	subs	r2, r2, r5
 80171c0:	d420      	bmi.n	8017204 <_malloc_r+0xd0>
 80171c2:	2a0b      	cmp	r2, #11
 80171c4:	d917      	bls.n	80171f6 <_malloc_r+0xc2>
 80171c6:	1961      	adds	r1, r4, r5
 80171c8:	42a3      	cmp	r3, r4
 80171ca:	6025      	str	r5, [r4, #0]
 80171cc:	bf18      	it	ne
 80171ce:	6059      	strne	r1, [r3, #4]
 80171d0:	6863      	ldr	r3, [r4, #4]
 80171d2:	bf08      	it	eq
 80171d4:	f8c8 1000 	streq.w	r1, [r8]
 80171d8:	5162      	str	r2, [r4, r5]
 80171da:	604b      	str	r3, [r1, #4]
 80171dc:	4630      	mov	r0, r6
 80171de:	f000 f841 	bl	8017264 <__malloc_unlock>
 80171e2:	f104 000b 	add.w	r0, r4, #11
 80171e6:	1d23      	adds	r3, r4, #4
 80171e8:	f020 0007 	bic.w	r0, r0, #7
 80171ec:	1ac2      	subs	r2, r0, r3
 80171ee:	bf1c      	itt	ne
 80171f0:	1a1b      	subne	r3, r3, r0
 80171f2:	50a3      	strne	r3, [r4, r2]
 80171f4:	e7af      	b.n	8017156 <_malloc_r+0x22>
 80171f6:	6862      	ldr	r2, [r4, #4]
 80171f8:	42a3      	cmp	r3, r4
 80171fa:	bf0c      	ite	eq
 80171fc:	f8c8 2000 	streq.w	r2, [r8]
 8017200:	605a      	strne	r2, [r3, #4]
 8017202:	e7eb      	b.n	80171dc <_malloc_r+0xa8>
 8017204:	4623      	mov	r3, r4
 8017206:	6864      	ldr	r4, [r4, #4]
 8017208:	e7ae      	b.n	8017168 <_malloc_r+0x34>
 801720a:	463c      	mov	r4, r7
 801720c:	687f      	ldr	r7, [r7, #4]
 801720e:	e7b6      	b.n	801717e <_malloc_r+0x4a>
 8017210:	461a      	mov	r2, r3
 8017212:	685b      	ldr	r3, [r3, #4]
 8017214:	42a3      	cmp	r3, r4
 8017216:	d1fb      	bne.n	8017210 <_malloc_r+0xdc>
 8017218:	2300      	movs	r3, #0
 801721a:	6053      	str	r3, [r2, #4]
 801721c:	e7de      	b.n	80171dc <_malloc_r+0xa8>
 801721e:	230c      	movs	r3, #12
 8017220:	6033      	str	r3, [r6, #0]
 8017222:	4630      	mov	r0, r6
 8017224:	f000 f81e 	bl	8017264 <__malloc_unlock>
 8017228:	e794      	b.n	8017154 <_malloc_r+0x20>
 801722a:	6005      	str	r5, [r0, #0]
 801722c:	e7d6      	b.n	80171dc <_malloc_r+0xa8>
 801722e:	bf00      	nop
 8017230:	240067f0 	.word	0x240067f0

08017234 <__ascii_mbtowc>:
 8017234:	b082      	sub	sp, #8
 8017236:	b901      	cbnz	r1, 801723a <__ascii_mbtowc+0x6>
 8017238:	a901      	add	r1, sp, #4
 801723a:	b142      	cbz	r2, 801724e <__ascii_mbtowc+0x1a>
 801723c:	b14b      	cbz	r3, 8017252 <__ascii_mbtowc+0x1e>
 801723e:	7813      	ldrb	r3, [r2, #0]
 8017240:	600b      	str	r3, [r1, #0]
 8017242:	7812      	ldrb	r2, [r2, #0]
 8017244:	1e10      	subs	r0, r2, #0
 8017246:	bf18      	it	ne
 8017248:	2001      	movne	r0, #1
 801724a:	b002      	add	sp, #8
 801724c:	4770      	bx	lr
 801724e:	4610      	mov	r0, r2
 8017250:	e7fb      	b.n	801724a <__ascii_mbtowc+0x16>
 8017252:	f06f 0001 	mvn.w	r0, #1
 8017256:	e7f8      	b.n	801724a <__ascii_mbtowc+0x16>

08017258 <__malloc_lock>:
 8017258:	4801      	ldr	r0, [pc, #4]	@ (8017260 <__malloc_lock+0x8>)
 801725a:	f7ff bbac 	b.w	80169b6 <__retarget_lock_acquire_recursive>
 801725e:	bf00      	nop
 8017260:	240067e8 	.word	0x240067e8

08017264 <__malloc_unlock>:
 8017264:	4801      	ldr	r0, [pc, #4]	@ (801726c <__malloc_unlock+0x8>)
 8017266:	f7ff bba7 	b.w	80169b8 <__retarget_lock_release_recursive>
 801726a:	bf00      	nop
 801726c:	240067e8 	.word	0x240067e8

08017270 <_Balloc>:
 8017270:	b570      	push	{r4, r5, r6, lr}
 8017272:	69c6      	ldr	r6, [r0, #28]
 8017274:	4604      	mov	r4, r0
 8017276:	460d      	mov	r5, r1
 8017278:	b976      	cbnz	r6, 8017298 <_Balloc+0x28>
 801727a:	2010      	movs	r0, #16
 801727c:	f000 fda2 	bl	8017dc4 <malloc>
 8017280:	4602      	mov	r2, r0
 8017282:	61e0      	str	r0, [r4, #28]
 8017284:	b920      	cbnz	r0, 8017290 <_Balloc+0x20>
 8017286:	4b18      	ldr	r3, [pc, #96]	@ (80172e8 <_Balloc+0x78>)
 8017288:	4818      	ldr	r0, [pc, #96]	@ (80172ec <_Balloc+0x7c>)
 801728a:	216b      	movs	r1, #107	@ 0x6b
 801728c:	f000 fd68 	bl	8017d60 <__assert_func>
 8017290:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017294:	6006      	str	r6, [r0, #0]
 8017296:	60c6      	str	r6, [r0, #12]
 8017298:	69e6      	ldr	r6, [r4, #28]
 801729a:	68f3      	ldr	r3, [r6, #12]
 801729c:	b183      	cbz	r3, 80172c0 <_Balloc+0x50>
 801729e:	69e3      	ldr	r3, [r4, #28]
 80172a0:	68db      	ldr	r3, [r3, #12]
 80172a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80172a6:	b9b8      	cbnz	r0, 80172d8 <_Balloc+0x68>
 80172a8:	2101      	movs	r1, #1
 80172aa:	fa01 f605 	lsl.w	r6, r1, r5
 80172ae:	1d72      	adds	r2, r6, #5
 80172b0:	0092      	lsls	r2, r2, #2
 80172b2:	4620      	mov	r0, r4
 80172b4:	f000 fd72 	bl	8017d9c <_calloc_r>
 80172b8:	b160      	cbz	r0, 80172d4 <_Balloc+0x64>
 80172ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80172be:	e00e      	b.n	80172de <_Balloc+0x6e>
 80172c0:	2221      	movs	r2, #33	@ 0x21
 80172c2:	2104      	movs	r1, #4
 80172c4:	4620      	mov	r0, r4
 80172c6:	f000 fd69 	bl	8017d9c <_calloc_r>
 80172ca:	69e3      	ldr	r3, [r4, #28]
 80172cc:	60f0      	str	r0, [r6, #12]
 80172ce:	68db      	ldr	r3, [r3, #12]
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	d1e4      	bne.n	801729e <_Balloc+0x2e>
 80172d4:	2000      	movs	r0, #0
 80172d6:	bd70      	pop	{r4, r5, r6, pc}
 80172d8:	6802      	ldr	r2, [r0, #0]
 80172da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80172de:	2300      	movs	r3, #0
 80172e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80172e4:	e7f7      	b.n	80172d6 <_Balloc+0x66>
 80172e6:	bf00      	nop
 80172e8:	08018bf2 	.word	0x08018bf2
 80172ec:	08018c09 	.word	0x08018c09

080172f0 <_Bfree>:
 80172f0:	b570      	push	{r4, r5, r6, lr}
 80172f2:	69c6      	ldr	r6, [r0, #28]
 80172f4:	4605      	mov	r5, r0
 80172f6:	460c      	mov	r4, r1
 80172f8:	b976      	cbnz	r6, 8017318 <_Bfree+0x28>
 80172fa:	2010      	movs	r0, #16
 80172fc:	f000 fd62 	bl	8017dc4 <malloc>
 8017300:	4602      	mov	r2, r0
 8017302:	61e8      	str	r0, [r5, #28]
 8017304:	b920      	cbnz	r0, 8017310 <_Bfree+0x20>
 8017306:	4b09      	ldr	r3, [pc, #36]	@ (801732c <_Bfree+0x3c>)
 8017308:	4809      	ldr	r0, [pc, #36]	@ (8017330 <_Bfree+0x40>)
 801730a:	218f      	movs	r1, #143	@ 0x8f
 801730c:	f000 fd28 	bl	8017d60 <__assert_func>
 8017310:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017314:	6006      	str	r6, [r0, #0]
 8017316:	60c6      	str	r6, [r0, #12]
 8017318:	b13c      	cbz	r4, 801732a <_Bfree+0x3a>
 801731a:	69eb      	ldr	r3, [r5, #28]
 801731c:	6862      	ldr	r2, [r4, #4]
 801731e:	68db      	ldr	r3, [r3, #12]
 8017320:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017324:	6021      	str	r1, [r4, #0]
 8017326:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801732a:	bd70      	pop	{r4, r5, r6, pc}
 801732c:	08018bf2 	.word	0x08018bf2
 8017330:	08018c09 	.word	0x08018c09

08017334 <__multadd>:
 8017334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017338:	690d      	ldr	r5, [r1, #16]
 801733a:	4607      	mov	r7, r0
 801733c:	460c      	mov	r4, r1
 801733e:	461e      	mov	r6, r3
 8017340:	f101 0c14 	add.w	ip, r1, #20
 8017344:	2000      	movs	r0, #0
 8017346:	f8dc 3000 	ldr.w	r3, [ip]
 801734a:	b299      	uxth	r1, r3
 801734c:	fb02 6101 	mla	r1, r2, r1, r6
 8017350:	0c1e      	lsrs	r6, r3, #16
 8017352:	0c0b      	lsrs	r3, r1, #16
 8017354:	fb02 3306 	mla	r3, r2, r6, r3
 8017358:	b289      	uxth	r1, r1
 801735a:	3001      	adds	r0, #1
 801735c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8017360:	4285      	cmp	r5, r0
 8017362:	f84c 1b04 	str.w	r1, [ip], #4
 8017366:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801736a:	dcec      	bgt.n	8017346 <__multadd+0x12>
 801736c:	b30e      	cbz	r6, 80173b2 <__multadd+0x7e>
 801736e:	68a3      	ldr	r3, [r4, #8]
 8017370:	42ab      	cmp	r3, r5
 8017372:	dc19      	bgt.n	80173a8 <__multadd+0x74>
 8017374:	6861      	ldr	r1, [r4, #4]
 8017376:	4638      	mov	r0, r7
 8017378:	3101      	adds	r1, #1
 801737a:	f7ff ff79 	bl	8017270 <_Balloc>
 801737e:	4680      	mov	r8, r0
 8017380:	b928      	cbnz	r0, 801738e <__multadd+0x5a>
 8017382:	4602      	mov	r2, r0
 8017384:	4b0c      	ldr	r3, [pc, #48]	@ (80173b8 <__multadd+0x84>)
 8017386:	480d      	ldr	r0, [pc, #52]	@ (80173bc <__multadd+0x88>)
 8017388:	21ba      	movs	r1, #186	@ 0xba
 801738a:	f000 fce9 	bl	8017d60 <__assert_func>
 801738e:	6922      	ldr	r2, [r4, #16]
 8017390:	3202      	adds	r2, #2
 8017392:	f104 010c 	add.w	r1, r4, #12
 8017396:	0092      	lsls	r2, r2, #2
 8017398:	300c      	adds	r0, #12
 801739a:	f7ff fb0e 	bl	80169ba <memcpy>
 801739e:	4621      	mov	r1, r4
 80173a0:	4638      	mov	r0, r7
 80173a2:	f7ff ffa5 	bl	80172f0 <_Bfree>
 80173a6:	4644      	mov	r4, r8
 80173a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80173ac:	3501      	adds	r5, #1
 80173ae:	615e      	str	r6, [r3, #20]
 80173b0:	6125      	str	r5, [r4, #16]
 80173b2:	4620      	mov	r0, r4
 80173b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173b8:	08018b81 	.word	0x08018b81
 80173bc:	08018c09 	.word	0x08018c09

080173c0 <__s2b>:
 80173c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80173c4:	460c      	mov	r4, r1
 80173c6:	4615      	mov	r5, r2
 80173c8:	461f      	mov	r7, r3
 80173ca:	2209      	movs	r2, #9
 80173cc:	3308      	adds	r3, #8
 80173ce:	4606      	mov	r6, r0
 80173d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80173d4:	2100      	movs	r1, #0
 80173d6:	2201      	movs	r2, #1
 80173d8:	429a      	cmp	r2, r3
 80173da:	db09      	blt.n	80173f0 <__s2b+0x30>
 80173dc:	4630      	mov	r0, r6
 80173de:	f7ff ff47 	bl	8017270 <_Balloc>
 80173e2:	b940      	cbnz	r0, 80173f6 <__s2b+0x36>
 80173e4:	4602      	mov	r2, r0
 80173e6:	4b19      	ldr	r3, [pc, #100]	@ (801744c <__s2b+0x8c>)
 80173e8:	4819      	ldr	r0, [pc, #100]	@ (8017450 <__s2b+0x90>)
 80173ea:	21d3      	movs	r1, #211	@ 0xd3
 80173ec:	f000 fcb8 	bl	8017d60 <__assert_func>
 80173f0:	0052      	lsls	r2, r2, #1
 80173f2:	3101      	adds	r1, #1
 80173f4:	e7f0      	b.n	80173d8 <__s2b+0x18>
 80173f6:	9b08      	ldr	r3, [sp, #32]
 80173f8:	6143      	str	r3, [r0, #20]
 80173fa:	2d09      	cmp	r5, #9
 80173fc:	f04f 0301 	mov.w	r3, #1
 8017400:	6103      	str	r3, [r0, #16]
 8017402:	dd16      	ble.n	8017432 <__s2b+0x72>
 8017404:	f104 0909 	add.w	r9, r4, #9
 8017408:	46c8      	mov	r8, r9
 801740a:	442c      	add	r4, r5
 801740c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8017410:	4601      	mov	r1, r0
 8017412:	3b30      	subs	r3, #48	@ 0x30
 8017414:	220a      	movs	r2, #10
 8017416:	4630      	mov	r0, r6
 8017418:	f7ff ff8c 	bl	8017334 <__multadd>
 801741c:	45a0      	cmp	r8, r4
 801741e:	d1f5      	bne.n	801740c <__s2b+0x4c>
 8017420:	f1a5 0408 	sub.w	r4, r5, #8
 8017424:	444c      	add	r4, r9
 8017426:	1b2d      	subs	r5, r5, r4
 8017428:	1963      	adds	r3, r4, r5
 801742a:	42bb      	cmp	r3, r7
 801742c:	db04      	blt.n	8017438 <__s2b+0x78>
 801742e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017432:	340a      	adds	r4, #10
 8017434:	2509      	movs	r5, #9
 8017436:	e7f6      	b.n	8017426 <__s2b+0x66>
 8017438:	f814 3b01 	ldrb.w	r3, [r4], #1
 801743c:	4601      	mov	r1, r0
 801743e:	3b30      	subs	r3, #48	@ 0x30
 8017440:	220a      	movs	r2, #10
 8017442:	4630      	mov	r0, r6
 8017444:	f7ff ff76 	bl	8017334 <__multadd>
 8017448:	e7ee      	b.n	8017428 <__s2b+0x68>
 801744a:	bf00      	nop
 801744c:	08018b81 	.word	0x08018b81
 8017450:	08018c09 	.word	0x08018c09

08017454 <__hi0bits>:
 8017454:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8017458:	4603      	mov	r3, r0
 801745a:	bf36      	itet	cc
 801745c:	0403      	lslcc	r3, r0, #16
 801745e:	2000      	movcs	r0, #0
 8017460:	2010      	movcc	r0, #16
 8017462:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8017466:	bf3c      	itt	cc
 8017468:	021b      	lslcc	r3, r3, #8
 801746a:	3008      	addcc	r0, #8
 801746c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8017470:	bf3c      	itt	cc
 8017472:	011b      	lslcc	r3, r3, #4
 8017474:	3004      	addcc	r0, #4
 8017476:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801747a:	bf3c      	itt	cc
 801747c:	009b      	lslcc	r3, r3, #2
 801747e:	3002      	addcc	r0, #2
 8017480:	2b00      	cmp	r3, #0
 8017482:	db05      	blt.n	8017490 <__hi0bits+0x3c>
 8017484:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8017488:	f100 0001 	add.w	r0, r0, #1
 801748c:	bf08      	it	eq
 801748e:	2020      	moveq	r0, #32
 8017490:	4770      	bx	lr

08017492 <__lo0bits>:
 8017492:	6803      	ldr	r3, [r0, #0]
 8017494:	4602      	mov	r2, r0
 8017496:	f013 0007 	ands.w	r0, r3, #7
 801749a:	d00b      	beq.n	80174b4 <__lo0bits+0x22>
 801749c:	07d9      	lsls	r1, r3, #31
 801749e:	d421      	bmi.n	80174e4 <__lo0bits+0x52>
 80174a0:	0798      	lsls	r0, r3, #30
 80174a2:	bf49      	itett	mi
 80174a4:	085b      	lsrmi	r3, r3, #1
 80174a6:	089b      	lsrpl	r3, r3, #2
 80174a8:	2001      	movmi	r0, #1
 80174aa:	6013      	strmi	r3, [r2, #0]
 80174ac:	bf5c      	itt	pl
 80174ae:	6013      	strpl	r3, [r2, #0]
 80174b0:	2002      	movpl	r0, #2
 80174b2:	4770      	bx	lr
 80174b4:	b299      	uxth	r1, r3
 80174b6:	b909      	cbnz	r1, 80174bc <__lo0bits+0x2a>
 80174b8:	0c1b      	lsrs	r3, r3, #16
 80174ba:	2010      	movs	r0, #16
 80174bc:	b2d9      	uxtb	r1, r3
 80174be:	b909      	cbnz	r1, 80174c4 <__lo0bits+0x32>
 80174c0:	3008      	adds	r0, #8
 80174c2:	0a1b      	lsrs	r3, r3, #8
 80174c4:	0719      	lsls	r1, r3, #28
 80174c6:	bf04      	itt	eq
 80174c8:	091b      	lsreq	r3, r3, #4
 80174ca:	3004      	addeq	r0, #4
 80174cc:	0799      	lsls	r1, r3, #30
 80174ce:	bf04      	itt	eq
 80174d0:	089b      	lsreq	r3, r3, #2
 80174d2:	3002      	addeq	r0, #2
 80174d4:	07d9      	lsls	r1, r3, #31
 80174d6:	d403      	bmi.n	80174e0 <__lo0bits+0x4e>
 80174d8:	085b      	lsrs	r3, r3, #1
 80174da:	f100 0001 	add.w	r0, r0, #1
 80174de:	d003      	beq.n	80174e8 <__lo0bits+0x56>
 80174e0:	6013      	str	r3, [r2, #0]
 80174e2:	4770      	bx	lr
 80174e4:	2000      	movs	r0, #0
 80174e6:	4770      	bx	lr
 80174e8:	2020      	movs	r0, #32
 80174ea:	4770      	bx	lr

080174ec <__i2b>:
 80174ec:	b510      	push	{r4, lr}
 80174ee:	460c      	mov	r4, r1
 80174f0:	2101      	movs	r1, #1
 80174f2:	f7ff febd 	bl	8017270 <_Balloc>
 80174f6:	4602      	mov	r2, r0
 80174f8:	b928      	cbnz	r0, 8017506 <__i2b+0x1a>
 80174fa:	4b05      	ldr	r3, [pc, #20]	@ (8017510 <__i2b+0x24>)
 80174fc:	4805      	ldr	r0, [pc, #20]	@ (8017514 <__i2b+0x28>)
 80174fe:	f240 1145 	movw	r1, #325	@ 0x145
 8017502:	f000 fc2d 	bl	8017d60 <__assert_func>
 8017506:	2301      	movs	r3, #1
 8017508:	6144      	str	r4, [r0, #20]
 801750a:	6103      	str	r3, [r0, #16]
 801750c:	bd10      	pop	{r4, pc}
 801750e:	bf00      	nop
 8017510:	08018b81 	.word	0x08018b81
 8017514:	08018c09 	.word	0x08018c09

08017518 <__multiply>:
 8017518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801751c:	4614      	mov	r4, r2
 801751e:	690a      	ldr	r2, [r1, #16]
 8017520:	6923      	ldr	r3, [r4, #16]
 8017522:	429a      	cmp	r2, r3
 8017524:	bfa8      	it	ge
 8017526:	4623      	movge	r3, r4
 8017528:	460f      	mov	r7, r1
 801752a:	bfa4      	itt	ge
 801752c:	460c      	movge	r4, r1
 801752e:	461f      	movge	r7, r3
 8017530:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8017534:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8017538:	68a3      	ldr	r3, [r4, #8]
 801753a:	6861      	ldr	r1, [r4, #4]
 801753c:	eb0a 0609 	add.w	r6, sl, r9
 8017540:	42b3      	cmp	r3, r6
 8017542:	b085      	sub	sp, #20
 8017544:	bfb8      	it	lt
 8017546:	3101      	addlt	r1, #1
 8017548:	f7ff fe92 	bl	8017270 <_Balloc>
 801754c:	b930      	cbnz	r0, 801755c <__multiply+0x44>
 801754e:	4602      	mov	r2, r0
 8017550:	4b44      	ldr	r3, [pc, #272]	@ (8017664 <__multiply+0x14c>)
 8017552:	4845      	ldr	r0, [pc, #276]	@ (8017668 <__multiply+0x150>)
 8017554:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8017558:	f000 fc02 	bl	8017d60 <__assert_func>
 801755c:	f100 0514 	add.w	r5, r0, #20
 8017560:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8017564:	462b      	mov	r3, r5
 8017566:	2200      	movs	r2, #0
 8017568:	4543      	cmp	r3, r8
 801756a:	d321      	bcc.n	80175b0 <__multiply+0x98>
 801756c:	f107 0114 	add.w	r1, r7, #20
 8017570:	f104 0214 	add.w	r2, r4, #20
 8017574:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8017578:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801757c:	9302      	str	r3, [sp, #8]
 801757e:	1b13      	subs	r3, r2, r4
 8017580:	3b15      	subs	r3, #21
 8017582:	f023 0303 	bic.w	r3, r3, #3
 8017586:	3304      	adds	r3, #4
 8017588:	f104 0715 	add.w	r7, r4, #21
 801758c:	42ba      	cmp	r2, r7
 801758e:	bf38      	it	cc
 8017590:	2304      	movcc	r3, #4
 8017592:	9301      	str	r3, [sp, #4]
 8017594:	9b02      	ldr	r3, [sp, #8]
 8017596:	9103      	str	r1, [sp, #12]
 8017598:	428b      	cmp	r3, r1
 801759a:	d80c      	bhi.n	80175b6 <__multiply+0x9e>
 801759c:	2e00      	cmp	r6, #0
 801759e:	dd03      	ble.n	80175a8 <__multiply+0x90>
 80175a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	d05b      	beq.n	8017660 <__multiply+0x148>
 80175a8:	6106      	str	r6, [r0, #16]
 80175aa:	b005      	add	sp, #20
 80175ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175b0:	f843 2b04 	str.w	r2, [r3], #4
 80175b4:	e7d8      	b.n	8017568 <__multiply+0x50>
 80175b6:	f8b1 a000 	ldrh.w	sl, [r1]
 80175ba:	f1ba 0f00 	cmp.w	sl, #0
 80175be:	d024      	beq.n	801760a <__multiply+0xf2>
 80175c0:	f104 0e14 	add.w	lr, r4, #20
 80175c4:	46a9      	mov	r9, r5
 80175c6:	f04f 0c00 	mov.w	ip, #0
 80175ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 80175ce:	f8d9 3000 	ldr.w	r3, [r9]
 80175d2:	fa1f fb87 	uxth.w	fp, r7
 80175d6:	b29b      	uxth	r3, r3
 80175d8:	fb0a 330b 	mla	r3, sl, fp, r3
 80175dc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80175e0:	f8d9 7000 	ldr.w	r7, [r9]
 80175e4:	4463      	add	r3, ip
 80175e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80175ea:	fb0a c70b 	mla	r7, sl, fp, ip
 80175ee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80175f2:	b29b      	uxth	r3, r3
 80175f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80175f8:	4572      	cmp	r2, lr
 80175fa:	f849 3b04 	str.w	r3, [r9], #4
 80175fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8017602:	d8e2      	bhi.n	80175ca <__multiply+0xb2>
 8017604:	9b01      	ldr	r3, [sp, #4]
 8017606:	f845 c003 	str.w	ip, [r5, r3]
 801760a:	9b03      	ldr	r3, [sp, #12]
 801760c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8017610:	3104      	adds	r1, #4
 8017612:	f1b9 0f00 	cmp.w	r9, #0
 8017616:	d021      	beq.n	801765c <__multiply+0x144>
 8017618:	682b      	ldr	r3, [r5, #0]
 801761a:	f104 0c14 	add.w	ip, r4, #20
 801761e:	46ae      	mov	lr, r5
 8017620:	f04f 0a00 	mov.w	sl, #0
 8017624:	f8bc b000 	ldrh.w	fp, [ip]
 8017628:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801762c:	fb09 770b 	mla	r7, r9, fp, r7
 8017630:	4457      	add	r7, sl
 8017632:	b29b      	uxth	r3, r3
 8017634:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8017638:	f84e 3b04 	str.w	r3, [lr], #4
 801763c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8017640:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017644:	f8be 3000 	ldrh.w	r3, [lr]
 8017648:	fb09 330a 	mla	r3, r9, sl, r3
 801764c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8017650:	4562      	cmp	r2, ip
 8017652:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017656:	d8e5      	bhi.n	8017624 <__multiply+0x10c>
 8017658:	9f01      	ldr	r7, [sp, #4]
 801765a:	51eb      	str	r3, [r5, r7]
 801765c:	3504      	adds	r5, #4
 801765e:	e799      	b.n	8017594 <__multiply+0x7c>
 8017660:	3e01      	subs	r6, #1
 8017662:	e79b      	b.n	801759c <__multiply+0x84>
 8017664:	08018b81 	.word	0x08018b81
 8017668:	08018c09 	.word	0x08018c09

0801766c <__pow5mult>:
 801766c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017670:	4615      	mov	r5, r2
 8017672:	f012 0203 	ands.w	r2, r2, #3
 8017676:	4607      	mov	r7, r0
 8017678:	460e      	mov	r6, r1
 801767a:	d007      	beq.n	801768c <__pow5mult+0x20>
 801767c:	4c25      	ldr	r4, [pc, #148]	@ (8017714 <__pow5mult+0xa8>)
 801767e:	3a01      	subs	r2, #1
 8017680:	2300      	movs	r3, #0
 8017682:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017686:	f7ff fe55 	bl	8017334 <__multadd>
 801768a:	4606      	mov	r6, r0
 801768c:	10ad      	asrs	r5, r5, #2
 801768e:	d03d      	beq.n	801770c <__pow5mult+0xa0>
 8017690:	69fc      	ldr	r4, [r7, #28]
 8017692:	b97c      	cbnz	r4, 80176b4 <__pow5mult+0x48>
 8017694:	2010      	movs	r0, #16
 8017696:	f000 fb95 	bl	8017dc4 <malloc>
 801769a:	4602      	mov	r2, r0
 801769c:	61f8      	str	r0, [r7, #28]
 801769e:	b928      	cbnz	r0, 80176ac <__pow5mult+0x40>
 80176a0:	4b1d      	ldr	r3, [pc, #116]	@ (8017718 <__pow5mult+0xac>)
 80176a2:	481e      	ldr	r0, [pc, #120]	@ (801771c <__pow5mult+0xb0>)
 80176a4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80176a8:	f000 fb5a 	bl	8017d60 <__assert_func>
 80176ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80176b0:	6004      	str	r4, [r0, #0]
 80176b2:	60c4      	str	r4, [r0, #12]
 80176b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80176b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80176bc:	b94c      	cbnz	r4, 80176d2 <__pow5mult+0x66>
 80176be:	f240 2171 	movw	r1, #625	@ 0x271
 80176c2:	4638      	mov	r0, r7
 80176c4:	f7ff ff12 	bl	80174ec <__i2b>
 80176c8:	2300      	movs	r3, #0
 80176ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80176ce:	4604      	mov	r4, r0
 80176d0:	6003      	str	r3, [r0, #0]
 80176d2:	f04f 0900 	mov.w	r9, #0
 80176d6:	07eb      	lsls	r3, r5, #31
 80176d8:	d50a      	bpl.n	80176f0 <__pow5mult+0x84>
 80176da:	4631      	mov	r1, r6
 80176dc:	4622      	mov	r2, r4
 80176de:	4638      	mov	r0, r7
 80176e0:	f7ff ff1a 	bl	8017518 <__multiply>
 80176e4:	4631      	mov	r1, r6
 80176e6:	4680      	mov	r8, r0
 80176e8:	4638      	mov	r0, r7
 80176ea:	f7ff fe01 	bl	80172f0 <_Bfree>
 80176ee:	4646      	mov	r6, r8
 80176f0:	106d      	asrs	r5, r5, #1
 80176f2:	d00b      	beq.n	801770c <__pow5mult+0xa0>
 80176f4:	6820      	ldr	r0, [r4, #0]
 80176f6:	b938      	cbnz	r0, 8017708 <__pow5mult+0x9c>
 80176f8:	4622      	mov	r2, r4
 80176fa:	4621      	mov	r1, r4
 80176fc:	4638      	mov	r0, r7
 80176fe:	f7ff ff0b 	bl	8017518 <__multiply>
 8017702:	6020      	str	r0, [r4, #0]
 8017704:	f8c0 9000 	str.w	r9, [r0]
 8017708:	4604      	mov	r4, r0
 801770a:	e7e4      	b.n	80176d6 <__pow5mult+0x6a>
 801770c:	4630      	mov	r0, r6
 801770e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017712:	bf00      	nop
 8017714:	08018c64 	.word	0x08018c64
 8017718:	08018bf2 	.word	0x08018bf2
 801771c:	08018c09 	.word	0x08018c09

08017720 <__lshift>:
 8017720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017724:	460c      	mov	r4, r1
 8017726:	6849      	ldr	r1, [r1, #4]
 8017728:	6923      	ldr	r3, [r4, #16]
 801772a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801772e:	68a3      	ldr	r3, [r4, #8]
 8017730:	4607      	mov	r7, r0
 8017732:	4691      	mov	r9, r2
 8017734:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017738:	f108 0601 	add.w	r6, r8, #1
 801773c:	42b3      	cmp	r3, r6
 801773e:	db0b      	blt.n	8017758 <__lshift+0x38>
 8017740:	4638      	mov	r0, r7
 8017742:	f7ff fd95 	bl	8017270 <_Balloc>
 8017746:	4605      	mov	r5, r0
 8017748:	b948      	cbnz	r0, 801775e <__lshift+0x3e>
 801774a:	4602      	mov	r2, r0
 801774c:	4b28      	ldr	r3, [pc, #160]	@ (80177f0 <__lshift+0xd0>)
 801774e:	4829      	ldr	r0, [pc, #164]	@ (80177f4 <__lshift+0xd4>)
 8017750:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8017754:	f000 fb04 	bl	8017d60 <__assert_func>
 8017758:	3101      	adds	r1, #1
 801775a:	005b      	lsls	r3, r3, #1
 801775c:	e7ee      	b.n	801773c <__lshift+0x1c>
 801775e:	2300      	movs	r3, #0
 8017760:	f100 0114 	add.w	r1, r0, #20
 8017764:	f100 0210 	add.w	r2, r0, #16
 8017768:	4618      	mov	r0, r3
 801776a:	4553      	cmp	r3, sl
 801776c:	db33      	blt.n	80177d6 <__lshift+0xb6>
 801776e:	6920      	ldr	r0, [r4, #16]
 8017770:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017774:	f104 0314 	add.w	r3, r4, #20
 8017778:	f019 091f 	ands.w	r9, r9, #31
 801777c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017780:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017784:	d02b      	beq.n	80177de <__lshift+0xbe>
 8017786:	f1c9 0e20 	rsb	lr, r9, #32
 801778a:	468a      	mov	sl, r1
 801778c:	2200      	movs	r2, #0
 801778e:	6818      	ldr	r0, [r3, #0]
 8017790:	fa00 f009 	lsl.w	r0, r0, r9
 8017794:	4310      	orrs	r0, r2
 8017796:	f84a 0b04 	str.w	r0, [sl], #4
 801779a:	f853 2b04 	ldr.w	r2, [r3], #4
 801779e:	459c      	cmp	ip, r3
 80177a0:	fa22 f20e 	lsr.w	r2, r2, lr
 80177a4:	d8f3      	bhi.n	801778e <__lshift+0x6e>
 80177a6:	ebac 0304 	sub.w	r3, ip, r4
 80177aa:	3b15      	subs	r3, #21
 80177ac:	f023 0303 	bic.w	r3, r3, #3
 80177b0:	3304      	adds	r3, #4
 80177b2:	f104 0015 	add.w	r0, r4, #21
 80177b6:	4584      	cmp	ip, r0
 80177b8:	bf38      	it	cc
 80177ba:	2304      	movcc	r3, #4
 80177bc:	50ca      	str	r2, [r1, r3]
 80177be:	b10a      	cbz	r2, 80177c4 <__lshift+0xa4>
 80177c0:	f108 0602 	add.w	r6, r8, #2
 80177c4:	3e01      	subs	r6, #1
 80177c6:	4638      	mov	r0, r7
 80177c8:	612e      	str	r6, [r5, #16]
 80177ca:	4621      	mov	r1, r4
 80177cc:	f7ff fd90 	bl	80172f0 <_Bfree>
 80177d0:	4628      	mov	r0, r5
 80177d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80177d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80177da:	3301      	adds	r3, #1
 80177dc:	e7c5      	b.n	801776a <__lshift+0x4a>
 80177de:	3904      	subs	r1, #4
 80177e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80177e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80177e8:	459c      	cmp	ip, r3
 80177ea:	d8f9      	bhi.n	80177e0 <__lshift+0xc0>
 80177ec:	e7ea      	b.n	80177c4 <__lshift+0xa4>
 80177ee:	bf00      	nop
 80177f0:	08018b81 	.word	0x08018b81
 80177f4:	08018c09 	.word	0x08018c09

080177f8 <__mcmp>:
 80177f8:	690a      	ldr	r2, [r1, #16]
 80177fa:	4603      	mov	r3, r0
 80177fc:	6900      	ldr	r0, [r0, #16]
 80177fe:	1a80      	subs	r0, r0, r2
 8017800:	b530      	push	{r4, r5, lr}
 8017802:	d10e      	bne.n	8017822 <__mcmp+0x2a>
 8017804:	3314      	adds	r3, #20
 8017806:	3114      	adds	r1, #20
 8017808:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801780c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8017810:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8017814:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8017818:	4295      	cmp	r5, r2
 801781a:	d003      	beq.n	8017824 <__mcmp+0x2c>
 801781c:	d205      	bcs.n	801782a <__mcmp+0x32>
 801781e:	f04f 30ff 	mov.w	r0, #4294967295
 8017822:	bd30      	pop	{r4, r5, pc}
 8017824:	42a3      	cmp	r3, r4
 8017826:	d3f3      	bcc.n	8017810 <__mcmp+0x18>
 8017828:	e7fb      	b.n	8017822 <__mcmp+0x2a>
 801782a:	2001      	movs	r0, #1
 801782c:	e7f9      	b.n	8017822 <__mcmp+0x2a>
	...

08017830 <__mdiff>:
 8017830:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017834:	4689      	mov	r9, r1
 8017836:	4606      	mov	r6, r0
 8017838:	4611      	mov	r1, r2
 801783a:	4648      	mov	r0, r9
 801783c:	4614      	mov	r4, r2
 801783e:	f7ff ffdb 	bl	80177f8 <__mcmp>
 8017842:	1e05      	subs	r5, r0, #0
 8017844:	d112      	bne.n	801786c <__mdiff+0x3c>
 8017846:	4629      	mov	r1, r5
 8017848:	4630      	mov	r0, r6
 801784a:	f7ff fd11 	bl	8017270 <_Balloc>
 801784e:	4602      	mov	r2, r0
 8017850:	b928      	cbnz	r0, 801785e <__mdiff+0x2e>
 8017852:	4b3f      	ldr	r3, [pc, #252]	@ (8017950 <__mdiff+0x120>)
 8017854:	f240 2137 	movw	r1, #567	@ 0x237
 8017858:	483e      	ldr	r0, [pc, #248]	@ (8017954 <__mdiff+0x124>)
 801785a:	f000 fa81 	bl	8017d60 <__assert_func>
 801785e:	2301      	movs	r3, #1
 8017860:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017864:	4610      	mov	r0, r2
 8017866:	b003      	add	sp, #12
 8017868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801786c:	bfbc      	itt	lt
 801786e:	464b      	movlt	r3, r9
 8017870:	46a1      	movlt	r9, r4
 8017872:	4630      	mov	r0, r6
 8017874:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8017878:	bfba      	itte	lt
 801787a:	461c      	movlt	r4, r3
 801787c:	2501      	movlt	r5, #1
 801787e:	2500      	movge	r5, #0
 8017880:	f7ff fcf6 	bl	8017270 <_Balloc>
 8017884:	4602      	mov	r2, r0
 8017886:	b918      	cbnz	r0, 8017890 <__mdiff+0x60>
 8017888:	4b31      	ldr	r3, [pc, #196]	@ (8017950 <__mdiff+0x120>)
 801788a:	f240 2145 	movw	r1, #581	@ 0x245
 801788e:	e7e3      	b.n	8017858 <__mdiff+0x28>
 8017890:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8017894:	6926      	ldr	r6, [r4, #16]
 8017896:	60c5      	str	r5, [r0, #12]
 8017898:	f109 0310 	add.w	r3, r9, #16
 801789c:	f109 0514 	add.w	r5, r9, #20
 80178a0:	f104 0e14 	add.w	lr, r4, #20
 80178a4:	f100 0b14 	add.w	fp, r0, #20
 80178a8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80178ac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80178b0:	9301      	str	r3, [sp, #4]
 80178b2:	46d9      	mov	r9, fp
 80178b4:	f04f 0c00 	mov.w	ip, #0
 80178b8:	9b01      	ldr	r3, [sp, #4]
 80178ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 80178be:	f853 af04 	ldr.w	sl, [r3, #4]!
 80178c2:	9301      	str	r3, [sp, #4]
 80178c4:	fa1f f38a 	uxth.w	r3, sl
 80178c8:	4619      	mov	r1, r3
 80178ca:	b283      	uxth	r3, r0
 80178cc:	1acb      	subs	r3, r1, r3
 80178ce:	0c00      	lsrs	r0, r0, #16
 80178d0:	4463      	add	r3, ip
 80178d2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80178d6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80178da:	b29b      	uxth	r3, r3
 80178dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80178e0:	4576      	cmp	r6, lr
 80178e2:	f849 3b04 	str.w	r3, [r9], #4
 80178e6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80178ea:	d8e5      	bhi.n	80178b8 <__mdiff+0x88>
 80178ec:	1b33      	subs	r3, r6, r4
 80178ee:	3b15      	subs	r3, #21
 80178f0:	f023 0303 	bic.w	r3, r3, #3
 80178f4:	3415      	adds	r4, #21
 80178f6:	3304      	adds	r3, #4
 80178f8:	42a6      	cmp	r6, r4
 80178fa:	bf38      	it	cc
 80178fc:	2304      	movcc	r3, #4
 80178fe:	441d      	add	r5, r3
 8017900:	445b      	add	r3, fp
 8017902:	461e      	mov	r6, r3
 8017904:	462c      	mov	r4, r5
 8017906:	4544      	cmp	r4, r8
 8017908:	d30e      	bcc.n	8017928 <__mdiff+0xf8>
 801790a:	f108 0103 	add.w	r1, r8, #3
 801790e:	1b49      	subs	r1, r1, r5
 8017910:	f021 0103 	bic.w	r1, r1, #3
 8017914:	3d03      	subs	r5, #3
 8017916:	45a8      	cmp	r8, r5
 8017918:	bf38      	it	cc
 801791a:	2100      	movcc	r1, #0
 801791c:	440b      	add	r3, r1
 801791e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017922:	b191      	cbz	r1, 801794a <__mdiff+0x11a>
 8017924:	6117      	str	r7, [r2, #16]
 8017926:	e79d      	b.n	8017864 <__mdiff+0x34>
 8017928:	f854 1b04 	ldr.w	r1, [r4], #4
 801792c:	46e6      	mov	lr, ip
 801792e:	0c08      	lsrs	r0, r1, #16
 8017930:	fa1c fc81 	uxtah	ip, ip, r1
 8017934:	4471      	add	r1, lr
 8017936:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801793a:	b289      	uxth	r1, r1
 801793c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8017940:	f846 1b04 	str.w	r1, [r6], #4
 8017944:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8017948:	e7dd      	b.n	8017906 <__mdiff+0xd6>
 801794a:	3f01      	subs	r7, #1
 801794c:	e7e7      	b.n	801791e <__mdiff+0xee>
 801794e:	bf00      	nop
 8017950:	08018b81 	.word	0x08018b81
 8017954:	08018c09 	.word	0x08018c09

08017958 <__ulp>:
 8017958:	b082      	sub	sp, #8
 801795a:	ed8d 0b00 	vstr	d0, [sp]
 801795e:	9a01      	ldr	r2, [sp, #4]
 8017960:	4b0f      	ldr	r3, [pc, #60]	@ (80179a0 <__ulp+0x48>)
 8017962:	4013      	ands	r3, r2
 8017964:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8017968:	2b00      	cmp	r3, #0
 801796a:	dc08      	bgt.n	801797e <__ulp+0x26>
 801796c:	425b      	negs	r3, r3
 801796e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8017972:	ea4f 5223 	mov.w	r2, r3, asr #20
 8017976:	da04      	bge.n	8017982 <__ulp+0x2a>
 8017978:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801797c:	4113      	asrs	r3, r2
 801797e:	2200      	movs	r2, #0
 8017980:	e008      	b.n	8017994 <__ulp+0x3c>
 8017982:	f1a2 0314 	sub.w	r3, r2, #20
 8017986:	2b1e      	cmp	r3, #30
 8017988:	bfda      	itte	le
 801798a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801798e:	40da      	lsrle	r2, r3
 8017990:	2201      	movgt	r2, #1
 8017992:	2300      	movs	r3, #0
 8017994:	4619      	mov	r1, r3
 8017996:	4610      	mov	r0, r2
 8017998:	ec41 0b10 	vmov	d0, r0, r1
 801799c:	b002      	add	sp, #8
 801799e:	4770      	bx	lr
 80179a0:	7ff00000 	.word	0x7ff00000

080179a4 <__b2d>:
 80179a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179a8:	6906      	ldr	r6, [r0, #16]
 80179aa:	f100 0814 	add.w	r8, r0, #20
 80179ae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80179b2:	1f37      	subs	r7, r6, #4
 80179b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80179b8:	4610      	mov	r0, r2
 80179ba:	f7ff fd4b 	bl	8017454 <__hi0bits>
 80179be:	f1c0 0320 	rsb	r3, r0, #32
 80179c2:	280a      	cmp	r0, #10
 80179c4:	600b      	str	r3, [r1, #0]
 80179c6:	491b      	ldr	r1, [pc, #108]	@ (8017a34 <__b2d+0x90>)
 80179c8:	dc15      	bgt.n	80179f6 <__b2d+0x52>
 80179ca:	f1c0 0c0b 	rsb	ip, r0, #11
 80179ce:	fa22 f30c 	lsr.w	r3, r2, ip
 80179d2:	45b8      	cmp	r8, r7
 80179d4:	ea43 0501 	orr.w	r5, r3, r1
 80179d8:	bf34      	ite	cc
 80179da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80179de:	2300      	movcs	r3, #0
 80179e0:	3015      	adds	r0, #21
 80179e2:	fa02 f000 	lsl.w	r0, r2, r0
 80179e6:	fa23 f30c 	lsr.w	r3, r3, ip
 80179ea:	4303      	orrs	r3, r0
 80179ec:	461c      	mov	r4, r3
 80179ee:	ec45 4b10 	vmov	d0, r4, r5
 80179f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179f6:	45b8      	cmp	r8, r7
 80179f8:	bf3a      	itte	cc
 80179fa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80179fe:	f1a6 0708 	subcc.w	r7, r6, #8
 8017a02:	2300      	movcs	r3, #0
 8017a04:	380b      	subs	r0, #11
 8017a06:	d012      	beq.n	8017a2e <__b2d+0x8a>
 8017a08:	f1c0 0120 	rsb	r1, r0, #32
 8017a0c:	fa23 f401 	lsr.w	r4, r3, r1
 8017a10:	4082      	lsls	r2, r0
 8017a12:	4322      	orrs	r2, r4
 8017a14:	4547      	cmp	r7, r8
 8017a16:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8017a1a:	bf8c      	ite	hi
 8017a1c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8017a20:	2200      	movls	r2, #0
 8017a22:	4083      	lsls	r3, r0
 8017a24:	40ca      	lsrs	r2, r1
 8017a26:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8017a2a:	4313      	orrs	r3, r2
 8017a2c:	e7de      	b.n	80179ec <__b2d+0x48>
 8017a2e:	ea42 0501 	orr.w	r5, r2, r1
 8017a32:	e7db      	b.n	80179ec <__b2d+0x48>
 8017a34:	3ff00000 	.word	0x3ff00000

08017a38 <__d2b>:
 8017a38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017a3c:	460f      	mov	r7, r1
 8017a3e:	2101      	movs	r1, #1
 8017a40:	ec59 8b10 	vmov	r8, r9, d0
 8017a44:	4616      	mov	r6, r2
 8017a46:	f7ff fc13 	bl	8017270 <_Balloc>
 8017a4a:	4604      	mov	r4, r0
 8017a4c:	b930      	cbnz	r0, 8017a5c <__d2b+0x24>
 8017a4e:	4602      	mov	r2, r0
 8017a50:	4b23      	ldr	r3, [pc, #140]	@ (8017ae0 <__d2b+0xa8>)
 8017a52:	4824      	ldr	r0, [pc, #144]	@ (8017ae4 <__d2b+0xac>)
 8017a54:	f240 310f 	movw	r1, #783	@ 0x30f
 8017a58:	f000 f982 	bl	8017d60 <__assert_func>
 8017a5c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017a60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017a64:	b10d      	cbz	r5, 8017a6a <__d2b+0x32>
 8017a66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8017a6a:	9301      	str	r3, [sp, #4]
 8017a6c:	f1b8 0300 	subs.w	r3, r8, #0
 8017a70:	d023      	beq.n	8017aba <__d2b+0x82>
 8017a72:	4668      	mov	r0, sp
 8017a74:	9300      	str	r3, [sp, #0]
 8017a76:	f7ff fd0c 	bl	8017492 <__lo0bits>
 8017a7a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8017a7e:	b1d0      	cbz	r0, 8017ab6 <__d2b+0x7e>
 8017a80:	f1c0 0320 	rsb	r3, r0, #32
 8017a84:	fa02 f303 	lsl.w	r3, r2, r3
 8017a88:	430b      	orrs	r3, r1
 8017a8a:	40c2      	lsrs	r2, r0
 8017a8c:	6163      	str	r3, [r4, #20]
 8017a8e:	9201      	str	r2, [sp, #4]
 8017a90:	9b01      	ldr	r3, [sp, #4]
 8017a92:	61a3      	str	r3, [r4, #24]
 8017a94:	2b00      	cmp	r3, #0
 8017a96:	bf0c      	ite	eq
 8017a98:	2201      	moveq	r2, #1
 8017a9a:	2202      	movne	r2, #2
 8017a9c:	6122      	str	r2, [r4, #16]
 8017a9e:	b1a5      	cbz	r5, 8017aca <__d2b+0x92>
 8017aa0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8017aa4:	4405      	add	r5, r0
 8017aa6:	603d      	str	r5, [r7, #0]
 8017aa8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8017aac:	6030      	str	r0, [r6, #0]
 8017aae:	4620      	mov	r0, r4
 8017ab0:	b003      	add	sp, #12
 8017ab2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017ab6:	6161      	str	r1, [r4, #20]
 8017ab8:	e7ea      	b.n	8017a90 <__d2b+0x58>
 8017aba:	a801      	add	r0, sp, #4
 8017abc:	f7ff fce9 	bl	8017492 <__lo0bits>
 8017ac0:	9b01      	ldr	r3, [sp, #4]
 8017ac2:	6163      	str	r3, [r4, #20]
 8017ac4:	3020      	adds	r0, #32
 8017ac6:	2201      	movs	r2, #1
 8017ac8:	e7e8      	b.n	8017a9c <__d2b+0x64>
 8017aca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017ace:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8017ad2:	6038      	str	r0, [r7, #0]
 8017ad4:	6918      	ldr	r0, [r3, #16]
 8017ad6:	f7ff fcbd 	bl	8017454 <__hi0bits>
 8017ada:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8017ade:	e7e5      	b.n	8017aac <__d2b+0x74>
 8017ae0:	08018b81 	.word	0x08018b81
 8017ae4:	08018c09 	.word	0x08018c09

08017ae8 <__ratio>:
 8017ae8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017aec:	4688      	mov	r8, r1
 8017aee:	4669      	mov	r1, sp
 8017af0:	4681      	mov	r9, r0
 8017af2:	f7ff ff57 	bl	80179a4 <__b2d>
 8017af6:	a901      	add	r1, sp, #4
 8017af8:	4640      	mov	r0, r8
 8017afa:	ec55 4b10 	vmov	r4, r5, d0
 8017afe:	f7ff ff51 	bl	80179a4 <__b2d>
 8017b02:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8017b06:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8017b0a:	1ad2      	subs	r2, r2, r3
 8017b0c:	e9dd 3100 	ldrd	r3, r1, [sp]
 8017b10:	1a5b      	subs	r3, r3, r1
 8017b12:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8017b16:	ec57 6b10 	vmov	r6, r7, d0
 8017b1a:	2b00      	cmp	r3, #0
 8017b1c:	bfd6      	itet	le
 8017b1e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017b22:	462a      	movgt	r2, r5
 8017b24:	463a      	movle	r2, r7
 8017b26:	46ab      	mov	fp, r5
 8017b28:	46a2      	mov	sl, r4
 8017b2a:	bfce      	itee	gt
 8017b2c:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8017b30:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8017b34:	ee00 3a90 	vmovle	s1, r3
 8017b38:	ec4b ab17 	vmov	d7, sl, fp
 8017b3c:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8017b40:	b003      	add	sp, #12
 8017b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017b46 <__copybits>:
 8017b46:	3901      	subs	r1, #1
 8017b48:	b570      	push	{r4, r5, r6, lr}
 8017b4a:	1149      	asrs	r1, r1, #5
 8017b4c:	6914      	ldr	r4, [r2, #16]
 8017b4e:	3101      	adds	r1, #1
 8017b50:	f102 0314 	add.w	r3, r2, #20
 8017b54:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017b58:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017b5c:	1f05      	subs	r5, r0, #4
 8017b5e:	42a3      	cmp	r3, r4
 8017b60:	d30c      	bcc.n	8017b7c <__copybits+0x36>
 8017b62:	1aa3      	subs	r3, r4, r2
 8017b64:	3b11      	subs	r3, #17
 8017b66:	f023 0303 	bic.w	r3, r3, #3
 8017b6a:	3211      	adds	r2, #17
 8017b6c:	42a2      	cmp	r2, r4
 8017b6e:	bf88      	it	hi
 8017b70:	2300      	movhi	r3, #0
 8017b72:	4418      	add	r0, r3
 8017b74:	2300      	movs	r3, #0
 8017b76:	4288      	cmp	r0, r1
 8017b78:	d305      	bcc.n	8017b86 <__copybits+0x40>
 8017b7a:	bd70      	pop	{r4, r5, r6, pc}
 8017b7c:	f853 6b04 	ldr.w	r6, [r3], #4
 8017b80:	f845 6f04 	str.w	r6, [r5, #4]!
 8017b84:	e7eb      	b.n	8017b5e <__copybits+0x18>
 8017b86:	f840 3b04 	str.w	r3, [r0], #4
 8017b8a:	e7f4      	b.n	8017b76 <__copybits+0x30>

08017b8c <__any_on>:
 8017b8c:	f100 0214 	add.w	r2, r0, #20
 8017b90:	6900      	ldr	r0, [r0, #16]
 8017b92:	114b      	asrs	r3, r1, #5
 8017b94:	4298      	cmp	r0, r3
 8017b96:	b510      	push	{r4, lr}
 8017b98:	db11      	blt.n	8017bbe <__any_on+0x32>
 8017b9a:	dd0a      	ble.n	8017bb2 <__any_on+0x26>
 8017b9c:	f011 011f 	ands.w	r1, r1, #31
 8017ba0:	d007      	beq.n	8017bb2 <__any_on+0x26>
 8017ba2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017ba6:	fa24 f001 	lsr.w	r0, r4, r1
 8017baa:	fa00 f101 	lsl.w	r1, r0, r1
 8017bae:	428c      	cmp	r4, r1
 8017bb0:	d10b      	bne.n	8017bca <__any_on+0x3e>
 8017bb2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017bb6:	4293      	cmp	r3, r2
 8017bb8:	d803      	bhi.n	8017bc2 <__any_on+0x36>
 8017bba:	2000      	movs	r0, #0
 8017bbc:	bd10      	pop	{r4, pc}
 8017bbe:	4603      	mov	r3, r0
 8017bc0:	e7f7      	b.n	8017bb2 <__any_on+0x26>
 8017bc2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017bc6:	2900      	cmp	r1, #0
 8017bc8:	d0f5      	beq.n	8017bb6 <__any_on+0x2a>
 8017bca:	2001      	movs	r0, #1
 8017bcc:	e7f6      	b.n	8017bbc <__any_on+0x30>

08017bce <__ascii_wctomb>:
 8017bce:	4603      	mov	r3, r0
 8017bd0:	4608      	mov	r0, r1
 8017bd2:	b141      	cbz	r1, 8017be6 <__ascii_wctomb+0x18>
 8017bd4:	2aff      	cmp	r2, #255	@ 0xff
 8017bd6:	d904      	bls.n	8017be2 <__ascii_wctomb+0x14>
 8017bd8:	228a      	movs	r2, #138	@ 0x8a
 8017bda:	601a      	str	r2, [r3, #0]
 8017bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8017be0:	4770      	bx	lr
 8017be2:	700a      	strb	r2, [r1, #0]
 8017be4:	2001      	movs	r0, #1
 8017be6:	4770      	bx	lr

08017be8 <__sflush_r>:
 8017be8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017bf0:	0716      	lsls	r6, r2, #28
 8017bf2:	4605      	mov	r5, r0
 8017bf4:	460c      	mov	r4, r1
 8017bf6:	d454      	bmi.n	8017ca2 <__sflush_r+0xba>
 8017bf8:	684b      	ldr	r3, [r1, #4]
 8017bfa:	2b00      	cmp	r3, #0
 8017bfc:	dc02      	bgt.n	8017c04 <__sflush_r+0x1c>
 8017bfe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017c00:	2b00      	cmp	r3, #0
 8017c02:	dd48      	ble.n	8017c96 <__sflush_r+0xae>
 8017c04:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017c06:	2e00      	cmp	r6, #0
 8017c08:	d045      	beq.n	8017c96 <__sflush_r+0xae>
 8017c0a:	2300      	movs	r3, #0
 8017c0c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017c10:	682f      	ldr	r7, [r5, #0]
 8017c12:	6a21      	ldr	r1, [r4, #32]
 8017c14:	602b      	str	r3, [r5, #0]
 8017c16:	d030      	beq.n	8017c7a <__sflush_r+0x92>
 8017c18:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017c1a:	89a3      	ldrh	r3, [r4, #12]
 8017c1c:	0759      	lsls	r1, r3, #29
 8017c1e:	d505      	bpl.n	8017c2c <__sflush_r+0x44>
 8017c20:	6863      	ldr	r3, [r4, #4]
 8017c22:	1ad2      	subs	r2, r2, r3
 8017c24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017c26:	b10b      	cbz	r3, 8017c2c <__sflush_r+0x44>
 8017c28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017c2a:	1ad2      	subs	r2, r2, r3
 8017c2c:	2300      	movs	r3, #0
 8017c2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017c30:	6a21      	ldr	r1, [r4, #32]
 8017c32:	4628      	mov	r0, r5
 8017c34:	47b0      	blx	r6
 8017c36:	1c43      	adds	r3, r0, #1
 8017c38:	89a3      	ldrh	r3, [r4, #12]
 8017c3a:	d106      	bne.n	8017c4a <__sflush_r+0x62>
 8017c3c:	6829      	ldr	r1, [r5, #0]
 8017c3e:	291d      	cmp	r1, #29
 8017c40:	d82b      	bhi.n	8017c9a <__sflush_r+0xb2>
 8017c42:	4a2a      	ldr	r2, [pc, #168]	@ (8017cec <__sflush_r+0x104>)
 8017c44:	410a      	asrs	r2, r1
 8017c46:	07d6      	lsls	r6, r2, #31
 8017c48:	d427      	bmi.n	8017c9a <__sflush_r+0xb2>
 8017c4a:	2200      	movs	r2, #0
 8017c4c:	6062      	str	r2, [r4, #4]
 8017c4e:	04d9      	lsls	r1, r3, #19
 8017c50:	6922      	ldr	r2, [r4, #16]
 8017c52:	6022      	str	r2, [r4, #0]
 8017c54:	d504      	bpl.n	8017c60 <__sflush_r+0x78>
 8017c56:	1c42      	adds	r2, r0, #1
 8017c58:	d101      	bne.n	8017c5e <__sflush_r+0x76>
 8017c5a:	682b      	ldr	r3, [r5, #0]
 8017c5c:	b903      	cbnz	r3, 8017c60 <__sflush_r+0x78>
 8017c5e:	6560      	str	r0, [r4, #84]	@ 0x54
 8017c60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017c62:	602f      	str	r7, [r5, #0]
 8017c64:	b1b9      	cbz	r1, 8017c96 <__sflush_r+0xae>
 8017c66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017c6a:	4299      	cmp	r1, r3
 8017c6c:	d002      	beq.n	8017c74 <__sflush_r+0x8c>
 8017c6e:	4628      	mov	r0, r5
 8017c70:	f7fe feba 	bl	80169e8 <_free_r>
 8017c74:	2300      	movs	r3, #0
 8017c76:	6363      	str	r3, [r4, #52]	@ 0x34
 8017c78:	e00d      	b.n	8017c96 <__sflush_r+0xae>
 8017c7a:	2301      	movs	r3, #1
 8017c7c:	4628      	mov	r0, r5
 8017c7e:	47b0      	blx	r6
 8017c80:	4602      	mov	r2, r0
 8017c82:	1c50      	adds	r0, r2, #1
 8017c84:	d1c9      	bne.n	8017c1a <__sflush_r+0x32>
 8017c86:	682b      	ldr	r3, [r5, #0]
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d0c6      	beq.n	8017c1a <__sflush_r+0x32>
 8017c8c:	2b1d      	cmp	r3, #29
 8017c8e:	d001      	beq.n	8017c94 <__sflush_r+0xac>
 8017c90:	2b16      	cmp	r3, #22
 8017c92:	d11e      	bne.n	8017cd2 <__sflush_r+0xea>
 8017c94:	602f      	str	r7, [r5, #0]
 8017c96:	2000      	movs	r0, #0
 8017c98:	e022      	b.n	8017ce0 <__sflush_r+0xf8>
 8017c9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017c9e:	b21b      	sxth	r3, r3
 8017ca0:	e01b      	b.n	8017cda <__sflush_r+0xf2>
 8017ca2:	690f      	ldr	r7, [r1, #16]
 8017ca4:	2f00      	cmp	r7, #0
 8017ca6:	d0f6      	beq.n	8017c96 <__sflush_r+0xae>
 8017ca8:	0793      	lsls	r3, r2, #30
 8017caa:	680e      	ldr	r6, [r1, #0]
 8017cac:	bf08      	it	eq
 8017cae:	694b      	ldreq	r3, [r1, #20]
 8017cb0:	600f      	str	r7, [r1, #0]
 8017cb2:	bf18      	it	ne
 8017cb4:	2300      	movne	r3, #0
 8017cb6:	eba6 0807 	sub.w	r8, r6, r7
 8017cba:	608b      	str	r3, [r1, #8]
 8017cbc:	f1b8 0f00 	cmp.w	r8, #0
 8017cc0:	dde9      	ble.n	8017c96 <__sflush_r+0xae>
 8017cc2:	6a21      	ldr	r1, [r4, #32]
 8017cc4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017cc6:	4643      	mov	r3, r8
 8017cc8:	463a      	mov	r2, r7
 8017cca:	4628      	mov	r0, r5
 8017ccc:	47b0      	blx	r6
 8017cce:	2800      	cmp	r0, #0
 8017cd0:	dc08      	bgt.n	8017ce4 <__sflush_r+0xfc>
 8017cd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017cd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017cda:	81a3      	strh	r3, [r4, #12]
 8017cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8017ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ce4:	4407      	add	r7, r0
 8017ce6:	eba8 0800 	sub.w	r8, r8, r0
 8017cea:	e7e7      	b.n	8017cbc <__sflush_r+0xd4>
 8017cec:	dfbffffe 	.word	0xdfbffffe

08017cf0 <_fflush_r>:
 8017cf0:	b538      	push	{r3, r4, r5, lr}
 8017cf2:	690b      	ldr	r3, [r1, #16]
 8017cf4:	4605      	mov	r5, r0
 8017cf6:	460c      	mov	r4, r1
 8017cf8:	b913      	cbnz	r3, 8017d00 <_fflush_r+0x10>
 8017cfa:	2500      	movs	r5, #0
 8017cfc:	4628      	mov	r0, r5
 8017cfe:	bd38      	pop	{r3, r4, r5, pc}
 8017d00:	b118      	cbz	r0, 8017d0a <_fflush_r+0x1a>
 8017d02:	6a03      	ldr	r3, [r0, #32]
 8017d04:	b90b      	cbnz	r3, 8017d0a <_fflush_r+0x1a>
 8017d06:	f7fe fd45 	bl	8016794 <__sinit>
 8017d0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017d0e:	2b00      	cmp	r3, #0
 8017d10:	d0f3      	beq.n	8017cfa <_fflush_r+0xa>
 8017d12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017d14:	07d0      	lsls	r0, r2, #31
 8017d16:	d404      	bmi.n	8017d22 <_fflush_r+0x32>
 8017d18:	0599      	lsls	r1, r3, #22
 8017d1a:	d402      	bmi.n	8017d22 <_fflush_r+0x32>
 8017d1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017d1e:	f7fe fe4a 	bl	80169b6 <__retarget_lock_acquire_recursive>
 8017d22:	4628      	mov	r0, r5
 8017d24:	4621      	mov	r1, r4
 8017d26:	f7ff ff5f 	bl	8017be8 <__sflush_r>
 8017d2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017d2c:	07da      	lsls	r2, r3, #31
 8017d2e:	4605      	mov	r5, r0
 8017d30:	d4e4      	bmi.n	8017cfc <_fflush_r+0xc>
 8017d32:	89a3      	ldrh	r3, [r4, #12]
 8017d34:	059b      	lsls	r3, r3, #22
 8017d36:	d4e1      	bmi.n	8017cfc <_fflush_r+0xc>
 8017d38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017d3a:	f7fe fe3d 	bl	80169b8 <__retarget_lock_release_recursive>
 8017d3e:	e7dd      	b.n	8017cfc <_fflush_r+0xc>

08017d40 <_sbrk_r>:
 8017d40:	b538      	push	{r3, r4, r5, lr}
 8017d42:	4d06      	ldr	r5, [pc, #24]	@ (8017d5c <_sbrk_r+0x1c>)
 8017d44:	2300      	movs	r3, #0
 8017d46:	4604      	mov	r4, r0
 8017d48:	4608      	mov	r0, r1
 8017d4a:	602b      	str	r3, [r5, #0]
 8017d4c:	f7ea fb1a 	bl	8002384 <_sbrk>
 8017d50:	1c43      	adds	r3, r0, #1
 8017d52:	d102      	bne.n	8017d5a <_sbrk_r+0x1a>
 8017d54:	682b      	ldr	r3, [r5, #0]
 8017d56:	b103      	cbz	r3, 8017d5a <_sbrk_r+0x1a>
 8017d58:	6023      	str	r3, [r4, #0]
 8017d5a:	bd38      	pop	{r3, r4, r5, pc}
 8017d5c:	240067e4 	.word	0x240067e4

08017d60 <__assert_func>:
 8017d60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017d62:	4614      	mov	r4, r2
 8017d64:	461a      	mov	r2, r3
 8017d66:	4b09      	ldr	r3, [pc, #36]	@ (8017d8c <__assert_func+0x2c>)
 8017d68:	681b      	ldr	r3, [r3, #0]
 8017d6a:	4605      	mov	r5, r0
 8017d6c:	68d8      	ldr	r0, [r3, #12]
 8017d6e:	b954      	cbnz	r4, 8017d86 <__assert_func+0x26>
 8017d70:	4b07      	ldr	r3, [pc, #28]	@ (8017d90 <__assert_func+0x30>)
 8017d72:	461c      	mov	r4, r3
 8017d74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017d78:	9100      	str	r1, [sp, #0]
 8017d7a:	462b      	mov	r3, r5
 8017d7c:	4905      	ldr	r1, [pc, #20]	@ (8017d94 <__assert_func+0x34>)
 8017d7e:	f000 f829 	bl	8017dd4 <fiprintf>
 8017d82:	f000 f839 	bl	8017df8 <abort>
 8017d86:	4b04      	ldr	r3, [pc, #16]	@ (8017d98 <__assert_func+0x38>)
 8017d88:	e7f4      	b.n	8017d74 <__assert_func+0x14>
 8017d8a:	bf00      	nop
 8017d8c:	24000240 	.word	0x24000240
 8017d90:	08018d9b 	.word	0x08018d9b
 8017d94:	08018d6d 	.word	0x08018d6d
 8017d98:	08018d60 	.word	0x08018d60

08017d9c <_calloc_r>:
 8017d9c:	b570      	push	{r4, r5, r6, lr}
 8017d9e:	fba1 5402 	umull	r5, r4, r1, r2
 8017da2:	b93c      	cbnz	r4, 8017db4 <_calloc_r+0x18>
 8017da4:	4629      	mov	r1, r5
 8017da6:	f7ff f9c5 	bl	8017134 <_malloc_r>
 8017daa:	4606      	mov	r6, r0
 8017dac:	b928      	cbnz	r0, 8017dba <_calloc_r+0x1e>
 8017dae:	2600      	movs	r6, #0
 8017db0:	4630      	mov	r0, r6
 8017db2:	bd70      	pop	{r4, r5, r6, pc}
 8017db4:	220c      	movs	r2, #12
 8017db6:	6002      	str	r2, [r0, #0]
 8017db8:	e7f9      	b.n	8017dae <_calloc_r+0x12>
 8017dba:	462a      	mov	r2, r5
 8017dbc:	4621      	mov	r1, r4
 8017dbe:	f7fe fd62 	bl	8016886 <memset>
 8017dc2:	e7f5      	b.n	8017db0 <_calloc_r+0x14>

08017dc4 <malloc>:
 8017dc4:	4b02      	ldr	r3, [pc, #8]	@ (8017dd0 <malloc+0xc>)
 8017dc6:	4601      	mov	r1, r0
 8017dc8:	6818      	ldr	r0, [r3, #0]
 8017dca:	f7ff b9b3 	b.w	8017134 <_malloc_r>
 8017dce:	bf00      	nop
 8017dd0:	24000240 	.word	0x24000240

08017dd4 <fiprintf>:
 8017dd4:	b40e      	push	{r1, r2, r3}
 8017dd6:	b503      	push	{r0, r1, lr}
 8017dd8:	4601      	mov	r1, r0
 8017dda:	ab03      	add	r3, sp, #12
 8017ddc:	4805      	ldr	r0, [pc, #20]	@ (8017df4 <fiprintf+0x20>)
 8017dde:	f853 2b04 	ldr.w	r2, [r3], #4
 8017de2:	6800      	ldr	r0, [r0, #0]
 8017de4:	9301      	str	r3, [sp, #4]
 8017de6:	f000 f837 	bl	8017e58 <_vfiprintf_r>
 8017dea:	b002      	add	sp, #8
 8017dec:	f85d eb04 	ldr.w	lr, [sp], #4
 8017df0:	b003      	add	sp, #12
 8017df2:	4770      	bx	lr
 8017df4:	24000240 	.word	0x24000240

08017df8 <abort>:
 8017df8:	b508      	push	{r3, lr}
 8017dfa:	2006      	movs	r0, #6
 8017dfc:	f000 fb8e 	bl	801851c <raise>
 8017e00:	2001      	movs	r0, #1
 8017e02:	f7ea fa47 	bl	8002294 <_exit>

08017e06 <__sfputc_r>:
 8017e06:	6893      	ldr	r3, [r2, #8]
 8017e08:	3b01      	subs	r3, #1
 8017e0a:	2b00      	cmp	r3, #0
 8017e0c:	b410      	push	{r4}
 8017e0e:	6093      	str	r3, [r2, #8]
 8017e10:	da08      	bge.n	8017e24 <__sfputc_r+0x1e>
 8017e12:	6994      	ldr	r4, [r2, #24]
 8017e14:	42a3      	cmp	r3, r4
 8017e16:	db01      	blt.n	8017e1c <__sfputc_r+0x16>
 8017e18:	290a      	cmp	r1, #10
 8017e1a:	d103      	bne.n	8017e24 <__sfputc_r+0x1e>
 8017e1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017e20:	f000 bac0 	b.w	80183a4 <__swbuf_r>
 8017e24:	6813      	ldr	r3, [r2, #0]
 8017e26:	1c58      	adds	r0, r3, #1
 8017e28:	6010      	str	r0, [r2, #0]
 8017e2a:	7019      	strb	r1, [r3, #0]
 8017e2c:	4608      	mov	r0, r1
 8017e2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017e32:	4770      	bx	lr

08017e34 <__sfputs_r>:
 8017e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e36:	4606      	mov	r6, r0
 8017e38:	460f      	mov	r7, r1
 8017e3a:	4614      	mov	r4, r2
 8017e3c:	18d5      	adds	r5, r2, r3
 8017e3e:	42ac      	cmp	r4, r5
 8017e40:	d101      	bne.n	8017e46 <__sfputs_r+0x12>
 8017e42:	2000      	movs	r0, #0
 8017e44:	e007      	b.n	8017e56 <__sfputs_r+0x22>
 8017e46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e4a:	463a      	mov	r2, r7
 8017e4c:	4630      	mov	r0, r6
 8017e4e:	f7ff ffda 	bl	8017e06 <__sfputc_r>
 8017e52:	1c43      	adds	r3, r0, #1
 8017e54:	d1f3      	bne.n	8017e3e <__sfputs_r+0xa>
 8017e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017e58 <_vfiprintf_r>:
 8017e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e5c:	460d      	mov	r5, r1
 8017e5e:	b09d      	sub	sp, #116	@ 0x74
 8017e60:	4614      	mov	r4, r2
 8017e62:	4698      	mov	r8, r3
 8017e64:	4606      	mov	r6, r0
 8017e66:	b118      	cbz	r0, 8017e70 <_vfiprintf_r+0x18>
 8017e68:	6a03      	ldr	r3, [r0, #32]
 8017e6a:	b90b      	cbnz	r3, 8017e70 <_vfiprintf_r+0x18>
 8017e6c:	f7fe fc92 	bl	8016794 <__sinit>
 8017e70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017e72:	07d9      	lsls	r1, r3, #31
 8017e74:	d405      	bmi.n	8017e82 <_vfiprintf_r+0x2a>
 8017e76:	89ab      	ldrh	r3, [r5, #12]
 8017e78:	059a      	lsls	r2, r3, #22
 8017e7a:	d402      	bmi.n	8017e82 <_vfiprintf_r+0x2a>
 8017e7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017e7e:	f7fe fd9a 	bl	80169b6 <__retarget_lock_acquire_recursive>
 8017e82:	89ab      	ldrh	r3, [r5, #12]
 8017e84:	071b      	lsls	r3, r3, #28
 8017e86:	d501      	bpl.n	8017e8c <_vfiprintf_r+0x34>
 8017e88:	692b      	ldr	r3, [r5, #16]
 8017e8a:	b99b      	cbnz	r3, 8017eb4 <_vfiprintf_r+0x5c>
 8017e8c:	4629      	mov	r1, r5
 8017e8e:	4630      	mov	r0, r6
 8017e90:	f000 fac6 	bl	8018420 <__swsetup_r>
 8017e94:	b170      	cbz	r0, 8017eb4 <_vfiprintf_r+0x5c>
 8017e96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017e98:	07dc      	lsls	r4, r3, #31
 8017e9a:	d504      	bpl.n	8017ea6 <_vfiprintf_r+0x4e>
 8017e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8017ea0:	b01d      	add	sp, #116	@ 0x74
 8017ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ea6:	89ab      	ldrh	r3, [r5, #12]
 8017ea8:	0598      	lsls	r0, r3, #22
 8017eaa:	d4f7      	bmi.n	8017e9c <_vfiprintf_r+0x44>
 8017eac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017eae:	f7fe fd83 	bl	80169b8 <__retarget_lock_release_recursive>
 8017eb2:	e7f3      	b.n	8017e9c <_vfiprintf_r+0x44>
 8017eb4:	2300      	movs	r3, #0
 8017eb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8017eb8:	2320      	movs	r3, #32
 8017eba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017ebe:	f8cd 800c 	str.w	r8, [sp, #12]
 8017ec2:	2330      	movs	r3, #48	@ 0x30
 8017ec4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018074 <_vfiprintf_r+0x21c>
 8017ec8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017ecc:	f04f 0901 	mov.w	r9, #1
 8017ed0:	4623      	mov	r3, r4
 8017ed2:	469a      	mov	sl, r3
 8017ed4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017ed8:	b10a      	cbz	r2, 8017ede <_vfiprintf_r+0x86>
 8017eda:	2a25      	cmp	r2, #37	@ 0x25
 8017edc:	d1f9      	bne.n	8017ed2 <_vfiprintf_r+0x7a>
 8017ede:	ebba 0b04 	subs.w	fp, sl, r4
 8017ee2:	d00b      	beq.n	8017efc <_vfiprintf_r+0xa4>
 8017ee4:	465b      	mov	r3, fp
 8017ee6:	4622      	mov	r2, r4
 8017ee8:	4629      	mov	r1, r5
 8017eea:	4630      	mov	r0, r6
 8017eec:	f7ff ffa2 	bl	8017e34 <__sfputs_r>
 8017ef0:	3001      	adds	r0, #1
 8017ef2:	f000 80a7 	beq.w	8018044 <_vfiprintf_r+0x1ec>
 8017ef6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017ef8:	445a      	add	r2, fp
 8017efa:	9209      	str	r2, [sp, #36]	@ 0x24
 8017efc:	f89a 3000 	ldrb.w	r3, [sl]
 8017f00:	2b00      	cmp	r3, #0
 8017f02:	f000 809f 	beq.w	8018044 <_vfiprintf_r+0x1ec>
 8017f06:	2300      	movs	r3, #0
 8017f08:	f04f 32ff 	mov.w	r2, #4294967295
 8017f0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017f10:	f10a 0a01 	add.w	sl, sl, #1
 8017f14:	9304      	str	r3, [sp, #16]
 8017f16:	9307      	str	r3, [sp, #28]
 8017f18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017f1c:	931a      	str	r3, [sp, #104]	@ 0x68
 8017f1e:	4654      	mov	r4, sl
 8017f20:	2205      	movs	r2, #5
 8017f22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017f26:	4853      	ldr	r0, [pc, #332]	@ (8018074 <_vfiprintf_r+0x21c>)
 8017f28:	f7e8 f9f2 	bl	8000310 <memchr>
 8017f2c:	9a04      	ldr	r2, [sp, #16]
 8017f2e:	b9d8      	cbnz	r0, 8017f68 <_vfiprintf_r+0x110>
 8017f30:	06d1      	lsls	r1, r2, #27
 8017f32:	bf44      	itt	mi
 8017f34:	2320      	movmi	r3, #32
 8017f36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017f3a:	0713      	lsls	r3, r2, #28
 8017f3c:	bf44      	itt	mi
 8017f3e:	232b      	movmi	r3, #43	@ 0x2b
 8017f40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017f44:	f89a 3000 	ldrb.w	r3, [sl]
 8017f48:	2b2a      	cmp	r3, #42	@ 0x2a
 8017f4a:	d015      	beq.n	8017f78 <_vfiprintf_r+0x120>
 8017f4c:	9a07      	ldr	r2, [sp, #28]
 8017f4e:	4654      	mov	r4, sl
 8017f50:	2000      	movs	r0, #0
 8017f52:	f04f 0c0a 	mov.w	ip, #10
 8017f56:	4621      	mov	r1, r4
 8017f58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017f5c:	3b30      	subs	r3, #48	@ 0x30
 8017f5e:	2b09      	cmp	r3, #9
 8017f60:	d94b      	bls.n	8017ffa <_vfiprintf_r+0x1a2>
 8017f62:	b1b0      	cbz	r0, 8017f92 <_vfiprintf_r+0x13a>
 8017f64:	9207      	str	r2, [sp, #28]
 8017f66:	e014      	b.n	8017f92 <_vfiprintf_r+0x13a>
 8017f68:	eba0 0308 	sub.w	r3, r0, r8
 8017f6c:	fa09 f303 	lsl.w	r3, r9, r3
 8017f70:	4313      	orrs	r3, r2
 8017f72:	9304      	str	r3, [sp, #16]
 8017f74:	46a2      	mov	sl, r4
 8017f76:	e7d2      	b.n	8017f1e <_vfiprintf_r+0xc6>
 8017f78:	9b03      	ldr	r3, [sp, #12]
 8017f7a:	1d19      	adds	r1, r3, #4
 8017f7c:	681b      	ldr	r3, [r3, #0]
 8017f7e:	9103      	str	r1, [sp, #12]
 8017f80:	2b00      	cmp	r3, #0
 8017f82:	bfbb      	ittet	lt
 8017f84:	425b      	neglt	r3, r3
 8017f86:	f042 0202 	orrlt.w	r2, r2, #2
 8017f8a:	9307      	strge	r3, [sp, #28]
 8017f8c:	9307      	strlt	r3, [sp, #28]
 8017f8e:	bfb8      	it	lt
 8017f90:	9204      	strlt	r2, [sp, #16]
 8017f92:	7823      	ldrb	r3, [r4, #0]
 8017f94:	2b2e      	cmp	r3, #46	@ 0x2e
 8017f96:	d10a      	bne.n	8017fae <_vfiprintf_r+0x156>
 8017f98:	7863      	ldrb	r3, [r4, #1]
 8017f9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8017f9c:	d132      	bne.n	8018004 <_vfiprintf_r+0x1ac>
 8017f9e:	9b03      	ldr	r3, [sp, #12]
 8017fa0:	1d1a      	adds	r2, r3, #4
 8017fa2:	681b      	ldr	r3, [r3, #0]
 8017fa4:	9203      	str	r2, [sp, #12]
 8017fa6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017faa:	3402      	adds	r4, #2
 8017fac:	9305      	str	r3, [sp, #20]
 8017fae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018084 <_vfiprintf_r+0x22c>
 8017fb2:	7821      	ldrb	r1, [r4, #0]
 8017fb4:	2203      	movs	r2, #3
 8017fb6:	4650      	mov	r0, sl
 8017fb8:	f7e8 f9aa 	bl	8000310 <memchr>
 8017fbc:	b138      	cbz	r0, 8017fce <_vfiprintf_r+0x176>
 8017fbe:	9b04      	ldr	r3, [sp, #16]
 8017fc0:	eba0 000a 	sub.w	r0, r0, sl
 8017fc4:	2240      	movs	r2, #64	@ 0x40
 8017fc6:	4082      	lsls	r2, r0
 8017fc8:	4313      	orrs	r3, r2
 8017fca:	3401      	adds	r4, #1
 8017fcc:	9304      	str	r3, [sp, #16]
 8017fce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017fd2:	4829      	ldr	r0, [pc, #164]	@ (8018078 <_vfiprintf_r+0x220>)
 8017fd4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017fd8:	2206      	movs	r2, #6
 8017fda:	f7e8 f999 	bl	8000310 <memchr>
 8017fde:	2800      	cmp	r0, #0
 8017fe0:	d03f      	beq.n	8018062 <_vfiprintf_r+0x20a>
 8017fe2:	4b26      	ldr	r3, [pc, #152]	@ (801807c <_vfiprintf_r+0x224>)
 8017fe4:	bb1b      	cbnz	r3, 801802e <_vfiprintf_r+0x1d6>
 8017fe6:	9b03      	ldr	r3, [sp, #12]
 8017fe8:	3307      	adds	r3, #7
 8017fea:	f023 0307 	bic.w	r3, r3, #7
 8017fee:	3308      	adds	r3, #8
 8017ff0:	9303      	str	r3, [sp, #12]
 8017ff2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017ff4:	443b      	add	r3, r7
 8017ff6:	9309      	str	r3, [sp, #36]	@ 0x24
 8017ff8:	e76a      	b.n	8017ed0 <_vfiprintf_r+0x78>
 8017ffa:	fb0c 3202 	mla	r2, ip, r2, r3
 8017ffe:	460c      	mov	r4, r1
 8018000:	2001      	movs	r0, #1
 8018002:	e7a8      	b.n	8017f56 <_vfiprintf_r+0xfe>
 8018004:	2300      	movs	r3, #0
 8018006:	3401      	adds	r4, #1
 8018008:	9305      	str	r3, [sp, #20]
 801800a:	4619      	mov	r1, r3
 801800c:	f04f 0c0a 	mov.w	ip, #10
 8018010:	4620      	mov	r0, r4
 8018012:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018016:	3a30      	subs	r2, #48	@ 0x30
 8018018:	2a09      	cmp	r2, #9
 801801a:	d903      	bls.n	8018024 <_vfiprintf_r+0x1cc>
 801801c:	2b00      	cmp	r3, #0
 801801e:	d0c6      	beq.n	8017fae <_vfiprintf_r+0x156>
 8018020:	9105      	str	r1, [sp, #20]
 8018022:	e7c4      	b.n	8017fae <_vfiprintf_r+0x156>
 8018024:	fb0c 2101 	mla	r1, ip, r1, r2
 8018028:	4604      	mov	r4, r0
 801802a:	2301      	movs	r3, #1
 801802c:	e7f0      	b.n	8018010 <_vfiprintf_r+0x1b8>
 801802e:	ab03      	add	r3, sp, #12
 8018030:	9300      	str	r3, [sp, #0]
 8018032:	462a      	mov	r2, r5
 8018034:	4b12      	ldr	r3, [pc, #72]	@ (8018080 <_vfiprintf_r+0x228>)
 8018036:	a904      	add	r1, sp, #16
 8018038:	4630      	mov	r0, r6
 801803a:	f3af 8000 	nop.w
 801803e:	4607      	mov	r7, r0
 8018040:	1c78      	adds	r0, r7, #1
 8018042:	d1d6      	bne.n	8017ff2 <_vfiprintf_r+0x19a>
 8018044:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018046:	07d9      	lsls	r1, r3, #31
 8018048:	d405      	bmi.n	8018056 <_vfiprintf_r+0x1fe>
 801804a:	89ab      	ldrh	r3, [r5, #12]
 801804c:	059a      	lsls	r2, r3, #22
 801804e:	d402      	bmi.n	8018056 <_vfiprintf_r+0x1fe>
 8018050:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018052:	f7fe fcb1 	bl	80169b8 <__retarget_lock_release_recursive>
 8018056:	89ab      	ldrh	r3, [r5, #12]
 8018058:	065b      	lsls	r3, r3, #25
 801805a:	f53f af1f 	bmi.w	8017e9c <_vfiprintf_r+0x44>
 801805e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018060:	e71e      	b.n	8017ea0 <_vfiprintf_r+0x48>
 8018062:	ab03      	add	r3, sp, #12
 8018064:	9300      	str	r3, [sp, #0]
 8018066:	462a      	mov	r2, r5
 8018068:	4b05      	ldr	r3, [pc, #20]	@ (8018080 <_vfiprintf_r+0x228>)
 801806a:	a904      	add	r1, sp, #16
 801806c:	4630      	mov	r0, r6
 801806e:	f000 f879 	bl	8018164 <_printf_i>
 8018072:	e7e4      	b.n	801803e <_vfiprintf_r+0x1e6>
 8018074:	08018d9c 	.word	0x08018d9c
 8018078:	08018da6 	.word	0x08018da6
 801807c:	00000000 	.word	0x00000000
 8018080:	08017e35 	.word	0x08017e35
 8018084:	08018da2 	.word	0x08018da2

08018088 <_printf_common>:
 8018088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801808c:	4616      	mov	r6, r2
 801808e:	4698      	mov	r8, r3
 8018090:	688a      	ldr	r2, [r1, #8]
 8018092:	690b      	ldr	r3, [r1, #16]
 8018094:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018098:	4293      	cmp	r3, r2
 801809a:	bfb8      	it	lt
 801809c:	4613      	movlt	r3, r2
 801809e:	6033      	str	r3, [r6, #0]
 80180a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80180a4:	4607      	mov	r7, r0
 80180a6:	460c      	mov	r4, r1
 80180a8:	b10a      	cbz	r2, 80180ae <_printf_common+0x26>
 80180aa:	3301      	adds	r3, #1
 80180ac:	6033      	str	r3, [r6, #0]
 80180ae:	6823      	ldr	r3, [r4, #0]
 80180b0:	0699      	lsls	r1, r3, #26
 80180b2:	bf42      	ittt	mi
 80180b4:	6833      	ldrmi	r3, [r6, #0]
 80180b6:	3302      	addmi	r3, #2
 80180b8:	6033      	strmi	r3, [r6, #0]
 80180ba:	6825      	ldr	r5, [r4, #0]
 80180bc:	f015 0506 	ands.w	r5, r5, #6
 80180c0:	d106      	bne.n	80180d0 <_printf_common+0x48>
 80180c2:	f104 0a19 	add.w	sl, r4, #25
 80180c6:	68e3      	ldr	r3, [r4, #12]
 80180c8:	6832      	ldr	r2, [r6, #0]
 80180ca:	1a9b      	subs	r3, r3, r2
 80180cc:	42ab      	cmp	r3, r5
 80180ce:	dc26      	bgt.n	801811e <_printf_common+0x96>
 80180d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80180d4:	6822      	ldr	r2, [r4, #0]
 80180d6:	3b00      	subs	r3, #0
 80180d8:	bf18      	it	ne
 80180da:	2301      	movne	r3, #1
 80180dc:	0692      	lsls	r2, r2, #26
 80180de:	d42b      	bmi.n	8018138 <_printf_common+0xb0>
 80180e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80180e4:	4641      	mov	r1, r8
 80180e6:	4638      	mov	r0, r7
 80180e8:	47c8      	blx	r9
 80180ea:	3001      	adds	r0, #1
 80180ec:	d01e      	beq.n	801812c <_printf_common+0xa4>
 80180ee:	6823      	ldr	r3, [r4, #0]
 80180f0:	6922      	ldr	r2, [r4, #16]
 80180f2:	f003 0306 	and.w	r3, r3, #6
 80180f6:	2b04      	cmp	r3, #4
 80180f8:	bf02      	ittt	eq
 80180fa:	68e5      	ldreq	r5, [r4, #12]
 80180fc:	6833      	ldreq	r3, [r6, #0]
 80180fe:	1aed      	subeq	r5, r5, r3
 8018100:	68a3      	ldr	r3, [r4, #8]
 8018102:	bf0c      	ite	eq
 8018104:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018108:	2500      	movne	r5, #0
 801810a:	4293      	cmp	r3, r2
 801810c:	bfc4      	itt	gt
 801810e:	1a9b      	subgt	r3, r3, r2
 8018110:	18ed      	addgt	r5, r5, r3
 8018112:	2600      	movs	r6, #0
 8018114:	341a      	adds	r4, #26
 8018116:	42b5      	cmp	r5, r6
 8018118:	d11a      	bne.n	8018150 <_printf_common+0xc8>
 801811a:	2000      	movs	r0, #0
 801811c:	e008      	b.n	8018130 <_printf_common+0xa8>
 801811e:	2301      	movs	r3, #1
 8018120:	4652      	mov	r2, sl
 8018122:	4641      	mov	r1, r8
 8018124:	4638      	mov	r0, r7
 8018126:	47c8      	blx	r9
 8018128:	3001      	adds	r0, #1
 801812a:	d103      	bne.n	8018134 <_printf_common+0xac>
 801812c:	f04f 30ff 	mov.w	r0, #4294967295
 8018130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018134:	3501      	adds	r5, #1
 8018136:	e7c6      	b.n	80180c6 <_printf_common+0x3e>
 8018138:	18e1      	adds	r1, r4, r3
 801813a:	1c5a      	adds	r2, r3, #1
 801813c:	2030      	movs	r0, #48	@ 0x30
 801813e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8018142:	4422      	add	r2, r4
 8018144:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8018148:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801814c:	3302      	adds	r3, #2
 801814e:	e7c7      	b.n	80180e0 <_printf_common+0x58>
 8018150:	2301      	movs	r3, #1
 8018152:	4622      	mov	r2, r4
 8018154:	4641      	mov	r1, r8
 8018156:	4638      	mov	r0, r7
 8018158:	47c8      	blx	r9
 801815a:	3001      	adds	r0, #1
 801815c:	d0e6      	beq.n	801812c <_printf_common+0xa4>
 801815e:	3601      	adds	r6, #1
 8018160:	e7d9      	b.n	8018116 <_printf_common+0x8e>
	...

08018164 <_printf_i>:
 8018164:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018168:	7e0f      	ldrb	r7, [r1, #24]
 801816a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801816c:	2f78      	cmp	r7, #120	@ 0x78
 801816e:	4691      	mov	r9, r2
 8018170:	4680      	mov	r8, r0
 8018172:	460c      	mov	r4, r1
 8018174:	469a      	mov	sl, r3
 8018176:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801817a:	d807      	bhi.n	801818c <_printf_i+0x28>
 801817c:	2f62      	cmp	r7, #98	@ 0x62
 801817e:	d80a      	bhi.n	8018196 <_printf_i+0x32>
 8018180:	2f00      	cmp	r7, #0
 8018182:	f000 80d2 	beq.w	801832a <_printf_i+0x1c6>
 8018186:	2f58      	cmp	r7, #88	@ 0x58
 8018188:	f000 80b9 	beq.w	80182fe <_printf_i+0x19a>
 801818c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018190:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8018194:	e03a      	b.n	801820c <_printf_i+0xa8>
 8018196:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801819a:	2b15      	cmp	r3, #21
 801819c:	d8f6      	bhi.n	801818c <_printf_i+0x28>
 801819e:	a101      	add	r1, pc, #4	@ (adr r1, 80181a4 <_printf_i+0x40>)
 80181a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80181a4:	080181fd 	.word	0x080181fd
 80181a8:	08018211 	.word	0x08018211
 80181ac:	0801818d 	.word	0x0801818d
 80181b0:	0801818d 	.word	0x0801818d
 80181b4:	0801818d 	.word	0x0801818d
 80181b8:	0801818d 	.word	0x0801818d
 80181bc:	08018211 	.word	0x08018211
 80181c0:	0801818d 	.word	0x0801818d
 80181c4:	0801818d 	.word	0x0801818d
 80181c8:	0801818d 	.word	0x0801818d
 80181cc:	0801818d 	.word	0x0801818d
 80181d0:	08018311 	.word	0x08018311
 80181d4:	0801823b 	.word	0x0801823b
 80181d8:	080182cb 	.word	0x080182cb
 80181dc:	0801818d 	.word	0x0801818d
 80181e0:	0801818d 	.word	0x0801818d
 80181e4:	08018333 	.word	0x08018333
 80181e8:	0801818d 	.word	0x0801818d
 80181ec:	0801823b 	.word	0x0801823b
 80181f0:	0801818d 	.word	0x0801818d
 80181f4:	0801818d 	.word	0x0801818d
 80181f8:	080182d3 	.word	0x080182d3
 80181fc:	6833      	ldr	r3, [r6, #0]
 80181fe:	1d1a      	adds	r2, r3, #4
 8018200:	681b      	ldr	r3, [r3, #0]
 8018202:	6032      	str	r2, [r6, #0]
 8018204:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018208:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801820c:	2301      	movs	r3, #1
 801820e:	e09d      	b.n	801834c <_printf_i+0x1e8>
 8018210:	6833      	ldr	r3, [r6, #0]
 8018212:	6820      	ldr	r0, [r4, #0]
 8018214:	1d19      	adds	r1, r3, #4
 8018216:	6031      	str	r1, [r6, #0]
 8018218:	0606      	lsls	r6, r0, #24
 801821a:	d501      	bpl.n	8018220 <_printf_i+0xbc>
 801821c:	681d      	ldr	r5, [r3, #0]
 801821e:	e003      	b.n	8018228 <_printf_i+0xc4>
 8018220:	0645      	lsls	r5, r0, #25
 8018222:	d5fb      	bpl.n	801821c <_printf_i+0xb8>
 8018224:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018228:	2d00      	cmp	r5, #0
 801822a:	da03      	bge.n	8018234 <_printf_i+0xd0>
 801822c:	232d      	movs	r3, #45	@ 0x2d
 801822e:	426d      	negs	r5, r5
 8018230:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018234:	4859      	ldr	r0, [pc, #356]	@ (801839c <_printf_i+0x238>)
 8018236:	230a      	movs	r3, #10
 8018238:	e011      	b.n	801825e <_printf_i+0xfa>
 801823a:	6821      	ldr	r1, [r4, #0]
 801823c:	6833      	ldr	r3, [r6, #0]
 801823e:	0608      	lsls	r0, r1, #24
 8018240:	f853 5b04 	ldr.w	r5, [r3], #4
 8018244:	d402      	bmi.n	801824c <_printf_i+0xe8>
 8018246:	0649      	lsls	r1, r1, #25
 8018248:	bf48      	it	mi
 801824a:	b2ad      	uxthmi	r5, r5
 801824c:	2f6f      	cmp	r7, #111	@ 0x6f
 801824e:	4853      	ldr	r0, [pc, #332]	@ (801839c <_printf_i+0x238>)
 8018250:	6033      	str	r3, [r6, #0]
 8018252:	bf14      	ite	ne
 8018254:	230a      	movne	r3, #10
 8018256:	2308      	moveq	r3, #8
 8018258:	2100      	movs	r1, #0
 801825a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801825e:	6866      	ldr	r6, [r4, #4]
 8018260:	60a6      	str	r6, [r4, #8]
 8018262:	2e00      	cmp	r6, #0
 8018264:	bfa2      	ittt	ge
 8018266:	6821      	ldrge	r1, [r4, #0]
 8018268:	f021 0104 	bicge.w	r1, r1, #4
 801826c:	6021      	strge	r1, [r4, #0]
 801826e:	b90d      	cbnz	r5, 8018274 <_printf_i+0x110>
 8018270:	2e00      	cmp	r6, #0
 8018272:	d04b      	beq.n	801830c <_printf_i+0x1a8>
 8018274:	4616      	mov	r6, r2
 8018276:	fbb5 f1f3 	udiv	r1, r5, r3
 801827a:	fb03 5711 	mls	r7, r3, r1, r5
 801827e:	5dc7      	ldrb	r7, [r0, r7]
 8018280:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018284:	462f      	mov	r7, r5
 8018286:	42bb      	cmp	r3, r7
 8018288:	460d      	mov	r5, r1
 801828a:	d9f4      	bls.n	8018276 <_printf_i+0x112>
 801828c:	2b08      	cmp	r3, #8
 801828e:	d10b      	bne.n	80182a8 <_printf_i+0x144>
 8018290:	6823      	ldr	r3, [r4, #0]
 8018292:	07df      	lsls	r7, r3, #31
 8018294:	d508      	bpl.n	80182a8 <_printf_i+0x144>
 8018296:	6923      	ldr	r3, [r4, #16]
 8018298:	6861      	ldr	r1, [r4, #4]
 801829a:	4299      	cmp	r1, r3
 801829c:	bfde      	ittt	le
 801829e:	2330      	movle	r3, #48	@ 0x30
 80182a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80182a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80182a8:	1b92      	subs	r2, r2, r6
 80182aa:	6122      	str	r2, [r4, #16]
 80182ac:	f8cd a000 	str.w	sl, [sp]
 80182b0:	464b      	mov	r3, r9
 80182b2:	aa03      	add	r2, sp, #12
 80182b4:	4621      	mov	r1, r4
 80182b6:	4640      	mov	r0, r8
 80182b8:	f7ff fee6 	bl	8018088 <_printf_common>
 80182bc:	3001      	adds	r0, #1
 80182be:	d14a      	bne.n	8018356 <_printf_i+0x1f2>
 80182c0:	f04f 30ff 	mov.w	r0, #4294967295
 80182c4:	b004      	add	sp, #16
 80182c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80182ca:	6823      	ldr	r3, [r4, #0]
 80182cc:	f043 0320 	orr.w	r3, r3, #32
 80182d0:	6023      	str	r3, [r4, #0]
 80182d2:	4833      	ldr	r0, [pc, #204]	@ (80183a0 <_printf_i+0x23c>)
 80182d4:	2778      	movs	r7, #120	@ 0x78
 80182d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80182da:	6823      	ldr	r3, [r4, #0]
 80182dc:	6831      	ldr	r1, [r6, #0]
 80182de:	061f      	lsls	r7, r3, #24
 80182e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80182e4:	d402      	bmi.n	80182ec <_printf_i+0x188>
 80182e6:	065f      	lsls	r7, r3, #25
 80182e8:	bf48      	it	mi
 80182ea:	b2ad      	uxthmi	r5, r5
 80182ec:	6031      	str	r1, [r6, #0]
 80182ee:	07d9      	lsls	r1, r3, #31
 80182f0:	bf44      	itt	mi
 80182f2:	f043 0320 	orrmi.w	r3, r3, #32
 80182f6:	6023      	strmi	r3, [r4, #0]
 80182f8:	b11d      	cbz	r5, 8018302 <_printf_i+0x19e>
 80182fa:	2310      	movs	r3, #16
 80182fc:	e7ac      	b.n	8018258 <_printf_i+0xf4>
 80182fe:	4827      	ldr	r0, [pc, #156]	@ (801839c <_printf_i+0x238>)
 8018300:	e7e9      	b.n	80182d6 <_printf_i+0x172>
 8018302:	6823      	ldr	r3, [r4, #0]
 8018304:	f023 0320 	bic.w	r3, r3, #32
 8018308:	6023      	str	r3, [r4, #0]
 801830a:	e7f6      	b.n	80182fa <_printf_i+0x196>
 801830c:	4616      	mov	r6, r2
 801830e:	e7bd      	b.n	801828c <_printf_i+0x128>
 8018310:	6833      	ldr	r3, [r6, #0]
 8018312:	6825      	ldr	r5, [r4, #0]
 8018314:	6961      	ldr	r1, [r4, #20]
 8018316:	1d18      	adds	r0, r3, #4
 8018318:	6030      	str	r0, [r6, #0]
 801831a:	062e      	lsls	r6, r5, #24
 801831c:	681b      	ldr	r3, [r3, #0]
 801831e:	d501      	bpl.n	8018324 <_printf_i+0x1c0>
 8018320:	6019      	str	r1, [r3, #0]
 8018322:	e002      	b.n	801832a <_printf_i+0x1c6>
 8018324:	0668      	lsls	r0, r5, #25
 8018326:	d5fb      	bpl.n	8018320 <_printf_i+0x1bc>
 8018328:	8019      	strh	r1, [r3, #0]
 801832a:	2300      	movs	r3, #0
 801832c:	6123      	str	r3, [r4, #16]
 801832e:	4616      	mov	r6, r2
 8018330:	e7bc      	b.n	80182ac <_printf_i+0x148>
 8018332:	6833      	ldr	r3, [r6, #0]
 8018334:	1d1a      	adds	r2, r3, #4
 8018336:	6032      	str	r2, [r6, #0]
 8018338:	681e      	ldr	r6, [r3, #0]
 801833a:	6862      	ldr	r2, [r4, #4]
 801833c:	2100      	movs	r1, #0
 801833e:	4630      	mov	r0, r6
 8018340:	f7e7 ffe6 	bl	8000310 <memchr>
 8018344:	b108      	cbz	r0, 801834a <_printf_i+0x1e6>
 8018346:	1b80      	subs	r0, r0, r6
 8018348:	6060      	str	r0, [r4, #4]
 801834a:	6863      	ldr	r3, [r4, #4]
 801834c:	6123      	str	r3, [r4, #16]
 801834e:	2300      	movs	r3, #0
 8018350:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018354:	e7aa      	b.n	80182ac <_printf_i+0x148>
 8018356:	6923      	ldr	r3, [r4, #16]
 8018358:	4632      	mov	r2, r6
 801835a:	4649      	mov	r1, r9
 801835c:	4640      	mov	r0, r8
 801835e:	47d0      	blx	sl
 8018360:	3001      	adds	r0, #1
 8018362:	d0ad      	beq.n	80182c0 <_printf_i+0x15c>
 8018364:	6823      	ldr	r3, [r4, #0]
 8018366:	079b      	lsls	r3, r3, #30
 8018368:	d413      	bmi.n	8018392 <_printf_i+0x22e>
 801836a:	68e0      	ldr	r0, [r4, #12]
 801836c:	9b03      	ldr	r3, [sp, #12]
 801836e:	4298      	cmp	r0, r3
 8018370:	bfb8      	it	lt
 8018372:	4618      	movlt	r0, r3
 8018374:	e7a6      	b.n	80182c4 <_printf_i+0x160>
 8018376:	2301      	movs	r3, #1
 8018378:	4632      	mov	r2, r6
 801837a:	4649      	mov	r1, r9
 801837c:	4640      	mov	r0, r8
 801837e:	47d0      	blx	sl
 8018380:	3001      	adds	r0, #1
 8018382:	d09d      	beq.n	80182c0 <_printf_i+0x15c>
 8018384:	3501      	adds	r5, #1
 8018386:	68e3      	ldr	r3, [r4, #12]
 8018388:	9903      	ldr	r1, [sp, #12]
 801838a:	1a5b      	subs	r3, r3, r1
 801838c:	42ab      	cmp	r3, r5
 801838e:	dcf2      	bgt.n	8018376 <_printf_i+0x212>
 8018390:	e7eb      	b.n	801836a <_printf_i+0x206>
 8018392:	2500      	movs	r5, #0
 8018394:	f104 0619 	add.w	r6, r4, #25
 8018398:	e7f5      	b.n	8018386 <_printf_i+0x222>
 801839a:	bf00      	nop
 801839c:	08018dad 	.word	0x08018dad
 80183a0:	08018dbe 	.word	0x08018dbe

080183a4 <__swbuf_r>:
 80183a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80183a6:	460e      	mov	r6, r1
 80183a8:	4614      	mov	r4, r2
 80183aa:	4605      	mov	r5, r0
 80183ac:	b118      	cbz	r0, 80183b6 <__swbuf_r+0x12>
 80183ae:	6a03      	ldr	r3, [r0, #32]
 80183b0:	b90b      	cbnz	r3, 80183b6 <__swbuf_r+0x12>
 80183b2:	f7fe f9ef 	bl	8016794 <__sinit>
 80183b6:	69a3      	ldr	r3, [r4, #24]
 80183b8:	60a3      	str	r3, [r4, #8]
 80183ba:	89a3      	ldrh	r3, [r4, #12]
 80183bc:	071a      	lsls	r2, r3, #28
 80183be:	d501      	bpl.n	80183c4 <__swbuf_r+0x20>
 80183c0:	6923      	ldr	r3, [r4, #16]
 80183c2:	b943      	cbnz	r3, 80183d6 <__swbuf_r+0x32>
 80183c4:	4621      	mov	r1, r4
 80183c6:	4628      	mov	r0, r5
 80183c8:	f000 f82a 	bl	8018420 <__swsetup_r>
 80183cc:	b118      	cbz	r0, 80183d6 <__swbuf_r+0x32>
 80183ce:	f04f 37ff 	mov.w	r7, #4294967295
 80183d2:	4638      	mov	r0, r7
 80183d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80183d6:	6823      	ldr	r3, [r4, #0]
 80183d8:	6922      	ldr	r2, [r4, #16]
 80183da:	1a98      	subs	r0, r3, r2
 80183dc:	6963      	ldr	r3, [r4, #20]
 80183de:	b2f6      	uxtb	r6, r6
 80183e0:	4283      	cmp	r3, r0
 80183e2:	4637      	mov	r7, r6
 80183e4:	dc05      	bgt.n	80183f2 <__swbuf_r+0x4e>
 80183e6:	4621      	mov	r1, r4
 80183e8:	4628      	mov	r0, r5
 80183ea:	f7ff fc81 	bl	8017cf0 <_fflush_r>
 80183ee:	2800      	cmp	r0, #0
 80183f0:	d1ed      	bne.n	80183ce <__swbuf_r+0x2a>
 80183f2:	68a3      	ldr	r3, [r4, #8]
 80183f4:	3b01      	subs	r3, #1
 80183f6:	60a3      	str	r3, [r4, #8]
 80183f8:	6823      	ldr	r3, [r4, #0]
 80183fa:	1c5a      	adds	r2, r3, #1
 80183fc:	6022      	str	r2, [r4, #0]
 80183fe:	701e      	strb	r6, [r3, #0]
 8018400:	6962      	ldr	r2, [r4, #20]
 8018402:	1c43      	adds	r3, r0, #1
 8018404:	429a      	cmp	r2, r3
 8018406:	d004      	beq.n	8018412 <__swbuf_r+0x6e>
 8018408:	89a3      	ldrh	r3, [r4, #12]
 801840a:	07db      	lsls	r3, r3, #31
 801840c:	d5e1      	bpl.n	80183d2 <__swbuf_r+0x2e>
 801840e:	2e0a      	cmp	r6, #10
 8018410:	d1df      	bne.n	80183d2 <__swbuf_r+0x2e>
 8018412:	4621      	mov	r1, r4
 8018414:	4628      	mov	r0, r5
 8018416:	f7ff fc6b 	bl	8017cf0 <_fflush_r>
 801841a:	2800      	cmp	r0, #0
 801841c:	d0d9      	beq.n	80183d2 <__swbuf_r+0x2e>
 801841e:	e7d6      	b.n	80183ce <__swbuf_r+0x2a>

08018420 <__swsetup_r>:
 8018420:	b538      	push	{r3, r4, r5, lr}
 8018422:	4b29      	ldr	r3, [pc, #164]	@ (80184c8 <__swsetup_r+0xa8>)
 8018424:	4605      	mov	r5, r0
 8018426:	6818      	ldr	r0, [r3, #0]
 8018428:	460c      	mov	r4, r1
 801842a:	b118      	cbz	r0, 8018434 <__swsetup_r+0x14>
 801842c:	6a03      	ldr	r3, [r0, #32]
 801842e:	b90b      	cbnz	r3, 8018434 <__swsetup_r+0x14>
 8018430:	f7fe f9b0 	bl	8016794 <__sinit>
 8018434:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018438:	0719      	lsls	r1, r3, #28
 801843a:	d422      	bmi.n	8018482 <__swsetup_r+0x62>
 801843c:	06da      	lsls	r2, r3, #27
 801843e:	d407      	bmi.n	8018450 <__swsetup_r+0x30>
 8018440:	2209      	movs	r2, #9
 8018442:	602a      	str	r2, [r5, #0]
 8018444:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018448:	81a3      	strh	r3, [r4, #12]
 801844a:	f04f 30ff 	mov.w	r0, #4294967295
 801844e:	e033      	b.n	80184b8 <__swsetup_r+0x98>
 8018450:	0758      	lsls	r0, r3, #29
 8018452:	d512      	bpl.n	801847a <__swsetup_r+0x5a>
 8018454:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018456:	b141      	cbz	r1, 801846a <__swsetup_r+0x4a>
 8018458:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801845c:	4299      	cmp	r1, r3
 801845e:	d002      	beq.n	8018466 <__swsetup_r+0x46>
 8018460:	4628      	mov	r0, r5
 8018462:	f7fe fac1 	bl	80169e8 <_free_r>
 8018466:	2300      	movs	r3, #0
 8018468:	6363      	str	r3, [r4, #52]	@ 0x34
 801846a:	89a3      	ldrh	r3, [r4, #12]
 801846c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018470:	81a3      	strh	r3, [r4, #12]
 8018472:	2300      	movs	r3, #0
 8018474:	6063      	str	r3, [r4, #4]
 8018476:	6923      	ldr	r3, [r4, #16]
 8018478:	6023      	str	r3, [r4, #0]
 801847a:	89a3      	ldrh	r3, [r4, #12]
 801847c:	f043 0308 	orr.w	r3, r3, #8
 8018480:	81a3      	strh	r3, [r4, #12]
 8018482:	6923      	ldr	r3, [r4, #16]
 8018484:	b94b      	cbnz	r3, 801849a <__swsetup_r+0x7a>
 8018486:	89a3      	ldrh	r3, [r4, #12]
 8018488:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801848c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018490:	d003      	beq.n	801849a <__swsetup_r+0x7a>
 8018492:	4621      	mov	r1, r4
 8018494:	4628      	mov	r0, r5
 8018496:	f000 f883 	bl	80185a0 <__smakebuf_r>
 801849a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801849e:	f013 0201 	ands.w	r2, r3, #1
 80184a2:	d00a      	beq.n	80184ba <__swsetup_r+0x9a>
 80184a4:	2200      	movs	r2, #0
 80184a6:	60a2      	str	r2, [r4, #8]
 80184a8:	6962      	ldr	r2, [r4, #20]
 80184aa:	4252      	negs	r2, r2
 80184ac:	61a2      	str	r2, [r4, #24]
 80184ae:	6922      	ldr	r2, [r4, #16]
 80184b0:	b942      	cbnz	r2, 80184c4 <__swsetup_r+0xa4>
 80184b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80184b6:	d1c5      	bne.n	8018444 <__swsetup_r+0x24>
 80184b8:	bd38      	pop	{r3, r4, r5, pc}
 80184ba:	0799      	lsls	r1, r3, #30
 80184bc:	bf58      	it	pl
 80184be:	6962      	ldrpl	r2, [r4, #20]
 80184c0:	60a2      	str	r2, [r4, #8]
 80184c2:	e7f4      	b.n	80184ae <__swsetup_r+0x8e>
 80184c4:	2000      	movs	r0, #0
 80184c6:	e7f7      	b.n	80184b8 <__swsetup_r+0x98>
 80184c8:	24000240 	.word	0x24000240

080184cc <_raise_r>:
 80184cc:	291f      	cmp	r1, #31
 80184ce:	b538      	push	{r3, r4, r5, lr}
 80184d0:	4605      	mov	r5, r0
 80184d2:	460c      	mov	r4, r1
 80184d4:	d904      	bls.n	80184e0 <_raise_r+0x14>
 80184d6:	2316      	movs	r3, #22
 80184d8:	6003      	str	r3, [r0, #0]
 80184da:	f04f 30ff 	mov.w	r0, #4294967295
 80184de:	bd38      	pop	{r3, r4, r5, pc}
 80184e0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80184e2:	b112      	cbz	r2, 80184ea <_raise_r+0x1e>
 80184e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80184e8:	b94b      	cbnz	r3, 80184fe <_raise_r+0x32>
 80184ea:	4628      	mov	r0, r5
 80184ec:	f000 f830 	bl	8018550 <_getpid_r>
 80184f0:	4622      	mov	r2, r4
 80184f2:	4601      	mov	r1, r0
 80184f4:	4628      	mov	r0, r5
 80184f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80184fa:	f000 b817 	b.w	801852c <_kill_r>
 80184fe:	2b01      	cmp	r3, #1
 8018500:	d00a      	beq.n	8018518 <_raise_r+0x4c>
 8018502:	1c59      	adds	r1, r3, #1
 8018504:	d103      	bne.n	801850e <_raise_r+0x42>
 8018506:	2316      	movs	r3, #22
 8018508:	6003      	str	r3, [r0, #0]
 801850a:	2001      	movs	r0, #1
 801850c:	e7e7      	b.n	80184de <_raise_r+0x12>
 801850e:	2100      	movs	r1, #0
 8018510:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8018514:	4620      	mov	r0, r4
 8018516:	4798      	blx	r3
 8018518:	2000      	movs	r0, #0
 801851a:	e7e0      	b.n	80184de <_raise_r+0x12>

0801851c <raise>:
 801851c:	4b02      	ldr	r3, [pc, #8]	@ (8018528 <raise+0xc>)
 801851e:	4601      	mov	r1, r0
 8018520:	6818      	ldr	r0, [r3, #0]
 8018522:	f7ff bfd3 	b.w	80184cc <_raise_r>
 8018526:	bf00      	nop
 8018528:	24000240 	.word	0x24000240

0801852c <_kill_r>:
 801852c:	b538      	push	{r3, r4, r5, lr}
 801852e:	4d07      	ldr	r5, [pc, #28]	@ (801854c <_kill_r+0x20>)
 8018530:	2300      	movs	r3, #0
 8018532:	4604      	mov	r4, r0
 8018534:	4608      	mov	r0, r1
 8018536:	4611      	mov	r1, r2
 8018538:	602b      	str	r3, [r5, #0]
 801853a:	f7e9 fe9b 	bl	8002274 <_kill>
 801853e:	1c43      	adds	r3, r0, #1
 8018540:	d102      	bne.n	8018548 <_kill_r+0x1c>
 8018542:	682b      	ldr	r3, [r5, #0]
 8018544:	b103      	cbz	r3, 8018548 <_kill_r+0x1c>
 8018546:	6023      	str	r3, [r4, #0]
 8018548:	bd38      	pop	{r3, r4, r5, pc}
 801854a:	bf00      	nop
 801854c:	240067e4 	.word	0x240067e4

08018550 <_getpid_r>:
 8018550:	f7e9 be88 	b.w	8002264 <_getpid>

08018554 <__swhatbuf_r>:
 8018554:	b570      	push	{r4, r5, r6, lr}
 8018556:	460c      	mov	r4, r1
 8018558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801855c:	2900      	cmp	r1, #0
 801855e:	b096      	sub	sp, #88	@ 0x58
 8018560:	4615      	mov	r5, r2
 8018562:	461e      	mov	r6, r3
 8018564:	da0d      	bge.n	8018582 <__swhatbuf_r+0x2e>
 8018566:	89a3      	ldrh	r3, [r4, #12]
 8018568:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801856c:	f04f 0100 	mov.w	r1, #0
 8018570:	bf14      	ite	ne
 8018572:	2340      	movne	r3, #64	@ 0x40
 8018574:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018578:	2000      	movs	r0, #0
 801857a:	6031      	str	r1, [r6, #0]
 801857c:	602b      	str	r3, [r5, #0]
 801857e:	b016      	add	sp, #88	@ 0x58
 8018580:	bd70      	pop	{r4, r5, r6, pc}
 8018582:	466a      	mov	r2, sp
 8018584:	f000 f848 	bl	8018618 <_fstat_r>
 8018588:	2800      	cmp	r0, #0
 801858a:	dbec      	blt.n	8018566 <__swhatbuf_r+0x12>
 801858c:	9901      	ldr	r1, [sp, #4]
 801858e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018592:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018596:	4259      	negs	r1, r3
 8018598:	4159      	adcs	r1, r3
 801859a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801859e:	e7eb      	b.n	8018578 <__swhatbuf_r+0x24>

080185a0 <__smakebuf_r>:
 80185a0:	898b      	ldrh	r3, [r1, #12]
 80185a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80185a4:	079d      	lsls	r5, r3, #30
 80185a6:	4606      	mov	r6, r0
 80185a8:	460c      	mov	r4, r1
 80185aa:	d507      	bpl.n	80185bc <__smakebuf_r+0x1c>
 80185ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80185b0:	6023      	str	r3, [r4, #0]
 80185b2:	6123      	str	r3, [r4, #16]
 80185b4:	2301      	movs	r3, #1
 80185b6:	6163      	str	r3, [r4, #20]
 80185b8:	b003      	add	sp, #12
 80185ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80185bc:	ab01      	add	r3, sp, #4
 80185be:	466a      	mov	r2, sp
 80185c0:	f7ff ffc8 	bl	8018554 <__swhatbuf_r>
 80185c4:	9f00      	ldr	r7, [sp, #0]
 80185c6:	4605      	mov	r5, r0
 80185c8:	4639      	mov	r1, r7
 80185ca:	4630      	mov	r0, r6
 80185cc:	f7fe fdb2 	bl	8017134 <_malloc_r>
 80185d0:	b948      	cbnz	r0, 80185e6 <__smakebuf_r+0x46>
 80185d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80185d6:	059a      	lsls	r2, r3, #22
 80185d8:	d4ee      	bmi.n	80185b8 <__smakebuf_r+0x18>
 80185da:	f023 0303 	bic.w	r3, r3, #3
 80185de:	f043 0302 	orr.w	r3, r3, #2
 80185e2:	81a3      	strh	r3, [r4, #12]
 80185e4:	e7e2      	b.n	80185ac <__smakebuf_r+0xc>
 80185e6:	89a3      	ldrh	r3, [r4, #12]
 80185e8:	6020      	str	r0, [r4, #0]
 80185ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80185ee:	81a3      	strh	r3, [r4, #12]
 80185f0:	9b01      	ldr	r3, [sp, #4]
 80185f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80185f6:	b15b      	cbz	r3, 8018610 <__smakebuf_r+0x70>
 80185f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80185fc:	4630      	mov	r0, r6
 80185fe:	f000 f81d 	bl	801863c <_isatty_r>
 8018602:	b128      	cbz	r0, 8018610 <__smakebuf_r+0x70>
 8018604:	89a3      	ldrh	r3, [r4, #12]
 8018606:	f023 0303 	bic.w	r3, r3, #3
 801860a:	f043 0301 	orr.w	r3, r3, #1
 801860e:	81a3      	strh	r3, [r4, #12]
 8018610:	89a3      	ldrh	r3, [r4, #12]
 8018612:	431d      	orrs	r5, r3
 8018614:	81a5      	strh	r5, [r4, #12]
 8018616:	e7cf      	b.n	80185b8 <__smakebuf_r+0x18>

08018618 <_fstat_r>:
 8018618:	b538      	push	{r3, r4, r5, lr}
 801861a:	4d07      	ldr	r5, [pc, #28]	@ (8018638 <_fstat_r+0x20>)
 801861c:	2300      	movs	r3, #0
 801861e:	4604      	mov	r4, r0
 8018620:	4608      	mov	r0, r1
 8018622:	4611      	mov	r1, r2
 8018624:	602b      	str	r3, [r5, #0]
 8018626:	f7e9 fe85 	bl	8002334 <_fstat>
 801862a:	1c43      	adds	r3, r0, #1
 801862c:	d102      	bne.n	8018634 <_fstat_r+0x1c>
 801862e:	682b      	ldr	r3, [r5, #0]
 8018630:	b103      	cbz	r3, 8018634 <_fstat_r+0x1c>
 8018632:	6023      	str	r3, [r4, #0]
 8018634:	bd38      	pop	{r3, r4, r5, pc}
 8018636:	bf00      	nop
 8018638:	240067e4 	.word	0x240067e4

0801863c <_isatty_r>:
 801863c:	b538      	push	{r3, r4, r5, lr}
 801863e:	4d06      	ldr	r5, [pc, #24]	@ (8018658 <_isatty_r+0x1c>)
 8018640:	2300      	movs	r3, #0
 8018642:	4604      	mov	r4, r0
 8018644:	4608      	mov	r0, r1
 8018646:	602b      	str	r3, [r5, #0]
 8018648:	f7e9 fe84 	bl	8002354 <_isatty>
 801864c:	1c43      	adds	r3, r0, #1
 801864e:	d102      	bne.n	8018656 <_isatty_r+0x1a>
 8018650:	682b      	ldr	r3, [r5, #0]
 8018652:	b103      	cbz	r3, 8018656 <_isatty_r+0x1a>
 8018654:	6023      	str	r3, [r4, #0]
 8018656:	bd38      	pop	{r3, r4, r5, pc}
 8018658:	240067e4 	.word	0x240067e4
 801865c:	00000000 	.word	0x00000000

08018660 <log>:
 8018660:	b4f0      	push	{r4, r5, r6, r7}
 8018662:	ee10 0a90 	vmov	r0, s1
 8018666:	ee10 3a10 	vmov	r3, s0
 801866a:	f04f 34ff 	mov.w	r4, #4294967295
 801866e:	429c      	cmp	r4, r3
 8018670:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 8018674:	4c70      	ldr	r4, [pc, #448]	@ (8018838 <log+0x1d8>)
 8018676:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 801867a:	418c      	sbcs	r4, r1
 801867c:	ed2d 8b02 	vpush	{d8}
 8018680:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8018684:	d35a      	bcc.n	801873c <log+0xdc>
 8018686:	4a6d      	ldr	r2, [pc, #436]	@ (801883c <log+0x1dc>)
 8018688:	4290      	cmp	r0, r2
 801868a:	bf08      	it	eq
 801868c:	2b00      	cmpeq	r3, #0
 801868e:	f000 80c4 	beq.w	801881a <log+0x1ba>
 8018692:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8018696:	ee30 0b47 	vsub.f64	d0, d0, d7
 801869a:	4b69      	ldr	r3, [pc, #420]	@ (8018840 <log+0x1e0>)
 801869c:	ee20 2b00 	vmul.f64	d2, d0, d0
 80186a0:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 80186a4:	ee20 4b02 	vmul.f64	d4, d0, d2
 80186a8:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 80186ac:	eea6 7b00 	vfma.f64	d7, d6, d0
 80186b0:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 80186b4:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 80186b8:	eea6 7b02 	vfma.f64	d7, d6, d2
 80186bc:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 80186c0:	eea5 6b00 	vfma.f64	d6, d5, d0
 80186c4:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 80186c8:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 80186cc:	eea5 6b02 	vfma.f64	d6, d5, d2
 80186d0:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 80186d4:	eea3 5b00 	vfma.f64	d5, d3, d0
 80186d8:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 80186dc:	eea3 5b02 	vfma.f64	d5, d3, d2
 80186e0:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 80186e4:	eea3 5b04 	vfma.f64	d5, d3, d4
 80186e8:	eea5 6b04 	vfma.f64	d6, d5, d4
 80186ec:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 80186f0:	eea6 7b04 	vfma.f64	d7, d6, d4
 80186f4:	eeb0 2b47 	vmov.f64	d2, d7
 80186f8:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 8018820 <log+0x1c0>
 80186fc:	eeb0 6b40 	vmov.f64	d6, d0
 8018700:	eeb0 3b40 	vmov.f64	d3, d0
 8018704:	eea0 6b07 	vfma.f64	d6, d0, d7
 8018708:	eea0 6b47 	vfms.f64	d6, d0, d7
 801870c:	ee30 8b46 	vsub.f64	d8, d0, d6
 8018710:	ee26 1b06 	vmul.f64	d1, d6, d6
 8018714:	eea1 3b05 	vfma.f64	d3, d1, d5
 8018718:	ee30 7b43 	vsub.f64	d7, d0, d3
 801871c:	ee30 0b06 	vadd.f64	d0, d0, d6
 8018720:	eea1 7b05 	vfma.f64	d7, d1, d5
 8018724:	ee25 5b08 	vmul.f64	d5, d5, d8
 8018728:	eea5 7b00 	vfma.f64	d7, d5, d0
 801872c:	eea2 7b04 	vfma.f64	d7, d2, d4
 8018730:	ee33 0b07 	vadd.f64	d0, d3, d7
 8018734:	ecbd 8b02 	vpop	{d8}
 8018738:	bcf0      	pop	{r4, r5, r6, r7}
 801873a:	4770      	bx	lr
 801873c:	f1a2 0410 	sub.w	r4, r2, #16
 8018740:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 8018744:	428c      	cmp	r4, r1
 8018746:	d923      	bls.n	8018790 <log+0x130>
 8018748:	18d9      	adds	r1, r3, r3
 801874a:	eb40 0400 	adc.w	r4, r0, r0
 801874e:	4321      	orrs	r1, r4
 8018750:	d105      	bne.n	801875e <log+0xfe>
 8018752:	ecbd 8b02 	vpop	{d8}
 8018756:	2001      	movs	r0, #1
 8018758:	bcf0      	pop	{r4, r5, r6, r7}
 801875a:	f000 b885 	b.w	8018868 <__math_divzero>
 801875e:	4939      	ldr	r1, [pc, #228]	@ (8018844 <log+0x1e4>)
 8018760:	4288      	cmp	r0, r1
 8018762:	bf08      	it	eq
 8018764:	2b00      	cmpeq	r3, #0
 8018766:	d0e5      	beq.n	8018734 <log+0xd4>
 8018768:	0413      	lsls	r3, r2, #16
 801876a:	d403      	bmi.n	8018774 <log+0x114>
 801876c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8018770:	4393      	bics	r3, r2
 8018772:	d104      	bne.n	801877e <log+0x11e>
 8018774:	ecbd 8b02 	vpop	{d8}
 8018778:	bcf0      	pop	{r4, r5, r6, r7}
 801877a:	f000 b88d 	b.w	8018898 <__math_invalid>
 801877e:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8018828 <log+0x1c8>
 8018782:	ee20 7b07 	vmul.f64	d7, d0, d7
 8018786:	ec53 2b17 	vmov	r2, r3, d7
 801878a:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 801878e:	4613      	mov	r3, r2
 8018790:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 8018794:	492a      	ldr	r1, [pc, #168]	@ (8018840 <log+0x1e0>)
 8018796:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 801879a:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 801879e:	f3c2 3446 	ubfx	r4, r2, #13, #7
 80187a2:	0d15      	lsrs	r5, r2, #20
 80187a4:	eb01 1c04 	add.w	ip, r1, r4, lsl #4
 80187a8:	052d      	lsls	r5, r5, #20
 80187aa:	ed9c 7b24 	vldr	d7, [ip, #144]	@ 0x90
 80187ae:	1e1e      	subs	r6, r3, #0
 80187b0:	1b47      	subs	r7, r0, r5
 80187b2:	ec47 6b16 	vmov	d6, r6, r7
 80187b6:	1512      	asrs	r2, r2, #20
 80187b8:	eea7 5b06 	vfma.f64	d5, d7, d6
 80187bc:	ee07 2a90 	vmov	s15, r2
 80187c0:	ee25 2b05 	vmul.f64	d2, d5, d5
 80187c4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80187c8:	ed91 4b00 	vldr	d4, [r1]
 80187cc:	ee25 1b02 	vmul.f64	d1, d5, d2
 80187d0:	ed9c 7b26 	vldr	d7, [ip, #152]	@ 0x98
 80187d4:	eea4 7b06 	vfma.f64	d7, d4, d6
 80187d8:	ee35 4b07 	vadd.f64	d4, d5, d7
 80187dc:	ee37 0b44 	vsub.f64	d0, d7, d4
 80187e0:	ed91 7b02 	vldr	d7, [r1, #8]
 80187e4:	ee30 0b05 	vadd.f64	d0, d0, d5
 80187e8:	eea7 0b06 	vfma.f64	d0, d7, d6
 80187ec:	ed91 7b04 	vldr	d7, [r1, #16]
 80187f0:	ed91 6b08 	vldr	d6, [r1, #32]
 80187f4:	eea7 0b02 	vfma.f64	d0, d7, d2
 80187f8:	ed91 7b06 	vldr	d7, [r1, #24]
 80187fc:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 8018800:	eea6 7b05 	vfma.f64	d7, d6, d5
 8018804:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 8018808:	eea3 6b05 	vfma.f64	d6, d3, d5
 801880c:	eea6 7b02 	vfma.f64	d7, d6, d2
 8018810:	eea1 0b07 	vfma.f64	d0, d1, d7
 8018814:	ee30 0b04 	vadd.f64	d0, d0, d4
 8018818:	e78c      	b.n	8018734 <log+0xd4>
 801881a:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 8018830 <log+0x1d0>
 801881e:	e789      	b.n	8018734 <log+0xd4>
 8018820:	00000000 	.word	0x00000000
 8018824:	41a00000 	.word	0x41a00000
 8018828:	00000000 	.word	0x00000000
 801882c:	43300000 	.word	0x43300000
	...
 8018838:	000308ff 	.word	0x000308ff
 801883c:	3ff00000 	.word	0x3ff00000
 8018840:	08018dd0 	.word	0x08018dd0
 8018844:	7ff00000 	.word	0x7ff00000

08018848 <with_errno>:
 8018848:	b510      	push	{r4, lr}
 801884a:	ed2d 8b02 	vpush	{d8}
 801884e:	eeb0 8b40 	vmov.f64	d8, d0
 8018852:	4604      	mov	r4, r0
 8018854:	f7fe f884 	bl	8016960 <__errno>
 8018858:	eeb0 0b48 	vmov.f64	d0, d8
 801885c:	ecbd 8b02 	vpop	{d8}
 8018860:	6004      	str	r4, [r0, #0]
 8018862:	bd10      	pop	{r4, pc}
 8018864:	0000      	movs	r0, r0
	...

08018868 <__math_divzero>:
 8018868:	b082      	sub	sp, #8
 801886a:	2800      	cmp	r0, #0
 801886c:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8018870:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8018874:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8018878:	ed8d 7b00 	vstr	d7, [sp]
 801887c:	ed9d 0b00 	vldr	d0, [sp]
 8018880:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 8018890 <__math_divzero+0x28>
 8018884:	2022      	movs	r0, #34	@ 0x22
 8018886:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801888a:	b002      	add	sp, #8
 801888c:	f7ff bfdc 	b.w	8018848 <with_errno>
	...

08018898 <__math_invalid>:
 8018898:	eeb0 7b40 	vmov.f64	d7, d0
 801889c:	eeb4 7b47 	vcmp.f64	d7, d7
 80188a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188a4:	ee30 6b40 	vsub.f64	d6, d0, d0
 80188a8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 80188ac:	d602      	bvs.n	80188b4 <__math_invalid+0x1c>
 80188ae:	2021      	movs	r0, #33	@ 0x21
 80188b0:	f7ff bfca 	b.w	8018848 <with_errno>
 80188b4:	4770      	bx	lr
	...

080188b8 <_init>:
 80188b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80188ba:	bf00      	nop
 80188bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80188be:	bc08      	pop	{r3}
 80188c0:	469e      	mov	lr, r3
 80188c2:	4770      	bx	lr

080188c4 <_fini>:
 80188c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80188c6:	bf00      	nop
 80188c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80188ca:	bc08      	pop	{r3}
 80188cc:	469e      	mov	lr, r3
 80188ce:	4770      	bx	lr
