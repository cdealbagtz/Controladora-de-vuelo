
Controladora-de-vuelo-V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000197a0  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011b8  08019a50  08019a50  0001aa50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801ac08  0801ac08  0001bc08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801ac10  0801ac10  0001bc10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801ac14  0801ac14  0001bc14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002b0  24000000  0801ac18  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000567c  240002b0  0801aec8  0001c2b0  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  2400592c  0801aec8  0001c92c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001c2b0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002c79b  00000000  00000000  0001c2de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005d50  00000000  00000000  00048a79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000021a8  00000000  00000000  0004e7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001a18  00000000  00000000  00050978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039609  00000000  00000000  00052390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00034a70  00000000  00000000  0008b999  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00157df9  00000000  00000000  000c0409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00218202  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009ea8  00000000  00000000  00218248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  002220f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240002b0 	.word	0x240002b0
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08019a38 	.word	0x08019a38

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240002b4 	.word	0x240002b4
 80002ec:	08019a38 	.word	0x08019a38

080002f0 <strcmp>:
 80002f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002f8:	2a01      	cmp	r2, #1
 80002fa:	bf28      	it	cs
 80002fc:	429a      	cmpcs	r2, r3
 80002fe:	d0f7      	beq.n	80002f0 <strcmp>
 8000300:	1ad0      	subs	r0, r2, r3
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_ldivmod>:
 8000728:	b97b      	cbnz	r3, 800074a <__aeabi_ldivmod+0x22>
 800072a:	b972      	cbnz	r2, 800074a <__aeabi_ldivmod+0x22>
 800072c:	2900      	cmp	r1, #0
 800072e:	bfbe      	ittt	lt
 8000730:	2000      	movlt	r0, #0
 8000732:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000736:	e006      	blt.n	8000746 <__aeabi_ldivmod+0x1e>
 8000738:	bf08      	it	eq
 800073a:	2800      	cmpeq	r0, #0
 800073c:	bf1c      	itt	ne
 800073e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000742:	f04f 30ff 	movne.w	r0, #4294967295
 8000746:	f000 b9ed 	b.w	8000b24 <__aeabi_idiv0>
 800074a:	f1ad 0c08 	sub.w	ip, sp, #8
 800074e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000752:	2900      	cmp	r1, #0
 8000754:	db09      	blt.n	800076a <__aeabi_ldivmod+0x42>
 8000756:	2b00      	cmp	r3, #0
 8000758:	db1a      	blt.n	8000790 <__aeabi_ldivmod+0x68>
 800075a:	f000 f885 	bl	8000868 <__udivmoddi4>
 800075e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000762:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000766:	b004      	add	sp, #16
 8000768:	4770      	bx	lr
 800076a:	4240      	negs	r0, r0
 800076c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000770:	2b00      	cmp	r3, #0
 8000772:	db1b      	blt.n	80007ac <__aeabi_ldivmod+0x84>
 8000774:	f000 f878 	bl	8000868 <__udivmoddi4>
 8000778:	f8dd e004 	ldr.w	lr, [sp, #4]
 800077c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000780:	b004      	add	sp, #16
 8000782:	4240      	negs	r0, r0
 8000784:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000788:	4252      	negs	r2, r2
 800078a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800078e:	4770      	bx	lr
 8000790:	4252      	negs	r2, r2
 8000792:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000796:	f000 f867 	bl	8000868 <__udivmoddi4>
 800079a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800079e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007a2:	b004      	add	sp, #16
 80007a4:	4240      	negs	r0, r0
 80007a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007aa:	4770      	bx	lr
 80007ac:	4252      	negs	r2, r2
 80007ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007b2:	f000 f859 	bl	8000868 <__udivmoddi4>
 80007b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007be:	b004      	add	sp, #16
 80007c0:	4252      	negs	r2, r2
 80007c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007c6:	4770      	bx	lr

080007c8 <__aeabi_uldivmod>:
 80007c8:	b953      	cbnz	r3, 80007e0 <__aeabi_uldivmod+0x18>
 80007ca:	b94a      	cbnz	r2, 80007e0 <__aeabi_uldivmod+0x18>
 80007cc:	2900      	cmp	r1, #0
 80007ce:	bf08      	it	eq
 80007d0:	2800      	cmpeq	r0, #0
 80007d2:	bf1c      	itt	ne
 80007d4:	f04f 31ff 	movne.w	r1, #4294967295
 80007d8:	f04f 30ff 	movne.w	r0, #4294967295
 80007dc:	f000 b9a2 	b.w	8000b24 <__aeabi_idiv0>
 80007e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007e8:	f000 f83e 	bl	8000868 <__udivmoddi4>
 80007ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f4:	b004      	add	sp, #16
 80007f6:	4770      	bx	lr

080007f8 <__aeabi_d2lz>:
 80007f8:	b508      	push	{r3, lr}
 80007fa:	4602      	mov	r2, r0
 80007fc:	460b      	mov	r3, r1
 80007fe:	ec43 2b17 	vmov	d7, r2, r3
 8000802:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800080a:	d403      	bmi.n	8000814 <__aeabi_d2lz+0x1c>
 800080c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000810:	f000 b80a 	b.w	8000828 <__aeabi_d2ulz>
 8000814:	eeb1 7b47 	vneg.f64	d7, d7
 8000818:	ec51 0b17 	vmov	r0, r1, d7
 800081c:	f000 f804 	bl	8000828 <__aeabi_d2ulz>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	bd08      	pop	{r3, pc}

08000828 <__aeabi_d2ulz>:
 8000828:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000858 <__aeabi_d2ulz+0x30>
 800082c:	ec41 0b17 	vmov	d7, r0, r1
 8000830:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000860 <__aeabi_d2ulz+0x38>
 8000834:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000838:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800083c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000840:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000844:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000848:	ee16 1a10 	vmov	r1, s12
 800084c:	ee17 0a90 	vmov	r0, s15
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	f3af 8000 	nop.w
 8000858:	00000000 	.word	0x00000000
 800085c:	3df00000 	.word	0x3df00000
 8000860:	00000000 	.word	0x00000000
 8000864:	41f00000 	.word	0x41f00000

08000868 <__udivmoddi4>:
 8000868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800086c:	9d08      	ldr	r5, [sp, #32]
 800086e:	460c      	mov	r4, r1
 8000870:	2b00      	cmp	r3, #0
 8000872:	d14e      	bne.n	8000912 <__udivmoddi4+0xaa>
 8000874:	4694      	mov	ip, r2
 8000876:	458c      	cmp	ip, r1
 8000878:	4686      	mov	lr, r0
 800087a:	fab2 f282 	clz	r2, r2
 800087e:	d962      	bls.n	8000946 <__udivmoddi4+0xde>
 8000880:	b14a      	cbz	r2, 8000896 <__udivmoddi4+0x2e>
 8000882:	f1c2 0320 	rsb	r3, r2, #32
 8000886:	4091      	lsls	r1, r2
 8000888:	fa20 f303 	lsr.w	r3, r0, r3
 800088c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000890:	4319      	orrs	r1, r3
 8000892:	fa00 fe02 	lsl.w	lr, r0, r2
 8000896:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800089a:	fa1f f68c 	uxth.w	r6, ip
 800089e:	fbb1 f4f7 	udiv	r4, r1, r7
 80008a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a6:	fb07 1114 	mls	r1, r7, r4, r1
 80008aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ae:	fb04 f106 	mul.w	r1, r4, r6
 80008b2:	4299      	cmp	r1, r3
 80008b4:	d90a      	bls.n	80008cc <__udivmoddi4+0x64>
 80008b6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80008be:	f080 8112 	bcs.w	8000ae6 <__udivmoddi4+0x27e>
 80008c2:	4299      	cmp	r1, r3
 80008c4:	f240 810f 	bls.w	8000ae6 <__udivmoddi4+0x27e>
 80008c8:	3c02      	subs	r4, #2
 80008ca:	4463      	add	r3, ip
 80008cc:	1a59      	subs	r1, r3, r1
 80008ce:	fa1f f38e 	uxth.w	r3, lr
 80008d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80008d6:	fb07 1110 	mls	r1, r7, r0, r1
 80008da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008de:	fb00 f606 	mul.w	r6, r0, r6
 80008e2:	429e      	cmp	r6, r3
 80008e4:	d90a      	bls.n	80008fc <__udivmoddi4+0x94>
 80008e6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80008ee:	f080 80fc 	bcs.w	8000aea <__udivmoddi4+0x282>
 80008f2:	429e      	cmp	r6, r3
 80008f4:	f240 80f9 	bls.w	8000aea <__udivmoddi4+0x282>
 80008f8:	4463      	add	r3, ip
 80008fa:	3802      	subs	r0, #2
 80008fc:	1b9b      	subs	r3, r3, r6
 80008fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000902:	2100      	movs	r1, #0
 8000904:	b11d      	cbz	r5, 800090e <__udivmoddi4+0xa6>
 8000906:	40d3      	lsrs	r3, r2
 8000908:	2200      	movs	r2, #0
 800090a:	e9c5 3200 	strd	r3, r2, [r5]
 800090e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000912:	428b      	cmp	r3, r1
 8000914:	d905      	bls.n	8000922 <__udivmoddi4+0xba>
 8000916:	b10d      	cbz	r5, 800091c <__udivmoddi4+0xb4>
 8000918:	e9c5 0100 	strd	r0, r1, [r5]
 800091c:	2100      	movs	r1, #0
 800091e:	4608      	mov	r0, r1
 8000920:	e7f5      	b.n	800090e <__udivmoddi4+0xa6>
 8000922:	fab3 f183 	clz	r1, r3
 8000926:	2900      	cmp	r1, #0
 8000928:	d146      	bne.n	80009b8 <__udivmoddi4+0x150>
 800092a:	42a3      	cmp	r3, r4
 800092c:	d302      	bcc.n	8000934 <__udivmoddi4+0xcc>
 800092e:	4290      	cmp	r0, r2
 8000930:	f0c0 80f0 	bcc.w	8000b14 <__udivmoddi4+0x2ac>
 8000934:	1a86      	subs	r6, r0, r2
 8000936:	eb64 0303 	sbc.w	r3, r4, r3
 800093a:	2001      	movs	r0, #1
 800093c:	2d00      	cmp	r5, #0
 800093e:	d0e6      	beq.n	800090e <__udivmoddi4+0xa6>
 8000940:	e9c5 6300 	strd	r6, r3, [r5]
 8000944:	e7e3      	b.n	800090e <__udivmoddi4+0xa6>
 8000946:	2a00      	cmp	r2, #0
 8000948:	f040 8090 	bne.w	8000a6c <__udivmoddi4+0x204>
 800094c:	eba1 040c 	sub.w	r4, r1, ip
 8000950:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000954:	fa1f f78c 	uxth.w	r7, ip
 8000958:	2101      	movs	r1, #1
 800095a:	fbb4 f6f8 	udiv	r6, r4, r8
 800095e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000962:	fb08 4416 	mls	r4, r8, r6, r4
 8000966:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800096a:	fb07 f006 	mul.w	r0, r7, r6
 800096e:	4298      	cmp	r0, r3
 8000970:	d908      	bls.n	8000984 <__udivmoddi4+0x11c>
 8000972:	eb1c 0303 	adds.w	r3, ip, r3
 8000976:	f106 34ff 	add.w	r4, r6, #4294967295
 800097a:	d202      	bcs.n	8000982 <__udivmoddi4+0x11a>
 800097c:	4298      	cmp	r0, r3
 800097e:	f200 80cd 	bhi.w	8000b1c <__udivmoddi4+0x2b4>
 8000982:	4626      	mov	r6, r4
 8000984:	1a1c      	subs	r4, r3, r0
 8000986:	fa1f f38e 	uxth.w	r3, lr
 800098a:	fbb4 f0f8 	udiv	r0, r4, r8
 800098e:	fb08 4410 	mls	r4, r8, r0, r4
 8000992:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000996:	fb00 f707 	mul.w	r7, r0, r7
 800099a:	429f      	cmp	r7, r3
 800099c:	d908      	bls.n	80009b0 <__udivmoddi4+0x148>
 800099e:	eb1c 0303 	adds.w	r3, ip, r3
 80009a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80009a6:	d202      	bcs.n	80009ae <__udivmoddi4+0x146>
 80009a8:	429f      	cmp	r7, r3
 80009aa:	f200 80b0 	bhi.w	8000b0e <__udivmoddi4+0x2a6>
 80009ae:	4620      	mov	r0, r4
 80009b0:	1bdb      	subs	r3, r3, r7
 80009b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009b6:	e7a5      	b.n	8000904 <__udivmoddi4+0x9c>
 80009b8:	f1c1 0620 	rsb	r6, r1, #32
 80009bc:	408b      	lsls	r3, r1
 80009be:	fa22 f706 	lsr.w	r7, r2, r6
 80009c2:	431f      	orrs	r7, r3
 80009c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80009c8:	fa04 f301 	lsl.w	r3, r4, r1
 80009cc:	ea43 030c 	orr.w	r3, r3, ip
 80009d0:	40f4      	lsrs	r4, r6
 80009d2:	fa00 f801 	lsl.w	r8, r0, r1
 80009d6:	0c38      	lsrs	r0, r7, #16
 80009d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009dc:	fbb4 fef0 	udiv	lr, r4, r0
 80009e0:	fa1f fc87 	uxth.w	ip, r7
 80009e4:	fb00 441e 	mls	r4, r0, lr, r4
 80009e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009ec:	fb0e f90c 	mul.w	r9, lr, ip
 80009f0:	45a1      	cmp	r9, r4
 80009f2:	fa02 f201 	lsl.w	r2, r2, r1
 80009f6:	d90a      	bls.n	8000a0e <__udivmoddi4+0x1a6>
 80009f8:	193c      	adds	r4, r7, r4
 80009fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009fe:	f080 8084 	bcs.w	8000b0a <__udivmoddi4+0x2a2>
 8000a02:	45a1      	cmp	r9, r4
 8000a04:	f240 8081 	bls.w	8000b0a <__udivmoddi4+0x2a2>
 8000a08:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a0c:	443c      	add	r4, r7
 8000a0e:	eba4 0409 	sub.w	r4, r4, r9
 8000a12:	fa1f f983 	uxth.w	r9, r3
 8000a16:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a1a:	fb00 4413 	mls	r4, r0, r3, r4
 8000a1e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a22:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a26:	45a4      	cmp	ip, r4
 8000a28:	d907      	bls.n	8000a3a <__udivmoddi4+0x1d2>
 8000a2a:	193c      	adds	r4, r7, r4
 8000a2c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a30:	d267      	bcs.n	8000b02 <__udivmoddi4+0x29a>
 8000a32:	45a4      	cmp	ip, r4
 8000a34:	d965      	bls.n	8000b02 <__udivmoddi4+0x29a>
 8000a36:	3b02      	subs	r3, #2
 8000a38:	443c      	add	r4, r7
 8000a3a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a3e:	fba0 9302 	umull	r9, r3, r0, r2
 8000a42:	eba4 040c 	sub.w	r4, r4, ip
 8000a46:	429c      	cmp	r4, r3
 8000a48:	46ce      	mov	lr, r9
 8000a4a:	469c      	mov	ip, r3
 8000a4c:	d351      	bcc.n	8000af2 <__udivmoddi4+0x28a>
 8000a4e:	d04e      	beq.n	8000aee <__udivmoddi4+0x286>
 8000a50:	b155      	cbz	r5, 8000a68 <__udivmoddi4+0x200>
 8000a52:	ebb8 030e 	subs.w	r3, r8, lr
 8000a56:	eb64 040c 	sbc.w	r4, r4, ip
 8000a5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000a5e:	40cb      	lsrs	r3, r1
 8000a60:	431e      	orrs	r6, r3
 8000a62:	40cc      	lsrs	r4, r1
 8000a64:	e9c5 6400 	strd	r6, r4, [r5]
 8000a68:	2100      	movs	r1, #0
 8000a6a:	e750      	b.n	800090e <__udivmoddi4+0xa6>
 8000a6c:	f1c2 0320 	rsb	r3, r2, #32
 8000a70:	fa20 f103 	lsr.w	r1, r0, r3
 8000a74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a78:	fa24 f303 	lsr.w	r3, r4, r3
 8000a7c:	4094      	lsls	r4, r2
 8000a7e:	430c      	orrs	r4, r1
 8000a80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a84:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a88:	fa1f f78c 	uxth.w	r7, ip
 8000a8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a90:	fb08 3110 	mls	r1, r8, r0, r3
 8000a94:	0c23      	lsrs	r3, r4, #16
 8000a96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a9a:	fb00 f107 	mul.w	r1, r0, r7
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	d908      	bls.n	8000ab4 <__udivmoddi4+0x24c>
 8000aa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000aa6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000aaa:	d22c      	bcs.n	8000b06 <__udivmoddi4+0x29e>
 8000aac:	4299      	cmp	r1, r3
 8000aae:	d92a      	bls.n	8000b06 <__udivmoddi4+0x29e>
 8000ab0:	3802      	subs	r0, #2
 8000ab2:	4463      	add	r3, ip
 8000ab4:	1a5b      	subs	r3, r3, r1
 8000ab6:	b2a4      	uxth	r4, r4
 8000ab8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000abc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ac0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ac4:	fb01 f307 	mul.w	r3, r1, r7
 8000ac8:	42a3      	cmp	r3, r4
 8000aca:	d908      	bls.n	8000ade <__udivmoddi4+0x276>
 8000acc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ad0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ad4:	d213      	bcs.n	8000afe <__udivmoddi4+0x296>
 8000ad6:	42a3      	cmp	r3, r4
 8000ad8:	d911      	bls.n	8000afe <__udivmoddi4+0x296>
 8000ada:	3902      	subs	r1, #2
 8000adc:	4464      	add	r4, ip
 8000ade:	1ae4      	subs	r4, r4, r3
 8000ae0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ae4:	e739      	b.n	800095a <__udivmoddi4+0xf2>
 8000ae6:	4604      	mov	r4, r0
 8000ae8:	e6f0      	b.n	80008cc <__udivmoddi4+0x64>
 8000aea:	4608      	mov	r0, r1
 8000aec:	e706      	b.n	80008fc <__udivmoddi4+0x94>
 8000aee:	45c8      	cmp	r8, r9
 8000af0:	d2ae      	bcs.n	8000a50 <__udivmoddi4+0x1e8>
 8000af2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000af6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000afa:	3801      	subs	r0, #1
 8000afc:	e7a8      	b.n	8000a50 <__udivmoddi4+0x1e8>
 8000afe:	4631      	mov	r1, r6
 8000b00:	e7ed      	b.n	8000ade <__udivmoddi4+0x276>
 8000b02:	4603      	mov	r3, r0
 8000b04:	e799      	b.n	8000a3a <__udivmoddi4+0x1d2>
 8000b06:	4630      	mov	r0, r6
 8000b08:	e7d4      	b.n	8000ab4 <__udivmoddi4+0x24c>
 8000b0a:	46d6      	mov	lr, sl
 8000b0c:	e77f      	b.n	8000a0e <__udivmoddi4+0x1a6>
 8000b0e:	4463      	add	r3, ip
 8000b10:	3802      	subs	r0, #2
 8000b12:	e74d      	b.n	80009b0 <__udivmoddi4+0x148>
 8000b14:	4606      	mov	r6, r0
 8000b16:	4623      	mov	r3, r4
 8000b18:	4608      	mov	r0, r1
 8000b1a:	e70f      	b.n	800093c <__udivmoddi4+0xd4>
 8000b1c:	3e02      	subs	r6, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	e730      	b.n	8000984 <__udivmoddi4+0x11c>
 8000b22:	bf00      	nop

08000b24 <__aeabi_idiv0>:
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <BMP280_write>:
uint16_t dig_T1, dig_P1;
int16_t  dig_T2, dig_T3, dig_P2,dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;

int32_t T_raw, P_raw, t_fine;

void BMP280_write(uint8_t Address, uint8_t Data){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	460a      	mov	r2, r1
 8000b32:	71fb      	strb	r3, [r7, #7]
 8000b34:	4613      	mov	r3, r2
 8000b36:	71bb      	strb	r3, [r7, #6]
	BMP280_select();
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b3e:	480f      	ldr	r0, [pc, #60]	@ (8000b7c <BMP280_write+0x54>)
 8000b40:	f008 fc0a 	bl	8009358 <HAL_GPIO_WritePin>
	Address &= 0x7F;
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8000b4e:	1df9      	adds	r1, r7, #7
 8000b50:	2364      	movs	r3, #100	@ 0x64
 8000b52:	2201      	movs	r2, #1
 8000b54:	480a      	ldr	r0, [pc, #40]	@ (8000b80 <BMP280_write+0x58>)
 8000b56:	f00b fc49 	bl	800c3ec <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BMP280, &Data, 1, 100);
 8000b5a:	1db9      	adds	r1, r7, #6
 8000b5c:	2364      	movs	r3, #100	@ 0x64
 8000b5e:	2201      	movs	r2, #1
 8000b60:	4807      	ldr	r0, [pc, #28]	@ (8000b80 <BMP280_write+0x58>)
 8000b62:	f00b fc43 	bl	800c3ec <HAL_SPI_Transmit>

	BMP280_unselect();
 8000b66:	2201      	movs	r2, #1
 8000b68:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b6c:	4803      	ldr	r0, [pc, #12]	@ (8000b7c <BMP280_write+0x54>)
 8000b6e:	f008 fbf3 	bl	8009358 <HAL_GPIO_WritePin>
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	58020400 	.word	0x58020400
 8000b80:	24004f8c 	.word	0x24004f8c

08000b84 <BMP280_read>:

uint8_t BMP280_read(uint8_t Address){
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer = (Address|0x80);
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	73fb      	strb	r3, [r7, #15]
	BMP280_select();
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b9e:	480e      	ldr	r0, [pc, #56]	@ (8000bd8 <BMP280_read+0x54>)
 8000ba0:	f008 fbda 	bl	8009358 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Buffer, 1, 100);
 8000ba4:	f107 010f 	add.w	r1, r7, #15
 8000ba8:	2364      	movs	r3, #100	@ 0x64
 8000baa:	2201      	movs	r2, #1
 8000bac:	480b      	ldr	r0, [pc, #44]	@ (8000bdc <BMP280_read+0x58>)
 8000bae:	f00b fc1d 	bl	800c3ec <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, &Buffer, 1, 100);
 8000bb2:	f107 010f 	add.w	r1, r7, #15
 8000bb6:	2364      	movs	r3, #100	@ 0x64
 8000bb8:	2201      	movs	r2, #1
 8000bba:	4808      	ldr	r0, [pc, #32]	@ (8000bdc <BMP280_read+0x58>)
 8000bbc:	f00b fe04 	bl	800c7c8 <HAL_SPI_Receive>
	BMP280_unselect();
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bc6:	4804      	ldr	r0, [pc, #16]	@ (8000bd8 <BMP280_read+0x54>)
 8000bc8:	f008 fbc6 	bl	8009358 <HAL_GPIO_WritePin>

	return Buffer;
 8000bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	58020400 	.word	0x58020400
 8000bdc:	24004f8c 	.word	0x24004f8c

08000be0 <BMP280_config>:

void BMP280_config(void){
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
	BMP280_write(ctrl_meas, 0x57);
 8000be4:	2157      	movs	r1, #87	@ 0x57
 8000be6:	20f4      	movs	r0, #244	@ 0xf4
 8000be8:	f7ff ff9e 	bl	8000b28 <BMP280_write>
	BMP280_write(config, 0x10);
 8000bec:	2110      	movs	r1, #16
 8000bee:	20f5      	movs	r0, #245	@ 0xf5
 8000bf0:	f7ff ff9a 	bl	8000b28 <BMP280_write>
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <BMP280_calibrationData>:

void BMP280_reset(void){
	BMP280_write(reset, 0xB6);
}

void BMP280_calibrationData(void){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af00      	add	r7, sp, #0
	uint8_t Address = 0x88;
 8000bfe:	2388      	movs	r3, #136	@ 0x88
 8000c00:	77fb      	strb	r3, [r7, #31]
	uint8_t Buffer[24] = {0};
 8000c02:	2300      	movs	r3, #0
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	f107 0308 	add.w	r3, r7, #8
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]
	BMP280_select();
 8000c16:	2200      	movs	r2, #0
 8000c18:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c1c:	4843      	ldr	r0, [pc, #268]	@ (8000d2c <BMP280_calibrationData+0x134>)
 8000c1e:	f008 fb9b 	bl	8009358 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8000c22:	f107 011f 	add.w	r1, r7, #31
 8000c26:	2364      	movs	r3, #100	@ 0x64
 8000c28:	2201      	movs	r2, #1
 8000c2a:	4841      	ldr	r0, [pc, #260]	@ (8000d30 <BMP280_calibrationData+0x138>)
 8000c2c:	f00b fbde 	bl	800c3ec <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 24, 100);
 8000c30:	1d39      	adds	r1, r7, #4
 8000c32:	2364      	movs	r3, #100	@ 0x64
 8000c34:	2218      	movs	r2, #24
 8000c36:	483e      	ldr	r0, [pc, #248]	@ (8000d30 <BMP280_calibrationData+0x138>)
 8000c38:	f00b fdc6 	bl	800c7c8 <HAL_SPI_Receive>
	BMP280_unselect();
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c42:	483a      	ldr	r0, [pc, #232]	@ (8000d2c <BMP280_calibrationData+0x134>)
 8000c44:	f008 fb88 	bl	8009358 <HAL_GPIO_WritePin>

	dig_T1 = (Buffer[1]<<8)|Buffer[0];
 8000c48:	797b      	ldrb	r3, [r7, #5]
 8000c4a:	021b      	lsls	r3, r3, #8
 8000c4c:	b21a      	sxth	r2, r3
 8000c4e:	793b      	ldrb	r3, [r7, #4]
 8000c50:	b21b      	sxth	r3, r3
 8000c52:	4313      	orrs	r3, r2
 8000c54:	b21b      	sxth	r3, r3
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	4b36      	ldr	r3, [pc, #216]	@ (8000d34 <BMP280_calibrationData+0x13c>)
 8000c5a:	801a      	strh	r2, [r3, #0]
	dig_T2 = (Buffer[3]<<8)|Buffer[2];
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	021b      	lsls	r3, r3, #8
 8000c60:	b21a      	sxth	r2, r3
 8000c62:	79bb      	ldrb	r3, [r7, #6]
 8000c64:	b21b      	sxth	r3, r3
 8000c66:	4313      	orrs	r3, r2
 8000c68:	b21a      	sxth	r2, r3
 8000c6a:	4b33      	ldr	r3, [pc, #204]	@ (8000d38 <BMP280_calibrationData+0x140>)
 8000c6c:	801a      	strh	r2, [r3, #0]
	dig_T3 = (Buffer[5]<<8)|Buffer[4];
 8000c6e:	7a7b      	ldrb	r3, [r7, #9]
 8000c70:	021b      	lsls	r3, r3, #8
 8000c72:	b21a      	sxth	r2, r3
 8000c74:	7a3b      	ldrb	r3, [r7, #8]
 8000c76:	b21b      	sxth	r3, r3
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	b21a      	sxth	r2, r3
 8000c7c:	4b2f      	ldr	r3, [pc, #188]	@ (8000d3c <BMP280_calibrationData+0x144>)
 8000c7e:	801a      	strh	r2, [r3, #0]

	dig_P1 = (Buffer[7]<<8)|Buffer[6];
 8000c80:	7afb      	ldrb	r3, [r7, #11]
 8000c82:	021b      	lsls	r3, r3, #8
 8000c84:	b21a      	sxth	r2, r3
 8000c86:	7abb      	ldrb	r3, [r7, #10]
 8000c88:	b21b      	sxth	r3, r3
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	b21b      	sxth	r3, r3
 8000c8e:	b29a      	uxth	r2, r3
 8000c90:	4b2b      	ldr	r3, [pc, #172]	@ (8000d40 <BMP280_calibrationData+0x148>)
 8000c92:	801a      	strh	r2, [r3, #0]
	dig_P2 = (Buffer[9]<<8)|Buffer[8];
 8000c94:	7b7b      	ldrb	r3, [r7, #13]
 8000c96:	021b      	lsls	r3, r3, #8
 8000c98:	b21a      	sxth	r2, r3
 8000c9a:	7b3b      	ldrb	r3, [r7, #12]
 8000c9c:	b21b      	sxth	r3, r3
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	b21a      	sxth	r2, r3
 8000ca2:	4b28      	ldr	r3, [pc, #160]	@ (8000d44 <BMP280_calibrationData+0x14c>)
 8000ca4:	801a      	strh	r2, [r3, #0]
	dig_P3 = (Buffer[11]<<8)|Buffer[10];
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	021b      	lsls	r3, r3, #8
 8000caa:	b21a      	sxth	r2, r3
 8000cac:	7bbb      	ldrb	r3, [r7, #14]
 8000cae:	b21b      	sxth	r3, r3
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	b21a      	sxth	r2, r3
 8000cb4:	4b24      	ldr	r3, [pc, #144]	@ (8000d48 <BMP280_calibrationData+0x150>)
 8000cb6:	801a      	strh	r2, [r3, #0]
	dig_P4 = (Buffer[13]<<8)|Buffer[12];
 8000cb8:	7c7b      	ldrb	r3, [r7, #17]
 8000cba:	021b      	lsls	r3, r3, #8
 8000cbc:	b21a      	sxth	r2, r3
 8000cbe:	7c3b      	ldrb	r3, [r7, #16]
 8000cc0:	b21b      	sxth	r3, r3
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	b21a      	sxth	r2, r3
 8000cc6:	4b21      	ldr	r3, [pc, #132]	@ (8000d4c <BMP280_calibrationData+0x154>)
 8000cc8:	801a      	strh	r2, [r3, #0]
	dig_P5 = (Buffer[15]<<8)|Buffer[14];
 8000cca:	7cfb      	ldrb	r3, [r7, #19]
 8000ccc:	021b      	lsls	r3, r3, #8
 8000cce:	b21a      	sxth	r2, r3
 8000cd0:	7cbb      	ldrb	r3, [r7, #18]
 8000cd2:	b21b      	sxth	r3, r3
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	b21a      	sxth	r2, r3
 8000cd8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d50 <BMP280_calibrationData+0x158>)
 8000cda:	801a      	strh	r2, [r3, #0]
	dig_P6 = (Buffer[17]<<8)|Buffer[16];
 8000cdc:	7d7b      	ldrb	r3, [r7, #21]
 8000cde:	021b      	lsls	r3, r3, #8
 8000ce0:	b21a      	sxth	r2, r3
 8000ce2:	7d3b      	ldrb	r3, [r7, #20]
 8000ce4:	b21b      	sxth	r3, r3
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	b21a      	sxth	r2, r3
 8000cea:	4b1a      	ldr	r3, [pc, #104]	@ (8000d54 <BMP280_calibrationData+0x15c>)
 8000cec:	801a      	strh	r2, [r3, #0]
	dig_P7 = (Buffer[19]<<8)|Buffer[18];
 8000cee:	7dfb      	ldrb	r3, [r7, #23]
 8000cf0:	021b      	lsls	r3, r3, #8
 8000cf2:	b21a      	sxth	r2, r3
 8000cf4:	7dbb      	ldrb	r3, [r7, #22]
 8000cf6:	b21b      	sxth	r3, r3
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	b21a      	sxth	r2, r3
 8000cfc:	4b16      	ldr	r3, [pc, #88]	@ (8000d58 <BMP280_calibrationData+0x160>)
 8000cfe:	801a      	strh	r2, [r3, #0]
	dig_P8 = (Buffer[21]<<8)|Buffer[20];
 8000d00:	7e7b      	ldrb	r3, [r7, #25]
 8000d02:	021b      	lsls	r3, r3, #8
 8000d04:	b21a      	sxth	r2, r3
 8000d06:	7e3b      	ldrb	r3, [r7, #24]
 8000d08:	b21b      	sxth	r3, r3
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	b21a      	sxth	r2, r3
 8000d0e:	4b13      	ldr	r3, [pc, #76]	@ (8000d5c <BMP280_calibrationData+0x164>)
 8000d10:	801a      	strh	r2, [r3, #0]
	dig_P9 = (Buffer[23]<<8)|Buffer[22];
 8000d12:	7efb      	ldrb	r3, [r7, #27]
 8000d14:	021b      	lsls	r3, r3, #8
 8000d16:	b21a      	sxth	r2, r3
 8000d18:	7ebb      	ldrb	r3, [r7, #26]
 8000d1a:	b21b      	sxth	r3, r3
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	b21a      	sxth	r2, r3
 8000d20:	4b0f      	ldr	r3, [pc, #60]	@ (8000d60 <BMP280_calibrationData+0x168>)
 8000d22:	801a      	strh	r2, [r3, #0]
}
 8000d24:	bf00      	nop
 8000d26:	3720      	adds	r7, #32
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	58020400 	.word	0x58020400
 8000d30:	24004f8c 	.word	0x24004f8c
 8000d34:	240002e0 	.word	0x240002e0
 8000d38:	240002e4 	.word	0x240002e4
 8000d3c:	240002e6 	.word	0x240002e6
 8000d40:	240002e2 	.word	0x240002e2
 8000d44:	240002e8 	.word	0x240002e8
 8000d48:	240002ea 	.word	0x240002ea
 8000d4c:	240002ec 	.word	0x240002ec
 8000d50:	240002ee 	.word	0x240002ee
 8000d54:	240002f0 	.word	0x240002f0
 8000d58:	240002f2 	.word	0x240002f2
 8000d5c:	240002f4 	.word	0x240002f4
 8000d60:	240002f6 	.word	0x240002f6

08000d64 <BMP280_readRawValues>:

void BMP280_readRawValues(void){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
	uint8_t Address = press_msb;
 8000d6a:	23f7      	movs	r3, #247	@ 0xf7
 8000d6c:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[6] = {0};
 8000d6e:	2300      	movs	r3, #0
 8000d70:	603b      	str	r3, [r7, #0]
 8000d72:	2300      	movs	r3, #0
 8000d74:	80bb      	strh	r3, [r7, #4]
	BMP280_select();
 8000d76:	2200      	movs	r2, #0
 8000d78:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d7c:	4817      	ldr	r0, [pc, #92]	@ (8000ddc <BMP280_readRawValues+0x78>)
 8000d7e:	f008 faeb 	bl	8009358 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8000d82:	1df9      	adds	r1, r7, #7
 8000d84:	2364      	movs	r3, #100	@ 0x64
 8000d86:	2201      	movs	r2, #1
 8000d88:	4815      	ldr	r0, [pc, #84]	@ (8000de0 <BMP280_readRawValues+0x7c>)
 8000d8a:	f00b fb2f 	bl	800c3ec <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 6, 100);
 8000d8e:	4639      	mov	r1, r7
 8000d90:	2364      	movs	r3, #100	@ 0x64
 8000d92:	2206      	movs	r2, #6
 8000d94:	4812      	ldr	r0, [pc, #72]	@ (8000de0 <BMP280_readRawValues+0x7c>)
 8000d96:	f00b fd17 	bl	800c7c8 <HAL_SPI_Receive>
	BMP280_unselect();
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000da0:	480e      	ldr	r0, [pc, #56]	@ (8000ddc <BMP280_readRawValues+0x78>)
 8000da2:	f008 fad9 	bl	8009358 <HAL_GPIO_WritePin>

	P_raw = (Buffer[0]<<12)|(Buffer[1]<<4)|(Buffer[2]>>4);
 8000da6:	783b      	ldrb	r3, [r7, #0]
 8000da8:	031a      	lsls	r2, r3, #12
 8000daa:	787b      	ldrb	r3, [r7, #1]
 8000dac:	011b      	lsls	r3, r3, #4
 8000dae:	4313      	orrs	r3, r2
 8000db0:	78ba      	ldrb	r2, [r7, #2]
 8000db2:	0912      	lsrs	r2, r2, #4
 8000db4:	b2d2      	uxtb	r2, r2
 8000db6:	4313      	orrs	r3, r2
 8000db8:	4a0a      	ldr	r2, [pc, #40]	@ (8000de4 <BMP280_readRawValues+0x80>)
 8000dba:	6013      	str	r3, [r2, #0]
	T_raw = (Buffer[3]<<12)|(Buffer[4]<<4)|(Buffer[5]>>4);
 8000dbc:	78fb      	ldrb	r3, [r7, #3]
 8000dbe:	031a      	lsls	r2, r3, #12
 8000dc0:	793b      	ldrb	r3, [r7, #4]
 8000dc2:	011b      	lsls	r3, r3, #4
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	797a      	ldrb	r2, [r7, #5]
 8000dc8:	0912      	lsrs	r2, r2, #4
 8000dca:	b2d2      	uxtb	r2, r2
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	4a06      	ldr	r2, [pc, #24]	@ (8000de8 <BMP280_readRawValues+0x84>)
 8000dd0:	6013      	str	r3, [r2, #0]
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	58020400 	.word	0x58020400
 8000de0:	24004f8c 	.word	0x24004f8c
 8000de4:	240002fc 	.word	0x240002fc
 8000de8:	240002f8 	.word	0x240002f8

08000dec <BMP280_measureT>:

int32_t BMP280_measureT(int32_t adc_T){
 8000dec:	b480      	push	{r7}
 8000dee:	b087      	sub	sp, #28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 =  ((((T_raw>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8000df4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e60 <BMP280_measureT+0x74>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	10da      	asrs	r2, r3, #3
 8000dfa:	4b1a      	ldr	r3, [pc, #104]	@ (8000e64 <BMP280_measureT+0x78>)
 8000dfc:	881b      	ldrh	r3, [r3, #0]
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	4a19      	ldr	r2, [pc, #100]	@ (8000e68 <BMP280_measureT+0x7c>)
 8000e04:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e08:	fb02 f303 	mul.w	r3, r2, r3
 8000e0c:	12db      	asrs	r3, r3, #11
 8000e0e:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	111b      	asrs	r3, r3, #4
 8000e14:	4a13      	ldr	r2, [pc, #76]	@ (8000e64 <BMP280_measureT+0x78>)
 8000e16:	8812      	ldrh	r2, [r2, #0]
 8000e18:	1a9b      	subs	r3, r3, r2
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	1112      	asrs	r2, r2, #4
 8000e1e:	4911      	ldr	r1, [pc, #68]	@ (8000e64 <BMP280_measureT+0x78>)
 8000e20:	8809      	ldrh	r1, [r1, #0]
 8000e22:	1a52      	subs	r2, r2, r1
 8000e24:	fb02 f303 	mul.w	r3, r2, r3
 8000e28:	131b      	asrs	r3, r3, #12
 8000e2a:	4a10      	ldr	r2, [pc, #64]	@ (8000e6c <BMP280_measureT+0x80>)
 8000e2c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e30:	fb02 f303 	mul.w	r3, r2, r3
 8000e34:	139b      	asrs	r3, r3, #14
 8000e36:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8000e38:	697a      	ldr	r2, [r7, #20]
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	4a0c      	ldr	r2, [pc, #48]	@ (8000e70 <BMP280_measureT+0x84>)
 8000e40:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8000e42:	4b0b      	ldr	r3, [pc, #44]	@ (8000e70 <BMP280_measureT+0x84>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	4613      	mov	r3, r2
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	4413      	add	r3, r2
 8000e4c:	3380      	adds	r3, #128	@ 0x80
 8000e4e:	121b      	asrs	r3, r3, #8
 8000e50:	60fb      	str	r3, [r7, #12]
	return T;
 8000e52:	68fb      	ldr	r3, [r7, #12]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	371c      	adds	r7, #28
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	240002f8 	.word	0x240002f8
 8000e64:	240002e0 	.word	0x240002e0
 8000e68:	240002e4 	.word	0x240002e4
 8000e6c:	240002e6 	.word	0x240002e6
 8000e70:	24000300 	.word	0x24000300

08000e74 <BMP280_measureP>:

uint32_t BMP280_measureP(int32_t adc_P){
 8000e74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000e78:	b0ca      	sub	sp, #296	@ 0x128
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8000e80:	4baf      	ldr	r3, [pc, #700]	@ (8001140 <BMP280_measureP+0x2cc>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	17da      	asrs	r2, r3, #31
 8000e86:	461c      	mov	r4, r3
 8000e88:	4615      	mov	r5, r2
 8000e8a:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8000e8e:	f145 3bff 	adc.w	fp, r5, #4294967295
 8000e92:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 8000e96:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000e9a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000e9e:	fb03 f102 	mul.w	r1, r3, r2
 8000ea2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000ea6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000eaa:	fb02 f303 	mul.w	r3, r2, r3
 8000eae:	18ca      	adds	r2, r1, r3
 8000eb0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000eb4:	fba3 8903 	umull	r8, r9, r3, r3
 8000eb8:	eb02 0309 	add.w	r3, r2, r9
 8000ebc:	4699      	mov	r9, r3
 8000ebe:	4ba1      	ldr	r3, [pc, #644]	@ (8001144 <BMP280_measureP+0x2d0>)
 8000ec0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ec4:	b21b      	sxth	r3, r3
 8000ec6:	17da      	asrs	r2, r3, #31
 8000ec8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000ecc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8000ed0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	fb03 f209 	mul.w	r2, r3, r9
 8000eda:	460b      	mov	r3, r1
 8000edc:	fb08 f303 	mul.w	r3, r8, r3
 8000ee0:	4413      	add	r3, r2
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	fba8 1202 	umull	r1, r2, r8, r2
 8000ee8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8000eec:	460a      	mov	r2, r1
 8000eee:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8000ef2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000ef6:	4413      	add	r3, r2
 8000ef8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000efc:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8000f00:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8000f04:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8000f08:	4b8f      	ldr	r3, [pc, #572]	@ (8001148 <BMP280_measureP+0x2d4>)
 8000f0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f0e:	b21b      	sxth	r3, r3
 8000f10:	17da      	asrs	r2, r3, #31
 8000f12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000f16:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8000f1a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000f1e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8000f22:	462a      	mov	r2, r5
 8000f24:	fb02 f203 	mul.w	r2, r2, r3
 8000f28:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000f2c:	4621      	mov	r1, r4
 8000f2e:	fb01 f303 	mul.w	r3, r1, r3
 8000f32:	441a      	add	r2, r3
 8000f34:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000f38:	4621      	mov	r1, r4
 8000f3a:	fba3 1301 	umull	r1, r3, r3, r1
 8000f3e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000f42:	460b      	mov	r3, r1
 8000f44:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000f4c:	18d3      	adds	r3, r2, r3
 8000f4e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000f52:	f04f 0000 	mov.w	r0, #0
 8000f56:	f04f 0100 	mov.w	r1, #0
 8000f5a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8000f5e:	462b      	mov	r3, r5
 8000f60:	0459      	lsls	r1, r3, #17
 8000f62:	4623      	mov	r3, r4
 8000f64:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000f68:	4623      	mov	r3, r4
 8000f6a:	0458      	lsls	r0, r3, #17
 8000f6c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000f70:	1814      	adds	r4, r2, r0
 8000f72:	643c      	str	r4, [r7, #64]	@ 0x40
 8000f74:	414b      	adcs	r3, r1
 8000f76:	647b      	str	r3, [r7, #68]	@ 0x44
 8000f78:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8000f7c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8000f80:	4b72      	ldr	r3, [pc, #456]	@ (800114c <BMP280_measureP+0x2d8>)
 8000f82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f86:	b21b      	sxth	r3, r3
 8000f88:	17da      	asrs	r2, r3, #31
 8000f8a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000f8e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000f92:	f04f 0000 	mov.w	r0, #0
 8000f96:	f04f 0100 	mov.w	r1, #0
 8000f9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000f9e:	00d9      	lsls	r1, r3, #3
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000fa6:	1814      	adds	r4, r2, r0
 8000fa8:	63bc      	str	r4, [r7, #56]	@ 0x38
 8000faa:	414b      	adcs	r3, r1
 8000fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000fae:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8000fb2:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8000fb6:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000fba:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000fbe:	fb03 f102 	mul.w	r1, r3, r2
 8000fc2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000fc6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000fca:	fb02 f303 	mul.w	r3, r2, r3
 8000fce:	18ca      	adds	r2, r1, r3
 8000fd0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000fd4:	fba3 1303 	umull	r1, r3, r3, r3
 8000fd8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000fdc:	460b      	mov	r3, r1
 8000fde:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000fe2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000fe6:	18d3      	adds	r3, r2, r3
 8000fe8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000fec:	4b58      	ldr	r3, [pc, #352]	@ (8001150 <BMP280_measureP+0x2dc>)
 8000fee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff2:	b21b      	sxth	r3, r3
 8000ff4:	17da      	asrs	r2, r3, #31
 8000ff6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000ffa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000ffe:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8001002:	462b      	mov	r3, r5
 8001004:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001008:	4642      	mov	r2, r8
 800100a:	fb02 f203 	mul.w	r2, r2, r3
 800100e:	464b      	mov	r3, r9
 8001010:	4621      	mov	r1, r4
 8001012:	fb01 f303 	mul.w	r3, r1, r3
 8001016:	4413      	add	r3, r2
 8001018:	4622      	mov	r2, r4
 800101a:	4641      	mov	r1, r8
 800101c:	fba2 1201 	umull	r1, r2, r2, r1
 8001020:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001024:	460a      	mov	r2, r1
 8001026:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 800102a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800102e:	4413      	add	r3, r2
 8001030:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001034:	f04f 0000 	mov.w	r0, #0
 8001038:	f04f 0100 	mov.w	r1, #0
 800103c:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001040:	4623      	mov	r3, r4
 8001042:	0a18      	lsrs	r0, r3, #8
 8001044:	462b      	mov	r3, r5
 8001046:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800104a:	462b      	mov	r3, r5
 800104c:	1219      	asrs	r1, r3, #8
 800104e:	4b41      	ldr	r3, [pc, #260]	@ (8001154 <BMP280_measureP+0x2e0>)
 8001050:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001054:	b21b      	sxth	r3, r3
 8001056:	17da      	asrs	r2, r3, #31
 8001058:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800105c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001060:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001064:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001068:	464a      	mov	r2, r9
 800106a:	fb02 f203 	mul.w	r2, r2, r3
 800106e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001072:	4644      	mov	r4, r8
 8001074:	fb04 f303 	mul.w	r3, r4, r3
 8001078:	441a      	add	r2, r3
 800107a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800107e:	4644      	mov	r4, r8
 8001080:	fba3 4304 	umull	r4, r3, r3, r4
 8001084:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001088:	4623      	mov	r3, r4
 800108a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800108e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001092:	18d3      	adds	r3, r2, r3
 8001094:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001098:	f04f 0200 	mov.w	r2, #0
 800109c:	f04f 0300 	mov.w	r3, #0
 80010a0:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80010a4:	464c      	mov	r4, r9
 80010a6:	0323      	lsls	r3, r4, #12
 80010a8:	4644      	mov	r4, r8
 80010aa:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80010ae:	4644      	mov	r4, r8
 80010b0:	0322      	lsls	r2, r4, #12
 80010b2:	1884      	adds	r4, r0, r2
 80010b4:	633c      	str	r4, [r7, #48]	@ 0x30
 80010b6:	eb41 0303 	adc.w	r3, r1, r3
 80010ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80010bc:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80010c0:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 80010c4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80010c8:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80010cc:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 80010d0:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80010d4:	4b20      	ldr	r3, [pc, #128]	@ (8001158 <BMP280_measureP+0x2e4>)
 80010d6:	881b      	ldrh	r3, [r3, #0]
 80010d8:	b29b      	uxth	r3, r3
 80010da:	2200      	movs	r2, #0
 80010dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80010e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80010e4:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80010e8:	462b      	mov	r3, r5
 80010ea:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80010ee:	4642      	mov	r2, r8
 80010f0:	fb02 f203 	mul.w	r2, r2, r3
 80010f4:	464b      	mov	r3, r9
 80010f6:	4621      	mov	r1, r4
 80010f8:	fb01 f303 	mul.w	r3, r1, r3
 80010fc:	4413      	add	r3, r2
 80010fe:	4622      	mov	r2, r4
 8001100:	4641      	mov	r1, r8
 8001102:	fba2 1201 	umull	r1, r2, r2, r1
 8001106:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800110a:	460a      	mov	r2, r1
 800110c:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001110:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001114:	4413      	add	r3, r2
 8001116:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800111a:	f04f 0200 	mov.w	r2, #0
 800111e:	f04f 0300 	mov.w	r3, #0
 8001122:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001126:	4629      	mov	r1, r5
 8001128:	104a      	asrs	r2, r1, #1
 800112a:	4629      	mov	r1, r5
 800112c:	17cb      	asrs	r3, r1, #31
 800112e:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 8001132:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001136:	4313      	orrs	r3, r2
 8001138:	d110      	bne.n	800115c <BMP280_measureP+0x2e8>
	{
	return 0;
 800113a:	2300      	movs	r3, #0
 800113c:	e154      	b.n	80013e8 <BMP280_measureP+0x574>
 800113e:	bf00      	nop
 8001140:	24000300 	.word	0x24000300
 8001144:	240002f0 	.word	0x240002f0
 8001148:	240002ee 	.word	0x240002ee
 800114c:	240002ec 	.word	0x240002ec
 8001150:	240002ea 	.word	0x240002ea
 8001154:	240002e8 	.word	0x240002e8
 8001158:	240002e2 	.word	0x240002e2
	}
	p = 1048576-adc_P;
 800115c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001160:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001164:	17da      	asrs	r2, r3, #31
 8001166:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001168:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800116a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800116e:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8001172:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001176:	105b      	asrs	r3, r3, #1
 8001178:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800117c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001180:	07db      	lsls	r3, r3, #31
 8001182:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001186:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800118a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800118e:	4621      	mov	r1, r4
 8001190:	1a89      	subs	r1, r1, r2
 8001192:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001194:	4629      	mov	r1, r5
 8001196:	eb61 0303 	sbc.w	r3, r1, r3
 800119a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800119c:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80011a0:	4622      	mov	r2, r4
 80011a2:	462b      	mov	r3, r5
 80011a4:	1891      	adds	r1, r2, r2
 80011a6:	6239      	str	r1, [r7, #32]
 80011a8:	415b      	adcs	r3, r3
 80011aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80011ac:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80011b0:	4621      	mov	r1, r4
 80011b2:	1851      	adds	r1, r2, r1
 80011b4:	61b9      	str	r1, [r7, #24]
 80011b6:	4629      	mov	r1, r5
 80011b8:	414b      	adcs	r3, r1
 80011ba:	61fb      	str	r3, [r7, #28]
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	f04f 0300 	mov.w	r3, #0
 80011c4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80011c8:	4649      	mov	r1, r9
 80011ca:	018b      	lsls	r3, r1, #6
 80011cc:	4641      	mov	r1, r8
 80011ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80011d2:	4641      	mov	r1, r8
 80011d4:	018a      	lsls	r2, r1, #6
 80011d6:	4641      	mov	r1, r8
 80011d8:	1889      	adds	r1, r1, r2
 80011da:	6139      	str	r1, [r7, #16]
 80011dc:	4649      	mov	r1, r9
 80011de:	eb43 0101 	adc.w	r1, r3, r1
 80011e2:	6179      	str	r1, [r7, #20]
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	f04f 0300 	mov.w	r3, #0
 80011ec:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80011f0:	4649      	mov	r1, r9
 80011f2:	008b      	lsls	r3, r1, #2
 80011f4:	4641      	mov	r1, r8
 80011f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80011fa:	4641      	mov	r1, r8
 80011fc:	008a      	lsls	r2, r1, #2
 80011fe:	4610      	mov	r0, r2
 8001200:	4619      	mov	r1, r3
 8001202:	4603      	mov	r3, r0
 8001204:	4622      	mov	r2, r4
 8001206:	189b      	adds	r3, r3, r2
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	460b      	mov	r3, r1
 800120c:	462a      	mov	r2, r5
 800120e:	eb42 0303 	adc.w	r3, r2, r3
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	f04f 0200 	mov.w	r2, #0
 8001218:	f04f 0300 	mov.w	r3, #0
 800121c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001220:	4649      	mov	r1, r9
 8001222:	008b      	lsls	r3, r1, #2
 8001224:	4641      	mov	r1, r8
 8001226:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800122a:	4641      	mov	r1, r8
 800122c:	008a      	lsls	r2, r1, #2
 800122e:	4610      	mov	r0, r2
 8001230:	4619      	mov	r1, r3
 8001232:	4603      	mov	r3, r0
 8001234:	4622      	mov	r2, r4
 8001236:	189b      	adds	r3, r3, r2
 8001238:	673b      	str	r3, [r7, #112]	@ 0x70
 800123a:	462b      	mov	r3, r5
 800123c:	460a      	mov	r2, r1
 800123e:	eb42 0303 	adc.w	r3, r2, r3
 8001242:	677b      	str	r3, [r7, #116]	@ 0x74
 8001244:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001248:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800124c:	f7ff fa6c 	bl	8000728 <__aeabi_ldivmod>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001258:	4b66      	ldr	r3, [pc, #408]	@ (80013f4 <BMP280_measureP+0x580>)
 800125a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800125e:	b21b      	sxth	r3, r3
 8001260:	17da      	asrs	r2, r3, #31
 8001262:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001264:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001266:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800126a:	f04f 0000 	mov.w	r0, #0
 800126e:	f04f 0100 	mov.w	r1, #0
 8001272:	0b50      	lsrs	r0, r2, #13
 8001274:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001278:	1359      	asrs	r1, r3, #13
 800127a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800127e:	462b      	mov	r3, r5
 8001280:	fb00 f203 	mul.w	r2, r0, r3
 8001284:	4623      	mov	r3, r4
 8001286:	fb03 f301 	mul.w	r3, r3, r1
 800128a:	4413      	add	r3, r2
 800128c:	4622      	mov	r2, r4
 800128e:	fba2 1200 	umull	r1, r2, r2, r0
 8001292:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001296:	460a      	mov	r2, r1
 8001298:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 800129c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80012a0:	4413      	add	r3, r2
 80012a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80012a6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80012aa:	f04f 0000 	mov.w	r0, #0
 80012ae:	f04f 0100 	mov.w	r1, #0
 80012b2:	0b50      	lsrs	r0, r2, #13
 80012b4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80012b8:	1359      	asrs	r1, r3, #13
 80012ba:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80012be:	462b      	mov	r3, r5
 80012c0:	fb00 f203 	mul.w	r2, r0, r3
 80012c4:	4623      	mov	r3, r4
 80012c6:	fb03 f301 	mul.w	r3, r3, r1
 80012ca:	4413      	add	r3, r2
 80012cc:	4622      	mov	r2, r4
 80012ce:	fba2 1200 	umull	r1, r2, r2, r0
 80012d2:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80012d6:	460a      	mov	r2, r1
 80012d8:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80012dc:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80012e0:	4413      	add	r3, r2
 80012e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80012e6:	f04f 0200 	mov.w	r2, #0
 80012ea:	f04f 0300 	mov.w	r3, #0
 80012ee:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80012f2:	4621      	mov	r1, r4
 80012f4:	0e4a      	lsrs	r2, r1, #25
 80012f6:	4629      	mov	r1, r5
 80012f8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80012fc:	4629      	mov	r1, r5
 80012fe:	164b      	asrs	r3, r1, #25
 8001300:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8001304:	4b3c      	ldr	r3, [pc, #240]	@ (80013f8 <BMP280_measureP+0x584>)
 8001306:	f9b3 3000 	ldrsh.w	r3, [r3]
 800130a:	b21b      	sxth	r3, r3
 800130c:	17da      	asrs	r2, r3, #31
 800130e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001310:	667a      	str	r2, [r7, #100]	@ 0x64
 8001312:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001316:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800131a:	462a      	mov	r2, r5
 800131c:	fb02 f203 	mul.w	r2, r2, r3
 8001320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001324:	4621      	mov	r1, r4
 8001326:	fb01 f303 	mul.w	r3, r1, r3
 800132a:	4413      	add	r3, r2
 800132c:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001330:	4621      	mov	r1, r4
 8001332:	fba2 1201 	umull	r1, r2, r2, r1
 8001336:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800133a:	460a      	mov	r2, r1
 800133c:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001340:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001344:	4413      	add	r3, r2
 8001346:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800134a:	f04f 0200 	mov.w	r2, #0
 800134e:	f04f 0300 	mov.w	r3, #0
 8001352:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001356:	4621      	mov	r1, r4
 8001358:	0cca      	lsrs	r2, r1, #19
 800135a:	4629      	mov	r1, r5
 800135c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001360:	4629      	mov	r1, r5
 8001362:	14cb      	asrs	r3, r1, #19
 8001364:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001368:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800136c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001370:	1884      	adds	r4, r0, r2
 8001372:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001374:	eb41 0303 	adc.w	r3, r1, r3
 8001378:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800137a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800137e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001382:	4621      	mov	r1, r4
 8001384:	1889      	adds	r1, r1, r2
 8001386:	6539      	str	r1, [r7, #80]	@ 0x50
 8001388:	4629      	mov	r1, r5
 800138a:	eb43 0101 	adc.w	r1, r3, r1
 800138e:	6579      	str	r1, [r7, #84]	@ 0x54
 8001390:	f04f 0000 	mov.w	r0, #0
 8001394:	f04f 0100 	mov.w	r1, #0
 8001398:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800139c:	4623      	mov	r3, r4
 800139e:	0a18      	lsrs	r0, r3, #8
 80013a0:	462b      	mov	r3, r5
 80013a2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80013a6:	462b      	mov	r3, r5
 80013a8:	1219      	asrs	r1, r3, #8
 80013aa:	4b14      	ldr	r3, [pc, #80]	@ (80013fc <BMP280_measureP+0x588>)
 80013ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	17da      	asrs	r2, r3, #31
 80013b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80013b6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	f04f 0300 	mov.w	r3, #0
 80013c0:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 80013c4:	464c      	mov	r4, r9
 80013c6:	0123      	lsls	r3, r4, #4
 80013c8:	4644      	mov	r4, r8
 80013ca:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80013ce:	4644      	mov	r4, r8
 80013d0:	0122      	lsls	r2, r4, #4
 80013d2:	1884      	adds	r4, r0, r2
 80013d4:	603c      	str	r4, [r7, #0]
 80013d6:	eb41 0303 	adc.w	r3, r1, r3
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	e9d7 3400 	ldrd	r3, r4, [r7]
 80013e0:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 80013e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80013ee:	46bd      	mov	sp, r7
 80013f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80013f4:	240002f6 	.word	0x240002f6
 80013f8:	240002f4 	.word	0x240002f4
 80013fc:	240002f2 	.word	0x240002f2

08001400 <BMP280_measureH>:

uint16_t BMP280_measureH(uint32_t Pres, int32_t Temp){
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
	double var1, var2, h;

	if(Pres == 0) return 0;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d101      	bne.n	8001414 <BMP280_measureH+0x14>
 8001410:	2300      	movs	r3, #0
 8001412:	e03d      	b.n	8001490 <BMP280_measureH+0x90>
	var1 = -log(((double)Pres)/101325);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	ee07 3a90 	vmov	s15, r3
 800141a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800141e:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8001498 <BMP280_measureH+0x98>
 8001422:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001426:	eeb0 0b46 	vmov.f64	d0, d6
 800142a:	f018 f9d9 	bl	80197e0 <log>
 800142e:	eeb0 7b40 	vmov.f64	d7, d0
 8001432:	eeb1 7b47 	vneg.f64	d7, d7
 8001436:	ed87 7b06 	vstr	d7, [r7, #24]

	if(var1 == 0) return 0;
 800143a:	ed97 7b06 	vldr	d7, [r7, #24]
 800143e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001446:	d101      	bne.n	800144c <BMP280_measureH+0x4c>
 8001448:	2300      	movs	r3, #0
 800144a:	e021      	b.n	8001490 <BMP280_measureH+0x90>
	var2 = 0.0341663/((((double)Temp)/100)+273.15);
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	ee07 3a90 	vmov	s15, r3
 8001452:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001456:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 80014a0 <BMP280_measureH+0xa0>
 800145a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800145e:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 80014a8 <BMP280_measureH+0xa8>
 8001462:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001466:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 80014b0 <BMP280_measureH+0xb0>
 800146a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800146e:	ed87 7b04 	vstr	d7, [r7, #16]
	h = var1/var2;
 8001472:	ed97 5b06 	vldr	d5, [r7, #24]
 8001476:	ed97 6b04 	vldr	d6, [r7, #16]
 800147a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800147e:	ed87 7b02 	vstr	d7, [r7, #8]
	return (uint16_t)h;
 8001482:	ed97 7b02 	vldr	d7, [r7, #8]
 8001486:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800148a:	ee17 3a90 	vmov	r3, s15
 800148e:	b29b      	uxth	r3, r3
}
 8001490:	4618      	mov	r0, r3
 8001492:	3720      	adds	r7, #32
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	00000000 	.word	0x00000000
 800149c:	40f8bcd0 	.word	0x40f8bcd0
 80014a0:	00000000 	.word	0x00000000
 80014a4:	40590000 	.word	0x40590000
 80014a8:	66666666 	.word	0x66666666
 80014ac:	40711266 	.word	0x40711266
 80014b0:	ca402a92 	.word	0xca402a92
 80014b4:	3fa17e3e 	.word	0x3fa17e3e

080014b8 <BMP280_init>:

void BMP280_init(void){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	BMP280_unselect();
 80014bc:	2201      	movs	r2, #1
 80014be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014c2:	480d      	ldr	r0, [pc, #52]	@ (80014f8 <BMP280_init+0x40>)
 80014c4:	f007 ff48 	bl	8009358 <HAL_GPIO_WritePin>
	BMP280_config();
 80014c8:	f7ff fb8a 	bl	8000be0 <BMP280_config>
	BMP280.ID = BMP280_read(0x89);
 80014cc:	2089      	movs	r0, #137	@ 0x89
 80014ce:	f7ff fb59 	bl	8000b84 <BMP280_read>
 80014d2:	4603      	mov	r3, r0
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b09      	ldr	r3, [pc, #36]	@ (80014fc <BMP280_init+0x44>)
 80014d8:	701a      	strb	r2, [r3, #0]
	BMP280_calibrationData();
 80014da:	f7ff fb8d 	bl	8000bf8 <BMP280_calibrationData>
	BMP280_readRawValues();
 80014de:	f7ff fc41 	bl	8000d64 <BMP280_readRawValues>
	BMP280.Temp_inicial = BMP280_measureT(T_raw);
 80014e2:	4b07      	ldr	r3, [pc, #28]	@ (8001500 <BMP280_init+0x48>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fc80 	bl	8000dec <BMP280_measureT>
 80014ec:	4603      	mov	r3, r0
 80014ee:	4a03      	ldr	r2, [pc, #12]	@ (80014fc <BMP280_init+0x44>)
 80014f0:	6093      	str	r3, [r2, #8]
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	58020400 	.word	0x58020400
 80014fc:	240002cc 	.word	0x240002cc
 8001500:	240002f8 	.word	0x240002f8

08001504 <BMP280_calculate>:

void BMP280_calculate(void){
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
	//BMP280.ID = 0;
	BMP280.ID = BMP280_read(0x89);
 8001508:	2089      	movs	r0, #137	@ 0x89
 800150a:	f7ff fb3b 	bl	8000b84 <BMP280_read>
 800150e:	4603      	mov	r3, r0
 8001510:	461a      	mov	r2, r3
 8001512:	4b16      	ldr	r3, [pc, #88]	@ (800156c <BMP280_calculate+0x68>)
 8001514:	701a      	strb	r2, [r3, #0]
	BMP280_readRawValues();
 8001516:	f7ff fc25 	bl	8000d64 <BMP280_readRawValues>
	BMP280.Temp = BMP280_measureT(T_raw);
 800151a:	4b15      	ldr	r3, [pc, #84]	@ (8001570 <BMP280_calculate+0x6c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff fc64 	bl	8000dec <BMP280_measureT>
 8001524:	4603      	mov	r3, r0
 8001526:	4a11      	ldr	r2, [pc, #68]	@ (800156c <BMP280_calculate+0x68>)
 8001528:	6053      	str	r3, [r2, #4]
	BMP280.Pressure    		= BMP280_measureP(P_raw)/256;
 800152a:	4b12      	ldr	r3, [pc, #72]	@ (8001574 <BMP280_calculate+0x70>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fca0 	bl	8000e74 <BMP280_measureP>
 8001534:	4603      	mov	r3, r0
 8001536:	0a1b      	lsrs	r3, r3, #8
 8001538:	4a0c      	ldr	r2, [pc, #48]	@ (800156c <BMP280_calculate+0x68>)
 800153a:	60d3      	str	r3, [r2, #12]
	BMP280.Barometric_Altitude = BMP280_measureH(BMP280.Pressure, BMP280.Temp_inicial);
 800153c:	4b0b      	ldr	r3, [pc, #44]	@ (800156c <BMP280_calculate+0x68>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	4a0a      	ldr	r2, [pc, #40]	@ (800156c <BMP280_calculate+0x68>)
 8001542:	6892      	ldr	r2, [r2, #8]
 8001544:	4611      	mov	r1, r2
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff ff5a 	bl	8001400 <BMP280_measureH>
 800154c:	4603      	mov	r3, r0
 800154e:	461a      	mov	r2, r3
 8001550:	4b06      	ldr	r3, [pc, #24]	@ (800156c <BMP280_calculate+0x68>)
 8001552:	821a      	strh	r2, [r3, #16]

	if(BMP280.Barometric_Altitude > BMP280.Max_Altitude) BMP280.Max_Altitude = BMP280.Barometric_Altitude;
 8001554:	4b05      	ldr	r3, [pc, #20]	@ (800156c <BMP280_calculate+0x68>)
 8001556:	8a1a      	ldrh	r2, [r3, #16]
 8001558:	4b04      	ldr	r3, [pc, #16]	@ (800156c <BMP280_calculate+0x68>)
 800155a:	8a5b      	ldrh	r3, [r3, #18]
 800155c:	429a      	cmp	r2, r3
 800155e:	d903      	bls.n	8001568 <BMP280_calculate+0x64>
 8001560:	4b02      	ldr	r3, [pc, #8]	@ (800156c <BMP280_calculate+0x68>)
 8001562:	8a1a      	ldrh	r2, [r3, #16]
 8001564:	4b01      	ldr	r3, [pc, #4]	@ (800156c <BMP280_calculate+0x68>)
 8001566:	825a      	strh	r2, [r3, #18]
}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}
 800156c:	240002cc 	.word	0x240002cc
 8001570:	240002f8 	.word	0x240002f8
 8001574:	240002fc 	.word	0x240002fc

08001578 <bno055_delay>:

BNO_CurrentState_e BNO_CurrentState = Init;

IMU_t IMU;

void bno055_delay(uint8_t time) {
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	71fb      	strb	r3, [r7, #7]
	BNO_DelayCounter += time;
 8001582:	4b06      	ldr	r3, [pc, #24]	@ (800159c <bno055_delay+0x24>)
 8001584:	781a      	ldrb	r2, [r3, #0]
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	4413      	add	r3, r2
 800158a:	b2da      	uxtb	r2, r3
 800158c:	4b03      	ldr	r3, [pc, #12]	@ (800159c <bno055_delay+0x24>)
 800158e:	701a      	strb	r2, [r3, #0]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	24000407 	.word	0x24000407

080015a0 <BNO_Read>:

HAL_StatusTypeDef BNO_Read(uint8_t Address,uint8_t Size){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	460a      	mov	r2, r1
 80015aa:	71fb      	strb	r3, [r7, #7]
 80015ac:	4613      	mov	r3, r2
 80015ae:	71bb      	strb	r3, [r7, #6]
	uint8_t ReadCommand[4] = {0xAA, 0x01, Address, Size};
 80015b0:	23aa      	movs	r3, #170	@ 0xaa
 80015b2:	723b      	strb	r3, [r7, #8]
 80015b4:	2301      	movs	r3, #1
 80015b6:	727b      	strb	r3, [r7, #9]
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	72bb      	strb	r3, [r7, #10]
 80015bc:	79bb      	ldrb	r3, [r7, #6]
 80015be:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef uartError;

	BNO_RxBuffer[0] = Address;
 80015c0:	4a08      	ldr	r2, [pc, #32]	@ (80015e4 <BNO_Read+0x44>)
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	7013      	strb	r3, [r2, #0]

	uartError = HAL_UART_Transmit(&huart3, ReadCommand, 4,100);
 80015c6:	f107 0108 	add.w	r1, r7, #8
 80015ca:	2364      	movs	r3, #100	@ 0x64
 80015cc:	2204      	movs	r2, #4
 80015ce:	4806      	ldr	r0, [pc, #24]	@ (80015e8 <BNO_Read+0x48>)
 80015d0:	f00d f8a6 	bl	800e720 <HAL_UART_Transmit>
 80015d4:	4603      	mov	r3, r0
 80015d6:	73fb      	strb	r3, [r7, #15]
	return uartError;
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	24000304 	.word	0x24000304
 80015e8:	24005308 	.word	0x24005308

080015ec <BNO_Write>:

HAL_StatusTypeDef BNO_Write(uint8_t Address,uint8_t Data){
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	460a      	mov	r2, r1
 80015f6:	71fb      	strb	r3, [r7, #7]
 80015f8:	4613      	mov	r3, r2
 80015fa:	71bb      	strb	r3, [r7, #6]
	uint8_t WriteCommand[5];
	HAL_StatusTypeDef uartError;

	WriteCommand[0] = 0xAA;
 80015fc:	23aa      	movs	r3, #170	@ 0xaa
 80015fe:	723b      	strb	r3, [r7, #8]
	WriteCommand[1] = 0x00;
 8001600:	2300      	movs	r3, #0
 8001602:	727b      	strb	r3, [r7, #9]
	WriteCommand[2] = Address;
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	72bb      	strb	r3, [r7, #10]
	WriteCommand[3] = 1;
 8001608:	2301      	movs	r3, #1
 800160a:	72fb      	strb	r3, [r7, #11]
	WriteCommand[4] = Data;
 800160c:	79bb      	ldrb	r3, [r7, #6]
 800160e:	733b      	strb	r3, [r7, #12]

	uartError = HAL_UART_Transmit(&huart3, WriteCommand,5,100);
 8001610:	f107 0108 	add.w	r1, r7, #8
 8001614:	2364      	movs	r3, #100	@ 0x64
 8001616:	2205      	movs	r2, #5
 8001618:	4804      	ldr	r0, [pc, #16]	@ (800162c <BNO_Write+0x40>)
 800161a:	f00d f881 	bl	800e720 <HAL_UART_Transmit>
 800161e:	4603      	mov	r3, r0
 8001620:	73fb      	strb	r3, [r7, #15]
	return uartError;
 8001622:	7bfb      	ldrb	r3, [r7, #15]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	24005308 	.word	0x24005308

08001630 <BNO_Write_MB>:

HAL_StatusTypeDef BNO_Write_MB(uint8_t Address,uint8_t Size, uint8_t *pData){
 8001630:	b580      	push	{r7, lr}
 8001632:	b0c4      	sub	sp, #272	@ 0x110
 8001634:	af00      	add	r7, sp, #0
 8001636:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800163a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001644:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001648:	4602      	mov	r2, r0
 800164a:	701a      	strb	r2, [r3, #0]
 800164c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001650:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001654:	460a      	mov	r2, r1
 8001656:	701a      	strb	r2, [r3, #0]
    uint8_t WriteCommand[255];
    HAL_StatusTypeDef uartError;

    WriteCommand[0] = 0xAA;
 8001658:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800165c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001660:	22aa      	movs	r2, #170	@ 0xaa
 8001662:	701a      	strb	r2, [r3, #0]
    WriteCommand[1] = 0x00;
 8001664:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001668:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800166c:	2200      	movs	r2, #0
 800166e:	705a      	strb	r2, [r3, #1]
    WriteCommand[2] = Address;
 8001670:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001674:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001678:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800167c:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 8001680:	7812      	ldrb	r2, [r2, #0]
 8001682:	709a      	strb	r2, [r3, #2]
    WriteCommand[3] = Size;
 8001684:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001688:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800168c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001690:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001694:	7812      	ldrb	r2, [r2, #0]
 8001696:	70da      	strb	r2, [r3, #3]

    for (uint8_t n = 0; n < Size; ++n) {
 8001698:	2300      	movs	r3, #0
 800169a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800169e:	e015      	b.n	80016cc <BNO_Write_MB+0x9c>
        WriteCommand[n + 4] = pData[n];
 80016a0:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80016a4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80016a8:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80016ac:	6812      	ldr	r2, [r2, #0]
 80016ae:	441a      	add	r2, r3
 80016b0:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80016b4:	3304      	adds	r3, #4
 80016b6:	7811      	ldrb	r1, [r2, #0]
 80016b8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80016bc:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80016c0:	54d1      	strb	r1, [r2, r3]
    for (uint8_t n = 0; n < Size; ++n) {
 80016c2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80016c6:	3301      	adds	r3, #1
 80016c8:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80016cc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016d0:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80016d4:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d3e0      	bcc.n	80016a0 <BNO_Write_MB+0x70>
    }

    uartError = HAL_UART_Transmit(&huart3, WriteCommand, (Size + 4),100);
 80016de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016e2:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	3304      	adds	r3, #4
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	f107 010c 	add.w	r1, r7, #12
 80016f2:	2364      	movs	r3, #100	@ 0x64
 80016f4:	4806      	ldr	r0, [pc, #24]	@ (8001710 <BNO_Write_MB+0xe0>)
 80016f6:	f00d f813 	bl	800e720 <HAL_UART_Transmit>
 80016fa:	4603      	mov	r3, r0
 80016fc:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
    return uartError;
 8001700:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
}
 8001704:	4618      	mov	r0, r3
 8001706:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	24005308 	.word	0x24005308
 8001714:	00000000 	.word	0x00000000

08001718 <BNO_Page0Adress>:

void BNO_Page0Adress(void){
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
	switch (BNO_RxBuffer[0]) {
 800171c:	4ba6      	ldr	r3, [pc, #664]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b55      	cmp	r3, #85	@ 0x55
 8001722:	f300 8247 	bgt.w	8001bb4 <BNO_Page0Adress+0x49c>
 8001726:	2b35      	cmp	r3, #53	@ 0x35
 8001728:	da0a      	bge.n	8001740 <BNO_Page0Adress+0x28>
 800172a:	2b08      	cmp	r3, #8
 800172c:	f000 814a 	beq.w	80019c4 <BNO_Page0Adress+0x2ac>
 8001730:	2b08      	cmp	r3, #8
 8001732:	f300 823f 	bgt.w	8001bb4 <BNO_Page0Adress+0x49c>
 8001736:	2b00      	cmp	r3, #0
 8001738:	d04c      	beq.n	80017d4 <BNO_Page0Adress+0xbc>
 800173a:	2b07      	cmp	r3, #7
 800173c:	d065      	beq.n	800180a <BNO_Page0Adress+0xf2>
			IMU.Roll = ((double)((int16_t)((BNO_RxBuffer[24] << 8) | BNO_RxBuffer[23])))/16;

			BNO_ErrorHandler = ReadSucces;
			break;
		default:
			break;
 800173e:	e239      	b.n	8001bb4 <BNO_Page0Adress+0x49c>
	switch (BNO_RxBuffer[0]) {
 8001740:	3b35      	subs	r3, #53	@ 0x35
 8001742:	2b20      	cmp	r3, #32
 8001744:	f200 8236 	bhi.w	8001bb4 <BNO_Page0Adress+0x49c>
 8001748:	a201      	add	r2, pc, #4	@ (adr r2, 8001750 <BNO_Page0Adress+0x38>)
 800174a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800174e:	bf00      	nop
 8001750:	08001853 	.word	0x08001853
 8001754:	08001bb5 	.word	0x08001bb5
 8001758:	08001bb5 	.word	0x08001bb5
 800175c:	08001bb5 	.word	0x08001bb5
 8001760:	0800182f 	.word	0x0800182f
 8001764:	08001bb5 	.word	0x08001bb5
 8001768:	0800181d 	.word	0x0800181d
 800176c:	08001bb5 	.word	0x08001bb5
 8001770:	08001841 	.word	0x08001841
 8001774:	08001bb5 	.word	0x08001bb5
 8001778:	08001bb5 	.word	0x08001bb5
 800177c:	08001bb5 	.word	0x08001bb5
 8001780:	08001bb5 	.word	0x08001bb5
 8001784:	08001bb5 	.word	0x08001bb5
 8001788:	08001bb5 	.word	0x08001bb5
 800178c:	08001bb5 	.word	0x08001bb5
 8001790:	08001bb5 	.word	0x08001bb5
 8001794:	08001bb5 	.word	0x08001bb5
 8001798:	08001bb5 	.word	0x08001bb5
 800179c:	08001bb5 	.word	0x08001bb5
 80017a0:	08001bb5 	.word	0x08001bb5
 80017a4:	08001bb5 	.word	0x08001bb5
 80017a8:	08001bb5 	.word	0x08001bb5
 80017ac:	08001bb5 	.word	0x08001bb5
 80017b0:	08001bb5 	.word	0x08001bb5
 80017b4:	08001bb5 	.word	0x08001bb5
 80017b8:	08001bb5 	.word	0x08001bb5
 80017bc:	08001bb5 	.word	0x08001bb5
 80017c0:	08001bb5 	.word	0x08001bb5
 80017c4:	08001bb5 	.word	0x08001bb5
 80017c8:	08001bb5 	.word	0x08001bb5
 80017cc:	08001bb5 	.word	0x08001bb5
 80017d0:	080018ab 	.word	0x080018ab
			if(BNO_RxBuffer[1] != 160) return;
 80017d4:	4b78      	ldr	r3, [pc, #480]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80017d6:	785b      	ldrb	r3, [r3, #1]
 80017d8:	2ba0      	cmp	r3, #160	@ 0xa0
 80017da:	f040 81ed 	bne.w	8001bb8 <BNO_Page0Adress+0x4a0>
			IMU.ID = BNO_RxBuffer[1];
 80017de:	4b76      	ldr	r3, [pc, #472]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80017e0:	785a      	ldrb	r2, [r3, #1]
 80017e2:	4b76      	ldr	r3, [pc, #472]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 80017e4:	701a      	strb	r2, [r3, #0]
			IMU.ACC.ID = BNO_RxBuffer[2];
 80017e6:	4b74      	ldr	r3, [pc, #464]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80017e8:	789a      	ldrb	r2, [r3, #2]
 80017ea:	4b74      	ldr	r3, [pc, #464]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 80017ec:	721a      	strb	r2, [r3, #8]
			IMU.MAG.ID = BNO_RxBuffer[3];
 80017ee:	4b72      	ldr	r3, [pc, #456]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80017f0:	78da      	ldrb	r2, [r3, #3]
 80017f2:	4b72      	ldr	r3, [pc, #456]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 80017f4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			IMU.GYR.ID = BNO_RxBuffer[4];
 80017f8:	4b6f      	ldr	r3, [pc, #444]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80017fa:	791a      	ldrb	r2, [r3, #4]
 80017fc:	4b6f      	ldr	r3, [pc, #444]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 80017fe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
			BNO_ErrorHandler = ReadSucces;
 8001802:	4b6f      	ldr	r3, [pc, #444]	@ (80019c0 <BNO_Page0Adress+0x2a8>)
 8001804:	220b      	movs	r2, #11
 8001806:	701a      	strb	r2, [r3, #0]
			break;
 8001808:	e1d7      	b.n	8001bba <BNO_Page0Adress+0x4a2>
			IMU.Page = BNO_RxBuffer[1];
 800180a:	4b6b      	ldr	r3, [pc, #428]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800180c:	785a      	ldrb	r2, [r3, #1]
 800180e:	4b6b      	ldr	r3, [pc, #428]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 8001810:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			BNO_ErrorHandler = ReadSucces;
 8001814:	4b6a      	ldr	r3, [pc, #424]	@ (80019c0 <BNO_Page0Adress+0x2a8>)
 8001816:	220b      	movs	r2, #11
 8001818:	701a      	strb	r2, [r3, #0]
			break;
 800181a:	e1ce      	b.n	8001bba <BNO_Page0Adress+0x4a2>
			IMU.Unit_Select = BNO_RxBuffer[1];
 800181c:	4b66      	ldr	r3, [pc, #408]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800181e:	785a      	ldrb	r2, [r3, #1]
 8001820:	4b66      	ldr	r3, [pc, #408]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 8001822:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
			BNO_ErrorHandler = ReadSucces;
 8001826:	4b66      	ldr	r3, [pc, #408]	@ (80019c0 <BNO_Page0Adress+0x2a8>)
 8001828:	220b      	movs	r2, #11
 800182a:	701a      	strb	r2, [r3, #0]
			break;
 800182c:	e1c5      	b.n	8001bba <BNO_Page0Adress+0x4a2>
			IMU.System_Status = BNO_RxBuffer[1];
 800182e:	4b62      	ldr	r3, [pc, #392]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 8001830:	785a      	ldrb	r2, [r3, #1]
 8001832:	4b62      	ldr	r3, [pc, #392]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 8001834:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
			BNO_ErrorHandler = ReadSucces;
 8001838:	4b61      	ldr	r3, [pc, #388]	@ (80019c0 <BNO_Page0Adress+0x2a8>)
 800183a:	220b      	movs	r2, #11
 800183c:	701a      	strb	r2, [r3, #0]
			break;
 800183e:	e1bc      	b.n	8001bba <BNO_Page0Adress+0x4a2>
			IMU.Op_Mode = BNO_RxBuffer[1];
 8001840:	4b5d      	ldr	r3, [pc, #372]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 8001842:	785a      	ldrb	r2, [r3, #1]
 8001844:	4b5d      	ldr	r3, [pc, #372]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 8001846:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
			BNO_ErrorHandler = ReadSucces;
 800184a:	4b5d      	ldr	r3, [pc, #372]	@ (80019c0 <BNO_Page0Adress+0x2a8>)
 800184c:	220b      	movs	r2, #11
 800184e:	701a      	strb	r2, [r3, #0]
			break;
 8001850:	e1b3      	b.n	8001bba <BNO_Page0Adress+0x4a2>
			IMU.CalSatus.Full = BNO_RxBuffer[1];
 8001852:	4b59      	ldr	r3, [pc, #356]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 8001854:	785a      	ldrb	r2, [r3, #1]
 8001856:	4b59      	ldr	r3, [pc, #356]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 8001858:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
			IMU.CalSatus.Sys = (BNO_RxBuffer[1] >> 6) & 0x03;
 800185c:	4b56      	ldr	r3, [pc, #344]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800185e:	785b      	ldrb	r3, [r3, #1]
 8001860:	099b      	lsrs	r3, r3, #6
 8001862:	b2da      	uxtb	r2, r3
 8001864:	4b55      	ldr	r3, [pc, #340]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 8001866:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
			IMU.CalSatus.Gyr = (BNO_RxBuffer[1] >> 4) & 0x03;
 800186a:	4b53      	ldr	r3, [pc, #332]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800186c:	785b      	ldrb	r3, [r3, #1]
 800186e:	091b      	lsrs	r3, r3, #4
 8001870:	b2db      	uxtb	r3, r3
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	b2da      	uxtb	r2, r3
 8001878:	4b50      	ldr	r3, [pc, #320]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 800187a:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
			IMU.CalSatus.Acc = (BNO_RxBuffer[1] >> 2) & 0x03;
 800187e:	4b4e      	ldr	r3, [pc, #312]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 8001880:	785b      	ldrb	r3, [r3, #1]
 8001882:	089b      	lsrs	r3, r3, #2
 8001884:	b2db      	uxtb	r3, r3
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	b2da      	uxtb	r2, r3
 800188c:	4b4b      	ldr	r3, [pc, #300]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 800188e:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
			IMU.CalSatus.Mag = BNO_RxBuffer[1] & 0x03;
 8001892:	4b49      	ldr	r3, [pc, #292]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 8001894:	785b      	ldrb	r3, [r3, #1]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	b2da      	uxtb	r2, r3
 800189c:	4b47      	ldr	r3, [pc, #284]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 800189e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
			BNO_ErrorHandler = ReadSucces;
 80018a2:	4b47      	ldr	r3, [pc, #284]	@ (80019c0 <BNO_Page0Adress+0x2a8>)
 80018a4:	220b      	movs	r2, #11
 80018a6:	701a      	strb	r2, [r3, #0]
			break;
 80018a8:	e187      	b.n	8001bba <BNO_Page0Adress+0x4a2>
			IMU.Calibration_Data.offset.accel.x = (int16_t)((BNO_RxBuffer[2] << 8) | BNO_RxBuffer[1]);
 80018aa:	4b43      	ldr	r3, [pc, #268]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80018ac:	789b      	ldrb	r3, [r3, #2]
 80018ae:	021b      	lsls	r3, r3, #8
 80018b0:	b21a      	sxth	r2, r3
 80018b2:	4b41      	ldr	r3, [pc, #260]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80018b4:	785b      	ldrb	r3, [r3, #1]
 80018b6:	b21b      	sxth	r3, r3
 80018b8:	4313      	orrs	r3, r2
 80018ba:	b21a      	sxth	r2, r3
 80018bc:	4b3f      	ldr	r3, [pc, #252]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 80018be:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
			IMU.Calibration_Data.offset.accel.y = (int16_t)((BNO_RxBuffer[4] << 8) | BNO_RxBuffer[3]);
 80018c2:	4b3d      	ldr	r3, [pc, #244]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80018c4:	791b      	ldrb	r3, [r3, #4]
 80018c6:	021b      	lsls	r3, r3, #8
 80018c8:	b21a      	sxth	r2, r3
 80018ca:	4b3b      	ldr	r3, [pc, #236]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80018cc:	78db      	ldrb	r3, [r3, #3]
 80018ce:	b21b      	sxth	r3, r3
 80018d0:	4313      	orrs	r3, r2
 80018d2:	b21a      	sxth	r2, r3
 80018d4:	4b39      	ldr	r3, [pc, #228]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 80018d6:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
			IMU.Calibration_Data.offset.accel.z = (int16_t)((BNO_RxBuffer[6] << 8) | BNO_RxBuffer[5]);
 80018da:	4b37      	ldr	r3, [pc, #220]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80018dc:	799b      	ldrb	r3, [r3, #6]
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	b21a      	sxth	r2, r3
 80018e2:	4b35      	ldr	r3, [pc, #212]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80018e4:	795b      	ldrb	r3, [r3, #5]
 80018e6:	b21b      	sxth	r3, r3
 80018e8:	4313      	orrs	r3, r2
 80018ea:	b21a      	sxth	r2, r3
 80018ec:	4b33      	ldr	r3, [pc, #204]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 80018ee:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
			IMU.Calibration_Data.offset.mag.x = (int16_t)((BNO_RxBuffer[8] << 8) | BNO_RxBuffer[7]);
 80018f2:	4b31      	ldr	r3, [pc, #196]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80018f4:	7a1b      	ldrb	r3, [r3, #8]
 80018f6:	021b      	lsls	r3, r3, #8
 80018f8:	b21a      	sxth	r2, r3
 80018fa:	4b2f      	ldr	r3, [pc, #188]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80018fc:	79db      	ldrb	r3, [r3, #7]
 80018fe:	b21b      	sxth	r3, r3
 8001900:	4313      	orrs	r3, r2
 8001902:	b21a      	sxth	r2, r3
 8001904:	4b2d      	ldr	r3, [pc, #180]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 8001906:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
			IMU.Calibration_Data.offset.mag.y = (int16_t)((BNO_RxBuffer[10] << 8) | BNO_RxBuffer[9]);
 800190a:	4b2b      	ldr	r3, [pc, #172]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800190c:	7a9b      	ldrb	r3, [r3, #10]
 800190e:	021b      	lsls	r3, r3, #8
 8001910:	b21a      	sxth	r2, r3
 8001912:	4b29      	ldr	r3, [pc, #164]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 8001914:	7a5b      	ldrb	r3, [r3, #9]
 8001916:	b21b      	sxth	r3, r3
 8001918:	4313      	orrs	r3, r2
 800191a:	b21a      	sxth	r2, r3
 800191c:	4b27      	ldr	r3, [pc, #156]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 800191e:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
			IMU.Calibration_Data.offset.mag.z = (int16_t)((BNO_RxBuffer[12] << 8) | BNO_RxBuffer[11]);
 8001922:	4b25      	ldr	r3, [pc, #148]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 8001924:	7b1b      	ldrb	r3, [r3, #12]
 8001926:	021b      	lsls	r3, r3, #8
 8001928:	b21a      	sxth	r2, r3
 800192a:	4b23      	ldr	r3, [pc, #140]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800192c:	7adb      	ldrb	r3, [r3, #11]
 800192e:	b21b      	sxth	r3, r3
 8001930:	4313      	orrs	r3, r2
 8001932:	b21a      	sxth	r2, r3
 8001934:	4b21      	ldr	r3, [pc, #132]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 8001936:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
			IMU.Calibration_Data.offset.gyro.x = (int16_t)((BNO_RxBuffer[14] << 8) | BNO_RxBuffer[13]);
 800193a:	4b1f      	ldr	r3, [pc, #124]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800193c:	7b9b      	ldrb	r3, [r3, #14]
 800193e:	021b      	lsls	r3, r3, #8
 8001940:	b21a      	sxth	r2, r3
 8001942:	4b1d      	ldr	r3, [pc, #116]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 8001944:	7b5b      	ldrb	r3, [r3, #13]
 8001946:	b21b      	sxth	r3, r3
 8001948:	4313      	orrs	r3, r2
 800194a:	b21a      	sxth	r2, r3
 800194c:	4b1b      	ldr	r3, [pc, #108]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 800194e:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
			IMU.Calibration_Data.offset.gyro.y = (int16_t)((BNO_RxBuffer[16] << 8) | BNO_RxBuffer[15]);
 8001952:	4b19      	ldr	r3, [pc, #100]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 8001954:	7c1b      	ldrb	r3, [r3, #16]
 8001956:	021b      	lsls	r3, r3, #8
 8001958:	b21a      	sxth	r2, r3
 800195a:	4b17      	ldr	r3, [pc, #92]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800195c:	7bdb      	ldrb	r3, [r3, #15]
 800195e:	b21b      	sxth	r3, r3
 8001960:	4313      	orrs	r3, r2
 8001962:	b21a      	sxth	r2, r3
 8001964:	4b15      	ldr	r3, [pc, #84]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 8001966:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
			IMU.Calibration_Data.offset.gyro.z = (int16_t)((BNO_RxBuffer[18] << 8) | BNO_RxBuffer[17]);
 800196a:	4b13      	ldr	r3, [pc, #76]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800196c:	7c9b      	ldrb	r3, [r3, #18]
 800196e:	021b      	lsls	r3, r3, #8
 8001970:	b21a      	sxth	r2, r3
 8001972:	4b11      	ldr	r3, [pc, #68]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 8001974:	7c5b      	ldrb	r3, [r3, #17]
 8001976:	b21b      	sxth	r3, r3
 8001978:	4313      	orrs	r3, r2
 800197a:	b21a      	sxth	r2, r3
 800197c:	4b0f      	ldr	r3, [pc, #60]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 800197e:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
			IMU.Calibration_Data.radius.accel = (uint16_t)((BNO_RxBuffer[20] << 8) | BNO_RxBuffer[19]);
 8001982:	4b0d      	ldr	r3, [pc, #52]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 8001984:	7d1b      	ldrb	r3, [r3, #20]
 8001986:	021b      	lsls	r3, r3, #8
 8001988:	b21a      	sxth	r2, r3
 800198a:	4b0b      	ldr	r3, [pc, #44]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800198c:	7cdb      	ldrb	r3, [r3, #19]
 800198e:	b21b      	sxth	r3, r3
 8001990:	4313      	orrs	r3, r2
 8001992:	b21b      	sxth	r3, r3
 8001994:	b29a      	uxth	r2, r3
 8001996:	4b09      	ldr	r3, [pc, #36]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 8001998:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
			IMU.Calibration_Data.radius.mag   = (uint16_t)((BNO_RxBuffer[22] << 8) | BNO_RxBuffer[21]);
 800199c:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800199e:	7d9b      	ldrb	r3, [r3, #22]
 80019a0:	021b      	lsls	r3, r3, #8
 80019a2:	b21a      	sxth	r2, r3
 80019a4:	4b04      	ldr	r3, [pc, #16]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80019a6:	7d5b      	ldrb	r3, [r3, #21]
 80019a8:	b21b      	sxth	r3, r3
 80019aa:	4313      	orrs	r3, r2
 80019ac:	b21b      	sxth	r3, r3
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	4b02      	ldr	r3, [pc, #8]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 80019b2:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
			break;
 80019b6:	e100      	b.n	8001bba <BNO_Page0Adress+0x4a2>
 80019b8:	24000304 	.word	0x24000304
 80019bc:	24000410 	.word	0x24000410
 80019c0:	24000405 	.word	0x24000405
			IMU.ACC.x = ((double)((int16_t)((BNO_RxBuffer[2] << 8) | BNO_RxBuffer[1])))/100;
 80019c4:	4b82      	ldr	r3, [pc, #520]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 80019c6:	789b      	ldrb	r3, [r3, #2]
 80019c8:	021b      	lsls	r3, r3, #8
 80019ca:	b21a      	sxth	r2, r3
 80019cc:	4b80      	ldr	r3, [pc, #512]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 80019ce:	785b      	ldrb	r3, [r3, #1]
 80019d0:	b21b      	sxth	r3, r3
 80019d2:	4313      	orrs	r3, r2
 80019d4:	b21b      	sxth	r3, r3
 80019d6:	ee07 3a90 	vmov	s15, r3
 80019da:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80019de:	ed9f 5b7a 	vldr	d5, [pc, #488]	@ 8001bc8 <BNO_Page0Adress+0x4b0>
 80019e2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80019e6:	4b7b      	ldr	r3, [pc, #492]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 80019e8:	ed83 7b04 	vstr	d7, [r3, #16]
			IMU.ACC.y = ((double)((int16_t)((BNO_RxBuffer[4] << 8) | BNO_RxBuffer[3])))/100;
 80019ec:	4b78      	ldr	r3, [pc, #480]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 80019ee:	791b      	ldrb	r3, [r3, #4]
 80019f0:	021b      	lsls	r3, r3, #8
 80019f2:	b21a      	sxth	r2, r3
 80019f4:	4b76      	ldr	r3, [pc, #472]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 80019f6:	78db      	ldrb	r3, [r3, #3]
 80019f8:	b21b      	sxth	r3, r3
 80019fa:	4313      	orrs	r3, r2
 80019fc:	b21b      	sxth	r3, r3
 80019fe:	ee07 3a90 	vmov	s15, r3
 8001a02:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001a06:	ed9f 5b70 	vldr	d5, [pc, #448]	@ 8001bc8 <BNO_Page0Adress+0x4b0>
 8001a0a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a0e:	4b71      	ldr	r3, [pc, #452]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 8001a10:	ed83 7b06 	vstr	d7, [r3, #24]
			IMU.ACC.z = ((double)((int16_t)((BNO_RxBuffer[6] << 8) | BNO_RxBuffer[5])))/100;
 8001a14:	4b6e      	ldr	r3, [pc, #440]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001a16:	799b      	ldrb	r3, [r3, #6]
 8001a18:	021b      	lsls	r3, r3, #8
 8001a1a:	b21a      	sxth	r2, r3
 8001a1c:	4b6c      	ldr	r3, [pc, #432]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001a1e:	795b      	ldrb	r3, [r3, #5]
 8001a20:	b21b      	sxth	r3, r3
 8001a22:	4313      	orrs	r3, r2
 8001a24:	b21b      	sxth	r3, r3
 8001a26:	ee07 3a90 	vmov	s15, r3
 8001a2a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001a2e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8001bc8 <BNO_Page0Adress+0x4b0>
 8001a32:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a36:	4b67      	ldr	r3, [pc, #412]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 8001a38:	ed83 7b08 	vstr	d7, [r3, #32]
			IMU.MAG.x = ((double)((int16_t)((BNO_RxBuffer[8] << 8) | BNO_RxBuffer[7])))/16;
 8001a3c:	4b64      	ldr	r3, [pc, #400]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001a3e:	7a1b      	ldrb	r3, [r3, #8]
 8001a40:	021b      	lsls	r3, r3, #8
 8001a42:	b21a      	sxth	r2, r3
 8001a44:	4b62      	ldr	r3, [pc, #392]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001a46:	79db      	ldrb	r3, [r3, #7]
 8001a48:	b21b      	sxth	r3, r3
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	b21b      	sxth	r3, r3
 8001a4e:	ee07 3a90 	vmov	s15, r3
 8001a52:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001a56:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001a5a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a5e:	4b5d      	ldr	r3, [pc, #372]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 8001a60:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
			IMU.MAG.y = ((double)((int16_t)((BNO_RxBuffer[10] << 8) | BNO_RxBuffer[9])))/16;
 8001a64:	4b5a      	ldr	r3, [pc, #360]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001a66:	7a9b      	ldrb	r3, [r3, #10]
 8001a68:	021b      	lsls	r3, r3, #8
 8001a6a:	b21a      	sxth	r2, r3
 8001a6c:	4b58      	ldr	r3, [pc, #352]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001a6e:	7a5b      	ldrb	r3, [r3, #9]
 8001a70:	b21b      	sxth	r3, r3
 8001a72:	4313      	orrs	r3, r2
 8001a74:	b21b      	sxth	r3, r3
 8001a76:	ee07 3a90 	vmov	s15, r3
 8001a7a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001a7e:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001a82:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a86:	4b53      	ldr	r3, [pc, #332]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 8001a88:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
			IMU.MAG.z = ((double)((int16_t)((BNO_RxBuffer[12] << 8) | BNO_RxBuffer[11])))/16;
 8001a8c:	4b50      	ldr	r3, [pc, #320]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001a8e:	7b1b      	ldrb	r3, [r3, #12]
 8001a90:	021b      	lsls	r3, r3, #8
 8001a92:	b21a      	sxth	r2, r3
 8001a94:	4b4e      	ldr	r3, [pc, #312]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001a96:	7adb      	ldrb	r3, [r3, #11]
 8001a98:	b21b      	sxth	r3, r3
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	b21b      	sxth	r3, r3
 8001a9e:	ee07 3a90 	vmov	s15, r3
 8001aa2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001aa6:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001aaa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001aae:	4b49      	ldr	r3, [pc, #292]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 8001ab0:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40
			IMU.GYR.x = ((double)((int16_t)((BNO_RxBuffer[14] << 8) | BNO_RxBuffer[13])))/16;
 8001ab4:	4b46      	ldr	r3, [pc, #280]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001ab6:	7b9b      	ldrb	r3, [r3, #14]
 8001ab8:	021b      	lsls	r3, r3, #8
 8001aba:	b21a      	sxth	r2, r3
 8001abc:	4b44      	ldr	r3, [pc, #272]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001abe:	7b5b      	ldrb	r3, [r3, #13]
 8001ac0:	b21b      	sxth	r3, r3
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	b21b      	sxth	r3, r3
 8001ac6:	ee07 3a90 	vmov	s15, r3
 8001aca:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001ace:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001ad2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ad6:	4b3f      	ldr	r3, [pc, #252]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 8001ad8:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
			IMU.GYR.y = -((double)((int16_t)((BNO_RxBuffer[16] << 8) | BNO_RxBuffer[15])))/16;
 8001adc:	4b3c      	ldr	r3, [pc, #240]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001ade:	7c1b      	ldrb	r3, [r3, #16]
 8001ae0:	021b      	lsls	r3, r3, #8
 8001ae2:	b21a      	sxth	r2, r3
 8001ae4:	4b3a      	ldr	r3, [pc, #232]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001ae6:	7bdb      	ldrb	r3, [r3, #15]
 8001ae8:	b21b      	sxth	r3, r3
 8001aea:	4313      	orrs	r3, r2
 8001aec:	b21b      	sxth	r3, r3
 8001aee:	ee07 3a90 	vmov	s15, r3
 8001af2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001af6:	eeb1 6b47 	vneg.f64	d6, d7
 8001afa:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001afe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b02:	4b34      	ldr	r3, [pc, #208]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 8001b04:	ed83 7b16 	vstr	d7, [r3, #88]	@ 0x58
			IMU.GYR.z = -((double)((int16_t)((BNO_RxBuffer[18] << 8) | BNO_RxBuffer[17])))/16;
 8001b08:	4b31      	ldr	r3, [pc, #196]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001b0a:	7c9b      	ldrb	r3, [r3, #18]
 8001b0c:	021b      	lsls	r3, r3, #8
 8001b0e:	b21a      	sxth	r2, r3
 8001b10:	4b2f      	ldr	r3, [pc, #188]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001b12:	7c5b      	ldrb	r3, [r3, #17]
 8001b14:	b21b      	sxth	r3, r3
 8001b16:	4313      	orrs	r3, r2
 8001b18:	b21b      	sxth	r3, r3
 8001b1a:	ee07 3a90 	vmov	s15, r3
 8001b1e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001b22:	eeb1 6b47 	vneg.f64	d6, d7
 8001b26:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001b2a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b2e:	4b29      	ldr	r3, [pc, #164]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 8001b30:	ed83 7b18 	vstr	d7, [r3, #96]	@ 0x60
			IMU.Heading = ((double)((int16_t)((BNO_RxBuffer[20] << 8) | BNO_RxBuffer[19])))/16;
 8001b34:	4b26      	ldr	r3, [pc, #152]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001b36:	7d1b      	ldrb	r3, [r3, #20]
 8001b38:	021b      	lsls	r3, r3, #8
 8001b3a:	b21a      	sxth	r2, r3
 8001b3c:	4b24      	ldr	r3, [pc, #144]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001b3e:	7cdb      	ldrb	r3, [r3, #19]
 8001b40:	b21b      	sxth	r3, r3
 8001b42:	4313      	orrs	r3, r2
 8001b44:	b21b      	sxth	r3, r3
 8001b46:	ee07 3a90 	vmov	s15, r3
 8001b4a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001b4e:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001b52:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b56:	4b1f      	ldr	r3, [pc, #124]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 8001b58:	ed83 7b1a 	vstr	d7, [r3, #104]	@ 0x68
			IMU.Pitch = ((double)((int16_t)((BNO_RxBuffer[22] << 8) | BNO_RxBuffer[21])))/16;
 8001b5c:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001b5e:	7d9b      	ldrb	r3, [r3, #22]
 8001b60:	021b      	lsls	r3, r3, #8
 8001b62:	b21a      	sxth	r2, r3
 8001b64:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001b66:	7d5b      	ldrb	r3, [r3, #21]
 8001b68:	b21b      	sxth	r3, r3
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	b21b      	sxth	r3, r3
 8001b6e:	ee07 3a90 	vmov	s15, r3
 8001b72:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001b76:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001b7a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b7e:	4b15      	ldr	r3, [pc, #84]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 8001b80:	ed83 7b1c 	vstr	d7, [r3, #112]	@ 0x70
			IMU.Roll = ((double)((int16_t)((BNO_RxBuffer[24] << 8) | BNO_RxBuffer[23])))/16;
 8001b84:	4b12      	ldr	r3, [pc, #72]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001b86:	7e1b      	ldrb	r3, [r3, #24]
 8001b88:	021b      	lsls	r3, r3, #8
 8001b8a:	b21a      	sxth	r2, r3
 8001b8c:	4b10      	ldr	r3, [pc, #64]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001b8e:	7ddb      	ldrb	r3, [r3, #23]
 8001b90:	b21b      	sxth	r3, r3
 8001b92:	4313      	orrs	r3, r2
 8001b94:	b21b      	sxth	r3, r3
 8001b96:	ee07 3a90 	vmov	s15, r3
 8001b9a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001b9e:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001ba2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 8001ba8:	ed83 7b1e 	vstr	d7, [r3, #120]	@ 0x78
			BNO_ErrorHandler = ReadSucces;
 8001bac:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd8 <BNO_Page0Adress+0x4c0>)
 8001bae:	220b      	movs	r2, #11
 8001bb0:	701a      	strb	r2, [r3, #0]
			break;
 8001bb2:	e002      	b.n	8001bba <BNO_Page0Adress+0x4a2>
			break;
 8001bb4:	bf00      	nop
 8001bb6:	e000      	b.n	8001bba <BNO_Page0Adress+0x4a2>
			if(BNO_RxBuffer[1] != 160) return;
 8001bb8:	bf00      	nop
	}
}
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	f3af 8000 	nop.w
 8001bc8:	00000000 	.word	0x00000000
 8001bcc:	40590000 	.word	0x40590000
 8001bd0:	24000304 	.word	0x24000304
 8001bd4:	24000410 	.word	0x24000410
 8001bd8:	24000405 	.word	0x24000405

08001bdc <BNO_Page1Adress>:

void BNO_Page1Adress(void){
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
	switch (BNO_RxBuffer[0]) {
 8001be0:	4b09      	ldr	r3, [pc, #36]	@ (8001c08 <BNO_Page1Adress+0x2c>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b07      	cmp	r3, #7
 8001be6:	d108      	bne.n	8001bfa <BNO_Page1Adress+0x1e>
		case BNO055_PAGE_ID:
			IMU.Page = BNO_RxBuffer[1];
 8001be8:	4b07      	ldr	r3, [pc, #28]	@ (8001c08 <BNO_Page1Adress+0x2c>)
 8001bea:	785a      	ldrb	r2, [r3, #1]
 8001bec:	4b07      	ldr	r3, [pc, #28]	@ (8001c0c <BNO_Page1Adress+0x30>)
 8001bee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			BNO_ErrorHandler = ReadSucces;
 8001bf2:	4b07      	ldr	r3, [pc, #28]	@ (8001c10 <BNO_Page1Adress+0x34>)
 8001bf4:	220b      	movs	r2, #11
 8001bf6:	701a      	strb	r2, [r3, #0]
			break;
 8001bf8:	e000      	b.n	8001bfc <BNO_Page1Adress+0x20>

		default:
			break;
 8001bfa:	bf00      	nop
	}
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	24000304 	.word	0x24000304
 8001c0c:	24000410 	.word	0x24000410
 8001c10:	24000405 	.word	0x24000405

08001c14 <BNO_EmptyingBuffer>:

void BNO_EmptyingBuffer(void){
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
	switch (IMU.Page) {
 8001c18:	4b0a      	ldr	r3, [pc, #40]	@ (8001c44 <BNO_EmptyingBuffer+0x30>)
 8001c1a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d002      	beq.n	8001c28 <BNO_EmptyingBuffer+0x14>
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d003      	beq.n	8001c2e <BNO_EmptyingBuffer+0x1a>
			break;
		case 1:
			BNO_Page1Adress();
			break;
		default:
			break;
 8001c26:	e005      	b.n	8001c34 <BNO_EmptyingBuffer+0x20>
			BNO_Page0Adress();
 8001c28:	f7ff fd76 	bl	8001718 <BNO_Page0Adress>
			break;
 8001c2c:	e002      	b.n	8001c34 <BNO_EmptyingBuffer+0x20>
			BNO_Page1Adress();
 8001c2e:	f7ff ffd5 	bl	8001bdc <BNO_Page1Adress>
			break;
 8001c32:	bf00      	nop
	}
	memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 8001c34:	22ff      	movs	r2, #255	@ 0xff
 8001c36:	2100      	movs	r1, #0
 8001c38:	4803      	ldr	r0, [pc, #12]	@ (8001c48 <BNO_EmptyingBuffer+0x34>)
 8001c3a:	f015 fee4 	bl	8017a06 <memset>
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	24000410 	.word	0x24000410
 8001c48:	24000304 	.word	0x24000304

08001c4c <BNO_SWReset>:
		default:
			break;
	}
}

void BNO_SWReset(void){
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
	BNO_Write(BNO055_SYS_TRIGGER,0x20);
 8001c50:	2120      	movs	r1, #32
 8001c52:	203f      	movs	r0, #63	@ 0x3f
 8001c54:	f7ff fcca 	bl	80015ec <BNO_Write>
	bno055_delay(70);
 8001c58:	2046      	movs	r0, #70	@ 0x46
 8001c5a:	f7ff fc8d 	bl	8001578 <bno055_delay>
	IMU.ID = 0x00;
 8001c5e:	4b04      	ldr	r3, [pc, #16]	@ (8001c70 <BNO_SWReset+0x24>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]
	BNO_CurrentState = Configuration;
 8001c64:	4b03      	ldr	r3, [pc, #12]	@ (8001c74 <BNO_SWReset+0x28>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	701a      	strb	r2, [r3, #0]
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	24000410 	.word	0x24000410
 8001c74:	24000408 	.word	0x24000408

08001c78 <bno055_setOperationMode>:

void bno055_setOperationMode(bno055_opmode_t mode) {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	71fb      	strb	r3, [r7, #7]
  BNO_Write(BNO055_OPR_MODE, mode);
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	4619      	mov	r1, r3
 8001c86:	203d      	movs	r0, #61	@ 0x3d
 8001c88:	f7ff fcb0 	bl	80015ec <BNO_Write>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d103      	bne.n	8001c9a <bno055_setOperationMode+0x22>
    bno055_delay(5);
 8001c92:	2005      	movs	r0, #5
 8001c94:	f7ff fc70 	bl	8001578 <bno055_delay>
  } else {
    bno055_delay(3);
  }
}
 8001c98:	e002      	b.n	8001ca0 <bno055_setOperationMode+0x28>
    bno055_delay(3);
 8001c9a:	2003      	movs	r0, #3
 8001c9c:	f7ff fc6c 	bl	8001578 <bno055_delay>
}
 8001ca0:	bf00      	nop
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8001cac:	2000      	movs	r0, #0
 8001cae:	f7ff ffe3 	bl	8001c78 <bno055_setOperationMode>
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8001cba:	200c      	movs	r0, #12
 8001cbc:	f7ff ffdc 	bl	8001c78 <bno055_setOperationMode>
}
 8001cc0:	bf00      	nop
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <BNO_GetCalibrationData>:

void BNO_GetCalibrationData(void){
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
	BNO_Read(BNO055_ACC_OFFSET_X_LSB, 22);
 8001cc8:	2116      	movs	r1, #22
 8001cca:	2055      	movs	r0, #85	@ 0x55
 8001ccc:	f7ff fc68 	bl	80015a0 <BNO_Read>
}
 8001cd0:	bf00      	nop
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <BNO_SetCalibrationData>:

void BNO_SetCalibrationData(void){
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
	uint8_t buffer[22];

	  memcpy(&IMU.Calibration_Data.offset.accel, buffer, 6);
 8001cda:	463b      	mov	r3, r7
 8001cdc:	2206      	movs	r2, #6
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4814      	ldr	r0, [pc, #80]	@ (8001d34 <BNO_SetCalibrationData+0x60>)
 8001ce2:	f015 ff2a 	bl	8017b3a <memcpy>
	  memcpy(&IMU.Calibration_Data.offset.mag, buffer + 6, 6);
 8001ce6:	463b      	mov	r3, r7
 8001ce8:	3306      	adds	r3, #6
 8001cea:	2206      	movs	r2, #6
 8001cec:	4619      	mov	r1, r3
 8001cee:	4812      	ldr	r0, [pc, #72]	@ (8001d38 <BNO_SetCalibrationData+0x64>)
 8001cf0:	f015 ff23 	bl	8017b3a <memcpy>
	  memcpy(&IMU.Calibration_Data.offset.gyro, buffer + 12, 6);
 8001cf4:	463b      	mov	r3, r7
 8001cf6:	330c      	adds	r3, #12
 8001cf8:	2206      	movs	r2, #6
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	480f      	ldr	r0, [pc, #60]	@ (8001d3c <BNO_SetCalibrationData+0x68>)
 8001cfe:	f015 ff1c 	bl	8017b3a <memcpy>
	  memcpy(&IMU.Calibration_Data.radius.accel, buffer + 18, 2);
 8001d02:	463b      	mov	r3, r7
 8001d04:	3312      	adds	r3, #18
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d40 <BNO_SetCalibrationData+0x6c>)
 8001d0c:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
	  memcpy(&IMU.Calibration_Data.radius.mag, buffer + 20, 2);
 8001d10:	463b      	mov	r3, r7
 8001d12:	3314      	adds	r3, #20
 8001d14:	881b      	ldrh	r3, [r3, #0]
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	4b09      	ldr	r3, [pc, #36]	@ (8001d40 <BNO_SetCalibrationData+0x6c>)
 8001d1a:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

	BNO_Write_MB(BNO055_ACC_OFFSET_X_LSB, 22, buffer);
 8001d1e:	463b      	mov	r3, r7
 8001d20:	461a      	mov	r2, r3
 8001d22:	2116      	movs	r1, #22
 8001d24:	2055      	movs	r0, #85	@ 0x55
 8001d26:	f7ff fc83 	bl	8001630 <BNO_Write_MB>
}
 8001d2a:	bf00      	nop
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	240004a6 	.word	0x240004a6
 8001d38:	240004a0 	.word	0x240004a0
 8001d3c:	2400049a 	.word	0x2400049a
 8001d40:	24000410 	.word	0x24000410

08001d44 <BNO_Init>:

void BNO_Init(void){
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, SET);
 8001d48:	2201      	movs	r2, #1
 8001d4a:	2104      	movs	r1, #4
 8001d4c:	4808      	ldr	r0, [pc, #32]	@ (8001d70 <BNO_Init+0x2c>)
 8001d4e:	f007 fb03 	bl	8009358 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IMU_BOOT_GPIO_Port, IMU_BOOT_Pin, SET);
 8001d52:	2201      	movs	r2, #1
 8001d54:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001d58:	4806      	ldr	r0, [pc, #24]	@ (8001d74 <BNO_Init+0x30>)
 8001d5a:	f007 fafd 	bl	8009358 <HAL_GPIO_WritePin>

	bno055_delay(100);
 8001d5e:	2064      	movs	r0, #100	@ 0x64
 8001d60:	f7ff fc0a 	bl	8001578 <bno055_delay>

	BNO_CurrentState = Reset;
 8001d64:	4b04      	ldr	r3, [pc, #16]	@ (8001d78 <BNO_Init+0x34>)
 8001d66:	2204      	movs	r2, #4
 8001d68:	701a      	strb	r2, [r3, #0]
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	58020c00 	.word	0x58020c00
 8001d74:	58020400 	.word	0x58020400
 8001d78:	24000408 	.word	0x24000408

08001d7c <BNO_Config>:

void BNO_Config(void){
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
	static uint8_t ConfigFlag = 0;

	switch (ConfigFlag) {
 8001d80:	4b20      	ldr	r3, [pc, #128]	@ (8001e04 <BNO_Config+0x88>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b03      	cmp	r3, #3
 8001d86:	d839      	bhi.n	8001dfc <BNO_Config+0x80>
 8001d88:	a201      	add	r2, pc, #4	@ (adr r2, 8001d90 <BNO_Config+0x14>)
 8001d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d8e:	bf00      	nop
 8001d90:	08001da1 	.word	0x08001da1
 8001d94:	08001db1 	.word	0x08001db1
 8001d98:	08001dbd 	.word	0x08001dbd
 8001d9c:	08001ddf 	.word	0x08001ddf
		case 0:
			BNO_Write(BNO055_SYS_TRIGGER,0x00);
 8001da0:	2100      	movs	r1, #0
 8001da2:	203f      	movs	r0, #63	@ 0x3f
 8001da4:	f7ff fc22 	bl	80015ec <BNO_Write>
			ConfigFlag = 1;
 8001da8:	4b16      	ldr	r3, [pc, #88]	@ (8001e04 <BNO_Config+0x88>)
 8001daa:	2201      	movs	r2, #1
 8001dac:	701a      	strb	r2, [r3, #0]
			break;
 8001dae:	e026      	b.n	8001dfe <BNO_Config+0x82>
		case 1:
			bno055_setOperationModeConfig();
 8001db0:	f7ff ff7a 	bl	8001ca8 <bno055_setOperationModeConfig>
			ConfigFlag = 2;
 8001db4:	4b13      	ldr	r3, [pc, #76]	@ (8001e04 <BNO_Config+0x88>)
 8001db6:	2202      	movs	r2, #2
 8001db8:	701a      	strb	r2, [r3, #0]
			break;
 8001dba:	e020      	b.n	8001dfe <BNO_Config+0x82>
		case 2:
			BNO_Read(BNO055_OPR_MODE, 1);
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	203d      	movs	r0, #61	@ 0x3d
 8001dc0:	f7ff fbee 	bl	80015a0 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_CONFIG){
 8001dc4:	4b10      	ldr	r3, [pc, #64]	@ (8001e08 <BNO_Config+0x8c>)
 8001dc6:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d103      	bne.n	8001dd6 <BNO_Config+0x5a>
				ConfigFlag = 3;
 8001dce:	4b0d      	ldr	r3, [pc, #52]	@ (8001e04 <BNO_Config+0x88>)
 8001dd0:	2203      	movs	r2, #3
 8001dd2:	701a      	strb	r2, [r3, #0]
			}
			else ConfigFlag = 1;
			break;
 8001dd4:	e013      	b.n	8001dfe <BNO_Config+0x82>
			else ConfigFlag = 1;
 8001dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8001e04 <BNO_Config+0x88>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	701a      	strb	r2, [r3, #0]
			break;
 8001ddc:	e00f      	b.n	8001dfe <BNO_Config+0x82>
		case 3:
			BNO_Read(BNO055_CHIP_ID, 4);
 8001dde:	2104      	movs	r1, #4
 8001de0:	2000      	movs	r0, #0
 8001de2:	f7ff fbdd 	bl	80015a0 <BNO_Read>

			if(IMU.ID == BNO055_ID){
 8001de6:	4b08      	ldr	r3, [pc, #32]	@ (8001e08 <BNO_Config+0x8c>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2ba0      	cmp	r3, #160	@ 0xa0
 8001dec:	d102      	bne.n	8001df4 <BNO_Config+0x78>
				BNO_CurrentState = Calibration;
 8001dee:	4b07      	ldr	r3, [pc, #28]	@ (8001e0c <BNO_Config+0x90>)
 8001df0:	2202      	movs	r2, #2
 8001df2:	701a      	strb	r2, [r3, #0]
			}
			ConfigFlag = 0;
 8001df4:	4b03      	ldr	r3, [pc, #12]	@ (8001e04 <BNO_Config+0x88>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	701a      	strb	r2, [r3, #0]
			break;
 8001dfa:	e000      	b.n	8001dfe <BNO_Config+0x82>
		default:
			break;
 8001dfc:	bf00      	nop
	}

}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	240004b0 	.word	0x240004b0
 8001e08:	24000410 	.word	0x24000410
 8001e0c:	24000408 	.word	0x24000408

08001e10 <BNO_CalibrationStatus>:

void BNO_CalibrationStatus(void){
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
	static uint8_t CalibrationFlag = 0;
	static uint8_t Calibrated = 1;

	switch (CalibrationFlag) {
 8001e14:	4b3d      	ldr	r3, [pc, #244]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b07      	cmp	r3, #7
 8001e1a:	d870      	bhi.n	8001efe <BNO_CalibrationStatus+0xee>
 8001e1c:	a201      	add	r2, pc, #4	@ (adr r2, 8001e24 <BNO_CalibrationStatus+0x14>)
 8001e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e22:	bf00      	nop
 8001e24:	08001e45 	.word	0x08001e45
 8001e28:	08001e55 	.word	0x08001e55
 8001e2c:	08001e61 	.word	0x08001e61
 8001e30:	08001e99 	.word	0x08001e99
 8001e34:	08001eb3 	.word	0x08001eb3
 8001e38:	08001ebf 	.word	0x08001ebf
 8001e3c:	08001ee1 	.word	0x08001ee1
 8001e40:	08001ef3 	.word	0x08001ef3
		case 0:
			BNO_Write(BNO055_SYS_TRIGGER,0x00);
 8001e44:	2100      	movs	r1, #0
 8001e46:	203f      	movs	r0, #63	@ 0x3f
 8001e48:	f7ff fbd0 	bl	80015ec <BNO_Write>
			CalibrationFlag = 1;
 8001e4c:	4b2f      	ldr	r3, [pc, #188]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	701a      	strb	r2, [r3, #0]
			break;
 8001e52:	e059      	b.n	8001f08 <BNO_CalibrationStatus+0xf8>
		case 1:
			bno055_setOperationModeNDOF();
 8001e54:	f7ff ff2f 	bl	8001cb6 <bno055_setOperationModeNDOF>
			CalibrationFlag = 2;
 8001e58:	4b2c      	ldr	r3, [pc, #176]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	701a      	strb	r2, [r3, #0]
			break;
 8001e5e:	e053      	b.n	8001f08 <BNO_CalibrationStatus+0xf8>
		case 2:
			BNO_Read(BNO055_OPR_MODE, 1);
 8001e60:	2101      	movs	r1, #1
 8001e62:	203d      	movs	r0, #61	@ 0x3d
 8001e64:	f7ff fb9c 	bl	80015a0 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_NDOF){
 8001e68:	4b29      	ldr	r3, [pc, #164]	@ (8001f10 <BNO_CalibrationStatus+0x100>)
 8001e6a:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8001e6e:	2b0c      	cmp	r3, #12
 8001e70:	d10e      	bne.n	8001e90 <BNO_CalibrationStatus+0x80>
				if(Calibrated){
 8001e72:	4b28      	ldr	r3, [pc, #160]	@ (8001f14 <BNO_CalibrationStatus+0x104>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d006      	beq.n	8001e88 <BNO_CalibrationStatus+0x78>
					CalibrationFlag = 0;
 8001e7a:	4b24      	ldr	r3, [pc, #144]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	701a      	strb	r2, [r3, #0]
					BNO_CurrentState = Operation;
 8001e80:	4b25      	ldr	r3, [pc, #148]	@ (8001f18 <BNO_CalibrationStatus+0x108>)
 8001e82:	2203      	movs	r2, #3
 8001e84:	701a      	strb	r2, [r3, #0]
				}
				else CalibrationFlag = 3;
			}
			else CalibrationFlag = 1;
			break;
 8001e86:	e03f      	b.n	8001f08 <BNO_CalibrationStatus+0xf8>
				else CalibrationFlag = 3;
 8001e88:	4b20      	ldr	r3, [pc, #128]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	701a      	strb	r2, [r3, #0]
			break;
 8001e8e:	e03b      	b.n	8001f08 <BNO_CalibrationStatus+0xf8>
			else CalibrationFlag = 1;
 8001e90:	4b1e      	ldr	r3, [pc, #120]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	701a      	strb	r2, [r3, #0]
			break;
 8001e96:	e037      	b.n	8001f08 <BNO_CalibrationStatus+0xf8>
		case 3:
			BNO_Read(BNO055_CALIB_STAT, 1);
 8001e98:	2101      	movs	r1, #1
 8001e9a:	2035      	movs	r0, #53	@ 0x35
 8001e9c:	f7ff fb80 	bl	80015a0 <BNO_Read>
			if(IMU.CalSatus.Full == 0xFF){
 8001ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f10 <BNO_CalibrationStatus+0x100>)
 8001ea2:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8001ea6:	2bff      	cmp	r3, #255	@ 0xff
 8001ea8:	d12d      	bne.n	8001f06 <BNO_CalibrationStatus+0xf6>
				CalibrationFlag = 4;
 8001eaa:	4b18      	ldr	r3, [pc, #96]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001eac:	2204      	movs	r2, #4
 8001eae:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001eb0:	e029      	b.n	8001f06 <BNO_CalibrationStatus+0xf6>
		case 4:
			bno055_setOperationModeConfig();
 8001eb2:	f7ff fef9 	bl	8001ca8 <bno055_setOperationModeConfig>
			CalibrationFlag = 5;
 8001eb6:	4b15      	ldr	r3, [pc, #84]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001eb8:	2205      	movs	r2, #5
 8001eba:	701a      	strb	r2, [r3, #0]
			break;
 8001ebc:	e024      	b.n	8001f08 <BNO_CalibrationStatus+0xf8>
		case 5:
			BNO_Read(BNO055_OPR_MODE, 1);
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	203d      	movs	r0, #61	@ 0x3d
 8001ec2:	f7ff fb6d 	bl	80015a0 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_CONFIG){
 8001ec6:	4b12      	ldr	r3, [pc, #72]	@ (8001f10 <BNO_CalibrationStatus+0x100>)
 8001ec8:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d103      	bne.n	8001ed8 <BNO_CalibrationStatus+0xc8>
				CalibrationFlag = 6;
 8001ed0:	4b0e      	ldr	r3, [pc, #56]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001ed2:	2206      	movs	r2, #6
 8001ed4:	701a      	strb	r2, [r3, #0]

			}
			else CalibrationFlag = 4;
			break;
 8001ed6:	e017      	b.n	8001f08 <BNO_CalibrationStatus+0xf8>
			else CalibrationFlag = 4;
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001eda:	2204      	movs	r2, #4
 8001edc:	701a      	strb	r2, [r3, #0]
			break;
 8001ede:	e013      	b.n	8001f08 <BNO_CalibrationStatus+0xf8>
		case 6:
			BNO_GetCalibrationData();
 8001ee0:	f7ff fef0 	bl	8001cc4 <BNO_GetCalibrationData>
			Calibrated = 1;
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8001f14 <BNO_CalibrationStatus+0x104>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	701a      	strb	r2, [r3, #0]
			CalibrationFlag = 1;
 8001eea:	4b08      	ldr	r3, [pc, #32]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	701a      	strb	r2, [r3, #0]
			break;
 8001ef0:	e00a      	b.n	8001f08 <BNO_CalibrationStatus+0xf8>
		case 7:
			BNO_SetCalibrationData();
 8001ef2:	f7ff feef 	bl	8001cd4 <BNO_SetCalibrationData>
			CalibrationFlag = 1;
 8001ef6:	4b05      	ldr	r3, [pc, #20]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	701a      	strb	r2, [r3, #0]
			break;
 8001efc:	e004      	b.n	8001f08 <BNO_CalibrationStatus+0xf8>
		default:
			CalibrationFlag = 0;
 8001efe:	4b03      	ldr	r3, [pc, #12]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	701a      	strb	r2, [r3, #0]
			break;
 8001f04:	e000      	b.n	8001f08 <BNO_CalibrationStatus+0xf8>
			break;
 8001f06:	bf00      	nop
    	BNO_CurrentState = Operation;
    }
    else bno055_setOperationModeNDOF();
    */

}
 8001f08:	bf00      	nop
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	240004b1 	.word	0x240004b1
 8001f10:	24000410 	.word	0x24000410
 8001f14:	24000000 	.word	0x24000000
 8001f18:	24000408 	.word	0x24000408

08001f1c <BNO_GetData>:

void BNO_GetData(void){
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
	BNO_Read(BNO055_ACC_DATA_X_LSB,24);
 8001f20:	2118      	movs	r1, #24
 8001f22:	2008      	movs	r0, #8
 8001f24:	f7ff fb3c 	bl	80015a0 <BNO_Read>
}
 8001f28:	bf00      	nop
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <BNO_Receive>:

void BNO_Receive(uint8_t Buffer){
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	71fb      	strb	r3, [r7, #7]
	static uint8_t MsgSize = 0;
	static uint8_t Counter = 0;

	BNO_ComsCounter = 0;
 8001f36:	4b2c      	ldr	r3, [pc, #176]	@ (8001fe8 <BNO_Receive+0xbc>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	701a      	strb	r2, [r3, #0]

	switch (BNO_Rx_Status) {
 8001f3c:	4b2b      	ldr	r3, [pc, #172]	@ (8001fec <BNO_Receive+0xc0>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2bff      	cmp	r3, #255	@ 0xff
 8001f42:	d027      	beq.n	8001f94 <BNO_Receive+0x68>
 8001f44:	2bff      	cmp	r3, #255	@ 0xff
 8001f46:	dc46      	bgt.n	8001fd6 <BNO_Receive+0xaa>
 8001f48:	2bee      	cmp	r3, #238	@ 0xee
 8001f4a:	d017      	beq.n	8001f7c <BNO_Receive+0x50>
 8001f4c:	2bee      	cmp	r3, #238	@ 0xee
 8001f4e:	dc42      	bgt.n	8001fd6 <BNO_Receive+0xaa>
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d002      	beq.n	8001f5a <BNO_Receive+0x2e>
 8001f54:	2bbb      	cmp	r3, #187	@ 0xbb
 8001f56:	d00a      	beq.n	8001f6e <BNO_Receive+0x42>
				BNO_EmptyingBuffer();
			}

			break;
		default:
			break;
 8001f58:	e03d      	b.n	8001fd6 <BNO_Receive+0xaa>
			if(Buffer == Read_Response || Buffer == Header) BNO_Rx_Status = Buffer;
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	2bbb      	cmp	r3, #187	@ 0xbb
 8001f5e:	d002      	beq.n	8001f66 <BNO_Receive+0x3a>
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	2bee      	cmp	r3, #238	@ 0xee
 8001f64:	d139      	bne.n	8001fda <BNO_Receive+0xae>
 8001f66:	4a21      	ldr	r2, [pc, #132]	@ (8001fec <BNO_Receive+0xc0>)
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	7013      	strb	r3, [r2, #0]
			break;
 8001f6c:	e035      	b.n	8001fda <BNO_Receive+0xae>
			MsgSize = Buffer;
 8001f6e:	4a20      	ldr	r2, [pc, #128]	@ (8001ff0 <BNO_Receive+0xc4>)
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = Emptying_Buffer;
 8001f74:	4b1d      	ldr	r3, [pc, #116]	@ (8001fec <BNO_Receive+0xc0>)
 8001f76:	22ff      	movs	r2, #255	@ 0xff
 8001f78:	701a      	strb	r2, [r3, #0]
			break;
 8001f7a:	e031      	b.n	8001fe0 <BNO_Receive+0xb4>
			BNO_ErrorHandler = Buffer;
 8001f7c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ff4 <BNO_Receive+0xc8>)
 8001f7e:	79fb      	ldrb	r3, [r7, #7]
 8001f80:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = AwaitingMsg;
 8001f82:	4b1a      	ldr	r3, [pc, #104]	@ (8001fec <BNO_Receive+0xc0>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	701a      	strb	r2, [r3, #0]
			memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 8001f88:	22ff      	movs	r2, #255	@ 0xff
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	481a      	ldr	r0, [pc, #104]	@ (8001ff8 <BNO_Receive+0xcc>)
 8001f8e:	f015 fd3a 	bl	8017a06 <memset>
			break;
 8001f92:	e025      	b.n	8001fe0 <BNO_Receive+0xb4>
			BNO_RxBuffer[Counter + 1] = Buffer;
 8001f94:	4b19      	ldr	r3, [pc, #100]	@ (8001ffc <BNO_Receive+0xd0>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	4917      	ldr	r1, [pc, #92]	@ (8001ff8 <BNO_Receive+0xcc>)
 8001f9c:	79fa      	ldrb	r2, [r7, #7]
 8001f9e:	54ca      	strb	r2, [r1, r3]
			Counter++;
 8001fa0:	4b16      	ldr	r3, [pc, #88]	@ (8001ffc <BNO_Receive+0xd0>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	4b14      	ldr	r3, [pc, #80]	@ (8001ffc <BNO_Receive+0xd0>)
 8001faa:	701a      	strb	r2, [r3, #0]
			if(Counter == MsgSize){
 8001fac:	4b13      	ldr	r3, [pc, #76]	@ (8001ffc <BNO_Receive+0xd0>)
 8001fae:	781a      	ldrb	r2, [r3, #0]
 8001fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff0 <BNO_Receive+0xc4>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d112      	bne.n	8001fde <BNO_Receive+0xb2>
				Counter = 0;
 8001fb8:	4b10      	ldr	r3, [pc, #64]	@ (8001ffc <BNO_Receive+0xd0>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	701a      	strb	r2, [r3, #0]
				MsgSize = 0;
 8001fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff0 <BNO_Receive+0xc4>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
				BNO_Rx_Status = AwaitingMsg;
 8001fc4:	4b09      	ldr	r3, [pc, #36]	@ (8001fec <BNO_Receive+0xc0>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	701a      	strb	r2, [r3, #0]
				BNO_ErrorHandler = ReadSucces;
 8001fca:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff4 <BNO_Receive+0xc8>)
 8001fcc:	220b      	movs	r2, #11
 8001fce:	701a      	strb	r2, [r3, #0]
				BNO_EmptyingBuffer();
 8001fd0:	f7ff fe20 	bl	8001c14 <BNO_EmptyingBuffer>
			break;
 8001fd4:	e003      	b.n	8001fde <BNO_Receive+0xb2>
			break;
 8001fd6:	bf00      	nop
 8001fd8:	e002      	b.n	8001fe0 <BNO_Receive+0xb4>
			break;
 8001fda:	bf00      	nop
 8001fdc:	e000      	b.n	8001fe0 <BNO_Receive+0xb4>
			break;
 8001fde:	bf00      	nop
	}
}
 8001fe0:	bf00      	nop
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	24000406 	.word	0x24000406
 8001fec:	24000404 	.word	0x24000404
 8001ff0:	240004b2 	.word	0x240004b2
 8001ff4:	24000405 	.word	0x24000405
 8001ff8:	24000304 	.word	0x24000304
 8001ffc:	240004b3 	.word	0x240004b3

08002000 <BNO_FaultManager>:

void BNO_FaultManager(void){
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
	if(BNO_ComsCounter > 3){
 8002006:	4b13      	ldr	r3, [pc, #76]	@ (8002054 <BNO_FaultManager+0x54>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b03      	cmp	r3, #3
 800200c:	d90f      	bls.n	800202e <BNO_FaultManager+0x2e>
		Reset_UART(&huart3);
 800200e:	4812      	ldr	r0, [pc, #72]	@ (8002058 <BNO_FaultManager+0x58>)
 8002010:	f003 fb28 	bl	8005664 <Reset_UART>
		BNO_Rx_Status = AwaitingMsg;
 8002014:	4b11      	ldr	r3, [pc, #68]	@ (800205c <BNO_FaultManager+0x5c>)
 8002016:	2200      	movs	r2, #0
 8002018:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 800201a:	2201      	movs	r2, #1
 800201c:	4910      	ldr	r1, [pc, #64]	@ (8002060 <BNO_FaultManager+0x60>)
 800201e:	480e      	ldr	r0, [pc, #56]	@ (8002058 <BNO_FaultManager+0x58>)
 8002020:	f00c fcec 	bl	800e9fc <HAL_UART_Receive_DMA>
		memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 8002024:	22ff      	movs	r2, #255	@ 0xff
 8002026:	2100      	movs	r1, #0
 8002028:	480e      	ldr	r0, [pc, #56]	@ (8002064 <BNO_FaultManager+0x64>)
 800202a:	f015 fcec 	bl	8017a06 <memset>
	}
	if(BNO_ErrorHandler == WRONG_START_BYTE){
 800202e:	4b0e      	ldr	r3, [pc, #56]	@ (8002068 <BNO_FaultManager+0x68>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b06      	cmp	r3, #6
 8002034:	d10a      	bne.n	800204c <BNO_FaultManager+0x4c>
		uint8_t Buffer = 0x00;
 8002036:	2300      	movs	r3, #0
 8002038:	71fb      	strb	r3, [r7, #7]

		HAL_UART_Transmit_IT(&huart3, &Buffer, 1);
 800203a:	1dfb      	adds	r3, r7, #7
 800203c:	2201      	movs	r2, #1
 800203e:	4619      	mov	r1, r3
 8002040:	4805      	ldr	r0, [pc, #20]	@ (8002058 <BNO_FaultManager+0x58>)
 8002042:	f00c fbfb 	bl	800e83c <HAL_UART_Transmit_IT>
		BNO_ErrorHandler = 0;
 8002046:	4b08      	ldr	r3, [pc, #32]	@ (8002068 <BNO_FaultManager+0x68>)
 8002048:	2200      	movs	r2, #0
 800204a:	701a      	strb	r2, [r3, #0]
	}
}
 800204c:	bf00      	nop
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	24000406 	.word	0x24000406
 8002058:	24005308 	.word	0x24005308
 800205c:	24000404 	.word	0x24000404
 8002060:	24000403 	.word	0x24000403
 8002064:	24000304 	.word	0x24000304
 8002068:	24000405 	.word	0x24000405

0800206c <BNO_Tasks>:

void BNO_Tasks(void){
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
	if(BNO_DelayCounter == 0){
 8002070:	4b1b      	ldr	r3, [pc, #108]	@ (80020e0 <BNO_Tasks+0x74>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d128      	bne.n	80020ca <BNO_Tasks+0x5e>
		switch (BNO_CurrentState) {
 8002078:	4b1a      	ldr	r3, [pc, #104]	@ (80020e4 <BNO_Tasks+0x78>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	2b04      	cmp	r3, #4
 800207e:	d81c      	bhi.n	80020ba <BNO_Tasks+0x4e>
 8002080:	a201      	add	r2, pc, #4	@ (adr r2, 8002088 <BNO_Tasks+0x1c>)
 8002082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002086:	bf00      	nop
 8002088:	0800209d 	.word	0x0800209d
 800208c:	080020a9 	.word	0x080020a9
 8002090:	080020af 	.word	0x080020af
 8002094:	080020b5 	.word	0x080020b5
 8002098:	080020a3 	.word	0x080020a3
			case Init:
				BNO_Init();
 800209c:	f7ff fe52 	bl	8001d44 <BNO_Init>
				break;
 80020a0:	e00c      	b.n	80020bc <BNO_Tasks+0x50>
			case Reset:
				BNO_SWReset();
 80020a2:	f7ff fdd3 	bl	8001c4c <BNO_SWReset>
			break;
 80020a6:	e009      	b.n	80020bc <BNO_Tasks+0x50>
			case Configuration:
				BNO_Config();
 80020a8:	f7ff fe68 	bl	8001d7c <BNO_Config>
				break;
 80020ac:	e006      	b.n	80020bc <BNO_Tasks+0x50>
			case Calibration:
				BNO_CalibrationStatus();
 80020ae:	f7ff feaf 	bl	8001e10 <BNO_CalibrationStatus>
				break;
 80020b2:	e003      	b.n	80020bc <BNO_Tasks+0x50>
			case Operation:
				BNO_GetData();
 80020b4:	f7ff ff32 	bl	8001f1c <BNO_GetData>
				break;
 80020b8:	e000      	b.n	80020bc <BNO_Tasks+0x50>

			default:
				break;
 80020ba:	bf00      	nop
		}
		++BNO_ComsCounter;
 80020bc:	4b0a      	ldr	r3, [pc, #40]	@ (80020e8 <BNO_Tasks+0x7c>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	3301      	adds	r3, #1
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	4b08      	ldr	r3, [pc, #32]	@ (80020e8 <BNO_Tasks+0x7c>)
 80020c6:	701a      	strb	r2, [r3, #0]
 80020c8:	e005      	b.n	80020d6 <BNO_Tasks+0x6a>
	}
	else{
		--BNO_DelayCounter;
 80020ca:	4b05      	ldr	r3, [pc, #20]	@ (80020e0 <BNO_Tasks+0x74>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	3b01      	subs	r3, #1
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	4b03      	ldr	r3, [pc, #12]	@ (80020e0 <BNO_Tasks+0x74>)
 80020d4:	701a      	strb	r2, [r3, #0]
	}
	BNO_FaultManager();
 80020d6:	f7ff ff93 	bl	8002000 <BNO_FaultManager>
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	24000407 	.word	0x24000407
 80020e4:	24000408 	.word	0x24000408
 80020e8:	24000406 	.word	0x24000406

080020ec <LED_blink>:

		.G_LED.LED_GPIO_GPIOx = LED_5_GPIO_Port,
		.G_LED.LED_GPIO_Pin   = LED_5_Pin
};

LED_config_t LED_blink(LED_config_t LED){
 80020ec:	b084      	sub	sp, #16
 80020ee:	b590      	push	{r4, r7, lr}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
 80020f6:	f107 001c 	add.w	r0, r7, #28
 80020fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}

		switch (LED.Blink_status) {
 80020fe:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8002102:	2b00      	cmp	r3, #0
 8002104:	d002      	beq.n	800210c <LED_blink+0x20>
 8002106:	2b01      	cmp	r3, #1
 8002108:	d010      	beq.n	800212c <LED_blink+0x40>
 800210a:	e01f      	b.n	800214c <LED_blink+0x60>
			case 0x00:
				if(LED.count >= LED.Time_Off){
 800210c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800210e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002110:	429a      	cmp	r2, r3
 8002112:	d31f      	bcc.n	8002154 <LED_blink+0x68>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	8c39      	ldrh	r1, [r7, #32]
 8002118:	2201      	movs	r2, #1
 800211a:	4618      	mov	r0, r3
 800211c:	f007 f91c 	bl	8009358 <HAL_GPIO_WritePin>
					LED.Blink_status = 1;
 8002120:	2301      	movs	r3, #1
 8002122:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 8002126:	2300      	movs	r3, #0
 8002128:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 800212a:	e013      	b.n	8002154 <LED_blink+0x68>
			case 0x01:
				if(LED.count >= LED.Time_On){
 800212c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800212e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002130:	429a      	cmp	r2, r3
 8002132:	d311      	bcc.n	8002158 <LED_blink+0x6c>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	8c39      	ldrh	r1, [r7, #32]
 8002138:	2200      	movs	r2, #0
 800213a:	4618      	mov	r0, r3
 800213c:	f007 f90c 	bl	8009358 <HAL_GPIO_WritePin>
					LED.Blink_status = 0;
 8002140:	2300      	movs	r3, #0
 8002142:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 8002146:	2300      	movs	r3, #0
 8002148:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 800214a:	e005      	b.n	8002158 <LED_blink+0x6c>
			default:
				LED.Blink_status = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
				break;
 8002152:	e002      	b.n	800215a <LED_blink+0x6e>
				break;
 8002154:	bf00      	nop
 8002156:	e000      	b.n	800215a <LED_blink+0x6e>
				break;
 8002158:	bf00      	nop
		}

	LED.count++;
 800215a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800215c:	3301      	adds	r3, #1
 800215e:	b29b      	uxth	r3, r3
 8002160:	853b      	strh	r3, [r7, #40]	@ 0x28
	return LED;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	461c      	mov	r4, r3
 8002166:	f107 031c 	add.w	r3, r7, #28
 800216a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800216c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800217a:	b004      	add	sp, #16
 800217c:	4770      	bx	lr

0800217e <LED_Rutine>:

LED_config_t LED_Rutine(LED_config_t LED){
 800217e:	b084      	sub	sp, #16
 8002180:	b590      	push	{r4, r7, lr}
 8002182:	b085      	sub	sp, #20
 8002184:	af02      	add	r7, sp, #8
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	f107 001c 	add.w	r0, r7, #28
 800218c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(LED.LED_status == 1){
 8002190:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002194:	2b01      	cmp	r3, #1
 8002196:	d117      	bne.n	80021c8 <LED_Rutine+0x4a>
		switch (LED.Sequence) {
 8002198:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800219c:	2b00      	cmp	r3, #0
 800219e:	d002      	beq.n	80021a6 <LED_Rutine+0x28>
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d007      	beq.n	80021b4 <LED_Rutine+0x36>
				break;
			case Blink:
				LED = LED_blink(LED);
				break;
			default:
				break;
 80021a4:	e018      	b.n	80021d8 <LED_Rutine+0x5a>
				HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	8c39      	ldrh	r1, [r7, #32]
 80021aa:	2201      	movs	r2, #1
 80021ac:	4618      	mov	r0, r3
 80021ae:	f007 f8d3 	bl	8009358 <HAL_GPIO_WritePin>
				break;
 80021b2:	e011      	b.n	80021d8 <LED_Rutine+0x5a>
				LED = LED_blink(LED);
 80021b4:	f107 001c 	add.w	r0, r7, #28
 80021b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	f107 031c 	add.w	r3, r7, #28
 80021c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021c2:	f7ff ff93 	bl	80020ec <LED_blink>
				break;
 80021c6:	e007      	b.n	80021d8 <LED_Rutine+0x5a>
		}
	}
	else{
		HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	8c39      	ldrh	r1, [r7, #32]
 80021cc:	2200      	movs	r2, #0
 80021ce:	4618      	mov	r0, r3
 80021d0:	f007 f8c2 	bl	8009358 <HAL_GPIO_WritePin>
		LED.count = 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	853b      	strh	r3, [r7, #40]	@ 0x28
	}
	return LED;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	461c      	mov	r4, r3
 80021dc:	f107 031c 	add.w	r3, r7, #28
 80021e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80021f0:	b004      	add	sp, #16
 80021f2:	4770      	bx	lr

080021f4 <LED_Tasks>:

void LED_Tasks (void){
 80021f4:	b590      	push	{r4, r7, lr}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af02      	add	r7, sp, #8
	LED_Info.R_LED = LED_Rutine(LED_Info.R_LED);
 80021fa:	4c24      	ldr	r4, [pc, #144]	@ (800228c <LED_Tasks+0x98>)
 80021fc:	4638      	mov	r0, r7
 80021fe:	4b23      	ldr	r3, [pc, #140]	@ (800228c <LED_Tasks+0x98>)
 8002200:	68da      	ldr	r2, [r3, #12]
 8002202:	9200      	str	r2, [sp, #0]
 8002204:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002206:	f7ff ffba 	bl	800217e <LED_Rutine>
 800220a:	463b      	mov	r3, r7
 800220c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800220e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED1 = LED_Rutine(LED_Info.B_LED1);
 8002212:	4c1e      	ldr	r4, [pc, #120]	@ (800228c <LED_Tasks+0x98>)
 8002214:	4638      	mov	r0, r7
 8002216:	4b1d      	ldr	r3, [pc, #116]	@ (800228c <LED_Tasks+0x98>)
 8002218:	69da      	ldr	r2, [r3, #28]
 800221a:	9200      	str	r2, [sp, #0]
 800221c:	3310      	adds	r3, #16
 800221e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002220:	f7ff ffad 	bl	800217e <LED_Rutine>
 8002224:	3410      	adds	r4, #16
 8002226:	463b      	mov	r3, r7
 8002228:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800222a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED2 = LED_Rutine(LED_Info.B_LED2);
 800222e:	4c17      	ldr	r4, [pc, #92]	@ (800228c <LED_Tasks+0x98>)
 8002230:	4638      	mov	r0, r7
 8002232:	4b16      	ldr	r3, [pc, #88]	@ (800228c <LED_Tasks+0x98>)
 8002234:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002236:	9200      	str	r2, [sp, #0]
 8002238:	3320      	adds	r3, #32
 800223a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800223c:	f7ff ff9f 	bl	800217e <LED_Rutine>
 8002240:	3420      	adds	r4, #32
 8002242:	463b      	mov	r3, r7
 8002244:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002246:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED3 = LED_Rutine(LED_Info.B_LED3);
 800224a:	4c10      	ldr	r4, [pc, #64]	@ (800228c <LED_Tasks+0x98>)
 800224c:	4638      	mov	r0, r7
 800224e:	4b0f      	ldr	r3, [pc, #60]	@ (800228c <LED_Tasks+0x98>)
 8002250:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002252:	9200      	str	r2, [sp, #0]
 8002254:	3330      	adds	r3, #48	@ 0x30
 8002256:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002258:	f7ff ff91 	bl	800217e <LED_Rutine>
 800225c:	3430      	adds	r4, #48	@ 0x30
 800225e:	463b      	mov	r3, r7
 8002260:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002262:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.G_LED = LED_Rutine(LED_Info.G_LED);
 8002266:	4c09      	ldr	r4, [pc, #36]	@ (800228c <LED_Tasks+0x98>)
 8002268:	4638      	mov	r0, r7
 800226a:	4b08      	ldr	r3, [pc, #32]	@ (800228c <LED_Tasks+0x98>)
 800226c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800226e:	9200      	str	r2, [sp, #0]
 8002270:	3340      	adds	r3, #64	@ 0x40
 8002272:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002274:	f7ff ff83 	bl	800217e <LED_Rutine>
 8002278:	3440      	adds	r4, #64	@ 0x40
 800227a:	463b      	mov	r3, r7
 800227c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800227e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002282:	bf00      	nop
 8002284:	3714      	adds	r7, #20
 8002286:	46bd      	mov	sp, r7
 8002288:	bd90      	pop	{r4, r7, pc}
 800228a:	bf00      	nop
 800228c:	24000004 	.word	0x24000004

08002290 <LR03_AT>:

uint8_t LR03_RxBuffer[256] = {0};

uint8_t Test_1;

void LR03_AT(void){
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0

	uint8_t AT_Command[5] = {"+++"};
 8002296:	4b09      	ldr	r3, [pc, #36]	@ (80022bc <LR03_AT+0x2c>)
 8002298:	603b      	str	r3, [r7, #0]
 800229a:	2300      	movs	r3, #0
 800229c:	713b      	strb	r3, [r7, #4]
	AT_Command[3]= 0x0D;
 800229e:	230d      	movs	r3, #13
 80022a0:	70fb      	strb	r3, [r7, #3]
	AT_Command[4]= 0x0A;
 80022a2:	230a      	movs	r3, #10
 80022a4:	713b      	strb	r3, [r7, #4]
	HAL_UART_Transmit_IT(&huart6, AT_Command, 5);
 80022a6:	463b      	mov	r3, r7
 80022a8:	2205      	movs	r2, #5
 80022aa:	4619      	mov	r1, r3
 80022ac:	4804      	ldr	r0, [pc, #16]	@ (80022c0 <LR03_AT+0x30>)
 80022ae:	f00c fac5 	bl	800e83c <HAL_UART_Transmit_IT>
}
 80022b2:	bf00      	nop
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	002b2b2b 	.word	0x002b2b2b
 80022c0:	2400539c 	.word	0x2400539c

080022c4 <LR03_Level>:

void LR03_Level(uint8_t Level){
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	71fb      	strb	r3, [r7, #7]
	uint8_t Level_Command[11] = {"AT+LEVEL"};
 80022ce:	4a13      	ldr	r2, [pc, #76]	@ (800231c <LR03_Level+0x58>)
 80022d0:	f107 030c 	add.w	r3, r7, #12
 80022d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80022d6:	c303      	stmia	r3!, {r0, r1}
 80022d8:	701a      	strb	r2, [r3, #0]
 80022da:	f107 0315 	add.w	r3, r7, #21
 80022de:	2200      	movs	r2, #0
 80022e0:	801a      	strh	r2, [r3, #0]
	if(Level > 7) Level = 7;
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	2b07      	cmp	r3, #7
 80022e6:	d901      	bls.n	80022ec <LR03_Level+0x28>
 80022e8:	2307      	movs	r3, #7
 80022ea:	71fb      	strb	r3, [r7, #7]
	if(Level < 1) Level = 1;
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <LR03_Level+0x32>
 80022f2:	2301      	movs	r3, #1
 80022f4:	71fb      	strb	r3, [r7, #7]
	Level_Command[8] = Level + 48;
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	3330      	adds	r3, #48	@ 0x30
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	753b      	strb	r3, [r7, #20]
	Level_Command[9] = 0x0D;
 80022fe:	230d      	movs	r3, #13
 8002300:	757b      	strb	r3, [r7, #21]
	Level_Command[10] = 0x0A;
 8002302:	230a      	movs	r3, #10
 8002304:	75bb      	strb	r3, [r7, #22]
	HAL_UART_Transmit_IT(&huart6, Level_Command, 11);
 8002306:	f107 030c 	add.w	r3, r7, #12
 800230a:	220b      	movs	r2, #11
 800230c:	4619      	mov	r1, r3
 800230e:	4804      	ldr	r0, [pc, #16]	@ (8002320 <LR03_Level+0x5c>)
 8002310:	f00c fa94 	bl	800e83c <HAL_UART_Transmit_IT>
}
 8002314:	bf00      	nop
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	08019a50 	.word	0x08019a50
 8002320:	2400539c 	.word	0x2400539c

08002324 <LR03_Receive>:

void LR03_Receive(uint8_t Data){
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	71fb      	strb	r3, [r7, #7]
	static uint8_t DataPointer = 0;
	LR03_RxBuffer[DataPointer] = Data;
 800232e:	4b09      	ldr	r3, [pc, #36]	@ (8002354 <LR03_Receive+0x30>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	4619      	mov	r1, r3
 8002334:	4a08      	ldr	r2, [pc, #32]	@ (8002358 <LR03_Receive+0x34>)
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	5453      	strb	r3, [r2, r1]
	DataPointer++;
 800233a:	4b06      	ldr	r3, [pc, #24]	@ (8002354 <LR03_Receive+0x30>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	3301      	adds	r3, #1
 8002340:	b2da      	uxtb	r2, r3
 8002342:	4b04      	ldr	r3, [pc, #16]	@ (8002354 <LR03_Receive+0x30>)
 8002344:	701a      	strb	r2, [r3, #0]
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	240005b5 	.word	0x240005b5
 8002358:	240004b4 	.word	0x240004b4

0800235c <LR03_StateMachine>:

void LR03_StateMachine(void){
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0

	switch (Test_1) {
 8002360:	4b09      	ldr	r3, [pc, #36]	@ (8002388 <LR03_StateMachine+0x2c>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d002      	beq.n	800236e <LR03_StateMachine+0x12>
 8002368:	2b02      	cmp	r3, #2
 800236a:	d003      	beq.n	8002374 <LR03_StateMachine+0x18>
			break;
		case 2:
			LR03_Level(7);
			break;
		default:
			break;
 800236c:	e006      	b.n	800237c <LR03_StateMachine+0x20>
			LR03_AT();
 800236e:	f7ff ff8f 	bl	8002290 <LR03_AT>
			break;
 8002372:	e003      	b.n	800237c <LR03_StateMachine+0x20>
			LR03_Level(7);
 8002374:	2007      	movs	r0, #7
 8002376:	f7ff ffa5 	bl	80022c4 <LR03_Level>
			break;
 800237a:	bf00      	nop
	}
	Test_1 = 0;
 800237c:	4b02      	ldr	r3, [pc, #8]	@ (8002388 <LR03_StateMachine+0x2c>)
 800237e:	2200      	movs	r2, #0
 8002380:	701a      	strb	r2, [r3, #0]
}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	240005b4 	.word	0x240005b4

0800238c <PWM_Assing>:
		.Canal_8  = 1500,
		.Canal_9  = 1500,
		.Canal_10 = 1500,
};

void PWM_Assing(void){
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
	TIM2->CCR1 = PWM_Output.Canal_1;
 8002390:	4b2a      	ldr	r3, [pc, #168]	@ (800243c <PWM_Assing+0xb0>)
 8002392:	881a      	ldrh	r2, [r3, #0]
 8002394:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002398:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2->CCR2 = PWM_Output.Canal_2;
 800239a:	4b28      	ldr	r3, [pc, #160]	@ (800243c <PWM_Assing+0xb0>)
 800239c:	885a      	ldrh	r2, [r3, #2]
 800239e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80023a2:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM3->CCR1 = PWM_Output.Canal_3;
 80023a4:	4b25      	ldr	r3, [pc, #148]	@ (800243c <PWM_Assing+0xb0>)
 80023a6:	889a      	ldrh	r2, [r3, #4]
 80023a8:	4b25      	ldr	r3, [pc, #148]	@ (8002440 <PWM_Assing+0xb4>)
 80023aa:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = PWM_Output.Canal_4;
 80023ac:	4b23      	ldr	r3, [pc, #140]	@ (800243c <PWM_Assing+0xb0>)
 80023ae:	88da      	ldrh	r2, [r3, #6]
 80023b0:	4b23      	ldr	r3, [pc, #140]	@ (8002440 <PWM_Assing+0xb4>)
 80023b2:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM4->CCR1 = PWM_Output.Canal_5;
 80023b4:	4b21      	ldr	r3, [pc, #132]	@ (800243c <PWM_Assing+0xb0>)
 80023b6:	891a      	ldrh	r2, [r3, #8]
 80023b8:	4b22      	ldr	r3, [pc, #136]	@ (8002444 <PWM_Assing+0xb8>)
 80023ba:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM4->CCR2 = PWM_Output.Canal_6;
 80023bc:	4b1f      	ldr	r3, [pc, #124]	@ (800243c <PWM_Assing+0xb0>)
 80023be:	895a      	ldrh	r2, [r3, #10]
 80023c0:	4b20      	ldr	r3, [pc, #128]	@ (8002444 <PWM_Assing+0xb8>)
 80023c2:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM4->CCR3 = PWM_Output.Canal_7;
 80023c4:	4b1d      	ldr	r3, [pc, #116]	@ (800243c <PWM_Assing+0xb0>)
 80023c6:	899a      	ldrh	r2, [r3, #12]
 80023c8:	4b1e      	ldr	r3, [pc, #120]	@ (8002444 <PWM_Assing+0xb8>)
 80023ca:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM4->CCR4 = PWM_Output.Canal_8;
 80023cc:	4b1b      	ldr	r3, [pc, #108]	@ (800243c <PWM_Assing+0xb0>)
 80023ce:	89da      	ldrh	r2, [r3, #14]
 80023d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002444 <PWM_Assing+0xb8>)
 80023d2:	641a      	str	r2, [r3, #64]	@ 0x40

	TIM2->CCR4 = PWM_Output.Canal_9;
 80023d4:	4b19      	ldr	r3, [pc, #100]	@ (800243c <PWM_Assing+0xb0>)
 80023d6:	8a1a      	ldrh	r2, [r3, #16]
 80023d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80023dc:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM2->CCR3 = PWM_Output.Canal_10;
 80023de:	4b17      	ldr	r3, [pc, #92]	@ (800243c <PWM_Assing+0xb0>)
 80023e0:	8a5a      	ldrh	r2, [r3, #18]
 80023e2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80023e6:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80023e8:	2100      	movs	r1, #0
 80023ea:	4817      	ldr	r0, [pc, #92]	@ (8002448 <PWM_Assing+0xbc>)
 80023ec:	f00b f9a8 	bl	800d740 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80023f0:	2104      	movs	r1, #4
 80023f2:	4815      	ldr	r0, [pc, #84]	@ (8002448 <PWM_Assing+0xbc>)
 80023f4:	f00b f9a4 	bl	800d740 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80023f8:	2108      	movs	r1, #8
 80023fa:	4813      	ldr	r0, [pc, #76]	@ (8002448 <PWM_Assing+0xbc>)
 80023fc:	f00b f9a0 	bl	800d740 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002400:	210c      	movs	r1, #12
 8002402:	4811      	ldr	r0, [pc, #68]	@ (8002448 <PWM_Assing+0xbc>)
 8002404:	f00b f99c 	bl	800d740 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002408:	2100      	movs	r1, #0
 800240a:	4810      	ldr	r0, [pc, #64]	@ (800244c <PWM_Assing+0xc0>)
 800240c:	f00b f998 	bl	800d740 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002410:	2104      	movs	r1, #4
 8002412:	480e      	ldr	r0, [pc, #56]	@ (800244c <PWM_Assing+0xc0>)
 8002414:	f00b f994 	bl	800d740 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8002418:	2100      	movs	r1, #0
 800241a:	480d      	ldr	r0, [pc, #52]	@ (8002450 <PWM_Assing+0xc4>)
 800241c:	f00b f990 	bl	800d740 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8002420:	2104      	movs	r1, #4
 8002422:	480b      	ldr	r0, [pc, #44]	@ (8002450 <PWM_Assing+0xc4>)
 8002424:	f00b f98c 	bl	800d740 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002428:	2108      	movs	r1, #8
 800242a:	4809      	ldr	r0, [pc, #36]	@ (8002450 <PWM_Assing+0xc4>)
 800242c:	f00b f988 	bl	800d740 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002430:	210c      	movs	r1, #12
 8002432:	4807      	ldr	r0, [pc, #28]	@ (8002450 <PWM_Assing+0xc4>)
 8002434:	f00b f984 	bl	800d740 <HAL_TIM_PWM_Start>
}
 8002438:	bf00      	nop
 800243a:	bd80      	pop	{r7, pc}
 800243c:	24000054 	.word	0x24000054
 8002440:	40000400 	.word	0x40000400
 8002444:	40000800 	.word	0x40000800
 8002448:	24005018 	.word	0x24005018
 800244c:	24005064 	.word	0x24005064
 8002450:	240050b0 	.word	0x240050b0

08002454 <SBUS_init>:

extern UART_HandleTypeDef huart1;
#define SBUS_UART_handler &huart1


void SBUS_init(void){
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(SBUS_UART_handler, &SBUS_RxBuffer, 1);
 8002458:	2201      	movs	r2, #1
 800245a:	4903      	ldr	r1, [pc, #12]	@ (8002468 <SBUS_init+0x14>)
 800245c:	4803      	ldr	r0, [pc, #12]	@ (800246c <SBUS_init+0x18>)
 800245e:	f00c facd 	bl	800e9fc <HAL_UART_Receive_DMA>

}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	240005d1 	.word	0x240005d1
 800246c:	24005274 	.word	0x24005274

08002470 <SBUS_Receive>:

void SBUS_Receive(uint8_t SBUS_RxBuffer){
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	71fb      	strb	r3, [r7, #7]
	static uint8_t Actual_status = 0;
	static uint8_t RxCount;

	switch (Actual_status) {
 800247a:	4b20      	ldr	r3, [pc, #128]	@ (80024fc <SBUS_Receive+0x8c>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d002      	beq.n	8002488 <SBUS_Receive+0x18>
 8002482:	2b01      	cmp	r3, #1
 8002484:	d017      	beq.n	80024b6 <SBUS_Receive+0x46>
 8002486:	e02f      	b.n	80024e8 <SBUS_Receive+0x78>
		case 0:
			if(SBUS_RxBuffer == 0x0F){
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	2b0f      	cmp	r3, #15
 800248c:	d10f      	bne.n	80024ae <SBUS_Receive+0x3e>
				SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 800248e:	4b1c      	ldr	r3, [pc, #112]	@ (8002500 <SBUS_Receive+0x90>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	4619      	mov	r1, r3
 8002494:	4a1b      	ldr	r2, [pc, #108]	@ (8002504 <SBUS_Receive+0x94>)
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	5453      	strb	r3, [r2, r1]
				Actual_status = 1;
 800249a:	4b18      	ldr	r3, [pc, #96]	@ (80024fc <SBUS_Receive+0x8c>)
 800249c:	2201      	movs	r2, #1
 800249e:	701a      	strb	r2, [r3, #0]
				RxCount++;
 80024a0:	4b17      	ldr	r3, [pc, #92]	@ (8002500 <SBUS_Receive+0x90>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	3301      	adds	r3, #1
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	4b15      	ldr	r3, [pc, #84]	@ (8002500 <SBUS_Receive+0x90>)
 80024aa:	701a      	strb	r2, [r3, #0]
			}
			else{
				RxCount = 0;
			}
			break;
 80024ac:	e021      	b.n	80024f2 <SBUS_Receive+0x82>
				RxCount = 0;
 80024ae:	4b14      	ldr	r3, [pc, #80]	@ (8002500 <SBUS_Receive+0x90>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	701a      	strb	r2, [r3, #0]
			break;
 80024b4:	e01d      	b.n	80024f2 <SBUS_Receive+0x82>
		case 1:
			SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 80024b6:	4b12      	ldr	r3, [pc, #72]	@ (8002500 <SBUS_Receive+0x90>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	4619      	mov	r1, r3
 80024bc:	4a11      	ldr	r2, [pc, #68]	@ (8002504 <SBUS_Receive+0x94>)
 80024be:	79fb      	ldrb	r3, [r7, #7]
 80024c0:	5453      	strb	r3, [r2, r1]
			RxCount++;
 80024c2:	4b0f      	ldr	r3, [pc, #60]	@ (8002500 <SBUS_Receive+0x90>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	3301      	adds	r3, #1
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002500 <SBUS_Receive+0x90>)
 80024cc:	701a      	strb	r2, [r3, #0]
			if(RxCount == 24){
 80024ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002500 <SBUS_Receive+0x90>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b18      	cmp	r3, #24
 80024d4:	d10c      	bne.n	80024f0 <SBUS_Receive+0x80>
				RxCount = 0;
 80024d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002500 <SBUS_Receive+0x90>)
 80024d8:	2200      	movs	r2, #0
 80024da:	701a      	strb	r2, [r3, #0]
				Actual_status = 0;
 80024dc:	4b07      	ldr	r3, [pc, #28]	@ (80024fc <SBUS_Receive+0x8c>)
 80024de:	2200      	movs	r2, #0
 80024e0:	701a      	strb	r2, [r3, #0]
				SBUS_getData();
 80024e2:	f000 f845 	bl	8002570 <SBUS_getData>
			}
			break;
 80024e6:	e003      	b.n	80024f0 <SBUS_Receive+0x80>
		default:
			Actual_status = 0;
 80024e8:	4b04      	ldr	r3, [pc, #16]	@ (80024fc <SBUS_Receive+0x8c>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	701a      	strb	r2, [r3, #0]
			break;
 80024ee:	e000      	b.n	80024f2 <SBUS_Receive+0x82>
			break;
 80024f0:	bf00      	nop
	}
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	240005d2 	.word	0x240005d2
 8002500:	240005d3 	.word	0x240005d3
 8002504:	240005b8 	.word	0x240005b8

08002508 <Temp_BypassFunct>:

void Temp_BypassFunct (void){
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
	PWM_Output.Canal_1  = Radio_input.Canal_1;
 800250c:	4b16      	ldr	r3, [pc, #88]	@ (8002568 <Temp_BypassFunct+0x60>)
 800250e:	885a      	ldrh	r2, [r3, #2]
 8002510:	4b16      	ldr	r3, [pc, #88]	@ (800256c <Temp_BypassFunct+0x64>)
 8002512:	801a      	strh	r2, [r3, #0]
	PWM_Output.Canal_2  = Radio_input.Canal_2;
 8002514:	4b14      	ldr	r3, [pc, #80]	@ (8002568 <Temp_BypassFunct+0x60>)
 8002516:	889a      	ldrh	r2, [r3, #4]
 8002518:	4b14      	ldr	r3, [pc, #80]	@ (800256c <Temp_BypassFunct+0x64>)
 800251a:	805a      	strh	r2, [r3, #2]
	PWM_Output.Canal_3  = Radio_input.Canal_3;
 800251c:	4b12      	ldr	r3, [pc, #72]	@ (8002568 <Temp_BypassFunct+0x60>)
 800251e:	88da      	ldrh	r2, [r3, #6]
 8002520:	4b12      	ldr	r3, [pc, #72]	@ (800256c <Temp_BypassFunct+0x64>)
 8002522:	809a      	strh	r2, [r3, #4]
	PWM_Output.Canal_4  = Radio_input.Canal_4;
 8002524:	4b10      	ldr	r3, [pc, #64]	@ (8002568 <Temp_BypassFunct+0x60>)
 8002526:	891a      	ldrh	r2, [r3, #8]
 8002528:	4b10      	ldr	r3, [pc, #64]	@ (800256c <Temp_BypassFunct+0x64>)
 800252a:	80da      	strh	r2, [r3, #6]
	PWM_Output.Canal_5  = Radio_input.Canal_5;
 800252c:	4b0e      	ldr	r3, [pc, #56]	@ (8002568 <Temp_BypassFunct+0x60>)
 800252e:	895a      	ldrh	r2, [r3, #10]
 8002530:	4b0e      	ldr	r3, [pc, #56]	@ (800256c <Temp_BypassFunct+0x64>)
 8002532:	811a      	strh	r2, [r3, #8]
	PWM_Output.Canal_6  = Radio_input.Canal_6;
 8002534:	4b0c      	ldr	r3, [pc, #48]	@ (8002568 <Temp_BypassFunct+0x60>)
 8002536:	899a      	ldrh	r2, [r3, #12]
 8002538:	4b0c      	ldr	r3, [pc, #48]	@ (800256c <Temp_BypassFunct+0x64>)
 800253a:	815a      	strh	r2, [r3, #10]
	PWM_Output.Canal_7  = Radio_input.Canal_7;
 800253c:	4b0a      	ldr	r3, [pc, #40]	@ (8002568 <Temp_BypassFunct+0x60>)
 800253e:	89da      	ldrh	r2, [r3, #14]
 8002540:	4b0a      	ldr	r3, [pc, #40]	@ (800256c <Temp_BypassFunct+0x64>)
 8002542:	819a      	strh	r2, [r3, #12]
	PWM_Output.Canal_8  = Radio_input.Canal_8;
 8002544:	4b08      	ldr	r3, [pc, #32]	@ (8002568 <Temp_BypassFunct+0x60>)
 8002546:	8a1a      	ldrh	r2, [r3, #16]
 8002548:	4b08      	ldr	r3, [pc, #32]	@ (800256c <Temp_BypassFunct+0x64>)
 800254a:	81da      	strh	r2, [r3, #14]
	PWM_Output.Canal_9  = Radio_input.Canal_9;
 800254c:	4b06      	ldr	r3, [pc, #24]	@ (8002568 <Temp_BypassFunct+0x60>)
 800254e:	8a5a      	ldrh	r2, [r3, #18]
 8002550:	4b06      	ldr	r3, [pc, #24]	@ (800256c <Temp_BypassFunct+0x64>)
 8002552:	821a      	strh	r2, [r3, #16]
	PWM_Output.Canal_10 = Radio_input.Canal_10;
 8002554:	4b04      	ldr	r3, [pc, #16]	@ (8002568 <Temp_BypassFunct+0x60>)
 8002556:	8a9a      	ldrh	r2, [r3, #20]
 8002558:	4b04      	ldr	r3, [pc, #16]	@ (800256c <Temp_BypassFunct+0x64>)
 800255a:	825a      	strh	r2, [r3, #18]
}
 800255c:	bf00      	nop
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	24000068 	.word	0x24000068
 800256c:	24000054 	.word	0x24000054

08002570 <SBUS_getData>:

void SBUS_getData(void){
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
	//Se hace el corrimiento de bits para dar la estructura de los 16 canales, donde cada canal esta compuesto por 11 bits
	//pero cada paquete es de 1 byte. Para cada canal se utilizan los 8 bits (O los que correspondan) de el byte 1
	//(O el que corresponda) como los bits menos significativos del canal 1, y los tres bits faltantes se toman los 3 bits
	// menos significativos (O los que correspondan) del byte 2 y se colocan como los 3 bits más significativos del canal 1.
	Radio_input.Canal_1 = ((SBUS_UART_Rx[1] | SBUS_UART_Rx[2] << 8) & 0x07FF);
 8002574:	4b95      	ldr	r3, [pc, #596]	@ (80027cc <SBUS_getData+0x25c>)
 8002576:	785b      	ldrb	r3, [r3, #1]
 8002578:	b21a      	sxth	r2, r3
 800257a:	4b94      	ldr	r3, [pc, #592]	@ (80027cc <SBUS_getData+0x25c>)
 800257c:	789b      	ldrb	r3, [r3, #2]
 800257e:	021b      	lsls	r3, r3, #8
 8002580:	b21b      	sxth	r3, r3
 8002582:	4313      	orrs	r3, r2
 8002584:	b21b      	sxth	r3, r3
 8002586:	b29b      	uxth	r3, r3
 8002588:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800258c:	b29a      	uxth	r2, r3
 800258e:	4b90      	ldr	r3, [pc, #576]	@ (80027d0 <SBUS_getData+0x260>)
 8002590:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_2 = ((SBUS_UART_Rx[2] >> 3 | SBUS_UART_Rx[3] << 5) & 0x07FF);
 8002592:	4b8e      	ldr	r3, [pc, #568]	@ (80027cc <SBUS_getData+0x25c>)
 8002594:	789b      	ldrb	r3, [r3, #2]
 8002596:	08db      	lsrs	r3, r3, #3
 8002598:	b2db      	uxtb	r3, r3
 800259a:	b21a      	sxth	r2, r3
 800259c:	4b8b      	ldr	r3, [pc, #556]	@ (80027cc <SBUS_getData+0x25c>)
 800259e:	78db      	ldrb	r3, [r3, #3]
 80025a0:	015b      	lsls	r3, r3, #5
 80025a2:	b21b      	sxth	r3, r3
 80025a4:	4313      	orrs	r3, r2
 80025a6:	b21b      	sxth	r3, r3
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	4b87      	ldr	r3, [pc, #540]	@ (80027d0 <SBUS_getData+0x260>)
 80025b2:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_3 = ((SBUS_UART_Rx[3] >> 6 | SBUS_UART_Rx[4] << 2 | SBUS_UART_Rx[5] << 10) & 0x07FF);
 80025b4:	4b85      	ldr	r3, [pc, #532]	@ (80027cc <SBUS_getData+0x25c>)
 80025b6:	78db      	ldrb	r3, [r3, #3]
 80025b8:	099b      	lsrs	r3, r3, #6
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	b21a      	sxth	r2, r3
 80025be:	4b83      	ldr	r3, [pc, #524]	@ (80027cc <SBUS_getData+0x25c>)
 80025c0:	791b      	ldrb	r3, [r3, #4]
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	b21b      	sxth	r3, r3
 80025c6:	4313      	orrs	r3, r2
 80025c8:	b21a      	sxth	r2, r3
 80025ca:	4b80      	ldr	r3, [pc, #512]	@ (80027cc <SBUS_getData+0x25c>)
 80025cc:	795b      	ldrb	r3, [r3, #5]
 80025ce:	029b      	lsls	r3, r3, #10
 80025d0:	b21b      	sxth	r3, r3
 80025d2:	4313      	orrs	r3, r2
 80025d4:	b21b      	sxth	r3, r3
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025dc:	b29a      	uxth	r2, r3
 80025de:	4b7c      	ldr	r3, [pc, #496]	@ (80027d0 <SBUS_getData+0x260>)
 80025e0:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_4 = ((SBUS_UART_Rx[5] >> 1 | SBUS_UART_Rx[6] << 7) & 0x07FF);
 80025e2:	4b7a      	ldr	r3, [pc, #488]	@ (80027cc <SBUS_getData+0x25c>)
 80025e4:	795b      	ldrb	r3, [r3, #5]
 80025e6:	085b      	lsrs	r3, r3, #1
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	b21a      	sxth	r2, r3
 80025ec:	4b77      	ldr	r3, [pc, #476]	@ (80027cc <SBUS_getData+0x25c>)
 80025ee:	799b      	ldrb	r3, [r3, #6]
 80025f0:	01db      	lsls	r3, r3, #7
 80025f2:	b21b      	sxth	r3, r3
 80025f4:	4313      	orrs	r3, r2
 80025f6:	b21b      	sxth	r3, r3
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025fe:	b29a      	uxth	r2, r3
 8002600:	4b73      	ldr	r3, [pc, #460]	@ (80027d0 <SBUS_getData+0x260>)
 8002602:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_5 = ((SBUS_UART_Rx[6] >> 4 | SBUS_UART_Rx[7] << 4) & 0x07FF);
 8002604:	4b71      	ldr	r3, [pc, #452]	@ (80027cc <SBUS_getData+0x25c>)
 8002606:	799b      	ldrb	r3, [r3, #6]
 8002608:	091b      	lsrs	r3, r3, #4
 800260a:	b2db      	uxtb	r3, r3
 800260c:	b21a      	sxth	r2, r3
 800260e:	4b6f      	ldr	r3, [pc, #444]	@ (80027cc <SBUS_getData+0x25c>)
 8002610:	79db      	ldrb	r3, [r3, #7]
 8002612:	011b      	lsls	r3, r3, #4
 8002614:	b21b      	sxth	r3, r3
 8002616:	4313      	orrs	r3, r2
 8002618:	b21b      	sxth	r3, r3
 800261a:	b29b      	uxth	r3, r3
 800261c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002620:	b29a      	uxth	r2, r3
 8002622:	4b6b      	ldr	r3, [pc, #428]	@ (80027d0 <SBUS_getData+0x260>)
 8002624:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_6 = ((SBUS_UART_Rx[7] >> 7 | SBUS_UART_Rx[8] << 1 | SBUS_UART_Rx[9] << 9) & 0x07FF);
 8002626:	4b69      	ldr	r3, [pc, #420]	@ (80027cc <SBUS_getData+0x25c>)
 8002628:	79db      	ldrb	r3, [r3, #7]
 800262a:	09db      	lsrs	r3, r3, #7
 800262c:	b2db      	uxtb	r3, r3
 800262e:	b21a      	sxth	r2, r3
 8002630:	4b66      	ldr	r3, [pc, #408]	@ (80027cc <SBUS_getData+0x25c>)
 8002632:	7a1b      	ldrb	r3, [r3, #8]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	b21b      	sxth	r3, r3
 8002638:	4313      	orrs	r3, r2
 800263a:	b21a      	sxth	r2, r3
 800263c:	4b63      	ldr	r3, [pc, #396]	@ (80027cc <SBUS_getData+0x25c>)
 800263e:	7a5b      	ldrb	r3, [r3, #9]
 8002640:	025b      	lsls	r3, r3, #9
 8002642:	b21b      	sxth	r3, r3
 8002644:	4313      	orrs	r3, r2
 8002646:	b21b      	sxth	r3, r3
 8002648:	b29b      	uxth	r3, r3
 800264a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800264e:	b29a      	uxth	r2, r3
 8002650:	4b5f      	ldr	r3, [pc, #380]	@ (80027d0 <SBUS_getData+0x260>)
 8002652:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_7 = ((SBUS_UART_Rx[9] >> 2 | SBUS_UART_Rx[10] << 6) & 0x07FF);
 8002654:	4b5d      	ldr	r3, [pc, #372]	@ (80027cc <SBUS_getData+0x25c>)
 8002656:	7a5b      	ldrb	r3, [r3, #9]
 8002658:	089b      	lsrs	r3, r3, #2
 800265a:	b2db      	uxtb	r3, r3
 800265c:	b21a      	sxth	r2, r3
 800265e:	4b5b      	ldr	r3, [pc, #364]	@ (80027cc <SBUS_getData+0x25c>)
 8002660:	7a9b      	ldrb	r3, [r3, #10]
 8002662:	019b      	lsls	r3, r3, #6
 8002664:	b21b      	sxth	r3, r3
 8002666:	4313      	orrs	r3, r2
 8002668:	b21b      	sxth	r3, r3
 800266a:	b29b      	uxth	r3, r3
 800266c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002670:	b29a      	uxth	r2, r3
 8002672:	4b57      	ldr	r3, [pc, #348]	@ (80027d0 <SBUS_getData+0x260>)
 8002674:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_8 = ((SBUS_UART_Rx[10] >> 5 | SBUS_UART_Rx[11] << 3) & 0x07FF);
 8002676:	4b55      	ldr	r3, [pc, #340]	@ (80027cc <SBUS_getData+0x25c>)
 8002678:	7a9b      	ldrb	r3, [r3, #10]
 800267a:	095b      	lsrs	r3, r3, #5
 800267c:	b2db      	uxtb	r3, r3
 800267e:	b21a      	sxth	r2, r3
 8002680:	4b52      	ldr	r3, [pc, #328]	@ (80027cc <SBUS_getData+0x25c>)
 8002682:	7adb      	ldrb	r3, [r3, #11]
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	b21b      	sxth	r3, r3
 8002688:	4313      	orrs	r3, r2
 800268a:	b21b      	sxth	r3, r3
 800268c:	b29b      	uxth	r3, r3
 800268e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002692:	b29a      	uxth	r2, r3
 8002694:	4b4e      	ldr	r3, [pc, #312]	@ (80027d0 <SBUS_getData+0x260>)
 8002696:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_9 = ((SBUS_UART_Rx[12] | SBUS_UART_Rx[13] << 8) & 0x07FF);
 8002698:	4b4c      	ldr	r3, [pc, #304]	@ (80027cc <SBUS_getData+0x25c>)
 800269a:	7b1b      	ldrb	r3, [r3, #12]
 800269c:	b21a      	sxth	r2, r3
 800269e:	4b4b      	ldr	r3, [pc, #300]	@ (80027cc <SBUS_getData+0x25c>)
 80026a0:	7b5b      	ldrb	r3, [r3, #13]
 80026a2:	021b      	lsls	r3, r3, #8
 80026a4:	b21b      	sxth	r3, r3
 80026a6:	4313      	orrs	r3, r2
 80026a8:	b21b      	sxth	r3, r3
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	4b47      	ldr	r3, [pc, #284]	@ (80027d0 <SBUS_getData+0x260>)
 80026b4:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_10 = ((SBUS_UART_Rx[13] >> 3 | SBUS_UART_Rx[14] << 5) & 0x07FF);
 80026b6:	4b45      	ldr	r3, [pc, #276]	@ (80027cc <SBUS_getData+0x25c>)
 80026b8:	7b5b      	ldrb	r3, [r3, #13]
 80026ba:	08db      	lsrs	r3, r3, #3
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	b21a      	sxth	r2, r3
 80026c0:	4b42      	ldr	r3, [pc, #264]	@ (80027cc <SBUS_getData+0x25c>)
 80026c2:	7b9b      	ldrb	r3, [r3, #14]
 80026c4:	015b      	lsls	r3, r3, #5
 80026c6:	b21b      	sxth	r3, r3
 80026c8:	4313      	orrs	r3, r2
 80026ca:	b21b      	sxth	r3, r3
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	4b3e      	ldr	r3, [pc, #248]	@ (80027d0 <SBUS_getData+0x260>)
 80026d6:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_11 = ((SBUS_UART_Rx[14] >> 6 | SBUS_UART_Rx[15] << 2 | SBUS_UART_Rx[16] << 10) & 0x07FF);
 80026d8:	4b3c      	ldr	r3, [pc, #240]	@ (80027cc <SBUS_getData+0x25c>)
 80026da:	7b9b      	ldrb	r3, [r3, #14]
 80026dc:	099b      	lsrs	r3, r3, #6
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	b21a      	sxth	r2, r3
 80026e2:	4b3a      	ldr	r3, [pc, #232]	@ (80027cc <SBUS_getData+0x25c>)
 80026e4:	7bdb      	ldrb	r3, [r3, #15]
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	b21b      	sxth	r3, r3
 80026ea:	4313      	orrs	r3, r2
 80026ec:	b21a      	sxth	r2, r3
 80026ee:	4b37      	ldr	r3, [pc, #220]	@ (80027cc <SBUS_getData+0x25c>)
 80026f0:	7c1b      	ldrb	r3, [r3, #16]
 80026f2:	029b      	lsls	r3, r3, #10
 80026f4:	b21b      	sxth	r3, r3
 80026f6:	4313      	orrs	r3, r2
 80026f8:	b21b      	sxth	r3, r3
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002700:	b29a      	uxth	r2, r3
 8002702:	4b33      	ldr	r3, [pc, #204]	@ (80027d0 <SBUS_getData+0x260>)
 8002704:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_12 = ((SBUS_UART_Rx[16] >> 1 | SBUS_UART_Rx[17] << 7) & 0x07FF);
 8002706:	4b31      	ldr	r3, [pc, #196]	@ (80027cc <SBUS_getData+0x25c>)
 8002708:	7c1b      	ldrb	r3, [r3, #16]
 800270a:	085b      	lsrs	r3, r3, #1
 800270c:	b2db      	uxtb	r3, r3
 800270e:	b21a      	sxth	r2, r3
 8002710:	4b2e      	ldr	r3, [pc, #184]	@ (80027cc <SBUS_getData+0x25c>)
 8002712:	7c5b      	ldrb	r3, [r3, #17]
 8002714:	01db      	lsls	r3, r3, #7
 8002716:	b21b      	sxth	r3, r3
 8002718:	4313      	orrs	r3, r2
 800271a:	b21b      	sxth	r3, r3
 800271c:	b29b      	uxth	r3, r3
 800271e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002722:	b29a      	uxth	r2, r3
 8002724:	4b2a      	ldr	r3, [pc, #168]	@ (80027d0 <SBUS_getData+0x260>)
 8002726:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_13 = ((SBUS_UART_Rx[17] >> 4 | SBUS_UART_Rx[18] << 4) & 0x07FF);
 8002728:	4b28      	ldr	r3, [pc, #160]	@ (80027cc <SBUS_getData+0x25c>)
 800272a:	7c5b      	ldrb	r3, [r3, #17]
 800272c:	091b      	lsrs	r3, r3, #4
 800272e:	b2db      	uxtb	r3, r3
 8002730:	b21a      	sxth	r2, r3
 8002732:	4b26      	ldr	r3, [pc, #152]	@ (80027cc <SBUS_getData+0x25c>)
 8002734:	7c9b      	ldrb	r3, [r3, #18]
 8002736:	011b      	lsls	r3, r3, #4
 8002738:	b21b      	sxth	r3, r3
 800273a:	4313      	orrs	r3, r2
 800273c:	b21b      	sxth	r3, r3
 800273e:	b29b      	uxth	r3, r3
 8002740:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002744:	b29a      	uxth	r2, r3
 8002746:	4b22      	ldr	r3, [pc, #136]	@ (80027d0 <SBUS_getData+0x260>)
 8002748:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_14 = ((SBUS_UART_Rx[18] >> 7 | SBUS_UART_Rx[19] << 1 | SBUS_UART_Rx[20] << 9) & 0x07FF);
 800274a:	4b20      	ldr	r3, [pc, #128]	@ (80027cc <SBUS_getData+0x25c>)
 800274c:	7c9b      	ldrb	r3, [r3, #18]
 800274e:	09db      	lsrs	r3, r3, #7
 8002750:	b2db      	uxtb	r3, r3
 8002752:	b21a      	sxth	r2, r3
 8002754:	4b1d      	ldr	r3, [pc, #116]	@ (80027cc <SBUS_getData+0x25c>)
 8002756:	7cdb      	ldrb	r3, [r3, #19]
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	b21b      	sxth	r3, r3
 800275c:	4313      	orrs	r3, r2
 800275e:	b21a      	sxth	r2, r3
 8002760:	4b1a      	ldr	r3, [pc, #104]	@ (80027cc <SBUS_getData+0x25c>)
 8002762:	7d1b      	ldrb	r3, [r3, #20]
 8002764:	025b      	lsls	r3, r3, #9
 8002766:	b21b      	sxth	r3, r3
 8002768:	4313      	orrs	r3, r2
 800276a:	b21b      	sxth	r3, r3
 800276c:	b29b      	uxth	r3, r3
 800276e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002772:	b29a      	uxth	r2, r3
 8002774:	4b16      	ldr	r3, [pc, #88]	@ (80027d0 <SBUS_getData+0x260>)
 8002776:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_15 = ((SBUS_UART_Rx[20] >> 2 | SBUS_UART_Rx[21] << 6) & 0x07FF);
 8002778:	4b14      	ldr	r3, [pc, #80]	@ (80027cc <SBUS_getData+0x25c>)
 800277a:	7d1b      	ldrb	r3, [r3, #20]
 800277c:	089b      	lsrs	r3, r3, #2
 800277e:	b2db      	uxtb	r3, r3
 8002780:	b21a      	sxth	r2, r3
 8002782:	4b12      	ldr	r3, [pc, #72]	@ (80027cc <SBUS_getData+0x25c>)
 8002784:	7d5b      	ldrb	r3, [r3, #21]
 8002786:	019b      	lsls	r3, r3, #6
 8002788:	b21b      	sxth	r3, r3
 800278a:	4313      	orrs	r3, r2
 800278c:	b21b      	sxth	r3, r3
 800278e:	b29b      	uxth	r3, r3
 8002790:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002794:	b29a      	uxth	r2, r3
 8002796:	4b0e      	ldr	r3, [pc, #56]	@ (80027d0 <SBUS_getData+0x260>)
 8002798:	83da      	strh	r2, [r3, #30]
	Radio_input.Canal_16 = ((SBUS_UART_Rx[21] >> 5 | SBUS_UART_Rx[22] << 3) & 0x07FF);
 800279a:	4b0c      	ldr	r3, [pc, #48]	@ (80027cc <SBUS_getData+0x25c>)
 800279c:	7d5b      	ldrb	r3, [r3, #21]
 800279e:	095b      	lsrs	r3, r3, #5
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	b21a      	sxth	r2, r3
 80027a4:	4b09      	ldr	r3, [pc, #36]	@ (80027cc <SBUS_getData+0x25c>)
 80027a6:	7d9b      	ldrb	r3, [r3, #22]
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	b21b      	sxth	r3, r3
 80027ac:	4313      	orrs	r3, r2
 80027ae:	b21b      	sxth	r3, r3
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	4b05      	ldr	r3, [pc, #20]	@ (80027d0 <SBUS_getData+0x260>)
 80027ba:	841a      	strh	r2, [r3, #32]

	Radio_input.Canal_1 = (uint16_t)((((float)Radio_input.Canal_1 - 352) /1344 ) * 1000) + 1000;
 80027bc:	4b04      	ldr	r3, [pc, #16]	@ (80027d0 <SBUS_getData+0x260>)
 80027be:	885b      	ldrh	r3, [r3, #2]
 80027c0:	ee07 3a90 	vmov	s15, r3
 80027c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027c8:	e00a      	b.n	80027e0 <SBUS_getData+0x270>
 80027ca:	bf00      	nop
 80027cc:	240005b8 	.word	0x240005b8
 80027d0:	24000068 	.word	0x24000068
 80027d4:	43b00000 	.word	0x43b00000
 80027d8:	44a80000 	.word	0x44a80000
 80027dc:	447a0000 	.word	0x447a0000
 80027e0:	ed1f 7a04 	vldr	s14, [pc, #-16]	@ 80027d4 <SBUS_getData+0x264>
 80027e4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80027e8:	ed5f 6a05 	vldr	s13, [pc, #-20]	@ 80027d8 <SBUS_getData+0x268>
 80027ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027f0:	ed1f 7a06 	vldr	s14, [pc, #-24]	@ 80027dc <SBUS_getData+0x26c>
 80027f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027fc:	ee17 3a90 	vmov	r3, s15
 8002800:	b29b      	uxth	r3, r3
 8002802:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002806:	b29a      	uxth	r2, r3
 8002808:	4bd1      	ldr	r3, [pc, #836]	@ (8002b50 <SBUS_getData+0x5e0>)
 800280a:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_2 = (uint16_t)((((float)Radio_input.Canal_2 - 352) /1344 ) * 1000) + 1000;
 800280c:	4bd0      	ldr	r3, [pc, #832]	@ (8002b50 <SBUS_getData+0x5e0>)
 800280e:	889b      	ldrh	r3, [r3, #4]
 8002810:	ee07 3a90 	vmov	s15, r3
 8002814:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002818:	ed9f 7ace 	vldr	s14, [pc, #824]	@ 8002b54 <SBUS_getData+0x5e4>
 800281c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002820:	eddf 6acd 	vldr	s13, [pc, #820]	@ 8002b58 <SBUS_getData+0x5e8>
 8002824:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002828:	ed9f 7acc 	vldr	s14, [pc, #816]	@ 8002b5c <SBUS_getData+0x5ec>
 800282c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002830:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002834:	ee17 3a90 	vmov	r3, s15
 8002838:	b29b      	uxth	r3, r3
 800283a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800283e:	b29a      	uxth	r2, r3
 8002840:	4bc3      	ldr	r3, [pc, #780]	@ (8002b50 <SBUS_getData+0x5e0>)
 8002842:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_3 = (uint16_t)((((float)Radio_input.Canal_3 - 352) /1344 ) * 1000) + 1000;
 8002844:	4bc2      	ldr	r3, [pc, #776]	@ (8002b50 <SBUS_getData+0x5e0>)
 8002846:	88db      	ldrh	r3, [r3, #6]
 8002848:	ee07 3a90 	vmov	s15, r3
 800284c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002850:	ed9f 7ac0 	vldr	s14, [pc, #768]	@ 8002b54 <SBUS_getData+0x5e4>
 8002854:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002858:	eddf 6abf 	vldr	s13, [pc, #764]	@ 8002b58 <SBUS_getData+0x5e8>
 800285c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002860:	ed9f 7abe 	vldr	s14, [pc, #760]	@ 8002b5c <SBUS_getData+0x5ec>
 8002864:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002868:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800286c:	ee17 3a90 	vmov	r3, s15
 8002870:	b29b      	uxth	r3, r3
 8002872:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002876:	b29a      	uxth	r2, r3
 8002878:	4bb5      	ldr	r3, [pc, #724]	@ (8002b50 <SBUS_getData+0x5e0>)
 800287a:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_4 = (uint16_t)((((float)Radio_input.Canal_4 - 352) /1344 ) * 1000) + 1000;
 800287c:	4bb4      	ldr	r3, [pc, #720]	@ (8002b50 <SBUS_getData+0x5e0>)
 800287e:	891b      	ldrh	r3, [r3, #8]
 8002880:	ee07 3a90 	vmov	s15, r3
 8002884:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002888:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 8002b54 <SBUS_getData+0x5e4>
 800288c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002890:	eddf 6ab1 	vldr	s13, [pc, #708]	@ 8002b58 <SBUS_getData+0x5e8>
 8002894:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002898:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8002b5c <SBUS_getData+0x5ec>
 800289c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028a4:	ee17 3a90 	vmov	r3, s15
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	4ba7      	ldr	r3, [pc, #668]	@ (8002b50 <SBUS_getData+0x5e0>)
 80028b2:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_5 = (uint16_t)((((float)Radio_input.Canal_5 - 352) /1344 ) * 1000) + 1000;
 80028b4:	4ba6      	ldr	r3, [pc, #664]	@ (8002b50 <SBUS_getData+0x5e0>)
 80028b6:	895b      	ldrh	r3, [r3, #10]
 80028b8:	ee07 3a90 	vmov	s15, r3
 80028bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028c0:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 8002b54 <SBUS_getData+0x5e4>
 80028c4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80028c8:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8002b58 <SBUS_getData+0x5e8>
 80028cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028d0:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8002b5c <SBUS_getData+0x5ec>
 80028d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028dc:	ee17 3a90 	vmov	r3, s15
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	4b99      	ldr	r3, [pc, #612]	@ (8002b50 <SBUS_getData+0x5e0>)
 80028ea:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_6 = (uint16_t)((((float)Radio_input.Canal_6 - 352) /1344 ) * 1000) + 1000;
 80028ec:	4b98      	ldr	r3, [pc, #608]	@ (8002b50 <SBUS_getData+0x5e0>)
 80028ee:	899b      	ldrh	r3, [r3, #12]
 80028f0:	ee07 3a90 	vmov	s15, r3
 80028f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028f8:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8002b54 <SBUS_getData+0x5e4>
 80028fc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002900:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8002b58 <SBUS_getData+0x5e8>
 8002904:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002908:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8002b5c <SBUS_getData+0x5ec>
 800290c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002910:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002914:	ee17 3a90 	vmov	r3, s15
 8002918:	b29b      	uxth	r3, r3
 800291a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800291e:	b29a      	uxth	r2, r3
 8002920:	4b8b      	ldr	r3, [pc, #556]	@ (8002b50 <SBUS_getData+0x5e0>)
 8002922:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_7 = (uint16_t)((((float)Radio_input.Canal_7 - 352) /1344 ) * 1000) + 1000;
 8002924:	4b8a      	ldr	r3, [pc, #552]	@ (8002b50 <SBUS_getData+0x5e0>)
 8002926:	89db      	ldrh	r3, [r3, #14]
 8002928:	ee07 3a90 	vmov	s15, r3
 800292c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002930:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8002b54 <SBUS_getData+0x5e4>
 8002934:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002938:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8002b58 <SBUS_getData+0x5e8>
 800293c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002940:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002b5c <SBUS_getData+0x5ec>
 8002944:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002948:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800294c:	ee17 3a90 	vmov	r3, s15
 8002950:	b29b      	uxth	r3, r3
 8002952:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002956:	b29a      	uxth	r2, r3
 8002958:	4b7d      	ldr	r3, [pc, #500]	@ (8002b50 <SBUS_getData+0x5e0>)
 800295a:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_8 = (uint16_t)((((float)Radio_input.Canal_8 - 352) /1344 ) * 1000) + 1000;
 800295c:	4b7c      	ldr	r3, [pc, #496]	@ (8002b50 <SBUS_getData+0x5e0>)
 800295e:	8a1b      	ldrh	r3, [r3, #16]
 8002960:	ee07 3a90 	vmov	s15, r3
 8002964:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002968:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8002b54 <SBUS_getData+0x5e4>
 800296c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002970:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8002b58 <SBUS_getData+0x5e8>
 8002974:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002978:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8002b5c <SBUS_getData+0x5ec>
 800297c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002980:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002984:	ee17 3a90 	vmov	r3, s15
 8002988:	b29b      	uxth	r3, r3
 800298a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800298e:	b29a      	uxth	r2, r3
 8002990:	4b6f      	ldr	r3, [pc, #444]	@ (8002b50 <SBUS_getData+0x5e0>)
 8002992:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_9 = (uint16_t)((((float)Radio_input.Canal_9 - 352) /1344 ) * 1000) + 1000;
 8002994:	4b6e      	ldr	r3, [pc, #440]	@ (8002b50 <SBUS_getData+0x5e0>)
 8002996:	8a5b      	ldrh	r3, [r3, #18]
 8002998:	ee07 3a90 	vmov	s15, r3
 800299c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029a0:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8002b54 <SBUS_getData+0x5e4>
 80029a4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80029a8:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8002b58 <SBUS_getData+0x5e8>
 80029ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029b0:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8002b5c <SBUS_getData+0x5ec>
 80029b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029bc:	ee17 3a90 	vmov	r3, s15
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	4b61      	ldr	r3, [pc, #388]	@ (8002b50 <SBUS_getData+0x5e0>)
 80029ca:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_10 = (uint16_t)((((float)Radio_input.Canal_10 - 352) /1344 ) * 1000) + 1000;
 80029cc:	4b60      	ldr	r3, [pc, #384]	@ (8002b50 <SBUS_getData+0x5e0>)
 80029ce:	8a9b      	ldrh	r3, [r3, #20]
 80029d0:	ee07 3a90 	vmov	s15, r3
 80029d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029d8:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8002b54 <SBUS_getData+0x5e4>
 80029dc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80029e0:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8002b58 <SBUS_getData+0x5e8>
 80029e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029e8:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8002b5c <SBUS_getData+0x5ec>
 80029ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029f4:	ee17 3a90 	vmov	r3, s15
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	4b53      	ldr	r3, [pc, #332]	@ (8002b50 <SBUS_getData+0x5e0>)
 8002a02:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_11 = (uint16_t)((((float)Radio_input.Canal_11 - 352) /1344 ) * 1000) + 1000;
 8002a04:	4b52      	ldr	r3, [pc, #328]	@ (8002b50 <SBUS_getData+0x5e0>)
 8002a06:	8adb      	ldrh	r3, [r3, #22]
 8002a08:	ee07 3a90 	vmov	s15, r3
 8002a0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a10:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8002b54 <SBUS_getData+0x5e4>
 8002a14:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002a18:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002b58 <SBUS_getData+0x5e8>
 8002a1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a20:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8002b5c <SBUS_getData+0x5ec>
 8002a24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a2c:	ee17 3a90 	vmov	r3, s15
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	4b45      	ldr	r3, [pc, #276]	@ (8002b50 <SBUS_getData+0x5e0>)
 8002a3a:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_12 = (uint16_t)((((float)Radio_input.Canal_12 - 352) /1344 ) * 1000) + 1000;
 8002a3c:	4b44      	ldr	r3, [pc, #272]	@ (8002b50 <SBUS_getData+0x5e0>)
 8002a3e:	8b1b      	ldrh	r3, [r3, #24]
 8002a40:	ee07 3a90 	vmov	s15, r3
 8002a44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a48:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8002b54 <SBUS_getData+0x5e4>
 8002a4c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002a50:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8002b58 <SBUS_getData+0x5e8>
 8002a54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a58:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8002b5c <SBUS_getData+0x5ec>
 8002a5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a64:	ee17 3a90 	vmov	r3, s15
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	4b37      	ldr	r3, [pc, #220]	@ (8002b50 <SBUS_getData+0x5e0>)
 8002a72:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_13 = (uint16_t)((((float)Radio_input.Canal_13 - 352) /1344 ) * 1000) + 1000;
 8002a74:	4b36      	ldr	r3, [pc, #216]	@ (8002b50 <SBUS_getData+0x5e0>)
 8002a76:	8b5b      	ldrh	r3, [r3, #26]
 8002a78:	ee07 3a90 	vmov	s15, r3
 8002a7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a80:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8002b54 <SBUS_getData+0x5e4>
 8002a84:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002a88:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8002b58 <SBUS_getData+0x5e8>
 8002a8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a90:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002b5c <SBUS_getData+0x5ec>
 8002a94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a9c:	ee17 3a90 	vmov	r3, s15
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	4b29      	ldr	r3, [pc, #164]	@ (8002b50 <SBUS_getData+0x5e0>)
 8002aaa:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_14 = (uint16_t)((((float)Radio_input.Canal_14 - 352) /1344 ) * 1000) + 1000;
 8002aac:	4b28      	ldr	r3, [pc, #160]	@ (8002b50 <SBUS_getData+0x5e0>)
 8002aae:	8b9b      	ldrh	r3, [r3, #28]
 8002ab0:	ee07 3a90 	vmov	s15, r3
 8002ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ab8:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8002b54 <SBUS_getData+0x5e4>
 8002abc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002ac0:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8002b58 <SBUS_getData+0x5e8>
 8002ac4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ac8:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8002b5c <SBUS_getData+0x5ec>
 8002acc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ad0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ad4:	ee17 3a90 	vmov	r3, s15
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b50 <SBUS_getData+0x5e0>)
 8002ae2:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_15 = (uint16_t)((((float)Radio_input.Canal_15 - 352) /1344 ) * 1000) + 1000;
 8002ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8002b50 <SBUS_getData+0x5e0>)
 8002ae6:	8bdb      	ldrh	r3, [r3, #30]
 8002ae8:	ee07 3a90 	vmov	s15, r3
 8002aec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002af0:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8002b54 <SBUS_getData+0x5e4>
 8002af4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002af8:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8002b58 <SBUS_getData+0x5e8>
 8002afc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b00:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8002b5c <SBUS_getData+0x5ec>
 8002b04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b0c:	ee17 3a90 	vmov	r3, s15
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	4b0d      	ldr	r3, [pc, #52]	@ (8002b50 <SBUS_getData+0x5e0>)
 8002b1a:	83da      	strh	r2, [r3, #30]
	Radio_input.Canal_16 = (uint16_t)((((float)Radio_input.Canal_16 - 352) /1344 ) * 1000) + 1000;
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b50 <SBUS_getData+0x5e0>)
 8002b1e:	8c1b      	ldrh	r3, [r3, #32]
 8002b20:	ee07 3a90 	vmov	s15, r3
 8002b24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b28:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8002b54 <SBUS_getData+0x5e4>
 8002b2c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002b30:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8002b58 <SBUS_getData+0x5e8>
 8002b34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b38:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002b5c <SBUS_getData+0x5ec>
 8002b3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b44:	ee17 3a90 	vmov	r3, s15
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002b4e:	e007      	b.n	8002b60 <SBUS_getData+0x5f0>
 8002b50:	24000068 	.word	0x24000068
 8002b54:	43b00000 	.word	0x43b00000
 8002b58:	44a80000 	.word	0x44a80000
 8002b5c:	447a0000 	.word	0x447a0000
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	4b2a      	ldr	r3, [pc, #168]	@ (8002c0c <SBUS_getData+0x69c>)
 8002b64:	841a      	strh	r2, [r3, #32]

	//En el caso del byte 24, el primer bit menos significativo corresponde al canal 17, el segundo al canal 18, el tercero a el fail safe y
	//el cuarto a la perdida de paquetes. Los 4 restantes no se utilizan.

	Radio_input.Banderas = SBUS_UART_Rx[23];
 8002b66:	4b2a      	ldr	r3, [pc, #168]	@ (8002c10 <SBUS_getData+0x6a0>)
 8002b68:	7dda      	ldrb	r2, [r3, #23]
 8002b6a:	4b28      	ldr	r3, [pc, #160]	@ (8002c0c <SBUS_getData+0x69c>)
 8002b6c:	701a      	strb	r2, [r3, #0]
	if(SBUS_UART_Rx[23]>=8){
 8002b6e:	4b28      	ldr	r3, [pc, #160]	@ (8002c10 <SBUS_getData+0x6a0>)
 8002b70:	7ddb      	ldrb	r3, [r3, #23]
 8002b72:	2b07      	cmp	r3, #7
 8002b74:	d90a      	bls.n	8002b8c <SBUS_getData+0x61c>
		SBUS_UART_Rx[23]-=8;
 8002b76:	4b26      	ldr	r3, [pc, #152]	@ (8002c10 <SBUS_getData+0x6a0>)
 8002b78:	7ddb      	ldrb	r3, [r3, #23]
 8002b7a:	3b08      	subs	r3, #8
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	4b24      	ldr	r3, [pc, #144]	@ (8002c10 <SBUS_getData+0x6a0>)
 8002b80:	75da      	strb	r2, [r3, #23]
		Radio_input.fail_safe = FailSafe;
 8002b82:	4b22      	ldr	r3, [pc, #136]	@ (8002c0c <SBUS_getData+0x69c>)
 8002b84:	2235      	movs	r2, #53	@ 0x35
 8002b86:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 8002b8a:	e003      	b.n	8002b94 <SBUS_getData+0x624>
	}else Radio_input.fail_safe= Ok;
 8002b8c:	4b1f      	ldr	r3, [pc, #124]	@ (8002c0c <SBUS_getData+0x69c>)
 8002b8e:	22aa      	movs	r2, #170	@ 0xaa
 8002b90:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

	if(SBUS_UART_Rx[23]>=4){
 8002b94:	4b1e      	ldr	r3, [pc, #120]	@ (8002c10 <SBUS_getData+0x6a0>)
 8002b96:	7ddb      	ldrb	r3, [r3, #23]
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	d90a      	bls.n	8002bb2 <SBUS_getData+0x642>
		SBUS_UART_Rx[23]-=4;
 8002b9c:	4b1c      	ldr	r3, [pc, #112]	@ (8002c10 <SBUS_getData+0x6a0>)
 8002b9e:	7ddb      	ldrb	r3, [r3, #23]
 8002ba0:	3b04      	subs	r3, #4
 8002ba2:	b2da      	uxtb	r2, r3
 8002ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8002c10 <SBUS_getData+0x6a0>)
 8002ba6:	75da      	strb	r2, [r3, #23]
		Radio_input.pkg_lost = Pkg_Lost;
 8002ba8:	4b18      	ldr	r3, [pc, #96]	@ (8002c0c <SBUS_getData+0x69c>)
 8002baa:	2210      	movs	r2, #16
 8002bac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002bb0:	e003      	b.n	8002bba <SBUS_getData+0x64a>
	}else Radio_input.pkg_lost=Ok;
 8002bb2:	4b16      	ldr	r3, [pc, #88]	@ (8002c0c <SBUS_getData+0x69c>)
 8002bb4:	22aa      	movs	r2, #170	@ 0xaa
 8002bb6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if(SBUS_UART_Rx[23]>=2){
 8002bba:	4b15      	ldr	r3, [pc, #84]	@ (8002c10 <SBUS_getData+0x6a0>)
 8002bbc:	7ddb      	ldrb	r3, [r3, #23]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d90a      	bls.n	8002bd8 <SBUS_getData+0x668>
		SBUS_UART_Rx[23]-=2;
 8002bc2:	4b13      	ldr	r3, [pc, #76]	@ (8002c10 <SBUS_getData+0x6a0>)
 8002bc4:	7ddb      	ldrb	r3, [r3, #23]
 8002bc6:	3b02      	subs	r3, #2
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	4b11      	ldr	r3, [pc, #68]	@ (8002c10 <SBUS_getData+0x6a0>)
 8002bcc:	75da      	strb	r2, [r3, #23]
		Radio_input.Interruptor_2=ON;
 8002bce:	4b0f      	ldr	r3, [pc, #60]	@ (8002c0c <SBUS_getData+0x69c>)
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 8002bd6:	e003      	b.n	8002be0 <SBUS_getData+0x670>
	}else Radio_input.Interruptor_2=OFF;
 8002bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8002c0c <SBUS_getData+0x69c>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

	if(SBUS_UART_Rx[23]){
 8002be0:	4b0b      	ldr	r3, [pc, #44]	@ (8002c10 <SBUS_getData+0x6a0>)
 8002be2:	7ddb      	ldrb	r3, [r3, #23]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d004      	beq.n	8002bf2 <SBUS_getData+0x682>
		Radio_input.Interruptor_1=ON;
 8002be8:	4b08      	ldr	r3, [pc, #32]	@ (8002c0c <SBUS_getData+0x69c>)
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8002bf0:	e003      	b.n	8002bfa <SBUS_getData+0x68a>
	}else Radio_input.Interruptor_1=OFF;
 8002bf2:	4b06      	ldr	r3, [pc, #24]	@ (8002c0c <SBUS_getData+0x69c>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22


	Radio_input.Uart_Counter = 0;
 8002bfa:	4b04      	ldr	r3, [pc, #16]	@ (8002c0c <SBUS_getData+0x69c>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	Temp_BypassFunct();
 8002c02:	f7ff fc81 	bl	8002508 <Temp_BypassFunct>

}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	24000068 	.word	0x24000068
 8002c10:	240005b8 	.word	0x240005b8

08002c14 <SBUS_IntegrityVerification>:

void SBUS_IntegrityVerification(void){
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0

	if(Radio_input.Uart_Counter != 255){
 8002c18:	4b0f      	ldr	r3, [pc, #60]	@ (8002c58 <SBUS_IntegrityVerification+0x44>)
 8002c1a:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8002c1e:	2bff      	cmp	r3, #255	@ 0xff
 8002c20:	d00c      	beq.n	8002c3c <SBUS_IntegrityVerification+0x28>
		Radio_input.Uart_Counter++;
 8002c22:	4b0d      	ldr	r3, [pc, #52]	@ (8002c58 <SBUS_IntegrityVerification+0x44>)
 8002c24:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8002c28:	3301      	adds	r3, #1
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c58 <SBUS_IntegrityVerification+0x44>)
 8002c2e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		Radio_input.uart_error = Ok;
 8002c32:	4b09      	ldr	r3, [pc, #36]	@ (8002c58 <SBUS_IntegrityVerification+0x44>)
 8002c34:	22aa      	movs	r2, #170	@ 0xaa
 8002c36:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	}
	else{
		Radio_input.uart_error = Uart_Error;
		Radio_input.fail_safe = FailSafe;
	}
}
 8002c3a:	e007      	b.n	8002c4c <SBUS_IntegrityVerification+0x38>
		Radio_input.uart_error = Uart_Error;
 8002c3c:	4b06      	ldr	r3, [pc, #24]	@ (8002c58 <SBUS_IntegrityVerification+0x44>)
 8002c3e:	2220      	movs	r2, #32
 8002c40:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		Radio_input.fail_safe = FailSafe;
 8002c44:	4b04      	ldr	r3, [pc, #16]	@ (8002c58 <SBUS_IntegrityVerification+0x44>)
 8002c46:	2235      	movs	r2, #53	@ 0x35
 8002c48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 8002c4c:	bf00      	nop
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	24000068 	.word	0x24000068

08002c5c <ASCII2uint8>:

char BlackBoxBuffer[16][255];

blackbox_data_t blackbox_data;

uint8_t ASCII2uint8(char *buffer, uint8_t Size){
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	460b      	mov	r3, r1
 8002c66:	70fb      	strb	r3, [r7, #3]
	uint8_t inter = 0;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	73fb      	strb	r3, [r7, #15]

	for (uint8_t n = 0; n < Size; ++n) {
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	73bb      	strb	r3, [r7, #14]
 8002c70:	e011      	b.n	8002c96 <ASCII2uint8+0x3a>
		inter *= 10;
 8002c72:	7bfb      	ldrb	r3, [r7, #15]
 8002c74:	461a      	mov	r2, r3
 8002c76:	0092      	lsls	r2, r2, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	73fb      	strb	r3, [r7, #15]

		inter += (buffer[n] - 48);
 8002c7e:	7bbb      	ldrb	r3, [r7, #14]
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	4413      	add	r3, r2
 8002c84:	781a      	ldrb	r2, [r3, #0]
 8002c86:	7bfb      	ldrb	r3, [r7, #15]
 8002c88:	4413      	add	r3, r2
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	3b30      	subs	r3, #48	@ 0x30
 8002c8e:	73fb      	strb	r3, [r7, #15]
	for (uint8_t n = 0; n < Size; ++n) {
 8002c90:	7bbb      	ldrb	r3, [r7, #14]
 8002c92:	3301      	adds	r3, #1
 8002c94:	73bb      	strb	r3, [r7, #14]
 8002c96:	7bba      	ldrb	r2, [r7, #14]
 8002c98:	78fb      	ldrb	r3, [r7, #3]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d3e9      	bcc.n	8002c72 <ASCII2uint8+0x16>
	}
	return inter;
 8002c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <uint82ASCII>:

void uint82ASCII(uint8_t Inter, char *Output){
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	6039      	str	r1, [r7, #0]
 8002cb6:	71fb      	strb	r3, [r7, #7]
	Output[0] = Inter/100;
 8002cb8:	79fb      	ldrb	r3, [r7, #7]
 8002cba:	4a27      	ldr	r2, [pc, #156]	@ (8002d58 <uint82ASCII+0xac>)
 8002cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc0:	095b      	lsrs	r3, r3, #5
 8002cc2:	b2da      	uxtb	r2, r3
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	701a      	strb	r2, [r3, #0]
	Output[1] = (Inter - Output[0]*100) /10;
 8002cc8:	79fa      	ldrb	r2, [r7, #7]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	4619      	mov	r1, r3
 8002cd0:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8002cd4:	fb01 f303 	mul.w	r3, r1, r3
 8002cd8:	4413      	add	r3, r2
 8002cda:	4a20      	ldr	r2, [pc, #128]	@ (8002d5c <uint82ASCII+0xb0>)
 8002cdc:	fb82 1203 	smull	r1, r2, r2, r3
 8002ce0:	1092      	asrs	r2, r2, #2
 8002ce2:	17db      	asrs	r3, r3, #31
 8002ce4:	1ad2      	subs	r2, r2, r3
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	701a      	strb	r2, [r3, #0]
	Output[2] = (Inter - Output[0]*100 - Output[1]*10) ;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	0092      	lsls	r2, r2, #2
 8002cf6:	441a      	add	r2, r3
 8002cf8:	00d2      	lsls	r2, r2, #3
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	b2da      	uxtb	r2, r3
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	3301      	adds	r3, #1
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	4619      	mov	r1, r3
 8002d08:	0149      	lsls	r1, r1, #5
 8002d0a:	1ac9      	subs	r1, r1, r3
 8002d0c:	0089      	lsls	r1, r1, #2
 8002d0e:	1acb      	subs	r3, r1, r3
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	4413      	add	r3, r2
 8002d16:	b2d9      	uxtb	r1, r3
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	3302      	adds	r3, #2
 8002d1c:	79fa      	ldrb	r2, [r7, #7]
 8002d1e:	440a      	add	r2, r1
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	701a      	strb	r2, [r3, #0]

	for (uint8_t n = 0; n < 3; ++n) {
 8002d24:	2300      	movs	r3, #0
 8002d26:	73fb      	strb	r3, [r7, #15]
 8002d28:	e00c      	b.n	8002d44 <uint82ASCII+0x98>
		Output[n] +=48;
 8002d2a:	7bfb      	ldrb	r3, [r7, #15]
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	4413      	add	r3, r2
 8002d30:	781a      	ldrb	r2, [r3, #0]
 8002d32:	7bfb      	ldrb	r3, [r7, #15]
 8002d34:	6839      	ldr	r1, [r7, #0]
 8002d36:	440b      	add	r3, r1
 8002d38:	3230      	adds	r2, #48	@ 0x30
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	701a      	strb	r2, [r3, #0]
	for (uint8_t n = 0; n < 3; ++n) {
 8002d3e:	7bfb      	ldrb	r3, [r7, #15]
 8002d40:	3301      	adds	r3, #1
 8002d42:	73fb      	strb	r3, [r7, #15]
 8002d44:	7bfb      	ldrb	r3, [r7, #15]
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d9ef      	bls.n	8002d2a <uint82ASCII+0x7e>
	}
}
 8002d4a:	bf00      	nop
 8002d4c:	bf00      	nop
 8002d4e:	3714      	adds	r7, #20
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	51eb851f 	.word	0x51eb851f
 8002d5c:	66666667 	.word	0x66666667

08002d60 <ConfigFile_Create>:
		Output[n] +=48;
		Scaler /= 10;
	}
}

void ConfigFile_Create(void){
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0

	f_unlink(ConfigFile);
 8002d64:	480c      	ldr	r0, [pc, #48]	@ (8002d98 <ConfigFile_Create+0x38>)
 8002d66:	f013 f96c 	bl	8016042 <f_unlink>

	f_open(&Config, ConfigFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8002d6a:	2213      	movs	r2, #19
 8002d6c:	490a      	ldr	r1, [pc, #40]	@ (8002d98 <ConfigFile_Create+0x38>)
 8002d6e:	480b      	ldr	r0, [pc, #44]	@ (8002d9c <ConfigFile_Create+0x3c>)
 8002d70:	f012 f996 	bl	80150a0 <f_open>

	f_printf(&Config, "Version: ");
 8002d74:	490a      	ldr	r1, [pc, #40]	@ (8002da0 <ConfigFile_Create+0x40>)
 8002d76:	4809      	ldr	r0, [pc, #36]	@ (8002d9c <ConfigFile_Create+0x3c>)
 8002d78:	f013 fbb6 	bl	80164e8 <f_printf>
	f_printf(&Config,  SystemConfig.FWVersion);
 8002d7c:	4909      	ldr	r1, [pc, #36]	@ (8002da4 <ConfigFile_Create+0x44>)
 8002d7e:	4807      	ldr	r0, [pc, #28]	@ (8002d9c <ConfigFile_Create+0x3c>)
 8002d80:	f013 fbb2 	bl	80164e8 <f_printf>
	f_printf(&Config, "\nN. Reset: 000\n");
 8002d84:	4908      	ldr	r1, [pc, #32]	@ (8002da8 <ConfigFile_Create+0x48>)
 8002d86:	4805      	ldr	r0, [pc, #20]	@ (8002d9c <ConfigFile_Create+0x3c>)
 8002d88:	f013 fbae 	bl	80164e8 <f_printf>
	f_close(&Config);
 8002d8c:	4803      	ldr	r0, [pc, #12]	@ (8002d9c <ConfigFile_Create+0x3c>)
 8002d8e:	f012 fec0 	bl	8015b12 <f_close>
}
 8002d92:	bf00      	nop
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	240000b0 	.word	0x240000b0
 8002d9c:	24002640 	.word	0x24002640
 8002da0:	08019a5c 	.word	0x08019a5c
 8002da4:	24000090 	.word	0x24000090
 8002da8:	08019a68 	.word	0x08019a68

08002dac <SD_ConfigFileInit>:

void SD_ConfigFileInit(void){
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
	char FileVersion[5] = {0};
 8002db2:	2300      	movs	r3, #0
 8002db4:	603b      	str	r3, [r7, #0]
 8002db6:	2300      	movs	r3, #0
 8002db8:	713b      	strb	r3, [r7, #4]

	f_open(&Config, ConfigFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8002dba:	2213      	movs	r2, #19
 8002dbc:	492b      	ldr	r1, [pc, #172]	@ (8002e6c <SD_ConfigFileInit+0xc0>)
 8002dbe:	482c      	ldr	r0, [pc, #176]	@ (8002e70 <SD_ConfigFileInit+0xc4>)
 8002dc0:	f012 f96e 	bl	80150a0 <f_open>

	f_lseek(&Config, Config_FWVersion);
 8002dc4:	2109      	movs	r1, #9
 8002dc6:	482a      	ldr	r0, [pc, #168]	@ (8002e70 <SD_ConfigFileInit+0xc4>)
 8002dc8:	f012 ff17 	bl	8015bfa <f_lseek>

	f_read(&Config, FileVersion, 5, &br);
 8002dcc:	4639      	mov	r1, r7
 8002dce:	4b29      	ldr	r3, [pc, #164]	@ (8002e74 <SD_ConfigFileInit+0xc8>)
 8002dd0:	2205      	movs	r2, #5
 8002dd2:	4827      	ldr	r0, [pc, #156]	@ (8002e70 <SD_ConfigFileInit+0xc4>)
 8002dd4:	f012 fb2c 	bl	8015430 <f_read>

	f_close(&Config);
 8002dd8:	4825      	ldr	r0, [pc, #148]	@ (8002e70 <SD_ConfigFileInit+0xc4>)
 8002dda:	f012 fe9a 	bl	8015b12 <f_close>

	for (uint8_t n = 0; n < 5; ++n) {
 8002dde:	2300      	movs	r3, #0
 8002de0:	71fb      	strb	r3, [r7, #7]
 8002de2:	e010      	b.n	8002e06 <SD_ConfigFileInit+0x5a>
		if(FileVersion[n] != SystemConfig.FWVersion[n]){
 8002de4:	79fb      	ldrb	r3, [r7, #7]
 8002de6:	3308      	adds	r3, #8
 8002de8:	443b      	add	r3, r7
 8002dea:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8002dee:	79fb      	ldrb	r3, [r7, #7]
 8002df0:	4921      	ldr	r1, [pc, #132]	@ (8002e78 <SD_ConfigFileInit+0xcc>)
 8002df2:	5ccb      	ldrb	r3, [r1, r3]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d003      	beq.n	8002e00 <SD_ConfigFileInit+0x54>
			ConfigFile_Create();
 8002df8:	f7ff ffb2 	bl	8002d60 <ConfigFile_Create>
			n = 5;
 8002dfc:	2305      	movs	r3, #5
 8002dfe:	71fb      	strb	r3, [r7, #7]
	for (uint8_t n = 0; n < 5; ++n) {
 8002e00:	79fb      	ldrb	r3, [r7, #7]
 8002e02:	3301      	adds	r3, #1
 8002e04:	71fb      	strb	r3, [r7, #7]
 8002e06:	79fb      	ldrb	r3, [r7, #7]
 8002e08:	2b04      	cmp	r3, #4
 8002e0a:	d9eb      	bls.n	8002de4 <SD_ConfigFileInit+0x38>
		}
	}
	f_open(&Config, ConfigFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8002e0c:	2213      	movs	r2, #19
 8002e0e:	4917      	ldr	r1, [pc, #92]	@ (8002e6c <SD_ConfigFileInit+0xc0>)
 8002e10:	4817      	ldr	r0, [pc, #92]	@ (8002e70 <SD_ConfigFileInit+0xc4>)
 8002e12:	f012 f945 	bl	80150a0 <f_open>

	f_lseek(&Config, 26);
 8002e16:	211a      	movs	r1, #26
 8002e18:	4815      	ldr	r0, [pc, #84]	@ (8002e70 <SD_ConfigFileInit+0xc4>)
 8002e1a:	f012 feee 	bl	8015bfa <f_lseek>
	f_read(&Config, NResetChar, 3, &br);
 8002e1e:	4b15      	ldr	r3, [pc, #84]	@ (8002e74 <SD_ConfigFileInit+0xc8>)
 8002e20:	2203      	movs	r2, #3
 8002e22:	4916      	ldr	r1, [pc, #88]	@ (8002e7c <SD_ConfigFileInit+0xd0>)
 8002e24:	4812      	ldr	r0, [pc, #72]	@ (8002e70 <SD_ConfigFileInit+0xc4>)
 8002e26:	f012 fb03 	bl	8015430 <f_read>

	SystemConfig.ResetCounter = ASCII2uint8(NResetChar, 3) + 1;
 8002e2a:	2103      	movs	r1, #3
 8002e2c:	4813      	ldr	r0, [pc, #76]	@ (8002e7c <SD_ConfigFileInit+0xd0>)
 8002e2e:	f7ff ff15 	bl	8002c5c <ASCII2uint8>
 8002e32:	4603      	mov	r3, r0
 8002e34:	3301      	adds	r3, #1
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	4b0f      	ldr	r3, [pc, #60]	@ (8002e78 <SD_ConfigFileInit+0xcc>)
 8002e3a:	715a      	strb	r2, [r3, #5]
	uint82ASCII(SystemConfig.ResetCounter, NResetChar);
 8002e3c:	4b0e      	ldr	r3, [pc, #56]	@ (8002e78 <SD_ConfigFileInit+0xcc>)
 8002e3e:	795b      	ldrb	r3, [r3, #5]
 8002e40:	490e      	ldr	r1, [pc, #56]	@ (8002e7c <SD_ConfigFileInit+0xd0>)
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff ff32 	bl	8002cac <uint82ASCII>

	f_lseek(&Config, 26);
 8002e48:	211a      	movs	r1, #26
 8002e4a:	4809      	ldr	r0, [pc, #36]	@ (8002e70 <SD_ConfigFileInit+0xc4>)
 8002e4c:	f012 fed5 	bl	8015bfa <f_lseek>
	f_write(&Config, NResetChar, 3, &bw);
 8002e50:	4b0b      	ldr	r3, [pc, #44]	@ (8002e80 <SD_ConfigFileInit+0xd4>)
 8002e52:	2203      	movs	r2, #3
 8002e54:	4909      	ldr	r1, [pc, #36]	@ (8002e7c <SD_ConfigFileInit+0xd0>)
 8002e56:	4806      	ldr	r0, [pc, #24]	@ (8002e70 <SD_ConfigFileInit+0xc4>)
 8002e58:	f012 fc49 	bl	80156ee <f_write>

	f_close(&Config);
 8002e5c:	4804      	ldr	r0, [pc, #16]	@ (8002e70 <SD_ConfigFileInit+0xc4>)
 8002e5e:	f012 fe58 	bl	8015b12 <f_close>

}
 8002e62:	bf00      	nop
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	240000b0 	.word	0x240000b0
 8002e70:	24002640 	.word	0x24002640
 8002e74:	24003674 	.word	0x24003674
 8002e78:	24000090 	.word	0x24000090
 8002e7c:	240000bc 	.word	0x240000bc
 8002e80:	24003678 	.word	0x24003678

08002e84 <SD_GainsInit>:

void SD_GainsInit(void){
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0

}
 8002e88:	bf00      	nop
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
	...

08002e94 <SD_CreateFlightPath>:

void SD_CreateFlightPath(void){
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
	FlightPaht[6] = NResetChar[0];
 8002e98:	4b09      	ldr	r3, [pc, #36]	@ (8002ec0 <SD_CreateFlightPath+0x2c>)
 8002e9a:	781a      	ldrb	r2, [r3, #0]
 8002e9c:	4b09      	ldr	r3, [pc, #36]	@ (8002ec4 <SD_CreateFlightPath+0x30>)
 8002e9e:	719a      	strb	r2, [r3, #6]
	FlightPaht[7] = NResetChar[1];
 8002ea0:	4b07      	ldr	r3, [pc, #28]	@ (8002ec0 <SD_CreateFlightPath+0x2c>)
 8002ea2:	785a      	ldrb	r2, [r3, #1]
 8002ea4:	4b07      	ldr	r3, [pc, #28]	@ (8002ec4 <SD_CreateFlightPath+0x30>)
 8002ea6:	71da      	strb	r2, [r3, #7]
	FlightPaht[8] = NResetChar[2];
 8002ea8:	4b05      	ldr	r3, [pc, #20]	@ (8002ec0 <SD_CreateFlightPath+0x2c>)
 8002eaa:	789a      	ldrb	r2, [r3, #2]
 8002eac:	4b05      	ldr	r3, [pc, #20]	@ (8002ec4 <SD_CreateFlightPath+0x30>)
 8002eae:	721a      	strb	r2, [r3, #8]

	f_mkdir(FlightPaht);
 8002eb0:	4804      	ldr	r0, [pc, #16]	@ (8002ec4 <SD_CreateFlightPath+0x30>)
 8002eb2:	f013 f987 	bl	80161c4 <f_mkdir>
	f_chdir(FlightPaht);
 8002eb6:	4803      	ldr	r0, [pc, #12]	@ (8002ec4 <SD_CreateFlightPath+0x30>)
 8002eb8:	f012 fe55 	bl	8015b66 <f_chdir>
}
 8002ebc:	bf00      	nop
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	240000bc 	.word	0x240000bc
 8002ec4:	24000098 	.word	0x24000098

08002ec8 <SD_blackbox_init>:

void SD_blackbox_init(void){
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0

	f_open(&BlackBox, BlackBoxFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8002ecc:	2213      	movs	r2, #19
 8002ece:	4903      	ldr	r1, [pc, #12]	@ (8002edc <SD_blackbox_init+0x14>)
 8002ed0:	4803      	ldr	r0, [pc, #12]	@ (8002ee0 <SD_blackbox_init+0x18>)
 8002ed2:	f012 f8e5 	bl	80150a0 <f_open>
}
 8002ed6:	bf00      	nop
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	240000a4 	.word	0x240000a4
 8002ee0:	24001610 	.word	0x24001610

08002ee4 <SD_blackbox_refresh>:

void SD_blackbox_refresh(void){
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0

	blackbox_data.Time = TimeOn_Counter;
 8002ee8:	4b7e      	ldr	r3, [pc, #504]	@ (80030e4 <SD_blackbox_refresh+0x200>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a7e      	ldr	r2, [pc, #504]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 8002eee:	6653      	str	r3, [r2, #100]	@ 0x64

	blackbox_data.Ax = IMU.ACC.x;
 8002ef0:	4b7e      	ldr	r3, [pc, #504]	@ (80030ec <SD_blackbox_refresh+0x208>)
 8002ef2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002ef6:	497c      	ldr	r1, [pc, #496]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 8002ef8:	e9c1 2300 	strd	r2, r3, [r1]
	blackbox_data.Ay = IMU.ACC.y;
 8002efc:	4b7b      	ldr	r3, [pc, #492]	@ (80030ec <SD_blackbox_refresh+0x208>)
 8002efe:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002f02:	4979      	ldr	r1, [pc, #484]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 8002f04:	e9c1 2302 	strd	r2, r3, [r1, #8]
	blackbox_data.Az = IMU.ACC.z;
 8002f08:	4b78      	ldr	r3, [pc, #480]	@ (80030ec <SD_blackbox_refresh+0x208>)
 8002f0a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002f0e:	4976      	ldr	r1, [pc, #472]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 8002f10:	e9c1 2304 	strd	r2, r3, [r1, #16]

	blackbox_data.Gx = IMU.GYR.x;
 8002f14:	4b75      	ldr	r3, [pc, #468]	@ (80030ec <SD_blackbox_refresh+0x208>)
 8002f16:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8002f1a:	4973      	ldr	r1, [pc, #460]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 8002f1c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	blackbox_data.Gy = IMU.GYR.y;
 8002f20:	4b72      	ldr	r3, [pc, #456]	@ (80030ec <SD_blackbox_refresh+0x208>)
 8002f22:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8002f26:	4970      	ldr	r1, [pc, #448]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 8002f28:	e9c1 2308 	strd	r2, r3, [r1, #32]
	blackbox_data.Gz = IMU.GYR.z;
 8002f2c:	4b6f      	ldr	r3, [pc, #444]	@ (80030ec <SD_blackbox_refresh+0x208>)
 8002f2e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8002f32:	496d      	ldr	r1, [pc, #436]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 8002f34:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

	blackbox_data.Gfx = 0;
 8002f38:	496b      	ldr	r1, [pc, #428]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	blackbox_data.Gfy = 0;
 8002f46:	4968      	ldr	r1, [pc, #416]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 8002f48:	f04f 0200 	mov.w	r2, #0
 8002f4c:	f04f 0300 	mov.w	r3, #0
 8002f50:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	blackbox_data.Gfz = 0;
 8002f54:	4964      	ldr	r1, [pc, #400]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 8002f56:	f04f 0200 	mov.w	r2, #0
 8002f5a:	f04f 0300 	mov.w	r3, #0
 8002f5e:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	blackbox_data.Roll    = IMU.Roll;
 8002f62:	4b62      	ldr	r3, [pc, #392]	@ (80030ec <SD_blackbox_refresh+0x208>)
 8002f64:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 8002f68:	495f      	ldr	r1, [pc, #380]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 8002f6a:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
	blackbox_data.Pitch   = IMU.Pitch;
 8002f6e:	4b5f      	ldr	r3, [pc, #380]	@ (80030ec <SD_blackbox_refresh+0x208>)
 8002f70:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 8002f74:	495c      	ldr	r1, [pc, #368]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 8002f76:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	blackbox_data.Heading = IMU.Heading;
 8002f7a:	4b5c      	ldr	r3, [pc, #368]	@ (80030ec <SD_blackbox_refresh+0x208>)
 8002f7c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8002f80:	4959      	ldr	r1, [pc, #356]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 8002f82:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	blackbox_data.Alt = BMP280.Barometric_Altitude;
 8002f86:	4b5a      	ldr	r3, [pc, #360]	@ (80030f0 <SD_blackbox_refresh+0x20c>)
 8002f88:	8a1a      	ldrh	r2, [r3, #16]
 8002f8a:	4b57      	ldr	r3, [pc, #348]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 8002f8c:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
	blackbox_data.Latitude = 0;
 8002f90:	4b55      	ldr	r3, [pc, #340]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	669a      	str	r2, [r3, #104]	@ 0x68
	blackbox_data.Longitude= 0;
 8002f96:	4b54      	ldr	r3, [pc, #336]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	66da      	str	r2, [r3, #108]	@ 0x6c

	blackbox_data.ARSP = 0;
 8002f9c:	4b52      	ldr	r3, [pc, #328]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76

	blackbox_data.Pressure = BMP280.Pressure;
 8002fa4:	4b52      	ldr	r3, [pc, #328]	@ (80030f0 <SD_blackbox_refresh+0x20c>)
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	4a4f      	ldr	r2, [pc, #316]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 8002faa:	6713      	str	r3, [r2, #112]	@ 0x70

	blackbox_data.SBUS_Flags = Radio_input.Banderas;
 8002fac:	4b51      	ldr	r3, [pc, #324]	@ (80030f4 <SD_blackbox_refresh+0x210>)
 8002fae:	781a      	ldrb	r2, [r3, #0]
 8002fb0:	4b4d      	ldr	r3, [pc, #308]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 8002fb2:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
	blackbox_data.Flight_Mode = 0;
 8002fb6:	4b4c      	ldr	r3, [pc, #304]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad

	blackbox_data.Canal_1 = Radio_input.Canal_1;
 8002fbe:	4b4d      	ldr	r3, [pc, #308]	@ (80030f4 <SD_blackbox_refresh+0x210>)
 8002fc0:	885a      	ldrh	r2, [r3, #2]
 8002fc2:	4b49      	ldr	r3, [pc, #292]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 8002fc4:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
	blackbox_data.Canal_2 = Radio_input.Canal_2;
 8002fc8:	4b4a      	ldr	r3, [pc, #296]	@ (80030f4 <SD_blackbox_refresh+0x210>)
 8002fca:	889a      	ldrh	r2, [r3, #4]
 8002fcc:	4b46      	ldr	r3, [pc, #280]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 8002fce:	f8a3 207a 	strh.w	r2, [r3, #122]	@ 0x7a
	blackbox_data.Canal_3 = Radio_input.Canal_3;
 8002fd2:	4b48      	ldr	r3, [pc, #288]	@ (80030f4 <SD_blackbox_refresh+0x210>)
 8002fd4:	88da      	ldrh	r2, [r3, #6]
 8002fd6:	4b44      	ldr	r3, [pc, #272]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 8002fd8:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
	blackbox_data.Canal_4 = Radio_input.Canal_4;
 8002fdc:	4b45      	ldr	r3, [pc, #276]	@ (80030f4 <SD_blackbox_refresh+0x210>)
 8002fde:	891a      	ldrh	r2, [r3, #8]
 8002fe0:	4b41      	ldr	r3, [pc, #260]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 8002fe2:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
	blackbox_data.Canal_5 = Radio_input.Canal_5;
 8002fe6:	4b43      	ldr	r3, [pc, #268]	@ (80030f4 <SD_blackbox_refresh+0x210>)
 8002fe8:	895a      	ldrh	r2, [r3, #10]
 8002fea:	4b3f      	ldr	r3, [pc, #252]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 8002fec:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
	blackbox_data.Canal_6 = Radio_input.Canal_6;
 8002ff0:	4b40      	ldr	r3, [pc, #256]	@ (80030f4 <SD_blackbox_refresh+0x210>)
 8002ff2:	899a      	ldrh	r2, [r3, #12]
 8002ff4:	4b3c      	ldr	r3, [pc, #240]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 8002ff6:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
	blackbox_data.Canal_7 = Radio_input.Canal_7;
 8002ffa:	4b3e      	ldr	r3, [pc, #248]	@ (80030f4 <SD_blackbox_refresh+0x210>)
 8002ffc:	89da      	ldrh	r2, [r3, #14]
 8002ffe:	4b3a      	ldr	r3, [pc, #232]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 8003000:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84
	blackbox_data.Canal_8 = Radio_input.Canal_8;
 8003004:	4b3b      	ldr	r3, [pc, #236]	@ (80030f4 <SD_blackbox_refresh+0x210>)
 8003006:	8a1a      	ldrh	r2, [r3, #16]
 8003008:	4b37      	ldr	r3, [pc, #220]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 800300a:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
	blackbox_data.Canal_9 = Radio_input.Canal_9;
 800300e:	4b39      	ldr	r3, [pc, #228]	@ (80030f4 <SD_blackbox_refresh+0x210>)
 8003010:	8a5a      	ldrh	r2, [r3, #18]
 8003012:	4b35      	ldr	r3, [pc, #212]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 8003014:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
	blackbox_data.Canal_10 = Radio_input.Canal_10;
 8003018:	4b36      	ldr	r3, [pc, #216]	@ (80030f4 <SD_blackbox_refresh+0x210>)
 800301a:	8a9a      	ldrh	r2, [r3, #20]
 800301c:	4b32      	ldr	r3, [pc, #200]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 800301e:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
	blackbox_data.Canal_11 = Radio_input.Canal_11;
 8003022:	4b34      	ldr	r3, [pc, #208]	@ (80030f4 <SD_blackbox_refresh+0x210>)
 8003024:	8ada      	ldrh	r2, [r3, #22]
 8003026:	4b30      	ldr	r3, [pc, #192]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 8003028:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
	blackbox_data.Canal_12 = Radio_input.Canal_12;
 800302c:	4b31      	ldr	r3, [pc, #196]	@ (80030f4 <SD_blackbox_refresh+0x210>)
 800302e:	8b1a      	ldrh	r2, [r3, #24]
 8003030:	4b2d      	ldr	r3, [pc, #180]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 8003032:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
	blackbox_data.Canal_13 = Radio_input.Canal_13;
 8003036:	4b2f      	ldr	r3, [pc, #188]	@ (80030f4 <SD_blackbox_refresh+0x210>)
 8003038:	8b5a      	ldrh	r2, [r3, #26]
 800303a:	4b2b      	ldr	r3, [pc, #172]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 800303c:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
	blackbox_data.Canal_14 = Radio_input.Canal_14;
 8003040:	4b2c      	ldr	r3, [pc, #176]	@ (80030f4 <SD_blackbox_refresh+0x210>)
 8003042:	8b9a      	ldrh	r2, [r3, #28]
 8003044:	4b28      	ldr	r3, [pc, #160]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 8003046:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
	blackbox_data.Canal_15 = Radio_input.Canal_15;
 800304a:	4b2a      	ldr	r3, [pc, #168]	@ (80030f4 <SD_blackbox_refresh+0x210>)
 800304c:	8bda      	ldrh	r2, [r3, #30]
 800304e:	4b26      	ldr	r3, [pc, #152]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 8003050:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
	blackbox_data.Canal_16 = Radio_input.Canal_16;
 8003054:	4b27      	ldr	r3, [pc, #156]	@ (80030f4 <SD_blackbox_refresh+0x210>)
 8003056:	8c1a      	ldrh	r2, [r3, #32]
 8003058:	4b23      	ldr	r3, [pc, #140]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 800305a:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96

	blackbox_data.Interruptor_1 = Radio_input.Interruptor_1;
 800305e:	4b25      	ldr	r3, [pc, #148]	@ (80030f4 <SD_blackbox_refresh+0x210>)
 8003060:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8003064:	4b20      	ldr	r3, [pc, #128]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 8003066:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
	blackbox_data.Interruptor_2 = Radio_input.Interruptor_2;
 800306a:	4b22      	ldr	r3, [pc, #136]	@ (80030f4 <SD_blackbox_refresh+0x210>)
 800306c:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8003070:	4b1d      	ldr	r3, [pc, #116]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 8003072:	f883 20af 	strb.w	r2, [r3, #175]	@ 0xaf

	blackbox_data.OUT1  = PWM_Output.Canal_1;
 8003076:	4b20      	ldr	r3, [pc, #128]	@ (80030f8 <SD_blackbox_refresh+0x214>)
 8003078:	881a      	ldrh	r2, [r3, #0]
 800307a:	4b1b      	ldr	r3, [pc, #108]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 800307c:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
	blackbox_data.OUT2  = PWM_Output.Canal_2;
 8003080:	4b1d      	ldr	r3, [pc, #116]	@ (80030f8 <SD_blackbox_refresh+0x214>)
 8003082:	885a      	ldrh	r2, [r3, #2]
 8003084:	4b18      	ldr	r3, [pc, #96]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 8003086:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
	blackbox_data.OUT3  = PWM_Output.Canal_3;
 800308a:	4b1b      	ldr	r3, [pc, #108]	@ (80030f8 <SD_blackbox_refresh+0x214>)
 800308c:	889a      	ldrh	r2, [r3, #4]
 800308e:	4b16      	ldr	r3, [pc, #88]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 8003090:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
	blackbox_data.OUT4  = PWM_Output.Canal_4;
 8003094:	4b18      	ldr	r3, [pc, #96]	@ (80030f8 <SD_blackbox_refresh+0x214>)
 8003096:	88da      	ldrh	r2, [r3, #6]
 8003098:	4b13      	ldr	r3, [pc, #76]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 800309a:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
	blackbox_data.OUT5  = PWM_Output.Canal_5;
 800309e:	4b16      	ldr	r3, [pc, #88]	@ (80030f8 <SD_blackbox_refresh+0x214>)
 80030a0:	891a      	ldrh	r2, [r3, #8]
 80030a2:	4b11      	ldr	r3, [pc, #68]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 80030a4:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
	blackbox_data.OUT6  = PWM_Output.Canal_6;
 80030a8:	4b13      	ldr	r3, [pc, #76]	@ (80030f8 <SD_blackbox_refresh+0x214>)
 80030aa:	895a      	ldrh	r2, [r3, #10]
 80030ac:	4b0e      	ldr	r3, [pc, #56]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 80030ae:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2
	blackbox_data.OUT7  = PWM_Output.Canal_7;
 80030b2:	4b11      	ldr	r3, [pc, #68]	@ (80030f8 <SD_blackbox_refresh+0x214>)
 80030b4:	899a      	ldrh	r2, [r3, #12]
 80030b6:	4b0c      	ldr	r3, [pc, #48]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 80030b8:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
	blackbox_data.OUT8  = PWM_Output.Canal_8;
 80030bc:	4b0e      	ldr	r3, [pc, #56]	@ (80030f8 <SD_blackbox_refresh+0x214>)
 80030be:	89da      	ldrh	r2, [r3, #14]
 80030c0:	4b09      	ldr	r3, [pc, #36]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 80030c2:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
	blackbox_data.OUT9  = PWM_Output.Canal_9;
 80030c6:	4b0c      	ldr	r3, [pc, #48]	@ (80030f8 <SD_blackbox_refresh+0x214>)
 80030c8:	8a1a      	ldrh	r2, [r3, #16]
 80030ca:	4b07      	ldr	r3, [pc, #28]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 80030cc:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
	blackbox_data.OUT10 = PWM_Output.Canal_10;
 80030d0:	4b09      	ldr	r3, [pc, #36]	@ (80030f8 <SD_blackbox_refresh+0x214>)
 80030d2:	8a5a      	ldrh	r2, [r3, #18]
 80030d4:	4b04      	ldr	r3, [pc, #16]	@ (80030e8 <SD_blackbox_refresh+0x204>)
 80030d6:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
}
 80030da:	bf00      	nop
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	24004f00 	.word	0x24004f00
 80030e8:	24004670 	.word	0x24004670
 80030ec:	24000410 	.word	0x24000410
 80030f0:	240002cc 	.word	0x240002cc
 80030f4:	24000068 	.word	0x24000068
 80030f8:	24000054 	.word	0x24000054

080030fc <SD_blackbox_write>:
	BlackBoxFile[4] = ActualFile[4];

	f_open(&BlackBox, BlackBoxFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
}

void SD_blackbox_write(void){
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
	static uint8_t NewFileCount = 0;
	static uint32_t DataCount = 0;
	static uint16_t WriteCount = 0;

	SD_blackbox_refresh();
 8003102:	f7ff feef 	bl	8002ee4 <SD_blackbox_refresh>

	blackbox_data.Nmsg = DataCount;
 8003106:	4b26      	ldr	r3, [pc, #152]	@ (80031a0 <SD_blackbox_write+0xa4>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a26      	ldr	r2, [pc, #152]	@ (80031a4 <SD_blackbox_write+0xa8>)
 800310c:	6613      	str	r3, [r2, #96]	@ 0x60
	memcpy(&BlackBoxBuffer[WriteCount],&blackbox_data,sizeof(blackbox_data));
 800310e:	4b26      	ldr	r3, [pc, #152]	@ (80031a8 <SD_blackbox_write+0xac>)
 8003110:	881b      	ldrh	r3, [r3, #0]
 8003112:	461a      	mov	r2, r3
 8003114:	4613      	mov	r3, r2
 8003116:	021b      	lsls	r3, r3, #8
 8003118:	1a9b      	subs	r3, r3, r2
 800311a:	4a24      	ldr	r2, [pc, #144]	@ (80031ac <SD_blackbox_write+0xb0>)
 800311c:	4413      	add	r3, r2
 800311e:	22b0      	movs	r2, #176	@ 0xb0
 8003120:	4920      	ldr	r1, [pc, #128]	@ (80031a4 <SD_blackbox_write+0xa8>)
 8003122:	4618      	mov	r0, r3
 8003124:	f014 fd09 	bl	8017b3a <memcpy>

	if(WriteCount == 15){
 8003128:	4b1f      	ldr	r3, [pc, #124]	@ (80031a8 <SD_blackbox_write+0xac>)
 800312a:	881b      	ldrh	r3, [r3, #0]
 800312c:	2b0f      	cmp	r3, #15
 800312e:	d129      	bne.n	8003184 <SD_blackbox_write+0x88>
		for (uint8_t n = 0; n < 16; ++n) {
 8003130:	2300      	movs	r3, #0
 8003132:	71fb      	strb	r3, [r7, #7]
 8003134:	e00d      	b.n	8003152 <SD_blackbox_write+0x56>
			f_write(&BlackBox, &BlackBoxBuffer[n], sizeof(blackbox_data), &bw);
 8003136:	79fa      	ldrb	r2, [r7, #7]
 8003138:	4613      	mov	r3, r2
 800313a:	021b      	lsls	r3, r3, #8
 800313c:	1a9b      	subs	r3, r3, r2
 800313e:	4a1b      	ldr	r2, [pc, #108]	@ (80031ac <SD_blackbox_write+0xb0>)
 8003140:	1899      	adds	r1, r3, r2
 8003142:	4b1b      	ldr	r3, [pc, #108]	@ (80031b0 <SD_blackbox_write+0xb4>)
 8003144:	22b0      	movs	r2, #176	@ 0xb0
 8003146:	481b      	ldr	r0, [pc, #108]	@ (80031b4 <SD_blackbox_write+0xb8>)
 8003148:	f012 fad1 	bl	80156ee <f_write>
		for (uint8_t n = 0; n < 16; ++n) {
 800314c:	79fb      	ldrb	r3, [r7, #7]
 800314e:	3301      	adds	r3, #1
 8003150:	71fb      	strb	r3, [r7, #7]
 8003152:	79fb      	ldrb	r3, [r7, #7]
 8003154:	2b0f      	cmp	r3, #15
 8003156:	d9ee      	bls.n	8003136 <SD_blackbox_write+0x3a>
		}
		fresult = f_sync(&BlackBox);
 8003158:	4816      	ldr	r0, [pc, #88]	@ (80031b4 <SD_blackbox_write+0xb8>)
 800315a:	f012 fc5c 	bl	8015a16 <f_sync>
 800315e:	4603      	mov	r3, r0
 8003160:	461a      	mov	r2, r3
 8003162:	4b15      	ldr	r3, [pc, #84]	@ (80031b8 <SD_blackbox_write+0xbc>)
 8003164:	701a      	strb	r2, [r3, #0]
		WriteCount = 0;
 8003166:	4b10      	ldr	r3, [pc, #64]	@ (80031a8 <SD_blackbox_write+0xac>)
 8003168:	2200      	movs	r2, #0
 800316a:	801a      	strh	r2, [r3, #0]
		++NewFileCount;
 800316c:	4b13      	ldr	r3, [pc, #76]	@ (80031bc <SD_blackbox_write+0xc0>)
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	3301      	adds	r3, #1
 8003172:	b2da      	uxtb	r2, r3
 8003174:	4b11      	ldr	r3, [pc, #68]	@ (80031bc <SD_blackbox_write+0xc0>)
 8003176:	701a      	strb	r2, [r3, #0]
		++DataCount;
 8003178:	4b09      	ldr	r3, [pc, #36]	@ (80031a0 <SD_blackbox_write+0xa4>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	3301      	adds	r3, #1
 800317e:	4a08      	ldr	r2, [pc, #32]	@ (80031a0 <SD_blackbox_write+0xa4>)
 8003180:	6013      	str	r3, [r2, #0]
		return;
 8003182:	e00a      	b.n	800319a <SD_blackbox_write+0x9e>
	}
	++WriteCount;
 8003184:	4b08      	ldr	r3, [pc, #32]	@ (80031a8 <SD_blackbox_write+0xac>)
 8003186:	881b      	ldrh	r3, [r3, #0]
 8003188:	3301      	adds	r3, #1
 800318a:	b29a      	uxth	r2, r3
 800318c:	4b06      	ldr	r3, [pc, #24]	@ (80031a8 <SD_blackbox_write+0xac>)
 800318e:	801a      	strh	r2, [r3, #0]
	++DataCount;
 8003190:	4b03      	ldr	r3, [pc, #12]	@ (80031a0 <SD_blackbox_write+0xa4>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	3301      	adds	r3, #1
 8003196:	4a02      	ldr	r2, [pc, #8]	@ (80031a0 <SD_blackbox_write+0xa4>)
 8003198:	6013      	str	r3, [r2, #0]
}
 800319a:	3708      	adds	r7, #8
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	24004720 	.word	0x24004720
 80031a4:	24004670 	.word	0x24004670
 80031a8:	24004724 	.word	0x24004724
 80031ac:	2400367c 	.word	0x2400367c
 80031b0:	24003678 	.word	0x24003678
 80031b4:	24001610 	.word	0x24001610
 80031b8:	24003670 	.word	0x24003670
 80031bc:	24004726 	.word	0x24004726

080031c0 <SD_init>:


void SD_init(void){
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
	  fresult = f_mount(&fs, "/", 1);
 80031c4:	2201      	movs	r2, #1
 80031c6:	4909      	ldr	r1, [pc, #36]	@ (80031ec <SD_init+0x2c>)
 80031c8:	4809      	ldr	r0, [pc, #36]	@ (80031f0 <SD_init+0x30>)
 80031ca:	f011 ff23 	bl	8015014 <f_mount>
 80031ce:	4603      	mov	r3, r0
 80031d0:	461a      	mov	r2, r3
 80031d2:	4b08      	ldr	r3, [pc, #32]	@ (80031f4 <SD_init+0x34>)
 80031d4:	701a      	strb	r2, [r3, #0]
	  SD_ConfigFileInit();
 80031d6:	f7ff fde9 	bl	8002dac <SD_ConfigFileInit>
	  SD_GainsInit();
 80031da:	f7ff fe53 	bl	8002e84 <SD_GainsInit>
	  SD_CreateFlightPath();
 80031de:	f7ff fe59 	bl	8002e94 <SD_CreateFlightPath>
	  SD_blackbox_init();
 80031e2:	f7ff fe71 	bl	8002ec8 <SD_blackbox_init>
}
 80031e6:	bf00      	nop
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	08019a78 	.word	0x08019a78
 80031f0:	240005d4 	.word	0x240005d4
 80031f4:	24003670 	.word	0x24003670

080031f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031fe:	4b15      	ldr	r3, [pc, #84]	@ (8003254 <MX_DMA_Init+0x5c>)
 8003200:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8003204:	4a13      	ldr	r2, [pc, #76]	@ (8003254 <MX_DMA_Init+0x5c>)
 8003206:	f043 0301 	orr.w	r3, r3, #1
 800320a:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 800320e:	4b11      	ldr	r3, [pc, #68]	@ (8003254 <MX_DMA_Init+0x5c>)
 8003210:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	607b      	str	r3, [r7, #4]
 800321a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800321c:	2200      	movs	r2, #0
 800321e:	2100      	movs	r1, #0
 8003220:	200b      	movs	r0, #11
 8003222:	f002 fbee 	bl	8005a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003226:	200b      	movs	r0, #11
 8003228:	f002 fc05 	bl	8005a36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800322c:	2200      	movs	r2, #0
 800322e:	2100      	movs	r1, #0
 8003230:	200c      	movs	r0, #12
 8003232:	f002 fbe6 	bl	8005a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003236:	200c      	movs	r0, #12
 8003238:	f002 fbfd 	bl	8005a36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800323c:	2200      	movs	r2, #0
 800323e:	2100      	movs	r1, #0
 8003240:	200d      	movs	r0, #13
 8003242:	f002 fbde 	bl	8005a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8003246:	200d      	movs	r0, #13
 8003248:	f002 fbf5 	bl	8005a36 <HAL_NVIC_EnableIRQ>

}
 800324c:	bf00      	nop
 800324e:	3708      	adds	r7, #8
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	58024400 	.word	0x58024400

08003258 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800325c:	4b2e      	ldr	r3, [pc, #184]	@ (8003318 <MX_FDCAN1_Init+0xc0>)
 800325e:	4a2f      	ldr	r2, [pc, #188]	@ (800331c <MX_FDCAN1_Init+0xc4>)
 8003260:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8003262:	4b2d      	ldr	r3, [pc, #180]	@ (8003318 <MX_FDCAN1_Init+0xc0>)
 8003264:	2200      	movs	r2, #0
 8003266:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8003268:	4b2b      	ldr	r3, [pc, #172]	@ (8003318 <MX_FDCAN1_Init+0xc0>)
 800326a:	2200      	movs	r2, #0
 800326c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800326e:	4b2a      	ldr	r3, [pc, #168]	@ (8003318 <MX_FDCAN1_Init+0xc0>)
 8003270:	2200      	movs	r2, #0
 8003272:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8003274:	4b28      	ldr	r3, [pc, #160]	@ (8003318 <MX_FDCAN1_Init+0xc0>)
 8003276:	2200      	movs	r2, #0
 8003278:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800327a:	4b27      	ldr	r3, [pc, #156]	@ (8003318 <MX_FDCAN1_Init+0xc0>)
 800327c:	2200      	movs	r2, #0
 800327e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8003280:	4b25      	ldr	r3, [pc, #148]	@ (8003318 <MX_FDCAN1_Init+0xc0>)
 8003282:	2210      	movs	r2, #16
 8003284:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8003286:	4b24      	ldr	r3, [pc, #144]	@ (8003318 <MX_FDCAN1_Init+0xc0>)
 8003288:	2201      	movs	r2, #1
 800328a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 800328c:	4b22      	ldr	r3, [pc, #136]	@ (8003318 <MX_FDCAN1_Init+0xc0>)
 800328e:	2202      	movs	r2, #2
 8003290:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8003292:	4b21      	ldr	r3, [pc, #132]	@ (8003318 <MX_FDCAN1_Init+0xc0>)
 8003294:	2202      	movs	r2, #2
 8003296:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8003298:	4b1f      	ldr	r3, [pc, #124]	@ (8003318 <MX_FDCAN1_Init+0xc0>)
 800329a:	2201      	movs	r2, #1
 800329c:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800329e:	4b1e      	ldr	r3, [pc, #120]	@ (8003318 <MX_FDCAN1_Init+0xc0>)
 80032a0:	2201      	movs	r2, #1
 80032a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80032a4:	4b1c      	ldr	r3, [pc, #112]	@ (8003318 <MX_FDCAN1_Init+0xc0>)
 80032a6:	2201      	movs	r2, #1
 80032a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80032aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003318 <MX_FDCAN1_Init+0xc0>)
 80032ac:	2201      	movs	r2, #1
 80032ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80032b0:	4b19      	ldr	r3, [pc, #100]	@ (8003318 <MX_FDCAN1_Init+0xc0>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 80032b6:	4b18      	ldr	r3, [pc, #96]	@ (8003318 <MX_FDCAN1_Init+0xc0>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80032bc:	4b16      	ldr	r3, [pc, #88]	@ (8003318 <MX_FDCAN1_Init+0xc0>)
 80032be:	2200      	movs	r2, #0
 80032c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 80032c2:	4b15      	ldr	r3, [pc, #84]	@ (8003318 <MX_FDCAN1_Init+0xc0>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80032c8:	4b13      	ldr	r3, [pc, #76]	@ (8003318 <MX_FDCAN1_Init+0xc0>)
 80032ca:	2204      	movs	r2, #4
 80032cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80032ce:	4b12      	ldr	r3, [pc, #72]	@ (8003318 <MX_FDCAN1_Init+0xc0>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80032d4:	4b10      	ldr	r3, [pc, #64]	@ (8003318 <MX_FDCAN1_Init+0xc0>)
 80032d6:	2204      	movs	r2, #4
 80032d8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80032da:	4b0f      	ldr	r3, [pc, #60]	@ (8003318 <MX_FDCAN1_Init+0xc0>)
 80032dc:	2200      	movs	r2, #0
 80032de:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80032e0:	4b0d      	ldr	r3, [pc, #52]	@ (8003318 <MX_FDCAN1_Init+0xc0>)
 80032e2:	2204      	movs	r2, #4
 80032e4:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80032e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003318 <MX_FDCAN1_Init+0xc0>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80032ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003318 <MX_FDCAN1_Init+0xc0>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80032f2:	4b09      	ldr	r3, [pc, #36]	@ (8003318 <MX_FDCAN1_Init+0xc0>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80032f8:	4b07      	ldr	r3, [pc, #28]	@ (8003318 <MX_FDCAN1_Init+0xc0>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80032fe:	4b06      	ldr	r3, [pc, #24]	@ (8003318 <MX_FDCAN1_Init+0xc0>)
 8003300:	2204      	movs	r2, #4
 8003302:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8003304:	4804      	ldr	r0, [pc, #16]	@ (8003318 <MX_FDCAN1_Init+0xc0>)
 8003306:	f005 fb13 	bl	8008930 <HAL_FDCAN_Init>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8003310:	f000 ffb2 	bl	8004278 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8003314:	bf00      	nop
 8003316:	bd80      	pop	{r7, pc}
 8003318:	24004728 	.word	0x24004728
 800331c:	4000a000 	.word	0x4000a000

08003320 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b0ba      	sub	sp, #232	@ 0xe8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003328:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	605a      	str	r2, [r3, #4]
 8003332:	609a      	str	r2, [r3, #8]
 8003334:	60da      	str	r2, [r3, #12]
 8003336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003338:	f107 0310 	add.w	r3, r7, #16
 800333c:	22c0      	movs	r2, #192	@ 0xc0
 800333e:	2100      	movs	r1, #0
 8003340:	4618      	mov	r0, r3
 8003342:	f014 fb60 	bl	8017a06 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a2f      	ldr	r2, [pc, #188]	@ (8003408 <HAL_FDCAN_MspInit+0xe8>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d157      	bne.n	8003400 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003350:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003354:	f04f 0300 	mov.w	r3, #0
 8003358:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 800335c:	2304      	movs	r3, #4
 800335e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 8;
 8003360:	2308      	movs	r3, #8
 8003362:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8003364:	2302      	movs	r3, #2
 8003366:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 8003368:	2301      	movs	r3, #1
 800336a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800336c:	2302      	movs	r3, #2
 800336e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8003370:	23c0      	movs	r3, #192	@ 0xc0
 8003372:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8003374:	2300      	movs	r3, #0
 8003376:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8003378:	2300      	movs	r3, #0
 800337a:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 800337c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003380:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003384:	f107 0310 	add.w	r3, r7, #16
 8003388:	4618      	mov	r0, r3
 800338a:	f007 f92b 	bl	800a5e4 <HAL_RCCEx_PeriphCLKConfig>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 8003394:	f000 ff70 	bl	8004278 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8003398:	4b1c      	ldr	r3, [pc, #112]	@ (800340c <HAL_FDCAN_MspInit+0xec>)
 800339a:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 800339e:	4a1b      	ldr	r2, [pc, #108]	@ (800340c <HAL_FDCAN_MspInit+0xec>)
 80033a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033a4:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 80033a8:	4b18      	ldr	r3, [pc, #96]	@ (800340c <HAL_FDCAN_MspInit+0xec>)
 80033aa:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80033ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033b6:	4b15      	ldr	r3, [pc, #84]	@ (800340c <HAL_FDCAN_MspInit+0xec>)
 80033b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80033bc:	4a13      	ldr	r2, [pc, #76]	@ (800340c <HAL_FDCAN_MspInit+0xec>)
 80033be:	f043 0301 	orr.w	r3, r3, #1
 80033c2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80033c6:	4b11      	ldr	r3, [pc, #68]	@ (800340c <HAL_FDCAN_MspInit+0xec>)
 80033c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	60bb      	str	r3, [r7, #8]
 80033d2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80033d4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80033d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033dc:	2302      	movs	r3, #2
 80033de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e2:	2300      	movs	r3, #0
 80033e4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e8:	2300      	movs	r3, #0
 80033ea:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80033ee:	2309      	movs	r3, #9
 80033f0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033f4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80033f8:	4619      	mov	r1, r3
 80033fa:	4805      	ldr	r0, [pc, #20]	@ (8003410 <HAL_FDCAN_MspInit+0xf0>)
 80033fc:	f005 fdfc 	bl	8008ff8 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8003400:	bf00      	nop
 8003402:	37e8      	adds	r7, #232	@ 0xe8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	4000a000 	.word	0x4000a000
 800340c:	58024400 	.word	0x58024400
 8003410:	58020000 	.word	0x58020000

08003414 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b08a      	sub	sp, #40	@ 0x28
 8003418:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800341a:	f107 0314 	add.w	r3, r7, #20
 800341e:	2200      	movs	r2, #0
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	605a      	str	r2, [r3, #4]
 8003424:	609a      	str	r2, [r3, #8]
 8003426:	60da      	str	r2, [r3, #12]
 8003428:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800342a:	4b4e      	ldr	r3, [pc, #312]	@ (8003564 <MX_GPIO_Init+0x150>)
 800342c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003430:	4a4c      	ldr	r2, [pc, #304]	@ (8003564 <MX_GPIO_Init+0x150>)
 8003432:	f043 0304 	orr.w	r3, r3, #4
 8003436:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800343a:	4b4a      	ldr	r3, [pc, #296]	@ (8003564 <MX_GPIO_Init+0x150>)
 800343c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	613b      	str	r3, [r7, #16]
 8003446:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003448:	4b46      	ldr	r3, [pc, #280]	@ (8003564 <MX_GPIO_Init+0x150>)
 800344a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800344e:	4a45      	ldr	r2, [pc, #276]	@ (8003564 <MX_GPIO_Init+0x150>)
 8003450:	f043 0301 	orr.w	r3, r3, #1
 8003454:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003458:	4b42      	ldr	r3, [pc, #264]	@ (8003564 <MX_GPIO_Init+0x150>)
 800345a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003466:	4b3f      	ldr	r3, [pc, #252]	@ (8003564 <MX_GPIO_Init+0x150>)
 8003468:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800346c:	4a3d      	ldr	r2, [pc, #244]	@ (8003564 <MX_GPIO_Init+0x150>)
 800346e:	f043 0302 	orr.w	r3, r3, #2
 8003472:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003476:	4b3b      	ldr	r3, [pc, #236]	@ (8003564 <MX_GPIO_Init+0x150>)
 8003478:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	60bb      	str	r3, [r7, #8]
 8003482:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003484:	4b37      	ldr	r3, [pc, #220]	@ (8003564 <MX_GPIO_Init+0x150>)
 8003486:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800348a:	4a36      	ldr	r2, [pc, #216]	@ (8003564 <MX_GPIO_Init+0x150>)
 800348c:	f043 0308 	orr.w	r3, r3, #8
 8003490:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003494:	4b33      	ldr	r3, [pc, #204]	@ (8003564 <MX_GPIO_Init+0x150>)
 8003496:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	607b      	str	r3, [r7, #4]
 80034a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 80034a2:	2200      	movs	r2, #0
 80034a4:	f242 010f 	movw	r1, #8207	@ 0x200f
 80034a8:	482f      	ldr	r0, [pc, #188]	@ (8003568 <MX_GPIO_Init+0x154>)
 80034aa:	f005 ff55 	bl	8009358 <HAL_GPIO_WritePin>
                          |LED_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_NSS_GPIO_Port, SD_NSS_Pin, GPIO_PIN_RESET);
 80034ae:	2200      	movs	r2, #0
 80034b0:	2110      	movs	r1, #16
 80034b2:	482e      	ldr	r0, [pc, #184]	@ (800356c <MX_GPIO_Init+0x158>)
 80034b4:	f005 ff50 	bl	8009358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IMU_BOOT_Pin|BME_NSS_Pin, GPIO_PIN_RESET);
 80034b8:	2200      	movs	r2, #0
 80034ba:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 80034be:	482c      	ldr	r0, [pc, #176]	@ (8003570 <MX_GPIO_Init+0x15c>)
 80034c0:	f005 ff4a 	bl	8009358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, GPIO_PIN_RESET);
 80034c4:	2200      	movs	r2, #0
 80034c6:	2104      	movs	r1, #4
 80034c8:	482a      	ldr	r0, [pc, #168]	@ (8003574 <MX_GPIO_Init+0x160>)
 80034ca:	f005 ff45 	bl	8009358 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 80034ce:	f242 030f 	movw	r3, #8207	@ 0x200f
 80034d2:	617b      	str	r3, [r7, #20]
                          |LED_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034d4:	2301      	movs	r3, #1
 80034d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d8:	2300      	movs	r3, #0
 80034da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034dc:	2300      	movs	r3, #0
 80034de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034e0:	f107 0314 	add.w	r3, r7, #20
 80034e4:	4619      	mov	r1, r3
 80034e6:	4820      	ldr	r0, [pc, #128]	@ (8003568 <MX_GPIO_Init+0x154>)
 80034e8:	f005 fd86 	bl	8008ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_NSS_Pin;
 80034ec:	2310      	movs	r3, #16
 80034ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034f0:	2301      	movs	r3, #1
 80034f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f4:	2300      	movs	r3, #0
 80034f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f8:	2300      	movs	r3, #0
 80034fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_NSS_GPIO_Port, &GPIO_InitStruct);
 80034fc:	f107 0314 	add.w	r3, r7, #20
 8003500:	4619      	mov	r1, r3
 8003502:	481a      	ldr	r0, [pc, #104]	@ (800356c <MX_GPIO_Init+0x158>)
 8003504:	f005 fd78 	bl	8008ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IMU_BOOT_Pin|BME_NSS_Pin;
 8003508:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800350c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800350e:	2301      	movs	r3, #1
 8003510:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003512:	2300      	movs	r3, #0
 8003514:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003516:	2300      	movs	r3, #0
 8003518:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800351a:	f107 0314 	add.w	r3, r7, #20
 800351e:	4619      	mov	r1, r3
 8003520:	4813      	ldr	r0, [pc, #76]	@ (8003570 <MX_GPIO_Init+0x15c>)
 8003522:	f005 fd69 	bl	8008ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8003526:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800352a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800352c:	2300      	movs	r3, #0
 800352e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003530:	2300      	movs	r3, #0
 8003532:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8003534:	f107 0314 	add.w	r3, r7, #20
 8003538:	4619      	mov	r1, r3
 800353a:	480b      	ldr	r0, [pc, #44]	@ (8003568 <MX_GPIO_Init+0x154>)
 800353c:	f005 fd5c 	bl	8008ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_RST_Pin;
 8003540:	2304      	movs	r3, #4
 8003542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003544:	2301      	movs	r3, #1
 8003546:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003548:	2300      	movs	r3, #0
 800354a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800354c:	2300      	movs	r3, #0
 800354e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_RST_GPIO_Port, &GPIO_InitStruct);
 8003550:	f107 0314 	add.w	r3, r7, #20
 8003554:	4619      	mov	r1, r3
 8003556:	4807      	ldr	r0, [pc, #28]	@ (8003574 <MX_GPIO_Init+0x160>)
 8003558:	f005 fd4e 	bl	8008ff8 <HAL_GPIO_Init>

}
 800355c:	bf00      	nop
 800355e:	3728      	adds	r7, #40	@ 0x28
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	58024400 	.word	0x58024400
 8003568:	58020800 	.word	0x58020800
 800356c:	58020000 	.word	0x58020000
 8003570:	58020400 	.word	0x58020400
 8003574:	58020c00 	.word	0x58020c00

08003578 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800357c:	4b1b      	ldr	r3, [pc, #108]	@ (80035ec <MX_I2C3_Init+0x74>)
 800357e:	4a1c      	ldr	r2, [pc, #112]	@ (80035f0 <MX_I2C3_Init+0x78>)
 8003580:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20B0CCFF;
 8003582:	4b1a      	ldr	r3, [pc, #104]	@ (80035ec <MX_I2C3_Init+0x74>)
 8003584:	4a1b      	ldr	r2, [pc, #108]	@ (80035f4 <MX_I2C3_Init+0x7c>)
 8003586:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8003588:	4b18      	ldr	r3, [pc, #96]	@ (80035ec <MX_I2C3_Init+0x74>)
 800358a:	2200      	movs	r2, #0
 800358c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800358e:	4b17      	ldr	r3, [pc, #92]	@ (80035ec <MX_I2C3_Init+0x74>)
 8003590:	2201      	movs	r2, #1
 8003592:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003594:	4b15      	ldr	r3, [pc, #84]	@ (80035ec <MX_I2C3_Init+0x74>)
 8003596:	2200      	movs	r2, #0
 8003598:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800359a:	4b14      	ldr	r3, [pc, #80]	@ (80035ec <MX_I2C3_Init+0x74>)
 800359c:	2200      	movs	r2, #0
 800359e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80035a0:	4b12      	ldr	r3, [pc, #72]	@ (80035ec <MX_I2C3_Init+0x74>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80035a6:	4b11      	ldr	r3, [pc, #68]	@ (80035ec <MX_I2C3_Init+0x74>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80035ac:	4b0f      	ldr	r3, [pc, #60]	@ (80035ec <MX_I2C3_Init+0x74>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80035b2:	480e      	ldr	r0, [pc, #56]	@ (80035ec <MX_I2C3_Init+0x74>)
 80035b4:	f005 feea 	bl	800938c <HAL_I2C_Init>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80035be:	f000 fe5b 	bl	8004278 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80035c2:	2100      	movs	r1, #0
 80035c4:	4809      	ldr	r0, [pc, #36]	@ (80035ec <MX_I2C3_Init+0x74>)
 80035c6:	f005 ff7d 	bl	80094c4 <HAL_I2CEx_ConfigAnalogFilter>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80035d0:	f000 fe52 	bl	8004278 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80035d4:	2100      	movs	r1, #0
 80035d6:	4805      	ldr	r0, [pc, #20]	@ (80035ec <MX_I2C3_Init+0x74>)
 80035d8:	f005 ffbf 	bl	800955a <HAL_I2CEx_ConfigDigitalFilter>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80035e2:	f000 fe49 	bl	8004278 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80035e6:	bf00      	nop
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	240047c8 	.word	0x240047c8
 80035f0:	40005c00 	.word	0x40005c00
 80035f4:	20b0ccff 	.word	0x20b0ccff

080035f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b0bc      	sub	sp, #240	@ 0xf0
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003600:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	605a      	str	r2, [r3, #4]
 800360a:	609a      	str	r2, [r3, #8]
 800360c:	60da      	str	r2, [r3, #12]
 800360e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003610:	f107 0318 	add.w	r3, r7, #24
 8003614:	22c0      	movs	r2, #192	@ 0xc0
 8003616:	2100      	movs	r1, #0
 8003618:	4618      	mov	r0, r3
 800361a:	f014 f9f4 	bl	8017a06 <memset>
  if(i2cHandle->Instance==I2C3)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a39      	ldr	r2, [pc, #228]	@ (8003708 <HAL_I2C_MspInit+0x110>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d16b      	bne.n	8003700 <HAL_I2C_MspInit+0x108>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003628:	f04f 0208 	mov.w	r2, #8
 800362c:	f04f 0300 	mov.w	r3, #0
 8003630:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8003634:	2300      	movs	r3, #0
 8003636:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800363a:	f107 0318 	add.w	r3, r7, #24
 800363e:	4618      	mov	r0, r3
 8003640:	f006 ffd0 	bl	800a5e4 <HAL_RCCEx_PeriphCLKConfig>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800364a:	f000 fe15 	bl	8004278 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800364e:	4b2f      	ldr	r3, [pc, #188]	@ (800370c <HAL_I2C_MspInit+0x114>)
 8003650:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003654:	4a2d      	ldr	r2, [pc, #180]	@ (800370c <HAL_I2C_MspInit+0x114>)
 8003656:	f043 0304 	orr.w	r3, r3, #4
 800365a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800365e:	4b2b      	ldr	r3, [pc, #172]	@ (800370c <HAL_I2C_MspInit+0x114>)
 8003660:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	617b      	str	r3, [r7, #20]
 800366a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800366c:	4b27      	ldr	r3, [pc, #156]	@ (800370c <HAL_I2C_MspInit+0x114>)
 800366e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003672:	4a26      	ldr	r2, [pc, #152]	@ (800370c <HAL_I2C_MspInit+0x114>)
 8003674:	f043 0301 	orr.w	r3, r3, #1
 8003678:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800367c:	4b23      	ldr	r3, [pc, #140]	@ (800370c <HAL_I2C_MspInit+0x114>)
 800367e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	613b      	str	r3, [r7, #16]
 8003688:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800368a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800368e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003692:	2312      	movs	r3, #18
 8003694:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003698:	2300      	movs	r3, #0
 800369a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800369e:	2300      	movs	r3, #0
 80036a0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80036a4:	2304      	movs	r3, #4
 80036a6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036aa:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80036ae:	4619      	mov	r1, r3
 80036b0:	4817      	ldr	r0, [pc, #92]	@ (8003710 <HAL_I2C_MspInit+0x118>)
 80036b2:	f005 fca1 	bl	8008ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80036b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80036ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036be:	2312      	movs	r3, #18
 80036c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c4:	2300      	movs	r3, #0
 80036c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ca:	2300      	movs	r3, #0
 80036cc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80036d0:	2304      	movs	r3, #4
 80036d2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036d6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80036da:	4619      	mov	r1, r3
 80036dc:	480d      	ldr	r0, [pc, #52]	@ (8003714 <HAL_I2C_MspInit+0x11c>)
 80036de:	f005 fc8b 	bl	8008ff8 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80036e2:	4b0a      	ldr	r3, [pc, #40]	@ (800370c <HAL_I2C_MspInit+0x114>)
 80036e4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80036e8:	4a08      	ldr	r2, [pc, #32]	@ (800370c <HAL_I2C_MspInit+0x114>)
 80036ea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80036ee:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80036f2:	4b06      	ldr	r3, [pc, #24]	@ (800370c <HAL_I2C_MspInit+0x114>)
 80036f4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80036f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036fc:	60fb      	str	r3, [r7, #12]
 80036fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8003700:	bf00      	nop
 8003702:	37f0      	adds	r7, #240	@ 0xf0
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	40005c00 	.word	0x40005c00
 800370c:	58024400 	.word	0x58024400
 8003710:	58020800 	.word	0x58020800
 8003714:	58020000 	.word	0x58020000

08003718 <default_CB>:
static float speed_fall_barrier;	/**< Barrier of decreasing speed*/
/**
 * default_CB() is a default function for all the CB pointers which do nothing.\n
 * The unregistering CB pointer is setting to pointer of this function.  
 */
static void default_CB(void){}
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
 800371c:	bf00      	nop
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
	...

08003728 <NMEA_parser>:
 * NMEA_parser is function which parses single correct NMEA message.\n
 * Inside this function all known types of NMEA message are recognized and nmea_data structure fields are set.\n
 * There is also implemented mechanism of recognizing specified events and calling corresponding to them callbacks.
 * @param[in]	message	pointer to buffer storing NMEA message.
 */
static void 	NMEA_parser(char *message){
 8003728:	b5b0      	push	{r4, r5, r7, lr}
 800372a:	b0b2      	sub	sp, #200	@ 0xc8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]

	NMEA_data previous_data = nmea_data;
 8003730:	4ba9      	ldr	r3, [pc, #676]	@ (80039d8 <NMEA_parser+0x2b0>)
 8003732:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8003736:	461d      	mov	r5, r3
 8003738:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800373a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800373c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800373e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003740:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003742:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003744:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003748:	e884 0003 	stmia.w	r4, {r0, r1}

	int num = 0;
 800374c:	2300      	movs	r3, #0
 800374e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	char *fields[32]={NULL};
 8003752:	f107 030c 	add.w	r3, r7, #12
 8003756:	2280      	movs	r2, #128	@ 0x80
 8003758:	2100      	movs	r1, #0
 800375a:	4618      	mov	r0, r3
 800375c:	f014 f953 	bl	8017a06 <memset>
	fields[num++]=message;
 8003760:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003764:	1c5a      	adds	r2, r3, #1
 8003766:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	33c8      	adds	r3, #200	@ 0xc8
 800376e:	443b      	add	r3, r7
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	f843 2cbc 	str.w	r2, [r3, #-188]
	while ((message = strchr(message, ','))) {
 8003776:	e00f      	b.n	8003798 <NMEA_parser+0x70>
		*message++ = 0;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	1c5a      	adds	r2, r3, #1
 800377c:	607a      	str	r2, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	701a      	strb	r2, [r3, #0]
		fields[num++]=message;
 8003782:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003786:	1c5a      	adds	r2, r3, #1
 8003788:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	33c8      	adds	r3, #200	@ 0xc8
 8003790:	443b      	add	r3, r7
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	f843 2cbc 	str.w	r2, [r3, #-188]
	while ((message = strchr(message, ','))) {
 8003798:	212c      	movs	r1, #44	@ 0x2c
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f014 f93b 	bl	8017a16 <strchr>
 80037a0:	6078      	str	r0, [r7, #4]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1e7      	bne.n	8003778 <NMEA_parser+0x50>
	}

	if(strcmp(fields[0],"$GPGLL")==0){
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	498c      	ldr	r1, [pc, #560]	@ (80039dc <NMEA_parser+0x2b4>)
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7fc fd9f 	bl	80002f0 <strcmp>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d11e      	bne.n	80037f6 <NMEA_parser+0xce>

		nmea_data.latitude = atof(fields[1]);
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f013 f9d4 	bl	8016b68 <atof>
 80037c0:	eeb0 7b40 	vmov.f64	d7, d0
 80037c4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80037c8:	4b83      	ldr	r3, [pc, #524]	@ (80039d8 <NMEA_parser+0x2b0>)
 80037ca:	edc3 7a02 	vstr	s15, [r3, #8]
		nmea_data.latitude_direction = *fields[2];
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	781a      	ldrb	r2, [r3, #0]
 80037d2:	4b81      	ldr	r3, [pc, #516]	@ (80039d8 <NMEA_parser+0x2b0>)
 80037d4:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[3]);
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	4618      	mov	r0, r3
 80037da:	f013 f9c5 	bl	8016b68 <atof>
 80037de:	eeb0 7b40 	vmov.f64	d7, d0
 80037e2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80037e6:	4b7c      	ldr	r3, [pc, #496]	@ (80039d8 <NMEA_parser+0x2b0>)
 80037e8:	edc3 7a04 	vstr	s15, [r3, #16]
		nmea_data.longitude_direction = *fields[4];
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	781a      	ldrb	r2, [r3, #0]
 80037f0:	4b79      	ldr	r3, [pc, #484]	@ (80039d8 <NMEA_parser+0x2b0>)
 80037f2:	751a      	strb	r2, [r3, #20]
 80037f4:	e10d      	b.n	8003a12 <NMEA_parser+0x2ea>

	}else if(strcmp(fields[0],"$GPRMC")==0){
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	4979      	ldr	r1, [pc, #484]	@ (80039e0 <NMEA_parser+0x2b8>)
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7fc fd78 	bl	80002f0 <strcmp>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d130      	bne.n	8003868 <NMEA_parser+0x140>

		nmea_data.UTC_time = atof(fields[1]);
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	4618      	mov	r0, r3
 800380a:	f013 f9ad 	bl	8016b68 <atof>
 800380e:	eeb0 7b40 	vmov.f64	d7, d0
 8003812:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003816:	4b70      	ldr	r3, [pc, #448]	@ (80039d8 <NMEA_parser+0x2b0>)
 8003818:	edc3 7a00 	vstr	s15, [r3]
		nmea_data.UT_date = atoi(fields[9]);
 800381c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800381e:	4618      	mov	r0, r3
 8003820:	f013 f9a5 	bl	8016b6e <atoi>
 8003824:	4603      	mov	r3, r0
 8003826:	4a6c      	ldr	r2, [pc, #432]	@ (80039d8 <NMEA_parser+0x2b0>)
 8003828:	6053      	str	r3, [r2, #4]

		nmea_data.latitude = atof(fields[3]);
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	4618      	mov	r0, r3
 800382e:	f013 f99b 	bl	8016b68 <atof>
 8003832:	eeb0 7b40 	vmov.f64	d7, d0
 8003836:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800383a:	4b67      	ldr	r3, [pc, #412]	@ (80039d8 <NMEA_parser+0x2b0>)
 800383c:	edc3 7a02 	vstr	s15, [r3, #8]
		nmea_data.latitude_direction = *fields[4];
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	781a      	ldrb	r2, [r3, #0]
 8003844:	4b64      	ldr	r3, [pc, #400]	@ (80039d8 <NMEA_parser+0x2b0>)
 8003846:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[5]);
 8003848:	6a3b      	ldr	r3, [r7, #32]
 800384a:	4618      	mov	r0, r3
 800384c:	f013 f98c 	bl	8016b68 <atof>
 8003850:	eeb0 7b40 	vmov.f64	d7, d0
 8003854:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003858:	4b5f      	ldr	r3, [pc, #380]	@ (80039d8 <NMEA_parser+0x2b0>)
 800385a:	edc3 7a04 	vstr	s15, [r3, #16]
		nmea_data.longitude_direction = *fields[6];
 800385e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003860:	781a      	ldrb	r2, [r3, #0]
 8003862:	4b5d      	ldr	r3, [pc, #372]	@ (80039d8 <NMEA_parser+0x2b0>)
 8003864:	751a      	strb	r2, [r3, #20]
 8003866:	e0d4      	b.n	8003a12 <NMEA_parser+0x2ea>


	}else if(strcmp(fields[0],"$GPVTG")==0){
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	495e      	ldr	r1, [pc, #376]	@ (80039e4 <NMEA_parser+0x2bc>)
 800386c:	4618      	mov	r0, r3
 800386e:	f7fc fd3f 	bl	80002f0 <strcmp>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d116      	bne.n	80038a6 <NMEA_parser+0x17e>

		nmea_data.speed_knots =  atoi(fields[5]);
 8003878:	6a3b      	ldr	r3, [r7, #32]
 800387a:	4618      	mov	r0, r3
 800387c:	f013 f977 	bl	8016b6e <atoi>
 8003880:	ee07 0a90 	vmov	s15, r0
 8003884:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003888:	4b53      	ldr	r3, [pc, #332]	@ (80039d8 <NMEA_parser+0x2b0>)
 800388a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		nmea_data.speed_kmph =  atoi(fields[7]);
 800388e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003890:	4618      	mov	r0, r3
 8003892:	f013 f96c 	bl	8016b6e <atoi>
 8003896:	ee07 0a90 	vmov	s15, r0
 800389a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800389e:	4b4e      	ldr	r3, [pc, #312]	@ (80039d8 <NMEA_parser+0x2b0>)
 80038a0:	edc3 7a08 	vstr	s15, [r3, #32]
 80038a4:	e0b5      	b.n	8003a12 <NMEA_parser+0x2ea>

	}else if(strcmp(fields[0],"$GPGGA")==0){
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	494f      	ldr	r1, [pc, #316]	@ (80039e8 <NMEA_parser+0x2c0>)
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fc fd20 	bl	80002f0 <strcmp>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d15c      	bne.n	8003970 <NMEA_parser+0x248>

		nmea_data.UTC_time = atof(fields[1]);
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f013 f955 	bl	8016b68 <atof>
 80038be:	eeb0 7b40 	vmov.f64	d7, d0
 80038c2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80038c6:	4b44      	ldr	r3, [pc, #272]	@ (80039d8 <NMEA_parser+0x2b0>)
 80038c8:	edc3 7a00 	vstr	s15, [r3]

		nmea_data.latitude = atof(fields[2]);
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f013 f94a 	bl	8016b68 <atof>
 80038d4:	eeb0 7b40 	vmov.f64	d7, d0
 80038d8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80038dc:	4b3e      	ldr	r3, [pc, #248]	@ (80039d8 <NMEA_parser+0x2b0>)
 80038de:	edc3 7a02 	vstr	s15, [r3, #8]
		nmea_data.latitude_direction = *fields[3];
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	781a      	ldrb	r2, [r3, #0]
 80038e6:	4b3c      	ldr	r3, [pc, #240]	@ (80039d8 <NMEA_parser+0x2b0>)
 80038e8:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[4]);
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f013 f93b 	bl	8016b68 <atof>
 80038f2:	eeb0 7b40 	vmov.f64	d7, d0
 80038f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80038fa:	4b37      	ldr	r3, [pc, #220]	@ (80039d8 <NMEA_parser+0x2b0>)
 80038fc:	edc3 7a04 	vstr	s15, [r3, #16]
		nmea_data.longitude_direction = *fields[5];
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	781a      	ldrb	r2, [r3, #0]
 8003904:	4b34      	ldr	r3, [pc, #208]	@ (80039d8 <NMEA_parser+0x2b0>)
 8003906:	751a      	strb	r2, [r3, #20]

		nmea_data.fix = atoi(fields[6]);
 8003908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390a:	4618      	mov	r0, r3
 800390c:	f013 f92f 	bl	8016b6e <atoi>
 8003910:	4603      	mov	r3, r0
 8003912:	b2da      	uxtb	r2, r3
 8003914:	4b30      	ldr	r3, [pc, #192]	@ (80039d8 <NMEA_parser+0x2b0>)
 8003916:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		nmea_data.sat_in_use = atoi(fields[7]);
 800391a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800391c:	4618      	mov	r0, r3
 800391e:	f013 f926 	bl	8016b6e <atoi>
 8003922:	4603      	mov	r3, r0
 8003924:	b2da      	uxtb	r2, r3
 8003926:	4b2c      	ldr	r3, [pc, #176]	@ (80039d8 <NMEA_parser+0x2b0>)
 8003928:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		nmea_data.HDOP = atof(fields[8]);
 800392c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800392e:	4618      	mov	r0, r3
 8003930:	f013 f91a 	bl	8016b68 <atof>
 8003934:	eeb0 7b40 	vmov.f64	d7, d0
 8003938:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800393c:	4b26      	ldr	r3, [pc, #152]	@ (80039d8 <NMEA_parser+0x2b0>)
 800393e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

		nmea_data.altitude = atof(fields[9]);
 8003942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003944:	4618      	mov	r0, r3
 8003946:	f013 f90f 	bl	8016b68 <atof>
 800394a:	eeb0 7b40 	vmov.f64	d7, d0
 800394e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003952:	4b21      	ldr	r3, [pc, #132]	@ (80039d8 <NMEA_parser+0x2b0>)
 8003954:	edc3 7a06 	vstr	s15, [r3, #24]
		nmea_data.geoidal_separation = atof(fields[11]);
 8003958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800395a:	4618      	mov	r0, r3
 800395c:	f013 f904 	bl	8016b68 <atof>
 8003960:	eeb0 7b40 	vmov.f64	d7, d0
 8003964:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003968:	4b1b      	ldr	r3, [pc, #108]	@ (80039d8 <NMEA_parser+0x2b0>)
 800396a:	edc3 7a07 	vstr	s15, [r3, #28]
 800396e:	e050      	b.n	8003a12 <NMEA_parser+0x2ea>

	}else if(strcmp(fields[0],"$GPGSA")==0){
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	491e      	ldr	r1, [pc, #120]	@ (80039ec <NMEA_parser+0x2c4>)
 8003974:	4618      	mov	r0, r3
 8003976:	f7fc fcbb 	bl	80002f0 <strcmp>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d137      	bne.n	80039f0 <NMEA_parser+0x2c8>

		nmea_data.fix_mode = atoi(fields[2]);
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	4618      	mov	r0, r3
 8003984:	f013 f8f3 	bl	8016b6e <atoi>
 8003988:	4603      	mov	r3, r0
 800398a:	b2da      	uxtb	r2, r3
 800398c:	4b12      	ldr	r3, [pc, #72]	@ (80039d8 <NMEA_parser+0x2b0>)
 800398e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

		nmea_data.PDOP = atof(fields[15]);
 8003992:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003994:	4618      	mov	r0, r3
 8003996:	f013 f8e7 	bl	8016b68 <atof>
 800399a:	eeb0 7b40 	vmov.f64	d7, d0
 800399e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80039a2:	4b0d      	ldr	r3, [pc, #52]	@ (80039d8 <NMEA_parser+0x2b0>)
 80039a4:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		nmea_data.HDOP = atof(fields[16]);
 80039a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039aa:	4618      	mov	r0, r3
 80039ac:	f013 f8dc 	bl	8016b68 <atof>
 80039b0:	eeb0 7b40 	vmov.f64	d7, d0
 80039b4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80039b8:	4b07      	ldr	r3, [pc, #28]	@ (80039d8 <NMEA_parser+0x2b0>)
 80039ba:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		nmea_data.VDOP = atof(fields[17]);
 80039be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039c0:	4618      	mov	r0, r3
 80039c2:	f013 f8d1 	bl	8016b68 <atof>
 80039c6:	eeb0 7b40 	vmov.f64	d7, d0
 80039ca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80039ce:	4b02      	ldr	r3, [pc, #8]	@ (80039d8 <NMEA_parser+0x2b0>)
 80039d0:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
 80039d4:	e01d      	b.n	8003a12 <NMEA_parser+0x2ea>
 80039d6:	bf00      	nop
 80039d8:	24004ec4 	.word	0x24004ec4
 80039dc:	08019a7c 	.word	0x08019a7c
 80039e0:	08019a84 	.word	0x08019a84
 80039e4:	08019a8c 	.word	0x08019a8c
 80039e8:	08019a94 	.word	0x08019a94
 80039ec:	08019a9c 	.word	0x08019a9c

	}else if(strcmp(fields[0],"$GPGSV")==0){
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	4931      	ldr	r1, [pc, #196]	@ (8003ab8 <NMEA_parser+0x390>)
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7fc fc7b 	bl	80002f0 <strcmp>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d108      	bne.n	8003a12 <NMEA_parser+0x2ea>
		nmea_data.sat_in_view = atoi(fields[3]);
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f013 f8b3 	bl	8016b6e <atoi>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	4b2b      	ldr	r3, [pc, #172]	@ (8003abc <NMEA_parser+0x394>)
 8003a0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	}

	if (abs(nmea_data.speed_kmph - previous_data.speed_kmph) > speed_change_tolerance){
 8003a12:	4b2a      	ldr	r3, [pc, #168]	@ (8003abc <NMEA_parser+0x394>)
 8003a14:	ed93 7a08 	vldr	s14, [r3, #32]
 8003a18:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8003a1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a24:	ee17 3a90 	vmov	r3, s15
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	bfb8      	it	lt
 8003a2c:	425b      	neglt	r3, r3
 8003a2e:	ee07 3a90 	vmov	s15, r3
 8003a32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a36:	4b22      	ldr	r3, [pc, #136]	@ (8003ac0 <NMEA_parser+0x398>)
 8003a38:	edd3 7a00 	vldr	s15, [r3]
 8003a3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a44:	dd02      	ble.n	8003a4c <NMEA_parser+0x324>
		speed_change_CB_fun_ptr();
 8003a46:	4b1f      	ldr	r3, [pc, #124]	@ (8003ac4 <NMEA_parser+0x39c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4798      	blx	r3
	}

	if (nmea_data.speed_kmph > speed_raise_barrier && previous_data.speed_kmph <= speed_raise_barrier){
 8003a4c:	4b1b      	ldr	r3, [pc, #108]	@ (8003abc <NMEA_parser+0x394>)
 8003a4e:	ed93 7a08 	vldr	s14, [r3, #32]
 8003a52:	4b1d      	ldr	r3, [pc, #116]	@ (8003ac8 <NMEA_parser+0x3a0>)
 8003a54:	edd3 7a00 	vldr	s15, [r3]
 8003a58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a60:	dd0c      	ble.n	8003a7c <NMEA_parser+0x354>
 8003a62:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8003a66:	4b18      	ldr	r3, [pc, #96]	@ (8003ac8 <NMEA_parser+0x3a0>)
 8003a68:	edd3 7a00 	vldr	s15, [r3]
 8003a6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a74:	d802      	bhi.n	8003a7c <NMEA_parser+0x354>
		speed_raise_barrier_CB_fun_ptr();
 8003a76:	4b15      	ldr	r3, [pc, #84]	@ (8003acc <NMEA_parser+0x3a4>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4798      	blx	r3
	}

	if (nmea_data.speed_kmph < speed_raise_barrier && previous_data.speed_kmph >= speed_raise_barrier){
 8003a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8003abc <NMEA_parser+0x394>)
 8003a7e:	ed93 7a08 	vldr	s14, [r3, #32]
 8003a82:	4b11      	ldr	r3, [pc, #68]	@ (8003ac8 <NMEA_parser+0x3a0>)
 8003a84:	edd3 7a00 	vldr	s15, [r3]
 8003a88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a90:	d400      	bmi.n	8003a94 <NMEA_parser+0x36c>
		speed_fall_barrier_CB_fun_ptr();
	}
}
 8003a92:	e00d      	b.n	8003ab0 <NMEA_parser+0x388>
	if (nmea_data.speed_kmph < speed_raise_barrier && previous_data.speed_kmph >= speed_raise_barrier){
 8003a94:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8003a98:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac8 <NMEA_parser+0x3a0>)
 8003a9a:	edd3 7a00 	vldr	s15, [r3]
 8003a9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aa6:	da00      	bge.n	8003aaa <NMEA_parser+0x382>
}
 8003aa8:	e002      	b.n	8003ab0 <NMEA_parser+0x388>
		speed_fall_barrier_CB_fun_ptr();
 8003aaa:	4b09      	ldr	r3, [pc, #36]	@ (8003ad0 <NMEA_parser+0x3a8>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4798      	blx	r3
}
 8003ab0:	bf00      	nop
 8003ab2:	37c8      	adds	r7, #200	@ 0xc8
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bdb0      	pop	{r4, r5, r7, pc}
 8003ab8:	08019aa4 	.word	0x08019aa4
 8003abc:	24004ec4 	.word	0x24004ec4
 8003ac0:	24004eac 	.word	0x24004eac
 8003ac4:	24004ea8 	.word	0x24004ea8
 8003ac8:	24004eb4 	.word	0x24004eb4
 8003acc:	24004eb0 	.word	0x24004eb0
 8003ad0:	24004eb8 	.word	0x24004eb8

08003ad4 <hx2int>:
 * hx2int is function which converts hex number written using characters to corresponding integer.
 * @param[in]	n2		is older position ix hex code
 * @param[in]	n1		is younger position ix hex code
 * @param[out]	uint8_t	is integer corresponding to input hex
 */
static uint8_t hx2int(uint8_t n2, uint8_t n1){
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	4603      	mov	r3, r0
 8003adc:	460a      	mov	r2, r1
 8003ade:	71fb      	strb	r3, [r7, #7]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	71bb      	strb	r3, [r7, #6]
	if (n2 <= '9') n2-='0';
 8003ae4:	79fb      	ldrb	r3, [r7, #7]
 8003ae6:	2b39      	cmp	r3, #57	@ 0x39
 8003ae8:	d803      	bhi.n	8003af2 <hx2int+0x1e>
 8003aea:	79fb      	ldrb	r3, [r7, #7]
 8003aec:	3b30      	subs	r3, #48	@ 0x30
 8003aee:	71fb      	strb	r3, [r7, #7]
 8003af0:	e002      	b.n	8003af8 <hx2int+0x24>
	else n2=n2-'A'+10;
 8003af2:	79fb      	ldrb	r3, [r7, #7]
 8003af4:	3b37      	subs	r3, #55	@ 0x37
 8003af6:	71fb      	strb	r3, [r7, #7]

	if (n1 <= '9') n1-='0';
 8003af8:	79bb      	ldrb	r3, [r7, #6]
 8003afa:	2b39      	cmp	r3, #57	@ 0x39
 8003afc:	d803      	bhi.n	8003b06 <hx2int+0x32>
 8003afe:	79bb      	ldrb	r3, [r7, #6]
 8003b00:	3b30      	subs	r3, #48	@ 0x30
 8003b02:	71bb      	strb	r3, [r7, #6]
 8003b04:	e002      	b.n	8003b0c <hx2int+0x38>
	else n1=n1-'A'+10;
 8003b06:	79bb      	ldrb	r3, [r7, #6]
 8003b08:	3b37      	subs	r3, #55	@ 0x37
 8003b0a:	71bb      	strb	r3, [r7, #6]

	return n2*16+n1;
 8003b0c:	79fb      	ldrb	r3, [r7, #7]
 8003b0e:	011b      	lsls	r3, r3, #4
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	79bb      	ldrb	r3, [r7, #6]
 8003b14:	4413      	add	r3, r2
 8003b16:	b2db      	uxtb	r3, r3

}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <NMEA_checksum_clc>:
 * NMEA_checksum_clc is function which calculates checksum of the message and compares it to checksum value given in NMEA message.\n
 * To convert given checksum it uses hx2int function.
 * @param[in]	message	pointer to buffer storing NMEA message.
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_checksum_clc(uint8_t * message){
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
	uint8_t index = 1;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	73fb      	strb	r3, [r7, #15]
	uint8_t checksum_clc =0;
 8003b30:	2300      	movs	r3, #0
 8003b32:	73bb      	strb	r3, [r7, #14]

	while (message[index]!='*' && index<NMEA_WORKING_BUFFER_SIZE-2){
 8003b34:	e009      	b.n	8003b4a <NMEA_checksum_clc+0x26>
		checksum_clc^=message[index++];
 8003b36:	7bfb      	ldrb	r3, [r7, #15]
 8003b38:	1c5a      	adds	r2, r3, #1
 8003b3a:	73fa      	strb	r2, [r7, #15]
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4413      	add	r3, r2
 8003b42:	781a      	ldrb	r2, [r3, #0]
 8003b44:	7bbb      	ldrb	r3, [r7, #14]
 8003b46:	4053      	eors	r3, r2
 8003b48:	73bb      	strb	r3, [r7, #14]
	while (message[index]!='*' && index<NMEA_WORKING_BUFFER_SIZE-2){
 8003b4a:	7bfb      	ldrb	r3, [r7, #15]
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	4413      	add	r3, r2
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b54:	d002      	beq.n	8003b5c <NMEA_checksum_clc+0x38>
 8003b56:	7bfb      	ldrb	r3, [r7, #15]
 8003b58:	2b7d      	cmp	r3, #125	@ 0x7d
 8003b5a:	d9ec      	bls.n	8003b36 <NMEA_checksum_clc+0x12>
	}

	uint8_t checksum = hx2int(message[index+1],message[index+2]);
 8003b5c:	7bfb      	ldrb	r3, [r7, #15]
 8003b5e:	3301      	adds	r3, #1
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	4413      	add	r3, r2
 8003b64:	7818      	ldrb	r0, [r3, #0]
 8003b66:	7bfb      	ldrb	r3, [r7, #15]
 8003b68:	3302      	adds	r3, #2
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	4619      	mov	r1, r3
 8003b72:	f7ff ffaf 	bl	8003ad4 <hx2int>
 8003b76:	4603      	mov	r3, r0
 8003b78:	737b      	strb	r3, [r7, #13]
	if (checksum!=checksum_clc){
 8003b7a:	7b7a      	ldrb	r2, [r7, #13]
 8003b7c:	7bbb      	ldrb	r3, [r7, #14]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d001      	beq.n	8003b86 <NMEA_checksum_clc+0x62>
		return NMEA_CHECKSUM_ERROR;
 8003b82:	2302      	movs	r3, #2
 8003b84:	e000      	b.n	8003b88 <NMEA_checksum_clc+0x64>
	}
	return NMEA_OK;
 8003b86:	2300      	movs	r3, #0


}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <NMEA_read_line>:

/**
 * NMEA_read_line is function which reads one NMEA message line from NMEA_UART_buffer circular buffer to NMEA_working_buffer.
 */
static void NMEA_read_line(void){
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
	int index = 0;
 8003b96:	2300      	movs	r3, #0
 8003b98:	607b      	str	r3, [r7, #4]
	while (index < NMEA_WORKING_BUFFER_SIZE) NMEA_working_buffer[index++]=0;	// Clean up working buffer.
 8003b9a:	e005      	b.n	8003ba8 <NMEA_read_line+0x18>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	1c5a      	adds	r2, r3, #1
 8003ba0:	607a      	str	r2, [r7, #4]
 8003ba2:	4a2b      	ldr	r2, [pc, #172]	@ (8003c50 <NMEA_read_line+0xc0>)
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	54d1      	strb	r1, [r2, r3]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b7f      	cmp	r3, #127	@ 0x7f
 8003bac:	ddf6      	ble.n	8003b9c <NMEA_read_line+0xc>

	index = 0;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	607b      	str	r3, [r7, #4]
	while(NMEA_UART_buffer[UART_buffer_tail]!= '\n' && index < NMEA_WORKING_BUFFER_SIZE-2){
 8003bb2:	e01c      	b.n	8003bee <NMEA_read_line+0x5e>
		NMEA_working_buffer[index]=NMEA_UART_buffer[UART_buffer_tail];
 8003bb4:	4b27      	ldr	r3, [pc, #156]	@ (8003c54 <NMEA_read_line+0xc4>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a27      	ldr	r2, [pc, #156]	@ (8003c58 <NMEA_read_line+0xc8>)
 8003bba:	5cd1      	ldrb	r1, [r2, r3]
 8003bbc:	4a24      	ldr	r2, [pc, #144]	@ (8003c50 <NMEA_read_line+0xc0>)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	460a      	mov	r2, r1
 8003bc4:	701a      	strb	r2, [r3, #0]
		NMEA_UART_buffer[UART_buffer_tail] = 0;
 8003bc6:	4b23      	ldr	r3, [pc, #140]	@ (8003c54 <NMEA_read_line+0xc4>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a23      	ldr	r2, [pc, #140]	@ (8003c58 <NMEA_read_line+0xc8>)
 8003bcc:	2100      	movs	r1, #0
 8003bce:	54d1      	strb	r1, [r2, r3]
		UART_buffer_tail = (UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8003bd0:	4b20      	ldr	r3, [pc, #128]	@ (8003c54 <NMEA_read_line+0xc4>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	425a      	negs	r2, r3
 8003bd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bdc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003be0:	bf58      	it	pl
 8003be2:	4253      	negpl	r3, r2
 8003be4:	4a1b      	ldr	r2, [pc, #108]	@ (8003c54 <NMEA_read_line+0xc4>)
 8003be6:	6013      	str	r3, [r2, #0]
		++index;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3301      	adds	r3, #1
 8003bec:	607b      	str	r3, [r7, #4]
	while(NMEA_UART_buffer[UART_buffer_tail]!= '\n' && index < NMEA_WORKING_BUFFER_SIZE-2){
 8003bee:	4b19      	ldr	r3, [pc, #100]	@ (8003c54 <NMEA_read_line+0xc4>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a19      	ldr	r2, [pc, #100]	@ (8003c58 <NMEA_read_line+0xc8>)
 8003bf4:	5cd3      	ldrb	r3, [r2, r3]
 8003bf6:	2b0a      	cmp	r3, #10
 8003bf8:	d002      	beq.n	8003c00 <NMEA_read_line+0x70>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b7d      	cmp	r3, #125	@ 0x7d
 8003bfe:	ddd9      	ble.n	8003bb4 <NMEA_read_line+0x24>
	}
	NMEA_working_buffer[index]=NMEA_UART_buffer[UART_buffer_tail];
 8003c00:	4b14      	ldr	r3, [pc, #80]	@ (8003c54 <NMEA_read_line+0xc4>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a14      	ldr	r2, [pc, #80]	@ (8003c58 <NMEA_read_line+0xc8>)
 8003c06:	5cd1      	ldrb	r1, [r2, r3]
 8003c08:	4a11      	ldr	r2, [pc, #68]	@ (8003c50 <NMEA_read_line+0xc0>)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	460a      	mov	r2, r1
 8003c10:	701a      	strb	r2, [r3, #0]
	NMEA_UART_buffer[UART_buffer_tail] = 0;
 8003c12:	4b10      	ldr	r3, [pc, #64]	@ (8003c54 <NMEA_read_line+0xc4>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a10      	ldr	r2, [pc, #64]	@ (8003c58 <NMEA_read_line+0xc8>)
 8003c18:	2100      	movs	r1, #0
 8003c1a:	54d1      	strb	r1, [r2, r3]
	UART_buffer_tail = (UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8003c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8003c54 <NMEA_read_line+0xc4>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	3301      	adds	r3, #1
 8003c22:	425a      	negs	r2, r3
 8003c24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c28:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003c2c:	bf58      	it	pl
 8003c2e:	4253      	negpl	r3, r2
 8003c30:	4a08      	ldr	r2, [pc, #32]	@ (8003c54 <NMEA_read_line+0xc4>)
 8003c32:	6013      	str	r3, [r2, #0]
	++index;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3301      	adds	r3, #1
 8003c38:	607b      	str	r3, [r7, #4]
	--UART_buffer_lines;
 8003c3a:	4b08      	ldr	r3, [pc, #32]	@ (8003c5c <NMEA_read_line+0xcc>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	4a06      	ldr	r2, [pc, #24]	@ (8003c5c <NMEA_read_line+0xcc>)
 8003c42:	6013      	str	r3, [r2, #0]

}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr
 8003c50:	24004e1c 	.word	0x24004e1c
 8003c54:	24004ea0 	.word	0x24004ea0
 8003c58:	24004a1c 	.word	0x24004a1c
 8003c5c:	24004ea4 	.word	0x24004ea4

08003c60 <NMEA_init>:

void NMEA_init(UART_HandleTypeDef *huart, DMA_HandleTypeDef *DMA){
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
	HAL_Delay(10);
 8003c6a:	200a      	movs	r0, #10
 8003c6c:	f001 fdca 	bl	8005804 <HAL_Delay>
	NMEA_huart=huart;
 8003c70:	4a12      	ldr	r2, [pc, #72]	@ (8003cbc <NMEA_init+0x5c>)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6013      	str	r3, [r2, #0]
	NMEA_DMA=DMA;
 8003c76:	4a12      	ldr	r2, [pc, #72]	@ (8003cc0 <NMEA_init+0x60>)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	6013      	str	r3, [r2, #0]
	__HAL_UART_ENABLE_IT(NMEA_huart,UART_IT_IDLE);
 8003c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8003cbc <NMEA_init+0x5c>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	4b0d      	ldr	r3, [pc, #52]	@ (8003cbc <NMEA_init+0x5c>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0210 	orr.w	r2, r2, #16
 8003c8e:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(NMEA_huart, NMEA_UART_DMA_buffer, NMEA_UART_DMA_BUFFER_SIZE);
 8003c90:	4b0a      	ldr	r3, [pc, #40]	@ (8003cbc <NMEA_init+0x5c>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c98:	490a      	ldr	r1, [pc, #40]	@ (8003cc4 <NMEA_init+0x64>)
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f00a feae 	bl	800e9fc <HAL_UART_Receive_DMA>


	speed_change_CB_fun_ptr = &default_CB;
 8003ca0:	4b09      	ldr	r3, [pc, #36]	@ (8003cc8 <NMEA_init+0x68>)
 8003ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8003ccc <NMEA_init+0x6c>)
 8003ca4:	601a      	str	r2, [r3, #0]
	speed_raise_barrier_CB_fun_ptr = &default_CB;
 8003ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8003cd0 <NMEA_init+0x70>)
 8003ca8:	4a08      	ldr	r2, [pc, #32]	@ (8003ccc <NMEA_init+0x6c>)
 8003caa:	601a      	str	r2, [r3, #0]
	speed_fall_barrier_CB_fun_ptr = &default_CB;
 8003cac:	4b09      	ldr	r3, [pc, #36]	@ (8003cd4 <NMEA_init+0x74>)
 8003cae:	4a07      	ldr	r2, [pc, #28]	@ (8003ccc <NMEA_init+0x6c>)
 8003cb0:	601a      	str	r2, [r3, #0]
}
 8003cb2:	bf00      	nop
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	24004ebc 	.word	0x24004ebc
 8003cc0:	24004ec0 	.word	0x24004ec0
 8003cc4:	2400481c 	.word	0x2400481c
 8003cc8:	24004ea8 	.word	0x24004ea8
 8003ccc:	08003719 	.word	0x08003719
 8003cd0:	24004eb0 	.word	0x24004eb0
 8003cd4:	24004eb8 	.word	0x24004eb8

08003cd8 <NMEA_UART_DMA_get_char>:
 * If buffer overflowes, the oldest NMEA message will be deleted to make space for incoming messages.\n
 * If new line character is detected ('\ n'), the line counter (UART_buffer_lines) increases.
 * @param[in]	DMA_char	character from DMA buffer
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_UART_DMA_get_char(uint8_t DMA_char){
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	4603      	mov	r3, r0
 8003ce0:	71fb      	strb	r3, [r7, #7]
	int position = (UART_buffer_head + 1)%NMEA_UART_BUFFER_SIZE;
 8003ce2:	4b2d      	ldr	r3, [pc, #180]	@ (8003d98 <NMEA_UART_DMA_get_char+0xc0>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	425a      	negs	r2, r3
 8003cea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cee:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003cf2:	bf58      	it	pl
 8003cf4:	4253      	negpl	r3, r2
 8003cf6:	60bb      	str	r3, [r7, #8]
	NMEA_status stat=NMEA_OK;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	73fb      	strb	r3, [r7, #15]

	if (position == UART_buffer_tail){		//buffer overflowed! make space for new message
 8003cfc:	4b27      	ldr	r3, [pc, #156]	@ (8003d9c <NMEA_UART_DMA_get_char+0xc4>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d130      	bne.n	8003d68 <NMEA_UART_DMA_get_char+0x90>
		while (NMEA_UART_buffer[UART_buffer_tail]!='\n' && NMEA_UART_buffer[UART_buffer_tail]!=0){
 8003d06:	e010      	b.n	8003d2a <NMEA_UART_DMA_get_char+0x52>
			NMEA_UART_buffer[UART_buffer_tail]=0;
 8003d08:	4b24      	ldr	r3, [pc, #144]	@ (8003d9c <NMEA_UART_DMA_get_char+0xc4>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a24      	ldr	r2, [pc, #144]	@ (8003da0 <NMEA_UART_DMA_get_char+0xc8>)
 8003d0e:	2100      	movs	r1, #0
 8003d10:	54d1      	strb	r1, [r2, r3]
			UART_buffer_tail=(UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8003d12:	4b22      	ldr	r3, [pc, #136]	@ (8003d9c <NMEA_UART_DMA_get_char+0xc4>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	3301      	adds	r3, #1
 8003d18:	425a      	negs	r2, r3
 8003d1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d1e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003d22:	bf58      	it	pl
 8003d24:	4253      	negpl	r3, r2
 8003d26:	4a1d      	ldr	r2, [pc, #116]	@ (8003d9c <NMEA_UART_DMA_get_char+0xc4>)
 8003d28:	6013      	str	r3, [r2, #0]
		while (NMEA_UART_buffer[UART_buffer_tail]!='\n' && NMEA_UART_buffer[UART_buffer_tail]!=0){
 8003d2a:	4b1c      	ldr	r3, [pc, #112]	@ (8003d9c <NMEA_UART_DMA_get_char+0xc4>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a1c      	ldr	r2, [pc, #112]	@ (8003da0 <NMEA_UART_DMA_get_char+0xc8>)
 8003d30:	5cd3      	ldrb	r3, [r2, r3]
 8003d32:	2b0a      	cmp	r3, #10
 8003d34:	d005      	beq.n	8003d42 <NMEA_UART_DMA_get_char+0x6a>
 8003d36:	4b19      	ldr	r3, [pc, #100]	@ (8003d9c <NMEA_UART_DMA_get_char+0xc4>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a19      	ldr	r2, [pc, #100]	@ (8003da0 <NMEA_UART_DMA_get_char+0xc8>)
 8003d3c:	5cd3      	ldrb	r3, [r2, r3]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1e2      	bne.n	8003d08 <NMEA_UART_DMA_get_char+0x30>
		}
		NMEA_UART_buffer[UART_buffer_tail]=0;
 8003d42:	4b16      	ldr	r3, [pc, #88]	@ (8003d9c <NMEA_UART_DMA_get_char+0xc4>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a16      	ldr	r2, [pc, #88]	@ (8003da0 <NMEA_UART_DMA_get_char+0xc8>)
 8003d48:	2100      	movs	r1, #0
 8003d4a:	54d1      	strb	r1, [r2, r3]
		UART_buffer_tail=(UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8003d4c:	4b13      	ldr	r3, [pc, #76]	@ (8003d9c <NMEA_UART_DMA_get_char+0xc4>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	3301      	adds	r3, #1
 8003d52:	425a      	negs	r2, r3
 8003d54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d58:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003d5c:	bf58      	it	pl
 8003d5e:	4253      	negpl	r3, r2
 8003d60:	4a0e      	ldr	r2, [pc, #56]	@ (8003d9c <NMEA_UART_DMA_get_char+0xc4>)
 8003d62:	6013      	str	r3, [r2, #0]
		stat=NMEA_BUFFER_OVERFLOWED;
 8003d64:	2301      	movs	r3, #1
 8003d66:	73fb      	strb	r3, [r7, #15]
	}

	NMEA_UART_buffer[UART_buffer_head]=DMA_char;
 8003d68:	4b0b      	ldr	r3, [pc, #44]	@ (8003d98 <NMEA_UART_DMA_get_char+0xc0>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	490c      	ldr	r1, [pc, #48]	@ (8003da0 <NMEA_UART_DMA_get_char+0xc8>)
 8003d6e:	79fa      	ldrb	r2, [r7, #7]
 8003d70:	54ca      	strb	r2, [r1, r3]

	UART_buffer_head=position;
 8003d72:	4a09      	ldr	r2, [pc, #36]	@ (8003d98 <NMEA_UART_DMA_get_char+0xc0>)
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	6013      	str	r3, [r2, #0]

	if(DMA_char=='\n'){
 8003d78:	79fb      	ldrb	r3, [r7, #7]
 8003d7a:	2b0a      	cmp	r3, #10
 8003d7c:	d104      	bne.n	8003d88 <NMEA_UART_DMA_get_char+0xb0>
		++UART_buffer_lines;	//increment lines counter
 8003d7e:	4b09      	ldr	r3, [pc, #36]	@ (8003da4 <NMEA_UART_DMA_get_char+0xcc>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	3301      	adds	r3, #1
 8003d84:	4a07      	ldr	r2, [pc, #28]	@ (8003da4 <NMEA_UART_DMA_get_char+0xcc>)
 8003d86:	6013      	str	r3, [r2, #0]
	}

	return stat;
 8003d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3714      	adds	r7, #20
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	24004e9c 	.word	0x24004e9c
 8003d9c:	24004ea0 	.word	0x24004ea0
 8003da0:	24004a1c 	.word	0x24004a1c
 8003da4:	24004ea4 	.word	0x24004ea4

08003da8 <NMEA_UART_DMA_copy_buffer>:
/**
 * NMEA_UART_DMA_copy_buffer is a function which copies messages from DMA buffer to UART circular buffer.\n
 * To do so, it uses NMEA_UART_DMA_get_char function for every character in NMEA_UART_DMA_buffer from 0 to (NMEA_UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(NMEA_DMA)).
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_UART_DMA_copy_buffer(void){
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0


	NMEA_status stat=NMEA_OK;
 8003dae:	2300      	movs	r3, #0
 8003db0:	73fb      	strb	r3, [r7, #15]

	int data_length = NMEA_UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(NMEA_DMA);
 8003db2:	4b4b      	ldr	r3, [pc, #300]	@ (8003ee0 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a4a      	ldr	r2, [pc, #296]	@ (8003ee4 <NMEA_UART_DMA_copy_buffer+0x13c>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d059      	beq.n	8003e72 <NMEA_UART_DMA_copy_buffer+0xca>
 8003dbe:	4b48      	ldr	r3, [pc, #288]	@ (8003ee0 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a48      	ldr	r2, [pc, #288]	@ (8003ee8 <NMEA_UART_DMA_copy_buffer+0x140>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d053      	beq.n	8003e72 <NMEA_UART_DMA_copy_buffer+0xca>
 8003dca:	4b45      	ldr	r3, [pc, #276]	@ (8003ee0 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a46      	ldr	r2, [pc, #280]	@ (8003eec <NMEA_UART_DMA_copy_buffer+0x144>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d04d      	beq.n	8003e72 <NMEA_UART_DMA_copy_buffer+0xca>
 8003dd6:	4b42      	ldr	r3, [pc, #264]	@ (8003ee0 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a44      	ldr	r2, [pc, #272]	@ (8003ef0 <NMEA_UART_DMA_copy_buffer+0x148>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d047      	beq.n	8003e72 <NMEA_UART_DMA_copy_buffer+0xca>
 8003de2:	4b3f      	ldr	r3, [pc, #252]	@ (8003ee0 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a42      	ldr	r2, [pc, #264]	@ (8003ef4 <NMEA_UART_DMA_copy_buffer+0x14c>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d041      	beq.n	8003e72 <NMEA_UART_DMA_copy_buffer+0xca>
 8003dee:	4b3c      	ldr	r3, [pc, #240]	@ (8003ee0 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a40      	ldr	r2, [pc, #256]	@ (8003ef8 <NMEA_UART_DMA_copy_buffer+0x150>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d03b      	beq.n	8003e72 <NMEA_UART_DMA_copy_buffer+0xca>
 8003dfa:	4b39      	ldr	r3, [pc, #228]	@ (8003ee0 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a3e      	ldr	r2, [pc, #248]	@ (8003efc <NMEA_UART_DMA_copy_buffer+0x154>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d035      	beq.n	8003e72 <NMEA_UART_DMA_copy_buffer+0xca>
 8003e06:	4b36      	ldr	r3, [pc, #216]	@ (8003ee0 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a3c      	ldr	r2, [pc, #240]	@ (8003f00 <NMEA_UART_DMA_copy_buffer+0x158>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d02f      	beq.n	8003e72 <NMEA_UART_DMA_copy_buffer+0xca>
 8003e12:	4b33      	ldr	r3, [pc, #204]	@ (8003ee0 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a3a      	ldr	r2, [pc, #232]	@ (8003f04 <NMEA_UART_DMA_copy_buffer+0x15c>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d029      	beq.n	8003e72 <NMEA_UART_DMA_copy_buffer+0xca>
 8003e1e:	4b30      	ldr	r3, [pc, #192]	@ (8003ee0 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a38      	ldr	r2, [pc, #224]	@ (8003f08 <NMEA_UART_DMA_copy_buffer+0x160>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d023      	beq.n	8003e72 <NMEA_UART_DMA_copy_buffer+0xca>
 8003e2a:	4b2d      	ldr	r3, [pc, #180]	@ (8003ee0 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a36      	ldr	r2, [pc, #216]	@ (8003f0c <NMEA_UART_DMA_copy_buffer+0x164>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d01d      	beq.n	8003e72 <NMEA_UART_DMA_copy_buffer+0xca>
 8003e36:	4b2a      	ldr	r3, [pc, #168]	@ (8003ee0 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a34      	ldr	r2, [pc, #208]	@ (8003f10 <NMEA_UART_DMA_copy_buffer+0x168>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d017      	beq.n	8003e72 <NMEA_UART_DMA_copy_buffer+0xca>
 8003e42:	4b27      	ldr	r3, [pc, #156]	@ (8003ee0 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a32      	ldr	r2, [pc, #200]	@ (8003f14 <NMEA_UART_DMA_copy_buffer+0x16c>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d011      	beq.n	8003e72 <NMEA_UART_DMA_copy_buffer+0xca>
 8003e4e:	4b24      	ldr	r3, [pc, #144]	@ (8003ee0 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a30      	ldr	r2, [pc, #192]	@ (8003f18 <NMEA_UART_DMA_copy_buffer+0x170>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d00b      	beq.n	8003e72 <NMEA_UART_DMA_copy_buffer+0xca>
 8003e5a:	4b21      	ldr	r3, [pc, #132]	@ (8003ee0 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a2e      	ldr	r2, [pc, #184]	@ (8003f1c <NMEA_UART_DMA_copy_buffer+0x174>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d005      	beq.n	8003e72 <NMEA_UART_DMA_copy_buffer+0xca>
 8003e66:	4b1e      	ldr	r3, [pc, #120]	@ (8003ee0 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a2c      	ldr	r2, [pc, #176]	@ (8003f20 <NMEA_UART_DMA_copy_buffer+0x178>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d106      	bne.n	8003e80 <NMEA_UART_DMA_copy_buffer+0xd8>
 8003e72:	4b1b      	ldr	r3, [pc, #108]	@ (8003ee0 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8003e7e:	e005      	b.n	8003e8c <NMEA_UART_DMA_copy_buffer+0xe4>
 8003e80:	4b17      	ldr	r3, [pc, #92]	@ (8003ee0 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8003e8c:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < data_length; i++){
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60bb      	str	r3, [r7, #8]
 8003e92:	e013      	b.n	8003ebc <NMEA_UART_DMA_copy_buffer+0x114>
		if (NMEA_UART_DMA_get_char(NMEA_UART_DMA_buffer[i])==NMEA_BUFFER_OVERFLOWED){
 8003e94:	4a23      	ldr	r2, [pc, #140]	@ (8003f24 <NMEA_UART_DMA_copy_buffer+0x17c>)
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	4413      	add	r3, r2
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff ff1b 	bl	8003cd8 <NMEA_UART_DMA_get_char>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d101      	bne.n	8003eac <NMEA_UART_DMA_copy_buffer+0x104>
			stat=NMEA_BUFFER_OVERFLOWED;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	73fb      	strb	r3, [r7, #15]
		}
		NMEA_UART_DMA_buffer[i]=0;
 8003eac:	4a1d      	ldr	r2, [pc, #116]	@ (8003f24 <NMEA_UART_DMA_copy_buffer+0x17c>)
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < data_length; i++){
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	3301      	adds	r3, #1
 8003eba:	60bb      	str	r3, [r7, #8]
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	dbe7      	blt.n	8003e94 <NMEA_UART_DMA_copy_buffer+0xec>
	}

	HAL_UART_Receive_DMA(NMEA_huart, NMEA_UART_DMA_buffer, NMEA_UART_DMA_BUFFER_SIZE);
 8003ec4:	4b18      	ldr	r3, [pc, #96]	@ (8003f28 <NMEA_UART_DMA_copy_buffer+0x180>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ecc:	4915      	ldr	r1, [pc, #84]	@ (8003f24 <NMEA_UART_DMA_copy_buffer+0x17c>)
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f00a fd94 	bl	800e9fc <HAL_UART_Receive_DMA>
	return stat;
 8003ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	24004ec0 	.word	0x24004ec0
 8003ee4:	40020010 	.word	0x40020010
 8003ee8:	40020028 	.word	0x40020028
 8003eec:	40020040 	.word	0x40020040
 8003ef0:	40020058 	.word	0x40020058
 8003ef4:	40020070 	.word	0x40020070
 8003ef8:	40020088 	.word	0x40020088
 8003efc:	400200a0 	.word	0x400200a0
 8003f00:	400200b8 	.word	0x400200b8
 8003f04:	40020410 	.word	0x40020410
 8003f08:	40020428 	.word	0x40020428
 8003f0c:	40020440 	.word	0x40020440
 8003f10:	40020458 	.word	0x40020458
 8003f14:	40020470 	.word	0x40020470
 8003f18:	40020488 	.word	0x40020488
 8003f1c:	400204a0 	.word	0x400204a0
 8003f20:	400204b8 	.word	0x400204b8
 8003f24:	2400481c 	.word	0x2400481c
 8003f28:	24004ebc 	.word	0x24004ebc

08003f2c <NMEA_process_task>:

NMEA_status NMEA_process_task(void){
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
	NMEA_status stat = NMEA_OK;
 8003f32:	2300      	movs	r3, #0
 8003f34:	71fb      	strb	r3, [r7, #7]
	while(UART_buffer_lines>0) {
 8003f36:	e00d      	b.n	8003f54 <NMEA_process_task+0x28>
		NMEA_read_line();
 8003f38:	f7ff fe2a 	bl	8003b90 <NMEA_read_line>
		if (NMEA_checksum_clc(NMEA_working_buffer) == NMEA_OK){
 8003f3c:	480a      	ldr	r0, [pc, #40]	@ (8003f68 <NMEA_process_task+0x3c>)
 8003f3e:	f7ff fdf1 	bl	8003b24 <NMEA_checksum_clc>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d103      	bne.n	8003f50 <NMEA_process_task+0x24>
			NMEA_parser((char *)NMEA_working_buffer);
 8003f48:	4807      	ldr	r0, [pc, #28]	@ (8003f68 <NMEA_process_task+0x3c>)
 8003f4a:	f7ff fbed 	bl	8003728 <NMEA_parser>
 8003f4e:	e001      	b.n	8003f54 <NMEA_process_task+0x28>
		}else stat = NMEA_CHECKSUM_ERROR;
 8003f50:	2302      	movs	r3, #2
 8003f52:	71fb      	strb	r3, [r7, #7]
	while(UART_buffer_lines>0) {
 8003f54:	4b05      	ldr	r3, [pc, #20]	@ (8003f6c <NMEA_process_task+0x40>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	dced      	bgt.n	8003f38 <NMEA_process_task+0xc>
	}
	return stat;
 8003f5c:	79fb      	ldrb	r3, [r7, #7]
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	24004e1c 	.word	0x24004e1c
 8003f6c:	24004ea4 	.word	0x24004ea4

08003f70 <user_UART_IDLE_IT_handler>:

NMEA_status user_UART_IDLE_IT_handler(void){
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
	NMEA_status stat = NMEA_OK;
 8003f76:	2300      	movs	r3, #0
 8003f78:	71fb      	strb	r3, [r7, #7]
	if (__HAL_UART_GET_FLAG(NMEA_huart, UART_FLAG_IDLE) == SET) {
 8003f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003fb0 <user_UART_IDLE_IT_handler+0x40>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	f003 0310 	and.w	r3, r3, #16
 8003f86:	2b10      	cmp	r3, #16
 8003f88:	d10d      	bne.n	8003fa6 <user_UART_IDLE_IT_handler+0x36>
		__HAL_UART_CLEAR_FLAG(NMEA_huart,UART_FLAG_IDLE);
 8003f8a:	4b09      	ldr	r3, [pc, #36]	@ (8003fb0 <user_UART_IDLE_IT_handler+0x40>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2210      	movs	r2, #16
 8003f92:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(NMEA_huart);
 8003f94:	4b06      	ldr	r3, [pc, #24]	@ (8003fb0 <user_UART_IDLE_IT_handler+0x40>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f00a fd7b 	bl	800ea94 <HAL_UART_DMAStop>
		stat = NMEA_UART_DMA_copy_buffer();
 8003f9e:	f7ff ff03 	bl	8003da8 <NMEA_UART_DMA_copy_buffer>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	71fb      	strb	r3, [r7, #7]
	}
	return stat;
 8003fa6:	79fb      	ldrb	r3, [r7, #7]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3708      	adds	r7, #8
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	24004ebc 	.word	0x24004ebc

08003fb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8003fb8:	f000 f932 	bl	8004220 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003fbc:	f001 fb90 	bl	80056e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003fc0:	f000 f852 	bl	8004068 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003fc4:	f7ff fa26 	bl	8003414 <MX_GPIO_Init>
  MX_DMA_Init();
 8003fc8:	f7ff f916 	bl	80031f8 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8003fcc:	f7ff f944 	bl	8003258 <MX_FDCAN1_Init>
  MX_I2C3_Init();
 8003fd0:	f7ff fad2 	bl	8003578 <MX_I2C3_Init>
  MX_SPI1_Init();
 8003fd4:	f000 f956 	bl	8004284 <MX_SPI1_Init>
  MX_SPI2_Init();
 8003fd8:	f000 f9aa 	bl	8004330 <MX_SPI2_Init>
  MX_TIM2_Init();
 8003fdc:	f000 fcb2 	bl	8004944 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003fe0:	f000 fd2c 	bl	8004a3c <MX_TIM3_Init>
  MX_TIM4_Init();
 8003fe4:	f000 fd90 	bl	8004b08 <MX_TIM4_Init>
  MX_UART4_Init();
 8003fe8:	f000 fff4 	bl	8004fd4 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8003fec:	f001 f83e 	bl	800506c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8003ff0:	f001 f8d8 	bl	80051a4 <MX_USART6_UART_Init>
  MX_TIM13_Init();
 8003ff4:	f000 fe74 	bl	8004ce0 <MX_TIM13_Init>
  MX_FATFS_Init();
 8003ff8:	f00d ff3c 	bl	8011e74 <MX_FATFS_Init>
  MX_TIM6_Init();
 8003ffc:	f000 fe00 	bl	8004c00 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 8004000:	f001 f884 	bl	800510c <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8004004:	f000 fe34 	bl	8004c70 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  BMP280_init();
 8004008:	f7fd fa56 	bl	80014b8 <BMP280_init>
  SD_init();
 800400c:	f7ff f8d8 	bl	80031c0 <SD_init>
  SBUS_init();
 8004010:	f7fe fa20 	bl	8002454 <SBUS_init>
  HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 8004014:	2201      	movs	r2, #1
 8004016:	490c      	ldr	r1, [pc, #48]	@ (8004048 <main+0x94>)
 8004018:	480c      	ldr	r0, [pc, #48]	@ (800404c <main+0x98>)
 800401a:	f00a fcef 	bl	800e9fc <HAL_UART_Receive_DMA>
  HAL_UART_Receive_IT(&huart6, &LR03_RxByte,1);
 800401e:	2201      	movs	r2, #1
 8004020:	490b      	ldr	r1, [pc, #44]	@ (8004050 <main+0x9c>)
 8004022:	480c      	ldr	r0, [pc, #48]	@ (8004054 <main+0xa0>)
 8004024:	f00a fc9e 	bl	800e964 <HAL_UART_Receive_IT>
  NMEA_init(&huart4, &hdma_uart4_rx);
 8004028:	490b      	ldr	r1, [pc, #44]	@ (8004058 <main+0xa4>)
 800402a:	480c      	ldr	r0, [pc, #48]	@ (800405c <main+0xa8>)
 800402c:	f7ff fe18 	bl	8003c60 <NMEA_init>
  HAL_TIM_Base_Start_IT(&htim6);
 8004030:	480b      	ldr	r0, [pc, #44]	@ (8004060 <main+0xac>)
 8004032:	f009 fab5 	bl	800d5a0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8004036:	480b      	ldr	r0, [pc, #44]	@ (8004064 <main+0xb0>)
 8004038:	f009 fab2 	bl	800d5a0 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  NMEA_process_task();
 800403c:	f7ff ff76 	bl	8003f2c <NMEA_process_task>
	  LR03_StateMachine();
 8004040:	f7fe f98c 	bl	800235c <LR03_StateMachine>
	  NMEA_process_task();
 8004044:	bf00      	nop
 8004046:	e7f9      	b.n	800403c <main+0x88>
 8004048:	24000403 	.word	0x24000403
 800404c:	24005308 	.word	0x24005308
 8004050:	24004efc 	.word	0x24004efc
 8004054:	2400539c 	.word	0x2400539c
 8004058:	24005430 	.word	0x24005430
 800405c:	240051e0 	.word	0x240051e0
 8004060:	240050fc 	.word	0x240050fc
 8004064:	24005148 	.word	0x24005148

08004068 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b09c      	sub	sp, #112	@ 0x70
 800406c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800406e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004072:	224c      	movs	r2, #76	@ 0x4c
 8004074:	2100      	movs	r1, #0
 8004076:	4618      	mov	r0, r3
 8004078:	f013 fcc5 	bl	8017a06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800407c:	1d3b      	adds	r3, r7, #4
 800407e:	2220      	movs	r2, #32
 8004080:	2100      	movs	r1, #0
 8004082:	4618      	mov	r0, r3
 8004084:	f013 fcbf 	bl	8017a06 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8004088:	4b30      	ldr	r3, [pc, #192]	@ (800414c <SystemClock_Config+0xe4>)
 800408a:	f04f 32ff 	mov.w	r2, #4294967295
 800408e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8004092:	2002      	movs	r0, #2
 8004094:	f005 faae 	bl	80095f4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8004098:	2300      	movs	r3, #0
 800409a:	603b      	str	r3, [r7, #0]
 800409c:	4b2c      	ldr	r3, [pc, #176]	@ (8004150 <SystemClock_Config+0xe8>)
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	4a2b      	ldr	r2, [pc, #172]	@ (8004150 <SystemClock_Config+0xe8>)
 80040a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80040a6:	6193      	str	r3, [r2, #24]
 80040a8:	4b29      	ldr	r3, [pc, #164]	@ (8004150 <SystemClock_Config+0xe8>)
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80040b0:	603b      	str	r3, [r7, #0]
 80040b2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80040b4:	bf00      	nop
 80040b6:	4b26      	ldr	r3, [pc, #152]	@ (8004150 <SystemClock_Config+0xe8>)
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040c2:	d1f8      	bne.n	80040b6 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80040c4:	2302      	movs	r3, #2
 80040c6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80040c8:	2301      	movs	r3, #1
 80040ca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80040cc:	2340      	movs	r3, #64	@ 0x40
 80040ce:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80040d0:	2302      	movs	r3, #2
 80040d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80040d4:	2300      	movs	r3, #0
 80040d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80040d8:	2304      	movs	r3, #4
 80040da:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 80040dc:	2323      	movs	r3, #35	@ 0x23
 80040de:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80040e0:	2302      	movs	r3, #2
 80040e2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80040e4:	2302      	movs	r3, #2
 80040e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80040e8:	2302      	movs	r3, #2
 80040ea:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80040ec:	230c      	movs	r3, #12
 80040ee:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80040f0:	2300      	movs	r3, #0
 80040f2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80040f4:	2300      	movs	r3, #0
 80040f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80040f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040fc:	4618      	mov	r0, r3
 80040fe:	f005 fab3 	bl	8009668 <HAL_RCC_OscConfig>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8004108:	f000 f8b6 	bl	8004278 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800410c:	233f      	movs	r3, #63	@ 0x3f
 800410e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004110:	2303      	movs	r3, #3
 8004112:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8004114:	2300      	movs	r3, #0
 8004116:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8004118:	2300      	movs	r3, #0
 800411a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800411c:	2340      	movs	r3, #64	@ 0x40
 800411e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8004120:	2340      	movs	r3, #64	@ 0x40
 8004122:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8004124:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004128:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800412a:	2340      	movs	r3, #64	@ 0x40
 800412c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800412e:	1d3b      	adds	r3, r7, #4
 8004130:	2106      	movs	r1, #6
 8004132:	4618      	mov	r0, r3
 8004134:	f005 feca 	bl	8009ecc <HAL_RCC_ClockConfig>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <SystemClock_Config+0xda>
  {
    Error_Handler();
 800413e:	f000 f89b 	bl	8004278 <Error_Handler>
  }
}
 8004142:	bf00      	nop
 8004144:	3770      	adds	r7, #112	@ 0x70
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	58024400 	.word	0x58024400
 8004150:	58024800 	.word	0x58024800

08004154 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART1){
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a13      	ldr	r2, [pc, #76]	@ (80041b0 <HAL_UART_RxCpltCallback+0x5c>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d10a      	bne.n	800417c <HAL_UART_RxCpltCallback+0x28>
		SBUS_Receive(SBUS_RxBuffer);
 8004166:	4b13      	ldr	r3, [pc, #76]	@ (80041b4 <HAL_UART_RxCpltCallback+0x60>)
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	4618      	mov	r0, r3
 800416c:	f7fe f980 	bl	8002470 <SBUS_Receive>
		HAL_UART_Receive_DMA(&huart1, &SBUS_RxBuffer, 1);
 8004170:	2201      	movs	r2, #1
 8004172:	4910      	ldr	r1, [pc, #64]	@ (80041b4 <HAL_UART_RxCpltCallback+0x60>)
 8004174:	4810      	ldr	r0, [pc, #64]	@ (80041b8 <HAL_UART_RxCpltCallback+0x64>)
 8004176:	f00a fc41 	bl	800e9fc <HAL_UART_Receive_DMA>
    }
    else if(huart -> Instance == USART6){
    	LR03_Receive(LR03_RxByte);
    	//HAL_UART_Receive_IT(&huart6, &LR03_RxByte,1);
    }
}
 800417a:	e014      	b.n	80041a6 <HAL_UART_RxCpltCallback+0x52>
    else if (huart -> Instance == USART3){
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a0e      	ldr	r2, [pc, #56]	@ (80041bc <HAL_UART_RxCpltCallback+0x68>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d105      	bne.n	8004192 <HAL_UART_RxCpltCallback+0x3e>
        BNO_Receive(BNO_BufferByte);
 8004186:	4b0e      	ldr	r3, [pc, #56]	@ (80041c0 <HAL_UART_RxCpltCallback+0x6c>)
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	4618      	mov	r0, r3
 800418c:	f7fd fece 	bl	8001f2c <BNO_Receive>
}
 8004190:	e009      	b.n	80041a6 <HAL_UART_RxCpltCallback+0x52>
    else if(huart -> Instance == USART6){
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a0b      	ldr	r2, [pc, #44]	@ (80041c4 <HAL_UART_RxCpltCallback+0x70>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d104      	bne.n	80041a6 <HAL_UART_RxCpltCallback+0x52>
    	LR03_Receive(LR03_RxByte);
 800419c:	4b0a      	ldr	r3, [pc, #40]	@ (80041c8 <HAL_UART_RxCpltCallback+0x74>)
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7fe f8bf 	bl	8002324 <LR03_Receive>
}
 80041a6:	bf00      	nop
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	40011000 	.word	0x40011000
 80041b4:	240005d1 	.word	0x240005d1
 80041b8:	24005274 	.word	0x24005274
 80041bc:	40004800 	.word	0x40004800
 80041c0:	24000403 	.word	0x24000403
 80041c4:	40011400 	.word	0x40011400
 80041c8:	24004efc 	.word	0x24004efc

080041cc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
	//Interrupción cada 1 ms
	if (htim -> Instance == TIM6){
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a0e      	ldr	r2, [pc, #56]	@ (8004214 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d108      	bne.n	80041f0 <HAL_TIM_PeriodElapsedCallback+0x24>
		TimeOn_Counter++;
 80041de:	4b0e      	ldr	r3, [pc, #56]	@ (8004218 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	3301      	adds	r3, #1
 80041e4:	4a0c      	ldr	r2, [pc, #48]	@ (8004218 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80041e6:	6013      	str	r3, [r2, #0]
		LED_Tasks();
 80041e8:	f7fe f804 	bl	80021f4 <LED_Tasks>
		SBUS_IntegrityVerification();
 80041ec:	f7fe fd12 	bl	8002c14 <SBUS_IntegrityVerification>
	}
	//Interrupción cada 10 ms
	if (htim -> Instance == TIM7){
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a09      	ldr	r2, [pc, #36]	@ (800421c <HAL_TIM_PeriodElapsedCallback+0x50>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d107      	bne.n	800420a <HAL_TIM_PeriodElapsedCallback+0x3e>
		BNO_Tasks();
 80041fa:	f7fd ff37 	bl	800206c <BNO_Tasks>
		BMP280_calculate();
 80041fe:	f7fd f981 	bl	8001504 <BMP280_calculate>

		PWM_Assing();
 8004202:	f7fe f8c3 	bl	800238c <PWM_Assing>
		SD_blackbox_write();
 8004206:	f7fe ff79 	bl	80030fc <SD_blackbox_write>
	}
}
 800420a:	bf00      	nop
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	40001000 	.word	0x40001000
 8004218:	24004f00 	.word	0x24004f00
 800421c:	40001400 	.word	0x40001400

08004220 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8004226:	463b      	mov	r3, r7
 8004228:	2200      	movs	r2, #0
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	605a      	str	r2, [r3, #4]
 800422e:	609a      	str	r2, [r3, #8]
 8004230:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8004232:	f001 fc1b 	bl	8005a6c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004236:	2301      	movs	r3, #1
 8004238:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800423a:	2300      	movs	r3, #0
 800423c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800423e:	2300      	movs	r3, #0
 8004240:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8004242:	231f      	movs	r3, #31
 8004244:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8004246:	2387      	movs	r3, #135	@ 0x87
 8004248:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800424a:	2300      	movs	r3, #0
 800424c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800424e:	2300      	movs	r3, #0
 8004250:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8004252:	2301      	movs	r3, #1
 8004254:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8004256:	2301      	movs	r3, #1
 8004258:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800425a:	2300      	movs	r3, #0
 800425c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800425e:	2300      	movs	r3, #0
 8004260:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8004262:	463b      	mov	r3, r7
 8004264:	4618      	mov	r0, r3
 8004266:	f001 fc39 	bl	8005adc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800426a:	2004      	movs	r0, #4
 800426c:	f001 fc16 	bl	8005a9c <HAL_MPU_Enable>

}
 8004270:	bf00      	nop
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800427c:	b672      	cpsid	i
}
 800427e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004280:	bf00      	nop
 8004282:	e7fd      	b.n	8004280 <Error_Handler+0x8>

08004284 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004288:	4b27      	ldr	r3, [pc, #156]	@ (8004328 <MX_SPI1_Init+0xa4>)
 800428a:	4a28      	ldr	r2, [pc, #160]	@ (800432c <MX_SPI1_Init+0xa8>)
 800428c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800428e:	4b26      	ldr	r3, [pc, #152]	@ (8004328 <MX_SPI1_Init+0xa4>)
 8004290:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8004294:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004296:	4b24      	ldr	r3, [pc, #144]	@ (8004328 <MX_SPI1_Init+0xa4>)
 8004298:	2200      	movs	r2, #0
 800429a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800429c:	4b22      	ldr	r3, [pc, #136]	@ (8004328 <MX_SPI1_Init+0xa4>)
 800429e:	2207      	movs	r2, #7
 80042a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80042a2:	4b21      	ldr	r3, [pc, #132]	@ (8004328 <MX_SPI1_Init+0xa4>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80042a8:	4b1f      	ldr	r3, [pc, #124]	@ (8004328 <MX_SPI1_Init+0xa4>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80042ae:	4b1e      	ldr	r3, [pc, #120]	@ (8004328 <MX_SPI1_Init+0xa4>)
 80042b0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80042b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80042b6:	4b1c      	ldr	r3, [pc, #112]	@ (8004328 <MX_SPI1_Init+0xa4>)
 80042b8:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 80042bc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80042be:	4b1a      	ldr	r3, [pc, #104]	@ (8004328 <MX_SPI1_Init+0xa4>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80042c4:	4b18      	ldr	r3, [pc, #96]	@ (8004328 <MX_SPI1_Init+0xa4>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042ca:	4b17      	ldr	r3, [pc, #92]	@ (8004328 <MX_SPI1_Init+0xa4>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80042d0:	4b15      	ldr	r3, [pc, #84]	@ (8004328 <MX_SPI1_Init+0xa4>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80042d6:	4b14      	ldr	r3, [pc, #80]	@ (8004328 <MX_SPI1_Init+0xa4>)
 80042d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80042dc:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80042de:	4b12      	ldr	r3, [pc, #72]	@ (8004328 <MX_SPI1_Init+0xa4>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80042e4:	4b10      	ldr	r3, [pc, #64]	@ (8004328 <MX_SPI1_Init+0xa4>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80042ea:	4b0f      	ldr	r3, [pc, #60]	@ (8004328 <MX_SPI1_Init+0xa4>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80042f0:	4b0d      	ldr	r3, [pc, #52]	@ (8004328 <MX_SPI1_Init+0xa4>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80042f6:	4b0c      	ldr	r3, [pc, #48]	@ (8004328 <MX_SPI1_Init+0xa4>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80042fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004328 <MX_SPI1_Init+0xa4>)
 80042fe:	2200      	movs	r2, #0
 8004300:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004302:	4b09      	ldr	r3, [pc, #36]	@ (8004328 <MX_SPI1_Init+0xa4>)
 8004304:	2200      	movs	r2, #0
 8004306:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004308:	4b07      	ldr	r3, [pc, #28]	@ (8004328 <MX_SPI1_Init+0xa4>)
 800430a:	2200      	movs	r2, #0
 800430c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800430e:	4b06      	ldr	r3, [pc, #24]	@ (8004328 <MX_SPI1_Init+0xa4>)
 8004310:	2200      	movs	r2, #0
 8004312:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004314:	4804      	ldr	r0, [pc, #16]	@ (8004328 <MX_SPI1_Init+0xa4>)
 8004316:	f007 ff45 	bl	800c1a4 <HAL_SPI_Init>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d001      	beq.n	8004324 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8004320:	f7ff ffaa 	bl	8004278 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004324:	bf00      	nop
 8004326:	bd80      	pop	{r7, pc}
 8004328:	24004f04 	.word	0x24004f04
 800432c:	40013000 	.word	0x40013000

08004330 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8004334:	4b27      	ldr	r3, [pc, #156]	@ (80043d4 <MX_SPI2_Init+0xa4>)
 8004336:	4a28      	ldr	r2, [pc, #160]	@ (80043d8 <MX_SPI2_Init+0xa8>)
 8004338:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800433a:	4b26      	ldr	r3, [pc, #152]	@ (80043d4 <MX_SPI2_Init+0xa4>)
 800433c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8004340:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004342:	4b24      	ldr	r3, [pc, #144]	@ (80043d4 <MX_SPI2_Init+0xa4>)
 8004344:	2200      	movs	r2, #0
 8004346:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004348:	4b22      	ldr	r3, [pc, #136]	@ (80043d4 <MX_SPI2_Init+0xa4>)
 800434a:	2207      	movs	r2, #7
 800434c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800434e:	4b21      	ldr	r3, [pc, #132]	@ (80043d4 <MX_SPI2_Init+0xa4>)
 8004350:	2200      	movs	r2, #0
 8004352:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004354:	4b1f      	ldr	r3, [pc, #124]	@ (80043d4 <MX_SPI2_Init+0xa4>)
 8004356:	2200      	movs	r2, #0
 8004358:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800435a:	4b1e      	ldr	r3, [pc, #120]	@ (80043d4 <MX_SPI2_Init+0xa4>)
 800435c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004360:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8004362:	4b1c      	ldr	r3, [pc, #112]	@ (80043d4 <MX_SPI2_Init+0xa4>)
 8004364:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8004368:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800436a:	4b1a      	ldr	r3, [pc, #104]	@ (80043d4 <MX_SPI2_Init+0xa4>)
 800436c:	2200      	movs	r2, #0
 800436e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004370:	4b18      	ldr	r3, [pc, #96]	@ (80043d4 <MX_SPI2_Init+0xa4>)
 8004372:	2200      	movs	r2, #0
 8004374:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004376:	4b17      	ldr	r3, [pc, #92]	@ (80043d4 <MX_SPI2_Init+0xa4>)
 8004378:	2200      	movs	r2, #0
 800437a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800437c:	4b15      	ldr	r3, [pc, #84]	@ (80043d4 <MX_SPI2_Init+0xa4>)
 800437e:	2200      	movs	r2, #0
 8004380:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004382:	4b14      	ldr	r3, [pc, #80]	@ (80043d4 <MX_SPI2_Init+0xa4>)
 8004384:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004388:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800438a:	4b12      	ldr	r3, [pc, #72]	@ (80043d4 <MX_SPI2_Init+0xa4>)
 800438c:	2200      	movs	r2, #0
 800438e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004390:	4b10      	ldr	r3, [pc, #64]	@ (80043d4 <MX_SPI2_Init+0xa4>)
 8004392:	2200      	movs	r2, #0
 8004394:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004396:	4b0f      	ldr	r3, [pc, #60]	@ (80043d4 <MX_SPI2_Init+0xa4>)
 8004398:	2200      	movs	r2, #0
 800439a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800439c:	4b0d      	ldr	r3, [pc, #52]	@ (80043d4 <MX_SPI2_Init+0xa4>)
 800439e:	2200      	movs	r2, #0
 80043a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80043a2:	4b0c      	ldr	r3, [pc, #48]	@ (80043d4 <MX_SPI2_Init+0xa4>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80043a8:	4b0a      	ldr	r3, [pc, #40]	@ (80043d4 <MX_SPI2_Init+0xa4>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80043ae:	4b09      	ldr	r3, [pc, #36]	@ (80043d4 <MX_SPI2_Init+0xa4>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80043b4:	4b07      	ldr	r3, [pc, #28]	@ (80043d4 <MX_SPI2_Init+0xa4>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80043ba:	4b06      	ldr	r3, [pc, #24]	@ (80043d4 <MX_SPI2_Init+0xa4>)
 80043bc:	2200      	movs	r2, #0
 80043be:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80043c0:	4804      	ldr	r0, [pc, #16]	@ (80043d4 <MX_SPI2_Init+0xa4>)
 80043c2:	f007 feef 	bl	800c1a4 <HAL_SPI_Init>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 80043cc:	f7ff ff54 	bl	8004278 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80043d0:	bf00      	nop
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	24004f8c 	.word	0x24004f8c
 80043d8:	40003800 	.word	0x40003800

080043dc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b0bc      	sub	sp, #240	@ 0xf0
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043e4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]
 80043ec:	605a      	str	r2, [r3, #4]
 80043ee:	609a      	str	r2, [r3, #8]
 80043f0:	60da      	str	r2, [r3, #12]
 80043f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80043f4:	f107 0318 	add.w	r3, r7, #24
 80043f8:	22c0      	movs	r2, #192	@ 0xc0
 80043fa:	2100      	movs	r1, #0
 80043fc:	4618      	mov	r0, r3
 80043fe:	f013 fb02 	bl	8017a06 <memset>
  if(spiHandle->Instance==SPI1)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a4c      	ldr	r2, [pc, #304]	@ (8004538 <HAL_SPI_MspInit+0x15c>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d145      	bne.n	8004498 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800440c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004410:	f04f 0300 	mov.w	r3, #0
 8004414:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8004418:	2300      	movs	r3, #0
 800441a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800441c:	f107 0318 	add.w	r3, r7, #24
 8004420:	4618      	mov	r0, r3
 8004422:	f006 f8df 	bl	800a5e4 <HAL_RCCEx_PeriphCLKConfig>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800442c:	f7ff ff24 	bl	8004278 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004430:	4b42      	ldr	r3, [pc, #264]	@ (800453c <HAL_SPI_MspInit+0x160>)
 8004432:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8004436:	4a41      	ldr	r2, [pc, #260]	@ (800453c <HAL_SPI_MspInit+0x160>)
 8004438:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800443c:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8004440:	4b3e      	ldr	r3, [pc, #248]	@ (800453c <HAL_SPI_MspInit+0x160>)
 8004442:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8004446:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800444a:	617b      	str	r3, [r7, #20]
 800444c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800444e:	4b3b      	ldr	r3, [pc, #236]	@ (800453c <HAL_SPI_MspInit+0x160>)
 8004450:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004454:	4a39      	ldr	r2, [pc, #228]	@ (800453c <HAL_SPI_MspInit+0x160>)
 8004456:	f043 0301 	orr.w	r3, r3, #1
 800445a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800445e:	4b37      	ldr	r3, [pc, #220]	@ (800453c <HAL_SPI_MspInit+0x160>)
 8004460:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	613b      	str	r3, [r7, #16]
 800446a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 800446c:	23e0      	movs	r3, #224	@ 0xe0
 800446e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004472:	2302      	movs	r3, #2
 8004474:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004478:	2300      	movs	r3, #0
 800447a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800447e:	2300      	movs	r3, #0
 8004480:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004484:	2305      	movs	r3, #5
 8004486:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800448a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800448e:	4619      	mov	r1, r3
 8004490:	482b      	ldr	r0, [pc, #172]	@ (8004540 <HAL_SPI_MspInit+0x164>)
 8004492:	f004 fdb1 	bl	8008ff8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8004496:	e04a      	b.n	800452e <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI2)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a29      	ldr	r2, [pc, #164]	@ (8004544 <HAL_SPI_MspInit+0x168>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d145      	bne.n	800452e <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80044a2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80044a6:	f04f 0300 	mov.w	r3, #0
 80044aa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80044ae:	2300      	movs	r3, #0
 80044b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80044b2:	f107 0318 	add.w	r3, r7, #24
 80044b6:	4618      	mov	r0, r3
 80044b8:	f006 f894 	bl	800a5e4 <HAL_RCCEx_PeriphCLKConfig>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 80044c2:	f7ff fed9 	bl	8004278 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80044c6:	4b1d      	ldr	r3, [pc, #116]	@ (800453c <HAL_SPI_MspInit+0x160>)
 80044c8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80044cc:	4a1b      	ldr	r2, [pc, #108]	@ (800453c <HAL_SPI_MspInit+0x160>)
 80044ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044d2:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80044d6:	4b19      	ldr	r3, [pc, #100]	@ (800453c <HAL_SPI_MspInit+0x160>)
 80044d8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80044dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044e0:	60fb      	str	r3, [r7, #12]
 80044e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044e4:	4b15      	ldr	r3, [pc, #84]	@ (800453c <HAL_SPI_MspInit+0x160>)
 80044e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80044ea:	4a14      	ldr	r2, [pc, #80]	@ (800453c <HAL_SPI_MspInit+0x160>)
 80044ec:	f043 0302 	orr.w	r3, r3, #2
 80044f0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80044f4:	4b11      	ldr	r3, [pc, #68]	@ (800453c <HAL_SPI_MspInit+0x160>)
 80044f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	60bb      	str	r3, [r7, #8]
 8004500:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BMP_SCK_Pin|BMP_MISO_Pin|BMP_MOSI_Pin;
 8004502:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8004506:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800450a:	2302      	movs	r3, #2
 800450c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004510:	2300      	movs	r3, #0
 8004512:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004516:	2300      	movs	r3, #0
 8004518:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800451c:	2305      	movs	r3, #5
 800451e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004522:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8004526:	4619      	mov	r1, r3
 8004528:	4807      	ldr	r0, [pc, #28]	@ (8004548 <HAL_SPI_MspInit+0x16c>)
 800452a:	f004 fd65 	bl	8008ff8 <HAL_GPIO_Init>
}
 800452e:	bf00      	nop
 8004530:	37f0      	adds	r7, #240	@ 0xf0
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	40013000 	.word	0x40013000
 800453c:	58024400 	.word	0x58024400
 8004540:	58020000 	.word	0x58020000
 8004544:	40003800 	.word	0x40003800
 8004548:	58020400 	.word	0x58020400

0800454c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004552:	4b0a      	ldr	r3, [pc, #40]	@ (800457c <HAL_MspInit+0x30>)
 8004554:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8004558:	4a08      	ldr	r2, [pc, #32]	@ (800457c <HAL_MspInit+0x30>)
 800455a:	f043 0302 	orr.w	r3, r3, #2
 800455e:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8004562:	4b06      	ldr	r3, [pc, #24]	@ (800457c <HAL_MspInit+0x30>)
 8004564:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	607b      	str	r3, [r7, #4]
 800456e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr
 800457c:	58024400 	.word	0x58024400

08004580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004580:	b480      	push	{r7}
 8004582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004584:	bf00      	nop
 8004586:	e7fd      	b.n	8004584 <NMI_Handler+0x4>

08004588 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004588:	b480      	push	{r7}
 800458a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800458c:	bf00      	nop
 800458e:	e7fd      	b.n	800458c <HardFault_Handler+0x4>

08004590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004590:	b480      	push	{r7}
 8004592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004594:	bf00      	nop
 8004596:	e7fd      	b.n	8004594 <MemManage_Handler+0x4>

08004598 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004598:	b480      	push	{r7}
 800459a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800459c:	bf00      	nop
 800459e:	e7fd      	b.n	800459c <BusFault_Handler+0x4>

080045a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80045a0:	b480      	push	{r7}
 80045a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80045a4:	bf00      	nop
 80045a6:	e7fd      	b.n	80045a4 <UsageFault_Handler+0x4>

080045a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80045a8:	b480      	push	{r7}
 80045aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80045ac:	bf00      	nop
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr

080045b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80045b6:	b480      	push	{r7}
 80045b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80045ba:	bf00      	nop
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80045c8:	bf00      	nop
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
	...

080045d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  if(Timer1 > 0)
 80045d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004608 <SysTick_Handler+0x34>)
 80045da:	881b      	ldrh	r3, [r3, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d005      	beq.n	80045ec <SysTick_Handler+0x18>
	    Timer1--;
 80045e0:	4b09      	ldr	r3, [pc, #36]	@ (8004608 <SysTick_Handler+0x34>)
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	3b01      	subs	r3, #1
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	4b07      	ldr	r3, [pc, #28]	@ (8004608 <SysTick_Handler+0x34>)
 80045ea:	801a      	strh	r2, [r3, #0]
	  if(Timer2 > 0)
 80045ec:	4b07      	ldr	r3, [pc, #28]	@ (800460c <SysTick_Handler+0x38>)
 80045ee:	881b      	ldrh	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d005      	beq.n	8004600 <SysTick_Handler+0x2c>
	    Timer2--;
 80045f4:	4b05      	ldr	r3, [pc, #20]	@ (800460c <SysTick_Handler+0x38>)
 80045f6:	881b      	ldrh	r3, [r3, #0]
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	4b03      	ldr	r3, [pc, #12]	@ (800460c <SysTick_Handler+0x38>)
 80045fe:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004600:	f001 f8e0 	bl	80057c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004604:	bf00      	nop
 8004606:	bd80      	pop	{r7, pc}
 8004608:	240055a4 	.word	0x240055a4
 800460c:	240055a6 	.word	0x240055a6

08004610 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004614:	4802      	ldr	r0, [pc, #8]	@ (8004620 <DMA1_Stream0_IRQHandler+0x10>)
 8004616:	f002 fdfd 	bl	8007214 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800461a:	bf00      	nop
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	240054a8 	.word	0x240054a8

08004624 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004628:	4802      	ldr	r0, [pc, #8]	@ (8004634 <DMA1_Stream1_IRQHandler+0x10>)
 800462a:	f002 fdf3 	bl	8007214 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800462e:	bf00      	nop
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	24005520 	.word	0x24005520

08004638 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800463c:	4802      	ldr	r0, [pc, #8]	@ (8004648 <DMA1_Stream2_IRQHandler+0x10>)
 800463e:	f002 fde9 	bl	8007214 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8004642:	bf00      	nop
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	24005430 	.word	0x24005430

0800464c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004650:	4802      	ldr	r0, [pc, #8]	@ (800465c <USART1_IRQHandler+0x10>)
 8004652:	f00a fbf1 	bl	800ee38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004656:	bf00      	nop
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	24005274 	.word	0x24005274

08004660 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004664:	4802      	ldr	r0, [pc, #8]	@ (8004670 <USART3_IRQHandler+0x10>)
 8004666:	f00a fbe7 	bl	800ee38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800466a:	bf00      	nop
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	24005308 	.word	0x24005308

08004674 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	user_UART_IDLE_IT_handler();
 8004678:	f7ff fc7a 	bl	8003f70 <user_UART_IDLE_IT_handler>
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800467c:	4802      	ldr	r0, [pc, #8]	@ (8004688 <UART4_IRQHandler+0x14>)
 800467e:	f00a fbdb 	bl	800ee38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8004682:	bf00      	nop
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	240051e0 	.word	0x240051e0

0800468c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004690:	4802      	ldr	r0, [pc, #8]	@ (800469c <TIM6_DAC_IRQHandler+0x10>)
 8004692:	f009 f963 	bl	800d95c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004696:	bf00      	nop
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	240050fc 	.word	0x240050fc

080046a0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80046a4:	4802      	ldr	r0, [pc, #8]	@ (80046b0 <TIM7_IRQHandler+0x10>)
 80046a6:	f009 f959 	bl	800d95c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80046aa:	bf00      	nop
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	24005148 	.word	0x24005148

080046b4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80046b8:	4802      	ldr	r0, [pc, #8]	@ (80046c4 <USART6_IRQHandler+0x10>)
 80046ba:	f00a fbbd 	bl	800ee38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80046be:	bf00      	nop
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	2400539c 	.word	0x2400539c

080046c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80046c8:	b480      	push	{r7}
 80046ca:	af00      	add	r7, sp, #0
  return 1;
 80046cc:	2301      	movs	r3, #1
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <_kill>:

int _kill(int pid, int sig)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80046e2:	f013 f9fd 	bl	8017ae0 <__errno>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2216      	movs	r2, #22
 80046ea:	601a      	str	r2, [r3, #0]
  return -1;
 80046ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <_exit>:

void _exit (int status)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004700:	f04f 31ff 	mov.w	r1, #4294967295
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f7ff ffe7 	bl	80046d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800470a:	bf00      	nop
 800470c:	e7fd      	b.n	800470a <_exit+0x12>

0800470e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b086      	sub	sp, #24
 8004712:	af00      	add	r7, sp, #0
 8004714:	60f8      	str	r0, [r7, #12]
 8004716:	60b9      	str	r1, [r7, #8]
 8004718:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800471a:	2300      	movs	r3, #0
 800471c:	617b      	str	r3, [r7, #20]
 800471e:	e00a      	b.n	8004736 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004720:	f3af 8000 	nop.w
 8004724:	4601      	mov	r1, r0
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	1c5a      	adds	r2, r3, #1
 800472a:	60ba      	str	r2, [r7, #8]
 800472c:	b2ca      	uxtb	r2, r1
 800472e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	3301      	adds	r3, #1
 8004734:	617b      	str	r3, [r7, #20]
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	429a      	cmp	r2, r3
 800473c:	dbf0      	blt.n	8004720 <_read+0x12>
  }

  return len;
 800473e:	687b      	ldr	r3, [r7, #4]
}
 8004740:	4618      	mov	r0, r3
 8004742:	3718      	adds	r7, #24
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004754:	2300      	movs	r3, #0
 8004756:	617b      	str	r3, [r7, #20]
 8004758:	e009      	b.n	800476e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	1c5a      	adds	r2, r3, #1
 800475e:	60ba      	str	r2, [r7, #8]
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	4618      	mov	r0, r3
 8004764:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	3301      	adds	r3, #1
 800476c:	617b      	str	r3, [r7, #20]
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	429a      	cmp	r2, r3
 8004774:	dbf1      	blt.n	800475a <_write+0x12>
  }
  return len;
 8004776:	687b      	ldr	r3, [r7, #4]
}
 8004778:	4618      	mov	r0, r3
 800477a:	3718      	adds	r7, #24
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <_close>:

int _close(int file)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004788:	f04f 33ff 	mov.w	r3, #4294967295
}
 800478c:	4618      	mov	r0, r3
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80047a8:	605a      	str	r2, [r3, #4]
  return 0;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <_isatty>:

int _isatty(int file)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80047c0:	2301      	movs	r3, #1
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr

080047ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80047ce:	b480      	push	{r7}
 80047d0:	b085      	sub	sp, #20
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	60f8      	str	r0, [r7, #12]
 80047d6:	60b9      	str	r1, [r7, #8]
 80047d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3714      	adds	r7, #20
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80047f0:	4a14      	ldr	r2, [pc, #80]	@ (8004844 <_sbrk+0x5c>)
 80047f2:	4b15      	ldr	r3, [pc, #84]	@ (8004848 <_sbrk+0x60>)
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80047fc:	4b13      	ldr	r3, [pc, #76]	@ (800484c <_sbrk+0x64>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d102      	bne.n	800480a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004804:	4b11      	ldr	r3, [pc, #68]	@ (800484c <_sbrk+0x64>)
 8004806:	4a12      	ldr	r2, [pc, #72]	@ (8004850 <_sbrk+0x68>)
 8004808:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800480a:	4b10      	ldr	r3, [pc, #64]	@ (800484c <_sbrk+0x64>)
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4413      	add	r3, r2
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	429a      	cmp	r2, r3
 8004816:	d207      	bcs.n	8004828 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004818:	f013 f962 	bl	8017ae0 <__errno>
 800481c:	4603      	mov	r3, r0
 800481e:	220c      	movs	r2, #12
 8004820:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004822:	f04f 33ff 	mov.w	r3, #4294967295
 8004826:	e009      	b.n	800483c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004828:	4b08      	ldr	r3, [pc, #32]	@ (800484c <_sbrk+0x64>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800482e:	4b07      	ldr	r3, [pc, #28]	@ (800484c <_sbrk+0x64>)
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4413      	add	r3, r2
 8004836:	4a05      	ldr	r2, [pc, #20]	@ (800484c <_sbrk+0x64>)
 8004838:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800483a:	68fb      	ldr	r3, [r7, #12]
}
 800483c:	4618      	mov	r0, r3
 800483e:	3718      	adds	r7, #24
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	24100000 	.word	0x24100000
 8004848:	00000400 	.word	0x00000400
 800484c:	24005014 	.word	0x24005014
 8004850:	24005930 	.word	0x24005930

08004854 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004854:	b480      	push	{r7}
 8004856:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004858:	4b32      	ldr	r3, [pc, #200]	@ (8004924 <SystemInit+0xd0>)
 800485a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800485e:	4a31      	ldr	r2, [pc, #196]	@ (8004924 <SystemInit+0xd0>)
 8004860:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004864:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004868:	4b2f      	ldr	r3, [pc, #188]	@ (8004928 <SystemInit+0xd4>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 030f 	and.w	r3, r3, #15
 8004870:	2b02      	cmp	r3, #2
 8004872:	d807      	bhi.n	8004884 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004874:	4b2c      	ldr	r3, [pc, #176]	@ (8004928 <SystemInit+0xd4>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f023 030f 	bic.w	r3, r3, #15
 800487c:	4a2a      	ldr	r2, [pc, #168]	@ (8004928 <SystemInit+0xd4>)
 800487e:	f043 0303 	orr.w	r3, r3, #3
 8004882:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004884:	4b29      	ldr	r3, [pc, #164]	@ (800492c <SystemInit+0xd8>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a28      	ldr	r2, [pc, #160]	@ (800492c <SystemInit+0xd8>)
 800488a:	f043 0301 	orr.w	r3, r3, #1
 800488e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004890:	4b26      	ldr	r3, [pc, #152]	@ (800492c <SystemInit+0xd8>)
 8004892:	2200      	movs	r2, #0
 8004894:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004896:	4b25      	ldr	r3, [pc, #148]	@ (800492c <SystemInit+0xd8>)
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	4924      	ldr	r1, [pc, #144]	@ (800492c <SystemInit+0xd8>)
 800489c:	4b24      	ldr	r3, [pc, #144]	@ (8004930 <SystemInit+0xdc>)
 800489e:	4013      	ands	r3, r2
 80048a0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80048a2:	4b21      	ldr	r3, [pc, #132]	@ (8004928 <SystemInit+0xd4>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 030c 	and.w	r3, r3, #12
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d007      	beq.n	80048be <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80048ae:	4b1e      	ldr	r3, [pc, #120]	@ (8004928 <SystemInit+0xd4>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f023 030f 	bic.w	r3, r3, #15
 80048b6:	4a1c      	ldr	r2, [pc, #112]	@ (8004928 <SystemInit+0xd4>)
 80048b8:	f043 0303 	orr.w	r3, r3, #3
 80048bc:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80048be:	4b1b      	ldr	r3, [pc, #108]	@ (800492c <SystemInit+0xd8>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80048c4:	4b19      	ldr	r3, [pc, #100]	@ (800492c <SystemInit+0xd8>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80048ca:	4b18      	ldr	r3, [pc, #96]	@ (800492c <SystemInit+0xd8>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80048d0:	4b16      	ldr	r3, [pc, #88]	@ (800492c <SystemInit+0xd8>)
 80048d2:	4a18      	ldr	r2, [pc, #96]	@ (8004934 <SystemInit+0xe0>)
 80048d4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80048d6:	4b15      	ldr	r3, [pc, #84]	@ (800492c <SystemInit+0xd8>)
 80048d8:	4a17      	ldr	r2, [pc, #92]	@ (8004938 <SystemInit+0xe4>)
 80048da:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80048dc:	4b13      	ldr	r3, [pc, #76]	@ (800492c <SystemInit+0xd8>)
 80048de:	4a17      	ldr	r2, [pc, #92]	@ (800493c <SystemInit+0xe8>)
 80048e0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80048e2:	4b12      	ldr	r3, [pc, #72]	@ (800492c <SystemInit+0xd8>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80048e8:	4b10      	ldr	r3, [pc, #64]	@ (800492c <SystemInit+0xd8>)
 80048ea:	4a14      	ldr	r2, [pc, #80]	@ (800493c <SystemInit+0xe8>)
 80048ec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80048ee:	4b0f      	ldr	r3, [pc, #60]	@ (800492c <SystemInit+0xd8>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80048f4:	4b0d      	ldr	r3, [pc, #52]	@ (800492c <SystemInit+0xd8>)
 80048f6:	4a11      	ldr	r2, [pc, #68]	@ (800493c <SystemInit+0xe8>)
 80048f8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80048fa:	4b0c      	ldr	r3, [pc, #48]	@ (800492c <SystemInit+0xd8>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004900:	4b0a      	ldr	r3, [pc, #40]	@ (800492c <SystemInit+0xd8>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a09      	ldr	r2, [pc, #36]	@ (800492c <SystemInit+0xd8>)
 8004906:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800490a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800490c:	4b07      	ldr	r3, [pc, #28]	@ (800492c <SystemInit+0xd8>)
 800490e:	2200      	movs	r2, #0
 8004910:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004912:	4b0b      	ldr	r3, [pc, #44]	@ (8004940 <SystemInit+0xec>)
 8004914:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8004918:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800491a:	bf00      	nop
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr
 8004924:	e000ed00 	.word	0xe000ed00
 8004928:	52002000 	.word	0x52002000
 800492c:	58024400 	.word	0x58024400
 8004930:	eaf6ed7f 	.word	0xeaf6ed7f
 8004934:	02020200 	.word	0x02020200
 8004938:	01ff0000 	.word	0x01ff0000
 800493c:	01010280 	.word	0x01010280
 8004940:	52004000 	.word	0x52004000

08004944 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b08a      	sub	sp, #40	@ 0x28
 8004948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800494a:	f107 031c 	add.w	r3, r7, #28
 800494e:	2200      	movs	r2, #0
 8004950:	601a      	str	r2, [r3, #0]
 8004952:	605a      	str	r2, [r3, #4]
 8004954:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004956:	463b      	mov	r3, r7
 8004958:	2200      	movs	r2, #0
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	605a      	str	r2, [r3, #4]
 800495e:	609a      	str	r2, [r3, #8]
 8004960:	60da      	str	r2, [r3, #12]
 8004962:	611a      	str	r2, [r3, #16]
 8004964:	615a      	str	r2, [r3, #20]
 8004966:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004968:	4b33      	ldr	r3, [pc, #204]	@ (8004a38 <MX_TIM2_Init+0xf4>)
 800496a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800496e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 280-1;
 8004970:	4b31      	ldr	r3, [pc, #196]	@ (8004a38 <MX_TIM2_Init+0xf4>)
 8004972:	f240 1217 	movw	r2, #279	@ 0x117
 8004976:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004978:	4b2f      	ldr	r3, [pc, #188]	@ (8004a38 <MX_TIM2_Init+0xf4>)
 800497a:	2200      	movs	r2, #0
 800497c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7000;
 800497e:	4b2e      	ldr	r3, [pc, #184]	@ (8004a38 <MX_TIM2_Init+0xf4>)
 8004980:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8004984:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004986:	4b2c      	ldr	r3, [pc, #176]	@ (8004a38 <MX_TIM2_Init+0xf4>)
 8004988:	2200      	movs	r2, #0
 800498a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800498c:	4b2a      	ldr	r3, [pc, #168]	@ (8004a38 <MX_TIM2_Init+0xf4>)
 800498e:	2280      	movs	r2, #128	@ 0x80
 8004990:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004992:	4829      	ldr	r0, [pc, #164]	@ (8004a38 <MX_TIM2_Init+0xf4>)
 8004994:	f008 fe7c 	bl	800d690 <HAL_TIM_PWM_Init>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 800499e:	f7ff fc6b 	bl	8004278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80049a2:	2300      	movs	r3, #0
 80049a4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80049a6:	2300      	movs	r3, #0
 80049a8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80049aa:	f107 031c 	add.w	r3, r7, #28
 80049ae:	4619      	mov	r1, r3
 80049b0:	4821      	ldr	r0, [pc, #132]	@ (8004a38 <MX_TIM2_Init+0xf4>)
 80049b2:	f009 fdb9 	bl	800e528 <HAL_TIMEx_MasterConfigSynchronization>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d001      	beq.n	80049c0 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80049bc:	f7ff fc5c 	bl	8004278 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80049c0:	2360      	movs	r3, #96	@ 0x60
 80049c2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80049c4:	2300      	movs	r3, #0
 80049c6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80049c8:	2300      	movs	r3, #0
 80049ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80049cc:	2300      	movs	r3, #0
 80049ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80049d0:	463b      	mov	r3, r7
 80049d2:	2200      	movs	r2, #0
 80049d4:	4619      	mov	r1, r3
 80049d6:	4818      	ldr	r0, [pc, #96]	@ (8004a38 <MX_TIM2_Init+0xf4>)
 80049d8:	f009 f8c8 	bl	800db6c <HAL_TIM_PWM_ConfigChannel>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80049e2:	f7ff fc49 	bl	8004278 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80049e6:	463b      	mov	r3, r7
 80049e8:	2204      	movs	r2, #4
 80049ea:	4619      	mov	r1, r3
 80049ec:	4812      	ldr	r0, [pc, #72]	@ (8004a38 <MX_TIM2_Init+0xf4>)
 80049ee:	f009 f8bd 	bl	800db6c <HAL_TIM_PWM_ConfigChannel>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d001      	beq.n	80049fc <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 80049f8:	f7ff fc3e 	bl	8004278 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80049fc:	463b      	mov	r3, r7
 80049fe:	2208      	movs	r2, #8
 8004a00:	4619      	mov	r1, r3
 8004a02:	480d      	ldr	r0, [pc, #52]	@ (8004a38 <MX_TIM2_Init+0xf4>)
 8004a04:	f009 f8b2 	bl	800db6c <HAL_TIM_PWM_ConfigChannel>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 8004a0e:	f7ff fc33 	bl	8004278 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004a12:	463b      	mov	r3, r7
 8004a14:	220c      	movs	r2, #12
 8004a16:	4619      	mov	r1, r3
 8004a18:	4807      	ldr	r0, [pc, #28]	@ (8004a38 <MX_TIM2_Init+0xf4>)
 8004a1a:	f009 f8a7 	bl	800db6c <HAL_TIM_PWM_ConfigChannel>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d001      	beq.n	8004a28 <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 8004a24:	f7ff fc28 	bl	8004278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004a28:	4803      	ldr	r0, [pc, #12]	@ (8004a38 <MX_TIM2_Init+0xf4>)
 8004a2a:	f000 fa29 	bl	8004e80 <HAL_TIM_MspPostInit>

}
 8004a2e:	bf00      	nop
 8004a30:	3728      	adds	r7, #40	@ 0x28
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	24005018 	.word	0x24005018

08004a3c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b08a      	sub	sp, #40	@ 0x28
 8004a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a42:	f107 031c 	add.w	r3, r7, #28
 8004a46:	2200      	movs	r2, #0
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	605a      	str	r2, [r3, #4]
 8004a4c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004a4e:	463b      	mov	r3, r7
 8004a50:	2200      	movs	r2, #0
 8004a52:	601a      	str	r2, [r3, #0]
 8004a54:	605a      	str	r2, [r3, #4]
 8004a56:	609a      	str	r2, [r3, #8]
 8004a58:	60da      	str	r2, [r3, #12]
 8004a5a:	611a      	str	r2, [r3, #16]
 8004a5c:	615a      	str	r2, [r3, #20]
 8004a5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004a60:	4b27      	ldr	r3, [pc, #156]	@ (8004b00 <MX_TIM3_Init+0xc4>)
 8004a62:	4a28      	ldr	r2, [pc, #160]	@ (8004b04 <MX_TIM3_Init+0xc8>)
 8004a64:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 280-1;
 8004a66:	4b26      	ldr	r3, [pc, #152]	@ (8004b00 <MX_TIM3_Init+0xc4>)
 8004a68:	f240 1217 	movw	r2, #279	@ 0x117
 8004a6c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a6e:	4b24      	ldr	r3, [pc, #144]	@ (8004b00 <MX_TIM3_Init+0xc4>)
 8004a70:	2200      	movs	r2, #0
 8004a72:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7000;
 8004a74:	4b22      	ldr	r3, [pc, #136]	@ (8004b00 <MX_TIM3_Init+0xc4>)
 8004a76:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8004a7a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a7c:	4b20      	ldr	r3, [pc, #128]	@ (8004b00 <MX_TIM3_Init+0xc4>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004a82:	4b1f      	ldr	r3, [pc, #124]	@ (8004b00 <MX_TIM3_Init+0xc4>)
 8004a84:	2280      	movs	r2, #128	@ 0x80
 8004a86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004a88:	481d      	ldr	r0, [pc, #116]	@ (8004b00 <MX_TIM3_Init+0xc4>)
 8004a8a:	f008 fe01 	bl	800d690 <HAL_TIM_PWM_Init>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d001      	beq.n	8004a98 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8004a94:	f7ff fbf0 	bl	8004278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004aa0:	f107 031c 	add.w	r3, r7, #28
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	4816      	ldr	r0, [pc, #88]	@ (8004b00 <MX_TIM3_Init+0xc4>)
 8004aa8:	f009 fd3e 	bl	800e528 <HAL_TIMEx_MasterConfigSynchronization>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d001      	beq.n	8004ab6 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8004ab2:	f7ff fbe1 	bl	8004278 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004ab6:	2360      	movs	r3, #96	@ 0x60
 8004ab8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004aba:	2300      	movs	r3, #0
 8004abc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004ac6:	463b      	mov	r3, r7
 8004ac8:	2200      	movs	r2, #0
 8004aca:	4619      	mov	r1, r3
 8004acc:	480c      	ldr	r0, [pc, #48]	@ (8004b00 <MX_TIM3_Init+0xc4>)
 8004ace:	f009 f84d 	bl	800db6c <HAL_TIM_PWM_ConfigChannel>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d001      	beq.n	8004adc <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8004ad8:	f7ff fbce 	bl	8004278 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004adc:	463b      	mov	r3, r7
 8004ade:	2204      	movs	r2, #4
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	4807      	ldr	r0, [pc, #28]	@ (8004b00 <MX_TIM3_Init+0xc4>)
 8004ae4:	f009 f842 	bl	800db6c <HAL_TIM_PWM_ConfigChannel>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8004aee:	f7ff fbc3 	bl	8004278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004af2:	4803      	ldr	r0, [pc, #12]	@ (8004b00 <MX_TIM3_Init+0xc4>)
 8004af4:	f000 f9c4 	bl	8004e80 <HAL_TIM_MspPostInit>

}
 8004af8:	bf00      	nop
 8004afa:	3728      	adds	r7, #40	@ 0x28
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	24005064 	.word	0x24005064
 8004b04:	40000400 	.word	0x40000400

08004b08 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b08a      	sub	sp, #40	@ 0x28
 8004b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b0e:	f107 031c 	add.w	r3, r7, #28
 8004b12:	2200      	movs	r2, #0
 8004b14:	601a      	str	r2, [r3, #0]
 8004b16:	605a      	str	r2, [r3, #4]
 8004b18:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004b1a:	463b      	mov	r3, r7
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	601a      	str	r2, [r3, #0]
 8004b20:	605a      	str	r2, [r3, #4]
 8004b22:	609a      	str	r2, [r3, #8]
 8004b24:	60da      	str	r2, [r3, #12]
 8004b26:	611a      	str	r2, [r3, #16]
 8004b28:	615a      	str	r2, [r3, #20]
 8004b2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004b2c:	4b32      	ldr	r3, [pc, #200]	@ (8004bf8 <MX_TIM4_Init+0xf0>)
 8004b2e:	4a33      	ldr	r2, [pc, #204]	@ (8004bfc <MX_TIM4_Init+0xf4>)
 8004b30:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 280-1;
 8004b32:	4b31      	ldr	r3, [pc, #196]	@ (8004bf8 <MX_TIM4_Init+0xf0>)
 8004b34:	f240 1217 	movw	r2, #279	@ 0x117
 8004b38:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b3a:	4b2f      	ldr	r3, [pc, #188]	@ (8004bf8 <MX_TIM4_Init+0xf0>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7000;
 8004b40:	4b2d      	ldr	r3, [pc, #180]	@ (8004bf8 <MX_TIM4_Init+0xf0>)
 8004b42:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8004b46:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b48:	4b2b      	ldr	r3, [pc, #172]	@ (8004bf8 <MX_TIM4_Init+0xf0>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004b4e:	4b2a      	ldr	r3, [pc, #168]	@ (8004bf8 <MX_TIM4_Init+0xf0>)
 8004b50:	2280      	movs	r2, #128	@ 0x80
 8004b52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004b54:	4828      	ldr	r0, [pc, #160]	@ (8004bf8 <MX_TIM4_Init+0xf0>)
 8004b56:	f008 fd9b 	bl	800d690 <HAL_TIM_PWM_Init>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d001      	beq.n	8004b64 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8004b60:	f7ff fb8a 	bl	8004278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b64:	2300      	movs	r3, #0
 8004b66:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004b6c:	f107 031c 	add.w	r3, r7, #28
 8004b70:	4619      	mov	r1, r3
 8004b72:	4821      	ldr	r0, [pc, #132]	@ (8004bf8 <MX_TIM4_Init+0xf0>)
 8004b74:	f009 fcd8 	bl	800e528 <HAL_TIMEx_MasterConfigSynchronization>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d001      	beq.n	8004b82 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8004b7e:	f7ff fb7b 	bl	8004278 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004b82:	2360      	movs	r3, #96	@ 0x60
 8004b84:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004b86:	2300      	movs	r3, #0
 8004b88:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004b92:	463b      	mov	r3, r7
 8004b94:	2200      	movs	r2, #0
 8004b96:	4619      	mov	r1, r3
 8004b98:	4817      	ldr	r0, [pc, #92]	@ (8004bf8 <MX_TIM4_Init+0xf0>)
 8004b9a:	f008 ffe7 	bl	800db6c <HAL_TIM_PWM_ConfigChannel>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d001      	beq.n	8004ba8 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8004ba4:	f7ff fb68 	bl	8004278 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004ba8:	463b      	mov	r3, r7
 8004baa:	2204      	movs	r2, #4
 8004bac:	4619      	mov	r1, r3
 8004bae:	4812      	ldr	r0, [pc, #72]	@ (8004bf8 <MX_TIM4_Init+0xf0>)
 8004bb0:	f008 ffdc 	bl	800db6c <HAL_TIM_PWM_ConfigChannel>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8004bba:	f7ff fb5d 	bl	8004278 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004bbe:	463b      	mov	r3, r7
 8004bc0:	2208      	movs	r2, #8
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	480c      	ldr	r0, [pc, #48]	@ (8004bf8 <MX_TIM4_Init+0xf0>)
 8004bc6:	f008 ffd1 	bl	800db6c <HAL_TIM_PWM_ConfigChannel>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d001      	beq.n	8004bd4 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8004bd0:	f7ff fb52 	bl	8004278 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004bd4:	463b      	mov	r3, r7
 8004bd6:	220c      	movs	r2, #12
 8004bd8:	4619      	mov	r1, r3
 8004bda:	4807      	ldr	r0, [pc, #28]	@ (8004bf8 <MX_TIM4_Init+0xf0>)
 8004bdc:	f008 ffc6 	bl	800db6c <HAL_TIM_PWM_ConfigChannel>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 8004be6:	f7ff fb47 	bl	8004278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004bea:	4803      	ldr	r0, [pc, #12]	@ (8004bf8 <MX_TIM4_Init+0xf0>)
 8004bec:	f000 f948 	bl	8004e80 <HAL_TIM_MspPostInit>

}
 8004bf0:	bf00      	nop
 8004bf2:	3728      	adds	r7, #40	@ 0x28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	240050b0 	.word	0x240050b0
 8004bfc:	40000800 	.word	0x40000800

08004c00 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c06:	1d3b      	adds	r3, r7, #4
 8004c08:	2200      	movs	r2, #0
 8004c0a:	601a      	str	r2, [r3, #0]
 8004c0c:	605a      	str	r2, [r3, #4]
 8004c0e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004c10:	4b15      	ldr	r3, [pc, #84]	@ (8004c68 <MX_TIM6_Init+0x68>)
 8004c12:	4a16      	ldr	r2, [pc, #88]	@ (8004c6c <MX_TIM6_Init+0x6c>)
 8004c14:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 999;
 8004c16:	4b14      	ldr	r3, [pc, #80]	@ (8004c68 <MX_TIM6_Init+0x68>)
 8004c18:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004c1c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c1e:	4b12      	ldr	r3, [pc, #72]	@ (8004c68 <MX_TIM6_Init+0x68>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 279;
 8004c24:	4b10      	ldr	r3, [pc, #64]	@ (8004c68 <MX_TIM6_Init+0x68>)
 8004c26:	f240 1217 	movw	r2, #279	@ 0x117
 8004c2a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c2c:	4b0e      	ldr	r3, [pc, #56]	@ (8004c68 <MX_TIM6_Init+0x68>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004c32:	480d      	ldr	r0, [pc, #52]	@ (8004c68 <MX_TIM6_Init+0x68>)
 8004c34:	f008 fc5d 	bl	800d4f2 <HAL_TIM_Base_Init>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d001      	beq.n	8004c42 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8004c3e:	f7ff fb1b 	bl	8004278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c42:	2300      	movs	r3, #0
 8004c44:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c46:	2300      	movs	r3, #0
 8004c48:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004c4a:	1d3b      	adds	r3, r7, #4
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	4806      	ldr	r0, [pc, #24]	@ (8004c68 <MX_TIM6_Init+0x68>)
 8004c50:	f009 fc6a 	bl	800e528 <HAL_TIMEx_MasterConfigSynchronization>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d001      	beq.n	8004c5e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8004c5a:	f7ff fb0d 	bl	8004278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  /* USER CODE END TIM6_Init 2 */

}
 8004c5e:	bf00      	nop
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	240050fc 	.word	0x240050fc
 8004c6c:	40001000 	.word	0x40001000

08004c70 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c76:	1d3b      	adds	r3, r7, #4
 8004c78:	2200      	movs	r2, #0
 8004c7a:	601a      	str	r2, [r3, #0]
 8004c7c:	605a      	str	r2, [r3, #4]
 8004c7e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004c80:	4b15      	ldr	r3, [pc, #84]	@ (8004cd8 <MX_TIM7_Init+0x68>)
 8004c82:	4a16      	ldr	r2, [pc, #88]	@ (8004cdc <MX_TIM7_Init+0x6c>)
 8004c84:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9999;
 8004c86:	4b14      	ldr	r3, [pc, #80]	@ (8004cd8 <MX_TIM7_Init+0x68>)
 8004c88:	f242 720f 	movw	r2, #9999	@ 0x270f
 8004c8c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c8e:	4b12      	ldr	r3, [pc, #72]	@ (8004cd8 <MX_TIM7_Init+0x68>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 279;
 8004c94:	4b10      	ldr	r3, [pc, #64]	@ (8004cd8 <MX_TIM7_Init+0x68>)
 8004c96:	f240 1217 	movw	r2, #279	@ 0x117
 8004c9a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8004cd8 <MX_TIM7_Init+0x68>)
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004ca2:	480d      	ldr	r0, [pc, #52]	@ (8004cd8 <MX_TIM7_Init+0x68>)
 8004ca4:	f008 fc25 	bl	800d4f2 <HAL_TIM_Base_Init>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8004cae:	f7ff fae3 	bl	8004278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004cba:	1d3b      	adds	r3, r7, #4
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	4806      	ldr	r0, [pc, #24]	@ (8004cd8 <MX_TIM7_Init+0x68>)
 8004cc0:	f009 fc32 	bl	800e528 <HAL_TIMEx_MasterConfigSynchronization>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8004cca:	f7ff fad5 	bl	8004278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004cce:	bf00      	nop
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	24005148 	.word	0x24005148
 8004cdc:	40001400 	.word	0x40001400

08004ce0 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004ce4:	4b0e      	ldr	r3, [pc, #56]	@ (8004d20 <MX_TIM13_Init+0x40>)
 8004ce6:	4a0f      	ldr	r2, [pc, #60]	@ (8004d24 <MX_TIM13_Init+0x44>)
 8004ce8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 280-1;
 8004cea:	4b0d      	ldr	r3, [pc, #52]	@ (8004d20 <MX_TIM13_Init+0x40>)
 8004cec:	f240 1217 	movw	r2, #279	@ 0x117
 8004cf0:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8004d20 <MX_TIM13_Init+0x40>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8004cf8:	4b09      	ldr	r3, [pc, #36]	@ (8004d20 <MX_TIM13_Init+0x40>)
 8004cfa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004cfe:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d00:	4b07      	ldr	r3, [pc, #28]	@ (8004d20 <MX_TIM13_Init+0x40>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004d06:	4b06      	ldr	r3, [pc, #24]	@ (8004d20 <MX_TIM13_Init+0x40>)
 8004d08:	2280      	movs	r2, #128	@ 0x80
 8004d0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004d0c:	4804      	ldr	r0, [pc, #16]	@ (8004d20 <MX_TIM13_Init+0x40>)
 8004d0e:	f008 fbf0 	bl	800d4f2 <HAL_TIM_Base_Init>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d001      	beq.n	8004d1c <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8004d18:	f7ff faae 	bl	8004278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8004d1c:	bf00      	nop
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	24005194 	.word	0x24005194
 8004d24:	40001c00 	.word	0x40001c00

08004d28 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b087      	sub	sp, #28
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d38:	d10f      	bne.n	8004d5a <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004d3a:	4b1f      	ldr	r3, [pc, #124]	@ (8004db8 <HAL_TIM_PWM_MspInit+0x90>)
 8004d3c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004d40:	4a1d      	ldr	r2, [pc, #116]	@ (8004db8 <HAL_TIM_PWM_MspInit+0x90>)
 8004d42:	f043 0301 	orr.w	r3, r3, #1
 8004d46:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8004d4a:	4b1b      	ldr	r3, [pc, #108]	@ (8004db8 <HAL_TIM_PWM_MspInit+0x90>)
 8004d4c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	617b      	str	r3, [r7, #20]
 8004d56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8004d58:	e028      	b.n	8004dac <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM3)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a17      	ldr	r2, [pc, #92]	@ (8004dbc <HAL_TIM_PWM_MspInit+0x94>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d10f      	bne.n	8004d84 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004d64:	4b14      	ldr	r3, [pc, #80]	@ (8004db8 <HAL_TIM_PWM_MspInit+0x90>)
 8004d66:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004d6a:	4a13      	ldr	r2, [pc, #76]	@ (8004db8 <HAL_TIM_PWM_MspInit+0x90>)
 8004d6c:	f043 0302 	orr.w	r3, r3, #2
 8004d70:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8004d74:	4b10      	ldr	r3, [pc, #64]	@ (8004db8 <HAL_TIM_PWM_MspInit+0x90>)
 8004d76:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	613b      	str	r3, [r7, #16]
 8004d80:	693b      	ldr	r3, [r7, #16]
}
 8004d82:	e013      	b.n	8004dac <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM4)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a0d      	ldr	r2, [pc, #52]	@ (8004dc0 <HAL_TIM_PWM_MspInit+0x98>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d10e      	bne.n	8004dac <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8004db8 <HAL_TIM_PWM_MspInit+0x90>)
 8004d90:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004d94:	4a08      	ldr	r2, [pc, #32]	@ (8004db8 <HAL_TIM_PWM_MspInit+0x90>)
 8004d96:	f043 0304 	orr.w	r3, r3, #4
 8004d9a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8004d9e:	4b06      	ldr	r3, [pc, #24]	@ (8004db8 <HAL_TIM_PWM_MspInit+0x90>)
 8004da0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	60fb      	str	r3, [r7, #12]
 8004daa:	68fb      	ldr	r3, [r7, #12]
}
 8004dac:	bf00      	nop
 8004dae:	371c      	adds	r7, #28
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr
 8004db8:	58024400 	.word	0x58024400
 8004dbc:	40000400 	.word	0x40000400
 8004dc0:	40000800 	.word	0x40000800

08004dc4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a27      	ldr	r2, [pc, #156]	@ (8004e70 <HAL_TIM_Base_MspInit+0xac>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d117      	bne.n	8004e06 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004dd6:	4b27      	ldr	r3, [pc, #156]	@ (8004e74 <HAL_TIM_Base_MspInit+0xb0>)
 8004dd8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004ddc:	4a25      	ldr	r2, [pc, #148]	@ (8004e74 <HAL_TIM_Base_MspInit+0xb0>)
 8004dde:	f043 0310 	orr.w	r3, r3, #16
 8004de2:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8004de6:	4b23      	ldr	r3, [pc, #140]	@ (8004e74 <HAL_TIM_Base_MspInit+0xb0>)
 8004de8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004dec:	f003 0310 	and.w	r3, r3, #16
 8004df0:	617b      	str	r3, [r7, #20]
 8004df2:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004df4:	2200      	movs	r2, #0
 8004df6:	2100      	movs	r1, #0
 8004df8:	2036      	movs	r0, #54	@ 0x36
 8004dfa:	f000 fe02 	bl	8005a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004dfe:	2036      	movs	r0, #54	@ 0x36
 8004e00:	f000 fe19 	bl	8005a36 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8004e04:	e030      	b.n	8004e68 <HAL_TIM_Base_MspInit+0xa4>
  else if(tim_baseHandle->Instance==TIM7)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a1b      	ldr	r2, [pc, #108]	@ (8004e78 <HAL_TIM_Base_MspInit+0xb4>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d117      	bne.n	8004e40 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004e10:	4b18      	ldr	r3, [pc, #96]	@ (8004e74 <HAL_TIM_Base_MspInit+0xb0>)
 8004e12:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004e16:	4a17      	ldr	r2, [pc, #92]	@ (8004e74 <HAL_TIM_Base_MspInit+0xb0>)
 8004e18:	f043 0320 	orr.w	r3, r3, #32
 8004e1c:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8004e20:	4b14      	ldr	r3, [pc, #80]	@ (8004e74 <HAL_TIM_Base_MspInit+0xb0>)
 8004e22:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004e26:	f003 0320 	and.w	r3, r3, #32
 8004e2a:	613b      	str	r3, [r7, #16]
 8004e2c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004e2e:	2200      	movs	r2, #0
 8004e30:	2100      	movs	r1, #0
 8004e32:	2037      	movs	r0, #55	@ 0x37
 8004e34:	f000 fde5 	bl	8005a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004e38:	2037      	movs	r0, #55	@ 0x37
 8004e3a:	f000 fdfc 	bl	8005a36 <HAL_NVIC_EnableIRQ>
}
 8004e3e:	e013      	b.n	8004e68 <HAL_TIM_Base_MspInit+0xa4>
  else if(tim_baseHandle->Instance==TIM13)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a0d      	ldr	r2, [pc, #52]	@ (8004e7c <HAL_TIM_Base_MspInit+0xb8>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d10e      	bne.n	8004e68 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8004e74 <HAL_TIM_Base_MspInit+0xb0>)
 8004e4c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004e50:	4a08      	ldr	r2, [pc, #32]	@ (8004e74 <HAL_TIM_Base_MspInit+0xb0>)
 8004e52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e56:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8004e5a:	4b06      	ldr	r3, [pc, #24]	@ (8004e74 <HAL_TIM_Base_MspInit+0xb0>)
 8004e5c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004e60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e64:	60fb      	str	r3, [r7, #12]
 8004e66:	68fb      	ldr	r3, [r7, #12]
}
 8004e68:	bf00      	nop
 8004e6a:	3718      	adds	r7, #24
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	40001000 	.word	0x40001000
 8004e74:	58024400 	.word	0x58024400
 8004e78:	40001400 	.word	0x40001400
 8004e7c:	40001c00 	.word	0x40001c00

08004e80 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b08c      	sub	sp, #48	@ 0x30
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e88:	f107 031c 	add.w	r3, r7, #28
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	605a      	str	r2, [r3, #4]
 8004e92:	609a      	str	r2, [r3, #8]
 8004e94:	60da      	str	r2, [r3, #12]
 8004e96:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ea0:	d13f      	bne.n	8004f22 <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ea2:	4b47      	ldr	r3, [pc, #284]	@ (8004fc0 <HAL_TIM_MspPostInit+0x140>)
 8004ea4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004ea8:	4a45      	ldr	r2, [pc, #276]	@ (8004fc0 <HAL_TIM_MspPostInit+0x140>)
 8004eaa:	f043 0301 	orr.w	r3, r3, #1
 8004eae:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8004eb2:	4b43      	ldr	r3, [pc, #268]	@ (8004fc0 <HAL_TIM_MspPostInit+0x140>)
 8004eb4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004eb8:	f003 0301 	and.w	r3, r3, #1
 8004ebc:	61bb      	str	r3, [r7, #24]
 8004ebe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ec0:	4b3f      	ldr	r3, [pc, #252]	@ (8004fc0 <HAL_TIM_MspPostInit+0x140>)
 8004ec2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004ec6:	4a3e      	ldr	r2, [pc, #248]	@ (8004fc0 <HAL_TIM_MspPostInit+0x140>)
 8004ec8:	f043 0302 	orr.w	r3, r3, #2
 8004ecc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8004ed0:	4b3b      	ldr	r3, [pc, #236]	@ (8004fc0 <HAL_TIM_MspPostInit+0x140>)
 8004ed2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	617b      	str	r3, [r7, #20]
 8004edc:	697b      	ldr	r3, [r7, #20]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8004ede:	f248 030c 	movw	r3, #32780	@ 0x800c
 8004ee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004eec:	2300      	movs	r3, #0
 8004eee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ef4:	f107 031c 	add.w	r3, r7, #28
 8004ef8:	4619      	mov	r1, r3
 8004efa:	4832      	ldr	r0, [pc, #200]	@ (8004fc4 <HAL_TIM_MspPostInit+0x144>)
 8004efc:	f004 f87c 	bl	8008ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004f00:	2308      	movs	r3, #8
 8004f02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f04:	2302      	movs	r3, #2
 8004f06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004f10:	2301      	movs	r3, #1
 8004f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f14:	f107 031c 	add.w	r3, r7, #28
 8004f18:	4619      	mov	r1, r3
 8004f1a:	482b      	ldr	r0, [pc, #172]	@ (8004fc8 <HAL_TIM_MspPostInit+0x148>)
 8004f1c:	f004 f86c 	bl	8008ff8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004f20:	e049      	b.n	8004fb6 <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM3)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a29      	ldr	r2, [pc, #164]	@ (8004fcc <HAL_TIM_MspPostInit+0x14c>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d11f      	bne.n	8004f6c <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f2c:	4b24      	ldr	r3, [pc, #144]	@ (8004fc0 <HAL_TIM_MspPostInit+0x140>)
 8004f2e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004f32:	4a23      	ldr	r2, [pc, #140]	@ (8004fc0 <HAL_TIM_MspPostInit+0x140>)
 8004f34:	f043 0302 	orr.w	r3, r3, #2
 8004f38:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8004f3c:	4b20      	ldr	r3, [pc, #128]	@ (8004fc0 <HAL_TIM_MspPostInit+0x140>)
 8004f3e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	613b      	str	r3, [r7, #16]
 8004f48:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004f4a:	2330      	movs	r3, #48	@ 0x30
 8004f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f4e:	2302      	movs	r3, #2
 8004f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f52:	2300      	movs	r3, #0
 8004f54:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f56:	2300      	movs	r3, #0
 8004f58:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004f5a:	2302      	movs	r3, #2
 8004f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f5e:	f107 031c 	add.w	r3, r7, #28
 8004f62:	4619      	mov	r1, r3
 8004f64:	4818      	ldr	r0, [pc, #96]	@ (8004fc8 <HAL_TIM_MspPostInit+0x148>)
 8004f66:	f004 f847 	bl	8008ff8 <HAL_GPIO_Init>
}
 8004f6a:	e024      	b.n	8004fb6 <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM4)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a17      	ldr	r2, [pc, #92]	@ (8004fd0 <HAL_TIM_MspPostInit+0x150>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d11f      	bne.n	8004fb6 <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f76:	4b12      	ldr	r3, [pc, #72]	@ (8004fc0 <HAL_TIM_MspPostInit+0x140>)
 8004f78:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004f7c:	4a10      	ldr	r2, [pc, #64]	@ (8004fc0 <HAL_TIM_MspPostInit+0x140>)
 8004f7e:	f043 0302 	orr.w	r3, r3, #2
 8004f82:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8004f86:	4b0e      	ldr	r3, [pc, #56]	@ (8004fc0 <HAL_TIM_MspPostInit+0x140>)
 8004f88:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	60fb      	str	r3, [r7, #12]
 8004f92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8004f94:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8004f98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f9a:	2302      	movs	r3, #2
 8004f9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004fa6:	2302      	movs	r3, #2
 8004fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004faa:	f107 031c 	add.w	r3, r7, #28
 8004fae:	4619      	mov	r1, r3
 8004fb0:	4805      	ldr	r0, [pc, #20]	@ (8004fc8 <HAL_TIM_MspPostInit+0x148>)
 8004fb2:	f004 f821 	bl	8008ff8 <HAL_GPIO_Init>
}
 8004fb6:	bf00      	nop
 8004fb8:	3730      	adds	r7, #48	@ 0x30
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	58024400 	.word	0x58024400
 8004fc4:	58020000 	.word	0x58020000
 8004fc8:	58020400 	.word	0x58020400
 8004fcc:	40000400 	.word	0x40000400
 8004fd0:	40000800 	.word	0x40000800

08004fd4 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart3_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004fd8:	4b22      	ldr	r3, [pc, #136]	@ (8005064 <MX_UART4_Init+0x90>)
 8004fda:	4a23      	ldr	r2, [pc, #140]	@ (8005068 <MX_UART4_Init+0x94>)
 8004fdc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8004fde:	4b21      	ldr	r3, [pc, #132]	@ (8005064 <MX_UART4_Init+0x90>)
 8004fe0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8004fe4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004fe6:	4b1f      	ldr	r3, [pc, #124]	@ (8005064 <MX_UART4_Init+0x90>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004fec:	4b1d      	ldr	r3, [pc, #116]	@ (8005064 <MX_UART4_Init+0x90>)
 8004fee:	2200      	movs	r2, #0
 8004ff0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004ff2:	4b1c      	ldr	r3, [pc, #112]	@ (8005064 <MX_UART4_Init+0x90>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8005064 <MX_UART4_Init+0x90>)
 8004ffa:	220c      	movs	r2, #12
 8004ffc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ffe:	4b19      	ldr	r3, [pc, #100]	@ (8005064 <MX_UART4_Init+0x90>)
 8005000:	2200      	movs	r2, #0
 8005002:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005004:	4b17      	ldr	r3, [pc, #92]	@ (8005064 <MX_UART4_Init+0x90>)
 8005006:	2200      	movs	r2, #0
 8005008:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800500a:	4b16      	ldr	r3, [pc, #88]	@ (8005064 <MX_UART4_Init+0x90>)
 800500c:	2200      	movs	r2, #0
 800500e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005010:	4b14      	ldr	r3, [pc, #80]	@ (8005064 <MX_UART4_Init+0x90>)
 8005012:	2200      	movs	r2, #0
 8005014:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005016:	4b13      	ldr	r3, [pc, #76]	@ (8005064 <MX_UART4_Init+0x90>)
 8005018:	2200      	movs	r2, #0
 800501a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800501c:	4811      	ldr	r0, [pc, #68]	@ (8005064 <MX_UART4_Init+0x90>)
 800501e:	f009 fb2f 	bl	800e680 <HAL_UART_Init>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d001      	beq.n	800502c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8005028:	f7ff f926 	bl	8004278 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800502c:	2100      	movs	r1, #0
 800502e:	480d      	ldr	r0, [pc, #52]	@ (8005064 <MX_UART4_Init+0x90>)
 8005030:	f00c fe55 	bl	8011cde <HAL_UARTEx_SetTxFifoThreshold>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d001      	beq.n	800503e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800503a:	f7ff f91d 	bl	8004278 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800503e:	2100      	movs	r1, #0
 8005040:	4808      	ldr	r0, [pc, #32]	@ (8005064 <MX_UART4_Init+0x90>)
 8005042:	f00c fe8a 	bl	8011d5a <HAL_UARTEx_SetRxFifoThreshold>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d001      	beq.n	8005050 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800504c:	f7ff f914 	bl	8004278 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8005050:	4804      	ldr	r0, [pc, #16]	@ (8005064 <MX_UART4_Init+0x90>)
 8005052:	f00c fe0b 	bl	8011c6c <HAL_UARTEx_DisableFifoMode>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d001      	beq.n	8005060 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800505c:	f7ff f90c 	bl	8004278 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8005060:	bf00      	nop
 8005062:	bd80      	pop	{r7, pc}
 8005064:	240051e0 	.word	0x240051e0
 8005068:	40004c00 	.word	0x40004c00

0800506c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005070:	4b23      	ldr	r3, [pc, #140]	@ (8005100 <MX_USART1_UART_Init+0x94>)
 8005072:	4a24      	ldr	r2, [pc, #144]	@ (8005104 <MX_USART1_UART_Init+0x98>)
 8005074:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8005076:	4b22      	ldr	r3, [pc, #136]	@ (8005100 <MX_USART1_UART_Init+0x94>)
 8005078:	4a23      	ldr	r2, [pc, #140]	@ (8005108 <MX_USART1_UART_Init+0x9c>)
 800507a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 800507c:	4b20      	ldr	r3, [pc, #128]	@ (8005100 <MX_USART1_UART_Init+0x94>)
 800507e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005082:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005084:	4b1e      	ldr	r3, [pc, #120]	@ (8005100 <MX_USART1_UART_Init+0x94>)
 8005086:	2200      	movs	r2, #0
 8005088:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 800508a:	4b1d      	ldr	r3, [pc, #116]	@ (8005100 <MX_USART1_UART_Init+0x94>)
 800508c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005090:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005092:	4b1b      	ldr	r3, [pc, #108]	@ (8005100 <MX_USART1_UART_Init+0x94>)
 8005094:	220c      	movs	r2, #12
 8005096:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005098:	4b19      	ldr	r3, [pc, #100]	@ (8005100 <MX_USART1_UART_Init+0x94>)
 800509a:	2200      	movs	r2, #0
 800509c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800509e:	4b18      	ldr	r3, [pc, #96]	@ (8005100 <MX_USART1_UART_Init+0x94>)
 80050a0:	2200      	movs	r2, #0
 80050a2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80050a4:	4b16      	ldr	r3, [pc, #88]	@ (8005100 <MX_USART1_UART_Init+0x94>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80050aa:	4b15      	ldr	r3, [pc, #84]	@ (8005100 <MX_USART1_UART_Init+0x94>)
 80050ac:	2200      	movs	r2, #0
 80050ae:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80050b0:	4b13      	ldr	r3, [pc, #76]	@ (8005100 <MX_USART1_UART_Init+0x94>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80050b6:	4812      	ldr	r0, [pc, #72]	@ (8005100 <MX_USART1_UART_Init+0x94>)
 80050b8:	f009 fae2 	bl	800e680 <HAL_UART_Init>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d001      	beq.n	80050c6 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80050c2:	f7ff f8d9 	bl	8004278 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80050c6:	2100      	movs	r1, #0
 80050c8:	480d      	ldr	r0, [pc, #52]	@ (8005100 <MX_USART1_UART_Init+0x94>)
 80050ca:	f00c fe08 	bl	8011cde <HAL_UARTEx_SetTxFifoThreshold>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d001      	beq.n	80050d8 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80050d4:	f7ff f8d0 	bl	8004278 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80050d8:	2100      	movs	r1, #0
 80050da:	4809      	ldr	r0, [pc, #36]	@ (8005100 <MX_USART1_UART_Init+0x94>)
 80050dc:	f00c fe3d 	bl	8011d5a <HAL_UARTEx_SetRxFifoThreshold>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d001      	beq.n	80050ea <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80050e6:	f7ff f8c7 	bl	8004278 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80050ea:	4805      	ldr	r0, [pc, #20]	@ (8005100 <MX_USART1_UART_Init+0x94>)
 80050ec:	f00c fdbe 	bl	8011c6c <HAL_UARTEx_DisableFifoMode>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80050f6:	f7ff f8bf 	bl	8004278 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80050fa:	bf00      	nop
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	24005274 	.word	0x24005274
 8005104:	40011000 	.word	0x40011000
 8005108:	000186a0 	.word	0x000186a0

0800510c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005110:	4b22      	ldr	r3, [pc, #136]	@ (800519c <MX_USART3_UART_Init+0x90>)
 8005112:	4a23      	ldr	r2, [pc, #140]	@ (80051a0 <MX_USART3_UART_Init+0x94>)
 8005114:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005116:	4b21      	ldr	r3, [pc, #132]	@ (800519c <MX_USART3_UART_Init+0x90>)
 8005118:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800511c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800511e:	4b1f      	ldr	r3, [pc, #124]	@ (800519c <MX_USART3_UART_Init+0x90>)
 8005120:	2200      	movs	r2, #0
 8005122:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005124:	4b1d      	ldr	r3, [pc, #116]	@ (800519c <MX_USART3_UART_Init+0x90>)
 8005126:	2200      	movs	r2, #0
 8005128:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800512a:	4b1c      	ldr	r3, [pc, #112]	@ (800519c <MX_USART3_UART_Init+0x90>)
 800512c:	2200      	movs	r2, #0
 800512e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005130:	4b1a      	ldr	r3, [pc, #104]	@ (800519c <MX_USART3_UART_Init+0x90>)
 8005132:	220c      	movs	r2, #12
 8005134:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005136:	4b19      	ldr	r3, [pc, #100]	@ (800519c <MX_USART3_UART_Init+0x90>)
 8005138:	2200      	movs	r2, #0
 800513a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800513c:	4b17      	ldr	r3, [pc, #92]	@ (800519c <MX_USART3_UART_Init+0x90>)
 800513e:	2200      	movs	r2, #0
 8005140:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005142:	4b16      	ldr	r3, [pc, #88]	@ (800519c <MX_USART3_UART_Init+0x90>)
 8005144:	2200      	movs	r2, #0
 8005146:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005148:	4b14      	ldr	r3, [pc, #80]	@ (800519c <MX_USART3_UART_Init+0x90>)
 800514a:	2200      	movs	r2, #0
 800514c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800514e:	4b13      	ldr	r3, [pc, #76]	@ (800519c <MX_USART3_UART_Init+0x90>)
 8005150:	2200      	movs	r2, #0
 8005152:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005154:	4811      	ldr	r0, [pc, #68]	@ (800519c <MX_USART3_UART_Init+0x90>)
 8005156:	f009 fa93 	bl	800e680 <HAL_UART_Init>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d001      	beq.n	8005164 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8005160:	f7ff f88a 	bl	8004278 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005164:	2100      	movs	r1, #0
 8005166:	480d      	ldr	r0, [pc, #52]	@ (800519c <MX_USART3_UART_Init+0x90>)
 8005168:	f00c fdb9 	bl	8011cde <HAL_UARTEx_SetTxFifoThreshold>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8005172:	f7ff f881 	bl	8004278 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005176:	2100      	movs	r1, #0
 8005178:	4808      	ldr	r0, [pc, #32]	@ (800519c <MX_USART3_UART_Init+0x90>)
 800517a:	f00c fdee 	bl	8011d5a <HAL_UARTEx_SetRxFifoThreshold>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d001      	beq.n	8005188 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8005184:	f7ff f878 	bl	8004278 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8005188:	4804      	ldr	r0, [pc, #16]	@ (800519c <MX_USART3_UART_Init+0x90>)
 800518a:	f00c fd6f 	bl	8011c6c <HAL_UARTEx_DisableFifoMode>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d001      	beq.n	8005198 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8005194:	f7ff f870 	bl	8004278 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005198:	bf00      	nop
 800519a:	bd80      	pop	{r7, pc}
 800519c:	24005308 	.word	0x24005308
 80051a0:	40004800 	.word	0x40004800

080051a4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80051a8:	4b22      	ldr	r3, [pc, #136]	@ (8005234 <MX_USART6_UART_Init+0x90>)
 80051aa:	4a23      	ldr	r2, [pc, #140]	@ (8005238 <MX_USART6_UART_Init+0x94>)
 80051ac:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80051ae:	4b21      	ldr	r3, [pc, #132]	@ (8005234 <MX_USART6_UART_Init+0x90>)
 80051b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80051b4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80051b6:	4b1f      	ldr	r3, [pc, #124]	@ (8005234 <MX_USART6_UART_Init+0x90>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80051bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005234 <MX_USART6_UART_Init+0x90>)
 80051be:	2200      	movs	r2, #0
 80051c0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80051c2:	4b1c      	ldr	r3, [pc, #112]	@ (8005234 <MX_USART6_UART_Init+0x90>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80051c8:	4b1a      	ldr	r3, [pc, #104]	@ (8005234 <MX_USART6_UART_Init+0x90>)
 80051ca:	220c      	movs	r2, #12
 80051cc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80051ce:	4b19      	ldr	r3, [pc, #100]	@ (8005234 <MX_USART6_UART_Init+0x90>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80051d4:	4b17      	ldr	r3, [pc, #92]	@ (8005234 <MX_USART6_UART_Init+0x90>)
 80051d6:	2200      	movs	r2, #0
 80051d8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80051da:	4b16      	ldr	r3, [pc, #88]	@ (8005234 <MX_USART6_UART_Init+0x90>)
 80051dc:	2200      	movs	r2, #0
 80051de:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80051e0:	4b14      	ldr	r3, [pc, #80]	@ (8005234 <MX_USART6_UART_Init+0x90>)
 80051e2:	2200      	movs	r2, #0
 80051e4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80051e6:	4b13      	ldr	r3, [pc, #76]	@ (8005234 <MX_USART6_UART_Init+0x90>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80051ec:	4811      	ldr	r0, [pc, #68]	@ (8005234 <MX_USART6_UART_Init+0x90>)
 80051ee:	f009 fa47 	bl	800e680 <HAL_UART_Init>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d001      	beq.n	80051fc <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80051f8:	f7ff f83e 	bl	8004278 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80051fc:	2100      	movs	r1, #0
 80051fe:	480d      	ldr	r0, [pc, #52]	@ (8005234 <MX_USART6_UART_Init+0x90>)
 8005200:	f00c fd6d 	bl	8011cde <HAL_UARTEx_SetTxFifoThreshold>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 800520a:	f7ff f835 	bl	8004278 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800520e:	2100      	movs	r1, #0
 8005210:	4808      	ldr	r0, [pc, #32]	@ (8005234 <MX_USART6_UART_Init+0x90>)
 8005212:	f00c fda2 	bl	8011d5a <HAL_UARTEx_SetRxFifoThreshold>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d001      	beq.n	8005220 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 800521c:	f7ff f82c 	bl	8004278 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8005220:	4804      	ldr	r0, [pc, #16]	@ (8005234 <MX_USART6_UART_Init+0x90>)
 8005222:	f00c fd23 	bl	8011c6c <HAL_UARTEx_DisableFifoMode>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d001      	beq.n	8005230 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 800522c:	f7ff f824 	bl	8004278 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8005230:	bf00      	nop
 8005232:	bd80      	pop	{r7, pc}
 8005234:	2400539c 	.word	0x2400539c
 8005238:	40011400 	.word	0x40011400

0800523c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b0c0      	sub	sp, #256	@ 0x100
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005244:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8005248:	2200      	movs	r2, #0
 800524a:	601a      	str	r2, [r3, #0]
 800524c:	605a      	str	r2, [r3, #4]
 800524e:	609a      	str	r2, [r3, #8]
 8005250:	60da      	str	r2, [r3, #12]
 8005252:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005254:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005258:	22c0      	movs	r2, #192	@ 0xc0
 800525a:	2100      	movs	r1, #0
 800525c:	4618      	mov	r0, r3
 800525e:	f012 fbd2 	bl	8017a06 <memset>
  if(uartHandle->Instance==UART4)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a83      	ldr	r2, [pc, #524]	@ (8005474 <HAL_UART_MspInit+0x238>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d17c      	bne.n	8005366 <HAL_UART_MspInit+0x12a>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800526c:	f04f 0202 	mov.w	r2, #2
 8005270:	f04f 0300 	mov.w	r3, #0
 8005274:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005278:	2300      	movs	r3, #0
 800527a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800527e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005282:	4618      	mov	r0, r3
 8005284:	f005 f9ae 	bl	800a5e4 <HAL_RCCEx_PeriphCLKConfig>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d001      	beq.n	8005292 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800528e:	f7fe fff3 	bl	8004278 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005292:	4b79      	ldr	r3, [pc, #484]	@ (8005478 <HAL_UART_MspInit+0x23c>)
 8005294:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8005298:	4a77      	ldr	r2, [pc, #476]	@ (8005478 <HAL_UART_MspInit+0x23c>)
 800529a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800529e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80052a2:	4b75      	ldr	r3, [pc, #468]	@ (8005478 <HAL_UART_MspInit+0x23c>)
 80052a4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80052a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80052ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80052ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052b0:	4b71      	ldr	r3, [pc, #452]	@ (8005478 <HAL_UART_MspInit+0x23c>)
 80052b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80052b6:	4a70      	ldr	r2, [pc, #448]	@ (8005478 <HAL_UART_MspInit+0x23c>)
 80052b8:	f043 0301 	orr.w	r3, r3, #1
 80052bc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80052c0:	4b6d      	ldr	r3, [pc, #436]	@ (8005478 <HAL_UART_MspInit+0x23c>)
 80052c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	623b      	str	r3, [r7, #32]
 80052cc:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80052ce:	2303      	movs	r3, #3
 80052d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052d4:	2302      	movs	r3, #2
 80052d6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052da:	2300      	movs	r3, #0
 80052dc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052e0:	2300      	movs	r3, #0
 80052e2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80052e6:	2308      	movs	r3, #8
 80052e8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052ec:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80052f0:	4619      	mov	r1, r3
 80052f2:	4862      	ldr	r0, [pc, #392]	@ (800547c <HAL_UART_MspInit+0x240>)
 80052f4:	f003 fe80 	bl	8008ff8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80052f8:	4b61      	ldr	r3, [pc, #388]	@ (8005480 <HAL_UART_MspInit+0x244>)
 80052fa:	4a62      	ldr	r2, [pc, #392]	@ (8005484 <HAL_UART_MspInit+0x248>)
 80052fc:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80052fe:	4b60      	ldr	r3, [pc, #384]	@ (8005480 <HAL_UART_MspInit+0x244>)
 8005300:	223f      	movs	r2, #63	@ 0x3f
 8005302:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005304:	4b5e      	ldr	r3, [pc, #376]	@ (8005480 <HAL_UART_MspInit+0x244>)
 8005306:	2200      	movs	r2, #0
 8005308:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800530a:	4b5d      	ldr	r3, [pc, #372]	@ (8005480 <HAL_UART_MspInit+0x244>)
 800530c:	2200      	movs	r2, #0
 800530e:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005310:	4b5b      	ldr	r3, [pc, #364]	@ (8005480 <HAL_UART_MspInit+0x244>)
 8005312:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005316:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005318:	4b59      	ldr	r3, [pc, #356]	@ (8005480 <HAL_UART_MspInit+0x244>)
 800531a:	2200      	movs	r2, #0
 800531c:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800531e:	4b58      	ldr	r3, [pc, #352]	@ (8005480 <HAL_UART_MspInit+0x244>)
 8005320:	2200      	movs	r2, #0
 8005322:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8005324:	4b56      	ldr	r3, [pc, #344]	@ (8005480 <HAL_UART_MspInit+0x244>)
 8005326:	2200      	movs	r2, #0
 8005328:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800532a:	4b55      	ldr	r3, [pc, #340]	@ (8005480 <HAL_UART_MspInit+0x244>)
 800532c:	2200      	movs	r2, #0
 800532e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005330:	4b53      	ldr	r3, [pc, #332]	@ (8005480 <HAL_UART_MspInit+0x244>)
 8005332:	2200      	movs	r2, #0
 8005334:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8005336:	4852      	ldr	r0, [pc, #328]	@ (8005480 <HAL_UART_MspInit+0x244>)
 8005338:	f000 fc10 	bl	8005b5c <HAL_DMA_Init>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8005342:	f7fe ff99 	bl	8004278 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a4d      	ldr	r2, [pc, #308]	@ (8005480 <HAL_UART_MspInit+0x244>)
 800534a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800534e:	4a4c      	ldr	r2, [pc, #304]	@ (8005480 <HAL_UART_MspInit+0x244>)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8005354:	2200      	movs	r2, #0
 8005356:	2100      	movs	r1, #0
 8005358:	2034      	movs	r0, #52	@ 0x34
 800535a:	f000 fb52 	bl	8005a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800535e:	2034      	movs	r0, #52	@ 0x34
 8005360:	f000 fb69 	bl	8005a36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8005364:	e16c      	b.n	8005640 <HAL_UART_MspInit+0x404>
  else if(uartHandle->Instance==USART1)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a47      	ldr	r2, [pc, #284]	@ (8005488 <HAL_UART_MspInit+0x24c>)
 800536c:	4293      	cmp	r3, r2
 800536e:	f040 8091 	bne.w	8005494 <HAL_UART_MspInit+0x258>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005372:	f04f 0201 	mov.w	r2, #1
 8005376:	f04f 0300 	mov.w	r3, #0
 800537a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800537e:	2300      	movs	r3, #0
 8005380:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005384:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005388:	4618      	mov	r0, r3
 800538a:	f005 f92b 	bl	800a5e4 <HAL_RCCEx_PeriphCLKConfig>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d001      	beq.n	8005398 <HAL_UART_MspInit+0x15c>
      Error_Handler();
 8005394:	f7fe ff70 	bl	8004278 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005398:	4b37      	ldr	r3, [pc, #220]	@ (8005478 <HAL_UART_MspInit+0x23c>)
 800539a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800539e:	4a36      	ldr	r2, [pc, #216]	@ (8005478 <HAL_UART_MspInit+0x23c>)
 80053a0:	f043 0310 	orr.w	r3, r3, #16
 80053a4:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80053a8:	4b33      	ldr	r3, [pc, #204]	@ (8005478 <HAL_UART_MspInit+0x23c>)
 80053aa:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80053ae:	f003 0310 	and.w	r3, r3, #16
 80053b2:	61fb      	str	r3, [r7, #28]
 80053b4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053b6:	4b30      	ldr	r3, [pc, #192]	@ (8005478 <HAL_UART_MspInit+0x23c>)
 80053b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80053bc:	4a2e      	ldr	r2, [pc, #184]	@ (8005478 <HAL_UART_MspInit+0x23c>)
 80053be:	f043 0301 	orr.w	r3, r3, #1
 80053c2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80053c6:	4b2c      	ldr	r3, [pc, #176]	@ (8005478 <HAL_UART_MspInit+0x23c>)
 80053c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	61bb      	str	r3, [r7, #24]
 80053d2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|SBUS_RX_Pin;
 80053d4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80053d8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053dc:	2302      	movs	r3, #2
 80053de:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053e2:	2300      	movs	r3, #0
 80053e4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053e8:	2300      	movs	r3, #0
 80053ea:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80053ee:	2307      	movs	r3, #7
 80053f0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053f4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80053f8:	4619      	mov	r1, r3
 80053fa:	4820      	ldr	r0, [pc, #128]	@ (800547c <HAL_UART_MspInit+0x240>)
 80053fc:	f003 fdfc 	bl	8008ff8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8005400:	4b22      	ldr	r3, [pc, #136]	@ (800548c <HAL_UART_MspInit+0x250>)
 8005402:	4a23      	ldr	r2, [pc, #140]	@ (8005490 <HAL_UART_MspInit+0x254>)
 8005404:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8005406:	4b21      	ldr	r3, [pc, #132]	@ (800548c <HAL_UART_MspInit+0x250>)
 8005408:	2229      	movs	r2, #41	@ 0x29
 800540a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800540c:	4b1f      	ldr	r3, [pc, #124]	@ (800548c <HAL_UART_MspInit+0x250>)
 800540e:	2200      	movs	r2, #0
 8005410:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005412:	4b1e      	ldr	r3, [pc, #120]	@ (800548c <HAL_UART_MspInit+0x250>)
 8005414:	2200      	movs	r2, #0
 8005416:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005418:	4b1c      	ldr	r3, [pc, #112]	@ (800548c <HAL_UART_MspInit+0x250>)
 800541a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800541e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005420:	4b1a      	ldr	r3, [pc, #104]	@ (800548c <HAL_UART_MspInit+0x250>)
 8005422:	2200      	movs	r2, #0
 8005424:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005426:	4b19      	ldr	r3, [pc, #100]	@ (800548c <HAL_UART_MspInit+0x250>)
 8005428:	2200      	movs	r2, #0
 800542a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800542c:	4b17      	ldr	r3, [pc, #92]	@ (800548c <HAL_UART_MspInit+0x250>)
 800542e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005432:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005434:	4b15      	ldr	r3, [pc, #84]	@ (800548c <HAL_UART_MspInit+0x250>)
 8005436:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800543a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800543c:	4b13      	ldr	r3, [pc, #76]	@ (800548c <HAL_UART_MspInit+0x250>)
 800543e:	2200      	movs	r2, #0
 8005440:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005442:	4812      	ldr	r0, [pc, #72]	@ (800548c <HAL_UART_MspInit+0x250>)
 8005444:	f000 fb8a 	bl	8005b5c <HAL_DMA_Init>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d001      	beq.n	8005452 <HAL_UART_MspInit+0x216>
      Error_Handler();
 800544e:	f7fe ff13 	bl	8004278 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a0d      	ldr	r2, [pc, #52]	@ (800548c <HAL_UART_MspInit+0x250>)
 8005456:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800545a:	4a0c      	ldr	r2, [pc, #48]	@ (800548c <HAL_UART_MspInit+0x250>)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005460:	2200      	movs	r2, #0
 8005462:	2100      	movs	r1, #0
 8005464:	2025      	movs	r0, #37	@ 0x25
 8005466:	f000 facc 	bl	8005a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800546a:	2025      	movs	r0, #37	@ 0x25
 800546c:	f000 fae3 	bl	8005a36 <HAL_NVIC_EnableIRQ>
}
 8005470:	e0e6      	b.n	8005640 <HAL_UART_MspInit+0x404>
 8005472:	bf00      	nop
 8005474:	40004c00 	.word	0x40004c00
 8005478:	58024400 	.word	0x58024400
 800547c:	58020000 	.word	0x58020000
 8005480:	24005430 	.word	0x24005430
 8005484:	40020040 	.word	0x40020040
 8005488:	40011000 	.word	0x40011000
 800548c:	240054a8 	.word	0x240054a8
 8005490:	40020010 	.word	0x40020010
  else if(uartHandle->Instance==USART3)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a6c      	ldr	r2, [pc, #432]	@ (800564c <HAL_UART_MspInit+0x410>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d17d      	bne.n	800559a <HAL_UART_MspInit+0x35e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800549e:	f04f 0202 	mov.w	r2, #2
 80054a2:	f04f 0300 	mov.w	r3, #0
 80054a6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80054aa:	2300      	movs	r3, #0
 80054ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80054b0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80054b4:	4618      	mov	r0, r3
 80054b6:	f005 f895 	bl	800a5e4 <HAL_RCCEx_PeriphCLKConfig>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d001      	beq.n	80054c4 <HAL_UART_MspInit+0x288>
      Error_Handler();
 80054c0:	f7fe feda 	bl	8004278 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80054c4:	4b62      	ldr	r3, [pc, #392]	@ (8005650 <HAL_UART_MspInit+0x414>)
 80054c6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80054ca:	4a61      	ldr	r2, [pc, #388]	@ (8005650 <HAL_UART_MspInit+0x414>)
 80054cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80054d0:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80054d4:	4b5e      	ldr	r3, [pc, #376]	@ (8005650 <HAL_UART_MspInit+0x414>)
 80054d6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80054da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054de:	617b      	str	r3, [r7, #20]
 80054e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054e2:	4b5b      	ldr	r3, [pc, #364]	@ (8005650 <HAL_UART_MspInit+0x414>)
 80054e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80054e8:	4a59      	ldr	r2, [pc, #356]	@ (8005650 <HAL_UART_MspInit+0x414>)
 80054ea:	f043 0304 	orr.w	r3, r3, #4
 80054ee:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80054f2:	4b57      	ldr	r3, [pc, #348]	@ (8005650 <HAL_UART_MspInit+0x414>)
 80054f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80054f8:	f003 0304 	and.w	r3, r3, #4
 80054fc:	613b      	str	r3, [r7, #16]
 80054fe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005500:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005504:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005508:	2302      	movs	r3, #2
 800550a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800550e:	2300      	movs	r3, #0
 8005510:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005514:	2300      	movs	r3, #0
 8005516:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800551a:	2307      	movs	r3, #7
 800551c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005520:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8005524:	4619      	mov	r1, r3
 8005526:	484b      	ldr	r0, [pc, #300]	@ (8005654 <HAL_UART_MspInit+0x418>)
 8005528:	f003 fd66 	bl	8008ff8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800552c:	4b4a      	ldr	r3, [pc, #296]	@ (8005658 <HAL_UART_MspInit+0x41c>)
 800552e:	4a4b      	ldr	r2, [pc, #300]	@ (800565c <HAL_UART_MspInit+0x420>)
 8005530:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8005532:	4b49      	ldr	r3, [pc, #292]	@ (8005658 <HAL_UART_MspInit+0x41c>)
 8005534:	222d      	movs	r2, #45	@ 0x2d
 8005536:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005538:	4b47      	ldr	r3, [pc, #284]	@ (8005658 <HAL_UART_MspInit+0x41c>)
 800553a:	2200      	movs	r2, #0
 800553c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800553e:	4b46      	ldr	r3, [pc, #280]	@ (8005658 <HAL_UART_MspInit+0x41c>)
 8005540:	2200      	movs	r2, #0
 8005542:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005544:	4b44      	ldr	r3, [pc, #272]	@ (8005658 <HAL_UART_MspInit+0x41c>)
 8005546:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800554a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800554c:	4b42      	ldr	r3, [pc, #264]	@ (8005658 <HAL_UART_MspInit+0x41c>)
 800554e:	2200      	movs	r2, #0
 8005550:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005552:	4b41      	ldr	r3, [pc, #260]	@ (8005658 <HAL_UART_MspInit+0x41c>)
 8005554:	2200      	movs	r2, #0
 8005556:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8005558:	4b3f      	ldr	r3, [pc, #252]	@ (8005658 <HAL_UART_MspInit+0x41c>)
 800555a:	2200      	movs	r2, #0
 800555c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800555e:	4b3e      	ldr	r3, [pc, #248]	@ (8005658 <HAL_UART_MspInit+0x41c>)
 8005560:	2200      	movs	r2, #0
 8005562:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005564:	4b3c      	ldr	r3, [pc, #240]	@ (8005658 <HAL_UART_MspInit+0x41c>)
 8005566:	2200      	movs	r2, #0
 8005568:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800556a:	483b      	ldr	r0, [pc, #236]	@ (8005658 <HAL_UART_MspInit+0x41c>)
 800556c:	f000 faf6 	bl	8005b5c <HAL_DMA_Init>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d001      	beq.n	800557a <HAL_UART_MspInit+0x33e>
      Error_Handler();
 8005576:	f7fe fe7f 	bl	8004278 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a36      	ldr	r2, [pc, #216]	@ (8005658 <HAL_UART_MspInit+0x41c>)
 800557e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8005582:	4a35      	ldr	r2, [pc, #212]	@ (8005658 <HAL_UART_MspInit+0x41c>)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005588:	2200      	movs	r2, #0
 800558a:	2100      	movs	r1, #0
 800558c:	2027      	movs	r0, #39	@ 0x27
 800558e:	f000 fa38 	bl	8005a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005592:	2027      	movs	r0, #39	@ 0x27
 8005594:	f000 fa4f 	bl	8005a36 <HAL_NVIC_EnableIRQ>
}
 8005598:	e052      	b.n	8005640 <HAL_UART_MspInit+0x404>
  else if(uartHandle->Instance==USART6)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a30      	ldr	r2, [pc, #192]	@ (8005660 <HAL_UART_MspInit+0x424>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d14d      	bne.n	8005640 <HAL_UART_MspInit+0x404>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80055a4:	f04f 0201 	mov.w	r2, #1
 80055a8:	f04f 0300 	mov.w	r3, #0
 80055ac:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80055b0:	2300      	movs	r3, #0
 80055b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80055b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80055ba:	4618      	mov	r0, r3
 80055bc:	f005 f812 	bl	800a5e4 <HAL_RCCEx_PeriphCLKConfig>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d001      	beq.n	80055ca <HAL_UART_MspInit+0x38e>
      Error_Handler();
 80055c6:	f7fe fe57 	bl	8004278 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80055ca:	4b21      	ldr	r3, [pc, #132]	@ (8005650 <HAL_UART_MspInit+0x414>)
 80055cc:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80055d0:	4a1f      	ldr	r2, [pc, #124]	@ (8005650 <HAL_UART_MspInit+0x414>)
 80055d2:	f043 0320 	orr.w	r3, r3, #32
 80055d6:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80055da:	4b1d      	ldr	r3, [pc, #116]	@ (8005650 <HAL_UART_MspInit+0x414>)
 80055dc:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80055e0:	f003 0320 	and.w	r3, r3, #32
 80055e4:	60fb      	str	r3, [r7, #12]
 80055e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80055e8:	4b19      	ldr	r3, [pc, #100]	@ (8005650 <HAL_UART_MspInit+0x414>)
 80055ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80055ee:	4a18      	ldr	r2, [pc, #96]	@ (8005650 <HAL_UART_MspInit+0x414>)
 80055f0:	f043 0304 	orr.w	r3, r3, #4
 80055f4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80055f8:	4b15      	ldr	r3, [pc, #84]	@ (8005650 <HAL_UART_MspInit+0x414>)
 80055fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80055fe:	f003 0304 	and.w	r3, r3, #4
 8005602:	60bb      	str	r3, [r7, #8]
 8005604:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005606:	23c0      	movs	r3, #192	@ 0xc0
 8005608:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800560c:	2302      	movs	r3, #2
 800560e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005612:	2300      	movs	r3, #0
 8005614:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005618:	2300      	movs	r3, #0
 800561a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 800561e:	2307      	movs	r3, #7
 8005620:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005624:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8005628:	4619      	mov	r1, r3
 800562a:	480a      	ldr	r0, [pc, #40]	@ (8005654 <HAL_UART_MspInit+0x418>)
 800562c:	f003 fce4 	bl	8008ff8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8005630:	2200      	movs	r2, #0
 8005632:	2100      	movs	r1, #0
 8005634:	2047      	movs	r0, #71	@ 0x47
 8005636:	f000 f9e4 	bl	8005a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800563a:	2047      	movs	r0, #71	@ 0x47
 800563c:	f000 f9fb 	bl	8005a36 <HAL_NVIC_EnableIRQ>
}
 8005640:	bf00      	nop
 8005642:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	40004800 	.word	0x40004800
 8005650:	58024400 	.word	0x58024400
 8005654:	58020800 	.word	0x58020800
 8005658:	24005520 	.word	0x24005520
 800565c:	40020028 	.word	0x40020028
 8005660:	40011400 	.word	0x40011400

08005664 <Reset_UART>:
  /* USER CODE END USART6_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void Reset_UART(UART_HandleTypeDef *huart) {
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]

      // Clear any pending error flags
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF | UART_CLEAR_FEF | UART_CLEAR_NEF | UART_CLEAR_OREF);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	220f      	movs	r2, #15
 8005672:	621a      	str	r2, [r3, #32]

    // Abort ongoing UART transfer
    if (HAL_UART_Abort_IT(huart) != HAL_OK) {
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f009 faa3 	bl	800ebc0 <HAL_UART_Abort_IT>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d001      	beq.n	8005684 <Reset_UART+0x20>
        // Abort Error
        Error_Handler();
 8005680:	f7fe fdfa 	bl	8004278 <Error_Handler>
    }
     if(huart == &huart3){
    	 MX_USART3_UART_Init();
     }
*/
}
 8005684:	bf00      	nop
 8005686:	3708      	adds	r7, #8
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800568c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80056c4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005690:	f7ff f8e0 	bl	8004854 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005694:	480c      	ldr	r0, [pc, #48]	@ (80056c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005696:	490d      	ldr	r1, [pc, #52]	@ (80056cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005698:	4a0d      	ldr	r2, [pc, #52]	@ (80056d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800569a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800569c:	e002      	b.n	80056a4 <LoopCopyDataInit>

0800569e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800569e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80056a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80056a2:	3304      	adds	r3, #4

080056a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80056a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80056a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80056a8:	d3f9      	bcc.n	800569e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80056aa:	4a0a      	ldr	r2, [pc, #40]	@ (80056d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80056ac:	4c0a      	ldr	r4, [pc, #40]	@ (80056d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80056ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80056b0:	e001      	b.n	80056b6 <LoopFillZerobss>

080056b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80056b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80056b4:	3204      	adds	r2, #4

080056b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80056b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80056b8:	d3fb      	bcc.n	80056b2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80056ba:	f012 fa17 	bl	8017aec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80056be:	f7fe fc79 	bl	8003fb4 <main>
  bx  lr
 80056c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80056c4:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80056c8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80056cc:	240002b0 	.word	0x240002b0
  ldr r2, =_sidata
 80056d0:	0801ac18 	.word	0x0801ac18
  ldr r2, =_sbss
 80056d4:	240002b0 	.word	0x240002b0
  ldr r4, =_ebss
 80056d8:	2400592c 	.word	0x2400592c

080056dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80056dc:	e7fe      	b.n	80056dc <ADC_IRQHandler>
	...

080056e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80056e6:	2003      	movs	r0, #3
 80056e8:	f000 f980 	bl	80059ec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80056ec:	f004 fda4 	bl	800a238 <HAL_RCC_GetSysClockFreq>
 80056f0:	4602      	mov	r2, r0
 80056f2:	4b15      	ldr	r3, [pc, #84]	@ (8005748 <HAL_Init+0x68>)
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	0a1b      	lsrs	r3, r3, #8
 80056f8:	f003 030f 	and.w	r3, r3, #15
 80056fc:	4913      	ldr	r1, [pc, #76]	@ (800574c <HAL_Init+0x6c>)
 80056fe:	5ccb      	ldrb	r3, [r1, r3]
 8005700:	f003 031f 	and.w	r3, r3, #31
 8005704:	fa22 f303 	lsr.w	r3, r2, r3
 8005708:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800570a:	4b0f      	ldr	r3, [pc, #60]	@ (8005748 <HAL_Init+0x68>)
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	f003 030f 	and.w	r3, r3, #15
 8005712:	4a0e      	ldr	r2, [pc, #56]	@ (800574c <HAL_Init+0x6c>)
 8005714:	5cd3      	ldrb	r3, [r2, r3]
 8005716:	f003 031f 	and.w	r3, r3, #31
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	fa22 f303 	lsr.w	r3, r2, r3
 8005720:	4a0b      	ldr	r2, [pc, #44]	@ (8005750 <HAL_Init+0x70>)
 8005722:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005724:	4a0b      	ldr	r2, [pc, #44]	@ (8005754 <HAL_Init+0x74>)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800572a:	200f      	movs	r0, #15
 800572c:	f000 f814 	bl	8005758 <HAL_InitTick>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d001      	beq.n	800573a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e002      	b.n	8005740 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800573a:	f7fe ff07 	bl	800454c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	3708      	adds	r7, #8
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	58024400 	.word	0x58024400
 800574c:	08019b40 	.word	0x08019b40
 8005750:	240000c4 	.word	0x240000c4
 8005754:	240000c0 	.word	0x240000c0

08005758 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005760:	4b15      	ldr	r3, [pc, #84]	@ (80057b8 <HAL_InitTick+0x60>)
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d101      	bne.n	800576c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e021      	b.n	80057b0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800576c:	4b13      	ldr	r3, [pc, #76]	@ (80057bc <HAL_InitTick+0x64>)
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	4b11      	ldr	r3, [pc, #68]	@ (80057b8 <HAL_InitTick+0x60>)
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	4619      	mov	r1, r3
 8005776:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800577a:	fbb3 f3f1 	udiv	r3, r3, r1
 800577e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005782:	4618      	mov	r0, r3
 8005784:	f000 f965 	bl	8005a52 <HAL_SYSTICK_Config>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d001      	beq.n	8005792 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e00e      	b.n	80057b0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b0f      	cmp	r3, #15
 8005796:	d80a      	bhi.n	80057ae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005798:	2200      	movs	r2, #0
 800579a:	6879      	ldr	r1, [r7, #4]
 800579c:	f04f 30ff 	mov.w	r0, #4294967295
 80057a0:	f000 f92f 	bl	8005a02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80057a4:	4a06      	ldr	r2, [pc, #24]	@ (80057c0 <HAL_InitTick+0x68>)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80057aa:	2300      	movs	r3, #0
 80057ac:	e000      	b.n	80057b0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3708      	adds	r7, #8
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	240000cc 	.word	0x240000cc
 80057bc:	240000c0 	.word	0x240000c0
 80057c0:	240000c8 	.word	0x240000c8

080057c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80057c4:	b480      	push	{r7}
 80057c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80057c8:	4b06      	ldr	r3, [pc, #24]	@ (80057e4 <HAL_IncTick+0x20>)
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	461a      	mov	r2, r3
 80057ce:	4b06      	ldr	r3, [pc, #24]	@ (80057e8 <HAL_IncTick+0x24>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4413      	add	r3, r2
 80057d4:	4a04      	ldr	r2, [pc, #16]	@ (80057e8 <HAL_IncTick+0x24>)
 80057d6:	6013      	str	r3, [r2, #0]
}
 80057d8:	bf00      	nop
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	240000cc 	.word	0x240000cc
 80057e8:	24005598 	.word	0x24005598

080057ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80057ec:	b480      	push	{r7}
 80057ee:	af00      	add	r7, sp, #0
  return uwTick;
 80057f0:	4b03      	ldr	r3, [pc, #12]	@ (8005800 <HAL_GetTick+0x14>)
 80057f2:	681b      	ldr	r3, [r3, #0]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	24005598 	.word	0x24005598

08005804 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800580c:	f7ff ffee 	bl	80057ec <HAL_GetTick>
 8005810:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800581c:	d005      	beq.n	800582a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800581e:	4b0a      	ldr	r3, [pc, #40]	@ (8005848 <HAL_Delay+0x44>)
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	461a      	mov	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	4413      	add	r3, r2
 8005828:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800582a:	bf00      	nop
 800582c:	f7ff ffde 	bl	80057ec <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	429a      	cmp	r2, r3
 800583a:	d8f7      	bhi.n	800582c <HAL_Delay+0x28>
  {
  }
}
 800583c:	bf00      	nop
 800583e:	bf00      	nop
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	240000cc 	.word	0x240000cc

0800584c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f003 0307 	and.w	r3, r3, #7
 800585a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800585c:	4b0b      	ldr	r3, [pc, #44]	@ (800588c <__NVIC_SetPriorityGrouping+0x40>)
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005868:	4013      	ands	r3, r2
 800586a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005874:	4b06      	ldr	r3, [pc, #24]	@ (8005890 <__NVIC_SetPriorityGrouping+0x44>)
 8005876:	4313      	orrs	r3, r2
 8005878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800587a:	4a04      	ldr	r2, [pc, #16]	@ (800588c <__NVIC_SetPriorityGrouping+0x40>)
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	60d3      	str	r3, [r2, #12]
}
 8005880:	bf00      	nop
 8005882:	3714      	adds	r7, #20
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr
 800588c:	e000ed00 	.word	0xe000ed00
 8005890:	05fa0000 	.word	0x05fa0000

08005894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005894:	b480      	push	{r7}
 8005896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005898:	4b04      	ldr	r3, [pc, #16]	@ (80058ac <__NVIC_GetPriorityGrouping+0x18>)
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	0a1b      	lsrs	r3, r3, #8
 800589e:	f003 0307 	and.w	r3, r3, #7
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr
 80058ac:	e000ed00 	.word	0xe000ed00

080058b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	4603      	mov	r3, r0
 80058b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80058ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	db0b      	blt.n	80058da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058c2:	88fb      	ldrh	r3, [r7, #6]
 80058c4:	f003 021f 	and.w	r2, r3, #31
 80058c8:	4907      	ldr	r1, [pc, #28]	@ (80058e8 <__NVIC_EnableIRQ+0x38>)
 80058ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058ce:	095b      	lsrs	r3, r3, #5
 80058d0:	2001      	movs	r0, #1
 80058d2:	fa00 f202 	lsl.w	r2, r0, r2
 80058d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80058da:	bf00      	nop
 80058dc:	370c      	adds	r7, #12
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	e000e100 	.word	0xe000e100

080058ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	4603      	mov	r3, r0
 80058f4:	6039      	str	r1, [r7, #0]
 80058f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80058f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	db0a      	blt.n	8005916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	b2da      	uxtb	r2, r3
 8005904:	490c      	ldr	r1, [pc, #48]	@ (8005938 <__NVIC_SetPriority+0x4c>)
 8005906:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800590a:	0112      	lsls	r2, r2, #4
 800590c:	b2d2      	uxtb	r2, r2
 800590e:	440b      	add	r3, r1
 8005910:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005914:	e00a      	b.n	800592c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	b2da      	uxtb	r2, r3
 800591a:	4908      	ldr	r1, [pc, #32]	@ (800593c <__NVIC_SetPriority+0x50>)
 800591c:	88fb      	ldrh	r3, [r7, #6]
 800591e:	f003 030f 	and.w	r3, r3, #15
 8005922:	3b04      	subs	r3, #4
 8005924:	0112      	lsls	r2, r2, #4
 8005926:	b2d2      	uxtb	r2, r2
 8005928:	440b      	add	r3, r1
 800592a:	761a      	strb	r2, [r3, #24]
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr
 8005938:	e000e100 	.word	0xe000e100
 800593c:	e000ed00 	.word	0xe000ed00

08005940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005940:	b480      	push	{r7}
 8005942:	b089      	sub	sp, #36	@ 0x24
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f003 0307 	and.w	r3, r3, #7
 8005952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	f1c3 0307 	rsb	r3, r3, #7
 800595a:	2b04      	cmp	r3, #4
 800595c:	bf28      	it	cs
 800595e:	2304      	movcs	r3, #4
 8005960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	3304      	adds	r3, #4
 8005966:	2b06      	cmp	r3, #6
 8005968:	d902      	bls.n	8005970 <NVIC_EncodePriority+0x30>
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	3b03      	subs	r3, #3
 800596e:	e000      	b.n	8005972 <NVIC_EncodePriority+0x32>
 8005970:	2300      	movs	r3, #0
 8005972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005974:	f04f 32ff 	mov.w	r2, #4294967295
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	fa02 f303 	lsl.w	r3, r2, r3
 800597e:	43da      	mvns	r2, r3
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	401a      	ands	r2, r3
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005988:	f04f 31ff 	mov.w	r1, #4294967295
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	fa01 f303 	lsl.w	r3, r1, r3
 8005992:	43d9      	mvns	r1, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005998:	4313      	orrs	r3, r2
         );
}
 800599a:	4618      	mov	r0, r3
 800599c:	3724      	adds	r7, #36	@ 0x24
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
	...

080059a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	3b01      	subs	r3, #1
 80059b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80059b8:	d301      	bcc.n	80059be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80059ba:	2301      	movs	r3, #1
 80059bc:	e00f      	b.n	80059de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80059be:	4a0a      	ldr	r2, [pc, #40]	@ (80059e8 <SysTick_Config+0x40>)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	3b01      	subs	r3, #1
 80059c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80059c6:	210f      	movs	r1, #15
 80059c8:	f04f 30ff 	mov.w	r0, #4294967295
 80059cc:	f7ff ff8e 	bl	80058ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80059d0:	4b05      	ldr	r3, [pc, #20]	@ (80059e8 <SysTick_Config+0x40>)
 80059d2:	2200      	movs	r2, #0
 80059d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80059d6:	4b04      	ldr	r3, [pc, #16]	@ (80059e8 <SysTick_Config+0x40>)
 80059d8:	2207      	movs	r2, #7
 80059da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3708      	adds	r7, #8
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	e000e010 	.word	0xe000e010

080059ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f7ff ff29 	bl	800584c <__NVIC_SetPriorityGrouping>
}
 80059fa:	bf00      	nop
 80059fc:	3708      	adds	r7, #8
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b086      	sub	sp, #24
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	4603      	mov	r3, r0
 8005a0a:	60b9      	str	r1, [r7, #8]
 8005a0c:	607a      	str	r2, [r7, #4]
 8005a0e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005a10:	f7ff ff40 	bl	8005894 <__NVIC_GetPriorityGrouping>
 8005a14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	68b9      	ldr	r1, [r7, #8]
 8005a1a:	6978      	ldr	r0, [r7, #20]
 8005a1c:	f7ff ff90 	bl	8005940 <NVIC_EncodePriority>
 8005a20:	4602      	mov	r2, r0
 8005a22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005a26:	4611      	mov	r1, r2
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7ff ff5f 	bl	80058ec <__NVIC_SetPriority>
}
 8005a2e:	bf00      	nop
 8005a30:	3718      	adds	r7, #24
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b082      	sub	sp, #8
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7ff ff33 	bl	80058b0 <__NVIC_EnableIRQ>
}
 8005a4a:	bf00      	nop
 8005a4c:	3708      	adds	r7, #8
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b082      	sub	sp, #8
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f7ff ffa4 	bl	80059a8 <SysTick_Config>
 8005a60:	4603      	mov	r3, r0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3708      	adds	r7, #8
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
	...

08005a6c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8005a70:	f3bf 8f5f 	dmb	sy
}
 8005a74:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005a76:	4b07      	ldr	r3, [pc, #28]	@ (8005a94 <HAL_MPU_Disable+0x28>)
 8005a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a7a:	4a06      	ldr	r2, [pc, #24]	@ (8005a94 <HAL_MPU_Disable+0x28>)
 8005a7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a80:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8005a82:	4b05      	ldr	r3, [pc, #20]	@ (8005a98 <HAL_MPU_Disable+0x2c>)
 8005a84:	2200      	movs	r2, #0
 8005a86:	605a      	str	r2, [r3, #4]
}
 8005a88:	bf00      	nop
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	e000ed00 	.word	0xe000ed00
 8005a98:	e000ed90 	.word	0xe000ed90

08005a9c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8005aa4:	4a0b      	ldr	r2, [pc, #44]	@ (8005ad4 <HAL_MPU_Enable+0x38>)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f043 0301 	orr.w	r3, r3, #1
 8005aac:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8005aae:	4b0a      	ldr	r3, [pc, #40]	@ (8005ad8 <HAL_MPU_Enable+0x3c>)
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab2:	4a09      	ldr	r2, [pc, #36]	@ (8005ad8 <HAL_MPU_Enable+0x3c>)
 8005ab4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ab8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8005aba:	f3bf 8f4f 	dsb	sy
}
 8005abe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005ac0:	f3bf 8f6f 	isb	sy
}
 8005ac4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8005ac6:	bf00      	nop
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	e000ed90 	.word	0xe000ed90
 8005ad8:	e000ed00 	.word	0xe000ed00

08005adc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	785a      	ldrb	r2, [r3, #1]
 8005ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8005b58 <HAL_MPU_ConfigRegion+0x7c>)
 8005aea:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8005aec:	4b1a      	ldr	r3, [pc, #104]	@ (8005b58 <HAL_MPU_ConfigRegion+0x7c>)
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	4a19      	ldr	r2, [pc, #100]	@ (8005b58 <HAL_MPU_ConfigRegion+0x7c>)
 8005af2:	f023 0301 	bic.w	r3, r3, #1
 8005af6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8005af8:	4a17      	ldr	r2, [pc, #92]	@ (8005b58 <HAL_MPU_ConfigRegion+0x7c>)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	7b1b      	ldrb	r3, [r3, #12]
 8005b04:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	7adb      	ldrb	r3, [r3, #11]
 8005b0a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005b0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	7a9b      	ldrb	r3, [r3, #10]
 8005b12:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005b14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	7b5b      	ldrb	r3, [r3, #13]
 8005b1a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005b1c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	7b9b      	ldrb	r3, [r3, #14]
 8005b22:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005b24:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	7bdb      	ldrb	r3, [r3, #15]
 8005b2a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005b2c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	7a5b      	ldrb	r3, [r3, #9]
 8005b32:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005b34:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	7a1b      	ldrb	r3, [r3, #8]
 8005b3a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005b3c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	7812      	ldrb	r2, [r2, #0]
 8005b42:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005b44:	4a04      	ldr	r2, [pc, #16]	@ (8005b58 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005b46:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005b48:	6113      	str	r3, [r2, #16]
}
 8005b4a:	bf00      	nop
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	e000ed90 	.word	0xe000ed90

08005b5c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b086      	sub	sp, #24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005b64:	f7ff fe42 	bl	80057ec <HAL_GetTick>
 8005b68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d101      	bne.n	8005b74 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e37d      	b.n	8006270 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a66      	ldr	r2, [pc, #408]	@ (8005d14 <HAL_DMA_Init+0x1b8>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d04a      	beq.n	8005c14 <HAL_DMA_Init+0xb8>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a65      	ldr	r2, [pc, #404]	@ (8005d18 <HAL_DMA_Init+0x1bc>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d045      	beq.n	8005c14 <HAL_DMA_Init+0xb8>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a63      	ldr	r2, [pc, #396]	@ (8005d1c <HAL_DMA_Init+0x1c0>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d040      	beq.n	8005c14 <HAL_DMA_Init+0xb8>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a62      	ldr	r2, [pc, #392]	@ (8005d20 <HAL_DMA_Init+0x1c4>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d03b      	beq.n	8005c14 <HAL_DMA_Init+0xb8>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a60      	ldr	r2, [pc, #384]	@ (8005d24 <HAL_DMA_Init+0x1c8>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d036      	beq.n	8005c14 <HAL_DMA_Init+0xb8>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a5f      	ldr	r2, [pc, #380]	@ (8005d28 <HAL_DMA_Init+0x1cc>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d031      	beq.n	8005c14 <HAL_DMA_Init+0xb8>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a5d      	ldr	r2, [pc, #372]	@ (8005d2c <HAL_DMA_Init+0x1d0>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d02c      	beq.n	8005c14 <HAL_DMA_Init+0xb8>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a5c      	ldr	r2, [pc, #368]	@ (8005d30 <HAL_DMA_Init+0x1d4>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d027      	beq.n	8005c14 <HAL_DMA_Init+0xb8>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a5a      	ldr	r2, [pc, #360]	@ (8005d34 <HAL_DMA_Init+0x1d8>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d022      	beq.n	8005c14 <HAL_DMA_Init+0xb8>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a59      	ldr	r2, [pc, #356]	@ (8005d38 <HAL_DMA_Init+0x1dc>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d01d      	beq.n	8005c14 <HAL_DMA_Init+0xb8>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a57      	ldr	r2, [pc, #348]	@ (8005d3c <HAL_DMA_Init+0x1e0>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d018      	beq.n	8005c14 <HAL_DMA_Init+0xb8>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a56      	ldr	r2, [pc, #344]	@ (8005d40 <HAL_DMA_Init+0x1e4>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d013      	beq.n	8005c14 <HAL_DMA_Init+0xb8>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a54      	ldr	r2, [pc, #336]	@ (8005d44 <HAL_DMA_Init+0x1e8>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d00e      	beq.n	8005c14 <HAL_DMA_Init+0xb8>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a53      	ldr	r2, [pc, #332]	@ (8005d48 <HAL_DMA_Init+0x1ec>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d009      	beq.n	8005c14 <HAL_DMA_Init+0xb8>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a51      	ldr	r2, [pc, #324]	@ (8005d4c <HAL_DMA_Init+0x1f0>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d004      	beq.n	8005c14 <HAL_DMA_Init+0xb8>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a50      	ldr	r2, [pc, #320]	@ (8005d50 <HAL_DMA_Init+0x1f4>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d101      	bne.n	8005c18 <HAL_DMA_Init+0xbc>
 8005c14:	2301      	movs	r3, #1
 8005c16:	e000      	b.n	8005c1a <HAL_DMA_Init+0xbe>
 8005c18:	2300      	movs	r3, #0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f000 813c 	beq.w	8005e98 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2202      	movs	r2, #2
 8005c24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a37      	ldr	r2, [pc, #220]	@ (8005d14 <HAL_DMA_Init+0x1b8>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d04a      	beq.n	8005cd0 <HAL_DMA_Init+0x174>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a36      	ldr	r2, [pc, #216]	@ (8005d18 <HAL_DMA_Init+0x1bc>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d045      	beq.n	8005cd0 <HAL_DMA_Init+0x174>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a34      	ldr	r2, [pc, #208]	@ (8005d1c <HAL_DMA_Init+0x1c0>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d040      	beq.n	8005cd0 <HAL_DMA_Init+0x174>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a33      	ldr	r2, [pc, #204]	@ (8005d20 <HAL_DMA_Init+0x1c4>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d03b      	beq.n	8005cd0 <HAL_DMA_Init+0x174>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a31      	ldr	r2, [pc, #196]	@ (8005d24 <HAL_DMA_Init+0x1c8>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d036      	beq.n	8005cd0 <HAL_DMA_Init+0x174>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a30      	ldr	r2, [pc, #192]	@ (8005d28 <HAL_DMA_Init+0x1cc>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d031      	beq.n	8005cd0 <HAL_DMA_Init+0x174>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a2e      	ldr	r2, [pc, #184]	@ (8005d2c <HAL_DMA_Init+0x1d0>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d02c      	beq.n	8005cd0 <HAL_DMA_Init+0x174>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a2d      	ldr	r2, [pc, #180]	@ (8005d30 <HAL_DMA_Init+0x1d4>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d027      	beq.n	8005cd0 <HAL_DMA_Init+0x174>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a2b      	ldr	r2, [pc, #172]	@ (8005d34 <HAL_DMA_Init+0x1d8>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d022      	beq.n	8005cd0 <HAL_DMA_Init+0x174>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a2a      	ldr	r2, [pc, #168]	@ (8005d38 <HAL_DMA_Init+0x1dc>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d01d      	beq.n	8005cd0 <HAL_DMA_Init+0x174>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a28      	ldr	r2, [pc, #160]	@ (8005d3c <HAL_DMA_Init+0x1e0>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d018      	beq.n	8005cd0 <HAL_DMA_Init+0x174>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a27      	ldr	r2, [pc, #156]	@ (8005d40 <HAL_DMA_Init+0x1e4>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d013      	beq.n	8005cd0 <HAL_DMA_Init+0x174>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a25      	ldr	r2, [pc, #148]	@ (8005d44 <HAL_DMA_Init+0x1e8>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d00e      	beq.n	8005cd0 <HAL_DMA_Init+0x174>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a24      	ldr	r2, [pc, #144]	@ (8005d48 <HAL_DMA_Init+0x1ec>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d009      	beq.n	8005cd0 <HAL_DMA_Init+0x174>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a22      	ldr	r2, [pc, #136]	@ (8005d4c <HAL_DMA_Init+0x1f0>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d004      	beq.n	8005cd0 <HAL_DMA_Init+0x174>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a21      	ldr	r2, [pc, #132]	@ (8005d50 <HAL_DMA_Init+0x1f4>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d108      	bne.n	8005ce2 <HAL_DMA_Init+0x186>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 0201 	bic.w	r2, r2, #1
 8005cde:	601a      	str	r2, [r3, #0]
 8005ce0:	e007      	b.n	8005cf2 <HAL_DMA_Init+0x196>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f022 0201 	bic.w	r2, r2, #1
 8005cf0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005cf2:	e02f      	b.n	8005d54 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005cf4:	f7ff fd7a 	bl	80057ec <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	2b05      	cmp	r3, #5
 8005d00:	d928      	bls.n	8005d54 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2220      	movs	r2, #32
 8005d06:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2203      	movs	r2, #3
 8005d0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e2ad      	b.n	8006270 <HAL_DMA_Init+0x714>
 8005d14:	40020010 	.word	0x40020010
 8005d18:	40020028 	.word	0x40020028
 8005d1c:	40020040 	.word	0x40020040
 8005d20:	40020058 	.word	0x40020058
 8005d24:	40020070 	.word	0x40020070
 8005d28:	40020088 	.word	0x40020088
 8005d2c:	400200a0 	.word	0x400200a0
 8005d30:	400200b8 	.word	0x400200b8
 8005d34:	40020410 	.word	0x40020410
 8005d38:	40020428 	.word	0x40020428
 8005d3c:	40020440 	.word	0x40020440
 8005d40:	40020458 	.word	0x40020458
 8005d44:	40020470 	.word	0x40020470
 8005d48:	40020488 	.word	0x40020488
 8005d4c:	400204a0 	.word	0x400204a0
 8005d50:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1c8      	bne.n	8005cf4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	4b73      	ldr	r3, [pc, #460]	@ (8005f3c <HAL_DMA_Init+0x3e0>)
 8005d6e:	4013      	ands	r3, r2
 8005d70:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005d7a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d86:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d92:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a1b      	ldr	r3, [r3, #32]
 8005d98:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da4:	2b04      	cmp	r3, #4
 8005da6:	d107      	bne.n	8005db8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005db0:	4313      	orrs	r3, r2
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	2b28      	cmp	r3, #40	@ 0x28
 8005dbe:	d903      	bls.n	8005dc8 <HAL_DMA_Init+0x26c>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	2b2e      	cmp	r3, #46	@ 0x2e
 8005dc6:	d91f      	bls.n	8005e08 <HAL_DMA_Init+0x2ac>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	2b3e      	cmp	r3, #62	@ 0x3e
 8005dce:	d903      	bls.n	8005dd8 <HAL_DMA_Init+0x27c>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	2b42      	cmp	r3, #66	@ 0x42
 8005dd6:	d917      	bls.n	8005e08 <HAL_DMA_Init+0x2ac>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	2b46      	cmp	r3, #70	@ 0x46
 8005dde:	d903      	bls.n	8005de8 <HAL_DMA_Init+0x28c>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	2b48      	cmp	r3, #72	@ 0x48
 8005de6:	d90f      	bls.n	8005e08 <HAL_DMA_Init+0x2ac>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	2b4e      	cmp	r3, #78	@ 0x4e
 8005dee:	d903      	bls.n	8005df8 <HAL_DMA_Init+0x29c>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	2b52      	cmp	r3, #82	@ 0x52
 8005df6:	d907      	bls.n	8005e08 <HAL_DMA_Init+0x2ac>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	2b73      	cmp	r3, #115	@ 0x73
 8005dfe:	d905      	bls.n	8005e0c <HAL_DMA_Init+0x2b0>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	2b77      	cmp	r3, #119	@ 0x77
 8005e06:	d801      	bhi.n	8005e0c <HAL_DMA_Init+0x2b0>
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e000      	b.n	8005e0e <HAL_DMA_Init+0x2b2>
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d003      	beq.n	8005e1a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e18:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	697a      	ldr	r2, [r7, #20]
 8005e20:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	695b      	ldr	r3, [r3, #20]
 8005e28:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	f023 0307 	bic.w	r3, r3, #7
 8005e30:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e40:	2b04      	cmp	r3, #4
 8005e42:	d117      	bne.n	8005e74 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00e      	beq.n	8005e74 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f002 fbe0 	bl	800861c <DMA_CheckFifoParam>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d008      	beq.n	8005e74 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2240      	movs	r2, #64	@ 0x40
 8005e66:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e1fd      	b.n	8006270 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	697a      	ldr	r2, [r7, #20]
 8005e7a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f002 fb1b 	bl	80084b8 <DMA_CalcBaseAndBitshift>
 8005e82:	4603      	mov	r3, r0
 8005e84:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e8a:	f003 031f 	and.w	r3, r3, #31
 8005e8e:	223f      	movs	r2, #63	@ 0x3f
 8005e90:	409a      	lsls	r2, r3
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	609a      	str	r2, [r3, #8]
 8005e96:	e0fd      	b.n	8006094 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a28      	ldr	r2, [pc, #160]	@ (8005f40 <HAL_DMA_Init+0x3e4>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d04a      	beq.n	8005f38 <HAL_DMA_Init+0x3dc>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a27      	ldr	r2, [pc, #156]	@ (8005f44 <HAL_DMA_Init+0x3e8>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d045      	beq.n	8005f38 <HAL_DMA_Init+0x3dc>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a25      	ldr	r2, [pc, #148]	@ (8005f48 <HAL_DMA_Init+0x3ec>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d040      	beq.n	8005f38 <HAL_DMA_Init+0x3dc>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a24      	ldr	r2, [pc, #144]	@ (8005f4c <HAL_DMA_Init+0x3f0>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d03b      	beq.n	8005f38 <HAL_DMA_Init+0x3dc>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a22      	ldr	r2, [pc, #136]	@ (8005f50 <HAL_DMA_Init+0x3f4>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d036      	beq.n	8005f38 <HAL_DMA_Init+0x3dc>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a21      	ldr	r2, [pc, #132]	@ (8005f54 <HAL_DMA_Init+0x3f8>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d031      	beq.n	8005f38 <HAL_DMA_Init+0x3dc>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a1f      	ldr	r2, [pc, #124]	@ (8005f58 <HAL_DMA_Init+0x3fc>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d02c      	beq.n	8005f38 <HAL_DMA_Init+0x3dc>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a1e      	ldr	r2, [pc, #120]	@ (8005f5c <HAL_DMA_Init+0x400>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d027      	beq.n	8005f38 <HAL_DMA_Init+0x3dc>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a1c      	ldr	r2, [pc, #112]	@ (8005f60 <HAL_DMA_Init+0x404>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d022      	beq.n	8005f38 <HAL_DMA_Init+0x3dc>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a1b      	ldr	r2, [pc, #108]	@ (8005f64 <HAL_DMA_Init+0x408>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d01d      	beq.n	8005f38 <HAL_DMA_Init+0x3dc>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a19      	ldr	r2, [pc, #100]	@ (8005f68 <HAL_DMA_Init+0x40c>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d018      	beq.n	8005f38 <HAL_DMA_Init+0x3dc>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a18      	ldr	r2, [pc, #96]	@ (8005f6c <HAL_DMA_Init+0x410>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d013      	beq.n	8005f38 <HAL_DMA_Init+0x3dc>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a16      	ldr	r2, [pc, #88]	@ (8005f70 <HAL_DMA_Init+0x414>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d00e      	beq.n	8005f38 <HAL_DMA_Init+0x3dc>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a15      	ldr	r2, [pc, #84]	@ (8005f74 <HAL_DMA_Init+0x418>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d009      	beq.n	8005f38 <HAL_DMA_Init+0x3dc>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a13      	ldr	r2, [pc, #76]	@ (8005f78 <HAL_DMA_Init+0x41c>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d004      	beq.n	8005f38 <HAL_DMA_Init+0x3dc>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a12      	ldr	r2, [pc, #72]	@ (8005f7c <HAL_DMA_Init+0x420>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d123      	bne.n	8005f80 <HAL_DMA_Init+0x424>
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e022      	b.n	8005f82 <HAL_DMA_Init+0x426>
 8005f3c:	fe10803f 	.word	0xfe10803f
 8005f40:	48022c08 	.word	0x48022c08
 8005f44:	48022c1c 	.word	0x48022c1c
 8005f48:	48022c30 	.word	0x48022c30
 8005f4c:	48022c44 	.word	0x48022c44
 8005f50:	48022c58 	.word	0x48022c58
 8005f54:	48022c6c 	.word	0x48022c6c
 8005f58:	48022c80 	.word	0x48022c80
 8005f5c:	48022c94 	.word	0x48022c94
 8005f60:	58025408 	.word	0x58025408
 8005f64:	5802541c 	.word	0x5802541c
 8005f68:	58025430 	.word	0x58025430
 8005f6c:	58025444 	.word	0x58025444
 8005f70:	58025458 	.word	0x58025458
 8005f74:	5802546c 	.word	0x5802546c
 8005f78:	58025480 	.word	0x58025480
 8005f7c:	58025494 	.word	0x58025494
 8005f80:	2300      	movs	r3, #0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d07d      	beq.n	8006082 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a7f      	ldr	r2, [pc, #508]	@ (8006188 <HAL_DMA_Init+0x62c>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d021      	beq.n	8005fd4 <HAL_DMA_Init+0x478>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a7d      	ldr	r2, [pc, #500]	@ (800618c <HAL_DMA_Init+0x630>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d01c      	beq.n	8005fd4 <HAL_DMA_Init+0x478>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a7c      	ldr	r2, [pc, #496]	@ (8006190 <HAL_DMA_Init+0x634>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d017      	beq.n	8005fd4 <HAL_DMA_Init+0x478>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a7a      	ldr	r2, [pc, #488]	@ (8006194 <HAL_DMA_Init+0x638>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d012      	beq.n	8005fd4 <HAL_DMA_Init+0x478>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a79      	ldr	r2, [pc, #484]	@ (8006198 <HAL_DMA_Init+0x63c>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d00d      	beq.n	8005fd4 <HAL_DMA_Init+0x478>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a77      	ldr	r2, [pc, #476]	@ (800619c <HAL_DMA_Init+0x640>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d008      	beq.n	8005fd4 <HAL_DMA_Init+0x478>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a76      	ldr	r2, [pc, #472]	@ (80061a0 <HAL_DMA_Init+0x644>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d003      	beq.n	8005fd4 <HAL_DMA_Init+0x478>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a74      	ldr	r2, [pc, #464]	@ (80061a4 <HAL_DMA_Init+0x648>)
 8005fd2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	4b6e      	ldr	r3, [pc, #440]	@ (80061a8 <HAL_DMA_Init+0x64c>)
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	2b40      	cmp	r3, #64	@ 0x40
 8005ffa:	d008      	beq.n	800600e <HAL_DMA_Init+0x4b2>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	2b80      	cmp	r3, #128	@ 0x80
 8006002:	d102      	bne.n	800600a <HAL_DMA_Init+0x4ae>
 8006004:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006008:	e002      	b.n	8006010 <HAL_DMA_Init+0x4b4>
 800600a:	2300      	movs	r3, #0
 800600c:	e000      	b.n	8006010 <HAL_DMA_Init+0x4b4>
 800600e:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	68d2      	ldr	r2, [r2, #12]
 8006014:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006016:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800601e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	695b      	ldr	r3, [r3, #20]
 8006024:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006026:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800602e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	69db      	ldr	r3, [r3, #28]
 8006034:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006036:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a1b      	ldr	r3, [r3, #32]
 800603c:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800603e:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006040:	697a      	ldr	r2, [r7, #20]
 8006042:	4313      	orrs	r3, r2
 8006044:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	461a      	mov	r2, r3
 8006054:	4b55      	ldr	r3, [pc, #340]	@ (80061ac <HAL_DMA_Init+0x650>)
 8006056:	4413      	add	r3, r2
 8006058:	4a55      	ldr	r2, [pc, #340]	@ (80061b0 <HAL_DMA_Init+0x654>)
 800605a:	fba2 2303 	umull	r2, r3, r2, r3
 800605e:	091b      	lsrs	r3, r3, #4
 8006060:	009a      	lsls	r2, r3, #2
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f002 fa26 	bl	80084b8 <DMA_CalcBaseAndBitshift>
 800606c:	4603      	mov	r3, r0
 800606e:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006074:	f003 031f 	and.w	r3, r3, #31
 8006078:	2201      	movs	r2, #1
 800607a:	409a      	lsls	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	605a      	str	r2, [r3, #4]
 8006080:	e008      	b.n	8006094 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2240      	movs	r2, #64	@ 0x40
 8006086:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2203      	movs	r2, #3
 800608c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e0ed      	b.n	8006270 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a46      	ldr	r2, [pc, #280]	@ (80061b4 <HAL_DMA_Init+0x658>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d072      	beq.n	8006184 <HAL_DMA_Init+0x628>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a45      	ldr	r2, [pc, #276]	@ (80061b8 <HAL_DMA_Init+0x65c>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d06d      	beq.n	8006184 <HAL_DMA_Init+0x628>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a43      	ldr	r2, [pc, #268]	@ (80061bc <HAL_DMA_Init+0x660>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d068      	beq.n	8006184 <HAL_DMA_Init+0x628>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a42      	ldr	r2, [pc, #264]	@ (80061c0 <HAL_DMA_Init+0x664>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d063      	beq.n	8006184 <HAL_DMA_Init+0x628>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a40      	ldr	r2, [pc, #256]	@ (80061c4 <HAL_DMA_Init+0x668>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d05e      	beq.n	8006184 <HAL_DMA_Init+0x628>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a3f      	ldr	r2, [pc, #252]	@ (80061c8 <HAL_DMA_Init+0x66c>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d059      	beq.n	8006184 <HAL_DMA_Init+0x628>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a3d      	ldr	r2, [pc, #244]	@ (80061cc <HAL_DMA_Init+0x670>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d054      	beq.n	8006184 <HAL_DMA_Init+0x628>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a3c      	ldr	r2, [pc, #240]	@ (80061d0 <HAL_DMA_Init+0x674>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d04f      	beq.n	8006184 <HAL_DMA_Init+0x628>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a3a      	ldr	r2, [pc, #232]	@ (80061d4 <HAL_DMA_Init+0x678>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d04a      	beq.n	8006184 <HAL_DMA_Init+0x628>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a39      	ldr	r2, [pc, #228]	@ (80061d8 <HAL_DMA_Init+0x67c>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d045      	beq.n	8006184 <HAL_DMA_Init+0x628>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a37      	ldr	r2, [pc, #220]	@ (80061dc <HAL_DMA_Init+0x680>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d040      	beq.n	8006184 <HAL_DMA_Init+0x628>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a36      	ldr	r2, [pc, #216]	@ (80061e0 <HAL_DMA_Init+0x684>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d03b      	beq.n	8006184 <HAL_DMA_Init+0x628>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a34      	ldr	r2, [pc, #208]	@ (80061e4 <HAL_DMA_Init+0x688>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d036      	beq.n	8006184 <HAL_DMA_Init+0x628>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a33      	ldr	r2, [pc, #204]	@ (80061e8 <HAL_DMA_Init+0x68c>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d031      	beq.n	8006184 <HAL_DMA_Init+0x628>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a31      	ldr	r2, [pc, #196]	@ (80061ec <HAL_DMA_Init+0x690>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d02c      	beq.n	8006184 <HAL_DMA_Init+0x628>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a30      	ldr	r2, [pc, #192]	@ (80061f0 <HAL_DMA_Init+0x694>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d027      	beq.n	8006184 <HAL_DMA_Init+0x628>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a13      	ldr	r2, [pc, #76]	@ (8006188 <HAL_DMA_Init+0x62c>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d022      	beq.n	8006184 <HAL_DMA_Init+0x628>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a12      	ldr	r2, [pc, #72]	@ (800618c <HAL_DMA_Init+0x630>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d01d      	beq.n	8006184 <HAL_DMA_Init+0x628>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a10      	ldr	r2, [pc, #64]	@ (8006190 <HAL_DMA_Init+0x634>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d018      	beq.n	8006184 <HAL_DMA_Init+0x628>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a0f      	ldr	r2, [pc, #60]	@ (8006194 <HAL_DMA_Init+0x638>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d013      	beq.n	8006184 <HAL_DMA_Init+0x628>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a0d      	ldr	r2, [pc, #52]	@ (8006198 <HAL_DMA_Init+0x63c>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d00e      	beq.n	8006184 <HAL_DMA_Init+0x628>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a0c      	ldr	r2, [pc, #48]	@ (800619c <HAL_DMA_Init+0x640>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d009      	beq.n	8006184 <HAL_DMA_Init+0x628>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a0a      	ldr	r2, [pc, #40]	@ (80061a0 <HAL_DMA_Init+0x644>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d004      	beq.n	8006184 <HAL_DMA_Init+0x628>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a09      	ldr	r2, [pc, #36]	@ (80061a4 <HAL_DMA_Init+0x648>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d137      	bne.n	80061f4 <HAL_DMA_Init+0x698>
 8006184:	2301      	movs	r3, #1
 8006186:	e036      	b.n	80061f6 <HAL_DMA_Init+0x69a>
 8006188:	58025408 	.word	0x58025408
 800618c:	5802541c 	.word	0x5802541c
 8006190:	58025430 	.word	0x58025430
 8006194:	58025444 	.word	0x58025444
 8006198:	58025458 	.word	0x58025458
 800619c:	5802546c 	.word	0x5802546c
 80061a0:	58025480 	.word	0x58025480
 80061a4:	58025494 	.word	0x58025494
 80061a8:	fffe000f 	.word	0xfffe000f
 80061ac:	a7fdabf8 	.word	0xa7fdabf8
 80061b0:	cccccccd 	.word	0xcccccccd
 80061b4:	40020010 	.word	0x40020010
 80061b8:	40020028 	.word	0x40020028
 80061bc:	40020040 	.word	0x40020040
 80061c0:	40020058 	.word	0x40020058
 80061c4:	40020070 	.word	0x40020070
 80061c8:	40020088 	.word	0x40020088
 80061cc:	400200a0 	.word	0x400200a0
 80061d0:	400200b8 	.word	0x400200b8
 80061d4:	40020410 	.word	0x40020410
 80061d8:	40020428 	.word	0x40020428
 80061dc:	40020440 	.word	0x40020440
 80061e0:	40020458 	.word	0x40020458
 80061e4:	40020470 	.word	0x40020470
 80061e8:	40020488 	.word	0x40020488
 80061ec:	400204a0 	.word	0x400204a0
 80061f0:	400204b8 	.word	0x400204b8
 80061f4:	2300      	movs	r3, #0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d032      	beq.n	8006260 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f002 fa8a 	bl	8008714 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	2b80      	cmp	r3, #128	@ 0x80
 8006206:	d102      	bne.n	800620e <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685a      	ldr	r2, [r3, #4]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006216:	b2d2      	uxtb	r2, r2
 8006218:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006222:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d010      	beq.n	800624e <HAL_DMA_Init+0x6f2>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	2b08      	cmp	r3, #8
 8006232:	d80c      	bhi.n	800624e <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f002 fb07 	bl	8008848 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800623e:	2200      	movs	r2, #0
 8006240:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800624a:	605a      	str	r2, [r3, #4]
 800624c:	e008      	b.n	8006260 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2201      	movs	r2, #1
 800626a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3718      	adds	r7, #24
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b086      	sub	sp, #24
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
 8006284:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006286:	2300      	movs	r3, #0
 8006288:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d101      	bne.n	8006294 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e226      	b.n	80066e2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800629a:	2b01      	cmp	r3, #1
 800629c:	d101      	bne.n	80062a2 <HAL_DMA_Start_IT+0x2a>
 800629e:	2302      	movs	r3, #2
 80062a0:	e21f      	b.n	80066e2 <HAL_DMA_Start_IT+0x46a>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	f040 820a 	bne.w	80066cc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2202      	movs	r2, #2
 80062bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2200      	movs	r2, #0
 80062c4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a68      	ldr	r2, [pc, #416]	@ (800646c <HAL_DMA_Start_IT+0x1f4>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d04a      	beq.n	8006366 <HAL_DMA_Start_IT+0xee>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a66      	ldr	r2, [pc, #408]	@ (8006470 <HAL_DMA_Start_IT+0x1f8>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d045      	beq.n	8006366 <HAL_DMA_Start_IT+0xee>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a65      	ldr	r2, [pc, #404]	@ (8006474 <HAL_DMA_Start_IT+0x1fc>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d040      	beq.n	8006366 <HAL_DMA_Start_IT+0xee>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a63      	ldr	r2, [pc, #396]	@ (8006478 <HAL_DMA_Start_IT+0x200>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d03b      	beq.n	8006366 <HAL_DMA_Start_IT+0xee>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a62      	ldr	r2, [pc, #392]	@ (800647c <HAL_DMA_Start_IT+0x204>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d036      	beq.n	8006366 <HAL_DMA_Start_IT+0xee>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a60      	ldr	r2, [pc, #384]	@ (8006480 <HAL_DMA_Start_IT+0x208>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d031      	beq.n	8006366 <HAL_DMA_Start_IT+0xee>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a5f      	ldr	r2, [pc, #380]	@ (8006484 <HAL_DMA_Start_IT+0x20c>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d02c      	beq.n	8006366 <HAL_DMA_Start_IT+0xee>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a5d      	ldr	r2, [pc, #372]	@ (8006488 <HAL_DMA_Start_IT+0x210>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d027      	beq.n	8006366 <HAL_DMA_Start_IT+0xee>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a5c      	ldr	r2, [pc, #368]	@ (800648c <HAL_DMA_Start_IT+0x214>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d022      	beq.n	8006366 <HAL_DMA_Start_IT+0xee>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a5a      	ldr	r2, [pc, #360]	@ (8006490 <HAL_DMA_Start_IT+0x218>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d01d      	beq.n	8006366 <HAL_DMA_Start_IT+0xee>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a59      	ldr	r2, [pc, #356]	@ (8006494 <HAL_DMA_Start_IT+0x21c>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d018      	beq.n	8006366 <HAL_DMA_Start_IT+0xee>
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a57      	ldr	r2, [pc, #348]	@ (8006498 <HAL_DMA_Start_IT+0x220>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d013      	beq.n	8006366 <HAL_DMA_Start_IT+0xee>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a56      	ldr	r2, [pc, #344]	@ (800649c <HAL_DMA_Start_IT+0x224>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d00e      	beq.n	8006366 <HAL_DMA_Start_IT+0xee>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a54      	ldr	r2, [pc, #336]	@ (80064a0 <HAL_DMA_Start_IT+0x228>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d009      	beq.n	8006366 <HAL_DMA_Start_IT+0xee>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a53      	ldr	r2, [pc, #332]	@ (80064a4 <HAL_DMA_Start_IT+0x22c>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d004      	beq.n	8006366 <HAL_DMA_Start_IT+0xee>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a51      	ldr	r2, [pc, #324]	@ (80064a8 <HAL_DMA_Start_IT+0x230>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d108      	bne.n	8006378 <HAL_DMA_Start_IT+0x100>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f022 0201 	bic.w	r2, r2, #1
 8006374:	601a      	str	r2, [r3, #0]
 8006376:	e007      	b.n	8006388 <HAL_DMA_Start_IT+0x110>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f022 0201 	bic.w	r2, r2, #1
 8006386:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	68b9      	ldr	r1, [r7, #8]
 800638e:	68f8      	ldr	r0, [r7, #12]
 8006390:	f001 feae 	bl	80080f0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a34      	ldr	r2, [pc, #208]	@ (800646c <HAL_DMA_Start_IT+0x1f4>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d04a      	beq.n	8006434 <HAL_DMA_Start_IT+0x1bc>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a33      	ldr	r2, [pc, #204]	@ (8006470 <HAL_DMA_Start_IT+0x1f8>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d045      	beq.n	8006434 <HAL_DMA_Start_IT+0x1bc>
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a31      	ldr	r2, [pc, #196]	@ (8006474 <HAL_DMA_Start_IT+0x1fc>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d040      	beq.n	8006434 <HAL_DMA_Start_IT+0x1bc>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a30      	ldr	r2, [pc, #192]	@ (8006478 <HAL_DMA_Start_IT+0x200>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d03b      	beq.n	8006434 <HAL_DMA_Start_IT+0x1bc>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a2e      	ldr	r2, [pc, #184]	@ (800647c <HAL_DMA_Start_IT+0x204>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d036      	beq.n	8006434 <HAL_DMA_Start_IT+0x1bc>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a2d      	ldr	r2, [pc, #180]	@ (8006480 <HAL_DMA_Start_IT+0x208>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d031      	beq.n	8006434 <HAL_DMA_Start_IT+0x1bc>
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a2b      	ldr	r2, [pc, #172]	@ (8006484 <HAL_DMA_Start_IT+0x20c>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d02c      	beq.n	8006434 <HAL_DMA_Start_IT+0x1bc>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a2a      	ldr	r2, [pc, #168]	@ (8006488 <HAL_DMA_Start_IT+0x210>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d027      	beq.n	8006434 <HAL_DMA_Start_IT+0x1bc>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a28      	ldr	r2, [pc, #160]	@ (800648c <HAL_DMA_Start_IT+0x214>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d022      	beq.n	8006434 <HAL_DMA_Start_IT+0x1bc>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a27      	ldr	r2, [pc, #156]	@ (8006490 <HAL_DMA_Start_IT+0x218>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d01d      	beq.n	8006434 <HAL_DMA_Start_IT+0x1bc>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a25      	ldr	r2, [pc, #148]	@ (8006494 <HAL_DMA_Start_IT+0x21c>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d018      	beq.n	8006434 <HAL_DMA_Start_IT+0x1bc>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a24      	ldr	r2, [pc, #144]	@ (8006498 <HAL_DMA_Start_IT+0x220>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d013      	beq.n	8006434 <HAL_DMA_Start_IT+0x1bc>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a22      	ldr	r2, [pc, #136]	@ (800649c <HAL_DMA_Start_IT+0x224>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d00e      	beq.n	8006434 <HAL_DMA_Start_IT+0x1bc>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a21      	ldr	r2, [pc, #132]	@ (80064a0 <HAL_DMA_Start_IT+0x228>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d009      	beq.n	8006434 <HAL_DMA_Start_IT+0x1bc>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a1f      	ldr	r2, [pc, #124]	@ (80064a4 <HAL_DMA_Start_IT+0x22c>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d004      	beq.n	8006434 <HAL_DMA_Start_IT+0x1bc>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a1e      	ldr	r2, [pc, #120]	@ (80064a8 <HAL_DMA_Start_IT+0x230>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d101      	bne.n	8006438 <HAL_DMA_Start_IT+0x1c0>
 8006434:	2301      	movs	r3, #1
 8006436:	e000      	b.n	800643a <HAL_DMA_Start_IT+0x1c2>
 8006438:	2300      	movs	r3, #0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d036      	beq.n	80064ac <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f023 021e 	bic.w	r2, r3, #30
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f042 0216 	orr.w	r2, r2, #22
 8006450:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006456:	2b00      	cmp	r3, #0
 8006458:	d03e      	beq.n	80064d8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f042 0208 	orr.w	r2, r2, #8
 8006468:	601a      	str	r2, [r3, #0]
 800646a:	e035      	b.n	80064d8 <HAL_DMA_Start_IT+0x260>
 800646c:	40020010 	.word	0x40020010
 8006470:	40020028 	.word	0x40020028
 8006474:	40020040 	.word	0x40020040
 8006478:	40020058 	.word	0x40020058
 800647c:	40020070 	.word	0x40020070
 8006480:	40020088 	.word	0x40020088
 8006484:	400200a0 	.word	0x400200a0
 8006488:	400200b8 	.word	0x400200b8
 800648c:	40020410 	.word	0x40020410
 8006490:	40020428 	.word	0x40020428
 8006494:	40020440 	.word	0x40020440
 8006498:	40020458 	.word	0x40020458
 800649c:	40020470 	.word	0x40020470
 80064a0:	40020488 	.word	0x40020488
 80064a4:	400204a0 	.word	0x400204a0
 80064a8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f023 020e 	bic.w	r2, r3, #14
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f042 020a 	orr.w	r2, r2, #10
 80064be:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d007      	beq.n	80064d8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f042 0204 	orr.w	r2, r2, #4
 80064d6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a83      	ldr	r2, [pc, #524]	@ (80066ec <HAL_DMA_Start_IT+0x474>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d072      	beq.n	80065c8 <HAL_DMA_Start_IT+0x350>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a82      	ldr	r2, [pc, #520]	@ (80066f0 <HAL_DMA_Start_IT+0x478>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d06d      	beq.n	80065c8 <HAL_DMA_Start_IT+0x350>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a80      	ldr	r2, [pc, #512]	@ (80066f4 <HAL_DMA_Start_IT+0x47c>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d068      	beq.n	80065c8 <HAL_DMA_Start_IT+0x350>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a7f      	ldr	r2, [pc, #508]	@ (80066f8 <HAL_DMA_Start_IT+0x480>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d063      	beq.n	80065c8 <HAL_DMA_Start_IT+0x350>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a7d      	ldr	r2, [pc, #500]	@ (80066fc <HAL_DMA_Start_IT+0x484>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d05e      	beq.n	80065c8 <HAL_DMA_Start_IT+0x350>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a7c      	ldr	r2, [pc, #496]	@ (8006700 <HAL_DMA_Start_IT+0x488>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d059      	beq.n	80065c8 <HAL_DMA_Start_IT+0x350>
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a7a      	ldr	r2, [pc, #488]	@ (8006704 <HAL_DMA_Start_IT+0x48c>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d054      	beq.n	80065c8 <HAL_DMA_Start_IT+0x350>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a79      	ldr	r2, [pc, #484]	@ (8006708 <HAL_DMA_Start_IT+0x490>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d04f      	beq.n	80065c8 <HAL_DMA_Start_IT+0x350>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a77      	ldr	r2, [pc, #476]	@ (800670c <HAL_DMA_Start_IT+0x494>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d04a      	beq.n	80065c8 <HAL_DMA_Start_IT+0x350>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a76      	ldr	r2, [pc, #472]	@ (8006710 <HAL_DMA_Start_IT+0x498>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d045      	beq.n	80065c8 <HAL_DMA_Start_IT+0x350>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a74      	ldr	r2, [pc, #464]	@ (8006714 <HAL_DMA_Start_IT+0x49c>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d040      	beq.n	80065c8 <HAL_DMA_Start_IT+0x350>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a73      	ldr	r2, [pc, #460]	@ (8006718 <HAL_DMA_Start_IT+0x4a0>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d03b      	beq.n	80065c8 <HAL_DMA_Start_IT+0x350>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a71      	ldr	r2, [pc, #452]	@ (800671c <HAL_DMA_Start_IT+0x4a4>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d036      	beq.n	80065c8 <HAL_DMA_Start_IT+0x350>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a70      	ldr	r2, [pc, #448]	@ (8006720 <HAL_DMA_Start_IT+0x4a8>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d031      	beq.n	80065c8 <HAL_DMA_Start_IT+0x350>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a6e      	ldr	r2, [pc, #440]	@ (8006724 <HAL_DMA_Start_IT+0x4ac>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d02c      	beq.n	80065c8 <HAL_DMA_Start_IT+0x350>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a6d      	ldr	r2, [pc, #436]	@ (8006728 <HAL_DMA_Start_IT+0x4b0>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d027      	beq.n	80065c8 <HAL_DMA_Start_IT+0x350>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a6b      	ldr	r2, [pc, #428]	@ (800672c <HAL_DMA_Start_IT+0x4b4>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d022      	beq.n	80065c8 <HAL_DMA_Start_IT+0x350>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a6a      	ldr	r2, [pc, #424]	@ (8006730 <HAL_DMA_Start_IT+0x4b8>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d01d      	beq.n	80065c8 <HAL_DMA_Start_IT+0x350>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a68      	ldr	r2, [pc, #416]	@ (8006734 <HAL_DMA_Start_IT+0x4bc>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d018      	beq.n	80065c8 <HAL_DMA_Start_IT+0x350>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a67      	ldr	r2, [pc, #412]	@ (8006738 <HAL_DMA_Start_IT+0x4c0>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d013      	beq.n	80065c8 <HAL_DMA_Start_IT+0x350>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a65      	ldr	r2, [pc, #404]	@ (800673c <HAL_DMA_Start_IT+0x4c4>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d00e      	beq.n	80065c8 <HAL_DMA_Start_IT+0x350>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a64      	ldr	r2, [pc, #400]	@ (8006740 <HAL_DMA_Start_IT+0x4c8>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d009      	beq.n	80065c8 <HAL_DMA_Start_IT+0x350>
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a62      	ldr	r2, [pc, #392]	@ (8006744 <HAL_DMA_Start_IT+0x4cc>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d004      	beq.n	80065c8 <HAL_DMA_Start_IT+0x350>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a61      	ldr	r2, [pc, #388]	@ (8006748 <HAL_DMA_Start_IT+0x4d0>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d101      	bne.n	80065cc <HAL_DMA_Start_IT+0x354>
 80065c8:	2301      	movs	r3, #1
 80065ca:	e000      	b.n	80065ce <HAL_DMA_Start_IT+0x356>
 80065cc:	2300      	movs	r3, #0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d01a      	beq.n	8006608 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d007      	beq.n	80065f0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80065ee:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d007      	beq.n	8006608 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006602:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006606:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a37      	ldr	r2, [pc, #220]	@ (80066ec <HAL_DMA_Start_IT+0x474>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d04a      	beq.n	80066a8 <HAL_DMA_Start_IT+0x430>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a36      	ldr	r2, [pc, #216]	@ (80066f0 <HAL_DMA_Start_IT+0x478>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d045      	beq.n	80066a8 <HAL_DMA_Start_IT+0x430>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a34      	ldr	r2, [pc, #208]	@ (80066f4 <HAL_DMA_Start_IT+0x47c>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d040      	beq.n	80066a8 <HAL_DMA_Start_IT+0x430>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a33      	ldr	r2, [pc, #204]	@ (80066f8 <HAL_DMA_Start_IT+0x480>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d03b      	beq.n	80066a8 <HAL_DMA_Start_IT+0x430>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a31      	ldr	r2, [pc, #196]	@ (80066fc <HAL_DMA_Start_IT+0x484>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d036      	beq.n	80066a8 <HAL_DMA_Start_IT+0x430>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a30      	ldr	r2, [pc, #192]	@ (8006700 <HAL_DMA_Start_IT+0x488>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d031      	beq.n	80066a8 <HAL_DMA_Start_IT+0x430>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a2e      	ldr	r2, [pc, #184]	@ (8006704 <HAL_DMA_Start_IT+0x48c>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d02c      	beq.n	80066a8 <HAL_DMA_Start_IT+0x430>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a2d      	ldr	r2, [pc, #180]	@ (8006708 <HAL_DMA_Start_IT+0x490>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d027      	beq.n	80066a8 <HAL_DMA_Start_IT+0x430>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a2b      	ldr	r2, [pc, #172]	@ (800670c <HAL_DMA_Start_IT+0x494>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d022      	beq.n	80066a8 <HAL_DMA_Start_IT+0x430>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a2a      	ldr	r2, [pc, #168]	@ (8006710 <HAL_DMA_Start_IT+0x498>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d01d      	beq.n	80066a8 <HAL_DMA_Start_IT+0x430>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a28      	ldr	r2, [pc, #160]	@ (8006714 <HAL_DMA_Start_IT+0x49c>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d018      	beq.n	80066a8 <HAL_DMA_Start_IT+0x430>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a27      	ldr	r2, [pc, #156]	@ (8006718 <HAL_DMA_Start_IT+0x4a0>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d013      	beq.n	80066a8 <HAL_DMA_Start_IT+0x430>
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a25      	ldr	r2, [pc, #148]	@ (800671c <HAL_DMA_Start_IT+0x4a4>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d00e      	beq.n	80066a8 <HAL_DMA_Start_IT+0x430>
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a24      	ldr	r2, [pc, #144]	@ (8006720 <HAL_DMA_Start_IT+0x4a8>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d009      	beq.n	80066a8 <HAL_DMA_Start_IT+0x430>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a22      	ldr	r2, [pc, #136]	@ (8006724 <HAL_DMA_Start_IT+0x4ac>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d004      	beq.n	80066a8 <HAL_DMA_Start_IT+0x430>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a21      	ldr	r2, [pc, #132]	@ (8006728 <HAL_DMA_Start_IT+0x4b0>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d108      	bne.n	80066ba <HAL_DMA_Start_IT+0x442>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f042 0201 	orr.w	r2, r2, #1
 80066b6:	601a      	str	r2, [r3, #0]
 80066b8:	e012      	b.n	80066e0 <HAL_DMA_Start_IT+0x468>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f042 0201 	orr.w	r2, r2, #1
 80066c8:	601a      	str	r2, [r3, #0]
 80066ca:	e009      	b.n	80066e0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80066d2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80066e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3718      	adds	r7, #24
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	40020010 	.word	0x40020010
 80066f0:	40020028 	.word	0x40020028
 80066f4:	40020040 	.word	0x40020040
 80066f8:	40020058 	.word	0x40020058
 80066fc:	40020070 	.word	0x40020070
 8006700:	40020088 	.word	0x40020088
 8006704:	400200a0 	.word	0x400200a0
 8006708:	400200b8 	.word	0x400200b8
 800670c:	40020410 	.word	0x40020410
 8006710:	40020428 	.word	0x40020428
 8006714:	40020440 	.word	0x40020440
 8006718:	40020458 	.word	0x40020458
 800671c:	40020470 	.word	0x40020470
 8006720:	40020488 	.word	0x40020488
 8006724:	400204a0 	.word	0x400204a0
 8006728:	400204b8 	.word	0x400204b8
 800672c:	58025408 	.word	0x58025408
 8006730:	5802541c 	.word	0x5802541c
 8006734:	58025430 	.word	0x58025430
 8006738:	58025444 	.word	0x58025444
 800673c:	58025458 	.word	0x58025458
 8006740:	5802546c 	.word	0x5802546c
 8006744:	58025480 	.word	0x58025480
 8006748:	58025494 	.word	0x58025494

0800674c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b086      	sub	sp, #24
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006754:	f7ff f84a 	bl	80057ec <HAL_GetTick>
 8006758:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d101      	bne.n	8006764 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e2dc      	b.n	8006d1e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800676a:	b2db      	uxtb	r3, r3
 800676c:	2b02      	cmp	r3, #2
 800676e:	d008      	beq.n	8006782 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2280      	movs	r2, #128	@ 0x80
 8006774:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e2cd      	b.n	8006d1e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a76      	ldr	r2, [pc, #472]	@ (8006960 <HAL_DMA_Abort+0x214>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d04a      	beq.n	8006822 <HAL_DMA_Abort+0xd6>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a74      	ldr	r2, [pc, #464]	@ (8006964 <HAL_DMA_Abort+0x218>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d045      	beq.n	8006822 <HAL_DMA_Abort+0xd6>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a73      	ldr	r2, [pc, #460]	@ (8006968 <HAL_DMA_Abort+0x21c>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d040      	beq.n	8006822 <HAL_DMA_Abort+0xd6>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a71      	ldr	r2, [pc, #452]	@ (800696c <HAL_DMA_Abort+0x220>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d03b      	beq.n	8006822 <HAL_DMA_Abort+0xd6>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a70      	ldr	r2, [pc, #448]	@ (8006970 <HAL_DMA_Abort+0x224>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d036      	beq.n	8006822 <HAL_DMA_Abort+0xd6>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a6e      	ldr	r2, [pc, #440]	@ (8006974 <HAL_DMA_Abort+0x228>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d031      	beq.n	8006822 <HAL_DMA_Abort+0xd6>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a6d      	ldr	r2, [pc, #436]	@ (8006978 <HAL_DMA_Abort+0x22c>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d02c      	beq.n	8006822 <HAL_DMA_Abort+0xd6>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a6b      	ldr	r2, [pc, #428]	@ (800697c <HAL_DMA_Abort+0x230>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d027      	beq.n	8006822 <HAL_DMA_Abort+0xd6>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a6a      	ldr	r2, [pc, #424]	@ (8006980 <HAL_DMA_Abort+0x234>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d022      	beq.n	8006822 <HAL_DMA_Abort+0xd6>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a68      	ldr	r2, [pc, #416]	@ (8006984 <HAL_DMA_Abort+0x238>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d01d      	beq.n	8006822 <HAL_DMA_Abort+0xd6>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a67      	ldr	r2, [pc, #412]	@ (8006988 <HAL_DMA_Abort+0x23c>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d018      	beq.n	8006822 <HAL_DMA_Abort+0xd6>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a65      	ldr	r2, [pc, #404]	@ (800698c <HAL_DMA_Abort+0x240>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d013      	beq.n	8006822 <HAL_DMA_Abort+0xd6>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a64      	ldr	r2, [pc, #400]	@ (8006990 <HAL_DMA_Abort+0x244>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d00e      	beq.n	8006822 <HAL_DMA_Abort+0xd6>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a62      	ldr	r2, [pc, #392]	@ (8006994 <HAL_DMA_Abort+0x248>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d009      	beq.n	8006822 <HAL_DMA_Abort+0xd6>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a61      	ldr	r2, [pc, #388]	@ (8006998 <HAL_DMA_Abort+0x24c>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d004      	beq.n	8006822 <HAL_DMA_Abort+0xd6>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a5f      	ldr	r2, [pc, #380]	@ (800699c <HAL_DMA_Abort+0x250>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d101      	bne.n	8006826 <HAL_DMA_Abort+0xda>
 8006822:	2301      	movs	r3, #1
 8006824:	e000      	b.n	8006828 <HAL_DMA_Abort+0xdc>
 8006826:	2300      	movs	r3, #0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d013      	beq.n	8006854 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f022 021e 	bic.w	r2, r2, #30
 800683a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	695a      	ldr	r2, [r3, #20]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800684a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	617b      	str	r3, [r7, #20]
 8006852:	e00a      	b.n	800686a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f022 020e 	bic.w	r2, r2, #14
 8006862:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a3c      	ldr	r2, [pc, #240]	@ (8006960 <HAL_DMA_Abort+0x214>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d072      	beq.n	800695a <HAL_DMA_Abort+0x20e>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a3a      	ldr	r2, [pc, #232]	@ (8006964 <HAL_DMA_Abort+0x218>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d06d      	beq.n	800695a <HAL_DMA_Abort+0x20e>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a39      	ldr	r2, [pc, #228]	@ (8006968 <HAL_DMA_Abort+0x21c>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d068      	beq.n	800695a <HAL_DMA_Abort+0x20e>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a37      	ldr	r2, [pc, #220]	@ (800696c <HAL_DMA_Abort+0x220>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d063      	beq.n	800695a <HAL_DMA_Abort+0x20e>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a36      	ldr	r2, [pc, #216]	@ (8006970 <HAL_DMA_Abort+0x224>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d05e      	beq.n	800695a <HAL_DMA_Abort+0x20e>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a34      	ldr	r2, [pc, #208]	@ (8006974 <HAL_DMA_Abort+0x228>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d059      	beq.n	800695a <HAL_DMA_Abort+0x20e>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a33      	ldr	r2, [pc, #204]	@ (8006978 <HAL_DMA_Abort+0x22c>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d054      	beq.n	800695a <HAL_DMA_Abort+0x20e>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a31      	ldr	r2, [pc, #196]	@ (800697c <HAL_DMA_Abort+0x230>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d04f      	beq.n	800695a <HAL_DMA_Abort+0x20e>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a30      	ldr	r2, [pc, #192]	@ (8006980 <HAL_DMA_Abort+0x234>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d04a      	beq.n	800695a <HAL_DMA_Abort+0x20e>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a2e      	ldr	r2, [pc, #184]	@ (8006984 <HAL_DMA_Abort+0x238>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d045      	beq.n	800695a <HAL_DMA_Abort+0x20e>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a2d      	ldr	r2, [pc, #180]	@ (8006988 <HAL_DMA_Abort+0x23c>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d040      	beq.n	800695a <HAL_DMA_Abort+0x20e>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a2b      	ldr	r2, [pc, #172]	@ (800698c <HAL_DMA_Abort+0x240>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d03b      	beq.n	800695a <HAL_DMA_Abort+0x20e>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a2a      	ldr	r2, [pc, #168]	@ (8006990 <HAL_DMA_Abort+0x244>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d036      	beq.n	800695a <HAL_DMA_Abort+0x20e>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a28      	ldr	r2, [pc, #160]	@ (8006994 <HAL_DMA_Abort+0x248>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d031      	beq.n	800695a <HAL_DMA_Abort+0x20e>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a27      	ldr	r2, [pc, #156]	@ (8006998 <HAL_DMA_Abort+0x24c>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d02c      	beq.n	800695a <HAL_DMA_Abort+0x20e>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a25      	ldr	r2, [pc, #148]	@ (800699c <HAL_DMA_Abort+0x250>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d027      	beq.n	800695a <HAL_DMA_Abort+0x20e>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a24      	ldr	r2, [pc, #144]	@ (80069a0 <HAL_DMA_Abort+0x254>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d022      	beq.n	800695a <HAL_DMA_Abort+0x20e>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a22      	ldr	r2, [pc, #136]	@ (80069a4 <HAL_DMA_Abort+0x258>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d01d      	beq.n	800695a <HAL_DMA_Abort+0x20e>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a21      	ldr	r2, [pc, #132]	@ (80069a8 <HAL_DMA_Abort+0x25c>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d018      	beq.n	800695a <HAL_DMA_Abort+0x20e>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a1f      	ldr	r2, [pc, #124]	@ (80069ac <HAL_DMA_Abort+0x260>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d013      	beq.n	800695a <HAL_DMA_Abort+0x20e>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a1e      	ldr	r2, [pc, #120]	@ (80069b0 <HAL_DMA_Abort+0x264>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d00e      	beq.n	800695a <HAL_DMA_Abort+0x20e>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a1c      	ldr	r2, [pc, #112]	@ (80069b4 <HAL_DMA_Abort+0x268>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d009      	beq.n	800695a <HAL_DMA_Abort+0x20e>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a1b      	ldr	r2, [pc, #108]	@ (80069b8 <HAL_DMA_Abort+0x26c>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d004      	beq.n	800695a <HAL_DMA_Abort+0x20e>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a19      	ldr	r2, [pc, #100]	@ (80069bc <HAL_DMA_Abort+0x270>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d132      	bne.n	80069c0 <HAL_DMA_Abort+0x274>
 800695a:	2301      	movs	r3, #1
 800695c:	e031      	b.n	80069c2 <HAL_DMA_Abort+0x276>
 800695e:	bf00      	nop
 8006960:	40020010 	.word	0x40020010
 8006964:	40020028 	.word	0x40020028
 8006968:	40020040 	.word	0x40020040
 800696c:	40020058 	.word	0x40020058
 8006970:	40020070 	.word	0x40020070
 8006974:	40020088 	.word	0x40020088
 8006978:	400200a0 	.word	0x400200a0
 800697c:	400200b8 	.word	0x400200b8
 8006980:	40020410 	.word	0x40020410
 8006984:	40020428 	.word	0x40020428
 8006988:	40020440 	.word	0x40020440
 800698c:	40020458 	.word	0x40020458
 8006990:	40020470 	.word	0x40020470
 8006994:	40020488 	.word	0x40020488
 8006998:	400204a0 	.word	0x400204a0
 800699c:	400204b8 	.word	0x400204b8
 80069a0:	58025408 	.word	0x58025408
 80069a4:	5802541c 	.word	0x5802541c
 80069a8:	58025430 	.word	0x58025430
 80069ac:	58025444 	.word	0x58025444
 80069b0:	58025458 	.word	0x58025458
 80069b4:	5802546c 	.word	0x5802546c
 80069b8:	58025480 	.word	0x58025480
 80069bc:	58025494 	.word	0x58025494
 80069c0:	2300      	movs	r3, #0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d007      	beq.n	80069d6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80069d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a6d      	ldr	r2, [pc, #436]	@ (8006b90 <HAL_DMA_Abort+0x444>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d04a      	beq.n	8006a76 <HAL_DMA_Abort+0x32a>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a6b      	ldr	r2, [pc, #428]	@ (8006b94 <HAL_DMA_Abort+0x448>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d045      	beq.n	8006a76 <HAL_DMA_Abort+0x32a>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a6a      	ldr	r2, [pc, #424]	@ (8006b98 <HAL_DMA_Abort+0x44c>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d040      	beq.n	8006a76 <HAL_DMA_Abort+0x32a>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a68      	ldr	r2, [pc, #416]	@ (8006b9c <HAL_DMA_Abort+0x450>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d03b      	beq.n	8006a76 <HAL_DMA_Abort+0x32a>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a67      	ldr	r2, [pc, #412]	@ (8006ba0 <HAL_DMA_Abort+0x454>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d036      	beq.n	8006a76 <HAL_DMA_Abort+0x32a>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a65      	ldr	r2, [pc, #404]	@ (8006ba4 <HAL_DMA_Abort+0x458>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d031      	beq.n	8006a76 <HAL_DMA_Abort+0x32a>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a64      	ldr	r2, [pc, #400]	@ (8006ba8 <HAL_DMA_Abort+0x45c>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d02c      	beq.n	8006a76 <HAL_DMA_Abort+0x32a>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a62      	ldr	r2, [pc, #392]	@ (8006bac <HAL_DMA_Abort+0x460>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d027      	beq.n	8006a76 <HAL_DMA_Abort+0x32a>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a61      	ldr	r2, [pc, #388]	@ (8006bb0 <HAL_DMA_Abort+0x464>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d022      	beq.n	8006a76 <HAL_DMA_Abort+0x32a>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a5f      	ldr	r2, [pc, #380]	@ (8006bb4 <HAL_DMA_Abort+0x468>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d01d      	beq.n	8006a76 <HAL_DMA_Abort+0x32a>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a5e      	ldr	r2, [pc, #376]	@ (8006bb8 <HAL_DMA_Abort+0x46c>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d018      	beq.n	8006a76 <HAL_DMA_Abort+0x32a>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a5c      	ldr	r2, [pc, #368]	@ (8006bbc <HAL_DMA_Abort+0x470>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d013      	beq.n	8006a76 <HAL_DMA_Abort+0x32a>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a5b      	ldr	r2, [pc, #364]	@ (8006bc0 <HAL_DMA_Abort+0x474>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d00e      	beq.n	8006a76 <HAL_DMA_Abort+0x32a>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a59      	ldr	r2, [pc, #356]	@ (8006bc4 <HAL_DMA_Abort+0x478>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d009      	beq.n	8006a76 <HAL_DMA_Abort+0x32a>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a58      	ldr	r2, [pc, #352]	@ (8006bc8 <HAL_DMA_Abort+0x47c>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d004      	beq.n	8006a76 <HAL_DMA_Abort+0x32a>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a56      	ldr	r2, [pc, #344]	@ (8006bcc <HAL_DMA_Abort+0x480>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d108      	bne.n	8006a88 <HAL_DMA_Abort+0x33c>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f022 0201 	bic.w	r2, r2, #1
 8006a84:	601a      	str	r2, [r3, #0]
 8006a86:	e007      	b.n	8006a98 <HAL_DMA_Abort+0x34c>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f022 0201 	bic.w	r2, r2, #1
 8006a96:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006a98:	e013      	b.n	8006ac2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006a9a:	f7fe fea7 	bl	80057ec <HAL_GetTick>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	1ad3      	subs	r3, r2, r3
 8006aa4:	2b05      	cmp	r3, #5
 8006aa6:	d90c      	bls.n	8006ac2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2220      	movs	r2, #32
 8006aac:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2203      	movs	r2, #3
 8006ab2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e12d      	b.n	8006d1e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1e5      	bne.n	8006a9a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a2f      	ldr	r2, [pc, #188]	@ (8006b90 <HAL_DMA_Abort+0x444>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d04a      	beq.n	8006b6e <HAL_DMA_Abort+0x422>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a2d      	ldr	r2, [pc, #180]	@ (8006b94 <HAL_DMA_Abort+0x448>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d045      	beq.n	8006b6e <HAL_DMA_Abort+0x422>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a2c      	ldr	r2, [pc, #176]	@ (8006b98 <HAL_DMA_Abort+0x44c>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d040      	beq.n	8006b6e <HAL_DMA_Abort+0x422>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a2a      	ldr	r2, [pc, #168]	@ (8006b9c <HAL_DMA_Abort+0x450>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d03b      	beq.n	8006b6e <HAL_DMA_Abort+0x422>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a29      	ldr	r2, [pc, #164]	@ (8006ba0 <HAL_DMA_Abort+0x454>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d036      	beq.n	8006b6e <HAL_DMA_Abort+0x422>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a27      	ldr	r2, [pc, #156]	@ (8006ba4 <HAL_DMA_Abort+0x458>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d031      	beq.n	8006b6e <HAL_DMA_Abort+0x422>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a26      	ldr	r2, [pc, #152]	@ (8006ba8 <HAL_DMA_Abort+0x45c>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d02c      	beq.n	8006b6e <HAL_DMA_Abort+0x422>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a24      	ldr	r2, [pc, #144]	@ (8006bac <HAL_DMA_Abort+0x460>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d027      	beq.n	8006b6e <HAL_DMA_Abort+0x422>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a23      	ldr	r2, [pc, #140]	@ (8006bb0 <HAL_DMA_Abort+0x464>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d022      	beq.n	8006b6e <HAL_DMA_Abort+0x422>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a21      	ldr	r2, [pc, #132]	@ (8006bb4 <HAL_DMA_Abort+0x468>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d01d      	beq.n	8006b6e <HAL_DMA_Abort+0x422>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a20      	ldr	r2, [pc, #128]	@ (8006bb8 <HAL_DMA_Abort+0x46c>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d018      	beq.n	8006b6e <HAL_DMA_Abort+0x422>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a1e      	ldr	r2, [pc, #120]	@ (8006bbc <HAL_DMA_Abort+0x470>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d013      	beq.n	8006b6e <HAL_DMA_Abort+0x422>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a1d      	ldr	r2, [pc, #116]	@ (8006bc0 <HAL_DMA_Abort+0x474>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d00e      	beq.n	8006b6e <HAL_DMA_Abort+0x422>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a1b      	ldr	r2, [pc, #108]	@ (8006bc4 <HAL_DMA_Abort+0x478>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d009      	beq.n	8006b6e <HAL_DMA_Abort+0x422>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a1a      	ldr	r2, [pc, #104]	@ (8006bc8 <HAL_DMA_Abort+0x47c>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d004      	beq.n	8006b6e <HAL_DMA_Abort+0x422>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a18      	ldr	r2, [pc, #96]	@ (8006bcc <HAL_DMA_Abort+0x480>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d101      	bne.n	8006b72 <HAL_DMA_Abort+0x426>
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e000      	b.n	8006b74 <HAL_DMA_Abort+0x428>
 8006b72:	2300      	movs	r3, #0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d02b      	beq.n	8006bd0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b7c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b82:	f003 031f 	and.w	r3, r3, #31
 8006b86:	223f      	movs	r2, #63	@ 0x3f
 8006b88:	409a      	lsls	r2, r3
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	609a      	str	r2, [r3, #8]
 8006b8e:	e02a      	b.n	8006be6 <HAL_DMA_Abort+0x49a>
 8006b90:	40020010 	.word	0x40020010
 8006b94:	40020028 	.word	0x40020028
 8006b98:	40020040 	.word	0x40020040
 8006b9c:	40020058 	.word	0x40020058
 8006ba0:	40020070 	.word	0x40020070
 8006ba4:	40020088 	.word	0x40020088
 8006ba8:	400200a0 	.word	0x400200a0
 8006bac:	400200b8 	.word	0x400200b8
 8006bb0:	40020410 	.word	0x40020410
 8006bb4:	40020428 	.word	0x40020428
 8006bb8:	40020440 	.word	0x40020440
 8006bbc:	40020458 	.word	0x40020458
 8006bc0:	40020470 	.word	0x40020470
 8006bc4:	40020488 	.word	0x40020488
 8006bc8:	400204a0 	.word	0x400204a0
 8006bcc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bd4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bda:	f003 031f 	and.w	r3, r3, #31
 8006bde:	2201      	movs	r2, #1
 8006be0:	409a      	lsls	r2, r3
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a4f      	ldr	r2, [pc, #316]	@ (8006d28 <HAL_DMA_Abort+0x5dc>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d072      	beq.n	8006cd6 <HAL_DMA_Abort+0x58a>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a4d      	ldr	r2, [pc, #308]	@ (8006d2c <HAL_DMA_Abort+0x5e0>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d06d      	beq.n	8006cd6 <HAL_DMA_Abort+0x58a>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a4c      	ldr	r2, [pc, #304]	@ (8006d30 <HAL_DMA_Abort+0x5e4>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d068      	beq.n	8006cd6 <HAL_DMA_Abort+0x58a>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a4a      	ldr	r2, [pc, #296]	@ (8006d34 <HAL_DMA_Abort+0x5e8>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d063      	beq.n	8006cd6 <HAL_DMA_Abort+0x58a>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a49      	ldr	r2, [pc, #292]	@ (8006d38 <HAL_DMA_Abort+0x5ec>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d05e      	beq.n	8006cd6 <HAL_DMA_Abort+0x58a>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a47      	ldr	r2, [pc, #284]	@ (8006d3c <HAL_DMA_Abort+0x5f0>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d059      	beq.n	8006cd6 <HAL_DMA_Abort+0x58a>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a46      	ldr	r2, [pc, #280]	@ (8006d40 <HAL_DMA_Abort+0x5f4>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d054      	beq.n	8006cd6 <HAL_DMA_Abort+0x58a>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a44      	ldr	r2, [pc, #272]	@ (8006d44 <HAL_DMA_Abort+0x5f8>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d04f      	beq.n	8006cd6 <HAL_DMA_Abort+0x58a>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a43      	ldr	r2, [pc, #268]	@ (8006d48 <HAL_DMA_Abort+0x5fc>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d04a      	beq.n	8006cd6 <HAL_DMA_Abort+0x58a>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a41      	ldr	r2, [pc, #260]	@ (8006d4c <HAL_DMA_Abort+0x600>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d045      	beq.n	8006cd6 <HAL_DMA_Abort+0x58a>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a40      	ldr	r2, [pc, #256]	@ (8006d50 <HAL_DMA_Abort+0x604>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d040      	beq.n	8006cd6 <HAL_DMA_Abort+0x58a>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a3e      	ldr	r2, [pc, #248]	@ (8006d54 <HAL_DMA_Abort+0x608>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d03b      	beq.n	8006cd6 <HAL_DMA_Abort+0x58a>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a3d      	ldr	r2, [pc, #244]	@ (8006d58 <HAL_DMA_Abort+0x60c>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d036      	beq.n	8006cd6 <HAL_DMA_Abort+0x58a>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a3b      	ldr	r2, [pc, #236]	@ (8006d5c <HAL_DMA_Abort+0x610>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d031      	beq.n	8006cd6 <HAL_DMA_Abort+0x58a>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a3a      	ldr	r2, [pc, #232]	@ (8006d60 <HAL_DMA_Abort+0x614>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d02c      	beq.n	8006cd6 <HAL_DMA_Abort+0x58a>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a38      	ldr	r2, [pc, #224]	@ (8006d64 <HAL_DMA_Abort+0x618>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d027      	beq.n	8006cd6 <HAL_DMA_Abort+0x58a>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a37      	ldr	r2, [pc, #220]	@ (8006d68 <HAL_DMA_Abort+0x61c>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d022      	beq.n	8006cd6 <HAL_DMA_Abort+0x58a>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a35      	ldr	r2, [pc, #212]	@ (8006d6c <HAL_DMA_Abort+0x620>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d01d      	beq.n	8006cd6 <HAL_DMA_Abort+0x58a>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a34      	ldr	r2, [pc, #208]	@ (8006d70 <HAL_DMA_Abort+0x624>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d018      	beq.n	8006cd6 <HAL_DMA_Abort+0x58a>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a32      	ldr	r2, [pc, #200]	@ (8006d74 <HAL_DMA_Abort+0x628>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d013      	beq.n	8006cd6 <HAL_DMA_Abort+0x58a>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a31      	ldr	r2, [pc, #196]	@ (8006d78 <HAL_DMA_Abort+0x62c>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d00e      	beq.n	8006cd6 <HAL_DMA_Abort+0x58a>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a2f      	ldr	r2, [pc, #188]	@ (8006d7c <HAL_DMA_Abort+0x630>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d009      	beq.n	8006cd6 <HAL_DMA_Abort+0x58a>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a2e      	ldr	r2, [pc, #184]	@ (8006d80 <HAL_DMA_Abort+0x634>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d004      	beq.n	8006cd6 <HAL_DMA_Abort+0x58a>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a2c      	ldr	r2, [pc, #176]	@ (8006d84 <HAL_DMA_Abort+0x638>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d101      	bne.n	8006cda <HAL_DMA_Abort+0x58e>
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e000      	b.n	8006cdc <HAL_DMA_Abort+0x590>
 8006cda:	2300      	movs	r3, #0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d015      	beq.n	8006d0c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006ce8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00c      	beq.n	8006d0c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cfc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006d00:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006d0a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3718      	adds	r7, #24
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	40020010 	.word	0x40020010
 8006d2c:	40020028 	.word	0x40020028
 8006d30:	40020040 	.word	0x40020040
 8006d34:	40020058 	.word	0x40020058
 8006d38:	40020070 	.word	0x40020070
 8006d3c:	40020088 	.word	0x40020088
 8006d40:	400200a0 	.word	0x400200a0
 8006d44:	400200b8 	.word	0x400200b8
 8006d48:	40020410 	.word	0x40020410
 8006d4c:	40020428 	.word	0x40020428
 8006d50:	40020440 	.word	0x40020440
 8006d54:	40020458 	.word	0x40020458
 8006d58:	40020470 	.word	0x40020470
 8006d5c:	40020488 	.word	0x40020488
 8006d60:	400204a0 	.word	0x400204a0
 8006d64:	400204b8 	.word	0x400204b8
 8006d68:	58025408 	.word	0x58025408
 8006d6c:	5802541c 	.word	0x5802541c
 8006d70:	58025430 	.word	0x58025430
 8006d74:	58025444 	.word	0x58025444
 8006d78:	58025458 	.word	0x58025458
 8006d7c:	5802546c 	.word	0x5802546c
 8006d80:	58025480 	.word	0x58025480
 8006d84:	58025494 	.word	0x58025494

08006d88 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d101      	bne.n	8006d9a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e237      	b.n	800720a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d004      	beq.n	8006db0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2280      	movs	r2, #128	@ 0x80
 8006daa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	e22c      	b.n	800720a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a5c      	ldr	r2, [pc, #368]	@ (8006f28 <HAL_DMA_Abort_IT+0x1a0>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d04a      	beq.n	8006e50 <HAL_DMA_Abort_IT+0xc8>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a5b      	ldr	r2, [pc, #364]	@ (8006f2c <HAL_DMA_Abort_IT+0x1a4>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d045      	beq.n	8006e50 <HAL_DMA_Abort_IT+0xc8>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a59      	ldr	r2, [pc, #356]	@ (8006f30 <HAL_DMA_Abort_IT+0x1a8>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d040      	beq.n	8006e50 <HAL_DMA_Abort_IT+0xc8>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a58      	ldr	r2, [pc, #352]	@ (8006f34 <HAL_DMA_Abort_IT+0x1ac>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d03b      	beq.n	8006e50 <HAL_DMA_Abort_IT+0xc8>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a56      	ldr	r2, [pc, #344]	@ (8006f38 <HAL_DMA_Abort_IT+0x1b0>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d036      	beq.n	8006e50 <HAL_DMA_Abort_IT+0xc8>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a55      	ldr	r2, [pc, #340]	@ (8006f3c <HAL_DMA_Abort_IT+0x1b4>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d031      	beq.n	8006e50 <HAL_DMA_Abort_IT+0xc8>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a53      	ldr	r2, [pc, #332]	@ (8006f40 <HAL_DMA_Abort_IT+0x1b8>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d02c      	beq.n	8006e50 <HAL_DMA_Abort_IT+0xc8>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a52      	ldr	r2, [pc, #328]	@ (8006f44 <HAL_DMA_Abort_IT+0x1bc>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d027      	beq.n	8006e50 <HAL_DMA_Abort_IT+0xc8>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a50      	ldr	r2, [pc, #320]	@ (8006f48 <HAL_DMA_Abort_IT+0x1c0>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d022      	beq.n	8006e50 <HAL_DMA_Abort_IT+0xc8>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a4f      	ldr	r2, [pc, #316]	@ (8006f4c <HAL_DMA_Abort_IT+0x1c4>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d01d      	beq.n	8006e50 <HAL_DMA_Abort_IT+0xc8>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a4d      	ldr	r2, [pc, #308]	@ (8006f50 <HAL_DMA_Abort_IT+0x1c8>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d018      	beq.n	8006e50 <HAL_DMA_Abort_IT+0xc8>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a4c      	ldr	r2, [pc, #304]	@ (8006f54 <HAL_DMA_Abort_IT+0x1cc>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d013      	beq.n	8006e50 <HAL_DMA_Abort_IT+0xc8>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a4a      	ldr	r2, [pc, #296]	@ (8006f58 <HAL_DMA_Abort_IT+0x1d0>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d00e      	beq.n	8006e50 <HAL_DMA_Abort_IT+0xc8>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a49      	ldr	r2, [pc, #292]	@ (8006f5c <HAL_DMA_Abort_IT+0x1d4>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d009      	beq.n	8006e50 <HAL_DMA_Abort_IT+0xc8>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a47      	ldr	r2, [pc, #284]	@ (8006f60 <HAL_DMA_Abort_IT+0x1d8>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d004      	beq.n	8006e50 <HAL_DMA_Abort_IT+0xc8>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a46      	ldr	r2, [pc, #280]	@ (8006f64 <HAL_DMA_Abort_IT+0x1dc>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d101      	bne.n	8006e54 <HAL_DMA_Abort_IT+0xcc>
 8006e50:	2301      	movs	r3, #1
 8006e52:	e000      	b.n	8006e56 <HAL_DMA_Abort_IT+0xce>
 8006e54:	2300      	movs	r3, #0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f000 8086 	beq.w	8006f68 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2204      	movs	r2, #4
 8006e60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a2f      	ldr	r2, [pc, #188]	@ (8006f28 <HAL_DMA_Abort_IT+0x1a0>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d04a      	beq.n	8006f04 <HAL_DMA_Abort_IT+0x17c>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a2e      	ldr	r2, [pc, #184]	@ (8006f2c <HAL_DMA_Abort_IT+0x1a4>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d045      	beq.n	8006f04 <HAL_DMA_Abort_IT+0x17c>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a2c      	ldr	r2, [pc, #176]	@ (8006f30 <HAL_DMA_Abort_IT+0x1a8>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d040      	beq.n	8006f04 <HAL_DMA_Abort_IT+0x17c>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a2b      	ldr	r2, [pc, #172]	@ (8006f34 <HAL_DMA_Abort_IT+0x1ac>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d03b      	beq.n	8006f04 <HAL_DMA_Abort_IT+0x17c>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a29      	ldr	r2, [pc, #164]	@ (8006f38 <HAL_DMA_Abort_IT+0x1b0>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d036      	beq.n	8006f04 <HAL_DMA_Abort_IT+0x17c>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a28      	ldr	r2, [pc, #160]	@ (8006f3c <HAL_DMA_Abort_IT+0x1b4>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d031      	beq.n	8006f04 <HAL_DMA_Abort_IT+0x17c>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a26      	ldr	r2, [pc, #152]	@ (8006f40 <HAL_DMA_Abort_IT+0x1b8>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d02c      	beq.n	8006f04 <HAL_DMA_Abort_IT+0x17c>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a25      	ldr	r2, [pc, #148]	@ (8006f44 <HAL_DMA_Abort_IT+0x1bc>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d027      	beq.n	8006f04 <HAL_DMA_Abort_IT+0x17c>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a23      	ldr	r2, [pc, #140]	@ (8006f48 <HAL_DMA_Abort_IT+0x1c0>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d022      	beq.n	8006f04 <HAL_DMA_Abort_IT+0x17c>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a22      	ldr	r2, [pc, #136]	@ (8006f4c <HAL_DMA_Abort_IT+0x1c4>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d01d      	beq.n	8006f04 <HAL_DMA_Abort_IT+0x17c>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a20      	ldr	r2, [pc, #128]	@ (8006f50 <HAL_DMA_Abort_IT+0x1c8>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d018      	beq.n	8006f04 <HAL_DMA_Abort_IT+0x17c>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a1f      	ldr	r2, [pc, #124]	@ (8006f54 <HAL_DMA_Abort_IT+0x1cc>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d013      	beq.n	8006f04 <HAL_DMA_Abort_IT+0x17c>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a1d      	ldr	r2, [pc, #116]	@ (8006f58 <HAL_DMA_Abort_IT+0x1d0>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d00e      	beq.n	8006f04 <HAL_DMA_Abort_IT+0x17c>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a1c      	ldr	r2, [pc, #112]	@ (8006f5c <HAL_DMA_Abort_IT+0x1d4>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d009      	beq.n	8006f04 <HAL_DMA_Abort_IT+0x17c>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a1a      	ldr	r2, [pc, #104]	@ (8006f60 <HAL_DMA_Abort_IT+0x1d8>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d004      	beq.n	8006f04 <HAL_DMA_Abort_IT+0x17c>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a19      	ldr	r2, [pc, #100]	@ (8006f64 <HAL_DMA_Abort_IT+0x1dc>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d108      	bne.n	8006f16 <HAL_DMA_Abort_IT+0x18e>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f022 0201 	bic.w	r2, r2, #1
 8006f12:	601a      	str	r2, [r3, #0]
 8006f14:	e178      	b.n	8007208 <HAL_DMA_Abort_IT+0x480>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f022 0201 	bic.w	r2, r2, #1
 8006f24:	601a      	str	r2, [r3, #0]
 8006f26:	e16f      	b.n	8007208 <HAL_DMA_Abort_IT+0x480>
 8006f28:	40020010 	.word	0x40020010
 8006f2c:	40020028 	.word	0x40020028
 8006f30:	40020040 	.word	0x40020040
 8006f34:	40020058 	.word	0x40020058
 8006f38:	40020070 	.word	0x40020070
 8006f3c:	40020088 	.word	0x40020088
 8006f40:	400200a0 	.word	0x400200a0
 8006f44:	400200b8 	.word	0x400200b8
 8006f48:	40020410 	.word	0x40020410
 8006f4c:	40020428 	.word	0x40020428
 8006f50:	40020440 	.word	0x40020440
 8006f54:	40020458 	.word	0x40020458
 8006f58:	40020470 	.word	0x40020470
 8006f5c:	40020488 	.word	0x40020488
 8006f60:	400204a0 	.word	0x400204a0
 8006f64:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f022 020e 	bic.w	r2, r2, #14
 8006f76:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a6c      	ldr	r2, [pc, #432]	@ (8007130 <HAL_DMA_Abort_IT+0x3a8>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d04a      	beq.n	8007018 <HAL_DMA_Abort_IT+0x290>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a6b      	ldr	r2, [pc, #428]	@ (8007134 <HAL_DMA_Abort_IT+0x3ac>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d045      	beq.n	8007018 <HAL_DMA_Abort_IT+0x290>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a69      	ldr	r2, [pc, #420]	@ (8007138 <HAL_DMA_Abort_IT+0x3b0>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d040      	beq.n	8007018 <HAL_DMA_Abort_IT+0x290>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a68      	ldr	r2, [pc, #416]	@ (800713c <HAL_DMA_Abort_IT+0x3b4>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d03b      	beq.n	8007018 <HAL_DMA_Abort_IT+0x290>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a66      	ldr	r2, [pc, #408]	@ (8007140 <HAL_DMA_Abort_IT+0x3b8>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d036      	beq.n	8007018 <HAL_DMA_Abort_IT+0x290>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a65      	ldr	r2, [pc, #404]	@ (8007144 <HAL_DMA_Abort_IT+0x3bc>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d031      	beq.n	8007018 <HAL_DMA_Abort_IT+0x290>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a63      	ldr	r2, [pc, #396]	@ (8007148 <HAL_DMA_Abort_IT+0x3c0>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d02c      	beq.n	8007018 <HAL_DMA_Abort_IT+0x290>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a62      	ldr	r2, [pc, #392]	@ (800714c <HAL_DMA_Abort_IT+0x3c4>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d027      	beq.n	8007018 <HAL_DMA_Abort_IT+0x290>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a60      	ldr	r2, [pc, #384]	@ (8007150 <HAL_DMA_Abort_IT+0x3c8>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d022      	beq.n	8007018 <HAL_DMA_Abort_IT+0x290>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a5f      	ldr	r2, [pc, #380]	@ (8007154 <HAL_DMA_Abort_IT+0x3cc>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d01d      	beq.n	8007018 <HAL_DMA_Abort_IT+0x290>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a5d      	ldr	r2, [pc, #372]	@ (8007158 <HAL_DMA_Abort_IT+0x3d0>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d018      	beq.n	8007018 <HAL_DMA_Abort_IT+0x290>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a5c      	ldr	r2, [pc, #368]	@ (800715c <HAL_DMA_Abort_IT+0x3d4>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d013      	beq.n	8007018 <HAL_DMA_Abort_IT+0x290>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a5a      	ldr	r2, [pc, #360]	@ (8007160 <HAL_DMA_Abort_IT+0x3d8>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d00e      	beq.n	8007018 <HAL_DMA_Abort_IT+0x290>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a59      	ldr	r2, [pc, #356]	@ (8007164 <HAL_DMA_Abort_IT+0x3dc>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d009      	beq.n	8007018 <HAL_DMA_Abort_IT+0x290>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a57      	ldr	r2, [pc, #348]	@ (8007168 <HAL_DMA_Abort_IT+0x3e0>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d004      	beq.n	8007018 <HAL_DMA_Abort_IT+0x290>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a56      	ldr	r2, [pc, #344]	@ (800716c <HAL_DMA_Abort_IT+0x3e4>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d108      	bne.n	800702a <HAL_DMA_Abort_IT+0x2a2>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f022 0201 	bic.w	r2, r2, #1
 8007026:	601a      	str	r2, [r3, #0]
 8007028:	e007      	b.n	800703a <HAL_DMA_Abort_IT+0x2b2>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f022 0201 	bic.w	r2, r2, #1
 8007038:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a3c      	ldr	r2, [pc, #240]	@ (8007130 <HAL_DMA_Abort_IT+0x3a8>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d072      	beq.n	800712a <HAL_DMA_Abort_IT+0x3a2>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a3a      	ldr	r2, [pc, #232]	@ (8007134 <HAL_DMA_Abort_IT+0x3ac>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d06d      	beq.n	800712a <HAL_DMA_Abort_IT+0x3a2>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a39      	ldr	r2, [pc, #228]	@ (8007138 <HAL_DMA_Abort_IT+0x3b0>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d068      	beq.n	800712a <HAL_DMA_Abort_IT+0x3a2>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a37      	ldr	r2, [pc, #220]	@ (800713c <HAL_DMA_Abort_IT+0x3b4>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d063      	beq.n	800712a <HAL_DMA_Abort_IT+0x3a2>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a36      	ldr	r2, [pc, #216]	@ (8007140 <HAL_DMA_Abort_IT+0x3b8>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d05e      	beq.n	800712a <HAL_DMA_Abort_IT+0x3a2>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a34      	ldr	r2, [pc, #208]	@ (8007144 <HAL_DMA_Abort_IT+0x3bc>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d059      	beq.n	800712a <HAL_DMA_Abort_IT+0x3a2>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a33      	ldr	r2, [pc, #204]	@ (8007148 <HAL_DMA_Abort_IT+0x3c0>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d054      	beq.n	800712a <HAL_DMA_Abort_IT+0x3a2>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a31      	ldr	r2, [pc, #196]	@ (800714c <HAL_DMA_Abort_IT+0x3c4>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d04f      	beq.n	800712a <HAL_DMA_Abort_IT+0x3a2>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a30      	ldr	r2, [pc, #192]	@ (8007150 <HAL_DMA_Abort_IT+0x3c8>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d04a      	beq.n	800712a <HAL_DMA_Abort_IT+0x3a2>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a2e      	ldr	r2, [pc, #184]	@ (8007154 <HAL_DMA_Abort_IT+0x3cc>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d045      	beq.n	800712a <HAL_DMA_Abort_IT+0x3a2>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a2d      	ldr	r2, [pc, #180]	@ (8007158 <HAL_DMA_Abort_IT+0x3d0>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d040      	beq.n	800712a <HAL_DMA_Abort_IT+0x3a2>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a2b      	ldr	r2, [pc, #172]	@ (800715c <HAL_DMA_Abort_IT+0x3d4>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d03b      	beq.n	800712a <HAL_DMA_Abort_IT+0x3a2>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a2a      	ldr	r2, [pc, #168]	@ (8007160 <HAL_DMA_Abort_IT+0x3d8>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d036      	beq.n	800712a <HAL_DMA_Abort_IT+0x3a2>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a28      	ldr	r2, [pc, #160]	@ (8007164 <HAL_DMA_Abort_IT+0x3dc>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d031      	beq.n	800712a <HAL_DMA_Abort_IT+0x3a2>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a27      	ldr	r2, [pc, #156]	@ (8007168 <HAL_DMA_Abort_IT+0x3e0>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d02c      	beq.n	800712a <HAL_DMA_Abort_IT+0x3a2>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a25      	ldr	r2, [pc, #148]	@ (800716c <HAL_DMA_Abort_IT+0x3e4>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d027      	beq.n	800712a <HAL_DMA_Abort_IT+0x3a2>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a24      	ldr	r2, [pc, #144]	@ (8007170 <HAL_DMA_Abort_IT+0x3e8>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d022      	beq.n	800712a <HAL_DMA_Abort_IT+0x3a2>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a22      	ldr	r2, [pc, #136]	@ (8007174 <HAL_DMA_Abort_IT+0x3ec>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d01d      	beq.n	800712a <HAL_DMA_Abort_IT+0x3a2>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a21      	ldr	r2, [pc, #132]	@ (8007178 <HAL_DMA_Abort_IT+0x3f0>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d018      	beq.n	800712a <HAL_DMA_Abort_IT+0x3a2>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a1f      	ldr	r2, [pc, #124]	@ (800717c <HAL_DMA_Abort_IT+0x3f4>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d013      	beq.n	800712a <HAL_DMA_Abort_IT+0x3a2>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a1e      	ldr	r2, [pc, #120]	@ (8007180 <HAL_DMA_Abort_IT+0x3f8>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d00e      	beq.n	800712a <HAL_DMA_Abort_IT+0x3a2>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a1c      	ldr	r2, [pc, #112]	@ (8007184 <HAL_DMA_Abort_IT+0x3fc>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d009      	beq.n	800712a <HAL_DMA_Abort_IT+0x3a2>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a1b      	ldr	r2, [pc, #108]	@ (8007188 <HAL_DMA_Abort_IT+0x400>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d004      	beq.n	800712a <HAL_DMA_Abort_IT+0x3a2>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a19      	ldr	r2, [pc, #100]	@ (800718c <HAL_DMA_Abort_IT+0x404>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d132      	bne.n	8007190 <HAL_DMA_Abort_IT+0x408>
 800712a:	2301      	movs	r3, #1
 800712c:	e031      	b.n	8007192 <HAL_DMA_Abort_IT+0x40a>
 800712e:	bf00      	nop
 8007130:	40020010 	.word	0x40020010
 8007134:	40020028 	.word	0x40020028
 8007138:	40020040 	.word	0x40020040
 800713c:	40020058 	.word	0x40020058
 8007140:	40020070 	.word	0x40020070
 8007144:	40020088 	.word	0x40020088
 8007148:	400200a0 	.word	0x400200a0
 800714c:	400200b8 	.word	0x400200b8
 8007150:	40020410 	.word	0x40020410
 8007154:	40020428 	.word	0x40020428
 8007158:	40020440 	.word	0x40020440
 800715c:	40020458 	.word	0x40020458
 8007160:	40020470 	.word	0x40020470
 8007164:	40020488 	.word	0x40020488
 8007168:	400204a0 	.word	0x400204a0
 800716c:	400204b8 	.word	0x400204b8
 8007170:	58025408 	.word	0x58025408
 8007174:	5802541c 	.word	0x5802541c
 8007178:	58025430 	.word	0x58025430
 800717c:	58025444 	.word	0x58025444
 8007180:	58025458 	.word	0x58025458
 8007184:	5802546c 	.word	0x5802546c
 8007188:	58025480 	.word	0x58025480
 800718c:	58025494 	.word	0x58025494
 8007190:	2300      	movs	r3, #0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d028      	beq.n	80071e8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80071a4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071aa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071b0:	f003 031f 	and.w	r3, r3, #31
 80071b4:	2201      	movs	r2, #1
 80071b6:	409a      	lsls	r2, r3
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80071c4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00c      	beq.n	80071e8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80071dc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80071e6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d003      	beq.n	8007208 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop

08007214 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b08a      	sub	sp, #40	@ 0x28
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800721c:	2300      	movs	r3, #0
 800721e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007220:	4b67      	ldr	r3, [pc, #412]	@ (80073c0 <HAL_DMA_IRQHandler+0x1ac>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a67      	ldr	r2, [pc, #412]	@ (80073c4 <HAL_DMA_IRQHandler+0x1b0>)
 8007226:	fba2 2303 	umull	r2, r3, r2, r3
 800722a:	0a9b      	lsrs	r3, r3, #10
 800722c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007232:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007238:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800723a:	6a3b      	ldr	r3, [r7, #32]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a5f      	ldr	r2, [pc, #380]	@ (80073c8 <HAL_DMA_IRQHandler+0x1b4>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d04a      	beq.n	80072e6 <HAL_DMA_IRQHandler+0xd2>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a5d      	ldr	r2, [pc, #372]	@ (80073cc <HAL_DMA_IRQHandler+0x1b8>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d045      	beq.n	80072e6 <HAL_DMA_IRQHandler+0xd2>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a5c      	ldr	r2, [pc, #368]	@ (80073d0 <HAL_DMA_IRQHandler+0x1bc>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d040      	beq.n	80072e6 <HAL_DMA_IRQHandler+0xd2>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a5a      	ldr	r2, [pc, #360]	@ (80073d4 <HAL_DMA_IRQHandler+0x1c0>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d03b      	beq.n	80072e6 <HAL_DMA_IRQHandler+0xd2>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a59      	ldr	r2, [pc, #356]	@ (80073d8 <HAL_DMA_IRQHandler+0x1c4>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d036      	beq.n	80072e6 <HAL_DMA_IRQHandler+0xd2>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a57      	ldr	r2, [pc, #348]	@ (80073dc <HAL_DMA_IRQHandler+0x1c8>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d031      	beq.n	80072e6 <HAL_DMA_IRQHandler+0xd2>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a56      	ldr	r2, [pc, #344]	@ (80073e0 <HAL_DMA_IRQHandler+0x1cc>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d02c      	beq.n	80072e6 <HAL_DMA_IRQHandler+0xd2>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a54      	ldr	r2, [pc, #336]	@ (80073e4 <HAL_DMA_IRQHandler+0x1d0>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d027      	beq.n	80072e6 <HAL_DMA_IRQHandler+0xd2>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a53      	ldr	r2, [pc, #332]	@ (80073e8 <HAL_DMA_IRQHandler+0x1d4>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d022      	beq.n	80072e6 <HAL_DMA_IRQHandler+0xd2>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a51      	ldr	r2, [pc, #324]	@ (80073ec <HAL_DMA_IRQHandler+0x1d8>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d01d      	beq.n	80072e6 <HAL_DMA_IRQHandler+0xd2>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a50      	ldr	r2, [pc, #320]	@ (80073f0 <HAL_DMA_IRQHandler+0x1dc>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d018      	beq.n	80072e6 <HAL_DMA_IRQHandler+0xd2>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a4e      	ldr	r2, [pc, #312]	@ (80073f4 <HAL_DMA_IRQHandler+0x1e0>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d013      	beq.n	80072e6 <HAL_DMA_IRQHandler+0xd2>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a4d      	ldr	r2, [pc, #308]	@ (80073f8 <HAL_DMA_IRQHandler+0x1e4>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d00e      	beq.n	80072e6 <HAL_DMA_IRQHandler+0xd2>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a4b      	ldr	r2, [pc, #300]	@ (80073fc <HAL_DMA_IRQHandler+0x1e8>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d009      	beq.n	80072e6 <HAL_DMA_IRQHandler+0xd2>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a4a      	ldr	r2, [pc, #296]	@ (8007400 <HAL_DMA_IRQHandler+0x1ec>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d004      	beq.n	80072e6 <HAL_DMA_IRQHandler+0xd2>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a48      	ldr	r2, [pc, #288]	@ (8007404 <HAL_DMA_IRQHandler+0x1f0>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d101      	bne.n	80072ea <HAL_DMA_IRQHandler+0xd6>
 80072e6:	2301      	movs	r3, #1
 80072e8:	e000      	b.n	80072ec <HAL_DMA_IRQHandler+0xd8>
 80072ea:	2300      	movs	r3, #0
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	f000 842b 	beq.w	8007b48 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072f6:	f003 031f 	and.w	r3, r3, #31
 80072fa:	2208      	movs	r2, #8
 80072fc:	409a      	lsls	r2, r3
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	4013      	ands	r3, r2
 8007302:	2b00      	cmp	r3, #0
 8007304:	f000 80a2 	beq.w	800744c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a2e      	ldr	r2, [pc, #184]	@ (80073c8 <HAL_DMA_IRQHandler+0x1b4>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d04a      	beq.n	80073a8 <HAL_DMA_IRQHandler+0x194>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a2d      	ldr	r2, [pc, #180]	@ (80073cc <HAL_DMA_IRQHandler+0x1b8>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d045      	beq.n	80073a8 <HAL_DMA_IRQHandler+0x194>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a2b      	ldr	r2, [pc, #172]	@ (80073d0 <HAL_DMA_IRQHandler+0x1bc>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d040      	beq.n	80073a8 <HAL_DMA_IRQHandler+0x194>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a2a      	ldr	r2, [pc, #168]	@ (80073d4 <HAL_DMA_IRQHandler+0x1c0>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d03b      	beq.n	80073a8 <HAL_DMA_IRQHandler+0x194>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a28      	ldr	r2, [pc, #160]	@ (80073d8 <HAL_DMA_IRQHandler+0x1c4>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d036      	beq.n	80073a8 <HAL_DMA_IRQHandler+0x194>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a27      	ldr	r2, [pc, #156]	@ (80073dc <HAL_DMA_IRQHandler+0x1c8>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d031      	beq.n	80073a8 <HAL_DMA_IRQHandler+0x194>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a25      	ldr	r2, [pc, #148]	@ (80073e0 <HAL_DMA_IRQHandler+0x1cc>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d02c      	beq.n	80073a8 <HAL_DMA_IRQHandler+0x194>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a24      	ldr	r2, [pc, #144]	@ (80073e4 <HAL_DMA_IRQHandler+0x1d0>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d027      	beq.n	80073a8 <HAL_DMA_IRQHandler+0x194>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a22      	ldr	r2, [pc, #136]	@ (80073e8 <HAL_DMA_IRQHandler+0x1d4>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d022      	beq.n	80073a8 <HAL_DMA_IRQHandler+0x194>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a21      	ldr	r2, [pc, #132]	@ (80073ec <HAL_DMA_IRQHandler+0x1d8>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d01d      	beq.n	80073a8 <HAL_DMA_IRQHandler+0x194>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a1f      	ldr	r2, [pc, #124]	@ (80073f0 <HAL_DMA_IRQHandler+0x1dc>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d018      	beq.n	80073a8 <HAL_DMA_IRQHandler+0x194>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a1e      	ldr	r2, [pc, #120]	@ (80073f4 <HAL_DMA_IRQHandler+0x1e0>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d013      	beq.n	80073a8 <HAL_DMA_IRQHandler+0x194>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a1c      	ldr	r2, [pc, #112]	@ (80073f8 <HAL_DMA_IRQHandler+0x1e4>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d00e      	beq.n	80073a8 <HAL_DMA_IRQHandler+0x194>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a1b      	ldr	r2, [pc, #108]	@ (80073fc <HAL_DMA_IRQHandler+0x1e8>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d009      	beq.n	80073a8 <HAL_DMA_IRQHandler+0x194>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a19      	ldr	r2, [pc, #100]	@ (8007400 <HAL_DMA_IRQHandler+0x1ec>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d004      	beq.n	80073a8 <HAL_DMA_IRQHandler+0x194>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a18      	ldr	r2, [pc, #96]	@ (8007404 <HAL_DMA_IRQHandler+0x1f0>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d12f      	bne.n	8007408 <HAL_DMA_IRQHandler+0x1f4>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 0304 	and.w	r3, r3, #4
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	bf14      	ite	ne
 80073b6:	2301      	movne	r3, #1
 80073b8:	2300      	moveq	r3, #0
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	e02e      	b.n	800741c <HAL_DMA_IRQHandler+0x208>
 80073be:	bf00      	nop
 80073c0:	240000c0 	.word	0x240000c0
 80073c4:	1b4e81b5 	.word	0x1b4e81b5
 80073c8:	40020010 	.word	0x40020010
 80073cc:	40020028 	.word	0x40020028
 80073d0:	40020040 	.word	0x40020040
 80073d4:	40020058 	.word	0x40020058
 80073d8:	40020070 	.word	0x40020070
 80073dc:	40020088 	.word	0x40020088
 80073e0:	400200a0 	.word	0x400200a0
 80073e4:	400200b8 	.word	0x400200b8
 80073e8:	40020410 	.word	0x40020410
 80073ec:	40020428 	.word	0x40020428
 80073f0:	40020440 	.word	0x40020440
 80073f4:	40020458 	.word	0x40020458
 80073f8:	40020470 	.word	0x40020470
 80073fc:	40020488 	.word	0x40020488
 8007400:	400204a0 	.word	0x400204a0
 8007404:	400204b8 	.word	0x400204b8
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f003 0308 	and.w	r3, r3, #8
 8007412:	2b00      	cmp	r3, #0
 8007414:	bf14      	ite	ne
 8007416:	2301      	movne	r3, #1
 8007418:	2300      	moveq	r3, #0
 800741a:	b2db      	uxtb	r3, r3
 800741c:	2b00      	cmp	r3, #0
 800741e:	d015      	beq.n	800744c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f022 0204 	bic.w	r2, r2, #4
 800742e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007434:	f003 031f 	and.w	r3, r3, #31
 8007438:	2208      	movs	r2, #8
 800743a:	409a      	lsls	r2, r3
 800743c:	6a3b      	ldr	r3, [r7, #32]
 800743e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007444:	f043 0201 	orr.w	r2, r3, #1
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007450:	f003 031f 	and.w	r3, r3, #31
 8007454:	69ba      	ldr	r2, [r7, #24]
 8007456:	fa22 f303 	lsr.w	r3, r2, r3
 800745a:	f003 0301 	and.w	r3, r3, #1
 800745e:	2b00      	cmp	r3, #0
 8007460:	d06e      	beq.n	8007540 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a69      	ldr	r2, [pc, #420]	@ (800760c <HAL_DMA_IRQHandler+0x3f8>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d04a      	beq.n	8007502 <HAL_DMA_IRQHandler+0x2ee>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a67      	ldr	r2, [pc, #412]	@ (8007610 <HAL_DMA_IRQHandler+0x3fc>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d045      	beq.n	8007502 <HAL_DMA_IRQHandler+0x2ee>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a66      	ldr	r2, [pc, #408]	@ (8007614 <HAL_DMA_IRQHandler+0x400>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d040      	beq.n	8007502 <HAL_DMA_IRQHandler+0x2ee>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a64      	ldr	r2, [pc, #400]	@ (8007618 <HAL_DMA_IRQHandler+0x404>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d03b      	beq.n	8007502 <HAL_DMA_IRQHandler+0x2ee>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a63      	ldr	r2, [pc, #396]	@ (800761c <HAL_DMA_IRQHandler+0x408>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d036      	beq.n	8007502 <HAL_DMA_IRQHandler+0x2ee>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a61      	ldr	r2, [pc, #388]	@ (8007620 <HAL_DMA_IRQHandler+0x40c>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d031      	beq.n	8007502 <HAL_DMA_IRQHandler+0x2ee>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a60      	ldr	r2, [pc, #384]	@ (8007624 <HAL_DMA_IRQHandler+0x410>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d02c      	beq.n	8007502 <HAL_DMA_IRQHandler+0x2ee>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a5e      	ldr	r2, [pc, #376]	@ (8007628 <HAL_DMA_IRQHandler+0x414>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d027      	beq.n	8007502 <HAL_DMA_IRQHandler+0x2ee>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a5d      	ldr	r2, [pc, #372]	@ (800762c <HAL_DMA_IRQHandler+0x418>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d022      	beq.n	8007502 <HAL_DMA_IRQHandler+0x2ee>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a5b      	ldr	r2, [pc, #364]	@ (8007630 <HAL_DMA_IRQHandler+0x41c>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d01d      	beq.n	8007502 <HAL_DMA_IRQHandler+0x2ee>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a5a      	ldr	r2, [pc, #360]	@ (8007634 <HAL_DMA_IRQHandler+0x420>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d018      	beq.n	8007502 <HAL_DMA_IRQHandler+0x2ee>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a58      	ldr	r2, [pc, #352]	@ (8007638 <HAL_DMA_IRQHandler+0x424>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d013      	beq.n	8007502 <HAL_DMA_IRQHandler+0x2ee>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a57      	ldr	r2, [pc, #348]	@ (800763c <HAL_DMA_IRQHandler+0x428>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d00e      	beq.n	8007502 <HAL_DMA_IRQHandler+0x2ee>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a55      	ldr	r2, [pc, #340]	@ (8007640 <HAL_DMA_IRQHandler+0x42c>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d009      	beq.n	8007502 <HAL_DMA_IRQHandler+0x2ee>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a54      	ldr	r2, [pc, #336]	@ (8007644 <HAL_DMA_IRQHandler+0x430>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d004      	beq.n	8007502 <HAL_DMA_IRQHandler+0x2ee>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a52      	ldr	r2, [pc, #328]	@ (8007648 <HAL_DMA_IRQHandler+0x434>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d10a      	bne.n	8007518 <HAL_DMA_IRQHandler+0x304>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	695b      	ldr	r3, [r3, #20]
 8007508:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800750c:	2b00      	cmp	r3, #0
 800750e:	bf14      	ite	ne
 8007510:	2301      	movne	r3, #1
 8007512:	2300      	moveq	r3, #0
 8007514:	b2db      	uxtb	r3, r3
 8007516:	e003      	b.n	8007520 <HAL_DMA_IRQHandler+0x30c>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2300      	movs	r3, #0
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00d      	beq.n	8007540 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007528:	f003 031f 	and.w	r3, r3, #31
 800752c:	2201      	movs	r2, #1
 800752e:	409a      	lsls	r2, r3
 8007530:	6a3b      	ldr	r3, [r7, #32]
 8007532:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007538:	f043 0202 	orr.w	r2, r3, #2
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007544:	f003 031f 	and.w	r3, r3, #31
 8007548:	2204      	movs	r2, #4
 800754a:	409a      	lsls	r2, r3
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	4013      	ands	r3, r2
 8007550:	2b00      	cmp	r3, #0
 8007552:	f000 808f 	beq.w	8007674 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a2c      	ldr	r2, [pc, #176]	@ (800760c <HAL_DMA_IRQHandler+0x3f8>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d04a      	beq.n	80075f6 <HAL_DMA_IRQHandler+0x3e2>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a2a      	ldr	r2, [pc, #168]	@ (8007610 <HAL_DMA_IRQHandler+0x3fc>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d045      	beq.n	80075f6 <HAL_DMA_IRQHandler+0x3e2>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a29      	ldr	r2, [pc, #164]	@ (8007614 <HAL_DMA_IRQHandler+0x400>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d040      	beq.n	80075f6 <HAL_DMA_IRQHandler+0x3e2>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a27      	ldr	r2, [pc, #156]	@ (8007618 <HAL_DMA_IRQHandler+0x404>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d03b      	beq.n	80075f6 <HAL_DMA_IRQHandler+0x3e2>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a26      	ldr	r2, [pc, #152]	@ (800761c <HAL_DMA_IRQHandler+0x408>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d036      	beq.n	80075f6 <HAL_DMA_IRQHandler+0x3e2>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a24      	ldr	r2, [pc, #144]	@ (8007620 <HAL_DMA_IRQHandler+0x40c>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d031      	beq.n	80075f6 <HAL_DMA_IRQHandler+0x3e2>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a23      	ldr	r2, [pc, #140]	@ (8007624 <HAL_DMA_IRQHandler+0x410>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d02c      	beq.n	80075f6 <HAL_DMA_IRQHandler+0x3e2>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a21      	ldr	r2, [pc, #132]	@ (8007628 <HAL_DMA_IRQHandler+0x414>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d027      	beq.n	80075f6 <HAL_DMA_IRQHandler+0x3e2>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a20      	ldr	r2, [pc, #128]	@ (800762c <HAL_DMA_IRQHandler+0x418>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d022      	beq.n	80075f6 <HAL_DMA_IRQHandler+0x3e2>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a1e      	ldr	r2, [pc, #120]	@ (8007630 <HAL_DMA_IRQHandler+0x41c>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d01d      	beq.n	80075f6 <HAL_DMA_IRQHandler+0x3e2>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a1d      	ldr	r2, [pc, #116]	@ (8007634 <HAL_DMA_IRQHandler+0x420>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d018      	beq.n	80075f6 <HAL_DMA_IRQHandler+0x3e2>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a1b      	ldr	r2, [pc, #108]	@ (8007638 <HAL_DMA_IRQHandler+0x424>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d013      	beq.n	80075f6 <HAL_DMA_IRQHandler+0x3e2>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a1a      	ldr	r2, [pc, #104]	@ (800763c <HAL_DMA_IRQHandler+0x428>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d00e      	beq.n	80075f6 <HAL_DMA_IRQHandler+0x3e2>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a18      	ldr	r2, [pc, #96]	@ (8007640 <HAL_DMA_IRQHandler+0x42c>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d009      	beq.n	80075f6 <HAL_DMA_IRQHandler+0x3e2>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a17      	ldr	r2, [pc, #92]	@ (8007644 <HAL_DMA_IRQHandler+0x430>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d004      	beq.n	80075f6 <HAL_DMA_IRQHandler+0x3e2>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a15      	ldr	r2, [pc, #84]	@ (8007648 <HAL_DMA_IRQHandler+0x434>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d12a      	bne.n	800764c <HAL_DMA_IRQHandler+0x438>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 0302 	and.w	r3, r3, #2
 8007600:	2b00      	cmp	r3, #0
 8007602:	bf14      	ite	ne
 8007604:	2301      	movne	r3, #1
 8007606:	2300      	moveq	r3, #0
 8007608:	b2db      	uxtb	r3, r3
 800760a:	e023      	b.n	8007654 <HAL_DMA_IRQHandler+0x440>
 800760c:	40020010 	.word	0x40020010
 8007610:	40020028 	.word	0x40020028
 8007614:	40020040 	.word	0x40020040
 8007618:	40020058 	.word	0x40020058
 800761c:	40020070 	.word	0x40020070
 8007620:	40020088 	.word	0x40020088
 8007624:	400200a0 	.word	0x400200a0
 8007628:	400200b8 	.word	0x400200b8
 800762c:	40020410 	.word	0x40020410
 8007630:	40020428 	.word	0x40020428
 8007634:	40020440 	.word	0x40020440
 8007638:	40020458 	.word	0x40020458
 800763c:	40020470 	.word	0x40020470
 8007640:	40020488 	.word	0x40020488
 8007644:	400204a0 	.word	0x400204a0
 8007648:	400204b8 	.word	0x400204b8
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2300      	movs	r3, #0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d00d      	beq.n	8007674 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800765c:	f003 031f 	and.w	r3, r3, #31
 8007660:	2204      	movs	r2, #4
 8007662:	409a      	lsls	r2, r3
 8007664:	6a3b      	ldr	r3, [r7, #32]
 8007666:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800766c:	f043 0204 	orr.w	r2, r3, #4
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007678:	f003 031f 	and.w	r3, r3, #31
 800767c:	2210      	movs	r2, #16
 800767e:	409a      	lsls	r2, r3
 8007680:	69bb      	ldr	r3, [r7, #24]
 8007682:	4013      	ands	r3, r2
 8007684:	2b00      	cmp	r3, #0
 8007686:	f000 80a6 	beq.w	80077d6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a85      	ldr	r2, [pc, #532]	@ (80078a4 <HAL_DMA_IRQHandler+0x690>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d04a      	beq.n	800772a <HAL_DMA_IRQHandler+0x516>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a83      	ldr	r2, [pc, #524]	@ (80078a8 <HAL_DMA_IRQHandler+0x694>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d045      	beq.n	800772a <HAL_DMA_IRQHandler+0x516>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a82      	ldr	r2, [pc, #520]	@ (80078ac <HAL_DMA_IRQHandler+0x698>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d040      	beq.n	800772a <HAL_DMA_IRQHandler+0x516>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a80      	ldr	r2, [pc, #512]	@ (80078b0 <HAL_DMA_IRQHandler+0x69c>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d03b      	beq.n	800772a <HAL_DMA_IRQHandler+0x516>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a7f      	ldr	r2, [pc, #508]	@ (80078b4 <HAL_DMA_IRQHandler+0x6a0>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d036      	beq.n	800772a <HAL_DMA_IRQHandler+0x516>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a7d      	ldr	r2, [pc, #500]	@ (80078b8 <HAL_DMA_IRQHandler+0x6a4>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d031      	beq.n	800772a <HAL_DMA_IRQHandler+0x516>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a7c      	ldr	r2, [pc, #496]	@ (80078bc <HAL_DMA_IRQHandler+0x6a8>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d02c      	beq.n	800772a <HAL_DMA_IRQHandler+0x516>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a7a      	ldr	r2, [pc, #488]	@ (80078c0 <HAL_DMA_IRQHandler+0x6ac>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d027      	beq.n	800772a <HAL_DMA_IRQHandler+0x516>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a79      	ldr	r2, [pc, #484]	@ (80078c4 <HAL_DMA_IRQHandler+0x6b0>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d022      	beq.n	800772a <HAL_DMA_IRQHandler+0x516>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a77      	ldr	r2, [pc, #476]	@ (80078c8 <HAL_DMA_IRQHandler+0x6b4>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d01d      	beq.n	800772a <HAL_DMA_IRQHandler+0x516>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a76      	ldr	r2, [pc, #472]	@ (80078cc <HAL_DMA_IRQHandler+0x6b8>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d018      	beq.n	800772a <HAL_DMA_IRQHandler+0x516>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a74      	ldr	r2, [pc, #464]	@ (80078d0 <HAL_DMA_IRQHandler+0x6bc>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d013      	beq.n	800772a <HAL_DMA_IRQHandler+0x516>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a73      	ldr	r2, [pc, #460]	@ (80078d4 <HAL_DMA_IRQHandler+0x6c0>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d00e      	beq.n	800772a <HAL_DMA_IRQHandler+0x516>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a71      	ldr	r2, [pc, #452]	@ (80078d8 <HAL_DMA_IRQHandler+0x6c4>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d009      	beq.n	800772a <HAL_DMA_IRQHandler+0x516>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a70      	ldr	r2, [pc, #448]	@ (80078dc <HAL_DMA_IRQHandler+0x6c8>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d004      	beq.n	800772a <HAL_DMA_IRQHandler+0x516>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a6e      	ldr	r2, [pc, #440]	@ (80078e0 <HAL_DMA_IRQHandler+0x6cc>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d10a      	bne.n	8007740 <HAL_DMA_IRQHandler+0x52c>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 0308 	and.w	r3, r3, #8
 8007734:	2b00      	cmp	r3, #0
 8007736:	bf14      	ite	ne
 8007738:	2301      	movne	r3, #1
 800773a:	2300      	moveq	r3, #0
 800773c:	b2db      	uxtb	r3, r3
 800773e:	e009      	b.n	8007754 <HAL_DMA_IRQHandler+0x540>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 0304 	and.w	r3, r3, #4
 800774a:	2b00      	cmp	r3, #0
 800774c:	bf14      	ite	ne
 800774e:	2301      	movne	r3, #1
 8007750:	2300      	moveq	r3, #0
 8007752:	b2db      	uxtb	r3, r3
 8007754:	2b00      	cmp	r3, #0
 8007756:	d03e      	beq.n	80077d6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800775c:	f003 031f 	and.w	r3, r3, #31
 8007760:	2210      	movs	r2, #16
 8007762:	409a      	lsls	r2, r3
 8007764:	6a3b      	ldr	r3, [r7, #32]
 8007766:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007772:	2b00      	cmp	r3, #0
 8007774:	d018      	beq.n	80077a8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007780:	2b00      	cmp	r3, #0
 8007782:	d108      	bne.n	8007796 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007788:	2b00      	cmp	r3, #0
 800778a:	d024      	beq.n	80077d6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	4798      	blx	r3
 8007794:	e01f      	b.n	80077d6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800779a:	2b00      	cmp	r3, #0
 800779c:	d01b      	beq.n	80077d6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	4798      	blx	r3
 80077a6:	e016      	b.n	80077d6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d107      	bne.n	80077c6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f022 0208 	bic.w	r2, r2, #8
 80077c4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d003      	beq.n	80077d6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077da:	f003 031f 	and.w	r3, r3, #31
 80077de:	2220      	movs	r2, #32
 80077e0:	409a      	lsls	r2, r3
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	4013      	ands	r3, r2
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	f000 8110 	beq.w	8007a0c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a2c      	ldr	r2, [pc, #176]	@ (80078a4 <HAL_DMA_IRQHandler+0x690>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d04a      	beq.n	800788c <HAL_DMA_IRQHandler+0x678>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a2b      	ldr	r2, [pc, #172]	@ (80078a8 <HAL_DMA_IRQHandler+0x694>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d045      	beq.n	800788c <HAL_DMA_IRQHandler+0x678>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a29      	ldr	r2, [pc, #164]	@ (80078ac <HAL_DMA_IRQHandler+0x698>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d040      	beq.n	800788c <HAL_DMA_IRQHandler+0x678>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a28      	ldr	r2, [pc, #160]	@ (80078b0 <HAL_DMA_IRQHandler+0x69c>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d03b      	beq.n	800788c <HAL_DMA_IRQHandler+0x678>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a26      	ldr	r2, [pc, #152]	@ (80078b4 <HAL_DMA_IRQHandler+0x6a0>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d036      	beq.n	800788c <HAL_DMA_IRQHandler+0x678>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a25      	ldr	r2, [pc, #148]	@ (80078b8 <HAL_DMA_IRQHandler+0x6a4>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d031      	beq.n	800788c <HAL_DMA_IRQHandler+0x678>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a23      	ldr	r2, [pc, #140]	@ (80078bc <HAL_DMA_IRQHandler+0x6a8>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d02c      	beq.n	800788c <HAL_DMA_IRQHandler+0x678>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a22      	ldr	r2, [pc, #136]	@ (80078c0 <HAL_DMA_IRQHandler+0x6ac>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d027      	beq.n	800788c <HAL_DMA_IRQHandler+0x678>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a20      	ldr	r2, [pc, #128]	@ (80078c4 <HAL_DMA_IRQHandler+0x6b0>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d022      	beq.n	800788c <HAL_DMA_IRQHandler+0x678>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a1f      	ldr	r2, [pc, #124]	@ (80078c8 <HAL_DMA_IRQHandler+0x6b4>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d01d      	beq.n	800788c <HAL_DMA_IRQHandler+0x678>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a1d      	ldr	r2, [pc, #116]	@ (80078cc <HAL_DMA_IRQHandler+0x6b8>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d018      	beq.n	800788c <HAL_DMA_IRQHandler+0x678>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a1c      	ldr	r2, [pc, #112]	@ (80078d0 <HAL_DMA_IRQHandler+0x6bc>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d013      	beq.n	800788c <HAL_DMA_IRQHandler+0x678>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a1a      	ldr	r2, [pc, #104]	@ (80078d4 <HAL_DMA_IRQHandler+0x6c0>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d00e      	beq.n	800788c <HAL_DMA_IRQHandler+0x678>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a19      	ldr	r2, [pc, #100]	@ (80078d8 <HAL_DMA_IRQHandler+0x6c4>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d009      	beq.n	800788c <HAL_DMA_IRQHandler+0x678>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a17      	ldr	r2, [pc, #92]	@ (80078dc <HAL_DMA_IRQHandler+0x6c8>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d004      	beq.n	800788c <HAL_DMA_IRQHandler+0x678>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a16      	ldr	r2, [pc, #88]	@ (80078e0 <HAL_DMA_IRQHandler+0x6cc>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d12b      	bne.n	80078e4 <HAL_DMA_IRQHandler+0x6d0>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 0310 	and.w	r3, r3, #16
 8007896:	2b00      	cmp	r3, #0
 8007898:	bf14      	ite	ne
 800789a:	2301      	movne	r3, #1
 800789c:	2300      	moveq	r3, #0
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	e02a      	b.n	80078f8 <HAL_DMA_IRQHandler+0x6e4>
 80078a2:	bf00      	nop
 80078a4:	40020010 	.word	0x40020010
 80078a8:	40020028 	.word	0x40020028
 80078ac:	40020040 	.word	0x40020040
 80078b0:	40020058 	.word	0x40020058
 80078b4:	40020070 	.word	0x40020070
 80078b8:	40020088 	.word	0x40020088
 80078bc:	400200a0 	.word	0x400200a0
 80078c0:	400200b8 	.word	0x400200b8
 80078c4:	40020410 	.word	0x40020410
 80078c8:	40020428 	.word	0x40020428
 80078cc:	40020440 	.word	0x40020440
 80078d0:	40020458 	.word	0x40020458
 80078d4:	40020470 	.word	0x40020470
 80078d8:	40020488 	.word	0x40020488
 80078dc:	400204a0 	.word	0x400204a0
 80078e0:	400204b8 	.word	0x400204b8
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 0302 	and.w	r3, r3, #2
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	bf14      	ite	ne
 80078f2:	2301      	movne	r3, #1
 80078f4:	2300      	moveq	r3, #0
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	f000 8087 	beq.w	8007a0c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007902:	f003 031f 	and.w	r3, r3, #31
 8007906:	2220      	movs	r2, #32
 8007908:	409a      	lsls	r2, r3
 800790a:	6a3b      	ldr	r3, [r7, #32]
 800790c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007914:	b2db      	uxtb	r3, r3
 8007916:	2b04      	cmp	r3, #4
 8007918:	d139      	bne.n	800798e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f022 0216 	bic.w	r2, r2, #22
 8007928:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	695a      	ldr	r2, [r3, #20]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007938:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800793e:	2b00      	cmp	r3, #0
 8007940:	d103      	bne.n	800794a <HAL_DMA_IRQHandler+0x736>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007946:	2b00      	cmp	r3, #0
 8007948:	d007      	beq.n	800795a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f022 0208 	bic.w	r2, r2, #8
 8007958:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800795e:	f003 031f 	and.w	r3, r3, #31
 8007962:	223f      	movs	r2, #63	@ 0x3f
 8007964:	409a      	lsls	r2, r3
 8007966:	6a3b      	ldr	r3, [r7, #32]
 8007968:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2201      	movs	r2, #1
 800796e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800797e:	2b00      	cmp	r3, #0
 8007980:	f000 8382 	beq.w	8008088 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	4798      	blx	r3
          }
          return;
 800798c:	e37c      	b.n	8008088 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007998:	2b00      	cmp	r3, #0
 800799a:	d018      	beq.n	80079ce <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d108      	bne.n	80079bc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d02c      	beq.n	8007a0c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	4798      	blx	r3
 80079ba:	e027      	b.n	8007a0c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d023      	beq.n	8007a0c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	4798      	blx	r3
 80079cc:	e01e      	b.n	8007a0c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d10f      	bne.n	80079fc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f022 0210 	bic.w	r2, r2, #16
 80079ea:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d003      	beq.n	8007a0c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	f000 833e 	beq.w	8008092 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a1a:	f003 0301 	and.w	r3, r3, #1
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	f000 8088 	beq.w	8007b34 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2204      	movs	r2, #4
 8007a28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a89      	ldr	r2, [pc, #548]	@ (8007c58 <HAL_DMA_IRQHandler+0xa44>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d04a      	beq.n	8007acc <HAL_DMA_IRQHandler+0x8b8>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a88      	ldr	r2, [pc, #544]	@ (8007c5c <HAL_DMA_IRQHandler+0xa48>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d045      	beq.n	8007acc <HAL_DMA_IRQHandler+0x8b8>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a86      	ldr	r2, [pc, #536]	@ (8007c60 <HAL_DMA_IRQHandler+0xa4c>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d040      	beq.n	8007acc <HAL_DMA_IRQHandler+0x8b8>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a85      	ldr	r2, [pc, #532]	@ (8007c64 <HAL_DMA_IRQHandler+0xa50>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d03b      	beq.n	8007acc <HAL_DMA_IRQHandler+0x8b8>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a83      	ldr	r2, [pc, #524]	@ (8007c68 <HAL_DMA_IRQHandler+0xa54>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d036      	beq.n	8007acc <HAL_DMA_IRQHandler+0x8b8>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a82      	ldr	r2, [pc, #520]	@ (8007c6c <HAL_DMA_IRQHandler+0xa58>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d031      	beq.n	8007acc <HAL_DMA_IRQHandler+0x8b8>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a80      	ldr	r2, [pc, #512]	@ (8007c70 <HAL_DMA_IRQHandler+0xa5c>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d02c      	beq.n	8007acc <HAL_DMA_IRQHandler+0x8b8>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a7f      	ldr	r2, [pc, #508]	@ (8007c74 <HAL_DMA_IRQHandler+0xa60>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d027      	beq.n	8007acc <HAL_DMA_IRQHandler+0x8b8>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a7d      	ldr	r2, [pc, #500]	@ (8007c78 <HAL_DMA_IRQHandler+0xa64>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d022      	beq.n	8007acc <HAL_DMA_IRQHandler+0x8b8>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a7c      	ldr	r2, [pc, #496]	@ (8007c7c <HAL_DMA_IRQHandler+0xa68>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d01d      	beq.n	8007acc <HAL_DMA_IRQHandler+0x8b8>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a7a      	ldr	r2, [pc, #488]	@ (8007c80 <HAL_DMA_IRQHandler+0xa6c>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d018      	beq.n	8007acc <HAL_DMA_IRQHandler+0x8b8>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a79      	ldr	r2, [pc, #484]	@ (8007c84 <HAL_DMA_IRQHandler+0xa70>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d013      	beq.n	8007acc <HAL_DMA_IRQHandler+0x8b8>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a77      	ldr	r2, [pc, #476]	@ (8007c88 <HAL_DMA_IRQHandler+0xa74>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d00e      	beq.n	8007acc <HAL_DMA_IRQHandler+0x8b8>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a76      	ldr	r2, [pc, #472]	@ (8007c8c <HAL_DMA_IRQHandler+0xa78>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d009      	beq.n	8007acc <HAL_DMA_IRQHandler+0x8b8>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a74      	ldr	r2, [pc, #464]	@ (8007c90 <HAL_DMA_IRQHandler+0xa7c>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d004      	beq.n	8007acc <HAL_DMA_IRQHandler+0x8b8>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a73      	ldr	r2, [pc, #460]	@ (8007c94 <HAL_DMA_IRQHandler+0xa80>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d108      	bne.n	8007ade <HAL_DMA_IRQHandler+0x8ca>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f022 0201 	bic.w	r2, r2, #1
 8007ada:	601a      	str	r2, [r3, #0]
 8007adc:	e007      	b.n	8007aee <HAL_DMA_IRQHandler+0x8da>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f022 0201 	bic.w	r2, r2, #1
 8007aec:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	3301      	adds	r3, #1
 8007af2:	60fb      	str	r3, [r7, #12]
 8007af4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d307      	bcc.n	8007b0a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 0301 	and.w	r3, r3, #1
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d1f2      	bne.n	8007aee <HAL_DMA_IRQHandler+0x8da>
 8007b08:	e000      	b.n	8007b0c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007b0a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f003 0301 	and.w	r3, r3, #1
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d004      	beq.n	8007b24 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2203      	movs	r2, #3
 8007b1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8007b22:	e003      	b.n	8007b2c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	f000 82aa 	beq.w	8008092 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	4798      	blx	r3
 8007b46:	e2a4      	b.n	8008092 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a52      	ldr	r2, [pc, #328]	@ (8007c98 <HAL_DMA_IRQHandler+0xa84>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d04a      	beq.n	8007be8 <HAL_DMA_IRQHandler+0x9d4>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a51      	ldr	r2, [pc, #324]	@ (8007c9c <HAL_DMA_IRQHandler+0xa88>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d045      	beq.n	8007be8 <HAL_DMA_IRQHandler+0x9d4>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a4f      	ldr	r2, [pc, #316]	@ (8007ca0 <HAL_DMA_IRQHandler+0xa8c>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d040      	beq.n	8007be8 <HAL_DMA_IRQHandler+0x9d4>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a4e      	ldr	r2, [pc, #312]	@ (8007ca4 <HAL_DMA_IRQHandler+0xa90>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d03b      	beq.n	8007be8 <HAL_DMA_IRQHandler+0x9d4>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a4c      	ldr	r2, [pc, #304]	@ (8007ca8 <HAL_DMA_IRQHandler+0xa94>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d036      	beq.n	8007be8 <HAL_DMA_IRQHandler+0x9d4>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a4b      	ldr	r2, [pc, #300]	@ (8007cac <HAL_DMA_IRQHandler+0xa98>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d031      	beq.n	8007be8 <HAL_DMA_IRQHandler+0x9d4>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a49      	ldr	r2, [pc, #292]	@ (8007cb0 <HAL_DMA_IRQHandler+0xa9c>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d02c      	beq.n	8007be8 <HAL_DMA_IRQHandler+0x9d4>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a48      	ldr	r2, [pc, #288]	@ (8007cb4 <HAL_DMA_IRQHandler+0xaa0>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d027      	beq.n	8007be8 <HAL_DMA_IRQHandler+0x9d4>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a46      	ldr	r2, [pc, #280]	@ (8007cb8 <HAL_DMA_IRQHandler+0xaa4>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d022      	beq.n	8007be8 <HAL_DMA_IRQHandler+0x9d4>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a45      	ldr	r2, [pc, #276]	@ (8007cbc <HAL_DMA_IRQHandler+0xaa8>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d01d      	beq.n	8007be8 <HAL_DMA_IRQHandler+0x9d4>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a43      	ldr	r2, [pc, #268]	@ (8007cc0 <HAL_DMA_IRQHandler+0xaac>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d018      	beq.n	8007be8 <HAL_DMA_IRQHandler+0x9d4>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a42      	ldr	r2, [pc, #264]	@ (8007cc4 <HAL_DMA_IRQHandler+0xab0>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d013      	beq.n	8007be8 <HAL_DMA_IRQHandler+0x9d4>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a40      	ldr	r2, [pc, #256]	@ (8007cc8 <HAL_DMA_IRQHandler+0xab4>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d00e      	beq.n	8007be8 <HAL_DMA_IRQHandler+0x9d4>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a3f      	ldr	r2, [pc, #252]	@ (8007ccc <HAL_DMA_IRQHandler+0xab8>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d009      	beq.n	8007be8 <HAL_DMA_IRQHandler+0x9d4>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a3d      	ldr	r2, [pc, #244]	@ (8007cd0 <HAL_DMA_IRQHandler+0xabc>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d004      	beq.n	8007be8 <HAL_DMA_IRQHandler+0x9d4>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a3c      	ldr	r2, [pc, #240]	@ (8007cd4 <HAL_DMA_IRQHandler+0xac0>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d101      	bne.n	8007bec <HAL_DMA_IRQHandler+0x9d8>
 8007be8:	2301      	movs	r3, #1
 8007bea:	e000      	b.n	8007bee <HAL_DMA_IRQHandler+0x9da>
 8007bec:	2300      	movs	r3, #0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	f000 824f 	beq.w	8008092 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c00:	f003 031f 	and.w	r3, r3, #31
 8007c04:	2204      	movs	r2, #4
 8007c06:	409a      	lsls	r2, r3
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	4013      	ands	r3, r2
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	f000 80dd 	beq.w	8007dcc <HAL_DMA_IRQHandler+0xbb8>
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	f003 0304 	and.w	r3, r3, #4
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	f000 80d7 	beq.w	8007dcc <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c22:	f003 031f 	and.w	r3, r3, #31
 8007c26:	2204      	movs	r2, #4
 8007c28:	409a      	lsls	r2, r3
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d059      	beq.n	8007cec <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d14a      	bne.n	8007cd8 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	f000 8220 	beq.w	800808c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c54:	e21a      	b.n	800808c <HAL_DMA_IRQHandler+0xe78>
 8007c56:	bf00      	nop
 8007c58:	40020010 	.word	0x40020010
 8007c5c:	40020028 	.word	0x40020028
 8007c60:	40020040 	.word	0x40020040
 8007c64:	40020058 	.word	0x40020058
 8007c68:	40020070 	.word	0x40020070
 8007c6c:	40020088 	.word	0x40020088
 8007c70:	400200a0 	.word	0x400200a0
 8007c74:	400200b8 	.word	0x400200b8
 8007c78:	40020410 	.word	0x40020410
 8007c7c:	40020428 	.word	0x40020428
 8007c80:	40020440 	.word	0x40020440
 8007c84:	40020458 	.word	0x40020458
 8007c88:	40020470 	.word	0x40020470
 8007c8c:	40020488 	.word	0x40020488
 8007c90:	400204a0 	.word	0x400204a0
 8007c94:	400204b8 	.word	0x400204b8
 8007c98:	48022c08 	.word	0x48022c08
 8007c9c:	48022c1c 	.word	0x48022c1c
 8007ca0:	48022c30 	.word	0x48022c30
 8007ca4:	48022c44 	.word	0x48022c44
 8007ca8:	48022c58 	.word	0x48022c58
 8007cac:	48022c6c 	.word	0x48022c6c
 8007cb0:	48022c80 	.word	0x48022c80
 8007cb4:	48022c94 	.word	0x48022c94
 8007cb8:	58025408 	.word	0x58025408
 8007cbc:	5802541c 	.word	0x5802541c
 8007cc0:	58025430 	.word	0x58025430
 8007cc4:	58025444 	.word	0x58025444
 8007cc8:	58025458 	.word	0x58025458
 8007ccc:	5802546c 	.word	0x5802546c
 8007cd0:	58025480 	.word	0x58025480
 8007cd4:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	f000 81d5 	beq.w	800808c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007cea:	e1cf      	b.n	800808c <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	f003 0320 	and.w	r3, r3, #32
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d160      	bne.n	8007db8 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a7f      	ldr	r2, [pc, #508]	@ (8007ef8 <HAL_DMA_IRQHandler+0xce4>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d04a      	beq.n	8007d96 <HAL_DMA_IRQHandler+0xb82>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a7d      	ldr	r2, [pc, #500]	@ (8007efc <HAL_DMA_IRQHandler+0xce8>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d045      	beq.n	8007d96 <HAL_DMA_IRQHandler+0xb82>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a7c      	ldr	r2, [pc, #496]	@ (8007f00 <HAL_DMA_IRQHandler+0xcec>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d040      	beq.n	8007d96 <HAL_DMA_IRQHandler+0xb82>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a7a      	ldr	r2, [pc, #488]	@ (8007f04 <HAL_DMA_IRQHandler+0xcf0>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d03b      	beq.n	8007d96 <HAL_DMA_IRQHandler+0xb82>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a79      	ldr	r2, [pc, #484]	@ (8007f08 <HAL_DMA_IRQHandler+0xcf4>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d036      	beq.n	8007d96 <HAL_DMA_IRQHandler+0xb82>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a77      	ldr	r2, [pc, #476]	@ (8007f0c <HAL_DMA_IRQHandler+0xcf8>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d031      	beq.n	8007d96 <HAL_DMA_IRQHandler+0xb82>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a76      	ldr	r2, [pc, #472]	@ (8007f10 <HAL_DMA_IRQHandler+0xcfc>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d02c      	beq.n	8007d96 <HAL_DMA_IRQHandler+0xb82>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a74      	ldr	r2, [pc, #464]	@ (8007f14 <HAL_DMA_IRQHandler+0xd00>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d027      	beq.n	8007d96 <HAL_DMA_IRQHandler+0xb82>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a73      	ldr	r2, [pc, #460]	@ (8007f18 <HAL_DMA_IRQHandler+0xd04>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d022      	beq.n	8007d96 <HAL_DMA_IRQHandler+0xb82>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a71      	ldr	r2, [pc, #452]	@ (8007f1c <HAL_DMA_IRQHandler+0xd08>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d01d      	beq.n	8007d96 <HAL_DMA_IRQHandler+0xb82>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a70      	ldr	r2, [pc, #448]	@ (8007f20 <HAL_DMA_IRQHandler+0xd0c>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d018      	beq.n	8007d96 <HAL_DMA_IRQHandler+0xb82>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a6e      	ldr	r2, [pc, #440]	@ (8007f24 <HAL_DMA_IRQHandler+0xd10>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d013      	beq.n	8007d96 <HAL_DMA_IRQHandler+0xb82>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a6d      	ldr	r2, [pc, #436]	@ (8007f28 <HAL_DMA_IRQHandler+0xd14>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d00e      	beq.n	8007d96 <HAL_DMA_IRQHandler+0xb82>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a6b      	ldr	r2, [pc, #428]	@ (8007f2c <HAL_DMA_IRQHandler+0xd18>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d009      	beq.n	8007d96 <HAL_DMA_IRQHandler+0xb82>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a6a      	ldr	r2, [pc, #424]	@ (8007f30 <HAL_DMA_IRQHandler+0xd1c>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d004      	beq.n	8007d96 <HAL_DMA_IRQHandler+0xb82>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a68      	ldr	r2, [pc, #416]	@ (8007f34 <HAL_DMA_IRQHandler+0xd20>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d108      	bne.n	8007da8 <HAL_DMA_IRQHandler+0xb94>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f022 0208 	bic.w	r2, r2, #8
 8007da4:	601a      	str	r2, [r3, #0]
 8007da6:	e007      	b.n	8007db8 <HAL_DMA_IRQHandler+0xba4>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f022 0204 	bic.w	r2, r2, #4
 8007db6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f000 8165 	beq.w	800808c <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007dca:	e15f      	b.n	800808c <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007dd0:	f003 031f 	and.w	r3, r3, #31
 8007dd4:	2202      	movs	r2, #2
 8007dd6:	409a      	lsls	r2, r3
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	4013      	ands	r3, r2
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	f000 80c5 	beq.w	8007f6c <HAL_DMA_IRQHandler+0xd58>
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	f003 0302 	and.w	r3, r3, #2
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	f000 80bf 	beq.w	8007f6c <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007df2:	f003 031f 	and.w	r3, r3, #31
 8007df6:	2202      	movs	r2, #2
 8007df8:	409a      	lsls	r2, r3
 8007dfa:	69fb      	ldr	r3, [r7, #28]
 8007dfc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d018      	beq.n	8007e3a <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d109      	bne.n	8007e26 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	f000 813a 	beq.w	8008090 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e24:	e134      	b.n	8008090 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	f000 8130 	beq.w	8008090 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e38:	e12a      	b.n	8008090 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	f003 0320 	and.w	r3, r3, #32
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	f040 8089 	bne.w	8007f58 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a2b      	ldr	r2, [pc, #172]	@ (8007ef8 <HAL_DMA_IRQHandler+0xce4>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d04a      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xcd2>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a29      	ldr	r2, [pc, #164]	@ (8007efc <HAL_DMA_IRQHandler+0xce8>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d045      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xcd2>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a28      	ldr	r2, [pc, #160]	@ (8007f00 <HAL_DMA_IRQHandler+0xcec>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d040      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xcd2>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a26      	ldr	r2, [pc, #152]	@ (8007f04 <HAL_DMA_IRQHandler+0xcf0>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d03b      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xcd2>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a25      	ldr	r2, [pc, #148]	@ (8007f08 <HAL_DMA_IRQHandler+0xcf4>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d036      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xcd2>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a23      	ldr	r2, [pc, #140]	@ (8007f0c <HAL_DMA_IRQHandler+0xcf8>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d031      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xcd2>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a22      	ldr	r2, [pc, #136]	@ (8007f10 <HAL_DMA_IRQHandler+0xcfc>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d02c      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xcd2>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a20      	ldr	r2, [pc, #128]	@ (8007f14 <HAL_DMA_IRQHandler+0xd00>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d027      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xcd2>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a1f      	ldr	r2, [pc, #124]	@ (8007f18 <HAL_DMA_IRQHandler+0xd04>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d022      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xcd2>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a1d      	ldr	r2, [pc, #116]	@ (8007f1c <HAL_DMA_IRQHandler+0xd08>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d01d      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xcd2>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a1c      	ldr	r2, [pc, #112]	@ (8007f20 <HAL_DMA_IRQHandler+0xd0c>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d018      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xcd2>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a1a      	ldr	r2, [pc, #104]	@ (8007f24 <HAL_DMA_IRQHandler+0xd10>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d013      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xcd2>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a19      	ldr	r2, [pc, #100]	@ (8007f28 <HAL_DMA_IRQHandler+0xd14>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d00e      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xcd2>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a17      	ldr	r2, [pc, #92]	@ (8007f2c <HAL_DMA_IRQHandler+0xd18>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d009      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xcd2>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a16      	ldr	r2, [pc, #88]	@ (8007f30 <HAL_DMA_IRQHandler+0xd1c>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d004      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xcd2>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a14      	ldr	r2, [pc, #80]	@ (8007f34 <HAL_DMA_IRQHandler+0xd20>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d128      	bne.n	8007f38 <HAL_DMA_IRQHandler+0xd24>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f022 0214 	bic.w	r2, r2, #20
 8007ef4:	601a      	str	r2, [r3, #0]
 8007ef6:	e027      	b.n	8007f48 <HAL_DMA_IRQHandler+0xd34>
 8007ef8:	40020010 	.word	0x40020010
 8007efc:	40020028 	.word	0x40020028
 8007f00:	40020040 	.word	0x40020040
 8007f04:	40020058 	.word	0x40020058
 8007f08:	40020070 	.word	0x40020070
 8007f0c:	40020088 	.word	0x40020088
 8007f10:	400200a0 	.word	0x400200a0
 8007f14:	400200b8 	.word	0x400200b8
 8007f18:	40020410 	.word	0x40020410
 8007f1c:	40020428 	.word	0x40020428
 8007f20:	40020440 	.word	0x40020440
 8007f24:	40020458 	.word	0x40020458
 8007f28:	40020470 	.word	0x40020470
 8007f2c:	40020488 	.word	0x40020488
 8007f30:	400204a0 	.word	0x400204a0
 8007f34:	400204b8 	.word	0x400204b8
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f022 020a 	bic.w	r2, r2, #10
 8007f46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	f000 8097 	beq.w	8008090 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f6a:	e091      	b.n	8008090 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f70:	f003 031f 	and.w	r3, r3, #31
 8007f74:	2208      	movs	r2, #8
 8007f76:	409a      	lsls	r2, r3
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	4013      	ands	r3, r2
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	f000 8088 	beq.w	8008092 <HAL_DMA_IRQHandler+0xe7e>
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	f003 0308 	and.w	r3, r3, #8
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	f000 8082 	beq.w	8008092 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a41      	ldr	r2, [pc, #260]	@ (8008098 <HAL_DMA_IRQHandler+0xe84>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d04a      	beq.n	800802e <HAL_DMA_IRQHandler+0xe1a>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a3f      	ldr	r2, [pc, #252]	@ (800809c <HAL_DMA_IRQHandler+0xe88>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d045      	beq.n	800802e <HAL_DMA_IRQHandler+0xe1a>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a3e      	ldr	r2, [pc, #248]	@ (80080a0 <HAL_DMA_IRQHandler+0xe8c>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d040      	beq.n	800802e <HAL_DMA_IRQHandler+0xe1a>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a3c      	ldr	r2, [pc, #240]	@ (80080a4 <HAL_DMA_IRQHandler+0xe90>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d03b      	beq.n	800802e <HAL_DMA_IRQHandler+0xe1a>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a3b      	ldr	r2, [pc, #236]	@ (80080a8 <HAL_DMA_IRQHandler+0xe94>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d036      	beq.n	800802e <HAL_DMA_IRQHandler+0xe1a>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a39      	ldr	r2, [pc, #228]	@ (80080ac <HAL_DMA_IRQHandler+0xe98>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d031      	beq.n	800802e <HAL_DMA_IRQHandler+0xe1a>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a38      	ldr	r2, [pc, #224]	@ (80080b0 <HAL_DMA_IRQHandler+0xe9c>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d02c      	beq.n	800802e <HAL_DMA_IRQHandler+0xe1a>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a36      	ldr	r2, [pc, #216]	@ (80080b4 <HAL_DMA_IRQHandler+0xea0>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d027      	beq.n	800802e <HAL_DMA_IRQHandler+0xe1a>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a35      	ldr	r2, [pc, #212]	@ (80080b8 <HAL_DMA_IRQHandler+0xea4>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d022      	beq.n	800802e <HAL_DMA_IRQHandler+0xe1a>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a33      	ldr	r2, [pc, #204]	@ (80080bc <HAL_DMA_IRQHandler+0xea8>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d01d      	beq.n	800802e <HAL_DMA_IRQHandler+0xe1a>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a32      	ldr	r2, [pc, #200]	@ (80080c0 <HAL_DMA_IRQHandler+0xeac>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d018      	beq.n	800802e <HAL_DMA_IRQHandler+0xe1a>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a30      	ldr	r2, [pc, #192]	@ (80080c4 <HAL_DMA_IRQHandler+0xeb0>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d013      	beq.n	800802e <HAL_DMA_IRQHandler+0xe1a>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a2f      	ldr	r2, [pc, #188]	@ (80080c8 <HAL_DMA_IRQHandler+0xeb4>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d00e      	beq.n	800802e <HAL_DMA_IRQHandler+0xe1a>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a2d      	ldr	r2, [pc, #180]	@ (80080cc <HAL_DMA_IRQHandler+0xeb8>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d009      	beq.n	800802e <HAL_DMA_IRQHandler+0xe1a>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a2c      	ldr	r2, [pc, #176]	@ (80080d0 <HAL_DMA_IRQHandler+0xebc>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d004      	beq.n	800802e <HAL_DMA_IRQHandler+0xe1a>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a2a      	ldr	r2, [pc, #168]	@ (80080d4 <HAL_DMA_IRQHandler+0xec0>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d108      	bne.n	8008040 <HAL_DMA_IRQHandler+0xe2c>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f022 021c 	bic.w	r2, r2, #28
 800803c:	601a      	str	r2, [r3, #0]
 800803e:	e007      	b.n	8008050 <HAL_DMA_IRQHandler+0xe3c>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f022 020e 	bic.w	r2, r2, #14
 800804e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008054:	f003 031f 	and.w	r3, r3, #31
 8008058:	2201      	movs	r2, #1
 800805a:	409a      	lsls	r2, r3
 800805c:	69fb      	ldr	r3, [r7, #28]
 800805e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2201      	movs	r2, #1
 800806a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800807a:	2b00      	cmp	r3, #0
 800807c:	d009      	beq.n	8008092 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	4798      	blx	r3
 8008086:	e004      	b.n	8008092 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8008088:	bf00      	nop
 800808a:	e002      	b.n	8008092 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800808c:	bf00      	nop
 800808e:	e000      	b.n	8008092 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008090:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008092:	3728      	adds	r7, #40	@ 0x28
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}
 8008098:	40020010 	.word	0x40020010
 800809c:	40020028 	.word	0x40020028
 80080a0:	40020040 	.word	0x40020040
 80080a4:	40020058 	.word	0x40020058
 80080a8:	40020070 	.word	0x40020070
 80080ac:	40020088 	.word	0x40020088
 80080b0:	400200a0 	.word	0x400200a0
 80080b4:	400200b8 	.word	0x400200b8
 80080b8:	40020410 	.word	0x40020410
 80080bc:	40020428 	.word	0x40020428
 80080c0:	40020440 	.word	0x40020440
 80080c4:	40020458 	.word	0x40020458
 80080c8:	40020470 	.word	0x40020470
 80080cc:	40020488 	.word	0x40020488
 80080d0:	400204a0 	.word	0x400204a0
 80080d4:	400204b8 	.word	0x400204b8

080080d8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80080d8:	b480      	push	{r7}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b087      	sub	sp, #28
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	607a      	str	r2, [r7, #4]
 80080fc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008102:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008108:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a7f      	ldr	r2, [pc, #508]	@ (800830c <DMA_SetConfig+0x21c>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d072      	beq.n	80081fa <DMA_SetConfig+0x10a>
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a7d      	ldr	r2, [pc, #500]	@ (8008310 <DMA_SetConfig+0x220>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d06d      	beq.n	80081fa <DMA_SetConfig+0x10a>
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a7c      	ldr	r2, [pc, #496]	@ (8008314 <DMA_SetConfig+0x224>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d068      	beq.n	80081fa <DMA_SetConfig+0x10a>
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a7a      	ldr	r2, [pc, #488]	@ (8008318 <DMA_SetConfig+0x228>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d063      	beq.n	80081fa <DMA_SetConfig+0x10a>
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a79      	ldr	r2, [pc, #484]	@ (800831c <DMA_SetConfig+0x22c>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d05e      	beq.n	80081fa <DMA_SetConfig+0x10a>
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a77      	ldr	r2, [pc, #476]	@ (8008320 <DMA_SetConfig+0x230>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d059      	beq.n	80081fa <DMA_SetConfig+0x10a>
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a76      	ldr	r2, [pc, #472]	@ (8008324 <DMA_SetConfig+0x234>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d054      	beq.n	80081fa <DMA_SetConfig+0x10a>
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a74      	ldr	r2, [pc, #464]	@ (8008328 <DMA_SetConfig+0x238>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d04f      	beq.n	80081fa <DMA_SetConfig+0x10a>
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a73      	ldr	r2, [pc, #460]	@ (800832c <DMA_SetConfig+0x23c>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d04a      	beq.n	80081fa <DMA_SetConfig+0x10a>
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a71      	ldr	r2, [pc, #452]	@ (8008330 <DMA_SetConfig+0x240>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d045      	beq.n	80081fa <DMA_SetConfig+0x10a>
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a70      	ldr	r2, [pc, #448]	@ (8008334 <DMA_SetConfig+0x244>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d040      	beq.n	80081fa <DMA_SetConfig+0x10a>
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a6e      	ldr	r2, [pc, #440]	@ (8008338 <DMA_SetConfig+0x248>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d03b      	beq.n	80081fa <DMA_SetConfig+0x10a>
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a6d      	ldr	r2, [pc, #436]	@ (800833c <DMA_SetConfig+0x24c>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d036      	beq.n	80081fa <DMA_SetConfig+0x10a>
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a6b      	ldr	r2, [pc, #428]	@ (8008340 <DMA_SetConfig+0x250>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d031      	beq.n	80081fa <DMA_SetConfig+0x10a>
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a6a      	ldr	r2, [pc, #424]	@ (8008344 <DMA_SetConfig+0x254>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d02c      	beq.n	80081fa <DMA_SetConfig+0x10a>
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a68      	ldr	r2, [pc, #416]	@ (8008348 <DMA_SetConfig+0x258>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d027      	beq.n	80081fa <DMA_SetConfig+0x10a>
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a67      	ldr	r2, [pc, #412]	@ (800834c <DMA_SetConfig+0x25c>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d022      	beq.n	80081fa <DMA_SetConfig+0x10a>
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a65      	ldr	r2, [pc, #404]	@ (8008350 <DMA_SetConfig+0x260>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d01d      	beq.n	80081fa <DMA_SetConfig+0x10a>
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a64      	ldr	r2, [pc, #400]	@ (8008354 <DMA_SetConfig+0x264>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d018      	beq.n	80081fa <DMA_SetConfig+0x10a>
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a62      	ldr	r2, [pc, #392]	@ (8008358 <DMA_SetConfig+0x268>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d013      	beq.n	80081fa <DMA_SetConfig+0x10a>
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a61      	ldr	r2, [pc, #388]	@ (800835c <DMA_SetConfig+0x26c>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d00e      	beq.n	80081fa <DMA_SetConfig+0x10a>
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a5f      	ldr	r2, [pc, #380]	@ (8008360 <DMA_SetConfig+0x270>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d009      	beq.n	80081fa <DMA_SetConfig+0x10a>
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a5e      	ldr	r2, [pc, #376]	@ (8008364 <DMA_SetConfig+0x274>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d004      	beq.n	80081fa <DMA_SetConfig+0x10a>
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a5c      	ldr	r2, [pc, #368]	@ (8008368 <DMA_SetConfig+0x278>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d101      	bne.n	80081fe <DMA_SetConfig+0x10e>
 80081fa:	2301      	movs	r3, #1
 80081fc:	e000      	b.n	8008200 <DMA_SetConfig+0x110>
 80081fe:	2300      	movs	r3, #0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d00d      	beq.n	8008220 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008208:	68fa      	ldr	r2, [r7, #12]
 800820a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800820c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008212:	2b00      	cmp	r3, #0
 8008214:	d004      	beq.n	8008220 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800821a:	68fa      	ldr	r2, [r7, #12]
 800821c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800821e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a39      	ldr	r2, [pc, #228]	@ (800830c <DMA_SetConfig+0x21c>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d04a      	beq.n	80082c0 <DMA_SetConfig+0x1d0>
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a38      	ldr	r2, [pc, #224]	@ (8008310 <DMA_SetConfig+0x220>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d045      	beq.n	80082c0 <DMA_SetConfig+0x1d0>
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a36      	ldr	r2, [pc, #216]	@ (8008314 <DMA_SetConfig+0x224>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d040      	beq.n	80082c0 <DMA_SetConfig+0x1d0>
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a35      	ldr	r2, [pc, #212]	@ (8008318 <DMA_SetConfig+0x228>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d03b      	beq.n	80082c0 <DMA_SetConfig+0x1d0>
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a33      	ldr	r2, [pc, #204]	@ (800831c <DMA_SetConfig+0x22c>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d036      	beq.n	80082c0 <DMA_SetConfig+0x1d0>
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a32      	ldr	r2, [pc, #200]	@ (8008320 <DMA_SetConfig+0x230>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d031      	beq.n	80082c0 <DMA_SetConfig+0x1d0>
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a30      	ldr	r2, [pc, #192]	@ (8008324 <DMA_SetConfig+0x234>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d02c      	beq.n	80082c0 <DMA_SetConfig+0x1d0>
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a2f      	ldr	r2, [pc, #188]	@ (8008328 <DMA_SetConfig+0x238>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d027      	beq.n	80082c0 <DMA_SetConfig+0x1d0>
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a2d      	ldr	r2, [pc, #180]	@ (800832c <DMA_SetConfig+0x23c>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d022      	beq.n	80082c0 <DMA_SetConfig+0x1d0>
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a2c      	ldr	r2, [pc, #176]	@ (8008330 <DMA_SetConfig+0x240>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d01d      	beq.n	80082c0 <DMA_SetConfig+0x1d0>
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a2a      	ldr	r2, [pc, #168]	@ (8008334 <DMA_SetConfig+0x244>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d018      	beq.n	80082c0 <DMA_SetConfig+0x1d0>
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a29      	ldr	r2, [pc, #164]	@ (8008338 <DMA_SetConfig+0x248>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d013      	beq.n	80082c0 <DMA_SetConfig+0x1d0>
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a27      	ldr	r2, [pc, #156]	@ (800833c <DMA_SetConfig+0x24c>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d00e      	beq.n	80082c0 <DMA_SetConfig+0x1d0>
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a26      	ldr	r2, [pc, #152]	@ (8008340 <DMA_SetConfig+0x250>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d009      	beq.n	80082c0 <DMA_SetConfig+0x1d0>
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a24      	ldr	r2, [pc, #144]	@ (8008344 <DMA_SetConfig+0x254>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d004      	beq.n	80082c0 <DMA_SetConfig+0x1d0>
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a23      	ldr	r2, [pc, #140]	@ (8008348 <DMA_SetConfig+0x258>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d101      	bne.n	80082c4 <DMA_SetConfig+0x1d4>
 80082c0:	2301      	movs	r3, #1
 80082c2:	e000      	b.n	80082c6 <DMA_SetConfig+0x1d6>
 80082c4:	2300      	movs	r3, #0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d059      	beq.n	800837e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082ce:	f003 031f 	and.w	r3, r3, #31
 80082d2:	223f      	movs	r2, #63	@ 0x3f
 80082d4:	409a      	lsls	r2, r3
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80082e8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	683a      	ldr	r2, [r7, #0]
 80082f0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	2b40      	cmp	r3, #64	@ 0x40
 80082f8:	d138      	bne.n	800836c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	68ba      	ldr	r2, [r7, #8]
 8008308:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800830a:	e0ae      	b.n	800846a <DMA_SetConfig+0x37a>
 800830c:	40020010 	.word	0x40020010
 8008310:	40020028 	.word	0x40020028
 8008314:	40020040 	.word	0x40020040
 8008318:	40020058 	.word	0x40020058
 800831c:	40020070 	.word	0x40020070
 8008320:	40020088 	.word	0x40020088
 8008324:	400200a0 	.word	0x400200a0
 8008328:	400200b8 	.word	0x400200b8
 800832c:	40020410 	.word	0x40020410
 8008330:	40020428 	.word	0x40020428
 8008334:	40020440 	.word	0x40020440
 8008338:	40020458 	.word	0x40020458
 800833c:	40020470 	.word	0x40020470
 8008340:	40020488 	.word	0x40020488
 8008344:	400204a0 	.word	0x400204a0
 8008348:	400204b8 	.word	0x400204b8
 800834c:	58025408 	.word	0x58025408
 8008350:	5802541c 	.word	0x5802541c
 8008354:	58025430 	.word	0x58025430
 8008358:	58025444 	.word	0x58025444
 800835c:	58025458 	.word	0x58025458
 8008360:	5802546c 	.word	0x5802546c
 8008364:	58025480 	.word	0x58025480
 8008368:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	68ba      	ldr	r2, [r7, #8]
 8008372:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	60da      	str	r2, [r3, #12]
}
 800837c:	e075      	b.n	800846a <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a3d      	ldr	r2, [pc, #244]	@ (8008478 <DMA_SetConfig+0x388>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d04a      	beq.n	800841e <DMA_SetConfig+0x32e>
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a3b      	ldr	r2, [pc, #236]	@ (800847c <DMA_SetConfig+0x38c>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d045      	beq.n	800841e <DMA_SetConfig+0x32e>
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a3a      	ldr	r2, [pc, #232]	@ (8008480 <DMA_SetConfig+0x390>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d040      	beq.n	800841e <DMA_SetConfig+0x32e>
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a38      	ldr	r2, [pc, #224]	@ (8008484 <DMA_SetConfig+0x394>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d03b      	beq.n	800841e <DMA_SetConfig+0x32e>
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a37      	ldr	r2, [pc, #220]	@ (8008488 <DMA_SetConfig+0x398>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d036      	beq.n	800841e <DMA_SetConfig+0x32e>
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a35      	ldr	r2, [pc, #212]	@ (800848c <DMA_SetConfig+0x39c>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d031      	beq.n	800841e <DMA_SetConfig+0x32e>
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a34      	ldr	r2, [pc, #208]	@ (8008490 <DMA_SetConfig+0x3a0>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d02c      	beq.n	800841e <DMA_SetConfig+0x32e>
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a32      	ldr	r2, [pc, #200]	@ (8008494 <DMA_SetConfig+0x3a4>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d027      	beq.n	800841e <DMA_SetConfig+0x32e>
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a31      	ldr	r2, [pc, #196]	@ (8008498 <DMA_SetConfig+0x3a8>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d022      	beq.n	800841e <DMA_SetConfig+0x32e>
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a2f      	ldr	r2, [pc, #188]	@ (800849c <DMA_SetConfig+0x3ac>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d01d      	beq.n	800841e <DMA_SetConfig+0x32e>
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a2e      	ldr	r2, [pc, #184]	@ (80084a0 <DMA_SetConfig+0x3b0>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d018      	beq.n	800841e <DMA_SetConfig+0x32e>
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a2c      	ldr	r2, [pc, #176]	@ (80084a4 <DMA_SetConfig+0x3b4>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d013      	beq.n	800841e <DMA_SetConfig+0x32e>
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a2b      	ldr	r2, [pc, #172]	@ (80084a8 <DMA_SetConfig+0x3b8>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d00e      	beq.n	800841e <DMA_SetConfig+0x32e>
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a29      	ldr	r2, [pc, #164]	@ (80084ac <DMA_SetConfig+0x3bc>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d009      	beq.n	800841e <DMA_SetConfig+0x32e>
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a28      	ldr	r2, [pc, #160]	@ (80084b0 <DMA_SetConfig+0x3c0>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d004      	beq.n	800841e <DMA_SetConfig+0x32e>
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a26      	ldr	r2, [pc, #152]	@ (80084b4 <DMA_SetConfig+0x3c4>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d101      	bne.n	8008422 <DMA_SetConfig+0x332>
 800841e:	2301      	movs	r3, #1
 8008420:	e000      	b.n	8008424 <DMA_SetConfig+0x334>
 8008422:	2300      	movs	r3, #0
 8008424:	2b00      	cmp	r3, #0
 8008426:	d020      	beq.n	800846a <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800842c:	f003 031f 	and.w	r3, r3, #31
 8008430:	2201      	movs	r2, #1
 8008432:	409a      	lsls	r2, r3
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	683a      	ldr	r2, [r7, #0]
 800843e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	2b40      	cmp	r3, #64	@ 0x40
 8008446:	d108      	bne.n	800845a <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	68ba      	ldr	r2, [r7, #8]
 8008456:	60da      	str	r2, [r3, #12]
}
 8008458:	e007      	b.n	800846a <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	68ba      	ldr	r2, [r7, #8]
 8008460:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	60da      	str	r2, [r3, #12]
}
 800846a:	bf00      	nop
 800846c:	371c      	adds	r7, #28
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr
 8008476:	bf00      	nop
 8008478:	48022c08 	.word	0x48022c08
 800847c:	48022c1c 	.word	0x48022c1c
 8008480:	48022c30 	.word	0x48022c30
 8008484:	48022c44 	.word	0x48022c44
 8008488:	48022c58 	.word	0x48022c58
 800848c:	48022c6c 	.word	0x48022c6c
 8008490:	48022c80 	.word	0x48022c80
 8008494:	48022c94 	.word	0x48022c94
 8008498:	58025408 	.word	0x58025408
 800849c:	5802541c 	.word	0x5802541c
 80084a0:	58025430 	.word	0x58025430
 80084a4:	58025444 	.word	0x58025444
 80084a8:	58025458 	.word	0x58025458
 80084ac:	5802546c 	.word	0x5802546c
 80084b0:	58025480 	.word	0x58025480
 80084b4:	58025494 	.word	0x58025494

080084b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b085      	sub	sp, #20
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a42      	ldr	r2, [pc, #264]	@ (80085d0 <DMA_CalcBaseAndBitshift+0x118>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d04a      	beq.n	8008560 <DMA_CalcBaseAndBitshift+0xa8>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a41      	ldr	r2, [pc, #260]	@ (80085d4 <DMA_CalcBaseAndBitshift+0x11c>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d045      	beq.n	8008560 <DMA_CalcBaseAndBitshift+0xa8>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a3f      	ldr	r2, [pc, #252]	@ (80085d8 <DMA_CalcBaseAndBitshift+0x120>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d040      	beq.n	8008560 <DMA_CalcBaseAndBitshift+0xa8>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a3e      	ldr	r2, [pc, #248]	@ (80085dc <DMA_CalcBaseAndBitshift+0x124>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d03b      	beq.n	8008560 <DMA_CalcBaseAndBitshift+0xa8>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a3c      	ldr	r2, [pc, #240]	@ (80085e0 <DMA_CalcBaseAndBitshift+0x128>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d036      	beq.n	8008560 <DMA_CalcBaseAndBitshift+0xa8>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a3b      	ldr	r2, [pc, #236]	@ (80085e4 <DMA_CalcBaseAndBitshift+0x12c>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d031      	beq.n	8008560 <DMA_CalcBaseAndBitshift+0xa8>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a39      	ldr	r2, [pc, #228]	@ (80085e8 <DMA_CalcBaseAndBitshift+0x130>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d02c      	beq.n	8008560 <DMA_CalcBaseAndBitshift+0xa8>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a38      	ldr	r2, [pc, #224]	@ (80085ec <DMA_CalcBaseAndBitshift+0x134>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d027      	beq.n	8008560 <DMA_CalcBaseAndBitshift+0xa8>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a36      	ldr	r2, [pc, #216]	@ (80085f0 <DMA_CalcBaseAndBitshift+0x138>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d022      	beq.n	8008560 <DMA_CalcBaseAndBitshift+0xa8>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a35      	ldr	r2, [pc, #212]	@ (80085f4 <DMA_CalcBaseAndBitshift+0x13c>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d01d      	beq.n	8008560 <DMA_CalcBaseAndBitshift+0xa8>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a33      	ldr	r2, [pc, #204]	@ (80085f8 <DMA_CalcBaseAndBitshift+0x140>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d018      	beq.n	8008560 <DMA_CalcBaseAndBitshift+0xa8>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a32      	ldr	r2, [pc, #200]	@ (80085fc <DMA_CalcBaseAndBitshift+0x144>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d013      	beq.n	8008560 <DMA_CalcBaseAndBitshift+0xa8>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a30      	ldr	r2, [pc, #192]	@ (8008600 <DMA_CalcBaseAndBitshift+0x148>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d00e      	beq.n	8008560 <DMA_CalcBaseAndBitshift+0xa8>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a2f      	ldr	r2, [pc, #188]	@ (8008604 <DMA_CalcBaseAndBitshift+0x14c>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d009      	beq.n	8008560 <DMA_CalcBaseAndBitshift+0xa8>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a2d      	ldr	r2, [pc, #180]	@ (8008608 <DMA_CalcBaseAndBitshift+0x150>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d004      	beq.n	8008560 <DMA_CalcBaseAndBitshift+0xa8>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a2c      	ldr	r2, [pc, #176]	@ (800860c <DMA_CalcBaseAndBitshift+0x154>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d101      	bne.n	8008564 <DMA_CalcBaseAndBitshift+0xac>
 8008560:	2301      	movs	r3, #1
 8008562:	e000      	b.n	8008566 <DMA_CalcBaseAndBitshift+0xae>
 8008564:	2300      	movs	r3, #0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d024      	beq.n	80085b4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	b2db      	uxtb	r3, r3
 8008570:	3b10      	subs	r3, #16
 8008572:	4a27      	ldr	r2, [pc, #156]	@ (8008610 <DMA_CalcBaseAndBitshift+0x158>)
 8008574:	fba2 2303 	umull	r2, r3, r2, r3
 8008578:	091b      	lsrs	r3, r3, #4
 800857a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f003 0307 	and.w	r3, r3, #7
 8008582:	4a24      	ldr	r2, [pc, #144]	@ (8008614 <DMA_CalcBaseAndBitshift+0x15c>)
 8008584:	5cd3      	ldrb	r3, [r2, r3]
 8008586:	461a      	mov	r2, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2b03      	cmp	r3, #3
 8008590:	d908      	bls.n	80085a4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	461a      	mov	r2, r3
 8008598:	4b1f      	ldr	r3, [pc, #124]	@ (8008618 <DMA_CalcBaseAndBitshift+0x160>)
 800859a:	4013      	ands	r3, r2
 800859c:	1d1a      	adds	r2, r3, #4
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	659a      	str	r2, [r3, #88]	@ 0x58
 80085a2:	e00d      	b.n	80085c0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	461a      	mov	r2, r3
 80085aa:	4b1b      	ldr	r3, [pc, #108]	@ (8008618 <DMA_CalcBaseAndBitshift+0x160>)
 80085ac:	4013      	ands	r3, r2
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80085b2:	e005      	b.n	80085c0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3714      	adds	r7, #20
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr
 80085d0:	40020010 	.word	0x40020010
 80085d4:	40020028 	.word	0x40020028
 80085d8:	40020040 	.word	0x40020040
 80085dc:	40020058 	.word	0x40020058
 80085e0:	40020070 	.word	0x40020070
 80085e4:	40020088 	.word	0x40020088
 80085e8:	400200a0 	.word	0x400200a0
 80085ec:	400200b8 	.word	0x400200b8
 80085f0:	40020410 	.word	0x40020410
 80085f4:	40020428 	.word	0x40020428
 80085f8:	40020440 	.word	0x40020440
 80085fc:	40020458 	.word	0x40020458
 8008600:	40020470 	.word	0x40020470
 8008604:	40020488 	.word	0x40020488
 8008608:	400204a0 	.word	0x400204a0
 800860c:	400204b8 	.word	0x400204b8
 8008610:	aaaaaaab 	.word	0xaaaaaaab
 8008614:	08019b50 	.word	0x08019b50
 8008618:	fffffc00 	.word	0xfffffc00

0800861c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800861c:	b480      	push	{r7}
 800861e:	b085      	sub	sp, #20
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008624:	2300      	movs	r3, #0
 8008626:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	699b      	ldr	r3, [r3, #24]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d120      	bne.n	8008672 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008634:	2b03      	cmp	r3, #3
 8008636:	d858      	bhi.n	80086ea <DMA_CheckFifoParam+0xce>
 8008638:	a201      	add	r2, pc, #4	@ (adr r2, 8008640 <DMA_CheckFifoParam+0x24>)
 800863a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800863e:	bf00      	nop
 8008640:	08008651 	.word	0x08008651
 8008644:	08008663 	.word	0x08008663
 8008648:	08008651 	.word	0x08008651
 800864c:	080086eb 	.word	0x080086eb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008654:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008658:	2b00      	cmp	r3, #0
 800865a:	d048      	beq.n	80086ee <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008660:	e045      	b.n	80086ee <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008666:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800866a:	d142      	bne.n	80086f2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800866c:	2301      	movs	r3, #1
 800866e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008670:	e03f      	b.n	80086f2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	699b      	ldr	r3, [r3, #24]
 8008676:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800867a:	d123      	bne.n	80086c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008680:	2b03      	cmp	r3, #3
 8008682:	d838      	bhi.n	80086f6 <DMA_CheckFifoParam+0xda>
 8008684:	a201      	add	r2, pc, #4	@ (adr r2, 800868c <DMA_CheckFifoParam+0x70>)
 8008686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800868a:	bf00      	nop
 800868c:	0800869d 	.word	0x0800869d
 8008690:	080086a3 	.word	0x080086a3
 8008694:	0800869d 	.word	0x0800869d
 8008698:	080086b5 	.word	0x080086b5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800869c:	2301      	movs	r3, #1
 800869e:	73fb      	strb	r3, [r7, #15]
        break;
 80086a0:	e030      	b.n	8008704 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d025      	beq.n	80086fa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80086b2:	e022      	b.n	80086fa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086b8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80086bc:	d11f      	bne.n	80086fe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80086c2:	e01c      	b.n	80086fe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086c8:	2b02      	cmp	r3, #2
 80086ca:	d902      	bls.n	80086d2 <DMA_CheckFifoParam+0xb6>
 80086cc:	2b03      	cmp	r3, #3
 80086ce:	d003      	beq.n	80086d8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80086d0:	e018      	b.n	8008704 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	73fb      	strb	r3, [r7, #15]
        break;
 80086d6:	e015      	b.n	8008704 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d00e      	beq.n	8008702 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	73fb      	strb	r3, [r7, #15]
    break;
 80086e8:	e00b      	b.n	8008702 <DMA_CheckFifoParam+0xe6>
        break;
 80086ea:	bf00      	nop
 80086ec:	e00a      	b.n	8008704 <DMA_CheckFifoParam+0xe8>
        break;
 80086ee:	bf00      	nop
 80086f0:	e008      	b.n	8008704 <DMA_CheckFifoParam+0xe8>
        break;
 80086f2:	bf00      	nop
 80086f4:	e006      	b.n	8008704 <DMA_CheckFifoParam+0xe8>
        break;
 80086f6:	bf00      	nop
 80086f8:	e004      	b.n	8008704 <DMA_CheckFifoParam+0xe8>
        break;
 80086fa:	bf00      	nop
 80086fc:	e002      	b.n	8008704 <DMA_CheckFifoParam+0xe8>
        break;
 80086fe:	bf00      	nop
 8008700:	e000      	b.n	8008704 <DMA_CheckFifoParam+0xe8>
    break;
 8008702:	bf00      	nop
    }
  }

  return status;
 8008704:	7bfb      	ldrb	r3, [r7, #15]
}
 8008706:	4618      	mov	r0, r3
 8008708:	3714      	adds	r7, #20
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr
 8008712:	bf00      	nop

08008714 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008714:	b480      	push	{r7}
 8008716:	b085      	sub	sp, #20
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a38      	ldr	r2, [pc, #224]	@ (8008808 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d022      	beq.n	8008772 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a36      	ldr	r2, [pc, #216]	@ (800880c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d01d      	beq.n	8008772 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a35      	ldr	r2, [pc, #212]	@ (8008810 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d018      	beq.n	8008772 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a33      	ldr	r2, [pc, #204]	@ (8008814 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d013      	beq.n	8008772 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a32      	ldr	r2, [pc, #200]	@ (8008818 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d00e      	beq.n	8008772 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a30      	ldr	r2, [pc, #192]	@ (800881c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d009      	beq.n	8008772 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a2f      	ldr	r2, [pc, #188]	@ (8008820 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d004      	beq.n	8008772 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a2d      	ldr	r2, [pc, #180]	@ (8008824 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d101      	bne.n	8008776 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008772:	2301      	movs	r3, #1
 8008774:	e000      	b.n	8008778 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008776:	2300      	movs	r3, #0
 8008778:	2b00      	cmp	r3, #0
 800877a:	d01a      	beq.n	80087b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	b2db      	uxtb	r3, r3
 8008782:	3b08      	subs	r3, #8
 8008784:	4a28      	ldr	r2, [pc, #160]	@ (8008828 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008786:	fba2 2303 	umull	r2, r3, r2, r3
 800878a:	091b      	lsrs	r3, r3, #4
 800878c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800878e:	68fa      	ldr	r2, [r7, #12]
 8008790:	4b26      	ldr	r3, [pc, #152]	@ (800882c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008792:	4413      	add	r3, r2
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	461a      	mov	r2, r3
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	4a24      	ldr	r2, [pc, #144]	@ (8008830 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80087a0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f003 031f 	and.w	r3, r3, #31
 80087a8:	2201      	movs	r2, #1
 80087aa:	409a      	lsls	r2, r3
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80087b0:	e024      	b.n	80087fc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	3b10      	subs	r3, #16
 80087ba:	4a1e      	ldr	r2, [pc, #120]	@ (8008834 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80087bc:	fba2 2303 	umull	r2, r3, r2, r3
 80087c0:	091b      	lsrs	r3, r3, #4
 80087c2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	4a1c      	ldr	r2, [pc, #112]	@ (8008838 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d806      	bhi.n	80087da <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	4a1b      	ldr	r2, [pc, #108]	@ (800883c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d902      	bls.n	80087da <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	3308      	adds	r3, #8
 80087d8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80087da:	68fa      	ldr	r2, [r7, #12]
 80087dc:	4b18      	ldr	r3, [pc, #96]	@ (8008840 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80087de:	4413      	add	r3, r2
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	461a      	mov	r2, r3
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4a16      	ldr	r2, [pc, #88]	@ (8008844 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80087ec:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f003 031f 	and.w	r3, r3, #31
 80087f4:	2201      	movs	r2, #1
 80087f6:	409a      	lsls	r2, r3
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80087fc:	bf00      	nop
 80087fe:	3714      	adds	r7, #20
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr
 8008808:	58025408 	.word	0x58025408
 800880c:	5802541c 	.word	0x5802541c
 8008810:	58025430 	.word	0x58025430
 8008814:	58025444 	.word	0x58025444
 8008818:	58025458 	.word	0x58025458
 800881c:	5802546c 	.word	0x5802546c
 8008820:	58025480 	.word	0x58025480
 8008824:	58025494 	.word	0x58025494
 8008828:	cccccccd 	.word	0xcccccccd
 800882c:	16009600 	.word	0x16009600
 8008830:	58025880 	.word	0x58025880
 8008834:	aaaaaaab 	.word	0xaaaaaaab
 8008838:	400204b8 	.word	0x400204b8
 800883c:	4002040f 	.word	0x4002040f
 8008840:	10008200 	.word	0x10008200
 8008844:	40020880 	.word	0x40020880

08008848 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008848:	b480      	push	{r7}
 800884a:	b085      	sub	sp, #20
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	b2db      	uxtb	r3, r3
 8008856:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d04a      	beq.n	80088f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2b08      	cmp	r3, #8
 8008862:	d847      	bhi.n	80088f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a25      	ldr	r2, [pc, #148]	@ (8008900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d022      	beq.n	80088b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a24      	ldr	r2, [pc, #144]	@ (8008904 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d01d      	beq.n	80088b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a22      	ldr	r2, [pc, #136]	@ (8008908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d018      	beq.n	80088b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a21      	ldr	r2, [pc, #132]	@ (800890c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d013      	beq.n	80088b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a1f      	ldr	r2, [pc, #124]	@ (8008910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d00e      	beq.n	80088b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a1e      	ldr	r2, [pc, #120]	@ (8008914 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d009      	beq.n	80088b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a1c      	ldr	r2, [pc, #112]	@ (8008918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d004      	beq.n	80088b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a1b      	ldr	r2, [pc, #108]	@ (800891c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d101      	bne.n	80088b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80088b4:	2301      	movs	r3, #1
 80088b6:	e000      	b.n	80088ba <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80088b8:	2300      	movs	r3, #0
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d00a      	beq.n	80088d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80088be:	68fa      	ldr	r2, [r7, #12]
 80088c0:	4b17      	ldr	r3, [pc, #92]	@ (8008920 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80088c2:	4413      	add	r3, r2
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	461a      	mov	r2, r3
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	4a15      	ldr	r2, [pc, #84]	@ (8008924 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80088d0:	671a      	str	r2, [r3, #112]	@ 0x70
 80088d2:	e009      	b.n	80088e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80088d4:	68fa      	ldr	r2, [r7, #12]
 80088d6:	4b14      	ldr	r3, [pc, #80]	@ (8008928 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80088d8:	4413      	add	r3, r2
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	461a      	mov	r2, r3
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	4a11      	ldr	r2, [pc, #68]	@ (800892c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80088e6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	3b01      	subs	r3, #1
 80088ec:	2201      	movs	r2, #1
 80088ee:	409a      	lsls	r2, r3
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80088f4:	bf00      	nop
 80088f6:	3714      	adds	r7, #20
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr
 8008900:	58025408 	.word	0x58025408
 8008904:	5802541c 	.word	0x5802541c
 8008908:	58025430 	.word	0x58025430
 800890c:	58025444 	.word	0x58025444
 8008910:	58025458 	.word	0x58025458
 8008914:	5802546c 	.word	0x5802546c
 8008918:	58025480 	.word	0x58025480
 800891c:	58025494 	.word	0x58025494
 8008920:	1600963f 	.word	0x1600963f
 8008924:	58025940 	.word	0x58025940
 8008928:	1000823f 	.word	0x1000823f
 800892c:	40020940 	.word	0x40020940

08008930 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b098      	sub	sp, #96	@ 0x60
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8008938:	4a84      	ldr	r2, [pc, #528]	@ (8008b4c <HAL_FDCAN_Init+0x21c>)
 800893a:	f107 030c 	add.w	r3, r7, #12
 800893e:	4611      	mov	r1, r2
 8008940:	224c      	movs	r2, #76	@ 0x4c
 8008942:	4618      	mov	r0, r3
 8008944:	f00f f8f9 	bl	8017b3a <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d101      	bne.n	8008952 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800894e:	2301      	movs	r3, #1
 8008950:	e1c6      	b.n	8008ce0 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a7e      	ldr	r2, [pc, #504]	@ (8008b50 <HAL_FDCAN_Init+0x220>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d106      	bne.n	800896a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8008964:	461a      	mov	r2, r3
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008970:	b2db      	uxtb	r3, r3
 8008972:	2b00      	cmp	r3, #0
 8008974:	d106      	bne.n	8008984 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f7fa fcce 	bl	8003320 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	699a      	ldr	r2, [r3, #24]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f022 0210 	bic.w	r2, r2, #16
 8008992:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008994:	f7fc ff2a 	bl	80057ec <HAL_GetTick>
 8008998:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800899a:	e014      	b.n	80089c6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800899c:	f7fc ff26 	bl	80057ec <HAL_GetTick>
 80089a0:	4602      	mov	r2, r0
 80089a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089a4:	1ad3      	subs	r3, r2, r3
 80089a6:	2b0a      	cmp	r3, #10
 80089a8:	d90d      	bls.n	80089c6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80089b0:	f043 0201 	orr.w	r2, r3, #1
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2203      	movs	r2, #3
 80089be:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	e18c      	b.n	8008ce0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	699b      	ldr	r3, [r3, #24]
 80089cc:	f003 0308 	and.w	r3, r3, #8
 80089d0:	2b08      	cmp	r3, #8
 80089d2:	d0e3      	beq.n	800899c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	699a      	ldr	r2, [r3, #24]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f042 0201 	orr.w	r2, r2, #1
 80089e2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80089e4:	f7fc ff02 	bl	80057ec <HAL_GetTick>
 80089e8:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80089ea:	e014      	b.n	8008a16 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80089ec:	f7fc fefe 	bl	80057ec <HAL_GetTick>
 80089f0:	4602      	mov	r2, r0
 80089f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089f4:	1ad3      	subs	r3, r2, r3
 80089f6:	2b0a      	cmp	r3, #10
 80089f8:	d90d      	bls.n	8008a16 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008a00:	f043 0201 	orr.w	r2, r3, #1
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2203      	movs	r2, #3
 8008a0e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8008a12:	2301      	movs	r3, #1
 8008a14:	e164      	b.n	8008ce0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	699b      	ldr	r3, [r3, #24]
 8008a1c:	f003 0301 	and.w	r3, r3, #1
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d0e3      	beq.n	80089ec <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	699a      	ldr	r2, [r3, #24]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f042 0202 	orr.w	r2, r2, #2
 8008a32:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	7c1b      	ldrb	r3, [r3, #16]
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d108      	bne.n	8008a4e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	699a      	ldr	r2, [r3, #24]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008a4a:	619a      	str	r2, [r3, #24]
 8008a4c:	e007      	b.n	8008a5e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	699a      	ldr	r2, [r3, #24]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008a5c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	7c5b      	ldrb	r3, [r3, #17]
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d108      	bne.n	8008a78 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	699a      	ldr	r2, [r3, #24]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008a74:	619a      	str	r2, [r3, #24]
 8008a76:	e007      	b.n	8008a88 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	699a      	ldr	r2, [r3, #24]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008a86:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	7c9b      	ldrb	r3, [r3, #18]
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d108      	bne.n	8008aa2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	699a      	ldr	r2, [r3, #24]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008a9e:	619a      	str	r2, [r3, #24]
 8008aa0:	e007      	b.n	8008ab2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	699a      	ldr	r2, [r3, #24]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008ab0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	699b      	ldr	r3, [r3, #24]
 8008ab8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	689a      	ldr	r2, [r3, #8]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	430a      	orrs	r2, r1
 8008ac6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	699a      	ldr	r2, [r3, #24]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8008ad6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	691a      	ldr	r2, [r3, #16]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f022 0210 	bic.w	r2, r2, #16
 8008ae6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d108      	bne.n	8008b02 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	699a      	ldr	r2, [r3, #24]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f042 0204 	orr.w	r2, r2, #4
 8008afe:	619a      	str	r2, [r3, #24]
 8008b00:	e030      	b.n	8008b64 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	68db      	ldr	r3, [r3, #12]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d02c      	beq.n	8008b64 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	2b02      	cmp	r3, #2
 8008b10:	d020      	beq.n	8008b54 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	699a      	ldr	r2, [r3, #24]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008b20:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	691a      	ldr	r2, [r3, #16]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f042 0210 	orr.w	r2, r2, #16
 8008b30:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	68db      	ldr	r3, [r3, #12]
 8008b36:	2b03      	cmp	r3, #3
 8008b38:	d114      	bne.n	8008b64 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	699a      	ldr	r2, [r3, #24]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f042 0220 	orr.w	r2, r2, #32
 8008b48:	619a      	str	r2, [r3, #24]
 8008b4a:	e00b      	b.n	8008b64 <HAL_FDCAN_Init+0x234>
 8008b4c:	08019aac 	.word	0x08019aac
 8008b50:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	699a      	ldr	r2, [r3, #24]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f042 0220 	orr.w	r2, r2, #32
 8008b62:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	699b      	ldr	r3, [r3, #24]
 8008b68:	3b01      	subs	r3, #1
 8008b6a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	69db      	ldr	r3, [r3, #28]
 8008b70:	3b01      	subs	r3, #1
 8008b72:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008b74:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6a1b      	ldr	r3, [r3, #32]
 8008b7a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008b7c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	695b      	ldr	r3, [r3, #20]
 8008b84:	3b01      	subs	r3, #1
 8008b86:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008b8c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008b8e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b98:	d115      	bne.n	8008bc6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b9e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ba4:	3b01      	subs	r3, #1
 8008ba6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008ba8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bae:	3b01      	subs	r3, #1
 8008bb0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8008bb2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bba:	3b01      	subs	r3, #1
 8008bbc:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8008bc2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008bc4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d00a      	beq.n	8008be4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	430a      	orrs	r2, r1
 8008be0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bec:	4413      	add	r3, r2
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d011      	beq.n	8008c16 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008bfa:	f023 0107 	bic.w	r1, r3, #7
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	3360      	adds	r3, #96	@ 0x60
 8008c06:	443b      	add	r3, r7
 8008c08:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	430a      	orrs	r2, r1
 8008c12:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d011      	beq.n	8008c42 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008c26:	f023 0107 	bic.w	r1, r3, #7
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	3360      	adds	r3, #96	@ 0x60
 8008c32:	443b      	add	r3, r7
 8008c34:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	430a      	orrs	r2, r1
 8008c3e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d012      	beq.n	8008c70 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008c52:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c5a:	009b      	lsls	r3, r3, #2
 8008c5c:	3360      	adds	r3, #96	@ 0x60
 8008c5e:	443b      	add	r3, r7
 8008c60:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8008c64:	011a      	lsls	r2, r3, #4
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	430a      	orrs	r2, r1
 8008c6c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d012      	beq.n	8008c9e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008c80:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	3360      	adds	r3, #96	@ 0x60
 8008c8c:	443b      	add	r3, r7
 8008c8e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8008c92:	021a      	lsls	r2, r3, #8
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	430a      	orrs	r2, r1
 8008c9a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a11      	ldr	r2, [pc, #68]	@ (8008ce8 <HAL_FDCAN_Init+0x3b8>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d107      	bne.n	8008cb8 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	689a      	ldr	r2, [r3, #8]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	f022 0203 	bic.w	r2, r2, #3
 8008cb6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 f80b 	bl	8008cec <FDCAN_CalcultateRamBlockAddresses>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8008cdc:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3760      	adds	r7, #96	@ 0x60
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	4000a000 	.word	0x4000a000

08008cec <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b085      	sub	sp, #20
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cf8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8008d02:	4ba7      	ldr	r3, [pc, #668]	@ (8008fa0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008d04:	4013      	ands	r3, r2
 8008d06:	68ba      	ldr	r2, [r7, #8]
 8008d08:	0091      	lsls	r1, r2, #2
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	6812      	ldr	r2, [r2, #0]
 8008d0e:	430b      	orrs	r3, r1
 8008d10:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d1c:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d24:	041a      	lsls	r2, r3, #16
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	430a      	orrs	r2, r1
 8008d2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d34:	68ba      	ldr	r2, [r7, #8]
 8008d36:	4413      	add	r3, r2
 8008d38:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008d42:	4b97      	ldr	r3, [pc, #604]	@ (8008fa0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008d44:	4013      	ands	r3, r2
 8008d46:	68ba      	ldr	r2, [r7, #8]
 8008d48:	0091      	lsls	r1, r2, #2
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	6812      	ldr	r2, [r2, #0]
 8008d4e:	430b      	orrs	r3, r1
 8008d50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d5c:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d64:	041a      	lsls	r2, r3, #16
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	430a      	orrs	r2, r1
 8008d6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d74:	005b      	lsls	r3, r3, #1
 8008d76:	68ba      	ldr	r2, [r7, #8]
 8008d78:	4413      	add	r3, r2
 8008d7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8008d84:	4b86      	ldr	r3, [pc, #536]	@ (8008fa0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008d86:	4013      	ands	r3, r2
 8008d88:	68ba      	ldr	r2, [r7, #8]
 8008d8a:	0091      	lsls	r1, r2, #2
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	6812      	ldr	r2, [r2, #0]
 8008d90:	430b      	orrs	r3, r1
 8008d92:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008d9e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008da6:	041a      	lsls	r2, r3, #16
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	430a      	orrs	r2, r1
 8008dae:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008db6:	687a      	ldr	r2, [r7, #4]
 8008db8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8008dba:	fb02 f303 	mul.w	r3, r2, r3
 8008dbe:	68ba      	ldr	r2, [r7, #8]
 8008dc0:	4413      	add	r3, r2
 8008dc2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8008dcc:	4b74      	ldr	r3, [pc, #464]	@ (8008fa0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008dce:	4013      	ands	r3, r2
 8008dd0:	68ba      	ldr	r2, [r7, #8]
 8008dd2:	0091      	lsls	r1, r2, #2
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	6812      	ldr	r2, [r2, #0]
 8008dd8:	430b      	orrs	r3, r1
 8008dda:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008de6:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008dee:	041a      	lsls	r2, r3, #16
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	430a      	orrs	r2, r1
 8008df6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008e02:	fb02 f303 	mul.w	r3, r2, r3
 8008e06:	68ba      	ldr	r2, [r7, #8]
 8008e08:	4413      	add	r3, r2
 8008e0a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8008e14:	4b62      	ldr	r3, [pc, #392]	@ (8008fa0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008e16:	4013      	ands	r3, r2
 8008e18:	68ba      	ldr	r2, [r7, #8]
 8008e1a:	0091      	lsls	r1, r2, #2
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	6812      	ldr	r2, [r2, #0]
 8008e20:	430b      	orrs	r3, r1
 8008e22:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008e2e:	fb02 f303 	mul.w	r3, r2, r3
 8008e32:	68ba      	ldr	r2, [r7, #8]
 8008e34:	4413      	add	r3, r2
 8008e36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8008e40:	4b57      	ldr	r3, [pc, #348]	@ (8008fa0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008e42:	4013      	ands	r3, r2
 8008e44:	68ba      	ldr	r2, [r7, #8]
 8008e46:	0091      	lsls	r1, r2, #2
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	6812      	ldr	r2, [r2, #0]
 8008e4c:	430b      	orrs	r3, r1
 8008e4e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008e5a:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e62:	041a      	lsls	r2, r3, #16
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	430a      	orrs	r2, r1
 8008e6a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e72:	005b      	lsls	r3, r3, #1
 8008e74:	68ba      	ldr	r2, [r7, #8]
 8008e76:	4413      	add	r3, r2
 8008e78:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8008e82:	4b47      	ldr	r3, [pc, #284]	@ (8008fa0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008e84:	4013      	ands	r3, r2
 8008e86:	68ba      	ldr	r2, [r7, #8]
 8008e88:	0091      	lsls	r1, r2, #2
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	6812      	ldr	r2, [r2, #0]
 8008e8e:	430b      	orrs	r3, r1
 8008e90:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008e9c:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ea4:	041a      	lsls	r2, r3, #16
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	430a      	orrs	r2, r1
 8008eac:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008eb8:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ec0:	061a      	lsls	r2, r3, #24
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	430a      	orrs	r2, r1
 8008ec8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ed0:	4b34      	ldr	r3, [pc, #208]	@ (8008fa4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8008ed2:	4413      	add	r3, r2
 8008ed4:	009a      	lsls	r2, r3, #2
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	441a      	add	r2, r3
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ef2:	00db      	lsls	r3, r3, #3
 8008ef4:	441a      	add	r2, r3
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f02:	6879      	ldr	r1, [r7, #4]
 8008f04:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8008f06:	fb01 f303 	mul.w	r3, r1, r3
 8008f0a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8008f0c:	441a      	add	r2, r3
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f1a:	6879      	ldr	r1, [r7, #4]
 8008f1c:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8008f1e:	fb01 f303 	mul.w	r3, r1, r3
 8008f22:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8008f24:	441a      	add	r2, r3
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f32:	6879      	ldr	r1, [r7, #4]
 8008f34:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8008f36:	fb01 f303 	mul.w	r3, r1, r3
 8008f3a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8008f3c:	441a      	add	r2, r3
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f4e:	00db      	lsls	r3, r3, #3
 8008f50:	441a      	add	r2, r3
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f62:	6879      	ldr	r1, [r7, #4]
 8008f64:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8008f66:	fb01 f303 	mul.w	r3, r1, r3
 8008f6a:	009b      	lsls	r3, r3, #2
 8008f6c:	441a      	add	r2, r3
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f7e:	6879      	ldr	r1, [r7, #4]
 8008f80:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8008f82:	fb01 f303 	mul.w	r3, r1, r3
 8008f86:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8008f88:	441a      	add	r2, r3
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f96:	4a04      	ldr	r2, [pc, #16]	@ (8008fa8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d915      	bls.n	8008fc8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8008f9c:	e006      	b.n	8008fac <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8008f9e:	bf00      	nop
 8008fa0:	ffff0003 	.word	0xffff0003
 8008fa4:	10002b00 	.word	0x10002b00
 8008fa8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008fb2:	f043 0220 	orr.w	r2, r3, #32
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2203      	movs	r2, #3
 8008fc0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	e010      	b.n	8008fea <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008fcc:	60fb      	str	r3, [r7, #12]
 8008fce:	e005      	b.n	8008fdc <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	3304      	adds	r3, #4
 8008fda:	60fb      	str	r3, [r7, #12]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fe2:	68fa      	ldr	r2, [r7, #12]
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d3f3      	bcc.n	8008fd0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008fe8:	2300      	movs	r3, #0
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3714      	adds	r7, #20
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr
 8008ff6:	bf00      	nop

08008ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b089      	sub	sp, #36	@ 0x24
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009002:	2300      	movs	r3, #0
 8009004:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009006:	4b89      	ldr	r3, [pc, #548]	@ (800922c <HAL_GPIO_Init+0x234>)
 8009008:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800900a:	e194      	b.n	8009336 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	2101      	movs	r1, #1
 8009012:	69fb      	ldr	r3, [r7, #28]
 8009014:	fa01 f303 	lsl.w	r3, r1, r3
 8009018:	4013      	ands	r3, r2
 800901a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	2b00      	cmp	r3, #0
 8009020:	f000 8186 	beq.w	8009330 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	f003 0303 	and.w	r3, r3, #3
 800902c:	2b01      	cmp	r3, #1
 800902e:	d005      	beq.n	800903c <HAL_GPIO_Init+0x44>
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	f003 0303 	and.w	r3, r3, #3
 8009038:	2b02      	cmp	r3, #2
 800903a:	d130      	bne.n	800909e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009042:	69fb      	ldr	r3, [r7, #28]
 8009044:	005b      	lsls	r3, r3, #1
 8009046:	2203      	movs	r2, #3
 8009048:	fa02 f303 	lsl.w	r3, r2, r3
 800904c:	43db      	mvns	r3, r3
 800904e:	69ba      	ldr	r2, [r7, #24]
 8009050:	4013      	ands	r3, r2
 8009052:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	68da      	ldr	r2, [r3, #12]
 8009058:	69fb      	ldr	r3, [r7, #28]
 800905a:	005b      	lsls	r3, r3, #1
 800905c:	fa02 f303 	lsl.w	r3, r2, r3
 8009060:	69ba      	ldr	r2, [r7, #24]
 8009062:	4313      	orrs	r3, r2
 8009064:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	69ba      	ldr	r2, [r7, #24]
 800906a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009072:	2201      	movs	r2, #1
 8009074:	69fb      	ldr	r3, [r7, #28]
 8009076:	fa02 f303 	lsl.w	r3, r2, r3
 800907a:	43db      	mvns	r3, r3
 800907c:	69ba      	ldr	r2, [r7, #24]
 800907e:	4013      	ands	r3, r2
 8009080:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	091b      	lsrs	r3, r3, #4
 8009088:	f003 0201 	and.w	r2, r3, #1
 800908c:	69fb      	ldr	r3, [r7, #28]
 800908e:	fa02 f303 	lsl.w	r3, r2, r3
 8009092:	69ba      	ldr	r2, [r7, #24]
 8009094:	4313      	orrs	r3, r2
 8009096:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	69ba      	ldr	r2, [r7, #24]
 800909c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	f003 0303 	and.w	r3, r3, #3
 80090a6:	2b03      	cmp	r3, #3
 80090a8:	d017      	beq.n	80090da <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	68db      	ldr	r3, [r3, #12]
 80090ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80090b0:	69fb      	ldr	r3, [r7, #28]
 80090b2:	005b      	lsls	r3, r3, #1
 80090b4:	2203      	movs	r2, #3
 80090b6:	fa02 f303 	lsl.w	r3, r2, r3
 80090ba:	43db      	mvns	r3, r3
 80090bc:	69ba      	ldr	r2, [r7, #24]
 80090be:	4013      	ands	r3, r2
 80090c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	689a      	ldr	r2, [r3, #8]
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	005b      	lsls	r3, r3, #1
 80090ca:	fa02 f303 	lsl.w	r3, r2, r3
 80090ce:	69ba      	ldr	r2, [r7, #24]
 80090d0:	4313      	orrs	r3, r2
 80090d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	69ba      	ldr	r2, [r7, #24]
 80090d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	f003 0303 	and.w	r3, r3, #3
 80090e2:	2b02      	cmp	r3, #2
 80090e4:	d123      	bne.n	800912e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80090e6:	69fb      	ldr	r3, [r7, #28]
 80090e8:	08da      	lsrs	r2, r3, #3
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	3208      	adds	r2, #8
 80090ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80090f4:	69fb      	ldr	r3, [r7, #28]
 80090f6:	f003 0307 	and.w	r3, r3, #7
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	220f      	movs	r2, #15
 80090fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009102:	43db      	mvns	r3, r3
 8009104:	69ba      	ldr	r2, [r7, #24]
 8009106:	4013      	ands	r3, r2
 8009108:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	691a      	ldr	r2, [r3, #16]
 800910e:	69fb      	ldr	r3, [r7, #28]
 8009110:	f003 0307 	and.w	r3, r3, #7
 8009114:	009b      	lsls	r3, r3, #2
 8009116:	fa02 f303 	lsl.w	r3, r2, r3
 800911a:	69ba      	ldr	r2, [r7, #24]
 800911c:	4313      	orrs	r3, r2
 800911e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009120:	69fb      	ldr	r3, [r7, #28]
 8009122:	08da      	lsrs	r2, r3, #3
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	3208      	adds	r2, #8
 8009128:	69b9      	ldr	r1, [r7, #24]
 800912a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009134:	69fb      	ldr	r3, [r7, #28]
 8009136:	005b      	lsls	r3, r3, #1
 8009138:	2203      	movs	r2, #3
 800913a:	fa02 f303 	lsl.w	r3, r2, r3
 800913e:	43db      	mvns	r3, r3
 8009140:	69ba      	ldr	r2, [r7, #24]
 8009142:	4013      	ands	r3, r2
 8009144:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	f003 0203 	and.w	r2, r3, #3
 800914e:	69fb      	ldr	r3, [r7, #28]
 8009150:	005b      	lsls	r3, r3, #1
 8009152:	fa02 f303 	lsl.w	r3, r2, r3
 8009156:	69ba      	ldr	r2, [r7, #24]
 8009158:	4313      	orrs	r3, r2
 800915a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	69ba      	ldr	r2, [r7, #24]
 8009160:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800916a:	2b00      	cmp	r3, #0
 800916c:	f000 80e0 	beq.w	8009330 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009170:	4b2f      	ldr	r3, [pc, #188]	@ (8009230 <HAL_GPIO_Init+0x238>)
 8009172:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8009176:	4a2e      	ldr	r2, [pc, #184]	@ (8009230 <HAL_GPIO_Init+0x238>)
 8009178:	f043 0302 	orr.w	r3, r3, #2
 800917c:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8009180:	4b2b      	ldr	r3, [pc, #172]	@ (8009230 <HAL_GPIO_Init+0x238>)
 8009182:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8009186:	f003 0302 	and.w	r3, r3, #2
 800918a:	60fb      	str	r3, [r7, #12]
 800918c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800918e:	4a29      	ldr	r2, [pc, #164]	@ (8009234 <HAL_GPIO_Init+0x23c>)
 8009190:	69fb      	ldr	r3, [r7, #28]
 8009192:	089b      	lsrs	r3, r3, #2
 8009194:	3302      	adds	r3, #2
 8009196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800919a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	f003 0303 	and.w	r3, r3, #3
 80091a2:	009b      	lsls	r3, r3, #2
 80091a4:	220f      	movs	r2, #15
 80091a6:	fa02 f303 	lsl.w	r3, r2, r3
 80091aa:	43db      	mvns	r3, r3
 80091ac:	69ba      	ldr	r2, [r7, #24]
 80091ae:	4013      	ands	r3, r2
 80091b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	4a20      	ldr	r2, [pc, #128]	@ (8009238 <HAL_GPIO_Init+0x240>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d052      	beq.n	8009260 <HAL_GPIO_Init+0x268>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	4a1f      	ldr	r2, [pc, #124]	@ (800923c <HAL_GPIO_Init+0x244>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d031      	beq.n	8009226 <HAL_GPIO_Init+0x22e>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	4a1e      	ldr	r2, [pc, #120]	@ (8009240 <HAL_GPIO_Init+0x248>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d02b      	beq.n	8009222 <HAL_GPIO_Init+0x22a>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	4a1d      	ldr	r2, [pc, #116]	@ (8009244 <HAL_GPIO_Init+0x24c>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d025      	beq.n	800921e <HAL_GPIO_Init+0x226>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	4a1c      	ldr	r2, [pc, #112]	@ (8009248 <HAL_GPIO_Init+0x250>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d01f      	beq.n	800921a <HAL_GPIO_Init+0x222>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	4a1b      	ldr	r2, [pc, #108]	@ (800924c <HAL_GPIO_Init+0x254>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d019      	beq.n	8009216 <HAL_GPIO_Init+0x21e>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	4a1a      	ldr	r2, [pc, #104]	@ (8009250 <HAL_GPIO_Init+0x258>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d013      	beq.n	8009212 <HAL_GPIO_Init+0x21a>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	4a19      	ldr	r2, [pc, #100]	@ (8009254 <HAL_GPIO_Init+0x25c>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d00d      	beq.n	800920e <HAL_GPIO_Init+0x216>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	4a18      	ldr	r2, [pc, #96]	@ (8009258 <HAL_GPIO_Init+0x260>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d007      	beq.n	800920a <HAL_GPIO_Init+0x212>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	4a17      	ldr	r2, [pc, #92]	@ (800925c <HAL_GPIO_Init+0x264>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d101      	bne.n	8009206 <HAL_GPIO_Init+0x20e>
 8009202:	2309      	movs	r3, #9
 8009204:	e02d      	b.n	8009262 <HAL_GPIO_Init+0x26a>
 8009206:	230a      	movs	r3, #10
 8009208:	e02b      	b.n	8009262 <HAL_GPIO_Init+0x26a>
 800920a:	2308      	movs	r3, #8
 800920c:	e029      	b.n	8009262 <HAL_GPIO_Init+0x26a>
 800920e:	2307      	movs	r3, #7
 8009210:	e027      	b.n	8009262 <HAL_GPIO_Init+0x26a>
 8009212:	2306      	movs	r3, #6
 8009214:	e025      	b.n	8009262 <HAL_GPIO_Init+0x26a>
 8009216:	2305      	movs	r3, #5
 8009218:	e023      	b.n	8009262 <HAL_GPIO_Init+0x26a>
 800921a:	2304      	movs	r3, #4
 800921c:	e021      	b.n	8009262 <HAL_GPIO_Init+0x26a>
 800921e:	2303      	movs	r3, #3
 8009220:	e01f      	b.n	8009262 <HAL_GPIO_Init+0x26a>
 8009222:	2302      	movs	r3, #2
 8009224:	e01d      	b.n	8009262 <HAL_GPIO_Init+0x26a>
 8009226:	2301      	movs	r3, #1
 8009228:	e01b      	b.n	8009262 <HAL_GPIO_Init+0x26a>
 800922a:	bf00      	nop
 800922c:	58000080 	.word	0x58000080
 8009230:	58024400 	.word	0x58024400
 8009234:	58000400 	.word	0x58000400
 8009238:	58020000 	.word	0x58020000
 800923c:	58020400 	.word	0x58020400
 8009240:	58020800 	.word	0x58020800
 8009244:	58020c00 	.word	0x58020c00
 8009248:	58021000 	.word	0x58021000
 800924c:	58021400 	.word	0x58021400
 8009250:	58021800 	.word	0x58021800
 8009254:	58021c00 	.word	0x58021c00
 8009258:	58022000 	.word	0x58022000
 800925c:	58022400 	.word	0x58022400
 8009260:	2300      	movs	r3, #0
 8009262:	69fa      	ldr	r2, [r7, #28]
 8009264:	f002 0203 	and.w	r2, r2, #3
 8009268:	0092      	lsls	r2, r2, #2
 800926a:	4093      	lsls	r3, r2
 800926c:	69ba      	ldr	r2, [r7, #24]
 800926e:	4313      	orrs	r3, r2
 8009270:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009272:	4938      	ldr	r1, [pc, #224]	@ (8009354 <HAL_GPIO_Init+0x35c>)
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	089b      	lsrs	r3, r3, #2
 8009278:	3302      	adds	r3, #2
 800927a:	69ba      	ldr	r2, [r7, #24]
 800927c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009280:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	43db      	mvns	r3, r3
 800928c:	69ba      	ldr	r2, [r7, #24]
 800928e:	4013      	ands	r3, r2
 8009290:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800929a:	2b00      	cmp	r3, #0
 800929c:	d003      	beq.n	80092a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800929e:	69ba      	ldr	r2, [r7, #24]
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	4313      	orrs	r3, r2
 80092a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80092a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80092aa:	69bb      	ldr	r3, [r7, #24]
 80092ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80092ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	43db      	mvns	r3, r3
 80092ba:	69ba      	ldr	r2, [r7, #24]
 80092bc:	4013      	ands	r3, r2
 80092be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d003      	beq.n	80092d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80092cc:	69ba      	ldr	r2, [r7, #24]
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	4313      	orrs	r3, r2
 80092d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80092d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80092d8:	69bb      	ldr	r3, [r7, #24]
 80092da:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	43db      	mvns	r3, r3
 80092e6:	69ba      	ldr	r2, [r7, #24]
 80092e8:	4013      	ands	r3, r2
 80092ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d003      	beq.n	8009300 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80092f8:	69ba      	ldr	r2, [r7, #24]
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	4313      	orrs	r3, r2
 80092fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	69ba      	ldr	r2, [r7, #24]
 8009304:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	43db      	mvns	r3, r3
 8009310:	69ba      	ldr	r2, [r7, #24]
 8009312:	4013      	ands	r3, r2
 8009314:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800931e:	2b00      	cmp	r3, #0
 8009320:	d003      	beq.n	800932a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8009322:	69ba      	ldr	r2, [r7, #24]
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	4313      	orrs	r3, r2
 8009328:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	69ba      	ldr	r2, [r7, #24]
 800932e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009330:	69fb      	ldr	r3, [r7, #28]
 8009332:	3301      	adds	r3, #1
 8009334:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	69fb      	ldr	r3, [r7, #28]
 800933c:	fa22 f303 	lsr.w	r3, r2, r3
 8009340:	2b00      	cmp	r3, #0
 8009342:	f47f ae63 	bne.w	800900c <HAL_GPIO_Init+0x14>
  }
}
 8009346:	bf00      	nop
 8009348:	bf00      	nop
 800934a:	3724      	adds	r7, #36	@ 0x24
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr
 8009354:	58000400 	.word	0x58000400

08009358 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	460b      	mov	r3, r1
 8009362:	807b      	strh	r3, [r7, #2]
 8009364:	4613      	mov	r3, r2
 8009366:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009368:	787b      	ldrb	r3, [r7, #1]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d003      	beq.n	8009376 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800936e:	887a      	ldrh	r2, [r7, #2]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009374:	e003      	b.n	800937e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009376:	887b      	ldrh	r3, [r7, #2]
 8009378:	041a      	lsls	r2, r3, #16
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	619a      	str	r2, [r3, #24]
}
 800937e:	bf00      	nop
 8009380:	370c      	adds	r7, #12
 8009382:	46bd      	mov	sp, r7
 8009384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009388:	4770      	bx	lr
	...

0800938c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b082      	sub	sp, #8
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d101      	bne.n	800939e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	e08b      	b.n	80094b6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d106      	bne.n	80093b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f7fa f920 	bl	80035f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2224      	movs	r2, #36	@ 0x24
 80093bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	681a      	ldr	r2, [r3, #0]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f022 0201 	bic.w	r2, r2, #1
 80093ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	685a      	ldr	r2, [r3, #4]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80093dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	689a      	ldr	r2, [r3, #8]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80093ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d107      	bne.n	8009406 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	689a      	ldr	r2, [r3, #8]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009402:	609a      	str	r2, [r3, #8]
 8009404:	e006      	b.n	8009414 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	689a      	ldr	r2, [r3, #8]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8009412:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	68db      	ldr	r3, [r3, #12]
 8009418:	2b02      	cmp	r3, #2
 800941a:	d108      	bne.n	800942e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	685a      	ldr	r2, [r3, #4]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800942a:	605a      	str	r2, [r3, #4]
 800942c:	e007      	b.n	800943e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	685a      	ldr	r2, [r3, #4]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800943c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	6859      	ldr	r1, [r3, #4]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	4b1d      	ldr	r3, [pc, #116]	@ (80094c0 <HAL_I2C_Init+0x134>)
 800944a:	430b      	orrs	r3, r1
 800944c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	68da      	ldr	r2, [r3, #12]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800945c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	691a      	ldr	r2, [r3, #16]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	695b      	ldr	r3, [r3, #20]
 8009466:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	699b      	ldr	r3, [r3, #24]
 800946e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	430a      	orrs	r2, r1
 8009476:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	69d9      	ldr	r1, [r3, #28]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6a1a      	ldr	r2, [r3, #32]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	430a      	orrs	r2, r1
 8009486:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f042 0201 	orr.w	r2, r2, #1
 8009496:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2200      	movs	r2, #0
 800949c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2220      	movs	r2, #32
 80094a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2200      	movs	r2, #0
 80094aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2200      	movs	r2, #0
 80094b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80094b4:	2300      	movs	r3, #0
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3708      	adds	r7, #8
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	02008000 	.word	0x02008000

080094c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b083      	sub	sp, #12
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	2b20      	cmp	r3, #32
 80094d8:	d138      	bne.n	800954c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d101      	bne.n	80094e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80094e4:	2302      	movs	r3, #2
 80094e6:	e032      	b.n	800954e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2201      	movs	r2, #1
 80094ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2224      	movs	r2, #36	@ 0x24
 80094f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f022 0201 	bic.w	r2, r2, #1
 8009506:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	681a      	ldr	r2, [r3, #0]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009516:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	6819      	ldr	r1, [r3, #0]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	683a      	ldr	r2, [r7, #0]
 8009524:	430a      	orrs	r2, r1
 8009526:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f042 0201 	orr.w	r2, r2, #1
 8009536:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2220      	movs	r2, #32
 800953c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2200      	movs	r2, #0
 8009544:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009548:	2300      	movs	r3, #0
 800954a:	e000      	b.n	800954e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800954c:	2302      	movs	r3, #2
  }
}
 800954e:	4618      	mov	r0, r3
 8009550:	370c      	adds	r7, #12
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr

0800955a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800955a:	b480      	push	{r7}
 800955c:	b085      	sub	sp, #20
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
 8009562:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800956a:	b2db      	uxtb	r3, r3
 800956c:	2b20      	cmp	r3, #32
 800956e:	d139      	bne.n	80095e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009576:	2b01      	cmp	r3, #1
 8009578:	d101      	bne.n	800957e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800957a:	2302      	movs	r3, #2
 800957c:	e033      	b.n	80095e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2201      	movs	r2, #1
 8009582:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2224      	movs	r2, #36	@ 0x24
 800958a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	681a      	ldr	r2, [r3, #0]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f022 0201 	bic.w	r2, r2, #1
 800959c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80095ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	021b      	lsls	r3, r3, #8
 80095b2:	68fa      	ldr	r2, [r7, #12]
 80095b4:	4313      	orrs	r3, r2
 80095b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	68fa      	ldr	r2, [r7, #12]
 80095be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f042 0201 	orr.w	r2, r2, #1
 80095ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2220      	movs	r2, #32
 80095d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80095e0:	2300      	movs	r3, #0
 80095e2:	e000      	b.n	80095e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80095e4:	2302      	movs	r3, #2
  }
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3714      	adds	r7, #20
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr
	...

080095f4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80095fc:	4b19      	ldr	r3, [pc, #100]	@ (8009664 <HAL_PWREx_ConfigSupply+0x70>)
 80095fe:	68db      	ldr	r3, [r3, #12]
 8009600:	f003 0304 	and.w	r3, r3, #4
 8009604:	2b04      	cmp	r3, #4
 8009606:	d00a      	beq.n	800961e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009608:	4b16      	ldr	r3, [pc, #88]	@ (8009664 <HAL_PWREx_ConfigSupply+0x70>)
 800960a:	68db      	ldr	r3, [r3, #12]
 800960c:	f003 0307 	and.w	r3, r3, #7
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	429a      	cmp	r2, r3
 8009614:	d001      	beq.n	800961a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009616:	2301      	movs	r3, #1
 8009618:	e01f      	b.n	800965a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800961a:	2300      	movs	r3, #0
 800961c:	e01d      	b.n	800965a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800961e:	4b11      	ldr	r3, [pc, #68]	@ (8009664 <HAL_PWREx_ConfigSupply+0x70>)
 8009620:	68db      	ldr	r3, [r3, #12]
 8009622:	f023 0207 	bic.w	r2, r3, #7
 8009626:	490f      	ldr	r1, [pc, #60]	@ (8009664 <HAL_PWREx_ConfigSupply+0x70>)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	4313      	orrs	r3, r2
 800962c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800962e:	f7fc f8dd 	bl	80057ec <HAL_GetTick>
 8009632:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009634:	e009      	b.n	800964a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009636:	f7fc f8d9 	bl	80057ec <HAL_GetTick>
 800963a:	4602      	mov	r2, r0
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	1ad3      	subs	r3, r2, r3
 8009640:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009644:	d901      	bls.n	800964a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009646:	2301      	movs	r3, #1
 8009648:	e007      	b.n	800965a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800964a:	4b06      	ldr	r3, [pc, #24]	@ (8009664 <HAL_PWREx_ConfigSupply+0x70>)
 800964c:	685b      	ldr	r3, [r3, #4]
 800964e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009652:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009656:	d1ee      	bne.n	8009636 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009658:	2300      	movs	r3, #0
}
 800965a:	4618      	mov	r0, r3
 800965c:	3710      	adds	r7, #16
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
 8009662:	bf00      	nop
 8009664:	58024800 	.word	0x58024800

08009668 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b08c      	sub	sp, #48	@ 0x30
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d102      	bne.n	800967c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009676:	2301      	movs	r3, #1
 8009678:	f000 bc1f 	b.w	8009eba <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f003 0301 	and.w	r3, r3, #1
 8009684:	2b00      	cmp	r3, #0
 8009686:	f000 80b3 	beq.w	80097f0 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800968a:	4b95      	ldr	r3, [pc, #596]	@ (80098e0 <HAL_RCC_OscConfig+0x278>)
 800968c:	691b      	ldr	r3, [r3, #16]
 800968e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009692:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009694:	4b92      	ldr	r3, [pc, #584]	@ (80098e0 <HAL_RCC_OscConfig+0x278>)
 8009696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009698:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800969a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800969c:	2b10      	cmp	r3, #16
 800969e:	d007      	beq.n	80096b0 <HAL_RCC_OscConfig+0x48>
 80096a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096a2:	2b18      	cmp	r3, #24
 80096a4:	d112      	bne.n	80096cc <HAL_RCC_OscConfig+0x64>
 80096a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096a8:	f003 0303 	and.w	r3, r3, #3
 80096ac:	2b02      	cmp	r3, #2
 80096ae:	d10d      	bne.n	80096cc <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80096b0:	4b8b      	ldr	r3, [pc, #556]	@ (80098e0 <HAL_RCC_OscConfig+0x278>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	f000 8098 	beq.w	80097ee <HAL_RCC_OscConfig+0x186>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	f040 8093 	bne.w	80097ee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80096c8:	2301      	movs	r3, #1
 80096ca:	e3f6      	b.n	8009eba <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096d4:	d106      	bne.n	80096e4 <HAL_RCC_OscConfig+0x7c>
 80096d6:	4b82      	ldr	r3, [pc, #520]	@ (80098e0 <HAL_RCC_OscConfig+0x278>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4a81      	ldr	r2, [pc, #516]	@ (80098e0 <HAL_RCC_OscConfig+0x278>)
 80096dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80096e0:	6013      	str	r3, [r2, #0]
 80096e2:	e058      	b.n	8009796 <HAL_RCC_OscConfig+0x12e>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d112      	bne.n	8009712 <HAL_RCC_OscConfig+0xaa>
 80096ec:	4b7c      	ldr	r3, [pc, #496]	@ (80098e0 <HAL_RCC_OscConfig+0x278>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a7b      	ldr	r2, [pc, #492]	@ (80098e0 <HAL_RCC_OscConfig+0x278>)
 80096f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80096f6:	6013      	str	r3, [r2, #0]
 80096f8:	4b79      	ldr	r3, [pc, #484]	@ (80098e0 <HAL_RCC_OscConfig+0x278>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a78      	ldr	r2, [pc, #480]	@ (80098e0 <HAL_RCC_OscConfig+0x278>)
 80096fe:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009702:	6013      	str	r3, [r2, #0]
 8009704:	4b76      	ldr	r3, [pc, #472]	@ (80098e0 <HAL_RCC_OscConfig+0x278>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4a75      	ldr	r2, [pc, #468]	@ (80098e0 <HAL_RCC_OscConfig+0x278>)
 800970a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800970e:	6013      	str	r3, [r2, #0]
 8009710:	e041      	b.n	8009796 <HAL_RCC_OscConfig+0x12e>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800971a:	d112      	bne.n	8009742 <HAL_RCC_OscConfig+0xda>
 800971c:	4b70      	ldr	r3, [pc, #448]	@ (80098e0 <HAL_RCC_OscConfig+0x278>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a6f      	ldr	r2, [pc, #444]	@ (80098e0 <HAL_RCC_OscConfig+0x278>)
 8009722:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009726:	6013      	str	r3, [r2, #0]
 8009728:	4b6d      	ldr	r3, [pc, #436]	@ (80098e0 <HAL_RCC_OscConfig+0x278>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a6c      	ldr	r2, [pc, #432]	@ (80098e0 <HAL_RCC_OscConfig+0x278>)
 800972e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009732:	6013      	str	r3, [r2, #0]
 8009734:	4b6a      	ldr	r3, [pc, #424]	@ (80098e0 <HAL_RCC_OscConfig+0x278>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4a69      	ldr	r2, [pc, #420]	@ (80098e0 <HAL_RCC_OscConfig+0x278>)
 800973a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800973e:	6013      	str	r3, [r2, #0]
 8009740:	e029      	b.n	8009796 <HAL_RCC_OscConfig+0x12e>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800974a:	d112      	bne.n	8009772 <HAL_RCC_OscConfig+0x10a>
 800974c:	4b64      	ldr	r3, [pc, #400]	@ (80098e0 <HAL_RCC_OscConfig+0x278>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a63      	ldr	r2, [pc, #396]	@ (80098e0 <HAL_RCC_OscConfig+0x278>)
 8009752:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009756:	6013      	str	r3, [r2, #0]
 8009758:	4b61      	ldr	r3, [pc, #388]	@ (80098e0 <HAL_RCC_OscConfig+0x278>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a60      	ldr	r2, [pc, #384]	@ (80098e0 <HAL_RCC_OscConfig+0x278>)
 800975e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009762:	6013      	str	r3, [r2, #0]
 8009764:	4b5e      	ldr	r3, [pc, #376]	@ (80098e0 <HAL_RCC_OscConfig+0x278>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4a5d      	ldr	r2, [pc, #372]	@ (80098e0 <HAL_RCC_OscConfig+0x278>)
 800976a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800976e:	6013      	str	r3, [r2, #0]
 8009770:	e011      	b.n	8009796 <HAL_RCC_OscConfig+0x12e>
 8009772:	4b5b      	ldr	r3, [pc, #364]	@ (80098e0 <HAL_RCC_OscConfig+0x278>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4a5a      	ldr	r2, [pc, #360]	@ (80098e0 <HAL_RCC_OscConfig+0x278>)
 8009778:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800977c:	6013      	str	r3, [r2, #0]
 800977e:	4b58      	ldr	r3, [pc, #352]	@ (80098e0 <HAL_RCC_OscConfig+0x278>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4a57      	ldr	r2, [pc, #348]	@ (80098e0 <HAL_RCC_OscConfig+0x278>)
 8009784:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009788:	6013      	str	r3, [r2, #0]
 800978a:	4b55      	ldr	r3, [pc, #340]	@ (80098e0 <HAL_RCC_OscConfig+0x278>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a54      	ldr	r2, [pc, #336]	@ (80098e0 <HAL_RCC_OscConfig+0x278>)
 8009790:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009794:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d013      	beq.n	80097c6 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800979e:	f7fc f825 	bl	80057ec <HAL_GetTick>
 80097a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80097a4:	e008      	b.n	80097b8 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80097a6:	f7fc f821 	bl	80057ec <HAL_GetTick>
 80097aa:	4602      	mov	r2, r0
 80097ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ae:	1ad3      	subs	r3, r2, r3
 80097b0:	2b64      	cmp	r3, #100	@ 0x64
 80097b2:	d901      	bls.n	80097b8 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80097b4:	2303      	movs	r3, #3
 80097b6:	e380      	b.n	8009eba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80097b8:	4b49      	ldr	r3, [pc, #292]	@ (80098e0 <HAL_RCC_OscConfig+0x278>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d0f0      	beq.n	80097a6 <HAL_RCC_OscConfig+0x13e>
 80097c4:	e014      	b.n	80097f0 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097c6:	f7fc f811 	bl	80057ec <HAL_GetTick>
 80097ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80097cc:	e008      	b.n	80097e0 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80097ce:	f7fc f80d 	bl	80057ec <HAL_GetTick>
 80097d2:	4602      	mov	r2, r0
 80097d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097d6:	1ad3      	subs	r3, r2, r3
 80097d8:	2b64      	cmp	r3, #100	@ 0x64
 80097da:	d901      	bls.n	80097e0 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80097dc:	2303      	movs	r3, #3
 80097de:	e36c      	b.n	8009eba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80097e0:	4b3f      	ldr	r3, [pc, #252]	@ (80098e0 <HAL_RCC_OscConfig+0x278>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d1f0      	bne.n	80097ce <HAL_RCC_OscConfig+0x166>
 80097ec:	e000      	b.n	80097f0 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80097ee:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f003 0302 	and.w	r3, r3, #2
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	f000 808c 	beq.w	8009916 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80097fe:	4b38      	ldr	r3, [pc, #224]	@ (80098e0 <HAL_RCC_OscConfig+0x278>)
 8009800:	691b      	ldr	r3, [r3, #16]
 8009802:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009806:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009808:	4b35      	ldr	r3, [pc, #212]	@ (80098e0 <HAL_RCC_OscConfig+0x278>)
 800980a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800980c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800980e:	6a3b      	ldr	r3, [r7, #32]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d007      	beq.n	8009824 <HAL_RCC_OscConfig+0x1bc>
 8009814:	6a3b      	ldr	r3, [r7, #32]
 8009816:	2b18      	cmp	r3, #24
 8009818:	d137      	bne.n	800988a <HAL_RCC_OscConfig+0x222>
 800981a:	69fb      	ldr	r3, [r7, #28]
 800981c:	f003 0303 	and.w	r3, r3, #3
 8009820:	2b00      	cmp	r3, #0
 8009822:	d132      	bne.n	800988a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009824:	4b2e      	ldr	r3, [pc, #184]	@ (80098e0 <HAL_RCC_OscConfig+0x278>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f003 0304 	and.w	r3, r3, #4
 800982c:	2b00      	cmp	r3, #0
 800982e:	d005      	beq.n	800983c <HAL_RCC_OscConfig+0x1d4>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	68db      	ldr	r3, [r3, #12]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d101      	bne.n	800983c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8009838:	2301      	movs	r3, #1
 800983a:	e33e      	b.n	8009eba <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800983c:	4b28      	ldr	r3, [pc, #160]	@ (80098e0 <HAL_RCC_OscConfig+0x278>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f023 0219 	bic.w	r2, r3, #25
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	68db      	ldr	r3, [r3, #12]
 8009848:	4925      	ldr	r1, [pc, #148]	@ (80098e0 <HAL_RCC_OscConfig+0x278>)
 800984a:	4313      	orrs	r3, r2
 800984c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800984e:	f7fb ffcd 	bl	80057ec <HAL_GetTick>
 8009852:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009854:	e008      	b.n	8009868 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009856:	f7fb ffc9 	bl	80057ec <HAL_GetTick>
 800985a:	4602      	mov	r2, r0
 800985c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800985e:	1ad3      	subs	r3, r2, r3
 8009860:	2b02      	cmp	r3, #2
 8009862:	d901      	bls.n	8009868 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8009864:	2303      	movs	r3, #3
 8009866:	e328      	b.n	8009eba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009868:	4b1d      	ldr	r3, [pc, #116]	@ (80098e0 <HAL_RCC_OscConfig+0x278>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f003 0304 	and.w	r3, r3, #4
 8009870:	2b00      	cmp	r3, #0
 8009872:	d0f0      	beq.n	8009856 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009874:	4b1a      	ldr	r3, [pc, #104]	@ (80098e0 <HAL_RCC_OscConfig+0x278>)
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	691b      	ldr	r3, [r3, #16]
 8009880:	061b      	lsls	r3, r3, #24
 8009882:	4917      	ldr	r1, [pc, #92]	@ (80098e0 <HAL_RCC_OscConfig+0x278>)
 8009884:	4313      	orrs	r3, r2
 8009886:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009888:	e045      	b.n	8009916 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	68db      	ldr	r3, [r3, #12]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d028      	beq.n	80098e4 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009892:	4b13      	ldr	r3, [pc, #76]	@ (80098e0 <HAL_RCC_OscConfig+0x278>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f023 0219 	bic.w	r2, r3, #25
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	68db      	ldr	r3, [r3, #12]
 800989e:	4910      	ldr	r1, [pc, #64]	@ (80098e0 <HAL_RCC_OscConfig+0x278>)
 80098a0:	4313      	orrs	r3, r2
 80098a2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098a4:	f7fb ffa2 	bl	80057ec <HAL_GetTick>
 80098a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80098aa:	e008      	b.n	80098be <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80098ac:	f7fb ff9e 	bl	80057ec <HAL_GetTick>
 80098b0:	4602      	mov	r2, r0
 80098b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098b4:	1ad3      	subs	r3, r2, r3
 80098b6:	2b02      	cmp	r3, #2
 80098b8:	d901      	bls.n	80098be <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80098ba:	2303      	movs	r3, #3
 80098bc:	e2fd      	b.n	8009eba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80098be:	4b08      	ldr	r3, [pc, #32]	@ (80098e0 <HAL_RCC_OscConfig+0x278>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f003 0304 	and.w	r3, r3, #4
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d0f0      	beq.n	80098ac <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098ca:	4b05      	ldr	r3, [pc, #20]	@ (80098e0 <HAL_RCC_OscConfig+0x278>)
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	691b      	ldr	r3, [r3, #16]
 80098d6:	061b      	lsls	r3, r3, #24
 80098d8:	4901      	ldr	r1, [pc, #4]	@ (80098e0 <HAL_RCC_OscConfig+0x278>)
 80098da:	4313      	orrs	r3, r2
 80098dc:	604b      	str	r3, [r1, #4]
 80098de:	e01a      	b.n	8009916 <HAL_RCC_OscConfig+0x2ae>
 80098e0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80098e4:	4b97      	ldr	r3, [pc, #604]	@ (8009b44 <HAL_RCC_OscConfig+0x4dc>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4a96      	ldr	r2, [pc, #600]	@ (8009b44 <HAL_RCC_OscConfig+0x4dc>)
 80098ea:	f023 0301 	bic.w	r3, r3, #1
 80098ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098f0:	f7fb ff7c 	bl	80057ec <HAL_GetTick>
 80098f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80098f6:	e008      	b.n	800990a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80098f8:	f7fb ff78 	bl	80057ec <HAL_GetTick>
 80098fc:	4602      	mov	r2, r0
 80098fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009900:	1ad3      	subs	r3, r2, r3
 8009902:	2b02      	cmp	r3, #2
 8009904:	d901      	bls.n	800990a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8009906:	2303      	movs	r3, #3
 8009908:	e2d7      	b.n	8009eba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800990a:	4b8e      	ldr	r3, [pc, #568]	@ (8009b44 <HAL_RCC_OscConfig+0x4dc>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f003 0304 	and.w	r3, r3, #4
 8009912:	2b00      	cmp	r3, #0
 8009914:	d1f0      	bne.n	80098f8 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f003 0310 	and.w	r3, r3, #16
 800991e:	2b00      	cmp	r3, #0
 8009920:	d06a      	beq.n	80099f8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009922:	4b88      	ldr	r3, [pc, #544]	@ (8009b44 <HAL_RCC_OscConfig+0x4dc>)
 8009924:	691b      	ldr	r3, [r3, #16]
 8009926:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800992a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800992c:	4b85      	ldr	r3, [pc, #532]	@ (8009b44 <HAL_RCC_OscConfig+0x4dc>)
 800992e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009930:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009932:	69bb      	ldr	r3, [r7, #24]
 8009934:	2b08      	cmp	r3, #8
 8009936:	d007      	beq.n	8009948 <HAL_RCC_OscConfig+0x2e0>
 8009938:	69bb      	ldr	r3, [r7, #24]
 800993a:	2b18      	cmp	r3, #24
 800993c:	d11b      	bne.n	8009976 <HAL_RCC_OscConfig+0x30e>
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	f003 0303 	and.w	r3, r3, #3
 8009944:	2b01      	cmp	r3, #1
 8009946:	d116      	bne.n	8009976 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009948:	4b7e      	ldr	r3, [pc, #504]	@ (8009b44 <HAL_RCC_OscConfig+0x4dc>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009950:	2b00      	cmp	r3, #0
 8009952:	d005      	beq.n	8009960 <HAL_RCC_OscConfig+0x2f8>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	69db      	ldr	r3, [r3, #28]
 8009958:	2b80      	cmp	r3, #128	@ 0x80
 800995a:	d001      	beq.n	8009960 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800995c:	2301      	movs	r3, #1
 800995e:	e2ac      	b.n	8009eba <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009960:	4b78      	ldr	r3, [pc, #480]	@ (8009b44 <HAL_RCC_OscConfig+0x4dc>)
 8009962:	68db      	ldr	r3, [r3, #12]
 8009964:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6a1b      	ldr	r3, [r3, #32]
 800996c:	061b      	lsls	r3, r3, #24
 800996e:	4975      	ldr	r1, [pc, #468]	@ (8009b44 <HAL_RCC_OscConfig+0x4dc>)
 8009970:	4313      	orrs	r3, r2
 8009972:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009974:	e040      	b.n	80099f8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	69db      	ldr	r3, [r3, #28]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d023      	beq.n	80099c6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800997e:	4b71      	ldr	r3, [pc, #452]	@ (8009b44 <HAL_RCC_OscConfig+0x4dc>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4a70      	ldr	r2, [pc, #448]	@ (8009b44 <HAL_RCC_OscConfig+0x4dc>)
 8009984:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009988:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800998a:	f7fb ff2f 	bl	80057ec <HAL_GetTick>
 800998e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009990:	e008      	b.n	80099a4 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009992:	f7fb ff2b 	bl	80057ec <HAL_GetTick>
 8009996:	4602      	mov	r2, r0
 8009998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800999a:	1ad3      	subs	r3, r2, r3
 800999c:	2b02      	cmp	r3, #2
 800999e:	d901      	bls.n	80099a4 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80099a0:	2303      	movs	r3, #3
 80099a2:	e28a      	b.n	8009eba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80099a4:	4b67      	ldr	r3, [pc, #412]	@ (8009b44 <HAL_RCC_OscConfig+0x4dc>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d0f0      	beq.n	8009992 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80099b0:	4b64      	ldr	r3, [pc, #400]	@ (8009b44 <HAL_RCC_OscConfig+0x4dc>)
 80099b2:	68db      	ldr	r3, [r3, #12]
 80099b4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6a1b      	ldr	r3, [r3, #32]
 80099bc:	061b      	lsls	r3, r3, #24
 80099be:	4961      	ldr	r1, [pc, #388]	@ (8009b44 <HAL_RCC_OscConfig+0x4dc>)
 80099c0:	4313      	orrs	r3, r2
 80099c2:	60cb      	str	r3, [r1, #12]
 80099c4:	e018      	b.n	80099f8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80099c6:	4b5f      	ldr	r3, [pc, #380]	@ (8009b44 <HAL_RCC_OscConfig+0x4dc>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4a5e      	ldr	r2, [pc, #376]	@ (8009b44 <HAL_RCC_OscConfig+0x4dc>)
 80099cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80099d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099d2:	f7fb ff0b 	bl	80057ec <HAL_GetTick>
 80099d6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80099d8:	e008      	b.n	80099ec <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80099da:	f7fb ff07 	bl	80057ec <HAL_GetTick>
 80099de:	4602      	mov	r2, r0
 80099e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099e2:	1ad3      	subs	r3, r2, r3
 80099e4:	2b02      	cmp	r3, #2
 80099e6:	d901      	bls.n	80099ec <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80099e8:	2303      	movs	r3, #3
 80099ea:	e266      	b.n	8009eba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80099ec:	4b55      	ldr	r3, [pc, #340]	@ (8009b44 <HAL_RCC_OscConfig+0x4dc>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d1f0      	bne.n	80099da <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f003 0308 	and.w	r3, r3, #8
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d036      	beq.n	8009a72 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	695b      	ldr	r3, [r3, #20]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d019      	beq.n	8009a40 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009a0c:	4b4d      	ldr	r3, [pc, #308]	@ (8009b44 <HAL_RCC_OscConfig+0x4dc>)
 8009a0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a10:	4a4c      	ldr	r2, [pc, #304]	@ (8009b44 <HAL_RCC_OscConfig+0x4dc>)
 8009a12:	f043 0301 	orr.w	r3, r3, #1
 8009a16:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a18:	f7fb fee8 	bl	80057ec <HAL_GetTick>
 8009a1c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009a1e:	e008      	b.n	8009a32 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009a20:	f7fb fee4 	bl	80057ec <HAL_GetTick>
 8009a24:	4602      	mov	r2, r0
 8009a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a28:	1ad3      	subs	r3, r2, r3
 8009a2a:	2b02      	cmp	r3, #2
 8009a2c:	d901      	bls.n	8009a32 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8009a2e:	2303      	movs	r3, #3
 8009a30:	e243      	b.n	8009eba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009a32:	4b44      	ldr	r3, [pc, #272]	@ (8009b44 <HAL_RCC_OscConfig+0x4dc>)
 8009a34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a36:	f003 0302 	and.w	r3, r3, #2
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d0f0      	beq.n	8009a20 <HAL_RCC_OscConfig+0x3b8>
 8009a3e:	e018      	b.n	8009a72 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009a40:	4b40      	ldr	r3, [pc, #256]	@ (8009b44 <HAL_RCC_OscConfig+0x4dc>)
 8009a42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a44:	4a3f      	ldr	r2, [pc, #252]	@ (8009b44 <HAL_RCC_OscConfig+0x4dc>)
 8009a46:	f023 0301 	bic.w	r3, r3, #1
 8009a4a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a4c:	f7fb fece 	bl	80057ec <HAL_GetTick>
 8009a50:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009a52:	e008      	b.n	8009a66 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009a54:	f7fb feca 	bl	80057ec <HAL_GetTick>
 8009a58:	4602      	mov	r2, r0
 8009a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a5c:	1ad3      	subs	r3, r2, r3
 8009a5e:	2b02      	cmp	r3, #2
 8009a60:	d901      	bls.n	8009a66 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8009a62:	2303      	movs	r3, #3
 8009a64:	e229      	b.n	8009eba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009a66:	4b37      	ldr	r3, [pc, #220]	@ (8009b44 <HAL_RCC_OscConfig+0x4dc>)
 8009a68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a6a:	f003 0302 	and.w	r3, r3, #2
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d1f0      	bne.n	8009a54 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f003 0320 	and.w	r3, r3, #32
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d036      	beq.n	8009aec <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	699b      	ldr	r3, [r3, #24]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d019      	beq.n	8009aba <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009a86:	4b2f      	ldr	r3, [pc, #188]	@ (8009b44 <HAL_RCC_OscConfig+0x4dc>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a2e      	ldr	r2, [pc, #184]	@ (8009b44 <HAL_RCC_OscConfig+0x4dc>)
 8009a8c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009a90:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009a92:	f7fb feab 	bl	80057ec <HAL_GetTick>
 8009a96:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009a98:	e008      	b.n	8009aac <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009a9a:	f7fb fea7 	bl	80057ec <HAL_GetTick>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aa2:	1ad3      	subs	r3, r2, r3
 8009aa4:	2b02      	cmp	r3, #2
 8009aa6:	d901      	bls.n	8009aac <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8009aa8:	2303      	movs	r3, #3
 8009aaa:	e206      	b.n	8009eba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009aac:	4b25      	ldr	r3, [pc, #148]	@ (8009b44 <HAL_RCC_OscConfig+0x4dc>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d0f0      	beq.n	8009a9a <HAL_RCC_OscConfig+0x432>
 8009ab8:	e018      	b.n	8009aec <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009aba:	4b22      	ldr	r3, [pc, #136]	@ (8009b44 <HAL_RCC_OscConfig+0x4dc>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a21      	ldr	r2, [pc, #132]	@ (8009b44 <HAL_RCC_OscConfig+0x4dc>)
 8009ac0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009ac4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009ac6:	f7fb fe91 	bl	80057ec <HAL_GetTick>
 8009aca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009acc:	e008      	b.n	8009ae0 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009ace:	f7fb fe8d 	bl	80057ec <HAL_GetTick>
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ad6:	1ad3      	subs	r3, r2, r3
 8009ad8:	2b02      	cmp	r3, #2
 8009ada:	d901      	bls.n	8009ae0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8009adc:	2303      	movs	r3, #3
 8009ade:	e1ec      	b.n	8009eba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009ae0:	4b18      	ldr	r3, [pc, #96]	@ (8009b44 <HAL_RCC_OscConfig+0x4dc>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d1f0      	bne.n	8009ace <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f003 0304 	and.w	r3, r3, #4
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	f000 80af 	beq.w	8009c58 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009afa:	4b13      	ldr	r3, [pc, #76]	@ (8009b48 <HAL_RCC_OscConfig+0x4e0>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4a12      	ldr	r2, [pc, #72]	@ (8009b48 <HAL_RCC_OscConfig+0x4e0>)
 8009b00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009b04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009b06:	f7fb fe71 	bl	80057ec <HAL_GetTick>
 8009b0a:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b0c:	e008      	b.n	8009b20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b0e:	f7fb fe6d 	bl	80057ec <HAL_GetTick>
 8009b12:	4602      	mov	r2, r0
 8009b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b16:	1ad3      	subs	r3, r2, r3
 8009b18:	2b64      	cmp	r3, #100	@ 0x64
 8009b1a:	d901      	bls.n	8009b20 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8009b1c:	2303      	movs	r3, #3
 8009b1e:	e1cc      	b.n	8009eba <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b20:	4b09      	ldr	r3, [pc, #36]	@ (8009b48 <HAL_RCC_OscConfig+0x4e0>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d0f0      	beq.n	8009b0e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d10b      	bne.n	8009b4c <HAL_RCC_OscConfig+0x4e4>
 8009b34:	4b03      	ldr	r3, [pc, #12]	@ (8009b44 <HAL_RCC_OscConfig+0x4dc>)
 8009b36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b38:	4a02      	ldr	r2, [pc, #8]	@ (8009b44 <HAL_RCC_OscConfig+0x4dc>)
 8009b3a:	f043 0301 	orr.w	r3, r3, #1
 8009b3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009b40:	e05b      	b.n	8009bfa <HAL_RCC_OscConfig+0x592>
 8009b42:	bf00      	nop
 8009b44:	58024400 	.word	0x58024400
 8009b48:	58024800 	.word	0x58024800
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d112      	bne.n	8009b7a <HAL_RCC_OscConfig+0x512>
 8009b54:	4b9d      	ldr	r3, [pc, #628]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009b56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b58:	4a9c      	ldr	r2, [pc, #624]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009b5a:	f023 0301 	bic.w	r3, r3, #1
 8009b5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009b60:	4b9a      	ldr	r3, [pc, #616]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009b62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b64:	4a99      	ldr	r2, [pc, #612]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009b66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8009b6c:	4b97      	ldr	r3, [pc, #604]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009b6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b70:	4a96      	ldr	r2, [pc, #600]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009b72:	f023 0304 	bic.w	r3, r3, #4
 8009b76:	6713      	str	r3, [r2, #112]	@ 0x70
 8009b78:	e03f      	b.n	8009bfa <HAL_RCC_OscConfig+0x592>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	689b      	ldr	r3, [r3, #8]
 8009b7e:	2b05      	cmp	r3, #5
 8009b80:	d112      	bne.n	8009ba8 <HAL_RCC_OscConfig+0x540>
 8009b82:	4b92      	ldr	r3, [pc, #584]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b86:	4a91      	ldr	r2, [pc, #580]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009b88:	f043 0304 	orr.w	r3, r3, #4
 8009b8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8009b8e:	4b8f      	ldr	r3, [pc, #572]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b92:	4a8e      	ldr	r2, [pc, #568]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009b94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b98:	6713      	str	r3, [r2, #112]	@ 0x70
 8009b9a:	4b8c      	ldr	r3, [pc, #560]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b9e:	4a8b      	ldr	r2, [pc, #556]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009ba0:	f043 0301 	orr.w	r3, r3, #1
 8009ba4:	6713      	str	r3, [r2, #112]	@ 0x70
 8009ba6:	e028      	b.n	8009bfa <HAL_RCC_OscConfig+0x592>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	689b      	ldr	r3, [r3, #8]
 8009bac:	2b85      	cmp	r3, #133	@ 0x85
 8009bae:	d112      	bne.n	8009bd6 <HAL_RCC_OscConfig+0x56e>
 8009bb0:	4b86      	ldr	r3, [pc, #536]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bb4:	4a85      	ldr	r2, [pc, #532]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009bb6:	f043 0304 	orr.w	r3, r3, #4
 8009bba:	6713      	str	r3, [r2, #112]	@ 0x70
 8009bbc:	4b83      	ldr	r3, [pc, #524]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009bbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bc0:	4a82      	ldr	r2, [pc, #520]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009bc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8009bc8:	4b80      	ldr	r3, [pc, #512]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009bca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bcc:	4a7f      	ldr	r2, [pc, #508]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009bce:	f043 0301 	orr.w	r3, r3, #1
 8009bd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8009bd4:	e011      	b.n	8009bfa <HAL_RCC_OscConfig+0x592>
 8009bd6:	4b7d      	ldr	r3, [pc, #500]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bda:	4a7c      	ldr	r2, [pc, #496]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009bdc:	f023 0301 	bic.w	r3, r3, #1
 8009be0:	6713      	str	r3, [r2, #112]	@ 0x70
 8009be2:	4b7a      	ldr	r3, [pc, #488]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009be6:	4a79      	ldr	r2, [pc, #484]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009be8:	f023 0304 	bic.w	r3, r3, #4
 8009bec:	6713      	str	r3, [r2, #112]	@ 0x70
 8009bee:	4b77      	ldr	r3, [pc, #476]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009bf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bf2:	4a76      	ldr	r2, [pc, #472]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009bf4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009bf8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d015      	beq.n	8009c2e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c02:	f7fb fdf3 	bl	80057ec <HAL_GetTick>
 8009c06:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009c08:	e00a      	b.n	8009c20 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c0a:	f7fb fdef 	bl	80057ec <HAL_GetTick>
 8009c0e:	4602      	mov	r2, r0
 8009c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c12:	1ad3      	subs	r3, r2, r3
 8009c14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d901      	bls.n	8009c20 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8009c1c:	2303      	movs	r3, #3
 8009c1e:	e14c      	b.n	8009eba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009c20:	4b6a      	ldr	r3, [pc, #424]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c24:	f003 0302 	and.w	r3, r3, #2
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d0ee      	beq.n	8009c0a <HAL_RCC_OscConfig+0x5a2>
 8009c2c:	e014      	b.n	8009c58 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c2e:	f7fb fddd 	bl	80057ec <HAL_GetTick>
 8009c32:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009c34:	e00a      	b.n	8009c4c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c36:	f7fb fdd9 	bl	80057ec <HAL_GetTick>
 8009c3a:	4602      	mov	r2, r0
 8009c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c3e:	1ad3      	subs	r3, r2, r3
 8009c40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d901      	bls.n	8009c4c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8009c48:	2303      	movs	r3, #3
 8009c4a:	e136      	b.n	8009eba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009c4c:	4b5f      	ldr	r3, [pc, #380]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009c4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c50:	f003 0302 	and.w	r3, r3, #2
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d1ee      	bne.n	8009c36 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	f000 812b 	beq.w	8009eb8 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009c62:	4b5a      	ldr	r3, [pc, #360]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009c64:	691b      	ldr	r3, [r3, #16]
 8009c66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009c6a:	2b18      	cmp	r3, #24
 8009c6c:	f000 80bb 	beq.w	8009de6 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c74:	2b02      	cmp	r3, #2
 8009c76:	f040 8095 	bne.w	8009da4 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c7a:	4b54      	ldr	r3, [pc, #336]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a53      	ldr	r2, [pc, #332]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009c80:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009c84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c86:	f7fb fdb1 	bl	80057ec <HAL_GetTick>
 8009c8a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009c8c:	e008      	b.n	8009ca0 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c8e:	f7fb fdad 	bl	80057ec <HAL_GetTick>
 8009c92:	4602      	mov	r2, r0
 8009c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c96:	1ad3      	subs	r3, r2, r3
 8009c98:	2b02      	cmp	r3, #2
 8009c9a:	d901      	bls.n	8009ca0 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8009c9c:	2303      	movs	r3, #3
 8009c9e:	e10c      	b.n	8009eba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009ca0:	4b4a      	ldr	r3, [pc, #296]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d1f0      	bne.n	8009c8e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009cac:	4b47      	ldr	r3, [pc, #284]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009cae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009cb0:	4b47      	ldr	r3, [pc, #284]	@ (8009dd0 <HAL_RCC_OscConfig+0x768>)
 8009cb2:	4013      	ands	r3, r2
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009cbc:	0112      	lsls	r2, r2, #4
 8009cbe:	430a      	orrs	r2, r1
 8009cc0:	4942      	ldr	r1, [pc, #264]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	628b      	str	r3, [r1, #40]	@ 0x28
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cca:	3b01      	subs	r3, #1
 8009ccc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cd4:	3b01      	subs	r3, #1
 8009cd6:	025b      	lsls	r3, r3, #9
 8009cd8:	b29b      	uxth	r3, r3
 8009cda:	431a      	orrs	r2, r3
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ce0:	3b01      	subs	r3, #1
 8009ce2:	041b      	lsls	r3, r3, #16
 8009ce4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009ce8:	431a      	orrs	r2, r3
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cee:	3b01      	subs	r3, #1
 8009cf0:	061b      	lsls	r3, r3, #24
 8009cf2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009cf6:	4935      	ldr	r1, [pc, #212]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009cf8:	4313      	orrs	r3, r2
 8009cfa:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009cfc:	4b33      	ldr	r3, [pc, #204]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d00:	4a32      	ldr	r2, [pc, #200]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009d02:	f023 0301 	bic.w	r3, r3, #1
 8009d06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009d08:	4b30      	ldr	r3, [pc, #192]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009d0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d0c:	4b31      	ldr	r3, [pc, #196]	@ (8009dd4 <HAL_RCC_OscConfig+0x76c>)
 8009d0e:	4013      	ands	r3, r2
 8009d10:	687a      	ldr	r2, [r7, #4]
 8009d12:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009d14:	00d2      	lsls	r2, r2, #3
 8009d16:	492d      	ldr	r1, [pc, #180]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009d18:	4313      	orrs	r3, r2
 8009d1a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009d1c:	4b2b      	ldr	r3, [pc, #172]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d20:	f023 020c 	bic.w	r2, r3, #12
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d28:	4928      	ldr	r1, [pc, #160]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009d2e:	4b27      	ldr	r3, [pc, #156]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d32:	f023 0202 	bic.w	r2, r3, #2
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d3a:	4924      	ldr	r1, [pc, #144]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009d3c:	4313      	orrs	r3, r2
 8009d3e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009d40:	4b22      	ldr	r3, [pc, #136]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d44:	4a21      	ldr	r2, [pc, #132]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009d46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d4c:	4b1f      	ldr	r3, [pc, #124]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d50:	4a1e      	ldr	r2, [pc, #120]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009d52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009d58:	4b1c      	ldr	r3, [pc, #112]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d5c:	4a1b      	ldr	r2, [pc, #108]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009d5e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009d62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009d64:	4b19      	ldr	r3, [pc, #100]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d68:	4a18      	ldr	r2, [pc, #96]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009d6a:	f043 0301 	orr.w	r3, r3, #1
 8009d6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009d70:	4b16      	ldr	r3, [pc, #88]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a15      	ldr	r2, [pc, #84]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009d76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009d7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d7c:	f7fb fd36 	bl	80057ec <HAL_GetTick>
 8009d80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009d82:	e008      	b.n	8009d96 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d84:	f7fb fd32 	bl	80057ec <HAL_GetTick>
 8009d88:	4602      	mov	r2, r0
 8009d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d8c:	1ad3      	subs	r3, r2, r3
 8009d8e:	2b02      	cmp	r3, #2
 8009d90:	d901      	bls.n	8009d96 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8009d92:	2303      	movs	r3, #3
 8009d94:	e091      	b.n	8009eba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009d96:	4b0d      	ldr	r3, [pc, #52]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d0f0      	beq.n	8009d84 <HAL_RCC_OscConfig+0x71c>
 8009da2:	e089      	b.n	8009eb8 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009da4:	4b09      	ldr	r3, [pc, #36]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	4a08      	ldr	r2, [pc, #32]	@ (8009dcc <HAL_RCC_OscConfig+0x764>)
 8009daa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009dae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009db0:	f7fb fd1c 	bl	80057ec <HAL_GetTick>
 8009db4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009db6:	e00f      	b.n	8009dd8 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009db8:	f7fb fd18 	bl	80057ec <HAL_GetTick>
 8009dbc:	4602      	mov	r2, r0
 8009dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dc0:	1ad3      	subs	r3, r2, r3
 8009dc2:	2b02      	cmp	r3, #2
 8009dc4:	d908      	bls.n	8009dd8 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8009dc6:	2303      	movs	r3, #3
 8009dc8:	e077      	b.n	8009eba <HAL_RCC_OscConfig+0x852>
 8009dca:	bf00      	nop
 8009dcc:	58024400 	.word	0x58024400
 8009dd0:	fffffc0c 	.word	0xfffffc0c
 8009dd4:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009dd8:	4b3a      	ldr	r3, [pc, #232]	@ (8009ec4 <HAL_RCC_OscConfig+0x85c>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d1e9      	bne.n	8009db8 <HAL_RCC_OscConfig+0x750>
 8009de4:	e068      	b.n	8009eb8 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009de6:	4b37      	ldr	r3, [pc, #220]	@ (8009ec4 <HAL_RCC_OscConfig+0x85c>)
 8009de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dea:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009dec:	4b35      	ldr	r3, [pc, #212]	@ (8009ec4 <HAL_RCC_OscConfig+0x85c>)
 8009dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009df0:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d031      	beq.n	8009e5e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	f003 0203 	and.w	r2, r3, #3
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d12a      	bne.n	8009e5e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	091b      	lsrs	r3, r3, #4
 8009e0c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d122      	bne.n	8009e5e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e22:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009e24:	429a      	cmp	r2, r3
 8009e26:	d11a      	bne.n	8009e5e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	0a5b      	lsrs	r3, r3, #9
 8009e2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e34:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d111      	bne.n	8009e5e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	0c1b      	lsrs	r3, r3, #16
 8009e3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e46:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d108      	bne.n	8009e5e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	0e1b      	lsrs	r3, r3, #24
 8009e50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e58:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	d001      	beq.n	8009e62 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	e02b      	b.n	8009eba <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009e62:	4b18      	ldr	r3, [pc, #96]	@ (8009ec4 <HAL_RCC_OscConfig+0x85c>)
 8009e64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e66:	08db      	lsrs	r3, r3, #3
 8009e68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009e6c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e72:	693a      	ldr	r2, [r7, #16]
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d01f      	beq.n	8009eb8 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009e78:	4b12      	ldr	r3, [pc, #72]	@ (8009ec4 <HAL_RCC_OscConfig+0x85c>)
 8009e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e7c:	4a11      	ldr	r2, [pc, #68]	@ (8009ec4 <HAL_RCC_OscConfig+0x85c>)
 8009e7e:	f023 0301 	bic.w	r3, r3, #1
 8009e82:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009e84:	f7fb fcb2 	bl	80057ec <HAL_GetTick>
 8009e88:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009e8a:	bf00      	nop
 8009e8c:	f7fb fcae 	bl	80057ec <HAL_GetTick>
 8009e90:	4602      	mov	r2, r0
 8009e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d0f9      	beq.n	8009e8c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009e98:	4b0a      	ldr	r3, [pc, #40]	@ (8009ec4 <HAL_RCC_OscConfig+0x85c>)
 8009e9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8009ec8 <HAL_RCC_OscConfig+0x860>)
 8009e9e:	4013      	ands	r3, r2
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009ea4:	00d2      	lsls	r2, r2, #3
 8009ea6:	4907      	ldr	r1, [pc, #28]	@ (8009ec4 <HAL_RCC_OscConfig+0x85c>)
 8009ea8:	4313      	orrs	r3, r2
 8009eaa:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009eac:	4b05      	ldr	r3, [pc, #20]	@ (8009ec4 <HAL_RCC_OscConfig+0x85c>)
 8009eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eb0:	4a04      	ldr	r2, [pc, #16]	@ (8009ec4 <HAL_RCC_OscConfig+0x85c>)
 8009eb2:	f043 0301 	orr.w	r3, r3, #1
 8009eb6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009eb8:	2300      	movs	r3, #0
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3730      	adds	r7, #48	@ 0x30
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
 8009ec2:	bf00      	nop
 8009ec4:	58024400 	.word	0x58024400
 8009ec8:	ffff0007 	.word	0xffff0007

08009ecc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b086      	sub	sp, #24
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d101      	bne.n	8009ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009edc:	2301      	movs	r3, #1
 8009ede:	e19c      	b.n	800a21a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009ee0:	4b8a      	ldr	r3, [pc, #552]	@ (800a10c <HAL_RCC_ClockConfig+0x240>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f003 030f 	and.w	r3, r3, #15
 8009ee8:	683a      	ldr	r2, [r7, #0]
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d910      	bls.n	8009f10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009eee:	4b87      	ldr	r3, [pc, #540]	@ (800a10c <HAL_RCC_ClockConfig+0x240>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f023 020f 	bic.w	r2, r3, #15
 8009ef6:	4985      	ldr	r1, [pc, #532]	@ (800a10c <HAL_RCC_ClockConfig+0x240>)
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	4313      	orrs	r3, r2
 8009efc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009efe:	4b83      	ldr	r3, [pc, #524]	@ (800a10c <HAL_RCC_ClockConfig+0x240>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f003 030f 	and.w	r3, r3, #15
 8009f06:	683a      	ldr	r2, [r7, #0]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d001      	beq.n	8009f10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	e184      	b.n	800a21a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f003 0304 	and.w	r3, r3, #4
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d010      	beq.n	8009f3e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	691a      	ldr	r2, [r3, #16]
 8009f20:	4b7b      	ldr	r3, [pc, #492]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 8009f22:	699b      	ldr	r3, [r3, #24]
 8009f24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d908      	bls.n	8009f3e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009f2c:	4b78      	ldr	r3, [pc, #480]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 8009f2e:	699b      	ldr	r3, [r3, #24]
 8009f30:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	691b      	ldr	r3, [r3, #16]
 8009f38:	4975      	ldr	r1, [pc, #468]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f003 0308 	and.w	r3, r3, #8
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d010      	beq.n	8009f6c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	695a      	ldr	r2, [r3, #20]
 8009f4e:	4b70      	ldr	r3, [pc, #448]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 8009f50:	69db      	ldr	r3, [r3, #28]
 8009f52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009f56:	429a      	cmp	r2, r3
 8009f58:	d908      	bls.n	8009f6c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009f5a:	4b6d      	ldr	r3, [pc, #436]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 8009f5c:	69db      	ldr	r3, [r3, #28]
 8009f5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	695b      	ldr	r3, [r3, #20]
 8009f66:	496a      	ldr	r1, [pc, #424]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f003 0310 	and.w	r3, r3, #16
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d010      	beq.n	8009f9a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	699a      	ldr	r2, [r3, #24]
 8009f7c:	4b64      	ldr	r3, [pc, #400]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 8009f7e:	69db      	ldr	r3, [r3, #28]
 8009f80:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d908      	bls.n	8009f9a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009f88:	4b61      	ldr	r3, [pc, #388]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 8009f8a:	69db      	ldr	r3, [r3, #28]
 8009f8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	699b      	ldr	r3, [r3, #24]
 8009f94:	495e      	ldr	r1, [pc, #376]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 8009f96:	4313      	orrs	r3, r2
 8009f98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f003 0320 	and.w	r3, r3, #32
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d010      	beq.n	8009fc8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	69da      	ldr	r2, [r3, #28]
 8009faa:	4b59      	ldr	r3, [pc, #356]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 8009fac:	6a1b      	ldr	r3, [r3, #32]
 8009fae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d908      	bls.n	8009fc8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009fb6:	4b56      	ldr	r3, [pc, #344]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 8009fb8:	6a1b      	ldr	r3, [r3, #32]
 8009fba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	69db      	ldr	r3, [r3, #28]
 8009fc2:	4953      	ldr	r1, [pc, #332]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f003 0302 	and.w	r3, r3, #2
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d010      	beq.n	8009ff6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	68da      	ldr	r2, [r3, #12]
 8009fd8:	4b4d      	ldr	r3, [pc, #308]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 8009fda:	699b      	ldr	r3, [r3, #24]
 8009fdc:	f003 030f 	and.w	r3, r3, #15
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d908      	bls.n	8009ff6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009fe4:	4b4a      	ldr	r3, [pc, #296]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 8009fe6:	699b      	ldr	r3, [r3, #24]
 8009fe8:	f023 020f 	bic.w	r2, r3, #15
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	68db      	ldr	r3, [r3, #12]
 8009ff0:	4947      	ldr	r1, [pc, #284]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f003 0301 	and.w	r3, r3, #1
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d055      	beq.n	800a0ae <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a002:	4b43      	ldr	r3, [pc, #268]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 800a004:	699b      	ldr	r3, [r3, #24]
 800a006:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	689b      	ldr	r3, [r3, #8]
 800a00e:	4940      	ldr	r1, [pc, #256]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 800a010:	4313      	orrs	r3, r2
 800a012:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	2b02      	cmp	r3, #2
 800a01a:	d107      	bne.n	800a02c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a01c:	4b3c      	ldr	r3, [pc, #240]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a024:	2b00      	cmp	r3, #0
 800a026:	d121      	bne.n	800a06c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a028:	2301      	movs	r3, #1
 800a02a:	e0f6      	b.n	800a21a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	685b      	ldr	r3, [r3, #4]
 800a030:	2b03      	cmp	r3, #3
 800a032:	d107      	bne.n	800a044 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a034:	4b36      	ldr	r3, [pc, #216]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d115      	bne.n	800a06c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a040:	2301      	movs	r3, #1
 800a042:	e0ea      	b.n	800a21a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d107      	bne.n	800a05c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a04c:	4b30      	ldr	r3, [pc, #192]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a054:	2b00      	cmp	r3, #0
 800a056:	d109      	bne.n	800a06c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a058:	2301      	movs	r3, #1
 800a05a:	e0de      	b.n	800a21a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a05c:	4b2c      	ldr	r3, [pc, #176]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f003 0304 	and.w	r3, r3, #4
 800a064:	2b00      	cmp	r3, #0
 800a066:	d101      	bne.n	800a06c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a068:	2301      	movs	r3, #1
 800a06a:	e0d6      	b.n	800a21a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a06c:	4b28      	ldr	r3, [pc, #160]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 800a06e:	691b      	ldr	r3, [r3, #16]
 800a070:	f023 0207 	bic.w	r2, r3, #7
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	4925      	ldr	r1, [pc, #148]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 800a07a:	4313      	orrs	r3, r2
 800a07c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a07e:	f7fb fbb5 	bl	80057ec <HAL_GetTick>
 800a082:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a084:	e00a      	b.n	800a09c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a086:	f7fb fbb1 	bl	80057ec <HAL_GetTick>
 800a08a:	4602      	mov	r2, r0
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	1ad3      	subs	r3, r2, r3
 800a090:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a094:	4293      	cmp	r3, r2
 800a096:	d901      	bls.n	800a09c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a098:	2303      	movs	r3, #3
 800a09a:	e0be      	b.n	800a21a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a09c:	4b1c      	ldr	r3, [pc, #112]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 800a09e:	691b      	ldr	r3, [r3, #16]
 800a0a0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	685b      	ldr	r3, [r3, #4]
 800a0a8:	00db      	lsls	r3, r3, #3
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d1eb      	bne.n	800a086 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f003 0302 	and.w	r3, r3, #2
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d010      	beq.n	800a0dc <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	68da      	ldr	r2, [r3, #12]
 800a0be:	4b14      	ldr	r3, [pc, #80]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 800a0c0:	699b      	ldr	r3, [r3, #24]
 800a0c2:	f003 030f 	and.w	r3, r3, #15
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d208      	bcs.n	800a0dc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a0ca:	4b11      	ldr	r3, [pc, #68]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 800a0cc:	699b      	ldr	r3, [r3, #24]
 800a0ce:	f023 020f 	bic.w	r2, r3, #15
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	68db      	ldr	r3, [r3, #12]
 800a0d6:	490e      	ldr	r1, [pc, #56]	@ (800a110 <HAL_RCC_ClockConfig+0x244>)
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a0dc:	4b0b      	ldr	r3, [pc, #44]	@ (800a10c <HAL_RCC_ClockConfig+0x240>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f003 030f 	and.w	r3, r3, #15
 800a0e4:	683a      	ldr	r2, [r7, #0]
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d214      	bcs.n	800a114 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a0ea:	4b08      	ldr	r3, [pc, #32]	@ (800a10c <HAL_RCC_ClockConfig+0x240>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f023 020f 	bic.w	r2, r3, #15
 800a0f2:	4906      	ldr	r1, [pc, #24]	@ (800a10c <HAL_RCC_ClockConfig+0x240>)
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a0fa:	4b04      	ldr	r3, [pc, #16]	@ (800a10c <HAL_RCC_ClockConfig+0x240>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f003 030f 	and.w	r3, r3, #15
 800a102:	683a      	ldr	r2, [r7, #0]
 800a104:	429a      	cmp	r2, r3
 800a106:	d005      	beq.n	800a114 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a108:	2301      	movs	r3, #1
 800a10a:	e086      	b.n	800a21a <HAL_RCC_ClockConfig+0x34e>
 800a10c:	52002000 	.word	0x52002000
 800a110:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f003 0304 	and.w	r3, r3, #4
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d010      	beq.n	800a142 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	691a      	ldr	r2, [r3, #16]
 800a124:	4b3f      	ldr	r3, [pc, #252]	@ (800a224 <HAL_RCC_ClockConfig+0x358>)
 800a126:	699b      	ldr	r3, [r3, #24]
 800a128:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a12c:	429a      	cmp	r2, r3
 800a12e:	d208      	bcs.n	800a142 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a130:	4b3c      	ldr	r3, [pc, #240]	@ (800a224 <HAL_RCC_ClockConfig+0x358>)
 800a132:	699b      	ldr	r3, [r3, #24]
 800a134:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	691b      	ldr	r3, [r3, #16]
 800a13c:	4939      	ldr	r1, [pc, #228]	@ (800a224 <HAL_RCC_ClockConfig+0x358>)
 800a13e:	4313      	orrs	r3, r2
 800a140:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f003 0308 	and.w	r3, r3, #8
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d010      	beq.n	800a170 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	695a      	ldr	r2, [r3, #20]
 800a152:	4b34      	ldr	r3, [pc, #208]	@ (800a224 <HAL_RCC_ClockConfig+0x358>)
 800a154:	69db      	ldr	r3, [r3, #28]
 800a156:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d208      	bcs.n	800a170 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a15e:	4b31      	ldr	r3, [pc, #196]	@ (800a224 <HAL_RCC_ClockConfig+0x358>)
 800a160:	69db      	ldr	r3, [r3, #28]
 800a162:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	695b      	ldr	r3, [r3, #20]
 800a16a:	492e      	ldr	r1, [pc, #184]	@ (800a224 <HAL_RCC_ClockConfig+0x358>)
 800a16c:	4313      	orrs	r3, r2
 800a16e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f003 0310 	and.w	r3, r3, #16
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d010      	beq.n	800a19e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	699a      	ldr	r2, [r3, #24]
 800a180:	4b28      	ldr	r3, [pc, #160]	@ (800a224 <HAL_RCC_ClockConfig+0x358>)
 800a182:	69db      	ldr	r3, [r3, #28]
 800a184:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a188:	429a      	cmp	r2, r3
 800a18a:	d208      	bcs.n	800a19e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a18c:	4b25      	ldr	r3, [pc, #148]	@ (800a224 <HAL_RCC_ClockConfig+0x358>)
 800a18e:	69db      	ldr	r3, [r3, #28]
 800a190:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	699b      	ldr	r3, [r3, #24]
 800a198:	4922      	ldr	r1, [pc, #136]	@ (800a224 <HAL_RCC_ClockConfig+0x358>)
 800a19a:	4313      	orrs	r3, r2
 800a19c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f003 0320 	and.w	r3, r3, #32
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d010      	beq.n	800a1cc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	69da      	ldr	r2, [r3, #28]
 800a1ae:	4b1d      	ldr	r3, [pc, #116]	@ (800a224 <HAL_RCC_ClockConfig+0x358>)
 800a1b0:	6a1b      	ldr	r3, [r3, #32]
 800a1b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	d208      	bcs.n	800a1cc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a1ba:	4b1a      	ldr	r3, [pc, #104]	@ (800a224 <HAL_RCC_ClockConfig+0x358>)
 800a1bc:	6a1b      	ldr	r3, [r3, #32]
 800a1be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	69db      	ldr	r3, [r3, #28]
 800a1c6:	4917      	ldr	r1, [pc, #92]	@ (800a224 <HAL_RCC_ClockConfig+0x358>)
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800a1cc:	f000 f834 	bl	800a238 <HAL_RCC_GetSysClockFreq>
 800a1d0:	4602      	mov	r2, r0
 800a1d2:	4b14      	ldr	r3, [pc, #80]	@ (800a224 <HAL_RCC_ClockConfig+0x358>)
 800a1d4:	699b      	ldr	r3, [r3, #24]
 800a1d6:	0a1b      	lsrs	r3, r3, #8
 800a1d8:	f003 030f 	and.w	r3, r3, #15
 800a1dc:	4912      	ldr	r1, [pc, #72]	@ (800a228 <HAL_RCC_ClockConfig+0x35c>)
 800a1de:	5ccb      	ldrb	r3, [r1, r3]
 800a1e0:	f003 031f 	and.w	r3, r3, #31
 800a1e4:	fa22 f303 	lsr.w	r3, r2, r3
 800a1e8:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800a1ea:	4b0e      	ldr	r3, [pc, #56]	@ (800a224 <HAL_RCC_ClockConfig+0x358>)
 800a1ec:	699b      	ldr	r3, [r3, #24]
 800a1ee:	f003 030f 	and.w	r3, r3, #15
 800a1f2:	4a0d      	ldr	r2, [pc, #52]	@ (800a228 <HAL_RCC_ClockConfig+0x35c>)
 800a1f4:	5cd3      	ldrb	r3, [r2, r3]
 800a1f6:	f003 031f 	and.w	r3, r3, #31
 800a1fa:	693a      	ldr	r2, [r7, #16]
 800a1fc:	fa22 f303 	lsr.w	r3, r2, r3
 800a200:	4a0a      	ldr	r2, [pc, #40]	@ (800a22c <HAL_RCC_ClockConfig+0x360>)
 800a202:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a204:	4a0a      	ldr	r2, [pc, #40]	@ (800a230 <HAL_RCC_ClockConfig+0x364>)
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a20a:	4b0a      	ldr	r3, [pc, #40]	@ (800a234 <HAL_RCC_ClockConfig+0x368>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	4618      	mov	r0, r3
 800a210:	f7fb faa2 	bl	8005758 <HAL_InitTick>
 800a214:	4603      	mov	r3, r0
 800a216:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a218:	7bfb      	ldrb	r3, [r7, #15]
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3718      	adds	r7, #24
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}
 800a222:	bf00      	nop
 800a224:	58024400 	.word	0x58024400
 800a228:	08019b40 	.word	0x08019b40
 800a22c:	240000c4 	.word	0x240000c4
 800a230:	240000c0 	.word	0x240000c0
 800a234:	240000c8 	.word	0x240000c8

0800a238 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a238:	b480      	push	{r7}
 800a23a:	b089      	sub	sp, #36	@ 0x24
 800a23c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a23e:	4bb3      	ldr	r3, [pc, #716]	@ (800a50c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a240:	691b      	ldr	r3, [r3, #16]
 800a242:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a246:	2b18      	cmp	r3, #24
 800a248:	f200 8155 	bhi.w	800a4f6 <HAL_RCC_GetSysClockFreq+0x2be>
 800a24c:	a201      	add	r2, pc, #4	@ (adr r2, 800a254 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a24e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a252:	bf00      	nop
 800a254:	0800a2b9 	.word	0x0800a2b9
 800a258:	0800a4f7 	.word	0x0800a4f7
 800a25c:	0800a4f7 	.word	0x0800a4f7
 800a260:	0800a4f7 	.word	0x0800a4f7
 800a264:	0800a4f7 	.word	0x0800a4f7
 800a268:	0800a4f7 	.word	0x0800a4f7
 800a26c:	0800a4f7 	.word	0x0800a4f7
 800a270:	0800a4f7 	.word	0x0800a4f7
 800a274:	0800a2df 	.word	0x0800a2df
 800a278:	0800a4f7 	.word	0x0800a4f7
 800a27c:	0800a4f7 	.word	0x0800a4f7
 800a280:	0800a4f7 	.word	0x0800a4f7
 800a284:	0800a4f7 	.word	0x0800a4f7
 800a288:	0800a4f7 	.word	0x0800a4f7
 800a28c:	0800a4f7 	.word	0x0800a4f7
 800a290:	0800a4f7 	.word	0x0800a4f7
 800a294:	0800a2e5 	.word	0x0800a2e5
 800a298:	0800a4f7 	.word	0x0800a4f7
 800a29c:	0800a4f7 	.word	0x0800a4f7
 800a2a0:	0800a4f7 	.word	0x0800a4f7
 800a2a4:	0800a4f7 	.word	0x0800a4f7
 800a2a8:	0800a4f7 	.word	0x0800a4f7
 800a2ac:	0800a4f7 	.word	0x0800a4f7
 800a2b0:	0800a4f7 	.word	0x0800a4f7
 800a2b4:	0800a2eb 	.word	0x0800a2eb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2b8:	4b94      	ldr	r3, [pc, #592]	@ (800a50c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f003 0320 	and.w	r3, r3, #32
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d009      	beq.n	800a2d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a2c4:	4b91      	ldr	r3, [pc, #580]	@ (800a50c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	08db      	lsrs	r3, r3, #3
 800a2ca:	f003 0303 	and.w	r3, r3, #3
 800a2ce:	4a90      	ldr	r2, [pc, #576]	@ (800a510 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a2d0:	fa22 f303 	lsr.w	r3, r2, r3
 800a2d4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a2d6:	e111      	b.n	800a4fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a2d8:	4b8d      	ldr	r3, [pc, #564]	@ (800a510 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a2da:	61bb      	str	r3, [r7, #24]
      break;
 800a2dc:	e10e      	b.n	800a4fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a2de:	4b8d      	ldr	r3, [pc, #564]	@ (800a514 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a2e0:	61bb      	str	r3, [r7, #24]
      break;
 800a2e2:	e10b      	b.n	800a4fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a2e4:	4b8c      	ldr	r3, [pc, #560]	@ (800a518 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a2e6:	61bb      	str	r3, [r7, #24]
      break;
 800a2e8:	e108      	b.n	800a4fc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a2ea:	4b88      	ldr	r3, [pc, #544]	@ (800a50c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2ee:	f003 0303 	and.w	r3, r3, #3
 800a2f2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a2f4:	4b85      	ldr	r3, [pc, #532]	@ (800a50c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2f8:	091b      	lsrs	r3, r3, #4
 800a2fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a2fe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a300:	4b82      	ldr	r3, [pc, #520]	@ (800a50c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a304:	f003 0301 	and.w	r3, r3, #1
 800a308:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a30a:	4b80      	ldr	r3, [pc, #512]	@ (800a50c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a30c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a30e:	08db      	lsrs	r3, r3, #3
 800a310:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a314:	68fa      	ldr	r2, [r7, #12]
 800a316:	fb02 f303 	mul.w	r3, r2, r3
 800a31a:	ee07 3a90 	vmov	s15, r3
 800a31e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a322:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	f000 80e1 	beq.w	800a4f0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	2b02      	cmp	r3, #2
 800a332:	f000 8083 	beq.w	800a43c <HAL_RCC_GetSysClockFreq+0x204>
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	2b02      	cmp	r3, #2
 800a33a:	f200 80a1 	bhi.w	800a480 <HAL_RCC_GetSysClockFreq+0x248>
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d003      	beq.n	800a34c <HAL_RCC_GetSysClockFreq+0x114>
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	2b01      	cmp	r3, #1
 800a348:	d056      	beq.n	800a3f8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a34a:	e099      	b.n	800a480 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a34c:	4b6f      	ldr	r3, [pc, #444]	@ (800a50c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f003 0320 	and.w	r3, r3, #32
 800a354:	2b00      	cmp	r3, #0
 800a356:	d02d      	beq.n	800a3b4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a358:	4b6c      	ldr	r3, [pc, #432]	@ (800a50c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	08db      	lsrs	r3, r3, #3
 800a35e:	f003 0303 	and.w	r3, r3, #3
 800a362:	4a6b      	ldr	r2, [pc, #428]	@ (800a510 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a364:	fa22 f303 	lsr.w	r3, r2, r3
 800a368:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	ee07 3a90 	vmov	s15, r3
 800a370:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	ee07 3a90 	vmov	s15, r3
 800a37a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a37e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a382:	4b62      	ldr	r3, [pc, #392]	@ (800a50c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a38a:	ee07 3a90 	vmov	s15, r3
 800a38e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a392:	ed97 6a02 	vldr	s12, [r7, #8]
 800a396:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800a51c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a39a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a39e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a3a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3ae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a3b2:	e087      	b.n	800a4c4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	ee07 3a90 	vmov	s15, r3
 800a3ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3be:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800a520 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a3c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3c6:	4b51      	ldr	r3, [pc, #324]	@ (800a50c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a3c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3ce:	ee07 3a90 	vmov	s15, r3
 800a3d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3d6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a3da:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800a51c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a3de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a3ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a3f6:	e065      	b.n	800a4c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	ee07 3a90 	vmov	s15, r3
 800a3fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a402:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800a524 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a40a:	4b40      	ldr	r3, [pc, #256]	@ (800a50c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a40c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a40e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a412:	ee07 3a90 	vmov	s15, r3
 800a416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a41a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a41e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800a51c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a42a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a42e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a432:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a436:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a43a:	e043      	b.n	800a4c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	ee07 3a90 	vmov	s15, r3
 800a442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a446:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800a528 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a44a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a44e:	4b2f      	ldr	r3, [pc, #188]	@ (800a50c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a456:	ee07 3a90 	vmov	s15, r3
 800a45a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a45e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a462:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800a51c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a46a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a46e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a47a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a47e:	e021      	b.n	800a4c4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	ee07 3a90 	vmov	s15, r3
 800a486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a48a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800a524 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a48e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a492:	4b1e      	ldr	r3, [pc, #120]	@ (800a50c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a49a:	ee07 3a90 	vmov	s15, r3
 800a49e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4a2:	ed97 6a02 	vldr	s12, [r7, #8]
 800a4a6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800a51c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a4aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a4b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a4c2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a4c4:	4b11      	ldr	r3, [pc, #68]	@ (800a50c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4c8:	0a5b      	lsrs	r3, r3, #9
 800a4ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a4ce:	3301      	adds	r3, #1
 800a4d0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	ee07 3a90 	vmov	s15, r3
 800a4d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a4dc:	edd7 6a07 	vldr	s13, [r7, #28]
 800a4e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4e8:	ee17 3a90 	vmov	r3, s15
 800a4ec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a4ee:	e005      	b.n	800a4fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	61bb      	str	r3, [r7, #24]
      break;
 800a4f4:	e002      	b.n	800a4fc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a4f6:	4b07      	ldr	r3, [pc, #28]	@ (800a514 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a4f8:	61bb      	str	r3, [r7, #24]
      break;
 800a4fa:	bf00      	nop
  }

  return sysclockfreq;
 800a4fc:	69bb      	ldr	r3, [r7, #24]
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3724      	adds	r7, #36	@ 0x24
 800a502:	46bd      	mov	sp, r7
 800a504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a508:	4770      	bx	lr
 800a50a:	bf00      	nop
 800a50c:	58024400 	.word	0x58024400
 800a510:	03d09000 	.word	0x03d09000
 800a514:	003d0900 	.word	0x003d0900
 800a518:	016e3600 	.word	0x016e3600
 800a51c:	46000000 	.word	0x46000000
 800a520:	4c742400 	.word	0x4c742400
 800a524:	4a742400 	.word	0x4a742400
 800a528:	4bb71b00 	.word	0x4bb71b00

0800a52c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b082      	sub	sp, #8
 800a530:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800a532:	f7ff fe81 	bl	800a238 <HAL_RCC_GetSysClockFreq>
 800a536:	4602      	mov	r2, r0
 800a538:	4b10      	ldr	r3, [pc, #64]	@ (800a57c <HAL_RCC_GetHCLKFreq+0x50>)
 800a53a:	699b      	ldr	r3, [r3, #24]
 800a53c:	0a1b      	lsrs	r3, r3, #8
 800a53e:	f003 030f 	and.w	r3, r3, #15
 800a542:	490f      	ldr	r1, [pc, #60]	@ (800a580 <HAL_RCC_GetHCLKFreq+0x54>)
 800a544:	5ccb      	ldrb	r3, [r1, r3]
 800a546:	f003 031f 	and.w	r3, r3, #31
 800a54a:	fa22 f303 	lsr.w	r3, r2, r3
 800a54e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800a550:	4b0a      	ldr	r3, [pc, #40]	@ (800a57c <HAL_RCC_GetHCLKFreq+0x50>)
 800a552:	699b      	ldr	r3, [r3, #24]
 800a554:	f003 030f 	and.w	r3, r3, #15
 800a558:	4a09      	ldr	r2, [pc, #36]	@ (800a580 <HAL_RCC_GetHCLKFreq+0x54>)
 800a55a:	5cd3      	ldrb	r3, [r2, r3]
 800a55c:	f003 031f 	and.w	r3, r3, #31
 800a560:	687a      	ldr	r2, [r7, #4]
 800a562:	fa22 f303 	lsr.w	r3, r2, r3
 800a566:	4a07      	ldr	r2, [pc, #28]	@ (800a584 <HAL_RCC_GetHCLKFreq+0x58>)
 800a568:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a56a:	4a07      	ldr	r2, [pc, #28]	@ (800a588 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a570:	4b04      	ldr	r3, [pc, #16]	@ (800a584 <HAL_RCC_GetHCLKFreq+0x58>)
 800a572:	681b      	ldr	r3, [r3, #0]
}
 800a574:	4618      	mov	r0, r3
 800a576:	3708      	adds	r7, #8
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}
 800a57c:	58024400 	.word	0x58024400
 800a580:	08019b40 	.word	0x08019b40
 800a584:	240000c4 	.word	0x240000c4
 800a588:	240000c0 	.word	0x240000c0

0800a58c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800a590:	f7ff ffcc 	bl	800a52c <HAL_RCC_GetHCLKFreq>
 800a594:	4602      	mov	r2, r0
 800a596:	4b06      	ldr	r3, [pc, #24]	@ (800a5b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a598:	69db      	ldr	r3, [r3, #28]
 800a59a:	091b      	lsrs	r3, r3, #4
 800a59c:	f003 0307 	and.w	r3, r3, #7
 800a5a0:	4904      	ldr	r1, [pc, #16]	@ (800a5b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a5a2:	5ccb      	ldrb	r3, [r1, r3]
 800a5a4:	f003 031f 	and.w	r3, r3, #31
 800a5a8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	bd80      	pop	{r7, pc}
 800a5b0:	58024400 	.word	0x58024400
 800a5b4:	08019b40 	.word	0x08019b40

0800a5b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800a5bc:	f7ff ffb6 	bl	800a52c <HAL_RCC_GetHCLKFreq>
 800a5c0:	4602      	mov	r2, r0
 800a5c2:	4b06      	ldr	r3, [pc, #24]	@ (800a5dc <HAL_RCC_GetPCLK2Freq+0x24>)
 800a5c4:	69db      	ldr	r3, [r3, #28]
 800a5c6:	0a1b      	lsrs	r3, r3, #8
 800a5c8:	f003 0307 	and.w	r3, r3, #7
 800a5cc:	4904      	ldr	r1, [pc, #16]	@ (800a5e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a5ce:	5ccb      	ldrb	r3, [r1, r3]
 800a5d0:	f003 031f 	and.w	r3, r3, #31
 800a5d4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	bd80      	pop	{r7, pc}
 800a5dc:	58024400 	.word	0x58024400
 800a5e0:	08019b40 	.word	0x08019b40

0800a5e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a5e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a5e8:	b0c8      	sub	sp, #288	@ 0x120
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a5fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a604:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800a608:	2500      	movs	r5, #0
 800a60a:	ea54 0305 	orrs.w	r3, r4, r5
 800a60e:	d049      	beq.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a610:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a614:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a616:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a61a:	d02f      	beq.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a61c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a620:	d828      	bhi.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a622:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a626:	d01a      	beq.n	800a65e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a628:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a62c:	d822      	bhi.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d003      	beq.n	800a63a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a632:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a636:	d007      	beq.n	800a648 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a638:	e01c      	b.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a63a:	4ba7      	ldr	r3, [pc, #668]	@ (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a63c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a63e:	4aa6      	ldr	r2, [pc, #664]	@ (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a640:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a644:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a646:	e01a      	b.n	800a67e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a648:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a64c:	3308      	adds	r3, #8
 800a64e:	2102      	movs	r1, #2
 800a650:	4618      	mov	r0, r3
 800a652:	f001 fc43 	bl	800bedc <RCCEx_PLL2_Config>
 800a656:	4603      	mov	r3, r0
 800a658:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a65c:	e00f      	b.n	800a67e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a65e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a662:	3328      	adds	r3, #40	@ 0x28
 800a664:	2102      	movs	r1, #2
 800a666:	4618      	mov	r0, r3
 800a668:	f001 fcea 	bl	800c040 <RCCEx_PLL3_Config>
 800a66c:	4603      	mov	r3, r0
 800a66e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a672:	e004      	b.n	800a67e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a674:	2301      	movs	r3, #1
 800a676:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a67a:	e000      	b.n	800a67e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a67c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a67e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a682:	2b00      	cmp	r3, #0
 800a684:	d10a      	bne.n	800a69c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a686:	4b94      	ldr	r3, [pc, #592]	@ (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a688:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a68a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a68e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a692:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a694:	4a90      	ldr	r2, [pc, #576]	@ (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a696:	430b      	orrs	r3, r1
 800a698:	6513      	str	r3, [r2, #80]	@ 0x50
 800a69a:	e003      	b.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a69c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a6a0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a6a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ac:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800a6b0:	f04f 0900 	mov.w	r9, #0
 800a6b4:	ea58 0309 	orrs.w	r3, r8, r9
 800a6b8:	d047      	beq.n	800a74a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a6ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6c0:	2b04      	cmp	r3, #4
 800a6c2:	d82a      	bhi.n	800a71a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a6c4:	a201      	add	r2, pc, #4	@ (adr r2, 800a6cc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a6c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ca:	bf00      	nop
 800a6cc:	0800a6e1 	.word	0x0800a6e1
 800a6d0:	0800a6ef 	.word	0x0800a6ef
 800a6d4:	0800a705 	.word	0x0800a705
 800a6d8:	0800a723 	.word	0x0800a723
 800a6dc:	0800a723 	.word	0x0800a723
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6e0:	4b7d      	ldr	r3, [pc, #500]	@ (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a6e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6e4:	4a7c      	ldr	r2, [pc, #496]	@ (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a6e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a6ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a6ec:	e01a      	b.n	800a724 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a6ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6f2:	3308      	adds	r3, #8
 800a6f4:	2100      	movs	r1, #0
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f001 fbf0 	bl	800bedc <RCCEx_PLL2_Config>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a702:	e00f      	b.n	800a724 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a704:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a708:	3328      	adds	r3, #40	@ 0x28
 800a70a:	2100      	movs	r1, #0
 800a70c:	4618      	mov	r0, r3
 800a70e:	f001 fc97 	bl	800c040 <RCCEx_PLL3_Config>
 800a712:	4603      	mov	r3, r0
 800a714:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a718:	e004      	b.n	800a724 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a71a:	2301      	movs	r3, #1
 800a71c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a720:	e000      	b.n	800a724 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a722:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a724:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d10a      	bne.n	800a742 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a72c:	4b6a      	ldr	r3, [pc, #424]	@ (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a72e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a730:	f023 0107 	bic.w	r1, r3, #7
 800a734:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a73a:	4a67      	ldr	r2, [pc, #412]	@ (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a73c:	430b      	orrs	r3, r1
 800a73e:	6513      	str	r3, [r2, #80]	@ 0x50
 800a740:	e003      	b.n	800a74a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a742:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a746:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800a74a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a752:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800a756:	f04f 0b00 	mov.w	fp, #0
 800a75a:	ea5a 030b 	orrs.w	r3, sl, fp
 800a75e:	d054      	beq.n	800a80a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800a760:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a764:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a766:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800a76a:	d036      	beq.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800a76c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800a770:	d82f      	bhi.n	800a7d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a772:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a776:	d032      	beq.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a778:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a77c:	d829      	bhi.n	800a7d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a77e:	2bc0      	cmp	r3, #192	@ 0xc0
 800a780:	d02f      	beq.n	800a7e2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800a782:	2bc0      	cmp	r3, #192	@ 0xc0
 800a784:	d825      	bhi.n	800a7d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a786:	2b80      	cmp	r3, #128	@ 0x80
 800a788:	d018      	beq.n	800a7bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800a78a:	2b80      	cmp	r3, #128	@ 0x80
 800a78c:	d821      	bhi.n	800a7d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d002      	beq.n	800a798 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800a792:	2b40      	cmp	r3, #64	@ 0x40
 800a794:	d007      	beq.n	800a7a6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800a796:	e01c      	b.n	800a7d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a798:	4b4f      	ldr	r3, [pc, #316]	@ (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a79a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a79c:	4a4e      	ldr	r2, [pc, #312]	@ (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a79e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a7a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800a7a4:	e01e      	b.n	800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a7a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7aa:	3308      	adds	r3, #8
 800a7ac:	2100      	movs	r1, #0
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f001 fb94 	bl	800bedc <RCCEx_PLL2_Config>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800a7ba:	e013      	b.n	800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a7bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7c0:	3328      	adds	r3, #40	@ 0x28
 800a7c2:	2100      	movs	r1, #0
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f001 fc3b 	bl	800c040 <RCCEx_PLL3_Config>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800a7d0:	e008      	b.n	800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a7d8:	e004      	b.n	800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800a7da:	bf00      	nop
 800a7dc:	e002      	b.n	800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800a7de:	bf00      	nop
 800a7e0:	e000      	b.n	800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800a7e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d10a      	bne.n	800a802 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800a7ec:	4b3a      	ldr	r3, [pc, #232]	@ (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a7ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7f0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800a7f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a7fa:	4a37      	ldr	r2, [pc, #220]	@ (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a7fc:	430b      	orrs	r3, r1
 800a7fe:	6513      	str	r3, [r2, #80]	@ 0x50
 800a800:	e003      	b.n	800a80a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a802:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a806:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800a80a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a812:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800a816:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a81a:	2300      	movs	r3, #0
 800a81c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800a820:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800a824:	460b      	mov	r3, r1
 800a826:	4313      	orrs	r3, r2
 800a828:	d05c      	beq.n	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800a82a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a82e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a830:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800a834:	d03b      	beq.n	800a8ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a836:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800a83a:	d834      	bhi.n	800a8a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800a83c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a840:	d037      	beq.n	800a8b2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800a842:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a846:	d82e      	bhi.n	800a8a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800a848:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a84c:	d033      	beq.n	800a8b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a84e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a852:	d828      	bhi.n	800a8a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800a854:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a858:	d01a      	beq.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800a85a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a85e:	d822      	bhi.n	800a8a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800a860:	2b00      	cmp	r3, #0
 800a862:	d003      	beq.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0x288>
 800a864:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a868:	d007      	beq.n	800a87a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800a86a:	e01c      	b.n	800a8a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a86c:	4b1a      	ldr	r3, [pc, #104]	@ (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a86e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a870:	4a19      	ldr	r2, [pc, #100]	@ (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a872:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a876:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800a878:	e01e      	b.n	800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a87a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a87e:	3308      	adds	r3, #8
 800a880:	2100      	movs	r1, #0
 800a882:	4618      	mov	r0, r3
 800a884:	f001 fb2a 	bl	800bedc <RCCEx_PLL2_Config>
 800a888:	4603      	mov	r3, r0
 800a88a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800a88e:	e013      	b.n	800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a890:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a894:	3328      	adds	r3, #40	@ 0x28
 800a896:	2100      	movs	r1, #0
 800a898:	4618      	mov	r0, r3
 800a89a:	f001 fbd1 	bl	800c040 <RCCEx_PLL3_Config>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800a8a4:	e008      	b.n	800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a8ac:	e004      	b.n	800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800a8ae:	bf00      	nop
 800a8b0:	e002      	b.n	800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800a8b2:	bf00      	nop
 800a8b4:	e000      	b.n	800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800a8b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d10d      	bne.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800a8c0:	4b05      	ldr	r3, [pc, #20]	@ (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a8c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8c4:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800a8c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a8ce:	4a02      	ldr	r2, [pc, #8]	@ (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a8d0:	430b      	orrs	r3, r1
 800a8d2:	6513      	str	r3, [r2, #80]	@ 0x50
 800a8d4:	e006      	b.n	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800a8d6:	bf00      	nop
 800a8d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a8e0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a8e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ec:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800a8f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a8fa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800a8fe:	460b      	mov	r3, r1
 800a900:	4313      	orrs	r3, r2
 800a902:	d03a      	beq.n	800a97a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800a904:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a90a:	2b30      	cmp	r3, #48	@ 0x30
 800a90c:	d01f      	beq.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800a90e:	2b30      	cmp	r3, #48	@ 0x30
 800a910:	d819      	bhi.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800a912:	2b20      	cmp	r3, #32
 800a914:	d00c      	beq.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800a916:	2b20      	cmp	r3, #32
 800a918:	d815      	bhi.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d019      	beq.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800a91e:	2b10      	cmp	r3, #16
 800a920:	d111      	bne.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a922:	4bae      	ldr	r3, [pc, #696]	@ (800abdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a926:	4aad      	ldr	r2, [pc, #692]	@ (800abdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a928:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a92c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a92e:	e011      	b.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a930:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a934:	3308      	adds	r3, #8
 800a936:	2102      	movs	r1, #2
 800a938:	4618      	mov	r0, r3
 800a93a:	f001 facf 	bl	800bedc <RCCEx_PLL2_Config>
 800a93e:	4603      	mov	r3, r0
 800a940:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a944:	e006      	b.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a946:	2301      	movs	r3, #1
 800a948:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a94c:	e002      	b.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800a94e:	bf00      	nop
 800a950:	e000      	b.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800a952:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a954:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d10a      	bne.n	800a972 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a95c:	4b9f      	ldr	r3, [pc, #636]	@ (800abdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a95e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a960:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800a964:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a96a:	4a9c      	ldr	r2, [pc, #624]	@ (800abdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a96c:	430b      	orrs	r3, r1
 800a96e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a970:	e003      	b.n	800a97a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a972:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a976:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a97a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a982:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800a986:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a98a:	2300      	movs	r3, #0
 800a98c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a990:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a994:	460b      	mov	r3, r1
 800a996:	4313      	orrs	r3, r2
 800a998:	d051      	beq.n	800aa3e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a99a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a99e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a9a4:	d035      	beq.n	800aa12 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800a9a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a9aa:	d82e      	bhi.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0x426>
 800a9ac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a9b0:	d031      	beq.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800a9b2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a9b6:	d828      	bhi.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0x426>
 800a9b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a9bc:	d01a      	beq.n	800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800a9be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a9c2:	d822      	bhi.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0x426>
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d003      	beq.n	800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800a9c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9cc:	d007      	beq.n	800a9de <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800a9ce:	e01c      	b.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9d0:	4b82      	ldr	r3, [pc, #520]	@ (800abdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a9d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9d4:	4a81      	ldr	r2, [pc, #516]	@ (800abdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a9d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a9da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a9dc:	e01c      	b.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a9de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9e2:	3308      	adds	r3, #8
 800a9e4:	2100      	movs	r1, #0
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f001 fa78 	bl	800bedc <RCCEx_PLL2_Config>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a9f2:	e011      	b.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a9f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9f8:	3328      	adds	r3, #40	@ 0x28
 800a9fa:	2100      	movs	r1, #0
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f001 fb1f 	bl	800c040 <RCCEx_PLL3_Config>
 800aa02:	4603      	mov	r3, r0
 800aa04:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800aa08:	e006      	b.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800aa10:	e002      	b.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800aa12:	bf00      	nop
 800aa14:	e000      	b.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800aa16:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa18:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d10a      	bne.n	800aa36 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800aa20:	4b6e      	ldr	r3, [pc, #440]	@ (800abdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aa22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa24:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800aa28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa2e:	4a6b      	ldr	r2, [pc, #428]	@ (800abdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aa30:	430b      	orrs	r3, r1
 800aa32:	6513      	str	r3, [r2, #80]	@ 0x50
 800aa34:	e003      	b.n	800aa3e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa36:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aa3a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800aa3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa46:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800aa4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800aa4e:	2300      	movs	r3, #0
 800aa50:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800aa54:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800aa58:	460b      	mov	r3, r1
 800aa5a:	4313      	orrs	r3, r2
 800aa5c:	d053      	beq.n	800ab06 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800aa5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800aa68:	d033      	beq.n	800aad2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800aa6a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800aa6e:	d82c      	bhi.n	800aaca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800aa70:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aa74:	d02f      	beq.n	800aad6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800aa76:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aa7a:	d826      	bhi.n	800aaca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800aa7c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aa80:	d02b      	beq.n	800aada <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800aa82:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aa86:	d820      	bhi.n	800aaca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800aa88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa8c:	d012      	beq.n	800aab4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800aa8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa92:	d81a      	bhi.n	800aaca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d022      	beq.n	800aade <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800aa98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa9c:	d115      	bne.n	800aaca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aa9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aaa2:	3308      	adds	r3, #8
 800aaa4:	2101      	movs	r1, #1
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f001 fa18 	bl	800bedc <RCCEx_PLL2_Config>
 800aaac:	4603      	mov	r3, r0
 800aaae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800aab2:	e015      	b.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aab4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aab8:	3328      	adds	r3, #40	@ 0x28
 800aaba:	2101      	movs	r1, #1
 800aabc:	4618      	mov	r0, r3
 800aabe:	f001 fabf 	bl	800c040 <RCCEx_PLL3_Config>
 800aac2:	4603      	mov	r3, r0
 800aac4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800aac8:	e00a      	b.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aaca:	2301      	movs	r3, #1
 800aacc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800aad0:	e006      	b.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800aad2:	bf00      	nop
 800aad4:	e004      	b.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800aad6:	bf00      	nop
 800aad8:	e002      	b.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800aada:	bf00      	nop
 800aadc:	e000      	b.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800aade:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aae0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d10a      	bne.n	800aafe <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800aae8:	4b3c      	ldr	r3, [pc, #240]	@ (800abdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aaea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aaec:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800aaf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aaf4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aaf6:	4a39      	ldr	r2, [pc, #228]	@ (800abdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aaf8:	430b      	orrs	r3, r1
 800aafa:	6513      	str	r3, [r2, #80]	@ 0x50
 800aafc:	e003      	b.n	800ab06 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aafe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ab02:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ab06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab0e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800ab12:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ab16:	2300      	movs	r3, #0
 800ab18:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ab1c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800ab20:	460b      	mov	r3, r1
 800ab22:	4313      	orrs	r3, r2
 800ab24:	d060      	beq.n	800abe8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800ab26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ab2e:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800ab32:	d039      	beq.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800ab34:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800ab38:	d832      	bhi.n	800aba0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800ab3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ab3e:	d035      	beq.n	800abac <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800ab40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ab44:	d82c      	bhi.n	800aba0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800ab46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab4a:	d031      	beq.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800ab4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab50:	d826      	bhi.n	800aba0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800ab52:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ab56:	d02d      	beq.n	800abb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800ab58:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ab5c:	d820      	bhi.n	800aba0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800ab5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab62:	d012      	beq.n	800ab8a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800ab64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab68:	d81a      	bhi.n	800aba0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d024      	beq.n	800abb8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800ab6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab72:	d115      	bne.n	800aba0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ab74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab78:	3308      	adds	r3, #8
 800ab7a:	2101      	movs	r1, #1
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f001 f9ad 	bl	800bedc <RCCEx_PLL2_Config>
 800ab82:	4603      	mov	r3, r0
 800ab84:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ab88:	e017      	b.n	800abba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ab8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab8e:	3328      	adds	r3, #40	@ 0x28
 800ab90:	2101      	movs	r1, #1
 800ab92:	4618      	mov	r0, r3
 800ab94:	f001 fa54 	bl	800c040 <RCCEx_PLL3_Config>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ab9e:	e00c      	b.n	800abba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800aba0:	2301      	movs	r3, #1
 800aba2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800aba6:	e008      	b.n	800abba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800aba8:	bf00      	nop
 800abaa:	e006      	b.n	800abba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800abac:	bf00      	nop
 800abae:	e004      	b.n	800abba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800abb0:	bf00      	nop
 800abb2:	e002      	b.n	800abba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800abb4:	bf00      	nop
 800abb6:	e000      	b.n	800abba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800abb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d10e      	bne.n	800abe0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800abc2:	4b06      	ldr	r3, [pc, #24]	@ (800abdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800abc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abc6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800abca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800abd2:	4a02      	ldr	r2, [pc, #8]	@ (800abdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800abd4:	430b      	orrs	r3, r1
 800abd6:	6593      	str	r3, [r2, #88]	@ 0x58
 800abd8:	e006      	b.n	800abe8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800abda:	bf00      	nop
 800abdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abe0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800abe4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800abe8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800abf4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800abf8:	2300      	movs	r3, #0
 800abfa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800abfe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800ac02:	460b      	mov	r3, r1
 800ac04:	4313      	orrs	r3, r2
 800ac06:	d037      	beq.n	800ac78 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800ac08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ac0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac12:	d00e      	beq.n	800ac32 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800ac14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac18:	d816      	bhi.n	800ac48 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d018      	beq.n	800ac50 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800ac1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac22:	d111      	bne.n	800ac48 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac24:	4bc4      	ldr	r3, [pc, #784]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac28:	4ac3      	ldr	r2, [pc, #780]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ac2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ac30:	e00f      	b.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ac32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac36:	3308      	adds	r3, #8
 800ac38:	2101      	movs	r1, #1
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f001 f94e 	bl	800bedc <RCCEx_PLL2_Config>
 800ac40:	4603      	mov	r3, r0
 800ac42:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ac46:	e004      	b.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac48:	2301      	movs	r3, #1
 800ac4a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ac4e:	e000      	b.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800ac50:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac52:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d10a      	bne.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ac5a:	4bb7      	ldr	r3, [pc, #732]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac5e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800ac62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac66:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ac68:	4ab3      	ldr	r2, [pc, #716]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac6a:	430b      	orrs	r3, r1
 800ac6c:	6513      	str	r3, [r2, #80]	@ 0x50
 800ac6e:	e003      	b.n	800ac78 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac70:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ac74:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ac78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac80:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800ac84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ac88:	2300      	movs	r3, #0
 800ac8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ac8e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800ac92:	460b      	mov	r3, r1
 800ac94:	4313      	orrs	r3, r2
 800ac96:	d039      	beq.n	800ad0c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800ac98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac9e:	2b03      	cmp	r3, #3
 800aca0:	d81c      	bhi.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800aca2:	a201      	add	r2, pc, #4	@ (adr r2, 800aca8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800aca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aca8:	0800ace5 	.word	0x0800ace5
 800acac:	0800acb9 	.word	0x0800acb9
 800acb0:	0800acc7 	.word	0x0800acc7
 800acb4:	0800ace5 	.word	0x0800ace5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acb8:	4b9f      	ldr	r3, [pc, #636]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800acba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acbc:	4a9e      	ldr	r2, [pc, #632]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800acbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800acc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800acc4:	e00f      	b.n	800ace6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800acc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acca:	3308      	adds	r3, #8
 800accc:	2102      	movs	r1, #2
 800acce:	4618      	mov	r0, r3
 800acd0:	f001 f904 	bl	800bedc <RCCEx_PLL2_Config>
 800acd4:	4603      	mov	r3, r0
 800acd6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800acda:	e004      	b.n	800ace6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800acdc:	2301      	movs	r3, #1
 800acde:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ace2:	e000      	b.n	800ace6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800ace4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ace6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800acea:	2b00      	cmp	r3, #0
 800acec:	d10a      	bne.n	800ad04 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800acee:	4b92      	ldr	r3, [pc, #584]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800acf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800acf2:	f023 0103 	bic.w	r1, r3, #3
 800acf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800acfc:	4a8e      	ldr	r2, [pc, #568]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800acfe:	430b      	orrs	r3, r1
 800ad00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ad02:	e003      	b.n	800ad0c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad04:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ad08:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ad0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad14:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800ad18:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ad22:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800ad26:	460b      	mov	r3, r1
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	f000 8099 	beq.w	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ad2e:	4b83      	ldr	r3, [pc, #524]	@ (800af3c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	4a82      	ldr	r2, [pc, #520]	@ (800af3c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ad34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ad38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ad3a:	f7fa fd57 	bl	80057ec <HAL_GetTick>
 800ad3e:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ad42:	e00b      	b.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ad44:	f7fa fd52 	bl	80057ec <HAL_GetTick>
 800ad48:	4602      	mov	r2, r0
 800ad4a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800ad4e:	1ad3      	subs	r3, r2, r3
 800ad50:	2b64      	cmp	r3, #100	@ 0x64
 800ad52:	d903      	bls.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800ad54:	2303      	movs	r3, #3
 800ad56:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ad5a:	e005      	b.n	800ad68 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ad5c:	4b77      	ldr	r3, [pc, #476]	@ (800af3c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d0ed      	beq.n	800ad44 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800ad68:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d173      	bne.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ad70:	4b71      	ldr	r3, [pc, #452]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad72:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ad74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad78:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ad7c:	4053      	eors	r3, r2
 800ad7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d015      	beq.n	800adb2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ad86:	4b6c      	ldr	r3, [pc, #432]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ad8e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ad92:	4b69      	ldr	r3, [pc, #420]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad96:	4a68      	ldr	r2, [pc, #416]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ad9c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ad9e:	4b66      	ldr	r3, [pc, #408]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ada0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ada2:	4a65      	ldr	r2, [pc, #404]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ada4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ada8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800adaa:	4a63      	ldr	r2, [pc, #396]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800adac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800adb0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800adb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800adb6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800adba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800adbe:	d118      	bne.n	800adf2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800adc0:	f7fa fd14 	bl	80057ec <HAL_GetTick>
 800adc4:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800adc8:	e00d      	b.n	800ade6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800adca:	f7fa fd0f 	bl	80057ec <HAL_GetTick>
 800adce:	4602      	mov	r2, r0
 800add0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800add4:	1ad2      	subs	r2, r2, r3
 800add6:	f241 3388 	movw	r3, #5000	@ 0x1388
 800adda:	429a      	cmp	r2, r3
 800addc:	d903      	bls.n	800ade6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800adde:	2303      	movs	r3, #3
 800ade0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 800ade4:	e005      	b.n	800adf2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ade6:	4b54      	ldr	r3, [pc, #336]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ade8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800adea:	f003 0302 	and.w	r3, r3, #2
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d0eb      	beq.n	800adca <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800adf2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d129      	bne.n	800ae4e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800adfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800adfe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ae02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ae06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae0a:	d10e      	bne.n	800ae2a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800ae0c:	4b4a      	ldr	r3, [pc, #296]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae0e:	691b      	ldr	r3, [r3, #16]
 800ae10:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800ae14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ae1c:	091a      	lsrs	r2, r3, #4
 800ae1e:	4b48      	ldr	r3, [pc, #288]	@ (800af40 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800ae20:	4013      	ands	r3, r2
 800ae22:	4a45      	ldr	r2, [pc, #276]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae24:	430b      	orrs	r3, r1
 800ae26:	6113      	str	r3, [r2, #16]
 800ae28:	e005      	b.n	800ae36 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800ae2a:	4b43      	ldr	r3, [pc, #268]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae2c:	691b      	ldr	r3, [r3, #16]
 800ae2e:	4a42      	ldr	r2, [pc, #264]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae30:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ae34:	6113      	str	r3, [r2, #16]
 800ae36:	4b40      	ldr	r3, [pc, #256]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae38:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800ae3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ae42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ae46:	4a3c      	ldr	r2, [pc, #240]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae48:	430b      	orrs	r3, r1
 800ae4a:	6713      	str	r3, [r2, #112]	@ 0x70
 800ae4c:	e008      	b.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ae4e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ae52:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800ae56:	e003      	b.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae58:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ae5c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ae60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae68:	f002 0301 	and.w	r3, r2, #1
 800ae6c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ae70:	2300      	movs	r3, #0
 800ae72:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ae76:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ae7a:	460b      	mov	r3, r1
 800ae7c:	4313      	orrs	r3, r2
 800ae7e:	f000 8090 	beq.w	800afa2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800ae82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ae8a:	2b28      	cmp	r3, #40	@ 0x28
 800ae8c:	d870      	bhi.n	800af70 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800ae8e:	a201      	add	r2, pc, #4	@ (adr r2, 800ae94 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800ae90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae94:	0800af79 	.word	0x0800af79
 800ae98:	0800af71 	.word	0x0800af71
 800ae9c:	0800af71 	.word	0x0800af71
 800aea0:	0800af71 	.word	0x0800af71
 800aea4:	0800af71 	.word	0x0800af71
 800aea8:	0800af71 	.word	0x0800af71
 800aeac:	0800af71 	.word	0x0800af71
 800aeb0:	0800af71 	.word	0x0800af71
 800aeb4:	0800af45 	.word	0x0800af45
 800aeb8:	0800af71 	.word	0x0800af71
 800aebc:	0800af71 	.word	0x0800af71
 800aec0:	0800af71 	.word	0x0800af71
 800aec4:	0800af71 	.word	0x0800af71
 800aec8:	0800af71 	.word	0x0800af71
 800aecc:	0800af71 	.word	0x0800af71
 800aed0:	0800af71 	.word	0x0800af71
 800aed4:	0800af5b 	.word	0x0800af5b
 800aed8:	0800af71 	.word	0x0800af71
 800aedc:	0800af71 	.word	0x0800af71
 800aee0:	0800af71 	.word	0x0800af71
 800aee4:	0800af71 	.word	0x0800af71
 800aee8:	0800af71 	.word	0x0800af71
 800aeec:	0800af71 	.word	0x0800af71
 800aef0:	0800af71 	.word	0x0800af71
 800aef4:	0800af79 	.word	0x0800af79
 800aef8:	0800af71 	.word	0x0800af71
 800aefc:	0800af71 	.word	0x0800af71
 800af00:	0800af71 	.word	0x0800af71
 800af04:	0800af71 	.word	0x0800af71
 800af08:	0800af71 	.word	0x0800af71
 800af0c:	0800af71 	.word	0x0800af71
 800af10:	0800af71 	.word	0x0800af71
 800af14:	0800af79 	.word	0x0800af79
 800af18:	0800af71 	.word	0x0800af71
 800af1c:	0800af71 	.word	0x0800af71
 800af20:	0800af71 	.word	0x0800af71
 800af24:	0800af71 	.word	0x0800af71
 800af28:	0800af71 	.word	0x0800af71
 800af2c:	0800af71 	.word	0x0800af71
 800af30:	0800af71 	.word	0x0800af71
 800af34:	0800af79 	.word	0x0800af79
 800af38:	58024400 	.word	0x58024400
 800af3c:	58024800 	.word	0x58024800
 800af40:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800af44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af48:	3308      	adds	r3, #8
 800af4a:	2101      	movs	r1, #1
 800af4c:	4618      	mov	r0, r3
 800af4e:	f000 ffc5 	bl	800bedc <RCCEx_PLL2_Config>
 800af52:	4603      	mov	r3, r0
 800af54:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800af58:	e00f      	b.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800af5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af5e:	3328      	adds	r3, #40	@ 0x28
 800af60:	2101      	movs	r1, #1
 800af62:	4618      	mov	r0, r3
 800af64:	f001 f86c 	bl	800c040 <RCCEx_PLL3_Config>
 800af68:	4603      	mov	r3, r0
 800af6a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800af6e:	e004      	b.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af70:	2301      	movs	r3, #1
 800af72:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800af76:	e000      	b.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800af78:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af7a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d10b      	bne.n	800af9a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800af82:	4bc0      	ldr	r3, [pc, #768]	@ (800b284 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800af84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af86:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800af8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af92:	4abc      	ldr	r2, [pc, #752]	@ (800b284 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800af94:	430b      	orrs	r3, r1
 800af96:	6553      	str	r3, [r2, #84]	@ 0x54
 800af98:	e003      	b.n	800afa2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af9a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800af9e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800afa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afaa:	f002 0302 	and.w	r3, r2, #2
 800afae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800afb2:	2300      	movs	r3, #0
 800afb4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800afb8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800afbc:	460b      	mov	r3, r1
 800afbe:	4313      	orrs	r3, r2
 800afc0:	d043      	beq.n	800b04a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800afc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afca:	2b05      	cmp	r3, #5
 800afcc:	d824      	bhi.n	800b018 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800afce:	a201      	add	r2, pc, #4	@ (adr r2, 800afd4 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800afd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afd4:	0800b021 	.word	0x0800b021
 800afd8:	0800afed 	.word	0x0800afed
 800afdc:	0800b003 	.word	0x0800b003
 800afe0:	0800b021 	.word	0x0800b021
 800afe4:	0800b021 	.word	0x0800b021
 800afe8:	0800b021 	.word	0x0800b021
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800afec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aff0:	3308      	adds	r3, #8
 800aff2:	2101      	movs	r1, #1
 800aff4:	4618      	mov	r0, r3
 800aff6:	f000 ff71 	bl	800bedc <RCCEx_PLL2_Config>
 800affa:	4603      	mov	r3, r0
 800affc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b000:	e00f      	b.n	800b022 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b002:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b006:	3328      	adds	r3, #40	@ 0x28
 800b008:	2101      	movs	r1, #1
 800b00a:	4618      	mov	r0, r3
 800b00c:	f001 f818 	bl	800c040 <RCCEx_PLL3_Config>
 800b010:	4603      	mov	r3, r0
 800b012:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b016:	e004      	b.n	800b022 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b018:	2301      	movs	r3, #1
 800b01a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b01e:	e000      	b.n	800b022 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800b020:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b022:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b026:	2b00      	cmp	r3, #0
 800b028:	d10b      	bne.n	800b042 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b02a:	4b96      	ldr	r3, [pc, #600]	@ (800b284 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b02c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b02e:	f023 0107 	bic.w	r1, r3, #7
 800b032:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b036:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b03a:	4a92      	ldr	r2, [pc, #584]	@ (800b284 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b03c:	430b      	orrs	r3, r1
 800b03e:	6553      	str	r3, [r2, #84]	@ 0x54
 800b040:	e003      	b.n	800b04a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b042:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b046:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b04a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b052:	f002 0304 	and.w	r3, r2, #4
 800b056:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b05a:	2300      	movs	r3, #0
 800b05c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b060:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800b064:	460b      	mov	r3, r1
 800b066:	4313      	orrs	r3, r2
 800b068:	d043      	beq.n	800b0f2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b06a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b06e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b072:	2b05      	cmp	r3, #5
 800b074:	d824      	bhi.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800b076:	a201      	add	r2, pc, #4	@ (adr r2, 800b07c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800b078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b07c:	0800b0c9 	.word	0x0800b0c9
 800b080:	0800b095 	.word	0x0800b095
 800b084:	0800b0ab 	.word	0x0800b0ab
 800b088:	0800b0c9 	.word	0x0800b0c9
 800b08c:	0800b0c9 	.word	0x0800b0c9
 800b090:	0800b0c9 	.word	0x0800b0c9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b094:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b098:	3308      	adds	r3, #8
 800b09a:	2101      	movs	r1, #1
 800b09c:	4618      	mov	r0, r3
 800b09e:	f000 ff1d 	bl	800bedc <RCCEx_PLL2_Config>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b0a8:	e00f      	b.n	800b0ca <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b0aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0ae:	3328      	adds	r3, #40	@ 0x28
 800b0b0:	2101      	movs	r1, #1
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f000 ffc4 	bl	800c040 <RCCEx_PLL3_Config>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b0be:	e004      	b.n	800b0ca <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b0c6:	e000      	b.n	800b0ca <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800b0c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0ca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d10b      	bne.n	800b0ea <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b0d2:	4b6c      	ldr	r3, [pc, #432]	@ (800b284 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b0d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b0d6:	f023 0107 	bic.w	r1, r3, #7
 800b0da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b0e2:	4a68      	ldr	r2, [pc, #416]	@ (800b284 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b0e4:	430b      	orrs	r3, r1
 800b0e6:	6593      	str	r3, [r2, #88]	@ 0x58
 800b0e8:	e003      	b.n	800b0f2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b0ee:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b0f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0fa:	f002 0320 	and.w	r3, r2, #32
 800b0fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b102:	2300      	movs	r3, #0
 800b104:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b108:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b10c:	460b      	mov	r3, r1
 800b10e:	4313      	orrs	r3, r2
 800b110:	d055      	beq.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b112:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b116:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b11a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b11e:	d033      	beq.n	800b188 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b120:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b124:	d82c      	bhi.n	800b180 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800b126:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b12a:	d02f      	beq.n	800b18c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b12c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b130:	d826      	bhi.n	800b180 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800b132:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b136:	d02b      	beq.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b138:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b13c:	d820      	bhi.n	800b180 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800b13e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b142:	d012      	beq.n	800b16a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800b144:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b148:	d81a      	bhi.n	800b180 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d022      	beq.n	800b194 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800b14e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b152:	d115      	bne.n	800b180 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b154:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b158:	3308      	adds	r3, #8
 800b15a:	2100      	movs	r1, #0
 800b15c:	4618      	mov	r0, r3
 800b15e:	f000 febd 	bl	800bedc <RCCEx_PLL2_Config>
 800b162:	4603      	mov	r3, r0
 800b164:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b168:	e015      	b.n	800b196 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b16a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b16e:	3328      	adds	r3, #40	@ 0x28
 800b170:	2102      	movs	r1, #2
 800b172:	4618      	mov	r0, r3
 800b174:	f000 ff64 	bl	800c040 <RCCEx_PLL3_Config>
 800b178:	4603      	mov	r3, r0
 800b17a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b17e:	e00a      	b.n	800b196 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b180:	2301      	movs	r3, #1
 800b182:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b186:	e006      	b.n	800b196 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800b188:	bf00      	nop
 800b18a:	e004      	b.n	800b196 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800b18c:	bf00      	nop
 800b18e:	e002      	b.n	800b196 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800b190:	bf00      	nop
 800b192:	e000      	b.n	800b196 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800b194:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b196:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d10b      	bne.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b19e:	4b39      	ldr	r3, [pc, #228]	@ (800b284 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b1a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b1a2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800b1a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b1ae:	4a35      	ldr	r2, [pc, #212]	@ (800b284 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b1b0:	430b      	orrs	r3, r1
 800b1b2:	6553      	str	r3, [r2, #84]	@ 0x54
 800b1b4:	e003      	b.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1b6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b1ba:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b1be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800b1ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b1d4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800b1d8:	460b      	mov	r3, r1
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	d058      	beq.n	800b290 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b1de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b1e6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800b1ea:	d033      	beq.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b1ec:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800b1f0:	d82c      	bhi.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800b1f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b1f6:	d02f      	beq.n	800b258 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b1f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b1fc:	d826      	bhi.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800b1fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b202:	d02b      	beq.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b204:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b208:	d820      	bhi.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800b20a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b20e:	d012      	beq.n	800b236 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800b210:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b214:	d81a      	bhi.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800b216:	2b00      	cmp	r3, #0
 800b218:	d022      	beq.n	800b260 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800b21a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b21e:	d115      	bne.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b220:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b224:	3308      	adds	r3, #8
 800b226:	2100      	movs	r1, #0
 800b228:	4618      	mov	r0, r3
 800b22a:	f000 fe57 	bl	800bedc <RCCEx_PLL2_Config>
 800b22e:	4603      	mov	r3, r0
 800b230:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b234:	e015      	b.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b236:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b23a:	3328      	adds	r3, #40	@ 0x28
 800b23c:	2102      	movs	r1, #2
 800b23e:	4618      	mov	r0, r3
 800b240:	f000 fefe 	bl	800c040 <RCCEx_PLL3_Config>
 800b244:	4603      	mov	r3, r0
 800b246:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b24a:	e00a      	b.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b24c:	2301      	movs	r3, #1
 800b24e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b252:	e006      	b.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800b254:	bf00      	nop
 800b256:	e004      	b.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800b258:	bf00      	nop
 800b25a:	e002      	b.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800b25c:	bf00      	nop
 800b25e:	e000      	b.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800b260:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b262:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b266:	2b00      	cmp	r3, #0
 800b268:	d10e      	bne.n	800b288 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b26a:	4b06      	ldr	r3, [pc, #24]	@ (800b284 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b26c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b26e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800b272:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b276:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b27a:	4a02      	ldr	r2, [pc, #8]	@ (800b284 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b27c:	430b      	orrs	r3, r1
 800b27e:	6593      	str	r3, [r2, #88]	@ 0x58
 800b280:	e006      	b.n	800b290 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800b282:	bf00      	nop
 800b284:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b288:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b28c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b290:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b298:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800b29c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b2a6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800b2aa:	460b      	mov	r3, r1
 800b2ac:	4313      	orrs	r3, r2
 800b2ae:	d055      	beq.n	800b35c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b2b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b2b8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800b2bc:	d033      	beq.n	800b326 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b2be:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800b2c2:	d82c      	bhi.n	800b31e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800b2c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b2c8:	d02f      	beq.n	800b32a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b2ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b2ce:	d826      	bhi.n	800b31e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800b2d0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800b2d4:	d02b      	beq.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b2d6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800b2da:	d820      	bhi.n	800b31e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800b2dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b2e0:	d012      	beq.n	800b308 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800b2e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b2e6:	d81a      	bhi.n	800b31e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d022      	beq.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800b2ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b2f0:	d115      	bne.n	800b31e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b2f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2f6:	3308      	adds	r3, #8
 800b2f8:	2100      	movs	r1, #0
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f000 fdee 	bl	800bedc <RCCEx_PLL2_Config>
 800b300:	4603      	mov	r3, r0
 800b302:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b306:	e015      	b.n	800b334 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b308:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b30c:	3328      	adds	r3, #40	@ 0x28
 800b30e:	2102      	movs	r1, #2
 800b310:	4618      	mov	r0, r3
 800b312:	f000 fe95 	bl	800c040 <RCCEx_PLL3_Config>
 800b316:	4603      	mov	r3, r0
 800b318:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b31c:	e00a      	b.n	800b334 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b31e:	2301      	movs	r3, #1
 800b320:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b324:	e006      	b.n	800b334 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800b326:	bf00      	nop
 800b328:	e004      	b.n	800b334 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800b32a:	bf00      	nop
 800b32c:	e002      	b.n	800b334 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800b32e:	bf00      	nop
 800b330:	e000      	b.n	800b334 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800b332:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b334:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d10b      	bne.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b33c:	4ba1      	ldr	r3, [pc, #644]	@ (800b5c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b33e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b340:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800b344:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b348:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b34c:	4a9d      	ldr	r2, [pc, #628]	@ (800b5c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b34e:	430b      	orrs	r3, r1
 800b350:	6593      	str	r3, [r2, #88]	@ 0x58
 800b352:	e003      	b.n	800b35c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b354:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b358:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b35c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b364:	f002 0308 	and.w	r3, r2, #8
 800b368:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b36c:	2300      	movs	r3, #0
 800b36e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b372:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800b376:	460b      	mov	r3, r1
 800b378:	4313      	orrs	r3, r2
 800b37a:	d01e      	beq.n	800b3ba <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b37c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b380:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b384:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b388:	d10c      	bne.n	800b3a4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b38a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b38e:	3328      	adds	r3, #40	@ 0x28
 800b390:	2102      	movs	r1, #2
 800b392:	4618      	mov	r0, r3
 800b394:	f000 fe54 	bl	800c040 <RCCEx_PLL3_Config>
 800b398:	4603      	mov	r3, r0
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d002      	beq.n	800b3a4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800b39e:	2301      	movs	r3, #1
 800b3a0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b3a4:	4b87      	ldr	r3, [pc, #540]	@ (800b5c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b3a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3a8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b3ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b3b4:	4a83      	ldr	r2, [pc, #524]	@ (800b5c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b3b6:	430b      	orrs	r3, r1
 800b3b8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b3ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c2:	f002 0310 	and.w	r3, r2, #16
 800b3c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b3d0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800b3d4:	460b      	mov	r3, r1
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	d01e      	beq.n	800b418 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b3da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b3e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b3e6:	d10c      	bne.n	800b402 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b3e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3ec:	3328      	adds	r3, #40	@ 0x28
 800b3ee:	2102      	movs	r1, #2
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f000 fe25 	bl	800c040 <RCCEx_PLL3_Config>
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d002      	beq.n	800b402 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b402:	4b70      	ldr	r3, [pc, #448]	@ (800b5c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b406:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b40a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b40e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b412:	4a6c      	ldr	r2, [pc, #432]	@ (800b5c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b414:	430b      	orrs	r3, r1
 800b416:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b418:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b420:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800b424:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b428:	2300      	movs	r3, #0
 800b42a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b42e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800b432:	460b      	mov	r3, r1
 800b434:	4313      	orrs	r3, r2
 800b436:	d03e      	beq.n	800b4b6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b438:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b43c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b440:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b444:	d022      	beq.n	800b48c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800b446:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b44a:	d81b      	bhi.n	800b484 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d003      	beq.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800b450:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b454:	d00b      	beq.n	800b46e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800b456:	e015      	b.n	800b484 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b458:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b45c:	3308      	adds	r3, #8
 800b45e:	2100      	movs	r1, #0
 800b460:	4618      	mov	r0, r3
 800b462:	f000 fd3b 	bl	800bedc <RCCEx_PLL2_Config>
 800b466:	4603      	mov	r3, r0
 800b468:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b46c:	e00f      	b.n	800b48e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b46e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b472:	3328      	adds	r3, #40	@ 0x28
 800b474:	2102      	movs	r1, #2
 800b476:	4618      	mov	r0, r3
 800b478:	f000 fde2 	bl	800c040 <RCCEx_PLL3_Config>
 800b47c:	4603      	mov	r3, r0
 800b47e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b482:	e004      	b.n	800b48e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b484:	2301      	movs	r3, #1
 800b486:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b48a:	e000      	b.n	800b48e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800b48c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b48e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b492:	2b00      	cmp	r3, #0
 800b494:	d10b      	bne.n	800b4ae <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b496:	4b4b      	ldr	r3, [pc, #300]	@ (800b5c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b49a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b49e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b4a6:	4a47      	ldr	r2, [pc, #284]	@ (800b5c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b4a8:	430b      	orrs	r3, r1
 800b4aa:	6593      	str	r3, [r2, #88]	@ 0x58
 800b4ac:	e003      	b.n	800b4b6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b4b2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b4b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4be:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800b4c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b4c8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800b4cc:	460b      	mov	r3, r1
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	d03b      	beq.n	800b54a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b4d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4da:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b4de:	d01f      	beq.n	800b520 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800b4e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b4e4:	d818      	bhi.n	800b518 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b4e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b4ea:	d003      	beq.n	800b4f4 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800b4ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b4f0:	d007      	beq.n	800b502 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800b4f2:	e011      	b.n	800b518 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4f4:	4b33      	ldr	r3, [pc, #204]	@ (800b5c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b4f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4f8:	4a32      	ldr	r2, [pc, #200]	@ (800b5c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b4fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b4fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b500:	e00f      	b.n	800b522 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b502:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b506:	3328      	adds	r3, #40	@ 0x28
 800b508:	2101      	movs	r1, #1
 800b50a:	4618      	mov	r0, r3
 800b50c:	f000 fd98 	bl	800c040 <RCCEx_PLL3_Config>
 800b510:	4603      	mov	r3, r0
 800b512:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800b516:	e004      	b.n	800b522 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b518:	2301      	movs	r3, #1
 800b51a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b51e:	e000      	b.n	800b522 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800b520:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b522:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b526:	2b00      	cmp	r3, #0
 800b528:	d10b      	bne.n	800b542 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b52a:	4b26      	ldr	r3, [pc, #152]	@ (800b5c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b52c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b52e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b532:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b53a:	4a22      	ldr	r2, [pc, #136]	@ (800b5c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b53c:	430b      	orrs	r3, r1
 800b53e:	6553      	str	r3, [r2, #84]	@ 0x54
 800b540:	e003      	b.n	800b54a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b542:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b546:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b54a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b552:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800b556:	673b      	str	r3, [r7, #112]	@ 0x70
 800b558:	2300      	movs	r3, #0
 800b55a:	677b      	str	r3, [r7, #116]	@ 0x74
 800b55c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800b560:	460b      	mov	r3, r1
 800b562:	4313      	orrs	r3, r2
 800b564:	d034      	beq.n	800b5d0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b566:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b56a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d003      	beq.n	800b578 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800b570:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b574:	d007      	beq.n	800b586 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800b576:	e011      	b.n	800b59c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b578:	4b12      	ldr	r3, [pc, #72]	@ (800b5c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b57a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b57c:	4a11      	ldr	r2, [pc, #68]	@ (800b5c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b57e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b582:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b584:	e00e      	b.n	800b5a4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b586:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b58a:	3308      	adds	r3, #8
 800b58c:	2102      	movs	r1, #2
 800b58e:	4618      	mov	r0, r3
 800b590:	f000 fca4 	bl	800bedc <RCCEx_PLL2_Config>
 800b594:	4603      	mov	r3, r0
 800b596:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b59a:	e003      	b.n	800b5a4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800b59c:	2301      	movs	r3, #1
 800b59e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b5a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d10d      	bne.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b5ac:	4b05      	ldr	r3, [pc, #20]	@ (800b5c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b5ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b5b0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b5b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b5ba:	4a02      	ldr	r2, [pc, #8]	@ (800b5c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b5bc:	430b      	orrs	r3, r1
 800b5be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b5c0:	e006      	b.n	800b5d0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800b5c2:	bf00      	nop
 800b5c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b5cc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b5d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800b5dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b5de:	2300      	movs	r3, #0
 800b5e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b5e2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800b5e6:	460b      	mov	r3, r1
 800b5e8:	4313      	orrs	r3, r2
 800b5ea:	d00c      	beq.n	800b606 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b5ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5f0:	3328      	adds	r3, #40	@ 0x28
 800b5f2:	2102      	movs	r1, #2
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f000 fd23 	bl	800c040 <RCCEx_PLL3_Config>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d002      	beq.n	800b606 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800b600:	2301      	movs	r3, #1
 800b602:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b606:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800b612:	663b      	str	r3, [r7, #96]	@ 0x60
 800b614:	2300      	movs	r3, #0
 800b616:	667b      	str	r3, [r7, #100]	@ 0x64
 800b618:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800b61c:	460b      	mov	r3, r1
 800b61e:	4313      	orrs	r3, r2
 800b620:	d038      	beq.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b622:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b62a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b62e:	d018      	beq.n	800b662 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800b630:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b634:	d811      	bhi.n	800b65a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800b636:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b63a:	d014      	beq.n	800b666 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800b63c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b640:	d80b      	bhi.n	800b65a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800b642:	2b00      	cmp	r3, #0
 800b644:	d011      	beq.n	800b66a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800b646:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b64a:	d106      	bne.n	800b65a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b64c:	4bc3      	ldr	r3, [pc, #780]	@ (800b95c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b64e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b650:	4ac2      	ldr	r2, [pc, #776]	@ (800b95c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b652:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b656:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b658:	e008      	b.n	800b66c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b65a:	2301      	movs	r3, #1
 800b65c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b660:	e004      	b.n	800b66c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800b662:	bf00      	nop
 800b664:	e002      	b.n	800b66c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800b666:	bf00      	nop
 800b668:	e000      	b.n	800b66c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800b66a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b66c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b670:	2b00      	cmp	r3, #0
 800b672:	d10b      	bne.n	800b68c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b674:	4bb9      	ldr	r3, [pc, #740]	@ (800b95c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b676:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b678:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b67c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b680:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b684:	4ab5      	ldr	r2, [pc, #724]	@ (800b95c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b686:	430b      	orrs	r3, r1
 800b688:	6553      	str	r3, [r2, #84]	@ 0x54
 800b68a:	e003      	b.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b68c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b690:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b694:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b69c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800b6a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b6a6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800b6aa:	460b      	mov	r3, r1
 800b6ac:	4313      	orrs	r3, r2
 800b6ae:	d009      	beq.n	800b6c4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b6b0:	4baa      	ldr	r3, [pc, #680]	@ (800b95c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b6b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b6b4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b6b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b6be:	4aa7      	ldr	r2, [pc, #668]	@ (800b95c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b6c0:	430b      	orrs	r3, r1
 800b6c2:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b6c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6cc:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800b6d0:	653b      	str	r3, [r7, #80]	@ 0x50
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	657b      	str	r3, [r7, #84]	@ 0x54
 800b6d6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800b6da:	460b      	mov	r3, r1
 800b6dc:	4313      	orrs	r3, r2
 800b6de:	d009      	beq.n	800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b6e0:	4b9e      	ldr	r3, [pc, #632]	@ (800b95c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b6e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b6e4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800b6e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b6ee:	4a9b      	ldr	r2, [pc, #620]	@ (800b95c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b6f0:	430b      	orrs	r3, r1
 800b6f2:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800b6f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6fc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800b700:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b702:	2300      	movs	r3, #0
 800b704:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b706:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800b70a:	460b      	mov	r3, r1
 800b70c:	4313      	orrs	r3, r2
 800b70e:	d009      	beq.n	800b724 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800b710:	4b92      	ldr	r3, [pc, #584]	@ (800b95c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b714:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 800b718:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b71c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b71e:	4a8f      	ldr	r2, [pc, #572]	@ (800b95c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b720:	430b      	orrs	r3, r1
 800b722:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b724:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800b730:	643b      	str	r3, [r7, #64]	@ 0x40
 800b732:	2300      	movs	r3, #0
 800b734:	647b      	str	r3, [r7, #68]	@ 0x44
 800b736:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800b73a:	460b      	mov	r3, r1
 800b73c:	4313      	orrs	r3, r2
 800b73e:	d00e      	beq.n	800b75e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b740:	4b86      	ldr	r3, [pc, #536]	@ (800b95c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b742:	691b      	ldr	r3, [r3, #16]
 800b744:	4a85      	ldr	r2, [pc, #532]	@ (800b95c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b746:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b74a:	6113      	str	r3, [r2, #16]
 800b74c:	4b83      	ldr	r3, [pc, #524]	@ (800b95c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b74e:	6919      	ldr	r1, [r3, #16]
 800b750:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b754:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b758:	4a80      	ldr	r2, [pc, #512]	@ (800b95c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b75a:	430b      	orrs	r3, r1
 800b75c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b75e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b766:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800b76a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b76c:	2300      	movs	r3, #0
 800b76e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b770:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800b774:	460b      	mov	r3, r1
 800b776:	4313      	orrs	r3, r2
 800b778:	d009      	beq.n	800b78e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b77a:	4b78      	ldr	r3, [pc, #480]	@ (800b95c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b77c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b77e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800b782:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b788:	4a74      	ldr	r2, [pc, #464]	@ (800b95c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b78a:	430b      	orrs	r3, r1
 800b78c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b78e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b796:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800b79a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b79c:	2300      	movs	r3, #0
 800b79e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7a0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800b7a4:	460b      	mov	r3, r1
 800b7a6:	4313      	orrs	r3, r2
 800b7a8:	d00a      	beq.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b7aa:	4b6c      	ldr	r3, [pc, #432]	@ (800b95c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b7ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b7ae:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800b7b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b7ba:	4a68      	ldr	r2, [pc, #416]	@ (800b95c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b7bc:	430b      	orrs	r3, r1
 800b7be:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b7c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c8:	2100      	movs	r1, #0
 800b7ca:	62b9      	str	r1, [r7, #40]	@ 0x28
 800b7cc:	f003 0301 	and.w	r3, r3, #1
 800b7d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b7d2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800b7d6:	460b      	mov	r3, r1
 800b7d8:	4313      	orrs	r3, r2
 800b7da:	d011      	beq.n	800b800 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b7dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7e0:	3308      	adds	r3, #8
 800b7e2:	2100      	movs	r1, #0
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f000 fb79 	bl	800bedc <RCCEx_PLL2_Config>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800b7f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d003      	beq.n	800b800 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b7fc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b800:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b808:	2100      	movs	r1, #0
 800b80a:	6239      	str	r1, [r7, #32]
 800b80c:	f003 0302 	and.w	r3, r3, #2
 800b810:	627b      	str	r3, [r7, #36]	@ 0x24
 800b812:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b816:	460b      	mov	r3, r1
 800b818:	4313      	orrs	r3, r2
 800b81a:	d011      	beq.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b81c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b820:	3308      	adds	r3, #8
 800b822:	2101      	movs	r1, #1
 800b824:	4618      	mov	r0, r3
 800b826:	f000 fb59 	bl	800bedc <RCCEx_PLL2_Config>
 800b82a:	4603      	mov	r3, r0
 800b82c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800b830:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b834:	2b00      	cmp	r3, #0
 800b836:	d003      	beq.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b838:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b83c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b840:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b848:	2100      	movs	r1, #0
 800b84a:	61b9      	str	r1, [r7, #24]
 800b84c:	f003 0304 	and.w	r3, r3, #4
 800b850:	61fb      	str	r3, [r7, #28]
 800b852:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b856:	460b      	mov	r3, r1
 800b858:	4313      	orrs	r3, r2
 800b85a:	d011      	beq.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b85c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b860:	3308      	adds	r3, #8
 800b862:	2102      	movs	r1, #2
 800b864:	4618      	mov	r0, r3
 800b866:	f000 fb39 	bl	800bedc <RCCEx_PLL2_Config>
 800b86a:	4603      	mov	r3, r0
 800b86c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800b870:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b874:	2b00      	cmp	r3, #0
 800b876:	d003      	beq.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b878:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b87c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b880:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b888:	2100      	movs	r1, #0
 800b88a:	6139      	str	r1, [r7, #16]
 800b88c:	f003 0308 	and.w	r3, r3, #8
 800b890:	617b      	str	r3, [r7, #20]
 800b892:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b896:	460b      	mov	r3, r1
 800b898:	4313      	orrs	r3, r2
 800b89a:	d011      	beq.n	800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b89c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8a0:	3328      	adds	r3, #40	@ 0x28
 800b8a2:	2100      	movs	r1, #0
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	f000 fbcb 	bl	800c040 <RCCEx_PLL3_Config>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800b8b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d003      	beq.n	800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b8bc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b8c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c8:	2100      	movs	r1, #0
 800b8ca:	60b9      	str	r1, [r7, #8]
 800b8cc:	f003 0310 	and.w	r3, r3, #16
 800b8d0:	60fb      	str	r3, [r7, #12]
 800b8d2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b8d6:	460b      	mov	r3, r1
 800b8d8:	4313      	orrs	r3, r2
 800b8da:	d011      	beq.n	800b900 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b8dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8e0:	3328      	adds	r3, #40	@ 0x28
 800b8e2:	2101      	movs	r1, #1
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f000 fbab 	bl	800c040 <RCCEx_PLL3_Config>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800b8f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d003      	beq.n	800b900 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b8fc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b900:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b908:	2100      	movs	r1, #0
 800b90a:	6039      	str	r1, [r7, #0]
 800b90c:	f003 0320 	and.w	r3, r3, #32
 800b910:	607b      	str	r3, [r7, #4]
 800b912:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b916:	460b      	mov	r3, r1
 800b918:	4313      	orrs	r3, r2
 800b91a:	d011      	beq.n	800b940 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b91c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b920:	3328      	adds	r3, #40	@ 0x28
 800b922:	2102      	movs	r1, #2
 800b924:	4618      	mov	r0, r3
 800b926:	f000 fb8b 	bl	800c040 <RCCEx_PLL3_Config>
 800b92a:	4603      	mov	r3, r0
 800b92c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800b930:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b934:	2b00      	cmp	r3, #0
 800b936:	d003      	beq.n	800b940 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b938:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b93c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800b940:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800b944:	2b00      	cmp	r3, #0
 800b946:	d101      	bne.n	800b94c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800b948:	2300      	movs	r3, #0
 800b94a:	e000      	b.n	800b94e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800b94c:	2301      	movs	r3, #1
}
 800b94e:	4618      	mov	r0, r3
 800b950:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800b954:	46bd      	mov	sp, r7
 800b956:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b95a:	bf00      	nop
 800b95c:	58024400 	.word	0x58024400

0800b960 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800b964:	f7fe fde2 	bl	800a52c <HAL_RCC_GetHCLKFreq>
 800b968:	4602      	mov	r2, r0
 800b96a:	4b06      	ldr	r3, [pc, #24]	@ (800b984 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b96c:	6a1b      	ldr	r3, [r3, #32]
 800b96e:	091b      	lsrs	r3, r3, #4
 800b970:	f003 0307 	and.w	r3, r3, #7
 800b974:	4904      	ldr	r1, [pc, #16]	@ (800b988 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b976:	5ccb      	ldrb	r3, [r1, r3]
 800b978:	f003 031f 	and.w	r3, r3, #31
 800b97c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b980:	4618      	mov	r0, r3
 800b982:	bd80      	pop	{r7, pc}
 800b984:	58024400 	.word	0x58024400
 800b988:	08019b40 	.word	0x08019b40

0800b98c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b089      	sub	sp, #36	@ 0x24
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b994:	4ba1      	ldr	r3, [pc, #644]	@ (800bc1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b998:	f003 0303 	and.w	r3, r3, #3
 800b99c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b99e:	4b9f      	ldr	r3, [pc, #636]	@ (800bc1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9a2:	0b1b      	lsrs	r3, r3, #12
 800b9a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b9a8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b9aa:	4b9c      	ldr	r3, [pc, #624]	@ (800bc1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9ae:	091b      	lsrs	r3, r3, #4
 800b9b0:	f003 0301 	and.w	r3, r3, #1
 800b9b4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b9b6:	4b99      	ldr	r3, [pc, #612]	@ (800bc1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9ba:	08db      	lsrs	r3, r3, #3
 800b9bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b9c0:	693a      	ldr	r2, [r7, #16]
 800b9c2:	fb02 f303 	mul.w	r3, r2, r3
 800b9c6:	ee07 3a90 	vmov	s15, r3
 800b9ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	f000 8111 	beq.w	800bbfc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b9da:	69bb      	ldr	r3, [r7, #24]
 800b9dc:	2b02      	cmp	r3, #2
 800b9de:	f000 8083 	beq.w	800bae8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b9e2:	69bb      	ldr	r3, [r7, #24]
 800b9e4:	2b02      	cmp	r3, #2
 800b9e6:	f200 80a1 	bhi.w	800bb2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b9ea:	69bb      	ldr	r3, [r7, #24]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d003      	beq.n	800b9f8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b9f0:	69bb      	ldr	r3, [r7, #24]
 800b9f2:	2b01      	cmp	r3, #1
 800b9f4:	d056      	beq.n	800baa4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b9f6:	e099      	b.n	800bb2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b9f8:	4b88      	ldr	r3, [pc, #544]	@ (800bc1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	f003 0320 	and.w	r3, r3, #32
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d02d      	beq.n	800ba60 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ba04:	4b85      	ldr	r3, [pc, #532]	@ (800bc1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	08db      	lsrs	r3, r3, #3
 800ba0a:	f003 0303 	and.w	r3, r3, #3
 800ba0e:	4a84      	ldr	r2, [pc, #528]	@ (800bc20 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ba10:	fa22 f303 	lsr.w	r3, r2, r3
 800ba14:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	ee07 3a90 	vmov	s15, r3
 800ba1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba20:	697b      	ldr	r3, [r7, #20]
 800ba22:	ee07 3a90 	vmov	s15, r3
 800ba26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba2e:	4b7b      	ldr	r3, [pc, #492]	@ (800bc1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba36:	ee07 3a90 	vmov	s15, r3
 800ba3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba42:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800bc24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ba46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba5a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ba5e:	e087      	b.n	800bb70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	ee07 3a90 	vmov	s15, r3
 800ba66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba6a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bc28 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ba6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba72:	4b6a      	ldr	r3, [pc, #424]	@ (800bc1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba7a:	ee07 3a90 	vmov	s15, r3
 800ba7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba82:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba86:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800bc24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ba8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800baa2:	e065      	b.n	800bb70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	ee07 3a90 	vmov	s15, r3
 800baaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bc2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bab6:	4b59      	ldr	r3, [pc, #356]	@ (800bc1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800baba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800babe:	ee07 3a90 	vmov	s15, r3
 800bac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bac6:	ed97 6a03 	vldr	s12, [r7, #12]
 800baca:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800bc24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bad6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bade:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bae2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bae6:	e043      	b.n	800bb70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	ee07 3a90 	vmov	s15, r3
 800baee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baf2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bc30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800baf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bafa:	4b48      	ldr	r3, [pc, #288]	@ (800bc1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bafc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bafe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb02:	ee07 3a90 	vmov	s15, r3
 800bb06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb0e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800bc24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bb12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb2a:	e021      	b.n	800bb70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	ee07 3a90 	vmov	s15, r3
 800bb32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb36:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bc2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bb3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb3e:	4b37      	ldr	r3, [pc, #220]	@ (800bc1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb46:	ee07 3a90 	vmov	s15, r3
 800bb4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb52:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bc24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bb56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb6e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bb70:	4b2a      	ldr	r3, [pc, #168]	@ (800bc1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb74:	0a5b      	lsrs	r3, r3, #9
 800bb76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb7a:	ee07 3a90 	vmov	s15, r3
 800bb7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bb86:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb8a:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb96:	ee17 2a90 	vmov	r2, s15
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bb9e:	4b1f      	ldr	r3, [pc, #124]	@ (800bc1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bba2:	0c1b      	lsrs	r3, r3, #16
 800bba4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bba8:	ee07 3a90 	vmov	s15, r3
 800bbac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbb0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bbb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bbb8:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbc4:	ee17 2a90 	vmov	r2, s15
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800bbcc:	4b13      	ldr	r3, [pc, #76]	@ (800bc1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbd0:	0e1b      	lsrs	r3, r3, #24
 800bbd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bbd6:	ee07 3a90 	vmov	s15, r3
 800bbda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbde:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bbe2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bbe6:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbf2:	ee17 2a90 	vmov	r2, s15
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bbfa:	e008      	b.n	800bc0e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2200      	movs	r2, #0
 800bc06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	609a      	str	r2, [r3, #8]
}
 800bc0e:	bf00      	nop
 800bc10:	3724      	adds	r7, #36	@ 0x24
 800bc12:	46bd      	mov	sp, r7
 800bc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc18:	4770      	bx	lr
 800bc1a:	bf00      	nop
 800bc1c:	58024400 	.word	0x58024400
 800bc20:	03d09000 	.word	0x03d09000
 800bc24:	46000000 	.word	0x46000000
 800bc28:	4c742400 	.word	0x4c742400
 800bc2c:	4a742400 	.word	0x4a742400
 800bc30:	4bb71b00 	.word	0x4bb71b00

0800bc34 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800bc34:	b480      	push	{r7}
 800bc36:	b089      	sub	sp, #36	@ 0x24
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bc3c:	4ba1      	ldr	r3, [pc, #644]	@ (800bec4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc40:	f003 0303 	and.w	r3, r3, #3
 800bc44:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800bc46:	4b9f      	ldr	r3, [pc, #636]	@ (800bec4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc4a:	0d1b      	lsrs	r3, r3, #20
 800bc4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bc50:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bc52:	4b9c      	ldr	r3, [pc, #624]	@ (800bec4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc56:	0a1b      	lsrs	r3, r3, #8
 800bc58:	f003 0301 	and.w	r3, r3, #1
 800bc5c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bc5e:	4b99      	ldr	r3, [pc, #612]	@ (800bec4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc62:	08db      	lsrs	r3, r3, #3
 800bc64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bc68:	693a      	ldr	r2, [r7, #16]
 800bc6a:	fb02 f303 	mul.w	r3, r2, r3
 800bc6e:	ee07 3a90 	vmov	s15, r3
 800bc72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc76:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	f000 8111 	beq.w	800bea4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bc82:	69bb      	ldr	r3, [r7, #24]
 800bc84:	2b02      	cmp	r3, #2
 800bc86:	f000 8083 	beq.w	800bd90 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bc8a:	69bb      	ldr	r3, [r7, #24]
 800bc8c:	2b02      	cmp	r3, #2
 800bc8e:	f200 80a1 	bhi.w	800bdd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bc92:	69bb      	ldr	r3, [r7, #24]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d003      	beq.n	800bca0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bc98:	69bb      	ldr	r3, [r7, #24]
 800bc9a:	2b01      	cmp	r3, #1
 800bc9c:	d056      	beq.n	800bd4c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bc9e:	e099      	b.n	800bdd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bca0:	4b88      	ldr	r3, [pc, #544]	@ (800bec4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	f003 0320 	and.w	r3, r3, #32
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d02d      	beq.n	800bd08 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bcac:	4b85      	ldr	r3, [pc, #532]	@ (800bec4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	08db      	lsrs	r3, r3, #3
 800bcb2:	f003 0303 	and.w	r3, r3, #3
 800bcb6:	4a84      	ldr	r2, [pc, #528]	@ (800bec8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bcb8:	fa22 f303 	lsr.w	r3, r2, r3
 800bcbc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	ee07 3a90 	vmov	s15, r3
 800bcc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcc8:	697b      	ldr	r3, [r7, #20]
 800bcca:	ee07 3a90 	vmov	s15, r3
 800bcce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcd6:	4b7b      	ldr	r3, [pc, #492]	@ (800bec4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bcd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcde:	ee07 3a90 	vmov	s15, r3
 800bce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bce6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800becc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bcee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bcfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd02:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bd06:	e087      	b.n	800be18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	ee07 3a90 	vmov	s15, r3
 800bd0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd12:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bed0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bd16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd1a:	4b6a      	ldr	r3, [pc, #424]	@ (800bec4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd22:	ee07 3a90 	vmov	s15, r3
 800bd26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd2a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd2e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800becc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bd32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd4a:	e065      	b.n	800be18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	ee07 3a90 	vmov	s15, r3
 800bd52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd56:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bed4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bd5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd5e:	4b59      	ldr	r3, [pc, #356]	@ (800bec4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd66:	ee07 3a90 	vmov	s15, r3
 800bd6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd72:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800becc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bd76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd8e:	e043      	b.n	800be18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	ee07 3a90 	vmov	s15, r3
 800bd96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd9a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bed8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bd9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bda2:	4b48      	ldr	r3, [pc, #288]	@ (800bec4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bda4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bda6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdaa:	ee07 3a90 	vmov	s15, r3
 800bdae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdb6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800becc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bdba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bdc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bdd2:	e021      	b.n	800be18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	ee07 3a90 	vmov	s15, r3
 800bdda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdde:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bed4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bde2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bde6:	4b37      	ldr	r3, [pc, #220]	@ (800bec4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bde8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdee:	ee07 3a90 	vmov	s15, r3
 800bdf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdf6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdfa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800becc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bdfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be16:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800be18:	4b2a      	ldr	r3, [pc, #168]	@ (800bec4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be1c:	0a5b      	lsrs	r3, r3, #9
 800be1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be22:	ee07 3a90 	vmov	s15, r3
 800be26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800be2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be32:	edd7 6a07 	vldr	s13, [r7, #28]
 800be36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be3e:	ee17 2a90 	vmov	r2, s15
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800be46:	4b1f      	ldr	r3, [pc, #124]	@ (800bec4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be4a:	0c1b      	lsrs	r3, r3, #16
 800be4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be50:	ee07 3a90 	vmov	s15, r3
 800be54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be58:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800be5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be60:	edd7 6a07 	vldr	s13, [r7, #28]
 800be64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be6c:	ee17 2a90 	vmov	r2, s15
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800be74:	4b13      	ldr	r3, [pc, #76]	@ (800bec4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be78:	0e1b      	lsrs	r3, r3, #24
 800be7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be7e:	ee07 3a90 	vmov	s15, r3
 800be82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800be8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be8e:	edd7 6a07 	vldr	s13, [r7, #28]
 800be92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be9a:	ee17 2a90 	vmov	r2, s15
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bea2:	e008      	b.n	800beb6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2200      	movs	r2, #0
 800bea8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2200      	movs	r2, #0
 800beae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2200      	movs	r2, #0
 800beb4:	609a      	str	r2, [r3, #8]
}
 800beb6:	bf00      	nop
 800beb8:	3724      	adds	r7, #36	@ 0x24
 800beba:	46bd      	mov	sp, r7
 800bebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec0:	4770      	bx	lr
 800bec2:	bf00      	nop
 800bec4:	58024400 	.word	0x58024400
 800bec8:	03d09000 	.word	0x03d09000
 800becc:	46000000 	.word	0x46000000
 800bed0:	4c742400 	.word	0x4c742400
 800bed4:	4a742400 	.word	0x4a742400
 800bed8:	4bb71b00 	.word	0x4bb71b00

0800bedc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b084      	sub	sp, #16
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
 800bee4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bee6:	2300      	movs	r3, #0
 800bee8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800beea:	4b53      	ldr	r3, [pc, #332]	@ (800c038 <RCCEx_PLL2_Config+0x15c>)
 800beec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800beee:	f003 0303 	and.w	r3, r3, #3
 800bef2:	2b03      	cmp	r3, #3
 800bef4:	d101      	bne.n	800befa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bef6:	2301      	movs	r3, #1
 800bef8:	e099      	b.n	800c02e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800befa:	4b4f      	ldr	r3, [pc, #316]	@ (800c038 <RCCEx_PLL2_Config+0x15c>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	4a4e      	ldr	r2, [pc, #312]	@ (800c038 <RCCEx_PLL2_Config+0x15c>)
 800bf00:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bf04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf06:	f7f9 fc71 	bl	80057ec <HAL_GetTick>
 800bf0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bf0c:	e008      	b.n	800bf20 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bf0e:	f7f9 fc6d 	bl	80057ec <HAL_GetTick>
 800bf12:	4602      	mov	r2, r0
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	1ad3      	subs	r3, r2, r3
 800bf18:	2b02      	cmp	r3, #2
 800bf1a:	d901      	bls.n	800bf20 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bf1c:	2303      	movs	r3, #3
 800bf1e:	e086      	b.n	800c02e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bf20:	4b45      	ldr	r3, [pc, #276]	@ (800c038 <RCCEx_PLL2_Config+0x15c>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d1f0      	bne.n	800bf0e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bf2c:	4b42      	ldr	r3, [pc, #264]	@ (800c038 <RCCEx_PLL2_Config+0x15c>)
 800bf2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf30:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	031b      	lsls	r3, r3, #12
 800bf3a:	493f      	ldr	r1, [pc, #252]	@ (800c038 <RCCEx_PLL2_Config+0x15c>)
 800bf3c:	4313      	orrs	r3, r2
 800bf3e:	628b      	str	r3, [r1, #40]	@ 0x28
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	685b      	ldr	r3, [r3, #4]
 800bf44:	3b01      	subs	r3, #1
 800bf46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	689b      	ldr	r3, [r3, #8]
 800bf4e:	3b01      	subs	r3, #1
 800bf50:	025b      	lsls	r3, r3, #9
 800bf52:	b29b      	uxth	r3, r3
 800bf54:	431a      	orrs	r2, r3
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	68db      	ldr	r3, [r3, #12]
 800bf5a:	3b01      	subs	r3, #1
 800bf5c:	041b      	lsls	r3, r3, #16
 800bf5e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bf62:	431a      	orrs	r2, r3
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	691b      	ldr	r3, [r3, #16]
 800bf68:	3b01      	subs	r3, #1
 800bf6a:	061b      	lsls	r3, r3, #24
 800bf6c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bf70:	4931      	ldr	r1, [pc, #196]	@ (800c038 <RCCEx_PLL2_Config+0x15c>)
 800bf72:	4313      	orrs	r3, r2
 800bf74:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bf76:	4b30      	ldr	r3, [pc, #192]	@ (800c038 <RCCEx_PLL2_Config+0x15c>)
 800bf78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf7a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	695b      	ldr	r3, [r3, #20]
 800bf82:	492d      	ldr	r1, [pc, #180]	@ (800c038 <RCCEx_PLL2_Config+0x15c>)
 800bf84:	4313      	orrs	r3, r2
 800bf86:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bf88:	4b2b      	ldr	r3, [pc, #172]	@ (800c038 <RCCEx_PLL2_Config+0x15c>)
 800bf8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf8c:	f023 0220 	bic.w	r2, r3, #32
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	699b      	ldr	r3, [r3, #24]
 800bf94:	4928      	ldr	r1, [pc, #160]	@ (800c038 <RCCEx_PLL2_Config+0x15c>)
 800bf96:	4313      	orrs	r3, r2
 800bf98:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bf9a:	4b27      	ldr	r3, [pc, #156]	@ (800c038 <RCCEx_PLL2_Config+0x15c>)
 800bf9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf9e:	4a26      	ldr	r2, [pc, #152]	@ (800c038 <RCCEx_PLL2_Config+0x15c>)
 800bfa0:	f023 0310 	bic.w	r3, r3, #16
 800bfa4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bfa6:	4b24      	ldr	r3, [pc, #144]	@ (800c038 <RCCEx_PLL2_Config+0x15c>)
 800bfa8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bfaa:	4b24      	ldr	r3, [pc, #144]	@ (800c03c <RCCEx_PLL2_Config+0x160>)
 800bfac:	4013      	ands	r3, r2
 800bfae:	687a      	ldr	r2, [r7, #4]
 800bfb0:	69d2      	ldr	r2, [r2, #28]
 800bfb2:	00d2      	lsls	r2, r2, #3
 800bfb4:	4920      	ldr	r1, [pc, #128]	@ (800c038 <RCCEx_PLL2_Config+0x15c>)
 800bfb6:	4313      	orrs	r3, r2
 800bfb8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bfba:	4b1f      	ldr	r3, [pc, #124]	@ (800c038 <RCCEx_PLL2_Config+0x15c>)
 800bfbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfbe:	4a1e      	ldr	r2, [pc, #120]	@ (800c038 <RCCEx_PLL2_Config+0x15c>)
 800bfc0:	f043 0310 	orr.w	r3, r3, #16
 800bfc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d106      	bne.n	800bfda <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bfcc:	4b1a      	ldr	r3, [pc, #104]	@ (800c038 <RCCEx_PLL2_Config+0x15c>)
 800bfce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfd0:	4a19      	ldr	r2, [pc, #100]	@ (800c038 <RCCEx_PLL2_Config+0x15c>)
 800bfd2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bfd6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bfd8:	e00f      	b.n	800bffa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	2b01      	cmp	r3, #1
 800bfde:	d106      	bne.n	800bfee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bfe0:	4b15      	ldr	r3, [pc, #84]	@ (800c038 <RCCEx_PLL2_Config+0x15c>)
 800bfe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfe4:	4a14      	ldr	r2, [pc, #80]	@ (800c038 <RCCEx_PLL2_Config+0x15c>)
 800bfe6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bfea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bfec:	e005      	b.n	800bffa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bfee:	4b12      	ldr	r3, [pc, #72]	@ (800c038 <RCCEx_PLL2_Config+0x15c>)
 800bff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bff2:	4a11      	ldr	r2, [pc, #68]	@ (800c038 <RCCEx_PLL2_Config+0x15c>)
 800bff4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bff8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bffa:	4b0f      	ldr	r3, [pc, #60]	@ (800c038 <RCCEx_PLL2_Config+0x15c>)
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	4a0e      	ldr	r2, [pc, #56]	@ (800c038 <RCCEx_PLL2_Config+0x15c>)
 800c000:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c004:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c006:	f7f9 fbf1 	bl	80057ec <HAL_GetTick>
 800c00a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c00c:	e008      	b.n	800c020 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c00e:	f7f9 fbed 	bl	80057ec <HAL_GetTick>
 800c012:	4602      	mov	r2, r0
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	1ad3      	subs	r3, r2, r3
 800c018:	2b02      	cmp	r3, #2
 800c01a:	d901      	bls.n	800c020 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c01c:	2303      	movs	r3, #3
 800c01e:	e006      	b.n	800c02e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c020:	4b05      	ldr	r3, [pc, #20]	@ (800c038 <RCCEx_PLL2_Config+0x15c>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d0f0      	beq.n	800c00e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c02c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c02e:	4618      	mov	r0, r3
 800c030:	3710      	adds	r7, #16
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}
 800c036:	bf00      	nop
 800c038:	58024400 	.word	0x58024400
 800c03c:	ffff0007 	.word	0xffff0007

0800c040 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b084      	sub	sp, #16
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
 800c048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c04a:	2300      	movs	r3, #0
 800c04c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c04e:	4b53      	ldr	r3, [pc, #332]	@ (800c19c <RCCEx_PLL3_Config+0x15c>)
 800c050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c052:	f003 0303 	and.w	r3, r3, #3
 800c056:	2b03      	cmp	r3, #3
 800c058:	d101      	bne.n	800c05e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c05a:	2301      	movs	r3, #1
 800c05c:	e099      	b.n	800c192 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c05e:	4b4f      	ldr	r3, [pc, #316]	@ (800c19c <RCCEx_PLL3_Config+0x15c>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	4a4e      	ldr	r2, [pc, #312]	@ (800c19c <RCCEx_PLL3_Config+0x15c>)
 800c064:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c068:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c06a:	f7f9 fbbf 	bl	80057ec <HAL_GetTick>
 800c06e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c070:	e008      	b.n	800c084 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c072:	f7f9 fbbb 	bl	80057ec <HAL_GetTick>
 800c076:	4602      	mov	r2, r0
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	1ad3      	subs	r3, r2, r3
 800c07c:	2b02      	cmp	r3, #2
 800c07e:	d901      	bls.n	800c084 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c080:	2303      	movs	r3, #3
 800c082:	e086      	b.n	800c192 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c084:	4b45      	ldr	r3, [pc, #276]	@ (800c19c <RCCEx_PLL3_Config+0x15c>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d1f0      	bne.n	800c072 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c090:	4b42      	ldr	r3, [pc, #264]	@ (800c19c <RCCEx_PLL3_Config+0x15c>)
 800c092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c094:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	051b      	lsls	r3, r3, #20
 800c09e:	493f      	ldr	r1, [pc, #252]	@ (800c19c <RCCEx_PLL3_Config+0x15c>)
 800c0a0:	4313      	orrs	r3, r2
 800c0a2:	628b      	str	r3, [r1, #40]	@ 0x28
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	685b      	ldr	r3, [r3, #4]
 800c0a8:	3b01      	subs	r3, #1
 800c0aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	689b      	ldr	r3, [r3, #8]
 800c0b2:	3b01      	subs	r3, #1
 800c0b4:	025b      	lsls	r3, r3, #9
 800c0b6:	b29b      	uxth	r3, r3
 800c0b8:	431a      	orrs	r2, r3
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	68db      	ldr	r3, [r3, #12]
 800c0be:	3b01      	subs	r3, #1
 800c0c0:	041b      	lsls	r3, r3, #16
 800c0c2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c0c6:	431a      	orrs	r2, r3
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	691b      	ldr	r3, [r3, #16]
 800c0cc:	3b01      	subs	r3, #1
 800c0ce:	061b      	lsls	r3, r3, #24
 800c0d0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c0d4:	4931      	ldr	r1, [pc, #196]	@ (800c19c <RCCEx_PLL3_Config+0x15c>)
 800c0d6:	4313      	orrs	r3, r2
 800c0d8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c0da:	4b30      	ldr	r3, [pc, #192]	@ (800c19c <RCCEx_PLL3_Config+0x15c>)
 800c0dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0de:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	695b      	ldr	r3, [r3, #20]
 800c0e6:	492d      	ldr	r1, [pc, #180]	@ (800c19c <RCCEx_PLL3_Config+0x15c>)
 800c0e8:	4313      	orrs	r3, r2
 800c0ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c0ec:	4b2b      	ldr	r3, [pc, #172]	@ (800c19c <RCCEx_PLL3_Config+0x15c>)
 800c0ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0f0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	699b      	ldr	r3, [r3, #24]
 800c0f8:	4928      	ldr	r1, [pc, #160]	@ (800c19c <RCCEx_PLL3_Config+0x15c>)
 800c0fa:	4313      	orrs	r3, r2
 800c0fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c0fe:	4b27      	ldr	r3, [pc, #156]	@ (800c19c <RCCEx_PLL3_Config+0x15c>)
 800c100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c102:	4a26      	ldr	r2, [pc, #152]	@ (800c19c <RCCEx_PLL3_Config+0x15c>)
 800c104:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c108:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c10a:	4b24      	ldr	r3, [pc, #144]	@ (800c19c <RCCEx_PLL3_Config+0x15c>)
 800c10c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c10e:	4b24      	ldr	r3, [pc, #144]	@ (800c1a0 <RCCEx_PLL3_Config+0x160>)
 800c110:	4013      	ands	r3, r2
 800c112:	687a      	ldr	r2, [r7, #4]
 800c114:	69d2      	ldr	r2, [r2, #28]
 800c116:	00d2      	lsls	r2, r2, #3
 800c118:	4920      	ldr	r1, [pc, #128]	@ (800c19c <RCCEx_PLL3_Config+0x15c>)
 800c11a:	4313      	orrs	r3, r2
 800c11c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c11e:	4b1f      	ldr	r3, [pc, #124]	@ (800c19c <RCCEx_PLL3_Config+0x15c>)
 800c120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c122:	4a1e      	ldr	r2, [pc, #120]	@ (800c19c <RCCEx_PLL3_Config+0x15c>)
 800c124:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c128:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d106      	bne.n	800c13e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c130:	4b1a      	ldr	r3, [pc, #104]	@ (800c19c <RCCEx_PLL3_Config+0x15c>)
 800c132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c134:	4a19      	ldr	r2, [pc, #100]	@ (800c19c <RCCEx_PLL3_Config+0x15c>)
 800c136:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c13a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c13c:	e00f      	b.n	800c15e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	2b01      	cmp	r3, #1
 800c142:	d106      	bne.n	800c152 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c144:	4b15      	ldr	r3, [pc, #84]	@ (800c19c <RCCEx_PLL3_Config+0x15c>)
 800c146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c148:	4a14      	ldr	r2, [pc, #80]	@ (800c19c <RCCEx_PLL3_Config+0x15c>)
 800c14a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c14e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c150:	e005      	b.n	800c15e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c152:	4b12      	ldr	r3, [pc, #72]	@ (800c19c <RCCEx_PLL3_Config+0x15c>)
 800c154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c156:	4a11      	ldr	r2, [pc, #68]	@ (800c19c <RCCEx_PLL3_Config+0x15c>)
 800c158:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c15c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c15e:	4b0f      	ldr	r3, [pc, #60]	@ (800c19c <RCCEx_PLL3_Config+0x15c>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	4a0e      	ldr	r2, [pc, #56]	@ (800c19c <RCCEx_PLL3_Config+0x15c>)
 800c164:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c168:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c16a:	f7f9 fb3f 	bl	80057ec <HAL_GetTick>
 800c16e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c170:	e008      	b.n	800c184 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c172:	f7f9 fb3b 	bl	80057ec <HAL_GetTick>
 800c176:	4602      	mov	r2, r0
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	1ad3      	subs	r3, r2, r3
 800c17c:	2b02      	cmp	r3, #2
 800c17e:	d901      	bls.n	800c184 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c180:	2303      	movs	r3, #3
 800c182:	e006      	b.n	800c192 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c184:	4b05      	ldr	r3, [pc, #20]	@ (800c19c <RCCEx_PLL3_Config+0x15c>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d0f0      	beq.n	800c172 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c190:	7bfb      	ldrb	r3, [r7, #15]
}
 800c192:	4618      	mov	r0, r3
 800c194:	3710      	adds	r7, #16
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}
 800c19a:	bf00      	nop
 800c19c:	58024400 	.word	0x58024400
 800c1a0:	ffff0007 	.word	0xffff0007

0800c1a4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d101      	bne.n	800c1b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	e10f      	b.n	800c3d6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	4a87      	ldr	r2, [pc, #540]	@ (800c3e0 <HAL_SPI_Init+0x23c>)
 800c1c2:	4293      	cmp	r3, r2
 800c1c4:	d00f      	beq.n	800c1e6 <HAL_SPI_Init+0x42>
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	4a86      	ldr	r2, [pc, #536]	@ (800c3e4 <HAL_SPI_Init+0x240>)
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	d00a      	beq.n	800c1e6 <HAL_SPI_Init+0x42>
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	4a84      	ldr	r2, [pc, #528]	@ (800c3e8 <HAL_SPI_Init+0x244>)
 800c1d6:	4293      	cmp	r3, r2
 800c1d8:	d005      	beq.n	800c1e6 <HAL_SPI_Init+0x42>
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	68db      	ldr	r3, [r3, #12]
 800c1de:	2b0f      	cmp	r3, #15
 800c1e0:	d901      	bls.n	800c1e6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c1e2:	2301      	movs	r3, #1
 800c1e4:	e0f7      	b.n	800c3d6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	f001 f968 	bl	800d4bc <SPI_GetPacketSize>
 800c1ec:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	4a7b      	ldr	r2, [pc, #492]	@ (800c3e0 <HAL_SPI_Init+0x23c>)
 800c1f4:	4293      	cmp	r3, r2
 800c1f6:	d00c      	beq.n	800c212 <HAL_SPI_Init+0x6e>
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	4a79      	ldr	r2, [pc, #484]	@ (800c3e4 <HAL_SPI_Init+0x240>)
 800c1fe:	4293      	cmp	r3, r2
 800c200:	d007      	beq.n	800c212 <HAL_SPI_Init+0x6e>
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	4a78      	ldr	r2, [pc, #480]	@ (800c3e8 <HAL_SPI_Init+0x244>)
 800c208:	4293      	cmp	r3, r2
 800c20a:	d002      	beq.n	800c212 <HAL_SPI_Init+0x6e>
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	2b08      	cmp	r3, #8
 800c210:	d811      	bhi.n	800c236 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c216:	4a72      	ldr	r2, [pc, #456]	@ (800c3e0 <HAL_SPI_Init+0x23c>)
 800c218:	4293      	cmp	r3, r2
 800c21a:	d009      	beq.n	800c230 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	4a70      	ldr	r2, [pc, #448]	@ (800c3e4 <HAL_SPI_Init+0x240>)
 800c222:	4293      	cmp	r3, r2
 800c224:	d004      	beq.n	800c230 <HAL_SPI_Init+0x8c>
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	4a6f      	ldr	r2, [pc, #444]	@ (800c3e8 <HAL_SPI_Init+0x244>)
 800c22c:	4293      	cmp	r3, r2
 800c22e:	d104      	bne.n	800c23a <HAL_SPI_Init+0x96>
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	2b10      	cmp	r3, #16
 800c234:	d901      	bls.n	800c23a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c236:	2301      	movs	r3, #1
 800c238:	e0cd      	b.n	800c3d6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c240:	b2db      	uxtb	r3, r3
 800c242:	2b00      	cmp	r3, #0
 800c244:	d106      	bne.n	800c254 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2200      	movs	r2, #0
 800c24a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f7f8 f8c4 	bl	80043dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2202      	movs	r2, #2
 800c258:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	681a      	ldr	r2, [r3, #0]
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	f022 0201 	bic.w	r2, r2, #1
 800c26a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	689b      	ldr	r3, [r3, #8]
 800c272:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800c276:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	699b      	ldr	r3, [r3, #24]
 800c27c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c280:	d119      	bne.n	800c2b6 <HAL_SPI_Init+0x112>
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	685b      	ldr	r3, [r3, #4]
 800c286:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c28a:	d103      	bne.n	800c294 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c290:	2b00      	cmp	r3, #0
 800c292:	d008      	beq.n	800c2a6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d10c      	bne.n	800c2b6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c2a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c2a4:	d107      	bne.n	800c2b6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	681a      	ldr	r2, [r3, #0]
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c2b4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	685b      	ldr	r3, [r3, #4]
 800c2ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d00f      	beq.n	800c2e2 <HAL_SPI_Init+0x13e>
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	68db      	ldr	r3, [r3, #12]
 800c2c6:	2b06      	cmp	r3, #6
 800c2c8:	d90b      	bls.n	800c2e2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	430a      	orrs	r2, r1
 800c2de:	601a      	str	r2, [r3, #0]
 800c2e0:	e007      	b.n	800c2f2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	681a      	ldr	r2, [r3, #0]
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c2f0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	69da      	ldr	r2, [r3, #28]
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2fa:	431a      	orrs	r2, r3
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	431a      	orrs	r2, r3
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c304:	ea42 0103 	orr.w	r1, r2, r3
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	68da      	ldr	r2, [r3, #12]
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	430a      	orrs	r2, r1
 800c312:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c31c:	431a      	orrs	r2, r3
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c322:	431a      	orrs	r2, r3
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	699b      	ldr	r3, [r3, #24]
 800c328:	431a      	orrs	r2, r3
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	691b      	ldr	r3, [r3, #16]
 800c32e:	431a      	orrs	r2, r3
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	695b      	ldr	r3, [r3, #20]
 800c334:	431a      	orrs	r2, r3
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	6a1b      	ldr	r3, [r3, #32]
 800c33a:	431a      	orrs	r2, r3
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	685b      	ldr	r3, [r3, #4]
 800c340:	431a      	orrs	r2, r3
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c346:	431a      	orrs	r2, r3
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	689b      	ldr	r3, [r3, #8]
 800c34c:	431a      	orrs	r2, r3
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c352:	ea42 0103 	orr.w	r1, r2, r3
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	430a      	orrs	r2, r1
 800c360:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	685b      	ldr	r3, [r3, #4]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d113      	bne.n	800c392 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	689b      	ldr	r3, [r3, #8]
 800c370:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c37c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	689b      	ldr	r3, [r3, #8]
 800c384:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c390:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	f022 0201 	bic.w	r2, r2, #1
 800c3a0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	685b      	ldr	r3, [r3, #4]
 800c3a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d00a      	beq.n	800c3c4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	68db      	ldr	r3, [r3, #12]
 800c3b4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	430a      	orrs	r2, r1
 800c3c2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2201      	movs	r2, #1
 800c3d0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800c3d4:	2300      	movs	r3, #0
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3710      	adds	r7, #16
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}
 800c3de:	bf00      	nop
 800c3e0:	40013000 	.word	0x40013000
 800c3e4:	40003800 	.word	0x40003800
 800c3e8:	40003c00 	.word	0x40003c00

0800c3ec <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b088      	sub	sp, #32
 800c3f0:	af02      	add	r7, sp, #8
 800c3f2:	60f8      	str	r0, [r7, #12]
 800c3f4:	60b9      	str	r1, [r7, #8]
 800c3f6:	603b      	str	r3, [r7, #0]
 800c3f8:	4613      	mov	r3, r2
 800c3fa:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	3320      	adds	r3, #32
 800c402:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c404:	f7f9 f9f2 	bl	80057ec <HAL_GetTick>
 800c408:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c410:	b2db      	uxtb	r3, r3
 800c412:	2b01      	cmp	r3, #1
 800c414:	d001      	beq.n	800c41a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800c416:	2302      	movs	r3, #2
 800c418:	e1d1      	b.n	800c7be <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d002      	beq.n	800c426 <HAL_SPI_Transmit+0x3a>
 800c420:	88fb      	ldrh	r3, [r7, #6]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d101      	bne.n	800c42a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800c426:	2301      	movs	r3, #1
 800c428:	e1c9      	b.n	800c7be <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800c430:	2b01      	cmp	r3, #1
 800c432:	d101      	bne.n	800c438 <HAL_SPI_Transmit+0x4c>
 800c434:	2302      	movs	r3, #2
 800c436:	e1c2      	b.n	800c7be <HAL_SPI_Transmit+0x3d2>
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	2201      	movs	r2, #1
 800c43c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	2203      	movs	r2, #3
 800c444:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	2200      	movs	r2, #0
 800c44c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	68ba      	ldr	r2, [r7, #8]
 800c454:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	88fa      	ldrh	r2, [r7, #6]
 800c45a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	88fa      	ldrh	r2, [r7, #6]
 800c462:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	2200      	movs	r2, #0
 800c46a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	2200      	movs	r2, #0
 800c470:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	2200      	movs	r2, #0
 800c478:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	2200      	movs	r2, #0
 800c480:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	2200      	movs	r2, #0
 800c486:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	689b      	ldr	r3, [r3, #8]
 800c48c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800c490:	d108      	bne.n	800c4a4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	681a      	ldr	r2, [r3, #0]
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c4a0:	601a      	str	r2, [r3, #0]
 800c4a2:	e009      	b.n	800c4b8 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	68db      	ldr	r3, [r3, #12]
 800c4aa:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800c4b6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	685a      	ldr	r2, [r3, #4]
 800c4be:	4b96      	ldr	r3, [pc, #600]	@ (800c718 <HAL_SPI_Transmit+0x32c>)
 800c4c0:	4013      	ands	r3, r2
 800c4c2:	88f9      	ldrh	r1, [r7, #6]
 800c4c4:	68fa      	ldr	r2, [r7, #12]
 800c4c6:	6812      	ldr	r2, [r2, #0]
 800c4c8:	430b      	orrs	r3, r1
 800c4ca:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	681a      	ldr	r2, [r3, #0]
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	f042 0201 	orr.w	r2, r2, #1
 800c4da:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	685b      	ldr	r3, [r3, #4]
 800c4e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c4e4:	d107      	bne.n	800c4f6 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	681a      	ldr	r2, [r3, #0]
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c4f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	68db      	ldr	r3, [r3, #12]
 800c4fa:	2b0f      	cmp	r3, #15
 800c4fc:	d947      	bls.n	800c58e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c4fe:	e03f      	b.n	800c580 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	695b      	ldr	r3, [r3, #20]
 800c506:	f003 0302 	and.w	r3, r3, #2
 800c50a:	2b02      	cmp	r3, #2
 800c50c:	d114      	bne.n	800c538 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	6812      	ldr	r2, [r2, #0]
 800c518:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c51e:	1d1a      	adds	r2, r3, #4
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c52a:	b29b      	uxth	r3, r3
 800c52c:	3b01      	subs	r3, #1
 800c52e:	b29a      	uxth	r2, r3
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c536:	e023      	b.n	800c580 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c538:	f7f9 f958 	bl	80057ec <HAL_GetTick>
 800c53c:	4602      	mov	r2, r0
 800c53e:	693b      	ldr	r3, [r7, #16]
 800c540:	1ad3      	subs	r3, r2, r3
 800c542:	683a      	ldr	r2, [r7, #0]
 800c544:	429a      	cmp	r2, r3
 800c546:	d803      	bhi.n	800c550 <HAL_SPI_Transmit+0x164>
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c54e:	d102      	bne.n	800c556 <HAL_SPI_Transmit+0x16a>
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d114      	bne.n	800c580 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c556:	68f8      	ldr	r0, [r7, #12]
 800c558:	f000 fee2 	bl	800d320 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c562:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	2201      	movs	r2, #1
 800c570:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	2200      	movs	r2, #0
 800c578:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c57c:	2303      	movs	r3, #3
 800c57e:	e11e      	b.n	800c7be <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c586:	b29b      	uxth	r3, r3
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d1b9      	bne.n	800c500 <HAL_SPI_Transmit+0x114>
 800c58c:	e0f1      	b.n	800c772 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	68db      	ldr	r3, [r3, #12]
 800c592:	2b07      	cmp	r3, #7
 800c594:	f240 80e6 	bls.w	800c764 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c598:	e05d      	b.n	800c656 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	695b      	ldr	r3, [r3, #20]
 800c5a0:	f003 0302 	and.w	r3, r3, #2
 800c5a4:	2b02      	cmp	r3, #2
 800c5a6:	d132      	bne.n	800c60e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c5ae:	b29b      	uxth	r3, r3
 800c5b0:	2b01      	cmp	r3, #1
 800c5b2:	d918      	bls.n	800c5e6 <HAL_SPI_Transmit+0x1fa>
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d014      	beq.n	800c5e6 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	6812      	ldr	r2, [r2, #0]
 800c5c6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c5cc:	1d1a      	adds	r2, r3, #4
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c5d8:	b29b      	uxth	r3, r3
 800c5da:	3b02      	subs	r3, #2
 800c5dc:	b29a      	uxth	r2, r3
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c5e4:	e037      	b.n	800c656 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c5ea:	881a      	ldrh	r2, [r3, #0]
 800c5ec:	697b      	ldr	r3, [r7, #20]
 800c5ee:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c5f4:	1c9a      	adds	r2, r3, #2
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c600:	b29b      	uxth	r3, r3
 800c602:	3b01      	subs	r3, #1
 800c604:	b29a      	uxth	r2, r3
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c60c:	e023      	b.n	800c656 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c60e:	f7f9 f8ed 	bl	80057ec <HAL_GetTick>
 800c612:	4602      	mov	r2, r0
 800c614:	693b      	ldr	r3, [r7, #16]
 800c616:	1ad3      	subs	r3, r2, r3
 800c618:	683a      	ldr	r2, [r7, #0]
 800c61a:	429a      	cmp	r2, r3
 800c61c:	d803      	bhi.n	800c626 <HAL_SPI_Transmit+0x23a>
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c624:	d102      	bne.n	800c62c <HAL_SPI_Transmit+0x240>
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d114      	bne.n	800c656 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c62c:	68f8      	ldr	r0, [r7, #12]
 800c62e:	f000 fe77 	bl	800d320 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c638:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	2201      	movs	r2, #1
 800c646:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	2200      	movs	r2, #0
 800c64e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c652:	2303      	movs	r3, #3
 800c654:	e0b3      	b.n	800c7be <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c65c:	b29b      	uxth	r3, r3
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d19b      	bne.n	800c59a <HAL_SPI_Transmit+0x1ae>
 800c662:	e086      	b.n	800c772 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	695b      	ldr	r3, [r3, #20]
 800c66a:	f003 0302 	and.w	r3, r3, #2
 800c66e:	2b02      	cmp	r3, #2
 800c670:	d154      	bne.n	800c71c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c678:	b29b      	uxth	r3, r3
 800c67a:	2b03      	cmp	r3, #3
 800c67c:	d918      	bls.n	800c6b0 <HAL_SPI_Transmit+0x2c4>
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c682:	2b40      	cmp	r3, #64	@ 0x40
 800c684:	d914      	bls.n	800c6b0 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	6812      	ldr	r2, [r2, #0]
 800c690:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c696:	1d1a      	adds	r2, r3, #4
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c6a2:	b29b      	uxth	r3, r3
 800c6a4:	3b04      	subs	r3, #4
 800c6a6:	b29a      	uxth	r2, r3
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c6ae:	e059      	b.n	800c764 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c6b6:	b29b      	uxth	r3, r3
 800c6b8:	2b01      	cmp	r3, #1
 800c6ba:	d917      	bls.n	800c6ec <HAL_SPI_Transmit+0x300>
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d013      	beq.n	800c6ec <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c6c8:	881a      	ldrh	r2, [r3, #0]
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c6d2:	1c9a      	adds	r2, r3, #2
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c6de:	b29b      	uxth	r3, r3
 800c6e0:	3b02      	subs	r3, #2
 800c6e2:	b29a      	uxth	r2, r3
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c6ea:	e03b      	b.n	800c764 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	3320      	adds	r3, #32
 800c6f6:	7812      	ldrb	r2, [r2, #0]
 800c6f8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c6fe:	1c5a      	adds	r2, r3, #1
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c70a:	b29b      	uxth	r3, r3
 800c70c:	3b01      	subs	r3, #1
 800c70e:	b29a      	uxth	r2, r3
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c716:	e025      	b.n	800c764 <HAL_SPI_Transmit+0x378>
 800c718:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c71c:	f7f9 f866 	bl	80057ec <HAL_GetTick>
 800c720:	4602      	mov	r2, r0
 800c722:	693b      	ldr	r3, [r7, #16]
 800c724:	1ad3      	subs	r3, r2, r3
 800c726:	683a      	ldr	r2, [r7, #0]
 800c728:	429a      	cmp	r2, r3
 800c72a:	d803      	bhi.n	800c734 <HAL_SPI_Transmit+0x348>
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c732:	d102      	bne.n	800c73a <HAL_SPI_Transmit+0x34e>
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d114      	bne.n	800c764 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c73a:	68f8      	ldr	r0, [r7, #12]
 800c73c:	f000 fdf0 	bl	800d320 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c746:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	2201      	movs	r2, #1
 800c754:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	2200      	movs	r2, #0
 800c75c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c760:	2303      	movs	r3, #3
 800c762:	e02c      	b.n	800c7be <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c76a:	b29b      	uxth	r3, r3
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	f47f af79 	bne.w	800c664 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	9300      	str	r3, [sp, #0]
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	2200      	movs	r2, #0
 800c77a:	2108      	movs	r1, #8
 800c77c:	68f8      	ldr	r0, [r7, #12]
 800c77e:	f000 fe6f 	bl	800d460 <SPI_WaitOnFlagUntilTimeout>
 800c782:	4603      	mov	r3, r0
 800c784:	2b00      	cmp	r3, #0
 800c786:	d007      	beq.n	800c798 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c78e:	f043 0220 	orr.w	r2, r3, #32
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c798:	68f8      	ldr	r0, [r7, #12]
 800c79a:	f000 fdc1 	bl	800d320 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	2201      	movs	r2, #1
 800c7a2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d001      	beq.n	800c7bc <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	e000      	b.n	800c7be <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800c7bc:	2300      	movs	r3, #0
  }
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	3718      	adds	r7, #24
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}
 800c7c6:	bf00      	nop

0800c7c8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b088      	sub	sp, #32
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	60f8      	str	r0, [r7, #12]
 800c7d0:	60b9      	str	r1, [r7, #8]
 800c7d2:	603b      	str	r3, [r7, #0]
 800c7d4:	4613      	mov	r3, r2
 800c7d6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7dc:	095b      	lsrs	r3, r3, #5
 800c7de:	b29b      	uxth	r3, r3
 800c7e0:	3301      	adds	r3, #1
 800c7e2:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	3330      	adds	r3, #48	@ 0x30
 800c7ea:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c7ec:	f7f8 fffe 	bl	80057ec <HAL_GetTick>
 800c7f0:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c7f8:	b2db      	uxtb	r3, r3
 800c7fa:	2b01      	cmp	r3, #1
 800c7fc:	d001      	beq.n	800c802 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800c7fe:	2302      	movs	r3, #2
 800c800:	e250      	b.n	800cca4 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d002      	beq.n	800c80e <HAL_SPI_Receive+0x46>
 800c808:	88fb      	ldrh	r3, [r7, #6]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d101      	bne.n	800c812 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800c80e:	2301      	movs	r3, #1
 800c810:	e248      	b.n	800cca4 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800c818:	2b01      	cmp	r3, #1
 800c81a:	d101      	bne.n	800c820 <HAL_SPI_Receive+0x58>
 800c81c:	2302      	movs	r3, #2
 800c81e:	e241      	b.n	800cca4 <HAL_SPI_Receive+0x4dc>
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	2201      	movs	r2, #1
 800c824:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	2204      	movs	r2, #4
 800c82c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	2200      	movs	r2, #0
 800c834:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	68ba      	ldr	r2, [r7, #8]
 800c83c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	88fa      	ldrh	r2, [r7, #6]
 800c842:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	88fa      	ldrh	r2, [r7, #6]
 800c84a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	2200      	movs	r2, #0
 800c852:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	2200      	movs	r2, #0
 800c858:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	2200      	movs	r2, #0
 800c860:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	2200      	movs	r2, #0
 800c868:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	2200      	movs	r2, #0
 800c86e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	689b      	ldr	r3, [r3, #8]
 800c874:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800c878:	d108      	bne.n	800c88c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	681a      	ldr	r2, [r3, #0]
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c888:	601a      	str	r2, [r3, #0]
 800c88a:	e009      	b.n	800c8a0 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	68db      	ldr	r3, [r3, #12]
 800c892:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800c89e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	685a      	ldr	r2, [r3, #4]
 800c8a6:	4b95      	ldr	r3, [pc, #596]	@ (800cafc <HAL_SPI_Receive+0x334>)
 800c8a8:	4013      	ands	r3, r2
 800c8aa:	88f9      	ldrh	r1, [r7, #6]
 800c8ac:	68fa      	ldr	r2, [r7, #12]
 800c8ae:	6812      	ldr	r2, [r2, #0]
 800c8b0:	430b      	orrs	r3, r1
 800c8b2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	681a      	ldr	r2, [r3, #0]
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	f042 0201 	orr.w	r2, r2, #1
 800c8c2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	685b      	ldr	r3, [r3, #4]
 800c8c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c8cc:	d107      	bne.n	800c8de <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	681a      	ldr	r2, [r3, #0]
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c8dc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	68db      	ldr	r3, [r3, #12]
 800c8e2:	2b0f      	cmp	r3, #15
 800c8e4:	d96c      	bls.n	800c9c0 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c8e6:	e064      	b.n	800c9b2 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	695b      	ldr	r3, [r3, #20]
 800c8ee:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	695b      	ldr	r3, [r3, #20]
 800c8f6:	f003 0301 	and.w	r3, r3, #1
 800c8fa:	2b01      	cmp	r3, #1
 800c8fc:	d114      	bne.n	800c928 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	681a      	ldr	r2, [r3, #0]
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c906:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c908:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c90e:	1d1a      	adds	r2, r3, #4
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c91a:	b29b      	uxth	r3, r3
 800c91c:	3b01      	subs	r3, #1
 800c91e:	b29a      	uxth	r2, r3
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c926:	e044      	b.n	800c9b2 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c92e:	b29b      	uxth	r3, r3
 800c930:	8bfa      	ldrh	r2, [r7, #30]
 800c932:	429a      	cmp	r2, r3
 800c934:	d919      	bls.n	800c96a <HAL_SPI_Receive+0x1a2>
 800c936:	693b      	ldr	r3, [r7, #16]
 800c938:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d014      	beq.n	800c96a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	681a      	ldr	r2, [r3, #0]
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c948:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c94a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c950:	1d1a      	adds	r2, r3, #4
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c95c:	b29b      	uxth	r3, r3
 800c95e:	3b01      	subs	r3, #1
 800c960:	b29a      	uxth	r2, r3
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c968:	e023      	b.n	800c9b2 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c96a:	f7f8 ff3f 	bl	80057ec <HAL_GetTick>
 800c96e:	4602      	mov	r2, r0
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	1ad3      	subs	r3, r2, r3
 800c974:	683a      	ldr	r2, [r7, #0]
 800c976:	429a      	cmp	r2, r3
 800c978:	d803      	bhi.n	800c982 <HAL_SPI_Receive+0x1ba>
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c980:	d102      	bne.n	800c988 <HAL_SPI_Receive+0x1c0>
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d114      	bne.n	800c9b2 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c988:	68f8      	ldr	r0, [r7, #12]
 800c98a:	f000 fcc9 	bl	800d320 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c994:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	2201      	movs	r2, #1
 800c9a2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c9ae:	2303      	movs	r3, #3
 800c9b0:	e178      	b.n	800cca4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c9b8:	b29b      	uxth	r3, r3
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d194      	bne.n	800c8e8 <HAL_SPI_Receive+0x120>
 800c9be:	e15e      	b.n	800cc7e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	68db      	ldr	r3, [r3, #12]
 800c9c4:	2b07      	cmp	r3, #7
 800c9c6:	f240 8153 	bls.w	800cc70 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c9ca:	e08f      	b.n	800caec <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	695b      	ldr	r3, [r3, #20]
 800c9d2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	695b      	ldr	r3, [r3, #20]
 800c9da:	f003 0301 	and.w	r3, r3, #1
 800c9de:	2b01      	cmp	r3, #1
 800c9e0:	d114      	bne.n	800ca0c <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c9e6:	69ba      	ldr	r2, [r7, #24]
 800c9e8:	8812      	ldrh	r2, [r2, #0]
 800c9ea:	b292      	uxth	r2, r2
 800c9ec:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c9f2:	1c9a      	adds	r2, r3, #2
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c9fe:	b29b      	uxth	r3, r3
 800ca00:	3b01      	subs	r3, #1
 800ca02:	b29a      	uxth	r2, r3
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ca0a:	e06f      	b.n	800caec <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ca12:	b29b      	uxth	r3, r3
 800ca14:	8bfa      	ldrh	r2, [r7, #30]
 800ca16:	429a      	cmp	r2, r3
 800ca18:	d924      	bls.n	800ca64 <HAL_SPI_Receive+0x29c>
 800ca1a:	693b      	ldr	r3, [r7, #16]
 800ca1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d01f      	beq.n	800ca64 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca28:	69ba      	ldr	r2, [r7, #24]
 800ca2a:	8812      	ldrh	r2, [r2, #0]
 800ca2c:	b292      	uxth	r2, r2
 800ca2e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca34:	1c9a      	adds	r2, r3, #2
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca3e:	69ba      	ldr	r2, [r7, #24]
 800ca40:	8812      	ldrh	r2, [r2, #0]
 800ca42:	b292      	uxth	r2, r2
 800ca44:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca4a:	1c9a      	adds	r2, r3, #2
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ca56:	b29b      	uxth	r3, r3
 800ca58:	3b02      	subs	r3, #2
 800ca5a:	b29a      	uxth	r2, r3
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ca62:	e043      	b.n	800caec <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ca6a:	b29b      	uxth	r3, r3
 800ca6c:	2b01      	cmp	r3, #1
 800ca6e:	d119      	bne.n	800caa4 <HAL_SPI_Receive+0x2dc>
 800ca70:	693b      	ldr	r3, [r7, #16]
 800ca72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d014      	beq.n	800caa4 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca7e:	69ba      	ldr	r2, [r7, #24]
 800ca80:	8812      	ldrh	r2, [r2, #0]
 800ca82:	b292      	uxth	r2, r2
 800ca84:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca8a:	1c9a      	adds	r2, r3, #2
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ca96:	b29b      	uxth	r3, r3
 800ca98:	3b01      	subs	r3, #1
 800ca9a:	b29a      	uxth	r2, r3
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800caa2:	e023      	b.n	800caec <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800caa4:	f7f8 fea2 	bl	80057ec <HAL_GetTick>
 800caa8:	4602      	mov	r2, r0
 800caaa:	697b      	ldr	r3, [r7, #20]
 800caac:	1ad3      	subs	r3, r2, r3
 800caae:	683a      	ldr	r2, [r7, #0]
 800cab0:	429a      	cmp	r2, r3
 800cab2:	d803      	bhi.n	800cabc <HAL_SPI_Receive+0x2f4>
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caba:	d102      	bne.n	800cac2 <HAL_SPI_Receive+0x2fa>
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d114      	bne.n	800caec <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cac2:	68f8      	ldr	r0, [r7, #12]
 800cac4:	f000 fc2c 	bl	800d320 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cace:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	2201      	movs	r2, #1
 800cadc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	2200      	movs	r2, #0
 800cae4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800cae8:	2303      	movs	r3, #3
 800caea:	e0db      	b.n	800cca4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800caf2:	b29b      	uxth	r3, r3
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	f47f af69 	bne.w	800c9cc <HAL_SPI_Receive+0x204>
 800cafa:	e0c0      	b.n	800cc7e <HAL_SPI_Receive+0x4b6>
 800cafc:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	695b      	ldr	r3, [r3, #20]
 800cb06:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	695b      	ldr	r3, [r3, #20]
 800cb0e:	f003 0301 	and.w	r3, r3, #1
 800cb12:	2b01      	cmp	r3, #1
 800cb14:	d117      	bne.n	800cb46 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb22:	7812      	ldrb	r2, [r2, #0]
 800cb24:	b2d2      	uxtb	r2, r2
 800cb26:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb2c:	1c5a      	adds	r2, r3, #1
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cb38:	b29b      	uxth	r3, r3
 800cb3a:	3b01      	subs	r3, #1
 800cb3c:	b29a      	uxth	r2, r3
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cb44:	e094      	b.n	800cc70 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cb4c:	b29b      	uxth	r3, r3
 800cb4e:	8bfa      	ldrh	r2, [r7, #30]
 800cb50:	429a      	cmp	r2, r3
 800cb52:	d946      	bls.n	800cbe2 <HAL_SPI_Receive+0x41a>
 800cb54:	693b      	ldr	r3, [r7, #16]
 800cb56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d041      	beq.n	800cbe2 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb6a:	7812      	ldrb	r2, [r2, #0]
 800cb6c:	b2d2      	uxtb	r2, r2
 800cb6e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb74:	1c5a      	adds	r2, r3, #1
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb86:	7812      	ldrb	r2, [r2, #0]
 800cb88:	b2d2      	uxtb	r2, r2
 800cb8a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb90:	1c5a      	adds	r2, r3, #1
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cba2:	7812      	ldrb	r2, [r2, #0]
 800cba4:	b2d2      	uxtb	r2, r2
 800cba6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cbac:	1c5a      	adds	r2, r3, #1
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cbbe:	7812      	ldrb	r2, [r2, #0]
 800cbc0:	b2d2      	uxtb	r2, r2
 800cbc2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cbc8:	1c5a      	adds	r2, r3, #1
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cbd4:	b29b      	uxth	r3, r3
 800cbd6:	3b04      	subs	r3, #4
 800cbd8:	b29a      	uxth	r2, r3
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cbe0:	e046      	b.n	800cc70 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cbe8:	b29b      	uxth	r3, r3
 800cbea:	2b03      	cmp	r3, #3
 800cbec:	d81c      	bhi.n	800cc28 <HAL_SPI_Receive+0x460>
 800cbee:	693b      	ldr	r3, [r7, #16]
 800cbf0:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d017      	beq.n	800cc28 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc04:	7812      	ldrb	r2, [r2, #0]
 800cc06:	b2d2      	uxtb	r2, r2
 800cc08:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc0e:	1c5a      	adds	r2, r3, #1
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cc1a:	b29b      	uxth	r3, r3
 800cc1c:	3b01      	subs	r3, #1
 800cc1e:	b29a      	uxth	r2, r3
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cc26:	e023      	b.n	800cc70 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cc28:	f7f8 fde0 	bl	80057ec <HAL_GetTick>
 800cc2c:	4602      	mov	r2, r0
 800cc2e:	697b      	ldr	r3, [r7, #20]
 800cc30:	1ad3      	subs	r3, r2, r3
 800cc32:	683a      	ldr	r2, [r7, #0]
 800cc34:	429a      	cmp	r2, r3
 800cc36:	d803      	bhi.n	800cc40 <HAL_SPI_Receive+0x478>
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc3e:	d102      	bne.n	800cc46 <HAL_SPI_Receive+0x47e>
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d114      	bne.n	800cc70 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cc46:	68f8      	ldr	r0, [r7, #12]
 800cc48:	f000 fb6a 	bl	800d320 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cc52:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	2201      	movs	r2, #1
 800cc60:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	2200      	movs	r2, #0
 800cc68:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800cc6c:	2303      	movs	r3, #3
 800cc6e:	e019      	b.n	800cca4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cc76:	b29b      	uxth	r3, r3
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	f47f af41 	bne.w	800cb00 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800cc7e:	68f8      	ldr	r0, [r7, #12]
 800cc80:	f000 fb4e 	bl	800d320 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	2201      	movs	r2, #1
 800cc88:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d001      	beq.n	800cca2 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800cc9e:	2301      	movs	r3, #1
 800cca0:	e000      	b.n	800cca4 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800cca2:	2300      	movs	r3, #0
  }
}
 800cca4:	4618      	mov	r0, r3
 800cca6:	3720      	adds	r7, #32
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}

0800ccac <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b08e      	sub	sp, #56	@ 0x38
 800ccb0:	af02      	add	r7, sp, #8
 800ccb2:	60f8      	str	r0, [r7, #12]
 800ccb4:	60b9      	str	r1, [r7, #8]
 800ccb6:	607a      	str	r2, [r7, #4]
 800ccb8:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	3320      	adds	r3, #32
 800ccc0:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	3330      	adds	r3, #48	@ 0x30
 800ccc8:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ccce:	095b      	lsrs	r3, r3, #5
 800ccd0:	b29b      	uxth	r3, r3
 800ccd2:	3301      	adds	r3, #1
 800ccd4:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ccd6:	f7f8 fd89 	bl	80057ec <HAL_GetTick>
 800ccda:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800ccdc:	887b      	ldrh	r3, [r7, #2]
 800ccde:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800cce0:	887b      	ldrh	r3, [r7, #2]
 800cce2:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ccea:	b2db      	uxtb	r3, r3
 800ccec:	2b01      	cmp	r3, #1
 800ccee:	d001      	beq.n	800ccf4 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800ccf0:	2302      	movs	r3, #2
 800ccf2:	e310      	b.n	800d316 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d005      	beq.n	800cd06 <HAL_SPI_TransmitReceive+0x5a>
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d002      	beq.n	800cd06 <HAL_SPI_TransmitReceive+0x5a>
 800cd00:	887b      	ldrh	r3, [r7, #2]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d101      	bne.n	800cd0a <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800cd06:	2301      	movs	r3, #1
 800cd08:	e305      	b.n	800d316 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800cd10:	2b01      	cmp	r3, #1
 800cd12:	d101      	bne.n	800cd18 <HAL_SPI_TransmitReceive+0x6c>
 800cd14:	2302      	movs	r3, #2
 800cd16:	e2fe      	b.n	800d316 <HAL_SPI_TransmitReceive+0x66a>
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	2201      	movs	r2, #1
 800cd1c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	2205      	movs	r2, #5
 800cd24:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	687a      	ldr	r2, [r7, #4]
 800cd34:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	887a      	ldrh	r2, [r7, #2]
 800cd3a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	887a      	ldrh	r2, [r7, #2]
 800cd42:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	68ba      	ldr	r2, [r7, #8]
 800cd4a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	887a      	ldrh	r2, [r7, #2]
 800cd50:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	887a      	ldrh	r2, [r7, #2]
 800cd58:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	2200      	movs	r2, #0
 800cd60:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	2200      	movs	r2, #0
 800cd66:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	68da      	ldr	r2, [r3, #12]
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800cd76:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	4a70      	ldr	r2, [pc, #448]	@ (800cf40 <HAL_SPI_TransmitReceive+0x294>)
 800cd7e:	4293      	cmp	r3, r2
 800cd80:	d009      	beq.n	800cd96 <HAL_SPI_TransmitReceive+0xea>
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	4a6f      	ldr	r2, [pc, #444]	@ (800cf44 <HAL_SPI_TransmitReceive+0x298>)
 800cd88:	4293      	cmp	r3, r2
 800cd8a:	d004      	beq.n	800cd96 <HAL_SPI_TransmitReceive+0xea>
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	4a6d      	ldr	r2, [pc, #436]	@ (800cf48 <HAL_SPI_TransmitReceive+0x29c>)
 800cd92:	4293      	cmp	r3, r2
 800cd94:	d102      	bne.n	800cd9c <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800cd96:	2310      	movs	r3, #16
 800cd98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cd9a:	e001      	b.n	800cda0 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800cd9c:	2308      	movs	r3, #8
 800cd9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	685a      	ldr	r2, [r3, #4]
 800cda6:	4b69      	ldr	r3, [pc, #420]	@ (800cf4c <HAL_SPI_TransmitReceive+0x2a0>)
 800cda8:	4013      	ands	r3, r2
 800cdaa:	8879      	ldrh	r1, [r7, #2]
 800cdac:	68fa      	ldr	r2, [r7, #12]
 800cdae:	6812      	ldr	r2, [r2, #0]
 800cdb0:	430b      	orrs	r3, r1
 800cdb2:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	681a      	ldr	r2, [r3, #0]
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f042 0201 	orr.w	r2, r2, #1
 800cdc2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	685b      	ldr	r3, [r3, #4]
 800cdc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cdcc:	d107      	bne.n	800cdde <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	681a      	ldr	r2, [r3, #0]
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cddc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	68db      	ldr	r3, [r3, #12]
 800cde2:	2b0f      	cmp	r3, #15
 800cde4:	f240 80a2 	bls.w	800cf2c <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800cde8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdea:	089b      	lsrs	r3, r3, #2
 800cdec:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cdee:	e094      	b.n	800cf1a <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	695b      	ldr	r3, [r3, #20]
 800cdf6:	f003 0302 	and.w	r3, r3, #2
 800cdfa:	2b02      	cmp	r3, #2
 800cdfc:	d120      	bne.n	800ce40 <HAL_SPI_TransmitReceive+0x194>
 800cdfe:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d01d      	beq.n	800ce40 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800ce04:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ce06:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800ce08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce0a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800ce0c:	429a      	cmp	r2, r3
 800ce0e:	d217      	bcs.n	800ce40 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	6812      	ldr	r2, [r2, #0]
 800ce1a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ce20:	1d1a      	adds	r2, r3, #4
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ce2c:	b29b      	uxth	r3, r3
 800ce2e:	3b01      	subs	r3, #1
 800ce30:	b29a      	uxth	r2, r3
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ce3e:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	695b      	ldr	r3, [r3, #20]
 800ce46:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800ce48:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d065      	beq.n	800cf1a <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	695b      	ldr	r3, [r3, #20]
 800ce54:	f003 0301 	and.w	r3, r3, #1
 800ce58:	2b01      	cmp	r3, #1
 800ce5a:	d118      	bne.n	800ce8e <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	681a      	ldr	r2, [r3, #0]
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce64:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800ce66:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce6c:	1d1a      	adds	r2, r3, #4
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ce78:	b29b      	uxth	r3, r3
 800ce7a:	3b01      	subs	r3, #1
 800ce7c:	b29a      	uxth	r2, r3
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ce8a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ce8c:	e045      	b.n	800cf1a <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ce8e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ce90:	8bfb      	ldrh	r3, [r7, #30]
 800ce92:	429a      	cmp	r2, r3
 800ce94:	d21d      	bcs.n	800ced2 <HAL_SPI_TransmitReceive+0x226>
 800ce96:	697b      	ldr	r3, [r7, #20]
 800ce98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d018      	beq.n	800ced2 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	681a      	ldr	r2, [r3, #0]
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cea8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800ceaa:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ceb0:	1d1a      	adds	r2, r3, #4
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cebc:	b29b      	uxth	r3, r3
 800cebe:	3b01      	subs	r3, #1
 800cec0:	b29a      	uxth	r2, r3
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cece:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ced0:	e023      	b.n	800cf1a <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ced2:	f7f8 fc8b 	bl	80057ec <HAL_GetTick>
 800ced6:	4602      	mov	r2, r0
 800ced8:	69bb      	ldr	r3, [r7, #24]
 800ceda:	1ad3      	subs	r3, r2, r3
 800cedc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cede:	429a      	cmp	r2, r3
 800cee0:	d803      	bhi.n	800ceea <HAL_SPI_TransmitReceive+0x23e>
 800cee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cee8:	d102      	bne.n	800cef0 <HAL_SPI_TransmitReceive+0x244>
 800ceea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d114      	bne.n	800cf1a <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800cef0:	68f8      	ldr	r0, [r7, #12]
 800cef2:	f000 fa15 	bl	800d320 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cefc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	2201      	movs	r2, #1
 800cf0a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	2200      	movs	r2, #0
 800cf12:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800cf16:	2303      	movs	r3, #3
 800cf18:	e1fd      	b.n	800d316 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cf1a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	f47f af67 	bne.w	800cdf0 <HAL_SPI_TransmitReceive+0x144>
 800cf22:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	f47f af63 	bne.w	800cdf0 <HAL_SPI_TransmitReceive+0x144>
 800cf2a:	e1ce      	b.n	800d2ca <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	68db      	ldr	r3, [r3, #12]
 800cf30:	2b07      	cmp	r3, #7
 800cf32:	f240 81c2 	bls.w	800d2ba <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800cf36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf38:	085b      	lsrs	r3, r3, #1
 800cf3a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cf3c:	e0c9      	b.n	800d0d2 <HAL_SPI_TransmitReceive+0x426>
 800cf3e:	bf00      	nop
 800cf40:	40013000 	.word	0x40013000
 800cf44:	40003800 	.word	0x40003800
 800cf48:	40003c00 	.word	0x40003c00
 800cf4c:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	695b      	ldr	r3, [r3, #20]
 800cf56:	f003 0302 	and.w	r3, r3, #2
 800cf5a:	2b02      	cmp	r3, #2
 800cf5c:	d11f      	bne.n	800cf9e <HAL_SPI_TransmitReceive+0x2f2>
 800cf5e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d01c      	beq.n	800cf9e <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800cf64:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800cf66:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800cf68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf6a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800cf6c:	429a      	cmp	r2, r3
 800cf6e:	d216      	bcs.n	800cf9e <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cf74:	881a      	ldrh	r2, [r3, #0]
 800cf76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf78:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cf7e:	1c9a      	adds	r2, r3, #2
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cf8a:	b29b      	uxth	r3, r3
 800cf8c:	3b01      	subs	r3, #1
 800cf8e:	b29a      	uxth	r2, r3
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cf9c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	695b      	ldr	r3, [r3, #20]
 800cfa4:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800cfa6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	f000 8092 	beq.w	800d0d2 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	695b      	ldr	r3, [r3, #20]
 800cfb4:	f003 0301 	and.w	r3, r3, #1
 800cfb8:	2b01      	cmp	r3, #1
 800cfba:	d118      	bne.n	800cfee <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cfc0:	6a3a      	ldr	r2, [r7, #32]
 800cfc2:	8812      	ldrh	r2, [r2, #0]
 800cfc4:	b292      	uxth	r2, r2
 800cfc6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cfcc:	1c9a      	adds	r2, r3, #2
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cfd8:	b29b      	uxth	r3, r3
 800cfda:	3b01      	subs	r3, #1
 800cfdc:	b29a      	uxth	r2, r3
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cfea:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cfec:	e071      	b.n	800d0d2 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800cfee:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800cff0:	8bfb      	ldrh	r3, [r7, #30]
 800cff2:	429a      	cmp	r2, r3
 800cff4:	d228      	bcs.n	800d048 <HAL_SPI_TransmitReceive+0x39c>
 800cff6:	697b      	ldr	r3, [r7, #20]
 800cff8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d023      	beq.n	800d048 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d004:	6a3a      	ldr	r2, [r7, #32]
 800d006:	8812      	ldrh	r2, [r2, #0]
 800d008:	b292      	uxth	r2, r2
 800d00a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d010:	1c9a      	adds	r2, r3, #2
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d01a:	6a3a      	ldr	r2, [r7, #32]
 800d01c:	8812      	ldrh	r2, [r2, #0]
 800d01e:	b292      	uxth	r2, r2
 800d020:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d026:	1c9a      	adds	r2, r3, #2
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d032:	b29b      	uxth	r3, r3
 800d034:	3b02      	subs	r3, #2
 800d036:	b29a      	uxth	r2, r3
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d044:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d046:	e044      	b.n	800d0d2 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800d048:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d04a:	2b01      	cmp	r3, #1
 800d04c:	d11d      	bne.n	800d08a <HAL_SPI_TransmitReceive+0x3de>
 800d04e:	697b      	ldr	r3, [r7, #20]
 800d050:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d054:	2b00      	cmp	r3, #0
 800d056:	d018      	beq.n	800d08a <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d05c:	6a3a      	ldr	r2, [r7, #32]
 800d05e:	8812      	ldrh	r2, [r2, #0]
 800d060:	b292      	uxth	r2, r2
 800d062:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d068:	1c9a      	adds	r2, r3, #2
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d074:	b29b      	uxth	r3, r3
 800d076:	3b01      	subs	r3, #1
 800d078:	b29a      	uxth	r2, r3
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d086:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d088:	e023      	b.n	800d0d2 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d08a:	f7f8 fbaf 	bl	80057ec <HAL_GetTick>
 800d08e:	4602      	mov	r2, r0
 800d090:	69bb      	ldr	r3, [r7, #24]
 800d092:	1ad3      	subs	r3, r2, r3
 800d094:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d096:	429a      	cmp	r2, r3
 800d098:	d803      	bhi.n	800d0a2 <HAL_SPI_TransmitReceive+0x3f6>
 800d09a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d09c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0a0:	d102      	bne.n	800d0a8 <HAL_SPI_TransmitReceive+0x3fc>
 800d0a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d114      	bne.n	800d0d2 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800d0a8:	68f8      	ldr	r0, [r7, #12]
 800d0aa:	f000 f939 	bl	800d320 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d0b4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	2201      	movs	r2, #1
 800d0c2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800d0ce:	2303      	movs	r3, #3
 800d0d0:	e121      	b.n	800d316 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d0d2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	f47f af3b 	bne.w	800cf50 <HAL_SPI_TransmitReceive+0x2a4>
 800d0da:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	f47f af37 	bne.w	800cf50 <HAL_SPI_TransmitReceive+0x2a4>
 800d0e2:	e0f2      	b.n	800d2ca <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	695b      	ldr	r3, [r3, #20]
 800d0ea:	f003 0302 	and.w	r3, r3, #2
 800d0ee:	2b02      	cmp	r3, #2
 800d0f0:	d121      	bne.n	800d136 <HAL_SPI_TransmitReceive+0x48a>
 800d0f2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d01e      	beq.n	800d136 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800d0f8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d0fa:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800d0fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0fe:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800d100:	429a      	cmp	r2, r3
 800d102:	d218      	bcs.n	800d136 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	3320      	adds	r3, #32
 800d10e:	7812      	ldrb	r2, [r2, #0]
 800d110:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d116:	1c5a      	adds	r2, r3, #1
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d122:	b29b      	uxth	r3, r3
 800d124:	3b01      	subs	r3, #1
 800d126:	b29a      	uxth	r2, r3
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d134:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	695b      	ldr	r3, [r3, #20]
 800d13c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800d13e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d140:	2b00      	cmp	r3, #0
 800d142:	f000 80ba 	beq.w	800d2ba <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	695b      	ldr	r3, [r3, #20]
 800d14c:	f003 0301 	and.w	r3, r3, #1
 800d150:	2b01      	cmp	r3, #1
 800d152:	d11b      	bne.n	800d18c <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d160:	7812      	ldrb	r2, [r2, #0]
 800d162:	b2d2      	uxtb	r2, r2
 800d164:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d16a:	1c5a      	adds	r2, r3, #1
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d176:	b29b      	uxth	r3, r3
 800d178:	3b01      	subs	r3, #1
 800d17a:	b29a      	uxth	r2, r3
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d188:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d18a:	e096      	b.n	800d2ba <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800d18c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d18e:	8bfb      	ldrh	r3, [r7, #30]
 800d190:	429a      	cmp	r2, r3
 800d192:	d24a      	bcs.n	800d22a <HAL_SPI_TransmitReceive+0x57e>
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d045      	beq.n	800d22a <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d1aa:	7812      	ldrb	r2, [r2, #0]
 800d1ac:	b2d2      	uxtb	r2, r2
 800d1ae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d1b4:	1c5a      	adds	r2, r3, #1
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d1c6:	7812      	ldrb	r2, [r2, #0]
 800d1c8:	b2d2      	uxtb	r2, r2
 800d1ca:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d1d0:	1c5a      	adds	r2, r3, #1
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d1e2:	7812      	ldrb	r2, [r2, #0]
 800d1e4:	b2d2      	uxtb	r2, r2
 800d1e6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d1ec:	1c5a      	adds	r2, r3, #1
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d1fe:	7812      	ldrb	r2, [r2, #0]
 800d200:	b2d2      	uxtb	r2, r2
 800d202:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d208:	1c5a      	adds	r2, r3, #1
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d214:	b29b      	uxth	r3, r3
 800d216:	3b04      	subs	r3, #4
 800d218:	b29a      	uxth	r2, r3
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d226:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d228:	e047      	b.n	800d2ba <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800d22a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d22c:	2b03      	cmp	r3, #3
 800d22e:	d820      	bhi.n	800d272 <HAL_SPI_TransmitReceive+0x5c6>
 800d230:	697b      	ldr	r3, [r7, #20]
 800d232:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800d236:	2b00      	cmp	r3, #0
 800d238:	d01b      	beq.n	800d272 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d246:	7812      	ldrb	r2, [r2, #0]
 800d248:	b2d2      	uxtb	r2, r2
 800d24a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d250:	1c5a      	adds	r2, r3, #1
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d25c:	b29b      	uxth	r3, r3
 800d25e:	3b01      	subs	r3, #1
 800d260:	b29a      	uxth	r2, r3
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d26e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d270:	e023      	b.n	800d2ba <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d272:	f7f8 fabb 	bl	80057ec <HAL_GetTick>
 800d276:	4602      	mov	r2, r0
 800d278:	69bb      	ldr	r3, [r7, #24]
 800d27a:	1ad3      	subs	r3, r2, r3
 800d27c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d27e:	429a      	cmp	r2, r3
 800d280:	d803      	bhi.n	800d28a <HAL_SPI_TransmitReceive+0x5de>
 800d282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d284:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d288:	d102      	bne.n	800d290 <HAL_SPI_TransmitReceive+0x5e4>
 800d28a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d114      	bne.n	800d2ba <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800d290:	68f8      	ldr	r0, [r7, #12]
 800d292:	f000 f845 	bl	800d320 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d29c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	2201      	movs	r2, #1
 800d2aa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800d2b6:	2303      	movs	r3, #3
 800d2b8:	e02d      	b.n	800d316 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d2ba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	f47f af11 	bne.w	800d0e4 <HAL_SPI_TransmitReceive+0x438>
 800d2c2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	f47f af0d 	bne.w	800d0e4 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800d2ca:	69bb      	ldr	r3, [r7, #24]
 800d2cc:	9300      	str	r3, [sp, #0]
 800d2ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	2108      	movs	r1, #8
 800d2d4:	68f8      	ldr	r0, [r7, #12]
 800d2d6:	f000 f8c3 	bl	800d460 <SPI_WaitOnFlagUntilTimeout>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d007      	beq.n	800d2f0 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d2e6:	f043 0220 	orr.w	r2, r3, #32
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d2f0:	68f8      	ldr	r0, [r7, #12]
 800d2f2:	f000 f815 	bl	800d320 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	2201      	movs	r2, #1
 800d2fa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	2200      	movs	r2, #0
 800d302:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d001      	beq.n	800d314 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800d310:	2301      	movs	r3, #1
 800d312:	e000      	b.n	800d316 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800d314:	2300      	movs	r3, #0
  }
}
 800d316:	4618      	mov	r0, r3
 800d318:	3730      	adds	r7, #48	@ 0x30
 800d31a:	46bd      	mov	sp, r7
 800d31c:	bd80      	pop	{r7, pc}
 800d31e:	bf00      	nop

0800d320 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d320:	b480      	push	{r7}
 800d322:	b085      	sub	sp, #20
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	695b      	ldr	r3, [r3, #20]
 800d32e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	699a      	ldr	r2, [r3, #24]
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	f042 0208 	orr.w	r2, r2, #8
 800d33e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	699a      	ldr	r2, [r3, #24]
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	f042 0210 	orr.w	r2, r2, #16
 800d34e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	681a      	ldr	r2, [r3, #0]
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	f022 0201 	bic.w	r2, r2, #1
 800d35e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	6919      	ldr	r1, [r3, #16]
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681a      	ldr	r2, [r3, #0]
 800d36a:	4b3c      	ldr	r3, [pc, #240]	@ (800d45c <SPI_CloseTransfer+0x13c>)
 800d36c:	400b      	ands	r3, r1
 800d36e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	689a      	ldr	r2, [r3, #8]
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800d37e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d386:	b2db      	uxtb	r3, r3
 800d388:	2b04      	cmp	r3, #4
 800d38a:	d014      	beq.n	800d3b6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	f003 0320 	and.w	r3, r3, #32
 800d392:	2b00      	cmp	r3, #0
 800d394:	d00f      	beq.n	800d3b6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d39c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	699a      	ldr	r2, [r3, #24]
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	f042 0220 	orr.w	r2, r2, #32
 800d3b4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d3bc:	b2db      	uxtb	r3, r3
 800d3be:	2b03      	cmp	r3, #3
 800d3c0:	d014      	beq.n	800d3ec <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d00f      	beq.n	800d3ec <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d3d2:	f043 0204 	orr.w	r2, r3, #4
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	699a      	ldr	r2, [r3, #24]
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d3ea:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d00f      	beq.n	800d416 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d3fc:	f043 0201 	orr.w	r2, r3, #1
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	699a      	ldr	r2, [r3, #24]
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d414:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d00f      	beq.n	800d440 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d426:	f043 0208 	orr.w	r2, r3, #8
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	699a      	ldr	r2, [r3, #24]
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d43e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2200      	movs	r2, #0
 800d444:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2200      	movs	r2, #0
 800d44c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800d450:	bf00      	nop
 800d452:	3714      	adds	r7, #20
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr
 800d45c:	fffffc90 	.word	0xfffffc90

0800d460 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b084      	sub	sp, #16
 800d464:	af00      	add	r7, sp, #0
 800d466:	60f8      	str	r0, [r7, #12]
 800d468:	60b9      	str	r1, [r7, #8]
 800d46a:	603b      	str	r3, [r7, #0]
 800d46c:	4613      	mov	r3, r2
 800d46e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d470:	e010      	b.n	800d494 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d472:	f7f8 f9bb 	bl	80057ec <HAL_GetTick>
 800d476:	4602      	mov	r2, r0
 800d478:	69bb      	ldr	r3, [r7, #24]
 800d47a:	1ad3      	subs	r3, r2, r3
 800d47c:	683a      	ldr	r2, [r7, #0]
 800d47e:	429a      	cmp	r2, r3
 800d480:	d803      	bhi.n	800d48a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d488:	d102      	bne.n	800d490 <SPI_WaitOnFlagUntilTimeout+0x30>
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d101      	bne.n	800d494 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800d490:	2303      	movs	r3, #3
 800d492:	e00f      	b.n	800d4b4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	695a      	ldr	r2, [r3, #20]
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	4013      	ands	r3, r2
 800d49e:	68ba      	ldr	r2, [r7, #8]
 800d4a0:	429a      	cmp	r2, r3
 800d4a2:	bf0c      	ite	eq
 800d4a4:	2301      	moveq	r3, #1
 800d4a6:	2300      	movne	r3, #0
 800d4a8:	b2db      	uxtb	r3, r3
 800d4aa:	461a      	mov	r2, r3
 800d4ac:	79fb      	ldrb	r3, [r7, #7]
 800d4ae:	429a      	cmp	r2, r3
 800d4b0:	d0df      	beq.n	800d472 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800d4b2:	2300      	movs	r3, #0
}
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	3710      	adds	r7, #16
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	bd80      	pop	{r7, pc}

0800d4bc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800d4bc:	b480      	push	{r7}
 800d4be:	b085      	sub	sp, #20
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d4c8:	095b      	lsrs	r3, r3, #5
 800d4ca:	3301      	adds	r3, #1
 800d4cc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	68db      	ldr	r3, [r3, #12]
 800d4d2:	3301      	adds	r3, #1
 800d4d4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d4d6:	68bb      	ldr	r3, [r7, #8]
 800d4d8:	3307      	adds	r3, #7
 800d4da:	08db      	lsrs	r3, r3, #3
 800d4dc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d4de:	68bb      	ldr	r3, [r7, #8]
 800d4e0:	68fa      	ldr	r2, [r7, #12]
 800d4e2:	fb02 f303 	mul.w	r3, r2, r3
}
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	3714      	adds	r7, #20
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f0:	4770      	bx	lr

0800d4f2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d4f2:	b580      	push	{r7, lr}
 800d4f4:	b082      	sub	sp, #8
 800d4f6:	af00      	add	r7, sp, #0
 800d4f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d101      	bne.n	800d504 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d500:	2301      	movs	r3, #1
 800d502:	e049      	b.n	800d598 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d50a:	b2db      	uxtb	r3, r3
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d106      	bne.n	800d51e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2200      	movs	r2, #0
 800d514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d518:	6878      	ldr	r0, [r7, #4]
 800d51a:	f7f7 fc53 	bl	8004dc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	2202      	movs	r2, #2
 800d522:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681a      	ldr	r2, [r3, #0]
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	3304      	adds	r3, #4
 800d52e:	4619      	mov	r1, r3
 800d530:	4610      	mov	r0, r2
 800d532:	f000 fc57 	bl	800dde4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2201      	movs	r2, #1
 800d53a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2201      	movs	r2, #1
 800d542:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	2201      	movs	r2, #1
 800d54a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	2201      	movs	r2, #1
 800d552:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2201      	movs	r2, #1
 800d55a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	2201      	movs	r2, #1
 800d562:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	2201      	movs	r2, #1
 800d56a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	2201      	movs	r2, #1
 800d572:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	2201      	movs	r2, #1
 800d57a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2201      	movs	r2, #1
 800d582:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	2201      	movs	r2, #1
 800d58a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	2201      	movs	r2, #1
 800d592:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d596:	2300      	movs	r3, #0
}
 800d598:	4618      	mov	r0, r3
 800d59a:	3708      	adds	r7, #8
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bd80      	pop	{r7, pc}

0800d5a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d5a0:	b480      	push	{r7}
 800d5a2:	b085      	sub	sp, #20
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d5ae:	b2db      	uxtb	r3, r3
 800d5b0:	2b01      	cmp	r3, #1
 800d5b2:	d001      	beq.n	800d5b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d5b4:	2301      	movs	r3, #1
 800d5b6:	e054      	b.n	800d662 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2202      	movs	r2, #2
 800d5bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	68da      	ldr	r2, [r3, #12]
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	f042 0201 	orr.w	r2, r2, #1
 800d5ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	4a26      	ldr	r2, [pc, #152]	@ (800d670 <HAL_TIM_Base_Start_IT+0xd0>)
 800d5d6:	4293      	cmp	r3, r2
 800d5d8:	d022      	beq.n	800d620 <HAL_TIM_Base_Start_IT+0x80>
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d5e2:	d01d      	beq.n	800d620 <HAL_TIM_Base_Start_IT+0x80>
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	4a22      	ldr	r2, [pc, #136]	@ (800d674 <HAL_TIM_Base_Start_IT+0xd4>)
 800d5ea:	4293      	cmp	r3, r2
 800d5ec:	d018      	beq.n	800d620 <HAL_TIM_Base_Start_IT+0x80>
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	4a21      	ldr	r2, [pc, #132]	@ (800d678 <HAL_TIM_Base_Start_IT+0xd8>)
 800d5f4:	4293      	cmp	r3, r2
 800d5f6:	d013      	beq.n	800d620 <HAL_TIM_Base_Start_IT+0x80>
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	4a1f      	ldr	r2, [pc, #124]	@ (800d67c <HAL_TIM_Base_Start_IT+0xdc>)
 800d5fe:	4293      	cmp	r3, r2
 800d600:	d00e      	beq.n	800d620 <HAL_TIM_Base_Start_IT+0x80>
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	4a1e      	ldr	r2, [pc, #120]	@ (800d680 <HAL_TIM_Base_Start_IT+0xe0>)
 800d608:	4293      	cmp	r3, r2
 800d60a:	d009      	beq.n	800d620 <HAL_TIM_Base_Start_IT+0x80>
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	4a1c      	ldr	r2, [pc, #112]	@ (800d684 <HAL_TIM_Base_Start_IT+0xe4>)
 800d612:	4293      	cmp	r3, r2
 800d614:	d004      	beq.n	800d620 <HAL_TIM_Base_Start_IT+0x80>
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	4a1b      	ldr	r2, [pc, #108]	@ (800d688 <HAL_TIM_Base_Start_IT+0xe8>)
 800d61c:	4293      	cmp	r3, r2
 800d61e:	d115      	bne.n	800d64c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	689a      	ldr	r2, [r3, #8]
 800d626:	4b19      	ldr	r3, [pc, #100]	@ (800d68c <HAL_TIM_Base_Start_IT+0xec>)
 800d628:	4013      	ands	r3, r2
 800d62a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	2b06      	cmp	r3, #6
 800d630:	d015      	beq.n	800d65e <HAL_TIM_Base_Start_IT+0xbe>
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d638:	d011      	beq.n	800d65e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	681a      	ldr	r2, [r3, #0]
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	f042 0201 	orr.w	r2, r2, #1
 800d648:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d64a:	e008      	b.n	800d65e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	681a      	ldr	r2, [r3, #0]
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	f042 0201 	orr.w	r2, r2, #1
 800d65a:	601a      	str	r2, [r3, #0]
 800d65c:	e000      	b.n	800d660 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d65e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d660:	2300      	movs	r3, #0
}
 800d662:	4618      	mov	r0, r3
 800d664:	3714      	adds	r7, #20
 800d666:	46bd      	mov	sp, r7
 800d668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66c:	4770      	bx	lr
 800d66e:	bf00      	nop
 800d670:	40010000 	.word	0x40010000
 800d674:	40000400 	.word	0x40000400
 800d678:	40000800 	.word	0x40000800
 800d67c:	40000c00 	.word	0x40000c00
 800d680:	40010400 	.word	0x40010400
 800d684:	40001800 	.word	0x40001800
 800d688:	40014000 	.word	0x40014000
 800d68c:	00010007 	.word	0x00010007

0800d690 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b082      	sub	sp, #8
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d101      	bne.n	800d6a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d69e:	2301      	movs	r3, #1
 800d6a0:	e049      	b.n	800d736 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d6a8:	b2db      	uxtb	r3, r3
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d106      	bne.n	800d6bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f7f7 fb36 	bl	8004d28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2202      	movs	r2, #2
 800d6c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681a      	ldr	r2, [r3, #0]
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	3304      	adds	r3, #4
 800d6cc:	4619      	mov	r1, r3
 800d6ce:	4610      	mov	r0, r2
 800d6d0:	f000 fb88 	bl	800dde4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2201      	movs	r2, #1
 800d6d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2201      	movs	r2, #1
 800d6e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2201      	movs	r2, #1
 800d6e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2201      	movs	r2, #1
 800d6f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2201      	movs	r2, #1
 800d6f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2201      	movs	r2, #1
 800d700:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2201      	movs	r2, #1
 800d708:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	2201      	movs	r2, #1
 800d710:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2201      	movs	r2, #1
 800d718:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	2201      	movs	r2, #1
 800d720:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2201      	movs	r2, #1
 800d728:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2201      	movs	r2, #1
 800d730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d734:	2300      	movs	r3, #0
}
 800d736:	4618      	mov	r0, r3
 800d738:	3708      	adds	r7, #8
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bd80      	pop	{r7, pc}
	...

0800d740 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b084      	sub	sp, #16
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
 800d748:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d109      	bne.n	800d764 <HAL_TIM_PWM_Start+0x24>
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d756:	b2db      	uxtb	r3, r3
 800d758:	2b01      	cmp	r3, #1
 800d75a:	bf14      	ite	ne
 800d75c:	2301      	movne	r3, #1
 800d75e:	2300      	moveq	r3, #0
 800d760:	b2db      	uxtb	r3, r3
 800d762:	e03c      	b.n	800d7de <HAL_TIM_PWM_Start+0x9e>
 800d764:	683b      	ldr	r3, [r7, #0]
 800d766:	2b04      	cmp	r3, #4
 800d768:	d109      	bne.n	800d77e <HAL_TIM_PWM_Start+0x3e>
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d770:	b2db      	uxtb	r3, r3
 800d772:	2b01      	cmp	r3, #1
 800d774:	bf14      	ite	ne
 800d776:	2301      	movne	r3, #1
 800d778:	2300      	moveq	r3, #0
 800d77a:	b2db      	uxtb	r3, r3
 800d77c:	e02f      	b.n	800d7de <HAL_TIM_PWM_Start+0x9e>
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	2b08      	cmp	r3, #8
 800d782:	d109      	bne.n	800d798 <HAL_TIM_PWM_Start+0x58>
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d78a:	b2db      	uxtb	r3, r3
 800d78c:	2b01      	cmp	r3, #1
 800d78e:	bf14      	ite	ne
 800d790:	2301      	movne	r3, #1
 800d792:	2300      	moveq	r3, #0
 800d794:	b2db      	uxtb	r3, r3
 800d796:	e022      	b.n	800d7de <HAL_TIM_PWM_Start+0x9e>
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	2b0c      	cmp	r3, #12
 800d79c:	d109      	bne.n	800d7b2 <HAL_TIM_PWM_Start+0x72>
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d7a4:	b2db      	uxtb	r3, r3
 800d7a6:	2b01      	cmp	r3, #1
 800d7a8:	bf14      	ite	ne
 800d7aa:	2301      	movne	r3, #1
 800d7ac:	2300      	moveq	r3, #0
 800d7ae:	b2db      	uxtb	r3, r3
 800d7b0:	e015      	b.n	800d7de <HAL_TIM_PWM_Start+0x9e>
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	2b10      	cmp	r3, #16
 800d7b6:	d109      	bne.n	800d7cc <HAL_TIM_PWM_Start+0x8c>
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d7be:	b2db      	uxtb	r3, r3
 800d7c0:	2b01      	cmp	r3, #1
 800d7c2:	bf14      	ite	ne
 800d7c4:	2301      	movne	r3, #1
 800d7c6:	2300      	moveq	r3, #0
 800d7c8:	b2db      	uxtb	r3, r3
 800d7ca:	e008      	b.n	800d7de <HAL_TIM_PWM_Start+0x9e>
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d7d2:	b2db      	uxtb	r3, r3
 800d7d4:	2b01      	cmp	r3, #1
 800d7d6:	bf14      	ite	ne
 800d7d8:	2301      	movne	r3, #1
 800d7da:	2300      	moveq	r3, #0
 800d7dc:	b2db      	uxtb	r3, r3
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d001      	beq.n	800d7e6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d7e2:	2301      	movs	r3, #1
 800d7e4:	e0a1      	b.n	800d92a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d104      	bne.n	800d7f6 <HAL_TIM_PWM_Start+0xb6>
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2202      	movs	r2, #2
 800d7f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d7f4:	e023      	b.n	800d83e <HAL_TIM_PWM_Start+0xfe>
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	2b04      	cmp	r3, #4
 800d7fa:	d104      	bne.n	800d806 <HAL_TIM_PWM_Start+0xc6>
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2202      	movs	r2, #2
 800d800:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d804:	e01b      	b.n	800d83e <HAL_TIM_PWM_Start+0xfe>
 800d806:	683b      	ldr	r3, [r7, #0]
 800d808:	2b08      	cmp	r3, #8
 800d80a:	d104      	bne.n	800d816 <HAL_TIM_PWM_Start+0xd6>
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2202      	movs	r2, #2
 800d810:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d814:	e013      	b.n	800d83e <HAL_TIM_PWM_Start+0xfe>
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	2b0c      	cmp	r3, #12
 800d81a:	d104      	bne.n	800d826 <HAL_TIM_PWM_Start+0xe6>
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2202      	movs	r2, #2
 800d820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d824:	e00b      	b.n	800d83e <HAL_TIM_PWM_Start+0xfe>
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	2b10      	cmp	r3, #16
 800d82a:	d104      	bne.n	800d836 <HAL_TIM_PWM_Start+0xf6>
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2202      	movs	r2, #2
 800d830:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d834:	e003      	b.n	800d83e <HAL_TIM_PWM_Start+0xfe>
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2202      	movs	r2, #2
 800d83a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	2201      	movs	r2, #1
 800d844:	6839      	ldr	r1, [r7, #0]
 800d846:	4618      	mov	r0, r3
 800d848:	f000 fe48 	bl	800e4dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	4a38      	ldr	r2, [pc, #224]	@ (800d934 <HAL_TIM_PWM_Start+0x1f4>)
 800d852:	4293      	cmp	r3, r2
 800d854:	d013      	beq.n	800d87e <HAL_TIM_PWM_Start+0x13e>
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	4a37      	ldr	r2, [pc, #220]	@ (800d938 <HAL_TIM_PWM_Start+0x1f8>)
 800d85c:	4293      	cmp	r3, r2
 800d85e:	d00e      	beq.n	800d87e <HAL_TIM_PWM_Start+0x13e>
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	4a35      	ldr	r2, [pc, #212]	@ (800d93c <HAL_TIM_PWM_Start+0x1fc>)
 800d866:	4293      	cmp	r3, r2
 800d868:	d009      	beq.n	800d87e <HAL_TIM_PWM_Start+0x13e>
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	4a34      	ldr	r2, [pc, #208]	@ (800d940 <HAL_TIM_PWM_Start+0x200>)
 800d870:	4293      	cmp	r3, r2
 800d872:	d004      	beq.n	800d87e <HAL_TIM_PWM_Start+0x13e>
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	4a32      	ldr	r2, [pc, #200]	@ (800d944 <HAL_TIM_PWM_Start+0x204>)
 800d87a:	4293      	cmp	r3, r2
 800d87c:	d101      	bne.n	800d882 <HAL_TIM_PWM_Start+0x142>
 800d87e:	2301      	movs	r3, #1
 800d880:	e000      	b.n	800d884 <HAL_TIM_PWM_Start+0x144>
 800d882:	2300      	movs	r3, #0
 800d884:	2b00      	cmp	r3, #0
 800d886:	d007      	beq.n	800d898 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d896:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	4a25      	ldr	r2, [pc, #148]	@ (800d934 <HAL_TIM_PWM_Start+0x1f4>)
 800d89e:	4293      	cmp	r3, r2
 800d8a0:	d022      	beq.n	800d8e8 <HAL_TIM_PWM_Start+0x1a8>
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d8aa:	d01d      	beq.n	800d8e8 <HAL_TIM_PWM_Start+0x1a8>
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	4a25      	ldr	r2, [pc, #148]	@ (800d948 <HAL_TIM_PWM_Start+0x208>)
 800d8b2:	4293      	cmp	r3, r2
 800d8b4:	d018      	beq.n	800d8e8 <HAL_TIM_PWM_Start+0x1a8>
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	4a24      	ldr	r2, [pc, #144]	@ (800d94c <HAL_TIM_PWM_Start+0x20c>)
 800d8bc:	4293      	cmp	r3, r2
 800d8be:	d013      	beq.n	800d8e8 <HAL_TIM_PWM_Start+0x1a8>
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	4a22      	ldr	r2, [pc, #136]	@ (800d950 <HAL_TIM_PWM_Start+0x210>)
 800d8c6:	4293      	cmp	r3, r2
 800d8c8:	d00e      	beq.n	800d8e8 <HAL_TIM_PWM_Start+0x1a8>
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	4a1a      	ldr	r2, [pc, #104]	@ (800d938 <HAL_TIM_PWM_Start+0x1f8>)
 800d8d0:	4293      	cmp	r3, r2
 800d8d2:	d009      	beq.n	800d8e8 <HAL_TIM_PWM_Start+0x1a8>
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	4a1e      	ldr	r2, [pc, #120]	@ (800d954 <HAL_TIM_PWM_Start+0x214>)
 800d8da:	4293      	cmp	r3, r2
 800d8dc:	d004      	beq.n	800d8e8 <HAL_TIM_PWM_Start+0x1a8>
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	4a16      	ldr	r2, [pc, #88]	@ (800d93c <HAL_TIM_PWM_Start+0x1fc>)
 800d8e4:	4293      	cmp	r3, r2
 800d8e6:	d115      	bne.n	800d914 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	689a      	ldr	r2, [r3, #8]
 800d8ee:	4b1a      	ldr	r3, [pc, #104]	@ (800d958 <HAL_TIM_PWM_Start+0x218>)
 800d8f0:	4013      	ands	r3, r2
 800d8f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	2b06      	cmp	r3, #6
 800d8f8:	d015      	beq.n	800d926 <HAL_TIM_PWM_Start+0x1e6>
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d900:	d011      	beq.n	800d926 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	681a      	ldr	r2, [r3, #0]
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	f042 0201 	orr.w	r2, r2, #1
 800d910:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d912:	e008      	b.n	800d926 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	681a      	ldr	r2, [r3, #0]
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	f042 0201 	orr.w	r2, r2, #1
 800d922:	601a      	str	r2, [r3, #0]
 800d924:	e000      	b.n	800d928 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d926:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d928:	2300      	movs	r3, #0
}
 800d92a:	4618      	mov	r0, r3
 800d92c:	3710      	adds	r7, #16
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd80      	pop	{r7, pc}
 800d932:	bf00      	nop
 800d934:	40010000 	.word	0x40010000
 800d938:	40010400 	.word	0x40010400
 800d93c:	40014000 	.word	0x40014000
 800d940:	40014400 	.word	0x40014400
 800d944:	40014800 	.word	0x40014800
 800d948:	40000400 	.word	0x40000400
 800d94c:	40000800 	.word	0x40000800
 800d950:	40000c00 	.word	0x40000c00
 800d954:	40001800 	.word	0x40001800
 800d958:	00010007 	.word	0x00010007

0800d95c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b084      	sub	sp, #16
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	68db      	ldr	r3, [r3, #12]
 800d96a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	691b      	ldr	r3, [r3, #16]
 800d972:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	f003 0302 	and.w	r3, r3, #2
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d020      	beq.n	800d9c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	f003 0302 	and.w	r3, r3, #2
 800d984:	2b00      	cmp	r3, #0
 800d986:	d01b      	beq.n	800d9c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	f06f 0202 	mvn.w	r2, #2
 800d990:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	2201      	movs	r2, #1
 800d996:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	699b      	ldr	r3, [r3, #24]
 800d99e:	f003 0303 	and.w	r3, r3, #3
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d003      	beq.n	800d9ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d9a6:	6878      	ldr	r0, [r7, #4]
 800d9a8:	f000 f9fe 	bl	800dda8 <HAL_TIM_IC_CaptureCallback>
 800d9ac:	e005      	b.n	800d9ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d9ae:	6878      	ldr	r0, [r7, #4]
 800d9b0:	f000 f9f0 	bl	800dd94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d9b4:	6878      	ldr	r0, [r7, #4]
 800d9b6:	f000 fa01 	bl	800ddbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	2200      	movs	r2, #0
 800d9be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	f003 0304 	and.w	r3, r3, #4
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d020      	beq.n	800da0c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	f003 0304 	and.w	r3, r3, #4
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d01b      	beq.n	800da0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	f06f 0204 	mvn.w	r2, #4
 800d9dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2202      	movs	r2, #2
 800d9e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	699b      	ldr	r3, [r3, #24]
 800d9ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d003      	beq.n	800d9fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f000 f9d8 	bl	800dda8 <HAL_TIM_IC_CaptureCallback>
 800d9f8:	e005      	b.n	800da06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	f000 f9ca 	bl	800dd94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da00:	6878      	ldr	r0, [r7, #4]
 800da02:	f000 f9db 	bl	800ddbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2200      	movs	r2, #0
 800da0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800da0c:	68bb      	ldr	r3, [r7, #8]
 800da0e:	f003 0308 	and.w	r3, r3, #8
 800da12:	2b00      	cmp	r3, #0
 800da14:	d020      	beq.n	800da58 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	f003 0308 	and.w	r3, r3, #8
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d01b      	beq.n	800da58 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	f06f 0208 	mvn.w	r2, #8
 800da28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	2204      	movs	r2, #4
 800da2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	69db      	ldr	r3, [r3, #28]
 800da36:	f003 0303 	and.w	r3, r3, #3
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d003      	beq.n	800da46 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800da3e:	6878      	ldr	r0, [r7, #4]
 800da40:	f000 f9b2 	bl	800dda8 <HAL_TIM_IC_CaptureCallback>
 800da44:	e005      	b.n	800da52 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800da46:	6878      	ldr	r0, [r7, #4]
 800da48:	f000 f9a4 	bl	800dd94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f000 f9b5 	bl	800ddbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	2200      	movs	r2, #0
 800da56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800da58:	68bb      	ldr	r3, [r7, #8]
 800da5a:	f003 0310 	and.w	r3, r3, #16
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d020      	beq.n	800daa4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	f003 0310 	and.w	r3, r3, #16
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d01b      	beq.n	800daa4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	f06f 0210 	mvn.w	r2, #16
 800da74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	2208      	movs	r2, #8
 800da7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	69db      	ldr	r3, [r3, #28]
 800da82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800da86:	2b00      	cmp	r3, #0
 800da88:	d003      	beq.n	800da92 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	f000 f98c 	bl	800dda8 <HAL_TIM_IC_CaptureCallback>
 800da90:	e005      	b.n	800da9e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f000 f97e 	bl	800dd94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da98:	6878      	ldr	r0, [r7, #4]
 800da9a:	f000 f98f 	bl	800ddbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2200      	movs	r2, #0
 800daa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800daa4:	68bb      	ldr	r3, [r7, #8]
 800daa6:	f003 0301 	and.w	r3, r3, #1
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d00c      	beq.n	800dac8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	f003 0301 	and.w	r3, r3, #1
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d007      	beq.n	800dac8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	f06f 0201 	mvn.w	r2, #1
 800dac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	f7f6 fb82 	bl	80041cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800dac8:	68bb      	ldr	r3, [r7, #8]
 800daca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d104      	bne.n	800dadc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d00c      	beq.n	800daf6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d007      	beq.n	800daf6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800daee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800daf0:	6878      	ldr	r0, [r7, #4]
 800daf2:	f000 fdb1 	bl	800e658 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800daf6:	68bb      	ldr	r3, [r7, #8]
 800daf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d00c      	beq.n	800db1a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800db06:	2b00      	cmp	r3, #0
 800db08:	d007      	beq.n	800db1a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800db12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800db14:	6878      	ldr	r0, [r7, #4]
 800db16:	f000 fda9 	bl	800e66c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db20:	2b00      	cmp	r3, #0
 800db22:	d00c      	beq.n	800db3e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d007      	beq.n	800db3e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800db36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800db38:	6878      	ldr	r0, [r7, #4]
 800db3a:	f000 f949 	bl	800ddd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800db3e:	68bb      	ldr	r3, [r7, #8]
 800db40:	f003 0320 	and.w	r3, r3, #32
 800db44:	2b00      	cmp	r3, #0
 800db46:	d00c      	beq.n	800db62 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	f003 0320 	and.w	r3, r3, #32
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d007      	beq.n	800db62 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	f06f 0220 	mvn.w	r2, #32
 800db5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800db5c:	6878      	ldr	r0, [r7, #4]
 800db5e:	f000 fd71 	bl	800e644 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800db62:	bf00      	nop
 800db64:	3710      	adds	r7, #16
 800db66:	46bd      	mov	sp, r7
 800db68:	bd80      	pop	{r7, pc}
	...

0800db6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b086      	sub	sp, #24
 800db70:	af00      	add	r7, sp, #0
 800db72:	60f8      	str	r0, [r7, #12]
 800db74:	60b9      	str	r1, [r7, #8]
 800db76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800db78:	2300      	movs	r3, #0
 800db7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800db82:	2b01      	cmp	r3, #1
 800db84:	d101      	bne.n	800db8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800db86:	2302      	movs	r3, #2
 800db88:	e0ff      	b.n	800dd8a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	2201      	movs	r2, #1
 800db8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	2b14      	cmp	r3, #20
 800db96:	f200 80f0 	bhi.w	800dd7a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800db9a:	a201      	add	r2, pc, #4	@ (adr r2, 800dba0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800db9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dba0:	0800dbf5 	.word	0x0800dbf5
 800dba4:	0800dd7b 	.word	0x0800dd7b
 800dba8:	0800dd7b 	.word	0x0800dd7b
 800dbac:	0800dd7b 	.word	0x0800dd7b
 800dbb0:	0800dc35 	.word	0x0800dc35
 800dbb4:	0800dd7b 	.word	0x0800dd7b
 800dbb8:	0800dd7b 	.word	0x0800dd7b
 800dbbc:	0800dd7b 	.word	0x0800dd7b
 800dbc0:	0800dc77 	.word	0x0800dc77
 800dbc4:	0800dd7b 	.word	0x0800dd7b
 800dbc8:	0800dd7b 	.word	0x0800dd7b
 800dbcc:	0800dd7b 	.word	0x0800dd7b
 800dbd0:	0800dcb7 	.word	0x0800dcb7
 800dbd4:	0800dd7b 	.word	0x0800dd7b
 800dbd8:	0800dd7b 	.word	0x0800dd7b
 800dbdc:	0800dd7b 	.word	0x0800dd7b
 800dbe0:	0800dcf9 	.word	0x0800dcf9
 800dbe4:	0800dd7b 	.word	0x0800dd7b
 800dbe8:	0800dd7b 	.word	0x0800dd7b
 800dbec:	0800dd7b 	.word	0x0800dd7b
 800dbf0:	0800dd39 	.word	0x0800dd39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	68b9      	ldr	r1, [r7, #8]
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	f000 f998 	bl	800df30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	699a      	ldr	r2, [r3, #24]
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	f042 0208 	orr.w	r2, r2, #8
 800dc0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	699a      	ldr	r2, [r3, #24]
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	f022 0204 	bic.w	r2, r2, #4
 800dc1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	6999      	ldr	r1, [r3, #24]
 800dc26:	68bb      	ldr	r3, [r7, #8]
 800dc28:	691a      	ldr	r2, [r3, #16]
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	430a      	orrs	r2, r1
 800dc30:	619a      	str	r2, [r3, #24]
      break;
 800dc32:	e0a5      	b.n	800dd80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	68b9      	ldr	r1, [r7, #8]
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f000 fa08 	bl	800e050 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	699a      	ldr	r2, [r3, #24]
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dc4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	699a      	ldr	r2, [r3, #24]
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dc5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	6999      	ldr	r1, [r3, #24]
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	691b      	ldr	r3, [r3, #16]
 800dc6a:	021a      	lsls	r2, r3, #8
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	430a      	orrs	r2, r1
 800dc72:	619a      	str	r2, [r3, #24]
      break;
 800dc74:	e084      	b.n	800dd80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	68b9      	ldr	r1, [r7, #8]
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	f000 fa71 	bl	800e164 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	69da      	ldr	r2, [r3, #28]
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	f042 0208 	orr.w	r2, r2, #8
 800dc90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	69da      	ldr	r2, [r3, #28]
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	f022 0204 	bic.w	r2, r2, #4
 800dca0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	69d9      	ldr	r1, [r3, #28]
 800dca8:	68bb      	ldr	r3, [r7, #8]
 800dcaa:	691a      	ldr	r2, [r3, #16]
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	430a      	orrs	r2, r1
 800dcb2:	61da      	str	r2, [r3, #28]
      break;
 800dcb4:	e064      	b.n	800dd80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	68b9      	ldr	r1, [r7, #8]
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	f000 fad9 	bl	800e274 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	69da      	ldr	r2, [r3, #28]
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dcd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	69da      	ldr	r2, [r3, #28]
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dce0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	69d9      	ldr	r1, [r3, #28]
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	691b      	ldr	r3, [r3, #16]
 800dcec:	021a      	lsls	r2, r3, #8
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	430a      	orrs	r2, r1
 800dcf4:	61da      	str	r2, [r3, #28]
      break;
 800dcf6:	e043      	b.n	800dd80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	68b9      	ldr	r1, [r7, #8]
 800dcfe:	4618      	mov	r0, r3
 800dd00:	f000 fb22 	bl	800e348 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	f042 0208 	orr.w	r2, r2, #8
 800dd12:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	f022 0204 	bic.w	r2, r2, #4
 800dd22:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800dd2a:	68bb      	ldr	r3, [r7, #8]
 800dd2c:	691a      	ldr	r2, [r3, #16]
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	430a      	orrs	r2, r1
 800dd34:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800dd36:	e023      	b.n	800dd80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	68b9      	ldr	r1, [r7, #8]
 800dd3e:	4618      	mov	r0, r3
 800dd40:	f000 fb66 	bl	800e410 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dd52:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dd62:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800dd6a:	68bb      	ldr	r3, [r7, #8]
 800dd6c:	691b      	ldr	r3, [r3, #16]
 800dd6e:	021a      	lsls	r2, r3, #8
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	430a      	orrs	r2, r1
 800dd76:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800dd78:	e002      	b.n	800dd80 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800dd7a:	2301      	movs	r3, #1
 800dd7c:	75fb      	strb	r3, [r7, #23]
      break;
 800dd7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	2200      	movs	r2, #0
 800dd84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800dd88:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	3718      	adds	r7, #24
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd80      	pop	{r7, pc}
 800dd92:	bf00      	nop

0800dd94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dd94:	b480      	push	{r7}
 800dd96:	b083      	sub	sp, #12
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dd9c:	bf00      	nop
 800dd9e:	370c      	adds	r7, #12
 800dda0:	46bd      	mov	sp, r7
 800dda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda6:	4770      	bx	lr

0800dda8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dda8:	b480      	push	{r7}
 800ddaa:	b083      	sub	sp, #12
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ddb0:	bf00      	nop
 800ddb2:	370c      	adds	r7, #12
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddba:	4770      	bx	lr

0800ddbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ddbc:	b480      	push	{r7}
 800ddbe:	b083      	sub	sp, #12
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ddc4:	bf00      	nop
 800ddc6:	370c      	adds	r7, #12
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddce:	4770      	bx	lr

0800ddd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ddd0:	b480      	push	{r7}
 800ddd2:	b083      	sub	sp, #12
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ddd8:	bf00      	nop
 800ddda:	370c      	adds	r7, #12
 800dddc:	46bd      	mov	sp, r7
 800ddde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde2:	4770      	bx	lr

0800dde4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800dde4:	b480      	push	{r7}
 800dde6:	b085      	sub	sp, #20
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
 800ddec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	4a46      	ldr	r2, [pc, #280]	@ (800df10 <TIM_Base_SetConfig+0x12c>)
 800ddf8:	4293      	cmp	r3, r2
 800ddfa:	d013      	beq.n	800de24 <TIM_Base_SetConfig+0x40>
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800de02:	d00f      	beq.n	800de24 <TIM_Base_SetConfig+0x40>
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	4a43      	ldr	r2, [pc, #268]	@ (800df14 <TIM_Base_SetConfig+0x130>)
 800de08:	4293      	cmp	r3, r2
 800de0a:	d00b      	beq.n	800de24 <TIM_Base_SetConfig+0x40>
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	4a42      	ldr	r2, [pc, #264]	@ (800df18 <TIM_Base_SetConfig+0x134>)
 800de10:	4293      	cmp	r3, r2
 800de12:	d007      	beq.n	800de24 <TIM_Base_SetConfig+0x40>
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	4a41      	ldr	r2, [pc, #260]	@ (800df1c <TIM_Base_SetConfig+0x138>)
 800de18:	4293      	cmp	r3, r2
 800de1a:	d003      	beq.n	800de24 <TIM_Base_SetConfig+0x40>
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	4a40      	ldr	r2, [pc, #256]	@ (800df20 <TIM_Base_SetConfig+0x13c>)
 800de20:	4293      	cmp	r3, r2
 800de22:	d108      	bne.n	800de36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800de2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	685b      	ldr	r3, [r3, #4]
 800de30:	68fa      	ldr	r2, [r7, #12]
 800de32:	4313      	orrs	r3, r2
 800de34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	4a35      	ldr	r2, [pc, #212]	@ (800df10 <TIM_Base_SetConfig+0x12c>)
 800de3a:	4293      	cmp	r3, r2
 800de3c:	d01f      	beq.n	800de7e <TIM_Base_SetConfig+0x9a>
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800de44:	d01b      	beq.n	800de7e <TIM_Base_SetConfig+0x9a>
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	4a32      	ldr	r2, [pc, #200]	@ (800df14 <TIM_Base_SetConfig+0x130>)
 800de4a:	4293      	cmp	r3, r2
 800de4c:	d017      	beq.n	800de7e <TIM_Base_SetConfig+0x9a>
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	4a31      	ldr	r2, [pc, #196]	@ (800df18 <TIM_Base_SetConfig+0x134>)
 800de52:	4293      	cmp	r3, r2
 800de54:	d013      	beq.n	800de7e <TIM_Base_SetConfig+0x9a>
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	4a30      	ldr	r2, [pc, #192]	@ (800df1c <TIM_Base_SetConfig+0x138>)
 800de5a:	4293      	cmp	r3, r2
 800de5c:	d00f      	beq.n	800de7e <TIM_Base_SetConfig+0x9a>
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	4a2f      	ldr	r2, [pc, #188]	@ (800df20 <TIM_Base_SetConfig+0x13c>)
 800de62:	4293      	cmp	r3, r2
 800de64:	d00b      	beq.n	800de7e <TIM_Base_SetConfig+0x9a>
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	4a2e      	ldr	r2, [pc, #184]	@ (800df24 <TIM_Base_SetConfig+0x140>)
 800de6a:	4293      	cmp	r3, r2
 800de6c:	d007      	beq.n	800de7e <TIM_Base_SetConfig+0x9a>
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	4a2d      	ldr	r2, [pc, #180]	@ (800df28 <TIM_Base_SetConfig+0x144>)
 800de72:	4293      	cmp	r3, r2
 800de74:	d003      	beq.n	800de7e <TIM_Base_SetConfig+0x9a>
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	4a2c      	ldr	r2, [pc, #176]	@ (800df2c <TIM_Base_SetConfig+0x148>)
 800de7a:	4293      	cmp	r3, r2
 800de7c:	d108      	bne.n	800de90 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800de84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800de86:	683b      	ldr	r3, [r7, #0]
 800de88:	68db      	ldr	r3, [r3, #12]
 800de8a:	68fa      	ldr	r2, [r7, #12]
 800de8c:	4313      	orrs	r3, r2
 800de8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	695b      	ldr	r3, [r3, #20]
 800de9a:	4313      	orrs	r3, r2
 800de9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	68fa      	ldr	r2, [r7, #12]
 800dea2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	689a      	ldr	r2, [r3, #8]
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	681a      	ldr	r2, [r3, #0]
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	4a16      	ldr	r2, [pc, #88]	@ (800df10 <TIM_Base_SetConfig+0x12c>)
 800deb8:	4293      	cmp	r3, r2
 800deba:	d00f      	beq.n	800dedc <TIM_Base_SetConfig+0xf8>
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	4a18      	ldr	r2, [pc, #96]	@ (800df20 <TIM_Base_SetConfig+0x13c>)
 800dec0:	4293      	cmp	r3, r2
 800dec2:	d00b      	beq.n	800dedc <TIM_Base_SetConfig+0xf8>
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	4a17      	ldr	r2, [pc, #92]	@ (800df24 <TIM_Base_SetConfig+0x140>)
 800dec8:	4293      	cmp	r3, r2
 800deca:	d007      	beq.n	800dedc <TIM_Base_SetConfig+0xf8>
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	4a16      	ldr	r2, [pc, #88]	@ (800df28 <TIM_Base_SetConfig+0x144>)
 800ded0:	4293      	cmp	r3, r2
 800ded2:	d003      	beq.n	800dedc <TIM_Base_SetConfig+0xf8>
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	4a15      	ldr	r2, [pc, #84]	@ (800df2c <TIM_Base_SetConfig+0x148>)
 800ded8:	4293      	cmp	r3, r2
 800deda:	d103      	bne.n	800dee4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	691a      	ldr	r2, [r3, #16]
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2201      	movs	r2, #1
 800dee8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	691b      	ldr	r3, [r3, #16]
 800deee:	f003 0301 	and.w	r3, r3, #1
 800def2:	2b01      	cmp	r3, #1
 800def4:	d105      	bne.n	800df02 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	691b      	ldr	r3, [r3, #16]
 800defa:	f023 0201 	bic.w	r2, r3, #1
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	611a      	str	r2, [r3, #16]
  }
}
 800df02:	bf00      	nop
 800df04:	3714      	adds	r7, #20
 800df06:	46bd      	mov	sp, r7
 800df08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0c:	4770      	bx	lr
 800df0e:	bf00      	nop
 800df10:	40010000 	.word	0x40010000
 800df14:	40000400 	.word	0x40000400
 800df18:	40000800 	.word	0x40000800
 800df1c:	40000c00 	.word	0x40000c00
 800df20:	40010400 	.word	0x40010400
 800df24:	40014000 	.word	0x40014000
 800df28:	40014400 	.word	0x40014400
 800df2c:	40014800 	.word	0x40014800

0800df30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800df30:	b480      	push	{r7}
 800df32:	b087      	sub	sp, #28
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
 800df38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	6a1b      	ldr	r3, [r3, #32]
 800df3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	6a1b      	ldr	r3, [r3, #32]
 800df44:	f023 0201 	bic.w	r2, r3, #1
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	685b      	ldr	r3, [r3, #4]
 800df50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	699b      	ldr	r3, [r3, #24]
 800df56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800df58:	68fa      	ldr	r2, [r7, #12]
 800df5a:	4b37      	ldr	r3, [pc, #220]	@ (800e038 <TIM_OC1_SetConfig+0x108>)
 800df5c:	4013      	ands	r3, r2
 800df5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	f023 0303 	bic.w	r3, r3, #3
 800df66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800df68:	683b      	ldr	r3, [r7, #0]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	68fa      	ldr	r2, [r7, #12]
 800df6e:	4313      	orrs	r3, r2
 800df70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800df72:	697b      	ldr	r3, [r7, #20]
 800df74:	f023 0302 	bic.w	r3, r3, #2
 800df78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	689b      	ldr	r3, [r3, #8]
 800df7e:	697a      	ldr	r2, [r7, #20]
 800df80:	4313      	orrs	r3, r2
 800df82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	4a2d      	ldr	r2, [pc, #180]	@ (800e03c <TIM_OC1_SetConfig+0x10c>)
 800df88:	4293      	cmp	r3, r2
 800df8a:	d00f      	beq.n	800dfac <TIM_OC1_SetConfig+0x7c>
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	4a2c      	ldr	r2, [pc, #176]	@ (800e040 <TIM_OC1_SetConfig+0x110>)
 800df90:	4293      	cmp	r3, r2
 800df92:	d00b      	beq.n	800dfac <TIM_OC1_SetConfig+0x7c>
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	4a2b      	ldr	r2, [pc, #172]	@ (800e044 <TIM_OC1_SetConfig+0x114>)
 800df98:	4293      	cmp	r3, r2
 800df9a:	d007      	beq.n	800dfac <TIM_OC1_SetConfig+0x7c>
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	4a2a      	ldr	r2, [pc, #168]	@ (800e048 <TIM_OC1_SetConfig+0x118>)
 800dfa0:	4293      	cmp	r3, r2
 800dfa2:	d003      	beq.n	800dfac <TIM_OC1_SetConfig+0x7c>
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	4a29      	ldr	r2, [pc, #164]	@ (800e04c <TIM_OC1_SetConfig+0x11c>)
 800dfa8:	4293      	cmp	r3, r2
 800dfaa:	d10c      	bne.n	800dfc6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800dfac:	697b      	ldr	r3, [r7, #20]
 800dfae:	f023 0308 	bic.w	r3, r3, #8
 800dfb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	68db      	ldr	r3, [r3, #12]
 800dfb8:	697a      	ldr	r2, [r7, #20]
 800dfba:	4313      	orrs	r3, r2
 800dfbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800dfbe:	697b      	ldr	r3, [r7, #20]
 800dfc0:	f023 0304 	bic.w	r3, r3, #4
 800dfc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	4a1c      	ldr	r2, [pc, #112]	@ (800e03c <TIM_OC1_SetConfig+0x10c>)
 800dfca:	4293      	cmp	r3, r2
 800dfcc:	d00f      	beq.n	800dfee <TIM_OC1_SetConfig+0xbe>
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	4a1b      	ldr	r2, [pc, #108]	@ (800e040 <TIM_OC1_SetConfig+0x110>)
 800dfd2:	4293      	cmp	r3, r2
 800dfd4:	d00b      	beq.n	800dfee <TIM_OC1_SetConfig+0xbe>
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	4a1a      	ldr	r2, [pc, #104]	@ (800e044 <TIM_OC1_SetConfig+0x114>)
 800dfda:	4293      	cmp	r3, r2
 800dfdc:	d007      	beq.n	800dfee <TIM_OC1_SetConfig+0xbe>
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	4a19      	ldr	r2, [pc, #100]	@ (800e048 <TIM_OC1_SetConfig+0x118>)
 800dfe2:	4293      	cmp	r3, r2
 800dfe4:	d003      	beq.n	800dfee <TIM_OC1_SetConfig+0xbe>
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	4a18      	ldr	r2, [pc, #96]	@ (800e04c <TIM_OC1_SetConfig+0x11c>)
 800dfea:	4293      	cmp	r3, r2
 800dfec:	d111      	bne.n	800e012 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800dfee:	693b      	ldr	r3, [r7, #16]
 800dff0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dff4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800dff6:	693b      	ldr	r3, [r7, #16]
 800dff8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800dffc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800dffe:	683b      	ldr	r3, [r7, #0]
 800e000:	695b      	ldr	r3, [r3, #20]
 800e002:	693a      	ldr	r2, [r7, #16]
 800e004:	4313      	orrs	r3, r2
 800e006:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e008:	683b      	ldr	r3, [r7, #0]
 800e00a:	699b      	ldr	r3, [r3, #24]
 800e00c:	693a      	ldr	r2, [r7, #16]
 800e00e:	4313      	orrs	r3, r2
 800e010:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	693a      	ldr	r2, [r7, #16]
 800e016:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	68fa      	ldr	r2, [r7, #12]
 800e01c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	685a      	ldr	r2, [r3, #4]
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	697a      	ldr	r2, [r7, #20]
 800e02a:	621a      	str	r2, [r3, #32]
}
 800e02c:	bf00      	nop
 800e02e:	371c      	adds	r7, #28
 800e030:	46bd      	mov	sp, r7
 800e032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e036:	4770      	bx	lr
 800e038:	fffeff8f 	.word	0xfffeff8f
 800e03c:	40010000 	.word	0x40010000
 800e040:	40010400 	.word	0x40010400
 800e044:	40014000 	.word	0x40014000
 800e048:	40014400 	.word	0x40014400
 800e04c:	40014800 	.word	0x40014800

0800e050 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e050:	b480      	push	{r7}
 800e052:	b087      	sub	sp, #28
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
 800e058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	6a1b      	ldr	r3, [r3, #32]
 800e05e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	6a1b      	ldr	r3, [r3, #32]
 800e064:	f023 0210 	bic.w	r2, r3, #16
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	685b      	ldr	r3, [r3, #4]
 800e070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	699b      	ldr	r3, [r3, #24]
 800e076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e078:	68fa      	ldr	r2, [r7, #12]
 800e07a:	4b34      	ldr	r3, [pc, #208]	@ (800e14c <TIM_OC2_SetConfig+0xfc>)
 800e07c:	4013      	ands	r3, r2
 800e07e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e086:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	021b      	lsls	r3, r3, #8
 800e08e:	68fa      	ldr	r2, [r7, #12]
 800e090:	4313      	orrs	r3, r2
 800e092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e094:	697b      	ldr	r3, [r7, #20]
 800e096:	f023 0320 	bic.w	r3, r3, #32
 800e09a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	689b      	ldr	r3, [r3, #8]
 800e0a0:	011b      	lsls	r3, r3, #4
 800e0a2:	697a      	ldr	r2, [r7, #20]
 800e0a4:	4313      	orrs	r3, r2
 800e0a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	4a29      	ldr	r2, [pc, #164]	@ (800e150 <TIM_OC2_SetConfig+0x100>)
 800e0ac:	4293      	cmp	r3, r2
 800e0ae:	d003      	beq.n	800e0b8 <TIM_OC2_SetConfig+0x68>
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	4a28      	ldr	r2, [pc, #160]	@ (800e154 <TIM_OC2_SetConfig+0x104>)
 800e0b4:	4293      	cmp	r3, r2
 800e0b6:	d10d      	bne.n	800e0d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e0b8:	697b      	ldr	r3, [r7, #20]
 800e0ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e0be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e0c0:	683b      	ldr	r3, [r7, #0]
 800e0c2:	68db      	ldr	r3, [r3, #12]
 800e0c4:	011b      	lsls	r3, r3, #4
 800e0c6:	697a      	ldr	r2, [r7, #20]
 800e0c8:	4313      	orrs	r3, r2
 800e0ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e0cc:	697b      	ldr	r3, [r7, #20]
 800e0ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e0d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	4a1e      	ldr	r2, [pc, #120]	@ (800e150 <TIM_OC2_SetConfig+0x100>)
 800e0d8:	4293      	cmp	r3, r2
 800e0da:	d00f      	beq.n	800e0fc <TIM_OC2_SetConfig+0xac>
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	4a1d      	ldr	r2, [pc, #116]	@ (800e154 <TIM_OC2_SetConfig+0x104>)
 800e0e0:	4293      	cmp	r3, r2
 800e0e2:	d00b      	beq.n	800e0fc <TIM_OC2_SetConfig+0xac>
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	4a1c      	ldr	r2, [pc, #112]	@ (800e158 <TIM_OC2_SetConfig+0x108>)
 800e0e8:	4293      	cmp	r3, r2
 800e0ea:	d007      	beq.n	800e0fc <TIM_OC2_SetConfig+0xac>
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	4a1b      	ldr	r2, [pc, #108]	@ (800e15c <TIM_OC2_SetConfig+0x10c>)
 800e0f0:	4293      	cmp	r3, r2
 800e0f2:	d003      	beq.n	800e0fc <TIM_OC2_SetConfig+0xac>
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	4a1a      	ldr	r2, [pc, #104]	@ (800e160 <TIM_OC2_SetConfig+0x110>)
 800e0f8:	4293      	cmp	r3, r2
 800e0fa:	d113      	bne.n	800e124 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e0fc:	693b      	ldr	r3, [r7, #16]
 800e0fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e102:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e104:	693b      	ldr	r3, [r7, #16]
 800e106:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e10a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	695b      	ldr	r3, [r3, #20]
 800e110:	009b      	lsls	r3, r3, #2
 800e112:	693a      	ldr	r2, [r7, #16]
 800e114:	4313      	orrs	r3, r2
 800e116:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	699b      	ldr	r3, [r3, #24]
 800e11c:	009b      	lsls	r3, r3, #2
 800e11e:	693a      	ldr	r2, [r7, #16]
 800e120:	4313      	orrs	r3, r2
 800e122:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	693a      	ldr	r2, [r7, #16]
 800e128:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	68fa      	ldr	r2, [r7, #12]
 800e12e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	685a      	ldr	r2, [r3, #4]
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	697a      	ldr	r2, [r7, #20]
 800e13c:	621a      	str	r2, [r3, #32]
}
 800e13e:	bf00      	nop
 800e140:	371c      	adds	r7, #28
 800e142:	46bd      	mov	sp, r7
 800e144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e148:	4770      	bx	lr
 800e14a:	bf00      	nop
 800e14c:	feff8fff 	.word	0xfeff8fff
 800e150:	40010000 	.word	0x40010000
 800e154:	40010400 	.word	0x40010400
 800e158:	40014000 	.word	0x40014000
 800e15c:	40014400 	.word	0x40014400
 800e160:	40014800 	.word	0x40014800

0800e164 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e164:	b480      	push	{r7}
 800e166:	b087      	sub	sp, #28
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
 800e16c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	6a1b      	ldr	r3, [r3, #32]
 800e172:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	6a1b      	ldr	r3, [r3, #32]
 800e178:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	685b      	ldr	r3, [r3, #4]
 800e184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	69db      	ldr	r3, [r3, #28]
 800e18a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e18c:	68fa      	ldr	r2, [r7, #12]
 800e18e:	4b33      	ldr	r3, [pc, #204]	@ (800e25c <TIM_OC3_SetConfig+0xf8>)
 800e190:	4013      	ands	r3, r2
 800e192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	f023 0303 	bic.w	r3, r3, #3
 800e19a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	68fa      	ldr	r2, [r7, #12]
 800e1a2:	4313      	orrs	r3, r2
 800e1a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e1a6:	697b      	ldr	r3, [r7, #20]
 800e1a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e1ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	689b      	ldr	r3, [r3, #8]
 800e1b2:	021b      	lsls	r3, r3, #8
 800e1b4:	697a      	ldr	r2, [r7, #20]
 800e1b6:	4313      	orrs	r3, r2
 800e1b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	4a28      	ldr	r2, [pc, #160]	@ (800e260 <TIM_OC3_SetConfig+0xfc>)
 800e1be:	4293      	cmp	r3, r2
 800e1c0:	d003      	beq.n	800e1ca <TIM_OC3_SetConfig+0x66>
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	4a27      	ldr	r2, [pc, #156]	@ (800e264 <TIM_OC3_SetConfig+0x100>)
 800e1c6:	4293      	cmp	r3, r2
 800e1c8:	d10d      	bne.n	800e1e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e1ca:	697b      	ldr	r3, [r7, #20]
 800e1cc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e1d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e1d2:	683b      	ldr	r3, [r7, #0]
 800e1d4:	68db      	ldr	r3, [r3, #12]
 800e1d6:	021b      	lsls	r3, r3, #8
 800e1d8:	697a      	ldr	r2, [r7, #20]
 800e1da:	4313      	orrs	r3, r2
 800e1dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e1de:	697b      	ldr	r3, [r7, #20]
 800e1e0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e1e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	4a1d      	ldr	r2, [pc, #116]	@ (800e260 <TIM_OC3_SetConfig+0xfc>)
 800e1ea:	4293      	cmp	r3, r2
 800e1ec:	d00f      	beq.n	800e20e <TIM_OC3_SetConfig+0xaa>
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	4a1c      	ldr	r2, [pc, #112]	@ (800e264 <TIM_OC3_SetConfig+0x100>)
 800e1f2:	4293      	cmp	r3, r2
 800e1f4:	d00b      	beq.n	800e20e <TIM_OC3_SetConfig+0xaa>
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	4a1b      	ldr	r2, [pc, #108]	@ (800e268 <TIM_OC3_SetConfig+0x104>)
 800e1fa:	4293      	cmp	r3, r2
 800e1fc:	d007      	beq.n	800e20e <TIM_OC3_SetConfig+0xaa>
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	4a1a      	ldr	r2, [pc, #104]	@ (800e26c <TIM_OC3_SetConfig+0x108>)
 800e202:	4293      	cmp	r3, r2
 800e204:	d003      	beq.n	800e20e <TIM_OC3_SetConfig+0xaa>
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	4a19      	ldr	r2, [pc, #100]	@ (800e270 <TIM_OC3_SetConfig+0x10c>)
 800e20a:	4293      	cmp	r3, r2
 800e20c:	d113      	bne.n	800e236 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e20e:	693b      	ldr	r3, [r7, #16]
 800e210:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e214:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e216:	693b      	ldr	r3, [r7, #16]
 800e218:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e21c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	695b      	ldr	r3, [r3, #20]
 800e222:	011b      	lsls	r3, r3, #4
 800e224:	693a      	ldr	r2, [r7, #16]
 800e226:	4313      	orrs	r3, r2
 800e228:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	699b      	ldr	r3, [r3, #24]
 800e22e:	011b      	lsls	r3, r3, #4
 800e230:	693a      	ldr	r2, [r7, #16]
 800e232:	4313      	orrs	r3, r2
 800e234:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	693a      	ldr	r2, [r7, #16]
 800e23a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	68fa      	ldr	r2, [r7, #12]
 800e240:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e242:	683b      	ldr	r3, [r7, #0]
 800e244:	685a      	ldr	r2, [r3, #4]
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	697a      	ldr	r2, [r7, #20]
 800e24e:	621a      	str	r2, [r3, #32]
}
 800e250:	bf00      	nop
 800e252:	371c      	adds	r7, #28
 800e254:	46bd      	mov	sp, r7
 800e256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25a:	4770      	bx	lr
 800e25c:	fffeff8f 	.word	0xfffeff8f
 800e260:	40010000 	.word	0x40010000
 800e264:	40010400 	.word	0x40010400
 800e268:	40014000 	.word	0x40014000
 800e26c:	40014400 	.word	0x40014400
 800e270:	40014800 	.word	0x40014800

0800e274 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e274:	b480      	push	{r7}
 800e276:	b087      	sub	sp, #28
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
 800e27c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	6a1b      	ldr	r3, [r3, #32]
 800e282:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	6a1b      	ldr	r3, [r3, #32]
 800e288:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	685b      	ldr	r3, [r3, #4]
 800e294:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	69db      	ldr	r3, [r3, #28]
 800e29a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e29c:	68fa      	ldr	r2, [r7, #12]
 800e29e:	4b24      	ldr	r3, [pc, #144]	@ (800e330 <TIM_OC4_SetConfig+0xbc>)
 800e2a0:	4013      	ands	r3, r2
 800e2a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e2aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e2ac:	683b      	ldr	r3, [r7, #0]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	021b      	lsls	r3, r3, #8
 800e2b2:	68fa      	ldr	r2, [r7, #12]
 800e2b4:	4313      	orrs	r3, r2
 800e2b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e2b8:	693b      	ldr	r3, [r7, #16]
 800e2ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e2be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	689b      	ldr	r3, [r3, #8]
 800e2c4:	031b      	lsls	r3, r3, #12
 800e2c6:	693a      	ldr	r2, [r7, #16]
 800e2c8:	4313      	orrs	r3, r2
 800e2ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	4a19      	ldr	r2, [pc, #100]	@ (800e334 <TIM_OC4_SetConfig+0xc0>)
 800e2d0:	4293      	cmp	r3, r2
 800e2d2:	d00f      	beq.n	800e2f4 <TIM_OC4_SetConfig+0x80>
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	4a18      	ldr	r2, [pc, #96]	@ (800e338 <TIM_OC4_SetConfig+0xc4>)
 800e2d8:	4293      	cmp	r3, r2
 800e2da:	d00b      	beq.n	800e2f4 <TIM_OC4_SetConfig+0x80>
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	4a17      	ldr	r2, [pc, #92]	@ (800e33c <TIM_OC4_SetConfig+0xc8>)
 800e2e0:	4293      	cmp	r3, r2
 800e2e2:	d007      	beq.n	800e2f4 <TIM_OC4_SetConfig+0x80>
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	4a16      	ldr	r2, [pc, #88]	@ (800e340 <TIM_OC4_SetConfig+0xcc>)
 800e2e8:	4293      	cmp	r3, r2
 800e2ea:	d003      	beq.n	800e2f4 <TIM_OC4_SetConfig+0x80>
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	4a15      	ldr	r2, [pc, #84]	@ (800e344 <TIM_OC4_SetConfig+0xd0>)
 800e2f0:	4293      	cmp	r3, r2
 800e2f2:	d109      	bne.n	800e308 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e2f4:	697b      	ldr	r3, [r7, #20]
 800e2f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e2fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	695b      	ldr	r3, [r3, #20]
 800e300:	019b      	lsls	r3, r3, #6
 800e302:	697a      	ldr	r2, [r7, #20]
 800e304:	4313      	orrs	r3, r2
 800e306:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	697a      	ldr	r2, [r7, #20]
 800e30c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	68fa      	ldr	r2, [r7, #12]
 800e312:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	685a      	ldr	r2, [r3, #4]
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	693a      	ldr	r2, [r7, #16]
 800e320:	621a      	str	r2, [r3, #32]
}
 800e322:	bf00      	nop
 800e324:	371c      	adds	r7, #28
 800e326:	46bd      	mov	sp, r7
 800e328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32c:	4770      	bx	lr
 800e32e:	bf00      	nop
 800e330:	feff8fff 	.word	0xfeff8fff
 800e334:	40010000 	.word	0x40010000
 800e338:	40010400 	.word	0x40010400
 800e33c:	40014000 	.word	0x40014000
 800e340:	40014400 	.word	0x40014400
 800e344:	40014800 	.word	0x40014800

0800e348 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e348:	b480      	push	{r7}
 800e34a:	b087      	sub	sp, #28
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
 800e350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6a1b      	ldr	r3, [r3, #32]
 800e356:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	6a1b      	ldr	r3, [r3, #32]
 800e35c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	685b      	ldr	r3, [r3, #4]
 800e368:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e36e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e370:	68fa      	ldr	r2, [r7, #12]
 800e372:	4b21      	ldr	r3, [pc, #132]	@ (800e3f8 <TIM_OC5_SetConfig+0xb0>)
 800e374:	4013      	ands	r3, r2
 800e376:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e378:	683b      	ldr	r3, [r7, #0]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	68fa      	ldr	r2, [r7, #12]
 800e37e:	4313      	orrs	r3, r2
 800e380:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e382:	693b      	ldr	r3, [r7, #16]
 800e384:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e388:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e38a:	683b      	ldr	r3, [r7, #0]
 800e38c:	689b      	ldr	r3, [r3, #8]
 800e38e:	041b      	lsls	r3, r3, #16
 800e390:	693a      	ldr	r2, [r7, #16]
 800e392:	4313      	orrs	r3, r2
 800e394:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	4a18      	ldr	r2, [pc, #96]	@ (800e3fc <TIM_OC5_SetConfig+0xb4>)
 800e39a:	4293      	cmp	r3, r2
 800e39c:	d00f      	beq.n	800e3be <TIM_OC5_SetConfig+0x76>
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	4a17      	ldr	r2, [pc, #92]	@ (800e400 <TIM_OC5_SetConfig+0xb8>)
 800e3a2:	4293      	cmp	r3, r2
 800e3a4:	d00b      	beq.n	800e3be <TIM_OC5_SetConfig+0x76>
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	4a16      	ldr	r2, [pc, #88]	@ (800e404 <TIM_OC5_SetConfig+0xbc>)
 800e3aa:	4293      	cmp	r3, r2
 800e3ac:	d007      	beq.n	800e3be <TIM_OC5_SetConfig+0x76>
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	4a15      	ldr	r2, [pc, #84]	@ (800e408 <TIM_OC5_SetConfig+0xc0>)
 800e3b2:	4293      	cmp	r3, r2
 800e3b4:	d003      	beq.n	800e3be <TIM_OC5_SetConfig+0x76>
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	4a14      	ldr	r2, [pc, #80]	@ (800e40c <TIM_OC5_SetConfig+0xc4>)
 800e3ba:	4293      	cmp	r3, r2
 800e3bc:	d109      	bne.n	800e3d2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e3be:	697b      	ldr	r3, [r7, #20]
 800e3c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e3c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	695b      	ldr	r3, [r3, #20]
 800e3ca:	021b      	lsls	r3, r3, #8
 800e3cc:	697a      	ldr	r2, [r7, #20]
 800e3ce:	4313      	orrs	r3, r2
 800e3d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	697a      	ldr	r2, [r7, #20]
 800e3d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	68fa      	ldr	r2, [r7, #12]
 800e3dc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	685a      	ldr	r2, [r3, #4]
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	693a      	ldr	r2, [r7, #16]
 800e3ea:	621a      	str	r2, [r3, #32]
}
 800e3ec:	bf00      	nop
 800e3ee:	371c      	adds	r7, #28
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f6:	4770      	bx	lr
 800e3f8:	fffeff8f 	.word	0xfffeff8f
 800e3fc:	40010000 	.word	0x40010000
 800e400:	40010400 	.word	0x40010400
 800e404:	40014000 	.word	0x40014000
 800e408:	40014400 	.word	0x40014400
 800e40c:	40014800 	.word	0x40014800

0800e410 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e410:	b480      	push	{r7}
 800e412:	b087      	sub	sp, #28
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
 800e418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	6a1b      	ldr	r3, [r3, #32]
 800e41e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	6a1b      	ldr	r3, [r3, #32]
 800e424:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	685b      	ldr	r3, [r3, #4]
 800e430:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e438:	68fa      	ldr	r2, [r7, #12]
 800e43a:	4b22      	ldr	r3, [pc, #136]	@ (800e4c4 <TIM_OC6_SetConfig+0xb4>)
 800e43c:	4013      	ands	r3, r2
 800e43e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	021b      	lsls	r3, r3, #8
 800e446:	68fa      	ldr	r2, [r7, #12]
 800e448:	4313      	orrs	r3, r2
 800e44a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e44c:	693b      	ldr	r3, [r7, #16]
 800e44e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e452:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	689b      	ldr	r3, [r3, #8]
 800e458:	051b      	lsls	r3, r3, #20
 800e45a:	693a      	ldr	r2, [r7, #16]
 800e45c:	4313      	orrs	r3, r2
 800e45e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	4a19      	ldr	r2, [pc, #100]	@ (800e4c8 <TIM_OC6_SetConfig+0xb8>)
 800e464:	4293      	cmp	r3, r2
 800e466:	d00f      	beq.n	800e488 <TIM_OC6_SetConfig+0x78>
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	4a18      	ldr	r2, [pc, #96]	@ (800e4cc <TIM_OC6_SetConfig+0xbc>)
 800e46c:	4293      	cmp	r3, r2
 800e46e:	d00b      	beq.n	800e488 <TIM_OC6_SetConfig+0x78>
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	4a17      	ldr	r2, [pc, #92]	@ (800e4d0 <TIM_OC6_SetConfig+0xc0>)
 800e474:	4293      	cmp	r3, r2
 800e476:	d007      	beq.n	800e488 <TIM_OC6_SetConfig+0x78>
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	4a16      	ldr	r2, [pc, #88]	@ (800e4d4 <TIM_OC6_SetConfig+0xc4>)
 800e47c:	4293      	cmp	r3, r2
 800e47e:	d003      	beq.n	800e488 <TIM_OC6_SetConfig+0x78>
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	4a15      	ldr	r2, [pc, #84]	@ (800e4d8 <TIM_OC6_SetConfig+0xc8>)
 800e484:	4293      	cmp	r3, r2
 800e486:	d109      	bne.n	800e49c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e488:	697b      	ldr	r3, [r7, #20]
 800e48a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e48e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e490:	683b      	ldr	r3, [r7, #0]
 800e492:	695b      	ldr	r3, [r3, #20]
 800e494:	029b      	lsls	r3, r3, #10
 800e496:	697a      	ldr	r2, [r7, #20]
 800e498:	4313      	orrs	r3, r2
 800e49a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	697a      	ldr	r2, [r7, #20]
 800e4a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	68fa      	ldr	r2, [r7, #12]
 800e4a6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	685a      	ldr	r2, [r3, #4]
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	693a      	ldr	r2, [r7, #16]
 800e4b4:	621a      	str	r2, [r3, #32]
}
 800e4b6:	bf00      	nop
 800e4b8:	371c      	adds	r7, #28
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c0:	4770      	bx	lr
 800e4c2:	bf00      	nop
 800e4c4:	feff8fff 	.word	0xfeff8fff
 800e4c8:	40010000 	.word	0x40010000
 800e4cc:	40010400 	.word	0x40010400
 800e4d0:	40014000 	.word	0x40014000
 800e4d4:	40014400 	.word	0x40014400
 800e4d8:	40014800 	.word	0x40014800

0800e4dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e4dc:	b480      	push	{r7}
 800e4de:	b087      	sub	sp, #28
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	60f8      	str	r0, [r7, #12]
 800e4e4:	60b9      	str	r1, [r7, #8]
 800e4e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e4e8:	68bb      	ldr	r3, [r7, #8]
 800e4ea:	f003 031f 	and.w	r3, r3, #31
 800e4ee:	2201      	movs	r2, #1
 800e4f0:	fa02 f303 	lsl.w	r3, r2, r3
 800e4f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	6a1a      	ldr	r2, [r3, #32]
 800e4fa:	697b      	ldr	r3, [r7, #20]
 800e4fc:	43db      	mvns	r3, r3
 800e4fe:	401a      	ands	r2, r3
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	6a1a      	ldr	r2, [r3, #32]
 800e508:	68bb      	ldr	r3, [r7, #8]
 800e50a:	f003 031f 	and.w	r3, r3, #31
 800e50e:	6879      	ldr	r1, [r7, #4]
 800e510:	fa01 f303 	lsl.w	r3, r1, r3
 800e514:	431a      	orrs	r2, r3
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	621a      	str	r2, [r3, #32]
}
 800e51a:	bf00      	nop
 800e51c:	371c      	adds	r7, #28
 800e51e:	46bd      	mov	sp, r7
 800e520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e524:	4770      	bx	lr
	...

0800e528 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e528:	b480      	push	{r7}
 800e52a:	b085      	sub	sp, #20
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
 800e530:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e538:	2b01      	cmp	r3, #1
 800e53a:	d101      	bne.n	800e540 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e53c:	2302      	movs	r3, #2
 800e53e:	e06d      	b.n	800e61c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	2201      	movs	r2, #1
 800e544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2202      	movs	r2, #2
 800e54c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	685b      	ldr	r3, [r3, #4]
 800e556:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	689b      	ldr	r3, [r3, #8]
 800e55e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	4a30      	ldr	r2, [pc, #192]	@ (800e628 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e566:	4293      	cmp	r3, r2
 800e568:	d004      	beq.n	800e574 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	4a2f      	ldr	r2, [pc, #188]	@ (800e62c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e570:	4293      	cmp	r3, r2
 800e572:	d108      	bne.n	800e586 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e57a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e57c:	683b      	ldr	r3, [r7, #0]
 800e57e:	685b      	ldr	r3, [r3, #4]
 800e580:	68fa      	ldr	r2, [r7, #12]
 800e582:	4313      	orrs	r3, r2
 800e584:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e58c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e58e:	683b      	ldr	r3, [r7, #0]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	68fa      	ldr	r2, [r7, #12]
 800e594:	4313      	orrs	r3, r2
 800e596:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	68fa      	ldr	r2, [r7, #12]
 800e59e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	4a20      	ldr	r2, [pc, #128]	@ (800e628 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e5a6:	4293      	cmp	r3, r2
 800e5a8:	d022      	beq.n	800e5f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e5b2:	d01d      	beq.n	800e5f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	4a1d      	ldr	r2, [pc, #116]	@ (800e630 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e5ba:	4293      	cmp	r3, r2
 800e5bc:	d018      	beq.n	800e5f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	4a1c      	ldr	r2, [pc, #112]	@ (800e634 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e5c4:	4293      	cmp	r3, r2
 800e5c6:	d013      	beq.n	800e5f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	4a1a      	ldr	r2, [pc, #104]	@ (800e638 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e5ce:	4293      	cmp	r3, r2
 800e5d0:	d00e      	beq.n	800e5f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	4a15      	ldr	r2, [pc, #84]	@ (800e62c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e5d8:	4293      	cmp	r3, r2
 800e5da:	d009      	beq.n	800e5f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	4a16      	ldr	r2, [pc, #88]	@ (800e63c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e5e2:	4293      	cmp	r3, r2
 800e5e4:	d004      	beq.n	800e5f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	4a15      	ldr	r2, [pc, #84]	@ (800e640 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e5ec:	4293      	cmp	r3, r2
 800e5ee:	d10c      	bne.n	800e60a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e5f0:	68bb      	ldr	r3, [r7, #8]
 800e5f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e5f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e5f8:	683b      	ldr	r3, [r7, #0]
 800e5fa:	689b      	ldr	r3, [r3, #8]
 800e5fc:	68ba      	ldr	r2, [r7, #8]
 800e5fe:	4313      	orrs	r3, r2
 800e600:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	68ba      	ldr	r2, [r7, #8]
 800e608:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	2201      	movs	r2, #1
 800e60e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	2200      	movs	r2, #0
 800e616:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e61a:	2300      	movs	r3, #0
}
 800e61c:	4618      	mov	r0, r3
 800e61e:	3714      	adds	r7, #20
 800e620:	46bd      	mov	sp, r7
 800e622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e626:	4770      	bx	lr
 800e628:	40010000 	.word	0x40010000
 800e62c:	40010400 	.word	0x40010400
 800e630:	40000400 	.word	0x40000400
 800e634:	40000800 	.word	0x40000800
 800e638:	40000c00 	.word	0x40000c00
 800e63c:	40001800 	.word	0x40001800
 800e640:	40014000 	.word	0x40014000

0800e644 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e644:	b480      	push	{r7}
 800e646:	b083      	sub	sp, #12
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e64c:	bf00      	nop
 800e64e:	370c      	adds	r7, #12
 800e650:	46bd      	mov	sp, r7
 800e652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e656:	4770      	bx	lr

0800e658 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e658:	b480      	push	{r7}
 800e65a:	b083      	sub	sp, #12
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e660:	bf00      	nop
 800e662:	370c      	adds	r7, #12
 800e664:	46bd      	mov	sp, r7
 800e666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66a:	4770      	bx	lr

0800e66c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e66c:	b480      	push	{r7}
 800e66e:	b083      	sub	sp, #12
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e674:	bf00      	nop
 800e676:	370c      	adds	r7, #12
 800e678:	46bd      	mov	sp, r7
 800e67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67e:	4770      	bx	lr

0800e680 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e680:	b580      	push	{r7, lr}
 800e682:	b082      	sub	sp, #8
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d101      	bne.n	800e692 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e68e:	2301      	movs	r3, #1
 800e690:	e042      	b.n	800e718 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d106      	bne.n	800e6aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	2200      	movs	r2, #0
 800e6a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e6a4:	6878      	ldr	r0, [r7, #4]
 800e6a6:	f7f6 fdc9 	bl	800523c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	2224      	movs	r2, #36	@ 0x24
 800e6ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	681a      	ldr	r2, [r3, #0]
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	f022 0201 	bic.w	r2, r2, #1
 800e6c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d002      	beq.n	800e6d0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e6ca:	6878      	ldr	r0, [r7, #4]
 800e6cc:	f001 fe0e 	bl	80102ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e6d0:	6878      	ldr	r0, [r7, #4]
 800e6d2:	f000 ff9f 	bl	800f614 <UART_SetConfig>
 800e6d6:	4603      	mov	r3, r0
 800e6d8:	2b01      	cmp	r3, #1
 800e6da:	d101      	bne.n	800e6e0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e6dc:	2301      	movs	r3, #1
 800e6de:	e01b      	b.n	800e718 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	685a      	ldr	r2, [r3, #4]
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e6ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	689a      	ldr	r2, [r3, #8]
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e6fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	681a      	ldr	r2, [r3, #0]
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	f042 0201 	orr.w	r2, r2, #1
 800e70e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e710:	6878      	ldr	r0, [r7, #4]
 800e712:	f001 fe8d 	bl	8010430 <UART_CheckIdleState>
 800e716:	4603      	mov	r3, r0
}
 800e718:	4618      	mov	r0, r3
 800e71a:	3708      	adds	r7, #8
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bd80      	pop	{r7, pc}

0800e720 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b08a      	sub	sp, #40	@ 0x28
 800e724:	af02      	add	r7, sp, #8
 800e726:	60f8      	str	r0, [r7, #12]
 800e728:	60b9      	str	r1, [r7, #8]
 800e72a:	603b      	str	r3, [r7, #0]
 800e72c:	4613      	mov	r3, r2
 800e72e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e736:	2b20      	cmp	r3, #32
 800e738:	d17b      	bne.n	800e832 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e73a:	68bb      	ldr	r3, [r7, #8]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d002      	beq.n	800e746 <HAL_UART_Transmit+0x26>
 800e740:	88fb      	ldrh	r3, [r7, #6]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d101      	bne.n	800e74a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e746:	2301      	movs	r3, #1
 800e748:	e074      	b.n	800e834 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	2200      	movs	r2, #0
 800e74e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	2221      	movs	r2, #33	@ 0x21
 800e756:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e75a:	f7f7 f847 	bl	80057ec <HAL_GetTick>
 800e75e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	88fa      	ldrh	r2, [r7, #6]
 800e764:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	88fa      	ldrh	r2, [r7, #6]
 800e76c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	689b      	ldr	r3, [r3, #8]
 800e774:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e778:	d108      	bne.n	800e78c <HAL_UART_Transmit+0x6c>
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	691b      	ldr	r3, [r3, #16]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d104      	bne.n	800e78c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e782:	2300      	movs	r3, #0
 800e784:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e786:	68bb      	ldr	r3, [r7, #8]
 800e788:	61bb      	str	r3, [r7, #24]
 800e78a:	e003      	b.n	800e794 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e78c:	68bb      	ldr	r3, [r7, #8]
 800e78e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e790:	2300      	movs	r3, #0
 800e792:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e794:	e030      	b.n	800e7f8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e796:	683b      	ldr	r3, [r7, #0]
 800e798:	9300      	str	r3, [sp, #0]
 800e79a:	697b      	ldr	r3, [r7, #20]
 800e79c:	2200      	movs	r2, #0
 800e79e:	2180      	movs	r1, #128	@ 0x80
 800e7a0:	68f8      	ldr	r0, [r7, #12]
 800e7a2:	f001 feef 	bl	8010584 <UART_WaitOnFlagUntilTimeout>
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d005      	beq.n	800e7b8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	2220      	movs	r2, #32
 800e7b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800e7b4:	2303      	movs	r3, #3
 800e7b6:	e03d      	b.n	800e834 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e7b8:	69fb      	ldr	r3, [r7, #28]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d10b      	bne.n	800e7d6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e7be:	69bb      	ldr	r3, [r7, #24]
 800e7c0:	881b      	ldrh	r3, [r3, #0]
 800e7c2:	461a      	mov	r2, r3
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e7cc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e7ce:	69bb      	ldr	r3, [r7, #24]
 800e7d0:	3302      	adds	r3, #2
 800e7d2:	61bb      	str	r3, [r7, #24]
 800e7d4:	e007      	b.n	800e7e6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e7d6:	69fb      	ldr	r3, [r7, #28]
 800e7d8:	781a      	ldrb	r2, [r3, #0]
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e7e0:	69fb      	ldr	r3, [r7, #28]
 800e7e2:	3301      	adds	r3, #1
 800e7e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e7ec:	b29b      	uxth	r3, r3
 800e7ee:	3b01      	subs	r3, #1
 800e7f0:	b29a      	uxth	r2, r3
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e7fe:	b29b      	uxth	r3, r3
 800e800:	2b00      	cmp	r3, #0
 800e802:	d1c8      	bne.n	800e796 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e804:	683b      	ldr	r3, [r7, #0]
 800e806:	9300      	str	r3, [sp, #0]
 800e808:	697b      	ldr	r3, [r7, #20]
 800e80a:	2200      	movs	r2, #0
 800e80c:	2140      	movs	r1, #64	@ 0x40
 800e80e:	68f8      	ldr	r0, [r7, #12]
 800e810:	f001 feb8 	bl	8010584 <UART_WaitOnFlagUntilTimeout>
 800e814:	4603      	mov	r3, r0
 800e816:	2b00      	cmp	r3, #0
 800e818:	d005      	beq.n	800e826 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	2220      	movs	r2, #32
 800e81e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800e822:	2303      	movs	r3, #3
 800e824:	e006      	b.n	800e834 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	2220      	movs	r2, #32
 800e82a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800e82e:	2300      	movs	r3, #0
 800e830:	e000      	b.n	800e834 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e832:	2302      	movs	r3, #2
  }
}
 800e834:	4618      	mov	r0, r3
 800e836:	3720      	adds	r7, #32
 800e838:	46bd      	mov	sp, r7
 800e83a:	bd80      	pop	{r7, pc}

0800e83c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800e83c:	b480      	push	{r7}
 800e83e:	b091      	sub	sp, #68	@ 0x44
 800e840:	af00      	add	r7, sp, #0
 800e842:	60f8      	str	r0, [r7, #12]
 800e844:	60b9      	str	r1, [r7, #8]
 800e846:	4613      	mov	r3, r2
 800e848:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e850:	2b20      	cmp	r3, #32
 800e852:	d178      	bne.n	800e946 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e854:	68bb      	ldr	r3, [r7, #8]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d002      	beq.n	800e860 <HAL_UART_Transmit_IT+0x24>
 800e85a:	88fb      	ldrh	r3, [r7, #6]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d101      	bne.n	800e864 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800e860:	2301      	movs	r3, #1
 800e862:	e071      	b.n	800e948 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	68ba      	ldr	r2, [r7, #8]
 800e868:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	88fa      	ldrh	r2, [r7, #6]
 800e86e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	88fa      	ldrh	r2, [r7, #6]
 800e876:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	2200      	movs	r2, #0
 800e87e:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	2200      	movs	r2, #0
 800e884:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	2221      	movs	r2, #33	@ 0x21
 800e88c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e894:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e898:	d12a      	bne.n	800e8f0 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	689b      	ldr	r3, [r3, #8]
 800e89e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e8a2:	d107      	bne.n	800e8b4 <HAL_UART_Transmit_IT+0x78>
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	691b      	ldr	r3, [r3, #16]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d103      	bne.n	800e8b4 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	4a29      	ldr	r2, [pc, #164]	@ (800e954 <HAL_UART_Transmit_IT+0x118>)
 800e8b0:	679a      	str	r2, [r3, #120]	@ 0x78
 800e8b2:	e002      	b.n	800e8ba <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	4a28      	ldr	r2, [pc, #160]	@ (800e958 <HAL_UART_Transmit_IT+0x11c>)
 800e8b8:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	3308      	adds	r3, #8
 800e8c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8c4:	e853 3f00 	ldrex	r3, [r3]
 800e8c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e8ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8cc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800e8d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	3308      	adds	r3, #8
 800e8d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e8da:	637a      	str	r2, [r7, #52]	@ 0x34
 800e8dc:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e8e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e8e2:	e841 2300 	strex	r3, r2, [r1]
 800e8e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800e8e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d1e5      	bne.n	800e8ba <HAL_UART_Transmit_IT+0x7e>
 800e8ee:	e028      	b.n	800e942 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	689b      	ldr	r3, [r3, #8]
 800e8f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e8f8:	d107      	bne.n	800e90a <HAL_UART_Transmit_IT+0xce>
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	691b      	ldr	r3, [r3, #16]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d103      	bne.n	800e90a <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	4a15      	ldr	r2, [pc, #84]	@ (800e95c <HAL_UART_Transmit_IT+0x120>)
 800e906:	679a      	str	r2, [r3, #120]	@ 0x78
 800e908:	e002      	b.n	800e910 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	4a14      	ldr	r2, [pc, #80]	@ (800e960 <HAL_UART_Transmit_IT+0x124>)
 800e90e:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e916:	697b      	ldr	r3, [r7, #20]
 800e918:	e853 3f00 	ldrex	r3, [r3]
 800e91c:	613b      	str	r3, [r7, #16]
   return(result);
 800e91e:	693b      	ldr	r3, [r7, #16]
 800e920:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e924:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	461a      	mov	r2, r3
 800e92c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e92e:	623b      	str	r3, [r7, #32]
 800e930:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e932:	69f9      	ldr	r1, [r7, #28]
 800e934:	6a3a      	ldr	r2, [r7, #32]
 800e936:	e841 2300 	strex	r3, r2, [r1]
 800e93a:	61bb      	str	r3, [r7, #24]
   return(result);
 800e93c:	69bb      	ldr	r3, [r7, #24]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d1e6      	bne.n	800e910 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800e942:	2300      	movs	r3, #0
 800e944:	e000      	b.n	800e948 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800e946:	2302      	movs	r3, #2
  }
}
 800e948:	4618      	mov	r0, r3
 800e94a:	3744      	adds	r7, #68	@ 0x44
 800e94c:	46bd      	mov	sp, r7
 800e94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e952:	4770      	bx	lr
 800e954:	080110b9 	.word	0x080110b9
 800e958:	08010fd9 	.word	0x08010fd9
 800e95c:	08010f17 	.word	0x08010f17
 800e960:	08010e5f 	.word	0x08010e5f

0800e964 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b08a      	sub	sp, #40	@ 0x28
 800e968:	af00      	add	r7, sp, #0
 800e96a:	60f8      	str	r0, [r7, #12]
 800e96c:	60b9      	str	r1, [r7, #8]
 800e96e:	4613      	mov	r3, r2
 800e970:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e978:	2b20      	cmp	r3, #32
 800e97a:	d137      	bne.n	800e9ec <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800e97c:	68bb      	ldr	r3, [r7, #8]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d002      	beq.n	800e988 <HAL_UART_Receive_IT+0x24>
 800e982:	88fb      	ldrh	r3, [r7, #6]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d101      	bne.n	800e98c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800e988:	2301      	movs	r3, #1
 800e98a:	e030      	b.n	800e9ee <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	2200      	movs	r2, #0
 800e990:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	4a18      	ldr	r2, [pc, #96]	@ (800e9f8 <HAL_UART_Receive_IT+0x94>)
 800e998:	4293      	cmp	r3, r2
 800e99a:	d01f      	beq.n	800e9dc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	685b      	ldr	r3, [r3, #4]
 800e9a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d018      	beq.n	800e9dc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9b0:	697b      	ldr	r3, [r7, #20]
 800e9b2:	e853 3f00 	ldrex	r3, [r3]
 800e9b6:	613b      	str	r3, [r7, #16]
   return(result);
 800e9b8:	693b      	ldr	r3, [r7, #16]
 800e9ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e9be:	627b      	str	r3, [r7, #36]	@ 0x24
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	461a      	mov	r2, r3
 800e9c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9c8:	623b      	str	r3, [r7, #32]
 800e9ca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9cc:	69f9      	ldr	r1, [r7, #28]
 800e9ce:	6a3a      	ldr	r2, [r7, #32]
 800e9d0:	e841 2300 	strex	r3, r2, [r1]
 800e9d4:	61bb      	str	r3, [r7, #24]
   return(result);
 800e9d6:	69bb      	ldr	r3, [r7, #24]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d1e6      	bne.n	800e9aa <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e9dc:	88fb      	ldrh	r3, [r7, #6]
 800e9de:	461a      	mov	r2, r3
 800e9e0:	68b9      	ldr	r1, [r7, #8]
 800e9e2:	68f8      	ldr	r0, [r7, #12]
 800e9e4:	f001 fe3c 	bl	8010660 <UART_Start_Receive_IT>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	e000      	b.n	800e9ee <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e9ec:	2302      	movs	r3, #2
  }
}
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	3728      	adds	r7, #40	@ 0x28
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bd80      	pop	{r7, pc}
 800e9f6:	bf00      	nop
 800e9f8:	58000c00 	.word	0x58000c00

0800e9fc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b08a      	sub	sp, #40	@ 0x28
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	60f8      	str	r0, [r7, #12]
 800ea04:	60b9      	str	r1, [r7, #8]
 800ea06:	4613      	mov	r3, r2
 800ea08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ea10:	2b20      	cmp	r3, #32
 800ea12:	d137      	bne.n	800ea84 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800ea14:	68bb      	ldr	r3, [r7, #8]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d002      	beq.n	800ea20 <HAL_UART_Receive_DMA+0x24>
 800ea1a:	88fb      	ldrh	r3, [r7, #6]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d101      	bne.n	800ea24 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800ea20:	2301      	movs	r3, #1
 800ea22:	e030      	b.n	800ea86 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	2200      	movs	r2, #0
 800ea28:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	4a18      	ldr	r2, [pc, #96]	@ (800ea90 <HAL_UART_Receive_DMA+0x94>)
 800ea30:	4293      	cmp	r3, r2
 800ea32:	d01f      	beq.n	800ea74 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	685b      	ldr	r3, [r3, #4]
 800ea3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d018      	beq.n	800ea74 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea48:	697b      	ldr	r3, [r7, #20]
 800ea4a:	e853 3f00 	ldrex	r3, [r3]
 800ea4e:	613b      	str	r3, [r7, #16]
   return(result);
 800ea50:	693b      	ldr	r3, [r7, #16]
 800ea52:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ea56:	627b      	str	r3, [r7, #36]	@ 0x24
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	461a      	mov	r2, r3
 800ea5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea60:	623b      	str	r3, [r7, #32]
 800ea62:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea64:	69f9      	ldr	r1, [r7, #28]
 800ea66:	6a3a      	ldr	r2, [r7, #32]
 800ea68:	e841 2300 	strex	r3, r2, [r1]
 800ea6c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ea6e:	69bb      	ldr	r3, [r7, #24]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d1e6      	bne.n	800ea42 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ea74:	88fb      	ldrh	r3, [r7, #6]
 800ea76:	461a      	mov	r2, r3
 800ea78:	68b9      	ldr	r1, [r7, #8]
 800ea7a:	68f8      	ldr	r0, [r7, #12]
 800ea7c:	f001 ff12 	bl	80108a4 <UART_Start_Receive_DMA>
 800ea80:	4603      	mov	r3, r0
 800ea82:	e000      	b.n	800ea86 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ea84:	2302      	movs	r3, #2
  }
}
 800ea86:	4618      	mov	r0, r3
 800ea88:	3728      	adds	r7, #40	@ 0x28
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bd80      	pop	{r7, pc}
 800ea8e:	bf00      	nop
 800ea90:	58000c00 	.word	0x58000c00

0800ea94 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b090      	sub	sp, #64	@ 0x40
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800eaa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800eaaa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	689b      	ldr	r3, [r3, #8]
 800eab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eab6:	2b80      	cmp	r3, #128	@ 0x80
 800eab8:	d139      	bne.n	800eb2e <HAL_UART_DMAStop+0x9a>
 800eaba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eabc:	2b21      	cmp	r3, #33	@ 0x21
 800eabe:	d136      	bne.n	800eb2e <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	3308      	adds	r3, #8
 800eac6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eac8:	6a3b      	ldr	r3, [r7, #32]
 800eaca:	e853 3f00 	ldrex	r3, [r3]
 800eace:	61fb      	str	r3, [r7, #28]
   return(result);
 800ead0:	69fb      	ldr	r3, [r7, #28]
 800ead2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ead6:	637b      	str	r3, [r7, #52]	@ 0x34
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	3308      	adds	r3, #8
 800eade:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800eae0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800eae2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eae4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eae6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eae8:	e841 2300 	strex	r3, r2, [r1]
 800eaec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800eaee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d1e5      	bne.n	800eac0 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d015      	beq.n	800eb28 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800eb00:	4618      	mov	r0, r3
 800eb02:	f7f7 fe23 	bl	800674c <HAL_DMA_Abort>
 800eb06:	4603      	mov	r3, r0
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d00d      	beq.n	800eb28 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800eb10:	4618      	mov	r0, r3
 800eb12:	f7f9 fae1 	bl	80080d8 <HAL_DMA_GetError>
 800eb16:	4603      	mov	r3, r0
 800eb18:	2b20      	cmp	r3, #32
 800eb1a:	d105      	bne.n	800eb28 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	2210      	movs	r2, #16
 800eb20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800eb24:	2303      	movs	r3, #3
 800eb26:	e047      	b.n	800ebb8 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800eb28:	6878      	ldr	r0, [r7, #4]
 800eb2a:	f001 ff61 	bl	80109f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	689b      	ldr	r3, [r3, #8]
 800eb34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb38:	2b40      	cmp	r3, #64	@ 0x40
 800eb3a:	d13c      	bne.n	800ebb6 <HAL_UART_DMAStop+0x122>
 800eb3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb3e:	2b22      	cmp	r3, #34	@ 0x22
 800eb40:	d139      	bne.n	800ebb6 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	3308      	adds	r3, #8
 800eb48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	e853 3f00 	ldrex	r3, [r3]
 800eb50:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb52:	68bb      	ldr	r3, [r7, #8]
 800eb54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800eb58:	633b      	str	r3, [r7, #48]	@ 0x30
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	3308      	adds	r3, #8
 800eb60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eb62:	61ba      	str	r2, [r7, #24]
 800eb64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb66:	6979      	ldr	r1, [r7, #20]
 800eb68:	69ba      	ldr	r2, [r7, #24]
 800eb6a:	e841 2300 	strex	r3, r2, [r1]
 800eb6e:	613b      	str	r3, [r7, #16]
   return(result);
 800eb70:	693b      	ldr	r3, [r7, #16]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d1e5      	bne.n	800eb42 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d017      	beq.n	800ebb0 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eb86:	4618      	mov	r0, r3
 800eb88:	f7f7 fde0 	bl	800674c <HAL_DMA_Abort>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d00e      	beq.n	800ebb0 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f7f9 fa9d 	bl	80080d8 <HAL_DMA_GetError>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	2b20      	cmp	r3, #32
 800eba2:	d105      	bne.n	800ebb0 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	2210      	movs	r2, #16
 800eba8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800ebac:	2303      	movs	r3, #3
 800ebae:	e003      	b.n	800ebb8 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800ebb0:	6878      	ldr	r0, [r7, #4]
 800ebb2:	f001 ff5f 	bl	8010a74 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800ebb6:	2300      	movs	r3, #0
}
 800ebb8:	4618      	mov	r0, r3
 800ebba:	3740      	adds	r7, #64	@ 0x40
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	bd80      	pop	{r7, pc}

0800ebc0 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b0a2      	sub	sp, #136	@ 0x88
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 800ebc8:	2301      	movs	r3, #1
 800ebca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebd4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ebd6:	e853 3f00 	ldrex	r3, [r3]
 800ebda:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ebdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ebde:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800ebe2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	461a      	mov	r2, r3
 800ebec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ebf0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ebf2:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebf4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ebf6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ebf8:	e841 2300 	strex	r3, r2, [r1]
 800ebfc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ebfe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d1e4      	bne.n	800ebce <HAL_UART_Abort_IT+0xe>
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	3308      	adds	r3, #8
 800ec0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ec0e:	e853 3f00 	ldrex	r3, [r3]
 800ec12:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ec14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ec16:	4b85      	ldr	r3, [pc, #532]	@ (800ee2c <HAL_UART_Abort_IT+0x26c>)
 800ec18:	4013      	ands	r3, r2
 800ec1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	3308      	adds	r3, #8
 800ec22:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ec24:	65ba      	str	r2, [r7, #88]	@ 0x58
 800ec26:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec28:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ec2a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ec2c:	e841 2300 	strex	r3, r2, [r1]
 800ec30:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ec32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d1e5      	bne.n	800ec04 <HAL_UART_Abort_IT+0x44>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ec3c:	2b01      	cmp	r3, #1
 800ec3e:	d118      	bne.n	800ec72 <HAL_UART_Abort_IT+0xb2>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec48:	e853 3f00 	ldrex	r3, [r3]
 800ec4c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ec4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec50:	f023 0310 	bic.w	r3, r3, #16
 800ec54:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	461a      	mov	r2, r3
 800ec5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ec5e:	647b      	str	r3, [r7, #68]	@ 0x44
 800ec60:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec62:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ec64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ec66:	e841 2300 	strex	r3, r2, [r1]
 800ec6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ec6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d1e6      	bne.n	800ec40 <HAL_UART_Abort_IT+0x80>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d00f      	beq.n	800ec9a <HAL_UART_Abort_IT+0xda>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	689b      	ldr	r3, [r3, #8]
 800ec80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ec84:	2b80      	cmp	r3, #128	@ 0x80
 800ec86:	d104      	bne.n	800ec92 <HAL_UART_Abort_IT+0xd2>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ec8c:	4a68      	ldr	r2, [pc, #416]	@ (800ee30 <HAL_UART_Abort_IT+0x270>)
 800ec8e:	651a      	str	r2, [r3, #80]	@ 0x50
 800ec90:	e003      	b.n	800ec9a <HAL_UART_Abort_IT+0xda>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ec96:	2200      	movs	r2, #0
 800ec98:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d011      	beq.n	800ecc8 <HAL_UART_Abort_IT+0x108>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	689b      	ldr	r3, [r3, #8]
 800ecaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ecae:	2b40      	cmp	r3, #64	@ 0x40
 800ecb0:	d105      	bne.n	800ecbe <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ecb8:	4a5e      	ldr	r2, [pc, #376]	@ (800ee34 <HAL_UART_Abort_IT+0x274>)
 800ecba:	651a      	str	r2, [r3, #80]	@ 0x50
 800ecbc:	e004      	b.n	800ecc8 <HAL_UART_Abort_IT+0x108>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	689b      	ldr	r3, [r3, #8]
 800ecce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ecd2:	2b80      	cmp	r3, #128	@ 0x80
 800ecd4:	d12d      	bne.n	800ed32 <HAL_UART_Abort_IT+0x172>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	3308      	adds	r3, #8
 800ecdc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ece0:	e853 3f00 	ldrex	r3, [r3]
 800ece4:	623b      	str	r3, [r7, #32]
   return(result);
 800ece6:	6a3b      	ldr	r3, [r7, #32]
 800ece8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ecec:	677b      	str	r3, [r7, #116]	@ 0x74
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	3308      	adds	r3, #8
 800ecf4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800ecf6:	633a      	str	r2, [r7, #48]	@ 0x30
 800ecf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ecfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ecfe:	e841 2300 	strex	r3, r2, [r1]
 800ed02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ed04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d1e5      	bne.n	800ecd6 <HAL_UART_Abort_IT+0x116>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d00f      	beq.n	800ed32 <HAL_UART_Abort_IT+0x172>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ed16:	4618      	mov	r0, r3
 800ed18:	f7f8 f836 	bl	8006d88 <HAL_DMA_Abort_IT>
 800ed1c:	4603      	mov	r3, r0
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d004      	beq.n	800ed2c <HAL_UART_Abort_IT+0x16c>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ed26:	2200      	movs	r2, #0
 800ed28:	651a      	str	r2, [r3, #80]	@ 0x50
 800ed2a:	e002      	b.n	800ed32 <HAL_UART_Abort_IT+0x172>
      }
      else
      {
        abortcplt = 0U;
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	689b      	ldr	r3, [r3, #8]
 800ed38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ed3c:	2b40      	cmp	r3, #64	@ 0x40
 800ed3e:	d133      	bne.n	800eda8 <HAL_UART_Abort_IT+0x1e8>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	3308      	adds	r3, #8
 800ed46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed48:	693b      	ldr	r3, [r7, #16]
 800ed4a:	e853 3f00 	ldrex	r3, [r3]
 800ed4e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ed56:	673b      	str	r3, [r7, #112]	@ 0x70
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	3308      	adds	r3, #8
 800ed5e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ed60:	61fa      	str	r2, [r7, #28]
 800ed62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed64:	69b9      	ldr	r1, [r7, #24]
 800ed66:	69fa      	ldr	r2, [r7, #28]
 800ed68:	e841 2300 	strex	r3, r2, [r1]
 800ed6c:	617b      	str	r3, [r7, #20]
   return(result);
 800ed6e:	697b      	ldr	r3, [r7, #20]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d1e5      	bne.n	800ed40 <HAL_UART_Abort_IT+0x180>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d014      	beq.n	800eda8 <HAL_UART_Abort_IT+0x1e8>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed84:	4618      	mov	r0, r3
 800ed86:	f7f7 ffff 	bl	8006d88 <HAL_DMA_Abort_IT>
 800ed8a:	4603      	mov	r3, r0
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d008      	beq.n	800eda2 <HAL_UART_Abort_IT+0x1e2>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed96:	2200      	movs	r2, #0
 800ed98:	651a      	str	r2, [r3, #80]	@ 0x50
        abortcplt = 1U;
 800ed9a:	2301      	movs	r3, #1
 800ed9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800eda0:	e002      	b.n	800eda8 <HAL_UART_Abort_IT+0x1e8>
      }
      else
      {
        abortcplt = 0U;
 800eda2:	2300      	movs	r3, #0
 800eda4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 800eda8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800edac:	2b01      	cmp	r3, #1
 800edae:	d138      	bne.n	800ee22 <HAL_UART_Abort_IT+0x262>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	2200      	movs	r2, #0
 800edb4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->RxXferCount = 0U;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2200      	movs	r2, #0
 800edbc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2200      	movs	r2, #0
 800edc4:	675a      	str	r2, [r3, #116]	@ 0x74
    huart->TxISR = NULL;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	2200      	movs	r2, #0
 800edca:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	2200      	movs	r2, #0
 800edd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	220f      	movs	r2, #15
 800edda:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ede0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ede4:	d107      	bne.n	800edf6 <HAL_UART_Abort_IT+0x236>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	699a      	ldr	r2, [r3, #24]
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	f042 0210 	orr.w	r2, r2, #16
 800edf4:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	699a      	ldr	r2, [r3, #24]
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	f042 0208 	orr.w	r2, r2, #8
 800ee04:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	2220      	movs	r2, #32
 800ee0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    huart->RxState = HAL_UART_STATE_READY;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	2220      	movs	r2, #32
 800ee12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	2200      	movs	r2, #0
 800ee1a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800ee1c:	6878      	ldr	r0, [r7, #4]
 800ee1e:	f000 fbe3 	bl	800f5e8 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800ee22:	2300      	movs	r3, #0
}
 800ee24:	4618      	mov	r0, r3
 800ee26:	3788      	adds	r7, #136	@ 0x88
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	bd80      	pop	{r7, pc}
 800ee2c:	ef7ffffe 	.word	0xef7ffffe
 800ee30:	08010d53 	.word	0x08010d53
 800ee34:	08010ddf 	.word	0x08010ddf

0800ee38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b0ba      	sub	sp, #232	@ 0xe8
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	69db      	ldr	r3, [r3, #28]
 800ee46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	689b      	ldr	r3, [r3, #8]
 800ee5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ee5e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ee62:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ee66:	4013      	ands	r3, r2
 800ee68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ee6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d11b      	bne.n	800eeac <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ee74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ee78:	f003 0320 	and.w	r3, r3, #32
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d015      	beq.n	800eeac <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ee80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ee84:	f003 0320 	and.w	r3, r3, #32
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d105      	bne.n	800ee98 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ee8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ee90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d009      	beq.n	800eeac <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	f000 8377 	beq.w	800f590 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eea6:	6878      	ldr	r0, [r7, #4]
 800eea8:	4798      	blx	r3
      }
      return;
 800eeaa:	e371      	b.n	800f590 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800eeac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	f000 8123 	beq.w	800f0fc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800eeb6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800eeba:	4b8d      	ldr	r3, [pc, #564]	@ (800f0f0 <HAL_UART_IRQHandler+0x2b8>)
 800eebc:	4013      	ands	r3, r2
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d106      	bne.n	800eed0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800eec2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800eec6:	4b8b      	ldr	r3, [pc, #556]	@ (800f0f4 <HAL_UART_IRQHandler+0x2bc>)
 800eec8:	4013      	ands	r3, r2
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	f000 8116 	beq.w	800f0fc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800eed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eed4:	f003 0301 	and.w	r3, r3, #1
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d011      	beq.n	800ef00 <HAL_UART_IRQHandler+0xc8>
 800eedc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d00b      	beq.n	800ef00 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	2201      	movs	r2, #1
 800eeee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eef6:	f043 0201 	orr.w	r2, r3, #1
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ef00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ef04:	f003 0302 	and.w	r3, r3, #2
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d011      	beq.n	800ef30 <HAL_UART_IRQHandler+0xf8>
 800ef0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ef10:	f003 0301 	and.w	r3, r3, #1
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d00b      	beq.n	800ef30 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	2202      	movs	r2, #2
 800ef1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ef26:	f043 0204 	orr.w	r2, r3, #4
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ef30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ef34:	f003 0304 	and.w	r3, r3, #4
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d011      	beq.n	800ef60 <HAL_UART_IRQHandler+0x128>
 800ef3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ef40:	f003 0301 	and.w	r3, r3, #1
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d00b      	beq.n	800ef60 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	2204      	movs	r2, #4
 800ef4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ef56:	f043 0202 	orr.w	r2, r3, #2
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ef60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ef64:	f003 0308 	and.w	r3, r3, #8
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d017      	beq.n	800ef9c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ef6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ef70:	f003 0320 	and.w	r3, r3, #32
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d105      	bne.n	800ef84 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ef78:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ef7c:	4b5c      	ldr	r3, [pc, #368]	@ (800f0f0 <HAL_UART_IRQHandler+0x2b8>)
 800ef7e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d00b      	beq.n	800ef9c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	2208      	movs	r2, #8
 800ef8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ef92:	f043 0208 	orr.w	r2, r3, #8
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ef9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800efa0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d012      	beq.n	800efce <HAL_UART_IRQHandler+0x196>
 800efa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800efac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d00c      	beq.n	800efce <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800efbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800efc4:	f043 0220 	orr.w	r2, r3, #32
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	f000 82dd 	beq.w	800f594 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800efda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800efde:	f003 0320 	and.w	r3, r3, #32
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d013      	beq.n	800f00e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800efe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800efea:	f003 0320 	and.w	r3, r3, #32
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d105      	bne.n	800effe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800eff2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800eff6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800effa:	2b00      	cmp	r3, #0
 800effc:	d007      	beq.n	800f00e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f002:	2b00      	cmp	r3, #0
 800f004:	d003      	beq.n	800f00e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f00a:	6878      	ldr	r0, [r7, #4]
 800f00c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f014:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	689b      	ldr	r3, [r3, #8]
 800f01e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f022:	2b40      	cmp	r3, #64	@ 0x40
 800f024:	d005      	beq.n	800f032 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f026:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f02a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d054      	beq.n	800f0dc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f032:	6878      	ldr	r0, [r7, #4]
 800f034:	f001 fd1e 	bl	8010a74 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	689b      	ldr	r3, [r3, #8]
 800f03e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f042:	2b40      	cmp	r3, #64	@ 0x40
 800f044:	d146      	bne.n	800f0d4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	3308      	adds	r3, #8
 800f04c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f050:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f054:	e853 3f00 	ldrex	r3, [r3]
 800f058:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800f05c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f060:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f064:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	3308      	adds	r3, #8
 800f06e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800f072:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800f076:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f07a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800f07e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800f082:	e841 2300 	strex	r3, r2, [r1]
 800f086:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800f08a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d1d9      	bne.n	800f046 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d017      	beq.n	800f0cc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f0a2:	4a15      	ldr	r2, [pc, #84]	@ (800f0f8 <HAL_UART_IRQHandler+0x2c0>)
 800f0a4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	f7f7 fe6b 	bl	8006d88 <HAL_DMA_Abort_IT>
 800f0b2:	4603      	mov	r3, r0
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d019      	beq.n	800f0ec <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f0be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f0c0:	687a      	ldr	r2, [r7, #4]
 800f0c2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800f0c6:	4610      	mov	r0, r2
 800f0c8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f0ca:	e00f      	b.n	800f0ec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f0cc:	6878      	ldr	r0, [r7, #4]
 800f0ce:	f000 fa81 	bl	800f5d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f0d2:	e00b      	b.n	800f0ec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f0d4:	6878      	ldr	r0, [r7, #4]
 800f0d6:	f000 fa7d 	bl	800f5d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f0da:	e007      	b.n	800f0ec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f0dc:	6878      	ldr	r0, [r7, #4]
 800f0de:	f000 fa79 	bl	800f5d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	2200      	movs	r2, #0
 800f0e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800f0ea:	e253      	b.n	800f594 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f0ec:	bf00      	nop
    return;
 800f0ee:	e251      	b.n	800f594 <HAL_UART_IRQHandler+0x75c>
 800f0f0:	10000001 	.word	0x10000001
 800f0f4:	04000120 	.word	0x04000120
 800f0f8:	08010d27 	.word	0x08010d27

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f100:	2b01      	cmp	r3, #1
 800f102:	f040 81e7 	bne.w	800f4d4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f10a:	f003 0310 	and.w	r3, r3, #16
 800f10e:	2b00      	cmp	r3, #0
 800f110:	f000 81e0 	beq.w	800f4d4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f118:	f003 0310 	and.w	r3, r3, #16
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	f000 81d9 	beq.w	800f4d4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	2210      	movs	r2, #16
 800f128:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	689b      	ldr	r3, [r3, #8]
 800f130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f134:	2b40      	cmp	r3, #64	@ 0x40
 800f136:	f040 8151 	bne.w	800f3dc <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	4a96      	ldr	r2, [pc, #600]	@ (800f39c <HAL_UART_IRQHandler+0x564>)
 800f144:	4293      	cmp	r3, r2
 800f146:	d068      	beq.n	800f21a <HAL_UART_IRQHandler+0x3e2>
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	4a93      	ldr	r2, [pc, #588]	@ (800f3a0 <HAL_UART_IRQHandler+0x568>)
 800f152:	4293      	cmp	r3, r2
 800f154:	d061      	beq.n	800f21a <HAL_UART_IRQHandler+0x3e2>
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	4a91      	ldr	r2, [pc, #580]	@ (800f3a4 <HAL_UART_IRQHandler+0x56c>)
 800f160:	4293      	cmp	r3, r2
 800f162:	d05a      	beq.n	800f21a <HAL_UART_IRQHandler+0x3e2>
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	4a8e      	ldr	r2, [pc, #568]	@ (800f3a8 <HAL_UART_IRQHandler+0x570>)
 800f16e:	4293      	cmp	r3, r2
 800f170:	d053      	beq.n	800f21a <HAL_UART_IRQHandler+0x3e2>
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	4a8c      	ldr	r2, [pc, #560]	@ (800f3ac <HAL_UART_IRQHandler+0x574>)
 800f17c:	4293      	cmp	r3, r2
 800f17e:	d04c      	beq.n	800f21a <HAL_UART_IRQHandler+0x3e2>
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	4a89      	ldr	r2, [pc, #548]	@ (800f3b0 <HAL_UART_IRQHandler+0x578>)
 800f18a:	4293      	cmp	r3, r2
 800f18c:	d045      	beq.n	800f21a <HAL_UART_IRQHandler+0x3e2>
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	4a87      	ldr	r2, [pc, #540]	@ (800f3b4 <HAL_UART_IRQHandler+0x57c>)
 800f198:	4293      	cmp	r3, r2
 800f19a:	d03e      	beq.n	800f21a <HAL_UART_IRQHandler+0x3e2>
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	4a84      	ldr	r2, [pc, #528]	@ (800f3b8 <HAL_UART_IRQHandler+0x580>)
 800f1a6:	4293      	cmp	r3, r2
 800f1a8:	d037      	beq.n	800f21a <HAL_UART_IRQHandler+0x3e2>
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	4a82      	ldr	r2, [pc, #520]	@ (800f3bc <HAL_UART_IRQHandler+0x584>)
 800f1b4:	4293      	cmp	r3, r2
 800f1b6:	d030      	beq.n	800f21a <HAL_UART_IRQHandler+0x3e2>
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	4a7f      	ldr	r2, [pc, #508]	@ (800f3c0 <HAL_UART_IRQHandler+0x588>)
 800f1c2:	4293      	cmp	r3, r2
 800f1c4:	d029      	beq.n	800f21a <HAL_UART_IRQHandler+0x3e2>
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	4a7d      	ldr	r2, [pc, #500]	@ (800f3c4 <HAL_UART_IRQHandler+0x58c>)
 800f1d0:	4293      	cmp	r3, r2
 800f1d2:	d022      	beq.n	800f21a <HAL_UART_IRQHandler+0x3e2>
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	4a7a      	ldr	r2, [pc, #488]	@ (800f3c8 <HAL_UART_IRQHandler+0x590>)
 800f1de:	4293      	cmp	r3, r2
 800f1e0:	d01b      	beq.n	800f21a <HAL_UART_IRQHandler+0x3e2>
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	4a78      	ldr	r2, [pc, #480]	@ (800f3cc <HAL_UART_IRQHandler+0x594>)
 800f1ec:	4293      	cmp	r3, r2
 800f1ee:	d014      	beq.n	800f21a <HAL_UART_IRQHandler+0x3e2>
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	4a75      	ldr	r2, [pc, #468]	@ (800f3d0 <HAL_UART_IRQHandler+0x598>)
 800f1fa:	4293      	cmp	r3, r2
 800f1fc:	d00d      	beq.n	800f21a <HAL_UART_IRQHandler+0x3e2>
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	4a73      	ldr	r2, [pc, #460]	@ (800f3d4 <HAL_UART_IRQHandler+0x59c>)
 800f208:	4293      	cmp	r3, r2
 800f20a:	d006      	beq.n	800f21a <HAL_UART_IRQHandler+0x3e2>
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	4a70      	ldr	r2, [pc, #448]	@ (800f3d8 <HAL_UART_IRQHandler+0x5a0>)
 800f216:	4293      	cmp	r3, r2
 800f218:	d106      	bne.n	800f228 <HAL_UART_IRQHandler+0x3f0>
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	685b      	ldr	r3, [r3, #4]
 800f224:	b29b      	uxth	r3, r3
 800f226:	e005      	b.n	800f234 <HAL_UART_IRQHandler+0x3fc>
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	685b      	ldr	r3, [r3, #4]
 800f232:	b29b      	uxth	r3, r3
 800f234:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f238:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	f000 81ab 	beq.w	800f598 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f248:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f24c:	429a      	cmp	r2, r3
 800f24e:	f080 81a3 	bcs.w	800f598 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f258:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f262:	69db      	ldr	r3, [r3, #28]
 800f264:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f268:	f000 8087 	beq.w	800f37a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f274:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f278:	e853 3f00 	ldrex	r3, [r3]
 800f27c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800f280:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f284:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f288:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	461a      	mov	r2, r3
 800f292:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f296:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f29a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f29e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800f2a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f2a6:	e841 2300 	strex	r3, r2, [r1]
 800f2aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800f2ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d1da      	bne.n	800f26c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	3308      	adds	r3, #8
 800f2bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f2c0:	e853 3f00 	ldrex	r3, [r3]
 800f2c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f2c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f2c8:	f023 0301 	bic.w	r3, r3, #1
 800f2cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	3308      	adds	r3, #8
 800f2d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800f2da:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800f2de:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f2e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f2e6:	e841 2300 	strex	r3, r2, [r1]
 800f2ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f2ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d1e1      	bne.n	800f2b6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	3308      	adds	r3, #8
 800f2f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f2fc:	e853 3f00 	ldrex	r3, [r3]
 800f300:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f302:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f304:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f308:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	3308      	adds	r3, #8
 800f312:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800f316:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f318:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f31a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f31c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f31e:	e841 2300 	strex	r3, r2, [r1]
 800f322:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f324:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f326:	2b00      	cmp	r3, #0
 800f328:	d1e3      	bne.n	800f2f2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	2220      	movs	r2, #32
 800f32e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	2200      	movs	r2, #0
 800f336:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f33e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f340:	e853 3f00 	ldrex	r3, [r3]
 800f344:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f346:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f348:	f023 0310 	bic.w	r3, r3, #16
 800f34c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	461a      	mov	r2, r3
 800f356:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f35a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f35c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f35e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f360:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f362:	e841 2300 	strex	r3, r2, [r1]
 800f366:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f368:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d1e4      	bne.n	800f338 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f374:	4618      	mov	r0, r3
 800f376:	f7f7 f9e9 	bl	800674c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	2202      	movs	r2, #2
 800f37e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f38c:	b29b      	uxth	r3, r3
 800f38e:	1ad3      	subs	r3, r2, r3
 800f390:	b29b      	uxth	r3, r3
 800f392:	4619      	mov	r1, r3
 800f394:	6878      	ldr	r0, [r7, #4]
 800f396:	f000 f931 	bl	800f5fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f39a:	e0fd      	b.n	800f598 <HAL_UART_IRQHandler+0x760>
 800f39c:	40020010 	.word	0x40020010
 800f3a0:	40020028 	.word	0x40020028
 800f3a4:	40020040 	.word	0x40020040
 800f3a8:	40020058 	.word	0x40020058
 800f3ac:	40020070 	.word	0x40020070
 800f3b0:	40020088 	.word	0x40020088
 800f3b4:	400200a0 	.word	0x400200a0
 800f3b8:	400200b8 	.word	0x400200b8
 800f3bc:	40020410 	.word	0x40020410
 800f3c0:	40020428 	.word	0x40020428
 800f3c4:	40020440 	.word	0x40020440
 800f3c8:	40020458 	.word	0x40020458
 800f3cc:	40020470 	.word	0x40020470
 800f3d0:	40020488 	.word	0x40020488
 800f3d4:	400204a0 	.word	0x400204a0
 800f3d8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f3e8:	b29b      	uxth	r3, r3
 800f3ea:	1ad3      	subs	r3, r2, r3
 800f3ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f3f6:	b29b      	uxth	r3, r3
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	f000 80cf 	beq.w	800f59c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800f3fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f402:	2b00      	cmp	r3, #0
 800f404:	f000 80ca 	beq.w	800f59c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f40e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f410:	e853 3f00 	ldrex	r3, [r3]
 800f414:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f418:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f41c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	461a      	mov	r2, r3
 800f426:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f42a:	647b      	str	r3, [r7, #68]	@ 0x44
 800f42c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f42e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f430:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f432:	e841 2300 	strex	r3, r2, [r1]
 800f436:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f438:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d1e4      	bne.n	800f408 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	3308      	adds	r3, #8
 800f444:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f448:	e853 3f00 	ldrex	r3, [r3]
 800f44c:	623b      	str	r3, [r7, #32]
   return(result);
 800f44e:	6a3a      	ldr	r2, [r7, #32]
 800f450:	4b55      	ldr	r3, [pc, #340]	@ (800f5a8 <HAL_UART_IRQHandler+0x770>)
 800f452:	4013      	ands	r3, r2
 800f454:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	3308      	adds	r3, #8
 800f45e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800f462:	633a      	str	r2, [r7, #48]	@ 0x30
 800f464:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f466:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f468:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f46a:	e841 2300 	strex	r3, r2, [r1]
 800f46e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f472:	2b00      	cmp	r3, #0
 800f474:	d1e3      	bne.n	800f43e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	2220      	movs	r2, #32
 800f47a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	2200      	movs	r2, #0
 800f482:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	2200      	movs	r2, #0
 800f488:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f490:	693b      	ldr	r3, [r7, #16]
 800f492:	e853 3f00 	ldrex	r3, [r3]
 800f496:	60fb      	str	r3, [r7, #12]
   return(result);
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	f023 0310 	bic.w	r3, r3, #16
 800f49e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	461a      	mov	r2, r3
 800f4a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800f4ac:	61fb      	str	r3, [r7, #28]
 800f4ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4b0:	69b9      	ldr	r1, [r7, #24]
 800f4b2:	69fa      	ldr	r2, [r7, #28]
 800f4b4:	e841 2300 	strex	r3, r2, [r1]
 800f4b8:	617b      	str	r3, [r7, #20]
   return(result);
 800f4ba:	697b      	ldr	r3, [r7, #20]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d1e4      	bne.n	800f48a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	2202      	movs	r2, #2
 800f4c4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f4c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f4ca:	4619      	mov	r1, r3
 800f4cc:	6878      	ldr	r0, [r7, #4]
 800f4ce:	f000 f895 	bl	800f5fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f4d2:	e063      	b.n	800f59c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f4d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f4d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d00e      	beq.n	800f4fe <HAL_UART_IRQHandler+0x6c6>
 800f4e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f4e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d008      	beq.n	800f4fe <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800f4f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f4f6:	6878      	ldr	r0, [r7, #4]
 800f4f8:	f002 fb9a 	bl	8011c30 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f4fc:	e051      	b.n	800f5a2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f4fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f506:	2b00      	cmp	r3, #0
 800f508:	d014      	beq.n	800f534 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f50a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f50e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f512:	2b00      	cmp	r3, #0
 800f514:	d105      	bne.n	800f522 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f516:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f51a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d008      	beq.n	800f534 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f526:	2b00      	cmp	r3, #0
 800f528:	d03a      	beq.n	800f5a0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f52e:	6878      	ldr	r0, [r7, #4]
 800f530:	4798      	blx	r3
    }
    return;
 800f532:	e035      	b.n	800f5a0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f538:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d009      	beq.n	800f554 <HAL_UART_IRQHandler+0x71c>
 800f540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d003      	beq.n	800f554 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800f54c:	6878      	ldr	r0, [r7, #4]
 800f54e:	f001 fe28 	bl	80111a2 <UART_EndTransmit_IT>
    return;
 800f552:	e026      	b.n	800f5a2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f558:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d009      	beq.n	800f574 <HAL_UART_IRQHandler+0x73c>
 800f560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f564:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d003      	beq.n	800f574 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f56c:	6878      	ldr	r0, [r7, #4]
 800f56e:	f002 fb73 	bl	8011c58 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f572:	e016      	b.n	800f5a2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f578:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d010      	beq.n	800f5a2 <HAL_UART_IRQHandler+0x76a>
 800f580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f584:	2b00      	cmp	r3, #0
 800f586:	da0c      	bge.n	800f5a2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f588:	6878      	ldr	r0, [r7, #4]
 800f58a:	f002 fb5b 	bl	8011c44 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f58e:	e008      	b.n	800f5a2 <HAL_UART_IRQHandler+0x76a>
      return;
 800f590:	bf00      	nop
 800f592:	e006      	b.n	800f5a2 <HAL_UART_IRQHandler+0x76a>
    return;
 800f594:	bf00      	nop
 800f596:	e004      	b.n	800f5a2 <HAL_UART_IRQHandler+0x76a>
      return;
 800f598:	bf00      	nop
 800f59a:	e002      	b.n	800f5a2 <HAL_UART_IRQHandler+0x76a>
      return;
 800f59c:	bf00      	nop
 800f59e:	e000      	b.n	800f5a2 <HAL_UART_IRQHandler+0x76a>
    return;
 800f5a0:	bf00      	nop
  }
}
 800f5a2:	37e8      	adds	r7, #232	@ 0xe8
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	bd80      	pop	{r7, pc}
 800f5a8:	effffffe 	.word	0xeffffffe

0800f5ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f5ac:	b480      	push	{r7}
 800f5ae:	b083      	sub	sp, #12
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f5b4:	bf00      	nop
 800f5b6:	370c      	adds	r7, #12
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5be:	4770      	bx	lr

0800f5c0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f5c0:	b480      	push	{r7}
 800f5c2:	b083      	sub	sp, #12
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800f5c8:	bf00      	nop
 800f5ca:	370c      	adds	r7, #12
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d2:	4770      	bx	lr

0800f5d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f5d4:	b480      	push	{r7}
 800f5d6:	b083      	sub	sp, #12
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f5dc:	bf00      	nop
 800f5de:	370c      	adds	r7, #12
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e6:	4770      	bx	lr

0800f5e8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800f5e8:	b480      	push	{r7}
 800f5ea:	b083      	sub	sp, #12
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800f5f0:	bf00      	nop
 800f5f2:	370c      	adds	r7, #12
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fa:	4770      	bx	lr

0800f5fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f5fc:	b480      	push	{r7}
 800f5fe:	b083      	sub	sp, #12
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]
 800f604:	460b      	mov	r3, r1
 800f606:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f608:	bf00      	nop
 800f60a:	370c      	adds	r7, #12
 800f60c:	46bd      	mov	sp, r7
 800f60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f612:	4770      	bx	lr

0800f614 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f614:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f618:	b092      	sub	sp, #72	@ 0x48
 800f61a:	af00      	add	r7, sp, #0
 800f61c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f61e:	2300      	movs	r3, #0
 800f620:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f624:	697b      	ldr	r3, [r7, #20]
 800f626:	689a      	ldr	r2, [r3, #8]
 800f628:	697b      	ldr	r3, [r7, #20]
 800f62a:	691b      	ldr	r3, [r3, #16]
 800f62c:	431a      	orrs	r2, r3
 800f62e:	697b      	ldr	r3, [r7, #20]
 800f630:	695b      	ldr	r3, [r3, #20]
 800f632:	431a      	orrs	r2, r3
 800f634:	697b      	ldr	r3, [r7, #20]
 800f636:	69db      	ldr	r3, [r3, #28]
 800f638:	4313      	orrs	r3, r2
 800f63a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f63c:	697b      	ldr	r3, [r7, #20]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	681a      	ldr	r2, [r3, #0]
 800f642:	4bbe      	ldr	r3, [pc, #760]	@ (800f93c <UART_SetConfig+0x328>)
 800f644:	4013      	ands	r3, r2
 800f646:	697a      	ldr	r2, [r7, #20]
 800f648:	6812      	ldr	r2, [r2, #0]
 800f64a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f64c:	430b      	orrs	r3, r1
 800f64e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f650:	697b      	ldr	r3, [r7, #20]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	685b      	ldr	r3, [r3, #4]
 800f656:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f65a:	697b      	ldr	r3, [r7, #20]
 800f65c:	68da      	ldr	r2, [r3, #12]
 800f65e:	697b      	ldr	r3, [r7, #20]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	430a      	orrs	r2, r1
 800f664:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f666:	697b      	ldr	r3, [r7, #20]
 800f668:	699b      	ldr	r3, [r3, #24]
 800f66a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f66c:	697b      	ldr	r3, [r7, #20]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	4ab3      	ldr	r2, [pc, #716]	@ (800f940 <UART_SetConfig+0x32c>)
 800f672:	4293      	cmp	r3, r2
 800f674:	d004      	beq.n	800f680 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f676:	697b      	ldr	r3, [r7, #20]
 800f678:	6a1b      	ldr	r3, [r3, #32]
 800f67a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f67c:	4313      	orrs	r3, r2
 800f67e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f680:	697b      	ldr	r3, [r7, #20]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	689a      	ldr	r2, [r3, #8]
 800f686:	4baf      	ldr	r3, [pc, #700]	@ (800f944 <UART_SetConfig+0x330>)
 800f688:	4013      	ands	r3, r2
 800f68a:	697a      	ldr	r2, [r7, #20]
 800f68c:	6812      	ldr	r2, [r2, #0]
 800f68e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f690:	430b      	orrs	r3, r1
 800f692:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f694:	697b      	ldr	r3, [r7, #20]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f69a:	f023 010f 	bic.w	r1, r3, #15
 800f69e:	697b      	ldr	r3, [r7, #20]
 800f6a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f6a2:	697b      	ldr	r3, [r7, #20]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	430a      	orrs	r2, r1
 800f6a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f6aa:	697b      	ldr	r3, [r7, #20]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	4aa6      	ldr	r2, [pc, #664]	@ (800f948 <UART_SetConfig+0x334>)
 800f6b0:	4293      	cmp	r3, r2
 800f6b2:	d177      	bne.n	800f7a4 <UART_SetConfig+0x190>
 800f6b4:	4ba5      	ldr	r3, [pc, #660]	@ (800f94c <UART_SetConfig+0x338>)
 800f6b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f6b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f6bc:	2b28      	cmp	r3, #40	@ 0x28
 800f6be:	d86d      	bhi.n	800f79c <UART_SetConfig+0x188>
 800f6c0:	a201      	add	r2, pc, #4	@ (adr r2, 800f6c8 <UART_SetConfig+0xb4>)
 800f6c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6c6:	bf00      	nop
 800f6c8:	0800f76d 	.word	0x0800f76d
 800f6cc:	0800f79d 	.word	0x0800f79d
 800f6d0:	0800f79d 	.word	0x0800f79d
 800f6d4:	0800f79d 	.word	0x0800f79d
 800f6d8:	0800f79d 	.word	0x0800f79d
 800f6dc:	0800f79d 	.word	0x0800f79d
 800f6e0:	0800f79d 	.word	0x0800f79d
 800f6e4:	0800f79d 	.word	0x0800f79d
 800f6e8:	0800f775 	.word	0x0800f775
 800f6ec:	0800f79d 	.word	0x0800f79d
 800f6f0:	0800f79d 	.word	0x0800f79d
 800f6f4:	0800f79d 	.word	0x0800f79d
 800f6f8:	0800f79d 	.word	0x0800f79d
 800f6fc:	0800f79d 	.word	0x0800f79d
 800f700:	0800f79d 	.word	0x0800f79d
 800f704:	0800f79d 	.word	0x0800f79d
 800f708:	0800f77d 	.word	0x0800f77d
 800f70c:	0800f79d 	.word	0x0800f79d
 800f710:	0800f79d 	.word	0x0800f79d
 800f714:	0800f79d 	.word	0x0800f79d
 800f718:	0800f79d 	.word	0x0800f79d
 800f71c:	0800f79d 	.word	0x0800f79d
 800f720:	0800f79d 	.word	0x0800f79d
 800f724:	0800f79d 	.word	0x0800f79d
 800f728:	0800f785 	.word	0x0800f785
 800f72c:	0800f79d 	.word	0x0800f79d
 800f730:	0800f79d 	.word	0x0800f79d
 800f734:	0800f79d 	.word	0x0800f79d
 800f738:	0800f79d 	.word	0x0800f79d
 800f73c:	0800f79d 	.word	0x0800f79d
 800f740:	0800f79d 	.word	0x0800f79d
 800f744:	0800f79d 	.word	0x0800f79d
 800f748:	0800f78d 	.word	0x0800f78d
 800f74c:	0800f79d 	.word	0x0800f79d
 800f750:	0800f79d 	.word	0x0800f79d
 800f754:	0800f79d 	.word	0x0800f79d
 800f758:	0800f79d 	.word	0x0800f79d
 800f75c:	0800f79d 	.word	0x0800f79d
 800f760:	0800f79d 	.word	0x0800f79d
 800f764:	0800f79d 	.word	0x0800f79d
 800f768:	0800f795 	.word	0x0800f795
 800f76c:	2301      	movs	r3, #1
 800f76e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f772:	e326      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800f774:	2304      	movs	r3, #4
 800f776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f77a:	e322      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800f77c:	2308      	movs	r3, #8
 800f77e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f782:	e31e      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800f784:	2310      	movs	r3, #16
 800f786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f78a:	e31a      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800f78c:	2320      	movs	r3, #32
 800f78e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f792:	e316      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800f794:	2340      	movs	r3, #64	@ 0x40
 800f796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f79a:	e312      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800f79c:	2380      	movs	r3, #128	@ 0x80
 800f79e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7a2:	e30e      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800f7a4:	697b      	ldr	r3, [r7, #20]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	4a69      	ldr	r2, [pc, #420]	@ (800f950 <UART_SetConfig+0x33c>)
 800f7aa:	4293      	cmp	r3, r2
 800f7ac:	d130      	bne.n	800f810 <UART_SetConfig+0x1fc>
 800f7ae:	4b67      	ldr	r3, [pc, #412]	@ (800f94c <UART_SetConfig+0x338>)
 800f7b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f7b2:	f003 0307 	and.w	r3, r3, #7
 800f7b6:	2b05      	cmp	r3, #5
 800f7b8:	d826      	bhi.n	800f808 <UART_SetConfig+0x1f4>
 800f7ba:	a201      	add	r2, pc, #4	@ (adr r2, 800f7c0 <UART_SetConfig+0x1ac>)
 800f7bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7c0:	0800f7d9 	.word	0x0800f7d9
 800f7c4:	0800f7e1 	.word	0x0800f7e1
 800f7c8:	0800f7e9 	.word	0x0800f7e9
 800f7cc:	0800f7f1 	.word	0x0800f7f1
 800f7d0:	0800f7f9 	.word	0x0800f7f9
 800f7d4:	0800f801 	.word	0x0800f801
 800f7d8:	2300      	movs	r3, #0
 800f7da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7de:	e2f0      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800f7e0:	2304      	movs	r3, #4
 800f7e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7e6:	e2ec      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800f7e8:	2308      	movs	r3, #8
 800f7ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7ee:	e2e8      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800f7f0:	2310      	movs	r3, #16
 800f7f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7f6:	e2e4      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800f7f8:	2320      	movs	r3, #32
 800f7fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7fe:	e2e0      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800f800:	2340      	movs	r3, #64	@ 0x40
 800f802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f806:	e2dc      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800f808:	2380      	movs	r3, #128	@ 0x80
 800f80a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f80e:	e2d8      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800f810:	697b      	ldr	r3, [r7, #20]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	4a4f      	ldr	r2, [pc, #316]	@ (800f954 <UART_SetConfig+0x340>)
 800f816:	4293      	cmp	r3, r2
 800f818:	d130      	bne.n	800f87c <UART_SetConfig+0x268>
 800f81a:	4b4c      	ldr	r3, [pc, #304]	@ (800f94c <UART_SetConfig+0x338>)
 800f81c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f81e:	f003 0307 	and.w	r3, r3, #7
 800f822:	2b05      	cmp	r3, #5
 800f824:	d826      	bhi.n	800f874 <UART_SetConfig+0x260>
 800f826:	a201      	add	r2, pc, #4	@ (adr r2, 800f82c <UART_SetConfig+0x218>)
 800f828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f82c:	0800f845 	.word	0x0800f845
 800f830:	0800f84d 	.word	0x0800f84d
 800f834:	0800f855 	.word	0x0800f855
 800f838:	0800f85d 	.word	0x0800f85d
 800f83c:	0800f865 	.word	0x0800f865
 800f840:	0800f86d 	.word	0x0800f86d
 800f844:	2300      	movs	r3, #0
 800f846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f84a:	e2ba      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800f84c:	2304      	movs	r3, #4
 800f84e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f852:	e2b6      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800f854:	2308      	movs	r3, #8
 800f856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f85a:	e2b2      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800f85c:	2310      	movs	r3, #16
 800f85e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f862:	e2ae      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800f864:	2320      	movs	r3, #32
 800f866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f86a:	e2aa      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800f86c:	2340      	movs	r3, #64	@ 0x40
 800f86e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f872:	e2a6      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800f874:	2380      	movs	r3, #128	@ 0x80
 800f876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f87a:	e2a2      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800f87c:	697b      	ldr	r3, [r7, #20]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	4a35      	ldr	r2, [pc, #212]	@ (800f958 <UART_SetConfig+0x344>)
 800f882:	4293      	cmp	r3, r2
 800f884:	d130      	bne.n	800f8e8 <UART_SetConfig+0x2d4>
 800f886:	4b31      	ldr	r3, [pc, #196]	@ (800f94c <UART_SetConfig+0x338>)
 800f888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f88a:	f003 0307 	and.w	r3, r3, #7
 800f88e:	2b05      	cmp	r3, #5
 800f890:	d826      	bhi.n	800f8e0 <UART_SetConfig+0x2cc>
 800f892:	a201      	add	r2, pc, #4	@ (adr r2, 800f898 <UART_SetConfig+0x284>)
 800f894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f898:	0800f8b1 	.word	0x0800f8b1
 800f89c:	0800f8b9 	.word	0x0800f8b9
 800f8a0:	0800f8c1 	.word	0x0800f8c1
 800f8a4:	0800f8c9 	.word	0x0800f8c9
 800f8a8:	0800f8d1 	.word	0x0800f8d1
 800f8ac:	0800f8d9 	.word	0x0800f8d9
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8b6:	e284      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800f8b8:	2304      	movs	r3, #4
 800f8ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8be:	e280      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800f8c0:	2308      	movs	r3, #8
 800f8c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8c6:	e27c      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800f8c8:	2310      	movs	r3, #16
 800f8ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8ce:	e278      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800f8d0:	2320      	movs	r3, #32
 800f8d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8d6:	e274      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800f8d8:	2340      	movs	r3, #64	@ 0x40
 800f8da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8de:	e270      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800f8e0:	2380      	movs	r3, #128	@ 0x80
 800f8e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8e6:	e26c      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800f8e8:	697b      	ldr	r3, [r7, #20]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	4a1b      	ldr	r2, [pc, #108]	@ (800f95c <UART_SetConfig+0x348>)
 800f8ee:	4293      	cmp	r3, r2
 800f8f0:	d142      	bne.n	800f978 <UART_SetConfig+0x364>
 800f8f2:	4b16      	ldr	r3, [pc, #88]	@ (800f94c <UART_SetConfig+0x338>)
 800f8f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f8f6:	f003 0307 	and.w	r3, r3, #7
 800f8fa:	2b05      	cmp	r3, #5
 800f8fc:	d838      	bhi.n	800f970 <UART_SetConfig+0x35c>
 800f8fe:	a201      	add	r2, pc, #4	@ (adr r2, 800f904 <UART_SetConfig+0x2f0>)
 800f900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f904:	0800f91d 	.word	0x0800f91d
 800f908:	0800f925 	.word	0x0800f925
 800f90c:	0800f92d 	.word	0x0800f92d
 800f910:	0800f935 	.word	0x0800f935
 800f914:	0800f961 	.word	0x0800f961
 800f918:	0800f969 	.word	0x0800f969
 800f91c:	2300      	movs	r3, #0
 800f91e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f922:	e24e      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800f924:	2304      	movs	r3, #4
 800f926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f92a:	e24a      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800f92c:	2308      	movs	r3, #8
 800f92e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f932:	e246      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800f934:	2310      	movs	r3, #16
 800f936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f93a:	e242      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800f93c:	cfff69f3 	.word	0xcfff69f3
 800f940:	58000c00 	.word	0x58000c00
 800f944:	11fff4ff 	.word	0x11fff4ff
 800f948:	40011000 	.word	0x40011000
 800f94c:	58024400 	.word	0x58024400
 800f950:	40004400 	.word	0x40004400
 800f954:	40004800 	.word	0x40004800
 800f958:	40004c00 	.word	0x40004c00
 800f95c:	40005000 	.word	0x40005000
 800f960:	2320      	movs	r3, #32
 800f962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f966:	e22c      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800f968:	2340      	movs	r3, #64	@ 0x40
 800f96a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f96e:	e228      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800f970:	2380      	movs	r3, #128	@ 0x80
 800f972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f976:	e224      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800f978:	697b      	ldr	r3, [r7, #20]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	4ab1      	ldr	r2, [pc, #708]	@ (800fc44 <UART_SetConfig+0x630>)
 800f97e:	4293      	cmp	r3, r2
 800f980:	d176      	bne.n	800fa70 <UART_SetConfig+0x45c>
 800f982:	4bb1      	ldr	r3, [pc, #708]	@ (800fc48 <UART_SetConfig+0x634>)
 800f984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f986:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f98a:	2b28      	cmp	r3, #40	@ 0x28
 800f98c:	d86c      	bhi.n	800fa68 <UART_SetConfig+0x454>
 800f98e:	a201      	add	r2, pc, #4	@ (adr r2, 800f994 <UART_SetConfig+0x380>)
 800f990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f994:	0800fa39 	.word	0x0800fa39
 800f998:	0800fa69 	.word	0x0800fa69
 800f99c:	0800fa69 	.word	0x0800fa69
 800f9a0:	0800fa69 	.word	0x0800fa69
 800f9a4:	0800fa69 	.word	0x0800fa69
 800f9a8:	0800fa69 	.word	0x0800fa69
 800f9ac:	0800fa69 	.word	0x0800fa69
 800f9b0:	0800fa69 	.word	0x0800fa69
 800f9b4:	0800fa41 	.word	0x0800fa41
 800f9b8:	0800fa69 	.word	0x0800fa69
 800f9bc:	0800fa69 	.word	0x0800fa69
 800f9c0:	0800fa69 	.word	0x0800fa69
 800f9c4:	0800fa69 	.word	0x0800fa69
 800f9c8:	0800fa69 	.word	0x0800fa69
 800f9cc:	0800fa69 	.word	0x0800fa69
 800f9d0:	0800fa69 	.word	0x0800fa69
 800f9d4:	0800fa49 	.word	0x0800fa49
 800f9d8:	0800fa69 	.word	0x0800fa69
 800f9dc:	0800fa69 	.word	0x0800fa69
 800f9e0:	0800fa69 	.word	0x0800fa69
 800f9e4:	0800fa69 	.word	0x0800fa69
 800f9e8:	0800fa69 	.word	0x0800fa69
 800f9ec:	0800fa69 	.word	0x0800fa69
 800f9f0:	0800fa69 	.word	0x0800fa69
 800f9f4:	0800fa51 	.word	0x0800fa51
 800f9f8:	0800fa69 	.word	0x0800fa69
 800f9fc:	0800fa69 	.word	0x0800fa69
 800fa00:	0800fa69 	.word	0x0800fa69
 800fa04:	0800fa69 	.word	0x0800fa69
 800fa08:	0800fa69 	.word	0x0800fa69
 800fa0c:	0800fa69 	.word	0x0800fa69
 800fa10:	0800fa69 	.word	0x0800fa69
 800fa14:	0800fa59 	.word	0x0800fa59
 800fa18:	0800fa69 	.word	0x0800fa69
 800fa1c:	0800fa69 	.word	0x0800fa69
 800fa20:	0800fa69 	.word	0x0800fa69
 800fa24:	0800fa69 	.word	0x0800fa69
 800fa28:	0800fa69 	.word	0x0800fa69
 800fa2c:	0800fa69 	.word	0x0800fa69
 800fa30:	0800fa69 	.word	0x0800fa69
 800fa34:	0800fa61 	.word	0x0800fa61
 800fa38:	2301      	movs	r3, #1
 800fa3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa3e:	e1c0      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800fa40:	2304      	movs	r3, #4
 800fa42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa46:	e1bc      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800fa48:	2308      	movs	r3, #8
 800fa4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa4e:	e1b8      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800fa50:	2310      	movs	r3, #16
 800fa52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa56:	e1b4      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800fa58:	2320      	movs	r3, #32
 800fa5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa5e:	e1b0      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800fa60:	2340      	movs	r3, #64	@ 0x40
 800fa62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa66:	e1ac      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800fa68:	2380      	movs	r3, #128	@ 0x80
 800fa6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa6e:	e1a8      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800fa70:	697b      	ldr	r3, [r7, #20]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	4a75      	ldr	r2, [pc, #468]	@ (800fc4c <UART_SetConfig+0x638>)
 800fa76:	4293      	cmp	r3, r2
 800fa78:	d130      	bne.n	800fadc <UART_SetConfig+0x4c8>
 800fa7a:	4b73      	ldr	r3, [pc, #460]	@ (800fc48 <UART_SetConfig+0x634>)
 800fa7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fa7e:	f003 0307 	and.w	r3, r3, #7
 800fa82:	2b05      	cmp	r3, #5
 800fa84:	d826      	bhi.n	800fad4 <UART_SetConfig+0x4c0>
 800fa86:	a201      	add	r2, pc, #4	@ (adr r2, 800fa8c <UART_SetConfig+0x478>)
 800fa88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa8c:	0800faa5 	.word	0x0800faa5
 800fa90:	0800faad 	.word	0x0800faad
 800fa94:	0800fab5 	.word	0x0800fab5
 800fa98:	0800fabd 	.word	0x0800fabd
 800fa9c:	0800fac5 	.word	0x0800fac5
 800faa0:	0800facd 	.word	0x0800facd
 800faa4:	2300      	movs	r3, #0
 800faa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800faaa:	e18a      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800faac:	2304      	movs	r3, #4
 800faae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fab2:	e186      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800fab4:	2308      	movs	r3, #8
 800fab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800faba:	e182      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800fabc:	2310      	movs	r3, #16
 800fabe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fac2:	e17e      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800fac4:	2320      	movs	r3, #32
 800fac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800faca:	e17a      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800facc:	2340      	movs	r3, #64	@ 0x40
 800face:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fad2:	e176      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800fad4:	2380      	movs	r3, #128	@ 0x80
 800fad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fada:	e172      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800fadc:	697b      	ldr	r3, [r7, #20]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	4a5b      	ldr	r2, [pc, #364]	@ (800fc50 <UART_SetConfig+0x63c>)
 800fae2:	4293      	cmp	r3, r2
 800fae4:	d130      	bne.n	800fb48 <UART_SetConfig+0x534>
 800fae6:	4b58      	ldr	r3, [pc, #352]	@ (800fc48 <UART_SetConfig+0x634>)
 800fae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800faea:	f003 0307 	and.w	r3, r3, #7
 800faee:	2b05      	cmp	r3, #5
 800faf0:	d826      	bhi.n	800fb40 <UART_SetConfig+0x52c>
 800faf2:	a201      	add	r2, pc, #4	@ (adr r2, 800faf8 <UART_SetConfig+0x4e4>)
 800faf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800faf8:	0800fb11 	.word	0x0800fb11
 800fafc:	0800fb19 	.word	0x0800fb19
 800fb00:	0800fb21 	.word	0x0800fb21
 800fb04:	0800fb29 	.word	0x0800fb29
 800fb08:	0800fb31 	.word	0x0800fb31
 800fb0c:	0800fb39 	.word	0x0800fb39
 800fb10:	2300      	movs	r3, #0
 800fb12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb16:	e154      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800fb18:	2304      	movs	r3, #4
 800fb1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb1e:	e150      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800fb20:	2308      	movs	r3, #8
 800fb22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb26:	e14c      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800fb28:	2310      	movs	r3, #16
 800fb2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb2e:	e148      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800fb30:	2320      	movs	r3, #32
 800fb32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb36:	e144      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800fb38:	2340      	movs	r3, #64	@ 0x40
 800fb3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb3e:	e140      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800fb40:	2380      	movs	r3, #128	@ 0x80
 800fb42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb46:	e13c      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800fb48:	697b      	ldr	r3, [r7, #20]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	4a41      	ldr	r2, [pc, #260]	@ (800fc54 <UART_SetConfig+0x640>)
 800fb4e:	4293      	cmp	r3, r2
 800fb50:	f040 8082 	bne.w	800fc58 <UART_SetConfig+0x644>
 800fb54:	4b3c      	ldr	r3, [pc, #240]	@ (800fc48 <UART_SetConfig+0x634>)
 800fb56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fb58:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fb5c:	2b28      	cmp	r3, #40	@ 0x28
 800fb5e:	d86d      	bhi.n	800fc3c <UART_SetConfig+0x628>
 800fb60:	a201      	add	r2, pc, #4	@ (adr r2, 800fb68 <UART_SetConfig+0x554>)
 800fb62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb66:	bf00      	nop
 800fb68:	0800fc0d 	.word	0x0800fc0d
 800fb6c:	0800fc3d 	.word	0x0800fc3d
 800fb70:	0800fc3d 	.word	0x0800fc3d
 800fb74:	0800fc3d 	.word	0x0800fc3d
 800fb78:	0800fc3d 	.word	0x0800fc3d
 800fb7c:	0800fc3d 	.word	0x0800fc3d
 800fb80:	0800fc3d 	.word	0x0800fc3d
 800fb84:	0800fc3d 	.word	0x0800fc3d
 800fb88:	0800fc15 	.word	0x0800fc15
 800fb8c:	0800fc3d 	.word	0x0800fc3d
 800fb90:	0800fc3d 	.word	0x0800fc3d
 800fb94:	0800fc3d 	.word	0x0800fc3d
 800fb98:	0800fc3d 	.word	0x0800fc3d
 800fb9c:	0800fc3d 	.word	0x0800fc3d
 800fba0:	0800fc3d 	.word	0x0800fc3d
 800fba4:	0800fc3d 	.word	0x0800fc3d
 800fba8:	0800fc1d 	.word	0x0800fc1d
 800fbac:	0800fc3d 	.word	0x0800fc3d
 800fbb0:	0800fc3d 	.word	0x0800fc3d
 800fbb4:	0800fc3d 	.word	0x0800fc3d
 800fbb8:	0800fc3d 	.word	0x0800fc3d
 800fbbc:	0800fc3d 	.word	0x0800fc3d
 800fbc0:	0800fc3d 	.word	0x0800fc3d
 800fbc4:	0800fc3d 	.word	0x0800fc3d
 800fbc8:	0800fc25 	.word	0x0800fc25
 800fbcc:	0800fc3d 	.word	0x0800fc3d
 800fbd0:	0800fc3d 	.word	0x0800fc3d
 800fbd4:	0800fc3d 	.word	0x0800fc3d
 800fbd8:	0800fc3d 	.word	0x0800fc3d
 800fbdc:	0800fc3d 	.word	0x0800fc3d
 800fbe0:	0800fc3d 	.word	0x0800fc3d
 800fbe4:	0800fc3d 	.word	0x0800fc3d
 800fbe8:	0800fc2d 	.word	0x0800fc2d
 800fbec:	0800fc3d 	.word	0x0800fc3d
 800fbf0:	0800fc3d 	.word	0x0800fc3d
 800fbf4:	0800fc3d 	.word	0x0800fc3d
 800fbf8:	0800fc3d 	.word	0x0800fc3d
 800fbfc:	0800fc3d 	.word	0x0800fc3d
 800fc00:	0800fc3d 	.word	0x0800fc3d
 800fc04:	0800fc3d 	.word	0x0800fc3d
 800fc08:	0800fc35 	.word	0x0800fc35
 800fc0c:	2301      	movs	r3, #1
 800fc0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc12:	e0d6      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800fc14:	2304      	movs	r3, #4
 800fc16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc1a:	e0d2      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800fc1c:	2308      	movs	r3, #8
 800fc1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc22:	e0ce      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800fc24:	2310      	movs	r3, #16
 800fc26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc2a:	e0ca      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800fc2c:	2320      	movs	r3, #32
 800fc2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc32:	e0c6      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800fc34:	2340      	movs	r3, #64	@ 0x40
 800fc36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc3a:	e0c2      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800fc3c:	2380      	movs	r3, #128	@ 0x80
 800fc3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc42:	e0be      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800fc44:	40011400 	.word	0x40011400
 800fc48:	58024400 	.word	0x58024400
 800fc4c:	40007800 	.word	0x40007800
 800fc50:	40007c00 	.word	0x40007c00
 800fc54:	40011800 	.word	0x40011800
 800fc58:	697b      	ldr	r3, [r7, #20]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	4aad      	ldr	r2, [pc, #692]	@ (800ff14 <UART_SetConfig+0x900>)
 800fc5e:	4293      	cmp	r3, r2
 800fc60:	d176      	bne.n	800fd50 <UART_SetConfig+0x73c>
 800fc62:	4bad      	ldr	r3, [pc, #692]	@ (800ff18 <UART_SetConfig+0x904>)
 800fc64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fc66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fc6a:	2b28      	cmp	r3, #40	@ 0x28
 800fc6c:	d86c      	bhi.n	800fd48 <UART_SetConfig+0x734>
 800fc6e:	a201      	add	r2, pc, #4	@ (adr r2, 800fc74 <UART_SetConfig+0x660>)
 800fc70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc74:	0800fd19 	.word	0x0800fd19
 800fc78:	0800fd49 	.word	0x0800fd49
 800fc7c:	0800fd49 	.word	0x0800fd49
 800fc80:	0800fd49 	.word	0x0800fd49
 800fc84:	0800fd49 	.word	0x0800fd49
 800fc88:	0800fd49 	.word	0x0800fd49
 800fc8c:	0800fd49 	.word	0x0800fd49
 800fc90:	0800fd49 	.word	0x0800fd49
 800fc94:	0800fd21 	.word	0x0800fd21
 800fc98:	0800fd49 	.word	0x0800fd49
 800fc9c:	0800fd49 	.word	0x0800fd49
 800fca0:	0800fd49 	.word	0x0800fd49
 800fca4:	0800fd49 	.word	0x0800fd49
 800fca8:	0800fd49 	.word	0x0800fd49
 800fcac:	0800fd49 	.word	0x0800fd49
 800fcb0:	0800fd49 	.word	0x0800fd49
 800fcb4:	0800fd29 	.word	0x0800fd29
 800fcb8:	0800fd49 	.word	0x0800fd49
 800fcbc:	0800fd49 	.word	0x0800fd49
 800fcc0:	0800fd49 	.word	0x0800fd49
 800fcc4:	0800fd49 	.word	0x0800fd49
 800fcc8:	0800fd49 	.word	0x0800fd49
 800fccc:	0800fd49 	.word	0x0800fd49
 800fcd0:	0800fd49 	.word	0x0800fd49
 800fcd4:	0800fd31 	.word	0x0800fd31
 800fcd8:	0800fd49 	.word	0x0800fd49
 800fcdc:	0800fd49 	.word	0x0800fd49
 800fce0:	0800fd49 	.word	0x0800fd49
 800fce4:	0800fd49 	.word	0x0800fd49
 800fce8:	0800fd49 	.word	0x0800fd49
 800fcec:	0800fd49 	.word	0x0800fd49
 800fcf0:	0800fd49 	.word	0x0800fd49
 800fcf4:	0800fd39 	.word	0x0800fd39
 800fcf8:	0800fd49 	.word	0x0800fd49
 800fcfc:	0800fd49 	.word	0x0800fd49
 800fd00:	0800fd49 	.word	0x0800fd49
 800fd04:	0800fd49 	.word	0x0800fd49
 800fd08:	0800fd49 	.word	0x0800fd49
 800fd0c:	0800fd49 	.word	0x0800fd49
 800fd10:	0800fd49 	.word	0x0800fd49
 800fd14:	0800fd41 	.word	0x0800fd41
 800fd18:	2301      	movs	r3, #1
 800fd1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd1e:	e050      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800fd20:	2304      	movs	r3, #4
 800fd22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd26:	e04c      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800fd28:	2308      	movs	r3, #8
 800fd2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd2e:	e048      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800fd30:	2310      	movs	r3, #16
 800fd32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd36:	e044      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800fd38:	2320      	movs	r3, #32
 800fd3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd3e:	e040      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800fd40:	2340      	movs	r3, #64	@ 0x40
 800fd42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd46:	e03c      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800fd48:	2380      	movs	r3, #128	@ 0x80
 800fd4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd4e:	e038      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800fd50:	697b      	ldr	r3, [r7, #20]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	4a71      	ldr	r2, [pc, #452]	@ (800ff1c <UART_SetConfig+0x908>)
 800fd56:	4293      	cmp	r3, r2
 800fd58:	d130      	bne.n	800fdbc <UART_SetConfig+0x7a8>
 800fd5a:	4b6f      	ldr	r3, [pc, #444]	@ (800ff18 <UART_SetConfig+0x904>)
 800fd5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fd5e:	f003 0307 	and.w	r3, r3, #7
 800fd62:	2b05      	cmp	r3, #5
 800fd64:	d826      	bhi.n	800fdb4 <UART_SetConfig+0x7a0>
 800fd66:	a201      	add	r2, pc, #4	@ (adr r2, 800fd6c <UART_SetConfig+0x758>)
 800fd68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd6c:	0800fd85 	.word	0x0800fd85
 800fd70:	0800fd8d 	.word	0x0800fd8d
 800fd74:	0800fd95 	.word	0x0800fd95
 800fd78:	0800fd9d 	.word	0x0800fd9d
 800fd7c:	0800fda5 	.word	0x0800fda5
 800fd80:	0800fdad 	.word	0x0800fdad
 800fd84:	2302      	movs	r3, #2
 800fd86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd8a:	e01a      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800fd8c:	2304      	movs	r3, #4
 800fd8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd92:	e016      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800fd94:	2308      	movs	r3, #8
 800fd96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd9a:	e012      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800fd9c:	2310      	movs	r3, #16
 800fd9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fda2:	e00e      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800fda4:	2320      	movs	r3, #32
 800fda6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fdaa:	e00a      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800fdac:	2340      	movs	r3, #64	@ 0x40
 800fdae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fdb2:	e006      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800fdb4:	2380      	movs	r3, #128	@ 0x80
 800fdb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fdba:	e002      	b.n	800fdc2 <UART_SetConfig+0x7ae>
 800fdbc:	2380      	movs	r3, #128	@ 0x80
 800fdbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fdc2:	697b      	ldr	r3, [r7, #20]
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	4a55      	ldr	r2, [pc, #340]	@ (800ff1c <UART_SetConfig+0x908>)
 800fdc8:	4293      	cmp	r3, r2
 800fdca:	f040 80f8 	bne.w	800ffbe <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fdce:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fdd2:	2b20      	cmp	r3, #32
 800fdd4:	dc46      	bgt.n	800fe64 <UART_SetConfig+0x850>
 800fdd6:	2b02      	cmp	r3, #2
 800fdd8:	db75      	blt.n	800fec6 <UART_SetConfig+0x8b2>
 800fdda:	3b02      	subs	r3, #2
 800fddc:	2b1e      	cmp	r3, #30
 800fdde:	d872      	bhi.n	800fec6 <UART_SetConfig+0x8b2>
 800fde0:	a201      	add	r2, pc, #4	@ (adr r2, 800fde8 <UART_SetConfig+0x7d4>)
 800fde2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fde6:	bf00      	nop
 800fde8:	0800fe6b 	.word	0x0800fe6b
 800fdec:	0800fec7 	.word	0x0800fec7
 800fdf0:	0800fe73 	.word	0x0800fe73
 800fdf4:	0800fec7 	.word	0x0800fec7
 800fdf8:	0800fec7 	.word	0x0800fec7
 800fdfc:	0800fec7 	.word	0x0800fec7
 800fe00:	0800fe83 	.word	0x0800fe83
 800fe04:	0800fec7 	.word	0x0800fec7
 800fe08:	0800fec7 	.word	0x0800fec7
 800fe0c:	0800fec7 	.word	0x0800fec7
 800fe10:	0800fec7 	.word	0x0800fec7
 800fe14:	0800fec7 	.word	0x0800fec7
 800fe18:	0800fec7 	.word	0x0800fec7
 800fe1c:	0800fec7 	.word	0x0800fec7
 800fe20:	0800fe93 	.word	0x0800fe93
 800fe24:	0800fec7 	.word	0x0800fec7
 800fe28:	0800fec7 	.word	0x0800fec7
 800fe2c:	0800fec7 	.word	0x0800fec7
 800fe30:	0800fec7 	.word	0x0800fec7
 800fe34:	0800fec7 	.word	0x0800fec7
 800fe38:	0800fec7 	.word	0x0800fec7
 800fe3c:	0800fec7 	.word	0x0800fec7
 800fe40:	0800fec7 	.word	0x0800fec7
 800fe44:	0800fec7 	.word	0x0800fec7
 800fe48:	0800fec7 	.word	0x0800fec7
 800fe4c:	0800fec7 	.word	0x0800fec7
 800fe50:	0800fec7 	.word	0x0800fec7
 800fe54:	0800fec7 	.word	0x0800fec7
 800fe58:	0800fec7 	.word	0x0800fec7
 800fe5c:	0800fec7 	.word	0x0800fec7
 800fe60:	0800feb9 	.word	0x0800feb9
 800fe64:	2b40      	cmp	r3, #64	@ 0x40
 800fe66:	d02a      	beq.n	800febe <UART_SetConfig+0x8aa>
 800fe68:	e02d      	b.n	800fec6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800fe6a:	f7fb fd79 	bl	800b960 <HAL_RCCEx_GetD3PCLK1Freq>
 800fe6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fe70:	e02f      	b.n	800fed2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fe72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fe76:	4618      	mov	r0, r3
 800fe78:	f7fb fd88 	bl	800b98c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fe7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe80:	e027      	b.n	800fed2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fe82:	f107 0318 	add.w	r3, r7, #24
 800fe86:	4618      	mov	r0, r3
 800fe88:	f7fb fed4 	bl	800bc34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fe8c:	69fb      	ldr	r3, [r7, #28]
 800fe8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe90:	e01f      	b.n	800fed2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fe92:	4b21      	ldr	r3, [pc, #132]	@ (800ff18 <UART_SetConfig+0x904>)
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	f003 0320 	and.w	r3, r3, #32
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d009      	beq.n	800feb2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fe9e:	4b1e      	ldr	r3, [pc, #120]	@ (800ff18 <UART_SetConfig+0x904>)
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	08db      	lsrs	r3, r3, #3
 800fea4:	f003 0303 	and.w	r3, r3, #3
 800fea8:	4a1d      	ldr	r2, [pc, #116]	@ (800ff20 <UART_SetConfig+0x90c>)
 800feaa:	fa22 f303 	lsr.w	r3, r2, r3
 800feae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800feb0:	e00f      	b.n	800fed2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800feb2:	4b1b      	ldr	r3, [pc, #108]	@ (800ff20 <UART_SetConfig+0x90c>)
 800feb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800feb6:	e00c      	b.n	800fed2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800feb8:	4b1a      	ldr	r3, [pc, #104]	@ (800ff24 <UART_SetConfig+0x910>)
 800feba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800febc:	e009      	b.n	800fed2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800febe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fec4:	e005      	b.n	800fed2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800fec6:	2300      	movs	r3, #0
 800fec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800feca:	2301      	movs	r3, #1
 800fecc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800fed0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fed2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	f000 81ee 	beq.w	80102b6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800feda:	697b      	ldr	r3, [r7, #20]
 800fedc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fede:	4a12      	ldr	r2, [pc, #72]	@ (800ff28 <UART_SetConfig+0x914>)
 800fee0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fee4:	461a      	mov	r2, r3
 800fee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fee8:	fbb3 f3f2 	udiv	r3, r3, r2
 800feec:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800feee:	697b      	ldr	r3, [r7, #20]
 800fef0:	685a      	ldr	r2, [r3, #4]
 800fef2:	4613      	mov	r3, r2
 800fef4:	005b      	lsls	r3, r3, #1
 800fef6:	4413      	add	r3, r2
 800fef8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fefa:	429a      	cmp	r2, r3
 800fefc:	d305      	bcc.n	800ff0a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fefe:	697b      	ldr	r3, [r7, #20]
 800ff00:	685b      	ldr	r3, [r3, #4]
 800ff02:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ff04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ff06:	429a      	cmp	r2, r3
 800ff08:	d910      	bls.n	800ff2c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800ff0a:	2301      	movs	r3, #1
 800ff0c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ff10:	e1d1      	b.n	80102b6 <UART_SetConfig+0xca2>
 800ff12:	bf00      	nop
 800ff14:	40011c00 	.word	0x40011c00
 800ff18:	58024400 	.word	0x58024400
 800ff1c:	58000c00 	.word	0x58000c00
 800ff20:	03d09000 	.word	0x03d09000
 800ff24:	003d0900 	.word	0x003d0900
 800ff28:	08019b58 	.word	0x08019b58
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ff2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff2e:	2200      	movs	r2, #0
 800ff30:	60bb      	str	r3, [r7, #8]
 800ff32:	60fa      	str	r2, [r7, #12]
 800ff34:	697b      	ldr	r3, [r7, #20]
 800ff36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff38:	4ac0      	ldr	r2, [pc, #768]	@ (801023c <UART_SetConfig+0xc28>)
 800ff3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ff3e:	b29b      	uxth	r3, r3
 800ff40:	2200      	movs	r2, #0
 800ff42:	603b      	str	r3, [r7, #0]
 800ff44:	607a      	str	r2, [r7, #4]
 800ff46:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ff4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ff4e:	f7f0 fc3b 	bl	80007c8 <__aeabi_uldivmod>
 800ff52:	4602      	mov	r2, r0
 800ff54:	460b      	mov	r3, r1
 800ff56:	4610      	mov	r0, r2
 800ff58:	4619      	mov	r1, r3
 800ff5a:	f04f 0200 	mov.w	r2, #0
 800ff5e:	f04f 0300 	mov.w	r3, #0
 800ff62:	020b      	lsls	r3, r1, #8
 800ff64:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ff68:	0202      	lsls	r2, r0, #8
 800ff6a:	6979      	ldr	r1, [r7, #20]
 800ff6c:	6849      	ldr	r1, [r1, #4]
 800ff6e:	0849      	lsrs	r1, r1, #1
 800ff70:	2000      	movs	r0, #0
 800ff72:	460c      	mov	r4, r1
 800ff74:	4605      	mov	r5, r0
 800ff76:	eb12 0804 	adds.w	r8, r2, r4
 800ff7a:	eb43 0905 	adc.w	r9, r3, r5
 800ff7e:	697b      	ldr	r3, [r7, #20]
 800ff80:	685b      	ldr	r3, [r3, #4]
 800ff82:	2200      	movs	r2, #0
 800ff84:	469a      	mov	sl, r3
 800ff86:	4693      	mov	fp, r2
 800ff88:	4652      	mov	r2, sl
 800ff8a:	465b      	mov	r3, fp
 800ff8c:	4640      	mov	r0, r8
 800ff8e:	4649      	mov	r1, r9
 800ff90:	f7f0 fc1a 	bl	80007c8 <__aeabi_uldivmod>
 800ff94:	4602      	mov	r2, r0
 800ff96:	460b      	mov	r3, r1
 800ff98:	4613      	mov	r3, r2
 800ff9a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ff9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ffa2:	d308      	bcc.n	800ffb6 <UART_SetConfig+0x9a2>
 800ffa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffa6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ffaa:	d204      	bcs.n	800ffb6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800ffac:	697b      	ldr	r3, [r7, #20]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ffb2:	60da      	str	r2, [r3, #12]
 800ffb4:	e17f      	b.n	80102b6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800ffb6:	2301      	movs	r3, #1
 800ffb8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ffbc:	e17b      	b.n	80102b6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ffbe:	697b      	ldr	r3, [r7, #20]
 800ffc0:	69db      	ldr	r3, [r3, #28]
 800ffc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ffc6:	f040 80bd 	bne.w	8010144 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800ffca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ffce:	2b20      	cmp	r3, #32
 800ffd0:	dc48      	bgt.n	8010064 <UART_SetConfig+0xa50>
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	db7b      	blt.n	80100ce <UART_SetConfig+0xaba>
 800ffd6:	2b20      	cmp	r3, #32
 800ffd8:	d879      	bhi.n	80100ce <UART_SetConfig+0xaba>
 800ffda:	a201      	add	r2, pc, #4	@ (adr r2, 800ffe0 <UART_SetConfig+0x9cc>)
 800ffdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffe0:	0801006b 	.word	0x0801006b
 800ffe4:	08010073 	.word	0x08010073
 800ffe8:	080100cf 	.word	0x080100cf
 800ffec:	080100cf 	.word	0x080100cf
 800fff0:	0801007b 	.word	0x0801007b
 800fff4:	080100cf 	.word	0x080100cf
 800fff8:	080100cf 	.word	0x080100cf
 800fffc:	080100cf 	.word	0x080100cf
 8010000:	0801008b 	.word	0x0801008b
 8010004:	080100cf 	.word	0x080100cf
 8010008:	080100cf 	.word	0x080100cf
 801000c:	080100cf 	.word	0x080100cf
 8010010:	080100cf 	.word	0x080100cf
 8010014:	080100cf 	.word	0x080100cf
 8010018:	080100cf 	.word	0x080100cf
 801001c:	080100cf 	.word	0x080100cf
 8010020:	0801009b 	.word	0x0801009b
 8010024:	080100cf 	.word	0x080100cf
 8010028:	080100cf 	.word	0x080100cf
 801002c:	080100cf 	.word	0x080100cf
 8010030:	080100cf 	.word	0x080100cf
 8010034:	080100cf 	.word	0x080100cf
 8010038:	080100cf 	.word	0x080100cf
 801003c:	080100cf 	.word	0x080100cf
 8010040:	080100cf 	.word	0x080100cf
 8010044:	080100cf 	.word	0x080100cf
 8010048:	080100cf 	.word	0x080100cf
 801004c:	080100cf 	.word	0x080100cf
 8010050:	080100cf 	.word	0x080100cf
 8010054:	080100cf 	.word	0x080100cf
 8010058:	080100cf 	.word	0x080100cf
 801005c:	080100cf 	.word	0x080100cf
 8010060:	080100c1 	.word	0x080100c1
 8010064:	2b40      	cmp	r3, #64	@ 0x40
 8010066:	d02e      	beq.n	80100c6 <UART_SetConfig+0xab2>
 8010068:	e031      	b.n	80100ce <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801006a:	f7fa fa8f 	bl	800a58c <HAL_RCC_GetPCLK1Freq>
 801006e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010070:	e033      	b.n	80100da <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010072:	f7fa faa1 	bl	800a5b8 <HAL_RCC_GetPCLK2Freq>
 8010076:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010078:	e02f      	b.n	80100da <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801007a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801007e:	4618      	mov	r0, r3
 8010080:	f7fb fc84 	bl	800b98c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010088:	e027      	b.n	80100da <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801008a:	f107 0318 	add.w	r3, r7, #24
 801008e:	4618      	mov	r0, r3
 8010090:	f7fb fdd0 	bl	800bc34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010094:	69fb      	ldr	r3, [r7, #28]
 8010096:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010098:	e01f      	b.n	80100da <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801009a:	4b69      	ldr	r3, [pc, #420]	@ (8010240 <UART_SetConfig+0xc2c>)
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	f003 0320 	and.w	r3, r3, #32
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d009      	beq.n	80100ba <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80100a6:	4b66      	ldr	r3, [pc, #408]	@ (8010240 <UART_SetConfig+0xc2c>)
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	08db      	lsrs	r3, r3, #3
 80100ac:	f003 0303 	and.w	r3, r3, #3
 80100b0:	4a64      	ldr	r2, [pc, #400]	@ (8010244 <UART_SetConfig+0xc30>)
 80100b2:	fa22 f303 	lsr.w	r3, r2, r3
 80100b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80100b8:	e00f      	b.n	80100da <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80100ba:	4b62      	ldr	r3, [pc, #392]	@ (8010244 <UART_SetConfig+0xc30>)
 80100bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80100be:	e00c      	b.n	80100da <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80100c0:	4b61      	ldr	r3, [pc, #388]	@ (8010248 <UART_SetConfig+0xc34>)
 80100c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80100c4:	e009      	b.n	80100da <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80100c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80100ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80100cc:	e005      	b.n	80100da <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80100ce:	2300      	movs	r3, #0
 80100d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80100d2:	2301      	movs	r3, #1
 80100d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80100d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80100da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80100dc:	2b00      	cmp	r3, #0
 80100de:	f000 80ea 	beq.w	80102b6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80100e2:	697b      	ldr	r3, [r7, #20]
 80100e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100e6:	4a55      	ldr	r2, [pc, #340]	@ (801023c <UART_SetConfig+0xc28>)
 80100e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80100ec:	461a      	mov	r2, r3
 80100ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80100f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80100f4:	005a      	lsls	r2, r3, #1
 80100f6:	697b      	ldr	r3, [r7, #20]
 80100f8:	685b      	ldr	r3, [r3, #4]
 80100fa:	085b      	lsrs	r3, r3, #1
 80100fc:	441a      	add	r2, r3
 80100fe:	697b      	ldr	r3, [r7, #20]
 8010100:	685b      	ldr	r3, [r3, #4]
 8010102:	fbb2 f3f3 	udiv	r3, r2, r3
 8010106:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801010a:	2b0f      	cmp	r3, #15
 801010c:	d916      	bls.n	801013c <UART_SetConfig+0xb28>
 801010e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010110:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010114:	d212      	bcs.n	801013c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010118:	b29b      	uxth	r3, r3
 801011a:	f023 030f 	bic.w	r3, r3, #15
 801011e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010122:	085b      	lsrs	r3, r3, #1
 8010124:	b29b      	uxth	r3, r3
 8010126:	f003 0307 	and.w	r3, r3, #7
 801012a:	b29a      	uxth	r2, r3
 801012c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801012e:	4313      	orrs	r3, r2
 8010130:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8010132:	697b      	ldr	r3, [r7, #20]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8010138:	60da      	str	r2, [r3, #12]
 801013a:	e0bc      	b.n	80102b6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 801013c:	2301      	movs	r3, #1
 801013e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010142:	e0b8      	b.n	80102b6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010144:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010148:	2b20      	cmp	r3, #32
 801014a:	dc4b      	bgt.n	80101e4 <UART_SetConfig+0xbd0>
 801014c:	2b00      	cmp	r3, #0
 801014e:	f2c0 8087 	blt.w	8010260 <UART_SetConfig+0xc4c>
 8010152:	2b20      	cmp	r3, #32
 8010154:	f200 8084 	bhi.w	8010260 <UART_SetConfig+0xc4c>
 8010158:	a201      	add	r2, pc, #4	@ (adr r2, 8010160 <UART_SetConfig+0xb4c>)
 801015a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801015e:	bf00      	nop
 8010160:	080101eb 	.word	0x080101eb
 8010164:	080101f3 	.word	0x080101f3
 8010168:	08010261 	.word	0x08010261
 801016c:	08010261 	.word	0x08010261
 8010170:	080101fb 	.word	0x080101fb
 8010174:	08010261 	.word	0x08010261
 8010178:	08010261 	.word	0x08010261
 801017c:	08010261 	.word	0x08010261
 8010180:	0801020b 	.word	0x0801020b
 8010184:	08010261 	.word	0x08010261
 8010188:	08010261 	.word	0x08010261
 801018c:	08010261 	.word	0x08010261
 8010190:	08010261 	.word	0x08010261
 8010194:	08010261 	.word	0x08010261
 8010198:	08010261 	.word	0x08010261
 801019c:	08010261 	.word	0x08010261
 80101a0:	0801021b 	.word	0x0801021b
 80101a4:	08010261 	.word	0x08010261
 80101a8:	08010261 	.word	0x08010261
 80101ac:	08010261 	.word	0x08010261
 80101b0:	08010261 	.word	0x08010261
 80101b4:	08010261 	.word	0x08010261
 80101b8:	08010261 	.word	0x08010261
 80101bc:	08010261 	.word	0x08010261
 80101c0:	08010261 	.word	0x08010261
 80101c4:	08010261 	.word	0x08010261
 80101c8:	08010261 	.word	0x08010261
 80101cc:	08010261 	.word	0x08010261
 80101d0:	08010261 	.word	0x08010261
 80101d4:	08010261 	.word	0x08010261
 80101d8:	08010261 	.word	0x08010261
 80101dc:	08010261 	.word	0x08010261
 80101e0:	08010253 	.word	0x08010253
 80101e4:	2b40      	cmp	r3, #64	@ 0x40
 80101e6:	d037      	beq.n	8010258 <UART_SetConfig+0xc44>
 80101e8:	e03a      	b.n	8010260 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80101ea:	f7fa f9cf 	bl	800a58c <HAL_RCC_GetPCLK1Freq>
 80101ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80101f0:	e03c      	b.n	801026c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80101f2:	f7fa f9e1 	bl	800a5b8 <HAL_RCC_GetPCLK2Freq>
 80101f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80101f8:	e038      	b.n	801026c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80101fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80101fe:	4618      	mov	r0, r3
 8010200:	f7fb fbc4 	bl	800b98c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010208:	e030      	b.n	801026c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801020a:	f107 0318 	add.w	r3, r7, #24
 801020e:	4618      	mov	r0, r3
 8010210:	f7fb fd10 	bl	800bc34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010214:	69fb      	ldr	r3, [r7, #28]
 8010216:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010218:	e028      	b.n	801026c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801021a:	4b09      	ldr	r3, [pc, #36]	@ (8010240 <UART_SetConfig+0xc2c>)
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	f003 0320 	and.w	r3, r3, #32
 8010222:	2b00      	cmp	r3, #0
 8010224:	d012      	beq.n	801024c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010226:	4b06      	ldr	r3, [pc, #24]	@ (8010240 <UART_SetConfig+0xc2c>)
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	08db      	lsrs	r3, r3, #3
 801022c:	f003 0303 	and.w	r3, r3, #3
 8010230:	4a04      	ldr	r2, [pc, #16]	@ (8010244 <UART_SetConfig+0xc30>)
 8010232:	fa22 f303 	lsr.w	r3, r2, r3
 8010236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010238:	e018      	b.n	801026c <UART_SetConfig+0xc58>
 801023a:	bf00      	nop
 801023c:	08019b58 	.word	0x08019b58
 8010240:	58024400 	.word	0x58024400
 8010244:	03d09000 	.word	0x03d09000
 8010248:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 801024c:	4b24      	ldr	r3, [pc, #144]	@ (80102e0 <UART_SetConfig+0xccc>)
 801024e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010250:	e00c      	b.n	801026c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010252:	4b24      	ldr	r3, [pc, #144]	@ (80102e4 <UART_SetConfig+0xcd0>)
 8010254:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010256:	e009      	b.n	801026c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010258:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801025c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801025e:	e005      	b.n	801026c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8010260:	2300      	movs	r3, #0
 8010262:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010264:	2301      	movs	r3, #1
 8010266:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801026a:	bf00      	nop
    }

    if (pclk != 0U)
 801026c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801026e:	2b00      	cmp	r3, #0
 8010270:	d021      	beq.n	80102b6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010272:	697b      	ldr	r3, [r7, #20]
 8010274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010276:	4a1c      	ldr	r2, [pc, #112]	@ (80102e8 <UART_SetConfig+0xcd4>)
 8010278:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801027c:	461a      	mov	r2, r3
 801027e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010280:	fbb3 f2f2 	udiv	r2, r3, r2
 8010284:	697b      	ldr	r3, [r7, #20]
 8010286:	685b      	ldr	r3, [r3, #4]
 8010288:	085b      	lsrs	r3, r3, #1
 801028a:	441a      	add	r2, r3
 801028c:	697b      	ldr	r3, [r7, #20]
 801028e:	685b      	ldr	r3, [r3, #4]
 8010290:	fbb2 f3f3 	udiv	r3, r2, r3
 8010294:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010298:	2b0f      	cmp	r3, #15
 801029a:	d909      	bls.n	80102b0 <UART_SetConfig+0xc9c>
 801029c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801029e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80102a2:	d205      	bcs.n	80102b0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80102a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102a6:	b29a      	uxth	r2, r3
 80102a8:	697b      	ldr	r3, [r7, #20]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	60da      	str	r2, [r3, #12]
 80102ae:	e002      	b.n	80102b6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80102b0:	2301      	movs	r3, #1
 80102b2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80102b6:	697b      	ldr	r3, [r7, #20]
 80102b8:	2201      	movs	r2, #1
 80102ba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80102be:	697b      	ldr	r3, [r7, #20]
 80102c0:	2201      	movs	r2, #1
 80102c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80102c6:	697b      	ldr	r3, [r7, #20]
 80102c8:	2200      	movs	r2, #0
 80102ca:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80102cc:	697b      	ldr	r3, [r7, #20]
 80102ce:	2200      	movs	r2, #0
 80102d0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80102d2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80102d6:	4618      	mov	r0, r3
 80102d8:	3748      	adds	r7, #72	@ 0x48
 80102da:	46bd      	mov	sp, r7
 80102dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80102e0:	03d09000 	.word	0x03d09000
 80102e4:	003d0900 	.word	0x003d0900
 80102e8:	08019b58 	.word	0x08019b58

080102ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80102ec:	b480      	push	{r7}
 80102ee:	b083      	sub	sp, #12
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80102f8:	f003 0308 	and.w	r3, r3, #8
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d00a      	beq.n	8010316 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	685b      	ldr	r3, [r3, #4]
 8010306:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	430a      	orrs	r2, r1
 8010314:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801031a:	f003 0301 	and.w	r3, r3, #1
 801031e:	2b00      	cmp	r3, #0
 8010320:	d00a      	beq.n	8010338 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	685b      	ldr	r3, [r3, #4]
 8010328:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	430a      	orrs	r2, r1
 8010336:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801033c:	f003 0302 	and.w	r3, r3, #2
 8010340:	2b00      	cmp	r3, #0
 8010342:	d00a      	beq.n	801035a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	685b      	ldr	r3, [r3, #4]
 801034a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	430a      	orrs	r2, r1
 8010358:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801035e:	f003 0304 	and.w	r3, r3, #4
 8010362:	2b00      	cmp	r3, #0
 8010364:	d00a      	beq.n	801037c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	685b      	ldr	r3, [r3, #4]
 801036c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	430a      	orrs	r2, r1
 801037a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010380:	f003 0310 	and.w	r3, r3, #16
 8010384:	2b00      	cmp	r3, #0
 8010386:	d00a      	beq.n	801039e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	689b      	ldr	r3, [r3, #8]
 801038e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	430a      	orrs	r2, r1
 801039c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80103a2:	f003 0320 	and.w	r3, r3, #32
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d00a      	beq.n	80103c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	689b      	ldr	r3, [r3, #8]
 80103b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	430a      	orrs	r2, r1
 80103be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80103c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d01a      	beq.n	8010402 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	685b      	ldr	r3, [r3, #4]
 80103d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	430a      	orrs	r2, r1
 80103e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80103e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80103ea:	d10a      	bne.n	8010402 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	685b      	ldr	r3, [r3, #4]
 80103f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	430a      	orrs	r2, r1
 8010400:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801040a:	2b00      	cmp	r3, #0
 801040c:	d00a      	beq.n	8010424 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	685b      	ldr	r3, [r3, #4]
 8010414:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	430a      	orrs	r2, r1
 8010422:	605a      	str	r2, [r3, #4]
  }
}
 8010424:	bf00      	nop
 8010426:	370c      	adds	r7, #12
 8010428:	46bd      	mov	sp, r7
 801042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801042e:	4770      	bx	lr

08010430 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010430:	b580      	push	{r7, lr}
 8010432:	b098      	sub	sp, #96	@ 0x60
 8010434:	af02      	add	r7, sp, #8
 8010436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	2200      	movs	r2, #0
 801043c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010440:	f7f5 f9d4 	bl	80057ec <HAL_GetTick>
 8010444:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	f003 0308 	and.w	r3, r3, #8
 8010450:	2b08      	cmp	r3, #8
 8010452:	d12f      	bne.n	80104b4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010454:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010458:	9300      	str	r3, [sp, #0]
 801045a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801045c:	2200      	movs	r2, #0
 801045e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010462:	6878      	ldr	r0, [r7, #4]
 8010464:	f000 f88e 	bl	8010584 <UART_WaitOnFlagUntilTimeout>
 8010468:	4603      	mov	r3, r0
 801046a:	2b00      	cmp	r3, #0
 801046c:	d022      	beq.n	80104b4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010476:	e853 3f00 	ldrex	r3, [r3]
 801047a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801047c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801047e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010482:	653b      	str	r3, [r7, #80]	@ 0x50
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	461a      	mov	r2, r3
 801048a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801048c:	647b      	str	r3, [r7, #68]	@ 0x44
 801048e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010490:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010492:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010494:	e841 2300 	strex	r3, r2, [r1]
 8010498:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801049a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801049c:	2b00      	cmp	r3, #0
 801049e:	d1e6      	bne.n	801046e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	2220      	movs	r2, #32
 80104a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	2200      	movs	r2, #0
 80104ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80104b0:	2303      	movs	r3, #3
 80104b2:	e063      	b.n	801057c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	f003 0304 	and.w	r3, r3, #4
 80104be:	2b04      	cmp	r3, #4
 80104c0:	d149      	bne.n	8010556 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80104c2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80104c6:	9300      	str	r3, [sp, #0]
 80104c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80104ca:	2200      	movs	r2, #0
 80104cc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80104d0:	6878      	ldr	r0, [r7, #4]
 80104d2:	f000 f857 	bl	8010584 <UART_WaitOnFlagUntilTimeout>
 80104d6:	4603      	mov	r3, r0
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d03c      	beq.n	8010556 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104e4:	e853 3f00 	ldrex	r3, [r3]
 80104e8:	623b      	str	r3, [r7, #32]
   return(result);
 80104ea:	6a3b      	ldr	r3, [r7, #32]
 80104ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80104f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	461a      	mov	r2, r3
 80104f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80104fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80104fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010500:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010502:	e841 2300 	strex	r3, r2, [r1]
 8010506:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801050a:	2b00      	cmp	r3, #0
 801050c:	d1e6      	bne.n	80104dc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	3308      	adds	r3, #8
 8010514:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010516:	693b      	ldr	r3, [r7, #16]
 8010518:	e853 3f00 	ldrex	r3, [r3]
 801051c:	60fb      	str	r3, [r7, #12]
   return(result);
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	f023 0301 	bic.w	r3, r3, #1
 8010524:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	3308      	adds	r3, #8
 801052c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801052e:	61fa      	str	r2, [r7, #28]
 8010530:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010532:	69b9      	ldr	r1, [r7, #24]
 8010534:	69fa      	ldr	r2, [r7, #28]
 8010536:	e841 2300 	strex	r3, r2, [r1]
 801053a:	617b      	str	r3, [r7, #20]
   return(result);
 801053c:	697b      	ldr	r3, [r7, #20]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d1e5      	bne.n	801050e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	2220      	movs	r2, #32
 8010546:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	2200      	movs	r2, #0
 801054e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010552:	2303      	movs	r3, #3
 8010554:	e012      	b.n	801057c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	2220      	movs	r2, #32
 801055a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	2220      	movs	r2, #32
 8010562:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	2200      	movs	r2, #0
 801056a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	2200      	movs	r2, #0
 8010570:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	2200      	movs	r2, #0
 8010576:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801057a:	2300      	movs	r3, #0
}
 801057c:	4618      	mov	r0, r3
 801057e:	3758      	adds	r7, #88	@ 0x58
 8010580:	46bd      	mov	sp, r7
 8010582:	bd80      	pop	{r7, pc}

08010584 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010584:	b580      	push	{r7, lr}
 8010586:	b084      	sub	sp, #16
 8010588:	af00      	add	r7, sp, #0
 801058a:	60f8      	str	r0, [r7, #12]
 801058c:	60b9      	str	r1, [r7, #8]
 801058e:	603b      	str	r3, [r7, #0]
 8010590:	4613      	mov	r3, r2
 8010592:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010594:	e04f      	b.n	8010636 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010596:	69bb      	ldr	r3, [r7, #24]
 8010598:	f1b3 3fff 	cmp.w	r3, #4294967295
 801059c:	d04b      	beq.n	8010636 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801059e:	f7f5 f925 	bl	80057ec <HAL_GetTick>
 80105a2:	4602      	mov	r2, r0
 80105a4:	683b      	ldr	r3, [r7, #0]
 80105a6:	1ad3      	subs	r3, r2, r3
 80105a8:	69ba      	ldr	r2, [r7, #24]
 80105aa:	429a      	cmp	r2, r3
 80105ac:	d302      	bcc.n	80105b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80105ae:	69bb      	ldr	r3, [r7, #24]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d101      	bne.n	80105b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80105b4:	2303      	movs	r3, #3
 80105b6:	e04e      	b.n	8010656 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	f003 0304 	and.w	r3, r3, #4
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d037      	beq.n	8010636 <UART_WaitOnFlagUntilTimeout+0xb2>
 80105c6:	68bb      	ldr	r3, [r7, #8]
 80105c8:	2b80      	cmp	r3, #128	@ 0x80
 80105ca:	d034      	beq.n	8010636 <UART_WaitOnFlagUntilTimeout+0xb2>
 80105cc:	68bb      	ldr	r3, [r7, #8]
 80105ce:	2b40      	cmp	r3, #64	@ 0x40
 80105d0:	d031      	beq.n	8010636 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	69db      	ldr	r3, [r3, #28]
 80105d8:	f003 0308 	and.w	r3, r3, #8
 80105dc:	2b08      	cmp	r3, #8
 80105de:	d110      	bne.n	8010602 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	2208      	movs	r2, #8
 80105e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80105e8:	68f8      	ldr	r0, [r7, #12]
 80105ea:	f000 fa43 	bl	8010a74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	2208      	movs	r2, #8
 80105f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	2200      	movs	r2, #0
 80105fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80105fe:	2301      	movs	r3, #1
 8010600:	e029      	b.n	8010656 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	69db      	ldr	r3, [r3, #28]
 8010608:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801060c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010610:	d111      	bne.n	8010636 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801061a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801061c:	68f8      	ldr	r0, [r7, #12]
 801061e:	f000 fa29 	bl	8010a74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	2220      	movs	r2, #32
 8010626:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	2200      	movs	r2, #0
 801062e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8010632:	2303      	movs	r3, #3
 8010634:	e00f      	b.n	8010656 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	69da      	ldr	r2, [r3, #28]
 801063c:	68bb      	ldr	r3, [r7, #8]
 801063e:	4013      	ands	r3, r2
 8010640:	68ba      	ldr	r2, [r7, #8]
 8010642:	429a      	cmp	r2, r3
 8010644:	bf0c      	ite	eq
 8010646:	2301      	moveq	r3, #1
 8010648:	2300      	movne	r3, #0
 801064a:	b2db      	uxtb	r3, r3
 801064c:	461a      	mov	r2, r3
 801064e:	79fb      	ldrb	r3, [r7, #7]
 8010650:	429a      	cmp	r2, r3
 8010652:	d0a0      	beq.n	8010596 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010654:	2300      	movs	r3, #0
}
 8010656:	4618      	mov	r0, r3
 8010658:	3710      	adds	r7, #16
 801065a:	46bd      	mov	sp, r7
 801065c:	bd80      	pop	{r7, pc}
	...

08010660 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010660:	b480      	push	{r7}
 8010662:	b0a3      	sub	sp, #140	@ 0x8c
 8010664:	af00      	add	r7, sp, #0
 8010666:	60f8      	str	r0, [r7, #12]
 8010668:	60b9      	str	r1, [r7, #8]
 801066a:	4613      	mov	r3, r2
 801066c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	68ba      	ldr	r2, [r7, #8]
 8010672:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	88fa      	ldrh	r2, [r7, #6]
 8010678:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	88fa      	ldrh	r2, [r7, #6]
 8010680:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	2200      	movs	r2, #0
 8010688:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	689b      	ldr	r3, [r3, #8]
 801068e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010692:	d10e      	bne.n	80106b2 <UART_Start_Receive_IT+0x52>
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	691b      	ldr	r3, [r3, #16]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d105      	bne.n	80106a8 <UART_Start_Receive_IT+0x48>
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80106a2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80106a6:	e02d      	b.n	8010704 <UART_Start_Receive_IT+0xa4>
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	22ff      	movs	r2, #255	@ 0xff
 80106ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80106b0:	e028      	b.n	8010704 <UART_Start_Receive_IT+0xa4>
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	689b      	ldr	r3, [r3, #8]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d10d      	bne.n	80106d6 <UART_Start_Receive_IT+0x76>
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	691b      	ldr	r3, [r3, #16]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d104      	bne.n	80106cc <UART_Start_Receive_IT+0x6c>
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	22ff      	movs	r2, #255	@ 0xff
 80106c6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80106ca:	e01b      	b.n	8010704 <UART_Start_Receive_IT+0xa4>
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	227f      	movs	r2, #127	@ 0x7f
 80106d0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80106d4:	e016      	b.n	8010704 <UART_Start_Receive_IT+0xa4>
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	689b      	ldr	r3, [r3, #8]
 80106da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80106de:	d10d      	bne.n	80106fc <UART_Start_Receive_IT+0x9c>
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	691b      	ldr	r3, [r3, #16]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d104      	bne.n	80106f2 <UART_Start_Receive_IT+0x92>
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	227f      	movs	r2, #127	@ 0x7f
 80106ec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80106f0:	e008      	b.n	8010704 <UART_Start_Receive_IT+0xa4>
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	223f      	movs	r2, #63	@ 0x3f
 80106f6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80106fa:	e003      	b.n	8010704 <UART_Start_Receive_IT+0xa4>
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	2200      	movs	r2, #0
 8010700:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	2200      	movs	r2, #0
 8010708:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	2222      	movs	r2, #34	@ 0x22
 8010710:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	3308      	adds	r3, #8
 801071a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801071c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801071e:	e853 3f00 	ldrex	r3, [r3]
 8010722:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8010724:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010726:	f043 0301 	orr.w	r3, r3, #1
 801072a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	3308      	adds	r3, #8
 8010734:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8010738:	673a      	str	r2, [r7, #112]	@ 0x70
 801073a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801073c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 801073e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8010740:	e841 2300 	strex	r3, r2, [r1]
 8010744:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8010746:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010748:	2b00      	cmp	r3, #0
 801074a:	d1e3      	bne.n	8010714 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010750:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010754:	d14f      	bne.n	80107f6 <UART_Start_Receive_IT+0x196>
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801075c:	88fa      	ldrh	r2, [r7, #6]
 801075e:	429a      	cmp	r2, r3
 8010760:	d349      	bcc.n	80107f6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	689b      	ldr	r3, [r3, #8]
 8010766:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801076a:	d107      	bne.n	801077c <UART_Start_Receive_IT+0x11c>
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	691b      	ldr	r3, [r3, #16]
 8010770:	2b00      	cmp	r3, #0
 8010772:	d103      	bne.n	801077c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	4a47      	ldr	r2, [pc, #284]	@ (8010894 <UART_Start_Receive_IT+0x234>)
 8010778:	675a      	str	r2, [r3, #116]	@ 0x74
 801077a:	e002      	b.n	8010782 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	4a46      	ldr	r2, [pc, #280]	@ (8010898 <UART_Start_Receive_IT+0x238>)
 8010780:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	691b      	ldr	r3, [r3, #16]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d01a      	beq.n	80107c0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010790:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010792:	e853 3f00 	ldrex	r3, [r3]
 8010796:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8010798:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801079a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801079e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	461a      	mov	r2, r3
 80107a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80107ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80107ae:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107b0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80107b2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80107b4:	e841 2300 	strex	r3, r2, [r1]
 80107b8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80107ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d1e4      	bne.n	801078a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	3308      	adds	r3, #8
 80107c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80107ca:	e853 3f00 	ldrex	r3, [r3]
 80107ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80107d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80107d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	3308      	adds	r3, #8
 80107de:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80107e0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80107e2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107e4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80107e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80107e8:	e841 2300 	strex	r3, r2, [r1]
 80107ec:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80107ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d1e5      	bne.n	80107c0 <UART_Start_Receive_IT+0x160>
 80107f4:	e046      	b.n	8010884 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	689b      	ldr	r3, [r3, #8]
 80107fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80107fe:	d107      	bne.n	8010810 <UART_Start_Receive_IT+0x1b0>
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	691b      	ldr	r3, [r3, #16]
 8010804:	2b00      	cmp	r3, #0
 8010806:	d103      	bne.n	8010810 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	4a24      	ldr	r2, [pc, #144]	@ (801089c <UART_Start_Receive_IT+0x23c>)
 801080c:	675a      	str	r2, [r3, #116]	@ 0x74
 801080e:	e002      	b.n	8010816 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	4a23      	ldr	r2, [pc, #140]	@ (80108a0 <UART_Start_Receive_IT+0x240>)
 8010814:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	691b      	ldr	r3, [r3, #16]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d019      	beq.n	8010852 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010826:	e853 3f00 	ldrex	r3, [r3]
 801082a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801082c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801082e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8010832:	677b      	str	r3, [r7, #116]	@ 0x74
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	461a      	mov	r2, r3
 801083a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801083c:	637b      	str	r3, [r7, #52]	@ 0x34
 801083e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010840:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010842:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010844:	e841 2300 	strex	r3, r2, [r1]
 8010848:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801084a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801084c:	2b00      	cmp	r3, #0
 801084e:	d1e6      	bne.n	801081e <UART_Start_Receive_IT+0x1be>
 8010850:	e018      	b.n	8010884 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010858:	697b      	ldr	r3, [r7, #20]
 801085a:	e853 3f00 	ldrex	r3, [r3]
 801085e:	613b      	str	r3, [r7, #16]
   return(result);
 8010860:	693b      	ldr	r3, [r7, #16]
 8010862:	f043 0320 	orr.w	r3, r3, #32
 8010866:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	461a      	mov	r2, r3
 801086e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010870:	623b      	str	r3, [r7, #32]
 8010872:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010874:	69f9      	ldr	r1, [r7, #28]
 8010876:	6a3a      	ldr	r2, [r7, #32]
 8010878:	e841 2300 	strex	r3, r2, [r1]
 801087c:	61bb      	str	r3, [r7, #24]
   return(result);
 801087e:	69bb      	ldr	r3, [r7, #24]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d1e6      	bne.n	8010852 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8010884:	2300      	movs	r3, #0
}
 8010886:	4618      	mov	r0, r3
 8010888:	378c      	adds	r7, #140	@ 0x8c
 801088a:	46bd      	mov	sp, r7
 801088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010890:	4770      	bx	lr
 8010892:	bf00      	nop
 8010894:	080118c9 	.word	0x080118c9
 8010898:	08011569 	.word	0x08011569
 801089c:	080113b1 	.word	0x080113b1
 80108a0:	080111f9 	.word	0x080111f9

080108a4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b096      	sub	sp, #88	@ 0x58
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	60f8      	str	r0, [r7, #12]
 80108ac:	60b9      	str	r1, [r7, #8]
 80108ae:	4613      	mov	r3, r2
 80108b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	68ba      	ldr	r2, [r7, #8]
 80108b6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	88fa      	ldrh	r2, [r7, #6]
 80108bc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	2200      	movs	r2, #0
 80108c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	2222      	movs	r2, #34	@ 0x22
 80108cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d02d      	beq.n	8010936 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80108e0:	4a40      	ldr	r2, [pc, #256]	@ (80109e4 <UART_Start_Receive_DMA+0x140>)
 80108e2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80108ea:	4a3f      	ldr	r2, [pc, #252]	@ (80109e8 <UART_Start_Receive_DMA+0x144>)
 80108ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80108f4:	4a3d      	ldr	r2, [pc, #244]	@ (80109ec <UART_Start_Receive_DMA+0x148>)
 80108f6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80108fe:	2200      	movs	r2, #0
 8010900:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	3324      	adds	r3, #36	@ 0x24
 801090e:	4619      	mov	r1, r3
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010914:	461a      	mov	r2, r3
 8010916:	88fb      	ldrh	r3, [r7, #6]
 8010918:	f7f5 fcae 	bl	8006278 <HAL_DMA_Start_IT>
 801091c:	4603      	mov	r3, r0
 801091e:	2b00      	cmp	r3, #0
 8010920:	d009      	beq.n	8010936 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	2210      	movs	r2, #16
 8010926:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	2220      	movs	r2, #32
 801092e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8010932:	2301      	movs	r3, #1
 8010934:	e051      	b.n	80109da <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	691b      	ldr	r3, [r3, #16]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d018      	beq.n	8010970 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010944:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010946:	e853 3f00 	ldrex	r3, [r3]
 801094a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801094c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801094e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010952:	657b      	str	r3, [r7, #84]	@ 0x54
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	461a      	mov	r2, r3
 801095a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801095c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801095e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010960:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010962:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010964:	e841 2300 	strex	r3, r2, [r1]
 8010968:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 801096a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801096c:	2b00      	cmp	r3, #0
 801096e:	d1e6      	bne.n	801093e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	3308      	adds	r3, #8
 8010976:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801097a:	e853 3f00 	ldrex	r3, [r3]
 801097e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010982:	f043 0301 	orr.w	r3, r3, #1
 8010986:	653b      	str	r3, [r7, #80]	@ 0x50
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	3308      	adds	r3, #8
 801098e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010990:	637a      	str	r2, [r7, #52]	@ 0x34
 8010992:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010994:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010996:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010998:	e841 2300 	strex	r3, r2, [r1]
 801099c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801099e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d1e5      	bne.n	8010970 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	3308      	adds	r3, #8
 80109aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109ac:	697b      	ldr	r3, [r7, #20]
 80109ae:	e853 3f00 	ldrex	r3, [r3]
 80109b2:	613b      	str	r3, [r7, #16]
   return(result);
 80109b4:	693b      	ldr	r3, [r7, #16]
 80109b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80109ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	3308      	adds	r3, #8
 80109c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80109c4:	623a      	str	r2, [r7, #32]
 80109c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109c8:	69f9      	ldr	r1, [r7, #28]
 80109ca:	6a3a      	ldr	r2, [r7, #32]
 80109cc:	e841 2300 	strex	r3, r2, [r1]
 80109d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80109d2:	69bb      	ldr	r3, [r7, #24]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d1e5      	bne.n	80109a4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80109d8:	2300      	movs	r3, #0
}
 80109da:	4618      	mov	r0, r3
 80109dc:	3758      	adds	r7, #88	@ 0x58
 80109de:	46bd      	mov	sp, r7
 80109e0:	bd80      	pop	{r7, pc}
 80109e2:	bf00      	nop
 80109e4:	08010b41 	.word	0x08010b41
 80109e8:	08010c69 	.word	0x08010c69
 80109ec:	08010ca7 	.word	0x08010ca7

080109f0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80109f0:	b480      	push	{r7}
 80109f2:	b08f      	sub	sp, #60	@ 0x3c
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109fe:	6a3b      	ldr	r3, [r7, #32]
 8010a00:	e853 3f00 	ldrex	r3, [r3]
 8010a04:	61fb      	str	r3, [r7, #28]
   return(result);
 8010a06:	69fb      	ldr	r3, [r7, #28]
 8010a08:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8010a0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	461a      	mov	r2, r3
 8010a14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010a18:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010a1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010a1e:	e841 2300 	strex	r3, r2, [r1]
 8010a22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d1e6      	bne.n	80109f8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	3308      	adds	r3, #8
 8010a30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	e853 3f00 	ldrex	r3, [r3]
 8010a38:	60bb      	str	r3, [r7, #8]
   return(result);
 8010a3a:	68bb      	ldr	r3, [r7, #8]
 8010a3c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8010a40:	633b      	str	r3, [r7, #48]	@ 0x30
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	3308      	adds	r3, #8
 8010a48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010a4a:	61ba      	str	r2, [r7, #24]
 8010a4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a4e:	6979      	ldr	r1, [r7, #20]
 8010a50:	69ba      	ldr	r2, [r7, #24]
 8010a52:	e841 2300 	strex	r3, r2, [r1]
 8010a56:	613b      	str	r3, [r7, #16]
   return(result);
 8010a58:	693b      	ldr	r3, [r7, #16]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d1e5      	bne.n	8010a2a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	2220      	movs	r2, #32
 8010a62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8010a66:	bf00      	nop
 8010a68:	373c      	adds	r7, #60	@ 0x3c
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a70:	4770      	bx	lr
	...

08010a74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010a74:	b480      	push	{r7}
 8010a76:	b095      	sub	sp, #84	@ 0x54
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010a84:	e853 3f00 	ldrex	r3, [r3]
 8010a88:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010a90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	461a      	mov	r2, r3
 8010a98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8010a9c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a9e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010aa0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010aa2:	e841 2300 	strex	r3, r2, [r1]
 8010aa6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d1e6      	bne.n	8010a7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	3308      	adds	r3, #8
 8010ab4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ab6:	6a3b      	ldr	r3, [r7, #32]
 8010ab8:	e853 3f00 	ldrex	r3, [r3]
 8010abc:	61fb      	str	r3, [r7, #28]
   return(result);
 8010abe:	69fa      	ldr	r2, [r7, #28]
 8010ac0:	4b1e      	ldr	r3, [pc, #120]	@ (8010b3c <UART_EndRxTransfer+0xc8>)
 8010ac2:	4013      	ands	r3, r2
 8010ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	3308      	adds	r3, #8
 8010acc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010ace:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ad2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010ad4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010ad6:	e841 2300 	strex	r3, r2, [r1]
 8010ada:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d1e5      	bne.n	8010aae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010ae6:	2b01      	cmp	r3, #1
 8010ae8:	d118      	bne.n	8010b1c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	e853 3f00 	ldrex	r3, [r3]
 8010af6:	60bb      	str	r3, [r7, #8]
   return(result);
 8010af8:	68bb      	ldr	r3, [r7, #8]
 8010afa:	f023 0310 	bic.w	r3, r3, #16
 8010afe:	647b      	str	r3, [r7, #68]	@ 0x44
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	461a      	mov	r2, r3
 8010b06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010b08:	61bb      	str	r3, [r7, #24]
 8010b0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b0c:	6979      	ldr	r1, [r7, #20]
 8010b0e:	69ba      	ldr	r2, [r7, #24]
 8010b10:	e841 2300 	strex	r3, r2, [r1]
 8010b14:	613b      	str	r3, [r7, #16]
   return(result);
 8010b16:	693b      	ldr	r3, [r7, #16]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d1e6      	bne.n	8010aea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	2220      	movs	r2, #32
 8010b20:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	2200      	movs	r2, #0
 8010b28:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	2200      	movs	r2, #0
 8010b2e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010b30:	bf00      	nop
 8010b32:	3754      	adds	r7, #84	@ 0x54
 8010b34:	46bd      	mov	sp, r7
 8010b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b3a:	4770      	bx	lr
 8010b3c:	effffffe 	.word	0xeffffffe

08010b40 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010b40:	b580      	push	{r7, lr}
 8010b42:	b09c      	sub	sp, #112	@ 0x70
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010b4c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	69db      	ldr	r3, [r3, #28]
 8010b52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010b56:	d071      	beq.n	8010c3c <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8010b58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010b5a:	2200      	movs	r2, #0
 8010b5c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010b60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010b68:	e853 3f00 	ldrex	r3, [r3]
 8010b6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010b6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010b70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010b74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010b76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	461a      	mov	r2, r3
 8010b7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010b7e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010b80:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b82:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010b84:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010b86:	e841 2300 	strex	r3, r2, [r1]
 8010b8a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010b8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d1e6      	bne.n	8010b60 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	3308      	adds	r3, #8
 8010b98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b9c:	e853 3f00 	ldrex	r3, [r3]
 8010ba0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010ba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ba4:	f023 0301 	bic.w	r3, r3, #1
 8010ba8:	667b      	str	r3, [r7, #100]	@ 0x64
 8010baa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	3308      	adds	r3, #8
 8010bb0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010bb2:	647a      	str	r2, [r7, #68]	@ 0x44
 8010bb4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bb6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010bb8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010bba:	e841 2300 	strex	r3, r2, [r1]
 8010bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010bc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d1e5      	bne.n	8010b92 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010bc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	3308      	adds	r3, #8
 8010bcc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bd0:	e853 3f00 	ldrex	r3, [r3]
 8010bd4:	623b      	str	r3, [r7, #32]
   return(result);
 8010bd6:	6a3b      	ldr	r3, [r7, #32]
 8010bd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010bdc:	663b      	str	r3, [r7, #96]	@ 0x60
 8010bde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	3308      	adds	r3, #8
 8010be4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010be6:	633a      	str	r2, [r7, #48]	@ 0x30
 8010be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010bec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010bee:	e841 2300 	strex	r3, r2, [r1]
 8010bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d1e5      	bne.n	8010bc6 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010bfa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010bfc:	2220      	movs	r2, #32
 8010bfe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010c02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010c04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010c06:	2b01      	cmp	r3, #1
 8010c08:	d118      	bne.n	8010c3c <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010c0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c10:	693b      	ldr	r3, [r7, #16]
 8010c12:	e853 3f00 	ldrex	r3, [r3]
 8010c16:	60fb      	str	r3, [r7, #12]
   return(result);
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	f023 0310 	bic.w	r3, r3, #16
 8010c1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010c20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	461a      	mov	r2, r3
 8010c26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010c28:	61fb      	str	r3, [r7, #28]
 8010c2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c2c:	69b9      	ldr	r1, [r7, #24]
 8010c2e:	69fa      	ldr	r2, [r7, #28]
 8010c30:	e841 2300 	strex	r3, r2, [r1]
 8010c34:	617b      	str	r3, [r7, #20]
   return(result);
 8010c36:	697b      	ldr	r3, [r7, #20]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d1e6      	bne.n	8010c0a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010c3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010c3e:	2200      	movs	r2, #0
 8010c40:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010c42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010c44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010c46:	2b01      	cmp	r3, #1
 8010c48:	d107      	bne.n	8010c5a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010c4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010c4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010c50:	4619      	mov	r1, r3
 8010c52:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010c54:	f7fe fcd2 	bl	800f5fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010c58:	e002      	b.n	8010c60 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8010c5a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010c5c:	f7f3 fa7a 	bl	8004154 <HAL_UART_RxCpltCallback>
}
 8010c60:	bf00      	nop
 8010c62:	3770      	adds	r7, #112	@ 0x70
 8010c64:	46bd      	mov	sp, r7
 8010c66:	bd80      	pop	{r7, pc}

08010c68 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b084      	sub	sp, #16
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010c74:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	2201      	movs	r2, #1
 8010c7a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010c80:	2b01      	cmp	r3, #1
 8010c82:	d109      	bne.n	8010c98 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010c8a:	085b      	lsrs	r3, r3, #1
 8010c8c:	b29b      	uxth	r3, r3
 8010c8e:	4619      	mov	r1, r3
 8010c90:	68f8      	ldr	r0, [r7, #12]
 8010c92:	f7fe fcb3 	bl	800f5fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010c96:	e002      	b.n	8010c9e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8010c98:	68f8      	ldr	r0, [r7, #12]
 8010c9a:	f7fe fc91 	bl	800f5c0 <HAL_UART_RxHalfCpltCallback>
}
 8010c9e:	bf00      	nop
 8010ca0:	3710      	adds	r7, #16
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	bd80      	pop	{r7, pc}

08010ca6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010ca6:	b580      	push	{r7, lr}
 8010ca8:	b086      	sub	sp, #24
 8010caa:	af00      	add	r7, sp, #0
 8010cac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010cb2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010cb4:	697b      	ldr	r3, [r7, #20]
 8010cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010cba:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010cbc:	697b      	ldr	r3, [r7, #20]
 8010cbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010cc2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010cc4:	697b      	ldr	r3, [r7, #20]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	689b      	ldr	r3, [r3, #8]
 8010cca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010cce:	2b80      	cmp	r3, #128	@ 0x80
 8010cd0:	d109      	bne.n	8010ce6 <UART_DMAError+0x40>
 8010cd2:	693b      	ldr	r3, [r7, #16]
 8010cd4:	2b21      	cmp	r3, #33	@ 0x21
 8010cd6:	d106      	bne.n	8010ce6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010cd8:	697b      	ldr	r3, [r7, #20]
 8010cda:	2200      	movs	r2, #0
 8010cdc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8010ce0:	6978      	ldr	r0, [r7, #20]
 8010ce2:	f7ff fe85 	bl	80109f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010ce6:	697b      	ldr	r3, [r7, #20]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	689b      	ldr	r3, [r3, #8]
 8010cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010cf0:	2b40      	cmp	r3, #64	@ 0x40
 8010cf2:	d109      	bne.n	8010d08 <UART_DMAError+0x62>
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	2b22      	cmp	r3, #34	@ 0x22
 8010cf8:	d106      	bne.n	8010d08 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010cfa:	697b      	ldr	r3, [r7, #20]
 8010cfc:	2200      	movs	r2, #0
 8010cfe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8010d02:	6978      	ldr	r0, [r7, #20]
 8010d04:	f7ff feb6 	bl	8010a74 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010d08:	697b      	ldr	r3, [r7, #20]
 8010d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010d0e:	f043 0210 	orr.w	r2, r3, #16
 8010d12:	697b      	ldr	r3, [r7, #20]
 8010d14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010d18:	6978      	ldr	r0, [r7, #20]
 8010d1a:	f7fe fc5b 	bl	800f5d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010d1e:	bf00      	nop
 8010d20:	3718      	adds	r7, #24
 8010d22:	46bd      	mov	sp, r7
 8010d24:	bd80      	pop	{r7, pc}

08010d26 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010d26:	b580      	push	{r7, lr}
 8010d28:	b084      	sub	sp, #16
 8010d2a:	af00      	add	r7, sp, #0
 8010d2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	2200      	movs	r2, #0
 8010d38:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	2200      	movs	r2, #0
 8010d40:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010d44:	68f8      	ldr	r0, [r7, #12]
 8010d46:	f7fe fc45 	bl	800f5d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010d4a:	bf00      	nop
 8010d4c:	3710      	adds	r7, #16
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	bd80      	pop	{r7, pc}

08010d52 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8010d52:	b580      	push	{r7, lr}
 8010d54:	b084      	sub	sp, #16
 8010d56:	af00      	add	r7, sp, #0
 8010d58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d5e:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010d64:	2200      	movs	r2, #0
 8010d66:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d005      	beq.n	8010d7e <UART_DMATxAbortCallback+0x2c>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010d78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d12b      	bne.n	8010dd6 <UART_DMATxAbortCallback+0x84>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	2200      	movs	r2, #0
 8010d82:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	2200      	movs	r2, #0
 8010d8a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	2200      	movs	r2, #0
 8010d92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	220f      	movs	r2, #15
 8010d9c:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010da2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010da6:	d107      	bne.n	8010db8 <UART_DMATxAbortCallback+0x66>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	699a      	ldr	r2, [r3, #24]
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	f042 0210 	orr.w	r2, r2, #16
 8010db6:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	2220      	movs	r2, #32
 8010dbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	2220      	movs	r2, #32
 8010dc4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	2200      	movs	r2, #0
 8010dcc:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8010dce:	68f8      	ldr	r0, [r7, #12]
 8010dd0:	f7fe fc0a 	bl	800f5e8 <HAL_UART_AbortCpltCallback>
 8010dd4:	e000      	b.n	8010dd8 <UART_DMATxAbortCallback+0x86>
      return;
 8010dd6:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010dd8:	3710      	adds	r7, #16
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	bd80      	pop	{r7, pc}

08010dde <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8010dde:	b580      	push	{r7, lr}
 8010de0:	b084      	sub	sp, #16
 8010de2:	af00      	add	r7, sp, #0
 8010de4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010dea:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010df2:	2200      	movs	r2, #0
 8010df4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d004      	beq.n	8010e08 <UART_DMARxAbortCallback+0x2a>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010e02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d126      	bne.n	8010e56 <UART_DMARxAbortCallback+0x78>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	2200      	movs	r2, #0
 8010e0c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	2200      	movs	r2, #0
 8010e14:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	2200      	movs	r2, #0
 8010e1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	220f      	movs	r2, #15
 8010e26:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	699a      	ldr	r2, [r3, #24]
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	f042 0208 	orr.w	r2, r2, #8
 8010e36:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	2220      	movs	r2, #32
 8010e3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	2220      	movs	r2, #32
 8010e44:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	2200      	movs	r2, #0
 8010e4c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8010e4e:	68f8      	ldr	r0, [r7, #12]
 8010e50:	f7fe fbca 	bl	800f5e8 <HAL_UART_AbortCpltCallback>
 8010e54:	e000      	b.n	8010e58 <UART_DMARxAbortCallback+0x7a>
      return;
 8010e56:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010e58:	3710      	adds	r7, #16
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	bd80      	pop	{r7, pc}

08010e5e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8010e5e:	b480      	push	{r7}
 8010e60:	b08f      	sub	sp, #60	@ 0x3c
 8010e62:	af00      	add	r7, sp, #0
 8010e64:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010e6c:	2b21      	cmp	r3, #33	@ 0x21
 8010e6e:	d14c      	bne.n	8010f0a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010e76:	b29b      	uxth	r3, r3
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d132      	bne.n	8010ee2 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e82:	6a3b      	ldr	r3, [r7, #32]
 8010e84:	e853 3f00 	ldrex	r3, [r3]
 8010e88:	61fb      	str	r3, [r7, #28]
   return(result);
 8010e8a:	69fb      	ldr	r3, [r7, #28]
 8010e8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010e90:	637b      	str	r3, [r7, #52]	@ 0x34
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	461a      	mov	r2, r3
 8010e98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010e9c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010ea0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010ea2:	e841 2300 	strex	r3, r2, [r1]
 8010ea6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d1e6      	bne.n	8010e7c <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	e853 3f00 	ldrex	r3, [r3]
 8010eba:	60bb      	str	r3, [r7, #8]
   return(result);
 8010ebc:	68bb      	ldr	r3, [r7, #8]
 8010ebe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010ec2:	633b      	str	r3, [r7, #48]	@ 0x30
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	461a      	mov	r2, r3
 8010eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ecc:	61bb      	str	r3, [r7, #24]
 8010ece:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ed0:	6979      	ldr	r1, [r7, #20]
 8010ed2:	69ba      	ldr	r2, [r7, #24]
 8010ed4:	e841 2300 	strex	r3, r2, [r1]
 8010ed8:	613b      	str	r3, [r7, #16]
   return(result);
 8010eda:	693b      	ldr	r3, [r7, #16]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d1e6      	bne.n	8010eae <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8010ee0:	e013      	b.n	8010f0a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010ee6:	781a      	ldrb	r2, [r3, #0]
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010ef2:	1c5a      	adds	r2, r3, #1
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010efe:	b29b      	uxth	r3, r3
 8010f00:	3b01      	subs	r3, #1
 8010f02:	b29a      	uxth	r2, r3
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8010f0a:	bf00      	nop
 8010f0c:	373c      	adds	r7, #60	@ 0x3c
 8010f0e:	46bd      	mov	sp, r7
 8010f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f14:	4770      	bx	lr

08010f16 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8010f16:	b480      	push	{r7}
 8010f18:	b091      	sub	sp, #68	@ 0x44
 8010f1a:	af00      	add	r7, sp, #0
 8010f1c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010f24:	2b21      	cmp	r3, #33	@ 0x21
 8010f26:	d151      	bne.n	8010fcc <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010f2e:	b29b      	uxth	r3, r3
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d132      	bne.n	8010f9a <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f3c:	e853 3f00 	ldrex	r3, [r3]
 8010f40:	623b      	str	r3, [r7, #32]
   return(result);
 8010f42:	6a3b      	ldr	r3, [r7, #32]
 8010f44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010f48:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	461a      	mov	r2, r3
 8010f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f52:	633b      	str	r3, [r7, #48]	@ 0x30
 8010f54:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010f58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010f5a:	e841 2300 	strex	r3, r2, [r1]
 8010f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d1e6      	bne.n	8010f34 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f6c:	693b      	ldr	r3, [r7, #16]
 8010f6e:	e853 3f00 	ldrex	r3, [r3]
 8010f72:	60fb      	str	r3, [r7, #12]
   return(result);
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010f7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	461a      	mov	r2, r3
 8010f82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f84:	61fb      	str	r3, [r7, #28]
 8010f86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f88:	69b9      	ldr	r1, [r7, #24]
 8010f8a:	69fa      	ldr	r2, [r7, #28]
 8010f8c:	e841 2300 	strex	r3, r2, [r1]
 8010f90:	617b      	str	r3, [r7, #20]
   return(result);
 8010f92:	697b      	ldr	r3, [r7, #20]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d1e6      	bne.n	8010f66 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8010f98:	e018      	b.n	8010fcc <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8010fa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010fa2:	881b      	ldrh	r3, [r3, #0]
 8010fa4:	461a      	mov	r2, r3
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010fae:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010fb4:	1c9a      	adds	r2, r3, #2
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010fc0:	b29b      	uxth	r3, r3
 8010fc2:	3b01      	subs	r3, #1
 8010fc4:	b29a      	uxth	r2, r3
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8010fcc:	bf00      	nop
 8010fce:	3744      	adds	r7, #68	@ 0x44
 8010fd0:	46bd      	mov	sp, r7
 8010fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd6:	4770      	bx	lr

08010fd8 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010fd8:	b480      	push	{r7}
 8010fda:	b091      	sub	sp, #68	@ 0x44
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010fe6:	2b21      	cmp	r3, #33	@ 0x21
 8010fe8:	d160      	bne.n	80110ac <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010ff0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8010ff2:	e057      	b.n	80110a4 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010ffa:	b29b      	uxth	r3, r3
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d133      	bne.n	8011068 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	3308      	adds	r3, #8
 8011006:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801100a:	e853 3f00 	ldrex	r3, [r3]
 801100e:	623b      	str	r3, [r7, #32]
   return(result);
 8011010:	6a3b      	ldr	r3, [r7, #32]
 8011012:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8011016:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	3308      	adds	r3, #8
 801101e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011020:	633a      	str	r2, [r7, #48]	@ 0x30
 8011022:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011024:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011026:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011028:	e841 2300 	strex	r3, r2, [r1]
 801102c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801102e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011030:	2b00      	cmp	r3, #0
 8011032:	d1e5      	bne.n	8011000 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801103a:	693b      	ldr	r3, [r7, #16]
 801103c:	e853 3f00 	ldrex	r3, [r3]
 8011040:	60fb      	str	r3, [r7, #12]
   return(result);
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011048:	637b      	str	r3, [r7, #52]	@ 0x34
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	461a      	mov	r2, r3
 8011050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011052:	61fb      	str	r3, [r7, #28]
 8011054:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011056:	69b9      	ldr	r1, [r7, #24]
 8011058:	69fa      	ldr	r2, [r7, #28]
 801105a:	e841 2300 	strex	r3, r2, [r1]
 801105e:	617b      	str	r3, [r7, #20]
   return(result);
 8011060:	697b      	ldr	r3, [r7, #20]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d1e6      	bne.n	8011034 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8011066:	e021      	b.n	80110ac <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	69db      	ldr	r3, [r3, #28]
 801106e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011072:	2b00      	cmp	r3, #0
 8011074:	d013      	beq.n	801109e <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801107a:	781a      	ldrb	r2, [r3, #0]
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011086:	1c5a      	adds	r2, r3, #1
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8011092:	b29b      	uxth	r3, r3
 8011094:	3b01      	subs	r3, #1
 8011096:	b29a      	uxth	r2, r3
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801109e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80110a0:	3b01      	subs	r3, #1
 80110a2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80110a4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d1a4      	bne.n	8010ff4 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80110aa:	e7ff      	b.n	80110ac <UART_TxISR_8BIT_FIFOEN+0xd4>
 80110ac:	bf00      	nop
 80110ae:	3744      	adds	r7, #68	@ 0x44
 80110b0:	46bd      	mov	sp, r7
 80110b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b6:	4770      	bx	lr

080110b8 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80110b8:	b480      	push	{r7}
 80110ba:	b091      	sub	sp, #68	@ 0x44
 80110bc:	af00      	add	r7, sp, #0
 80110be:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80110c6:	2b21      	cmp	r3, #33	@ 0x21
 80110c8:	d165      	bne.n	8011196 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80110d0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80110d2:	e05c      	b.n	801118e <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80110da:	b29b      	uxth	r3, r3
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d133      	bne.n	8011148 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	3308      	adds	r3, #8
 80110e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110e8:	6a3b      	ldr	r3, [r7, #32]
 80110ea:	e853 3f00 	ldrex	r3, [r3]
 80110ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80110f0:	69fb      	ldr	r3, [r7, #28]
 80110f2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80110f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	3308      	adds	r3, #8
 80110fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011100:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011102:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011104:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011106:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011108:	e841 2300 	strex	r3, r2, [r1]
 801110c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801110e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011110:	2b00      	cmp	r3, #0
 8011112:	d1e5      	bne.n	80110e0 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	e853 3f00 	ldrex	r3, [r3]
 8011120:	60bb      	str	r3, [r7, #8]
   return(result);
 8011122:	68bb      	ldr	r3, [r7, #8]
 8011124:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011128:	633b      	str	r3, [r7, #48]	@ 0x30
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	461a      	mov	r2, r3
 8011130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011132:	61bb      	str	r3, [r7, #24]
 8011134:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011136:	6979      	ldr	r1, [r7, #20]
 8011138:	69ba      	ldr	r2, [r7, #24]
 801113a:	e841 2300 	strex	r3, r2, [r1]
 801113e:	613b      	str	r3, [r7, #16]
   return(result);
 8011140:	693b      	ldr	r3, [r7, #16]
 8011142:	2b00      	cmp	r3, #0
 8011144:	d1e6      	bne.n	8011114 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8011146:	e026      	b.n	8011196 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	69db      	ldr	r3, [r3, #28]
 801114e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011152:	2b00      	cmp	r3, #0
 8011154:	d018      	beq.n	8011188 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801115a:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 801115c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801115e:	881b      	ldrh	r3, [r3, #0]
 8011160:	461a      	mov	r2, r3
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801116a:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011170:	1c9a      	adds	r2, r3, #2
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801117c:	b29b      	uxth	r3, r3
 801117e:	3b01      	subs	r3, #1
 8011180:	b29a      	uxth	r2, r3
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8011188:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801118a:	3b01      	subs	r3, #1
 801118c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801118e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011190:	2b00      	cmp	r3, #0
 8011192:	d19f      	bne.n	80110d4 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8011194:	e7ff      	b.n	8011196 <UART_TxISR_16BIT_FIFOEN+0xde>
 8011196:	bf00      	nop
 8011198:	3744      	adds	r7, #68	@ 0x44
 801119a:	46bd      	mov	sp, r7
 801119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a0:	4770      	bx	lr

080111a2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80111a2:	b580      	push	{r7, lr}
 80111a4:	b088      	sub	sp, #32
 80111a6:	af00      	add	r7, sp, #0
 80111a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	e853 3f00 	ldrex	r3, [r3]
 80111b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80111b8:	68bb      	ldr	r3, [r7, #8]
 80111ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80111be:	61fb      	str	r3, [r7, #28]
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	461a      	mov	r2, r3
 80111c6:	69fb      	ldr	r3, [r7, #28]
 80111c8:	61bb      	str	r3, [r7, #24]
 80111ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111cc:	6979      	ldr	r1, [r7, #20]
 80111ce:	69ba      	ldr	r2, [r7, #24]
 80111d0:	e841 2300 	strex	r3, r2, [r1]
 80111d4:	613b      	str	r3, [r7, #16]
   return(result);
 80111d6:	693b      	ldr	r3, [r7, #16]
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d1e6      	bne.n	80111aa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	2220      	movs	r2, #32
 80111e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	2200      	movs	r2, #0
 80111e8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80111ea:	6878      	ldr	r0, [r7, #4]
 80111ec:	f7fe f9de 	bl	800f5ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80111f0:	bf00      	nop
 80111f2:	3720      	adds	r7, #32
 80111f4:	46bd      	mov	sp, r7
 80111f6:	bd80      	pop	{r7, pc}

080111f8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b09c      	sub	sp, #112	@ 0x70
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011206:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011210:	2b22      	cmp	r3, #34	@ 0x22
 8011212:	f040 80be 	bne.w	8011392 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801121c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011220:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8011224:	b2d9      	uxtb	r1, r3
 8011226:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801122a:	b2da      	uxtb	r2, r3
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011230:	400a      	ands	r2, r1
 8011232:	b2d2      	uxtb	r2, r2
 8011234:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801123a:	1c5a      	adds	r2, r3, #1
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011246:	b29b      	uxth	r3, r3
 8011248:	3b01      	subs	r3, #1
 801124a:	b29a      	uxth	r2, r3
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011258:	b29b      	uxth	r3, r3
 801125a:	2b00      	cmp	r3, #0
 801125c:	f040 80a1 	bne.w	80113a2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011266:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011268:	e853 3f00 	ldrex	r3, [r3]
 801126c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801126e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011270:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011274:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	461a      	mov	r2, r3
 801127c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801127e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011280:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011282:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011284:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011286:	e841 2300 	strex	r3, r2, [r1]
 801128a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801128c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801128e:	2b00      	cmp	r3, #0
 8011290:	d1e6      	bne.n	8011260 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	3308      	adds	r3, #8
 8011298:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801129a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801129c:	e853 3f00 	ldrex	r3, [r3]
 80112a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80112a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112a4:	f023 0301 	bic.w	r3, r3, #1
 80112a8:	667b      	str	r3, [r7, #100]	@ 0x64
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	3308      	adds	r3, #8
 80112b0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80112b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80112b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80112b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80112ba:	e841 2300 	strex	r3, r2, [r1]
 80112be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80112c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d1e5      	bne.n	8011292 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	2220      	movs	r2, #32
 80112ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	2200      	movs	r2, #0
 80112d2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	2200      	movs	r2, #0
 80112d8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	4a33      	ldr	r2, [pc, #204]	@ (80113ac <UART_RxISR_8BIT+0x1b4>)
 80112e0:	4293      	cmp	r3, r2
 80112e2:	d01f      	beq.n	8011324 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	685b      	ldr	r3, [r3, #4]
 80112ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d018      	beq.n	8011324 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112fa:	e853 3f00 	ldrex	r3, [r3]
 80112fe:	623b      	str	r3, [r7, #32]
   return(result);
 8011300:	6a3b      	ldr	r3, [r7, #32]
 8011302:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8011306:	663b      	str	r3, [r7, #96]	@ 0x60
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	461a      	mov	r2, r3
 801130e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011310:	633b      	str	r3, [r7, #48]	@ 0x30
 8011312:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011314:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011316:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011318:	e841 2300 	strex	r3, r2, [r1]
 801131c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801131e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011320:	2b00      	cmp	r3, #0
 8011322:	d1e6      	bne.n	80112f2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011328:	2b01      	cmp	r3, #1
 801132a:	d12e      	bne.n	801138a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	2200      	movs	r2, #0
 8011330:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011338:	693b      	ldr	r3, [r7, #16]
 801133a:	e853 3f00 	ldrex	r3, [r3]
 801133e:	60fb      	str	r3, [r7, #12]
   return(result);
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	f023 0310 	bic.w	r3, r3, #16
 8011346:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	461a      	mov	r2, r3
 801134e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011350:	61fb      	str	r3, [r7, #28]
 8011352:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011354:	69b9      	ldr	r1, [r7, #24]
 8011356:	69fa      	ldr	r2, [r7, #28]
 8011358:	e841 2300 	strex	r3, r2, [r1]
 801135c:	617b      	str	r3, [r7, #20]
   return(result);
 801135e:	697b      	ldr	r3, [r7, #20]
 8011360:	2b00      	cmp	r3, #0
 8011362:	d1e6      	bne.n	8011332 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	69db      	ldr	r3, [r3, #28]
 801136a:	f003 0310 	and.w	r3, r3, #16
 801136e:	2b10      	cmp	r3, #16
 8011370:	d103      	bne.n	801137a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	2210      	movs	r2, #16
 8011378:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011380:	4619      	mov	r1, r3
 8011382:	6878      	ldr	r0, [r7, #4]
 8011384:	f7fe f93a 	bl	800f5fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011388:	e00b      	b.n	80113a2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801138a:	6878      	ldr	r0, [r7, #4]
 801138c:	f7f2 fee2 	bl	8004154 <HAL_UART_RxCpltCallback>
}
 8011390:	e007      	b.n	80113a2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	699a      	ldr	r2, [r3, #24]
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	f042 0208 	orr.w	r2, r2, #8
 80113a0:	619a      	str	r2, [r3, #24]
}
 80113a2:	bf00      	nop
 80113a4:	3770      	adds	r7, #112	@ 0x70
 80113a6:	46bd      	mov	sp, r7
 80113a8:	bd80      	pop	{r7, pc}
 80113aa:	bf00      	nop
 80113ac:	58000c00 	.word	0x58000c00

080113b0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b09c      	sub	sp, #112	@ 0x70
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80113be:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80113c8:	2b22      	cmp	r3, #34	@ 0x22
 80113ca:	f040 80be 	bne.w	801154a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113d4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80113dc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80113de:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80113e2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80113e6:	4013      	ands	r3, r2
 80113e8:	b29a      	uxth	r2, r3
 80113ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80113ec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80113f2:	1c9a      	adds	r2, r3, #2
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80113fe:	b29b      	uxth	r3, r3
 8011400:	3b01      	subs	r3, #1
 8011402:	b29a      	uxth	r2, r3
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011410:	b29b      	uxth	r3, r3
 8011412:	2b00      	cmp	r3, #0
 8011414:	f040 80a1 	bne.w	801155a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801141e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011420:	e853 3f00 	ldrex	r3, [r3]
 8011424:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8011426:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011428:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801142c:	667b      	str	r3, [r7, #100]	@ 0x64
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	461a      	mov	r2, r3
 8011434:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011436:	657b      	str	r3, [r7, #84]	@ 0x54
 8011438:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801143a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801143c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801143e:	e841 2300 	strex	r3, r2, [r1]
 8011442:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8011444:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011446:	2b00      	cmp	r3, #0
 8011448:	d1e6      	bne.n	8011418 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	3308      	adds	r3, #8
 8011450:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011454:	e853 3f00 	ldrex	r3, [r3]
 8011458:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801145a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801145c:	f023 0301 	bic.w	r3, r3, #1
 8011460:	663b      	str	r3, [r7, #96]	@ 0x60
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	3308      	adds	r3, #8
 8011468:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801146a:	643a      	str	r2, [r7, #64]	@ 0x40
 801146c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801146e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011470:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011472:	e841 2300 	strex	r3, r2, [r1]
 8011476:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801147a:	2b00      	cmp	r3, #0
 801147c:	d1e5      	bne.n	801144a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	2220      	movs	r2, #32
 8011482:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	2200      	movs	r2, #0
 801148a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	2200      	movs	r2, #0
 8011490:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	4a33      	ldr	r2, [pc, #204]	@ (8011564 <UART_RxISR_16BIT+0x1b4>)
 8011498:	4293      	cmp	r3, r2
 801149a:	d01f      	beq.n	80114dc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	685b      	ldr	r3, [r3, #4]
 80114a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d018      	beq.n	80114dc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114b0:	6a3b      	ldr	r3, [r7, #32]
 80114b2:	e853 3f00 	ldrex	r3, [r3]
 80114b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80114b8:	69fb      	ldr	r3, [r7, #28]
 80114ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80114be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	461a      	mov	r2, r3
 80114c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80114c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80114ca:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80114ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80114d0:	e841 2300 	strex	r3, r2, [r1]
 80114d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80114d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d1e6      	bne.n	80114aa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80114e0:	2b01      	cmp	r3, #1
 80114e2:	d12e      	bne.n	8011542 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	2200      	movs	r2, #0
 80114e8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	e853 3f00 	ldrex	r3, [r3]
 80114f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80114f8:	68bb      	ldr	r3, [r7, #8]
 80114fa:	f023 0310 	bic.w	r3, r3, #16
 80114fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	461a      	mov	r2, r3
 8011506:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011508:	61bb      	str	r3, [r7, #24]
 801150a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801150c:	6979      	ldr	r1, [r7, #20]
 801150e:	69ba      	ldr	r2, [r7, #24]
 8011510:	e841 2300 	strex	r3, r2, [r1]
 8011514:	613b      	str	r3, [r7, #16]
   return(result);
 8011516:	693b      	ldr	r3, [r7, #16]
 8011518:	2b00      	cmp	r3, #0
 801151a:	d1e6      	bne.n	80114ea <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	69db      	ldr	r3, [r3, #28]
 8011522:	f003 0310 	and.w	r3, r3, #16
 8011526:	2b10      	cmp	r3, #16
 8011528:	d103      	bne.n	8011532 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	2210      	movs	r2, #16
 8011530:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011538:	4619      	mov	r1, r3
 801153a:	6878      	ldr	r0, [r7, #4]
 801153c:	f7fe f85e 	bl	800f5fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011540:	e00b      	b.n	801155a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011542:	6878      	ldr	r0, [r7, #4]
 8011544:	f7f2 fe06 	bl	8004154 <HAL_UART_RxCpltCallback>
}
 8011548:	e007      	b.n	801155a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	699a      	ldr	r2, [r3, #24]
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	f042 0208 	orr.w	r2, r2, #8
 8011558:	619a      	str	r2, [r3, #24]
}
 801155a:	bf00      	nop
 801155c:	3770      	adds	r7, #112	@ 0x70
 801155e:	46bd      	mov	sp, r7
 8011560:	bd80      	pop	{r7, pc}
 8011562:	bf00      	nop
 8011564:	58000c00 	.word	0x58000c00

08011568 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011568:	b580      	push	{r7, lr}
 801156a:	b0ac      	sub	sp, #176	@ 0xb0
 801156c:	af00      	add	r7, sp, #0
 801156e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011576:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	69db      	ldr	r3, [r3, #28]
 8011580:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	689b      	ldr	r3, [r3, #8]
 8011594:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801159e:	2b22      	cmp	r3, #34	@ 0x22
 80115a0:	f040 8180 	bne.w	80118a4 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80115aa:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80115ae:	e123      	b.n	80117f8 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115b6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80115ba:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80115be:	b2d9      	uxtb	r1, r3
 80115c0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80115c4:	b2da      	uxtb	r2, r3
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80115ca:	400a      	ands	r2, r1
 80115cc:	b2d2      	uxtb	r2, r2
 80115ce:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80115d4:	1c5a      	adds	r2, r3, #1
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80115e0:	b29b      	uxth	r3, r3
 80115e2:	3b01      	subs	r3, #1
 80115e4:	b29a      	uxth	r2, r3
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	69db      	ldr	r3, [r3, #28]
 80115f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80115f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80115fa:	f003 0307 	and.w	r3, r3, #7
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d053      	beq.n	80116aa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011602:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011606:	f003 0301 	and.w	r3, r3, #1
 801160a:	2b00      	cmp	r3, #0
 801160c:	d011      	beq.n	8011632 <UART_RxISR_8BIT_FIFOEN+0xca>
 801160e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011616:	2b00      	cmp	r3, #0
 8011618:	d00b      	beq.n	8011632 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	2201      	movs	r2, #1
 8011620:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011628:	f043 0201 	orr.w	r2, r3, #1
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011632:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011636:	f003 0302 	and.w	r3, r3, #2
 801163a:	2b00      	cmp	r3, #0
 801163c:	d011      	beq.n	8011662 <UART_RxISR_8BIT_FIFOEN+0xfa>
 801163e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011642:	f003 0301 	and.w	r3, r3, #1
 8011646:	2b00      	cmp	r3, #0
 8011648:	d00b      	beq.n	8011662 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	2202      	movs	r2, #2
 8011650:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011658:	f043 0204 	orr.w	r2, r3, #4
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011662:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011666:	f003 0304 	and.w	r3, r3, #4
 801166a:	2b00      	cmp	r3, #0
 801166c:	d011      	beq.n	8011692 <UART_RxISR_8BIT_FIFOEN+0x12a>
 801166e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011672:	f003 0301 	and.w	r3, r3, #1
 8011676:	2b00      	cmp	r3, #0
 8011678:	d00b      	beq.n	8011692 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	2204      	movs	r2, #4
 8011680:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011688:	f043 0202 	orr.w	r2, r3, #2
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011698:	2b00      	cmp	r3, #0
 801169a:	d006      	beq.n	80116aa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801169c:	6878      	ldr	r0, [r7, #4]
 801169e:	f7fd ff99 	bl	800f5d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	2200      	movs	r2, #0
 80116a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80116b0:	b29b      	uxth	r3, r3
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	f040 80a0 	bne.w	80117f8 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80116c0:	e853 3f00 	ldrex	r3, [r3]
 80116c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80116c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80116c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80116cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	461a      	mov	r2, r3
 80116d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80116da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80116dc:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116de:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80116e0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80116e2:	e841 2300 	strex	r3, r2, [r1]
 80116e6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80116e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d1e4      	bne.n	80116b8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	3308      	adds	r3, #8
 80116f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80116f8:	e853 3f00 	ldrex	r3, [r3]
 80116fc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80116fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011700:	4b6e      	ldr	r3, [pc, #440]	@ (80118bc <UART_RxISR_8BIT_FIFOEN+0x354>)
 8011702:	4013      	ands	r3, r2
 8011704:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	3308      	adds	r3, #8
 801170e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8011712:	66ba      	str	r2, [r7, #104]	@ 0x68
 8011714:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011716:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8011718:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801171a:	e841 2300 	strex	r3, r2, [r1]
 801171e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8011720:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011722:	2b00      	cmp	r3, #0
 8011724:	d1e3      	bne.n	80116ee <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	2220      	movs	r2, #32
 801172a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	2200      	movs	r2, #0
 8011732:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	2200      	movs	r2, #0
 8011738:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	4a60      	ldr	r2, [pc, #384]	@ (80118c0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8011740:	4293      	cmp	r3, r2
 8011742:	d021      	beq.n	8011788 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	685b      	ldr	r3, [r3, #4]
 801174a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801174e:	2b00      	cmp	r3, #0
 8011750:	d01a      	beq.n	8011788 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011758:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801175a:	e853 3f00 	ldrex	r3, [r3]
 801175e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8011760:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011762:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8011766:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	461a      	mov	r2, r3
 8011770:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011774:	657b      	str	r3, [r7, #84]	@ 0x54
 8011776:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011778:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801177a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801177c:	e841 2300 	strex	r3, r2, [r1]
 8011780:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8011782:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011784:	2b00      	cmp	r3, #0
 8011786:	d1e4      	bne.n	8011752 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801178c:	2b01      	cmp	r3, #1
 801178e:	d130      	bne.n	80117f2 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	2200      	movs	r2, #0
 8011794:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801179c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801179e:	e853 3f00 	ldrex	r3, [r3]
 80117a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80117a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117a6:	f023 0310 	bic.w	r3, r3, #16
 80117aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	461a      	mov	r2, r3
 80117b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80117b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80117ba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80117be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80117c0:	e841 2300 	strex	r3, r2, [r1]
 80117c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80117c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d1e4      	bne.n	8011796 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	69db      	ldr	r3, [r3, #28]
 80117d2:	f003 0310 	and.w	r3, r3, #16
 80117d6:	2b10      	cmp	r3, #16
 80117d8:	d103      	bne.n	80117e2 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	2210      	movs	r2, #16
 80117e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80117e8:	4619      	mov	r1, r3
 80117ea:	6878      	ldr	r0, [r7, #4]
 80117ec:	f7fd ff06 	bl	800f5fc <HAL_UARTEx_RxEventCallback>
 80117f0:	e002      	b.n	80117f8 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80117f2:	6878      	ldr	r0, [r7, #4]
 80117f4:	f7f2 fcae 	bl	8004154 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80117f8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d006      	beq.n	801180e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8011800:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011804:	f003 0320 	and.w	r3, r3, #32
 8011808:	2b00      	cmp	r3, #0
 801180a:	f47f aed1 	bne.w	80115b0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011814:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8011818:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 801181c:	2b00      	cmp	r3, #0
 801181e:	d049      	beq.n	80118b4 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011826:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 801182a:	429a      	cmp	r2, r3
 801182c:	d242      	bcs.n	80118b4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	3308      	adds	r3, #8
 8011834:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011836:	6a3b      	ldr	r3, [r7, #32]
 8011838:	e853 3f00 	ldrex	r3, [r3]
 801183c:	61fb      	str	r3, [r7, #28]
   return(result);
 801183e:	69fb      	ldr	r3, [r7, #28]
 8011840:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011844:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	3308      	adds	r3, #8
 801184e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8011852:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011854:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011856:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011858:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801185a:	e841 2300 	strex	r3, r2, [r1]
 801185e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011862:	2b00      	cmp	r3, #0
 8011864:	d1e3      	bne.n	801182e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	4a16      	ldr	r2, [pc, #88]	@ (80118c4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801186a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	e853 3f00 	ldrex	r3, [r3]
 8011878:	60bb      	str	r3, [r7, #8]
   return(result);
 801187a:	68bb      	ldr	r3, [r7, #8]
 801187c:	f043 0320 	orr.w	r3, r3, #32
 8011880:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	461a      	mov	r2, r3
 801188a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801188e:	61bb      	str	r3, [r7, #24]
 8011890:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011892:	6979      	ldr	r1, [r7, #20]
 8011894:	69ba      	ldr	r2, [r7, #24]
 8011896:	e841 2300 	strex	r3, r2, [r1]
 801189a:	613b      	str	r3, [r7, #16]
   return(result);
 801189c:	693b      	ldr	r3, [r7, #16]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d1e4      	bne.n	801186c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80118a2:	e007      	b.n	80118b4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	699a      	ldr	r2, [r3, #24]
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	f042 0208 	orr.w	r2, r2, #8
 80118b2:	619a      	str	r2, [r3, #24]
}
 80118b4:	bf00      	nop
 80118b6:	37b0      	adds	r7, #176	@ 0xb0
 80118b8:	46bd      	mov	sp, r7
 80118ba:	bd80      	pop	{r7, pc}
 80118bc:	effffffe 	.word	0xeffffffe
 80118c0:	58000c00 	.word	0x58000c00
 80118c4:	080111f9 	.word	0x080111f9

080118c8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80118c8:	b580      	push	{r7, lr}
 80118ca:	b0ae      	sub	sp, #184	@ 0xb8
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80118d6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	69db      	ldr	r3, [r3, #28]
 80118e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	689b      	ldr	r3, [r3, #8]
 80118f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80118fe:	2b22      	cmp	r3, #34	@ 0x22
 8011900:	f040 8184 	bne.w	8011c0c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801190a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801190e:	e127      	b.n	8011b60 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011916:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801191e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8011922:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8011926:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801192a:	4013      	ands	r3, r2
 801192c:	b29a      	uxth	r2, r3
 801192e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011932:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011938:	1c9a      	adds	r2, r3, #2
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011944:	b29b      	uxth	r3, r3
 8011946:	3b01      	subs	r3, #1
 8011948:	b29a      	uxth	r2, r3
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	69db      	ldr	r3, [r3, #28]
 8011956:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801195a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801195e:	f003 0307 	and.w	r3, r3, #7
 8011962:	2b00      	cmp	r3, #0
 8011964:	d053      	beq.n	8011a0e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011966:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801196a:	f003 0301 	and.w	r3, r3, #1
 801196e:	2b00      	cmp	r3, #0
 8011970:	d011      	beq.n	8011996 <UART_RxISR_16BIT_FIFOEN+0xce>
 8011972:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801197a:	2b00      	cmp	r3, #0
 801197c:	d00b      	beq.n	8011996 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	2201      	movs	r2, #1
 8011984:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801198c:	f043 0201 	orr.w	r2, r3, #1
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011996:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801199a:	f003 0302 	and.w	r3, r3, #2
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d011      	beq.n	80119c6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80119a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80119a6:	f003 0301 	and.w	r3, r3, #1
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d00b      	beq.n	80119c6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	2202      	movs	r2, #2
 80119b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80119bc:	f043 0204 	orr.w	r2, r3, #4
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80119c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80119ca:	f003 0304 	and.w	r3, r3, #4
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d011      	beq.n	80119f6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80119d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80119d6:	f003 0301 	and.w	r3, r3, #1
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d00b      	beq.n	80119f6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	2204      	movs	r2, #4
 80119e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80119ec:	f043 0202 	orr.w	r2, r3, #2
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d006      	beq.n	8011a0e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011a00:	6878      	ldr	r0, [r7, #4]
 8011a02:	f7fd fde7 	bl	800f5d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	2200      	movs	r2, #0
 8011a0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011a14:	b29b      	uxth	r3, r3
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	f040 80a2 	bne.w	8011b60 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011a24:	e853 3f00 	ldrex	r3, [r3]
 8011a28:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8011a2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011a2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011a30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	461a      	mov	r2, r3
 8011a3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011a3e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011a42:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a44:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8011a46:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8011a4a:	e841 2300 	strex	r3, r2, [r1]
 8011a4e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8011a50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d1e2      	bne.n	8011a1c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	3308      	adds	r3, #8
 8011a5c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011a60:	e853 3f00 	ldrex	r3, [r3]
 8011a64:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8011a66:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011a68:	4b6e      	ldr	r3, [pc, #440]	@ (8011c24 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8011a6a:	4013      	ands	r3, r2
 8011a6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	3308      	adds	r3, #8
 8011a76:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8011a7a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8011a7c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a7e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8011a80:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011a82:	e841 2300 	strex	r3, r2, [r1]
 8011a86:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8011a88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d1e3      	bne.n	8011a56 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	2220      	movs	r2, #32
 8011a92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	2200      	movs	r2, #0
 8011a9a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	2200      	movs	r2, #0
 8011aa0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	4a60      	ldr	r2, [pc, #384]	@ (8011c28 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8011aa8:	4293      	cmp	r3, r2
 8011aaa:	d021      	beq.n	8011af0 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	685b      	ldr	r3, [r3, #4]
 8011ab2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d01a      	beq.n	8011af0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ac0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ac2:	e853 3f00 	ldrex	r3, [r3]
 8011ac6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8011ac8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011aca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8011ace:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	461a      	mov	r2, r3
 8011ad8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011adc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011ade:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ae0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011ae2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011ae4:	e841 2300 	strex	r3, r2, [r1]
 8011ae8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8011aea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d1e4      	bne.n	8011aba <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011af4:	2b01      	cmp	r3, #1
 8011af6:	d130      	bne.n	8011b5a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	2200      	movs	r2, #0
 8011afc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b06:	e853 3f00 	ldrex	r3, [r3]
 8011b0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b0e:	f023 0310 	bic.w	r3, r3, #16
 8011b12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	461a      	mov	r2, r3
 8011b1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011b20:	647b      	str	r3, [r7, #68]	@ 0x44
 8011b22:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011b26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011b28:	e841 2300 	strex	r3, r2, [r1]
 8011b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011b2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d1e4      	bne.n	8011afe <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	69db      	ldr	r3, [r3, #28]
 8011b3a:	f003 0310 	and.w	r3, r3, #16
 8011b3e:	2b10      	cmp	r3, #16
 8011b40:	d103      	bne.n	8011b4a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	2210      	movs	r2, #16
 8011b48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011b50:	4619      	mov	r1, r3
 8011b52:	6878      	ldr	r0, [r7, #4]
 8011b54:	f7fd fd52 	bl	800f5fc <HAL_UARTEx_RxEventCallback>
 8011b58:	e002      	b.n	8011b60 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8011b5a:	6878      	ldr	r0, [r7, #4]
 8011b5c:	f7f2 fafa 	bl	8004154 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011b60:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d006      	beq.n	8011b76 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8011b68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011b6c:	f003 0320 	and.w	r3, r3, #32
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	f47f aecd 	bne.w	8011910 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011b7c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8011b80:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d049      	beq.n	8011c1c <UART_RxISR_16BIT_FIFOEN+0x354>
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011b8e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8011b92:	429a      	cmp	r2, r3
 8011b94:	d242      	bcs.n	8011c1c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	3308      	adds	r3, #8
 8011b9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ba0:	e853 3f00 	ldrex	r3, [r3]
 8011ba4:	623b      	str	r3, [r7, #32]
   return(result);
 8011ba6:	6a3b      	ldr	r3, [r7, #32]
 8011ba8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011bac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	3308      	adds	r3, #8
 8011bb6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8011bba:	633a      	str	r2, [r7, #48]	@ 0x30
 8011bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011bc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011bc2:	e841 2300 	strex	r3, r2, [r1]
 8011bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d1e3      	bne.n	8011b96 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	4a16      	ldr	r2, [pc, #88]	@ (8011c2c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8011bd2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bda:	693b      	ldr	r3, [r7, #16]
 8011bdc:	e853 3f00 	ldrex	r3, [r3]
 8011be0:	60fb      	str	r3, [r7, #12]
   return(result);
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	f043 0320 	orr.w	r3, r3, #32
 8011be8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	461a      	mov	r2, r3
 8011bf2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011bf6:	61fb      	str	r3, [r7, #28]
 8011bf8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bfa:	69b9      	ldr	r1, [r7, #24]
 8011bfc:	69fa      	ldr	r2, [r7, #28]
 8011bfe:	e841 2300 	strex	r3, r2, [r1]
 8011c02:	617b      	str	r3, [r7, #20]
   return(result);
 8011c04:	697b      	ldr	r3, [r7, #20]
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d1e4      	bne.n	8011bd4 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011c0a:	e007      	b.n	8011c1c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	699a      	ldr	r2, [r3, #24]
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	f042 0208 	orr.w	r2, r2, #8
 8011c1a:	619a      	str	r2, [r3, #24]
}
 8011c1c:	bf00      	nop
 8011c1e:	37b8      	adds	r7, #184	@ 0xb8
 8011c20:	46bd      	mov	sp, r7
 8011c22:	bd80      	pop	{r7, pc}
 8011c24:	effffffe 	.word	0xeffffffe
 8011c28:	58000c00 	.word	0x58000c00
 8011c2c:	080113b1 	.word	0x080113b1

08011c30 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8011c30:	b480      	push	{r7}
 8011c32:	b083      	sub	sp, #12
 8011c34:	af00      	add	r7, sp, #0
 8011c36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8011c38:	bf00      	nop
 8011c3a:	370c      	adds	r7, #12
 8011c3c:	46bd      	mov	sp, r7
 8011c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c42:	4770      	bx	lr

08011c44 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011c44:	b480      	push	{r7}
 8011c46:	b083      	sub	sp, #12
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8011c4c:	bf00      	nop
 8011c4e:	370c      	adds	r7, #12
 8011c50:	46bd      	mov	sp, r7
 8011c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c56:	4770      	bx	lr

08011c58 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8011c58:	b480      	push	{r7}
 8011c5a:	b083      	sub	sp, #12
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8011c60:	bf00      	nop
 8011c62:	370c      	adds	r7, #12
 8011c64:	46bd      	mov	sp, r7
 8011c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c6a:	4770      	bx	lr

08011c6c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011c6c:	b480      	push	{r7}
 8011c6e:	b085      	sub	sp, #20
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011c7a:	2b01      	cmp	r3, #1
 8011c7c:	d101      	bne.n	8011c82 <HAL_UARTEx_DisableFifoMode+0x16>
 8011c7e:	2302      	movs	r3, #2
 8011c80:	e027      	b.n	8011cd2 <HAL_UARTEx_DisableFifoMode+0x66>
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	2201      	movs	r2, #1
 8011c86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	2224      	movs	r2, #36	@ 0x24
 8011c8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	681a      	ldr	r2, [r3, #0]
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	f022 0201 	bic.w	r2, r2, #1
 8011ca8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8011cb0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	2200      	movs	r2, #0
 8011cb6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	68fa      	ldr	r2, [r7, #12]
 8011cbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	2220      	movs	r2, #32
 8011cc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	2200      	movs	r2, #0
 8011ccc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011cd0:	2300      	movs	r3, #0
}
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	3714      	adds	r7, #20
 8011cd6:	46bd      	mov	sp, r7
 8011cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cdc:	4770      	bx	lr

08011cde <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011cde:	b580      	push	{r7, lr}
 8011ce0:	b084      	sub	sp, #16
 8011ce2:	af00      	add	r7, sp, #0
 8011ce4:	6078      	str	r0, [r7, #4]
 8011ce6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011cee:	2b01      	cmp	r3, #1
 8011cf0:	d101      	bne.n	8011cf6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011cf2:	2302      	movs	r3, #2
 8011cf4:	e02d      	b.n	8011d52 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	2201      	movs	r2, #1
 8011cfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	2224      	movs	r2, #36	@ 0x24
 8011d02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	681a      	ldr	r2, [r3, #0]
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	f022 0201 	bic.w	r2, r2, #1
 8011d1c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	689b      	ldr	r3, [r3, #8]
 8011d24:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	683a      	ldr	r2, [r7, #0]
 8011d2e:	430a      	orrs	r2, r1
 8011d30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011d32:	6878      	ldr	r0, [r7, #4]
 8011d34:	f000 f850 	bl	8011dd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	68fa      	ldr	r2, [r7, #12]
 8011d3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	2220      	movs	r2, #32
 8011d44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	2200      	movs	r2, #0
 8011d4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011d50:	2300      	movs	r3, #0
}
 8011d52:	4618      	mov	r0, r3
 8011d54:	3710      	adds	r7, #16
 8011d56:	46bd      	mov	sp, r7
 8011d58:	bd80      	pop	{r7, pc}

08011d5a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011d5a:	b580      	push	{r7, lr}
 8011d5c:	b084      	sub	sp, #16
 8011d5e:	af00      	add	r7, sp, #0
 8011d60:	6078      	str	r0, [r7, #4]
 8011d62:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011d6a:	2b01      	cmp	r3, #1
 8011d6c:	d101      	bne.n	8011d72 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011d6e:	2302      	movs	r3, #2
 8011d70:	e02d      	b.n	8011dce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	2201      	movs	r2, #1
 8011d76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	2224      	movs	r2, #36	@ 0x24
 8011d7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	681a      	ldr	r2, [r3, #0]
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	f022 0201 	bic.w	r2, r2, #1
 8011d98:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	689b      	ldr	r3, [r3, #8]
 8011da0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	683a      	ldr	r2, [r7, #0]
 8011daa:	430a      	orrs	r2, r1
 8011dac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011dae:	6878      	ldr	r0, [r7, #4]
 8011db0:	f000 f812 	bl	8011dd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	68fa      	ldr	r2, [r7, #12]
 8011dba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	2220      	movs	r2, #32
 8011dc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	2200      	movs	r2, #0
 8011dc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011dcc:	2300      	movs	r3, #0
}
 8011dce:	4618      	mov	r0, r3
 8011dd0:	3710      	adds	r7, #16
 8011dd2:	46bd      	mov	sp, r7
 8011dd4:	bd80      	pop	{r7, pc}
	...

08011dd8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011dd8:	b480      	push	{r7}
 8011dda:	b085      	sub	sp, #20
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d108      	bne.n	8011dfa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	2201      	movs	r2, #1
 8011dec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	2201      	movs	r2, #1
 8011df4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011df8:	e031      	b.n	8011e5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011dfa:	2310      	movs	r3, #16
 8011dfc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011dfe:	2310      	movs	r3, #16
 8011e00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	689b      	ldr	r3, [r3, #8]
 8011e08:	0e5b      	lsrs	r3, r3, #25
 8011e0a:	b2db      	uxtb	r3, r3
 8011e0c:	f003 0307 	and.w	r3, r3, #7
 8011e10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	689b      	ldr	r3, [r3, #8]
 8011e18:	0f5b      	lsrs	r3, r3, #29
 8011e1a:	b2db      	uxtb	r3, r3
 8011e1c:	f003 0307 	and.w	r3, r3, #7
 8011e20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011e22:	7bbb      	ldrb	r3, [r7, #14]
 8011e24:	7b3a      	ldrb	r2, [r7, #12]
 8011e26:	4911      	ldr	r1, [pc, #68]	@ (8011e6c <UARTEx_SetNbDataToProcess+0x94>)
 8011e28:	5c8a      	ldrb	r2, [r1, r2]
 8011e2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011e2e:	7b3a      	ldrb	r2, [r7, #12]
 8011e30:	490f      	ldr	r1, [pc, #60]	@ (8011e70 <UARTEx_SetNbDataToProcess+0x98>)
 8011e32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011e34:	fb93 f3f2 	sdiv	r3, r3, r2
 8011e38:	b29a      	uxth	r2, r3
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011e40:	7bfb      	ldrb	r3, [r7, #15]
 8011e42:	7b7a      	ldrb	r2, [r7, #13]
 8011e44:	4909      	ldr	r1, [pc, #36]	@ (8011e6c <UARTEx_SetNbDataToProcess+0x94>)
 8011e46:	5c8a      	ldrb	r2, [r1, r2]
 8011e48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011e4c:	7b7a      	ldrb	r2, [r7, #13]
 8011e4e:	4908      	ldr	r1, [pc, #32]	@ (8011e70 <UARTEx_SetNbDataToProcess+0x98>)
 8011e50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011e52:	fb93 f3f2 	sdiv	r3, r3, r2
 8011e56:	b29a      	uxth	r2, r3
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8011e5e:	bf00      	nop
 8011e60:	3714      	adds	r7, #20
 8011e62:	46bd      	mov	sp, r7
 8011e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e68:	4770      	bx	lr
 8011e6a:	bf00      	nop
 8011e6c:	08019b70 	.word	0x08019b70
 8011e70:	08019b78 	.word	0x08019b78

08011e74 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011e74:	b580      	push	{r7, lr}
 8011e76:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8011e78:	4904      	ldr	r1, [pc, #16]	@ (8011e8c <MX_FATFS_Init+0x18>)
 8011e7a:	4805      	ldr	r0, [pc, #20]	@ (8011e90 <MX_FATFS_Init+0x1c>)
 8011e7c:	f004 fd9e 	bl	80169bc <FATFS_LinkDriver>
 8011e80:	4603      	mov	r3, r0
 8011e82:	461a      	mov	r2, r3
 8011e84:	4b03      	ldr	r3, [pc, #12]	@ (8011e94 <MX_FATFS_Init+0x20>)
 8011e86:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8011e88:	bf00      	nop
 8011e8a:	bd80      	pop	{r7, pc}
 8011e8c:	240055a0 	.word	0x240055a0
 8011e90:	240000d0 	.word	0x240000d0
 8011e94:	2400559c 	.word	0x2400559c

08011e98 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8011e98:	b480      	push	{r7}
 8011e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8011e9c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	46bd      	mov	sp, r7
 8011ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea6:	4770      	bx	lr

08011ea8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8011ea8:	b580      	push	{r7, lr}
 8011eaa:	b082      	sub	sp, #8
 8011eac:	af00      	add	r7, sp, #0
 8011eae:	4603      	mov	r3, r0
 8011eb0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8011eb2:	79fb      	ldrb	r3, [r7, #7]
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	f000 f9fd 	bl	80122b4 <SD_disk_initialize>
 8011eba:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	3708      	adds	r7, #8
 8011ec0:	46bd      	mov	sp, r7
 8011ec2:	bd80      	pop	{r7, pc}

08011ec4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8011ec4:	b580      	push	{r7, lr}
 8011ec6:	b082      	sub	sp, #8
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	4603      	mov	r3, r0
 8011ecc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8011ece:	79fb      	ldrb	r3, [r7, #7]
 8011ed0:	4618      	mov	r0, r3
 8011ed2:	f000 fad5 	bl	8012480 <SD_disk_status>
 8011ed6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8011ed8:	4618      	mov	r0, r3
 8011eda:	3708      	adds	r7, #8
 8011edc:	46bd      	mov	sp, r7
 8011ede:	bd80      	pop	{r7, pc}

08011ee0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	b084      	sub	sp, #16
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	60b9      	str	r1, [r7, #8]
 8011ee8:	607a      	str	r2, [r7, #4]
 8011eea:	603b      	str	r3, [r7, #0]
 8011eec:	4603      	mov	r3, r0
 8011eee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8011ef0:	7bf8      	ldrb	r0, [r7, #15]
 8011ef2:	683b      	ldr	r3, [r7, #0]
 8011ef4:	687a      	ldr	r2, [r7, #4]
 8011ef6:	68b9      	ldr	r1, [r7, #8]
 8011ef8:	f000 fad8 	bl	80124ac <SD_disk_read>
 8011efc:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8011efe:	4618      	mov	r0, r3
 8011f00:	3710      	adds	r7, #16
 8011f02:	46bd      	mov	sp, r7
 8011f04:	bd80      	pop	{r7, pc}

08011f06 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8011f06:	b580      	push	{r7, lr}
 8011f08:	b084      	sub	sp, #16
 8011f0a:	af00      	add	r7, sp, #0
 8011f0c:	60b9      	str	r1, [r7, #8]
 8011f0e:	607a      	str	r2, [r7, #4]
 8011f10:	603b      	str	r3, [r7, #0]
 8011f12:	4603      	mov	r3, r0
 8011f14:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8011f16:	7bf8      	ldrb	r0, [r7, #15]
 8011f18:	683b      	ldr	r3, [r7, #0]
 8011f1a:	687a      	ldr	r2, [r7, #4]
 8011f1c:	68b9      	ldr	r1, [r7, #8]
 8011f1e:	f000 fb2f 	bl	8012580 <SD_disk_write>
 8011f22:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8011f24:	4618      	mov	r0, r3
 8011f26:	3710      	adds	r7, #16
 8011f28:	46bd      	mov	sp, r7
 8011f2a:	bd80      	pop	{r7, pc}

08011f2c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8011f2c:	b580      	push	{r7, lr}
 8011f2e:	b082      	sub	sp, #8
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	4603      	mov	r3, r0
 8011f34:	603a      	str	r2, [r7, #0]
 8011f36:	71fb      	strb	r3, [r7, #7]
 8011f38:	460b      	mov	r3, r1
 8011f3a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8011f3c:	79b9      	ldrb	r1, [r7, #6]
 8011f3e:	79fb      	ldrb	r3, [r7, #7]
 8011f40:	683a      	ldr	r2, [r7, #0]
 8011f42:	4618      	mov	r0, r3
 8011f44:	f000 fba0 	bl	8012688 <SD_disk_ioctl>
 8011f48:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	3708      	adds	r7, #8
 8011f4e:	46bd      	mov	sp, r7
 8011f50:	bd80      	pop	{r7, pc}
	...

08011f54 <SELECT>:

//-----[ SPI Functions ]-----

/* slave select */
static void SELECT(void)
{
 8011f54:	b580      	push	{r7, lr}
 8011f56:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8011f58:	2200      	movs	r2, #0
 8011f5a:	2110      	movs	r1, #16
 8011f5c:	4802      	ldr	r0, [pc, #8]	@ (8011f68 <SELECT+0x14>)
 8011f5e:	f7f7 f9fb 	bl	8009358 <HAL_GPIO_WritePin>
}
 8011f62:	bf00      	nop
 8011f64:	bd80      	pop	{r7, pc}
 8011f66:	bf00      	nop
 8011f68:	58020000 	.word	0x58020000

08011f6c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8011f6c:	b580      	push	{r7, lr}
 8011f6e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8011f70:	2201      	movs	r2, #1
 8011f72:	2110      	movs	r1, #16
 8011f74:	4802      	ldr	r0, [pc, #8]	@ (8011f80 <DESELECT+0x14>)
 8011f76:	f7f7 f9ef 	bl	8009358 <HAL_GPIO_WritePin>
}
 8011f7a:	bf00      	nop
 8011f7c:	bd80      	pop	{r7, pc}
 8011f7e:	bf00      	nop
 8011f80:	58020000 	.word	0x58020000

08011f84 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8011f84:	b580      	push	{r7, lr}
 8011f86:	b082      	sub	sp, #8
 8011f88:	af00      	add	r7, sp, #0
 8011f8a:	4603      	mov	r3, r0
 8011f8c:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8011f8e:	bf00      	nop
 8011f90:	4b08      	ldr	r3, [pc, #32]	@ (8011fb4 <SPI_TxByte+0x30>)
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	695b      	ldr	r3, [r3, #20]
 8011f96:	f003 0302 	and.w	r3, r3, #2
 8011f9a:	2b02      	cmp	r3, #2
 8011f9c:	d1f8      	bne.n	8011f90 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8011f9e:	1df9      	adds	r1, r7, #7
 8011fa0:	2364      	movs	r3, #100	@ 0x64
 8011fa2:	2201      	movs	r2, #1
 8011fa4:	4803      	ldr	r0, [pc, #12]	@ (8011fb4 <SPI_TxByte+0x30>)
 8011fa6:	f7fa fa21 	bl	800c3ec <HAL_SPI_Transmit>
}
 8011faa:	bf00      	nop
 8011fac:	3708      	adds	r7, #8
 8011fae:	46bd      	mov	sp, r7
 8011fb0:	bd80      	pop	{r7, pc}
 8011fb2:	bf00      	nop
 8011fb4:	24004f04 	.word	0x24004f04

08011fb8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8011fb8:	b580      	push	{r7, lr}
 8011fba:	b082      	sub	sp, #8
 8011fbc:	af00      	add	r7, sp, #0
 8011fbe:	6078      	str	r0, [r7, #4]
 8011fc0:	460b      	mov	r3, r1
 8011fc2:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8011fc4:	bf00      	nop
 8011fc6:	4b08      	ldr	r3, [pc, #32]	@ (8011fe8 <SPI_TxBuffer+0x30>)
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	695b      	ldr	r3, [r3, #20]
 8011fcc:	f003 0302 	and.w	r3, r3, #2
 8011fd0:	2b02      	cmp	r3, #2
 8011fd2:	d1f8      	bne.n	8011fc6 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8011fd4:	887a      	ldrh	r2, [r7, #2]
 8011fd6:	2364      	movs	r3, #100	@ 0x64
 8011fd8:	6879      	ldr	r1, [r7, #4]
 8011fda:	4803      	ldr	r0, [pc, #12]	@ (8011fe8 <SPI_TxBuffer+0x30>)
 8011fdc:	f7fa fa06 	bl	800c3ec <HAL_SPI_Transmit>
}
 8011fe0:	bf00      	nop
 8011fe2:	3708      	adds	r7, #8
 8011fe4:	46bd      	mov	sp, r7
 8011fe6:	bd80      	pop	{r7, pc}
 8011fe8:	24004f04 	.word	0x24004f04

08011fec <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8011fec:	b580      	push	{r7, lr}
 8011fee:	b084      	sub	sp, #16
 8011ff0:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8011ff2:	23ff      	movs	r3, #255	@ 0xff
 8011ff4:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8011ff6:	bf00      	nop
 8011ff8:	4b09      	ldr	r3, [pc, #36]	@ (8012020 <SPI_RxByte+0x34>)
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	695b      	ldr	r3, [r3, #20]
 8011ffe:	f003 0302 	and.w	r3, r3, #2
 8012002:	2b02      	cmp	r3, #2
 8012004:	d1f8      	bne.n	8011ff8 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8012006:	1dba      	adds	r2, r7, #6
 8012008:	1df9      	adds	r1, r7, #7
 801200a:	2364      	movs	r3, #100	@ 0x64
 801200c:	9300      	str	r3, [sp, #0]
 801200e:	2301      	movs	r3, #1
 8012010:	4803      	ldr	r0, [pc, #12]	@ (8012020 <SPI_RxByte+0x34>)
 8012012:	f7fa fe4b 	bl	800ccac <HAL_SPI_TransmitReceive>
  return data;
 8012016:	79bb      	ldrb	r3, [r7, #6]
}
 8012018:	4618      	mov	r0, r3
 801201a:	3708      	adds	r7, #8
 801201c:	46bd      	mov	sp, r7
 801201e:	bd80      	pop	{r7, pc}
 8012020:	24004f04 	.word	0x24004f04

08012024 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8012024:	b580      	push	{r7, lr}
 8012026:	b082      	sub	sp, #8
 8012028:	af00      	add	r7, sp, #0
 801202a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 801202c:	f7ff ffde 	bl	8011fec <SPI_RxByte>
 8012030:	4603      	mov	r3, r0
 8012032:	461a      	mov	r2, r3
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	701a      	strb	r2, [r3, #0]
}
 8012038:	bf00      	nop
 801203a:	3708      	adds	r7, #8
 801203c:	46bd      	mov	sp, r7
 801203e:	bd80      	pop	{r7, pc}

08012040 <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8012040:	b580      	push	{r7, lr}
 8012042:	b082      	sub	sp, #8
 8012044:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 8012046:	4b0a      	ldr	r3, [pc, #40]	@ (8012070 <SD_ReadyWait+0x30>)
 8012048:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 801204c:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 801204e:	f7ff ffcd 	bl	8011fec <SPI_RxByte>
 8012052:	4603      	mov	r3, r0
 8012054:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8012056:	79fb      	ldrb	r3, [r7, #7]
 8012058:	2bff      	cmp	r3, #255	@ 0xff
 801205a:	d003      	beq.n	8012064 <SD_ReadyWait+0x24>
 801205c:	4b04      	ldr	r3, [pc, #16]	@ (8012070 <SD_ReadyWait+0x30>)
 801205e:	881b      	ldrh	r3, [r3, #0]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d1f4      	bne.n	801204e <SD_ReadyWait+0xe>
  return res;
 8012064:	79fb      	ldrb	r3, [r7, #7]
}
 8012066:	4618      	mov	r0, r3
 8012068:	3708      	adds	r7, #8
 801206a:	46bd      	mov	sp, r7
 801206c:	bd80      	pop	{r7, pc}
 801206e:	bf00      	nop
 8012070:	240055a6 	.word	0x240055a6

08012074 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8012074:	b580      	push	{r7, lr}
 8012076:	b084      	sub	sp, #16
 8012078:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 801207a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 801207e:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 8012080:	f7ff ff74 	bl	8011f6c <DESELECT>
  for(int i = 0; i < 10; i++)
 8012084:	2300      	movs	r3, #0
 8012086:	60bb      	str	r3, [r7, #8]
 8012088:	e005      	b.n	8012096 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 801208a:	20ff      	movs	r0, #255	@ 0xff
 801208c:	f7ff ff7a 	bl	8011f84 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8012090:	68bb      	ldr	r3, [r7, #8]
 8012092:	3301      	adds	r3, #1
 8012094:	60bb      	str	r3, [r7, #8]
 8012096:	68bb      	ldr	r3, [r7, #8]
 8012098:	2b09      	cmp	r3, #9
 801209a:	ddf6      	ble.n	801208a <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 801209c:	f7ff ff5a 	bl	8011f54 <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 80120a0:	2340      	movs	r3, #64	@ 0x40
 80120a2:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 80120a4:	2300      	movs	r3, #0
 80120a6:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 80120a8:	2300      	movs	r3, #0
 80120aa:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 80120ac:	2300      	movs	r3, #0
 80120ae:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 80120b0:	2300      	movs	r3, #0
 80120b2:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 80120b4:	2395      	movs	r3, #149	@ 0x95
 80120b6:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 80120b8:	463b      	mov	r3, r7
 80120ba:	2106      	movs	r1, #6
 80120bc:	4618      	mov	r0, r3
 80120be:	f7ff ff7b 	bl	8011fb8 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 80120c2:	e002      	b.n	80120ca <SD_PowerOn+0x56>
  {
    cnt--;
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	3b01      	subs	r3, #1
 80120c8:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 80120ca:	f7ff ff8f 	bl	8011fec <SPI_RxByte>
 80120ce:	4603      	mov	r3, r0
 80120d0:	2b01      	cmp	r3, #1
 80120d2:	d002      	beq.n	80120da <SD_PowerOn+0x66>
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d1f4      	bne.n	80120c4 <SD_PowerOn+0x50>
  }
  DESELECT();
 80120da:	f7ff ff47 	bl	8011f6c <DESELECT>
  SPI_TxByte(0XFF);
 80120de:	20ff      	movs	r0, #255	@ 0xff
 80120e0:	f7ff ff50 	bl	8011f84 <SPI_TxByte>
  PowerFlag = 1;
 80120e4:	4b03      	ldr	r3, [pc, #12]	@ (80120f4 <SD_PowerOn+0x80>)
 80120e6:	2201      	movs	r2, #1
 80120e8:	701a      	strb	r2, [r3, #0]
}
 80120ea:	bf00      	nop
 80120ec:	3710      	adds	r7, #16
 80120ee:	46bd      	mov	sp, r7
 80120f0:	bd80      	pop	{r7, pc}
 80120f2:	bf00      	nop
 80120f4:	240055a9 	.word	0x240055a9

080120f8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 80120f8:	b480      	push	{r7}
 80120fa:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80120fc:	4b03      	ldr	r3, [pc, #12]	@ (801210c <SD_PowerOff+0x14>)
 80120fe:	2200      	movs	r2, #0
 8012100:	701a      	strb	r2, [r3, #0]
}
 8012102:	bf00      	nop
 8012104:	46bd      	mov	sp, r7
 8012106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801210a:	4770      	bx	lr
 801210c:	240055a9 	.word	0x240055a9

08012110 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8012110:	b480      	push	{r7}
 8012112:	af00      	add	r7, sp, #0
  return PowerFlag;
 8012114:	4b03      	ldr	r3, [pc, #12]	@ (8012124 <SD_CheckPower+0x14>)
 8012116:	781b      	ldrb	r3, [r3, #0]
}
 8012118:	4618      	mov	r0, r3
 801211a:	46bd      	mov	sp, r7
 801211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012120:	4770      	bx	lr
 8012122:	bf00      	nop
 8012124:	240055a9 	.word	0x240055a9

08012128 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8012128:	b580      	push	{r7, lr}
 801212a:	b084      	sub	sp, #16
 801212c:	af00      	add	r7, sp, #0
 801212e:	6078      	str	r0, [r7, #4]
 8012130:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 8012132:	4b13      	ldr	r3, [pc, #76]	@ (8012180 <SD_RxDataBlock+0x58>)
 8012134:	22c8      	movs	r2, #200	@ 0xc8
 8012136:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8012138:	f7ff ff58 	bl	8011fec <SPI_RxByte>
 801213c:	4603      	mov	r3, r0
 801213e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8012140:	7bfb      	ldrb	r3, [r7, #15]
 8012142:	2bff      	cmp	r3, #255	@ 0xff
 8012144:	d103      	bne.n	801214e <SD_RxDataBlock+0x26>
 8012146:	4b0e      	ldr	r3, [pc, #56]	@ (8012180 <SD_RxDataBlock+0x58>)
 8012148:	881b      	ldrh	r3, [r3, #0]
 801214a:	2b00      	cmp	r3, #0
 801214c:	d1f4      	bne.n	8012138 <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 801214e:	7bfb      	ldrb	r3, [r7, #15]
 8012150:	2bfe      	cmp	r3, #254	@ 0xfe
 8012152:	d001      	beq.n	8012158 <SD_RxDataBlock+0x30>
 8012154:	2300      	movs	r3, #0
 8012156:	e00f      	b.n	8012178 <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	1c5a      	adds	r2, r3, #1
 801215c:	607a      	str	r2, [r7, #4]
 801215e:	4618      	mov	r0, r3
 8012160:	f7ff ff60 	bl	8012024 <SPI_RxBytePtr>
  } while(len--);
 8012164:	683b      	ldr	r3, [r7, #0]
 8012166:	1e5a      	subs	r2, r3, #1
 8012168:	603a      	str	r2, [r7, #0]
 801216a:	2b00      	cmp	r3, #0
 801216c:	d1f4      	bne.n	8012158 <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 801216e:	f7ff ff3d 	bl	8011fec <SPI_RxByte>
  SPI_RxByte();
 8012172:	f7ff ff3b 	bl	8011fec <SPI_RxByte>
  return TRUE;
 8012176:	2301      	movs	r3, #1
}
 8012178:	4618      	mov	r0, r3
 801217a:	3710      	adds	r7, #16
 801217c:	46bd      	mov	sp, r7
 801217e:	bd80      	pop	{r7, pc}
 8012180:	240055a4 	.word	0x240055a4

08012184 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8012184:	b580      	push	{r7, lr}
 8012186:	b084      	sub	sp, #16
 8012188:	af00      	add	r7, sp, #0
 801218a:	6078      	str	r0, [r7, #4]
 801218c:	460b      	mov	r3, r1
 801218e:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8012190:	2300      	movs	r3, #0
 8012192:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8012194:	f7ff ff54 	bl	8012040 <SD_ReadyWait>
 8012198:	4603      	mov	r3, r0
 801219a:	2bff      	cmp	r3, #255	@ 0xff
 801219c:	d001      	beq.n	80121a2 <SD_TxDataBlock+0x1e>
 801219e:	2300      	movs	r3, #0
 80121a0:	e02f      	b.n	8012202 <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 80121a2:	78fb      	ldrb	r3, [r7, #3]
 80121a4:	4618      	mov	r0, r3
 80121a6:	f7ff feed 	bl	8011f84 <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 80121aa:	78fb      	ldrb	r3, [r7, #3]
 80121ac:	2bfd      	cmp	r3, #253	@ 0xfd
 80121ae:	d020      	beq.n	80121f2 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 80121b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80121b4:	6878      	ldr	r0, [r7, #4]
 80121b6:	f7ff feff 	bl	8011fb8 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 80121ba:	f7ff ff17 	bl	8011fec <SPI_RxByte>
    SPI_RxByte();
 80121be:	f7ff ff15 	bl	8011fec <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 80121c2:	e00b      	b.n	80121dc <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 80121c4:	f7ff ff12 	bl	8011fec <SPI_RxByte>
 80121c8:	4603      	mov	r3, r0
 80121ca:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 80121cc:	7bfb      	ldrb	r3, [r7, #15]
 80121ce:	f003 031f 	and.w	r3, r3, #31
 80121d2:	2b05      	cmp	r3, #5
 80121d4:	d006      	beq.n	80121e4 <SD_TxDataBlock+0x60>
      i++;
 80121d6:	7bbb      	ldrb	r3, [r7, #14]
 80121d8:	3301      	adds	r3, #1
 80121da:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 80121dc:	7bbb      	ldrb	r3, [r7, #14]
 80121de:	2b40      	cmp	r3, #64	@ 0x40
 80121e0:	d9f0      	bls.n	80121c4 <SD_TxDataBlock+0x40>
 80121e2:	e000      	b.n	80121e6 <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 80121e4:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 80121e6:	bf00      	nop
 80121e8:	f7ff ff00 	bl	8011fec <SPI_RxByte>
 80121ec:	4603      	mov	r3, r0
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d0fa      	beq.n	80121e8 <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 80121f2:	7bfb      	ldrb	r3, [r7, #15]
 80121f4:	f003 031f 	and.w	r3, r3, #31
 80121f8:	2b05      	cmp	r3, #5
 80121fa:	d101      	bne.n	8012200 <SD_TxDataBlock+0x7c>
 80121fc:	2301      	movs	r3, #1
 80121fe:	e000      	b.n	8012202 <SD_TxDataBlock+0x7e>

  return FALSE;
 8012200:	2300      	movs	r3, #0
}
 8012202:	4618      	mov	r0, r3
 8012204:	3710      	adds	r7, #16
 8012206:	46bd      	mov	sp, r7
 8012208:	bd80      	pop	{r7, pc}

0801220a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 801220a:	b580      	push	{r7, lr}
 801220c:	b084      	sub	sp, #16
 801220e:	af00      	add	r7, sp, #0
 8012210:	4603      	mov	r3, r0
 8012212:	6039      	str	r1, [r7, #0]
 8012214:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8012216:	f7ff ff13 	bl	8012040 <SD_ReadyWait>
 801221a:	4603      	mov	r3, r0
 801221c:	2bff      	cmp	r3, #255	@ 0xff
 801221e:	d001      	beq.n	8012224 <SD_SendCmd+0x1a>
 8012220:	23ff      	movs	r3, #255	@ 0xff
 8012222:	e042      	b.n	80122aa <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8012224:	79fb      	ldrb	r3, [r7, #7]
 8012226:	4618      	mov	r0, r3
 8012228:	f7ff feac 	bl	8011f84 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 801222c:	683b      	ldr	r3, [r7, #0]
 801222e:	0e1b      	lsrs	r3, r3, #24
 8012230:	b2db      	uxtb	r3, r3
 8012232:	4618      	mov	r0, r3
 8012234:	f7ff fea6 	bl	8011f84 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8012238:	683b      	ldr	r3, [r7, #0]
 801223a:	0c1b      	lsrs	r3, r3, #16
 801223c:	b2db      	uxtb	r3, r3
 801223e:	4618      	mov	r0, r3
 8012240:	f7ff fea0 	bl	8011f84 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8012244:	683b      	ldr	r3, [r7, #0]
 8012246:	0a1b      	lsrs	r3, r3, #8
 8012248:	b2db      	uxtb	r3, r3
 801224a:	4618      	mov	r0, r3
 801224c:	f7ff fe9a 	bl	8011f84 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8012250:	683b      	ldr	r3, [r7, #0]
 8012252:	b2db      	uxtb	r3, r3
 8012254:	4618      	mov	r0, r3
 8012256:	f7ff fe95 	bl	8011f84 <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 801225a:	79fb      	ldrb	r3, [r7, #7]
 801225c:	2b40      	cmp	r3, #64	@ 0x40
 801225e:	d102      	bne.n	8012266 <SD_SendCmd+0x5c>
 8012260:	2395      	movs	r3, #149	@ 0x95
 8012262:	73fb      	strb	r3, [r7, #15]
 8012264:	e007      	b.n	8012276 <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 8012266:	79fb      	ldrb	r3, [r7, #7]
 8012268:	2b48      	cmp	r3, #72	@ 0x48
 801226a:	d102      	bne.n	8012272 <SD_SendCmd+0x68>
 801226c:	2387      	movs	r3, #135	@ 0x87
 801226e:	73fb      	strb	r3, [r7, #15]
 8012270:	e001      	b.n	8012276 <SD_SendCmd+0x6c>
  else crc = 1;
 8012272:	2301      	movs	r3, #1
 8012274:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 8012276:	7bfb      	ldrb	r3, [r7, #15]
 8012278:	4618      	mov	r0, r3
 801227a:	f7ff fe83 	bl	8011f84 <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 801227e:	79fb      	ldrb	r3, [r7, #7]
 8012280:	2b4c      	cmp	r3, #76	@ 0x4c
 8012282:	d101      	bne.n	8012288 <SD_SendCmd+0x7e>
 8012284:	f7ff feb2 	bl	8011fec <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 8012288:	230a      	movs	r3, #10
 801228a:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 801228c:	f7ff feae 	bl	8011fec <SPI_RxByte>
 8012290:	4603      	mov	r3, r0
 8012292:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8012294:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8012298:	2b00      	cmp	r3, #0
 801229a:	da05      	bge.n	80122a8 <SD_SendCmd+0x9e>
 801229c:	7bbb      	ldrb	r3, [r7, #14]
 801229e:	3b01      	subs	r3, #1
 80122a0:	73bb      	strb	r3, [r7, #14]
 80122a2:	7bbb      	ldrb	r3, [r7, #14]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d1f1      	bne.n	801228c <SD_SendCmd+0x82>

  return res;
 80122a8:	7b7b      	ldrb	r3, [r7, #13]
}
 80122aa:	4618      	mov	r0, r3
 80122ac:	3710      	adds	r7, #16
 80122ae:	46bd      	mov	sp, r7
 80122b0:	bd80      	pop	{r7, pc}
	...

080122b4 <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80122b4:	b590      	push	{r4, r7, lr}
 80122b6:	b085      	sub	sp, #20
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	4603      	mov	r3, r0
 80122bc:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 80122be:	79fb      	ldrb	r3, [r7, #7]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d001      	beq.n	80122c8 <SD_disk_initialize+0x14>
 80122c4:	2301      	movs	r3, #1
 80122c6:	e0d1      	b.n	801246c <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 80122c8:	4b6a      	ldr	r3, [pc, #424]	@ (8012474 <SD_disk_initialize+0x1c0>)
 80122ca:	781b      	ldrb	r3, [r3, #0]
 80122cc:	b2db      	uxtb	r3, r3
 80122ce:	f003 0302 	and.w	r3, r3, #2
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d003      	beq.n	80122de <SD_disk_initialize+0x2a>
 80122d6:	4b67      	ldr	r3, [pc, #412]	@ (8012474 <SD_disk_initialize+0x1c0>)
 80122d8:	781b      	ldrb	r3, [r3, #0]
 80122da:	b2db      	uxtb	r3, r3
 80122dc:	e0c6      	b.n	801246c <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 80122de:	f7ff fec9 	bl	8012074 <SD_PowerOn>
  /* slave select */
  SELECT();
 80122e2:	f7ff fe37 	bl	8011f54 <SELECT>
  /* check disk type */
  type = 0;
 80122e6:	2300      	movs	r3, #0
 80122e8:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 80122ea:	2100      	movs	r1, #0
 80122ec:	2040      	movs	r0, #64	@ 0x40
 80122ee:	f7ff ff8c 	bl	801220a <SD_SendCmd>
 80122f2:	4603      	mov	r3, r0
 80122f4:	2b01      	cmp	r3, #1
 80122f6:	f040 80a1 	bne.w	801243c <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 80122fa:	4b5f      	ldr	r3, [pc, #380]	@ (8012478 <SD_disk_initialize+0x1c4>)
 80122fc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8012300:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8012302:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8012306:	2048      	movs	r0, #72	@ 0x48
 8012308:	f7ff ff7f 	bl	801220a <SD_SendCmd>
 801230c:	4603      	mov	r3, r0
 801230e:	2b01      	cmp	r3, #1
 8012310:	d155      	bne.n	80123be <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8012312:	2300      	movs	r3, #0
 8012314:	73fb      	strb	r3, [r7, #15]
 8012316:	e00c      	b.n	8012332 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8012318:	7bfc      	ldrb	r4, [r7, #15]
 801231a:	f7ff fe67 	bl	8011fec <SPI_RxByte>
 801231e:	4603      	mov	r3, r0
 8012320:	461a      	mov	r2, r3
 8012322:	f104 0310 	add.w	r3, r4, #16
 8012326:	443b      	add	r3, r7
 8012328:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 801232c:	7bfb      	ldrb	r3, [r7, #15]
 801232e:	3301      	adds	r3, #1
 8012330:	73fb      	strb	r3, [r7, #15]
 8012332:	7bfb      	ldrb	r3, [r7, #15]
 8012334:	2b03      	cmp	r3, #3
 8012336:	d9ef      	bls.n	8012318 <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8012338:	7abb      	ldrb	r3, [r7, #10]
 801233a:	2b01      	cmp	r3, #1
 801233c:	d17e      	bne.n	801243c <SD_disk_initialize+0x188>
 801233e:	7afb      	ldrb	r3, [r7, #11]
 8012340:	2baa      	cmp	r3, #170	@ 0xaa
 8012342:	d17b      	bne.n	801243c <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8012344:	2100      	movs	r1, #0
 8012346:	2077      	movs	r0, #119	@ 0x77
 8012348:	f7ff ff5f 	bl	801220a <SD_SendCmd>
 801234c:	4603      	mov	r3, r0
 801234e:	2b01      	cmp	r3, #1
 8012350:	d807      	bhi.n	8012362 <SD_disk_initialize+0xae>
 8012352:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8012356:	2069      	movs	r0, #105	@ 0x69
 8012358:	f7ff ff57 	bl	801220a <SD_SendCmd>
 801235c:	4603      	mov	r3, r0
 801235e:	2b00      	cmp	r3, #0
 8012360:	d004      	beq.n	801236c <SD_disk_initialize+0xb8>
        } while (Timer1);
 8012362:	4b45      	ldr	r3, [pc, #276]	@ (8012478 <SD_disk_initialize+0x1c4>)
 8012364:	881b      	ldrh	r3, [r3, #0]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d1ec      	bne.n	8012344 <SD_disk_initialize+0x90>
 801236a:	e000      	b.n	801236e <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 801236c:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 801236e:	4b42      	ldr	r3, [pc, #264]	@ (8012478 <SD_disk_initialize+0x1c4>)
 8012370:	881b      	ldrh	r3, [r3, #0]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d062      	beq.n	801243c <SD_disk_initialize+0x188>
 8012376:	2100      	movs	r1, #0
 8012378:	207a      	movs	r0, #122	@ 0x7a
 801237a:	f7ff ff46 	bl	801220a <SD_SendCmd>
 801237e:	4603      	mov	r3, r0
 8012380:	2b00      	cmp	r3, #0
 8012382:	d15b      	bne.n	801243c <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8012384:	2300      	movs	r3, #0
 8012386:	73fb      	strb	r3, [r7, #15]
 8012388:	e00c      	b.n	80123a4 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 801238a:	7bfc      	ldrb	r4, [r7, #15]
 801238c:	f7ff fe2e 	bl	8011fec <SPI_RxByte>
 8012390:	4603      	mov	r3, r0
 8012392:	461a      	mov	r2, r3
 8012394:	f104 0310 	add.w	r3, r4, #16
 8012398:	443b      	add	r3, r7
 801239a:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 801239e:	7bfb      	ldrb	r3, [r7, #15]
 80123a0:	3301      	adds	r3, #1
 80123a2:	73fb      	strb	r3, [r7, #15]
 80123a4:	7bfb      	ldrb	r3, [r7, #15]
 80123a6:	2b03      	cmp	r3, #3
 80123a8:	d9ef      	bls.n	801238a <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80123aa:	7a3b      	ldrb	r3, [r7, #8]
 80123ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d001      	beq.n	80123b8 <SD_disk_initialize+0x104>
 80123b4:	230c      	movs	r3, #12
 80123b6:	e000      	b.n	80123ba <SD_disk_initialize+0x106>
 80123b8:	2304      	movs	r3, #4
 80123ba:	73bb      	strb	r3, [r7, #14]
 80123bc:	e03e      	b.n	801243c <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80123be:	2100      	movs	r1, #0
 80123c0:	2077      	movs	r0, #119	@ 0x77
 80123c2:	f7ff ff22 	bl	801220a <SD_SendCmd>
 80123c6:	4603      	mov	r3, r0
 80123c8:	2b01      	cmp	r3, #1
 80123ca:	d808      	bhi.n	80123de <SD_disk_initialize+0x12a>
 80123cc:	2100      	movs	r1, #0
 80123ce:	2069      	movs	r0, #105	@ 0x69
 80123d0:	f7ff ff1b 	bl	801220a <SD_SendCmd>
 80123d4:	4603      	mov	r3, r0
 80123d6:	2b01      	cmp	r3, #1
 80123d8:	d801      	bhi.n	80123de <SD_disk_initialize+0x12a>
 80123da:	2302      	movs	r3, #2
 80123dc:	e000      	b.n	80123e0 <SD_disk_initialize+0x12c>
 80123de:	2301      	movs	r3, #1
 80123e0:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 80123e2:	7bbb      	ldrb	r3, [r7, #14]
 80123e4:	2b02      	cmp	r3, #2
 80123e6:	d10e      	bne.n	8012406 <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80123e8:	2100      	movs	r1, #0
 80123ea:	2077      	movs	r0, #119	@ 0x77
 80123ec:	f7ff ff0d 	bl	801220a <SD_SendCmd>
 80123f0:	4603      	mov	r3, r0
 80123f2:	2b01      	cmp	r3, #1
 80123f4:	d80e      	bhi.n	8012414 <SD_disk_initialize+0x160>
 80123f6:	2100      	movs	r1, #0
 80123f8:	2069      	movs	r0, #105	@ 0x69
 80123fa:	f7ff ff06 	bl	801220a <SD_SendCmd>
 80123fe:	4603      	mov	r3, r0
 8012400:	2b00      	cmp	r3, #0
 8012402:	d107      	bne.n	8012414 <SD_disk_initialize+0x160>
 8012404:	e00c      	b.n	8012420 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8012406:	2100      	movs	r1, #0
 8012408:	2041      	movs	r0, #65	@ 0x41
 801240a:	f7ff fefe 	bl	801220a <SD_SendCmd>
 801240e:	4603      	mov	r3, r0
 8012410:	2b00      	cmp	r3, #0
 8012412:	d004      	beq.n	801241e <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 8012414:	4b18      	ldr	r3, [pc, #96]	@ (8012478 <SD_disk_initialize+0x1c4>)
 8012416:	881b      	ldrh	r3, [r3, #0]
 8012418:	2b00      	cmp	r3, #0
 801241a:	d1e2      	bne.n	80123e2 <SD_disk_initialize+0x12e>
 801241c:	e000      	b.n	8012420 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 801241e:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8012420:	4b15      	ldr	r3, [pc, #84]	@ (8012478 <SD_disk_initialize+0x1c4>)
 8012422:	881b      	ldrh	r3, [r3, #0]
 8012424:	2b00      	cmp	r3, #0
 8012426:	d007      	beq.n	8012438 <SD_disk_initialize+0x184>
 8012428:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801242c:	2050      	movs	r0, #80	@ 0x50
 801242e:	f7ff feec 	bl	801220a <SD_SendCmd>
 8012432:	4603      	mov	r3, r0
 8012434:	2b00      	cmp	r3, #0
 8012436:	d001      	beq.n	801243c <SD_disk_initialize+0x188>
 8012438:	2300      	movs	r3, #0
 801243a:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 801243c:	4a0f      	ldr	r2, [pc, #60]	@ (801247c <SD_disk_initialize+0x1c8>)
 801243e:	7bbb      	ldrb	r3, [r7, #14]
 8012440:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 8012442:	f7ff fd93 	bl	8011f6c <DESELECT>
  SPI_RxByte();
 8012446:	f7ff fdd1 	bl	8011fec <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 801244a:	7bbb      	ldrb	r3, [r7, #14]
 801244c:	2b00      	cmp	r3, #0
 801244e:	d008      	beq.n	8012462 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8012450:	4b08      	ldr	r3, [pc, #32]	@ (8012474 <SD_disk_initialize+0x1c0>)
 8012452:	781b      	ldrb	r3, [r3, #0]
 8012454:	b2db      	uxtb	r3, r3
 8012456:	f023 0301 	bic.w	r3, r3, #1
 801245a:	b2da      	uxtb	r2, r3
 801245c:	4b05      	ldr	r3, [pc, #20]	@ (8012474 <SD_disk_initialize+0x1c0>)
 801245e:	701a      	strb	r2, [r3, #0]
 8012460:	e001      	b.n	8012466 <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8012462:	f7ff fe49 	bl	80120f8 <SD_PowerOff>
  }
  return Stat;
 8012466:	4b03      	ldr	r3, [pc, #12]	@ (8012474 <SD_disk_initialize+0x1c0>)
 8012468:	781b      	ldrb	r3, [r3, #0]
 801246a:	b2db      	uxtb	r3, r3
}
 801246c:	4618      	mov	r0, r3
 801246e:	3714      	adds	r7, #20
 8012470:	46bd      	mov	sp, r7
 8012472:	bd90      	pop	{r4, r7, pc}
 8012474:	240000e4 	.word	0x240000e4
 8012478:	240055a4 	.word	0x240055a4
 801247c:	240055a8 	.word	0x240055a8

08012480 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8012480:	b480      	push	{r7}
 8012482:	b083      	sub	sp, #12
 8012484:	af00      	add	r7, sp, #0
 8012486:	4603      	mov	r3, r0
 8012488:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 801248a:	79fb      	ldrb	r3, [r7, #7]
 801248c:	2b00      	cmp	r3, #0
 801248e:	d001      	beq.n	8012494 <SD_disk_status+0x14>
 8012490:	2301      	movs	r3, #1
 8012492:	e002      	b.n	801249a <SD_disk_status+0x1a>
  return Stat;
 8012494:	4b04      	ldr	r3, [pc, #16]	@ (80124a8 <SD_disk_status+0x28>)
 8012496:	781b      	ldrb	r3, [r3, #0]
 8012498:	b2db      	uxtb	r3, r3
}
 801249a:	4618      	mov	r0, r3
 801249c:	370c      	adds	r7, #12
 801249e:	46bd      	mov	sp, r7
 80124a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a4:	4770      	bx	lr
 80124a6:	bf00      	nop
 80124a8:	240000e4 	.word	0x240000e4

080124ac <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80124ac:	b580      	push	{r7, lr}
 80124ae:	b084      	sub	sp, #16
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	60b9      	str	r1, [r7, #8]
 80124b4:	607a      	str	r2, [r7, #4]
 80124b6:	603b      	str	r3, [r7, #0]
 80124b8:	4603      	mov	r3, r0
 80124ba:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 80124bc:	7bfb      	ldrb	r3, [r7, #15]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d102      	bne.n	80124c8 <SD_disk_read+0x1c>
 80124c2:	683b      	ldr	r3, [r7, #0]
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d101      	bne.n	80124cc <SD_disk_read+0x20>
 80124c8:	2304      	movs	r3, #4
 80124ca:	e051      	b.n	8012570 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80124cc:	4b2a      	ldr	r3, [pc, #168]	@ (8012578 <SD_disk_read+0xcc>)
 80124ce:	781b      	ldrb	r3, [r3, #0]
 80124d0:	b2db      	uxtb	r3, r3
 80124d2:	f003 0301 	and.w	r3, r3, #1
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d001      	beq.n	80124de <SD_disk_read+0x32>
 80124da:	2303      	movs	r3, #3
 80124dc:	e048      	b.n	8012570 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 80124de:	4b27      	ldr	r3, [pc, #156]	@ (801257c <SD_disk_read+0xd0>)
 80124e0:	781b      	ldrb	r3, [r3, #0]
 80124e2:	f003 0304 	and.w	r3, r3, #4
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d102      	bne.n	80124f0 <SD_disk_read+0x44>
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	025b      	lsls	r3, r3, #9
 80124ee:	607b      	str	r3, [r7, #4]

  SELECT();
 80124f0:	f7ff fd30 	bl	8011f54 <SELECT>

  if (count == 1)
 80124f4:	683b      	ldr	r3, [r7, #0]
 80124f6:	2b01      	cmp	r3, #1
 80124f8:	d111      	bne.n	801251e <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80124fa:	6879      	ldr	r1, [r7, #4]
 80124fc:	2051      	movs	r0, #81	@ 0x51
 80124fe:	f7ff fe84 	bl	801220a <SD_SendCmd>
 8012502:	4603      	mov	r3, r0
 8012504:	2b00      	cmp	r3, #0
 8012506:	d129      	bne.n	801255c <SD_disk_read+0xb0>
 8012508:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801250c:	68b8      	ldr	r0, [r7, #8]
 801250e:	f7ff fe0b 	bl	8012128 <SD_RxDataBlock>
 8012512:	4603      	mov	r3, r0
 8012514:	2b00      	cmp	r3, #0
 8012516:	d021      	beq.n	801255c <SD_disk_read+0xb0>
 8012518:	2300      	movs	r3, #0
 801251a:	603b      	str	r3, [r7, #0]
 801251c:	e01e      	b.n	801255c <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 801251e:	6879      	ldr	r1, [r7, #4]
 8012520:	2052      	movs	r0, #82	@ 0x52
 8012522:	f7ff fe72 	bl	801220a <SD_SendCmd>
 8012526:	4603      	mov	r3, r0
 8012528:	2b00      	cmp	r3, #0
 801252a:	d117      	bne.n	801255c <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 801252c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8012530:	68b8      	ldr	r0, [r7, #8]
 8012532:	f7ff fdf9 	bl	8012128 <SD_RxDataBlock>
 8012536:	4603      	mov	r3, r0
 8012538:	2b00      	cmp	r3, #0
 801253a:	d00a      	beq.n	8012552 <SD_disk_read+0xa6>
        buff += 512;
 801253c:	68bb      	ldr	r3, [r7, #8]
 801253e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8012542:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8012544:	683b      	ldr	r3, [r7, #0]
 8012546:	3b01      	subs	r3, #1
 8012548:	603b      	str	r3, [r7, #0]
 801254a:	683b      	ldr	r3, [r7, #0]
 801254c:	2b00      	cmp	r3, #0
 801254e:	d1ed      	bne.n	801252c <SD_disk_read+0x80>
 8012550:	e000      	b.n	8012554 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8012552:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8012554:	2100      	movs	r1, #0
 8012556:	204c      	movs	r0, #76	@ 0x4c
 8012558:	f7ff fe57 	bl	801220a <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 801255c:	f7ff fd06 	bl	8011f6c <DESELECT>
  SPI_RxByte();
 8012560:	f7ff fd44 	bl	8011fec <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8012564:	683b      	ldr	r3, [r7, #0]
 8012566:	2b00      	cmp	r3, #0
 8012568:	bf14      	ite	ne
 801256a:	2301      	movne	r3, #1
 801256c:	2300      	moveq	r3, #0
 801256e:	b2db      	uxtb	r3, r3
}
 8012570:	4618      	mov	r0, r3
 8012572:	3710      	adds	r7, #16
 8012574:	46bd      	mov	sp, r7
 8012576:	bd80      	pop	{r7, pc}
 8012578:	240000e4 	.word	0x240000e4
 801257c:	240055a8 	.word	0x240055a8

08012580 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8012580:	b580      	push	{r7, lr}
 8012582:	b084      	sub	sp, #16
 8012584:	af00      	add	r7, sp, #0
 8012586:	60b9      	str	r1, [r7, #8]
 8012588:	607a      	str	r2, [r7, #4]
 801258a:	603b      	str	r3, [r7, #0]
 801258c:	4603      	mov	r3, r0
 801258e:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8012590:	7bfb      	ldrb	r3, [r7, #15]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d102      	bne.n	801259c <SD_disk_write+0x1c>
 8012596:	683b      	ldr	r3, [r7, #0]
 8012598:	2b00      	cmp	r3, #0
 801259a:	d101      	bne.n	80125a0 <SD_disk_write+0x20>
 801259c:	2304      	movs	r3, #4
 801259e:	e06b      	b.n	8012678 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80125a0:	4b37      	ldr	r3, [pc, #220]	@ (8012680 <SD_disk_write+0x100>)
 80125a2:	781b      	ldrb	r3, [r3, #0]
 80125a4:	b2db      	uxtb	r3, r3
 80125a6:	f003 0301 	and.w	r3, r3, #1
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d001      	beq.n	80125b2 <SD_disk_write+0x32>
 80125ae:	2303      	movs	r3, #3
 80125b0:	e062      	b.n	8012678 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 80125b2:	4b33      	ldr	r3, [pc, #204]	@ (8012680 <SD_disk_write+0x100>)
 80125b4:	781b      	ldrb	r3, [r3, #0]
 80125b6:	b2db      	uxtb	r3, r3
 80125b8:	f003 0304 	and.w	r3, r3, #4
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d001      	beq.n	80125c4 <SD_disk_write+0x44>
 80125c0:	2302      	movs	r3, #2
 80125c2:	e059      	b.n	8012678 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 80125c4:	4b2f      	ldr	r3, [pc, #188]	@ (8012684 <SD_disk_write+0x104>)
 80125c6:	781b      	ldrb	r3, [r3, #0]
 80125c8:	f003 0304 	and.w	r3, r3, #4
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d102      	bne.n	80125d6 <SD_disk_write+0x56>
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	025b      	lsls	r3, r3, #9
 80125d4:	607b      	str	r3, [r7, #4]

  SELECT();
 80125d6:	f7ff fcbd 	bl	8011f54 <SELECT>

  if (count == 1)
 80125da:	683b      	ldr	r3, [r7, #0]
 80125dc:	2b01      	cmp	r3, #1
 80125de:	d110      	bne.n	8012602 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80125e0:	6879      	ldr	r1, [r7, #4]
 80125e2:	2058      	movs	r0, #88	@ 0x58
 80125e4:	f7ff fe11 	bl	801220a <SD_SendCmd>
 80125e8:	4603      	mov	r3, r0
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d13a      	bne.n	8012664 <SD_disk_write+0xe4>
 80125ee:	21fe      	movs	r1, #254	@ 0xfe
 80125f0:	68b8      	ldr	r0, [r7, #8]
 80125f2:	f7ff fdc7 	bl	8012184 <SD_TxDataBlock>
 80125f6:	4603      	mov	r3, r0
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d033      	beq.n	8012664 <SD_disk_write+0xe4>
      count = 0;
 80125fc:	2300      	movs	r3, #0
 80125fe:	603b      	str	r3, [r7, #0]
 8012600:	e030      	b.n	8012664 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8012602:	4b20      	ldr	r3, [pc, #128]	@ (8012684 <SD_disk_write+0x104>)
 8012604:	781b      	ldrb	r3, [r3, #0]
 8012606:	f003 0302 	and.w	r3, r3, #2
 801260a:	2b00      	cmp	r3, #0
 801260c:	d007      	beq.n	801261e <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 801260e:	2100      	movs	r1, #0
 8012610:	2077      	movs	r0, #119	@ 0x77
 8012612:	f7ff fdfa 	bl	801220a <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8012616:	6839      	ldr	r1, [r7, #0]
 8012618:	2057      	movs	r0, #87	@ 0x57
 801261a:	f7ff fdf6 	bl	801220a <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 801261e:	6879      	ldr	r1, [r7, #4]
 8012620:	2059      	movs	r0, #89	@ 0x59
 8012622:	f7ff fdf2 	bl	801220a <SD_SendCmd>
 8012626:	4603      	mov	r3, r0
 8012628:	2b00      	cmp	r3, #0
 801262a:	d11b      	bne.n	8012664 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 801262c:	21fc      	movs	r1, #252	@ 0xfc
 801262e:	68b8      	ldr	r0, [r7, #8]
 8012630:	f7ff fda8 	bl	8012184 <SD_TxDataBlock>
 8012634:	4603      	mov	r3, r0
 8012636:	2b00      	cmp	r3, #0
 8012638:	d00a      	beq.n	8012650 <SD_disk_write+0xd0>
        buff += 512;
 801263a:	68bb      	ldr	r3, [r7, #8]
 801263c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8012640:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8012642:	683b      	ldr	r3, [r7, #0]
 8012644:	3b01      	subs	r3, #1
 8012646:	603b      	str	r3, [r7, #0]
 8012648:	683b      	ldr	r3, [r7, #0]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d1ee      	bne.n	801262c <SD_disk_write+0xac>
 801264e:	e000      	b.n	8012652 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8012650:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8012652:	21fd      	movs	r1, #253	@ 0xfd
 8012654:	2000      	movs	r0, #0
 8012656:	f7ff fd95 	bl	8012184 <SD_TxDataBlock>
 801265a:	4603      	mov	r3, r0
 801265c:	2b00      	cmp	r3, #0
 801265e:	d101      	bne.n	8012664 <SD_disk_write+0xe4>
      {
        count = 1;
 8012660:	2301      	movs	r3, #1
 8012662:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8012664:	f7ff fc82 	bl	8011f6c <DESELECT>
  SPI_RxByte();
 8012668:	f7ff fcc0 	bl	8011fec <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 801266c:	683b      	ldr	r3, [r7, #0]
 801266e:	2b00      	cmp	r3, #0
 8012670:	bf14      	ite	ne
 8012672:	2301      	movne	r3, #1
 8012674:	2300      	moveq	r3, #0
 8012676:	b2db      	uxtb	r3, r3
}
 8012678:	4618      	mov	r0, r3
 801267a:	3710      	adds	r7, #16
 801267c:	46bd      	mov	sp, r7
 801267e:	bd80      	pop	{r7, pc}
 8012680:	240000e4 	.word	0x240000e4
 8012684:	240055a8 	.word	0x240055a8

08012688 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8012688:	b590      	push	{r4, r7, lr}
 801268a:	b08b      	sub	sp, #44	@ 0x2c
 801268c:	af00      	add	r7, sp, #0
 801268e:	4603      	mov	r3, r0
 8012690:	603a      	str	r2, [r7, #0]
 8012692:	71fb      	strb	r3, [r7, #7]
 8012694:	460b      	mov	r3, r1
 8012696:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8012698:	683b      	ldr	r3, [r7, #0]
 801269a:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 801269c:	79fb      	ldrb	r3, [r7, #7]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d001      	beq.n	80126a6 <SD_disk_ioctl+0x1e>
 80126a2:	2304      	movs	r3, #4
 80126a4:	e113      	b.n	80128ce <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 80126a6:	2301      	movs	r3, #1
 80126a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 80126ac:	79bb      	ldrb	r3, [r7, #6]
 80126ae:	2b05      	cmp	r3, #5
 80126b0:	d124      	bne.n	80126fc <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 80126b2:	6a3b      	ldr	r3, [r7, #32]
 80126b4:	781b      	ldrb	r3, [r3, #0]
 80126b6:	2b02      	cmp	r3, #2
 80126b8:	d012      	beq.n	80126e0 <SD_disk_ioctl+0x58>
 80126ba:	2b02      	cmp	r3, #2
 80126bc:	dc1a      	bgt.n	80126f4 <SD_disk_ioctl+0x6c>
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d002      	beq.n	80126c8 <SD_disk_ioctl+0x40>
 80126c2:	2b01      	cmp	r3, #1
 80126c4:	d006      	beq.n	80126d4 <SD_disk_ioctl+0x4c>
 80126c6:	e015      	b.n	80126f4 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 80126c8:	f7ff fd16 	bl	80120f8 <SD_PowerOff>
      res = RES_OK;
 80126cc:	2300      	movs	r3, #0
 80126ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80126d2:	e0fa      	b.n	80128ca <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 80126d4:	f7ff fcce 	bl	8012074 <SD_PowerOn>
      res = RES_OK;
 80126d8:	2300      	movs	r3, #0
 80126da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80126de:	e0f4      	b.n	80128ca <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 80126e0:	6a3b      	ldr	r3, [r7, #32]
 80126e2:	1c5c      	adds	r4, r3, #1
 80126e4:	f7ff fd14 	bl	8012110 <SD_CheckPower>
 80126e8:	4603      	mov	r3, r0
 80126ea:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 80126ec:	2300      	movs	r3, #0
 80126ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80126f2:	e0ea      	b.n	80128ca <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 80126f4:	2304      	movs	r3, #4
 80126f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80126fa:	e0e6      	b.n	80128ca <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 80126fc:	4b76      	ldr	r3, [pc, #472]	@ (80128d8 <SD_disk_ioctl+0x250>)
 80126fe:	781b      	ldrb	r3, [r3, #0]
 8012700:	b2db      	uxtb	r3, r3
 8012702:	f003 0301 	and.w	r3, r3, #1
 8012706:	2b00      	cmp	r3, #0
 8012708:	d001      	beq.n	801270e <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 801270a:	2303      	movs	r3, #3
 801270c:	e0df      	b.n	80128ce <SD_disk_ioctl+0x246>
    }
    SELECT();
 801270e:	f7ff fc21 	bl	8011f54 <SELECT>
    switch (ctrl)
 8012712:	79bb      	ldrb	r3, [r7, #6]
 8012714:	2b0d      	cmp	r3, #13
 8012716:	f200 80c9 	bhi.w	80128ac <SD_disk_ioctl+0x224>
 801271a:	a201      	add	r2, pc, #4	@ (adr r2, 8012720 <SD_disk_ioctl+0x98>)
 801271c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012720:	08012817 	.word	0x08012817
 8012724:	08012759 	.word	0x08012759
 8012728:	08012807 	.word	0x08012807
 801272c:	080128ad 	.word	0x080128ad
 8012730:	080128ad 	.word	0x080128ad
 8012734:	080128ad 	.word	0x080128ad
 8012738:	080128ad 	.word	0x080128ad
 801273c:	080128ad 	.word	0x080128ad
 8012740:	080128ad 	.word	0x080128ad
 8012744:	080128ad 	.word	0x080128ad
 8012748:	080128ad 	.word	0x080128ad
 801274c:	08012829 	.word	0x08012829
 8012750:	0801284d 	.word	0x0801284d
 8012754:	08012871 	.word	0x08012871
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8012758:	2100      	movs	r1, #0
 801275a:	2049      	movs	r0, #73	@ 0x49
 801275c:	f7ff fd55 	bl	801220a <SD_SendCmd>
 8012760:	4603      	mov	r3, r0
 8012762:	2b00      	cmp	r3, #0
 8012764:	f040 80a6 	bne.w	80128b4 <SD_disk_ioctl+0x22c>
 8012768:	f107 030c 	add.w	r3, r7, #12
 801276c:	2110      	movs	r1, #16
 801276e:	4618      	mov	r0, r3
 8012770:	f7ff fcda 	bl	8012128 <SD_RxDataBlock>
 8012774:	4603      	mov	r3, r0
 8012776:	2b00      	cmp	r3, #0
 8012778:	f000 809c 	beq.w	80128b4 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 801277c:	7b3b      	ldrb	r3, [r7, #12]
 801277e:	099b      	lsrs	r3, r3, #6
 8012780:	b2db      	uxtb	r3, r3
 8012782:	2b01      	cmp	r3, #1
 8012784:	d10d      	bne.n	80127a2 <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8012786:	7d7b      	ldrb	r3, [r7, #21]
 8012788:	461a      	mov	r2, r3
 801278a:	7d3b      	ldrb	r3, [r7, #20]
 801278c:	021b      	lsls	r3, r3, #8
 801278e:	b29b      	uxth	r3, r3
 8012790:	4413      	add	r3, r2
 8012792:	b29b      	uxth	r3, r3
 8012794:	3301      	adds	r3, #1
 8012796:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8012798:	8bfb      	ldrh	r3, [r7, #30]
 801279a:	029a      	lsls	r2, r3, #10
 801279c:	683b      	ldr	r3, [r7, #0]
 801279e:	601a      	str	r2, [r3, #0]
 80127a0:	e02d      	b.n	80127fe <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80127a2:	7c7b      	ldrb	r3, [r7, #17]
 80127a4:	f003 030f 	and.w	r3, r3, #15
 80127a8:	b2da      	uxtb	r2, r3
 80127aa:	7dbb      	ldrb	r3, [r7, #22]
 80127ac:	09db      	lsrs	r3, r3, #7
 80127ae:	b2db      	uxtb	r3, r3
 80127b0:	4413      	add	r3, r2
 80127b2:	b2da      	uxtb	r2, r3
 80127b4:	7d7b      	ldrb	r3, [r7, #21]
 80127b6:	005b      	lsls	r3, r3, #1
 80127b8:	b2db      	uxtb	r3, r3
 80127ba:	f003 0306 	and.w	r3, r3, #6
 80127be:	b2db      	uxtb	r3, r3
 80127c0:	4413      	add	r3, r2
 80127c2:	b2db      	uxtb	r3, r3
 80127c4:	3302      	adds	r3, #2
 80127c6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80127ca:	7d3b      	ldrb	r3, [r7, #20]
 80127cc:	099b      	lsrs	r3, r3, #6
 80127ce:	b2db      	uxtb	r3, r3
 80127d0:	461a      	mov	r2, r3
 80127d2:	7cfb      	ldrb	r3, [r7, #19]
 80127d4:	009b      	lsls	r3, r3, #2
 80127d6:	b29b      	uxth	r3, r3
 80127d8:	4413      	add	r3, r2
 80127da:	b29a      	uxth	r2, r3
 80127dc:	7cbb      	ldrb	r3, [r7, #18]
 80127de:	029b      	lsls	r3, r3, #10
 80127e0:	b29b      	uxth	r3, r3
 80127e2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80127e6:	b29b      	uxth	r3, r3
 80127e8:	4413      	add	r3, r2
 80127ea:	b29b      	uxth	r3, r3
 80127ec:	3301      	adds	r3, #1
 80127ee:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80127f0:	8bfa      	ldrh	r2, [r7, #30]
 80127f2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80127f6:	3b09      	subs	r3, #9
 80127f8:	409a      	lsls	r2, r3
 80127fa:	683b      	ldr	r3, [r7, #0]
 80127fc:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 80127fe:	2300      	movs	r3, #0
 8012800:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8012804:	e056      	b.n	80128b4 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8012806:	683b      	ldr	r3, [r7, #0]
 8012808:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801280c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 801280e:	2300      	movs	r3, #0
 8012810:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8012814:	e055      	b.n	80128c2 <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8012816:	f7ff fc13 	bl	8012040 <SD_ReadyWait>
 801281a:	4603      	mov	r3, r0
 801281c:	2bff      	cmp	r3, #255	@ 0xff
 801281e:	d14b      	bne.n	80128b8 <SD_disk_ioctl+0x230>
 8012820:	2300      	movs	r3, #0
 8012822:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8012826:	e047      	b.n	80128b8 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8012828:	2100      	movs	r1, #0
 801282a:	2049      	movs	r0, #73	@ 0x49
 801282c:	f7ff fced 	bl	801220a <SD_SendCmd>
 8012830:	4603      	mov	r3, r0
 8012832:	2b00      	cmp	r3, #0
 8012834:	d142      	bne.n	80128bc <SD_disk_ioctl+0x234>
 8012836:	2110      	movs	r1, #16
 8012838:	6a38      	ldr	r0, [r7, #32]
 801283a:	f7ff fc75 	bl	8012128 <SD_RxDataBlock>
 801283e:	4603      	mov	r3, r0
 8012840:	2b00      	cmp	r3, #0
 8012842:	d03b      	beq.n	80128bc <SD_disk_ioctl+0x234>
 8012844:	2300      	movs	r3, #0
 8012846:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 801284a:	e037      	b.n	80128bc <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 801284c:	2100      	movs	r1, #0
 801284e:	204a      	movs	r0, #74	@ 0x4a
 8012850:	f7ff fcdb 	bl	801220a <SD_SendCmd>
 8012854:	4603      	mov	r3, r0
 8012856:	2b00      	cmp	r3, #0
 8012858:	d132      	bne.n	80128c0 <SD_disk_ioctl+0x238>
 801285a:	2110      	movs	r1, #16
 801285c:	6a38      	ldr	r0, [r7, #32]
 801285e:	f7ff fc63 	bl	8012128 <SD_RxDataBlock>
 8012862:	4603      	mov	r3, r0
 8012864:	2b00      	cmp	r3, #0
 8012866:	d02b      	beq.n	80128c0 <SD_disk_ioctl+0x238>
 8012868:	2300      	movs	r3, #0
 801286a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 801286e:	e027      	b.n	80128c0 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8012870:	2100      	movs	r1, #0
 8012872:	207a      	movs	r0, #122	@ 0x7a
 8012874:	f7ff fcc9 	bl	801220a <SD_SendCmd>
 8012878:	4603      	mov	r3, r0
 801287a:	2b00      	cmp	r3, #0
 801287c:	d116      	bne.n	80128ac <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 801287e:	2300      	movs	r3, #0
 8012880:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012884:	e00b      	b.n	801289e <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 8012886:	6a3c      	ldr	r4, [r7, #32]
 8012888:	1c63      	adds	r3, r4, #1
 801288a:	623b      	str	r3, [r7, #32]
 801288c:	f7ff fbae 	bl	8011fec <SPI_RxByte>
 8012890:	4603      	mov	r3, r0
 8012892:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8012894:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012898:	3301      	adds	r3, #1
 801289a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801289e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80128a2:	2b03      	cmp	r3, #3
 80128a4:	d9ef      	bls.n	8012886 <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 80128a6:	2300      	movs	r3, #0
 80128a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 80128ac:	2304      	movs	r3, #4
 80128ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80128b2:	e006      	b.n	80128c2 <SD_disk_ioctl+0x23a>
      break;
 80128b4:	bf00      	nop
 80128b6:	e004      	b.n	80128c2 <SD_disk_ioctl+0x23a>
      break;
 80128b8:	bf00      	nop
 80128ba:	e002      	b.n	80128c2 <SD_disk_ioctl+0x23a>
      break;
 80128bc:	bf00      	nop
 80128be:	e000      	b.n	80128c2 <SD_disk_ioctl+0x23a>
      break;
 80128c0:	bf00      	nop
    }
    DESELECT();
 80128c2:	f7ff fb53 	bl	8011f6c <DESELECT>
    SPI_RxByte();
 80128c6:	f7ff fb91 	bl	8011fec <SPI_RxByte>
  }
  return res;
 80128ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80128ce:	4618      	mov	r0, r3
 80128d0:	372c      	adds	r7, #44	@ 0x2c
 80128d2:	46bd      	mov	sp, r7
 80128d4:	bd90      	pop	{r4, r7, pc}
 80128d6:	bf00      	nop
 80128d8:	240000e4 	.word	0x240000e4

080128dc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80128dc:	b580      	push	{r7, lr}
 80128de:	b084      	sub	sp, #16
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	4603      	mov	r3, r0
 80128e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80128e6:	79fb      	ldrb	r3, [r7, #7]
 80128e8:	4a08      	ldr	r2, [pc, #32]	@ (801290c <disk_status+0x30>)
 80128ea:	009b      	lsls	r3, r3, #2
 80128ec:	4413      	add	r3, r2
 80128ee:	685b      	ldr	r3, [r3, #4]
 80128f0:	685b      	ldr	r3, [r3, #4]
 80128f2:	79fa      	ldrb	r2, [r7, #7]
 80128f4:	4905      	ldr	r1, [pc, #20]	@ (801290c <disk_status+0x30>)
 80128f6:	440a      	add	r2, r1
 80128f8:	7a12      	ldrb	r2, [r2, #8]
 80128fa:	4610      	mov	r0, r2
 80128fc:	4798      	blx	r3
 80128fe:	4603      	mov	r3, r0
 8012900:	73fb      	strb	r3, [r7, #15]
  return stat;
 8012902:	7bfb      	ldrb	r3, [r7, #15]
}
 8012904:	4618      	mov	r0, r3
 8012906:	3710      	adds	r7, #16
 8012908:	46bd      	mov	sp, r7
 801290a:	bd80      	pop	{r7, pc}
 801290c:	240057d4 	.word	0x240057d4

08012910 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8012910:	b580      	push	{r7, lr}
 8012912:	b084      	sub	sp, #16
 8012914:	af00      	add	r7, sp, #0
 8012916:	4603      	mov	r3, r0
 8012918:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801291a:	2300      	movs	r3, #0
 801291c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801291e:	79fb      	ldrb	r3, [r7, #7]
 8012920:	4a0e      	ldr	r2, [pc, #56]	@ (801295c <disk_initialize+0x4c>)
 8012922:	5cd3      	ldrb	r3, [r2, r3]
 8012924:	2b00      	cmp	r3, #0
 8012926:	d114      	bne.n	8012952 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8012928:	79fb      	ldrb	r3, [r7, #7]
 801292a:	4a0c      	ldr	r2, [pc, #48]	@ (801295c <disk_initialize+0x4c>)
 801292c:	009b      	lsls	r3, r3, #2
 801292e:	4413      	add	r3, r2
 8012930:	685b      	ldr	r3, [r3, #4]
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	79fa      	ldrb	r2, [r7, #7]
 8012936:	4909      	ldr	r1, [pc, #36]	@ (801295c <disk_initialize+0x4c>)
 8012938:	440a      	add	r2, r1
 801293a:	7a12      	ldrb	r2, [r2, #8]
 801293c:	4610      	mov	r0, r2
 801293e:	4798      	blx	r3
 8012940:	4603      	mov	r3, r0
 8012942:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8012944:	7bfb      	ldrb	r3, [r7, #15]
 8012946:	2b00      	cmp	r3, #0
 8012948:	d103      	bne.n	8012952 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 801294a:	79fb      	ldrb	r3, [r7, #7]
 801294c:	4a03      	ldr	r2, [pc, #12]	@ (801295c <disk_initialize+0x4c>)
 801294e:	2101      	movs	r1, #1
 8012950:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8012952:	7bfb      	ldrb	r3, [r7, #15]
}
 8012954:	4618      	mov	r0, r3
 8012956:	3710      	adds	r7, #16
 8012958:	46bd      	mov	sp, r7
 801295a:	bd80      	pop	{r7, pc}
 801295c:	240057d4 	.word	0x240057d4

08012960 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8012960:	b590      	push	{r4, r7, lr}
 8012962:	b087      	sub	sp, #28
 8012964:	af00      	add	r7, sp, #0
 8012966:	60b9      	str	r1, [r7, #8]
 8012968:	607a      	str	r2, [r7, #4]
 801296a:	603b      	str	r3, [r7, #0]
 801296c:	4603      	mov	r3, r0
 801296e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8012970:	7bfb      	ldrb	r3, [r7, #15]
 8012972:	4a0a      	ldr	r2, [pc, #40]	@ (801299c <disk_read+0x3c>)
 8012974:	009b      	lsls	r3, r3, #2
 8012976:	4413      	add	r3, r2
 8012978:	685b      	ldr	r3, [r3, #4]
 801297a:	689c      	ldr	r4, [r3, #8]
 801297c:	7bfb      	ldrb	r3, [r7, #15]
 801297e:	4a07      	ldr	r2, [pc, #28]	@ (801299c <disk_read+0x3c>)
 8012980:	4413      	add	r3, r2
 8012982:	7a18      	ldrb	r0, [r3, #8]
 8012984:	683b      	ldr	r3, [r7, #0]
 8012986:	687a      	ldr	r2, [r7, #4]
 8012988:	68b9      	ldr	r1, [r7, #8]
 801298a:	47a0      	blx	r4
 801298c:	4603      	mov	r3, r0
 801298e:	75fb      	strb	r3, [r7, #23]
  return res;
 8012990:	7dfb      	ldrb	r3, [r7, #23]
}
 8012992:	4618      	mov	r0, r3
 8012994:	371c      	adds	r7, #28
 8012996:	46bd      	mov	sp, r7
 8012998:	bd90      	pop	{r4, r7, pc}
 801299a:	bf00      	nop
 801299c:	240057d4 	.word	0x240057d4

080129a0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80129a0:	b590      	push	{r4, r7, lr}
 80129a2:	b087      	sub	sp, #28
 80129a4:	af00      	add	r7, sp, #0
 80129a6:	60b9      	str	r1, [r7, #8]
 80129a8:	607a      	str	r2, [r7, #4]
 80129aa:	603b      	str	r3, [r7, #0]
 80129ac:	4603      	mov	r3, r0
 80129ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80129b0:	7bfb      	ldrb	r3, [r7, #15]
 80129b2:	4a0a      	ldr	r2, [pc, #40]	@ (80129dc <disk_write+0x3c>)
 80129b4:	009b      	lsls	r3, r3, #2
 80129b6:	4413      	add	r3, r2
 80129b8:	685b      	ldr	r3, [r3, #4]
 80129ba:	68dc      	ldr	r4, [r3, #12]
 80129bc:	7bfb      	ldrb	r3, [r7, #15]
 80129be:	4a07      	ldr	r2, [pc, #28]	@ (80129dc <disk_write+0x3c>)
 80129c0:	4413      	add	r3, r2
 80129c2:	7a18      	ldrb	r0, [r3, #8]
 80129c4:	683b      	ldr	r3, [r7, #0]
 80129c6:	687a      	ldr	r2, [r7, #4]
 80129c8:	68b9      	ldr	r1, [r7, #8]
 80129ca:	47a0      	blx	r4
 80129cc:	4603      	mov	r3, r0
 80129ce:	75fb      	strb	r3, [r7, #23]
  return res;
 80129d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80129d2:	4618      	mov	r0, r3
 80129d4:	371c      	adds	r7, #28
 80129d6:	46bd      	mov	sp, r7
 80129d8:	bd90      	pop	{r4, r7, pc}
 80129da:	bf00      	nop
 80129dc:	240057d4 	.word	0x240057d4

080129e0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80129e0:	b580      	push	{r7, lr}
 80129e2:	b084      	sub	sp, #16
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	4603      	mov	r3, r0
 80129e8:	603a      	str	r2, [r7, #0]
 80129ea:	71fb      	strb	r3, [r7, #7]
 80129ec:	460b      	mov	r3, r1
 80129ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80129f0:	79fb      	ldrb	r3, [r7, #7]
 80129f2:	4a09      	ldr	r2, [pc, #36]	@ (8012a18 <disk_ioctl+0x38>)
 80129f4:	009b      	lsls	r3, r3, #2
 80129f6:	4413      	add	r3, r2
 80129f8:	685b      	ldr	r3, [r3, #4]
 80129fa:	691b      	ldr	r3, [r3, #16]
 80129fc:	79fa      	ldrb	r2, [r7, #7]
 80129fe:	4906      	ldr	r1, [pc, #24]	@ (8012a18 <disk_ioctl+0x38>)
 8012a00:	440a      	add	r2, r1
 8012a02:	7a10      	ldrb	r0, [r2, #8]
 8012a04:	79b9      	ldrb	r1, [r7, #6]
 8012a06:	683a      	ldr	r2, [r7, #0]
 8012a08:	4798      	blx	r3
 8012a0a:	4603      	mov	r3, r0
 8012a0c:	73fb      	strb	r3, [r7, #15]
  return res;
 8012a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a10:	4618      	mov	r0, r3
 8012a12:	3710      	adds	r7, #16
 8012a14:	46bd      	mov	sp, r7
 8012a16:	bd80      	pop	{r7, pc}
 8012a18:	240057d4 	.word	0x240057d4

08012a1c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8012a1c:	b480      	push	{r7}
 8012a1e:	b085      	sub	sp, #20
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	3301      	adds	r3, #1
 8012a28:	781b      	ldrb	r3, [r3, #0]
 8012a2a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8012a2c:	89fb      	ldrh	r3, [r7, #14]
 8012a2e:	021b      	lsls	r3, r3, #8
 8012a30:	b21a      	sxth	r2, r3
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	781b      	ldrb	r3, [r3, #0]
 8012a36:	b21b      	sxth	r3, r3
 8012a38:	4313      	orrs	r3, r2
 8012a3a:	b21b      	sxth	r3, r3
 8012a3c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8012a3e:	89fb      	ldrh	r3, [r7, #14]
}
 8012a40:	4618      	mov	r0, r3
 8012a42:	3714      	adds	r7, #20
 8012a44:	46bd      	mov	sp, r7
 8012a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a4a:	4770      	bx	lr

08012a4c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8012a4c:	b480      	push	{r7}
 8012a4e:	b085      	sub	sp, #20
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	3303      	adds	r3, #3
 8012a58:	781b      	ldrb	r3, [r3, #0]
 8012a5a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	021b      	lsls	r3, r3, #8
 8012a60:	687a      	ldr	r2, [r7, #4]
 8012a62:	3202      	adds	r2, #2
 8012a64:	7812      	ldrb	r2, [r2, #0]
 8012a66:	4313      	orrs	r3, r2
 8012a68:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	021b      	lsls	r3, r3, #8
 8012a6e:	687a      	ldr	r2, [r7, #4]
 8012a70:	3201      	adds	r2, #1
 8012a72:	7812      	ldrb	r2, [r2, #0]
 8012a74:	4313      	orrs	r3, r2
 8012a76:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	021b      	lsls	r3, r3, #8
 8012a7c:	687a      	ldr	r2, [r7, #4]
 8012a7e:	7812      	ldrb	r2, [r2, #0]
 8012a80:	4313      	orrs	r3, r2
 8012a82:	60fb      	str	r3, [r7, #12]
	return rv;
 8012a84:	68fb      	ldr	r3, [r7, #12]
}
 8012a86:	4618      	mov	r0, r3
 8012a88:	3714      	adds	r7, #20
 8012a8a:	46bd      	mov	sp, r7
 8012a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a90:	4770      	bx	lr

08012a92 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8012a92:	b480      	push	{r7}
 8012a94:	b083      	sub	sp, #12
 8012a96:	af00      	add	r7, sp, #0
 8012a98:	6078      	str	r0, [r7, #4]
 8012a9a:	460b      	mov	r3, r1
 8012a9c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	1c5a      	adds	r2, r3, #1
 8012aa2:	607a      	str	r2, [r7, #4]
 8012aa4:	887a      	ldrh	r2, [r7, #2]
 8012aa6:	b2d2      	uxtb	r2, r2
 8012aa8:	701a      	strb	r2, [r3, #0]
 8012aaa:	887b      	ldrh	r3, [r7, #2]
 8012aac:	0a1b      	lsrs	r3, r3, #8
 8012aae:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	1c5a      	adds	r2, r3, #1
 8012ab4:	607a      	str	r2, [r7, #4]
 8012ab6:	887a      	ldrh	r2, [r7, #2]
 8012ab8:	b2d2      	uxtb	r2, r2
 8012aba:	701a      	strb	r2, [r3, #0]
}
 8012abc:	bf00      	nop
 8012abe:	370c      	adds	r7, #12
 8012ac0:	46bd      	mov	sp, r7
 8012ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac6:	4770      	bx	lr

08012ac8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8012ac8:	b480      	push	{r7}
 8012aca:	b083      	sub	sp, #12
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	6078      	str	r0, [r7, #4]
 8012ad0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	1c5a      	adds	r2, r3, #1
 8012ad6:	607a      	str	r2, [r7, #4]
 8012ad8:	683a      	ldr	r2, [r7, #0]
 8012ada:	b2d2      	uxtb	r2, r2
 8012adc:	701a      	strb	r2, [r3, #0]
 8012ade:	683b      	ldr	r3, [r7, #0]
 8012ae0:	0a1b      	lsrs	r3, r3, #8
 8012ae2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	1c5a      	adds	r2, r3, #1
 8012ae8:	607a      	str	r2, [r7, #4]
 8012aea:	683a      	ldr	r2, [r7, #0]
 8012aec:	b2d2      	uxtb	r2, r2
 8012aee:	701a      	strb	r2, [r3, #0]
 8012af0:	683b      	ldr	r3, [r7, #0]
 8012af2:	0a1b      	lsrs	r3, r3, #8
 8012af4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	1c5a      	adds	r2, r3, #1
 8012afa:	607a      	str	r2, [r7, #4]
 8012afc:	683a      	ldr	r2, [r7, #0]
 8012afe:	b2d2      	uxtb	r2, r2
 8012b00:	701a      	strb	r2, [r3, #0]
 8012b02:	683b      	ldr	r3, [r7, #0]
 8012b04:	0a1b      	lsrs	r3, r3, #8
 8012b06:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	1c5a      	adds	r2, r3, #1
 8012b0c:	607a      	str	r2, [r7, #4]
 8012b0e:	683a      	ldr	r2, [r7, #0]
 8012b10:	b2d2      	uxtb	r2, r2
 8012b12:	701a      	strb	r2, [r3, #0]
}
 8012b14:	bf00      	nop
 8012b16:	370c      	adds	r7, #12
 8012b18:	46bd      	mov	sp, r7
 8012b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b1e:	4770      	bx	lr

08012b20 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8012b20:	b480      	push	{r7}
 8012b22:	b087      	sub	sp, #28
 8012b24:	af00      	add	r7, sp, #0
 8012b26:	60f8      	str	r0, [r7, #12]
 8012b28:	60b9      	str	r1, [r7, #8]
 8012b2a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8012b30:	68bb      	ldr	r3, [r7, #8]
 8012b32:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d00d      	beq.n	8012b56 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8012b3a:	693a      	ldr	r2, [r7, #16]
 8012b3c:	1c53      	adds	r3, r2, #1
 8012b3e:	613b      	str	r3, [r7, #16]
 8012b40:	697b      	ldr	r3, [r7, #20]
 8012b42:	1c59      	adds	r1, r3, #1
 8012b44:	6179      	str	r1, [r7, #20]
 8012b46:	7812      	ldrb	r2, [r2, #0]
 8012b48:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	3b01      	subs	r3, #1
 8012b4e:	607b      	str	r3, [r7, #4]
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d1f1      	bne.n	8012b3a <mem_cpy+0x1a>
	}
}
 8012b56:	bf00      	nop
 8012b58:	371c      	adds	r7, #28
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b60:	4770      	bx	lr

08012b62 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8012b62:	b480      	push	{r7}
 8012b64:	b087      	sub	sp, #28
 8012b66:	af00      	add	r7, sp, #0
 8012b68:	60f8      	str	r0, [r7, #12]
 8012b6a:	60b9      	str	r1, [r7, #8]
 8012b6c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8012b72:	697b      	ldr	r3, [r7, #20]
 8012b74:	1c5a      	adds	r2, r3, #1
 8012b76:	617a      	str	r2, [r7, #20]
 8012b78:	68ba      	ldr	r2, [r7, #8]
 8012b7a:	b2d2      	uxtb	r2, r2
 8012b7c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	3b01      	subs	r3, #1
 8012b82:	607b      	str	r3, [r7, #4]
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d1f3      	bne.n	8012b72 <mem_set+0x10>
}
 8012b8a:	bf00      	nop
 8012b8c:	bf00      	nop
 8012b8e:	371c      	adds	r7, #28
 8012b90:	46bd      	mov	sp, r7
 8012b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b96:	4770      	bx	lr

08012b98 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8012b98:	b480      	push	{r7}
 8012b9a:	b089      	sub	sp, #36	@ 0x24
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	60f8      	str	r0, [r7, #12]
 8012ba0:	60b9      	str	r1, [r7, #8]
 8012ba2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	61fb      	str	r3, [r7, #28]
 8012ba8:	68bb      	ldr	r3, [r7, #8]
 8012baa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8012bac:	2300      	movs	r3, #0
 8012bae:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8012bb0:	69fb      	ldr	r3, [r7, #28]
 8012bb2:	1c5a      	adds	r2, r3, #1
 8012bb4:	61fa      	str	r2, [r7, #28]
 8012bb6:	781b      	ldrb	r3, [r3, #0]
 8012bb8:	4619      	mov	r1, r3
 8012bba:	69bb      	ldr	r3, [r7, #24]
 8012bbc:	1c5a      	adds	r2, r3, #1
 8012bbe:	61ba      	str	r2, [r7, #24]
 8012bc0:	781b      	ldrb	r3, [r3, #0]
 8012bc2:	1acb      	subs	r3, r1, r3
 8012bc4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	3b01      	subs	r3, #1
 8012bca:	607b      	str	r3, [r7, #4]
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d002      	beq.n	8012bd8 <mem_cmp+0x40>
 8012bd2:	697b      	ldr	r3, [r7, #20]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d0eb      	beq.n	8012bb0 <mem_cmp+0x18>

	return r;
 8012bd8:	697b      	ldr	r3, [r7, #20]
}
 8012bda:	4618      	mov	r0, r3
 8012bdc:	3724      	adds	r7, #36	@ 0x24
 8012bde:	46bd      	mov	sp, r7
 8012be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012be4:	4770      	bx	lr

08012be6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8012be6:	b480      	push	{r7}
 8012be8:	b083      	sub	sp, #12
 8012bea:	af00      	add	r7, sp, #0
 8012bec:	6078      	str	r0, [r7, #4]
 8012bee:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8012bf0:	e002      	b.n	8012bf8 <chk_chr+0x12>
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	3301      	adds	r3, #1
 8012bf6:	607b      	str	r3, [r7, #4]
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	781b      	ldrb	r3, [r3, #0]
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d005      	beq.n	8012c0c <chk_chr+0x26>
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	781b      	ldrb	r3, [r3, #0]
 8012c04:	461a      	mov	r2, r3
 8012c06:	683b      	ldr	r3, [r7, #0]
 8012c08:	4293      	cmp	r3, r2
 8012c0a:	d1f2      	bne.n	8012bf2 <chk_chr+0xc>
	return *str;
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	781b      	ldrb	r3, [r3, #0]
}
 8012c10:	4618      	mov	r0, r3
 8012c12:	370c      	adds	r7, #12
 8012c14:	46bd      	mov	sp, r7
 8012c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c1a:	4770      	bx	lr

08012c1c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012c1c:	b480      	push	{r7}
 8012c1e:	b085      	sub	sp, #20
 8012c20:	af00      	add	r7, sp, #0
 8012c22:	6078      	str	r0, [r7, #4]
 8012c24:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012c26:	2300      	movs	r3, #0
 8012c28:	60bb      	str	r3, [r7, #8]
 8012c2a:	68bb      	ldr	r3, [r7, #8]
 8012c2c:	60fb      	str	r3, [r7, #12]
 8012c2e:	e029      	b.n	8012c84 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8012c30:	4a27      	ldr	r2, [pc, #156]	@ (8012cd0 <chk_lock+0xb4>)
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	011b      	lsls	r3, r3, #4
 8012c36:	4413      	add	r3, r2
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d01d      	beq.n	8012c7a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012c3e:	4a24      	ldr	r2, [pc, #144]	@ (8012cd0 <chk_lock+0xb4>)
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	011b      	lsls	r3, r3, #4
 8012c44:	4413      	add	r3, r2
 8012c46:	681a      	ldr	r2, [r3, #0]
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	429a      	cmp	r2, r3
 8012c4e:	d116      	bne.n	8012c7e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8012c50:	4a1f      	ldr	r2, [pc, #124]	@ (8012cd0 <chk_lock+0xb4>)
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	011b      	lsls	r3, r3, #4
 8012c56:	4413      	add	r3, r2
 8012c58:	3304      	adds	r3, #4
 8012c5a:	681a      	ldr	r2, [r3, #0]
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012c60:	429a      	cmp	r2, r3
 8012c62:	d10c      	bne.n	8012c7e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012c64:	4a1a      	ldr	r2, [pc, #104]	@ (8012cd0 <chk_lock+0xb4>)
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	011b      	lsls	r3, r3, #4
 8012c6a:	4413      	add	r3, r2
 8012c6c:	3308      	adds	r3, #8
 8012c6e:	681a      	ldr	r2, [r3, #0]
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8012c74:	429a      	cmp	r2, r3
 8012c76:	d102      	bne.n	8012c7e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012c78:	e007      	b.n	8012c8a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8012c7a:	2301      	movs	r3, #1
 8012c7c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	3301      	adds	r3, #1
 8012c82:	60fb      	str	r3, [r7, #12]
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	2b01      	cmp	r3, #1
 8012c88:	d9d2      	bls.n	8012c30 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	2b02      	cmp	r3, #2
 8012c8e:	d109      	bne.n	8012ca4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8012c90:	68bb      	ldr	r3, [r7, #8]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d102      	bne.n	8012c9c <chk_lock+0x80>
 8012c96:	683b      	ldr	r3, [r7, #0]
 8012c98:	2b02      	cmp	r3, #2
 8012c9a:	d101      	bne.n	8012ca0 <chk_lock+0x84>
 8012c9c:	2300      	movs	r3, #0
 8012c9e:	e010      	b.n	8012cc2 <chk_lock+0xa6>
 8012ca0:	2312      	movs	r3, #18
 8012ca2:	e00e      	b.n	8012cc2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8012ca4:	683b      	ldr	r3, [r7, #0]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d108      	bne.n	8012cbc <chk_lock+0xa0>
 8012caa:	4a09      	ldr	r2, [pc, #36]	@ (8012cd0 <chk_lock+0xb4>)
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	011b      	lsls	r3, r3, #4
 8012cb0:	4413      	add	r3, r2
 8012cb2:	330c      	adds	r3, #12
 8012cb4:	881b      	ldrh	r3, [r3, #0]
 8012cb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012cba:	d101      	bne.n	8012cc0 <chk_lock+0xa4>
 8012cbc:	2310      	movs	r3, #16
 8012cbe:	e000      	b.n	8012cc2 <chk_lock+0xa6>
 8012cc0:	2300      	movs	r3, #0
}
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	3714      	adds	r7, #20
 8012cc6:	46bd      	mov	sp, r7
 8012cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ccc:	4770      	bx	lr
 8012cce:	bf00      	nop
 8012cd0:	240055b4 	.word	0x240055b4

08012cd4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8012cd4:	b480      	push	{r7}
 8012cd6:	b083      	sub	sp, #12
 8012cd8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012cda:	2300      	movs	r3, #0
 8012cdc:	607b      	str	r3, [r7, #4]
 8012cde:	e002      	b.n	8012ce6 <enq_lock+0x12>
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	3301      	adds	r3, #1
 8012ce4:	607b      	str	r3, [r7, #4]
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	2b01      	cmp	r3, #1
 8012cea:	d806      	bhi.n	8012cfa <enq_lock+0x26>
 8012cec:	4a09      	ldr	r2, [pc, #36]	@ (8012d14 <enq_lock+0x40>)
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	011b      	lsls	r3, r3, #4
 8012cf2:	4413      	add	r3, r2
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d1f2      	bne.n	8012ce0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	2b02      	cmp	r3, #2
 8012cfe:	bf14      	ite	ne
 8012d00:	2301      	movne	r3, #1
 8012d02:	2300      	moveq	r3, #0
 8012d04:	b2db      	uxtb	r3, r3
}
 8012d06:	4618      	mov	r0, r3
 8012d08:	370c      	adds	r7, #12
 8012d0a:	46bd      	mov	sp, r7
 8012d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d10:	4770      	bx	lr
 8012d12:	bf00      	nop
 8012d14:	240055b4 	.word	0x240055b4

08012d18 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012d18:	b480      	push	{r7}
 8012d1a:	b085      	sub	sp, #20
 8012d1c:	af00      	add	r7, sp, #0
 8012d1e:	6078      	str	r0, [r7, #4]
 8012d20:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8012d22:	2300      	movs	r3, #0
 8012d24:	60fb      	str	r3, [r7, #12]
 8012d26:	e01f      	b.n	8012d68 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8012d28:	4a41      	ldr	r2, [pc, #260]	@ (8012e30 <inc_lock+0x118>)
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	011b      	lsls	r3, r3, #4
 8012d2e:	4413      	add	r3, r2
 8012d30:	681a      	ldr	r2, [r3, #0]
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	429a      	cmp	r2, r3
 8012d38:	d113      	bne.n	8012d62 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8012d3a:	4a3d      	ldr	r2, [pc, #244]	@ (8012e30 <inc_lock+0x118>)
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	011b      	lsls	r3, r3, #4
 8012d40:	4413      	add	r3, r2
 8012d42:	3304      	adds	r3, #4
 8012d44:	681a      	ldr	r2, [r3, #0]
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8012d4a:	429a      	cmp	r2, r3
 8012d4c:	d109      	bne.n	8012d62 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8012d4e:	4a38      	ldr	r2, [pc, #224]	@ (8012e30 <inc_lock+0x118>)
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	011b      	lsls	r3, r3, #4
 8012d54:	4413      	add	r3, r2
 8012d56:	3308      	adds	r3, #8
 8012d58:	681a      	ldr	r2, [r3, #0]
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8012d5e:	429a      	cmp	r2, r3
 8012d60:	d006      	beq.n	8012d70 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	3301      	adds	r3, #1
 8012d66:	60fb      	str	r3, [r7, #12]
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	2b01      	cmp	r3, #1
 8012d6c:	d9dc      	bls.n	8012d28 <inc_lock+0x10>
 8012d6e:	e000      	b.n	8012d72 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8012d70:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	2b02      	cmp	r3, #2
 8012d76:	d132      	bne.n	8012dde <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012d78:	2300      	movs	r3, #0
 8012d7a:	60fb      	str	r3, [r7, #12]
 8012d7c:	e002      	b.n	8012d84 <inc_lock+0x6c>
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	3301      	adds	r3, #1
 8012d82:	60fb      	str	r3, [r7, #12]
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	2b01      	cmp	r3, #1
 8012d88:	d806      	bhi.n	8012d98 <inc_lock+0x80>
 8012d8a:	4a29      	ldr	r2, [pc, #164]	@ (8012e30 <inc_lock+0x118>)
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	011b      	lsls	r3, r3, #4
 8012d90:	4413      	add	r3, r2
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d1f2      	bne.n	8012d7e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	2b02      	cmp	r3, #2
 8012d9c:	d101      	bne.n	8012da2 <inc_lock+0x8a>
 8012d9e:	2300      	movs	r3, #0
 8012da0:	e040      	b.n	8012e24 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	681a      	ldr	r2, [r3, #0]
 8012da6:	4922      	ldr	r1, [pc, #136]	@ (8012e30 <inc_lock+0x118>)
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	011b      	lsls	r3, r3, #4
 8012dac:	440b      	add	r3, r1
 8012dae:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	689a      	ldr	r2, [r3, #8]
 8012db4:	491e      	ldr	r1, [pc, #120]	@ (8012e30 <inc_lock+0x118>)
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	011b      	lsls	r3, r3, #4
 8012dba:	440b      	add	r3, r1
 8012dbc:	3304      	adds	r3, #4
 8012dbe:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	695a      	ldr	r2, [r3, #20]
 8012dc4:	491a      	ldr	r1, [pc, #104]	@ (8012e30 <inc_lock+0x118>)
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	011b      	lsls	r3, r3, #4
 8012dca:	440b      	add	r3, r1
 8012dcc:	3308      	adds	r3, #8
 8012dce:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8012dd0:	4a17      	ldr	r2, [pc, #92]	@ (8012e30 <inc_lock+0x118>)
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	011b      	lsls	r3, r3, #4
 8012dd6:	4413      	add	r3, r2
 8012dd8:	330c      	adds	r3, #12
 8012dda:	2200      	movs	r2, #0
 8012ddc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8012dde:	683b      	ldr	r3, [r7, #0]
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d009      	beq.n	8012df8 <inc_lock+0xe0>
 8012de4:	4a12      	ldr	r2, [pc, #72]	@ (8012e30 <inc_lock+0x118>)
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	011b      	lsls	r3, r3, #4
 8012dea:	4413      	add	r3, r2
 8012dec:	330c      	adds	r3, #12
 8012dee:	881b      	ldrh	r3, [r3, #0]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d001      	beq.n	8012df8 <inc_lock+0xe0>
 8012df4:	2300      	movs	r3, #0
 8012df6:	e015      	b.n	8012e24 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8012df8:	683b      	ldr	r3, [r7, #0]
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d108      	bne.n	8012e10 <inc_lock+0xf8>
 8012dfe:	4a0c      	ldr	r2, [pc, #48]	@ (8012e30 <inc_lock+0x118>)
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	011b      	lsls	r3, r3, #4
 8012e04:	4413      	add	r3, r2
 8012e06:	330c      	adds	r3, #12
 8012e08:	881b      	ldrh	r3, [r3, #0]
 8012e0a:	3301      	adds	r3, #1
 8012e0c:	b29a      	uxth	r2, r3
 8012e0e:	e001      	b.n	8012e14 <inc_lock+0xfc>
 8012e10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8012e14:	4906      	ldr	r1, [pc, #24]	@ (8012e30 <inc_lock+0x118>)
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	011b      	lsls	r3, r3, #4
 8012e1a:	440b      	add	r3, r1
 8012e1c:	330c      	adds	r3, #12
 8012e1e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	3301      	adds	r3, #1
}
 8012e24:	4618      	mov	r0, r3
 8012e26:	3714      	adds	r7, #20
 8012e28:	46bd      	mov	sp, r7
 8012e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e2e:	4770      	bx	lr
 8012e30:	240055b4 	.word	0x240055b4

08012e34 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8012e34:	b480      	push	{r7}
 8012e36:	b085      	sub	sp, #20
 8012e38:	af00      	add	r7, sp, #0
 8012e3a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	3b01      	subs	r3, #1
 8012e40:	607b      	str	r3, [r7, #4]
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	2b01      	cmp	r3, #1
 8012e46:	d825      	bhi.n	8012e94 <dec_lock+0x60>
		n = Files[i].ctr;
 8012e48:	4a17      	ldr	r2, [pc, #92]	@ (8012ea8 <dec_lock+0x74>)
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	011b      	lsls	r3, r3, #4
 8012e4e:	4413      	add	r3, r2
 8012e50:	330c      	adds	r3, #12
 8012e52:	881b      	ldrh	r3, [r3, #0]
 8012e54:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8012e56:	89fb      	ldrh	r3, [r7, #14]
 8012e58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012e5c:	d101      	bne.n	8012e62 <dec_lock+0x2e>
 8012e5e:	2300      	movs	r3, #0
 8012e60:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8012e62:	89fb      	ldrh	r3, [r7, #14]
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d002      	beq.n	8012e6e <dec_lock+0x3a>
 8012e68:	89fb      	ldrh	r3, [r7, #14]
 8012e6a:	3b01      	subs	r3, #1
 8012e6c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8012e6e:	4a0e      	ldr	r2, [pc, #56]	@ (8012ea8 <dec_lock+0x74>)
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	011b      	lsls	r3, r3, #4
 8012e74:	4413      	add	r3, r2
 8012e76:	330c      	adds	r3, #12
 8012e78:	89fa      	ldrh	r2, [r7, #14]
 8012e7a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8012e7c:	89fb      	ldrh	r3, [r7, #14]
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d105      	bne.n	8012e8e <dec_lock+0x5a>
 8012e82:	4a09      	ldr	r2, [pc, #36]	@ (8012ea8 <dec_lock+0x74>)
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	011b      	lsls	r3, r3, #4
 8012e88:	4413      	add	r3, r2
 8012e8a:	2200      	movs	r2, #0
 8012e8c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8012e8e:	2300      	movs	r3, #0
 8012e90:	737b      	strb	r3, [r7, #13]
 8012e92:	e001      	b.n	8012e98 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8012e94:	2302      	movs	r3, #2
 8012e96:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8012e98:	7b7b      	ldrb	r3, [r7, #13]
}
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	3714      	adds	r7, #20
 8012e9e:	46bd      	mov	sp, r7
 8012ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ea4:	4770      	bx	lr
 8012ea6:	bf00      	nop
 8012ea8:	240055b4 	.word	0x240055b4

08012eac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8012eac:	b480      	push	{r7}
 8012eae:	b085      	sub	sp, #20
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8012eb4:	2300      	movs	r3, #0
 8012eb6:	60fb      	str	r3, [r7, #12]
 8012eb8:	e010      	b.n	8012edc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8012eba:	4a0d      	ldr	r2, [pc, #52]	@ (8012ef0 <clear_lock+0x44>)
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	011b      	lsls	r3, r3, #4
 8012ec0:	4413      	add	r3, r2
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	687a      	ldr	r2, [r7, #4]
 8012ec6:	429a      	cmp	r2, r3
 8012ec8:	d105      	bne.n	8012ed6 <clear_lock+0x2a>
 8012eca:	4a09      	ldr	r2, [pc, #36]	@ (8012ef0 <clear_lock+0x44>)
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	011b      	lsls	r3, r3, #4
 8012ed0:	4413      	add	r3, r2
 8012ed2:	2200      	movs	r2, #0
 8012ed4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	3301      	adds	r3, #1
 8012eda:	60fb      	str	r3, [r7, #12]
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	2b01      	cmp	r3, #1
 8012ee0:	d9eb      	bls.n	8012eba <clear_lock+0xe>
	}
}
 8012ee2:	bf00      	nop
 8012ee4:	bf00      	nop
 8012ee6:	3714      	adds	r7, #20
 8012ee8:	46bd      	mov	sp, r7
 8012eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eee:	4770      	bx	lr
 8012ef0:	240055b4 	.word	0x240055b4

08012ef4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8012ef4:	b580      	push	{r7, lr}
 8012ef6:	b086      	sub	sp, #24
 8012ef8:	af00      	add	r7, sp, #0
 8012efa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8012efc:	2300      	movs	r3, #0
 8012efe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	78db      	ldrb	r3, [r3, #3]
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d034      	beq.n	8012f72 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012f0c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	7858      	ldrb	r0, [r3, #1]
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8012f18:	2301      	movs	r3, #1
 8012f1a:	697a      	ldr	r2, [r7, #20]
 8012f1c:	f7ff fd40 	bl	80129a0 <disk_write>
 8012f20:	4603      	mov	r3, r0
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d002      	beq.n	8012f2c <sync_window+0x38>
			res = FR_DISK_ERR;
 8012f26:	2301      	movs	r3, #1
 8012f28:	73fb      	strb	r3, [r7, #15]
 8012f2a:	e022      	b.n	8012f72 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	2200      	movs	r2, #0
 8012f30:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f36:	697a      	ldr	r2, [r7, #20]
 8012f38:	1ad2      	subs	r2, r2, r3
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f3e:	429a      	cmp	r2, r3
 8012f40:	d217      	bcs.n	8012f72 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	789b      	ldrb	r3, [r3, #2]
 8012f46:	613b      	str	r3, [r7, #16]
 8012f48:	e010      	b.n	8012f6c <sync_window+0x78>
					wsect += fs->fsize;
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f4e:	697a      	ldr	r2, [r7, #20]
 8012f50:	4413      	add	r3, r2
 8012f52:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	7858      	ldrb	r0, [r3, #1]
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8012f5e:	2301      	movs	r3, #1
 8012f60:	697a      	ldr	r2, [r7, #20]
 8012f62:	f7ff fd1d 	bl	80129a0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012f66:	693b      	ldr	r3, [r7, #16]
 8012f68:	3b01      	subs	r3, #1
 8012f6a:	613b      	str	r3, [r7, #16]
 8012f6c:	693b      	ldr	r3, [r7, #16]
 8012f6e:	2b01      	cmp	r3, #1
 8012f70:	d8eb      	bhi.n	8012f4a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8012f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f74:	4618      	mov	r0, r3
 8012f76:	3718      	adds	r7, #24
 8012f78:	46bd      	mov	sp, r7
 8012f7a:	bd80      	pop	{r7, pc}

08012f7c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8012f7c:	b580      	push	{r7, lr}
 8012f7e:	b084      	sub	sp, #16
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	6078      	str	r0, [r7, #4]
 8012f84:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8012f86:	2300      	movs	r3, #0
 8012f88:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012f8e:	683a      	ldr	r2, [r7, #0]
 8012f90:	429a      	cmp	r2, r3
 8012f92:	d01b      	beq.n	8012fcc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8012f94:	6878      	ldr	r0, [r7, #4]
 8012f96:	f7ff ffad 	bl	8012ef4 <sync_window>
 8012f9a:	4603      	mov	r3, r0
 8012f9c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8012f9e:	7bfb      	ldrb	r3, [r7, #15]
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d113      	bne.n	8012fcc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	7858      	ldrb	r0, [r3, #1]
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8012fae:	2301      	movs	r3, #1
 8012fb0:	683a      	ldr	r2, [r7, #0]
 8012fb2:	f7ff fcd5 	bl	8012960 <disk_read>
 8012fb6:	4603      	mov	r3, r0
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d004      	beq.n	8012fc6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8012fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8012fc0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8012fc2:	2301      	movs	r3, #1
 8012fc4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	683a      	ldr	r2, [r7, #0]
 8012fca:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	return res;
 8012fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fce:	4618      	mov	r0, r3
 8012fd0:	3710      	adds	r7, #16
 8012fd2:	46bd      	mov	sp, r7
 8012fd4:	bd80      	pop	{r7, pc}
	...

08012fd8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8012fd8:	b580      	push	{r7, lr}
 8012fda:	b084      	sub	sp, #16
 8012fdc:	af00      	add	r7, sp, #0
 8012fde:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8012fe0:	6878      	ldr	r0, [r7, #4]
 8012fe2:	f7ff ff87 	bl	8012ef4 <sync_window>
 8012fe6:	4603      	mov	r3, r0
 8012fe8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012fea:	7bfb      	ldrb	r3, [r7, #15]
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d159      	bne.n	80130a4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	781b      	ldrb	r3, [r3, #0]
 8012ff4:	2b03      	cmp	r3, #3
 8012ff6:	d149      	bne.n	801308c <sync_fs+0xb4>
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	791b      	ldrb	r3, [r3, #4]
 8012ffc:	2b01      	cmp	r3, #1
 8012ffe:	d145      	bne.n	801308c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	899b      	ldrh	r3, [r3, #12]
 801300a:	461a      	mov	r2, r3
 801300c:	2100      	movs	r1, #0
 801300e:	f7ff fda8 	bl	8012b62 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	333c      	adds	r3, #60	@ 0x3c
 8013016:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801301a:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801301e:	4618      	mov	r0, r3
 8013020:	f7ff fd37 	bl	8012a92 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	333c      	adds	r3, #60	@ 0x3c
 8013028:	4921      	ldr	r1, [pc, #132]	@ (80130b0 <sync_fs+0xd8>)
 801302a:	4618      	mov	r0, r3
 801302c:	f7ff fd4c 	bl	8012ac8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	333c      	adds	r3, #60	@ 0x3c
 8013034:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8013038:	491e      	ldr	r1, [pc, #120]	@ (80130b4 <sync_fs+0xdc>)
 801303a:	4618      	mov	r0, r3
 801303c:	f7ff fd44 	bl	8012ac8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	333c      	adds	r3, #60	@ 0x3c
 8013044:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	699b      	ldr	r3, [r3, #24]
 801304c:	4619      	mov	r1, r3
 801304e:	4610      	mov	r0, r2
 8013050:	f7ff fd3a 	bl	8012ac8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	333c      	adds	r3, #60	@ 0x3c
 8013058:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	695b      	ldr	r3, [r3, #20]
 8013060:	4619      	mov	r1, r3
 8013062:	4610      	mov	r0, r2
 8013064:	f7ff fd30 	bl	8012ac8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801306c:	1c5a      	adds	r2, r3, #1
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	639a      	str	r2, [r3, #56]	@ 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	7858      	ldrb	r0, [r3, #1]
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013080:	2301      	movs	r3, #1
 8013082:	f7ff fc8d 	bl	80129a0 <disk_write>
			fs->fsi_flag = 0;
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	2200      	movs	r2, #0
 801308a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	785b      	ldrb	r3, [r3, #1]
 8013090:	2200      	movs	r2, #0
 8013092:	2100      	movs	r1, #0
 8013094:	4618      	mov	r0, r3
 8013096:	f7ff fca3 	bl	80129e0 <disk_ioctl>
 801309a:	4603      	mov	r3, r0
 801309c:	2b00      	cmp	r3, #0
 801309e:	d001      	beq.n	80130a4 <sync_fs+0xcc>
 80130a0:	2301      	movs	r3, #1
 80130a2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80130a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80130a6:	4618      	mov	r0, r3
 80130a8:	3710      	adds	r7, #16
 80130aa:	46bd      	mov	sp, r7
 80130ac:	bd80      	pop	{r7, pc}
 80130ae:	bf00      	nop
 80130b0:	41615252 	.word	0x41615252
 80130b4:	61417272 	.word	0x61417272

080130b8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80130b8:	b480      	push	{r7}
 80130ba:	b083      	sub	sp, #12
 80130bc:	af00      	add	r7, sp, #0
 80130be:	6078      	str	r0, [r7, #4]
 80130c0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80130c2:	683b      	ldr	r3, [r7, #0]
 80130c4:	3b02      	subs	r3, #2
 80130c6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	6a1b      	ldr	r3, [r3, #32]
 80130cc:	3b02      	subs	r3, #2
 80130ce:	683a      	ldr	r2, [r7, #0]
 80130d0:	429a      	cmp	r2, r3
 80130d2:	d301      	bcc.n	80130d8 <clust2sect+0x20>
 80130d4:	2300      	movs	r3, #0
 80130d6:	e008      	b.n	80130ea <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	895b      	ldrh	r3, [r3, #10]
 80130dc:	461a      	mov	r2, r3
 80130de:	683b      	ldr	r3, [r7, #0]
 80130e0:	fb03 f202 	mul.w	r2, r3, r2
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80130e8:	4413      	add	r3, r2
}
 80130ea:	4618      	mov	r0, r3
 80130ec:	370c      	adds	r7, #12
 80130ee:	46bd      	mov	sp, r7
 80130f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130f4:	4770      	bx	lr

080130f6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80130f6:	b580      	push	{r7, lr}
 80130f8:	b086      	sub	sp, #24
 80130fa:	af00      	add	r7, sp, #0
 80130fc:	6078      	str	r0, [r7, #4]
 80130fe:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8013106:	683b      	ldr	r3, [r7, #0]
 8013108:	2b01      	cmp	r3, #1
 801310a:	d904      	bls.n	8013116 <get_fat+0x20>
 801310c:	693b      	ldr	r3, [r7, #16]
 801310e:	6a1b      	ldr	r3, [r3, #32]
 8013110:	683a      	ldr	r2, [r7, #0]
 8013112:	429a      	cmp	r2, r3
 8013114:	d302      	bcc.n	801311c <get_fat+0x26>
		val = 1;	/* Internal error */
 8013116:	2301      	movs	r3, #1
 8013118:	617b      	str	r3, [r7, #20]
 801311a:	e0ba      	b.n	8013292 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801311c:	f04f 33ff 	mov.w	r3, #4294967295
 8013120:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8013122:	693b      	ldr	r3, [r7, #16]
 8013124:	781b      	ldrb	r3, [r3, #0]
 8013126:	2b03      	cmp	r3, #3
 8013128:	f000 8082 	beq.w	8013230 <get_fat+0x13a>
 801312c:	2b03      	cmp	r3, #3
 801312e:	f300 80a6 	bgt.w	801327e <get_fat+0x188>
 8013132:	2b01      	cmp	r3, #1
 8013134:	d002      	beq.n	801313c <get_fat+0x46>
 8013136:	2b02      	cmp	r3, #2
 8013138:	d055      	beq.n	80131e6 <get_fat+0xf0>
 801313a:	e0a0      	b.n	801327e <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801313c:	683b      	ldr	r3, [r7, #0]
 801313e:	60fb      	str	r3, [r7, #12]
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	085b      	lsrs	r3, r3, #1
 8013144:	68fa      	ldr	r2, [r7, #12]
 8013146:	4413      	add	r3, r2
 8013148:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801314a:	693b      	ldr	r3, [r7, #16]
 801314c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801314e:	693b      	ldr	r3, [r7, #16]
 8013150:	899b      	ldrh	r3, [r3, #12]
 8013152:	4619      	mov	r1, r3
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	fbb3 f3f1 	udiv	r3, r3, r1
 801315a:	4413      	add	r3, r2
 801315c:	4619      	mov	r1, r3
 801315e:	6938      	ldr	r0, [r7, #16]
 8013160:	f7ff ff0c 	bl	8012f7c <move_window>
 8013164:	4603      	mov	r3, r0
 8013166:	2b00      	cmp	r3, #0
 8013168:	f040 808c 	bne.w	8013284 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	1c5a      	adds	r2, r3, #1
 8013170:	60fa      	str	r2, [r7, #12]
 8013172:	693a      	ldr	r2, [r7, #16]
 8013174:	8992      	ldrh	r2, [r2, #12]
 8013176:	fbb3 f1f2 	udiv	r1, r3, r2
 801317a:	fb01 f202 	mul.w	r2, r1, r2
 801317e:	1a9b      	subs	r3, r3, r2
 8013180:	693a      	ldr	r2, [r7, #16]
 8013182:	4413      	add	r3, r2
 8013184:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013188:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801318a:	693b      	ldr	r3, [r7, #16]
 801318c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801318e:	693b      	ldr	r3, [r7, #16]
 8013190:	899b      	ldrh	r3, [r3, #12]
 8013192:	4619      	mov	r1, r3
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	fbb3 f3f1 	udiv	r3, r3, r1
 801319a:	4413      	add	r3, r2
 801319c:	4619      	mov	r1, r3
 801319e:	6938      	ldr	r0, [r7, #16]
 80131a0:	f7ff feec 	bl	8012f7c <move_window>
 80131a4:	4603      	mov	r3, r0
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d16e      	bne.n	8013288 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 80131aa:	693b      	ldr	r3, [r7, #16]
 80131ac:	899b      	ldrh	r3, [r3, #12]
 80131ae:	461a      	mov	r2, r3
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80131b6:	fb01 f202 	mul.w	r2, r1, r2
 80131ba:	1a9b      	subs	r3, r3, r2
 80131bc:	693a      	ldr	r2, [r7, #16]
 80131be:	4413      	add	r3, r2
 80131c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80131c4:	021b      	lsls	r3, r3, #8
 80131c6:	68ba      	ldr	r2, [r7, #8]
 80131c8:	4313      	orrs	r3, r2
 80131ca:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80131cc:	683b      	ldr	r3, [r7, #0]
 80131ce:	f003 0301 	and.w	r3, r3, #1
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d002      	beq.n	80131dc <get_fat+0xe6>
 80131d6:	68bb      	ldr	r3, [r7, #8]
 80131d8:	091b      	lsrs	r3, r3, #4
 80131da:	e002      	b.n	80131e2 <get_fat+0xec>
 80131dc:	68bb      	ldr	r3, [r7, #8]
 80131de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80131e2:	617b      	str	r3, [r7, #20]
			break;
 80131e4:	e055      	b.n	8013292 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80131e6:	693b      	ldr	r3, [r7, #16]
 80131e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80131ea:	693b      	ldr	r3, [r7, #16]
 80131ec:	899b      	ldrh	r3, [r3, #12]
 80131ee:	085b      	lsrs	r3, r3, #1
 80131f0:	b29b      	uxth	r3, r3
 80131f2:	4619      	mov	r1, r3
 80131f4:	683b      	ldr	r3, [r7, #0]
 80131f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80131fa:	4413      	add	r3, r2
 80131fc:	4619      	mov	r1, r3
 80131fe:	6938      	ldr	r0, [r7, #16]
 8013200:	f7ff febc 	bl	8012f7c <move_window>
 8013204:	4603      	mov	r3, r0
 8013206:	2b00      	cmp	r3, #0
 8013208:	d140      	bne.n	801328c <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801320a:	693b      	ldr	r3, [r7, #16]
 801320c:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8013210:	683b      	ldr	r3, [r7, #0]
 8013212:	005b      	lsls	r3, r3, #1
 8013214:	693a      	ldr	r2, [r7, #16]
 8013216:	8992      	ldrh	r2, [r2, #12]
 8013218:	fbb3 f0f2 	udiv	r0, r3, r2
 801321c:	fb00 f202 	mul.w	r2, r0, r2
 8013220:	1a9b      	subs	r3, r3, r2
 8013222:	440b      	add	r3, r1
 8013224:	4618      	mov	r0, r3
 8013226:	f7ff fbf9 	bl	8012a1c <ld_word>
 801322a:	4603      	mov	r3, r0
 801322c:	617b      	str	r3, [r7, #20]
			break;
 801322e:	e030      	b.n	8013292 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013230:	693b      	ldr	r3, [r7, #16]
 8013232:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013234:	693b      	ldr	r3, [r7, #16]
 8013236:	899b      	ldrh	r3, [r3, #12]
 8013238:	089b      	lsrs	r3, r3, #2
 801323a:	b29b      	uxth	r3, r3
 801323c:	4619      	mov	r1, r3
 801323e:	683b      	ldr	r3, [r7, #0]
 8013240:	fbb3 f3f1 	udiv	r3, r3, r1
 8013244:	4413      	add	r3, r2
 8013246:	4619      	mov	r1, r3
 8013248:	6938      	ldr	r0, [r7, #16]
 801324a:	f7ff fe97 	bl	8012f7c <move_window>
 801324e:	4603      	mov	r3, r0
 8013250:	2b00      	cmp	r3, #0
 8013252:	d11d      	bne.n	8013290 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8013254:	693b      	ldr	r3, [r7, #16]
 8013256:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 801325a:	683b      	ldr	r3, [r7, #0]
 801325c:	009b      	lsls	r3, r3, #2
 801325e:	693a      	ldr	r2, [r7, #16]
 8013260:	8992      	ldrh	r2, [r2, #12]
 8013262:	fbb3 f0f2 	udiv	r0, r3, r2
 8013266:	fb00 f202 	mul.w	r2, r0, r2
 801326a:	1a9b      	subs	r3, r3, r2
 801326c:	440b      	add	r3, r1
 801326e:	4618      	mov	r0, r3
 8013270:	f7ff fbec 	bl	8012a4c <ld_dword>
 8013274:	4603      	mov	r3, r0
 8013276:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801327a:	617b      	str	r3, [r7, #20]
			break;
 801327c:	e009      	b.n	8013292 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801327e:	2301      	movs	r3, #1
 8013280:	617b      	str	r3, [r7, #20]
 8013282:	e006      	b.n	8013292 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013284:	bf00      	nop
 8013286:	e004      	b.n	8013292 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013288:	bf00      	nop
 801328a:	e002      	b.n	8013292 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801328c:	bf00      	nop
 801328e:	e000      	b.n	8013292 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013290:	bf00      	nop
		}
	}

	return val;
 8013292:	697b      	ldr	r3, [r7, #20]
}
 8013294:	4618      	mov	r0, r3
 8013296:	3718      	adds	r7, #24
 8013298:	46bd      	mov	sp, r7
 801329a:	bd80      	pop	{r7, pc}

0801329c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801329c:	b590      	push	{r4, r7, lr}
 801329e:	b089      	sub	sp, #36	@ 0x24
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	60f8      	str	r0, [r7, #12]
 80132a4:	60b9      	str	r1, [r7, #8]
 80132a6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80132a8:	2302      	movs	r3, #2
 80132aa:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80132ac:	68bb      	ldr	r3, [r7, #8]
 80132ae:	2b01      	cmp	r3, #1
 80132b0:	f240 8109 	bls.w	80134c6 <put_fat+0x22a>
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	6a1b      	ldr	r3, [r3, #32]
 80132b8:	68ba      	ldr	r2, [r7, #8]
 80132ba:	429a      	cmp	r2, r3
 80132bc:	f080 8103 	bcs.w	80134c6 <put_fat+0x22a>
		switch (fs->fs_type) {
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	781b      	ldrb	r3, [r3, #0]
 80132c4:	2b03      	cmp	r3, #3
 80132c6:	f000 80b6 	beq.w	8013436 <put_fat+0x19a>
 80132ca:	2b03      	cmp	r3, #3
 80132cc:	f300 80fb 	bgt.w	80134c6 <put_fat+0x22a>
 80132d0:	2b01      	cmp	r3, #1
 80132d2:	d003      	beq.n	80132dc <put_fat+0x40>
 80132d4:	2b02      	cmp	r3, #2
 80132d6:	f000 8083 	beq.w	80133e0 <put_fat+0x144>
 80132da:	e0f4      	b.n	80134c6 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80132dc:	68bb      	ldr	r3, [r7, #8]
 80132de:	61bb      	str	r3, [r7, #24]
 80132e0:	69bb      	ldr	r3, [r7, #24]
 80132e2:	085b      	lsrs	r3, r3, #1
 80132e4:	69ba      	ldr	r2, [r7, #24]
 80132e6:	4413      	add	r3, r2
 80132e8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	899b      	ldrh	r3, [r3, #12]
 80132f2:	4619      	mov	r1, r3
 80132f4:	69bb      	ldr	r3, [r7, #24]
 80132f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80132fa:	4413      	add	r3, r2
 80132fc:	4619      	mov	r1, r3
 80132fe:	68f8      	ldr	r0, [r7, #12]
 8013300:	f7ff fe3c 	bl	8012f7c <move_window>
 8013304:	4603      	mov	r3, r0
 8013306:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013308:	7ffb      	ldrb	r3, [r7, #31]
 801330a:	2b00      	cmp	r3, #0
 801330c:	f040 80d4 	bne.w	80134b8 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8013316:	69bb      	ldr	r3, [r7, #24]
 8013318:	1c5a      	adds	r2, r3, #1
 801331a:	61ba      	str	r2, [r7, #24]
 801331c:	68fa      	ldr	r2, [r7, #12]
 801331e:	8992      	ldrh	r2, [r2, #12]
 8013320:	fbb3 f0f2 	udiv	r0, r3, r2
 8013324:	fb00 f202 	mul.w	r2, r0, r2
 8013328:	1a9b      	subs	r3, r3, r2
 801332a:	440b      	add	r3, r1
 801332c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801332e:	68bb      	ldr	r3, [r7, #8]
 8013330:	f003 0301 	and.w	r3, r3, #1
 8013334:	2b00      	cmp	r3, #0
 8013336:	d00d      	beq.n	8013354 <put_fat+0xb8>
 8013338:	697b      	ldr	r3, [r7, #20]
 801333a:	781b      	ldrb	r3, [r3, #0]
 801333c:	b25b      	sxtb	r3, r3
 801333e:	f003 030f 	and.w	r3, r3, #15
 8013342:	b25a      	sxtb	r2, r3
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	b2db      	uxtb	r3, r3
 8013348:	011b      	lsls	r3, r3, #4
 801334a:	b25b      	sxtb	r3, r3
 801334c:	4313      	orrs	r3, r2
 801334e:	b25b      	sxtb	r3, r3
 8013350:	b2db      	uxtb	r3, r3
 8013352:	e001      	b.n	8013358 <put_fat+0xbc>
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	b2db      	uxtb	r3, r3
 8013358:	697a      	ldr	r2, [r7, #20]
 801335a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	2201      	movs	r2, #1
 8013360:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	899b      	ldrh	r3, [r3, #12]
 801336a:	4619      	mov	r1, r3
 801336c:	69bb      	ldr	r3, [r7, #24]
 801336e:	fbb3 f3f1 	udiv	r3, r3, r1
 8013372:	4413      	add	r3, r2
 8013374:	4619      	mov	r1, r3
 8013376:	68f8      	ldr	r0, [r7, #12]
 8013378:	f7ff fe00 	bl	8012f7c <move_window>
 801337c:	4603      	mov	r3, r0
 801337e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013380:	7ffb      	ldrb	r3, [r7, #31]
 8013382:	2b00      	cmp	r3, #0
 8013384:	f040 809a 	bne.w	80134bc <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	899b      	ldrh	r3, [r3, #12]
 8013392:	461a      	mov	r2, r3
 8013394:	69bb      	ldr	r3, [r7, #24]
 8013396:	fbb3 f0f2 	udiv	r0, r3, r2
 801339a:	fb00 f202 	mul.w	r2, r0, r2
 801339e:	1a9b      	subs	r3, r3, r2
 80133a0:	440b      	add	r3, r1
 80133a2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80133a4:	68bb      	ldr	r3, [r7, #8]
 80133a6:	f003 0301 	and.w	r3, r3, #1
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d003      	beq.n	80133b6 <put_fat+0x11a>
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	091b      	lsrs	r3, r3, #4
 80133b2:	b2db      	uxtb	r3, r3
 80133b4:	e00e      	b.n	80133d4 <put_fat+0x138>
 80133b6:	697b      	ldr	r3, [r7, #20]
 80133b8:	781b      	ldrb	r3, [r3, #0]
 80133ba:	b25b      	sxtb	r3, r3
 80133bc:	f023 030f 	bic.w	r3, r3, #15
 80133c0:	b25a      	sxtb	r2, r3
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	0a1b      	lsrs	r3, r3, #8
 80133c6:	b25b      	sxtb	r3, r3
 80133c8:	f003 030f 	and.w	r3, r3, #15
 80133cc:	b25b      	sxtb	r3, r3
 80133ce:	4313      	orrs	r3, r2
 80133d0:	b25b      	sxtb	r3, r3
 80133d2:	b2db      	uxtb	r3, r3
 80133d4:	697a      	ldr	r2, [r7, #20]
 80133d6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80133d8:	68fb      	ldr	r3, [r7, #12]
 80133da:	2201      	movs	r2, #1
 80133dc:	70da      	strb	r2, [r3, #3]
			break;
 80133de:	e072      	b.n	80134c6 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	899b      	ldrh	r3, [r3, #12]
 80133e8:	085b      	lsrs	r3, r3, #1
 80133ea:	b29b      	uxth	r3, r3
 80133ec:	4619      	mov	r1, r3
 80133ee:	68bb      	ldr	r3, [r7, #8]
 80133f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80133f4:	4413      	add	r3, r2
 80133f6:	4619      	mov	r1, r3
 80133f8:	68f8      	ldr	r0, [r7, #12]
 80133fa:	f7ff fdbf 	bl	8012f7c <move_window>
 80133fe:	4603      	mov	r3, r0
 8013400:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013402:	7ffb      	ldrb	r3, [r7, #31]
 8013404:	2b00      	cmp	r3, #0
 8013406:	d15b      	bne.n	80134c0 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 801340e:	68bb      	ldr	r3, [r7, #8]
 8013410:	005b      	lsls	r3, r3, #1
 8013412:	68fa      	ldr	r2, [r7, #12]
 8013414:	8992      	ldrh	r2, [r2, #12]
 8013416:	fbb3 f0f2 	udiv	r0, r3, r2
 801341a:	fb00 f202 	mul.w	r2, r0, r2
 801341e:	1a9b      	subs	r3, r3, r2
 8013420:	440b      	add	r3, r1
 8013422:	687a      	ldr	r2, [r7, #4]
 8013424:	b292      	uxth	r2, r2
 8013426:	4611      	mov	r1, r2
 8013428:	4618      	mov	r0, r3
 801342a:	f7ff fb32 	bl	8012a92 <st_word>
			fs->wflag = 1;
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	2201      	movs	r2, #1
 8013432:	70da      	strb	r2, [r3, #3]
			break;
 8013434:	e047      	b.n	80134c6 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	899b      	ldrh	r3, [r3, #12]
 801343e:	089b      	lsrs	r3, r3, #2
 8013440:	b29b      	uxth	r3, r3
 8013442:	4619      	mov	r1, r3
 8013444:	68bb      	ldr	r3, [r7, #8]
 8013446:	fbb3 f3f1 	udiv	r3, r3, r1
 801344a:	4413      	add	r3, r2
 801344c:	4619      	mov	r1, r3
 801344e:	68f8      	ldr	r0, [r7, #12]
 8013450:	f7ff fd94 	bl	8012f7c <move_window>
 8013454:	4603      	mov	r3, r0
 8013456:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013458:	7ffb      	ldrb	r3, [r7, #31]
 801345a:	2b00      	cmp	r3, #0
 801345c:	d132      	bne.n	80134c4 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8013464:	68fb      	ldr	r3, [r7, #12]
 8013466:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 801346a:	68bb      	ldr	r3, [r7, #8]
 801346c:	009b      	lsls	r3, r3, #2
 801346e:	68fa      	ldr	r2, [r7, #12]
 8013470:	8992      	ldrh	r2, [r2, #12]
 8013472:	fbb3 f0f2 	udiv	r0, r3, r2
 8013476:	fb00 f202 	mul.w	r2, r0, r2
 801347a:	1a9b      	subs	r3, r3, r2
 801347c:	440b      	add	r3, r1
 801347e:	4618      	mov	r0, r3
 8013480:	f7ff fae4 	bl	8012a4c <ld_dword>
 8013484:	4603      	mov	r3, r0
 8013486:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 801348a:	4323      	orrs	r3, r4
 801348c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8013494:	68bb      	ldr	r3, [r7, #8]
 8013496:	009b      	lsls	r3, r3, #2
 8013498:	68fa      	ldr	r2, [r7, #12]
 801349a:	8992      	ldrh	r2, [r2, #12]
 801349c:	fbb3 f0f2 	udiv	r0, r3, r2
 80134a0:	fb00 f202 	mul.w	r2, r0, r2
 80134a4:	1a9b      	subs	r3, r3, r2
 80134a6:	440b      	add	r3, r1
 80134a8:	6879      	ldr	r1, [r7, #4]
 80134aa:	4618      	mov	r0, r3
 80134ac:	f7ff fb0c 	bl	8012ac8 <st_dword>
			fs->wflag = 1;
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	2201      	movs	r2, #1
 80134b4:	70da      	strb	r2, [r3, #3]
			break;
 80134b6:	e006      	b.n	80134c6 <put_fat+0x22a>
			if (res != FR_OK) break;
 80134b8:	bf00      	nop
 80134ba:	e004      	b.n	80134c6 <put_fat+0x22a>
			if (res != FR_OK) break;
 80134bc:	bf00      	nop
 80134be:	e002      	b.n	80134c6 <put_fat+0x22a>
			if (res != FR_OK) break;
 80134c0:	bf00      	nop
 80134c2:	e000      	b.n	80134c6 <put_fat+0x22a>
			if (res != FR_OK) break;
 80134c4:	bf00      	nop
		}
	}
	return res;
 80134c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80134c8:	4618      	mov	r0, r3
 80134ca:	3724      	adds	r7, #36	@ 0x24
 80134cc:	46bd      	mov	sp, r7
 80134ce:	bd90      	pop	{r4, r7, pc}

080134d0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80134d0:	b580      	push	{r7, lr}
 80134d2:	b088      	sub	sp, #32
 80134d4:	af00      	add	r7, sp, #0
 80134d6:	60f8      	str	r0, [r7, #12]
 80134d8:	60b9      	str	r1, [r7, #8]
 80134da:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80134dc:	2300      	movs	r3, #0
 80134de:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80134e6:	68bb      	ldr	r3, [r7, #8]
 80134e8:	2b01      	cmp	r3, #1
 80134ea:	d904      	bls.n	80134f6 <remove_chain+0x26>
 80134ec:	69bb      	ldr	r3, [r7, #24]
 80134ee:	6a1b      	ldr	r3, [r3, #32]
 80134f0:	68ba      	ldr	r2, [r7, #8]
 80134f2:	429a      	cmp	r2, r3
 80134f4:	d301      	bcc.n	80134fa <remove_chain+0x2a>
 80134f6:	2302      	movs	r3, #2
 80134f8:	e04b      	b.n	8013592 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d00c      	beq.n	801351a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8013500:	f04f 32ff 	mov.w	r2, #4294967295
 8013504:	6879      	ldr	r1, [r7, #4]
 8013506:	69b8      	ldr	r0, [r7, #24]
 8013508:	f7ff fec8 	bl	801329c <put_fat>
 801350c:	4603      	mov	r3, r0
 801350e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8013510:	7ffb      	ldrb	r3, [r7, #31]
 8013512:	2b00      	cmp	r3, #0
 8013514:	d001      	beq.n	801351a <remove_chain+0x4a>
 8013516:	7ffb      	ldrb	r3, [r7, #31]
 8013518:	e03b      	b.n	8013592 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801351a:	68b9      	ldr	r1, [r7, #8]
 801351c:	68f8      	ldr	r0, [r7, #12]
 801351e:	f7ff fdea 	bl	80130f6 <get_fat>
 8013522:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8013524:	697b      	ldr	r3, [r7, #20]
 8013526:	2b00      	cmp	r3, #0
 8013528:	d031      	beq.n	801358e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801352a:	697b      	ldr	r3, [r7, #20]
 801352c:	2b01      	cmp	r3, #1
 801352e:	d101      	bne.n	8013534 <remove_chain+0x64>
 8013530:	2302      	movs	r3, #2
 8013532:	e02e      	b.n	8013592 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8013534:	697b      	ldr	r3, [r7, #20]
 8013536:	f1b3 3fff 	cmp.w	r3, #4294967295
 801353a:	d101      	bne.n	8013540 <remove_chain+0x70>
 801353c:	2301      	movs	r3, #1
 801353e:	e028      	b.n	8013592 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8013540:	2200      	movs	r2, #0
 8013542:	68b9      	ldr	r1, [r7, #8]
 8013544:	69b8      	ldr	r0, [r7, #24]
 8013546:	f7ff fea9 	bl	801329c <put_fat>
 801354a:	4603      	mov	r3, r0
 801354c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801354e:	7ffb      	ldrb	r3, [r7, #31]
 8013550:	2b00      	cmp	r3, #0
 8013552:	d001      	beq.n	8013558 <remove_chain+0x88>
 8013554:	7ffb      	ldrb	r3, [r7, #31]
 8013556:	e01c      	b.n	8013592 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8013558:	69bb      	ldr	r3, [r7, #24]
 801355a:	699a      	ldr	r2, [r3, #24]
 801355c:	69bb      	ldr	r3, [r7, #24]
 801355e:	6a1b      	ldr	r3, [r3, #32]
 8013560:	3b02      	subs	r3, #2
 8013562:	429a      	cmp	r2, r3
 8013564:	d20b      	bcs.n	801357e <remove_chain+0xae>
			fs->free_clst++;
 8013566:	69bb      	ldr	r3, [r7, #24]
 8013568:	699b      	ldr	r3, [r3, #24]
 801356a:	1c5a      	adds	r2, r3, #1
 801356c:	69bb      	ldr	r3, [r7, #24]
 801356e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8013570:	69bb      	ldr	r3, [r7, #24]
 8013572:	791b      	ldrb	r3, [r3, #4]
 8013574:	f043 0301 	orr.w	r3, r3, #1
 8013578:	b2da      	uxtb	r2, r3
 801357a:	69bb      	ldr	r3, [r7, #24]
 801357c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801357e:	697b      	ldr	r3, [r7, #20]
 8013580:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8013582:	69bb      	ldr	r3, [r7, #24]
 8013584:	6a1b      	ldr	r3, [r3, #32]
 8013586:	68ba      	ldr	r2, [r7, #8]
 8013588:	429a      	cmp	r2, r3
 801358a:	d3c6      	bcc.n	801351a <remove_chain+0x4a>
 801358c:	e000      	b.n	8013590 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801358e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8013590:	2300      	movs	r3, #0
}
 8013592:	4618      	mov	r0, r3
 8013594:	3720      	adds	r7, #32
 8013596:	46bd      	mov	sp, r7
 8013598:	bd80      	pop	{r7, pc}

0801359a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801359a:	b580      	push	{r7, lr}
 801359c:	b088      	sub	sp, #32
 801359e:	af00      	add	r7, sp, #0
 80135a0:	6078      	str	r0, [r7, #4]
 80135a2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80135aa:	683b      	ldr	r3, [r7, #0]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d10d      	bne.n	80135cc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80135b0:	693b      	ldr	r3, [r7, #16]
 80135b2:	695b      	ldr	r3, [r3, #20]
 80135b4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80135b6:	69bb      	ldr	r3, [r7, #24]
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d004      	beq.n	80135c6 <create_chain+0x2c>
 80135bc:	693b      	ldr	r3, [r7, #16]
 80135be:	6a1b      	ldr	r3, [r3, #32]
 80135c0:	69ba      	ldr	r2, [r7, #24]
 80135c2:	429a      	cmp	r2, r3
 80135c4:	d31b      	bcc.n	80135fe <create_chain+0x64>
 80135c6:	2301      	movs	r3, #1
 80135c8:	61bb      	str	r3, [r7, #24]
 80135ca:	e018      	b.n	80135fe <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80135cc:	6839      	ldr	r1, [r7, #0]
 80135ce:	6878      	ldr	r0, [r7, #4]
 80135d0:	f7ff fd91 	bl	80130f6 <get_fat>
 80135d4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	2b01      	cmp	r3, #1
 80135da:	d801      	bhi.n	80135e0 <create_chain+0x46>
 80135dc:	2301      	movs	r3, #1
 80135de:	e070      	b.n	80136c2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135e6:	d101      	bne.n	80135ec <create_chain+0x52>
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	e06a      	b.n	80136c2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80135ec:	693b      	ldr	r3, [r7, #16]
 80135ee:	6a1b      	ldr	r3, [r3, #32]
 80135f0:	68fa      	ldr	r2, [r7, #12]
 80135f2:	429a      	cmp	r2, r3
 80135f4:	d201      	bcs.n	80135fa <create_chain+0x60>
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	e063      	b.n	80136c2 <create_chain+0x128>
		scl = clst;
 80135fa:	683b      	ldr	r3, [r7, #0]
 80135fc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80135fe:	69bb      	ldr	r3, [r7, #24]
 8013600:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8013602:	69fb      	ldr	r3, [r7, #28]
 8013604:	3301      	adds	r3, #1
 8013606:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8013608:	693b      	ldr	r3, [r7, #16]
 801360a:	6a1b      	ldr	r3, [r3, #32]
 801360c:	69fa      	ldr	r2, [r7, #28]
 801360e:	429a      	cmp	r2, r3
 8013610:	d307      	bcc.n	8013622 <create_chain+0x88>
				ncl = 2;
 8013612:	2302      	movs	r3, #2
 8013614:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8013616:	69fa      	ldr	r2, [r7, #28]
 8013618:	69bb      	ldr	r3, [r7, #24]
 801361a:	429a      	cmp	r2, r3
 801361c:	d901      	bls.n	8013622 <create_chain+0x88>
 801361e:	2300      	movs	r3, #0
 8013620:	e04f      	b.n	80136c2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8013622:	69f9      	ldr	r1, [r7, #28]
 8013624:	6878      	ldr	r0, [r7, #4]
 8013626:	f7ff fd66 	bl	80130f6 <get_fat>
 801362a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	2b00      	cmp	r3, #0
 8013630:	d00e      	beq.n	8013650 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	2b01      	cmp	r3, #1
 8013636:	d003      	beq.n	8013640 <create_chain+0xa6>
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801363e:	d101      	bne.n	8013644 <create_chain+0xaa>
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	e03e      	b.n	80136c2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8013644:	69fa      	ldr	r2, [r7, #28]
 8013646:	69bb      	ldr	r3, [r7, #24]
 8013648:	429a      	cmp	r2, r3
 801364a:	d1da      	bne.n	8013602 <create_chain+0x68>
 801364c:	2300      	movs	r3, #0
 801364e:	e038      	b.n	80136c2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8013650:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8013652:	f04f 32ff 	mov.w	r2, #4294967295
 8013656:	69f9      	ldr	r1, [r7, #28]
 8013658:	6938      	ldr	r0, [r7, #16]
 801365a:	f7ff fe1f 	bl	801329c <put_fat>
 801365e:	4603      	mov	r3, r0
 8013660:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8013662:	7dfb      	ldrb	r3, [r7, #23]
 8013664:	2b00      	cmp	r3, #0
 8013666:	d109      	bne.n	801367c <create_chain+0xe2>
 8013668:	683b      	ldr	r3, [r7, #0]
 801366a:	2b00      	cmp	r3, #0
 801366c:	d006      	beq.n	801367c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801366e:	69fa      	ldr	r2, [r7, #28]
 8013670:	6839      	ldr	r1, [r7, #0]
 8013672:	6938      	ldr	r0, [r7, #16]
 8013674:	f7ff fe12 	bl	801329c <put_fat>
 8013678:	4603      	mov	r3, r0
 801367a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801367c:	7dfb      	ldrb	r3, [r7, #23]
 801367e:	2b00      	cmp	r3, #0
 8013680:	d116      	bne.n	80136b0 <create_chain+0x116>
		fs->last_clst = ncl;
 8013682:	693b      	ldr	r3, [r7, #16]
 8013684:	69fa      	ldr	r2, [r7, #28]
 8013686:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8013688:	693b      	ldr	r3, [r7, #16]
 801368a:	699a      	ldr	r2, [r3, #24]
 801368c:	693b      	ldr	r3, [r7, #16]
 801368e:	6a1b      	ldr	r3, [r3, #32]
 8013690:	3b02      	subs	r3, #2
 8013692:	429a      	cmp	r2, r3
 8013694:	d804      	bhi.n	80136a0 <create_chain+0x106>
 8013696:	693b      	ldr	r3, [r7, #16]
 8013698:	699b      	ldr	r3, [r3, #24]
 801369a:	1e5a      	subs	r2, r3, #1
 801369c:	693b      	ldr	r3, [r7, #16]
 801369e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80136a0:	693b      	ldr	r3, [r7, #16]
 80136a2:	791b      	ldrb	r3, [r3, #4]
 80136a4:	f043 0301 	orr.w	r3, r3, #1
 80136a8:	b2da      	uxtb	r2, r3
 80136aa:	693b      	ldr	r3, [r7, #16]
 80136ac:	711a      	strb	r2, [r3, #4]
 80136ae:	e007      	b.n	80136c0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80136b0:	7dfb      	ldrb	r3, [r7, #23]
 80136b2:	2b01      	cmp	r3, #1
 80136b4:	d102      	bne.n	80136bc <create_chain+0x122>
 80136b6:	f04f 33ff 	mov.w	r3, #4294967295
 80136ba:	e000      	b.n	80136be <create_chain+0x124>
 80136bc:	2301      	movs	r3, #1
 80136be:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80136c0:	69fb      	ldr	r3, [r7, #28]
}
 80136c2:	4618      	mov	r0, r3
 80136c4:	3720      	adds	r7, #32
 80136c6:	46bd      	mov	sp, r7
 80136c8:	bd80      	pop	{r7, pc}

080136ca <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80136ca:	b480      	push	{r7}
 80136cc:	b087      	sub	sp, #28
 80136ce:	af00      	add	r7, sp, #0
 80136d0:	6078      	str	r0, [r7, #4]
 80136d2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80136de:	3304      	adds	r3, #4
 80136e0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	899b      	ldrh	r3, [r3, #12]
 80136e6:	461a      	mov	r2, r3
 80136e8:	683b      	ldr	r3, [r7, #0]
 80136ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80136ee:	68fa      	ldr	r2, [r7, #12]
 80136f0:	8952      	ldrh	r2, [r2, #10]
 80136f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80136f6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80136f8:	693b      	ldr	r3, [r7, #16]
 80136fa:	1d1a      	adds	r2, r3, #4
 80136fc:	613a      	str	r2, [r7, #16]
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8013702:	68bb      	ldr	r3, [r7, #8]
 8013704:	2b00      	cmp	r3, #0
 8013706:	d101      	bne.n	801370c <clmt_clust+0x42>
 8013708:	2300      	movs	r3, #0
 801370a:	e010      	b.n	801372e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801370c:	697a      	ldr	r2, [r7, #20]
 801370e:	68bb      	ldr	r3, [r7, #8]
 8013710:	429a      	cmp	r2, r3
 8013712:	d307      	bcc.n	8013724 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8013714:	697a      	ldr	r2, [r7, #20]
 8013716:	68bb      	ldr	r3, [r7, #8]
 8013718:	1ad3      	subs	r3, r2, r3
 801371a:	617b      	str	r3, [r7, #20]
 801371c:	693b      	ldr	r3, [r7, #16]
 801371e:	3304      	adds	r3, #4
 8013720:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013722:	e7e9      	b.n	80136f8 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8013724:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8013726:	693b      	ldr	r3, [r7, #16]
 8013728:	681a      	ldr	r2, [r3, #0]
 801372a:	697b      	ldr	r3, [r7, #20]
 801372c:	4413      	add	r3, r2
}
 801372e:	4618      	mov	r0, r3
 8013730:	371c      	adds	r7, #28
 8013732:	46bd      	mov	sp, r7
 8013734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013738:	4770      	bx	lr

0801373a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801373a:	b580      	push	{r7, lr}
 801373c:	b086      	sub	sp, #24
 801373e:	af00      	add	r7, sp, #0
 8013740:	6078      	str	r0, [r7, #4]
 8013742:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801374a:	683b      	ldr	r3, [r7, #0]
 801374c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8013750:	d204      	bcs.n	801375c <dir_sdi+0x22>
 8013752:	683b      	ldr	r3, [r7, #0]
 8013754:	f003 031f 	and.w	r3, r3, #31
 8013758:	2b00      	cmp	r3, #0
 801375a:	d001      	beq.n	8013760 <dir_sdi+0x26>
		return FR_INT_ERR;
 801375c:	2302      	movs	r3, #2
 801375e:	e071      	b.n	8013844 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	683a      	ldr	r2, [r7, #0]
 8013764:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	689b      	ldr	r3, [r3, #8]
 801376a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801376c:	697b      	ldr	r3, [r7, #20]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d106      	bne.n	8013780 <dir_sdi+0x46>
 8013772:	693b      	ldr	r3, [r7, #16]
 8013774:	781b      	ldrb	r3, [r3, #0]
 8013776:	2b02      	cmp	r3, #2
 8013778:	d902      	bls.n	8013780 <dir_sdi+0x46>
		clst = fs->dirbase;
 801377a:	693b      	ldr	r3, [r7, #16]
 801377c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801377e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8013780:	697b      	ldr	r3, [r7, #20]
 8013782:	2b00      	cmp	r3, #0
 8013784:	d10c      	bne.n	80137a0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8013786:	683b      	ldr	r3, [r7, #0]
 8013788:	095b      	lsrs	r3, r3, #5
 801378a:	693a      	ldr	r2, [r7, #16]
 801378c:	8912      	ldrh	r2, [r2, #8]
 801378e:	4293      	cmp	r3, r2
 8013790:	d301      	bcc.n	8013796 <dir_sdi+0x5c>
 8013792:	2302      	movs	r3, #2
 8013794:	e056      	b.n	8013844 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8013796:	693b      	ldr	r3, [r7, #16]
 8013798:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	61da      	str	r2, [r3, #28]
 801379e:	e02d      	b.n	80137fc <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80137a0:	693b      	ldr	r3, [r7, #16]
 80137a2:	895b      	ldrh	r3, [r3, #10]
 80137a4:	461a      	mov	r2, r3
 80137a6:	693b      	ldr	r3, [r7, #16]
 80137a8:	899b      	ldrh	r3, [r3, #12]
 80137aa:	fb02 f303 	mul.w	r3, r2, r3
 80137ae:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80137b0:	e019      	b.n	80137e6 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	6979      	ldr	r1, [r7, #20]
 80137b6:	4618      	mov	r0, r3
 80137b8:	f7ff fc9d 	bl	80130f6 <get_fat>
 80137bc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80137be:	697b      	ldr	r3, [r7, #20]
 80137c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137c4:	d101      	bne.n	80137ca <dir_sdi+0x90>
 80137c6:	2301      	movs	r3, #1
 80137c8:	e03c      	b.n	8013844 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80137ca:	697b      	ldr	r3, [r7, #20]
 80137cc:	2b01      	cmp	r3, #1
 80137ce:	d904      	bls.n	80137da <dir_sdi+0xa0>
 80137d0:	693b      	ldr	r3, [r7, #16]
 80137d2:	6a1b      	ldr	r3, [r3, #32]
 80137d4:	697a      	ldr	r2, [r7, #20]
 80137d6:	429a      	cmp	r2, r3
 80137d8:	d301      	bcc.n	80137de <dir_sdi+0xa4>
 80137da:	2302      	movs	r3, #2
 80137dc:	e032      	b.n	8013844 <dir_sdi+0x10a>
			ofs -= csz;
 80137de:	683a      	ldr	r2, [r7, #0]
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	1ad3      	subs	r3, r2, r3
 80137e4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80137e6:	683a      	ldr	r2, [r7, #0]
 80137e8:	68fb      	ldr	r3, [r7, #12]
 80137ea:	429a      	cmp	r2, r3
 80137ec:	d2e1      	bcs.n	80137b2 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80137ee:	6979      	ldr	r1, [r7, #20]
 80137f0:	6938      	ldr	r0, [r7, #16]
 80137f2:	f7ff fc61 	bl	80130b8 <clust2sect>
 80137f6:	4602      	mov	r2, r0
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	697a      	ldr	r2, [r7, #20]
 8013800:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	69db      	ldr	r3, [r3, #28]
 8013806:	2b00      	cmp	r3, #0
 8013808:	d101      	bne.n	801380e <dir_sdi+0xd4>
 801380a:	2302      	movs	r3, #2
 801380c:	e01a      	b.n	8013844 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	69da      	ldr	r2, [r3, #28]
 8013812:	693b      	ldr	r3, [r7, #16]
 8013814:	899b      	ldrh	r3, [r3, #12]
 8013816:	4619      	mov	r1, r3
 8013818:	683b      	ldr	r3, [r7, #0]
 801381a:	fbb3 f3f1 	udiv	r3, r3, r1
 801381e:	441a      	add	r2, r3
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8013824:	693b      	ldr	r3, [r7, #16]
 8013826:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 801382a:	693b      	ldr	r3, [r7, #16]
 801382c:	899b      	ldrh	r3, [r3, #12]
 801382e:	461a      	mov	r2, r3
 8013830:	683b      	ldr	r3, [r7, #0]
 8013832:	fbb3 f0f2 	udiv	r0, r3, r2
 8013836:	fb00 f202 	mul.w	r2, r0, r2
 801383a:	1a9b      	subs	r3, r3, r2
 801383c:	18ca      	adds	r2, r1, r3
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013842:	2300      	movs	r3, #0
}
 8013844:	4618      	mov	r0, r3
 8013846:	3718      	adds	r7, #24
 8013848:	46bd      	mov	sp, r7
 801384a:	bd80      	pop	{r7, pc}

0801384c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801384c:	b580      	push	{r7, lr}
 801384e:	b086      	sub	sp, #24
 8013850:	af00      	add	r7, sp, #0
 8013852:	6078      	str	r0, [r7, #4]
 8013854:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	681b      	ldr	r3, [r3, #0]
 801385a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	695b      	ldr	r3, [r3, #20]
 8013860:	3320      	adds	r3, #32
 8013862:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	69db      	ldr	r3, [r3, #28]
 8013868:	2b00      	cmp	r3, #0
 801386a:	d003      	beq.n	8013874 <dir_next+0x28>
 801386c:	68bb      	ldr	r3, [r7, #8]
 801386e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8013872:	d301      	bcc.n	8013878 <dir_next+0x2c>
 8013874:	2304      	movs	r3, #4
 8013876:	e0bb      	b.n	80139f0 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	899b      	ldrh	r3, [r3, #12]
 801387c:	461a      	mov	r2, r3
 801387e:	68bb      	ldr	r3, [r7, #8]
 8013880:	fbb3 f1f2 	udiv	r1, r3, r2
 8013884:	fb01 f202 	mul.w	r2, r1, r2
 8013888:	1a9b      	subs	r3, r3, r2
 801388a:	2b00      	cmp	r3, #0
 801388c:	f040 809d 	bne.w	80139ca <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	69db      	ldr	r3, [r3, #28]
 8013894:	1c5a      	adds	r2, r3, #1
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	699b      	ldr	r3, [r3, #24]
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d10b      	bne.n	80138ba <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80138a2:	68bb      	ldr	r3, [r7, #8]
 80138a4:	095b      	lsrs	r3, r3, #5
 80138a6:	68fa      	ldr	r2, [r7, #12]
 80138a8:	8912      	ldrh	r2, [r2, #8]
 80138aa:	4293      	cmp	r3, r2
 80138ac:	f0c0 808d 	bcc.w	80139ca <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	2200      	movs	r2, #0
 80138b4:	61da      	str	r2, [r3, #28]
 80138b6:	2304      	movs	r3, #4
 80138b8:	e09a      	b.n	80139f0 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	899b      	ldrh	r3, [r3, #12]
 80138be:	461a      	mov	r2, r3
 80138c0:	68bb      	ldr	r3, [r7, #8]
 80138c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80138c6:	68fa      	ldr	r2, [r7, #12]
 80138c8:	8952      	ldrh	r2, [r2, #10]
 80138ca:	3a01      	subs	r2, #1
 80138cc:	4013      	ands	r3, r2
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d17b      	bne.n	80139ca <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80138d2:	687a      	ldr	r2, [r7, #4]
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	699b      	ldr	r3, [r3, #24]
 80138d8:	4619      	mov	r1, r3
 80138da:	4610      	mov	r0, r2
 80138dc:	f7ff fc0b 	bl	80130f6 <get_fat>
 80138e0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80138e2:	697b      	ldr	r3, [r7, #20]
 80138e4:	2b01      	cmp	r3, #1
 80138e6:	d801      	bhi.n	80138ec <dir_next+0xa0>
 80138e8:	2302      	movs	r3, #2
 80138ea:	e081      	b.n	80139f0 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80138ec:	697b      	ldr	r3, [r7, #20]
 80138ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138f2:	d101      	bne.n	80138f8 <dir_next+0xac>
 80138f4:	2301      	movs	r3, #1
 80138f6:	e07b      	b.n	80139f0 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	6a1b      	ldr	r3, [r3, #32]
 80138fc:	697a      	ldr	r2, [r7, #20]
 80138fe:	429a      	cmp	r2, r3
 8013900:	d359      	bcc.n	80139b6 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8013902:	683b      	ldr	r3, [r7, #0]
 8013904:	2b00      	cmp	r3, #0
 8013906:	d104      	bne.n	8013912 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	2200      	movs	r2, #0
 801390c:	61da      	str	r2, [r3, #28]
 801390e:	2304      	movs	r3, #4
 8013910:	e06e      	b.n	80139f0 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8013912:	687a      	ldr	r2, [r7, #4]
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	699b      	ldr	r3, [r3, #24]
 8013918:	4619      	mov	r1, r3
 801391a:	4610      	mov	r0, r2
 801391c:	f7ff fe3d 	bl	801359a <create_chain>
 8013920:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8013922:	697b      	ldr	r3, [r7, #20]
 8013924:	2b00      	cmp	r3, #0
 8013926:	d101      	bne.n	801392c <dir_next+0xe0>
 8013928:	2307      	movs	r3, #7
 801392a:	e061      	b.n	80139f0 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801392c:	697b      	ldr	r3, [r7, #20]
 801392e:	2b01      	cmp	r3, #1
 8013930:	d101      	bne.n	8013936 <dir_next+0xea>
 8013932:	2302      	movs	r3, #2
 8013934:	e05c      	b.n	80139f0 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013936:	697b      	ldr	r3, [r7, #20]
 8013938:	f1b3 3fff 	cmp.w	r3, #4294967295
 801393c:	d101      	bne.n	8013942 <dir_next+0xf6>
 801393e:	2301      	movs	r3, #1
 8013940:	e056      	b.n	80139f0 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8013942:	68f8      	ldr	r0, [r7, #12]
 8013944:	f7ff fad6 	bl	8012ef4 <sync_window>
 8013948:	4603      	mov	r3, r0
 801394a:	2b00      	cmp	r3, #0
 801394c:	d001      	beq.n	8013952 <dir_next+0x106>
 801394e:	2301      	movs	r3, #1
 8013950:	e04e      	b.n	80139f0 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 8013958:	68fb      	ldr	r3, [r7, #12]
 801395a:	899b      	ldrh	r3, [r3, #12]
 801395c:	461a      	mov	r2, r3
 801395e:	2100      	movs	r1, #0
 8013960:	f7ff f8ff 	bl	8012b62 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013964:	2300      	movs	r3, #0
 8013966:	613b      	str	r3, [r7, #16]
 8013968:	6979      	ldr	r1, [r7, #20]
 801396a:	68f8      	ldr	r0, [r7, #12]
 801396c:	f7ff fba4 	bl	80130b8 <clust2sect>
 8013970:	4602      	mov	r2, r0
 8013972:	68fb      	ldr	r3, [r7, #12]
 8013974:	639a      	str	r2, [r3, #56]	@ 0x38
 8013976:	e012      	b.n	801399e <dir_next+0x152>
						fs->wflag = 1;
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	2201      	movs	r2, #1
 801397c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801397e:	68f8      	ldr	r0, [r7, #12]
 8013980:	f7ff fab8 	bl	8012ef4 <sync_window>
 8013984:	4603      	mov	r3, r0
 8013986:	2b00      	cmp	r3, #0
 8013988:	d001      	beq.n	801398e <dir_next+0x142>
 801398a:	2301      	movs	r3, #1
 801398c:	e030      	b.n	80139f0 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801398e:	693b      	ldr	r3, [r7, #16]
 8013990:	3301      	adds	r3, #1
 8013992:	613b      	str	r3, [r7, #16]
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013998:	1c5a      	adds	r2, r3, #1
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	639a      	str	r2, [r3, #56]	@ 0x38
 801399e:	68fb      	ldr	r3, [r7, #12]
 80139a0:	895b      	ldrh	r3, [r3, #10]
 80139a2:	461a      	mov	r2, r3
 80139a4:	693b      	ldr	r3, [r7, #16]
 80139a6:	4293      	cmp	r3, r2
 80139a8:	d3e6      	bcc.n	8013978 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80139ae:	693b      	ldr	r3, [r7, #16]
 80139b0:	1ad2      	subs	r2, r2, r3
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	639a      	str	r2, [r3, #56]	@ 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	697a      	ldr	r2, [r7, #20]
 80139ba:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80139bc:	6979      	ldr	r1, [r7, #20]
 80139be:	68f8      	ldr	r0, [r7, #12]
 80139c0:	f7ff fb7a 	bl	80130b8 <clust2sect>
 80139c4:	4602      	mov	r2, r0
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	68ba      	ldr	r2, [r7, #8]
 80139ce:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	899b      	ldrh	r3, [r3, #12]
 80139da:	461a      	mov	r2, r3
 80139dc:	68bb      	ldr	r3, [r7, #8]
 80139de:	fbb3 f0f2 	udiv	r0, r3, r2
 80139e2:	fb00 f202 	mul.w	r2, r0, r2
 80139e6:	1a9b      	subs	r3, r3, r2
 80139e8:	18ca      	adds	r2, r1, r3
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80139ee:	2300      	movs	r3, #0
}
 80139f0:	4618      	mov	r0, r3
 80139f2:	3718      	adds	r7, #24
 80139f4:	46bd      	mov	sp, r7
 80139f6:	bd80      	pop	{r7, pc}

080139f8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80139f8:	b580      	push	{r7, lr}
 80139fa:	b086      	sub	sp, #24
 80139fc:	af00      	add	r7, sp, #0
 80139fe:	6078      	str	r0, [r7, #4]
 8013a00:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8013a08:	2100      	movs	r1, #0
 8013a0a:	6878      	ldr	r0, [r7, #4]
 8013a0c:	f7ff fe95 	bl	801373a <dir_sdi>
 8013a10:	4603      	mov	r3, r0
 8013a12:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013a14:	7dfb      	ldrb	r3, [r7, #23]
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d12b      	bne.n	8013a72 <dir_alloc+0x7a>
		n = 0;
 8013a1a:	2300      	movs	r3, #0
 8013a1c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	69db      	ldr	r3, [r3, #28]
 8013a22:	4619      	mov	r1, r3
 8013a24:	68f8      	ldr	r0, [r7, #12]
 8013a26:	f7ff faa9 	bl	8012f7c <move_window>
 8013a2a:	4603      	mov	r3, r0
 8013a2c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013a2e:	7dfb      	ldrb	r3, [r7, #23]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d11d      	bne.n	8013a70 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	6a1b      	ldr	r3, [r3, #32]
 8013a38:	781b      	ldrb	r3, [r3, #0]
 8013a3a:	2be5      	cmp	r3, #229	@ 0xe5
 8013a3c:	d004      	beq.n	8013a48 <dir_alloc+0x50>
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	6a1b      	ldr	r3, [r3, #32]
 8013a42:	781b      	ldrb	r3, [r3, #0]
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d107      	bne.n	8013a58 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8013a48:	693b      	ldr	r3, [r7, #16]
 8013a4a:	3301      	adds	r3, #1
 8013a4c:	613b      	str	r3, [r7, #16]
 8013a4e:	693a      	ldr	r2, [r7, #16]
 8013a50:	683b      	ldr	r3, [r7, #0]
 8013a52:	429a      	cmp	r2, r3
 8013a54:	d102      	bne.n	8013a5c <dir_alloc+0x64>
 8013a56:	e00c      	b.n	8013a72 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8013a58:	2300      	movs	r3, #0
 8013a5a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8013a5c:	2101      	movs	r1, #1
 8013a5e:	6878      	ldr	r0, [r7, #4]
 8013a60:	f7ff fef4 	bl	801384c <dir_next>
 8013a64:	4603      	mov	r3, r0
 8013a66:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8013a68:	7dfb      	ldrb	r3, [r7, #23]
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d0d7      	beq.n	8013a1e <dir_alloc+0x26>
 8013a6e:	e000      	b.n	8013a72 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8013a70:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8013a72:	7dfb      	ldrb	r3, [r7, #23]
 8013a74:	2b04      	cmp	r3, #4
 8013a76:	d101      	bne.n	8013a7c <dir_alloc+0x84>
 8013a78:	2307      	movs	r3, #7
 8013a7a:	75fb      	strb	r3, [r7, #23]
	return res;
 8013a7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8013a7e:	4618      	mov	r0, r3
 8013a80:	3718      	adds	r7, #24
 8013a82:	46bd      	mov	sp, r7
 8013a84:	bd80      	pop	{r7, pc}

08013a86 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8013a86:	b580      	push	{r7, lr}
 8013a88:	b084      	sub	sp, #16
 8013a8a:	af00      	add	r7, sp, #0
 8013a8c:	6078      	str	r0, [r7, #4]
 8013a8e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8013a90:	683b      	ldr	r3, [r7, #0]
 8013a92:	331a      	adds	r3, #26
 8013a94:	4618      	mov	r0, r3
 8013a96:	f7fe ffc1 	bl	8012a1c <ld_word>
 8013a9a:	4603      	mov	r3, r0
 8013a9c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	781b      	ldrb	r3, [r3, #0]
 8013aa2:	2b03      	cmp	r3, #3
 8013aa4:	d109      	bne.n	8013aba <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8013aa6:	683b      	ldr	r3, [r7, #0]
 8013aa8:	3314      	adds	r3, #20
 8013aaa:	4618      	mov	r0, r3
 8013aac:	f7fe ffb6 	bl	8012a1c <ld_word>
 8013ab0:	4603      	mov	r3, r0
 8013ab2:	041b      	lsls	r3, r3, #16
 8013ab4:	68fa      	ldr	r2, [r7, #12]
 8013ab6:	4313      	orrs	r3, r2
 8013ab8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8013aba:	68fb      	ldr	r3, [r7, #12]
}
 8013abc:	4618      	mov	r0, r3
 8013abe:	3710      	adds	r7, #16
 8013ac0:	46bd      	mov	sp, r7
 8013ac2:	bd80      	pop	{r7, pc}

08013ac4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8013ac4:	b580      	push	{r7, lr}
 8013ac6:	b084      	sub	sp, #16
 8013ac8:	af00      	add	r7, sp, #0
 8013aca:	60f8      	str	r0, [r7, #12]
 8013acc:	60b9      	str	r1, [r7, #8]
 8013ace:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8013ad0:	68bb      	ldr	r3, [r7, #8]
 8013ad2:	331a      	adds	r3, #26
 8013ad4:	687a      	ldr	r2, [r7, #4]
 8013ad6:	b292      	uxth	r2, r2
 8013ad8:	4611      	mov	r1, r2
 8013ada:	4618      	mov	r0, r3
 8013adc:	f7fe ffd9 	bl	8012a92 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	781b      	ldrb	r3, [r3, #0]
 8013ae4:	2b03      	cmp	r3, #3
 8013ae6:	d109      	bne.n	8013afc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8013ae8:	68bb      	ldr	r3, [r7, #8]
 8013aea:	f103 0214 	add.w	r2, r3, #20
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	0c1b      	lsrs	r3, r3, #16
 8013af2:	b29b      	uxth	r3, r3
 8013af4:	4619      	mov	r1, r3
 8013af6:	4610      	mov	r0, r2
 8013af8:	f7fe ffcb 	bl	8012a92 <st_word>
	}
}
 8013afc:	bf00      	nop
 8013afe:	3710      	adds	r7, #16
 8013b00:	46bd      	mov	sp, r7
 8013b02:	bd80      	pop	{r7, pc}

08013b04 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8013b04:	b590      	push	{r4, r7, lr}
 8013b06:	b087      	sub	sp, #28
 8013b08:	af00      	add	r7, sp, #0
 8013b0a:	6078      	str	r0, [r7, #4]
 8013b0c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8013b0e:	683b      	ldr	r3, [r7, #0]
 8013b10:	331a      	adds	r3, #26
 8013b12:	4618      	mov	r0, r3
 8013b14:	f7fe ff82 	bl	8012a1c <ld_word>
 8013b18:	4603      	mov	r3, r0
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d001      	beq.n	8013b22 <cmp_lfn+0x1e>
 8013b1e:	2300      	movs	r3, #0
 8013b20:	e059      	b.n	8013bd6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8013b22:	683b      	ldr	r3, [r7, #0]
 8013b24:	781b      	ldrb	r3, [r3, #0]
 8013b26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013b2a:	1e5a      	subs	r2, r3, #1
 8013b2c:	4613      	mov	r3, r2
 8013b2e:	005b      	lsls	r3, r3, #1
 8013b30:	4413      	add	r3, r2
 8013b32:	009b      	lsls	r3, r3, #2
 8013b34:	4413      	add	r3, r2
 8013b36:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8013b38:	2301      	movs	r3, #1
 8013b3a:	81fb      	strh	r3, [r7, #14]
 8013b3c:	2300      	movs	r3, #0
 8013b3e:	613b      	str	r3, [r7, #16]
 8013b40:	e033      	b.n	8013baa <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8013b42:	4a27      	ldr	r2, [pc, #156]	@ (8013be0 <cmp_lfn+0xdc>)
 8013b44:	693b      	ldr	r3, [r7, #16]
 8013b46:	4413      	add	r3, r2
 8013b48:	781b      	ldrb	r3, [r3, #0]
 8013b4a:	461a      	mov	r2, r3
 8013b4c:	683b      	ldr	r3, [r7, #0]
 8013b4e:	4413      	add	r3, r2
 8013b50:	4618      	mov	r0, r3
 8013b52:	f7fe ff63 	bl	8012a1c <ld_word>
 8013b56:	4603      	mov	r3, r0
 8013b58:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8013b5a:	89fb      	ldrh	r3, [r7, #14]
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d01a      	beq.n	8013b96 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8013b60:	697b      	ldr	r3, [r7, #20]
 8013b62:	2bfe      	cmp	r3, #254	@ 0xfe
 8013b64:	d812      	bhi.n	8013b8c <cmp_lfn+0x88>
 8013b66:	89bb      	ldrh	r3, [r7, #12]
 8013b68:	4618      	mov	r0, r3
 8013b6a:	f002 ff73 	bl	8016a54 <ff_wtoupper>
 8013b6e:	4603      	mov	r3, r0
 8013b70:	461c      	mov	r4, r3
 8013b72:	697b      	ldr	r3, [r7, #20]
 8013b74:	1c5a      	adds	r2, r3, #1
 8013b76:	617a      	str	r2, [r7, #20]
 8013b78:	005b      	lsls	r3, r3, #1
 8013b7a:	687a      	ldr	r2, [r7, #4]
 8013b7c:	4413      	add	r3, r2
 8013b7e:	881b      	ldrh	r3, [r3, #0]
 8013b80:	4618      	mov	r0, r3
 8013b82:	f002 ff67 	bl	8016a54 <ff_wtoupper>
 8013b86:	4603      	mov	r3, r0
 8013b88:	429c      	cmp	r4, r3
 8013b8a:	d001      	beq.n	8013b90 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8013b8c:	2300      	movs	r3, #0
 8013b8e:	e022      	b.n	8013bd6 <cmp_lfn+0xd2>
			}
			wc = uc;
 8013b90:	89bb      	ldrh	r3, [r7, #12]
 8013b92:	81fb      	strh	r3, [r7, #14]
 8013b94:	e006      	b.n	8013ba4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8013b96:	89bb      	ldrh	r3, [r7, #12]
 8013b98:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013b9c:	4293      	cmp	r3, r2
 8013b9e:	d001      	beq.n	8013ba4 <cmp_lfn+0xa0>
 8013ba0:	2300      	movs	r3, #0
 8013ba2:	e018      	b.n	8013bd6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8013ba4:	693b      	ldr	r3, [r7, #16]
 8013ba6:	3301      	adds	r3, #1
 8013ba8:	613b      	str	r3, [r7, #16]
 8013baa:	693b      	ldr	r3, [r7, #16]
 8013bac:	2b0c      	cmp	r3, #12
 8013bae:	d9c8      	bls.n	8013b42 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8013bb0:	683b      	ldr	r3, [r7, #0]
 8013bb2:	781b      	ldrb	r3, [r3, #0]
 8013bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d00b      	beq.n	8013bd4 <cmp_lfn+0xd0>
 8013bbc:	89fb      	ldrh	r3, [r7, #14]
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d008      	beq.n	8013bd4 <cmp_lfn+0xd0>
 8013bc2:	697b      	ldr	r3, [r7, #20]
 8013bc4:	005b      	lsls	r3, r3, #1
 8013bc6:	687a      	ldr	r2, [r7, #4]
 8013bc8:	4413      	add	r3, r2
 8013bca:	881b      	ldrh	r3, [r3, #0]
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d001      	beq.n	8013bd4 <cmp_lfn+0xd0>
 8013bd0:	2300      	movs	r3, #0
 8013bd2:	e000      	b.n	8013bd6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8013bd4:	2301      	movs	r3, #1
}
 8013bd6:	4618      	mov	r0, r3
 8013bd8:	371c      	adds	r7, #28
 8013bda:	46bd      	mov	sp, r7
 8013bdc:	bd90      	pop	{r4, r7, pc}
 8013bde:	bf00      	nop
 8013be0:	08019c00 	.word	0x08019c00

08013be4 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8013be4:	b580      	push	{r7, lr}
 8013be6:	b086      	sub	sp, #24
 8013be8:	af00      	add	r7, sp, #0
 8013bea:	6078      	str	r0, [r7, #4]
 8013bec:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8013bee:	683b      	ldr	r3, [r7, #0]
 8013bf0:	331a      	adds	r3, #26
 8013bf2:	4618      	mov	r0, r3
 8013bf4:	f7fe ff12 	bl	8012a1c <ld_word>
 8013bf8:	4603      	mov	r3, r0
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d001      	beq.n	8013c02 <pick_lfn+0x1e>
 8013bfe:	2300      	movs	r3, #0
 8013c00:	e04d      	b.n	8013c9e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8013c02:	683b      	ldr	r3, [r7, #0]
 8013c04:	781b      	ldrb	r3, [r3, #0]
 8013c06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013c0a:	1e5a      	subs	r2, r3, #1
 8013c0c:	4613      	mov	r3, r2
 8013c0e:	005b      	lsls	r3, r3, #1
 8013c10:	4413      	add	r3, r2
 8013c12:	009b      	lsls	r3, r3, #2
 8013c14:	4413      	add	r3, r2
 8013c16:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8013c18:	2301      	movs	r3, #1
 8013c1a:	81fb      	strh	r3, [r7, #14]
 8013c1c:	2300      	movs	r3, #0
 8013c1e:	613b      	str	r3, [r7, #16]
 8013c20:	e028      	b.n	8013c74 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8013c22:	4a21      	ldr	r2, [pc, #132]	@ (8013ca8 <pick_lfn+0xc4>)
 8013c24:	693b      	ldr	r3, [r7, #16]
 8013c26:	4413      	add	r3, r2
 8013c28:	781b      	ldrb	r3, [r3, #0]
 8013c2a:	461a      	mov	r2, r3
 8013c2c:	683b      	ldr	r3, [r7, #0]
 8013c2e:	4413      	add	r3, r2
 8013c30:	4618      	mov	r0, r3
 8013c32:	f7fe fef3 	bl	8012a1c <ld_word>
 8013c36:	4603      	mov	r3, r0
 8013c38:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8013c3a:	89fb      	ldrh	r3, [r7, #14]
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d00f      	beq.n	8013c60 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8013c40:	697b      	ldr	r3, [r7, #20]
 8013c42:	2bfe      	cmp	r3, #254	@ 0xfe
 8013c44:	d901      	bls.n	8013c4a <pick_lfn+0x66>
 8013c46:	2300      	movs	r3, #0
 8013c48:	e029      	b.n	8013c9e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8013c4a:	89bb      	ldrh	r3, [r7, #12]
 8013c4c:	81fb      	strh	r3, [r7, #14]
 8013c4e:	697b      	ldr	r3, [r7, #20]
 8013c50:	1c5a      	adds	r2, r3, #1
 8013c52:	617a      	str	r2, [r7, #20]
 8013c54:	005b      	lsls	r3, r3, #1
 8013c56:	687a      	ldr	r2, [r7, #4]
 8013c58:	4413      	add	r3, r2
 8013c5a:	89fa      	ldrh	r2, [r7, #14]
 8013c5c:	801a      	strh	r2, [r3, #0]
 8013c5e:	e006      	b.n	8013c6e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8013c60:	89bb      	ldrh	r3, [r7, #12]
 8013c62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013c66:	4293      	cmp	r3, r2
 8013c68:	d001      	beq.n	8013c6e <pick_lfn+0x8a>
 8013c6a:	2300      	movs	r3, #0
 8013c6c:	e017      	b.n	8013c9e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8013c6e:	693b      	ldr	r3, [r7, #16]
 8013c70:	3301      	adds	r3, #1
 8013c72:	613b      	str	r3, [r7, #16]
 8013c74:	693b      	ldr	r3, [r7, #16]
 8013c76:	2b0c      	cmp	r3, #12
 8013c78:	d9d3      	bls.n	8013c22 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8013c7a:	683b      	ldr	r3, [r7, #0]
 8013c7c:	781b      	ldrb	r3, [r3, #0]
 8013c7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d00a      	beq.n	8013c9c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8013c86:	697b      	ldr	r3, [r7, #20]
 8013c88:	2bfe      	cmp	r3, #254	@ 0xfe
 8013c8a:	d901      	bls.n	8013c90 <pick_lfn+0xac>
 8013c8c:	2300      	movs	r3, #0
 8013c8e:	e006      	b.n	8013c9e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8013c90:	697b      	ldr	r3, [r7, #20]
 8013c92:	005b      	lsls	r3, r3, #1
 8013c94:	687a      	ldr	r2, [r7, #4]
 8013c96:	4413      	add	r3, r2
 8013c98:	2200      	movs	r2, #0
 8013c9a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8013c9c:	2301      	movs	r3, #1
}
 8013c9e:	4618      	mov	r0, r3
 8013ca0:	3718      	adds	r7, #24
 8013ca2:	46bd      	mov	sp, r7
 8013ca4:	bd80      	pop	{r7, pc}
 8013ca6:	bf00      	nop
 8013ca8:	08019c00 	.word	0x08019c00

08013cac <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8013cac:	b580      	push	{r7, lr}
 8013cae:	b088      	sub	sp, #32
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	60f8      	str	r0, [r7, #12]
 8013cb4:	60b9      	str	r1, [r7, #8]
 8013cb6:	4611      	mov	r1, r2
 8013cb8:	461a      	mov	r2, r3
 8013cba:	460b      	mov	r3, r1
 8013cbc:	71fb      	strb	r3, [r7, #7]
 8013cbe:	4613      	mov	r3, r2
 8013cc0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8013cc2:	68bb      	ldr	r3, [r7, #8]
 8013cc4:	330d      	adds	r3, #13
 8013cc6:	79ba      	ldrb	r2, [r7, #6]
 8013cc8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8013cca:	68bb      	ldr	r3, [r7, #8]
 8013ccc:	330b      	adds	r3, #11
 8013cce:	220f      	movs	r2, #15
 8013cd0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8013cd2:	68bb      	ldr	r3, [r7, #8]
 8013cd4:	330c      	adds	r3, #12
 8013cd6:	2200      	movs	r2, #0
 8013cd8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8013cda:	68bb      	ldr	r3, [r7, #8]
 8013cdc:	331a      	adds	r3, #26
 8013cde:	2100      	movs	r1, #0
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	f7fe fed6 	bl	8012a92 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8013ce6:	79fb      	ldrb	r3, [r7, #7]
 8013ce8:	1e5a      	subs	r2, r3, #1
 8013cea:	4613      	mov	r3, r2
 8013cec:	005b      	lsls	r3, r3, #1
 8013cee:	4413      	add	r3, r2
 8013cf0:	009b      	lsls	r3, r3, #2
 8013cf2:	4413      	add	r3, r2
 8013cf4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8013cf6:	2300      	movs	r3, #0
 8013cf8:	82fb      	strh	r3, [r7, #22]
 8013cfa:	2300      	movs	r3, #0
 8013cfc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8013cfe:	8afb      	ldrh	r3, [r7, #22]
 8013d00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013d04:	4293      	cmp	r3, r2
 8013d06:	d007      	beq.n	8013d18 <put_lfn+0x6c>
 8013d08:	69fb      	ldr	r3, [r7, #28]
 8013d0a:	1c5a      	adds	r2, r3, #1
 8013d0c:	61fa      	str	r2, [r7, #28]
 8013d0e:	005b      	lsls	r3, r3, #1
 8013d10:	68fa      	ldr	r2, [r7, #12]
 8013d12:	4413      	add	r3, r2
 8013d14:	881b      	ldrh	r3, [r3, #0]
 8013d16:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8013d18:	4a17      	ldr	r2, [pc, #92]	@ (8013d78 <put_lfn+0xcc>)
 8013d1a:	69bb      	ldr	r3, [r7, #24]
 8013d1c:	4413      	add	r3, r2
 8013d1e:	781b      	ldrb	r3, [r3, #0]
 8013d20:	461a      	mov	r2, r3
 8013d22:	68bb      	ldr	r3, [r7, #8]
 8013d24:	4413      	add	r3, r2
 8013d26:	8afa      	ldrh	r2, [r7, #22]
 8013d28:	4611      	mov	r1, r2
 8013d2a:	4618      	mov	r0, r3
 8013d2c:	f7fe feb1 	bl	8012a92 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8013d30:	8afb      	ldrh	r3, [r7, #22]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d102      	bne.n	8013d3c <put_lfn+0x90>
 8013d36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013d3a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8013d3c:	69bb      	ldr	r3, [r7, #24]
 8013d3e:	3301      	adds	r3, #1
 8013d40:	61bb      	str	r3, [r7, #24]
 8013d42:	69bb      	ldr	r3, [r7, #24]
 8013d44:	2b0c      	cmp	r3, #12
 8013d46:	d9da      	bls.n	8013cfe <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8013d48:	8afb      	ldrh	r3, [r7, #22]
 8013d4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013d4e:	4293      	cmp	r3, r2
 8013d50:	d006      	beq.n	8013d60 <put_lfn+0xb4>
 8013d52:	69fb      	ldr	r3, [r7, #28]
 8013d54:	005b      	lsls	r3, r3, #1
 8013d56:	68fa      	ldr	r2, [r7, #12]
 8013d58:	4413      	add	r3, r2
 8013d5a:	881b      	ldrh	r3, [r3, #0]
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d103      	bne.n	8013d68 <put_lfn+0xbc>
 8013d60:	79fb      	ldrb	r3, [r7, #7]
 8013d62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013d66:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8013d68:	68bb      	ldr	r3, [r7, #8]
 8013d6a:	79fa      	ldrb	r2, [r7, #7]
 8013d6c:	701a      	strb	r2, [r3, #0]
}
 8013d6e:	bf00      	nop
 8013d70:	3720      	adds	r7, #32
 8013d72:	46bd      	mov	sp, r7
 8013d74:	bd80      	pop	{r7, pc}
 8013d76:	bf00      	nop
 8013d78:	08019c00 	.word	0x08019c00

08013d7c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8013d7c:	b580      	push	{r7, lr}
 8013d7e:	b08c      	sub	sp, #48	@ 0x30
 8013d80:	af00      	add	r7, sp, #0
 8013d82:	60f8      	str	r0, [r7, #12]
 8013d84:	60b9      	str	r1, [r7, #8]
 8013d86:	607a      	str	r2, [r7, #4]
 8013d88:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8013d8a:	220b      	movs	r2, #11
 8013d8c:	68b9      	ldr	r1, [r7, #8]
 8013d8e:	68f8      	ldr	r0, [r7, #12]
 8013d90:	f7fe fec6 	bl	8012b20 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8013d94:	683b      	ldr	r3, [r7, #0]
 8013d96:	2b05      	cmp	r3, #5
 8013d98:	d929      	bls.n	8013dee <gen_numname+0x72>
		sr = seq;
 8013d9a:	683b      	ldr	r3, [r7, #0]
 8013d9c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8013d9e:	e020      	b.n	8013de2 <gen_numname+0x66>
			wc = *lfn++;
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	1c9a      	adds	r2, r3, #2
 8013da4:	607a      	str	r2, [r7, #4]
 8013da6:	881b      	ldrh	r3, [r3, #0]
 8013da8:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8013daa:	2300      	movs	r3, #0
 8013dac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013dae:	e015      	b.n	8013ddc <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8013db0:	69fb      	ldr	r3, [r7, #28]
 8013db2:	005a      	lsls	r2, r3, #1
 8013db4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013db6:	f003 0301 	and.w	r3, r3, #1
 8013dba:	4413      	add	r3, r2
 8013dbc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8013dbe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013dc0:	085b      	lsrs	r3, r3, #1
 8013dc2:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8013dc4:	69fb      	ldr	r3, [r7, #28]
 8013dc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d003      	beq.n	8013dd6 <gen_numname+0x5a>
 8013dce:	69fa      	ldr	r2, [r7, #28]
 8013dd0:	4b30      	ldr	r3, [pc, #192]	@ (8013e94 <gen_numname+0x118>)
 8013dd2:	4053      	eors	r3, r2
 8013dd4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8013dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013dd8:	3301      	adds	r3, #1
 8013dda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013dde:	2b0f      	cmp	r3, #15
 8013de0:	d9e6      	bls.n	8013db0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	881b      	ldrh	r3, [r3, #0]
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d1da      	bne.n	8013da0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8013dea:	69fb      	ldr	r3, [r7, #28]
 8013dec:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8013dee:	2307      	movs	r3, #7
 8013df0:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8013df2:	683b      	ldr	r3, [r7, #0]
 8013df4:	b2db      	uxtb	r3, r3
 8013df6:	f003 030f 	and.w	r3, r3, #15
 8013dfa:	b2db      	uxtb	r3, r3
 8013dfc:	3330      	adds	r3, #48	@ 0x30
 8013dfe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8013e02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013e06:	2b39      	cmp	r3, #57	@ 0x39
 8013e08:	d904      	bls.n	8013e14 <gen_numname+0x98>
 8013e0a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013e0e:	3307      	adds	r3, #7
 8013e10:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8013e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e16:	1e5a      	subs	r2, r3, #1
 8013e18:	62ba      	str	r2, [r7, #40]	@ 0x28
 8013e1a:	3330      	adds	r3, #48	@ 0x30
 8013e1c:	443b      	add	r3, r7
 8013e1e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8013e22:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8013e26:	683b      	ldr	r3, [r7, #0]
 8013e28:	091b      	lsrs	r3, r3, #4
 8013e2a:	603b      	str	r3, [r7, #0]
	} while (seq);
 8013e2c:	683b      	ldr	r3, [r7, #0]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d1df      	bne.n	8013df2 <gen_numname+0x76>
	ns[i] = '~';
 8013e32:	f107 0214 	add.w	r2, r7, #20
 8013e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e38:	4413      	add	r3, r2
 8013e3a:	227e      	movs	r2, #126	@ 0x7e
 8013e3c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8013e3e:	2300      	movs	r3, #0
 8013e40:	627b      	str	r3, [r7, #36]	@ 0x24
 8013e42:	e002      	b.n	8013e4a <gen_numname+0xce>
 8013e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e46:	3301      	adds	r3, #1
 8013e48:	627b      	str	r3, [r7, #36]	@ 0x24
 8013e4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e4e:	429a      	cmp	r2, r3
 8013e50:	d205      	bcs.n	8013e5e <gen_numname+0xe2>
 8013e52:	68fa      	ldr	r2, [r7, #12]
 8013e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e56:	4413      	add	r3, r2
 8013e58:	781b      	ldrb	r3, [r3, #0]
 8013e5a:	2b20      	cmp	r3, #32
 8013e5c:	d1f2      	bne.n	8013e44 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8013e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e60:	2b07      	cmp	r3, #7
 8013e62:	d807      	bhi.n	8013e74 <gen_numname+0xf8>
 8013e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e66:	1c5a      	adds	r2, r3, #1
 8013e68:	62ba      	str	r2, [r7, #40]	@ 0x28
 8013e6a:	3330      	adds	r3, #48	@ 0x30
 8013e6c:	443b      	add	r3, r7
 8013e6e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8013e72:	e000      	b.n	8013e76 <gen_numname+0xfa>
 8013e74:	2120      	movs	r1, #32
 8013e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e78:	1c5a      	adds	r2, r3, #1
 8013e7a:	627a      	str	r2, [r7, #36]	@ 0x24
 8013e7c:	68fa      	ldr	r2, [r7, #12]
 8013e7e:	4413      	add	r3, r2
 8013e80:	460a      	mov	r2, r1
 8013e82:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8013e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e86:	2b07      	cmp	r3, #7
 8013e88:	d9e9      	bls.n	8013e5e <gen_numname+0xe2>
}
 8013e8a:	bf00      	nop
 8013e8c:	bf00      	nop
 8013e8e:	3730      	adds	r7, #48	@ 0x30
 8013e90:	46bd      	mov	sp, r7
 8013e92:	bd80      	pop	{r7, pc}
 8013e94:	00011021 	.word	0x00011021

08013e98 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8013e98:	b480      	push	{r7}
 8013e9a:	b085      	sub	sp, #20
 8013e9c:	af00      	add	r7, sp, #0
 8013e9e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8013ea0:	2300      	movs	r3, #0
 8013ea2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8013ea4:	230b      	movs	r3, #11
 8013ea6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8013ea8:	7bfb      	ldrb	r3, [r7, #15]
 8013eaa:	b2da      	uxtb	r2, r3
 8013eac:	0852      	lsrs	r2, r2, #1
 8013eae:	01db      	lsls	r3, r3, #7
 8013eb0:	4313      	orrs	r3, r2
 8013eb2:	b2da      	uxtb	r2, r3
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	1c59      	adds	r1, r3, #1
 8013eb8:	6079      	str	r1, [r7, #4]
 8013eba:	781b      	ldrb	r3, [r3, #0]
 8013ebc:	4413      	add	r3, r2
 8013ebe:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8013ec0:	68bb      	ldr	r3, [r7, #8]
 8013ec2:	3b01      	subs	r3, #1
 8013ec4:	60bb      	str	r3, [r7, #8]
 8013ec6:	68bb      	ldr	r3, [r7, #8]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d1ed      	bne.n	8013ea8 <sum_sfn+0x10>
	return sum;
 8013ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ece:	4618      	mov	r0, r3
 8013ed0:	3714      	adds	r7, #20
 8013ed2:	46bd      	mov	sp, r7
 8013ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ed8:	4770      	bx	lr

08013eda <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8013eda:	b580      	push	{r7, lr}
 8013edc:	b086      	sub	sp, #24
 8013ede:	af00      	add	r7, sp, #0
 8013ee0:	6078      	str	r0, [r7, #4]
 8013ee2:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8013ee4:	2304      	movs	r3, #4
 8013ee6:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	681b      	ldr	r3, [r3, #0]
 8013eec:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8013eee:	23ff      	movs	r3, #255	@ 0xff
 8013ef0:	757b      	strb	r3, [r7, #21]
 8013ef2:	23ff      	movs	r3, #255	@ 0xff
 8013ef4:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8013ef6:	e081      	b.n	8013ffc <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	69db      	ldr	r3, [r3, #28]
 8013efc:	4619      	mov	r1, r3
 8013efe:	6938      	ldr	r0, [r7, #16]
 8013f00:	f7ff f83c 	bl	8012f7c <move_window>
 8013f04:	4603      	mov	r3, r0
 8013f06:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013f08:	7dfb      	ldrb	r3, [r7, #23]
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d17c      	bne.n	8014008 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	6a1b      	ldr	r3, [r3, #32]
 8013f12:	781b      	ldrb	r3, [r3, #0]
 8013f14:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8013f16:	7dbb      	ldrb	r3, [r7, #22]
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d102      	bne.n	8013f22 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8013f1c:	2304      	movs	r3, #4
 8013f1e:	75fb      	strb	r3, [r7, #23]
 8013f20:	e077      	b.n	8014012 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	6a1b      	ldr	r3, [r3, #32]
 8013f26:	330b      	adds	r3, #11
 8013f28:	781b      	ldrb	r3, [r3, #0]
 8013f2a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013f2e:	73fb      	strb	r3, [r7, #15]
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	7bfa      	ldrb	r2, [r7, #15]
 8013f34:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8013f36:	7dbb      	ldrb	r3, [r7, #22]
 8013f38:	2be5      	cmp	r3, #229	@ 0xe5
 8013f3a:	d00e      	beq.n	8013f5a <dir_read+0x80>
 8013f3c:	7dbb      	ldrb	r3, [r7, #22]
 8013f3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8013f40:	d00b      	beq.n	8013f5a <dir_read+0x80>
 8013f42:	7bfb      	ldrb	r3, [r7, #15]
 8013f44:	f023 0320 	bic.w	r3, r3, #32
 8013f48:	2b08      	cmp	r3, #8
 8013f4a:	bf0c      	ite	eq
 8013f4c:	2301      	moveq	r3, #1
 8013f4e:	2300      	movne	r3, #0
 8013f50:	b2db      	uxtb	r3, r3
 8013f52:	461a      	mov	r2, r3
 8013f54:	683b      	ldr	r3, [r7, #0]
 8013f56:	4293      	cmp	r3, r2
 8013f58:	d002      	beq.n	8013f60 <dir_read+0x86>
				ord = 0xFF;
 8013f5a:	23ff      	movs	r3, #255	@ 0xff
 8013f5c:	757b      	strb	r3, [r7, #21]
 8013f5e:	e044      	b.n	8013fea <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8013f60:	7bfb      	ldrb	r3, [r7, #15]
 8013f62:	2b0f      	cmp	r3, #15
 8013f64:	d12f      	bne.n	8013fc6 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8013f66:	7dbb      	ldrb	r3, [r7, #22]
 8013f68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d00d      	beq.n	8013f8c <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	6a1b      	ldr	r3, [r3, #32]
 8013f74:	7b5b      	ldrb	r3, [r3, #13]
 8013f76:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8013f78:	7dbb      	ldrb	r3, [r7, #22]
 8013f7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013f7e:	75bb      	strb	r3, [r7, #22]
 8013f80:	7dbb      	ldrb	r3, [r7, #22]
 8013f82:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	695a      	ldr	r2, [r3, #20]
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8013f8c:	7dba      	ldrb	r2, [r7, #22]
 8013f8e:	7d7b      	ldrb	r3, [r7, #21]
 8013f90:	429a      	cmp	r2, r3
 8013f92:	d115      	bne.n	8013fc0 <dir_read+0xe6>
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	6a1b      	ldr	r3, [r3, #32]
 8013f98:	330d      	adds	r3, #13
 8013f9a:	781b      	ldrb	r3, [r3, #0]
 8013f9c:	7d3a      	ldrb	r2, [r7, #20]
 8013f9e:	429a      	cmp	r2, r3
 8013fa0:	d10e      	bne.n	8013fc0 <dir_read+0xe6>
 8013fa2:	693b      	ldr	r3, [r7, #16]
 8013fa4:	691a      	ldr	r2, [r3, #16]
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	6a1b      	ldr	r3, [r3, #32]
 8013faa:	4619      	mov	r1, r3
 8013fac:	4610      	mov	r0, r2
 8013fae:	f7ff fe19 	bl	8013be4 <pick_lfn>
 8013fb2:	4603      	mov	r3, r0
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d003      	beq.n	8013fc0 <dir_read+0xe6>
 8013fb8:	7d7b      	ldrb	r3, [r7, #21]
 8013fba:	3b01      	subs	r3, #1
 8013fbc:	b2db      	uxtb	r3, r3
 8013fbe:	e000      	b.n	8013fc2 <dir_read+0xe8>
 8013fc0:	23ff      	movs	r3, #255	@ 0xff
 8013fc2:	757b      	strb	r3, [r7, #21]
 8013fc4:	e011      	b.n	8013fea <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8013fc6:	7d7b      	ldrb	r3, [r7, #21]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d109      	bne.n	8013fe0 <dir_read+0x106>
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	6a1b      	ldr	r3, [r3, #32]
 8013fd0:	4618      	mov	r0, r3
 8013fd2:	f7ff ff61 	bl	8013e98 <sum_sfn>
 8013fd6:	4603      	mov	r3, r0
 8013fd8:	461a      	mov	r2, r3
 8013fda:	7d3b      	ldrb	r3, [r7, #20]
 8013fdc:	4293      	cmp	r3, r2
 8013fde:	d015      	beq.n	801400c <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8013fe6:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 8013fe8:	e010      	b.n	801400c <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8013fea:	2100      	movs	r1, #0
 8013fec:	6878      	ldr	r0, [r7, #4]
 8013fee:	f7ff fc2d 	bl	801384c <dir_next>
 8013ff2:	4603      	mov	r3, r0
 8013ff4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013ff6:	7dfb      	ldrb	r3, [r7, #23]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d109      	bne.n	8014010 <dir_read+0x136>
	while (dp->sect) {
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	69db      	ldr	r3, [r3, #28]
 8014000:	2b00      	cmp	r3, #0
 8014002:	f47f af79 	bne.w	8013ef8 <dir_read+0x1e>
 8014006:	e004      	b.n	8014012 <dir_read+0x138>
		if (res != FR_OK) break;
 8014008:	bf00      	nop
 801400a:	e002      	b.n	8014012 <dir_read+0x138>
					break;
 801400c:	bf00      	nop
 801400e:	e000      	b.n	8014012 <dir_read+0x138>
		if (res != FR_OK) break;
 8014010:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8014012:	7dfb      	ldrb	r3, [r7, #23]
 8014014:	2b00      	cmp	r3, #0
 8014016:	d002      	beq.n	801401e <dir_read+0x144>
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	2200      	movs	r2, #0
 801401c:	61da      	str	r2, [r3, #28]
	return res;
 801401e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014020:	4618      	mov	r0, r3
 8014022:	3718      	adds	r7, #24
 8014024:	46bd      	mov	sp, r7
 8014026:	bd80      	pop	{r7, pc}

08014028 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8014028:	b580      	push	{r7, lr}
 801402a:	b086      	sub	sp, #24
 801402c:	af00      	add	r7, sp, #0
 801402e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	681b      	ldr	r3, [r3, #0]
 8014034:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8014036:	2100      	movs	r1, #0
 8014038:	6878      	ldr	r0, [r7, #4]
 801403a:	f7ff fb7e 	bl	801373a <dir_sdi>
 801403e:	4603      	mov	r3, r0
 8014040:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8014042:	7dfb      	ldrb	r3, [r7, #23]
 8014044:	2b00      	cmp	r3, #0
 8014046:	d001      	beq.n	801404c <dir_find+0x24>
 8014048:	7dfb      	ldrb	r3, [r7, #23]
 801404a:	e0a9      	b.n	80141a0 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801404c:	23ff      	movs	r3, #255	@ 0xff
 801404e:	753b      	strb	r3, [r7, #20]
 8014050:	7d3b      	ldrb	r3, [r7, #20]
 8014052:	757b      	strb	r3, [r7, #21]
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	f04f 32ff 	mov.w	r2, #4294967295
 801405a:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	69db      	ldr	r3, [r3, #28]
 8014060:	4619      	mov	r1, r3
 8014062:	6938      	ldr	r0, [r7, #16]
 8014064:	f7fe ff8a 	bl	8012f7c <move_window>
 8014068:	4603      	mov	r3, r0
 801406a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801406c:	7dfb      	ldrb	r3, [r7, #23]
 801406e:	2b00      	cmp	r3, #0
 8014070:	f040 8090 	bne.w	8014194 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	6a1b      	ldr	r3, [r3, #32]
 8014078:	781b      	ldrb	r3, [r3, #0]
 801407a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801407c:	7dbb      	ldrb	r3, [r7, #22]
 801407e:	2b00      	cmp	r3, #0
 8014080:	d102      	bne.n	8014088 <dir_find+0x60>
 8014082:	2304      	movs	r3, #4
 8014084:	75fb      	strb	r3, [r7, #23]
 8014086:	e08a      	b.n	801419e <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	6a1b      	ldr	r3, [r3, #32]
 801408c:	330b      	adds	r3, #11
 801408e:	781b      	ldrb	r3, [r3, #0]
 8014090:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014094:	73fb      	strb	r3, [r7, #15]
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	7bfa      	ldrb	r2, [r7, #15]
 801409a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801409c:	7dbb      	ldrb	r3, [r7, #22]
 801409e:	2be5      	cmp	r3, #229	@ 0xe5
 80140a0:	d007      	beq.n	80140b2 <dir_find+0x8a>
 80140a2:	7bfb      	ldrb	r3, [r7, #15]
 80140a4:	f003 0308 	and.w	r3, r3, #8
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d009      	beq.n	80140c0 <dir_find+0x98>
 80140ac:	7bfb      	ldrb	r3, [r7, #15]
 80140ae:	2b0f      	cmp	r3, #15
 80140b0:	d006      	beq.n	80140c0 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80140b2:	23ff      	movs	r3, #255	@ 0xff
 80140b4:	757b      	strb	r3, [r7, #21]
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	f04f 32ff 	mov.w	r2, #4294967295
 80140bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80140be:	e05e      	b.n	801417e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80140c0:	7bfb      	ldrb	r3, [r7, #15]
 80140c2:	2b0f      	cmp	r3, #15
 80140c4:	d136      	bne.n	8014134 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80140cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d154      	bne.n	801417e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80140d4:	7dbb      	ldrb	r3, [r7, #22]
 80140d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80140da:	2b00      	cmp	r3, #0
 80140dc:	d00d      	beq.n	80140fa <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	6a1b      	ldr	r3, [r3, #32]
 80140e2:	7b5b      	ldrb	r3, [r3, #13]
 80140e4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80140e6:	7dbb      	ldrb	r3, [r7, #22]
 80140e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80140ec:	75bb      	strb	r3, [r7, #22]
 80140ee:	7dbb      	ldrb	r3, [r7, #22]
 80140f0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	695a      	ldr	r2, [r3, #20]
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80140fa:	7dba      	ldrb	r2, [r7, #22]
 80140fc:	7d7b      	ldrb	r3, [r7, #21]
 80140fe:	429a      	cmp	r2, r3
 8014100:	d115      	bne.n	801412e <dir_find+0x106>
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	6a1b      	ldr	r3, [r3, #32]
 8014106:	330d      	adds	r3, #13
 8014108:	781b      	ldrb	r3, [r3, #0]
 801410a:	7d3a      	ldrb	r2, [r7, #20]
 801410c:	429a      	cmp	r2, r3
 801410e:	d10e      	bne.n	801412e <dir_find+0x106>
 8014110:	693b      	ldr	r3, [r7, #16]
 8014112:	691a      	ldr	r2, [r3, #16]
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	6a1b      	ldr	r3, [r3, #32]
 8014118:	4619      	mov	r1, r3
 801411a:	4610      	mov	r0, r2
 801411c:	f7ff fcf2 	bl	8013b04 <cmp_lfn>
 8014120:	4603      	mov	r3, r0
 8014122:	2b00      	cmp	r3, #0
 8014124:	d003      	beq.n	801412e <dir_find+0x106>
 8014126:	7d7b      	ldrb	r3, [r7, #21]
 8014128:	3b01      	subs	r3, #1
 801412a:	b2db      	uxtb	r3, r3
 801412c:	e000      	b.n	8014130 <dir_find+0x108>
 801412e:	23ff      	movs	r3, #255	@ 0xff
 8014130:	757b      	strb	r3, [r7, #21]
 8014132:	e024      	b.n	801417e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8014134:	7d7b      	ldrb	r3, [r7, #21]
 8014136:	2b00      	cmp	r3, #0
 8014138:	d109      	bne.n	801414e <dir_find+0x126>
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	6a1b      	ldr	r3, [r3, #32]
 801413e:	4618      	mov	r0, r3
 8014140:	f7ff feaa 	bl	8013e98 <sum_sfn>
 8014144:	4603      	mov	r3, r0
 8014146:	461a      	mov	r2, r3
 8014148:	7d3b      	ldrb	r3, [r7, #20]
 801414a:	4293      	cmp	r3, r2
 801414c:	d024      	beq.n	8014198 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8014154:	f003 0301 	and.w	r3, r3, #1
 8014158:	2b00      	cmp	r3, #0
 801415a:	d10a      	bne.n	8014172 <dir_find+0x14a>
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	6a18      	ldr	r0, [r3, #32]
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	3324      	adds	r3, #36	@ 0x24
 8014164:	220b      	movs	r2, #11
 8014166:	4619      	mov	r1, r3
 8014168:	f7fe fd16 	bl	8012b98 <mem_cmp>
 801416c:	4603      	mov	r3, r0
 801416e:	2b00      	cmp	r3, #0
 8014170:	d014      	beq.n	801419c <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8014172:	23ff      	movs	r3, #255	@ 0xff
 8014174:	757b      	strb	r3, [r7, #21]
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	f04f 32ff 	mov.w	r2, #4294967295
 801417c:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801417e:	2100      	movs	r1, #0
 8014180:	6878      	ldr	r0, [r7, #4]
 8014182:	f7ff fb63 	bl	801384c <dir_next>
 8014186:	4603      	mov	r3, r0
 8014188:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801418a:	7dfb      	ldrb	r3, [r7, #23]
 801418c:	2b00      	cmp	r3, #0
 801418e:	f43f af65 	beq.w	801405c <dir_find+0x34>
 8014192:	e004      	b.n	801419e <dir_find+0x176>
		if (res != FR_OK) break;
 8014194:	bf00      	nop
 8014196:	e002      	b.n	801419e <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8014198:	bf00      	nop
 801419a:	e000      	b.n	801419e <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801419c:	bf00      	nop

	return res;
 801419e:	7dfb      	ldrb	r3, [r7, #23]
}
 80141a0:	4618      	mov	r0, r3
 80141a2:	3718      	adds	r7, #24
 80141a4:	46bd      	mov	sp, r7
 80141a6:	bd80      	pop	{r7, pc}

080141a8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80141a8:	b580      	push	{r7, lr}
 80141aa:	b08c      	sub	sp, #48	@ 0x30
 80141ac:	af00      	add	r7, sp, #0
 80141ae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80141bc:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d001      	beq.n	80141c8 <dir_register+0x20>
 80141c4:	2306      	movs	r3, #6
 80141c6:	e0e0      	b.n	801438a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80141c8:	2300      	movs	r3, #0
 80141ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80141cc:	e002      	b.n	80141d4 <dir_register+0x2c>
 80141ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141d0:	3301      	adds	r3, #1
 80141d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80141d4:	69fb      	ldr	r3, [r7, #28]
 80141d6:	691a      	ldr	r2, [r3, #16]
 80141d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141da:	005b      	lsls	r3, r3, #1
 80141dc:	4413      	add	r3, r2
 80141de:	881b      	ldrh	r3, [r3, #0]
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d1f4      	bne.n	80141ce <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80141ea:	f107 030c 	add.w	r3, r7, #12
 80141ee:	220c      	movs	r2, #12
 80141f0:	4618      	mov	r0, r3
 80141f2:	f7fe fc95 	bl	8012b20 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80141f6:	7dfb      	ldrb	r3, [r7, #23]
 80141f8:	f003 0301 	and.w	r3, r3, #1
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d032      	beq.n	8014266 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	2240      	movs	r2, #64	@ 0x40
 8014204:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8014208:	2301      	movs	r3, #1
 801420a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801420c:	e016      	b.n	801423c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8014214:	69fb      	ldr	r3, [r7, #28]
 8014216:	691a      	ldr	r2, [r3, #16]
 8014218:	f107 010c 	add.w	r1, r7, #12
 801421c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801421e:	f7ff fdad 	bl	8013d7c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8014222:	6878      	ldr	r0, [r7, #4]
 8014224:	f7ff ff00 	bl	8014028 <dir_find>
 8014228:	4603      	mov	r3, r0
 801422a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 801422e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014232:	2b00      	cmp	r3, #0
 8014234:	d106      	bne.n	8014244 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8014236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014238:	3301      	adds	r3, #1
 801423a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801423c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801423e:	2b63      	cmp	r3, #99	@ 0x63
 8014240:	d9e5      	bls.n	801420e <dir_register+0x66>
 8014242:	e000      	b.n	8014246 <dir_register+0x9e>
			if (res != FR_OK) break;
 8014244:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8014246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014248:	2b64      	cmp	r3, #100	@ 0x64
 801424a:	d101      	bne.n	8014250 <dir_register+0xa8>
 801424c:	2307      	movs	r3, #7
 801424e:	e09c      	b.n	801438a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8014250:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014254:	2b04      	cmp	r3, #4
 8014256:	d002      	beq.n	801425e <dir_register+0xb6>
 8014258:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801425c:	e095      	b.n	801438a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801425e:	7dfa      	ldrb	r2, [r7, #23]
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8014266:	7dfb      	ldrb	r3, [r7, #23]
 8014268:	f003 0302 	and.w	r3, r3, #2
 801426c:	2b00      	cmp	r3, #0
 801426e:	d007      	beq.n	8014280 <dir_register+0xd8>
 8014270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014272:	330c      	adds	r3, #12
 8014274:	4a47      	ldr	r2, [pc, #284]	@ (8014394 <dir_register+0x1ec>)
 8014276:	fba2 2303 	umull	r2, r3, r2, r3
 801427a:	089b      	lsrs	r3, r3, #2
 801427c:	3301      	adds	r3, #1
 801427e:	e000      	b.n	8014282 <dir_register+0xda>
 8014280:	2301      	movs	r3, #1
 8014282:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8014284:	6a39      	ldr	r1, [r7, #32]
 8014286:	6878      	ldr	r0, [r7, #4]
 8014288:	f7ff fbb6 	bl	80139f8 <dir_alloc>
 801428c:	4603      	mov	r3, r0
 801428e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8014292:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014296:	2b00      	cmp	r3, #0
 8014298:	d148      	bne.n	801432c <dir_register+0x184>
 801429a:	6a3b      	ldr	r3, [r7, #32]
 801429c:	3b01      	subs	r3, #1
 801429e:	623b      	str	r3, [r7, #32]
 80142a0:	6a3b      	ldr	r3, [r7, #32]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d042      	beq.n	801432c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	695a      	ldr	r2, [r3, #20]
 80142aa:	6a3b      	ldr	r3, [r7, #32]
 80142ac:	015b      	lsls	r3, r3, #5
 80142ae:	1ad3      	subs	r3, r2, r3
 80142b0:	4619      	mov	r1, r3
 80142b2:	6878      	ldr	r0, [r7, #4]
 80142b4:	f7ff fa41 	bl	801373a <dir_sdi>
 80142b8:	4603      	mov	r3, r0
 80142ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80142be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d132      	bne.n	801432c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	3324      	adds	r3, #36	@ 0x24
 80142ca:	4618      	mov	r0, r3
 80142cc:	f7ff fde4 	bl	8013e98 <sum_sfn>
 80142d0:	4603      	mov	r3, r0
 80142d2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	69db      	ldr	r3, [r3, #28]
 80142d8:	4619      	mov	r1, r3
 80142da:	69f8      	ldr	r0, [r7, #28]
 80142dc:	f7fe fe4e 	bl	8012f7c <move_window>
 80142e0:	4603      	mov	r3, r0
 80142e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 80142e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d11d      	bne.n	801432a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80142ee:	69fb      	ldr	r3, [r7, #28]
 80142f0:	6918      	ldr	r0, [r3, #16]
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	6a19      	ldr	r1, [r3, #32]
 80142f6:	6a3b      	ldr	r3, [r7, #32]
 80142f8:	b2da      	uxtb	r2, r3
 80142fa:	7efb      	ldrb	r3, [r7, #27]
 80142fc:	f7ff fcd6 	bl	8013cac <put_lfn>
				fs->wflag = 1;
 8014300:	69fb      	ldr	r3, [r7, #28]
 8014302:	2201      	movs	r2, #1
 8014304:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8014306:	2100      	movs	r1, #0
 8014308:	6878      	ldr	r0, [r7, #4]
 801430a:	f7ff fa9f 	bl	801384c <dir_next>
 801430e:	4603      	mov	r3, r0
 8014310:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8014314:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014318:	2b00      	cmp	r3, #0
 801431a:	d107      	bne.n	801432c <dir_register+0x184>
 801431c:	6a3b      	ldr	r3, [r7, #32]
 801431e:	3b01      	subs	r3, #1
 8014320:	623b      	str	r3, [r7, #32]
 8014322:	6a3b      	ldr	r3, [r7, #32]
 8014324:	2b00      	cmp	r3, #0
 8014326:	d1d5      	bne.n	80142d4 <dir_register+0x12c>
 8014328:	e000      	b.n	801432c <dir_register+0x184>
				if (res != FR_OK) break;
 801432a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801432c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014330:	2b00      	cmp	r3, #0
 8014332:	d128      	bne.n	8014386 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	69db      	ldr	r3, [r3, #28]
 8014338:	4619      	mov	r1, r3
 801433a:	69f8      	ldr	r0, [r7, #28]
 801433c:	f7fe fe1e 	bl	8012f7c <move_window>
 8014340:	4603      	mov	r3, r0
 8014342:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8014346:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801434a:	2b00      	cmp	r3, #0
 801434c:	d11b      	bne.n	8014386 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	6a1b      	ldr	r3, [r3, #32]
 8014352:	2220      	movs	r2, #32
 8014354:	2100      	movs	r1, #0
 8014356:	4618      	mov	r0, r3
 8014358:	f7fe fc03 	bl	8012b62 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	6a18      	ldr	r0, [r3, #32]
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	3324      	adds	r3, #36	@ 0x24
 8014364:	220b      	movs	r2, #11
 8014366:	4619      	mov	r1, r3
 8014368:	f7fe fbda 	bl	8012b20 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	6a1b      	ldr	r3, [r3, #32]
 8014376:	330c      	adds	r3, #12
 8014378:	f002 0218 	and.w	r2, r2, #24
 801437c:	b2d2      	uxtb	r2, r2
 801437e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8014380:	69fb      	ldr	r3, [r7, #28]
 8014382:	2201      	movs	r2, #1
 8014384:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8014386:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801438a:	4618      	mov	r0, r3
 801438c:	3730      	adds	r7, #48	@ 0x30
 801438e:	46bd      	mov	sp, r7
 8014390:	bd80      	pop	{r7, pc}
 8014392:	bf00      	nop
 8014394:	4ec4ec4f 	.word	0x4ec4ec4f

08014398 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8014398:	b580      	push	{r7, lr}
 801439a:	b086      	sub	sp, #24
 801439c:	af00      	add	r7, sp, #0
 801439e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	681b      	ldr	r3, [r3, #0]
 80143a4:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	695b      	ldr	r3, [r3, #20]
 80143aa:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80143b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143b4:	d007      	beq.n	80143c6 <dir_remove+0x2e>
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80143ba:	4619      	mov	r1, r3
 80143bc:	6878      	ldr	r0, [r7, #4]
 80143be:	f7ff f9bc 	bl	801373a <dir_sdi>
 80143c2:	4603      	mov	r3, r0
 80143c4:	e000      	b.n	80143c8 <dir_remove+0x30>
 80143c6:	2300      	movs	r3, #0
 80143c8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80143ca:	7dfb      	ldrb	r3, [r7, #23]
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d128      	bne.n	8014422 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	69db      	ldr	r3, [r3, #28]
 80143d4:	4619      	mov	r1, r3
 80143d6:	6938      	ldr	r0, [r7, #16]
 80143d8:	f7fe fdd0 	bl	8012f7c <move_window>
 80143dc:	4603      	mov	r3, r0
 80143de:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80143e0:	7dfb      	ldrb	r3, [r7, #23]
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d115      	bne.n	8014412 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	6a1b      	ldr	r3, [r3, #32]
 80143ea:	22e5      	movs	r2, #229	@ 0xe5
 80143ec:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 80143ee:	693b      	ldr	r3, [r7, #16]
 80143f0:	2201      	movs	r2, #1
 80143f2:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	695b      	ldr	r3, [r3, #20]
 80143f8:	68fa      	ldr	r2, [r7, #12]
 80143fa:	429a      	cmp	r2, r3
 80143fc:	d90b      	bls.n	8014416 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 80143fe:	2100      	movs	r1, #0
 8014400:	6878      	ldr	r0, [r7, #4]
 8014402:	f7ff fa23 	bl	801384c <dir_next>
 8014406:	4603      	mov	r3, r0
 8014408:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 801440a:	7dfb      	ldrb	r3, [r7, #23]
 801440c:	2b00      	cmp	r3, #0
 801440e:	d0df      	beq.n	80143d0 <dir_remove+0x38>
 8014410:	e002      	b.n	8014418 <dir_remove+0x80>
			if (res != FR_OK) break;
 8014412:	bf00      	nop
 8014414:	e000      	b.n	8014418 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8014416:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 8014418:	7dfb      	ldrb	r3, [r7, #23]
 801441a:	2b04      	cmp	r3, #4
 801441c:	d101      	bne.n	8014422 <dir_remove+0x8a>
 801441e:	2302      	movs	r3, #2
 8014420:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 8014422:	7dfb      	ldrb	r3, [r7, #23]
}
 8014424:	4618      	mov	r0, r3
 8014426:	3718      	adds	r7, #24
 8014428:	46bd      	mov	sp, r7
 801442a:	bd80      	pop	{r7, pc}

0801442c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801442c:	b580      	push	{r7, lr}
 801442e:	b08a      	sub	sp, #40	@ 0x28
 8014430:	af00      	add	r7, sp, #0
 8014432:	6078      	str	r0, [r7, #4]
 8014434:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8014436:	683b      	ldr	r3, [r7, #0]
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	613b      	str	r3, [r7, #16]
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	681b      	ldr	r3, [r3, #0]
 8014440:	691b      	ldr	r3, [r3, #16]
 8014442:	60fb      	str	r3, [r7, #12]
 8014444:	2300      	movs	r3, #0
 8014446:	617b      	str	r3, [r7, #20]
 8014448:	697b      	ldr	r3, [r7, #20]
 801444a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801444c:	69bb      	ldr	r3, [r7, #24]
 801444e:	1c5a      	adds	r2, r3, #1
 8014450:	61ba      	str	r2, [r7, #24]
 8014452:	693a      	ldr	r2, [r7, #16]
 8014454:	4413      	add	r3, r2
 8014456:	781b      	ldrb	r3, [r3, #0]
 8014458:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801445a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801445c:	2b1f      	cmp	r3, #31
 801445e:	d940      	bls.n	80144e2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8014460:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014462:	2b2f      	cmp	r3, #47	@ 0x2f
 8014464:	d006      	beq.n	8014474 <create_name+0x48>
 8014466:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014468:	2b5c      	cmp	r3, #92	@ 0x5c
 801446a:	d110      	bne.n	801448e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801446c:	e002      	b.n	8014474 <create_name+0x48>
 801446e:	69bb      	ldr	r3, [r7, #24]
 8014470:	3301      	adds	r3, #1
 8014472:	61bb      	str	r3, [r7, #24]
 8014474:	693a      	ldr	r2, [r7, #16]
 8014476:	69bb      	ldr	r3, [r7, #24]
 8014478:	4413      	add	r3, r2
 801447a:	781b      	ldrb	r3, [r3, #0]
 801447c:	2b2f      	cmp	r3, #47	@ 0x2f
 801447e:	d0f6      	beq.n	801446e <create_name+0x42>
 8014480:	693a      	ldr	r2, [r7, #16]
 8014482:	69bb      	ldr	r3, [r7, #24]
 8014484:	4413      	add	r3, r2
 8014486:	781b      	ldrb	r3, [r3, #0]
 8014488:	2b5c      	cmp	r3, #92	@ 0x5c
 801448a:	d0f0      	beq.n	801446e <create_name+0x42>
			break;
 801448c:	e02a      	b.n	80144e4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801448e:	697b      	ldr	r3, [r7, #20]
 8014490:	2bfe      	cmp	r3, #254	@ 0xfe
 8014492:	d901      	bls.n	8014498 <create_name+0x6c>
 8014494:	2306      	movs	r3, #6
 8014496:	e1ca      	b.n	801482e <create_name+0x402>
#if !_LFN_UNICODE
		w &= 0xFF;
 8014498:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801449a:	b2db      	uxtb	r3, r3
 801449c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801449e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80144a0:	2101      	movs	r1, #1
 80144a2:	4618      	mov	r0, r3
 80144a4:	f002 fa9a 	bl	80169dc <ff_convert>
 80144a8:	4603      	mov	r3, r0
 80144aa:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80144ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d101      	bne.n	80144b6 <create_name+0x8a>
 80144b2:	2306      	movs	r3, #6
 80144b4:	e1bb      	b.n	801482e <create_name+0x402>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80144b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80144b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80144ba:	d809      	bhi.n	80144d0 <create_name+0xa4>
 80144bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80144be:	4619      	mov	r1, r3
 80144c0:	489e      	ldr	r0, [pc, #632]	@ (801473c <create_name+0x310>)
 80144c2:	f7fe fb90 	bl	8012be6 <chk_chr>
 80144c6:	4603      	mov	r3, r0
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d001      	beq.n	80144d0 <create_name+0xa4>
 80144cc:	2306      	movs	r3, #6
 80144ce:	e1ae      	b.n	801482e <create_name+0x402>
		lfn[di++] = w;					/* Store the Unicode character */
 80144d0:	697b      	ldr	r3, [r7, #20]
 80144d2:	1c5a      	adds	r2, r3, #1
 80144d4:	617a      	str	r2, [r7, #20]
 80144d6:	005b      	lsls	r3, r3, #1
 80144d8:	68fa      	ldr	r2, [r7, #12]
 80144da:	4413      	add	r3, r2
 80144dc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80144de:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80144e0:	e7b4      	b.n	801444c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80144e2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80144e4:	693a      	ldr	r2, [r7, #16]
 80144e6:	69bb      	ldr	r3, [r7, #24]
 80144e8:	441a      	add	r2, r3
 80144ea:	683b      	ldr	r3, [r7, #0]
 80144ec:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80144ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80144f0:	2b1f      	cmp	r3, #31
 80144f2:	d801      	bhi.n	80144f8 <create_name+0xcc>
 80144f4:	2304      	movs	r3, #4
 80144f6:	e000      	b.n	80144fa <create_name+0xce>
 80144f8:	2300      	movs	r3, #0
 80144fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 80144fe:	697b      	ldr	r3, [r7, #20]
 8014500:	2b01      	cmp	r3, #1
 8014502:	d109      	bne.n	8014518 <create_name+0xec>
 8014504:	697a      	ldr	r2, [r7, #20]
 8014506:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801450a:	4413      	add	r3, r2
 801450c:	005b      	lsls	r3, r3, #1
 801450e:	68fa      	ldr	r2, [r7, #12]
 8014510:	4413      	add	r3, r2
 8014512:	881b      	ldrh	r3, [r3, #0]
 8014514:	2b2e      	cmp	r3, #46	@ 0x2e
 8014516:	d015      	beq.n	8014544 <create_name+0x118>
 8014518:	697b      	ldr	r3, [r7, #20]
 801451a:	2b02      	cmp	r3, #2
 801451c:	d14d      	bne.n	80145ba <create_name+0x18e>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 801451e:	697a      	ldr	r2, [r7, #20]
 8014520:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8014524:	4413      	add	r3, r2
 8014526:	005b      	lsls	r3, r3, #1
 8014528:	68fa      	ldr	r2, [r7, #12]
 801452a:	4413      	add	r3, r2
 801452c:	881b      	ldrh	r3, [r3, #0]
 801452e:	2b2e      	cmp	r3, #46	@ 0x2e
 8014530:	d143      	bne.n	80145ba <create_name+0x18e>
 8014532:	697a      	ldr	r2, [r7, #20]
 8014534:	4b82      	ldr	r3, [pc, #520]	@ (8014740 <create_name+0x314>)
 8014536:	4413      	add	r3, r2
 8014538:	005b      	lsls	r3, r3, #1
 801453a:	68fa      	ldr	r2, [r7, #12]
 801453c:	4413      	add	r3, r2
 801453e:	881b      	ldrh	r3, [r3, #0]
 8014540:	2b2e      	cmp	r3, #46	@ 0x2e
 8014542:	d13a      	bne.n	80145ba <create_name+0x18e>
		lfn[di] = 0;
 8014544:	697b      	ldr	r3, [r7, #20]
 8014546:	005b      	lsls	r3, r3, #1
 8014548:	68fa      	ldr	r2, [r7, #12]
 801454a:	4413      	add	r3, r2
 801454c:	2200      	movs	r2, #0
 801454e:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 8014550:	2300      	movs	r3, #0
 8014552:	623b      	str	r3, [r7, #32]
 8014554:	e00f      	b.n	8014576 <create_name+0x14a>
			dp->fn[i] = (i < di) ? '.' : ' ';
 8014556:	6a3a      	ldr	r2, [r7, #32]
 8014558:	697b      	ldr	r3, [r7, #20]
 801455a:	429a      	cmp	r2, r3
 801455c:	d201      	bcs.n	8014562 <create_name+0x136>
 801455e:	212e      	movs	r1, #46	@ 0x2e
 8014560:	e000      	b.n	8014564 <create_name+0x138>
 8014562:	2120      	movs	r1, #32
 8014564:	687a      	ldr	r2, [r7, #4]
 8014566:	6a3b      	ldr	r3, [r7, #32]
 8014568:	4413      	add	r3, r2
 801456a:	3324      	adds	r3, #36	@ 0x24
 801456c:	460a      	mov	r2, r1
 801456e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 8014570:	6a3b      	ldr	r3, [r7, #32]
 8014572:	3301      	adds	r3, #1
 8014574:	623b      	str	r3, [r7, #32]
 8014576:	6a3b      	ldr	r3, [r7, #32]
 8014578:	2b0a      	cmp	r3, #10
 801457a:	d9ec      	bls.n	8014556 <create_name+0x12a>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 801457c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014580:	f043 0320 	orr.w	r3, r3, #32
 8014584:	b2d9      	uxtb	r1, r3
 8014586:	687a      	ldr	r2, [r7, #4]
 8014588:	6a3b      	ldr	r3, [r7, #32]
 801458a:	4413      	add	r3, r2
 801458c:	3324      	adds	r3, #36	@ 0x24
 801458e:	460a      	mov	r2, r1
 8014590:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8014592:	2300      	movs	r3, #0
 8014594:	e14b      	b.n	801482e <create_name+0x402>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 8014596:	697a      	ldr	r2, [r7, #20]
 8014598:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801459c:	4413      	add	r3, r2
 801459e:	005b      	lsls	r3, r3, #1
 80145a0:	68fa      	ldr	r2, [r7, #12]
 80145a2:	4413      	add	r3, r2
 80145a4:	881b      	ldrh	r3, [r3, #0]
 80145a6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80145a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80145aa:	2b20      	cmp	r3, #32
 80145ac:	d002      	beq.n	80145b4 <create_name+0x188>
 80145ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80145b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80145b2:	d106      	bne.n	80145c2 <create_name+0x196>
		di--;
 80145b4:	697b      	ldr	r3, [r7, #20]
 80145b6:	3b01      	subs	r3, #1
 80145b8:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80145ba:	697b      	ldr	r3, [r7, #20]
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d1ea      	bne.n	8014596 <create_name+0x16a>
 80145c0:	e000      	b.n	80145c4 <create_name+0x198>
		if (w != ' ' && w != '.') break;
 80145c2:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80145c4:	697b      	ldr	r3, [r7, #20]
 80145c6:	005b      	lsls	r3, r3, #1
 80145c8:	68fa      	ldr	r2, [r7, #12]
 80145ca:	4413      	add	r3, r2
 80145cc:	2200      	movs	r2, #0
 80145ce:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80145d0:	697b      	ldr	r3, [r7, #20]
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d101      	bne.n	80145da <create_name+0x1ae>
 80145d6:	2306      	movs	r3, #6
 80145d8:	e129      	b.n	801482e <create_name+0x402>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	3324      	adds	r3, #36	@ 0x24
 80145de:	220b      	movs	r2, #11
 80145e0:	2120      	movs	r1, #32
 80145e2:	4618      	mov	r0, r3
 80145e4:	f7fe fabd 	bl	8012b62 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80145e8:	2300      	movs	r3, #0
 80145ea:	61bb      	str	r3, [r7, #24]
 80145ec:	e002      	b.n	80145f4 <create_name+0x1c8>
 80145ee:	69bb      	ldr	r3, [r7, #24]
 80145f0:	3301      	adds	r3, #1
 80145f2:	61bb      	str	r3, [r7, #24]
 80145f4:	69bb      	ldr	r3, [r7, #24]
 80145f6:	005b      	lsls	r3, r3, #1
 80145f8:	68fa      	ldr	r2, [r7, #12]
 80145fa:	4413      	add	r3, r2
 80145fc:	881b      	ldrh	r3, [r3, #0]
 80145fe:	2b20      	cmp	r3, #32
 8014600:	d0f5      	beq.n	80145ee <create_name+0x1c2>
 8014602:	69bb      	ldr	r3, [r7, #24]
 8014604:	005b      	lsls	r3, r3, #1
 8014606:	68fa      	ldr	r2, [r7, #12]
 8014608:	4413      	add	r3, r2
 801460a:	881b      	ldrh	r3, [r3, #0]
 801460c:	2b2e      	cmp	r3, #46	@ 0x2e
 801460e:	d0ee      	beq.n	80145ee <create_name+0x1c2>
	if (si) cf |= NS_LOSS | NS_LFN;
 8014610:	69bb      	ldr	r3, [r7, #24]
 8014612:	2b00      	cmp	r3, #0
 8014614:	d009      	beq.n	801462a <create_name+0x1fe>
 8014616:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801461a:	f043 0303 	orr.w	r3, r3, #3
 801461e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8014622:	e002      	b.n	801462a <create_name+0x1fe>
 8014624:	697b      	ldr	r3, [r7, #20]
 8014626:	3b01      	subs	r3, #1
 8014628:	617b      	str	r3, [r7, #20]
 801462a:	697b      	ldr	r3, [r7, #20]
 801462c:	2b00      	cmp	r3, #0
 801462e:	d009      	beq.n	8014644 <create_name+0x218>
 8014630:	697a      	ldr	r2, [r7, #20]
 8014632:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8014636:	4413      	add	r3, r2
 8014638:	005b      	lsls	r3, r3, #1
 801463a:	68fa      	ldr	r2, [r7, #12]
 801463c:	4413      	add	r3, r2
 801463e:	881b      	ldrh	r3, [r3, #0]
 8014640:	2b2e      	cmp	r3, #46	@ 0x2e
 8014642:	d1ef      	bne.n	8014624 <create_name+0x1f8>

	i = b = 0; ni = 8;
 8014644:	2300      	movs	r3, #0
 8014646:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801464a:	2300      	movs	r3, #0
 801464c:	623b      	str	r3, [r7, #32]
 801464e:	2308      	movs	r3, #8
 8014650:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8014652:	69bb      	ldr	r3, [r7, #24]
 8014654:	1c5a      	adds	r2, r3, #1
 8014656:	61ba      	str	r2, [r7, #24]
 8014658:	005b      	lsls	r3, r3, #1
 801465a:	68fa      	ldr	r2, [r7, #12]
 801465c:	4413      	add	r3, r2
 801465e:	881b      	ldrh	r3, [r3, #0]
 8014660:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8014662:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014664:	2b00      	cmp	r3, #0
 8014666:	f000 8098 	beq.w	801479a <create_name+0x36e>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801466a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801466c:	2b20      	cmp	r3, #32
 801466e:	d006      	beq.n	801467e <create_name+0x252>
 8014670:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014672:	2b2e      	cmp	r3, #46	@ 0x2e
 8014674:	d10a      	bne.n	801468c <create_name+0x260>
 8014676:	69ba      	ldr	r2, [r7, #24]
 8014678:	697b      	ldr	r3, [r7, #20]
 801467a:	429a      	cmp	r2, r3
 801467c:	d006      	beq.n	801468c <create_name+0x260>
			cf |= NS_LOSS | NS_LFN; continue;
 801467e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014682:	f043 0303 	orr.w	r3, r3, #3
 8014686:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801468a:	e085      	b.n	8014798 <create_name+0x36c>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801468c:	6a3a      	ldr	r2, [r7, #32]
 801468e:	69fb      	ldr	r3, [r7, #28]
 8014690:	429a      	cmp	r2, r3
 8014692:	d203      	bcs.n	801469c <create_name+0x270>
 8014694:	69ba      	ldr	r2, [r7, #24]
 8014696:	697b      	ldr	r3, [r7, #20]
 8014698:	429a      	cmp	r2, r3
 801469a:	d123      	bne.n	80146e4 <create_name+0x2b8>
			if (ni == 11) {				/* Long extension */
 801469c:	69fb      	ldr	r3, [r7, #28]
 801469e:	2b0b      	cmp	r3, #11
 80146a0:	d106      	bne.n	80146b0 <create_name+0x284>
				cf |= NS_LOSS | NS_LFN; break;
 80146a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80146a6:	f043 0303 	orr.w	r3, r3, #3
 80146aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80146ae:	e077      	b.n	80147a0 <create_name+0x374>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80146b0:	69ba      	ldr	r2, [r7, #24]
 80146b2:	697b      	ldr	r3, [r7, #20]
 80146b4:	429a      	cmp	r2, r3
 80146b6:	d005      	beq.n	80146c4 <create_name+0x298>
 80146b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80146bc:	f043 0303 	orr.w	r3, r3, #3
 80146c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80146c4:	69ba      	ldr	r2, [r7, #24]
 80146c6:	697b      	ldr	r3, [r7, #20]
 80146c8:	429a      	cmp	r2, r3
 80146ca:	d868      	bhi.n	801479e <create_name+0x372>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80146cc:	697b      	ldr	r3, [r7, #20]
 80146ce:	61bb      	str	r3, [r7, #24]
 80146d0:	2308      	movs	r3, #8
 80146d2:	623b      	str	r3, [r7, #32]
 80146d4:	230b      	movs	r3, #11
 80146d6:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80146d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80146dc:	009b      	lsls	r3, r3, #2
 80146de:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80146e2:	e059      	b.n	8014798 <create_name+0x36c>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80146e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80146e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80146e8:	d914      	bls.n	8014714 <create_name+0x2e8>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80146ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80146ec:	2100      	movs	r1, #0
 80146ee:	4618      	mov	r0, r3
 80146f0:	f002 f974 	bl	80169dc <ff_convert>
 80146f4:	4603      	mov	r3, r0
 80146f6:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80146f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d004      	beq.n	8014708 <create_name+0x2dc>
 80146fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014700:	3b80      	subs	r3, #128	@ 0x80
 8014702:	4a10      	ldr	r2, [pc, #64]	@ (8014744 <create_name+0x318>)
 8014704:	5cd3      	ldrb	r3, [r2, r3]
 8014706:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8014708:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801470c:	f043 0302 	orr.w	r3, r3, #2
 8014710:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8014714:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014716:	2b00      	cmp	r3, #0
 8014718:	d007      	beq.n	801472a <create_name+0x2fe>
 801471a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801471c:	4619      	mov	r1, r3
 801471e:	480a      	ldr	r0, [pc, #40]	@ (8014748 <create_name+0x31c>)
 8014720:	f7fe fa61 	bl	8012be6 <chk_chr>
 8014724:	4603      	mov	r3, r0
 8014726:	2b00      	cmp	r3, #0
 8014728:	d010      	beq.n	801474c <create_name+0x320>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801472a:	235f      	movs	r3, #95	@ 0x5f
 801472c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801472e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014732:	f043 0303 	orr.w	r3, r3, #3
 8014736:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801473a:	e023      	b.n	8014784 <create_name+0x358>
 801473c:	08019af8 	.word	0x08019af8
 8014740:	7ffffffe 	.word	0x7ffffffe
 8014744:	08019b80 	.word	0x08019b80
 8014748:	08019b04 	.word	0x08019b04
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801474c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801474e:	2b40      	cmp	r3, #64	@ 0x40
 8014750:	d909      	bls.n	8014766 <create_name+0x33a>
 8014752:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014754:	2b5a      	cmp	r3, #90	@ 0x5a
 8014756:	d806      	bhi.n	8014766 <create_name+0x33a>
					b |= 2;
 8014758:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801475c:	f043 0302 	orr.w	r3, r3, #2
 8014760:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8014764:	e00e      	b.n	8014784 <create_name+0x358>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8014766:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014768:	2b60      	cmp	r3, #96	@ 0x60
 801476a:	d90b      	bls.n	8014784 <create_name+0x358>
 801476c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801476e:	2b7a      	cmp	r3, #122	@ 0x7a
 8014770:	d808      	bhi.n	8014784 <create_name+0x358>
						b |= 1; w -= 0x20;
 8014772:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014776:	f043 0301 	orr.w	r3, r3, #1
 801477a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801477e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014780:	3b20      	subs	r3, #32
 8014782:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8014784:	6a3b      	ldr	r3, [r7, #32]
 8014786:	1c5a      	adds	r2, r3, #1
 8014788:	623a      	str	r2, [r7, #32]
 801478a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801478c:	b2d1      	uxtb	r1, r2
 801478e:	687a      	ldr	r2, [r7, #4]
 8014790:	4413      	add	r3, r2
 8014792:	460a      	mov	r2, r1
 8014794:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8014798:	e75b      	b.n	8014652 <create_name+0x226>
		if (!w) break;					/* Break on end of the LFN */
 801479a:	bf00      	nop
 801479c:	e000      	b.n	80147a0 <create_name+0x374>
			if (si > di) break;			/* No extension */
 801479e:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80147a6:	2be5      	cmp	r3, #229	@ 0xe5
 80147a8:	d103      	bne.n	80147b2 <create_name+0x386>
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	2205      	movs	r2, #5
 80147ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 80147b2:	69fb      	ldr	r3, [r7, #28]
 80147b4:	2b08      	cmp	r3, #8
 80147b6:	d104      	bne.n	80147c2 <create_name+0x396>
 80147b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80147bc:	009b      	lsls	r3, r3, #2
 80147be:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80147c2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80147c6:	f003 030c 	and.w	r3, r3, #12
 80147ca:	2b0c      	cmp	r3, #12
 80147cc:	d005      	beq.n	80147da <create_name+0x3ae>
 80147ce:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80147d2:	f003 0303 	and.w	r3, r3, #3
 80147d6:	2b03      	cmp	r3, #3
 80147d8:	d105      	bne.n	80147e6 <create_name+0x3ba>
 80147da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80147de:	f043 0302 	orr.w	r3, r3, #2
 80147e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80147e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80147ea:	f003 0302 	and.w	r3, r3, #2
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d117      	bne.n	8014822 <create_name+0x3f6>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80147f2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80147f6:	f003 0303 	and.w	r3, r3, #3
 80147fa:	2b01      	cmp	r3, #1
 80147fc:	d105      	bne.n	801480a <create_name+0x3de>
 80147fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014802:	f043 0310 	orr.w	r3, r3, #16
 8014806:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801480a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801480e:	f003 030c 	and.w	r3, r3, #12
 8014812:	2b04      	cmp	r3, #4
 8014814:	d105      	bne.n	8014822 <create_name+0x3f6>
 8014816:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801481a:	f043 0308 	orr.w	r3, r3, #8
 801481e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8014828:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 801482c:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801482e:	4618      	mov	r0, r3
 8014830:	3728      	adds	r7, #40	@ 0x28
 8014832:	46bd      	mov	sp, r7
 8014834:	bd80      	pop	{r7, pc}
 8014836:	bf00      	nop

08014838 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8014838:	b580      	push	{r7, lr}
 801483a:	b086      	sub	sp, #24
 801483c:	af00      	add	r7, sp, #0
 801483e:	6078      	str	r0, [r7, #4]
 8014840:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8014846:	693b      	ldr	r3, [r7, #16]
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 801484c:	683b      	ldr	r3, [r7, #0]
 801484e:	781b      	ldrb	r3, [r3, #0]
 8014850:	2b2f      	cmp	r3, #47	@ 0x2f
 8014852:	d00b      	beq.n	801486c <follow_path+0x34>
 8014854:	683b      	ldr	r3, [r7, #0]
 8014856:	781b      	ldrb	r3, [r3, #0]
 8014858:	2b5c      	cmp	r3, #92	@ 0x5c
 801485a:	d007      	beq.n	801486c <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 801485c:	68fb      	ldr	r3, [r7, #12]
 801485e:	69da      	ldr	r2, [r3, #28]
 8014860:	693b      	ldr	r3, [r7, #16]
 8014862:	609a      	str	r2, [r3, #8]
 8014864:	e00d      	b.n	8014882 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8014866:	683b      	ldr	r3, [r7, #0]
 8014868:	3301      	adds	r3, #1
 801486a:	603b      	str	r3, [r7, #0]
 801486c:	683b      	ldr	r3, [r7, #0]
 801486e:	781b      	ldrb	r3, [r3, #0]
 8014870:	2b2f      	cmp	r3, #47	@ 0x2f
 8014872:	d0f8      	beq.n	8014866 <follow_path+0x2e>
 8014874:	683b      	ldr	r3, [r7, #0]
 8014876:	781b      	ldrb	r3, [r3, #0]
 8014878:	2b5c      	cmp	r3, #92	@ 0x5c
 801487a:	d0f4      	beq.n	8014866 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 801487c:	693b      	ldr	r3, [r7, #16]
 801487e:	2200      	movs	r2, #0
 8014880:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8014882:	683b      	ldr	r3, [r7, #0]
 8014884:	781b      	ldrb	r3, [r3, #0]
 8014886:	2b1f      	cmp	r3, #31
 8014888:	d80a      	bhi.n	80148a0 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	2280      	movs	r2, #128	@ 0x80
 801488e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8014892:	2100      	movs	r1, #0
 8014894:	6878      	ldr	r0, [r7, #4]
 8014896:	f7fe ff50 	bl	801373a <dir_sdi>
 801489a:	4603      	mov	r3, r0
 801489c:	75fb      	strb	r3, [r7, #23]
 801489e:	e05b      	b.n	8014958 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80148a0:	463b      	mov	r3, r7
 80148a2:	4619      	mov	r1, r3
 80148a4:	6878      	ldr	r0, [r7, #4]
 80148a6:	f7ff fdc1 	bl	801442c <create_name>
 80148aa:	4603      	mov	r3, r0
 80148ac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80148ae:	7dfb      	ldrb	r3, [r7, #23]
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d14c      	bne.n	801494e <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 80148b4:	6878      	ldr	r0, [r7, #4]
 80148b6:	f7ff fbb7 	bl	8014028 <dir_find>
 80148ba:	4603      	mov	r3, r0
 80148bc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80148c4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80148c6:	7dfb      	ldrb	r3, [r7, #23]
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d01b      	beq.n	8014904 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80148cc:	7dfb      	ldrb	r3, [r7, #23]
 80148ce:	2b04      	cmp	r3, #4
 80148d0:	d13f      	bne.n	8014952 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 80148d2:	7afb      	ldrb	r3, [r7, #11]
 80148d4:	f003 0320 	and.w	r3, r3, #32
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d00b      	beq.n	80148f4 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80148dc:	7afb      	ldrb	r3, [r7, #11]
 80148de:	f003 0304 	and.w	r3, r3, #4
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d031      	beq.n	801494a <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	2280      	movs	r2, #128	@ 0x80
 80148ea:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
						res = FR_OK;
 80148ee:	2300      	movs	r3, #0
 80148f0:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 80148f2:	e02e      	b.n	8014952 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80148f4:	7afb      	ldrb	r3, [r7, #11]
 80148f6:	f003 0304 	and.w	r3, r3, #4
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d129      	bne.n	8014952 <follow_path+0x11a>
 80148fe:	2305      	movs	r3, #5
 8014900:	75fb      	strb	r3, [r7, #23]
				break;
 8014902:	e026      	b.n	8014952 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8014904:	7afb      	ldrb	r3, [r7, #11]
 8014906:	f003 0304 	and.w	r3, r3, #4
 801490a:	2b00      	cmp	r3, #0
 801490c:	d123      	bne.n	8014956 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801490e:	693b      	ldr	r3, [r7, #16]
 8014910:	799b      	ldrb	r3, [r3, #6]
 8014912:	f003 0310 	and.w	r3, r3, #16
 8014916:	2b00      	cmp	r3, #0
 8014918:	d102      	bne.n	8014920 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 801491a:	2305      	movs	r3, #5
 801491c:	75fb      	strb	r3, [r7, #23]
 801491e:	e01b      	b.n	8014958 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	695b      	ldr	r3, [r3, #20]
 801492a:	68fa      	ldr	r2, [r7, #12]
 801492c:	8992      	ldrh	r2, [r2, #12]
 801492e:	fbb3 f0f2 	udiv	r0, r3, r2
 8014932:	fb00 f202 	mul.w	r2, r0, r2
 8014936:	1a9b      	subs	r3, r3, r2
 8014938:	440b      	add	r3, r1
 801493a:	4619      	mov	r1, r3
 801493c:	68f8      	ldr	r0, [r7, #12]
 801493e:	f7ff f8a2 	bl	8013a86 <ld_clust>
 8014942:	4602      	mov	r2, r0
 8014944:	693b      	ldr	r3, [r7, #16]
 8014946:	609a      	str	r2, [r3, #8]
 8014948:	e7aa      	b.n	80148a0 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 801494a:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801494c:	e7a8      	b.n	80148a0 <follow_path+0x68>
			if (res != FR_OK) break;
 801494e:	bf00      	nop
 8014950:	e002      	b.n	8014958 <follow_path+0x120>
				break;
 8014952:	bf00      	nop
 8014954:	e000      	b.n	8014958 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8014956:	bf00      	nop
			}
		}
	}

	return res;
 8014958:	7dfb      	ldrb	r3, [r7, #23]
}
 801495a:	4618      	mov	r0, r3
 801495c:	3718      	adds	r7, #24
 801495e:	46bd      	mov	sp, r7
 8014960:	bd80      	pop	{r7, pc}

08014962 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8014962:	b480      	push	{r7}
 8014964:	b087      	sub	sp, #28
 8014966:	af00      	add	r7, sp, #0
 8014968:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801496a:	f04f 33ff 	mov.w	r3, #4294967295
 801496e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	2b00      	cmp	r3, #0
 8014976:	d031      	beq.n	80149dc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	681b      	ldr	r3, [r3, #0]
 801497c:	617b      	str	r3, [r7, #20]
 801497e:	e002      	b.n	8014986 <get_ldnumber+0x24>
 8014980:	697b      	ldr	r3, [r7, #20]
 8014982:	3301      	adds	r3, #1
 8014984:	617b      	str	r3, [r7, #20]
 8014986:	697b      	ldr	r3, [r7, #20]
 8014988:	781b      	ldrb	r3, [r3, #0]
 801498a:	2b1f      	cmp	r3, #31
 801498c:	d903      	bls.n	8014996 <get_ldnumber+0x34>
 801498e:	697b      	ldr	r3, [r7, #20]
 8014990:	781b      	ldrb	r3, [r3, #0]
 8014992:	2b3a      	cmp	r3, #58	@ 0x3a
 8014994:	d1f4      	bne.n	8014980 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8014996:	697b      	ldr	r3, [r7, #20]
 8014998:	781b      	ldrb	r3, [r3, #0]
 801499a:	2b3a      	cmp	r3, #58	@ 0x3a
 801499c:	d11c      	bne.n	80149d8 <get_ldnumber+0x76>
			tp = *path;
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	681b      	ldr	r3, [r3, #0]
 80149a2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	1c5a      	adds	r2, r3, #1
 80149a8:	60fa      	str	r2, [r7, #12]
 80149aa:	781b      	ldrb	r3, [r3, #0]
 80149ac:	3b30      	subs	r3, #48	@ 0x30
 80149ae:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80149b0:	68bb      	ldr	r3, [r7, #8]
 80149b2:	2b09      	cmp	r3, #9
 80149b4:	d80e      	bhi.n	80149d4 <get_ldnumber+0x72>
 80149b6:	68fa      	ldr	r2, [r7, #12]
 80149b8:	697b      	ldr	r3, [r7, #20]
 80149ba:	429a      	cmp	r2, r3
 80149bc:	d10a      	bne.n	80149d4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80149be:	68bb      	ldr	r3, [r7, #8]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d107      	bne.n	80149d4 <get_ldnumber+0x72>
					vol = (int)i;
 80149c4:	68bb      	ldr	r3, [r7, #8]
 80149c6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80149c8:	697b      	ldr	r3, [r7, #20]
 80149ca:	3301      	adds	r3, #1
 80149cc:	617b      	str	r3, [r7, #20]
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	697a      	ldr	r2, [r7, #20]
 80149d2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80149d4:	693b      	ldr	r3, [r7, #16]
 80149d6:	e002      	b.n	80149de <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80149d8:	2300      	movs	r3, #0
 80149da:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80149dc:	693b      	ldr	r3, [r7, #16]
}
 80149de:	4618      	mov	r0, r3
 80149e0:	371c      	adds	r7, #28
 80149e2:	46bd      	mov	sp, r7
 80149e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149e8:	4770      	bx	lr
	...

080149ec <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80149ec:	b580      	push	{r7, lr}
 80149ee:	b082      	sub	sp, #8
 80149f0:	af00      	add	r7, sp, #0
 80149f2:	6078      	str	r0, [r7, #4]
 80149f4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	2200      	movs	r2, #0
 80149fa:	70da      	strb	r2, [r3, #3]
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	f04f 32ff 	mov.w	r2, #4294967295
 8014a02:	639a      	str	r2, [r3, #56]	@ 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8014a04:	6839      	ldr	r1, [r7, #0]
 8014a06:	6878      	ldr	r0, [r7, #4]
 8014a08:	f7fe fab8 	bl	8012f7c <move_window>
 8014a0c:	4603      	mov	r3, r0
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	d001      	beq.n	8014a16 <check_fs+0x2a>
 8014a12:	2304      	movs	r3, #4
 8014a14:	e038      	b.n	8014a88 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	333c      	adds	r3, #60	@ 0x3c
 8014a1a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8014a1e:	4618      	mov	r0, r3
 8014a20:	f7fd fffc 	bl	8012a1c <ld_word>
 8014a24:	4603      	mov	r3, r0
 8014a26:	461a      	mov	r2, r3
 8014a28:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8014a2c:	429a      	cmp	r2, r3
 8014a2e:	d001      	beq.n	8014a34 <check_fs+0x48>
 8014a30:	2303      	movs	r3, #3
 8014a32:	e029      	b.n	8014a88 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8014a3a:	2be9      	cmp	r3, #233	@ 0xe9
 8014a3c:	d009      	beq.n	8014a52 <check_fs+0x66>
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8014a44:	2beb      	cmp	r3, #235	@ 0xeb
 8014a46:	d11e      	bne.n	8014a86 <check_fs+0x9a>
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8014a4e:	2b90      	cmp	r3, #144	@ 0x90
 8014a50:	d119      	bne.n	8014a86 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	333c      	adds	r3, #60	@ 0x3c
 8014a56:	3336      	adds	r3, #54	@ 0x36
 8014a58:	4618      	mov	r0, r3
 8014a5a:	f7fd fff7 	bl	8012a4c <ld_dword>
 8014a5e:	4603      	mov	r3, r0
 8014a60:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8014a64:	4a0a      	ldr	r2, [pc, #40]	@ (8014a90 <check_fs+0xa4>)
 8014a66:	4293      	cmp	r3, r2
 8014a68:	d101      	bne.n	8014a6e <check_fs+0x82>
 8014a6a:	2300      	movs	r3, #0
 8014a6c:	e00c      	b.n	8014a88 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	333c      	adds	r3, #60	@ 0x3c
 8014a72:	3352      	adds	r3, #82	@ 0x52
 8014a74:	4618      	mov	r0, r3
 8014a76:	f7fd ffe9 	bl	8012a4c <ld_dword>
 8014a7a:	4603      	mov	r3, r0
 8014a7c:	4a05      	ldr	r2, [pc, #20]	@ (8014a94 <check_fs+0xa8>)
 8014a7e:	4293      	cmp	r3, r2
 8014a80:	d101      	bne.n	8014a86 <check_fs+0x9a>
 8014a82:	2300      	movs	r3, #0
 8014a84:	e000      	b.n	8014a88 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8014a86:	2302      	movs	r3, #2
}
 8014a88:	4618      	mov	r0, r3
 8014a8a:	3708      	adds	r7, #8
 8014a8c:	46bd      	mov	sp, r7
 8014a8e:	bd80      	pop	{r7, pc}
 8014a90:	00544146 	.word	0x00544146
 8014a94:	33544146 	.word	0x33544146

08014a98 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8014a98:	b580      	push	{r7, lr}
 8014a9a:	b096      	sub	sp, #88	@ 0x58
 8014a9c:	af00      	add	r7, sp, #0
 8014a9e:	60f8      	str	r0, [r7, #12]
 8014aa0:	60b9      	str	r1, [r7, #8]
 8014aa2:	4613      	mov	r3, r2
 8014aa4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8014aa6:	68bb      	ldr	r3, [r7, #8]
 8014aa8:	2200      	movs	r2, #0
 8014aaa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8014aac:	68f8      	ldr	r0, [r7, #12]
 8014aae:	f7ff ff58 	bl	8014962 <get_ldnumber>
 8014ab2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8014ab4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	da01      	bge.n	8014abe <find_volume+0x26>
 8014aba:	230b      	movs	r3, #11
 8014abc:	e268      	b.n	8014f90 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8014abe:	4a9f      	ldr	r2, [pc, #636]	@ (8014d3c <find_volume+0x2a4>)
 8014ac0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8014ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d101      	bne.n	8014ad2 <find_volume+0x3a>
 8014ace:	230c      	movs	r3, #12
 8014ad0:	e25e      	b.n	8014f90 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8014ad2:	68bb      	ldr	r3, [r7, #8]
 8014ad4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014ad6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8014ad8:	79fb      	ldrb	r3, [r7, #7]
 8014ada:	f023 0301 	bic.w	r3, r3, #1
 8014ade:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8014ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ae2:	781b      	ldrb	r3, [r3, #0]
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d01a      	beq.n	8014b1e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8014ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014aea:	785b      	ldrb	r3, [r3, #1]
 8014aec:	4618      	mov	r0, r3
 8014aee:	f7fd fef5 	bl	80128dc <disk_status>
 8014af2:	4603      	mov	r3, r0
 8014af4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8014af8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8014afc:	f003 0301 	and.w	r3, r3, #1
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d10c      	bne.n	8014b1e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8014b04:	79fb      	ldrb	r3, [r7, #7]
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d007      	beq.n	8014b1a <find_volume+0x82>
 8014b0a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8014b0e:	f003 0304 	and.w	r3, r3, #4
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d001      	beq.n	8014b1a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8014b16:	230a      	movs	r3, #10
 8014b18:	e23a      	b.n	8014f90 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8014b1a:	2300      	movs	r3, #0
 8014b1c:	e238      	b.n	8014f90 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8014b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b20:	2200      	movs	r2, #0
 8014b22:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8014b24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014b26:	b2da      	uxtb	r2, r3
 8014b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b2a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8014b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b2e:	785b      	ldrb	r3, [r3, #1]
 8014b30:	4618      	mov	r0, r3
 8014b32:	f7fd feed 	bl	8012910 <disk_initialize>
 8014b36:	4603      	mov	r3, r0
 8014b38:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8014b3c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8014b40:	f003 0301 	and.w	r3, r3, #1
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d001      	beq.n	8014b4c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8014b48:	2303      	movs	r3, #3
 8014b4a:	e221      	b.n	8014f90 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8014b4c:	79fb      	ldrb	r3, [r7, #7]
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d007      	beq.n	8014b62 <find_volume+0xca>
 8014b52:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8014b56:	f003 0304 	and.w	r3, r3, #4
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d001      	beq.n	8014b62 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8014b5e:	230a      	movs	r3, #10
 8014b60:	e216      	b.n	8014f90 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8014b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b64:	7858      	ldrb	r0, [r3, #1]
 8014b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b68:	330c      	adds	r3, #12
 8014b6a:	461a      	mov	r2, r3
 8014b6c:	2102      	movs	r1, #2
 8014b6e:	f7fd ff37 	bl	80129e0 <disk_ioctl>
 8014b72:	4603      	mov	r3, r0
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d001      	beq.n	8014b7c <find_volume+0xe4>
 8014b78:	2301      	movs	r3, #1
 8014b7a:	e209      	b.n	8014f90 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8014b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b7e:	899b      	ldrh	r3, [r3, #12]
 8014b80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014b84:	d80d      	bhi.n	8014ba2 <find_volume+0x10a>
 8014b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b88:	899b      	ldrh	r3, [r3, #12]
 8014b8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014b8e:	d308      	bcc.n	8014ba2 <find_volume+0x10a>
 8014b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b92:	899b      	ldrh	r3, [r3, #12]
 8014b94:	461a      	mov	r2, r3
 8014b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b98:	899b      	ldrh	r3, [r3, #12]
 8014b9a:	3b01      	subs	r3, #1
 8014b9c:	4013      	ands	r3, r2
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d001      	beq.n	8014ba6 <find_volume+0x10e>
 8014ba2:	2301      	movs	r3, #1
 8014ba4:	e1f4      	b.n	8014f90 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8014ba6:	2300      	movs	r3, #0
 8014ba8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8014baa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8014bac:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8014bae:	f7ff ff1d 	bl	80149ec <check_fs>
 8014bb2:	4603      	mov	r3, r0
 8014bb4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8014bb8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014bbc:	2b02      	cmp	r3, #2
 8014bbe:	d149      	bne.n	8014c54 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014bc0:	2300      	movs	r3, #0
 8014bc2:	643b      	str	r3, [r7, #64]	@ 0x40
 8014bc4:	e01e      	b.n	8014c04 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8014bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014bc8:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8014bcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014bce:	011b      	lsls	r3, r3, #4
 8014bd0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8014bd4:	4413      	add	r3, r2
 8014bd6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8014bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bda:	3304      	adds	r3, #4
 8014bdc:	781b      	ldrb	r3, [r3, #0]
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d006      	beq.n	8014bf0 <find_volume+0x158>
 8014be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014be4:	3308      	adds	r3, #8
 8014be6:	4618      	mov	r0, r3
 8014be8:	f7fd ff30 	bl	8012a4c <ld_dword>
 8014bec:	4602      	mov	r2, r0
 8014bee:	e000      	b.n	8014bf2 <find_volume+0x15a>
 8014bf0:	2200      	movs	r2, #0
 8014bf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014bf4:	009b      	lsls	r3, r3, #2
 8014bf6:	3358      	adds	r3, #88	@ 0x58
 8014bf8:	443b      	add	r3, r7
 8014bfa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014bfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014c00:	3301      	adds	r3, #1
 8014c02:	643b      	str	r3, [r7, #64]	@ 0x40
 8014c04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014c06:	2b03      	cmp	r3, #3
 8014c08:	d9dd      	bls.n	8014bc6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8014c0a:	2300      	movs	r3, #0
 8014c0c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8014c0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d002      	beq.n	8014c1a <find_volume+0x182>
 8014c14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014c16:	3b01      	subs	r3, #1
 8014c18:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8014c1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014c1c:	009b      	lsls	r3, r3, #2
 8014c1e:	3358      	adds	r3, #88	@ 0x58
 8014c20:	443b      	add	r3, r7
 8014c22:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8014c26:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8014c28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d005      	beq.n	8014c3a <find_volume+0x1a2>
 8014c2e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8014c30:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8014c32:	f7ff fedb 	bl	80149ec <check_fs>
 8014c36:	4603      	mov	r3, r0
 8014c38:	e000      	b.n	8014c3c <find_volume+0x1a4>
 8014c3a:	2303      	movs	r3, #3
 8014c3c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8014c40:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014c44:	2b01      	cmp	r3, #1
 8014c46:	d905      	bls.n	8014c54 <find_volume+0x1bc>
 8014c48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014c4a:	3301      	adds	r3, #1
 8014c4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8014c4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014c50:	2b03      	cmp	r3, #3
 8014c52:	d9e2      	bls.n	8014c1a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8014c54:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014c58:	2b04      	cmp	r3, #4
 8014c5a:	d101      	bne.n	8014c60 <find_volume+0x1c8>
 8014c5c:	2301      	movs	r3, #1
 8014c5e:	e197      	b.n	8014f90 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8014c60:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014c64:	2b01      	cmp	r3, #1
 8014c66:	d901      	bls.n	8014c6c <find_volume+0x1d4>
 8014c68:	230d      	movs	r3, #13
 8014c6a:	e191      	b.n	8014f90 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8014c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c6e:	333c      	adds	r3, #60	@ 0x3c
 8014c70:	330b      	adds	r3, #11
 8014c72:	4618      	mov	r0, r3
 8014c74:	f7fd fed2 	bl	8012a1c <ld_word>
 8014c78:	4603      	mov	r3, r0
 8014c7a:	461a      	mov	r2, r3
 8014c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c7e:	899b      	ldrh	r3, [r3, #12]
 8014c80:	429a      	cmp	r2, r3
 8014c82:	d001      	beq.n	8014c88 <find_volume+0x1f0>
 8014c84:	230d      	movs	r3, #13
 8014c86:	e183      	b.n	8014f90 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8014c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c8a:	333c      	adds	r3, #60	@ 0x3c
 8014c8c:	3316      	adds	r3, #22
 8014c8e:	4618      	mov	r0, r3
 8014c90:	f7fd fec4 	bl	8012a1c <ld_word>
 8014c94:	4603      	mov	r3, r0
 8014c96:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8014c98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d106      	bne.n	8014cac <find_volume+0x214>
 8014c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ca0:	333c      	adds	r3, #60	@ 0x3c
 8014ca2:	3324      	adds	r3, #36	@ 0x24
 8014ca4:	4618      	mov	r0, r3
 8014ca6:	f7fd fed1 	bl	8012a4c <ld_dword>
 8014caa:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8014cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014cae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014cb0:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8014cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014cb4:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 8014cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014cba:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8014cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014cbe:	789b      	ldrb	r3, [r3, #2]
 8014cc0:	2b01      	cmp	r3, #1
 8014cc2:	d005      	beq.n	8014cd0 <find_volume+0x238>
 8014cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014cc6:	789b      	ldrb	r3, [r3, #2]
 8014cc8:	2b02      	cmp	r3, #2
 8014cca:	d001      	beq.n	8014cd0 <find_volume+0x238>
 8014ccc:	230d      	movs	r3, #13
 8014cce:	e15f      	b.n	8014f90 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8014cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014cd2:	789b      	ldrb	r3, [r3, #2]
 8014cd4:	461a      	mov	r2, r3
 8014cd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014cd8:	fb02 f303 	mul.w	r3, r2, r3
 8014cdc:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8014cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ce0:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8014ce4:	461a      	mov	r2, r3
 8014ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ce8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8014cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014cec:	895b      	ldrh	r3, [r3, #10]
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d008      	beq.n	8014d04 <find_volume+0x26c>
 8014cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014cf4:	895b      	ldrh	r3, [r3, #10]
 8014cf6:	461a      	mov	r2, r3
 8014cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014cfa:	895b      	ldrh	r3, [r3, #10]
 8014cfc:	3b01      	subs	r3, #1
 8014cfe:	4013      	ands	r3, r2
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d001      	beq.n	8014d08 <find_volume+0x270>
 8014d04:	230d      	movs	r3, #13
 8014d06:	e143      	b.n	8014f90 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8014d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d0a:	333c      	adds	r3, #60	@ 0x3c
 8014d0c:	3311      	adds	r3, #17
 8014d0e:	4618      	mov	r0, r3
 8014d10:	f7fd fe84 	bl	8012a1c <ld_word>
 8014d14:	4603      	mov	r3, r0
 8014d16:	461a      	mov	r2, r3
 8014d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d1a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8014d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d1e:	891b      	ldrh	r3, [r3, #8]
 8014d20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014d22:	8992      	ldrh	r2, [r2, #12]
 8014d24:	0952      	lsrs	r2, r2, #5
 8014d26:	b292      	uxth	r2, r2
 8014d28:	fbb3 f1f2 	udiv	r1, r3, r2
 8014d2c:	fb01 f202 	mul.w	r2, r1, r2
 8014d30:	1a9b      	subs	r3, r3, r2
 8014d32:	b29b      	uxth	r3, r3
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d003      	beq.n	8014d40 <find_volume+0x2a8>
 8014d38:	230d      	movs	r3, #13
 8014d3a:	e129      	b.n	8014f90 <find_volume+0x4f8>
 8014d3c:	240055ac 	.word	0x240055ac

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8014d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d42:	333c      	adds	r3, #60	@ 0x3c
 8014d44:	3313      	adds	r3, #19
 8014d46:	4618      	mov	r0, r3
 8014d48:	f7fd fe68 	bl	8012a1c <ld_word>
 8014d4c:	4603      	mov	r3, r0
 8014d4e:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8014d50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d106      	bne.n	8014d64 <find_volume+0x2cc>
 8014d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d58:	333c      	adds	r3, #60	@ 0x3c
 8014d5a:	3320      	adds	r3, #32
 8014d5c:	4618      	mov	r0, r3
 8014d5e:	f7fd fe75 	bl	8012a4c <ld_dword>
 8014d62:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8014d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d66:	333c      	adds	r3, #60	@ 0x3c
 8014d68:	330e      	adds	r3, #14
 8014d6a:	4618      	mov	r0, r3
 8014d6c:	f7fd fe56 	bl	8012a1c <ld_word>
 8014d70:	4603      	mov	r3, r0
 8014d72:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8014d74:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d101      	bne.n	8014d7e <find_volume+0x2e6>
 8014d7a:	230d      	movs	r3, #13
 8014d7c:	e108      	b.n	8014f90 <find_volume+0x4f8>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8014d7e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8014d80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014d82:	4413      	add	r3, r2
 8014d84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014d86:	8911      	ldrh	r1, [r2, #8]
 8014d88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014d8a:	8992      	ldrh	r2, [r2, #12]
 8014d8c:	0952      	lsrs	r2, r2, #5
 8014d8e:	b292      	uxth	r2, r2
 8014d90:	fbb1 f2f2 	udiv	r2, r1, r2
 8014d94:	b292      	uxth	r2, r2
 8014d96:	4413      	add	r3, r2
 8014d98:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8014d9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d9e:	429a      	cmp	r2, r3
 8014da0:	d201      	bcs.n	8014da6 <find_volume+0x30e>
 8014da2:	230d      	movs	r3, #13
 8014da4:	e0f4      	b.n	8014f90 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8014da6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014daa:	1ad3      	subs	r3, r2, r3
 8014dac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014dae:	8952      	ldrh	r2, [r2, #10]
 8014db0:	fbb3 f3f2 	udiv	r3, r3, r2
 8014db4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8014db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d101      	bne.n	8014dc0 <find_volume+0x328>
 8014dbc:	230d      	movs	r3, #13
 8014dbe:	e0e7      	b.n	8014f90 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8014dc0:	2303      	movs	r3, #3
 8014dc2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8014dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014dc8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8014dcc:	4293      	cmp	r3, r2
 8014dce:	d802      	bhi.n	8014dd6 <find_volume+0x33e>
 8014dd0:	2302      	movs	r3, #2
 8014dd2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8014dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014dd8:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8014ddc:	4293      	cmp	r3, r2
 8014dde:	d802      	bhi.n	8014de6 <find_volume+0x34e>
 8014de0:	2301      	movs	r3, #1
 8014de2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8014de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014de8:	1c9a      	adds	r2, r3, #2
 8014dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014dec:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 8014dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014df0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014df2:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8014df4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8014df6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014df8:	441a      	add	r2, r3
 8014dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014dfc:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 8014dfe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e02:	441a      	add	r2, r3
 8014e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e06:	635a      	str	r2, [r3, #52]	@ 0x34
		if (fmt == FS_FAT32) {
 8014e08:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014e0c:	2b03      	cmp	r3, #3
 8014e0e:	d11e      	bne.n	8014e4e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8014e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e12:	333c      	adds	r3, #60	@ 0x3c
 8014e14:	332a      	adds	r3, #42	@ 0x2a
 8014e16:	4618      	mov	r0, r3
 8014e18:	f7fd fe00 	bl	8012a1c <ld_word>
 8014e1c:	4603      	mov	r3, r0
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d001      	beq.n	8014e26 <find_volume+0x38e>
 8014e22:	230d      	movs	r3, #13
 8014e24:	e0b4      	b.n	8014f90 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8014e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e28:	891b      	ldrh	r3, [r3, #8]
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	d001      	beq.n	8014e32 <find_volume+0x39a>
 8014e2e:	230d      	movs	r3, #13
 8014e30:	e0ae      	b.n	8014f90 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8014e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e34:	333c      	adds	r3, #60	@ 0x3c
 8014e36:	332c      	adds	r3, #44	@ 0x2c
 8014e38:	4618      	mov	r0, r3
 8014e3a:	f7fd fe07 	bl	8012a4c <ld_dword>
 8014e3e:	4602      	mov	r2, r0
 8014e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e42:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8014e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e46:	6a1b      	ldr	r3, [r3, #32]
 8014e48:	009b      	lsls	r3, r3, #2
 8014e4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8014e4c:	e01f      	b.n	8014e8e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8014e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e50:	891b      	ldrh	r3, [r3, #8]
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d101      	bne.n	8014e5a <find_volume+0x3c2>
 8014e56:	230d      	movs	r3, #13
 8014e58:	e09a      	b.n	8014f90 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8014e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014e5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014e60:	441a      	add	r2, r3
 8014e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e64:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8014e66:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014e6a:	2b02      	cmp	r3, #2
 8014e6c:	d103      	bne.n	8014e76 <find_volume+0x3de>
 8014e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e70:	6a1b      	ldr	r3, [r3, #32]
 8014e72:	005b      	lsls	r3, r3, #1
 8014e74:	e00a      	b.n	8014e8c <find_volume+0x3f4>
 8014e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e78:	6a1a      	ldr	r2, [r3, #32]
 8014e7a:	4613      	mov	r3, r2
 8014e7c:	005b      	lsls	r3, r3, #1
 8014e7e:	4413      	add	r3, r2
 8014e80:	085a      	lsrs	r2, r3, #1
 8014e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e84:	6a1b      	ldr	r3, [r3, #32]
 8014e86:	f003 0301 	and.w	r3, r3, #1
 8014e8a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8014e8c:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8014e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e94:	899b      	ldrh	r3, [r3, #12]
 8014e96:	4619      	mov	r1, r3
 8014e98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014e9a:	440b      	add	r3, r1
 8014e9c:	3b01      	subs	r3, #1
 8014e9e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8014ea0:	8989      	ldrh	r1, [r1, #12]
 8014ea2:	fbb3 f3f1 	udiv	r3, r3, r1
 8014ea6:	429a      	cmp	r2, r3
 8014ea8:	d201      	bcs.n	8014eae <find_volume+0x416>
 8014eaa:	230d      	movs	r3, #13
 8014eac:	e070      	b.n	8014f90 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8014eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8014eb4:	619a      	str	r2, [r3, #24]
 8014eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014eb8:	699a      	ldr	r2, [r3, #24]
 8014eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ebc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8014ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ec0:	2280      	movs	r2, #128	@ 0x80
 8014ec2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8014ec4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014ec8:	2b03      	cmp	r3, #3
 8014eca:	d149      	bne.n	8014f60 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8014ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ece:	333c      	adds	r3, #60	@ 0x3c
 8014ed0:	3330      	adds	r3, #48	@ 0x30
 8014ed2:	4618      	mov	r0, r3
 8014ed4:	f7fd fda2 	bl	8012a1c <ld_word>
 8014ed8:	4603      	mov	r3, r0
 8014eda:	2b01      	cmp	r3, #1
 8014edc:	d140      	bne.n	8014f60 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8014ede:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014ee0:	3301      	adds	r3, #1
 8014ee2:	4619      	mov	r1, r3
 8014ee4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8014ee6:	f7fe f849 	bl	8012f7c <move_window>
 8014eea:	4603      	mov	r3, r0
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d137      	bne.n	8014f60 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8014ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ef2:	2200      	movs	r2, #0
 8014ef4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8014ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ef8:	333c      	adds	r3, #60	@ 0x3c
 8014efa:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8014efe:	4618      	mov	r0, r3
 8014f00:	f7fd fd8c 	bl	8012a1c <ld_word>
 8014f04:	4603      	mov	r3, r0
 8014f06:	461a      	mov	r2, r3
 8014f08:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8014f0c:	429a      	cmp	r2, r3
 8014f0e:	d127      	bne.n	8014f60 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8014f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f12:	333c      	adds	r3, #60	@ 0x3c
 8014f14:	4618      	mov	r0, r3
 8014f16:	f7fd fd99 	bl	8012a4c <ld_dword>
 8014f1a:	4603      	mov	r3, r0
 8014f1c:	4a1e      	ldr	r2, [pc, #120]	@ (8014f98 <find_volume+0x500>)
 8014f1e:	4293      	cmp	r3, r2
 8014f20:	d11e      	bne.n	8014f60 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8014f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f24:	333c      	adds	r3, #60	@ 0x3c
 8014f26:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8014f2a:	4618      	mov	r0, r3
 8014f2c:	f7fd fd8e 	bl	8012a4c <ld_dword>
 8014f30:	4603      	mov	r3, r0
 8014f32:	4a1a      	ldr	r2, [pc, #104]	@ (8014f9c <find_volume+0x504>)
 8014f34:	4293      	cmp	r3, r2
 8014f36:	d113      	bne.n	8014f60 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8014f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f3a:	333c      	adds	r3, #60	@ 0x3c
 8014f3c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8014f40:	4618      	mov	r0, r3
 8014f42:	f7fd fd83 	bl	8012a4c <ld_dword>
 8014f46:	4602      	mov	r2, r0
 8014f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f4a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8014f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f4e:	333c      	adds	r3, #60	@ 0x3c
 8014f50:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8014f54:	4618      	mov	r0, r3
 8014f56:	f7fd fd79 	bl	8012a4c <ld_dword>
 8014f5a:	4602      	mov	r2, r0
 8014f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f5e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8014f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f62:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8014f66:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8014f68:	4b0d      	ldr	r3, [pc, #52]	@ (8014fa0 <find_volume+0x508>)
 8014f6a:	881b      	ldrh	r3, [r3, #0]
 8014f6c:	3301      	adds	r3, #1
 8014f6e:	b29a      	uxth	r2, r3
 8014f70:	4b0b      	ldr	r3, [pc, #44]	@ (8014fa0 <find_volume+0x508>)
 8014f72:	801a      	strh	r2, [r3, #0]
 8014f74:	4b0a      	ldr	r3, [pc, #40]	@ (8014fa0 <find_volume+0x508>)
 8014f76:	881a      	ldrh	r2, [r3, #0]
 8014f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f7a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8014f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f7e:	4a09      	ldr	r2, [pc, #36]	@ (8014fa4 <find_volume+0x50c>)
 8014f80:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8014f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f84:	2200      	movs	r2, #0
 8014f86:	61da      	str	r2, [r3, #28]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8014f88:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8014f8a:	f7fd ff8f 	bl	8012eac <clear_lock>
#endif
	return FR_OK;
 8014f8e:	2300      	movs	r3, #0
}
 8014f90:	4618      	mov	r0, r3
 8014f92:	3758      	adds	r7, #88	@ 0x58
 8014f94:	46bd      	mov	sp, r7
 8014f96:	bd80      	pop	{r7, pc}
 8014f98:	41615252 	.word	0x41615252
 8014f9c:	61417272 	.word	0x61417272
 8014fa0:	240055b0 	.word	0x240055b0
 8014fa4:	240055d4 	.word	0x240055d4

08014fa8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8014fa8:	b580      	push	{r7, lr}
 8014faa:	b084      	sub	sp, #16
 8014fac:	af00      	add	r7, sp, #0
 8014fae:	6078      	str	r0, [r7, #4]
 8014fb0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8014fb2:	2309      	movs	r3, #9
 8014fb4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d01c      	beq.n	8014ff6 <validate+0x4e>
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	681b      	ldr	r3, [r3, #0]
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d018      	beq.n	8014ff6 <validate+0x4e>
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	681b      	ldr	r3, [r3, #0]
 8014fc8:	781b      	ldrb	r3, [r3, #0]
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d013      	beq.n	8014ff6 <validate+0x4e>
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	889a      	ldrh	r2, [r3, #4]
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	681b      	ldr	r3, [r3, #0]
 8014fd6:	88db      	ldrh	r3, [r3, #6]
 8014fd8:	429a      	cmp	r2, r3
 8014fda:	d10c      	bne.n	8014ff6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	785b      	ldrb	r3, [r3, #1]
 8014fe2:	4618      	mov	r0, r3
 8014fe4:	f7fd fc7a 	bl	80128dc <disk_status>
 8014fe8:	4603      	mov	r3, r0
 8014fea:	f003 0301 	and.w	r3, r3, #1
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d101      	bne.n	8014ff6 <validate+0x4e>
			res = FR_OK;
 8014ff2:	2300      	movs	r3, #0
 8014ff4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8014ff6:	7bfb      	ldrb	r3, [r7, #15]
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d102      	bne.n	8015002 <validate+0x5a>
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	681b      	ldr	r3, [r3, #0]
 8015000:	e000      	b.n	8015004 <validate+0x5c>
 8015002:	2300      	movs	r3, #0
 8015004:	683a      	ldr	r2, [r7, #0]
 8015006:	6013      	str	r3, [r2, #0]
	return res;
 8015008:	7bfb      	ldrb	r3, [r7, #15]
}
 801500a:	4618      	mov	r0, r3
 801500c:	3710      	adds	r7, #16
 801500e:	46bd      	mov	sp, r7
 8015010:	bd80      	pop	{r7, pc}
	...

08015014 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8015014:	b580      	push	{r7, lr}
 8015016:	b088      	sub	sp, #32
 8015018:	af00      	add	r7, sp, #0
 801501a:	60f8      	str	r0, [r7, #12]
 801501c:	60b9      	str	r1, [r7, #8]
 801501e:	4613      	mov	r3, r2
 8015020:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8015022:	68bb      	ldr	r3, [r7, #8]
 8015024:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8015026:	f107 0310 	add.w	r3, r7, #16
 801502a:	4618      	mov	r0, r3
 801502c:	f7ff fc99 	bl	8014962 <get_ldnumber>
 8015030:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8015032:	69fb      	ldr	r3, [r7, #28]
 8015034:	2b00      	cmp	r3, #0
 8015036:	da01      	bge.n	801503c <f_mount+0x28>
 8015038:	230b      	movs	r3, #11
 801503a:	e02b      	b.n	8015094 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801503c:	4a17      	ldr	r2, [pc, #92]	@ (801509c <f_mount+0x88>)
 801503e:	69fb      	ldr	r3, [r7, #28]
 8015040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015044:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8015046:	69bb      	ldr	r3, [r7, #24]
 8015048:	2b00      	cmp	r3, #0
 801504a:	d005      	beq.n	8015058 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801504c:	69b8      	ldr	r0, [r7, #24]
 801504e:	f7fd ff2d 	bl	8012eac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8015052:	69bb      	ldr	r3, [r7, #24]
 8015054:	2200      	movs	r2, #0
 8015056:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8015058:	68fb      	ldr	r3, [r7, #12]
 801505a:	2b00      	cmp	r3, #0
 801505c:	d002      	beq.n	8015064 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801505e:	68fb      	ldr	r3, [r7, #12]
 8015060:	2200      	movs	r2, #0
 8015062:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8015064:	68fa      	ldr	r2, [r7, #12]
 8015066:	490d      	ldr	r1, [pc, #52]	@ (801509c <f_mount+0x88>)
 8015068:	69fb      	ldr	r3, [r7, #28]
 801506a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801506e:	68fb      	ldr	r3, [r7, #12]
 8015070:	2b00      	cmp	r3, #0
 8015072:	d002      	beq.n	801507a <f_mount+0x66>
 8015074:	79fb      	ldrb	r3, [r7, #7]
 8015076:	2b01      	cmp	r3, #1
 8015078:	d001      	beq.n	801507e <f_mount+0x6a>
 801507a:	2300      	movs	r3, #0
 801507c:	e00a      	b.n	8015094 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801507e:	f107 010c 	add.w	r1, r7, #12
 8015082:	f107 0308 	add.w	r3, r7, #8
 8015086:	2200      	movs	r2, #0
 8015088:	4618      	mov	r0, r3
 801508a:	f7ff fd05 	bl	8014a98 <find_volume>
 801508e:	4603      	mov	r3, r0
 8015090:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8015092:	7dfb      	ldrb	r3, [r7, #23]
}
 8015094:	4618      	mov	r0, r3
 8015096:	3720      	adds	r7, #32
 8015098:	46bd      	mov	sp, r7
 801509a:	bd80      	pop	{r7, pc}
 801509c:	240055ac 	.word	0x240055ac

080150a0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80150a0:	b580      	push	{r7, lr}
 80150a2:	b09a      	sub	sp, #104	@ 0x68
 80150a4:	af00      	add	r7, sp, #0
 80150a6:	60f8      	str	r0, [r7, #12]
 80150a8:	60b9      	str	r1, [r7, #8]
 80150aa:	4613      	mov	r3, r2
 80150ac:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80150ae:	68fb      	ldr	r3, [r7, #12]
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d101      	bne.n	80150b8 <f_open+0x18>
 80150b4:	2309      	movs	r3, #9
 80150b6:	e1b7      	b.n	8015428 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80150b8:	79fb      	ldrb	r3, [r7, #7]
 80150ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80150be:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80150c0:	79fa      	ldrb	r2, [r7, #7]
 80150c2:	f107 0114 	add.w	r1, r7, #20
 80150c6:	f107 0308 	add.w	r3, r7, #8
 80150ca:	4618      	mov	r0, r3
 80150cc:	f7ff fce4 	bl	8014a98 <find_volume>
 80150d0:	4603      	mov	r3, r0
 80150d2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 80150d6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80150da:	2b00      	cmp	r3, #0
 80150dc:	f040 819b 	bne.w	8015416 <f_open+0x376>
		dj.obj.fs = fs;
 80150e0:	697b      	ldr	r3, [r7, #20]
 80150e2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80150e4:	68ba      	ldr	r2, [r7, #8]
 80150e6:	f107 0318 	add.w	r3, r7, #24
 80150ea:	4611      	mov	r1, r2
 80150ec:	4618      	mov	r0, r3
 80150ee:	f7ff fba3 	bl	8014838 <follow_path>
 80150f2:	4603      	mov	r3, r0
 80150f4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80150f8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d118      	bne.n	8015132 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8015100:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015104:	b25b      	sxtb	r3, r3
 8015106:	2b00      	cmp	r3, #0
 8015108:	da03      	bge.n	8015112 <f_open+0x72>
				res = FR_INVALID_NAME;
 801510a:	2306      	movs	r3, #6
 801510c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8015110:	e00f      	b.n	8015132 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8015112:	79fb      	ldrb	r3, [r7, #7]
 8015114:	2b01      	cmp	r3, #1
 8015116:	bf8c      	ite	hi
 8015118:	2301      	movhi	r3, #1
 801511a:	2300      	movls	r3, #0
 801511c:	b2db      	uxtb	r3, r3
 801511e:	461a      	mov	r2, r3
 8015120:	f107 0318 	add.w	r3, r7, #24
 8015124:	4611      	mov	r1, r2
 8015126:	4618      	mov	r0, r3
 8015128:	f7fd fd78 	bl	8012c1c <chk_lock>
 801512c:	4603      	mov	r3, r0
 801512e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8015132:	79fb      	ldrb	r3, [r7, #7]
 8015134:	f003 031c 	and.w	r3, r3, #28
 8015138:	2b00      	cmp	r3, #0
 801513a:	d07f      	beq.n	801523c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 801513c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8015140:	2b00      	cmp	r3, #0
 8015142:	d017      	beq.n	8015174 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8015144:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8015148:	2b04      	cmp	r3, #4
 801514a:	d10e      	bne.n	801516a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801514c:	f7fd fdc2 	bl	8012cd4 <enq_lock>
 8015150:	4603      	mov	r3, r0
 8015152:	2b00      	cmp	r3, #0
 8015154:	d006      	beq.n	8015164 <f_open+0xc4>
 8015156:	f107 0318 	add.w	r3, r7, #24
 801515a:	4618      	mov	r0, r3
 801515c:	f7ff f824 	bl	80141a8 <dir_register>
 8015160:	4603      	mov	r3, r0
 8015162:	e000      	b.n	8015166 <f_open+0xc6>
 8015164:	2312      	movs	r3, #18
 8015166:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801516a:	79fb      	ldrb	r3, [r7, #7]
 801516c:	f043 0308 	orr.w	r3, r3, #8
 8015170:	71fb      	strb	r3, [r7, #7]
 8015172:	e010      	b.n	8015196 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8015174:	7fbb      	ldrb	r3, [r7, #30]
 8015176:	f003 0311 	and.w	r3, r3, #17
 801517a:	2b00      	cmp	r3, #0
 801517c:	d003      	beq.n	8015186 <f_open+0xe6>
					res = FR_DENIED;
 801517e:	2307      	movs	r3, #7
 8015180:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8015184:	e007      	b.n	8015196 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8015186:	79fb      	ldrb	r3, [r7, #7]
 8015188:	f003 0304 	and.w	r3, r3, #4
 801518c:	2b00      	cmp	r3, #0
 801518e:	d002      	beq.n	8015196 <f_open+0xf6>
 8015190:	2308      	movs	r3, #8
 8015192:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8015196:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801519a:	2b00      	cmp	r3, #0
 801519c:	d168      	bne.n	8015270 <f_open+0x1d0>
 801519e:	79fb      	ldrb	r3, [r7, #7]
 80151a0:	f003 0308 	and.w	r3, r3, #8
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d063      	beq.n	8015270 <f_open+0x1d0>
				dw = GET_FATTIME();
 80151a8:	f7fc fe76 	bl	8011e98 <get_fattime>
 80151ac:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80151ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80151b0:	330e      	adds	r3, #14
 80151b2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80151b4:	4618      	mov	r0, r3
 80151b6:	f7fd fc87 	bl	8012ac8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80151ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80151bc:	3316      	adds	r3, #22
 80151be:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80151c0:	4618      	mov	r0, r3
 80151c2:	f7fd fc81 	bl	8012ac8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80151c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80151c8:	330b      	adds	r3, #11
 80151ca:	2220      	movs	r2, #32
 80151cc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80151ce:	697b      	ldr	r3, [r7, #20]
 80151d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80151d2:	4611      	mov	r1, r2
 80151d4:	4618      	mov	r0, r3
 80151d6:	f7fe fc56 	bl	8013a86 <ld_clust>
 80151da:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80151dc:	697b      	ldr	r3, [r7, #20]
 80151de:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80151e0:	2200      	movs	r2, #0
 80151e2:	4618      	mov	r0, r3
 80151e4:	f7fe fc6e 	bl	8013ac4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80151e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80151ea:	331c      	adds	r3, #28
 80151ec:	2100      	movs	r1, #0
 80151ee:	4618      	mov	r0, r3
 80151f0:	f7fd fc6a 	bl	8012ac8 <st_dword>
					fs->wflag = 1;
 80151f4:	697b      	ldr	r3, [r7, #20]
 80151f6:	2201      	movs	r2, #1
 80151f8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80151fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d037      	beq.n	8015270 <f_open+0x1d0>
						dw = fs->winsect;
 8015200:	697b      	ldr	r3, [r7, #20]
 8015202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015204:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8015206:	f107 0318 	add.w	r3, r7, #24
 801520a:	2200      	movs	r2, #0
 801520c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801520e:	4618      	mov	r0, r3
 8015210:	f7fe f95e 	bl	80134d0 <remove_chain>
 8015214:	4603      	mov	r3, r0
 8015216:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 801521a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801521e:	2b00      	cmp	r3, #0
 8015220:	d126      	bne.n	8015270 <f_open+0x1d0>
							res = move_window(fs, dw);
 8015222:	697b      	ldr	r3, [r7, #20]
 8015224:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8015226:	4618      	mov	r0, r3
 8015228:	f7fd fea8 	bl	8012f7c <move_window>
 801522c:	4603      	mov	r3, r0
 801522e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8015232:	697b      	ldr	r3, [r7, #20]
 8015234:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8015236:	3a01      	subs	r2, #1
 8015238:	615a      	str	r2, [r3, #20]
 801523a:	e019      	b.n	8015270 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801523c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8015240:	2b00      	cmp	r3, #0
 8015242:	d115      	bne.n	8015270 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8015244:	7fbb      	ldrb	r3, [r7, #30]
 8015246:	f003 0310 	and.w	r3, r3, #16
 801524a:	2b00      	cmp	r3, #0
 801524c:	d003      	beq.n	8015256 <f_open+0x1b6>
					res = FR_NO_FILE;
 801524e:	2304      	movs	r3, #4
 8015250:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8015254:	e00c      	b.n	8015270 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8015256:	79fb      	ldrb	r3, [r7, #7]
 8015258:	f003 0302 	and.w	r3, r3, #2
 801525c:	2b00      	cmp	r3, #0
 801525e:	d007      	beq.n	8015270 <f_open+0x1d0>
 8015260:	7fbb      	ldrb	r3, [r7, #30]
 8015262:	f003 0301 	and.w	r3, r3, #1
 8015266:	2b00      	cmp	r3, #0
 8015268:	d002      	beq.n	8015270 <f_open+0x1d0>
						res = FR_DENIED;
 801526a:	2307      	movs	r3, #7
 801526c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8015270:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8015274:	2b00      	cmp	r3, #0
 8015276:	d126      	bne.n	80152c6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8015278:	79fb      	ldrb	r3, [r7, #7]
 801527a:	f003 0308 	and.w	r3, r3, #8
 801527e:	2b00      	cmp	r3, #0
 8015280:	d003      	beq.n	801528a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8015282:	79fb      	ldrb	r3, [r7, #7]
 8015284:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015288:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801528a:	697b      	ldr	r3, [r7, #20]
 801528c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801528e:	68fb      	ldr	r3, [r7, #12]
 8015290:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8015292:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8015298:	79fb      	ldrb	r3, [r7, #7]
 801529a:	2b01      	cmp	r3, #1
 801529c:	bf8c      	ite	hi
 801529e:	2301      	movhi	r3, #1
 80152a0:	2300      	movls	r3, #0
 80152a2:	b2db      	uxtb	r3, r3
 80152a4:	461a      	mov	r2, r3
 80152a6:	f107 0318 	add.w	r3, r7, #24
 80152aa:	4611      	mov	r1, r2
 80152ac:	4618      	mov	r0, r3
 80152ae:	f7fd fd33 	bl	8012d18 <inc_lock>
 80152b2:	4602      	mov	r2, r0
 80152b4:	68fb      	ldr	r3, [r7, #12]
 80152b6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	691b      	ldr	r3, [r3, #16]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d102      	bne.n	80152c6 <f_open+0x226>
 80152c0:	2302      	movs	r3, #2
 80152c2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80152c6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	f040 80a3 	bne.w	8015416 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80152d0:	697b      	ldr	r3, [r7, #20]
 80152d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80152d4:	4611      	mov	r1, r2
 80152d6:	4618      	mov	r0, r3
 80152d8:	f7fe fbd5 	bl	8013a86 <ld_clust>
 80152dc:	4602      	mov	r2, r0
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80152e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80152e4:	331c      	adds	r3, #28
 80152e6:	4618      	mov	r0, r3
 80152e8:	f7fd fbb0 	bl	8012a4c <ld_dword>
 80152ec:	4602      	mov	r2, r0
 80152ee:	68fb      	ldr	r3, [r7, #12]
 80152f0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80152f2:	68fb      	ldr	r3, [r7, #12]
 80152f4:	2200      	movs	r2, #0
 80152f6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80152f8:	697a      	ldr	r2, [r7, #20]
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80152fe:	697b      	ldr	r3, [r7, #20]
 8015300:	88da      	ldrh	r2, [r3, #6]
 8015302:	68fb      	ldr	r3, [r7, #12]
 8015304:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8015306:	68fb      	ldr	r3, [r7, #12]
 8015308:	79fa      	ldrb	r2, [r7, #7]
 801530a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	2200      	movs	r2, #0
 8015310:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	2200      	movs	r2, #0
 8015316:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	2200      	movs	r2, #0
 801531c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	3330      	adds	r3, #48	@ 0x30
 8015322:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8015326:	2100      	movs	r1, #0
 8015328:	4618      	mov	r0, r3
 801532a:	f7fd fc1a 	bl	8012b62 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801532e:	79fb      	ldrb	r3, [r7, #7]
 8015330:	f003 0320 	and.w	r3, r3, #32
 8015334:	2b00      	cmp	r3, #0
 8015336:	d06e      	beq.n	8015416 <f_open+0x376>
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	68db      	ldr	r3, [r3, #12]
 801533c:	2b00      	cmp	r3, #0
 801533e:	d06a      	beq.n	8015416 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	68da      	ldr	r2, [r3, #12]
 8015344:	68fb      	ldr	r3, [r7, #12]
 8015346:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8015348:	697b      	ldr	r3, [r7, #20]
 801534a:	895b      	ldrh	r3, [r3, #10]
 801534c:	461a      	mov	r2, r3
 801534e:	697b      	ldr	r3, [r7, #20]
 8015350:	899b      	ldrh	r3, [r3, #12]
 8015352:	fb02 f303 	mul.w	r3, r2, r3
 8015356:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8015358:	68fb      	ldr	r3, [r7, #12]
 801535a:	689b      	ldr	r3, [r3, #8]
 801535c:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801535e:	68fb      	ldr	r3, [r7, #12]
 8015360:	68db      	ldr	r3, [r3, #12]
 8015362:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8015364:	e016      	b.n	8015394 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801536a:	4618      	mov	r0, r3
 801536c:	f7fd fec3 	bl	80130f6 <get_fat>
 8015370:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8015372:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8015374:	2b01      	cmp	r3, #1
 8015376:	d802      	bhi.n	801537e <f_open+0x2de>
 8015378:	2302      	movs	r3, #2
 801537a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801537e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8015380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015384:	d102      	bne.n	801538c <f_open+0x2ec>
 8015386:	2301      	movs	r3, #1
 8015388:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801538c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801538e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015390:	1ad3      	subs	r3, r2, r3
 8015392:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8015394:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8015398:	2b00      	cmp	r3, #0
 801539a:	d103      	bne.n	80153a4 <f_open+0x304>
 801539c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801539e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80153a0:	429a      	cmp	r2, r3
 80153a2:	d8e0      	bhi.n	8015366 <f_open+0x2c6>
				}
				fp->clust = clst;
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80153a8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80153aa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d131      	bne.n	8015416 <f_open+0x376>
 80153b2:	697b      	ldr	r3, [r7, #20]
 80153b4:	899b      	ldrh	r3, [r3, #12]
 80153b6:	461a      	mov	r2, r3
 80153b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80153ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80153be:	fb01 f202 	mul.w	r2, r1, r2
 80153c2:	1a9b      	subs	r3, r3, r2
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	d026      	beq.n	8015416 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80153c8:	697b      	ldr	r3, [r7, #20]
 80153ca:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80153cc:	4618      	mov	r0, r3
 80153ce:	f7fd fe73 	bl	80130b8 <clust2sect>
 80153d2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80153d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	d103      	bne.n	80153e2 <f_open+0x342>
						res = FR_INT_ERR;
 80153da:	2302      	movs	r3, #2
 80153dc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80153e0:	e019      	b.n	8015416 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80153e2:	697b      	ldr	r3, [r7, #20]
 80153e4:	899b      	ldrh	r3, [r3, #12]
 80153e6:	461a      	mov	r2, r3
 80153e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80153ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80153ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80153f0:	441a      	add	r2, r3
 80153f2:	68fb      	ldr	r3, [r7, #12]
 80153f4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80153f6:	697b      	ldr	r3, [r7, #20]
 80153f8:	7858      	ldrb	r0, [r3, #1]
 80153fa:	68fb      	ldr	r3, [r7, #12]
 80153fc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8015400:	68fb      	ldr	r3, [r7, #12]
 8015402:	6a1a      	ldr	r2, [r3, #32]
 8015404:	2301      	movs	r3, #1
 8015406:	f7fd faab 	bl	8012960 <disk_read>
 801540a:	4603      	mov	r3, r0
 801540c:	2b00      	cmp	r3, #0
 801540e:	d002      	beq.n	8015416 <f_open+0x376>
 8015410:	2301      	movs	r3, #1
 8015412:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8015416:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801541a:	2b00      	cmp	r3, #0
 801541c:	d002      	beq.n	8015424 <f_open+0x384>
 801541e:	68fb      	ldr	r3, [r7, #12]
 8015420:	2200      	movs	r2, #0
 8015422:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8015424:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8015428:	4618      	mov	r0, r3
 801542a:	3768      	adds	r7, #104	@ 0x68
 801542c:	46bd      	mov	sp, r7
 801542e:	bd80      	pop	{r7, pc}

08015430 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8015430:	b580      	push	{r7, lr}
 8015432:	b08e      	sub	sp, #56	@ 0x38
 8015434:	af00      	add	r7, sp, #0
 8015436:	60f8      	str	r0, [r7, #12]
 8015438:	60b9      	str	r1, [r7, #8]
 801543a:	607a      	str	r2, [r7, #4]
 801543c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801543e:	68bb      	ldr	r3, [r7, #8]
 8015440:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8015442:	683b      	ldr	r3, [r7, #0]
 8015444:	2200      	movs	r2, #0
 8015446:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8015448:	68fb      	ldr	r3, [r7, #12]
 801544a:	f107 0214 	add.w	r2, r7, #20
 801544e:	4611      	mov	r1, r2
 8015450:	4618      	mov	r0, r3
 8015452:	f7ff fda9 	bl	8014fa8 <validate>
 8015456:	4603      	mov	r3, r0
 8015458:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801545c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8015460:	2b00      	cmp	r3, #0
 8015462:	d107      	bne.n	8015474 <f_read+0x44>
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	7d5b      	ldrb	r3, [r3, #21]
 8015468:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801546c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8015470:	2b00      	cmp	r3, #0
 8015472:	d002      	beq.n	801547a <f_read+0x4a>
 8015474:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8015478:	e135      	b.n	80156e6 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801547a:	68fb      	ldr	r3, [r7, #12]
 801547c:	7d1b      	ldrb	r3, [r3, #20]
 801547e:	f003 0301 	and.w	r3, r3, #1
 8015482:	2b00      	cmp	r3, #0
 8015484:	d101      	bne.n	801548a <f_read+0x5a>
 8015486:	2307      	movs	r3, #7
 8015488:	e12d      	b.n	80156e6 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 801548a:	68fb      	ldr	r3, [r7, #12]
 801548c:	68da      	ldr	r2, [r3, #12]
 801548e:	68fb      	ldr	r3, [r7, #12]
 8015490:	699b      	ldr	r3, [r3, #24]
 8015492:	1ad3      	subs	r3, r2, r3
 8015494:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8015496:	687a      	ldr	r2, [r7, #4]
 8015498:	6a3b      	ldr	r3, [r7, #32]
 801549a:	429a      	cmp	r2, r3
 801549c:	f240 811e 	bls.w	80156dc <f_read+0x2ac>
 80154a0:	6a3b      	ldr	r3, [r7, #32]
 80154a2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80154a4:	e11a      	b.n	80156dc <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80154a6:	68fb      	ldr	r3, [r7, #12]
 80154a8:	699b      	ldr	r3, [r3, #24]
 80154aa:	697a      	ldr	r2, [r7, #20]
 80154ac:	8992      	ldrh	r2, [r2, #12]
 80154ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80154b2:	fb01 f202 	mul.w	r2, r1, r2
 80154b6:	1a9b      	subs	r3, r3, r2
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	f040 80d5 	bne.w	8015668 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	699b      	ldr	r3, [r3, #24]
 80154c2:	697a      	ldr	r2, [r7, #20]
 80154c4:	8992      	ldrh	r2, [r2, #12]
 80154c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80154ca:	697a      	ldr	r2, [r7, #20]
 80154cc:	8952      	ldrh	r2, [r2, #10]
 80154ce:	3a01      	subs	r2, #1
 80154d0:	4013      	ands	r3, r2
 80154d2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80154d4:	69fb      	ldr	r3, [r7, #28]
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d12f      	bne.n	801553a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80154da:	68fb      	ldr	r3, [r7, #12]
 80154dc:	699b      	ldr	r3, [r3, #24]
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d103      	bne.n	80154ea <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80154e2:	68fb      	ldr	r3, [r7, #12]
 80154e4:	689b      	ldr	r3, [r3, #8]
 80154e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80154e8:	e013      	b.n	8015512 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80154ea:	68fb      	ldr	r3, [r7, #12]
 80154ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d007      	beq.n	8015502 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80154f2:	68fb      	ldr	r3, [r7, #12]
 80154f4:	699b      	ldr	r3, [r3, #24]
 80154f6:	4619      	mov	r1, r3
 80154f8:	68f8      	ldr	r0, [r7, #12]
 80154fa:	f7fe f8e6 	bl	80136ca <clmt_clust>
 80154fe:	6338      	str	r0, [r7, #48]	@ 0x30
 8015500:	e007      	b.n	8015512 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8015502:	68fa      	ldr	r2, [r7, #12]
 8015504:	68fb      	ldr	r3, [r7, #12]
 8015506:	69db      	ldr	r3, [r3, #28]
 8015508:	4619      	mov	r1, r3
 801550a:	4610      	mov	r0, r2
 801550c:	f7fd fdf3 	bl	80130f6 <get_fat>
 8015510:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8015512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015514:	2b01      	cmp	r3, #1
 8015516:	d804      	bhi.n	8015522 <f_read+0xf2>
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	2202      	movs	r2, #2
 801551c:	755a      	strb	r2, [r3, #21]
 801551e:	2302      	movs	r3, #2
 8015520:	e0e1      	b.n	80156e6 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015528:	d104      	bne.n	8015534 <f_read+0x104>
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	2201      	movs	r2, #1
 801552e:	755a      	strb	r2, [r3, #21]
 8015530:	2301      	movs	r3, #1
 8015532:	e0d8      	b.n	80156e6 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8015534:	68fb      	ldr	r3, [r7, #12]
 8015536:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015538:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801553a:	697a      	ldr	r2, [r7, #20]
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	69db      	ldr	r3, [r3, #28]
 8015540:	4619      	mov	r1, r3
 8015542:	4610      	mov	r0, r2
 8015544:	f7fd fdb8 	bl	80130b8 <clust2sect>
 8015548:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801554a:	69bb      	ldr	r3, [r7, #24]
 801554c:	2b00      	cmp	r3, #0
 801554e:	d104      	bne.n	801555a <f_read+0x12a>
 8015550:	68fb      	ldr	r3, [r7, #12]
 8015552:	2202      	movs	r2, #2
 8015554:	755a      	strb	r2, [r3, #21]
 8015556:	2302      	movs	r3, #2
 8015558:	e0c5      	b.n	80156e6 <f_read+0x2b6>
			sect += csect;
 801555a:	69ba      	ldr	r2, [r7, #24]
 801555c:	69fb      	ldr	r3, [r7, #28]
 801555e:	4413      	add	r3, r2
 8015560:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8015562:	697b      	ldr	r3, [r7, #20]
 8015564:	899b      	ldrh	r3, [r3, #12]
 8015566:	461a      	mov	r2, r3
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	fbb3 f3f2 	udiv	r3, r3, r2
 801556e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8015570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015572:	2b00      	cmp	r3, #0
 8015574:	d041      	beq.n	80155fa <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8015576:	69fa      	ldr	r2, [r7, #28]
 8015578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801557a:	4413      	add	r3, r2
 801557c:	697a      	ldr	r2, [r7, #20]
 801557e:	8952      	ldrh	r2, [r2, #10]
 8015580:	4293      	cmp	r3, r2
 8015582:	d905      	bls.n	8015590 <f_read+0x160>
					cc = fs->csize - csect;
 8015584:	697b      	ldr	r3, [r7, #20]
 8015586:	895b      	ldrh	r3, [r3, #10]
 8015588:	461a      	mov	r2, r3
 801558a:	69fb      	ldr	r3, [r7, #28]
 801558c:	1ad3      	subs	r3, r2, r3
 801558e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015590:	697b      	ldr	r3, [r7, #20]
 8015592:	7858      	ldrb	r0, [r3, #1]
 8015594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015596:	69ba      	ldr	r2, [r7, #24]
 8015598:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801559a:	f7fd f9e1 	bl	8012960 <disk_read>
 801559e:	4603      	mov	r3, r0
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d004      	beq.n	80155ae <f_read+0x17e>
 80155a4:	68fb      	ldr	r3, [r7, #12]
 80155a6:	2201      	movs	r2, #1
 80155a8:	755a      	strb	r2, [r3, #21]
 80155aa:	2301      	movs	r3, #1
 80155ac:	e09b      	b.n	80156e6 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80155ae:	68fb      	ldr	r3, [r7, #12]
 80155b0:	7d1b      	ldrb	r3, [r3, #20]
 80155b2:	b25b      	sxtb	r3, r3
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	da18      	bge.n	80155ea <f_read+0x1ba>
 80155b8:	68fb      	ldr	r3, [r7, #12]
 80155ba:	6a1a      	ldr	r2, [r3, #32]
 80155bc:	69bb      	ldr	r3, [r7, #24]
 80155be:	1ad3      	subs	r3, r2, r3
 80155c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80155c2:	429a      	cmp	r2, r3
 80155c4:	d911      	bls.n	80155ea <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	6a1a      	ldr	r2, [r3, #32]
 80155ca:	69bb      	ldr	r3, [r7, #24]
 80155cc:	1ad3      	subs	r3, r2, r3
 80155ce:	697a      	ldr	r2, [r7, #20]
 80155d0:	8992      	ldrh	r2, [r2, #12]
 80155d2:	fb02 f303 	mul.w	r3, r2, r3
 80155d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80155d8:	18d0      	adds	r0, r2, r3
 80155da:	68fb      	ldr	r3, [r7, #12]
 80155dc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80155e0:	697b      	ldr	r3, [r7, #20]
 80155e2:	899b      	ldrh	r3, [r3, #12]
 80155e4:	461a      	mov	r2, r3
 80155e6:	f7fd fa9b 	bl	8012b20 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80155ea:	697b      	ldr	r3, [r7, #20]
 80155ec:	899b      	ldrh	r3, [r3, #12]
 80155ee:	461a      	mov	r2, r3
 80155f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155f2:	fb02 f303 	mul.w	r3, r2, r3
 80155f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80155f8:	e05c      	b.n	80156b4 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80155fa:	68fb      	ldr	r3, [r7, #12]
 80155fc:	6a1b      	ldr	r3, [r3, #32]
 80155fe:	69ba      	ldr	r2, [r7, #24]
 8015600:	429a      	cmp	r2, r3
 8015602:	d02e      	beq.n	8015662 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8015604:	68fb      	ldr	r3, [r7, #12]
 8015606:	7d1b      	ldrb	r3, [r3, #20]
 8015608:	b25b      	sxtb	r3, r3
 801560a:	2b00      	cmp	r3, #0
 801560c:	da18      	bge.n	8015640 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801560e:	697b      	ldr	r3, [r7, #20]
 8015610:	7858      	ldrb	r0, [r3, #1]
 8015612:	68fb      	ldr	r3, [r7, #12]
 8015614:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8015618:	68fb      	ldr	r3, [r7, #12]
 801561a:	6a1a      	ldr	r2, [r3, #32]
 801561c:	2301      	movs	r3, #1
 801561e:	f7fd f9bf 	bl	80129a0 <disk_write>
 8015622:	4603      	mov	r3, r0
 8015624:	2b00      	cmp	r3, #0
 8015626:	d004      	beq.n	8015632 <f_read+0x202>
 8015628:	68fb      	ldr	r3, [r7, #12]
 801562a:	2201      	movs	r2, #1
 801562c:	755a      	strb	r2, [r3, #21]
 801562e:	2301      	movs	r3, #1
 8015630:	e059      	b.n	80156e6 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8015632:	68fb      	ldr	r3, [r7, #12]
 8015634:	7d1b      	ldrb	r3, [r3, #20]
 8015636:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801563a:	b2da      	uxtb	r2, r3
 801563c:	68fb      	ldr	r3, [r7, #12]
 801563e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8015640:	697b      	ldr	r3, [r7, #20]
 8015642:	7858      	ldrb	r0, [r3, #1]
 8015644:	68fb      	ldr	r3, [r7, #12]
 8015646:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801564a:	2301      	movs	r3, #1
 801564c:	69ba      	ldr	r2, [r7, #24]
 801564e:	f7fd f987 	bl	8012960 <disk_read>
 8015652:	4603      	mov	r3, r0
 8015654:	2b00      	cmp	r3, #0
 8015656:	d004      	beq.n	8015662 <f_read+0x232>
 8015658:	68fb      	ldr	r3, [r7, #12]
 801565a:	2201      	movs	r2, #1
 801565c:	755a      	strb	r2, [r3, #21]
 801565e:	2301      	movs	r3, #1
 8015660:	e041      	b.n	80156e6 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8015662:	68fb      	ldr	r3, [r7, #12]
 8015664:	69ba      	ldr	r2, [r7, #24]
 8015666:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8015668:	697b      	ldr	r3, [r7, #20]
 801566a:	899b      	ldrh	r3, [r3, #12]
 801566c:	4618      	mov	r0, r3
 801566e:	68fb      	ldr	r3, [r7, #12]
 8015670:	699b      	ldr	r3, [r3, #24]
 8015672:	697a      	ldr	r2, [r7, #20]
 8015674:	8992      	ldrh	r2, [r2, #12]
 8015676:	fbb3 f1f2 	udiv	r1, r3, r2
 801567a:	fb01 f202 	mul.w	r2, r1, r2
 801567e:	1a9b      	subs	r3, r3, r2
 8015680:	1ac3      	subs	r3, r0, r3
 8015682:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8015684:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	429a      	cmp	r2, r3
 801568a:	d901      	bls.n	8015690 <f_read+0x260>
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8015690:	68fb      	ldr	r3, [r7, #12]
 8015692:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8015696:	68fb      	ldr	r3, [r7, #12]
 8015698:	699b      	ldr	r3, [r3, #24]
 801569a:	697a      	ldr	r2, [r7, #20]
 801569c:	8992      	ldrh	r2, [r2, #12]
 801569e:	fbb3 f0f2 	udiv	r0, r3, r2
 80156a2:	fb00 f202 	mul.w	r2, r0, r2
 80156a6:	1a9b      	subs	r3, r3, r2
 80156a8:	440b      	add	r3, r1
 80156aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80156ac:	4619      	mov	r1, r3
 80156ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80156b0:	f7fd fa36 	bl	8012b20 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80156b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80156b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156b8:	4413      	add	r3, r2
 80156ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80156bc:	68fb      	ldr	r3, [r7, #12]
 80156be:	699a      	ldr	r2, [r3, #24]
 80156c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156c2:	441a      	add	r2, r3
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	619a      	str	r2, [r3, #24]
 80156c8:	683b      	ldr	r3, [r7, #0]
 80156ca:	681a      	ldr	r2, [r3, #0]
 80156cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156ce:	441a      	add	r2, r3
 80156d0:	683b      	ldr	r3, [r7, #0]
 80156d2:	601a      	str	r2, [r3, #0]
 80156d4:	687a      	ldr	r2, [r7, #4]
 80156d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156d8:	1ad3      	subs	r3, r2, r3
 80156da:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	2b00      	cmp	r3, #0
 80156e0:	f47f aee1 	bne.w	80154a6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80156e4:	2300      	movs	r3, #0
}
 80156e6:	4618      	mov	r0, r3
 80156e8:	3738      	adds	r7, #56	@ 0x38
 80156ea:	46bd      	mov	sp, r7
 80156ec:	bd80      	pop	{r7, pc}

080156ee <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80156ee:	b580      	push	{r7, lr}
 80156f0:	b08c      	sub	sp, #48	@ 0x30
 80156f2:	af00      	add	r7, sp, #0
 80156f4:	60f8      	str	r0, [r7, #12]
 80156f6:	60b9      	str	r1, [r7, #8]
 80156f8:	607a      	str	r2, [r7, #4]
 80156fa:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80156fc:	68bb      	ldr	r3, [r7, #8]
 80156fe:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8015700:	683b      	ldr	r3, [r7, #0]
 8015702:	2200      	movs	r2, #0
 8015704:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8015706:	68fb      	ldr	r3, [r7, #12]
 8015708:	f107 0210 	add.w	r2, r7, #16
 801570c:	4611      	mov	r1, r2
 801570e:	4618      	mov	r0, r3
 8015710:	f7ff fc4a 	bl	8014fa8 <validate>
 8015714:	4603      	mov	r3, r0
 8015716:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801571a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801571e:	2b00      	cmp	r3, #0
 8015720:	d107      	bne.n	8015732 <f_write+0x44>
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	7d5b      	ldrb	r3, [r3, #21]
 8015726:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801572a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801572e:	2b00      	cmp	r3, #0
 8015730:	d002      	beq.n	8015738 <f_write+0x4a>
 8015732:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8015736:	e16a      	b.n	8015a0e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8015738:	68fb      	ldr	r3, [r7, #12]
 801573a:	7d1b      	ldrb	r3, [r3, #20]
 801573c:	f003 0302 	and.w	r3, r3, #2
 8015740:	2b00      	cmp	r3, #0
 8015742:	d101      	bne.n	8015748 <f_write+0x5a>
 8015744:	2307      	movs	r3, #7
 8015746:	e162      	b.n	8015a0e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8015748:	68fb      	ldr	r3, [r7, #12]
 801574a:	699a      	ldr	r2, [r3, #24]
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	441a      	add	r2, r3
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	699b      	ldr	r3, [r3, #24]
 8015754:	429a      	cmp	r2, r3
 8015756:	f080 814c 	bcs.w	80159f2 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	699b      	ldr	r3, [r3, #24]
 801575e:	43db      	mvns	r3, r3
 8015760:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8015762:	e146      	b.n	80159f2 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8015764:	68fb      	ldr	r3, [r7, #12]
 8015766:	699b      	ldr	r3, [r3, #24]
 8015768:	693a      	ldr	r2, [r7, #16]
 801576a:	8992      	ldrh	r2, [r2, #12]
 801576c:	fbb3 f1f2 	udiv	r1, r3, r2
 8015770:	fb01 f202 	mul.w	r2, r1, r2
 8015774:	1a9b      	subs	r3, r3, r2
 8015776:	2b00      	cmp	r3, #0
 8015778:	f040 80f1 	bne.w	801595e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	699b      	ldr	r3, [r3, #24]
 8015780:	693a      	ldr	r2, [r7, #16]
 8015782:	8992      	ldrh	r2, [r2, #12]
 8015784:	fbb3 f3f2 	udiv	r3, r3, r2
 8015788:	693a      	ldr	r2, [r7, #16]
 801578a:	8952      	ldrh	r2, [r2, #10]
 801578c:	3a01      	subs	r2, #1
 801578e:	4013      	ands	r3, r2
 8015790:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8015792:	69bb      	ldr	r3, [r7, #24]
 8015794:	2b00      	cmp	r3, #0
 8015796:	d143      	bne.n	8015820 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8015798:	68fb      	ldr	r3, [r7, #12]
 801579a:	699b      	ldr	r3, [r3, #24]
 801579c:	2b00      	cmp	r3, #0
 801579e:	d10c      	bne.n	80157ba <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	689b      	ldr	r3, [r3, #8]
 80157a4:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80157a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d11a      	bne.n	80157e2 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	2100      	movs	r1, #0
 80157b0:	4618      	mov	r0, r3
 80157b2:	f7fd fef2 	bl	801359a <create_chain>
 80157b6:	62b8      	str	r0, [r7, #40]	@ 0x28
 80157b8:	e013      	b.n	80157e2 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80157ba:	68fb      	ldr	r3, [r7, #12]
 80157bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80157be:	2b00      	cmp	r3, #0
 80157c0:	d007      	beq.n	80157d2 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80157c2:	68fb      	ldr	r3, [r7, #12]
 80157c4:	699b      	ldr	r3, [r3, #24]
 80157c6:	4619      	mov	r1, r3
 80157c8:	68f8      	ldr	r0, [r7, #12]
 80157ca:	f7fd ff7e 	bl	80136ca <clmt_clust>
 80157ce:	62b8      	str	r0, [r7, #40]	@ 0x28
 80157d0:	e007      	b.n	80157e2 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80157d2:	68fa      	ldr	r2, [r7, #12]
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	69db      	ldr	r3, [r3, #28]
 80157d8:	4619      	mov	r1, r3
 80157da:	4610      	mov	r0, r2
 80157dc:	f7fd fedd 	bl	801359a <create_chain>
 80157e0:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80157e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	f000 8109 	beq.w	80159fc <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80157ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157ec:	2b01      	cmp	r3, #1
 80157ee:	d104      	bne.n	80157fa <f_write+0x10c>
 80157f0:	68fb      	ldr	r3, [r7, #12]
 80157f2:	2202      	movs	r2, #2
 80157f4:	755a      	strb	r2, [r3, #21]
 80157f6:	2302      	movs	r3, #2
 80157f8:	e109      	b.n	8015a0e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80157fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015800:	d104      	bne.n	801580c <f_write+0x11e>
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	2201      	movs	r2, #1
 8015806:	755a      	strb	r2, [r3, #21]
 8015808:	2301      	movs	r3, #1
 801580a:	e100      	b.n	8015a0e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015810:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	689b      	ldr	r3, [r3, #8]
 8015816:	2b00      	cmp	r3, #0
 8015818:	d102      	bne.n	8015820 <f_write+0x132>
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801581e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8015820:	68fb      	ldr	r3, [r7, #12]
 8015822:	7d1b      	ldrb	r3, [r3, #20]
 8015824:	b25b      	sxtb	r3, r3
 8015826:	2b00      	cmp	r3, #0
 8015828:	da18      	bge.n	801585c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801582a:	693b      	ldr	r3, [r7, #16]
 801582c:	7858      	ldrb	r0, [r3, #1]
 801582e:	68fb      	ldr	r3, [r7, #12]
 8015830:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8015834:	68fb      	ldr	r3, [r7, #12]
 8015836:	6a1a      	ldr	r2, [r3, #32]
 8015838:	2301      	movs	r3, #1
 801583a:	f7fd f8b1 	bl	80129a0 <disk_write>
 801583e:	4603      	mov	r3, r0
 8015840:	2b00      	cmp	r3, #0
 8015842:	d004      	beq.n	801584e <f_write+0x160>
 8015844:	68fb      	ldr	r3, [r7, #12]
 8015846:	2201      	movs	r2, #1
 8015848:	755a      	strb	r2, [r3, #21]
 801584a:	2301      	movs	r3, #1
 801584c:	e0df      	b.n	8015a0e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801584e:	68fb      	ldr	r3, [r7, #12]
 8015850:	7d1b      	ldrb	r3, [r3, #20]
 8015852:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015856:	b2da      	uxtb	r2, r3
 8015858:	68fb      	ldr	r3, [r7, #12]
 801585a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801585c:	693a      	ldr	r2, [r7, #16]
 801585e:	68fb      	ldr	r3, [r7, #12]
 8015860:	69db      	ldr	r3, [r3, #28]
 8015862:	4619      	mov	r1, r3
 8015864:	4610      	mov	r0, r2
 8015866:	f7fd fc27 	bl	80130b8 <clust2sect>
 801586a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801586c:	697b      	ldr	r3, [r7, #20]
 801586e:	2b00      	cmp	r3, #0
 8015870:	d104      	bne.n	801587c <f_write+0x18e>
 8015872:	68fb      	ldr	r3, [r7, #12]
 8015874:	2202      	movs	r2, #2
 8015876:	755a      	strb	r2, [r3, #21]
 8015878:	2302      	movs	r3, #2
 801587a:	e0c8      	b.n	8015a0e <f_write+0x320>
			sect += csect;
 801587c:	697a      	ldr	r2, [r7, #20]
 801587e:	69bb      	ldr	r3, [r7, #24]
 8015880:	4413      	add	r3, r2
 8015882:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8015884:	693b      	ldr	r3, [r7, #16]
 8015886:	899b      	ldrh	r3, [r3, #12]
 8015888:	461a      	mov	r2, r3
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	fbb3 f3f2 	udiv	r3, r3, r2
 8015890:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8015892:	6a3b      	ldr	r3, [r7, #32]
 8015894:	2b00      	cmp	r3, #0
 8015896:	d043      	beq.n	8015920 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8015898:	69ba      	ldr	r2, [r7, #24]
 801589a:	6a3b      	ldr	r3, [r7, #32]
 801589c:	4413      	add	r3, r2
 801589e:	693a      	ldr	r2, [r7, #16]
 80158a0:	8952      	ldrh	r2, [r2, #10]
 80158a2:	4293      	cmp	r3, r2
 80158a4:	d905      	bls.n	80158b2 <f_write+0x1c4>
					cc = fs->csize - csect;
 80158a6:	693b      	ldr	r3, [r7, #16]
 80158a8:	895b      	ldrh	r3, [r3, #10]
 80158aa:	461a      	mov	r2, r3
 80158ac:	69bb      	ldr	r3, [r7, #24]
 80158ae:	1ad3      	subs	r3, r2, r3
 80158b0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80158b2:	693b      	ldr	r3, [r7, #16]
 80158b4:	7858      	ldrb	r0, [r3, #1]
 80158b6:	6a3b      	ldr	r3, [r7, #32]
 80158b8:	697a      	ldr	r2, [r7, #20]
 80158ba:	69f9      	ldr	r1, [r7, #28]
 80158bc:	f7fd f870 	bl	80129a0 <disk_write>
 80158c0:	4603      	mov	r3, r0
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	d004      	beq.n	80158d0 <f_write+0x1e2>
 80158c6:	68fb      	ldr	r3, [r7, #12]
 80158c8:	2201      	movs	r2, #1
 80158ca:	755a      	strb	r2, [r3, #21]
 80158cc:	2301      	movs	r3, #1
 80158ce:	e09e      	b.n	8015a0e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	6a1a      	ldr	r2, [r3, #32]
 80158d4:	697b      	ldr	r3, [r7, #20]
 80158d6:	1ad3      	subs	r3, r2, r3
 80158d8:	6a3a      	ldr	r2, [r7, #32]
 80158da:	429a      	cmp	r2, r3
 80158dc:	d918      	bls.n	8015910 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80158de:	68fb      	ldr	r3, [r7, #12]
 80158e0:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80158e4:	68fb      	ldr	r3, [r7, #12]
 80158e6:	6a1a      	ldr	r2, [r3, #32]
 80158e8:	697b      	ldr	r3, [r7, #20]
 80158ea:	1ad3      	subs	r3, r2, r3
 80158ec:	693a      	ldr	r2, [r7, #16]
 80158ee:	8992      	ldrh	r2, [r2, #12]
 80158f0:	fb02 f303 	mul.w	r3, r2, r3
 80158f4:	69fa      	ldr	r2, [r7, #28]
 80158f6:	18d1      	adds	r1, r2, r3
 80158f8:	693b      	ldr	r3, [r7, #16]
 80158fa:	899b      	ldrh	r3, [r3, #12]
 80158fc:	461a      	mov	r2, r3
 80158fe:	f7fd f90f 	bl	8012b20 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	7d1b      	ldrb	r3, [r3, #20]
 8015906:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801590a:	b2da      	uxtb	r2, r3
 801590c:	68fb      	ldr	r3, [r7, #12]
 801590e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8015910:	693b      	ldr	r3, [r7, #16]
 8015912:	899b      	ldrh	r3, [r3, #12]
 8015914:	461a      	mov	r2, r3
 8015916:	6a3b      	ldr	r3, [r7, #32]
 8015918:	fb02 f303 	mul.w	r3, r2, r3
 801591c:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801591e:	e04b      	b.n	80159b8 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8015920:	68fb      	ldr	r3, [r7, #12]
 8015922:	6a1b      	ldr	r3, [r3, #32]
 8015924:	697a      	ldr	r2, [r7, #20]
 8015926:	429a      	cmp	r2, r3
 8015928:	d016      	beq.n	8015958 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801592a:	68fb      	ldr	r3, [r7, #12]
 801592c:	699a      	ldr	r2, [r3, #24]
 801592e:	68fb      	ldr	r3, [r7, #12]
 8015930:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8015932:	429a      	cmp	r2, r3
 8015934:	d210      	bcs.n	8015958 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8015936:	693b      	ldr	r3, [r7, #16]
 8015938:	7858      	ldrb	r0, [r3, #1]
 801593a:	68fb      	ldr	r3, [r7, #12]
 801593c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8015940:	2301      	movs	r3, #1
 8015942:	697a      	ldr	r2, [r7, #20]
 8015944:	f7fd f80c 	bl	8012960 <disk_read>
 8015948:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801594a:	2b00      	cmp	r3, #0
 801594c:	d004      	beq.n	8015958 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801594e:	68fb      	ldr	r3, [r7, #12]
 8015950:	2201      	movs	r2, #1
 8015952:	755a      	strb	r2, [r3, #21]
 8015954:	2301      	movs	r3, #1
 8015956:	e05a      	b.n	8015a0e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8015958:	68fb      	ldr	r3, [r7, #12]
 801595a:	697a      	ldr	r2, [r7, #20]
 801595c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801595e:	693b      	ldr	r3, [r7, #16]
 8015960:	899b      	ldrh	r3, [r3, #12]
 8015962:	4618      	mov	r0, r3
 8015964:	68fb      	ldr	r3, [r7, #12]
 8015966:	699b      	ldr	r3, [r3, #24]
 8015968:	693a      	ldr	r2, [r7, #16]
 801596a:	8992      	ldrh	r2, [r2, #12]
 801596c:	fbb3 f1f2 	udiv	r1, r3, r2
 8015970:	fb01 f202 	mul.w	r2, r1, r2
 8015974:	1a9b      	subs	r3, r3, r2
 8015976:	1ac3      	subs	r3, r0, r3
 8015978:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801597a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	429a      	cmp	r2, r3
 8015980:	d901      	bls.n	8015986 <f_write+0x298>
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8015986:	68fb      	ldr	r3, [r7, #12]
 8015988:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801598c:	68fb      	ldr	r3, [r7, #12]
 801598e:	699b      	ldr	r3, [r3, #24]
 8015990:	693a      	ldr	r2, [r7, #16]
 8015992:	8992      	ldrh	r2, [r2, #12]
 8015994:	fbb3 f0f2 	udiv	r0, r3, r2
 8015998:	fb00 f202 	mul.w	r2, r0, r2
 801599c:	1a9b      	subs	r3, r3, r2
 801599e:	440b      	add	r3, r1
 80159a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80159a2:	69f9      	ldr	r1, [r7, #28]
 80159a4:	4618      	mov	r0, r3
 80159a6:	f7fd f8bb 	bl	8012b20 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80159aa:	68fb      	ldr	r3, [r7, #12]
 80159ac:	7d1b      	ldrb	r3, [r3, #20]
 80159ae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80159b2:	b2da      	uxtb	r2, r3
 80159b4:	68fb      	ldr	r3, [r7, #12]
 80159b6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80159b8:	69fa      	ldr	r2, [r7, #28]
 80159ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159bc:	4413      	add	r3, r2
 80159be:	61fb      	str	r3, [r7, #28]
 80159c0:	68fb      	ldr	r3, [r7, #12]
 80159c2:	699a      	ldr	r2, [r3, #24]
 80159c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159c6:	441a      	add	r2, r3
 80159c8:	68fb      	ldr	r3, [r7, #12]
 80159ca:	619a      	str	r2, [r3, #24]
 80159cc:	68fb      	ldr	r3, [r7, #12]
 80159ce:	68da      	ldr	r2, [r3, #12]
 80159d0:	68fb      	ldr	r3, [r7, #12]
 80159d2:	699b      	ldr	r3, [r3, #24]
 80159d4:	429a      	cmp	r2, r3
 80159d6:	bf38      	it	cc
 80159d8:	461a      	movcc	r2, r3
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	60da      	str	r2, [r3, #12]
 80159de:	683b      	ldr	r3, [r7, #0]
 80159e0:	681a      	ldr	r2, [r3, #0]
 80159e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159e4:	441a      	add	r2, r3
 80159e6:	683b      	ldr	r3, [r7, #0]
 80159e8:	601a      	str	r2, [r3, #0]
 80159ea:	687a      	ldr	r2, [r7, #4]
 80159ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159ee:	1ad3      	subs	r3, r2, r3
 80159f0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	f47f aeb5 	bne.w	8015764 <f_write+0x76>
 80159fa:	e000      	b.n	80159fe <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80159fc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80159fe:	68fb      	ldr	r3, [r7, #12]
 8015a00:	7d1b      	ldrb	r3, [r3, #20]
 8015a02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015a06:	b2da      	uxtb	r2, r3
 8015a08:	68fb      	ldr	r3, [r7, #12]
 8015a0a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8015a0c:	2300      	movs	r3, #0
}
 8015a0e:	4618      	mov	r0, r3
 8015a10:	3730      	adds	r7, #48	@ 0x30
 8015a12:	46bd      	mov	sp, r7
 8015a14:	bd80      	pop	{r7, pc}

08015a16 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8015a16:	b580      	push	{r7, lr}
 8015a18:	b086      	sub	sp, #24
 8015a1a:	af00      	add	r7, sp, #0
 8015a1c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	f107 0208 	add.w	r2, r7, #8
 8015a24:	4611      	mov	r1, r2
 8015a26:	4618      	mov	r0, r3
 8015a28:	f7ff fabe 	bl	8014fa8 <validate>
 8015a2c:	4603      	mov	r3, r0
 8015a2e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015a30:	7dfb      	ldrb	r3, [r7, #23]
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d168      	bne.n	8015b08 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	7d1b      	ldrb	r3, [r3, #20]
 8015a3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d062      	beq.n	8015b08 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	7d1b      	ldrb	r3, [r3, #20]
 8015a46:	b25b      	sxtb	r3, r3
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	da15      	bge.n	8015a78 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8015a4c:	68bb      	ldr	r3, [r7, #8]
 8015a4e:	7858      	ldrb	r0, [r3, #1]
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	6a1a      	ldr	r2, [r3, #32]
 8015a5a:	2301      	movs	r3, #1
 8015a5c:	f7fc ffa0 	bl	80129a0 <disk_write>
 8015a60:	4603      	mov	r3, r0
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d001      	beq.n	8015a6a <f_sync+0x54>
 8015a66:	2301      	movs	r3, #1
 8015a68:	e04f      	b.n	8015b0a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	7d1b      	ldrb	r3, [r3, #20]
 8015a6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015a72:	b2da      	uxtb	r2, r3
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8015a78:	f7fc fa0e 	bl	8011e98 <get_fattime>
 8015a7c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8015a7e:	68ba      	ldr	r2, [r7, #8]
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015a84:	4619      	mov	r1, r3
 8015a86:	4610      	mov	r0, r2
 8015a88:	f7fd fa78 	bl	8012f7c <move_window>
 8015a8c:	4603      	mov	r3, r0
 8015a8e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8015a90:	7dfb      	ldrb	r3, [r7, #23]
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d138      	bne.n	8015b08 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015a9a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8015a9c:	68fb      	ldr	r3, [r7, #12]
 8015a9e:	330b      	adds	r3, #11
 8015aa0:	781a      	ldrb	r2, [r3, #0]
 8015aa2:	68fb      	ldr	r3, [r7, #12]
 8015aa4:	330b      	adds	r3, #11
 8015aa6:	f042 0220 	orr.w	r2, r2, #32
 8015aaa:	b2d2      	uxtb	r2, r2
 8015aac:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	6818      	ldr	r0, [r3, #0]
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	689b      	ldr	r3, [r3, #8]
 8015ab6:	461a      	mov	r2, r3
 8015ab8:	68f9      	ldr	r1, [r7, #12]
 8015aba:	f7fe f803 	bl	8013ac4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8015abe:	68fb      	ldr	r3, [r7, #12]
 8015ac0:	f103 021c 	add.w	r2, r3, #28
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	68db      	ldr	r3, [r3, #12]
 8015ac8:	4619      	mov	r1, r3
 8015aca:	4610      	mov	r0, r2
 8015acc:	f7fc fffc 	bl	8012ac8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8015ad0:	68fb      	ldr	r3, [r7, #12]
 8015ad2:	3316      	adds	r3, #22
 8015ad4:	6939      	ldr	r1, [r7, #16]
 8015ad6:	4618      	mov	r0, r3
 8015ad8:	f7fc fff6 	bl	8012ac8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8015adc:	68fb      	ldr	r3, [r7, #12]
 8015ade:	3312      	adds	r3, #18
 8015ae0:	2100      	movs	r1, #0
 8015ae2:	4618      	mov	r0, r3
 8015ae4:	f7fc ffd5 	bl	8012a92 <st_word>
					fs->wflag = 1;
 8015ae8:	68bb      	ldr	r3, [r7, #8]
 8015aea:	2201      	movs	r2, #1
 8015aec:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8015aee:	68bb      	ldr	r3, [r7, #8]
 8015af0:	4618      	mov	r0, r3
 8015af2:	f7fd fa71 	bl	8012fd8 <sync_fs>
 8015af6:	4603      	mov	r3, r0
 8015af8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	7d1b      	ldrb	r3, [r3, #20]
 8015afe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8015b02:	b2da      	uxtb	r2, r3
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8015b08:	7dfb      	ldrb	r3, [r7, #23]
}
 8015b0a:	4618      	mov	r0, r3
 8015b0c:	3718      	adds	r7, #24
 8015b0e:	46bd      	mov	sp, r7
 8015b10:	bd80      	pop	{r7, pc}

08015b12 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8015b12:	b580      	push	{r7, lr}
 8015b14:	b084      	sub	sp, #16
 8015b16:	af00      	add	r7, sp, #0
 8015b18:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8015b1a:	6878      	ldr	r0, [r7, #4]
 8015b1c:	f7ff ff7b 	bl	8015a16 <f_sync>
 8015b20:	4603      	mov	r3, r0
 8015b22:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8015b24:	7bfb      	ldrb	r3, [r7, #15]
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	d118      	bne.n	8015b5c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	f107 0208 	add.w	r2, r7, #8
 8015b30:	4611      	mov	r1, r2
 8015b32:	4618      	mov	r0, r3
 8015b34:	f7ff fa38 	bl	8014fa8 <validate>
 8015b38:	4603      	mov	r3, r0
 8015b3a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8015b3c:	7bfb      	ldrb	r3, [r7, #15]
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d10c      	bne.n	8015b5c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	691b      	ldr	r3, [r3, #16]
 8015b46:	4618      	mov	r0, r3
 8015b48:	f7fd f974 	bl	8012e34 <dec_lock>
 8015b4c:	4603      	mov	r3, r0
 8015b4e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8015b50:	7bfb      	ldrb	r3, [r7, #15]
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d102      	bne.n	8015b5c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	2200      	movs	r2, #0
 8015b5a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8015b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b5e:	4618      	mov	r0, r3
 8015b60:	3710      	adds	r7, #16
 8015b62:	46bd      	mov	sp, r7
 8015b64:	bd80      	pop	{r7, pc}

08015b66 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8015b66:	b590      	push	{r4, r7, lr}
 8015b68:	b093      	sub	sp, #76	@ 0x4c
 8015b6a:	af00      	add	r7, sp, #0
 8015b6c:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8015b6e:	f107 010c 	add.w	r1, r7, #12
 8015b72:	1d3b      	adds	r3, r7, #4
 8015b74:	2200      	movs	r2, #0
 8015b76:	4618      	mov	r0, r3
 8015b78:	f7fe ff8e 	bl	8014a98 <find_volume>
 8015b7c:	4603      	mov	r3, r0
 8015b7e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8015b82:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	d131      	bne.n	8015bee <f_chdir+0x88>
		dj.obj.fs = fs;
 8015b8a:	68fb      	ldr	r3, [r7, #12]
 8015b8c:	613b      	str	r3, [r7, #16]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8015b8e:	687a      	ldr	r2, [r7, #4]
 8015b90:	f107 0310 	add.w	r3, r7, #16
 8015b94:	4611      	mov	r1, r2
 8015b96:	4618      	mov	r0, r3
 8015b98:	f7fe fe4e 	bl	8014838 <follow_path>
 8015b9c:	4603      	mov	r3, r0
 8015b9e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		if (res == FR_OK) {					/* Follow completed */
 8015ba2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d11a      	bne.n	8015be0 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8015baa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015bae:	b25b      	sxtb	r3, r3
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	da03      	bge.n	8015bbc <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8015bb4:	68fb      	ldr	r3, [r7, #12]
 8015bb6:	69ba      	ldr	r2, [r7, #24]
 8015bb8:	61da      	str	r2, [r3, #28]
 8015bba:	e011      	b.n	8015be0 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8015bbc:	7dbb      	ldrb	r3, [r7, #22]
 8015bbe:	f003 0310 	and.w	r3, r3, #16
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	d009      	beq.n	8015bda <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8015bc6:	68fb      	ldr	r3, [r7, #12]
 8015bc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015bca:	68fc      	ldr	r4, [r7, #12]
 8015bcc:	4611      	mov	r1, r2
 8015bce:	4618      	mov	r0, r3
 8015bd0:	f7fd ff59 	bl	8013a86 <ld_clust>
 8015bd4:	4603      	mov	r3, r0
 8015bd6:	61e3      	str	r3, [r4, #28]
 8015bd8:	e002      	b.n	8015be0 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8015bda:	2305      	movs	r3, #5
 8015bdc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8015be0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015be4:	2b04      	cmp	r3, #4
 8015be6:	d102      	bne.n	8015bee <f_chdir+0x88>
 8015be8:	2305      	movs	r3, #5
 8015bea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	}

	LEAVE_FF(fs, res);
 8015bee:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8015bf2:	4618      	mov	r0, r3
 8015bf4:	374c      	adds	r7, #76	@ 0x4c
 8015bf6:	46bd      	mov	sp, r7
 8015bf8:	bd90      	pop	{r4, r7, pc}

08015bfa <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8015bfa:	b580      	push	{r7, lr}
 8015bfc:	b090      	sub	sp, #64	@ 0x40
 8015bfe:	af00      	add	r7, sp, #0
 8015c00:	6078      	str	r0, [r7, #4]
 8015c02:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	f107 0208 	add.w	r2, r7, #8
 8015c0a:	4611      	mov	r1, r2
 8015c0c:	4618      	mov	r0, r3
 8015c0e:	f7ff f9cb 	bl	8014fa8 <validate>
 8015c12:	4603      	mov	r3, r0
 8015c14:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8015c18:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	d103      	bne.n	8015c28 <f_lseek+0x2e>
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	7d5b      	ldrb	r3, [r3, #21]
 8015c24:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8015c28:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d002      	beq.n	8015c36 <f_lseek+0x3c>
 8015c30:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015c34:	e201      	b.n	801603a <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	f000 80d9 	beq.w	8015df2 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8015c40:	683b      	ldr	r3, [r7, #0]
 8015c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c46:	d15a      	bne.n	8015cfe <f_lseek+0x104>
			tbl = fp->cltbl;
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c4c:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8015c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c50:	1d1a      	adds	r2, r3, #4
 8015c52:	627a      	str	r2, [r7, #36]	@ 0x24
 8015c54:	681b      	ldr	r3, [r3, #0]
 8015c56:	617b      	str	r3, [r7, #20]
 8015c58:	2302      	movs	r3, #2
 8015c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	689b      	ldr	r3, [r3, #8]
 8015c60:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8015c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	d03a      	beq.n	8015cde <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8015c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c6a:	613b      	str	r3, [r7, #16]
 8015c6c:	2300      	movs	r3, #0
 8015c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c72:	3302      	adds	r3, #2
 8015c74:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8015c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c78:	60fb      	str	r3, [r7, #12]
 8015c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c7c:	3301      	adds	r3, #1
 8015c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8015c84:	4618      	mov	r0, r3
 8015c86:	f7fd fa36 	bl	80130f6 <get_fat>
 8015c8a:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8015c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c8e:	2b01      	cmp	r3, #1
 8015c90:	d804      	bhi.n	8015c9c <f_lseek+0xa2>
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	2202      	movs	r2, #2
 8015c96:	755a      	strb	r2, [r3, #21]
 8015c98:	2302      	movs	r3, #2
 8015c9a:	e1ce      	b.n	801603a <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ca2:	d104      	bne.n	8015cae <f_lseek+0xb4>
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	2201      	movs	r2, #1
 8015ca8:	755a      	strb	r2, [r3, #21]
 8015caa:	2301      	movs	r3, #1
 8015cac:	e1c5      	b.n	801603a <f_lseek+0x440>
					} while (cl == pcl + 1);
 8015cae:	68fb      	ldr	r3, [r7, #12]
 8015cb0:	3301      	adds	r3, #1
 8015cb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015cb4:	429a      	cmp	r2, r3
 8015cb6:	d0de      	beq.n	8015c76 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8015cb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015cba:	697b      	ldr	r3, [r7, #20]
 8015cbc:	429a      	cmp	r2, r3
 8015cbe:	d809      	bhi.n	8015cd4 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8015cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015cc2:	1d1a      	adds	r2, r3, #4
 8015cc4:	627a      	str	r2, [r7, #36]	@ 0x24
 8015cc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015cc8:	601a      	str	r2, [r3, #0]
 8015cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ccc:	1d1a      	adds	r2, r3, #4
 8015cce:	627a      	str	r2, [r7, #36]	@ 0x24
 8015cd0:	693a      	ldr	r2, [r7, #16]
 8015cd2:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8015cd4:	68bb      	ldr	r3, [r7, #8]
 8015cd6:	6a1b      	ldr	r3, [r3, #32]
 8015cd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015cda:	429a      	cmp	r2, r3
 8015cdc:	d3c4      	bcc.n	8015c68 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015ce2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015ce4:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8015ce6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015ce8:	697b      	ldr	r3, [r7, #20]
 8015cea:	429a      	cmp	r2, r3
 8015cec:	d803      	bhi.n	8015cf6 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8015cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015cf0:	2200      	movs	r2, #0
 8015cf2:	601a      	str	r2, [r3, #0]
 8015cf4:	e19f      	b.n	8016036 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8015cf6:	2311      	movs	r3, #17
 8015cf8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8015cfc:	e19b      	b.n	8016036 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	68db      	ldr	r3, [r3, #12]
 8015d02:	683a      	ldr	r2, [r7, #0]
 8015d04:	429a      	cmp	r2, r3
 8015d06:	d902      	bls.n	8015d0e <f_lseek+0x114>
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	68db      	ldr	r3, [r3, #12]
 8015d0c:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	683a      	ldr	r2, [r7, #0]
 8015d12:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8015d14:	683b      	ldr	r3, [r7, #0]
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	f000 818d 	beq.w	8016036 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8015d1c:	683b      	ldr	r3, [r7, #0]
 8015d1e:	3b01      	subs	r3, #1
 8015d20:	4619      	mov	r1, r3
 8015d22:	6878      	ldr	r0, [r7, #4]
 8015d24:	f7fd fcd1 	bl	80136ca <clmt_clust>
 8015d28:	4602      	mov	r2, r0
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8015d2e:	68ba      	ldr	r2, [r7, #8]
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	69db      	ldr	r3, [r3, #28]
 8015d34:	4619      	mov	r1, r3
 8015d36:	4610      	mov	r0, r2
 8015d38:	f7fd f9be 	bl	80130b8 <clust2sect>
 8015d3c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8015d3e:	69bb      	ldr	r3, [r7, #24]
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d104      	bne.n	8015d4e <f_lseek+0x154>
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	2202      	movs	r2, #2
 8015d48:	755a      	strb	r2, [r3, #21]
 8015d4a:	2302      	movs	r3, #2
 8015d4c:	e175      	b.n	801603a <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8015d4e:	683b      	ldr	r3, [r7, #0]
 8015d50:	3b01      	subs	r3, #1
 8015d52:	68ba      	ldr	r2, [r7, #8]
 8015d54:	8992      	ldrh	r2, [r2, #12]
 8015d56:	fbb3 f3f2 	udiv	r3, r3, r2
 8015d5a:	68ba      	ldr	r2, [r7, #8]
 8015d5c:	8952      	ldrh	r2, [r2, #10]
 8015d5e:	3a01      	subs	r2, #1
 8015d60:	4013      	ands	r3, r2
 8015d62:	69ba      	ldr	r2, [r7, #24]
 8015d64:	4413      	add	r3, r2
 8015d66:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	699b      	ldr	r3, [r3, #24]
 8015d6c:	68ba      	ldr	r2, [r7, #8]
 8015d6e:	8992      	ldrh	r2, [r2, #12]
 8015d70:	fbb3 f1f2 	udiv	r1, r3, r2
 8015d74:	fb01 f202 	mul.w	r2, r1, r2
 8015d78:	1a9b      	subs	r3, r3, r2
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	f000 815b 	beq.w	8016036 <f_lseek+0x43c>
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	6a1b      	ldr	r3, [r3, #32]
 8015d84:	69ba      	ldr	r2, [r7, #24]
 8015d86:	429a      	cmp	r2, r3
 8015d88:	f000 8155 	beq.w	8016036 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	7d1b      	ldrb	r3, [r3, #20]
 8015d90:	b25b      	sxtb	r3, r3
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	da18      	bge.n	8015dc8 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015d96:	68bb      	ldr	r3, [r7, #8]
 8015d98:	7858      	ldrb	r0, [r3, #1]
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	6a1a      	ldr	r2, [r3, #32]
 8015da4:	2301      	movs	r3, #1
 8015da6:	f7fc fdfb 	bl	80129a0 <disk_write>
 8015daa:	4603      	mov	r3, r0
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d004      	beq.n	8015dba <f_lseek+0x1c0>
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	2201      	movs	r2, #1
 8015db4:	755a      	strb	r2, [r3, #21]
 8015db6:	2301      	movs	r3, #1
 8015db8:	e13f      	b.n	801603a <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	7d1b      	ldrb	r3, [r3, #20]
 8015dbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015dc2:	b2da      	uxtb	r2, r3
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8015dc8:	68bb      	ldr	r3, [r7, #8]
 8015dca:	7858      	ldrb	r0, [r3, #1]
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8015dd2:	2301      	movs	r3, #1
 8015dd4:	69ba      	ldr	r2, [r7, #24]
 8015dd6:	f7fc fdc3 	bl	8012960 <disk_read>
 8015dda:	4603      	mov	r3, r0
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d004      	beq.n	8015dea <f_lseek+0x1f0>
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	2201      	movs	r2, #1
 8015de4:	755a      	strb	r2, [r3, #21]
 8015de6:	2301      	movs	r3, #1
 8015de8:	e127      	b.n	801603a <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	69ba      	ldr	r2, [r7, #24]
 8015dee:	621a      	str	r2, [r3, #32]
 8015df0:	e121      	b.n	8016036 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	68db      	ldr	r3, [r3, #12]
 8015df6:	683a      	ldr	r2, [r7, #0]
 8015df8:	429a      	cmp	r2, r3
 8015dfa:	d908      	bls.n	8015e0e <f_lseek+0x214>
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	7d1b      	ldrb	r3, [r3, #20]
 8015e00:	f003 0302 	and.w	r3, r3, #2
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d102      	bne.n	8015e0e <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	68db      	ldr	r3, [r3, #12]
 8015e0c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	699b      	ldr	r3, [r3, #24]
 8015e12:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8015e14:	2300      	movs	r3, #0
 8015e16:	637b      	str	r3, [r7, #52]	@ 0x34
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015e1c:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8015e1e:	683b      	ldr	r3, [r7, #0]
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	f000 80b5 	beq.w	8015f90 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8015e26:	68bb      	ldr	r3, [r7, #8]
 8015e28:	895b      	ldrh	r3, [r3, #10]
 8015e2a:	461a      	mov	r2, r3
 8015e2c:	68bb      	ldr	r3, [r7, #8]
 8015e2e:	899b      	ldrh	r3, [r3, #12]
 8015e30:	fb02 f303 	mul.w	r3, r2, r3
 8015e34:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8015e36:	6a3b      	ldr	r3, [r7, #32]
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d01b      	beq.n	8015e74 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8015e3c:	683b      	ldr	r3, [r7, #0]
 8015e3e:	1e5a      	subs	r2, r3, #1
 8015e40:	69fb      	ldr	r3, [r7, #28]
 8015e42:	fbb2 f2f3 	udiv	r2, r2, r3
 8015e46:	6a3b      	ldr	r3, [r7, #32]
 8015e48:	1e59      	subs	r1, r3, #1
 8015e4a:	69fb      	ldr	r3, [r7, #28]
 8015e4c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8015e50:	429a      	cmp	r2, r3
 8015e52:	d30f      	bcc.n	8015e74 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8015e54:	6a3b      	ldr	r3, [r7, #32]
 8015e56:	1e5a      	subs	r2, r3, #1
 8015e58:	69fb      	ldr	r3, [r7, #28]
 8015e5a:	425b      	negs	r3, r3
 8015e5c:	401a      	ands	r2, r3
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	699b      	ldr	r3, [r3, #24]
 8015e66:	683a      	ldr	r2, [r7, #0]
 8015e68:	1ad3      	subs	r3, r2, r3
 8015e6a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	69db      	ldr	r3, [r3, #28]
 8015e70:	63bb      	str	r3, [r7, #56]	@ 0x38
 8015e72:	e022      	b.n	8015eba <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	689b      	ldr	r3, [r3, #8]
 8015e78:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8015e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d119      	bne.n	8015eb4 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	2100      	movs	r1, #0
 8015e84:	4618      	mov	r0, r3
 8015e86:	f7fd fb88 	bl	801359a <create_chain>
 8015e8a:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8015e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015e8e:	2b01      	cmp	r3, #1
 8015e90:	d104      	bne.n	8015e9c <f_lseek+0x2a2>
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	2202      	movs	r2, #2
 8015e96:	755a      	strb	r2, [r3, #21]
 8015e98:	2302      	movs	r3, #2
 8015e9a:	e0ce      	b.n	801603a <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ea2:	d104      	bne.n	8015eae <f_lseek+0x2b4>
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	2201      	movs	r2, #1
 8015ea8:	755a      	strb	r2, [r3, #21]
 8015eaa:	2301      	movs	r3, #1
 8015eac:	e0c5      	b.n	801603a <f_lseek+0x440>
					fp->obj.sclust = clst;
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015eb2:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015eb8:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8015eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d067      	beq.n	8015f90 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8015ec0:	e03a      	b.n	8015f38 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8015ec2:	683a      	ldr	r2, [r7, #0]
 8015ec4:	69fb      	ldr	r3, [r7, #28]
 8015ec6:	1ad3      	subs	r3, r2, r3
 8015ec8:	603b      	str	r3, [r7, #0]
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	699a      	ldr	r2, [r3, #24]
 8015ece:	69fb      	ldr	r3, [r7, #28]
 8015ed0:	441a      	add	r2, r3
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	7d1b      	ldrb	r3, [r3, #20]
 8015eda:	f003 0302 	and.w	r3, r3, #2
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d00b      	beq.n	8015efa <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8015ee6:	4618      	mov	r0, r3
 8015ee8:	f7fd fb57 	bl	801359a <create_chain>
 8015eec:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8015eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d108      	bne.n	8015f06 <f_lseek+0x30c>
							ofs = 0; break;
 8015ef4:	2300      	movs	r3, #0
 8015ef6:	603b      	str	r3, [r7, #0]
 8015ef8:	e022      	b.n	8015f40 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8015efe:	4618      	mov	r0, r3
 8015f00:	f7fd f8f9 	bl	80130f6 <get_fat>
 8015f04:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f0c:	d104      	bne.n	8015f18 <f_lseek+0x31e>
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	2201      	movs	r2, #1
 8015f12:	755a      	strb	r2, [r3, #21]
 8015f14:	2301      	movs	r3, #1
 8015f16:	e090      	b.n	801603a <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8015f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015f1a:	2b01      	cmp	r3, #1
 8015f1c:	d904      	bls.n	8015f28 <f_lseek+0x32e>
 8015f1e:	68bb      	ldr	r3, [r7, #8]
 8015f20:	6a1b      	ldr	r3, [r3, #32]
 8015f22:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015f24:	429a      	cmp	r2, r3
 8015f26:	d304      	bcc.n	8015f32 <f_lseek+0x338>
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	2202      	movs	r2, #2
 8015f2c:	755a      	strb	r2, [r3, #21]
 8015f2e:	2302      	movs	r3, #2
 8015f30:	e083      	b.n	801603a <f_lseek+0x440>
					fp->clust = clst;
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015f36:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8015f38:	683a      	ldr	r2, [r7, #0]
 8015f3a:	69fb      	ldr	r3, [r7, #28]
 8015f3c:	429a      	cmp	r2, r3
 8015f3e:	d8c0      	bhi.n	8015ec2 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	699a      	ldr	r2, [r3, #24]
 8015f44:	683b      	ldr	r3, [r7, #0]
 8015f46:	441a      	add	r2, r3
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8015f4c:	68bb      	ldr	r3, [r7, #8]
 8015f4e:	899b      	ldrh	r3, [r3, #12]
 8015f50:	461a      	mov	r2, r3
 8015f52:	683b      	ldr	r3, [r7, #0]
 8015f54:	fbb3 f1f2 	udiv	r1, r3, r2
 8015f58:	fb01 f202 	mul.w	r2, r1, r2
 8015f5c:	1a9b      	subs	r3, r3, r2
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d016      	beq.n	8015f90 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8015f62:	68bb      	ldr	r3, [r7, #8]
 8015f64:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8015f66:	4618      	mov	r0, r3
 8015f68:	f7fd f8a6 	bl	80130b8 <clust2sect>
 8015f6c:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8015f6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	d104      	bne.n	8015f7e <f_lseek+0x384>
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	2202      	movs	r2, #2
 8015f78:	755a      	strb	r2, [r3, #21]
 8015f7a:	2302      	movs	r3, #2
 8015f7c:	e05d      	b.n	801603a <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8015f7e:	68bb      	ldr	r3, [r7, #8]
 8015f80:	899b      	ldrh	r3, [r3, #12]
 8015f82:	461a      	mov	r2, r3
 8015f84:	683b      	ldr	r3, [r7, #0]
 8015f86:	fbb3 f3f2 	udiv	r3, r3, r2
 8015f8a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015f8c:	4413      	add	r3, r2
 8015f8e:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	699a      	ldr	r2, [r3, #24]
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	68db      	ldr	r3, [r3, #12]
 8015f98:	429a      	cmp	r2, r3
 8015f9a:	d90a      	bls.n	8015fb2 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	699a      	ldr	r2, [r3, #24]
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	7d1b      	ldrb	r3, [r3, #20]
 8015fa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015fac:	b2da      	uxtb	r2, r3
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	699b      	ldr	r3, [r3, #24]
 8015fb6:	68ba      	ldr	r2, [r7, #8]
 8015fb8:	8992      	ldrh	r2, [r2, #12]
 8015fba:	fbb3 f1f2 	udiv	r1, r3, r2
 8015fbe:	fb01 f202 	mul.w	r2, r1, r2
 8015fc2:	1a9b      	subs	r3, r3, r2
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	d036      	beq.n	8016036 <f_lseek+0x43c>
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	6a1b      	ldr	r3, [r3, #32]
 8015fcc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015fce:	429a      	cmp	r2, r3
 8015fd0:	d031      	beq.n	8016036 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	7d1b      	ldrb	r3, [r3, #20]
 8015fd6:	b25b      	sxtb	r3, r3
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	da18      	bge.n	801600e <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015fdc:	68bb      	ldr	r3, [r7, #8]
 8015fde:	7858      	ldrb	r0, [r3, #1]
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	6a1a      	ldr	r2, [r3, #32]
 8015fea:	2301      	movs	r3, #1
 8015fec:	f7fc fcd8 	bl	80129a0 <disk_write>
 8015ff0:	4603      	mov	r3, r0
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	d004      	beq.n	8016000 <f_lseek+0x406>
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	2201      	movs	r2, #1
 8015ffa:	755a      	strb	r2, [r3, #21]
 8015ffc:	2301      	movs	r3, #1
 8015ffe:	e01c      	b.n	801603a <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	7d1b      	ldrb	r3, [r3, #20]
 8016004:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016008:	b2da      	uxtb	r2, r3
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801600e:	68bb      	ldr	r3, [r7, #8]
 8016010:	7858      	ldrb	r0, [r3, #1]
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8016018:	2301      	movs	r3, #1
 801601a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801601c:	f7fc fca0 	bl	8012960 <disk_read>
 8016020:	4603      	mov	r3, r0
 8016022:	2b00      	cmp	r3, #0
 8016024:	d004      	beq.n	8016030 <f_lseek+0x436>
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	2201      	movs	r2, #1
 801602a:	755a      	strb	r2, [r3, #21]
 801602c:	2301      	movs	r3, #1
 801602e:	e004      	b.n	801603a <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016034:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8016036:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 801603a:	4618      	mov	r0, r3
 801603c:	3740      	adds	r7, #64	@ 0x40
 801603e:	46bd      	mov	sp, r7
 8016040:	bd80      	pop	{r7, pc}

08016042 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8016042:	b580      	push	{r7, lr}
 8016044:	b0a0      	sub	sp, #128	@ 0x80
 8016046:	af00      	add	r7, sp, #0
 8016048:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 801604a:	2300      	movs	r3, #0
 801604c:	67bb      	str	r3, [r7, #120]	@ 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801604e:	f107 010c 	add.w	r1, r7, #12
 8016052:	1d3b      	adds	r3, r7, #4
 8016054:	2202      	movs	r2, #2
 8016056:	4618      	mov	r0, r3
 8016058:	f7fe fd1e 	bl	8014a98 <find_volume>
 801605c:	4603      	mov	r3, r0
 801605e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	dj.obj.fs = fs;
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	647b      	str	r3, [r7, #68]	@ 0x44
	if (res == FR_OK) {
 8016066:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801606a:	2b00      	cmp	r3, #0
 801606c:	f040 80a4 	bne.w	80161b8 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8016070:	687a      	ldr	r2, [r7, #4]
 8016072:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8016076:	4611      	mov	r1, r2
 8016078:	4618      	mov	r0, r3
 801607a:	f7fe fbdd 	bl	8014838 <follow_path>
 801607e:	4603      	mov	r3, r0
 8016080:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8016084:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8016088:	2b00      	cmp	r3, #0
 801608a:	d108      	bne.n	801609e <f_unlink+0x5c>
 801608c:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8016090:	f003 0320 	and.w	r3, r3, #32
 8016094:	2b00      	cmp	r3, #0
 8016096:	d002      	beq.n	801609e <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8016098:	2306      	movs	r3, #6
 801609a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 801609e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d108      	bne.n	80160b8 <f_unlink+0x76>
 80160a6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80160aa:	2102      	movs	r1, #2
 80160ac:	4618      	mov	r0, r3
 80160ae:	f7fc fdb5 	bl	8012c1c <chk_lock>
 80160b2:	4603      	mov	r3, r0
 80160b4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80160b8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d17b      	bne.n	80161b8 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80160c0:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80160c4:	b25b      	sxtb	r3, r3
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	da03      	bge.n	80160d2 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80160ca:	2306      	movs	r3, #6
 80160cc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80160d0:	e008      	b.n	80160e4 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80160d2:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80160d6:	f003 0301 	and.w	r3, r3, #1
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d002      	beq.n	80160e4 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80160de:	2307      	movs	r3, #7
 80160e0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				}
			}
			if (res == FR_OK) {
 80160e4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d13d      	bne.n	8016168 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80160ec:	68fb      	ldr	r3, [r7, #12]
 80160ee:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80160f0:	4611      	mov	r1, r2
 80160f2:	4618      	mov	r0, r3
 80160f4:	f7fd fcc7 	bl	8013a86 <ld_clust>
 80160f8:	67b8      	str	r0, [r7, #120]	@ 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80160fa:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80160fe:	f003 0310 	and.w	r3, r3, #16
 8016102:	2b00      	cmp	r3, #0
 8016104:	d030      	beq.n	8016168 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	69db      	ldr	r3, [r3, #28]
 801610a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801610c:	429a      	cmp	r2, r3
 801610e:	d103      	bne.n	8016118 <f_unlink+0xd6>
						res = FR_DENIED;
 8016110:	2307      	movs	r3, #7
 8016112:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8016116:	e027      	b.n	8016168 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8016118:	68fb      	ldr	r3, [r7, #12]
 801611a:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 801611c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801611e:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8016120:	f107 0310 	add.w	r3, r7, #16
 8016124:	2100      	movs	r1, #0
 8016126:	4618      	mov	r0, r3
 8016128:	f7fd fb07 	bl	801373a <dir_sdi>
 801612c:	4603      	mov	r3, r0
 801612e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						if (res == FR_OK) {
 8016132:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8016136:	2b00      	cmp	r3, #0
 8016138:	d116      	bne.n	8016168 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 801613a:	f107 0310 	add.w	r3, r7, #16
 801613e:	2100      	movs	r1, #0
 8016140:	4618      	mov	r0, r3
 8016142:	f7fd feca 	bl	8013eda <dir_read>
 8016146:	4603      	mov	r3, r0
 8016148:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 801614c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8016150:	2b00      	cmp	r3, #0
 8016152:	d102      	bne.n	801615a <f_unlink+0x118>
 8016154:	2307      	movs	r3, #7
 8016156:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 801615a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801615e:	2b04      	cmp	r3, #4
 8016160:	d102      	bne.n	8016168 <f_unlink+0x126>
 8016162:	2300      	movs	r3, #0
 8016164:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 8016168:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801616c:	2b00      	cmp	r3, #0
 801616e:	d123      	bne.n	80161b8 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8016170:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8016174:	4618      	mov	r0, r3
 8016176:	f7fe f90f 	bl	8014398 <dir_remove>
 801617a:	4603      	mov	r3, r0
 801617c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8016180:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8016184:	2b00      	cmp	r3, #0
 8016186:	d10c      	bne.n	80161a2 <f_unlink+0x160>
 8016188:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801618a:	2b00      	cmp	r3, #0
 801618c:	d009      	beq.n	80161a2 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 801618e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8016192:	2200      	movs	r2, #0
 8016194:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8016196:	4618      	mov	r0, r3
 8016198:	f7fd f99a 	bl	80134d0 <remove_chain>
 801619c:	4603      	mov	r3, r0
 801619e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 80161a2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	d106      	bne.n	80161b8 <f_unlink+0x176>
 80161aa:	68fb      	ldr	r3, [r7, #12]
 80161ac:	4618      	mov	r0, r3
 80161ae:	f7fc ff13 	bl	8012fd8 <sync_fs>
 80161b2:	4603      	mov	r3, r0
 80161b4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80161b8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80161bc:	4618      	mov	r0, r3
 80161be:	3780      	adds	r7, #128	@ 0x80
 80161c0:	46bd      	mov	sp, r7
 80161c2:	bd80      	pop	{r7, pc}

080161c4 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80161c4:	b580      	push	{r7, lr}
 80161c6:	b098      	sub	sp, #96	@ 0x60
 80161c8:	af00      	add	r7, sp, #0
 80161ca:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80161cc:	f107 010c 	add.w	r1, r7, #12
 80161d0:	1d3b      	adds	r3, r7, #4
 80161d2:	2202      	movs	r2, #2
 80161d4:	4618      	mov	r0, r3
 80161d6:	f7fe fc5f 	bl	8014a98 <find_volume>
 80161da:	4603      	mov	r3, r0
 80161dc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	dj.obj.fs = fs;
 80161e0:	68fb      	ldr	r3, [r7, #12]
 80161e2:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 80161e4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	f040 80ff 	bne.w	80163ec <f_mkdir+0x228>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80161ee:	687a      	ldr	r2, [r7, #4]
 80161f0:	f107 0310 	add.w	r3, r7, #16
 80161f4:	4611      	mov	r1, r2
 80161f6:	4618      	mov	r0, r3
 80161f8:	f7fe fb1e 	bl	8014838 <follow_path>
 80161fc:	4603      	mov	r3, r0
 80161fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8016202:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8016206:	2b00      	cmp	r3, #0
 8016208:	d102      	bne.n	8016210 <f_mkdir+0x4c>
 801620a:	2308      	movs	r3, #8
 801620c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8016210:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8016214:	2b04      	cmp	r3, #4
 8016216:	d108      	bne.n	801622a <f_mkdir+0x66>
 8016218:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801621c:	f003 0320 	and.w	r3, r3, #32
 8016220:	2b00      	cmp	r3, #0
 8016222:	d002      	beq.n	801622a <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8016224:	2306      	movs	r3, #6
 8016226:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 801622a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801622e:	2b04      	cmp	r3, #4
 8016230:	f040 80dc 	bne.w	80163ec <f_mkdir+0x228>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8016234:	f107 0310 	add.w	r3, r7, #16
 8016238:	2100      	movs	r1, #0
 801623a:	4618      	mov	r0, r3
 801623c:	f7fd f9ad 	bl	801359a <create_chain>
 8016240:	64f8      	str	r0, [r7, #76]	@ 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8016242:	68fb      	ldr	r3, [r7, #12]
 8016244:	895b      	ldrh	r3, [r3, #10]
 8016246:	461a      	mov	r2, r3
 8016248:	68fb      	ldr	r3, [r7, #12]
 801624a:	899b      	ldrh	r3, [r3, #12]
 801624c:	fb02 f303 	mul.w	r3, r2, r3
 8016250:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 8016252:	2300      	movs	r3, #0
 8016254:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8016258:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801625a:	2b00      	cmp	r3, #0
 801625c:	d102      	bne.n	8016264 <f_mkdir+0xa0>
 801625e:	2307      	movs	r3, #7
 8016260:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 8016264:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016266:	2b01      	cmp	r3, #1
 8016268:	d102      	bne.n	8016270 <f_mkdir+0xac>
 801626a:	2302      	movs	r3, #2
 801626c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8016270:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016276:	d102      	bne.n	801627e <f_mkdir+0xba>
 8016278:	2301      	movs	r3, #1
 801627a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 801627e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8016282:	2b00      	cmp	r3, #0
 8016284:	d106      	bne.n	8016294 <f_mkdir+0xd0>
 8016286:	68fb      	ldr	r3, [r7, #12]
 8016288:	4618      	mov	r0, r3
 801628a:	f7fc fe33 	bl	8012ef4 <sync_window>
 801628e:	4603      	mov	r3, r0
 8016290:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			tm = GET_FATTIME();
 8016294:	f7fb fe00 	bl	8011e98 <get_fattime>
 8016298:	64b8      	str	r0, [r7, #72]	@ 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 801629a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d16c      	bne.n	801637c <f_mkdir+0x1b8>
				dsc = clust2sect(fs, dcl);
 80162a2:	68fb      	ldr	r3, [r7, #12]
 80162a4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80162a6:	4618      	mov	r0, r3
 80162a8:	f7fc ff06 	bl	80130b8 <clust2sect>
 80162ac:	6578      	str	r0, [r7, #84]	@ 0x54
				dir = fs->win;
 80162ae:	68fb      	ldr	r3, [r7, #12]
 80162b0:	333c      	adds	r3, #60	@ 0x3c
 80162b2:	647b      	str	r3, [r7, #68]	@ 0x44
				mem_set(dir, 0, SS(fs));
 80162b4:	68fb      	ldr	r3, [r7, #12]
 80162b6:	899b      	ldrh	r3, [r3, #12]
 80162b8:	461a      	mov	r2, r3
 80162ba:	2100      	movs	r1, #0
 80162bc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80162be:	f7fc fc50 	bl	8012b62 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80162c2:	220b      	movs	r2, #11
 80162c4:	2120      	movs	r1, #32
 80162c6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80162c8:	f7fc fc4b 	bl	8012b62 <mem_set>
					dir[DIR_Name] = '.';
 80162cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80162ce:	222e      	movs	r2, #46	@ 0x2e
 80162d0:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 80162d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80162d4:	330b      	adds	r3, #11
 80162d6:	2210      	movs	r2, #16
 80162d8:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 80162da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80162dc:	3316      	adds	r3, #22
 80162de:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80162e0:	4618      	mov	r0, r3
 80162e2:	f7fc fbf1 	bl	8012ac8 <st_dword>
					st_clust(fs, dir, dcl);
 80162e6:	68fb      	ldr	r3, [r7, #12]
 80162e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80162ea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80162ec:	4618      	mov	r0, r3
 80162ee:	f7fd fbe9 	bl	8013ac4 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80162f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80162f4:	3320      	adds	r3, #32
 80162f6:	2220      	movs	r2, #32
 80162f8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80162fa:	4618      	mov	r0, r3
 80162fc:	f7fc fc10 	bl	8012b20 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8016300:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016302:	3321      	adds	r3, #33	@ 0x21
 8016304:	222e      	movs	r2, #46	@ 0x2e
 8016306:	701a      	strb	r2, [r3, #0]
 8016308:	69bb      	ldr	r3, [r7, #24]
 801630a:	653b      	str	r3, [r7, #80]	@ 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 801630c:	68fb      	ldr	r3, [r7, #12]
 801630e:	781b      	ldrb	r3, [r3, #0]
 8016310:	2b03      	cmp	r3, #3
 8016312:	d106      	bne.n	8016322 <f_mkdir+0x15e>
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016318:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801631a:	429a      	cmp	r2, r3
 801631c:	d101      	bne.n	8016322 <f_mkdir+0x15e>
 801631e:	2300      	movs	r3, #0
 8016320:	653b      	str	r3, [r7, #80]	@ 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 8016322:	68f8      	ldr	r0, [r7, #12]
 8016324:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016326:	3320      	adds	r3, #32
 8016328:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801632a:	4619      	mov	r1, r3
 801632c:	f7fd fbca 	bl	8013ac4 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8016330:	68fb      	ldr	r3, [r7, #12]
 8016332:	895b      	ldrh	r3, [r3, #10]
 8016334:	65bb      	str	r3, [r7, #88]	@ 0x58
 8016336:	e01c      	b.n	8016372 <f_mkdir+0x1ae>
					fs->winsect = dsc++;
 8016338:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801633a:	1c5a      	adds	r2, r3, #1
 801633c:	657a      	str	r2, [r7, #84]	@ 0x54
 801633e:	68fa      	ldr	r2, [r7, #12]
 8016340:	6393      	str	r3, [r2, #56]	@ 0x38
					fs->wflag = 1;
 8016342:	68fb      	ldr	r3, [r7, #12]
 8016344:	2201      	movs	r2, #1
 8016346:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8016348:	68fb      	ldr	r3, [r7, #12]
 801634a:	4618      	mov	r0, r3
 801634c:	f7fc fdd2 	bl	8012ef4 <sync_window>
 8016350:	4603      	mov	r3, r0
 8016352:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (res != FR_OK) break;
 8016356:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801635a:	2b00      	cmp	r3, #0
 801635c:	d10d      	bne.n	801637a <f_mkdir+0x1b6>
					mem_set(dir, 0, SS(fs));
 801635e:	68fb      	ldr	r3, [r7, #12]
 8016360:	899b      	ldrh	r3, [r3, #12]
 8016362:	461a      	mov	r2, r3
 8016364:	2100      	movs	r1, #0
 8016366:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8016368:	f7fc fbfb 	bl	8012b62 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801636c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801636e:	3b01      	subs	r3, #1
 8016370:	65bb      	str	r3, [r7, #88]	@ 0x58
 8016372:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016374:	2b00      	cmp	r3, #0
 8016376:	d1df      	bne.n	8016338 <f_mkdir+0x174>
 8016378:	e000      	b.n	801637c <f_mkdir+0x1b8>
					if (res != FR_OK) break;
 801637a:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 801637c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8016380:	2b00      	cmp	r3, #0
 8016382:	d107      	bne.n	8016394 <f_mkdir+0x1d0>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8016384:	f107 0310 	add.w	r3, r7, #16
 8016388:	4618      	mov	r0, r3
 801638a:	f7fd ff0d 	bl	80141a8 <dir_register>
 801638e:	4603      	mov	r3, r0
 8016390:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
			if (res == FR_OK) {
 8016394:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8016398:	2b00      	cmp	r3, #0
 801639a:	d120      	bne.n	80163de <f_mkdir+0x21a>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 801639c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801639e:	647b      	str	r3, [r7, #68]	@ 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 80163a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80163a2:	3316      	adds	r3, #22
 80163a4:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80163a6:	4618      	mov	r0, r3
 80163a8:	f7fc fb8e 	bl	8012ac8 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 80163ac:	68fb      	ldr	r3, [r7, #12]
 80163ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80163b0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80163b2:	4618      	mov	r0, r3
 80163b4:	f7fd fb86 	bl	8013ac4 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80163b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80163ba:	330b      	adds	r3, #11
 80163bc:	2210      	movs	r2, #16
 80163be:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80163c0:	68fb      	ldr	r3, [r7, #12]
 80163c2:	2201      	movs	r2, #1
 80163c4:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80163c6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d10e      	bne.n	80163ec <f_mkdir+0x228>
					res = sync_fs(fs);
 80163ce:	68fb      	ldr	r3, [r7, #12]
 80163d0:	4618      	mov	r0, r3
 80163d2:	f7fc fe01 	bl	8012fd8 <sync_fs>
 80163d6:	4603      	mov	r3, r0
 80163d8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80163dc:	e006      	b.n	80163ec <f_mkdir+0x228>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80163de:	f107 0310 	add.w	r3, r7, #16
 80163e2:	2200      	movs	r2, #0
 80163e4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80163e6:	4618      	mov	r0, r3
 80163e8:	f7fd f872 	bl	80134d0 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80163ec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80163f0:	4618      	mov	r0, r3
 80163f2:	3760      	adds	r7, #96	@ 0x60
 80163f4:	46bd      	mov	sp, r7
 80163f6:	bd80      	pop	{r7, pc}

080163f8 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80163f8:	b580      	push	{r7, lr}
 80163fa:	b084      	sub	sp, #16
 80163fc:	af00      	add	r7, sp, #0
 80163fe:	6078      	str	r0, [r7, #4]
 8016400:	460b      	mov	r3, r1
 8016402:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8016404:	78fb      	ldrb	r3, [r7, #3]
 8016406:	2b0a      	cmp	r3, #10
 8016408:	d103      	bne.n	8016412 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 801640a:	210d      	movs	r1, #13
 801640c:	6878      	ldr	r0, [r7, #4]
 801640e:	f7ff fff3 	bl	80163f8 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	685b      	ldr	r3, [r3, #4]
 8016416:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	2b00      	cmp	r3, #0
 801641c:	db25      	blt.n	801646a <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 801641e:	68fb      	ldr	r3, [r7, #12]
 8016420:	1c5a      	adds	r2, r3, #1
 8016422:	60fa      	str	r2, [r7, #12]
 8016424:	687a      	ldr	r2, [r7, #4]
 8016426:	4413      	add	r3, r2
 8016428:	78fa      	ldrb	r2, [r7, #3]
 801642a:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801642c:	68fb      	ldr	r3, [r7, #12]
 801642e:	2b3c      	cmp	r3, #60	@ 0x3c
 8016430:	dd12      	ble.n	8016458 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	6818      	ldr	r0, [r3, #0]
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	f103 010c 	add.w	r1, r3, #12
 801643c:	68fa      	ldr	r2, [r7, #12]
 801643e:	f107 0308 	add.w	r3, r7, #8
 8016442:	f7ff f954 	bl	80156ee <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8016446:	68ba      	ldr	r2, [r7, #8]
 8016448:	68fb      	ldr	r3, [r7, #12]
 801644a:	429a      	cmp	r2, r3
 801644c:	d101      	bne.n	8016452 <putc_bfd+0x5a>
 801644e:	2300      	movs	r3, #0
 8016450:	e001      	b.n	8016456 <putc_bfd+0x5e>
 8016452:	f04f 33ff 	mov.w	r3, #4294967295
 8016456:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	68fa      	ldr	r2, [r7, #12]
 801645c:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	689b      	ldr	r3, [r3, #8]
 8016462:	1c5a      	adds	r2, r3, #1
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	609a      	str	r2, [r3, #8]
 8016468:	e000      	b.n	801646c <putc_bfd+0x74>
	if (i < 0) return;
 801646a:	bf00      	nop
}
 801646c:	3710      	adds	r7, #16
 801646e:	46bd      	mov	sp, r7
 8016470:	bd80      	pop	{r7, pc}

08016472 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8016472:	b580      	push	{r7, lr}
 8016474:	b084      	sub	sp, #16
 8016476:	af00      	add	r7, sp, #0
 8016478:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	685b      	ldr	r3, [r3, #4]
 801647e:	2b00      	cmp	r3, #0
 8016480:	db16      	blt.n	80164b0 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	6818      	ldr	r0, [r3, #0]
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	f103 010c 	add.w	r1, r3, #12
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	685b      	ldr	r3, [r3, #4]
 8016490:	461a      	mov	r2, r3
 8016492:	f107 030c 	add.w	r3, r7, #12
 8016496:	f7ff f92a 	bl	80156ee <f_write>
 801649a:	4603      	mov	r3, r0
 801649c:	2b00      	cmp	r3, #0
 801649e:	d107      	bne.n	80164b0 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	685b      	ldr	r3, [r3, #4]
 80164a4:	68fa      	ldr	r2, [r7, #12]
 80164a6:	4293      	cmp	r3, r2
 80164a8:	d102      	bne.n	80164b0 <putc_flush+0x3e>
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	689b      	ldr	r3, [r3, #8]
 80164ae:	e001      	b.n	80164b4 <putc_flush+0x42>
	return EOF;
 80164b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80164b4:	4618      	mov	r0, r3
 80164b6:	3710      	adds	r7, #16
 80164b8:	46bd      	mov	sp, r7
 80164ba:	bd80      	pop	{r7, pc}

080164bc <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80164bc:	b480      	push	{r7}
 80164be:	b083      	sub	sp, #12
 80164c0:	af00      	add	r7, sp, #0
 80164c2:	6078      	str	r0, [r7, #4]
 80164c4:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	683a      	ldr	r2, [r7, #0]
 80164ca:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	2200      	movs	r2, #0
 80164d0:	605a      	str	r2, [r3, #4]
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	685a      	ldr	r2, [r3, #4]
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	609a      	str	r2, [r3, #8]
}
 80164da:	bf00      	nop
 80164dc:	370c      	adds	r7, #12
 80164de:	46bd      	mov	sp, r7
 80164e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164e4:	4770      	bx	lr
	...

080164e8 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 80164e8:	b40e      	push	{r1, r2, r3}
 80164ea:	b580      	push	{r7, lr}
 80164ec:	b0a7      	sub	sp, #156	@ 0x9c
 80164ee:	af00      	add	r7, sp, #0
 80164f0:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 80164f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80164f6:	6879      	ldr	r1, [r7, #4]
 80164f8:	4618      	mov	r0, r3
 80164fa:	f7ff ffdf 	bl	80164bc <putc_init>

	va_start(arp, fmt);
 80164fe:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8016502:	67bb      	str	r3, [r7, #120]	@ 0x78

	for (;;) {
		c = *fmt++;
 8016504:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8016508:	1c5a      	adds	r2, r3, #1
 801650a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801650e:	781b      	ldrb	r3, [r3, #0]
 8016510:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == 0) break;			/* End of string */
 8016514:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8016518:	2b00      	cmp	r3, #0
 801651a:	f000 81f2 	beq.w	8016902 <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 801651e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8016522:	2b25      	cmp	r3, #37	@ 0x25
 8016524:	d008      	beq.n	8016538 <f_printf+0x50>
			putc_bfd(&pb, c);
 8016526:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 801652a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801652e:	4611      	mov	r1, r2
 8016530:	4618      	mov	r0, r3
 8016532:	f7ff ff61 	bl	80163f8 <putc_bfd>
			continue;
 8016536:	e1e3      	b.n	8016900 <f_printf+0x418>
		}
		w = f = 0;
 8016538:	2300      	movs	r3, #0
 801653a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 801653e:	2300      	movs	r3, #0
 8016540:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		c = *fmt++;
 8016544:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8016548:	1c5a      	adds	r2, r3, #1
 801654a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801654e:	781b      	ldrb	r3, [r3, #0]
 8016550:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8016554:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8016558:	2b30      	cmp	r3, #48	@ 0x30
 801655a:	d10b      	bne.n	8016574 <f_printf+0x8c>
			f = 1; c = *fmt++;
 801655c:	2301      	movs	r3, #1
 801655e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8016562:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8016566:	1c5a      	adds	r2, r3, #1
 8016568:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801656c:	781b      	ldrb	r3, [r3, #0]
 801656e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8016572:	e024      	b.n	80165be <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8016574:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8016578:	2b2d      	cmp	r3, #45	@ 0x2d
 801657a:	d120      	bne.n	80165be <f_printf+0xd6>
				f = 2; c = *fmt++;
 801657c:	2302      	movs	r3, #2
 801657e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8016582:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8016586:	1c5a      	adds	r2, r3, #1
 8016588:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801658c:	781b      	ldrb	r3, [r3, #0]
 801658e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8016592:	e014      	b.n	80165be <f_printf+0xd6>
			w = w * 10 + c - '0';
 8016594:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8016598:	4613      	mov	r3, r2
 801659a:	009b      	lsls	r3, r3, #2
 801659c:	4413      	add	r3, r2
 801659e:	005b      	lsls	r3, r3, #1
 80165a0:	461a      	mov	r2, r3
 80165a2:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80165a6:	4413      	add	r3, r2
 80165a8:	3b30      	subs	r3, #48	@ 0x30
 80165aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			c = *fmt++;
 80165ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80165b2:	1c5a      	adds	r2, r3, #1
 80165b4:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80165b8:	781b      	ldrb	r3, [r3, #0]
 80165ba:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		while (IsDigit(c)) {		/* Precision */
 80165be:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80165c2:	2b2f      	cmp	r3, #47	@ 0x2f
 80165c4:	d903      	bls.n	80165ce <f_printf+0xe6>
 80165c6:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80165ca:	2b39      	cmp	r3, #57	@ 0x39
 80165cc:	d9e2      	bls.n	8016594 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 80165ce:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80165d2:	2b6c      	cmp	r3, #108	@ 0x6c
 80165d4:	d003      	beq.n	80165de <f_printf+0xf6>
 80165d6:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80165da:	2b4c      	cmp	r3, #76	@ 0x4c
 80165dc:	d10d      	bne.n	80165fa <f_printf+0x112>
			f |= 4; c = *fmt++;
 80165de:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80165e2:	f043 0304 	orr.w	r3, r3, #4
 80165e6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80165ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80165ee:	1c5a      	adds	r2, r3, #1
 80165f0:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80165f4:	781b      	ldrb	r3, [r3, #0]
 80165f6:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		}
		if (!c) break;
 80165fa:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80165fe:	2b00      	cmp	r3, #0
 8016600:	f000 8181 	beq.w	8016906 <f_printf+0x41e>
		d = c;
 8016604:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8016608:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		if (IsLower(d)) d -= 0x20;
 801660c:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8016610:	2b60      	cmp	r3, #96	@ 0x60
 8016612:	d908      	bls.n	8016626 <f_printf+0x13e>
 8016614:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8016618:	2b7a      	cmp	r3, #122	@ 0x7a
 801661a:	d804      	bhi.n	8016626 <f_printf+0x13e>
 801661c:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8016620:	3b20      	subs	r3, #32
 8016622:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		switch (d) {				/* Type is... */
 8016626:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 801662a:	3b42      	subs	r3, #66	@ 0x42
 801662c:	2b16      	cmp	r3, #22
 801662e:	f200 8098 	bhi.w	8016762 <f_printf+0x27a>
 8016632:	a201      	add	r2, pc, #4	@ (adr r2, 8016638 <f_printf+0x150>)
 8016634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016638:	08016743 	.word	0x08016743
 801663c:	0801672b 	.word	0x0801672b
 8016640:	08016753 	.word	0x08016753
 8016644:	08016763 	.word	0x08016763
 8016648:	08016763 	.word	0x08016763
 801664c:	08016763 	.word	0x08016763
 8016650:	08016763 	.word	0x08016763
 8016654:	08016763 	.word	0x08016763
 8016658:	08016763 	.word	0x08016763
 801665c:	08016763 	.word	0x08016763
 8016660:	08016763 	.word	0x08016763
 8016664:	08016763 	.word	0x08016763
 8016668:	08016763 	.word	0x08016763
 801666c:	0801674b 	.word	0x0801674b
 8016670:	08016763 	.word	0x08016763
 8016674:	08016763 	.word	0x08016763
 8016678:	08016763 	.word	0x08016763
 801667c:	08016695 	.word	0x08016695
 8016680:	08016763 	.word	0x08016763
 8016684:	08016753 	.word	0x08016753
 8016688:	08016763 	.word	0x08016763
 801668c:	08016763 	.word	0x08016763
 8016690:	0801675b 	.word	0x0801675b
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8016694:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016696:	1d1a      	adds	r2, r3, #4
 8016698:	67ba      	str	r2, [r7, #120]	@ 0x78
 801669a:	681b      	ldr	r3, [r3, #0]
 801669c:	67fb      	str	r3, [r7, #124]	@ 0x7c
			for (j = 0; p[j]; j++) ;
 801669e:	2300      	movs	r3, #0
 80166a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80166a4:	e004      	b.n	80166b0 <f_printf+0x1c8>
 80166a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80166aa:	3301      	adds	r3, #1
 80166ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80166b0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80166b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80166b6:	4413      	add	r3, r2
 80166b8:	781b      	ldrb	r3, [r3, #0]
 80166ba:	2b00      	cmp	r3, #0
 80166bc:	d1f3      	bne.n	80166a6 <f_printf+0x1be>
			if (!(f & 2)) {
 80166be:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80166c2:	f003 0302 	and.w	r3, r3, #2
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d11a      	bne.n	8016700 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 80166ca:	e005      	b.n	80166d8 <f_printf+0x1f0>
 80166cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80166d0:	2120      	movs	r1, #32
 80166d2:	4618      	mov	r0, r3
 80166d4:	f7ff fe90 	bl	80163f8 <putc_bfd>
 80166d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80166dc:	1c5a      	adds	r2, r3, #1
 80166de:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80166e2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80166e6:	429a      	cmp	r2, r3
 80166e8:	d8f0      	bhi.n	80166cc <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 80166ea:	e009      	b.n	8016700 <f_printf+0x218>
 80166ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80166ee:	1c5a      	adds	r2, r3, #1
 80166f0:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80166f2:	781a      	ldrb	r2, [r3, #0]
 80166f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80166f8:	4611      	mov	r1, r2
 80166fa:	4618      	mov	r0, r3
 80166fc:	f7ff fe7c 	bl	80163f8 <putc_bfd>
 8016700:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8016702:	781b      	ldrb	r3, [r3, #0]
 8016704:	2b00      	cmp	r3, #0
 8016706:	d1f1      	bne.n	80166ec <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8016708:	e005      	b.n	8016716 <f_printf+0x22e>
 801670a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801670e:	2120      	movs	r1, #32
 8016710:	4618      	mov	r0, r3
 8016712:	f7ff fe71 	bl	80163f8 <putc_bfd>
 8016716:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801671a:	1c5a      	adds	r2, r3, #1
 801671c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8016720:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8016724:	429a      	cmp	r2, r3
 8016726:	d8f0      	bhi.n	801670a <f_printf+0x222>
			continue;
 8016728:	e0ea      	b.n	8016900 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 801672a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801672c:	1d1a      	adds	r2, r3, #4
 801672e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8016730:	681b      	ldr	r3, [r3, #0]
 8016732:	b2da      	uxtb	r2, r3
 8016734:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8016738:	4611      	mov	r1, r2
 801673a:	4618      	mov	r0, r3
 801673c:	f7ff fe5c 	bl	80163f8 <putc_bfd>
 8016740:	e0de      	b.n	8016900 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 8016742:	2302      	movs	r3, #2
 8016744:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8016748:	e014      	b.n	8016774 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 801674a:	2308      	movs	r3, #8
 801674c:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8016750:	e010      	b.n	8016774 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8016752:	230a      	movs	r3, #10
 8016754:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8016758:	e00c      	b.n	8016774 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 801675a:	2310      	movs	r3, #16
 801675c:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8016760:	e008      	b.n	8016774 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8016762:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 8016766:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801676a:	4611      	mov	r1, r2
 801676c:	4618      	mov	r0, r3
 801676e:	f7ff fe43 	bl	80163f8 <putc_bfd>
 8016772:	e0c5      	b.n	8016900 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8016774:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8016778:	f003 0304 	and.w	r3, r3, #4
 801677c:	2b00      	cmp	r3, #0
 801677e:	d004      	beq.n	801678a <f_printf+0x2a2>
 8016780:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016782:	1d1a      	adds	r2, r3, #4
 8016784:	67ba      	str	r2, [r7, #120]	@ 0x78
 8016786:	681b      	ldr	r3, [r3, #0]
 8016788:	e00c      	b.n	80167a4 <f_printf+0x2bc>
 801678a:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 801678e:	2b44      	cmp	r3, #68	@ 0x44
 8016790:	d104      	bne.n	801679c <f_printf+0x2b4>
 8016792:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016794:	1d1a      	adds	r2, r3, #4
 8016796:	67ba      	str	r2, [r7, #120]	@ 0x78
 8016798:	681b      	ldr	r3, [r3, #0]
 801679a:	e003      	b.n	80167a4 <f_printf+0x2bc>
 801679c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801679e:	1d1a      	adds	r2, r3, #4
 80167a0:	67ba      	str	r2, [r7, #120]	@ 0x78
 80167a2:	681b      	ldr	r3, [r3, #0]
 80167a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		if (d == 'D' && (v & 0x80000000)) {
 80167a8:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80167ac:	2b44      	cmp	r3, #68	@ 0x44
 80167ae:	d10e      	bne.n	80167ce <f_printf+0x2e6>
 80167b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	da0a      	bge.n	80167ce <f_printf+0x2e6>
			v = 0 - v;
 80167b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80167bc:	425b      	negs	r3, r3
 80167be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			f |= 8;
 80167c2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80167c6:	f043 0308 	orr.w	r3, r3, #8
 80167ca:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}
		i = 0;
 80167ce:	2300      	movs	r3, #0
 80167d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 80167d4:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 80167d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80167dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80167e0:	fb01 f202 	mul.w	r2, r1, r2
 80167e4:	1a9b      	subs	r3, r3, r2
 80167e6:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 80167ea:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80167ee:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80167f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80167f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 80167fa:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80167fe:	2b09      	cmp	r3, #9
 8016800:	d90b      	bls.n	801681a <f_printf+0x332>
 8016802:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8016806:	2b78      	cmp	r3, #120	@ 0x78
 8016808:	d101      	bne.n	801680e <f_printf+0x326>
 801680a:	2227      	movs	r2, #39	@ 0x27
 801680c:	e000      	b.n	8016810 <f_printf+0x328>
 801680e:	2207      	movs	r2, #7
 8016810:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8016814:	4413      	add	r3, r2
 8016816:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
			str[i++] = d + '0';
 801681a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801681e:	1c5a      	adds	r2, r3, #1
 8016820:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8016824:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8016828:	3230      	adds	r2, #48	@ 0x30
 801682a:	b2d2      	uxtb	r2, r2
 801682c:	3398      	adds	r3, #152	@ 0x98
 801682e:	443b      	add	r3, r7
 8016830:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8016834:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8016838:	2b00      	cmp	r3, #0
 801683a:	d003      	beq.n	8016844 <f_printf+0x35c>
 801683c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8016840:	2b1f      	cmp	r3, #31
 8016842:	d9c7      	bls.n	80167d4 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8016844:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8016848:	f003 0308 	and.w	r3, r3, #8
 801684c:	2b00      	cmp	r3, #0
 801684e:	d009      	beq.n	8016864 <f_printf+0x37c>
 8016850:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8016854:	1c5a      	adds	r2, r3, #1
 8016856:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 801685a:	3398      	adds	r3, #152	@ 0x98
 801685c:	443b      	add	r3, r7
 801685e:	222d      	movs	r2, #45	@ 0x2d
 8016860:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8016864:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8016868:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801686c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8016870:	f003 0301 	and.w	r3, r3, #1
 8016874:	2b00      	cmp	r3, #0
 8016876:	d001      	beq.n	801687c <f_printf+0x394>
 8016878:	2330      	movs	r3, #48	@ 0x30
 801687a:	e000      	b.n	801687e <f_printf+0x396>
 801687c:	2320      	movs	r3, #32
 801687e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8016882:	e007      	b.n	8016894 <f_printf+0x3ac>
 8016884:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8016888:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801688c:	4611      	mov	r1, r2
 801688e:	4618      	mov	r0, r3
 8016890:	f7ff fdb2 	bl	80163f8 <putc_bfd>
 8016894:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8016898:	f003 0302 	and.w	r3, r3, #2
 801689c:	2b00      	cmp	r3, #0
 801689e:	d108      	bne.n	80168b2 <f_printf+0x3ca>
 80168a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80168a4:	1c5a      	adds	r2, r3, #1
 80168a6:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80168aa:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80168ae:	429a      	cmp	r2, r3
 80168b0:	d8e8      	bhi.n	8016884 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 80168b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80168b6:	3b01      	subs	r3, #1
 80168b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80168bc:	f107 020c 	add.w	r2, r7, #12
 80168c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80168c4:	4413      	add	r3, r2
 80168c6:	781a      	ldrb	r2, [r3, #0]
 80168c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80168cc:	4611      	mov	r1, r2
 80168ce:	4618      	mov	r0, r3
 80168d0:	f7ff fd92 	bl	80163f8 <putc_bfd>
		} while (i);
 80168d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d1ea      	bne.n	80168b2 <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 80168dc:	e007      	b.n	80168ee <f_printf+0x406>
 80168de:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 80168e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80168e6:	4611      	mov	r1, r2
 80168e8:	4618      	mov	r0, r3
 80168ea:	f7ff fd85 	bl	80163f8 <putc_bfd>
 80168ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80168f2:	1c5a      	adds	r2, r3, #1
 80168f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80168f8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80168fc:	429a      	cmp	r2, r3
 80168fe:	d8ee      	bhi.n	80168de <f_printf+0x3f6>
		c = *fmt++;
 8016900:	e600      	b.n	8016504 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 8016902:	bf00      	nop
 8016904:	e000      	b.n	8016908 <f_printf+0x420>
		if (!c) break;
 8016906:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8016908:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801690c:	4618      	mov	r0, r3
 801690e:	f7ff fdb0 	bl	8016472 <putc_flush>
 8016912:	4603      	mov	r3, r0
}
 8016914:	4618      	mov	r0, r3
 8016916:	379c      	adds	r7, #156	@ 0x9c
 8016918:	46bd      	mov	sp, r7
 801691a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801691e:	b003      	add	sp, #12
 8016920:	4770      	bx	lr
 8016922:	bf00      	nop

08016924 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8016924:	b480      	push	{r7}
 8016926:	b087      	sub	sp, #28
 8016928:	af00      	add	r7, sp, #0
 801692a:	60f8      	str	r0, [r7, #12]
 801692c:	60b9      	str	r1, [r7, #8]
 801692e:	4613      	mov	r3, r2
 8016930:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8016932:	2301      	movs	r3, #1
 8016934:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8016936:	2300      	movs	r3, #0
 8016938:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801693a:	4b1f      	ldr	r3, [pc, #124]	@ (80169b8 <FATFS_LinkDriverEx+0x94>)
 801693c:	7a5b      	ldrb	r3, [r3, #9]
 801693e:	b2db      	uxtb	r3, r3
 8016940:	2b00      	cmp	r3, #0
 8016942:	d131      	bne.n	80169a8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8016944:	4b1c      	ldr	r3, [pc, #112]	@ (80169b8 <FATFS_LinkDriverEx+0x94>)
 8016946:	7a5b      	ldrb	r3, [r3, #9]
 8016948:	b2db      	uxtb	r3, r3
 801694a:	461a      	mov	r2, r3
 801694c:	4b1a      	ldr	r3, [pc, #104]	@ (80169b8 <FATFS_LinkDriverEx+0x94>)
 801694e:	2100      	movs	r1, #0
 8016950:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8016952:	4b19      	ldr	r3, [pc, #100]	@ (80169b8 <FATFS_LinkDriverEx+0x94>)
 8016954:	7a5b      	ldrb	r3, [r3, #9]
 8016956:	b2db      	uxtb	r3, r3
 8016958:	4a17      	ldr	r2, [pc, #92]	@ (80169b8 <FATFS_LinkDriverEx+0x94>)
 801695a:	009b      	lsls	r3, r3, #2
 801695c:	4413      	add	r3, r2
 801695e:	68fa      	ldr	r2, [r7, #12]
 8016960:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8016962:	4b15      	ldr	r3, [pc, #84]	@ (80169b8 <FATFS_LinkDriverEx+0x94>)
 8016964:	7a5b      	ldrb	r3, [r3, #9]
 8016966:	b2db      	uxtb	r3, r3
 8016968:	461a      	mov	r2, r3
 801696a:	4b13      	ldr	r3, [pc, #76]	@ (80169b8 <FATFS_LinkDriverEx+0x94>)
 801696c:	4413      	add	r3, r2
 801696e:	79fa      	ldrb	r2, [r7, #7]
 8016970:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8016972:	4b11      	ldr	r3, [pc, #68]	@ (80169b8 <FATFS_LinkDriverEx+0x94>)
 8016974:	7a5b      	ldrb	r3, [r3, #9]
 8016976:	b2db      	uxtb	r3, r3
 8016978:	1c5a      	adds	r2, r3, #1
 801697a:	b2d1      	uxtb	r1, r2
 801697c:	4a0e      	ldr	r2, [pc, #56]	@ (80169b8 <FATFS_LinkDriverEx+0x94>)
 801697e:	7251      	strb	r1, [r2, #9]
 8016980:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8016982:	7dbb      	ldrb	r3, [r7, #22]
 8016984:	3330      	adds	r3, #48	@ 0x30
 8016986:	b2da      	uxtb	r2, r3
 8016988:	68bb      	ldr	r3, [r7, #8]
 801698a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801698c:	68bb      	ldr	r3, [r7, #8]
 801698e:	3301      	adds	r3, #1
 8016990:	223a      	movs	r2, #58	@ 0x3a
 8016992:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8016994:	68bb      	ldr	r3, [r7, #8]
 8016996:	3302      	adds	r3, #2
 8016998:	222f      	movs	r2, #47	@ 0x2f
 801699a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801699c:	68bb      	ldr	r3, [r7, #8]
 801699e:	3303      	adds	r3, #3
 80169a0:	2200      	movs	r2, #0
 80169a2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80169a4:	2300      	movs	r3, #0
 80169a6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80169a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80169aa:	4618      	mov	r0, r3
 80169ac:	371c      	adds	r7, #28
 80169ae:	46bd      	mov	sp, r7
 80169b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169b4:	4770      	bx	lr
 80169b6:	bf00      	nop
 80169b8:	240057d4 	.word	0x240057d4

080169bc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80169bc:	b580      	push	{r7, lr}
 80169be:	b082      	sub	sp, #8
 80169c0:	af00      	add	r7, sp, #0
 80169c2:	6078      	str	r0, [r7, #4]
 80169c4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80169c6:	2200      	movs	r2, #0
 80169c8:	6839      	ldr	r1, [r7, #0]
 80169ca:	6878      	ldr	r0, [r7, #4]
 80169cc:	f7ff ffaa 	bl	8016924 <FATFS_LinkDriverEx>
 80169d0:	4603      	mov	r3, r0
}
 80169d2:	4618      	mov	r0, r3
 80169d4:	3708      	adds	r7, #8
 80169d6:	46bd      	mov	sp, r7
 80169d8:	bd80      	pop	{r7, pc}
	...

080169dc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80169dc:	b480      	push	{r7}
 80169de:	b085      	sub	sp, #20
 80169e0:	af00      	add	r7, sp, #0
 80169e2:	4603      	mov	r3, r0
 80169e4:	6039      	str	r1, [r7, #0]
 80169e6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80169e8:	88fb      	ldrh	r3, [r7, #6]
 80169ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80169ec:	d802      	bhi.n	80169f4 <ff_convert+0x18>
		c = chr;
 80169ee:	88fb      	ldrh	r3, [r7, #6]
 80169f0:	81fb      	strh	r3, [r7, #14]
 80169f2:	e025      	b.n	8016a40 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80169f4:	683b      	ldr	r3, [r7, #0]
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d00b      	beq.n	8016a12 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80169fa:	88fb      	ldrh	r3, [r7, #6]
 80169fc:	2bff      	cmp	r3, #255	@ 0xff
 80169fe:	d805      	bhi.n	8016a0c <ff_convert+0x30>
 8016a00:	88fb      	ldrh	r3, [r7, #6]
 8016a02:	3b80      	subs	r3, #128	@ 0x80
 8016a04:	4a12      	ldr	r2, [pc, #72]	@ (8016a50 <ff_convert+0x74>)
 8016a06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016a0a:	e000      	b.n	8016a0e <ff_convert+0x32>
 8016a0c:	2300      	movs	r3, #0
 8016a0e:	81fb      	strh	r3, [r7, #14]
 8016a10:	e016      	b.n	8016a40 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8016a12:	2300      	movs	r3, #0
 8016a14:	81fb      	strh	r3, [r7, #14]
 8016a16:	e009      	b.n	8016a2c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8016a18:	89fb      	ldrh	r3, [r7, #14]
 8016a1a:	4a0d      	ldr	r2, [pc, #52]	@ (8016a50 <ff_convert+0x74>)
 8016a1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016a20:	88fa      	ldrh	r2, [r7, #6]
 8016a22:	429a      	cmp	r2, r3
 8016a24:	d006      	beq.n	8016a34 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8016a26:	89fb      	ldrh	r3, [r7, #14]
 8016a28:	3301      	adds	r3, #1
 8016a2a:	81fb      	strh	r3, [r7, #14]
 8016a2c:	89fb      	ldrh	r3, [r7, #14]
 8016a2e:	2b7f      	cmp	r3, #127	@ 0x7f
 8016a30:	d9f2      	bls.n	8016a18 <ff_convert+0x3c>
 8016a32:	e000      	b.n	8016a36 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8016a34:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8016a36:	89fb      	ldrh	r3, [r7, #14]
 8016a38:	3380      	adds	r3, #128	@ 0x80
 8016a3a:	b29b      	uxth	r3, r3
 8016a3c:	b2db      	uxtb	r3, r3
 8016a3e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8016a40:	89fb      	ldrh	r3, [r7, #14]
}
 8016a42:	4618      	mov	r0, r3
 8016a44:	3714      	adds	r7, #20
 8016a46:	46bd      	mov	sp, r7
 8016a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a4c:	4770      	bx	lr
 8016a4e:	bf00      	nop
 8016a50:	08019c10 	.word	0x08019c10

08016a54 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8016a54:	b480      	push	{r7}
 8016a56:	b087      	sub	sp, #28
 8016a58:	af00      	add	r7, sp, #0
 8016a5a:	4603      	mov	r3, r0
 8016a5c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8016a5e:	88fb      	ldrh	r3, [r7, #6]
 8016a60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016a64:	d201      	bcs.n	8016a6a <ff_wtoupper+0x16>
 8016a66:	4b3e      	ldr	r3, [pc, #248]	@ (8016b60 <ff_wtoupper+0x10c>)
 8016a68:	e000      	b.n	8016a6c <ff_wtoupper+0x18>
 8016a6a:	4b3e      	ldr	r3, [pc, #248]	@ (8016b64 <ff_wtoupper+0x110>)
 8016a6c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8016a6e:	697b      	ldr	r3, [r7, #20]
 8016a70:	1c9a      	adds	r2, r3, #2
 8016a72:	617a      	str	r2, [r7, #20]
 8016a74:	881b      	ldrh	r3, [r3, #0]
 8016a76:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8016a78:	8a7b      	ldrh	r3, [r7, #18]
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	d068      	beq.n	8016b50 <ff_wtoupper+0xfc>
 8016a7e:	88fa      	ldrh	r2, [r7, #6]
 8016a80:	8a7b      	ldrh	r3, [r7, #18]
 8016a82:	429a      	cmp	r2, r3
 8016a84:	d364      	bcc.n	8016b50 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8016a86:	697b      	ldr	r3, [r7, #20]
 8016a88:	1c9a      	adds	r2, r3, #2
 8016a8a:	617a      	str	r2, [r7, #20]
 8016a8c:	881b      	ldrh	r3, [r3, #0]
 8016a8e:	823b      	strh	r3, [r7, #16]
 8016a90:	8a3b      	ldrh	r3, [r7, #16]
 8016a92:	0a1b      	lsrs	r3, r3, #8
 8016a94:	81fb      	strh	r3, [r7, #14]
 8016a96:	8a3b      	ldrh	r3, [r7, #16]
 8016a98:	b2db      	uxtb	r3, r3
 8016a9a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8016a9c:	88fa      	ldrh	r2, [r7, #6]
 8016a9e:	8a79      	ldrh	r1, [r7, #18]
 8016aa0:	8a3b      	ldrh	r3, [r7, #16]
 8016aa2:	440b      	add	r3, r1
 8016aa4:	429a      	cmp	r2, r3
 8016aa6:	da49      	bge.n	8016b3c <ff_wtoupper+0xe8>
			switch (cmd) {
 8016aa8:	89fb      	ldrh	r3, [r7, #14]
 8016aaa:	2b08      	cmp	r3, #8
 8016aac:	d84f      	bhi.n	8016b4e <ff_wtoupper+0xfa>
 8016aae:	a201      	add	r2, pc, #4	@ (adr r2, 8016ab4 <ff_wtoupper+0x60>)
 8016ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ab4:	08016ad9 	.word	0x08016ad9
 8016ab8:	08016aeb 	.word	0x08016aeb
 8016abc:	08016b01 	.word	0x08016b01
 8016ac0:	08016b09 	.word	0x08016b09
 8016ac4:	08016b11 	.word	0x08016b11
 8016ac8:	08016b19 	.word	0x08016b19
 8016acc:	08016b21 	.word	0x08016b21
 8016ad0:	08016b29 	.word	0x08016b29
 8016ad4:	08016b31 	.word	0x08016b31
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8016ad8:	88fa      	ldrh	r2, [r7, #6]
 8016ada:	8a7b      	ldrh	r3, [r7, #18]
 8016adc:	1ad3      	subs	r3, r2, r3
 8016ade:	005b      	lsls	r3, r3, #1
 8016ae0:	697a      	ldr	r2, [r7, #20]
 8016ae2:	4413      	add	r3, r2
 8016ae4:	881b      	ldrh	r3, [r3, #0]
 8016ae6:	80fb      	strh	r3, [r7, #6]
 8016ae8:	e027      	b.n	8016b3a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8016aea:	88fa      	ldrh	r2, [r7, #6]
 8016aec:	8a7b      	ldrh	r3, [r7, #18]
 8016aee:	1ad3      	subs	r3, r2, r3
 8016af0:	b29b      	uxth	r3, r3
 8016af2:	f003 0301 	and.w	r3, r3, #1
 8016af6:	b29b      	uxth	r3, r3
 8016af8:	88fa      	ldrh	r2, [r7, #6]
 8016afa:	1ad3      	subs	r3, r2, r3
 8016afc:	80fb      	strh	r3, [r7, #6]
 8016afe:	e01c      	b.n	8016b3a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8016b00:	88fb      	ldrh	r3, [r7, #6]
 8016b02:	3b10      	subs	r3, #16
 8016b04:	80fb      	strh	r3, [r7, #6]
 8016b06:	e018      	b.n	8016b3a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8016b08:	88fb      	ldrh	r3, [r7, #6]
 8016b0a:	3b20      	subs	r3, #32
 8016b0c:	80fb      	strh	r3, [r7, #6]
 8016b0e:	e014      	b.n	8016b3a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8016b10:	88fb      	ldrh	r3, [r7, #6]
 8016b12:	3b30      	subs	r3, #48	@ 0x30
 8016b14:	80fb      	strh	r3, [r7, #6]
 8016b16:	e010      	b.n	8016b3a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8016b18:	88fb      	ldrh	r3, [r7, #6]
 8016b1a:	3b1a      	subs	r3, #26
 8016b1c:	80fb      	strh	r3, [r7, #6]
 8016b1e:	e00c      	b.n	8016b3a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8016b20:	88fb      	ldrh	r3, [r7, #6]
 8016b22:	3308      	adds	r3, #8
 8016b24:	80fb      	strh	r3, [r7, #6]
 8016b26:	e008      	b.n	8016b3a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8016b28:	88fb      	ldrh	r3, [r7, #6]
 8016b2a:	3b50      	subs	r3, #80	@ 0x50
 8016b2c:	80fb      	strh	r3, [r7, #6]
 8016b2e:	e004      	b.n	8016b3a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8016b30:	88fb      	ldrh	r3, [r7, #6]
 8016b32:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8016b36:	80fb      	strh	r3, [r7, #6]
 8016b38:	bf00      	nop
			}
			break;
 8016b3a:	e008      	b.n	8016b4e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8016b3c:	89fb      	ldrh	r3, [r7, #14]
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d195      	bne.n	8016a6e <ff_wtoupper+0x1a>
 8016b42:	8a3b      	ldrh	r3, [r7, #16]
 8016b44:	005b      	lsls	r3, r3, #1
 8016b46:	697a      	ldr	r2, [r7, #20]
 8016b48:	4413      	add	r3, r2
 8016b4a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8016b4c:	e78f      	b.n	8016a6e <ff_wtoupper+0x1a>
			break;
 8016b4e:	bf00      	nop
	}

	return chr;
 8016b50:	88fb      	ldrh	r3, [r7, #6]
}
 8016b52:	4618      	mov	r0, r3
 8016b54:	371c      	adds	r7, #28
 8016b56:	46bd      	mov	sp, r7
 8016b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b5c:	4770      	bx	lr
 8016b5e:	bf00      	nop
 8016b60:	08019d10 	.word	0x08019d10
 8016b64:	08019f04 	.word	0x08019f04

08016b68 <atof>:
 8016b68:	2100      	movs	r1, #0
 8016b6a:	f000 bdb7 	b.w	80176dc <strtod>

08016b6e <atoi>:
 8016b6e:	220a      	movs	r2, #10
 8016b70:	2100      	movs	r1, #0
 8016b72:	f000 be39 	b.w	80177e8 <strtol>

08016b76 <sulp>:
 8016b76:	b570      	push	{r4, r5, r6, lr}
 8016b78:	4604      	mov	r4, r0
 8016b7a:	460d      	mov	r5, r1
 8016b7c:	4616      	mov	r6, r2
 8016b7e:	ec45 4b10 	vmov	d0, r4, r5
 8016b82:	f001 ffa9 	bl	8018ad8 <__ulp>
 8016b86:	b17e      	cbz	r6, 8016ba8 <sulp+0x32>
 8016b88:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016b8c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	dd09      	ble.n	8016ba8 <sulp+0x32>
 8016b94:	051b      	lsls	r3, r3, #20
 8016b96:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8016b9a:	2000      	movs	r0, #0
 8016b9c:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8016ba0:	ec41 0b17 	vmov	d7, r0, r1
 8016ba4:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016ba8:	bd70      	pop	{r4, r5, r6, pc}
 8016baa:	0000      	movs	r0, r0
 8016bac:	0000      	movs	r0, r0
	...

08016bb0 <_strtod_l>:
 8016bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bb4:	ed2d 8b0a 	vpush	{d8-d12}
 8016bb8:	b097      	sub	sp, #92	@ 0x5c
 8016bba:	4688      	mov	r8, r1
 8016bbc:	920e      	str	r2, [sp, #56]	@ 0x38
 8016bbe:	2200      	movs	r2, #0
 8016bc0:	9212      	str	r2, [sp, #72]	@ 0x48
 8016bc2:	9005      	str	r0, [sp, #20]
 8016bc4:	f04f 0a00 	mov.w	sl, #0
 8016bc8:	f04f 0b00 	mov.w	fp, #0
 8016bcc:	460a      	mov	r2, r1
 8016bce:	9211      	str	r2, [sp, #68]	@ 0x44
 8016bd0:	7811      	ldrb	r1, [r2, #0]
 8016bd2:	292b      	cmp	r1, #43	@ 0x2b
 8016bd4:	d04c      	beq.n	8016c70 <_strtod_l+0xc0>
 8016bd6:	d839      	bhi.n	8016c4c <_strtod_l+0x9c>
 8016bd8:	290d      	cmp	r1, #13
 8016bda:	d833      	bhi.n	8016c44 <_strtod_l+0x94>
 8016bdc:	2908      	cmp	r1, #8
 8016bde:	d833      	bhi.n	8016c48 <_strtod_l+0x98>
 8016be0:	2900      	cmp	r1, #0
 8016be2:	d03c      	beq.n	8016c5e <_strtod_l+0xae>
 8016be4:	2200      	movs	r2, #0
 8016be6:	9208      	str	r2, [sp, #32]
 8016be8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8016bea:	782a      	ldrb	r2, [r5, #0]
 8016bec:	2a30      	cmp	r2, #48	@ 0x30
 8016bee:	f040 80b5 	bne.w	8016d5c <_strtod_l+0x1ac>
 8016bf2:	786a      	ldrb	r2, [r5, #1]
 8016bf4:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016bf8:	2a58      	cmp	r2, #88	@ 0x58
 8016bfa:	d170      	bne.n	8016cde <_strtod_l+0x12e>
 8016bfc:	9302      	str	r3, [sp, #8]
 8016bfe:	9b08      	ldr	r3, [sp, #32]
 8016c00:	9301      	str	r3, [sp, #4]
 8016c02:	ab12      	add	r3, sp, #72	@ 0x48
 8016c04:	9300      	str	r3, [sp, #0]
 8016c06:	4a8b      	ldr	r2, [pc, #556]	@ (8016e34 <_strtod_l+0x284>)
 8016c08:	9805      	ldr	r0, [sp, #20]
 8016c0a:	ab13      	add	r3, sp, #76	@ 0x4c
 8016c0c:	a911      	add	r1, sp, #68	@ 0x44
 8016c0e:	f001 f85d 	bl	8017ccc <__gethex>
 8016c12:	f010 060f 	ands.w	r6, r0, #15
 8016c16:	4604      	mov	r4, r0
 8016c18:	d005      	beq.n	8016c26 <_strtod_l+0x76>
 8016c1a:	2e06      	cmp	r6, #6
 8016c1c:	d12a      	bne.n	8016c74 <_strtod_l+0xc4>
 8016c1e:	3501      	adds	r5, #1
 8016c20:	2300      	movs	r3, #0
 8016c22:	9511      	str	r5, [sp, #68]	@ 0x44
 8016c24:	9308      	str	r3, [sp, #32]
 8016c26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	f040 852f 	bne.w	801768c <_strtod_l+0xadc>
 8016c2e:	9b08      	ldr	r3, [sp, #32]
 8016c30:	ec4b ab10 	vmov	d0, sl, fp
 8016c34:	b1cb      	cbz	r3, 8016c6a <_strtod_l+0xba>
 8016c36:	eeb1 0b40 	vneg.f64	d0, d0
 8016c3a:	b017      	add	sp, #92	@ 0x5c
 8016c3c:	ecbd 8b0a 	vpop	{d8-d12}
 8016c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c44:	2920      	cmp	r1, #32
 8016c46:	d1cd      	bne.n	8016be4 <_strtod_l+0x34>
 8016c48:	3201      	adds	r2, #1
 8016c4a:	e7c0      	b.n	8016bce <_strtod_l+0x1e>
 8016c4c:	292d      	cmp	r1, #45	@ 0x2d
 8016c4e:	d1c9      	bne.n	8016be4 <_strtod_l+0x34>
 8016c50:	2101      	movs	r1, #1
 8016c52:	9108      	str	r1, [sp, #32]
 8016c54:	1c51      	adds	r1, r2, #1
 8016c56:	9111      	str	r1, [sp, #68]	@ 0x44
 8016c58:	7852      	ldrb	r2, [r2, #1]
 8016c5a:	2a00      	cmp	r2, #0
 8016c5c:	d1c4      	bne.n	8016be8 <_strtod_l+0x38>
 8016c5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016c60:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8016c64:	2b00      	cmp	r3, #0
 8016c66:	f040 850f 	bne.w	8017688 <_strtod_l+0xad8>
 8016c6a:	ec4b ab10 	vmov	d0, sl, fp
 8016c6e:	e7e4      	b.n	8016c3a <_strtod_l+0x8a>
 8016c70:	2100      	movs	r1, #0
 8016c72:	e7ee      	b.n	8016c52 <_strtod_l+0xa2>
 8016c74:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016c76:	b13a      	cbz	r2, 8016c88 <_strtod_l+0xd8>
 8016c78:	2135      	movs	r1, #53	@ 0x35
 8016c7a:	a814      	add	r0, sp, #80	@ 0x50
 8016c7c:	f002 f823 	bl	8018cc6 <__copybits>
 8016c80:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016c82:	9805      	ldr	r0, [sp, #20]
 8016c84:	f001 fbf4 	bl	8018470 <_Bfree>
 8016c88:	1e73      	subs	r3, r6, #1
 8016c8a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8016c8c:	2b04      	cmp	r3, #4
 8016c8e:	d806      	bhi.n	8016c9e <_strtod_l+0xee>
 8016c90:	e8df f003 	tbb	[pc, r3]
 8016c94:	201d0314 	.word	0x201d0314
 8016c98:	14          	.byte	0x14
 8016c99:	00          	.byte	0x00
 8016c9a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8016c9e:	05e3      	lsls	r3, r4, #23
 8016ca0:	bf48      	it	mi
 8016ca2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8016ca6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016caa:	0d1b      	lsrs	r3, r3, #20
 8016cac:	051b      	lsls	r3, r3, #20
 8016cae:	2b00      	cmp	r3, #0
 8016cb0:	d1b9      	bne.n	8016c26 <_strtod_l+0x76>
 8016cb2:	f000 ff15 	bl	8017ae0 <__errno>
 8016cb6:	2322      	movs	r3, #34	@ 0x22
 8016cb8:	6003      	str	r3, [r0, #0]
 8016cba:	e7b4      	b.n	8016c26 <_strtod_l+0x76>
 8016cbc:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8016cc0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8016cc4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8016cc8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016ccc:	e7e7      	b.n	8016c9e <_strtod_l+0xee>
 8016cce:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8016e3c <_strtod_l+0x28c>
 8016cd2:	e7e4      	b.n	8016c9e <_strtod_l+0xee>
 8016cd4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8016cd8:	f04f 3aff 	mov.w	sl, #4294967295
 8016cdc:	e7df      	b.n	8016c9e <_strtod_l+0xee>
 8016cde:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016ce0:	1c5a      	adds	r2, r3, #1
 8016ce2:	9211      	str	r2, [sp, #68]	@ 0x44
 8016ce4:	785b      	ldrb	r3, [r3, #1]
 8016ce6:	2b30      	cmp	r3, #48	@ 0x30
 8016ce8:	d0f9      	beq.n	8016cde <_strtod_l+0x12e>
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d09b      	beq.n	8016c26 <_strtod_l+0x76>
 8016cee:	2301      	movs	r3, #1
 8016cf0:	2600      	movs	r6, #0
 8016cf2:	9307      	str	r3, [sp, #28]
 8016cf4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016cf6:	930a      	str	r3, [sp, #40]	@ 0x28
 8016cf8:	46b1      	mov	r9, r6
 8016cfa:	4635      	mov	r5, r6
 8016cfc:	220a      	movs	r2, #10
 8016cfe:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8016d00:	7804      	ldrb	r4, [r0, #0]
 8016d02:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8016d06:	b2d9      	uxtb	r1, r3
 8016d08:	2909      	cmp	r1, #9
 8016d0a:	d929      	bls.n	8016d60 <_strtod_l+0x1b0>
 8016d0c:	494a      	ldr	r1, [pc, #296]	@ (8016e38 <_strtod_l+0x288>)
 8016d0e:	2201      	movs	r2, #1
 8016d10:	f000 fe8e 	bl	8017a30 <strncmp>
 8016d14:	b378      	cbz	r0, 8016d76 <_strtod_l+0x1c6>
 8016d16:	2000      	movs	r0, #0
 8016d18:	4622      	mov	r2, r4
 8016d1a:	462b      	mov	r3, r5
 8016d1c:	4607      	mov	r7, r0
 8016d1e:	9006      	str	r0, [sp, #24]
 8016d20:	2a65      	cmp	r2, #101	@ 0x65
 8016d22:	d001      	beq.n	8016d28 <_strtod_l+0x178>
 8016d24:	2a45      	cmp	r2, #69	@ 0x45
 8016d26:	d117      	bne.n	8016d58 <_strtod_l+0x1a8>
 8016d28:	b91b      	cbnz	r3, 8016d32 <_strtod_l+0x182>
 8016d2a:	9b07      	ldr	r3, [sp, #28]
 8016d2c:	4303      	orrs	r3, r0
 8016d2e:	d096      	beq.n	8016c5e <_strtod_l+0xae>
 8016d30:	2300      	movs	r3, #0
 8016d32:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8016d36:	f108 0201 	add.w	r2, r8, #1
 8016d3a:	9211      	str	r2, [sp, #68]	@ 0x44
 8016d3c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8016d40:	2a2b      	cmp	r2, #43	@ 0x2b
 8016d42:	d06b      	beq.n	8016e1c <_strtod_l+0x26c>
 8016d44:	2a2d      	cmp	r2, #45	@ 0x2d
 8016d46:	d071      	beq.n	8016e2c <_strtod_l+0x27c>
 8016d48:	f04f 0e00 	mov.w	lr, #0
 8016d4c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8016d50:	2c09      	cmp	r4, #9
 8016d52:	d979      	bls.n	8016e48 <_strtod_l+0x298>
 8016d54:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8016d58:	2400      	movs	r4, #0
 8016d5a:	e094      	b.n	8016e86 <_strtod_l+0x2d6>
 8016d5c:	2300      	movs	r3, #0
 8016d5e:	e7c7      	b.n	8016cf0 <_strtod_l+0x140>
 8016d60:	2d08      	cmp	r5, #8
 8016d62:	f100 0001 	add.w	r0, r0, #1
 8016d66:	bfd4      	ite	le
 8016d68:	fb02 3909 	mlale	r9, r2, r9, r3
 8016d6c:	fb02 3606 	mlagt	r6, r2, r6, r3
 8016d70:	3501      	adds	r5, #1
 8016d72:	9011      	str	r0, [sp, #68]	@ 0x44
 8016d74:	e7c3      	b.n	8016cfe <_strtod_l+0x14e>
 8016d76:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016d78:	1c5a      	adds	r2, r3, #1
 8016d7a:	9211      	str	r2, [sp, #68]	@ 0x44
 8016d7c:	785a      	ldrb	r2, [r3, #1]
 8016d7e:	b375      	cbz	r5, 8016dde <_strtod_l+0x22e>
 8016d80:	4607      	mov	r7, r0
 8016d82:	462b      	mov	r3, r5
 8016d84:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8016d88:	2909      	cmp	r1, #9
 8016d8a:	d913      	bls.n	8016db4 <_strtod_l+0x204>
 8016d8c:	2101      	movs	r1, #1
 8016d8e:	9106      	str	r1, [sp, #24]
 8016d90:	e7c6      	b.n	8016d20 <_strtod_l+0x170>
 8016d92:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016d94:	1c5a      	adds	r2, r3, #1
 8016d96:	9211      	str	r2, [sp, #68]	@ 0x44
 8016d98:	785a      	ldrb	r2, [r3, #1]
 8016d9a:	3001      	adds	r0, #1
 8016d9c:	2a30      	cmp	r2, #48	@ 0x30
 8016d9e:	d0f8      	beq.n	8016d92 <_strtod_l+0x1e2>
 8016da0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8016da4:	2b08      	cmp	r3, #8
 8016da6:	f200 8476 	bhi.w	8017696 <_strtod_l+0xae6>
 8016daa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016dac:	930a      	str	r3, [sp, #40]	@ 0x28
 8016dae:	4607      	mov	r7, r0
 8016db0:	2000      	movs	r0, #0
 8016db2:	4603      	mov	r3, r0
 8016db4:	3a30      	subs	r2, #48	@ 0x30
 8016db6:	f100 0101 	add.w	r1, r0, #1
 8016dba:	d023      	beq.n	8016e04 <_strtod_l+0x254>
 8016dbc:	440f      	add	r7, r1
 8016dbe:	eb00 0c03 	add.w	ip, r0, r3
 8016dc2:	4619      	mov	r1, r3
 8016dc4:	240a      	movs	r4, #10
 8016dc6:	4561      	cmp	r1, ip
 8016dc8:	d10b      	bne.n	8016de2 <_strtod_l+0x232>
 8016dca:	1c5c      	adds	r4, r3, #1
 8016dcc:	4403      	add	r3, r0
 8016dce:	2b08      	cmp	r3, #8
 8016dd0:	4404      	add	r4, r0
 8016dd2:	dc11      	bgt.n	8016df8 <_strtod_l+0x248>
 8016dd4:	230a      	movs	r3, #10
 8016dd6:	fb03 2909 	mla	r9, r3, r9, r2
 8016dda:	2100      	movs	r1, #0
 8016ddc:	e013      	b.n	8016e06 <_strtod_l+0x256>
 8016dde:	4628      	mov	r0, r5
 8016de0:	e7dc      	b.n	8016d9c <_strtod_l+0x1ec>
 8016de2:	2908      	cmp	r1, #8
 8016de4:	f101 0101 	add.w	r1, r1, #1
 8016de8:	dc02      	bgt.n	8016df0 <_strtod_l+0x240>
 8016dea:	fb04 f909 	mul.w	r9, r4, r9
 8016dee:	e7ea      	b.n	8016dc6 <_strtod_l+0x216>
 8016df0:	2910      	cmp	r1, #16
 8016df2:	bfd8      	it	le
 8016df4:	4366      	mulle	r6, r4
 8016df6:	e7e6      	b.n	8016dc6 <_strtod_l+0x216>
 8016df8:	2b0f      	cmp	r3, #15
 8016dfa:	dcee      	bgt.n	8016dda <_strtod_l+0x22a>
 8016dfc:	230a      	movs	r3, #10
 8016dfe:	fb03 2606 	mla	r6, r3, r6, r2
 8016e02:	e7ea      	b.n	8016dda <_strtod_l+0x22a>
 8016e04:	461c      	mov	r4, r3
 8016e06:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016e08:	1c5a      	adds	r2, r3, #1
 8016e0a:	9211      	str	r2, [sp, #68]	@ 0x44
 8016e0c:	785a      	ldrb	r2, [r3, #1]
 8016e0e:	4608      	mov	r0, r1
 8016e10:	4623      	mov	r3, r4
 8016e12:	e7b7      	b.n	8016d84 <_strtod_l+0x1d4>
 8016e14:	2301      	movs	r3, #1
 8016e16:	2700      	movs	r7, #0
 8016e18:	9306      	str	r3, [sp, #24]
 8016e1a:	e786      	b.n	8016d2a <_strtod_l+0x17a>
 8016e1c:	f04f 0e00 	mov.w	lr, #0
 8016e20:	f108 0202 	add.w	r2, r8, #2
 8016e24:	9211      	str	r2, [sp, #68]	@ 0x44
 8016e26:	f898 2002 	ldrb.w	r2, [r8, #2]
 8016e2a:	e78f      	b.n	8016d4c <_strtod_l+0x19c>
 8016e2c:	f04f 0e01 	mov.w	lr, #1
 8016e30:	e7f6      	b.n	8016e20 <_strtod_l+0x270>
 8016e32:	bf00      	nop
 8016e34:	08019fe4 	.word	0x08019fe4
 8016e38:	08019fc0 	.word	0x08019fc0
 8016e3c:	7ff00000 	.word	0x7ff00000
 8016e40:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8016e42:	1c54      	adds	r4, r2, #1
 8016e44:	9411      	str	r4, [sp, #68]	@ 0x44
 8016e46:	7852      	ldrb	r2, [r2, #1]
 8016e48:	2a30      	cmp	r2, #48	@ 0x30
 8016e4a:	d0f9      	beq.n	8016e40 <_strtod_l+0x290>
 8016e4c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8016e50:	2c08      	cmp	r4, #8
 8016e52:	d881      	bhi.n	8016d58 <_strtod_l+0x1a8>
 8016e54:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8016e58:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8016e5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8016e5c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8016e5e:	1c51      	adds	r1, r2, #1
 8016e60:	9111      	str	r1, [sp, #68]	@ 0x44
 8016e62:	7852      	ldrb	r2, [r2, #1]
 8016e64:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8016e68:	2c09      	cmp	r4, #9
 8016e6a:	d938      	bls.n	8016ede <_strtod_l+0x32e>
 8016e6c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8016e6e:	1b0c      	subs	r4, r1, r4
 8016e70:	2c08      	cmp	r4, #8
 8016e72:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8016e76:	dc02      	bgt.n	8016e7e <_strtod_l+0x2ce>
 8016e78:	4564      	cmp	r4, ip
 8016e7a:	bfa8      	it	ge
 8016e7c:	4664      	movge	r4, ip
 8016e7e:	f1be 0f00 	cmp.w	lr, #0
 8016e82:	d000      	beq.n	8016e86 <_strtod_l+0x2d6>
 8016e84:	4264      	negs	r4, r4
 8016e86:	2b00      	cmp	r3, #0
 8016e88:	d14e      	bne.n	8016f28 <_strtod_l+0x378>
 8016e8a:	9b07      	ldr	r3, [sp, #28]
 8016e8c:	4318      	orrs	r0, r3
 8016e8e:	f47f aeca 	bne.w	8016c26 <_strtod_l+0x76>
 8016e92:	9b06      	ldr	r3, [sp, #24]
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	f47f aee2 	bne.w	8016c5e <_strtod_l+0xae>
 8016e9a:	2a69      	cmp	r2, #105	@ 0x69
 8016e9c:	d027      	beq.n	8016eee <_strtod_l+0x33e>
 8016e9e:	dc24      	bgt.n	8016eea <_strtod_l+0x33a>
 8016ea0:	2a49      	cmp	r2, #73	@ 0x49
 8016ea2:	d024      	beq.n	8016eee <_strtod_l+0x33e>
 8016ea4:	2a4e      	cmp	r2, #78	@ 0x4e
 8016ea6:	f47f aeda 	bne.w	8016c5e <_strtod_l+0xae>
 8016eaa:	4997      	ldr	r1, [pc, #604]	@ (8017108 <_strtod_l+0x558>)
 8016eac:	a811      	add	r0, sp, #68	@ 0x44
 8016eae:	f001 f92f 	bl	8018110 <__match>
 8016eb2:	2800      	cmp	r0, #0
 8016eb4:	f43f aed3 	beq.w	8016c5e <_strtod_l+0xae>
 8016eb8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016eba:	781b      	ldrb	r3, [r3, #0]
 8016ebc:	2b28      	cmp	r3, #40	@ 0x28
 8016ebe:	d12d      	bne.n	8016f1c <_strtod_l+0x36c>
 8016ec0:	4992      	ldr	r1, [pc, #584]	@ (801710c <_strtod_l+0x55c>)
 8016ec2:	aa14      	add	r2, sp, #80	@ 0x50
 8016ec4:	a811      	add	r0, sp, #68	@ 0x44
 8016ec6:	f001 f937 	bl	8018138 <__hexnan>
 8016eca:	2805      	cmp	r0, #5
 8016ecc:	d126      	bne.n	8016f1c <_strtod_l+0x36c>
 8016ece:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016ed0:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8016ed4:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8016ed8:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8016edc:	e6a3      	b.n	8016c26 <_strtod_l+0x76>
 8016ede:	240a      	movs	r4, #10
 8016ee0:	fb04 2c0c 	mla	ip, r4, ip, r2
 8016ee4:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8016ee8:	e7b8      	b.n	8016e5c <_strtod_l+0x2ac>
 8016eea:	2a6e      	cmp	r2, #110	@ 0x6e
 8016eec:	e7db      	b.n	8016ea6 <_strtod_l+0x2f6>
 8016eee:	4988      	ldr	r1, [pc, #544]	@ (8017110 <_strtod_l+0x560>)
 8016ef0:	a811      	add	r0, sp, #68	@ 0x44
 8016ef2:	f001 f90d 	bl	8018110 <__match>
 8016ef6:	2800      	cmp	r0, #0
 8016ef8:	f43f aeb1 	beq.w	8016c5e <_strtod_l+0xae>
 8016efc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016efe:	4985      	ldr	r1, [pc, #532]	@ (8017114 <_strtod_l+0x564>)
 8016f00:	3b01      	subs	r3, #1
 8016f02:	a811      	add	r0, sp, #68	@ 0x44
 8016f04:	9311      	str	r3, [sp, #68]	@ 0x44
 8016f06:	f001 f903 	bl	8018110 <__match>
 8016f0a:	b910      	cbnz	r0, 8016f12 <_strtod_l+0x362>
 8016f0c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016f0e:	3301      	adds	r3, #1
 8016f10:	9311      	str	r3, [sp, #68]	@ 0x44
 8016f12:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8017128 <_strtod_l+0x578>
 8016f16:	f04f 0a00 	mov.w	sl, #0
 8016f1a:	e684      	b.n	8016c26 <_strtod_l+0x76>
 8016f1c:	487e      	ldr	r0, [pc, #504]	@ (8017118 <_strtod_l+0x568>)
 8016f1e:	f000 fe1b 	bl	8017b58 <nan>
 8016f22:	ec5b ab10 	vmov	sl, fp, d0
 8016f26:	e67e      	b.n	8016c26 <_strtod_l+0x76>
 8016f28:	ee07 9a90 	vmov	s15, r9
 8016f2c:	1be2      	subs	r2, r4, r7
 8016f2e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8016f32:	2d00      	cmp	r5, #0
 8016f34:	bf08      	it	eq
 8016f36:	461d      	moveq	r5, r3
 8016f38:	2b10      	cmp	r3, #16
 8016f3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8016f3c:	461a      	mov	r2, r3
 8016f3e:	bfa8      	it	ge
 8016f40:	2210      	movge	r2, #16
 8016f42:	2b09      	cmp	r3, #9
 8016f44:	ec5b ab17 	vmov	sl, fp, d7
 8016f48:	dc15      	bgt.n	8016f76 <_strtod_l+0x3c6>
 8016f4a:	1be1      	subs	r1, r4, r7
 8016f4c:	2900      	cmp	r1, #0
 8016f4e:	f43f ae6a 	beq.w	8016c26 <_strtod_l+0x76>
 8016f52:	eba4 0107 	sub.w	r1, r4, r7
 8016f56:	dd72      	ble.n	801703e <_strtod_l+0x48e>
 8016f58:	2916      	cmp	r1, #22
 8016f5a:	dc59      	bgt.n	8017010 <_strtod_l+0x460>
 8016f5c:	4b6f      	ldr	r3, [pc, #444]	@ (801711c <_strtod_l+0x56c>)
 8016f5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016f60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016f64:	ed93 7b00 	vldr	d7, [r3]
 8016f68:	ec4b ab16 	vmov	d6, sl, fp
 8016f6c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016f70:	ec5b ab17 	vmov	sl, fp, d7
 8016f74:	e657      	b.n	8016c26 <_strtod_l+0x76>
 8016f76:	4969      	ldr	r1, [pc, #420]	@ (801711c <_strtod_l+0x56c>)
 8016f78:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8016f7c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8016f80:	ee06 6a90 	vmov	s13, r6
 8016f84:	2b0f      	cmp	r3, #15
 8016f86:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8016f8a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8016f8e:	ec5b ab16 	vmov	sl, fp, d6
 8016f92:	ddda      	ble.n	8016f4a <_strtod_l+0x39a>
 8016f94:	1a9a      	subs	r2, r3, r2
 8016f96:	1be1      	subs	r1, r4, r7
 8016f98:	440a      	add	r2, r1
 8016f9a:	2a00      	cmp	r2, #0
 8016f9c:	f340 8094 	ble.w	80170c8 <_strtod_l+0x518>
 8016fa0:	f012 000f 	ands.w	r0, r2, #15
 8016fa4:	d00a      	beq.n	8016fbc <_strtod_l+0x40c>
 8016fa6:	495d      	ldr	r1, [pc, #372]	@ (801711c <_strtod_l+0x56c>)
 8016fa8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8016fac:	ed91 7b00 	vldr	d7, [r1]
 8016fb0:	ec4b ab16 	vmov	d6, sl, fp
 8016fb4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016fb8:	ec5b ab17 	vmov	sl, fp, d7
 8016fbc:	f032 020f 	bics.w	r2, r2, #15
 8016fc0:	d073      	beq.n	80170aa <_strtod_l+0x4fa>
 8016fc2:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8016fc6:	dd47      	ble.n	8017058 <_strtod_l+0x4a8>
 8016fc8:	2400      	movs	r4, #0
 8016fca:	4625      	mov	r5, r4
 8016fcc:	9407      	str	r4, [sp, #28]
 8016fce:	4626      	mov	r6, r4
 8016fd0:	9a05      	ldr	r2, [sp, #20]
 8016fd2:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8017128 <_strtod_l+0x578>
 8016fd6:	2322      	movs	r3, #34	@ 0x22
 8016fd8:	6013      	str	r3, [r2, #0]
 8016fda:	f04f 0a00 	mov.w	sl, #0
 8016fde:	9b07      	ldr	r3, [sp, #28]
 8016fe0:	2b00      	cmp	r3, #0
 8016fe2:	f43f ae20 	beq.w	8016c26 <_strtod_l+0x76>
 8016fe6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016fe8:	9805      	ldr	r0, [sp, #20]
 8016fea:	f001 fa41 	bl	8018470 <_Bfree>
 8016fee:	9805      	ldr	r0, [sp, #20]
 8016ff0:	4631      	mov	r1, r6
 8016ff2:	f001 fa3d 	bl	8018470 <_Bfree>
 8016ff6:	9805      	ldr	r0, [sp, #20]
 8016ff8:	4629      	mov	r1, r5
 8016ffa:	f001 fa39 	bl	8018470 <_Bfree>
 8016ffe:	9907      	ldr	r1, [sp, #28]
 8017000:	9805      	ldr	r0, [sp, #20]
 8017002:	f001 fa35 	bl	8018470 <_Bfree>
 8017006:	9805      	ldr	r0, [sp, #20]
 8017008:	4621      	mov	r1, r4
 801700a:	f001 fa31 	bl	8018470 <_Bfree>
 801700e:	e60a      	b.n	8016c26 <_strtod_l+0x76>
 8017010:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8017014:	1be0      	subs	r0, r4, r7
 8017016:	4281      	cmp	r1, r0
 8017018:	dbbc      	blt.n	8016f94 <_strtod_l+0x3e4>
 801701a:	4a40      	ldr	r2, [pc, #256]	@ (801711c <_strtod_l+0x56c>)
 801701c:	f1c3 030f 	rsb	r3, r3, #15
 8017020:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8017024:	ed91 7b00 	vldr	d7, [r1]
 8017028:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801702a:	ec4b ab16 	vmov	d6, sl, fp
 801702e:	1acb      	subs	r3, r1, r3
 8017030:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8017034:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017038:	ed92 6b00 	vldr	d6, [r2]
 801703c:	e796      	b.n	8016f6c <_strtod_l+0x3bc>
 801703e:	3116      	adds	r1, #22
 8017040:	dba8      	blt.n	8016f94 <_strtod_l+0x3e4>
 8017042:	4b36      	ldr	r3, [pc, #216]	@ (801711c <_strtod_l+0x56c>)
 8017044:	1b3c      	subs	r4, r7, r4
 8017046:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801704a:	ed94 7b00 	vldr	d7, [r4]
 801704e:	ec4b ab16 	vmov	d6, sl, fp
 8017052:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8017056:	e78b      	b.n	8016f70 <_strtod_l+0x3c0>
 8017058:	2000      	movs	r0, #0
 801705a:	ec4b ab17 	vmov	d7, sl, fp
 801705e:	4e30      	ldr	r6, [pc, #192]	@ (8017120 <_strtod_l+0x570>)
 8017060:	1112      	asrs	r2, r2, #4
 8017062:	4601      	mov	r1, r0
 8017064:	2a01      	cmp	r2, #1
 8017066:	dc23      	bgt.n	80170b0 <_strtod_l+0x500>
 8017068:	b108      	cbz	r0, 801706e <_strtod_l+0x4be>
 801706a:	ec5b ab17 	vmov	sl, fp, d7
 801706e:	4a2c      	ldr	r2, [pc, #176]	@ (8017120 <_strtod_l+0x570>)
 8017070:	482c      	ldr	r0, [pc, #176]	@ (8017124 <_strtod_l+0x574>)
 8017072:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8017076:	ed92 7b00 	vldr	d7, [r2]
 801707a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801707e:	ec4b ab16 	vmov	d6, sl, fp
 8017082:	4a29      	ldr	r2, [pc, #164]	@ (8017128 <_strtod_l+0x578>)
 8017084:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017088:	ee17 1a90 	vmov	r1, s15
 801708c:	400a      	ands	r2, r1
 801708e:	4282      	cmp	r2, r0
 8017090:	ec5b ab17 	vmov	sl, fp, d7
 8017094:	d898      	bhi.n	8016fc8 <_strtod_l+0x418>
 8017096:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 801709a:	4282      	cmp	r2, r0
 801709c:	bf86      	itte	hi
 801709e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 801712c <_strtod_l+0x57c>
 80170a2:	f04f 3aff 	movhi.w	sl, #4294967295
 80170a6:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 80170aa:	2200      	movs	r2, #0
 80170ac:	9206      	str	r2, [sp, #24]
 80170ae:	e076      	b.n	801719e <_strtod_l+0x5ee>
 80170b0:	f012 0f01 	tst.w	r2, #1
 80170b4:	d004      	beq.n	80170c0 <_strtod_l+0x510>
 80170b6:	ed96 6b00 	vldr	d6, [r6]
 80170ba:	2001      	movs	r0, #1
 80170bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80170c0:	3101      	adds	r1, #1
 80170c2:	1052      	asrs	r2, r2, #1
 80170c4:	3608      	adds	r6, #8
 80170c6:	e7cd      	b.n	8017064 <_strtod_l+0x4b4>
 80170c8:	d0ef      	beq.n	80170aa <_strtod_l+0x4fa>
 80170ca:	4252      	negs	r2, r2
 80170cc:	f012 000f 	ands.w	r0, r2, #15
 80170d0:	d00a      	beq.n	80170e8 <_strtod_l+0x538>
 80170d2:	4912      	ldr	r1, [pc, #72]	@ (801711c <_strtod_l+0x56c>)
 80170d4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80170d8:	ed91 7b00 	vldr	d7, [r1]
 80170dc:	ec4b ab16 	vmov	d6, sl, fp
 80170e0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80170e4:	ec5b ab17 	vmov	sl, fp, d7
 80170e8:	1112      	asrs	r2, r2, #4
 80170ea:	d0de      	beq.n	80170aa <_strtod_l+0x4fa>
 80170ec:	2a1f      	cmp	r2, #31
 80170ee:	dd1f      	ble.n	8017130 <_strtod_l+0x580>
 80170f0:	2400      	movs	r4, #0
 80170f2:	4625      	mov	r5, r4
 80170f4:	9407      	str	r4, [sp, #28]
 80170f6:	4626      	mov	r6, r4
 80170f8:	9a05      	ldr	r2, [sp, #20]
 80170fa:	2322      	movs	r3, #34	@ 0x22
 80170fc:	f04f 0a00 	mov.w	sl, #0
 8017100:	f04f 0b00 	mov.w	fp, #0
 8017104:	6013      	str	r3, [r2, #0]
 8017106:	e76a      	b.n	8016fde <_strtod_l+0x42e>
 8017108:	08019fcb 	.word	0x08019fcb
 801710c:	08019fd0 	.word	0x08019fd0
 8017110:	08019fc2 	.word	0x08019fc2
 8017114:	08019fc5 	.word	0x08019fc5
 8017118:	0801a343 	.word	0x0801a343
 801711c:	0801a240 	.word	0x0801a240
 8017120:	0801a218 	.word	0x0801a218
 8017124:	7ca00000 	.word	0x7ca00000
 8017128:	7ff00000 	.word	0x7ff00000
 801712c:	7fefffff 	.word	0x7fefffff
 8017130:	f012 0110 	ands.w	r1, r2, #16
 8017134:	bf18      	it	ne
 8017136:	216a      	movne	r1, #106	@ 0x6a
 8017138:	9106      	str	r1, [sp, #24]
 801713a:	ec4b ab17 	vmov	d7, sl, fp
 801713e:	49b0      	ldr	r1, [pc, #704]	@ (8017400 <_strtod_l+0x850>)
 8017140:	2000      	movs	r0, #0
 8017142:	07d6      	lsls	r6, r2, #31
 8017144:	d504      	bpl.n	8017150 <_strtod_l+0x5a0>
 8017146:	ed91 6b00 	vldr	d6, [r1]
 801714a:	2001      	movs	r0, #1
 801714c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017150:	1052      	asrs	r2, r2, #1
 8017152:	f101 0108 	add.w	r1, r1, #8
 8017156:	d1f4      	bne.n	8017142 <_strtod_l+0x592>
 8017158:	b108      	cbz	r0, 801715e <_strtod_l+0x5ae>
 801715a:	ec5b ab17 	vmov	sl, fp, d7
 801715e:	9a06      	ldr	r2, [sp, #24]
 8017160:	b1b2      	cbz	r2, 8017190 <_strtod_l+0x5e0>
 8017162:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8017166:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 801716a:	2a00      	cmp	r2, #0
 801716c:	4658      	mov	r0, fp
 801716e:	dd0f      	ble.n	8017190 <_strtod_l+0x5e0>
 8017170:	2a1f      	cmp	r2, #31
 8017172:	dd55      	ble.n	8017220 <_strtod_l+0x670>
 8017174:	2a34      	cmp	r2, #52	@ 0x34
 8017176:	bfde      	ittt	le
 8017178:	f04f 32ff 	movle.w	r2, #4294967295
 801717c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8017180:	408a      	lslle	r2, r1
 8017182:	f04f 0a00 	mov.w	sl, #0
 8017186:	bfcc      	ite	gt
 8017188:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801718c:	ea02 0b00 	andle.w	fp, r2, r0
 8017190:	ec4b ab17 	vmov	d7, sl, fp
 8017194:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801719c:	d0a8      	beq.n	80170f0 <_strtod_l+0x540>
 801719e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80171a0:	9805      	ldr	r0, [sp, #20]
 80171a2:	f8cd 9000 	str.w	r9, [sp]
 80171a6:	462a      	mov	r2, r5
 80171a8:	f001 f9ca 	bl	8018540 <__s2b>
 80171ac:	9007      	str	r0, [sp, #28]
 80171ae:	2800      	cmp	r0, #0
 80171b0:	f43f af0a 	beq.w	8016fc8 <_strtod_l+0x418>
 80171b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80171b6:	1b3f      	subs	r7, r7, r4
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	bfb4      	ite	lt
 80171bc:	463b      	movlt	r3, r7
 80171be:	2300      	movge	r3, #0
 80171c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80171c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80171c4:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 80173f0 <_strtod_l+0x840>
 80171c8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80171cc:	2400      	movs	r4, #0
 80171ce:	930d      	str	r3, [sp, #52]	@ 0x34
 80171d0:	4625      	mov	r5, r4
 80171d2:	9b07      	ldr	r3, [sp, #28]
 80171d4:	9805      	ldr	r0, [sp, #20]
 80171d6:	6859      	ldr	r1, [r3, #4]
 80171d8:	f001 f90a 	bl	80183f0 <_Balloc>
 80171dc:	4606      	mov	r6, r0
 80171de:	2800      	cmp	r0, #0
 80171e0:	f43f aef6 	beq.w	8016fd0 <_strtod_l+0x420>
 80171e4:	9b07      	ldr	r3, [sp, #28]
 80171e6:	691a      	ldr	r2, [r3, #16]
 80171e8:	ec4b ab19 	vmov	d9, sl, fp
 80171ec:	3202      	adds	r2, #2
 80171ee:	f103 010c 	add.w	r1, r3, #12
 80171f2:	0092      	lsls	r2, r2, #2
 80171f4:	300c      	adds	r0, #12
 80171f6:	f000 fca0 	bl	8017b3a <memcpy>
 80171fa:	eeb0 0b49 	vmov.f64	d0, d9
 80171fe:	9805      	ldr	r0, [sp, #20]
 8017200:	aa14      	add	r2, sp, #80	@ 0x50
 8017202:	a913      	add	r1, sp, #76	@ 0x4c
 8017204:	f001 fcd8 	bl	8018bb8 <__d2b>
 8017208:	9012      	str	r0, [sp, #72]	@ 0x48
 801720a:	2800      	cmp	r0, #0
 801720c:	f43f aee0 	beq.w	8016fd0 <_strtod_l+0x420>
 8017210:	9805      	ldr	r0, [sp, #20]
 8017212:	2101      	movs	r1, #1
 8017214:	f001 fa2a 	bl	801866c <__i2b>
 8017218:	4605      	mov	r5, r0
 801721a:	b940      	cbnz	r0, 801722e <_strtod_l+0x67e>
 801721c:	2500      	movs	r5, #0
 801721e:	e6d7      	b.n	8016fd0 <_strtod_l+0x420>
 8017220:	f04f 31ff 	mov.w	r1, #4294967295
 8017224:	fa01 f202 	lsl.w	r2, r1, r2
 8017228:	ea02 0a0a 	and.w	sl, r2, sl
 801722c:	e7b0      	b.n	8017190 <_strtod_l+0x5e0>
 801722e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8017230:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8017232:	2f00      	cmp	r7, #0
 8017234:	bfab      	itete	ge
 8017236:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8017238:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 801723a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 801723e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8017242:	bfac      	ite	ge
 8017244:	eb07 0903 	addge.w	r9, r7, r3
 8017248:	eba3 0807 	sublt.w	r8, r3, r7
 801724c:	9b06      	ldr	r3, [sp, #24]
 801724e:	1aff      	subs	r7, r7, r3
 8017250:	4417      	add	r7, r2
 8017252:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8017256:	4a6b      	ldr	r2, [pc, #428]	@ (8017404 <_strtod_l+0x854>)
 8017258:	3f01      	subs	r7, #1
 801725a:	4297      	cmp	r7, r2
 801725c:	da51      	bge.n	8017302 <_strtod_l+0x752>
 801725e:	1bd1      	subs	r1, r2, r7
 8017260:	291f      	cmp	r1, #31
 8017262:	eba3 0301 	sub.w	r3, r3, r1
 8017266:	f04f 0201 	mov.w	r2, #1
 801726a:	dc3e      	bgt.n	80172ea <_strtod_l+0x73a>
 801726c:	408a      	lsls	r2, r1
 801726e:	920c      	str	r2, [sp, #48]	@ 0x30
 8017270:	2200      	movs	r2, #0
 8017272:	920b      	str	r2, [sp, #44]	@ 0x2c
 8017274:	eb09 0703 	add.w	r7, r9, r3
 8017278:	4498      	add	r8, r3
 801727a:	9b06      	ldr	r3, [sp, #24]
 801727c:	45b9      	cmp	r9, r7
 801727e:	4498      	add	r8, r3
 8017280:	464b      	mov	r3, r9
 8017282:	bfa8      	it	ge
 8017284:	463b      	movge	r3, r7
 8017286:	4543      	cmp	r3, r8
 8017288:	bfa8      	it	ge
 801728a:	4643      	movge	r3, r8
 801728c:	2b00      	cmp	r3, #0
 801728e:	bfc2      	ittt	gt
 8017290:	1aff      	subgt	r7, r7, r3
 8017292:	eba8 0803 	subgt.w	r8, r8, r3
 8017296:	eba9 0903 	subgt.w	r9, r9, r3
 801729a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801729c:	2b00      	cmp	r3, #0
 801729e:	dd16      	ble.n	80172ce <_strtod_l+0x71e>
 80172a0:	4629      	mov	r1, r5
 80172a2:	9805      	ldr	r0, [sp, #20]
 80172a4:	461a      	mov	r2, r3
 80172a6:	f001 faa1 	bl	80187ec <__pow5mult>
 80172aa:	4605      	mov	r5, r0
 80172ac:	2800      	cmp	r0, #0
 80172ae:	d0b5      	beq.n	801721c <_strtod_l+0x66c>
 80172b0:	4601      	mov	r1, r0
 80172b2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80172b4:	9805      	ldr	r0, [sp, #20]
 80172b6:	f001 f9ef 	bl	8018698 <__multiply>
 80172ba:	900f      	str	r0, [sp, #60]	@ 0x3c
 80172bc:	2800      	cmp	r0, #0
 80172be:	f43f ae87 	beq.w	8016fd0 <_strtod_l+0x420>
 80172c2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80172c4:	9805      	ldr	r0, [sp, #20]
 80172c6:	f001 f8d3 	bl	8018470 <_Bfree>
 80172ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80172cc:	9312      	str	r3, [sp, #72]	@ 0x48
 80172ce:	2f00      	cmp	r7, #0
 80172d0:	dc1b      	bgt.n	801730a <_strtod_l+0x75a>
 80172d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	dd21      	ble.n	801731c <_strtod_l+0x76c>
 80172d8:	4631      	mov	r1, r6
 80172da:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80172dc:	9805      	ldr	r0, [sp, #20]
 80172de:	f001 fa85 	bl	80187ec <__pow5mult>
 80172e2:	4606      	mov	r6, r0
 80172e4:	b9d0      	cbnz	r0, 801731c <_strtod_l+0x76c>
 80172e6:	2600      	movs	r6, #0
 80172e8:	e672      	b.n	8016fd0 <_strtod_l+0x420>
 80172ea:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 80172ee:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 80172f2:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 80172f6:	37e2      	adds	r7, #226	@ 0xe2
 80172f8:	fa02 f107 	lsl.w	r1, r2, r7
 80172fc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80172fe:	920c      	str	r2, [sp, #48]	@ 0x30
 8017300:	e7b8      	b.n	8017274 <_strtod_l+0x6c4>
 8017302:	2200      	movs	r2, #0
 8017304:	920b      	str	r2, [sp, #44]	@ 0x2c
 8017306:	2201      	movs	r2, #1
 8017308:	e7f9      	b.n	80172fe <_strtod_l+0x74e>
 801730a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801730c:	9805      	ldr	r0, [sp, #20]
 801730e:	463a      	mov	r2, r7
 8017310:	f001 fac6 	bl	80188a0 <__lshift>
 8017314:	9012      	str	r0, [sp, #72]	@ 0x48
 8017316:	2800      	cmp	r0, #0
 8017318:	d1db      	bne.n	80172d2 <_strtod_l+0x722>
 801731a:	e659      	b.n	8016fd0 <_strtod_l+0x420>
 801731c:	f1b8 0f00 	cmp.w	r8, #0
 8017320:	dd07      	ble.n	8017332 <_strtod_l+0x782>
 8017322:	4631      	mov	r1, r6
 8017324:	9805      	ldr	r0, [sp, #20]
 8017326:	4642      	mov	r2, r8
 8017328:	f001 faba 	bl	80188a0 <__lshift>
 801732c:	4606      	mov	r6, r0
 801732e:	2800      	cmp	r0, #0
 8017330:	d0d9      	beq.n	80172e6 <_strtod_l+0x736>
 8017332:	f1b9 0f00 	cmp.w	r9, #0
 8017336:	dd08      	ble.n	801734a <_strtod_l+0x79a>
 8017338:	4629      	mov	r1, r5
 801733a:	9805      	ldr	r0, [sp, #20]
 801733c:	464a      	mov	r2, r9
 801733e:	f001 faaf 	bl	80188a0 <__lshift>
 8017342:	4605      	mov	r5, r0
 8017344:	2800      	cmp	r0, #0
 8017346:	f43f ae43 	beq.w	8016fd0 <_strtod_l+0x420>
 801734a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801734c:	9805      	ldr	r0, [sp, #20]
 801734e:	4632      	mov	r2, r6
 8017350:	f001 fb2e 	bl	80189b0 <__mdiff>
 8017354:	4604      	mov	r4, r0
 8017356:	2800      	cmp	r0, #0
 8017358:	f43f ae3a 	beq.w	8016fd0 <_strtod_l+0x420>
 801735c:	2300      	movs	r3, #0
 801735e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8017362:	60c3      	str	r3, [r0, #12]
 8017364:	4629      	mov	r1, r5
 8017366:	f001 fb07 	bl	8018978 <__mcmp>
 801736a:	2800      	cmp	r0, #0
 801736c:	da4e      	bge.n	801740c <_strtod_l+0x85c>
 801736e:	ea58 080a 	orrs.w	r8, r8, sl
 8017372:	d174      	bne.n	801745e <_strtod_l+0x8ae>
 8017374:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017378:	2b00      	cmp	r3, #0
 801737a:	d170      	bne.n	801745e <_strtod_l+0x8ae>
 801737c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8017380:	0d1b      	lsrs	r3, r3, #20
 8017382:	051b      	lsls	r3, r3, #20
 8017384:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8017388:	d969      	bls.n	801745e <_strtod_l+0x8ae>
 801738a:	6963      	ldr	r3, [r4, #20]
 801738c:	b913      	cbnz	r3, 8017394 <_strtod_l+0x7e4>
 801738e:	6923      	ldr	r3, [r4, #16]
 8017390:	2b01      	cmp	r3, #1
 8017392:	dd64      	ble.n	801745e <_strtod_l+0x8ae>
 8017394:	4621      	mov	r1, r4
 8017396:	2201      	movs	r2, #1
 8017398:	9805      	ldr	r0, [sp, #20]
 801739a:	f001 fa81 	bl	80188a0 <__lshift>
 801739e:	4629      	mov	r1, r5
 80173a0:	4604      	mov	r4, r0
 80173a2:	f001 fae9 	bl	8018978 <__mcmp>
 80173a6:	2800      	cmp	r0, #0
 80173a8:	dd59      	ble.n	801745e <_strtod_l+0x8ae>
 80173aa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80173ae:	9a06      	ldr	r2, [sp, #24]
 80173b0:	0d1b      	lsrs	r3, r3, #20
 80173b2:	051b      	lsls	r3, r3, #20
 80173b4:	2a00      	cmp	r2, #0
 80173b6:	d070      	beq.n	801749a <_strtod_l+0x8ea>
 80173b8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80173bc:	d86d      	bhi.n	801749a <_strtod_l+0x8ea>
 80173be:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80173c2:	f67f ae99 	bls.w	80170f8 <_strtod_l+0x548>
 80173c6:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 80173f8 <_strtod_l+0x848>
 80173ca:	ec4b ab16 	vmov	d6, sl, fp
 80173ce:	4b0e      	ldr	r3, [pc, #56]	@ (8017408 <_strtod_l+0x858>)
 80173d0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80173d4:	ee17 2a90 	vmov	r2, s15
 80173d8:	4013      	ands	r3, r2
 80173da:	ec5b ab17 	vmov	sl, fp, d7
 80173de:	2b00      	cmp	r3, #0
 80173e0:	f47f ae01 	bne.w	8016fe6 <_strtod_l+0x436>
 80173e4:	9a05      	ldr	r2, [sp, #20]
 80173e6:	2322      	movs	r3, #34	@ 0x22
 80173e8:	6013      	str	r3, [r2, #0]
 80173ea:	e5fc      	b.n	8016fe6 <_strtod_l+0x436>
 80173ec:	f3af 8000 	nop.w
 80173f0:	ffc00000 	.word	0xffc00000
 80173f4:	41dfffff 	.word	0x41dfffff
 80173f8:	00000000 	.word	0x00000000
 80173fc:	39500000 	.word	0x39500000
 8017400:	08019ff8 	.word	0x08019ff8
 8017404:	fffffc02 	.word	0xfffffc02
 8017408:	7ff00000 	.word	0x7ff00000
 801740c:	46d9      	mov	r9, fp
 801740e:	d15d      	bne.n	80174cc <_strtod_l+0x91c>
 8017410:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017414:	f1b8 0f00 	cmp.w	r8, #0
 8017418:	d02a      	beq.n	8017470 <_strtod_l+0x8c0>
 801741a:	4aab      	ldr	r2, [pc, #684]	@ (80176c8 <_strtod_l+0xb18>)
 801741c:	4293      	cmp	r3, r2
 801741e:	d12a      	bne.n	8017476 <_strtod_l+0x8c6>
 8017420:	9b06      	ldr	r3, [sp, #24]
 8017422:	4652      	mov	r2, sl
 8017424:	b1fb      	cbz	r3, 8017466 <_strtod_l+0x8b6>
 8017426:	4ba9      	ldr	r3, [pc, #676]	@ (80176cc <_strtod_l+0xb1c>)
 8017428:	ea0b 0303 	and.w	r3, fp, r3
 801742c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8017430:	f04f 31ff 	mov.w	r1, #4294967295
 8017434:	d81a      	bhi.n	801746c <_strtod_l+0x8bc>
 8017436:	0d1b      	lsrs	r3, r3, #20
 8017438:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801743c:	fa01 f303 	lsl.w	r3, r1, r3
 8017440:	429a      	cmp	r2, r3
 8017442:	d118      	bne.n	8017476 <_strtod_l+0x8c6>
 8017444:	4ba2      	ldr	r3, [pc, #648]	@ (80176d0 <_strtod_l+0xb20>)
 8017446:	4599      	cmp	r9, r3
 8017448:	d102      	bne.n	8017450 <_strtod_l+0x8a0>
 801744a:	3201      	adds	r2, #1
 801744c:	f43f adc0 	beq.w	8016fd0 <_strtod_l+0x420>
 8017450:	4b9e      	ldr	r3, [pc, #632]	@ (80176cc <_strtod_l+0xb1c>)
 8017452:	ea09 0303 	and.w	r3, r9, r3
 8017456:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 801745a:	f04f 0a00 	mov.w	sl, #0
 801745e:	9b06      	ldr	r3, [sp, #24]
 8017460:	2b00      	cmp	r3, #0
 8017462:	d1b0      	bne.n	80173c6 <_strtod_l+0x816>
 8017464:	e5bf      	b.n	8016fe6 <_strtod_l+0x436>
 8017466:	f04f 33ff 	mov.w	r3, #4294967295
 801746a:	e7e9      	b.n	8017440 <_strtod_l+0x890>
 801746c:	460b      	mov	r3, r1
 801746e:	e7e7      	b.n	8017440 <_strtod_l+0x890>
 8017470:	ea53 030a 	orrs.w	r3, r3, sl
 8017474:	d099      	beq.n	80173aa <_strtod_l+0x7fa>
 8017476:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017478:	b1c3      	cbz	r3, 80174ac <_strtod_l+0x8fc>
 801747a:	ea13 0f09 	tst.w	r3, r9
 801747e:	d0ee      	beq.n	801745e <_strtod_l+0x8ae>
 8017480:	9a06      	ldr	r2, [sp, #24]
 8017482:	4650      	mov	r0, sl
 8017484:	4659      	mov	r1, fp
 8017486:	f1b8 0f00 	cmp.w	r8, #0
 801748a:	d013      	beq.n	80174b4 <_strtod_l+0x904>
 801748c:	f7ff fb73 	bl	8016b76 <sulp>
 8017490:	ee39 7b00 	vadd.f64	d7, d9, d0
 8017494:	ec5b ab17 	vmov	sl, fp, d7
 8017498:	e7e1      	b.n	801745e <_strtod_l+0x8ae>
 801749a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801749e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80174a2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80174a6:	f04f 3aff 	mov.w	sl, #4294967295
 80174aa:	e7d8      	b.n	801745e <_strtod_l+0x8ae>
 80174ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80174ae:	ea13 0f0a 	tst.w	r3, sl
 80174b2:	e7e4      	b.n	801747e <_strtod_l+0x8ce>
 80174b4:	f7ff fb5f 	bl	8016b76 <sulp>
 80174b8:	ee39 0b40 	vsub.f64	d0, d9, d0
 80174bc:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80174c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174c4:	ec5b ab10 	vmov	sl, fp, d0
 80174c8:	d1c9      	bne.n	801745e <_strtod_l+0x8ae>
 80174ca:	e615      	b.n	80170f8 <_strtod_l+0x548>
 80174cc:	4629      	mov	r1, r5
 80174ce:	4620      	mov	r0, r4
 80174d0:	f001 fbca 	bl	8018c68 <__ratio>
 80174d4:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 80174d8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80174dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174e0:	d85d      	bhi.n	801759e <_strtod_l+0x9ee>
 80174e2:	f1b8 0f00 	cmp.w	r8, #0
 80174e6:	d164      	bne.n	80175b2 <_strtod_l+0xa02>
 80174e8:	f1ba 0f00 	cmp.w	sl, #0
 80174ec:	d14b      	bne.n	8017586 <_strtod_l+0x9d6>
 80174ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80174f2:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	d160      	bne.n	80175bc <_strtod_l+0xa0c>
 80174fa:	eeb4 0bc8 	vcmpe.f64	d0, d8
 80174fe:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8017502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017506:	d401      	bmi.n	801750c <_strtod_l+0x95c>
 8017508:	ee20 8b08 	vmul.f64	d8, d0, d8
 801750c:	eeb1 ab48 	vneg.f64	d10, d8
 8017510:	486e      	ldr	r0, [pc, #440]	@ (80176cc <_strtod_l+0xb1c>)
 8017512:	4970      	ldr	r1, [pc, #448]	@ (80176d4 <_strtod_l+0xb24>)
 8017514:	ea09 0700 	and.w	r7, r9, r0
 8017518:	428f      	cmp	r7, r1
 801751a:	ec53 2b1a 	vmov	r2, r3, d10
 801751e:	d17d      	bne.n	801761c <_strtod_l+0xa6c>
 8017520:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8017524:	ec4b ab1c 	vmov	d12, sl, fp
 8017528:	eeb0 0b4c 	vmov.f64	d0, d12
 801752c:	f001 fad4 	bl	8018ad8 <__ulp>
 8017530:	4866      	ldr	r0, [pc, #408]	@ (80176cc <_strtod_l+0xb1c>)
 8017532:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8017536:	ee1c 3a90 	vmov	r3, s25
 801753a:	4a67      	ldr	r2, [pc, #412]	@ (80176d8 <_strtod_l+0xb28>)
 801753c:	ea03 0100 	and.w	r1, r3, r0
 8017540:	4291      	cmp	r1, r2
 8017542:	ec5b ab1c 	vmov	sl, fp, d12
 8017546:	d93c      	bls.n	80175c2 <_strtod_l+0xa12>
 8017548:	ee19 2a90 	vmov	r2, s19
 801754c:	4b60      	ldr	r3, [pc, #384]	@ (80176d0 <_strtod_l+0xb20>)
 801754e:	429a      	cmp	r2, r3
 8017550:	d104      	bne.n	801755c <_strtod_l+0x9ac>
 8017552:	ee19 3a10 	vmov	r3, s18
 8017556:	3301      	adds	r3, #1
 8017558:	f43f ad3a 	beq.w	8016fd0 <_strtod_l+0x420>
 801755c:	f8df b170 	ldr.w	fp, [pc, #368]	@ 80176d0 <_strtod_l+0xb20>
 8017560:	f04f 3aff 	mov.w	sl, #4294967295
 8017564:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8017566:	9805      	ldr	r0, [sp, #20]
 8017568:	f000 ff82 	bl	8018470 <_Bfree>
 801756c:	9805      	ldr	r0, [sp, #20]
 801756e:	4631      	mov	r1, r6
 8017570:	f000 ff7e 	bl	8018470 <_Bfree>
 8017574:	9805      	ldr	r0, [sp, #20]
 8017576:	4629      	mov	r1, r5
 8017578:	f000 ff7a 	bl	8018470 <_Bfree>
 801757c:	9805      	ldr	r0, [sp, #20]
 801757e:	4621      	mov	r1, r4
 8017580:	f000 ff76 	bl	8018470 <_Bfree>
 8017584:	e625      	b.n	80171d2 <_strtod_l+0x622>
 8017586:	f1ba 0f01 	cmp.w	sl, #1
 801758a:	d103      	bne.n	8017594 <_strtod_l+0x9e4>
 801758c:	f1bb 0f00 	cmp.w	fp, #0
 8017590:	f43f adb2 	beq.w	80170f8 <_strtod_l+0x548>
 8017594:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8017598:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 801759c:	e7b8      	b.n	8017510 <_strtod_l+0x960>
 801759e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80175a2:	ee20 8b08 	vmul.f64	d8, d0, d8
 80175a6:	f1b8 0f00 	cmp.w	r8, #0
 80175aa:	d0af      	beq.n	801750c <_strtod_l+0x95c>
 80175ac:	eeb0 ab48 	vmov.f64	d10, d8
 80175b0:	e7ae      	b.n	8017510 <_strtod_l+0x960>
 80175b2:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 80175b6:	eeb0 8b4a 	vmov.f64	d8, d10
 80175ba:	e7a9      	b.n	8017510 <_strtod_l+0x960>
 80175bc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80175c0:	e7a6      	b.n	8017510 <_strtod_l+0x960>
 80175c2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80175c6:	9b06      	ldr	r3, [sp, #24]
 80175c8:	46d9      	mov	r9, fp
 80175ca:	2b00      	cmp	r3, #0
 80175cc:	d1ca      	bne.n	8017564 <_strtod_l+0x9b4>
 80175ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80175d2:	0d1b      	lsrs	r3, r3, #20
 80175d4:	051b      	lsls	r3, r3, #20
 80175d6:	429f      	cmp	r7, r3
 80175d8:	d1c4      	bne.n	8017564 <_strtod_l+0x9b4>
 80175da:	ec51 0b18 	vmov	r0, r1, d8
 80175de:	f7e9 f90b 	bl	80007f8 <__aeabi_d2lz>
 80175e2:	f7e9 f873 	bl	80006cc <__aeabi_l2d>
 80175e6:	f3cb 0913 	ubfx	r9, fp, #0, #20
 80175ea:	ec41 0b17 	vmov	d7, r0, r1
 80175ee:	ea49 090a 	orr.w	r9, r9, sl
 80175f2:	ea59 0908 	orrs.w	r9, r9, r8
 80175f6:	ee38 8b47 	vsub.f64	d8, d8, d7
 80175fa:	d03c      	beq.n	8017676 <_strtod_l+0xac6>
 80175fc:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 80176b0 <_strtod_l+0xb00>
 8017600:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8017604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017608:	f53f aced 	bmi.w	8016fe6 <_strtod_l+0x436>
 801760c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80176b8 <_strtod_l+0xb08>
 8017610:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8017614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017618:	dda4      	ble.n	8017564 <_strtod_l+0x9b4>
 801761a:	e4e4      	b.n	8016fe6 <_strtod_l+0x436>
 801761c:	9906      	ldr	r1, [sp, #24]
 801761e:	b1e1      	cbz	r1, 801765a <_strtod_l+0xaaa>
 8017620:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8017624:	d819      	bhi.n	801765a <_strtod_l+0xaaa>
 8017626:	eeb4 8bcb 	vcmpe.f64	d8, d11
 801762a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801762e:	d811      	bhi.n	8017654 <_strtod_l+0xaa4>
 8017630:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8017634:	ee18 3a10 	vmov	r3, s16
 8017638:	2b01      	cmp	r3, #1
 801763a:	bf38      	it	cc
 801763c:	2301      	movcc	r3, #1
 801763e:	ee08 3a10 	vmov	s16, r3
 8017642:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8017646:	f1b8 0f00 	cmp.w	r8, #0
 801764a:	d111      	bne.n	8017670 <_strtod_l+0xac0>
 801764c:	eeb1 7b48 	vneg.f64	d7, d8
 8017650:	ec53 2b17 	vmov	r2, r3, d7
 8017654:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8017658:	1bcb      	subs	r3, r1, r7
 801765a:	eeb0 0b49 	vmov.f64	d0, d9
 801765e:	ec43 2b1a 	vmov	d10, r2, r3
 8017662:	f001 fa39 	bl	8018ad8 <__ulp>
 8017666:	eeaa 9b00 	vfma.f64	d9, d10, d0
 801766a:	ec5b ab19 	vmov	sl, fp, d9
 801766e:	e7aa      	b.n	80175c6 <_strtod_l+0xa16>
 8017670:	eeb0 7b48 	vmov.f64	d7, d8
 8017674:	e7ec      	b.n	8017650 <_strtod_l+0xaa0>
 8017676:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 80176c0 <_strtod_l+0xb10>
 801767a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801767e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017682:	f57f af6f 	bpl.w	8017564 <_strtod_l+0x9b4>
 8017686:	e4ae      	b.n	8016fe6 <_strtod_l+0x436>
 8017688:	2300      	movs	r3, #0
 801768a:	9308      	str	r3, [sp, #32]
 801768c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801768e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017690:	6013      	str	r3, [r2, #0]
 8017692:	f7ff bacc 	b.w	8016c2e <_strtod_l+0x7e>
 8017696:	2a65      	cmp	r2, #101	@ 0x65
 8017698:	f43f abbc 	beq.w	8016e14 <_strtod_l+0x264>
 801769c:	2a45      	cmp	r2, #69	@ 0x45
 801769e:	f43f abb9 	beq.w	8016e14 <_strtod_l+0x264>
 80176a2:	2301      	movs	r3, #1
 80176a4:	9306      	str	r3, [sp, #24]
 80176a6:	f7ff bbf0 	b.w	8016e8a <_strtod_l+0x2da>
 80176aa:	bf00      	nop
 80176ac:	f3af 8000 	nop.w
 80176b0:	94a03595 	.word	0x94a03595
 80176b4:	3fdfffff 	.word	0x3fdfffff
 80176b8:	35afe535 	.word	0x35afe535
 80176bc:	3fe00000 	.word	0x3fe00000
 80176c0:	94a03595 	.word	0x94a03595
 80176c4:	3fcfffff 	.word	0x3fcfffff
 80176c8:	000fffff 	.word	0x000fffff
 80176cc:	7ff00000 	.word	0x7ff00000
 80176d0:	7fefffff 	.word	0x7fefffff
 80176d4:	7fe00000 	.word	0x7fe00000
 80176d8:	7c9fffff 	.word	0x7c9fffff

080176dc <strtod>:
 80176dc:	460a      	mov	r2, r1
 80176de:	4601      	mov	r1, r0
 80176e0:	4802      	ldr	r0, [pc, #8]	@ (80176ec <strtod+0x10>)
 80176e2:	4b03      	ldr	r3, [pc, #12]	@ (80176f0 <strtod+0x14>)
 80176e4:	6800      	ldr	r0, [r0, #0]
 80176e6:	f7ff ba63 	b.w	8016bb0 <_strtod_l>
 80176ea:	bf00      	nop
 80176ec:	24000260 	.word	0x24000260
 80176f0:	240000f4 	.word	0x240000f4

080176f4 <_strtol_l.constprop.0>:
 80176f4:	2b24      	cmp	r3, #36	@ 0x24
 80176f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80176fa:	4686      	mov	lr, r0
 80176fc:	4690      	mov	r8, r2
 80176fe:	d801      	bhi.n	8017704 <_strtol_l.constprop.0+0x10>
 8017700:	2b01      	cmp	r3, #1
 8017702:	d106      	bne.n	8017712 <_strtol_l.constprop.0+0x1e>
 8017704:	f000 f9ec 	bl	8017ae0 <__errno>
 8017708:	2316      	movs	r3, #22
 801770a:	6003      	str	r3, [r0, #0]
 801770c:	2000      	movs	r0, #0
 801770e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017712:	4834      	ldr	r0, [pc, #208]	@ (80177e4 <_strtol_l.constprop.0+0xf0>)
 8017714:	460d      	mov	r5, r1
 8017716:	462a      	mov	r2, r5
 8017718:	f815 4b01 	ldrb.w	r4, [r5], #1
 801771c:	5d06      	ldrb	r6, [r0, r4]
 801771e:	f016 0608 	ands.w	r6, r6, #8
 8017722:	d1f8      	bne.n	8017716 <_strtol_l.constprop.0+0x22>
 8017724:	2c2d      	cmp	r4, #45	@ 0x2d
 8017726:	d12d      	bne.n	8017784 <_strtol_l.constprop.0+0x90>
 8017728:	782c      	ldrb	r4, [r5, #0]
 801772a:	2601      	movs	r6, #1
 801772c:	1c95      	adds	r5, r2, #2
 801772e:	f033 0210 	bics.w	r2, r3, #16
 8017732:	d109      	bne.n	8017748 <_strtol_l.constprop.0+0x54>
 8017734:	2c30      	cmp	r4, #48	@ 0x30
 8017736:	d12a      	bne.n	801778e <_strtol_l.constprop.0+0x9a>
 8017738:	782a      	ldrb	r2, [r5, #0]
 801773a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801773e:	2a58      	cmp	r2, #88	@ 0x58
 8017740:	d125      	bne.n	801778e <_strtol_l.constprop.0+0x9a>
 8017742:	786c      	ldrb	r4, [r5, #1]
 8017744:	2310      	movs	r3, #16
 8017746:	3502      	adds	r5, #2
 8017748:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801774c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017750:	2200      	movs	r2, #0
 8017752:	fbbc f9f3 	udiv	r9, ip, r3
 8017756:	4610      	mov	r0, r2
 8017758:	fb03 ca19 	mls	sl, r3, r9, ip
 801775c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8017760:	2f09      	cmp	r7, #9
 8017762:	d81b      	bhi.n	801779c <_strtol_l.constprop.0+0xa8>
 8017764:	463c      	mov	r4, r7
 8017766:	42a3      	cmp	r3, r4
 8017768:	dd27      	ble.n	80177ba <_strtol_l.constprop.0+0xc6>
 801776a:	1c57      	adds	r7, r2, #1
 801776c:	d007      	beq.n	801777e <_strtol_l.constprop.0+0x8a>
 801776e:	4581      	cmp	r9, r0
 8017770:	d320      	bcc.n	80177b4 <_strtol_l.constprop.0+0xc0>
 8017772:	d101      	bne.n	8017778 <_strtol_l.constprop.0+0x84>
 8017774:	45a2      	cmp	sl, r4
 8017776:	db1d      	blt.n	80177b4 <_strtol_l.constprop.0+0xc0>
 8017778:	fb00 4003 	mla	r0, r0, r3, r4
 801777c:	2201      	movs	r2, #1
 801777e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017782:	e7eb      	b.n	801775c <_strtol_l.constprop.0+0x68>
 8017784:	2c2b      	cmp	r4, #43	@ 0x2b
 8017786:	bf04      	itt	eq
 8017788:	782c      	ldrbeq	r4, [r5, #0]
 801778a:	1c95      	addeq	r5, r2, #2
 801778c:	e7cf      	b.n	801772e <_strtol_l.constprop.0+0x3a>
 801778e:	2b00      	cmp	r3, #0
 8017790:	d1da      	bne.n	8017748 <_strtol_l.constprop.0+0x54>
 8017792:	2c30      	cmp	r4, #48	@ 0x30
 8017794:	bf0c      	ite	eq
 8017796:	2308      	moveq	r3, #8
 8017798:	230a      	movne	r3, #10
 801779a:	e7d5      	b.n	8017748 <_strtol_l.constprop.0+0x54>
 801779c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80177a0:	2f19      	cmp	r7, #25
 80177a2:	d801      	bhi.n	80177a8 <_strtol_l.constprop.0+0xb4>
 80177a4:	3c37      	subs	r4, #55	@ 0x37
 80177a6:	e7de      	b.n	8017766 <_strtol_l.constprop.0+0x72>
 80177a8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80177ac:	2f19      	cmp	r7, #25
 80177ae:	d804      	bhi.n	80177ba <_strtol_l.constprop.0+0xc6>
 80177b0:	3c57      	subs	r4, #87	@ 0x57
 80177b2:	e7d8      	b.n	8017766 <_strtol_l.constprop.0+0x72>
 80177b4:	f04f 32ff 	mov.w	r2, #4294967295
 80177b8:	e7e1      	b.n	801777e <_strtol_l.constprop.0+0x8a>
 80177ba:	1c53      	adds	r3, r2, #1
 80177bc:	d108      	bne.n	80177d0 <_strtol_l.constprop.0+0xdc>
 80177be:	2322      	movs	r3, #34	@ 0x22
 80177c0:	f8ce 3000 	str.w	r3, [lr]
 80177c4:	4660      	mov	r0, ip
 80177c6:	f1b8 0f00 	cmp.w	r8, #0
 80177ca:	d0a0      	beq.n	801770e <_strtol_l.constprop.0+0x1a>
 80177cc:	1e69      	subs	r1, r5, #1
 80177ce:	e006      	b.n	80177de <_strtol_l.constprop.0+0xea>
 80177d0:	b106      	cbz	r6, 80177d4 <_strtol_l.constprop.0+0xe0>
 80177d2:	4240      	negs	r0, r0
 80177d4:	f1b8 0f00 	cmp.w	r8, #0
 80177d8:	d099      	beq.n	801770e <_strtol_l.constprop.0+0x1a>
 80177da:	2a00      	cmp	r2, #0
 80177dc:	d1f6      	bne.n	80177cc <_strtol_l.constprop.0+0xd8>
 80177de:	f8c8 1000 	str.w	r1, [r8]
 80177e2:	e794      	b.n	801770e <_strtol_l.constprop.0+0x1a>
 80177e4:	0801a021 	.word	0x0801a021

080177e8 <strtol>:
 80177e8:	4613      	mov	r3, r2
 80177ea:	460a      	mov	r2, r1
 80177ec:	4601      	mov	r1, r0
 80177ee:	4802      	ldr	r0, [pc, #8]	@ (80177f8 <strtol+0x10>)
 80177f0:	6800      	ldr	r0, [r0, #0]
 80177f2:	f7ff bf7f 	b.w	80176f4 <_strtol_l.constprop.0>
 80177f6:	bf00      	nop
 80177f8:	24000260 	.word	0x24000260

080177fc <std>:
 80177fc:	2300      	movs	r3, #0
 80177fe:	b510      	push	{r4, lr}
 8017800:	4604      	mov	r4, r0
 8017802:	e9c0 3300 	strd	r3, r3, [r0]
 8017806:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801780a:	6083      	str	r3, [r0, #8]
 801780c:	8181      	strh	r1, [r0, #12]
 801780e:	6643      	str	r3, [r0, #100]	@ 0x64
 8017810:	81c2      	strh	r2, [r0, #14]
 8017812:	6183      	str	r3, [r0, #24]
 8017814:	4619      	mov	r1, r3
 8017816:	2208      	movs	r2, #8
 8017818:	305c      	adds	r0, #92	@ 0x5c
 801781a:	f000 f8f4 	bl	8017a06 <memset>
 801781e:	4b0d      	ldr	r3, [pc, #52]	@ (8017854 <std+0x58>)
 8017820:	6263      	str	r3, [r4, #36]	@ 0x24
 8017822:	4b0d      	ldr	r3, [pc, #52]	@ (8017858 <std+0x5c>)
 8017824:	62a3      	str	r3, [r4, #40]	@ 0x28
 8017826:	4b0d      	ldr	r3, [pc, #52]	@ (801785c <std+0x60>)
 8017828:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801782a:	4b0d      	ldr	r3, [pc, #52]	@ (8017860 <std+0x64>)
 801782c:	6323      	str	r3, [r4, #48]	@ 0x30
 801782e:	4b0d      	ldr	r3, [pc, #52]	@ (8017864 <std+0x68>)
 8017830:	6224      	str	r4, [r4, #32]
 8017832:	429c      	cmp	r4, r3
 8017834:	d006      	beq.n	8017844 <std+0x48>
 8017836:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801783a:	4294      	cmp	r4, r2
 801783c:	d002      	beq.n	8017844 <std+0x48>
 801783e:	33d0      	adds	r3, #208	@ 0xd0
 8017840:	429c      	cmp	r4, r3
 8017842:	d105      	bne.n	8017850 <std+0x54>
 8017844:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8017848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801784c:	f000 b972 	b.w	8017b34 <__retarget_lock_init_recursive>
 8017850:	bd10      	pop	{r4, pc}
 8017852:	bf00      	nop
 8017854:	08017981 	.word	0x08017981
 8017858:	080179a3 	.word	0x080179a3
 801785c:	080179db 	.word	0x080179db
 8017860:	080179ff 	.word	0x080179ff
 8017864:	240057e0 	.word	0x240057e0

08017868 <stdio_exit_handler>:
 8017868:	4a02      	ldr	r2, [pc, #8]	@ (8017874 <stdio_exit_handler+0xc>)
 801786a:	4903      	ldr	r1, [pc, #12]	@ (8017878 <stdio_exit_handler+0x10>)
 801786c:	4803      	ldr	r0, [pc, #12]	@ (801787c <stdio_exit_handler+0x14>)
 801786e:	f000 b869 	b.w	8017944 <_fwalk_sglue>
 8017872:	bf00      	nop
 8017874:	240000e8 	.word	0x240000e8
 8017878:	08018e71 	.word	0x08018e71
 801787c:	24000264 	.word	0x24000264

08017880 <cleanup_stdio>:
 8017880:	6841      	ldr	r1, [r0, #4]
 8017882:	4b0c      	ldr	r3, [pc, #48]	@ (80178b4 <cleanup_stdio+0x34>)
 8017884:	4299      	cmp	r1, r3
 8017886:	b510      	push	{r4, lr}
 8017888:	4604      	mov	r4, r0
 801788a:	d001      	beq.n	8017890 <cleanup_stdio+0x10>
 801788c:	f001 faf0 	bl	8018e70 <_fflush_r>
 8017890:	68a1      	ldr	r1, [r4, #8]
 8017892:	4b09      	ldr	r3, [pc, #36]	@ (80178b8 <cleanup_stdio+0x38>)
 8017894:	4299      	cmp	r1, r3
 8017896:	d002      	beq.n	801789e <cleanup_stdio+0x1e>
 8017898:	4620      	mov	r0, r4
 801789a:	f001 fae9 	bl	8018e70 <_fflush_r>
 801789e:	68e1      	ldr	r1, [r4, #12]
 80178a0:	4b06      	ldr	r3, [pc, #24]	@ (80178bc <cleanup_stdio+0x3c>)
 80178a2:	4299      	cmp	r1, r3
 80178a4:	d004      	beq.n	80178b0 <cleanup_stdio+0x30>
 80178a6:	4620      	mov	r0, r4
 80178a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80178ac:	f001 bae0 	b.w	8018e70 <_fflush_r>
 80178b0:	bd10      	pop	{r4, pc}
 80178b2:	bf00      	nop
 80178b4:	240057e0 	.word	0x240057e0
 80178b8:	24005848 	.word	0x24005848
 80178bc:	240058b0 	.word	0x240058b0

080178c0 <global_stdio_init.part.0>:
 80178c0:	b510      	push	{r4, lr}
 80178c2:	4b0b      	ldr	r3, [pc, #44]	@ (80178f0 <global_stdio_init.part.0+0x30>)
 80178c4:	4c0b      	ldr	r4, [pc, #44]	@ (80178f4 <global_stdio_init.part.0+0x34>)
 80178c6:	4a0c      	ldr	r2, [pc, #48]	@ (80178f8 <global_stdio_init.part.0+0x38>)
 80178c8:	601a      	str	r2, [r3, #0]
 80178ca:	4620      	mov	r0, r4
 80178cc:	2200      	movs	r2, #0
 80178ce:	2104      	movs	r1, #4
 80178d0:	f7ff ff94 	bl	80177fc <std>
 80178d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80178d8:	2201      	movs	r2, #1
 80178da:	2109      	movs	r1, #9
 80178dc:	f7ff ff8e 	bl	80177fc <std>
 80178e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80178e4:	2202      	movs	r2, #2
 80178e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80178ea:	2112      	movs	r1, #18
 80178ec:	f7ff bf86 	b.w	80177fc <std>
 80178f0:	24005918 	.word	0x24005918
 80178f4:	240057e0 	.word	0x240057e0
 80178f8:	08017869 	.word	0x08017869

080178fc <__sfp_lock_acquire>:
 80178fc:	4801      	ldr	r0, [pc, #4]	@ (8017904 <__sfp_lock_acquire+0x8>)
 80178fe:	f000 b91a 	b.w	8017b36 <__retarget_lock_acquire_recursive>
 8017902:	bf00      	nop
 8017904:	24005921 	.word	0x24005921

08017908 <__sfp_lock_release>:
 8017908:	4801      	ldr	r0, [pc, #4]	@ (8017910 <__sfp_lock_release+0x8>)
 801790a:	f000 b915 	b.w	8017b38 <__retarget_lock_release_recursive>
 801790e:	bf00      	nop
 8017910:	24005921 	.word	0x24005921

08017914 <__sinit>:
 8017914:	b510      	push	{r4, lr}
 8017916:	4604      	mov	r4, r0
 8017918:	f7ff fff0 	bl	80178fc <__sfp_lock_acquire>
 801791c:	6a23      	ldr	r3, [r4, #32]
 801791e:	b11b      	cbz	r3, 8017928 <__sinit+0x14>
 8017920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017924:	f7ff bff0 	b.w	8017908 <__sfp_lock_release>
 8017928:	4b04      	ldr	r3, [pc, #16]	@ (801793c <__sinit+0x28>)
 801792a:	6223      	str	r3, [r4, #32]
 801792c:	4b04      	ldr	r3, [pc, #16]	@ (8017940 <__sinit+0x2c>)
 801792e:	681b      	ldr	r3, [r3, #0]
 8017930:	2b00      	cmp	r3, #0
 8017932:	d1f5      	bne.n	8017920 <__sinit+0xc>
 8017934:	f7ff ffc4 	bl	80178c0 <global_stdio_init.part.0>
 8017938:	e7f2      	b.n	8017920 <__sinit+0xc>
 801793a:	bf00      	nop
 801793c:	08017881 	.word	0x08017881
 8017940:	24005918 	.word	0x24005918

08017944 <_fwalk_sglue>:
 8017944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017948:	4607      	mov	r7, r0
 801794a:	4688      	mov	r8, r1
 801794c:	4614      	mov	r4, r2
 801794e:	2600      	movs	r6, #0
 8017950:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017954:	f1b9 0901 	subs.w	r9, r9, #1
 8017958:	d505      	bpl.n	8017966 <_fwalk_sglue+0x22>
 801795a:	6824      	ldr	r4, [r4, #0]
 801795c:	2c00      	cmp	r4, #0
 801795e:	d1f7      	bne.n	8017950 <_fwalk_sglue+0xc>
 8017960:	4630      	mov	r0, r6
 8017962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017966:	89ab      	ldrh	r3, [r5, #12]
 8017968:	2b01      	cmp	r3, #1
 801796a:	d907      	bls.n	801797c <_fwalk_sglue+0x38>
 801796c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017970:	3301      	adds	r3, #1
 8017972:	d003      	beq.n	801797c <_fwalk_sglue+0x38>
 8017974:	4629      	mov	r1, r5
 8017976:	4638      	mov	r0, r7
 8017978:	47c0      	blx	r8
 801797a:	4306      	orrs	r6, r0
 801797c:	3568      	adds	r5, #104	@ 0x68
 801797e:	e7e9      	b.n	8017954 <_fwalk_sglue+0x10>

08017980 <__sread>:
 8017980:	b510      	push	{r4, lr}
 8017982:	460c      	mov	r4, r1
 8017984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017988:	f000 f886 	bl	8017a98 <_read_r>
 801798c:	2800      	cmp	r0, #0
 801798e:	bfab      	itete	ge
 8017990:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8017992:	89a3      	ldrhlt	r3, [r4, #12]
 8017994:	181b      	addge	r3, r3, r0
 8017996:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801799a:	bfac      	ite	ge
 801799c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801799e:	81a3      	strhlt	r3, [r4, #12]
 80179a0:	bd10      	pop	{r4, pc}

080179a2 <__swrite>:
 80179a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179a6:	461f      	mov	r7, r3
 80179a8:	898b      	ldrh	r3, [r1, #12]
 80179aa:	05db      	lsls	r3, r3, #23
 80179ac:	4605      	mov	r5, r0
 80179ae:	460c      	mov	r4, r1
 80179b0:	4616      	mov	r6, r2
 80179b2:	d505      	bpl.n	80179c0 <__swrite+0x1e>
 80179b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80179b8:	2302      	movs	r3, #2
 80179ba:	2200      	movs	r2, #0
 80179bc:	f000 f85a 	bl	8017a74 <_lseek_r>
 80179c0:	89a3      	ldrh	r3, [r4, #12]
 80179c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80179c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80179ca:	81a3      	strh	r3, [r4, #12]
 80179cc:	4632      	mov	r2, r6
 80179ce:	463b      	mov	r3, r7
 80179d0:	4628      	mov	r0, r5
 80179d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80179d6:	f000 b871 	b.w	8017abc <_write_r>

080179da <__sseek>:
 80179da:	b510      	push	{r4, lr}
 80179dc:	460c      	mov	r4, r1
 80179de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80179e2:	f000 f847 	bl	8017a74 <_lseek_r>
 80179e6:	1c43      	adds	r3, r0, #1
 80179e8:	89a3      	ldrh	r3, [r4, #12]
 80179ea:	bf15      	itete	ne
 80179ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80179ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80179f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80179f6:	81a3      	strheq	r3, [r4, #12]
 80179f8:	bf18      	it	ne
 80179fa:	81a3      	strhne	r3, [r4, #12]
 80179fc:	bd10      	pop	{r4, pc}

080179fe <__sclose>:
 80179fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a02:	f000 b827 	b.w	8017a54 <_close_r>

08017a06 <memset>:
 8017a06:	4402      	add	r2, r0
 8017a08:	4603      	mov	r3, r0
 8017a0a:	4293      	cmp	r3, r2
 8017a0c:	d100      	bne.n	8017a10 <memset+0xa>
 8017a0e:	4770      	bx	lr
 8017a10:	f803 1b01 	strb.w	r1, [r3], #1
 8017a14:	e7f9      	b.n	8017a0a <memset+0x4>

08017a16 <strchr>:
 8017a16:	b2c9      	uxtb	r1, r1
 8017a18:	4603      	mov	r3, r0
 8017a1a:	4618      	mov	r0, r3
 8017a1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017a20:	b112      	cbz	r2, 8017a28 <strchr+0x12>
 8017a22:	428a      	cmp	r2, r1
 8017a24:	d1f9      	bne.n	8017a1a <strchr+0x4>
 8017a26:	4770      	bx	lr
 8017a28:	2900      	cmp	r1, #0
 8017a2a:	bf18      	it	ne
 8017a2c:	2000      	movne	r0, #0
 8017a2e:	4770      	bx	lr

08017a30 <strncmp>:
 8017a30:	b510      	push	{r4, lr}
 8017a32:	b16a      	cbz	r2, 8017a50 <strncmp+0x20>
 8017a34:	3901      	subs	r1, #1
 8017a36:	1884      	adds	r4, r0, r2
 8017a38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017a3c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017a40:	429a      	cmp	r2, r3
 8017a42:	d103      	bne.n	8017a4c <strncmp+0x1c>
 8017a44:	42a0      	cmp	r0, r4
 8017a46:	d001      	beq.n	8017a4c <strncmp+0x1c>
 8017a48:	2a00      	cmp	r2, #0
 8017a4a:	d1f5      	bne.n	8017a38 <strncmp+0x8>
 8017a4c:	1ad0      	subs	r0, r2, r3
 8017a4e:	bd10      	pop	{r4, pc}
 8017a50:	4610      	mov	r0, r2
 8017a52:	e7fc      	b.n	8017a4e <strncmp+0x1e>

08017a54 <_close_r>:
 8017a54:	b538      	push	{r3, r4, r5, lr}
 8017a56:	4d06      	ldr	r5, [pc, #24]	@ (8017a70 <_close_r+0x1c>)
 8017a58:	2300      	movs	r3, #0
 8017a5a:	4604      	mov	r4, r0
 8017a5c:	4608      	mov	r0, r1
 8017a5e:	602b      	str	r3, [r5, #0]
 8017a60:	f7ec fe8e 	bl	8004780 <_close>
 8017a64:	1c43      	adds	r3, r0, #1
 8017a66:	d102      	bne.n	8017a6e <_close_r+0x1a>
 8017a68:	682b      	ldr	r3, [r5, #0]
 8017a6a:	b103      	cbz	r3, 8017a6e <_close_r+0x1a>
 8017a6c:	6023      	str	r3, [r4, #0]
 8017a6e:	bd38      	pop	{r3, r4, r5, pc}
 8017a70:	2400591c 	.word	0x2400591c

08017a74 <_lseek_r>:
 8017a74:	b538      	push	{r3, r4, r5, lr}
 8017a76:	4d07      	ldr	r5, [pc, #28]	@ (8017a94 <_lseek_r+0x20>)
 8017a78:	4604      	mov	r4, r0
 8017a7a:	4608      	mov	r0, r1
 8017a7c:	4611      	mov	r1, r2
 8017a7e:	2200      	movs	r2, #0
 8017a80:	602a      	str	r2, [r5, #0]
 8017a82:	461a      	mov	r2, r3
 8017a84:	f7ec fea3 	bl	80047ce <_lseek>
 8017a88:	1c43      	adds	r3, r0, #1
 8017a8a:	d102      	bne.n	8017a92 <_lseek_r+0x1e>
 8017a8c:	682b      	ldr	r3, [r5, #0]
 8017a8e:	b103      	cbz	r3, 8017a92 <_lseek_r+0x1e>
 8017a90:	6023      	str	r3, [r4, #0]
 8017a92:	bd38      	pop	{r3, r4, r5, pc}
 8017a94:	2400591c 	.word	0x2400591c

08017a98 <_read_r>:
 8017a98:	b538      	push	{r3, r4, r5, lr}
 8017a9a:	4d07      	ldr	r5, [pc, #28]	@ (8017ab8 <_read_r+0x20>)
 8017a9c:	4604      	mov	r4, r0
 8017a9e:	4608      	mov	r0, r1
 8017aa0:	4611      	mov	r1, r2
 8017aa2:	2200      	movs	r2, #0
 8017aa4:	602a      	str	r2, [r5, #0]
 8017aa6:	461a      	mov	r2, r3
 8017aa8:	f7ec fe31 	bl	800470e <_read>
 8017aac:	1c43      	adds	r3, r0, #1
 8017aae:	d102      	bne.n	8017ab6 <_read_r+0x1e>
 8017ab0:	682b      	ldr	r3, [r5, #0]
 8017ab2:	b103      	cbz	r3, 8017ab6 <_read_r+0x1e>
 8017ab4:	6023      	str	r3, [r4, #0]
 8017ab6:	bd38      	pop	{r3, r4, r5, pc}
 8017ab8:	2400591c 	.word	0x2400591c

08017abc <_write_r>:
 8017abc:	b538      	push	{r3, r4, r5, lr}
 8017abe:	4d07      	ldr	r5, [pc, #28]	@ (8017adc <_write_r+0x20>)
 8017ac0:	4604      	mov	r4, r0
 8017ac2:	4608      	mov	r0, r1
 8017ac4:	4611      	mov	r1, r2
 8017ac6:	2200      	movs	r2, #0
 8017ac8:	602a      	str	r2, [r5, #0]
 8017aca:	461a      	mov	r2, r3
 8017acc:	f7ec fe3c 	bl	8004748 <_write>
 8017ad0:	1c43      	adds	r3, r0, #1
 8017ad2:	d102      	bne.n	8017ada <_write_r+0x1e>
 8017ad4:	682b      	ldr	r3, [r5, #0]
 8017ad6:	b103      	cbz	r3, 8017ada <_write_r+0x1e>
 8017ad8:	6023      	str	r3, [r4, #0]
 8017ada:	bd38      	pop	{r3, r4, r5, pc}
 8017adc:	2400591c 	.word	0x2400591c

08017ae0 <__errno>:
 8017ae0:	4b01      	ldr	r3, [pc, #4]	@ (8017ae8 <__errno+0x8>)
 8017ae2:	6818      	ldr	r0, [r3, #0]
 8017ae4:	4770      	bx	lr
 8017ae6:	bf00      	nop
 8017ae8:	24000260 	.word	0x24000260

08017aec <__libc_init_array>:
 8017aec:	b570      	push	{r4, r5, r6, lr}
 8017aee:	4d0d      	ldr	r5, [pc, #52]	@ (8017b24 <__libc_init_array+0x38>)
 8017af0:	4c0d      	ldr	r4, [pc, #52]	@ (8017b28 <__libc_init_array+0x3c>)
 8017af2:	1b64      	subs	r4, r4, r5
 8017af4:	10a4      	asrs	r4, r4, #2
 8017af6:	2600      	movs	r6, #0
 8017af8:	42a6      	cmp	r6, r4
 8017afa:	d109      	bne.n	8017b10 <__libc_init_array+0x24>
 8017afc:	4d0b      	ldr	r5, [pc, #44]	@ (8017b2c <__libc_init_array+0x40>)
 8017afe:	4c0c      	ldr	r4, [pc, #48]	@ (8017b30 <__libc_init_array+0x44>)
 8017b00:	f001 ff9a 	bl	8019a38 <_init>
 8017b04:	1b64      	subs	r4, r4, r5
 8017b06:	10a4      	asrs	r4, r4, #2
 8017b08:	2600      	movs	r6, #0
 8017b0a:	42a6      	cmp	r6, r4
 8017b0c:	d105      	bne.n	8017b1a <__libc_init_array+0x2e>
 8017b0e:	bd70      	pop	{r4, r5, r6, pc}
 8017b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8017b14:	4798      	blx	r3
 8017b16:	3601      	adds	r6, #1
 8017b18:	e7ee      	b.n	8017af8 <__libc_init_array+0xc>
 8017b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8017b1e:	4798      	blx	r3
 8017b20:	3601      	adds	r6, #1
 8017b22:	e7f2      	b.n	8017b0a <__libc_init_array+0x1e>
 8017b24:	0801ac10 	.word	0x0801ac10
 8017b28:	0801ac10 	.word	0x0801ac10
 8017b2c:	0801ac10 	.word	0x0801ac10
 8017b30:	0801ac14 	.word	0x0801ac14

08017b34 <__retarget_lock_init_recursive>:
 8017b34:	4770      	bx	lr

08017b36 <__retarget_lock_acquire_recursive>:
 8017b36:	4770      	bx	lr

08017b38 <__retarget_lock_release_recursive>:
 8017b38:	4770      	bx	lr

08017b3a <memcpy>:
 8017b3a:	440a      	add	r2, r1
 8017b3c:	4291      	cmp	r1, r2
 8017b3e:	f100 33ff 	add.w	r3, r0, #4294967295
 8017b42:	d100      	bne.n	8017b46 <memcpy+0xc>
 8017b44:	4770      	bx	lr
 8017b46:	b510      	push	{r4, lr}
 8017b48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017b4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017b50:	4291      	cmp	r1, r2
 8017b52:	d1f9      	bne.n	8017b48 <memcpy+0xe>
 8017b54:	bd10      	pop	{r4, pc}
	...

08017b58 <nan>:
 8017b58:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8017b60 <nan+0x8>
 8017b5c:	4770      	bx	lr
 8017b5e:	bf00      	nop
 8017b60:	00000000 	.word	0x00000000
 8017b64:	7ff80000 	.word	0x7ff80000

08017b68 <_free_r>:
 8017b68:	b538      	push	{r3, r4, r5, lr}
 8017b6a:	4605      	mov	r5, r0
 8017b6c:	2900      	cmp	r1, #0
 8017b6e:	d041      	beq.n	8017bf4 <_free_r+0x8c>
 8017b70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017b74:	1f0c      	subs	r4, r1, #4
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	bfb8      	it	lt
 8017b7a:	18e4      	addlt	r4, r4, r3
 8017b7c:	f000 fc2c 	bl	80183d8 <__malloc_lock>
 8017b80:	4a1d      	ldr	r2, [pc, #116]	@ (8017bf8 <_free_r+0x90>)
 8017b82:	6813      	ldr	r3, [r2, #0]
 8017b84:	b933      	cbnz	r3, 8017b94 <_free_r+0x2c>
 8017b86:	6063      	str	r3, [r4, #4]
 8017b88:	6014      	str	r4, [r2, #0]
 8017b8a:	4628      	mov	r0, r5
 8017b8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017b90:	f000 bc28 	b.w	80183e4 <__malloc_unlock>
 8017b94:	42a3      	cmp	r3, r4
 8017b96:	d908      	bls.n	8017baa <_free_r+0x42>
 8017b98:	6820      	ldr	r0, [r4, #0]
 8017b9a:	1821      	adds	r1, r4, r0
 8017b9c:	428b      	cmp	r3, r1
 8017b9e:	bf01      	itttt	eq
 8017ba0:	6819      	ldreq	r1, [r3, #0]
 8017ba2:	685b      	ldreq	r3, [r3, #4]
 8017ba4:	1809      	addeq	r1, r1, r0
 8017ba6:	6021      	streq	r1, [r4, #0]
 8017ba8:	e7ed      	b.n	8017b86 <_free_r+0x1e>
 8017baa:	461a      	mov	r2, r3
 8017bac:	685b      	ldr	r3, [r3, #4]
 8017bae:	b10b      	cbz	r3, 8017bb4 <_free_r+0x4c>
 8017bb0:	42a3      	cmp	r3, r4
 8017bb2:	d9fa      	bls.n	8017baa <_free_r+0x42>
 8017bb4:	6811      	ldr	r1, [r2, #0]
 8017bb6:	1850      	adds	r0, r2, r1
 8017bb8:	42a0      	cmp	r0, r4
 8017bba:	d10b      	bne.n	8017bd4 <_free_r+0x6c>
 8017bbc:	6820      	ldr	r0, [r4, #0]
 8017bbe:	4401      	add	r1, r0
 8017bc0:	1850      	adds	r0, r2, r1
 8017bc2:	4283      	cmp	r3, r0
 8017bc4:	6011      	str	r1, [r2, #0]
 8017bc6:	d1e0      	bne.n	8017b8a <_free_r+0x22>
 8017bc8:	6818      	ldr	r0, [r3, #0]
 8017bca:	685b      	ldr	r3, [r3, #4]
 8017bcc:	6053      	str	r3, [r2, #4]
 8017bce:	4408      	add	r0, r1
 8017bd0:	6010      	str	r0, [r2, #0]
 8017bd2:	e7da      	b.n	8017b8a <_free_r+0x22>
 8017bd4:	d902      	bls.n	8017bdc <_free_r+0x74>
 8017bd6:	230c      	movs	r3, #12
 8017bd8:	602b      	str	r3, [r5, #0]
 8017bda:	e7d6      	b.n	8017b8a <_free_r+0x22>
 8017bdc:	6820      	ldr	r0, [r4, #0]
 8017bde:	1821      	adds	r1, r4, r0
 8017be0:	428b      	cmp	r3, r1
 8017be2:	bf04      	itt	eq
 8017be4:	6819      	ldreq	r1, [r3, #0]
 8017be6:	685b      	ldreq	r3, [r3, #4]
 8017be8:	6063      	str	r3, [r4, #4]
 8017bea:	bf04      	itt	eq
 8017bec:	1809      	addeq	r1, r1, r0
 8017bee:	6021      	streq	r1, [r4, #0]
 8017bf0:	6054      	str	r4, [r2, #4]
 8017bf2:	e7ca      	b.n	8017b8a <_free_r+0x22>
 8017bf4:	bd38      	pop	{r3, r4, r5, pc}
 8017bf6:	bf00      	nop
 8017bf8:	24005928 	.word	0x24005928

08017bfc <rshift>:
 8017bfc:	6903      	ldr	r3, [r0, #16]
 8017bfe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8017c02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017c06:	ea4f 1261 	mov.w	r2, r1, asr #5
 8017c0a:	f100 0414 	add.w	r4, r0, #20
 8017c0e:	dd45      	ble.n	8017c9c <rshift+0xa0>
 8017c10:	f011 011f 	ands.w	r1, r1, #31
 8017c14:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017c18:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8017c1c:	d10c      	bne.n	8017c38 <rshift+0x3c>
 8017c1e:	f100 0710 	add.w	r7, r0, #16
 8017c22:	4629      	mov	r1, r5
 8017c24:	42b1      	cmp	r1, r6
 8017c26:	d334      	bcc.n	8017c92 <rshift+0x96>
 8017c28:	1a9b      	subs	r3, r3, r2
 8017c2a:	009b      	lsls	r3, r3, #2
 8017c2c:	1eea      	subs	r2, r5, #3
 8017c2e:	4296      	cmp	r6, r2
 8017c30:	bf38      	it	cc
 8017c32:	2300      	movcc	r3, #0
 8017c34:	4423      	add	r3, r4
 8017c36:	e015      	b.n	8017c64 <rshift+0x68>
 8017c38:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8017c3c:	f1c1 0820 	rsb	r8, r1, #32
 8017c40:	40cf      	lsrs	r7, r1
 8017c42:	f105 0e04 	add.w	lr, r5, #4
 8017c46:	46a1      	mov	r9, r4
 8017c48:	4576      	cmp	r6, lr
 8017c4a:	46f4      	mov	ip, lr
 8017c4c:	d815      	bhi.n	8017c7a <rshift+0x7e>
 8017c4e:	1a9a      	subs	r2, r3, r2
 8017c50:	0092      	lsls	r2, r2, #2
 8017c52:	3a04      	subs	r2, #4
 8017c54:	3501      	adds	r5, #1
 8017c56:	42ae      	cmp	r6, r5
 8017c58:	bf38      	it	cc
 8017c5a:	2200      	movcc	r2, #0
 8017c5c:	18a3      	adds	r3, r4, r2
 8017c5e:	50a7      	str	r7, [r4, r2]
 8017c60:	b107      	cbz	r7, 8017c64 <rshift+0x68>
 8017c62:	3304      	adds	r3, #4
 8017c64:	1b1a      	subs	r2, r3, r4
 8017c66:	42a3      	cmp	r3, r4
 8017c68:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017c6c:	bf08      	it	eq
 8017c6e:	2300      	moveq	r3, #0
 8017c70:	6102      	str	r2, [r0, #16]
 8017c72:	bf08      	it	eq
 8017c74:	6143      	streq	r3, [r0, #20]
 8017c76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017c7a:	f8dc c000 	ldr.w	ip, [ip]
 8017c7e:	fa0c fc08 	lsl.w	ip, ip, r8
 8017c82:	ea4c 0707 	orr.w	r7, ip, r7
 8017c86:	f849 7b04 	str.w	r7, [r9], #4
 8017c8a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017c8e:	40cf      	lsrs	r7, r1
 8017c90:	e7da      	b.n	8017c48 <rshift+0x4c>
 8017c92:	f851 cb04 	ldr.w	ip, [r1], #4
 8017c96:	f847 cf04 	str.w	ip, [r7, #4]!
 8017c9a:	e7c3      	b.n	8017c24 <rshift+0x28>
 8017c9c:	4623      	mov	r3, r4
 8017c9e:	e7e1      	b.n	8017c64 <rshift+0x68>

08017ca0 <__hexdig_fun>:
 8017ca0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8017ca4:	2b09      	cmp	r3, #9
 8017ca6:	d802      	bhi.n	8017cae <__hexdig_fun+0xe>
 8017ca8:	3820      	subs	r0, #32
 8017caa:	b2c0      	uxtb	r0, r0
 8017cac:	4770      	bx	lr
 8017cae:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8017cb2:	2b05      	cmp	r3, #5
 8017cb4:	d801      	bhi.n	8017cba <__hexdig_fun+0x1a>
 8017cb6:	3847      	subs	r0, #71	@ 0x47
 8017cb8:	e7f7      	b.n	8017caa <__hexdig_fun+0xa>
 8017cba:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8017cbe:	2b05      	cmp	r3, #5
 8017cc0:	d801      	bhi.n	8017cc6 <__hexdig_fun+0x26>
 8017cc2:	3827      	subs	r0, #39	@ 0x27
 8017cc4:	e7f1      	b.n	8017caa <__hexdig_fun+0xa>
 8017cc6:	2000      	movs	r0, #0
 8017cc8:	4770      	bx	lr
	...

08017ccc <__gethex>:
 8017ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cd0:	b085      	sub	sp, #20
 8017cd2:	468a      	mov	sl, r1
 8017cd4:	9302      	str	r3, [sp, #8]
 8017cd6:	680b      	ldr	r3, [r1, #0]
 8017cd8:	9001      	str	r0, [sp, #4]
 8017cda:	4690      	mov	r8, r2
 8017cdc:	1c9c      	adds	r4, r3, #2
 8017cde:	46a1      	mov	r9, r4
 8017ce0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8017ce4:	2830      	cmp	r0, #48	@ 0x30
 8017ce6:	d0fa      	beq.n	8017cde <__gethex+0x12>
 8017ce8:	eba9 0303 	sub.w	r3, r9, r3
 8017cec:	f1a3 0b02 	sub.w	fp, r3, #2
 8017cf0:	f7ff ffd6 	bl	8017ca0 <__hexdig_fun>
 8017cf4:	4605      	mov	r5, r0
 8017cf6:	2800      	cmp	r0, #0
 8017cf8:	d168      	bne.n	8017dcc <__gethex+0x100>
 8017cfa:	49a0      	ldr	r1, [pc, #640]	@ (8017f7c <__gethex+0x2b0>)
 8017cfc:	2201      	movs	r2, #1
 8017cfe:	4648      	mov	r0, r9
 8017d00:	f7ff fe96 	bl	8017a30 <strncmp>
 8017d04:	4607      	mov	r7, r0
 8017d06:	2800      	cmp	r0, #0
 8017d08:	d167      	bne.n	8017dda <__gethex+0x10e>
 8017d0a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8017d0e:	4626      	mov	r6, r4
 8017d10:	f7ff ffc6 	bl	8017ca0 <__hexdig_fun>
 8017d14:	2800      	cmp	r0, #0
 8017d16:	d062      	beq.n	8017dde <__gethex+0x112>
 8017d18:	4623      	mov	r3, r4
 8017d1a:	7818      	ldrb	r0, [r3, #0]
 8017d1c:	2830      	cmp	r0, #48	@ 0x30
 8017d1e:	4699      	mov	r9, r3
 8017d20:	f103 0301 	add.w	r3, r3, #1
 8017d24:	d0f9      	beq.n	8017d1a <__gethex+0x4e>
 8017d26:	f7ff ffbb 	bl	8017ca0 <__hexdig_fun>
 8017d2a:	fab0 f580 	clz	r5, r0
 8017d2e:	096d      	lsrs	r5, r5, #5
 8017d30:	f04f 0b01 	mov.w	fp, #1
 8017d34:	464a      	mov	r2, r9
 8017d36:	4616      	mov	r6, r2
 8017d38:	3201      	adds	r2, #1
 8017d3a:	7830      	ldrb	r0, [r6, #0]
 8017d3c:	f7ff ffb0 	bl	8017ca0 <__hexdig_fun>
 8017d40:	2800      	cmp	r0, #0
 8017d42:	d1f8      	bne.n	8017d36 <__gethex+0x6a>
 8017d44:	498d      	ldr	r1, [pc, #564]	@ (8017f7c <__gethex+0x2b0>)
 8017d46:	2201      	movs	r2, #1
 8017d48:	4630      	mov	r0, r6
 8017d4a:	f7ff fe71 	bl	8017a30 <strncmp>
 8017d4e:	2800      	cmp	r0, #0
 8017d50:	d13f      	bne.n	8017dd2 <__gethex+0x106>
 8017d52:	b944      	cbnz	r4, 8017d66 <__gethex+0x9a>
 8017d54:	1c74      	adds	r4, r6, #1
 8017d56:	4622      	mov	r2, r4
 8017d58:	4616      	mov	r6, r2
 8017d5a:	3201      	adds	r2, #1
 8017d5c:	7830      	ldrb	r0, [r6, #0]
 8017d5e:	f7ff ff9f 	bl	8017ca0 <__hexdig_fun>
 8017d62:	2800      	cmp	r0, #0
 8017d64:	d1f8      	bne.n	8017d58 <__gethex+0x8c>
 8017d66:	1ba4      	subs	r4, r4, r6
 8017d68:	00a7      	lsls	r7, r4, #2
 8017d6a:	7833      	ldrb	r3, [r6, #0]
 8017d6c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8017d70:	2b50      	cmp	r3, #80	@ 0x50
 8017d72:	d13e      	bne.n	8017df2 <__gethex+0x126>
 8017d74:	7873      	ldrb	r3, [r6, #1]
 8017d76:	2b2b      	cmp	r3, #43	@ 0x2b
 8017d78:	d033      	beq.n	8017de2 <__gethex+0x116>
 8017d7a:	2b2d      	cmp	r3, #45	@ 0x2d
 8017d7c:	d034      	beq.n	8017de8 <__gethex+0x11c>
 8017d7e:	1c71      	adds	r1, r6, #1
 8017d80:	2400      	movs	r4, #0
 8017d82:	7808      	ldrb	r0, [r1, #0]
 8017d84:	f7ff ff8c 	bl	8017ca0 <__hexdig_fun>
 8017d88:	1e43      	subs	r3, r0, #1
 8017d8a:	b2db      	uxtb	r3, r3
 8017d8c:	2b18      	cmp	r3, #24
 8017d8e:	d830      	bhi.n	8017df2 <__gethex+0x126>
 8017d90:	f1a0 0210 	sub.w	r2, r0, #16
 8017d94:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017d98:	f7ff ff82 	bl	8017ca0 <__hexdig_fun>
 8017d9c:	f100 3cff 	add.w	ip, r0, #4294967295
 8017da0:	fa5f fc8c 	uxtb.w	ip, ip
 8017da4:	f1bc 0f18 	cmp.w	ip, #24
 8017da8:	f04f 030a 	mov.w	r3, #10
 8017dac:	d91e      	bls.n	8017dec <__gethex+0x120>
 8017dae:	b104      	cbz	r4, 8017db2 <__gethex+0xe6>
 8017db0:	4252      	negs	r2, r2
 8017db2:	4417      	add	r7, r2
 8017db4:	f8ca 1000 	str.w	r1, [sl]
 8017db8:	b1ed      	cbz	r5, 8017df6 <__gethex+0x12a>
 8017dba:	f1bb 0f00 	cmp.w	fp, #0
 8017dbe:	bf0c      	ite	eq
 8017dc0:	2506      	moveq	r5, #6
 8017dc2:	2500      	movne	r5, #0
 8017dc4:	4628      	mov	r0, r5
 8017dc6:	b005      	add	sp, #20
 8017dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017dcc:	2500      	movs	r5, #0
 8017dce:	462c      	mov	r4, r5
 8017dd0:	e7b0      	b.n	8017d34 <__gethex+0x68>
 8017dd2:	2c00      	cmp	r4, #0
 8017dd4:	d1c7      	bne.n	8017d66 <__gethex+0x9a>
 8017dd6:	4627      	mov	r7, r4
 8017dd8:	e7c7      	b.n	8017d6a <__gethex+0x9e>
 8017dda:	464e      	mov	r6, r9
 8017ddc:	462f      	mov	r7, r5
 8017dde:	2501      	movs	r5, #1
 8017de0:	e7c3      	b.n	8017d6a <__gethex+0x9e>
 8017de2:	2400      	movs	r4, #0
 8017de4:	1cb1      	adds	r1, r6, #2
 8017de6:	e7cc      	b.n	8017d82 <__gethex+0xb6>
 8017de8:	2401      	movs	r4, #1
 8017dea:	e7fb      	b.n	8017de4 <__gethex+0x118>
 8017dec:	fb03 0002 	mla	r0, r3, r2, r0
 8017df0:	e7ce      	b.n	8017d90 <__gethex+0xc4>
 8017df2:	4631      	mov	r1, r6
 8017df4:	e7de      	b.n	8017db4 <__gethex+0xe8>
 8017df6:	eba6 0309 	sub.w	r3, r6, r9
 8017dfa:	3b01      	subs	r3, #1
 8017dfc:	4629      	mov	r1, r5
 8017dfe:	2b07      	cmp	r3, #7
 8017e00:	dc0a      	bgt.n	8017e18 <__gethex+0x14c>
 8017e02:	9801      	ldr	r0, [sp, #4]
 8017e04:	f000 faf4 	bl	80183f0 <_Balloc>
 8017e08:	4604      	mov	r4, r0
 8017e0a:	b940      	cbnz	r0, 8017e1e <__gethex+0x152>
 8017e0c:	4b5c      	ldr	r3, [pc, #368]	@ (8017f80 <__gethex+0x2b4>)
 8017e0e:	4602      	mov	r2, r0
 8017e10:	21e4      	movs	r1, #228	@ 0xe4
 8017e12:	485c      	ldr	r0, [pc, #368]	@ (8017f84 <__gethex+0x2b8>)
 8017e14:	f001 f864 	bl	8018ee0 <__assert_func>
 8017e18:	3101      	adds	r1, #1
 8017e1a:	105b      	asrs	r3, r3, #1
 8017e1c:	e7ef      	b.n	8017dfe <__gethex+0x132>
 8017e1e:	f100 0a14 	add.w	sl, r0, #20
 8017e22:	2300      	movs	r3, #0
 8017e24:	4655      	mov	r5, sl
 8017e26:	469b      	mov	fp, r3
 8017e28:	45b1      	cmp	r9, r6
 8017e2a:	d337      	bcc.n	8017e9c <__gethex+0x1d0>
 8017e2c:	f845 bb04 	str.w	fp, [r5], #4
 8017e30:	eba5 050a 	sub.w	r5, r5, sl
 8017e34:	10ad      	asrs	r5, r5, #2
 8017e36:	6125      	str	r5, [r4, #16]
 8017e38:	4658      	mov	r0, fp
 8017e3a:	f000 fbcb 	bl	80185d4 <__hi0bits>
 8017e3e:	016d      	lsls	r5, r5, #5
 8017e40:	f8d8 6000 	ldr.w	r6, [r8]
 8017e44:	1a2d      	subs	r5, r5, r0
 8017e46:	42b5      	cmp	r5, r6
 8017e48:	dd54      	ble.n	8017ef4 <__gethex+0x228>
 8017e4a:	1bad      	subs	r5, r5, r6
 8017e4c:	4629      	mov	r1, r5
 8017e4e:	4620      	mov	r0, r4
 8017e50:	f000 ff5c 	bl	8018d0c <__any_on>
 8017e54:	4681      	mov	r9, r0
 8017e56:	b178      	cbz	r0, 8017e78 <__gethex+0x1ac>
 8017e58:	1e6b      	subs	r3, r5, #1
 8017e5a:	1159      	asrs	r1, r3, #5
 8017e5c:	f003 021f 	and.w	r2, r3, #31
 8017e60:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8017e64:	f04f 0901 	mov.w	r9, #1
 8017e68:	fa09 f202 	lsl.w	r2, r9, r2
 8017e6c:	420a      	tst	r2, r1
 8017e6e:	d003      	beq.n	8017e78 <__gethex+0x1ac>
 8017e70:	454b      	cmp	r3, r9
 8017e72:	dc36      	bgt.n	8017ee2 <__gethex+0x216>
 8017e74:	f04f 0902 	mov.w	r9, #2
 8017e78:	4629      	mov	r1, r5
 8017e7a:	4620      	mov	r0, r4
 8017e7c:	f7ff febe 	bl	8017bfc <rshift>
 8017e80:	442f      	add	r7, r5
 8017e82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017e86:	42bb      	cmp	r3, r7
 8017e88:	da42      	bge.n	8017f10 <__gethex+0x244>
 8017e8a:	9801      	ldr	r0, [sp, #4]
 8017e8c:	4621      	mov	r1, r4
 8017e8e:	f000 faef 	bl	8018470 <_Bfree>
 8017e92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017e94:	2300      	movs	r3, #0
 8017e96:	6013      	str	r3, [r2, #0]
 8017e98:	25a3      	movs	r5, #163	@ 0xa3
 8017e9a:	e793      	b.n	8017dc4 <__gethex+0xf8>
 8017e9c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8017ea0:	2a2e      	cmp	r2, #46	@ 0x2e
 8017ea2:	d012      	beq.n	8017eca <__gethex+0x1fe>
 8017ea4:	2b20      	cmp	r3, #32
 8017ea6:	d104      	bne.n	8017eb2 <__gethex+0x1e6>
 8017ea8:	f845 bb04 	str.w	fp, [r5], #4
 8017eac:	f04f 0b00 	mov.w	fp, #0
 8017eb0:	465b      	mov	r3, fp
 8017eb2:	7830      	ldrb	r0, [r6, #0]
 8017eb4:	9303      	str	r3, [sp, #12]
 8017eb6:	f7ff fef3 	bl	8017ca0 <__hexdig_fun>
 8017eba:	9b03      	ldr	r3, [sp, #12]
 8017ebc:	f000 000f 	and.w	r0, r0, #15
 8017ec0:	4098      	lsls	r0, r3
 8017ec2:	ea4b 0b00 	orr.w	fp, fp, r0
 8017ec6:	3304      	adds	r3, #4
 8017ec8:	e7ae      	b.n	8017e28 <__gethex+0x15c>
 8017eca:	45b1      	cmp	r9, r6
 8017ecc:	d8ea      	bhi.n	8017ea4 <__gethex+0x1d8>
 8017ece:	492b      	ldr	r1, [pc, #172]	@ (8017f7c <__gethex+0x2b0>)
 8017ed0:	9303      	str	r3, [sp, #12]
 8017ed2:	2201      	movs	r2, #1
 8017ed4:	4630      	mov	r0, r6
 8017ed6:	f7ff fdab 	bl	8017a30 <strncmp>
 8017eda:	9b03      	ldr	r3, [sp, #12]
 8017edc:	2800      	cmp	r0, #0
 8017ede:	d1e1      	bne.n	8017ea4 <__gethex+0x1d8>
 8017ee0:	e7a2      	b.n	8017e28 <__gethex+0x15c>
 8017ee2:	1ea9      	subs	r1, r5, #2
 8017ee4:	4620      	mov	r0, r4
 8017ee6:	f000 ff11 	bl	8018d0c <__any_on>
 8017eea:	2800      	cmp	r0, #0
 8017eec:	d0c2      	beq.n	8017e74 <__gethex+0x1a8>
 8017eee:	f04f 0903 	mov.w	r9, #3
 8017ef2:	e7c1      	b.n	8017e78 <__gethex+0x1ac>
 8017ef4:	da09      	bge.n	8017f0a <__gethex+0x23e>
 8017ef6:	1b75      	subs	r5, r6, r5
 8017ef8:	4621      	mov	r1, r4
 8017efa:	9801      	ldr	r0, [sp, #4]
 8017efc:	462a      	mov	r2, r5
 8017efe:	f000 fccf 	bl	80188a0 <__lshift>
 8017f02:	1b7f      	subs	r7, r7, r5
 8017f04:	4604      	mov	r4, r0
 8017f06:	f100 0a14 	add.w	sl, r0, #20
 8017f0a:	f04f 0900 	mov.w	r9, #0
 8017f0e:	e7b8      	b.n	8017e82 <__gethex+0x1b6>
 8017f10:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8017f14:	42bd      	cmp	r5, r7
 8017f16:	dd6f      	ble.n	8017ff8 <__gethex+0x32c>
 8017f18:	1bed      	subs	r5, r5, r7
 8017f1a:	42ae      	cmp	r6, r5
 8017f1c:	dc34      	bgt.n	8017f88 <__gethex+0x2bc>
 8017f1e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017f22:	2b02      	cmp	r3, #2
 8017f24:	d022      	beq.n	8017f6c <__gethex+0x2a0>
 8017f26:	2b03      	cmp	r3, #3
 8017f28:	d024      	beq.n	8017f74 <__gethex+0x2a8>
 8017f2a:	2b01      	cmp	r3, #1
 8017f2c:	d115      	bne.n	8017f5a <__gethex+0x28e>
 8017f2e:	42ae      	cmp	r6, r5
 8017f30:	d113      	bne.n	8017f5a <__gethex+0x28e>
 8017f32:	2e01      	cmp	r6, #1
 8017f34:	d10b      	bne.n	8017f4e <__gethex+0x282>
 8017f36:	9a02      	ldr	r2, [sp, #8]
 8017f38:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017f3c:	6013      	str	r3, [r2, #0]
 8017f3e:	2301      	movs	r3, #1
 8017f40:	6123      	str	r3, [r4, #16]
 8017f42:	f8ca 3000 	str.w	r3, [sl]
 8017f46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017f48:	2562      	movs	r5, #98	@ 0x62
 8017f4a:	601c      	str	r4, [r3, #0]
 8017f4c:	e73a      	b.n	8017dc4 <__gethex+0xf8>
 8017f4e:	1e71      	subs	r1, r6, #1
 8017f50:	4620      	mov	r0, r4
 8017f52:	f000 fedb 	bl	8018d0c <__any_on>
 8017f56:	2800      	cmp	r0, #0
 8017f58:	d1ed      	bne.n	8017f36 <__gethex+0x26a>
 8017f5a:	9801      	ldr	r0, [sp, #4]
 8017f5c:	4621      	mov	r1, r4
 8017f5e:	f000 fa87 	bl	8018470 <_Bfree>
 8017f62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017f64:	2300      	movs	r3, #0
 8017f66:	6013      	str	r3, [r2, #0]
 8017f68:	2550      	movs	r5, #80	@ 0x50
 8017f6a:	e72b      	b.n	8017dc4 <__gethex+0xf8>
 8017f6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017f6e:	2b00      	cmp	r3, #0
 8017f70:	d1f3      	bne.n	8017f5a <__gethex+0x28e>
 8017f72:	e7e0      	b.n	8017f36 <__gethex+0x26a>
 8017f74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d1dd      	bne.n	8017f36 <__gethex+0x26a>
 8017f7a:	e7ee      	b.n	8017f5a <__gethex+0x28e>
 8017f7c:	08019fc0 	.word	0x08019fc0
 8017f80:	0801a129 	.word	0x0801a129
 8017f84:	0801a13a 	.word	0x0801a13a
 8017f88:	1e6f      	subs	r7, r5, #1
 8017f8a:	f1b9 0f00 	cmp.w	r9, #0
 8017f8e:	d130      	bne.n	8017ff2 <__gethex+0x326>
 8017f90:	b127      	cbz	r7, 8017f9c <__gethex+0x2d0>
 8017f92:	4639      	mov	r1, r7
 8017f94:	4620      	mov	r0, r4
 8017f96:	f000 feb9 	bl	8018d0c <__any_on>
 8017f9a:	4681      	mov	r9, r0
 8017f9c:	117a      	asrs	r2, r7, #5
 8017f9e:	2301      	movs	r3, #1
 8017fa0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8017fa4:	f007 071f 	and.w	r7, r7, #31
 8017fa8:	40bb      	lsls	r3, r7
 8017faa:	4213      	tst	r3, r2
 8017fac:	4629      	mov	r1, r5
 8017fae:	4620      	mov	r0, r4
 8017fb0:	bf18      	it	ne
 8017fb2:	f049 0902 	orrne.w	r9, r9, #2
 8017fb6:	f7ff fe21 	bl	8017bfc <rshift>
 8017fba:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8017fbe:	1b76      	subs	r6, r6, r5
 8017fc0:	2502      	movs	r5, #2
 8017fc2:	f1b9 0f00 	cmp.w	r9, #0
 8017fc6:	d047      	beq.n	8018058 <__gethex+0x38c>
 8017fc8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017fcc:	2b02      	cmp	r3, #2
 8017fce:	d015      	beq.n	8017ffc <__gethex+0x330>
 8017fd0:	2b03      	cmp	r3, #3
 8017fd2:	d017      	beq.n	8018004 <__gethex+0x338>
 8017fd4:	2b01      	cmp	r3, #1
 8017fd6:	d109      	bne.n	8017fec <__gethex+0x320>
 8017fd8:	f019 0f02 	tst.w	r9, #2
 8017fdc:	d006      	beq.n	8017fec <__gethex+0x320>
 8017fde:	f8da 3000 	ldr.w	r3, [sl]
 8017fe2:	ea49 0903 	orr.w	r9, r9, r3
 8017fe6:	f019 0f01 	tst.w	r9, #1
 8017fea:	d10e      	bne.n	801800a <__gethex+0x33e>
 8017fec:	f045 0510 	orr.w	r5, r5, #16
 8017ff0:	e032      	b.n	8018058 <__gethex+0x38c>
 8017ff2:	f04f 0901 	mov.w	r9, #1
 8017ff6:	e7d1      	b.n	8017f9c <__gethex+0x2d0>
 8017ff8:	2501      	movs	r5, #1
 8017ffa:	e7e2      	b.n	8017fc2 <__gethex+0x2f6>
 8017ffc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017ffe:	f1c3 0301 	rsb	r3, r3, #1
 8018002:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018004:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018006:	2b00      	cmp	r3, #0
 8018008:	d0f0      	beq.n	8017fec <__gethex+0x320>
 801800a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801800e:	f104 0314 	add.w	r3, r4, #20
 8018012:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8018016:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801801a:	f04f 0c00 	mov.w	ip, #0
 801801e:	4618      	mov	r0, r3
 8018020:	f853 2b04 	ldr.w	r2, [r3], #4
 8018024:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018028:	d01b      	beq.n	8018062 <__gethex+0x396>
 801802a:	3201      	adds	r2, #1
 801802c:	6002      	str	r2, [r0, #0]
 801802e:	2d02      	cmp	r5, #2
 8018030:	f104 0314 	add.w	r3, r4, #20
 8018034:	d13c      	bne.n	80180b0 <__gethex+0x3e4>
 8018036:	f8d8 2000 	ldr.w	r2, [r8]
 801803a:	3a01      	subs	r2, #1
 801803c:	42b2      	cmp	r2, r6
 801803e:	d109      	bne.n	8018054 <__gethex+0x388>
 8018040:	1171      	asrs	r1, r6, #5
 8018042:	2201      	movs	r2, #1
 8018044:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018048:	f006 061f 	and.w	r6, r6, #31
 801804c:	fa02 f606 	lsl.w	r6, r2, r6
 8018050:	421e      	tst	r6, r3
 8018052:	d13a      	bne.n	80180ca <__gethex+0x3fe>
 8018054:	f045 0520 	orr.w	r5, r5, #32
 8018058:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801805a:	601c      	str	r4, [r3, #0]
 801805c:	9b02      	ldr	r3, [sp, #8]
 801805e:	601f      	str	r7, [r3, #0]
 8018060:	e6b0      	b.n	8017dc4 <__gethex+0xf8>
 8018062:	4299      	cmp	r1, r3
 8018064:	f843 cc04 	str.w	ip, [r3, #-4]
 8018068:	d8d9      	bhi.n	801801e <__gethex+0x352>
 801806a:	68a3      	ldr	r3, [r4, #8]
 801806c:	459b      	cmp	fp, r3
 801806e:	db17      	blt.n	80180a0 <__gethex+0x3d4>
 8018070:	6861      	ldr	r1, [r4, #4]
 8018072:	9801      	ldr	r0, [sp, #4]
 8018074:	3101      	adds	r1, #1
 8018076:	f000 f9bb 	bl	80183f0 <_Balloc>
 801807a:	4681      	mov	r9, r0
 801807c:	b918      	cbnz	r0, 8018086 <__gethex+0x3ba>
 801807e:	4b1a      	ldr	r3, [pc, #104]	@ (80180e8 <__gethex+0x41c>)
 8018080:	4602      	mov	r2, r0
 8018082:	2184      	movs	r1, #132	@ 0x84
 8018084:	e6c5      	b.n	8017e12 <__gethex+0x146>
 8018086:	6922      	ldr	r2, [r4, #16]
 8018088:	3202      	adds	r2, #2
 801808a:	f104 010c 	add.w	r1, r4, #12
 801808e:	0092      	lsls	r2, r2, #2
 8018090:	300c      	adds	r0, #12
 8018092:	f7ff fd52 	bl	8017b3a <memcpy>
 8018096:	4621      	mov	r1, r4
 8018098:	9801      	ldr	r0, [sp, #4]
 801809a:	f000 f9e9 	bl	8018470 <_Bfree>
 801809e:	464c      	mov	r4, r9
 80180a0:	6923      	ldr	r3, [r4, #16]
 80180a2:	1c5a      	adds	r2, r3, #1
 80180a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80180a8:	6122      	str	r2, [r4, #16]
 80180aa:	2201      	movs	r2, #1
 80180ac:	615a      	str	r2, [r3, #20]
 80180ae:	e7be      	b.n	801802e <__gethex+0x362>
 80180b0:	6922      	ldr	r2, [r4, #16]
 80180b2:	455a      	cmp	r2, fp
 80180b4:	dd0b      	ble.n	80180ce <__gethex+0x402>
 80180b6:	2101      	movs	r1, #1
 80180b8:	4620      	mov	r0, r4
 80180ba:	f7ff fd9f 	bl	8017bfc <rshift>
 80180be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80180c2:	3701      	adds	r7, #1
 80180c4:	42bb      	cmp	r3, r7
 80180c6:	f6ff aee0 	blt.w	8017e8a <__gethex+0x1be>
 80180ca:	2501      	movs	r5, #1
 80180cc:	e7c2      	b.n	8018054 <__gethex+0x388>
 80180ce:	f016 061f 	ands.w	r6, r6, #31
 80180d2:	d0fa      	beq.n	80180ca <__gethex+0x3fe>
 80180d4:	4453      	add	r3, sl
 80180d6:	f1c6 0620 	rsb	r6, r6, #32
 80180da:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80180de:	f000 fa79 	bl	80185d4 <__hi0bits>
 80180e2:	42b0      	cmp	r0, r6
 80180e4:	dbe7      	blt.n	80180b6 <__gethex+0x3ea>
 80180e6:	e7f0      	b.n	80180ca <__gethex+0x3fe>
 80180e8:	0801a129 	.word	0x0801a129

080180ec <L_shift>:
 80180ec:	f1c2 0208 	rsb	r2, r2, #8
 80180f0:	0092      	lsls	r2, r2, #2
 80180f2:	b570      	push	{r4, r5, r6, lr}
 80180f4:	f1c2 0620 	rsb	r6, r2, #32
 80180f8:	6843      	ldr	r3, [r0, #4]
 80180fa:	6804      	ldr	r4, [r0, #0]
 80180fc:	fa03 f506 	lsl.w	r5, r3, r6
 8018100:	432c      	orrs	r4, r5
 8018102:	40d3      	lsrs	r3, r2
 8018104:	6004      	str	r4, [r0, #0]
 8018106:	f840 3f04 	str.w	r3, [r0, #4]!
 801810a:	4288      	cmp	r0, r1
 801810c:	d3f4      	bcc.n	80180f8 <L_shift+0xc>
 801810e:	bd70      	pop	{r4, r5, r6, pc}

08018110 <__match>:
 8018110:	b530      	push	{r4, r5, lr}
 8018112:	6803      	ldr	r3, [r0, #0]
 8018114:	3301      	adds	r3, #1
 8018116:	f811 4b01 	ldrb.w	r4, [r1], #1
 801811a:	b914      	cbnz	r4, 8018122 <__match+0x12>
 801811c:	6003      	str	r3, [r0, #0]
 801811e:	2001      	movs	r0, #1
 8018120:	bd30      	pop	{r4, r5, pc}
 8018122:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018126:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801812a:	2d19      	cmp	r5, #25
 801812c:	bf98      	it	ls
 801812e:	3220      	addls	r2, #32
 8018130:	42a2      	cmp	r2, r4
 8018132:	d0f0      	beq.n	8018116 <__match+0x6>
 8018134:	2000      	movs	r0, #0
 8018136:	e7f3      	b.n	8018120 <__match+0x10>

08018138 <__hexnan>:
 8018138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801813c:	680b      	ldr	r3, [r1, #0]
 801813e:	6801      	ldr	r1, [r0, #0]
 8018140:	115e      	asrs	r6, r3, #5
 8018142:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8018146:	f013 031f 	ands.w	r3, r3, #31
 801814a:	b087      	sub	sp, #28
 801814c:	bf18      	it	ne
 801814e:	3604      	addne	r6, #4
 8018150:	2500      	movs	r5, #0
 8018152:	1f37      	subs	r7, r6, #4
 8018154:	4682      	mov	sl, r0
 8018156:	4690      	mov	r8, r2
 8018158:	9301      	str	r3, [sp, #4]
 801815a:	f846 5c04 	str.w	r5, [r6, #-4]
 801815e:	46b9      	mov	r9, r7
 8018160:	463c      	mov	r4, r7
 8018162:	9502      	str	r5, [sp, #8]
 8018164:	46ab      	mov	fp, r5
 8018166:	784a      	ldrb	r2, [r1, #1]
 8018168:	1c4b      	adds	r3, r1, #1
 801816a:	9303      	str	r3, [sp, #12]
 801816c:	b342      	cbz	r2, 80181c0 <__hexnan+0x88>
 801816e:	4610      	mov	r0, r2
 8018170:	9105      	str	r1, [sp, #20]
 8018172:	9204      	str	r2, [sp, #16]
 8018174:	f7ff fd94 	bl	8017ca0 <__hexdig_fun>
 8018178:	2800      	cmp	r0, #0
 801817a:	d151      	bne.n	8018220 <__hexnan+0xe8>
 801817c:	9a04      	ldr	r2, [sp, #16]
 801817e:	9905      	ldr	r1, [sp, #20]
 8018180:	2a20      	cmp	r2, #32
 8018182:	d818      	bhi.n	80181b6 <__hexnan+0x7e>
 8018184:	9b02      	ldr	r3, [sp, #8]
 8018186:	459b      	cmp	fp, r3
 8018188:	dd13      	ble.n	80181b2 <__hexnan+0x7a>
 801818a:	454c      	cmp	r4, r9
 801818c:	d206      	bcs.n	801819c <__hexnan+0x64>
 801818e:	2d07      	cmp	r5, #7
 8018190:	dc04      	bgt.n	801819c <__hexnan+0x64>
 8018192:	462a      	mov	r2, r5
 8018194:	4649      	mov	r1, r9
 8018196:	4620      	mov	r0, r4
 8018198:	f7ff ffa8 	bl	80180ec <L_shift>
 801819c:	4544      	cmp	r4, r8
 801819e:	d952      	bls.n	8018246 <__hexnan+0x10e>
 80181a0:	2300      	movs	r3, #0
 80181a2:	f1a4 0904 	sub.w	r9, r4, #4
 80181a6:	f844 3c04 	str.w	r3, [r4, #-4]
 80181aa:	f8cd b008 	str.w	fp, [sp, #8]
 80181ae:	464c      	mov	r4, r9
 80181b0:	461d      	mov	r5, r3
 80181b2:	9903      	ldr	r1, [sp, #12]
 80181b4:	e7d7      	b.n	8018166 <__hexnan+0x2e>
 80181b6:	2a29      	cmp	r2, #41	@ 0x29
 80181b8:	d157      	bne.n	801826a <__hexnan+0x132>
 80181ba:	3102      	adds	r1, #2
 80181bc:	f8ca 1000 	str.w	r1, [sl]
 80181c0:	f1bb 0f00 	cmp.w	fp, #0
 80181c4:	d051      	beq.n	801826a <__hexnan+0x132>
 80181c6:	454c      	cmp	r4, r9
 80181c8:	d206      	bcs.n	80181d8 <__hexnan+0xa0>
 80181ca:	2d07      	cmp	r5, #7
 80181cc:	dc04      	bgt.n	80181d8 <__hexnan+0xa0>
 80181ce:	462a      	mov	r2, r5
 80181d0:	4649      	mov	r1, r9
 80181d2:	4620      	mov	r0, r4
 80181d4:	f7ff ff8a 	bl	80180ec <L_shift>
 80181d8:	4544      	cmp	r4, r8
 80181da:	d936      	bls.n	801824a <__hexnan+0x112>
 80181dc:	f1a8 0204 	sub.w	r2, r8, #4
 80181e0:	4623      	mov	r3, r4
 80181e2:	f853 1b04 	ldr.w	r1, [r3], #4
 80181e6:	f842 1f04 	str.w	r1, [r2, #4]!
 80181ea:	429f      	cmp	r7, r3
 80181ec:	d2f9      	bcs.n	80181e2 <__hexnan+0xaa>
 80181ee:	1b3b      	subs	r3, r7, r4
 80181f0:	f023 0303 	bic.w	r3, r3, #3
 80181f4:	3304      	adds	r3, #4
 80181f6:	3401      	adds	r4, #1
 80181f8:	3e03      	subs	r6, #3
 80181fa:	42b4      	cmp	r4, r6
 80181fc:	bf88      	it	hi
 80181fe:	2304      	movhi	r3, #4
 8018200:	4443      	add	r3, r8
 8018202:	2200      	movs	r2, #0
 8018204:	f843 2b04 	str.w	r2, [r3], #4
 8018208:	429f      	cmp	r7, r3
 801820a:	d2fb      	bcs.n	8018204 <__hexnan+0xcc>
 801820c:	683b      	ldr	r3, [r7, #0]
 801820e:	b91b      	cbnz	r3, 8018218 <__hexnan+0xe0>
 8018210:	4547      	cmp	r7, r8
 8018212:	d128      	bne.n	8018266 <__hexnan+0x12e>
 8018214:	2301      	movs	r3, #1
 8018216:	603b      	str	r3, [r7, #0]
 8018218:	2005      	movs	r0, #5
 801821a:	b007      	add	sp, #28
 801821c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018220:	3501      	adds	r5, #1
 8018222:	2d08      	cmp	r5, #8
 8018224:	f10b 0b01 	add.w	fp, fp, #1
 8018228:	dd06      	ble.n	8018238 <__hexnan+0x100>
 801822a:	4544      	cmp	r4, r8
 801822c:	d9c1      	bls.n	80181b2 <__hexnan+0x7a>
 801822e:	2300      	movs	r3, #0
 8018230:	f844 3c04 	str.w	r3, [r4, #-4]
 8018234:	2501      	movs	r5, #1
 8018236:	3c04      	subs	r4, #4
 8018238:	6822      	ldr	r2, [r4, #0]
 801823a:	f000 000f 	and.w	r0, r0, #15
 801823e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8018242:	6020      	str	r0, [r4, #0]
 8018244:	e7b5      	b.n	80181b2 <__hexnan+0x7a>
 8018246:	2508      	movs	r5, #8
 8018248:	e7b3      	b.n	80181b2 <__hexnan+0x7a>
 801824a:	9b01      	ldr	r3, [sp, #4]
 801824c:	2b00      	cmp	r3, #0
 801824e:	d0dd      	beq.n	801820c <__hexnan+0xd4>
 8018250:	f1c3 0320 	rsb	r3, r3, #32
 8018254:	f04f 32ff 	mov.w	r2, #4294967295
 8018258:	40da      	lsrs	r2, r3
 801825a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801825e:	4013      	ands	r3, r2
 8018260:	f846 3c04 	str.w	r3, [r6, #-4]
 8018264:	e7d2      	b.n	801820c <__hexnan+0xd4>
 8018266:	3f04      	subs	r7, #4
 8018268:	e7d0      	b.n	801820c <__hexnan+0xd4>
 801826a:	2004      	movs	r0, #4
 801826c:	e7d5      	b.n	801821a <__hexnan+0xe2>
	...

08018270 <sbrk_aligned>:
 8018270:	b570      	push	{r4, r5, r6, lr}
 8018272:	4e0f      	ldr	r6, [pc, #60]	@ (80182b0 <sbrk_aligned+0x40>)
 8018274:	460c      	mov	r4, r1
 8018276:	6831      	ldr	r1, [r6, #0]
 8018278:	4605      	mov	r5, r0
 801827a:	b911      	cbnz	r1, 8018282 <sbrk_aligned+0x12>
 801827c:	f000 fe20 	bl	8018ec0 <_sbrk_r>
 8018280:	6030      	str	r0, [r6, #0]
 8018282:	4621      	mov	r1, r4
 8018284:	4628      	mov	r0, r5
 8018286:	f000 fe1b 	bl	8018ec0 <_sbrk_r>
 801828a:	1c43      	adds	r3, r0, #1
 801828c:	d103      	bne.n	8018296 <sbrk_aligned+0x26>
 801828e:	f04f 34ff 	mov.w	r4, #4294967295
 8018292:	4620      	mov	r0, r4
 8018294:	bd70      	pop	{r4, r5, r6, pc}
 8018296:	1cc4      	adds	r4, r0, #3
 8018298:	f024 0403 	bic.w	r4, r4, #3
 801829c:	42a0      	cmp	r0, r4
 801829e:	d0f8      	beq.n	8018292 <sbrk_aligned+0x22>
 80182a0:	1a21      	subs	r1, r4, r0
 80182a2:	4628      	mov	r0, r5
 80182a4:	f000 fe0c 	bl	8018ec0 <_sbrk_r>
 80182a8:	3001      	adds	r0, #1
 80182aa:	d1f2      	bne.n	8018292 <sbrk_aligned+0x22>
 80182ac:	e7ef      	b.n	801828e <sbrk_aligned+0x1e>
 80182ae:	bf00      	nop
 80182b0:	24005924 	.word	0x24005924

080182b4 <_malloc_r>:
 80182b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80182b8:	1ccd      	adds	r5, r1, #3
 80182ba:	f025 0503 	bic.w	r5, r5, #3
 80182be:	3508      	adds	r5, #8
 80182c0:	2d0c      	cmp	r5, #12
 80182c2:	bf38      	it	cc
 80182c4:	250c      	movcc	r5, #12
 80182c6:	2d00      	cmp	r5, #0
 80182c8:	4606      	mov	r6, r0
 80182ca:	db01      	blt.n	80182d0 <_malloc_r+0x1c>
 80182cc:	42a9      	cmp	r1, r5
 80182ce:	d904      	bls.n	80182da <_malloc_r+0x26>
 80182d0:	230c      	movs	r3, #12
 80182d2:	6033      	str	r3, [r6, #0]
 80182d4:	2000      	movs	r0, #0
 80182d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80182da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80183b0 <_malloc_r+0xfc>
 80182de:	f000 f87b 	bl	80183d8 <__malloc_lock>
 80182e2:	f8d8 3000 	ldr.w	r3, [r8]
 80182e6:	461c      	mov	r4, r3
 80182e8:	bb44      	cbnz	r4, 801833c <_malloc_r+0x88>
 80182ea:	4629      	mov	r1, r5
 80182ec:	4630      	mov	r0, r6
 80182ee:	f7ff ffbf 	bl	8018270 <sbrk_aligned>
 80182f2:	1c43      	adds	r3, r0, #1
 80182f4:	4604      	mov	r4, r0
 80182f6:	d158      	bne.n	80183aa <_malloc_r+0xf6>
 80182f8:	f8d8 4000 	ldr.w	r4, [r8]
 80182fc:	4627      	mov	r7, r4
 80182fe:	2f00      	cmp	r7, #0
 8018300:	d143      	bne.n	801838a <_malloc_r+0xd6>
 8018302:	2c00      	cmp	r4, #0
 8018304:	d04b      	beq.n	801839e <_malloc_r+0xea>
 8018306:	6823      	ldr	r3, [r4, #0]
 8018308:	4639      	mov	r1, r7
 801830a:	4630      	mov	r0, r6
 801830c:	eb04 0903 	add.w	r9, r4, r3
 8018310:	f000 fdd6 	bl	8018ec0 <_sbrk_r>
 8018314:	4581      	cmp	r9, r0
 8018316:	d142      	bne.n	801839e <_malloc_r+0xea>
 8018318:	6821      	ldr	r1, [r4, #0]
 801831a:	1a6d      	subs	r5, r5, r1
 801831c:	4629      	mov	r1, r5
 801831e:	4630      	mov	r0, r6
 8018320:	f7ff ffa6 	bl	8018270 <sbrk_aligned>
 8018324:	3001      	adds	r0, #1
 8018326:	d03a      	beq.n	801839e <_malloc_r+0xea>
 8018328:	6823      	ldr	r3, [r4, #0]
 801832a:	442b      	add	r3, r5
 801832c:	6023      	str	r3, [r4, #0]
 801832e:	f8d8 3000 	ldr.w	r3, [r8]
 8018332:	685a      	ldr	r2, [r3, #4]
 8018334:	bb62      	cbnz	r2, 8018390 <_malloc_r+0xdc>
 8018336:	f8c8 7000 	str.w	r7, [r8]
 801833a:	e00f      	b.n	801835c <_malloc_r+0xa8>
 801833c:	6822      	ldr	r2, [r4, #0]
 801833e:	1b52      	subs	r2, r2, r5
 8018340:	d420      	bmi.n	8018384 <_malloc_r+0xd0>
 8018342:	2a0b      	cmp	r2, #11
 8018344:	d917      	bls.n	8018376 <_malloc_r+0xc2>
 8018346:	1961      	adds	r1, r4, r5
 8018348:	42a3      	cmp	r3, r4
 801834a:	6025      	str	r5, [r4, #0]
 801834c:	bf18      	it	ne
 801834e:	6059      	strne	r1, [r3, #4]
 8018350:	6863      	ldr	r3, [r4, #4]
 8018352:	bf08      	it	eq
 8018354:	f8c8 1000 	streq.w	r1, [r8]
 8018358:	5162      	str	r2, [r4, r5]
 801835a:	604b      	str	r3, [r1, #4]
 801835c:	4630      	mov	r0, r6
 801835e:	f000 f841 	bl	80183e4 <__malloc_unlock>
 8018362:	f104 000b 	add.w	r0, r4, #11
 8018366:	1d23      	adds	r3, r4, #4
 8018368:	f020 0007 	bic.w	r0, r0, #7
 801836c:	1ac2      	subs	r2, r0, r3
 801836e:	bf1c      	itt	ne
 8018370:	1a1b      	subne	r3, r3, r0
 8018372:	50a3      	strne	r3, [r4, r2]
 8018374:	e7af      	b.n	80182d6 <_malloc_r+0x22>
 8018376:	6862      	ldr	r2, [r4, #4]
 8018378:	42a3      	cmp	r3, r4
 801837a:	bf0c      	ite	eq
 801837c:	f8c8 2000 	streq.w	r2, [r8]
 8018380:	605a      	strne	r2, [r3, #4]
 8018382:	e7eb      	b.n	801835c <_malloc_r+0xa8>
 8018384:	4623      	mov	r3, r4
 8018386:	6864      	ldr	r4, [r4, #4]
 8018388:	e7ae      	b.n	80182e8 <_malloc_r+0x34>
 801838a:	463c      	mov	r4, r7
 801838c:	687f      	ldr	r7, [r7, #4]
 801838e:	e7b6      	b.n	80182fe <_malloc_r+0x4a>
 8018390:	461a      	mov	r2, r3
 8018392:	685b      	ldr	r3, [r3, #4]
 8018394:	42a3      	cmp	r3, r4
 8018396:	d1fb      	bne.n	8018390 <_malloc_r+0xdc>
 8018398:	2300      	movs	r3, #0
 801839a:	6053      	str	r3, [r2, #4]
 801839c:	e7de      	b.n	801835c <_malloc_r+0xa8>
 801839e:	230c      	movs	r3, #12
 80183a0:	6033      	str	r3, [r6, #0]
 80183a2:	4630      	mov	r0, r6
 80183a4:	f000 f81e 	bl	80183e4 <__malloc_unlock>
 80183a8:	e794      	b.n	80182d4 <_malloc_r+0x20>
 80183aa:	6005      	str	r5, [r0, #0]
 80183ac:	e7d6      	b.n	801835c <_malloc_r+0xa8>
 80183ae:	bf00      	nop
 80183b0:	24005928 	.word	0x24005928

080183b4 <__ascii_mbtowc>:
 80183b4:	b082      	sub	sp, #8
 80183b6:	b901      	cbnz	r1, 80183ba <__ascii_mbtowc+0x6>
 80183b8:	a901      	add	r1, sp, #4
 80183ba:	b142      	cbz	r2, 80183ce <__ascii_mbtowc+0x1a>
 80183bc:	b14b      	cbz	r3, 80183d2 <__ascii_mbtowc+0x1e>
 80183be:	7813      	ldrb	r3, [r2, #0]
 80183c0:	600b      	str	r3, [r1, #0]
 80183c2:	7812      	ldrb	r2, [r2, #0]
 80183c4:	1e10      	subs	r0, r2, #0
 80183c6:	bf18      	it	ne
 80183c8:	2001      	movne	r0, #1
 80183ca:	b002      	add	sp, #8
 80183cc:	4770      	bx	lr
 80183ce:	4610      	mov	r0, r2
 80183d0:	e7fb      	b.n	80183ca <__ascii_mbtowc+0x16>
 80183d2:	f06f 0001 	mvn.w	r0, #1
 80183d6:	e7f8      	b.n	80183ca <__ascii_mbtowc+0x16>

080183d8 <__malloc_lock>:
 80183d8:	4801      	ldr	r0, [pc, #4]	@ (80183e0 <__malloc_lock+0x8>)
 80183da:	f7ff bbac 	b.w	8017b36 <__retarget_lock_acquire_recursive>
 80183de:	bf00      	nop
 80183e0:	24005920 	.word	0x24005920

080183e4 <__malloc_unlock>:
 80183e4:	4801      	ldr	r0, [pc, #4]	@ (80183ec <__malloc_unlock+0x8>)
 80183e6:	f7ff bba7 	b.w	8017b38 <__retarget_lock_release_recursive>
 80183ea:	bf00      	nop
 80183ec:	24005920 	.word	0x24005920

080183f0 <_Balloc>:
 80183f0:	b570      	push	{r4, r5, r6, lr}
 80183f2:	69c6      	ldr	r6, [r0, #28]
 80183f4:	4604      	mov	r4, r0
 80183f6:	460d      	mov	r5, r1
 80183f8:	b976      	cbnz	r6, 8018418 <_Balloc+0x28>
 80183fa:	2010      	movs	r0, #16
 80183fc:	f000 fda2 	bl	8018f44 <malloc>
 8018400:	4602      	mov	r2, r0
 8018402:	61e0      	str	r0, [r4, #28]
 8018404:	b920      	cbnz	r0, 8018410 <_Balloc+0x20>
 8018406:	4b18      	ldr	r3, [pc, #96]	@ (8018468 <_Balloc+0x78>)
 8018408:	4818      	ldr	r0, [pc, #96]	@ (801846c <_Balloc+0x7c>)
 801840a:	216b      	movs	r1, #107	@ 0x6b
 801840c:	f000 fd68 	bl	8018ee0 <__assert_func>
 8018410:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018414:	6006      	str	r6, [r0, #0]
 8018416:	60c6      	str	r6, [r0, #12]
 8018418:	69e6      	ldr	r6, [r4, #28]
 801841a:	68f3      	ldr	r3, [r6, #12]
 801841c:	b183      	cbz	r3, 8018440 <_Balloc+0x50>
 801841e:	69e3      	ldr	r3, [r4, #28]
 8018420:	68db      	ldr	r3, [r3, #12]
 8018422:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018426:	b9b8      	cbnz	r0, 8018458 <_Balloc+0x68>
 8018428:	2101      	movs	r1, #1
 801842a:	fa01 f605 	lsl.w	r6, r1, r5
 801842e:	1d72      	adds	r2, r6, #5
 8018430:	0092      	lsls	r2, r2, #2
 8018432:	4620      	mov	r0, r4
 8018434:	f000 fd72 	bl	8018f1c <_calloc_r>
 8018438:	b160      	cbz	r0, 8018454 <_Balloc+0x64>
 801843a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801843e:	e00e      	b.n	801845e <_Balloc+0x6e>
 8018440:	2221      	movs	r2, #33	@ 0x21
 8018442:	2104      	movs	r1, #4
 8018444:	4620      	mov	r0, r4
 8018446:	f000 fd69 	bl	8018f1c <_calloc_r>
 801844a:	69e3      	ldr	r3, [r4, #28]
 801844c:	60f0      	str	r0, [r6, #12]
 801844e:	68db      	ldr	r3, [r3, #12]
 8018450:	2b00      	cmp	r3, #0
 8018452:	d1e4      	bne.n	801841e <_Balloc+0x2e>
 8018454:	2000      	movs	r0, #0
 8018456:	bd70      	pop	{r4, r5, r6, pc}
 8018458:	6802      	ldr	r2, [r0, #0]
 801845a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801845e:	2300      	movs	r3, #0
 8018460:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018464:	e7f7      	b.n	8018456 <_Balloc+0x66>
 8018466:	bf00      	nop
 8018468:	0801a19a 	.word	0x0801a19a
 801846c:	0801a1b1 	.word	0x0801a1b1

08018470 <_Bfree>:
 8018470:	b570      	push	{r4, r5, r6, lr}
 8018472:	69c6      	ldr	r6, [r0, #28]
 8018474:	4605      	mov	r5, r0
 8018476:	460c      	mov	r4, r1
 8018478:	b976      	cbnz	r6, 8018498 <_Bfree+0x28>
 801847a:	2010      	movs	r0, #16
 801847c:	f000 fd62 	bl	8018f44 <malloc>
 8018480:	4602      	mov	r2, r0
 8018482:	61e8      	str	r0, [r5, #28]
 8018484:	b920      	cbnz	r0, 8018490 <_Bfree+0x20>
 8018486:	4b09      	ldr	r3, [pc, #36]	@ (80184ac <_Bfree+0x3c>)
 8018488:	4809      	ldr	r0, [pc, #36]	@ (80184b0 <_Bfree+0x40>)
 801848a:	218f      	movs	r1, #143	@ 0x8f
 801848c:	f000 fd28 	bl	8018ee0 <__assert_func>
 8018490:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018494:	6006      	str	r6, [r0, #0]
 8018496:	60c6      	str	r6, [r0, #12]
 8018498:	b13c      	cbz	r4, 80184aa <_Bfree+0x3a>
 801849a:	69eb      	ldr	r3, [r5, #28]
 801849c:	6862      	ldr	r2, [r4, #4]
 801849e:	68db      	ldr	r3, [r3, #12]
 80184a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80184a4:	6021      	str	r1, [r4, #0]
 80184a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80184aa:	bd70      	pop	{r4, r5, r6, pc}
 80184ac:	0801a19a 	.word	0x0801a19a
 80184b0:	0801a1b1 	.word	0x0801a1b1

080184b4 <__multadd>:
 80184b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80184b8:	690d      	ldr	r5, [r1, #16]
 80184ba:	4607      	mov	r7, r0
 80184bc:	460c      	mov	r4, r1
 80184be:	461e      	mov	r6, r3
 80184c0:	f101 0c14 	add.w	ip, r1, #20
 80184c4:	2000      	movs	r0, #0
 80184c6:	f8dc 3000 	ldr.w	r3, [ip]
 80184ca:	b299      	uxth	r1, r3
 80184cc:	fb02 6101 	mla	r1, r2, r1, r6
 80184d0:	0c1e      	lsrs	r6, r3, #16
 80184d2:	0c0b      	lsrs	r3, r1, #16
 80184d4:	fb02 3306 	mla	r3, r2, r6, r3
 80184d8:	b289      	uxth	r1, r1
 80184da:	3001      	adds	r0, #1
 80184dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80184e0:	4285      	cmp	r5, r0
 80184e2:	f84c 1b04 	str.w	r1, [ip], #4
 80184e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80184ea:	dcec      	bgt.n	80184c6 <__multadd+0x12>
 80184ec:	b30e      	cbz	r6, 8018532 <__multadd+0x7e>
 80184ee:	68a3      	ldr	r3, [r4, #8]
 80184f0:	42ab      	cmp	r3, r5
 80184f2:	dc19      	bgt.n	8018528 <__multadd+0x74>
 80184f4:	6861      	ldr	r1, [r4, #4]
 80184f6:	4638      	mov	r0, r7
 80184f8:	3101      	adds	r1, #1
 80184fa:	f7ff ff79 	bl	80183f0 <_Balloc>
 80184fe:	4680      	mov	r8, r0
 8018500:	b928      	cbnz	r0, 801850e <__multadd+0x5a>
 8018502:	4602      	mov	r2, r0
 8018504:	4b0c      	ldr	r3, [pc, #48]	@ (8018538 <__multadd+0x84>)
 8018506:	480d      	ldr	r0, [pc, #52]	@ (801853c <__multadd+0x88>)
 8018508:	21ba      	movs	r1, #186	@ 0xba
 801850a:	f000 fce9 	bl	8018ee0 <__assert_func>
 801850e:	6922      	ldr	r2, [r4, #16]
 8018510:	3202      	adds	r2, #2
 8018512:	f104 010c 	add.w	r1, r4, #12
 8018516:	0092      	lsls	r2, r2, #2
 8018518:	300c      	adds	r0, #12
 801851a:	f7ff fb0e 	bl	8017b3a <memcpy>
 801851e:	4621      	mov	r1, r4
 8018520:	4638      	mov	r0, r7
 8018522:	f7ff ffa5 	bl	8018470 <_Bfree>
 8018526:	4644      	mov	r4, r8
 8018528:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801852c:	3501      	adds	r5, #1
 801852e:	615e      	str	r6, [r3, #20]
 8018530:	6125      	str	r5, [r4, #16]
 8018532:	4620      	mov	r0, r4
 8018534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018538:	0801a129 	.word	0x0801a129
 801853c:	0801a1b1 	.word	0x0801a1b1

08018540 <__s2b>:
 8018540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018544:	460c      	mov	r4, r1
 8018546:	4615      	mov	r5, r2
 8018548:	461f      	mov	r7, r3
 801854a:	2209      	movs	r2, #9
 801854c:	3308      	adds	r3, #8
 801854e:	4606      	mov	r6, r0
 8018550:	fb93 f3f2 	sdiv	r3, r3, r2
 8018554:	2100      	movs	r1, #0
 8018556:	2201      	movs	r2, #1
 8018558:	429a      	cmp	r2, r3
 801855a:	db09      	blt.n	8018570 <__s2b+0x30>
 801855c:	4630      	mov	r0, r6
 801855e:	f7ff ff47 	bl	80183f0 <_Balloc>
 8018562:	b940      	cbnz	r0, 8018576 <__s2b+0x36>
 8018564:	4602      	mov	r2, r0
 8018566:	4b19      	ldr	r3, [pc, #100]	@ (80185cc <__s2b+0x8c>)
 8018568:	4819      	ldr	r0, [pc, #100]	@ (80185d0 <__s2b+0x90>)
 801856a:	21d3      	movs	r1, #211	@ 0xd3
 801856c:	f000 fcb8 	bl	8018ee0 <__assert_func>
 8018570:	0052      	lsls	r2, r2, #1
 8018572:	3101      	adds	r1, #1
 8018574:	e7f0      	b.n	8018558 <__s2b+0x18>
 8018576:	9b08      	ldr	r3, [sp, #32]
 8018578:	6143      	str	r3, [r0, #20]
 801857a:	2d09      	cmp	r5, #9
 801857c:	f04f 0301 	mov.w	r3, #1
 8018580:	6103      	str	r3, [r0, #16]
 8018582:	dd16      	ble.n	80185b2 <__s2b+0x72>
 8018584:	f104 0909 	add.w	r9, r4, #9
 8018588:	46c8      	mov	r8, r9
 801858a:	442c      	add	r4, r5
 801858c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8018590:	4601      	mov	r1, r0
 8018592:	3b30      	subs	r3, #48	@ 0x30
 8018594:	220a      	movs	r2, #10
 8018596:	4630      	mov	r0, r6
 8018598:	f7ff ff8c 	bl	80184b4 <__multadd>
 801859c:	45a0      	cmp	r8, r4
 801859e:	d1f5      	bne.n	801858c <__s2b+0x4c>
 80185a0:	f1a5 0408 	sub.w	r4, r5, #8
 80185a4:	444c      	add	r4, r9
 80185a6:	1b2d      	subs	r5, r5, r4
 80185a8:	1963      	adds	r3, r4, r5
 80185aa:	42bb      	cmp	r3, r7
 80185ac:	db04      	blt.n	80185b8 <__s2b+0x78>
 80185ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80185b2:	340a      	adds	r4, #10
 80185b4:	2509      	movs	r5, #9
 80185b6:	e7f6      	b.n	80185a6 <__s2b+0x66>
 80185b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80185bc:	4601      	mov	r1, r0
 80185be:	3b30      	subs	r3, #48	@ 0x30
 80185c0:	220a      	movs	r2, #10
 80185c2:	4630      	mov	r0, r6
 80185c4:	f7ff ff76 	bl	80184b4 <__multadd>
 80185c8:	e7ee      	b.n	80185a8 <__s2b+0x68>
 80185ca:	bf00      	nop
 80185cc:	0801a129 	.word	0x0801a129
 80185d0:	0801a1b1 	.word	0x0801a1b1

080185d4 <__hi0bits>:
 80185d4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80185d8:	4603      	mov	r3, r0
 80185da:	bf36      	itet	cc
 80185dc:	0403      	lslcc	r3, r0, #16
 80185de:	2000      	movcs	r0, #0
 80185e0:	2010      	movcc	r0, #16
 80185e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80185e6:	bf3c      	itt	cc
 80185e8:	021b      	lslcc	r3, r3, #8
 80185ea:	3008      	addcc	r0, #8
 80185ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80185f0:	bf3c      	itt	cc
 80185f2:	011b      	lslcc	r3, r3, #4
 80185f4:	3004      	addcc	r0, #4
 80185f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80185fa:	bf3c      	itt	cc
 80185fc:	009b      	lslcc	r3, r3, #2
 80185fe:	3002      	addcc	r0, #2
 8018600:	2b00      	cmp	r3, #0
 8018602:	db05      	blt.n	8018610 <__hi0bits+0x3c>
 8018604:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8018608:	f100 0001 	add.w	r0, r0, #1
 801860c:	bf08      	it	eq
 801860e:	2020      	moveq	r0, #32
 8018610:	4770      	bx	lr

08018612 <__lo0bits>:
 8018612:	6803      	ldr	r3, [r0, #0]
 8018614:	4602      	mov	r2, r0
 8018616:	f013 0007 	ands.w	r0, r3, #7
 801861a:	d00b      	beq.n	8018634 <__lo0bits+0x22>
 801861c:	07d9      	lsls	r1, r3, #31
 801861e:	d421      	bmi.n	8018664 <__lo0bits+0x52>
 8018620:	0798      	lsls	r0, r3, #30
 8018622:	bf49      	itett	mi
 8018624:	085b      	lsrmi	r3, r3, #1
 8018626:	089b      	lsrpl	r3, r3, #2
 8018628:	2001      	movmi	r0, #1
 801862a:	6013      	strmi	r3, [r2, #0]
 801862c:	bf5c      	itt	pl
 801862e:	6013      	strpl	r3, [r2, #0]
 8018630:	2002      	movpl	r0, #2
 8018632:	4770      	bx	lr
 8018634:	b299      	uxth	r1, r3
 8018636:	b909      	cbnz	r1, 801863c <__lo0bits+0x2a>
 8018638:	0c1b      	lsrs	r3, r3, #16
 801863a:	2010      	movs	r0, #16
 801863c:	b2d9      	uxtb	r1, r3
 801863e:	b909      	cbnz	r1, 8018644 <__lo0bits+0x32>
 8018640:	3008      	adds	r0, #8
 8018642:	0a1b      	lsrs	r3, r3, #8
 8018644:	0719      	lsls	r1, r3, #28
 8018646:	bf04      	itt	eq
 8018648:	091b      	lsreq	r3, r3, #4
 801864a:	3004      	addeq	r0, #4
 801864c:	0799      	lsls	r1, r3, #30
 801864e:	bf04      	itt	eq
 8018650:	089b      	lsreq	r3, r3, #2
 8018652:	3002      	addeq	r0, #2
 8018654:	07d9      	lsls	r1, r3, #31
 8018656:	d403      	bmi.n	8018660 <__lo0bits+0x4e>
 8018658:	085b      	lsrs	r3, r3, #1
 801865a:	f100 0001 	add.w	r0, r0, #1
 801865e:	d003      	beq.n	8018668 <__lo0bits+0x56>
 8018660:	6013      	str	r3, [r2, #0]
 8018662:	4770      	bx	lr
 8018664:	2000      	movs	r0, #0
 8018666:	4770      	bx	lr
 8018668:	2020      	movs	r0, #32
 801866a:	4770      	bx	lr

0801866c <__i2b>:
 801866c:	b510      	push	{r4, lr}
 801866e:	460c      	mov	r4, r1
 8018670:	2101      	movs	r1, #1
 8018672:	f7ff febd 	bl	80183f0 <_Balloc>
 8018676:	4602      	mov	r2, r0
 8018678:	b928      	cbnz	r0, 8018686 <__i2b+0x1a>
 801867a:	4b05      	ldr	r3, [pc, #20]	@ (8018690 <__i2b+0x24>)
 801867c:	4805      	ldr	r0, [pc, #20]	@ (8018694 <__i2b+0x28>)
 801867e:	f240 1145 	movw	r1, #325	@ 0x145
 8018682:	f000 fc2d 	bl	8018ee0 <__assert_func>
 8018686:	2301      	movs	r3, #1
 8018688:	6144      	str	r4, [r0, #20]
 801868a:	6103      	str	r3, [r0, #16]
 801868c:	bd10      	pop	{r4, pc}
 801868e:	bf00      	nop
 8018690:	0801a129 	.word	0x0801a129
 8018694:	0801a1b1 	.word	0x0801a1b1

08018698 <__multiply>:
 8018698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801869c:	4614      	mov	r4, r2
 801869e:	690a      	ldr	r2, [r1, #16]
 80186a0:	6923      	ldr	r3, [r4, #16]
 80186a2:	429a      	cmp	r2, r3
 80186a4:	bfa8      	it	ge
 80186a6:	4623      	movge	r3, r4
 80186a8:	460f      	mov	r7, r1
 80186aa:	bfa4      	itt	ge
 80186ac:	460c      	movge	r4, r1
 80186ae:	461f      	movge	r7, r3
 80186b0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80186b4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80186b8:	68a3      	ldr	r3, [r4, #8]
 80186ba:	6861      	ldr	r1, [r4, #4]
 80186bc:	eb0a 0609 	add.w	r6, sl, r9
 80186c0:	42b3      	cmp	r3, r6
 80186c2:	b085      	sub	sp, #20
 80186c4:	bfb8      	it	lt
 80186c6:	3101      	addlt	r1, #1
 80186c8:	f7ff fe92 	bl	80183f0 <_Balloc>
 80186cc:	b930      	cbnz	r0, 80186dc <__multiply+0x44>
 80186ce:	4602      	mov	r2, r0
 80186d0:	4b44      	ldr	r3, [pc, #272]	@ (80187e4 <__multiply+0x14c>)
 80186d2:	4845      	ldr	r0, [pc, #276]	@ (80187e8 <__multiply+0x150>)
 80186d4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80186d8:	f000 fc02 	bl	8018ee0 <__assert_func>
 80186dc:	f100 0514 	add.w	r5, r0, #20
 80186e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80186e4:	462b      	mov	r3, r5
 80186e6:	2200      	movs	r2, #0
 80186e8:	4543      	cmp	r3, r8
 80186ea:	d321      	bcc.n	8018730 <__multiply+0x98>
 80186ec:	f107 0114 	add.w	r1, r7, #20
 80186f0:	f104 0214 	add.w	r2, r4, #20
 80186f4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80186f8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80186fc:	9302      	str	r3, [sp, #8]
 80186fe:	1b13      	subs	r3, r2, r4
 8018700:	3b15      	subs	r3, #21
 8018702:	f023 0303 	bic.w	r3, r3, #3
 8018706:	3304      	adds	r3, #4
 8018708:	f104 0715 	add.w	r7, r4, #21
 801870c:	42ba      	cmp	r2, r7
 801870e:	bf38      	it	cc
 8018710:	2304      	movcc	r3, #4
 8018712:	9301      	str	r3, [sp, #4]
 8018714:	9b02      	ldr	r3, [sp, #8]
 8018716:	9103      	str	r1, [sp, #12]
 8018718:	428b      	cmp	r3, r1
 801871a:	d80c      	bhi.n	8018736 <__multiply+0x9e>
 801871c:	2e00      	cmp	r6, #0
 801871e:	dd03      	ble.n	8018728 <__multiply+0x90>
 8018720:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018724:	2b00      	cmp	r3, #0
 8018726:	d05b      	beq.n	80187e0 <__multiply+0x148>
 8018728:	6106      	str	r6, [r0, #16]
 801872a:	b005      	add	sp, #20
 801872c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018730:	f843 2b04 	str.w	r2, [r3], #4
 8018734:	e7d8      	b.n	80186e8 <__multiply+0x50>
 8018736:	f8b1 a000 	ldrh.w	sl, [r1]
 801873a:	f1ba 0f00 	cmp.w	sl, #0
 801873e:	d024      	beq.n	801878a <__multiply+0xf2>
 8018740:	f104 0e14 	add.w	lr, r4, #20
 8018744:	46a9      	mov	r9, r5
 8018746:	f04f 0c00 	mov.w	ip, #0
 801874a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801874e:	f8d9 3000 	ldr.w	r3, [r9]
 8018752:	fa1f fb87 	uxth.w	fp, r7
 8018756:	b29b      	uxth	r3, r3
 8018758:	fb0a 330b 	mla	r3, sl, fp, r3
 801875c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8018760:	f8d9 7000 	ldr.w	r7, [r9]
 8018764:	4463      	add	r3, ip
 8018766:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801876a:	fb0a c70b 	mla	r7, sl, fp, ip
 801876e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8018772:	b29b      	uxth	r3, r3
 8018774:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8018778:	4572      	cmp	r2, lr
 801877a:	f849 3b04 	str.w	r3, [r9], #4
 801877e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8018782:	d8e2      	bhi.n	801874a <__multiply+0xb2>
 8018784:	9b01      	ldr	r3, [sp, #4]
 8018786:	f845 c003 	str.w	ip, [r5, r3]
 801878a:	9b03      	ldr	r3, [sp, #12]
 801878c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8018790:	3104      	adds	r1, #4
 8018792:	f1b9 0f00 	cmp.w	r9, #0
 8018796:	d021      	beq.n	80187dc <__multiply+0x144>
 8018798:	682b      	ldr	r3, [r5, #0]
 801879a:	f104 0c14 	add.w	ip, r4, #20
 801879e:	46ae      	mov	lr, r5
 80187a0:	f04f 0a00 	mov.w	sl, #0
 80187a4:	f8bc b000 	ldrh.w	fp, [ip]
 80187a8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80187ac:	fb09 770b 	mla	r7, r9, fp, r7
 80187b0:	4457      	add	r7, sl
 80187b2:	b29b      	uxth	r3, r3
 80187b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80187b8:	f84e 3b04 	str.w	r3, [lr], #4
 80187bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80187c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80187c4:	f8be 3000 	ldrh.w	r3, [lr]
 80187c8:	fb09 330a 	mla	r3, r9, sl, r3
 80187cc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80187d0:	4562      	cmp	r2, ip
 80187d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80187d6:	d8e5      	bhi.n	80187a4 <__multiply+0x10c>
 80187d8:	9f01      	ldr	r7, [sp, #4]
 80187da:	51eb      	str	r3, [r5, r7]
 80187dc:	3504      	adds	r5, #4
 80187de:	e799      	b.n	8018714 <__multiply+0x7c>
 80187e0:	3e01      	subs	r6, #1
 80187e2:	e79b      	b.n	801871c <__multiply+0x84>
 80187e4:	0801a129 	.word	0x0801a129
 80187e8:	0801a1b1 	.word	0x0801a1b1

080187ec <__pow5mult>:
 80187ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80187f0:	4615      	mov	r5, r2
 80187f2:	f012 0203 	ands.w	r2, r2, #3
 80187f6:	4607      	mov	r7, r0
 80187f8:	460e      	mov	r6, r1
 80187fa:	d007      	beq.n	801880c <__pow5mult+0x20>
 80187fc:	4c25      	ldr	r4, [pc, #148]	@ (8018894 <__pow5mult+0xa8>)
 80187fe:	3a01      	subs	r2, #1
 8018800:	2300      	movs	r3, #0
 8018802:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018806:	f7ff fe55 	bl	80184b4 <__multadd>
 801880a:	4606      	mov	r6, r0
 801880c:	10ad      	asrs	r5, r5, #2
 801880e:	d03d      	beq.n	801888c <__pow5mult+0xa0>
 8018810:	69fc      	ldr	r4, [r7, #28]
 8018812:	b97c      	cbnz	r4, 8018834 <__pow5mult+0x48>
 8018814:	2010      	movs	r0, #16
 8018816:	f000 fb95 	bl	8018f44 <malloc>
 801881a:	4602      	mov	r2, r0
 801881c:	61f8      	str	r0, [r7, #28]
 801881e:	b928      	cbnz	r0, 801882c <__pow5mult+0x40>
 8018820:	4b1d      	ldr	r3, [pc, #116]	@ (8018898 <__pow5mult+0xac>)
 8018822:	481e      	ldr	r0, [pc, #120]	@ (801889c <__pow5mult+0xb0>)
 8018824:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8018828:	f000 fb5a 	bl	8018ee0 <__assert_func>
 801882c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018830:	6004      	str	r4, [r0, #0]
 8018832:	60c4      	str	r4, [r0, #12]
 8018834:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8018838:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801883c:	b94c      	cbnz	r4, 8018852 <__pow5mult+0x66>
 801883e:	f240 2171 	movw	r1, #625	@ 0x271
 8018842:	4638      	mov	r0, r7
 8018844:	f7ff ff12 	bl	801866c <__i2b>
 8018848:	2300      	movs	r3, #0
 801884a:	f8c8 0008 	str.w	r0, [r8, #8]
 801884e:	4604      	mov	r4, r0
 8018850:	6003      	str	r3, [r0, #0]
 8018852:	f04f 0900 	mov.w	r9, #0
 8018856:	07eb      	lsls	r3, r5, #31
 8018858:	d50a      	bpl.n	8018870 <__pow5mult+0x84>
 801885a:	4631      	mov	r1, r6
 801885c:	4622      	mov	r2, r4
 801885e:	4638      	mov	r0, r7
 8018860:	f7ff ff1a 	bl	8018698 <__multiply>
 8018864:	4631      	mov	r1, r6
 8018866:	4680      	mov	r8, r0
 8018868:	4638      	mov	r0, r7
 801886a:	f7ff fe01 	bl	8018470 <_Bfree>
 801886e:	4646      	mov	r6, r8
 8018870:	106d      	asrs	r5, r5, #1
 8018872:	d00b      	beq.n	801888c <__pow5mult+0xa0>
 8018874:	6820      	ldr	r0, [r4, #0]
 8018876:	b938      	cbnz	r0, 8018888 <__pow5mult+0x9c>
 8018878:	4622      	mov	r2, r4
 801887a:	4621      	mov	r1, r4
 801887c:	4638      	mov	r0, r7
 801887e:	f7ff ff0b 	bl	8018698 <__multiply>
 8018882:	6020      	str	r0, [r4, #0]
 8018884:	f8c0 9000 	str.w	r9, [r0]
 8018888:	4604      	mov	r4, r0
 801888a:	e7e4      	b.n	8018856 <__pow5mult+0x6a>
 801888c:	4630      	mov	r0, r6
 801888e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018892:	bf00      	nop
 8018894:	0801a20c 	.word	0x0801a20c
 8018898:	0801a19a 	.word	0x0801a19a
 801889c:	0801a1b1 	.word	0x0801a1b1

080188a0 <__lshift>:
 80188a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80188a4:	460c      	mov	r4, r1
 80188a6:	6849      	ldr	r1, [r1, #4]
 80188a8:	6923      	ldr	r3, [r4, #16]
 80188aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80188ae:	68a3      	ldr	r3, [r4, #8]
 80188b0:	4607      	mov	r7, r0
 80188b2:	4691      	mov	r9, r2
 80188b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80188b8:	f108 0601 	add.w	r6, r8, #1
 80188bc:	42b3      	cmp	r3, r6
 80188be:	db0b      	blt.n	80188d8 <__lshift+0x38>
 80188c0:	4638      	mov	r0, r7
 80188c2:	f7ff fd95 	bl	80183f0 <_Balloc>
 80188c6:	4605      	mov	r5, r0
 80188c8:	b948      	cbnz	r0, 80188de <__lshift+0x3e>
 80188ca:	4602      	mov	r2, r0
 80188cc:	4b28      	ldr	r3, [pc, #160]	@ (8018970 <__lshift+0xd0>)
 80188ce:	4829      	ldr	r0, [pc, #164]	@ (8018974 <__lshift+0xd4>)
 80188d0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80188d4:	f000 fb04 	bl	8018ee0 <__assert_func>
 80188d8:	3101      	adds	r1, #1
 80188da:	005b      	lsls	r3, r3, #1
 80188dc:	e7ee      	b.n	80188bc <__lshift+0x1c>
 80188de:	2300      	movs	r3, #0
 80188e0:	f100 0114 	add.w	r1, r0, #20
 80188e4:	f100 0210 	add.w	r2, r0, #16
 80188e8:	4618      	mov	r0, r3
 80188ea:	4553      	cmp	r3, sl
 80188ec:	db33      	blt.n	8018956 <__lshift+0xb6>
 80188ee:	6920      	ldr	r0, [r4, #16]
 80188f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80188f4:	f104 0314 	add.w	r3, r4, #20
 80188f8:	f019 091f 	ands.w	r9, r9, #31
 80188fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018900:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018904:	d02b      	beq.n	801895e <__lshift+0xbe>
 8018906:	f1c9 0e20 	rsb	lr, r9, #32
 801890a:	468a      	mov	sl, r1
 801890c:	2200      	movs	r2, #0
 801890e:	6818      	ldr	r0, [r3, #0]
 8018910:	fa00 f009 	lsl.w	r0, r0, r9
 8018914:	4310      	orrs	r0, r2
 8018916:	f84a 0b04 	str.w	r0, [sl], #4
 801891a:	f853 2b04 	ldr.w	r2, [r3], #4
 801891e:	459c      	cmp	ip, r3
 8018920:	fa22 f20e 	lsr.w	r2, r2, lr
 8018924:	d8f3      	bhi.n	801890e <__lshift+0x6e>
 8018926:	ebac 0304 	sub.w	r3, ip, r4
 801892a:	3b15      	subs	r3, #21
 801892c:	f023 0303 	bic.w	r3, r3, #3
 8018930:	3304      	adds	r3, #4
 8018932:	f104 0015 	add.w	r0, r4, #21
 8018936:	4584      	cmp	ip, r0
 8018938:	bf38      	it	cc
 801893a:	2304      	movcc	r3, #4
 801893c:	50ca      	str	r2, [r1, r3]
 801893e:	b10a      	cbz	r2, 8018944 <__lshift+0xa4>
 8018940:	f108 0602 	add.w	r6, r8, #2
 8018944:	3e01      	subs	r6, #1
 8018946:	4638      	mov	r0, r7
 8018948:	612e      	str	r6, [r5, #16]
 801894a:	4621      	mov	r1, r4
 801894c:	f7ff fd90 	bl	8018470 <_Bfree>
 8018950:	4628      	mov	r0, r5
 8018952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018956:	f842 0f04 	str.w	r0, [r2, #4]!
 801895a:	3301      	adds	r3, #1
 801895c:	e7c5      	b.n	80188ea <__lshift+0x4a>
 801895e:	3904      	subs	r1, #4
 8018960:	f853 2b04 	ldr.w	r2, [r3], #4
 8018964:	f841 2f04 	str.w	r2, [r1, #4]!
 8018968:	459c      	cmp	ip, r3
 801896a:	d8f9      	bhi.n	8018960 <__lshift+0xc0>
 801896c:	e7ea      	b.n	8018944 <__lshift+0xa4>
 801896e:	bf00      	nop
 8018970:	0801a129 	.word	0x0801a129
 8018974:	0801a1b1 	.word	0x0801a1b1

08018978 <__mcmp>:
 8018978:	690a      	ldr	r2, [r1, #16]
 801897a:	4603      	mov	r3, r0
 801897c:	6900      	ldr	r0, [r0, #16]
 801897e:	1a80      	subs	r0, r0, r2
 8018980:	b530      	push	{r4, r5, lr}
 8018982:	d10e      	bne.n	80189a2 <__mcmp+0x2a>
 8018984:	3314      	adds	r3, #20
 8018986:	3114      	adds	r1, #20
 8018988:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801898c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8018990:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018994:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018998:	4295      	cmp	r5, r2
 801899a:	d003      	beq.n	80189a4 <__mcmp+0x2c>
 801899c:	d205      	bcs.n	80189aa <__mcmp+0x32>
 801899e:	f04f 30ff 	mov.w	r0, #4294967295
 80189a2:	bd30      	pop	{r4, r5, pc}
 80189a4:	42a3      	cmp	r3, r4
 80189a6:	d3f3      	bcc.n	8018990 <__mcmp+0x18>
 80189a8:	e7fb      	b.n	80189a2 <__mcmp+0x2a>
 80189aa:	2001      	movs	r0, #1
 80189ac:	e7f9      	b.n	80189a2 <__mcmp+0x2a>
	...

080189b0 <__mdiff>:
 80189b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189b4:	4689      	mov	r9, r1
 80189b6:	4606      	mov	r6, r0
 80189b8:	4611      	mov	r1, r2
 80189ba:	4648      	mov	r0, r9
 80189bc:	4614      	mov	r4, r2
 80189be:	f7ff ffdb 	bl	8018978 <__mcmp>
 80189c2:	1e05      	subs	r5, r0, #0
 80189c4:	d112      	bne.n	80189ec <__mdiff+0x3c>
 80189c6:	4629      	mov	r1, r5
 80189c8:	4630      	mov	r0, r6
 80189ca:	f7ff fd11 	bl	80183f0 <_Balloc>
 80189ce:	4602      	mov	r2, r0
 80189d0:	b928      	cbnz	r0, 80189de <__mdiff+0x2e>
 80189d2:	4b3f      	ldr	r3, [pc, #252]	@ (8018ad0 <__mdiff+0x120>)
 80189d4:	f240 2137 	movw	r1, #567	@ 0x237
 80189d8:	483e      	ldr	r0, [pc, #248]	@ (8018ad4 <__mdiff+0x124>)
 80189da:	f000 fa81 	bl	8018ee0 <__assert_func>
 80189de:	2301      	movs	r3, #1
 80189e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80189e4:	4610      	mov	r0, r2
 80189e6:	b003      	add	sp, #12
 80189e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189ec:	bfbc      	itt	lt
 80189ee:	464b      	movlt	r3, r9
 80189f0:	46a1      	movlt	r9, r4
 80189f2:	4630      	mov	r0, r6
 80189f4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80189f8:	bfba      	itte	lt
 80189fa:	461c      	movlt	r4, r3
 80189fc:	2501      	movlt	r5, #1
 80189fe:	2500      	movge	r5, #0
 8018a00:	f7ff fcf6 	bl	80183f0 <_Balloc>
 8018a04:	4602      	mov	r2, r0
 8018a06:	b918      	cbnz	r0, 8018a10 <__mdiff+0x60>
 8018a08:	4b31      	ldr	r3, [pc, #196]	@ (8018ad0 <__mdiff+0x120>)
 8018a0a:	f240 2145 	movw	r1, #581	@ 0x245
 8018a0e:	e7e3      	b.n	80189d8 <__mdiff+0x28>
 8018a10:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8018a14:	6926      	ldr	r6, [r4, #16]
 8018a16:	60c5      	str	r5, [r0, #12]
 8018a18:	f109 0310 	add.w	r3, r9, #16
 8018a1c:	f109 0514 	add.w	r5, r9, #20
 8018a20:	f104 0e14 	add.w	lr, r4, #20
 8018a24:	f100 0b14 	add.w	fp, r0, #20
 8018a28:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8018a2c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8018a30:	9301      	str	r3, [sp, #4]
 8018a32:	46d9      	mov	r9, fp
 8018a34:	f04f 0c00 	mov.w	ip, #0
 8018a38:	9b01      	ldr	r3, [sp, #4]
 8018a3a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8018a3e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8018a42:	9301      	str	r3, [sp, #4]
 8018a44:	fa1f f38a 	uxth.w	r3, sl
 8018a48:	4619      	mov	r1, r3
 8018a4a:	b283      	uxth	r3, r0
 8018a4c:	1acb      	subs	r3, r1, r3
 8018a4e:	0c00      	lsrs	r0, r0, #16
 8018a50:	4463      	add	r3, ip
 8018a52:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8018a56:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8018a5a:	b29b      	uxth	r3, r3
 8018a5c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8018a60:	4576      	cmp	r6, lr
 8018a62:	f849 3b04 	str.w	r3, [r9], #4
 8018a66:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8018a6a:	d8e5      	bhi.n	8018a38 <__mdiff+0x88>
 8018a6c:	1b33      	subs	r3, r6, r4
 8018a6e:	3b15      	subs	r3, #21
 8018a70:	f023 0303 	bic.w	r3, r3, #3
 8018a74:	3415      	adds	r4, #21
 8018a76:	3304      	adds	r3, #4
 8018a78:	42a6      	cmp	r6, r4
 8018a7a:	bf38      	it	cc
 8018a7c:	2304      	movcc	r3, #4
 8018a7e:	441d      	add	r5, r3
 8018a80:	445b      	add	r3, fp
 8018a82:	461e      	mov	r6, r3
 8018a84:	462c      	mov	r4, r5
 8018a86:	4544      	cmp	r4, r8
 8018a88:	d30e      	bcc.n	8018aa8 <__mdiff+0xf8>
 8018a8a:	f108 0103 	add.w	r1, r8, #3
 8018a8e:	1b49      	subs	r1, r1, r5
 8018a90:	f021 0103 	bic.w	r1, r1, #3
 8018a94:	3d03      	subs	r5, #3
 8018a96:	45a8      	cmp	r8, r5
 8018a98:	bf38      	it	cc
 8018a9a:	2100      	movcc	r1, #0
 8018a9c:	440b      	add	r3, r1
 8018a9e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018aa2:	b191      	cbz	r1, 8018aca <__mdiff+0x11a>
 8018aa4:	6117      	str	r7, [r2, #16]
 8018aa6:	e79d      	b.n	80189e4 <__mdiff+0x34>
 8018aa8:	f854 1b04 	ldr.w	r1, [r4], #4
 8018aac:	46e6      	mov	lr, ip
 8018aae:	0c08      	lsrs	r0, r1, #16
 8018ab0:	fa1c fc81 	uxtah	ip, ip, r1
 8018ab4:	4471      	add	r1, lr
 8018ab6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8018aba:	b289      	uxth	r1, r1
 8018abc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8018ac0:	f846 1b04 	str.w	r1, [r6], #4
 8018ac4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8018ac8:	e7dd      	b.n	8018a86 <__mdiff+0xd6>
 8018aca:	3f01      	subs	r7, #1
 8018acc:	e7e7      	b.n	8018a9e <__mdiff+0xee>
 8018ace:	bf00      	nop
 8018ad0:	0801a129 	.word	0x0801a129
 8018ad4:	0801a1b1 	.word	0x0801a1b1

08018ad8 <__ulp>:
 8018ad8:	b082      	sub	sp, #8
 8018ada:	ed8d 0b00 	vstr	d0, [sp]
 8018ade:	9a01      	ldr	r2, [sp, #4]
 8018ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8018b20 <__ulp+0x48>)
 8018ae2:	4013      	ands	r3, r2
 8018ae4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8018ae8:	2b00      	cmp	r3, #0
 8018aea:	dc08      	bgt.n	8018afe <__ulp+0x26>
 8018aec:	425b      	negs	r3, r3
 8018aee:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8018af2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8018af6:	da04      	bge.n	8018b02 <__ulp+0x2a>
 8018af8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8018afc:	4113      	asrs	r3, r2
 8018afe:	2200      	movs	r2, #0
 8018b00:	e008      	b.n	8018b14 <__ulp+0x3c>
 8018b02:	f1a2 0314 	sub.w	r3, r2, #20
 8018b06:	2b1e      	cmp	r3, #30
 8018b08:	bfda      	itte	le
 8018b0a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8018b0e:	40da      	lsrle	r2, r3
 8018b10:	2201      	movgt	r2, #1
 8018b12:	2300      	movs	r3, #0
 8018b14:	4619      	mov	r1, r3
 8018b16:	4610      	mov	r0, r2
 8018b18:	ec41 0b10 	vmov	d0, r0, r1
 8018b1c:	b002      	add	sp, #8
 8018b1e:	4770      	bx	lr
 8018b20:	7ff00000 	.word	0x7ff00000

08018b24 <__b2d>:
 8018b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b28:	6906      	ldr	r6, [r0, #16]
 8018b2a:	f100 0814 	add.w	r8, r0, #20
 8018b2e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8018b32:	1f37      	subs	r7, r6, #4
 8018b34:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8018b38:	4610      	mov	r0, r2
 8018b3a:	f7ff fd4b 	bl	80185d4 <__hi0bits>
 8018b3e:	f1c0 0320 	rsb	r3, r0, #32
 8018b42:	280a      	cmp	r0, #10
 8018b44:	600b      	str	r3, [r1, #0]
 8018b46:	491b      	ldr	r1, [pc, #108]	@ (8018bb4 <__b2d+0x90>)
 8018b48:	dc15      	bgt.n	8018b76 <__b2d+0x52>
 8018b4a:	f1c0 0c0b 	rsb	ip, r0, #11
 8018b4e:	fa22 f30c 	lsr.w	r3, r2, ip
 8018b52:	45b8      	cmp	r8, r7
 8018b54:	ea43 0501 	orr.w	r5, r3, r1
 8018b58:	bf34      	ite	cc
 8018b5a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8018b5e:	2300      	movcs	r3, #0
 8018b60:	3015      	adds	r0, #21
 8018b62:	fa02 f000 	lsl.w	r0, r2, r0
 8018b66:	fa23 f30c 	lsr.w	r3, r3, ip
 8018b6a:	4303      	orrs	r3, r0
 8018b6c:	461c      	mov	r4, r3
 8018b6e:	ec45 4b10 	vmov	d0, r4, r5
 8018b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b76:	45b8      	cmp	r8, r7
 8018b78:	bf3a      	itte	cc
 8018b7a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8018b7e:	f1a6 0708 	subcc.w	r7, r6, #8
 8018b82:	2300      	movcs	r3, #0
 8018b84:	380b      	subs	r0, #11
 8018b86:	d012      	beq.n	8018bae <__b2d+0x8a>
 8018b88:	f1c0 0120 	rsb	r1, r0, #32
 8018b8c:	fa23 f401 	lsr.w	r4, r3, r1
 8018b90:	4082      	lsls	r2, r0
 8018b92:	4322      	orrs	r2, r4
 8018b94:	4547      	cmp	r7, r8
 8018b96:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8018b9a:	bf8c      	ite	hi
 8018b9c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8018ba0:	2200      	movls	r2, #0
 8018ba2:	4083      	lsls	r3, r0
 8018ba4:	40ca      	lsrs	r2, r1
 8018ba6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8018baa:	4313      	orrs	r3, r2
 8018bac:	e7de      	b.n	8018b6c <__b2d+0x48>
 8018bae:	ea42 0501 	orr.w	r5, r2, r1
 8018bb2:	e7db      	b.n	8018b6c <__b2d+0x48>
 8018bb4:	3ff00000 	.word	0x3ff00000

08018bb8 <__d2b>:
 8018bb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018bbc:	460f      	mov	r7, r1
 8018bbe:	2101      	movs	r1, #1
 8018bc0:	ec59 8b10 	vmov	r8, r9, d0
 8018bc4:	4616      	mov	r6, r2
 8018bc6:	f7ff fc13 	bl	80183f0 <_Balloc>
 8018bca:	4604      	mov	r4, r0
 8018bcc:	b930      	cbnz	r0, 8018bdc <__d2b+0x24>
 8018bce:	4602      	mov	r2, r0
 8018bd0:	4b23      	ldr	r3, [pc, #140]	@ (8018c60 <__d2b+0xa8>)
 8018bd2:	4824      	ldr	r0, [pc, #144]	@ (8018c64 <__d2b+0xac>)
 8018bd4:	f240 310f 	movw	r1, #783	@ 0x30f
 8018bd8:	f000 f982 	bl	8018ee0 <__assert_func>
 8018bdc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8018be0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018be4:	b10d      	cbz	r5, 8018bea <__d2b+0x32>
 8018be6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8018bea:	9301      	str	r3, [sp, #4]
 8018bec:	f1b8 0300 	subs.w	r3, r8, #0
 8018bf0:	d023      	beq.n	8018c3a <__d2b+0x82>
 8018bf2:	4668      	mov	r0, sp
 8018bf4:	9300      	str	r3, [sp, #0]
 8018bf6:	f7ff fd0c 	bl	8018612 <__lo0bits>
 8018bfa:	e9dd 1200 	ldrd	r1, r2, [sp]
 8018bfe:	b1d0      	cbz	r0, 8018c36 <__d2b+0x7e>
 8018c00:	f1c0 0320 	rsb	r3, r0, #32
 8018c04:	fa02 f303 	lsl.w	r3, r2, r3
 8018c08:	430b      	orrs	r3, r1
 8018c0a:	40c2      	lsrs	r2, r0
 8018c0c:	6163      	str	r3, [r4, #20]
 8018c0e:	9201      	str	r2, [sp, #4]
 8018c10:	9b01      	ldr	r3, [sp, #4]
 8018c12:	61a3      	str	r3, [r4, #24]
 8018c14:	2b00      	cmp	r3, #0
 8018c16:	bf0c      	ite	eq
 8018c18:	2201      	moveq	r2, #1
 8018c1a:	2202      	movne	r2, #2
 8018c1c:	6122      	str	r2, [r4, #16]
 8018c1e:	b1a5      	cbz	r5, 8018c4a <__d2b+0x92>
 8018c20:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8018c24:	4405      	add	r5, r0
 8018c26:	603d      	str	r5, [r7, #0]
 8018c28:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8018c2c:	6030      	str	r0, [r6, #0]
 8018c2e:	4620      	mov	r0, r4
 8018c30:	b003      	add	sp, #12
 8018c32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018c36:	6161      	str	r1, [r4, #20]
 8018c38:	e7ea      	b.n	8018c10 <__d2b+0x58>
 8018c3a:	a801      	add	r0, sp, #4
 8018c3c:	f7ff fce9 	bl	8018612 <__lo0bits>
 8018c40:	9b01      	ldr	r3, [sp, #4]
 8018c42:	6163      	str	r3, [r4, #20]
 8018c44:	3020      	adds	r0, #32
 8018c46:	2201      	movs	r2, #1
 8018c48:	e7e8      	b.n	8018c1c <__d2b+0x64>
 8018c4a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018c4e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8018c52:	6038      	str	r0, [r7, #0]
 8018c54:	6918      	ldr	r0, [r3, #16]
 8018c56:	f7ff fcbd 	bl	80185d4 <__hi0bits>
 8018c5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018c5e:	e7e5      	b.n	8018c2c <__d2b+0x74>
 8018c60:	0801a129 	.word	0x0801a129
 8018c64:	0801a1b1 	.word	0x0801a1b1

08018c68 <__ratio>:
 8018c68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c6c:	4688      	mov	r8, r1
 8018c6e:	4669      	mov	r1, sp
 8018c70:	4681      	mov	r9, r0
 8018c72:	f7ff ff57 	bl	8018b24 <__b2d>
 8018c76:	a901      	add	r1, sp, #4
 8018c78:	4640      	mov	r0, r8
 8018c7a:	ec55 4b10 	vmov	r4, r5, d0
 8018c7e:	f7ff ff51 	bl	8018b24 <__b2d>
 8018c82:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8018c86:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8018c8a:	1ad2      	subs	r2, r2, r3
 8018c8c:	e9dd 3100 	ldrd	r3, r1, [sp]
 8018c90:	1a5b      	subs	r3, r3, r1
 8018c92:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8018c96:	ec57 6b10 	vmov	r6, r7, d0
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	bfd6      	itet	le
 8018c9e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018ca2:	462a      	movgt	r2, r5
 8018ca4:	463a      	movle	r2, r7
 8018ca6:	46ab      	mov	fp, r5
 8018ca8:	46a2      	mov	sl, r4
 8018caa:	bfce      	itee	gt
 8018cac:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8018cb0:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8018cb4:	ee00 3a90 	vmovle	s1, r3
 8018cb8:	ec4b ab17 	vmov	d7, sl, fp
 8018cbc:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8018cc0:	b003      	add	sp, #12
 8018cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018cc6 <__copybits>:
 8018cc6:	3901      	subs	r1, #1
 8018cc8:	b570      	push	{r4, r5, r6, lr}
 8018cca:	1149      	asrs	r1, r1, #5
 8018ccc:	6914      	ldr	r4, [r2, #16]
 8018cce:	3101      	adds	r1, #1
 8018cd0:	f102 0314 	add.w	r3, r2, #20
 8018cd4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018cd8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018cdc:	1f05      	subs	r5, r0, #4
 8018cde:	42a3      	cmp	r3, r4
 8018ce0:	d30c      	bcc.n	8018cfc <__copybits+0x36>
 8018ce2:	1aa3      	subs	r3, r4, r2
 8018ce4:	3b11      	subs	r3, #17
 8018ce6:	f023 0303 	bic.w	r3, r3, #3
 8018cea:	3211      	adds	r2, #17
 8018cec:	42a2      	cmp	r2, r4
 8018cee:	bf88      	it	hi
 8018cf0:	2300      	movhi	r3, #0
 8018cf2:	4418      	add	r0, r3
 8018cf4:	2300      	movs	r3, #0
 8018cf6:	4288      	cmp	r0, r1
 8018cf8:	d305      	bcc.n	8018d06 <__copybits+0x40>
 8018cfa:	bd70      	pop	{r4, r5, r6, pc}
 8018cfc:	f853 6b04 	ldr.w	r6, [r3], #4
 8018d00:	f845 6f04 	str.w	r6, [r5, #4]!
 8018d04:	e7eb      	b.n	8018cde <__copybits+0x18>
 8018d06:	f840 3b04 	str.w	r3, [r0], #4
 8018d0a:	e7f4      	b.n	8018cf6 <__copybits+0x30>

08018d0c <__any_on>:
 8018d0c:	f100 0214 	add.w	r2, r0, #20
 8018d10:	6900      	ldr	r0, [r0, #16]
 8018d12:	114b      	asrs	r3, r1, #5
 8018d14:	4298      	cmp	r0, r3
 8018d16:	b510      	push	{r4, lr}
 8018d18:	db11      	blt.n	8018d3e <__any_on+0x32>
 8018d1a:	dd0a      	ble.n	8018d32 <__any_on+0x26>
 8018d1c:	f011 011f 	ands.w	r1, r1, #31
 8018d20:	d007      	beq.n	8018d32 <__any_on+0x26>
 8018d22:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018d26:	fa24 f001 	lsr.w	r0, r4, r1
 8018d2a:	fa00 f101 	lsl.w	r1, r0, r1
 8018d2e:	428c      	cmp	r4, r1
 8018d30:	d10b      	bne.n	8018d4a <__any_on+0x3e>
 8018d32:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018d36:	4293      	cmp	r3, r2
 8018d38:	d803      	bhi.n	8018d42 <__any_on+0x36>
 8018d3a:	2000      	movs	r0, #0
 8018d3c:	bd10      	pop	{r4, pc}
 8018d3e:	4603      	mov	r3, r0
 8018d40:	e7f7      	b.n	8018d32 <__any_on+0x26>
 8018d42:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018d46:	2900      	cmp	r1, #0
 8018d48:	d0f5      	beq.n	8018d36 <__any_on+0x2a>
 8018d4a:	2001      	movs	r0, #1
 8018d4c:	e7f6      	b.n	8018d3c <__any_on+0x30>

08018d4e <__ascii_wctomb>:
 8018d4e:	4603      	mov	r3, r0
 8018d50:	4608      	mov	r0, r1
 8018d52:	b141      	cbz	r1, 8018d66 <__ascii_wctomb+0x18>
 8018d54:	2aff      	cmp	r2, #255	@ 0xff
 8018d56:	d904      	bls.n	8018d62 <__ascii_wctomb+0x14>
 8018d58:	228a      	movs	r2, #138	@ 0x8a
 8018d5a:	601a      	str	r2, [r3, #0]
 8018d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8018d60:	4770      	bx	lr
 8018d62:	700a      	strb	r2, [r1, #0]
 8018d64:	2001      	movs	r0, #1
 8018d66:	4770      	bx	lr

08018d68 <__sflush_r>:
 8018d68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d70:	0716      	lsls	r6, r2, #28
 8018d72:	4605      	mov	r5, r0
 8018d74:	460c      	mov	r4, r1
 8018d76:	d454      	bmi.n	8018e22 <__sflush_r+0xba>
 8018d78:	684b      	ldr	r3, [r1, #4]
 8018d7a:	2b00      	cmp	r3, #0
 8018d7c:	dc02      	bgt.n	8018d84 <__sflush_r+0x1c>
 8018d7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018d80:	2b00      	cmp	r3, #0
 8018d82:	dd48      	ble.n	8018e16 <__sflush_r+0xae>
 8018d84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018d86:	2e00      	cmp	r6, #0
 8018d88:	d045      	beq.n	8018e16 <__sflush_r+0xae>
 8018d8a:	2300      	movs	r3, #0
 8018d8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018d90:	682f      	ldr	r7, [r5, #0]
 8018d92:	6a21      	ldr	r1, [r4, #32]
 8018d94:	602b      	str	r3, [r5, #0]
 8018d96:	d030      	beq.n	8018dfa <__sflush_r+0x92>
 8018d98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8018d9a:	89a3      	ldrh	r3, [r4, #12]
 8018d9c:	0759      	lsls	r1, r3, #29
 8018d9e:	d505      	bpl.n	8018dac <__sflush_r+0x44>
 8018da0:	6863      	ldr	r3, [r4, #4]
 8018da2:	1ad2      	subs	r2, r2, r3
 8018da4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018da6:	b10b      	cbz	r3, 8018dac <__sflush_r+0x44>
 8018da8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018daa:	1ad2      	subs	r2, r2, r3
 8018dac:	2300      	movs	r3, #0
 8018dae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018db0:	6a21      	ldr	r1, [r4, #32]
 8018db2:	4628      	mov	r0, r5
 8018db4:	47b0      	blx	r6
 8018db6:	1c43      	adds	r3, r0, #1
 8018db8:	89a3      	ldrh	r3, [r4, #12]
 8018dba:	d106      	bne.n	8018dca <__sflush_r+0x62>
 8018dbc:	6829      	ldr	r1, [r5, #0]
 8018dbe:	291d      	cmp	r1, #29
 8018dc0:	d82b      	bhi.n	8018e1a <__sflush_r+0xb2>
 8018dc2:	4a2a      	ldr	r2, [pc, #168]	@ (8018e6c <__sflush_r+0x104>)
 8018dc4:	410a      	asrs	r2, r1
 8018dc6:	07d6      	lsls	r6, r2, #31
 8018dc8:	d427      	bmi.n	8018e1a <__sflush_r+0xb2>
 8018dca:	2200      	movs	r2, #0
 8018dcc:	6062      	str	r2, [r4, #4]
 8018dce:	04d9      	lsls	r1, r3, #19
 8018dd0:	6922      	ldr	r2, [r4, #16]
 8018dd2:	6022      	str	r2, [r4, #0]
 8018dd4:	d504      	bpl.n	8018de0 <__sflush_r+0x78>
 8018dd6:	1c42      	adds	r2, r0, #1
 8018dd8:	d101      	bne.n	8018dde <__sflush_r+0x76>
 8018dda:	682b      	ldr	r3, [r5, #0]
 8018ddc:	b903      	cbnz	r3, 8018de0 <__sflush_r+0x78>
 8018dde:	6560      	str	r0, [r4, #84]	@ 0x54
 8018de0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018de2:	602f      	str	r7, [r5, #0]
 8018de4:	b1b9      	cbz	r1, 8018e16 <__sflush_r+0xae>
 8018de6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018dea:	4299      	cmp	r1, r3
 8018dec:	d002      	beq.n	8018df4 <__sflush_r+0x8c>
 8018dee:	4628      	mov	r0, r5
 8018df0:	f7fe feba 	bl	8017b68 <_free_r>
 8018df4:	2300      	movs	r3, #0
 8018df6:	6363      	str	r3, [r4, #52]	@ 0x34
 8018df8:	e00d      	b.n	8018e16 <__sflush_r+0xae>
 8018dfa:	2301      	movs	r3, #1
 8018dfc:	4628      	mov	r0, r5
 8018dfe:	47b0      	blx	r6
 8018e00:	4602      	mov	r2, r0
 8018e02:	1c50      	adds	r0, r2, #1
 8018e04:	d1c9      	bne.n	8018d9a <__sflush_r+0x32>
 8018e06:	682b      	ldr	r3, [r5, #0]
 8018e08:	2b00      	cmp	r3, #0
 8018e0a:	d0c6      	beq.n	8018d9a <__sflush_r+0x32>
 8018e0c:	2b1d      	cmp	r3, #29
 8018e0e:	d001      	beq.n	8018e14 <__sflush_r+0xac>
 8018e10:	2b16      	cmp	r3, #22
 8018e12:	d11e      	bne.n	8018e52 <__sflush_r+0xea>
 8018e14:	602f      	str	r7, [r5, #0]
 8018e16:	2000      	movs	r0, #0
 8018e18:	e022      	b.n	8018e60 <__sflush_r+0xf8>
 8018e1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018e1e:	b21b      	sxth	r3, r3
 8018e20:	e01b      	b.n	8018e5a <__sflush_r+0xf2>
 8018e22:	690f      	ldr	r7, [r1, #16]
 8018e24:	2f00      	cmp	r7, #0
 8018e26:	d0f6      	beq.n	8018e16 <__sflush_r+0xae>
 8018e28:	0793      	lsls	r3, r2, #30
 8018e2a:	680e      	ldr	r6, [r1, #0]
 8018e2c:	bf08      	it	eq
 8018e2e:	694b      	ldreq	r3, [r1, #20]
 8018e30:	600f      	str	r7, [r1, #0]
 8018e32:	bf18      	it	ne
 8018e34:	2300      	movne	r3, #0
 8018e36:	eba6 0807 	sub.w	r8, r6, r7
 8018e3a:	608b      	str	r3, [r1, #8]
 8018e3c:	f1b8 0f00 	cmp.w	r8, #0
 8018e40:	dde9      	ble.n	8018e16 <__sflush_r+0xae>
 8018e42:	6a21      	ldr	r1, [r4, #32]
 8018e44:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8018e46:	4643      	mov	r3, r8
 8018e48:	463a      	mov	r2, r7
 8018e4a:	4628      	mov	r0, r5
 8018e4c:	47b0      	blx	r6
 8018e4e:	2800      	cmp	r0, #0
 8018e50:	dc08      	bgt.n	8018e64 <__sflush_r+0xfc>
 8018e52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018e56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018e5a:	81a3      	strh	r3, [r4, #12]
 8018e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8018e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e64:	4407      	add	r7, r0
 8018e66:	eba8 0800 	sub.w	r8, r8, r0
 8018e6a:	e7e7      	b.n	8018e3c <__sflush_r+0xd4>
 8018e6c:	dfbffffe 	.word	0xdfbffffe

08018e70 <_fflush_r>:
 8018e70:	b538      	push	{r3, r4, r5, lr}
 8018e72:	690b      	ldr	r3, [r1, #16]
 8018e74:	4605      	mov	r5, r0
 8018e76:	460c      	mov	r4, r1
 8018e78:	b913      	cbnz	r3, 8018e80 <_fflush_r+0x10>
 8018e7a:	2500      	movs	r5, #0
 8018e7c:	4628      	mov	r0, r5
 8018e7e:	bd38      	pop	{r3, r4, r5, pc}
 8018e80:	b118      	cbz	r0, 8018e8a <_fflush_r+0x1a>
 8018e82:	6a03      	ldr	r3, [r0, #32]
 8018e84:	b90b      	cbnz	r3, 8018e8a <_fflush_r+0x1a>
 8018e86:	f7fe fd45 	bl	8017914 <__sinit>
 8018e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018e8e:	2b00      	cmp	r3, #0
 8018e90:	d0f3      	beq.n	8018e7a <_fflush_r+0xa>
 8018e92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018e94:	07d0      	lsls	r0, r2, #31
 8018e96:	d404      	bmi.n	8018ea2 <_fflush_r+0x32>
 8018e98:	0599      	lsls	r1, r3, #22
 8018e9a:	d402      	bmi.n	8018ea2 <_fflush_r+0x32>
 8018e9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018e9e:	f7fe fe4a 	bl	8017b36 <__retarget_lock_acquire_recursive>
 8018ea2:	4628      	mov	r0, r5
 8018ea4:	4621      	mov	r1, r4
 8018ea6:	f7ff ff5f 	bl	8018d68 <__sflush_r>
 8018eaa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018eac:	07da      	lsls	r2, r3, #31
 8018eae:	4605      	mov	r5, r0
 8018eb0:	d4e4      	bmi.n	8018e7c <_fflush_r+0xc>
 8018eb2:	89a3      	ldrh	r3, [r4, #12]
 8018eb4:	059b      	lsls	r3, r3, #22
 8018eb6:	d4e1      	bmi.n	8018e7c <_fflush_r+0xc>
 8018eb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018eba:	f7fe fe3d 	bl	8017b38 <__retarget_lock_release_recursive>
 8018ebe:	e7dd      	b.n	8018e7c <_fflush_r+0xc>

08018ec0 <_sbrk_r>:
 8018ec0:	b538      	push	{r3, r4, r5, lr}
 8018ec2:	4d06      	ldr	r5, [pc, #24]	@ (8018edc <_sbrk_r+0x1c>)
 8018ec4:	2300      	movs	r3, #0
 8018ec6:	4604      	mov	r4, r0
 8018ec8:	4608      	mov	r0, r1
 8018eca:	602b      	str	r3, [r5, #0]
 8018ecc:	f7eb fc8c 	bl	80047e8 <_sbrk>
 8018ed0:	1c43      	adds	r3, r0, #1
 8018ed2:	d102      	bne.n	8018eda <_sbrk_r+0x1a>
 8018ed4:	682b      	ldr	r3, [r5, #0]
 8018ed6:	b103      	cbz	r3, 8018eda <_sbrk_r+0x1a>
 8018ed8:	6023      	str	r3, [r4, #0]
 8018eda:	bd38      	pop	{r3, r4, r5, pc}
 8018edc:	2400591c 	.word	0x2400591c

08018ee0 <__assert_func>:
 8018ee0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018ee2:	4614      	mov	r4, r2
 8018ee4:	461a      	mov	r2, r3
 8018ee6:	4b09      	ldr	r3, [pc, #36]	@ (8018f0c <__assert_func+0x2c>)
 8018ee8:	681b      	ldr	r3, [r3, #0]
 8018eea:	4605      	mov	r5, r0
 8018eec:	68d8      	ldr	r0, [r3, #12]
 8018eee:	b954      	cbnz	r4, 8018f06 <__assert_func+0x26>
 8018ef0:	4b07      	ldr	r3, [pc, #28]	@ (8018f10 <__assert_func+0x30>)
 8018ef2:	461c      	mov	r4, r3
 8018ef4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018ef8:	9100      	str	r1, [sp, #0]
 8018efa:	462b      	mov	r3, r5
 8018efc:	4905      	ldr	r1, [pc, #20]	@ (8018f14 <__assert_func+0x34>)
 8018efe:	f000 f829 	bl	8018f54 <fiprintf>
 8018f02:	f000 f839 	bl	8018f78 <abort>
 8018f06:	4b04      	ldr	r3, [pc, #16]	@ (8018f18 <__assert_func+0x38>)
 8018f08:	e7f4      	b.n	8018ef4 <__assert_func+0x14>
 8018f0a:	bf00      	nop
 8018f0c:	24000260 	.word	0x24000260
 8018f10:	0801a343 	.word	0x0801a343
 8018f14:	0801a315 	.word	0x0801a315
 8018f18:	0801a308 	.word	0x0801a308

08018f1c <_calloc_r>:
 8018f1c:	b570      	push	{r4, r5, r6, lr}
 8018f1e:	fba1 5402 	umull	r5, r4, r1, r2
 8018f22:	b93c      	cbnz	r4, 8018f34 <_calloc_r+0x18>
 8018f24:	4629      	mov	r1, r5
 8018f26:	f7ff f9c5 	bl	80182b4 <_malloc_r>
 8018f2a:	4606      	mov	r6, r0
 8018f2c:	b928      	cbnz	r0, 8018f3a <_calloc_r+0x1e>
 8018f2e:	2600      	movs	r6, #0
 8018f30:	4630      	mov	r0, r6
 8018f32:	bd70      	pop	{r4, r5, r6, pc}
 8018f34:	220c      	movs	r2, #12
 8018f36:	6002      	str	r2, [r0, #0]
 8018f38:	e7f9      	b.n	8018f2e <_calloc_r+0x12>
 8018f3a:	462a      	mov	r2, r5
 8018f3c:	4621      	mov	r1, r4
 8018f3e:	f7fe fd62 	bl	8017a06 <memset>
 8018f42:	e7f5      	b.n	8018f30 <_calloc_r+0x14>

08018f44 <malloc>:
 8018f44:	4b02      	ldr	r3, [pc, #8]	@ (8018f50 <malloc+0xc>)
 8018f46:	4601      	mov	r1, r0
 8018f48:	6818      	ldr	r0, [r3, #0]
 8018f4a:	f7ff b9b3 	b.w	80182b4 <_malloc_r>
 8018f4e:	bf00      	nop
 8018f50:	24000260 	.word	0x24000260

08018f54 <fiprintf>:
 8018f54:	b40e      	push	{r1, r2, r3}
 8018f56:	b503      	push	{r0, r1, lr}
 8018f58:	4601      	mov	r1, r0
 8018f5a:	ab03      	add	r3, sp, #12
 8018f5c:	4805      	ldr	r0, [pc, #20]	@ (8018f74 <fiprintf+0x20>)
 8018f5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018f62:	6800      	ldr	r0, [r0, #0]
 8018f64:	9301      	str	r3, [sp, #4]
 8018f66:	f000 f837 	bl	8018fd8 <_vfiprintf_r>
 8018f6a:	b002      	add	sp, #8
 8018f6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018f70:	b003      	add	sp, #12
 8018f72:	4770      	bx	lr
 8018f74:	24000260 	.word	0x24000260

08018f78 <abort>:
 8018f78:	b508      	push	{r3, lr}
 8018f7a:	2006      	movs	r0, #6
 8018f7c:	f000 fb8e 	bl	801969c <raise>
 8018f80:	2001      	movs	r0, #1
 8018f82:	f7eb fbb9 	bl	80046f8 <_exit>

08018f86 <__sfputc_r>:
 8018f86:	6893      	ldr	r3, [r2, #8]
 8018f88:	3b01      	subs	r3, #1
 8018f8a:	2b00      	cmp	r3, #0
 8018f8c:	b410      	push	{r4}
 8018f8e:	6093      	str	r3, [r2, #8]
 8018f90:	da08      	bge.n	8018fa4 <__sfputc_r+0x1e>
 8018f92:	6994      	ldr	r4, [r2, #24]
 8018f94:	42a3      	cmp	r3, r4
 8018f96:	db01      	blt.n	8018f9c <__sfputc_r+0x16>
 8018f98:	290a      	cmp	r1, #10
 8018f9a:	d103      	bne.n	8018fa4 <__sfputc_r+0x1e>
 8018f9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018fa0:	f000 bac0 	b.w	8019524 <__swbuf_r>
 8018fa4:	6813      	ldr	r3, [r2, #0]
 8018fa6:	1c58      	adds	r0, r3, #1
 8018fa8:	6010      	str	r0, [r2, #0]
 8018faa:	7019      	strb	r1, [r3, #0]
 8018fac:	4608      	mov	r0, r1
 8018fae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018fb2:	4770      	bx	lr

08018fb4 <__sfputs_r>:
 8018fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018fb6:	4606      	mov	r6, r0
 8018fb8:	460f      	mov	r7, r1
 8018fba:	4614      	mov	r4, r2
 8018fbc:	18d5      	adds	r5, r2, r3
 8018fbe:	42ac      	cmp	r4, r5
 8018fc0:	d101      	bne.n	8018fc6 <__sfputs_r+0x12>
 8018fc2:	2000      	movs	r0, #0
 8018fc4:	e007      	b.n	8018fd6 <__sfputs_r+0x22>
 8018fc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018fca:	463a      	mov	r2, r7
 8018fcc:	4630      	mov	r0, r6
 8018fce:	f7ff ffda 	bl	8018f86 <__sfputc_r>
 8018fd2:	1c43      	adds	r3, r0, #1
 8018fd4:	d1f3      	bne.n	8018fbe <__sfputs_r+0xa>
 8018fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018fd8 <_vfiprintf_r>:
 8018fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fdc:	460d      	mov	r5, r1
 8018fde:	b09d      	sub	sp, #116	@ 0x74
 8018fe0:	4614      	mov	r4, r2
 8018fe2:	4698      	mov	r8, r3
 8018fe4:	4606      	mov	r6, r0
 8018fe6:	b118      	cbz	r0, 8018ff0 <_vfiprintf_r+0x18>
 8018fe8:	6a03      	ldr	r3, [r0, #32]
 8018fea:	b90b      	cbnz	r3, 8018ff0 <_vfiprintf_r+0x18>
 8018fec:	f7fe fc92 	bl	8017914 <__sinit>
 8018ff0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018ff2:	07d9      	lsls	r1, r3, #31
 8018ff4:	d405      	bmi.n	8019002 <_vfiprintf_r+0x2a>
 8018ff6:	89ab      	ldrh	r3, [r5, #12]
 8018ff8:	059a      	lsls	r2, r3, #22
 8018ffa:	d402      	bmi.n	8019002 <_vfiprintf_r+0x2a>
 8018ffc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018ffe:	f7fe fd9a 	bl	8017b36 <__retarget_lock_acquire_recursive>
 8019002:	89ab      	ldrh	r3, [r5, #12]
 8019004:	071b      	lsls	r3, r3, #28
 8019006:	d501      	bpl.n	801900c <_vfiprintf_r+0x34>
 8019008:	692b      	ldr	r3, [r5, #16]
 801900a:	b99b      	cbnz	r3, 8019034 <_vfiprintf_r+0x5c>
 801900c:	4629      	mov	r1, r5
 801900e:	4630      	mov	r0, r6
 8019010:	f000 fac6 	bl	80195a0 <__swsetup_r>
 8019014:	b170      	cbz	r0, 8019034 <_vfiprintf_r+0x5c>
 8019016:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019018:	07dc      	lsls	r4, r3, #31
 801901a:	d504      	bpl.n	8019026 <_vfiprintf_r+0x4e>
 801901c:	f04f 30ff 	mov.w	r0, #4294967295
 8019020:	b01d      	add	sp, #116	@ 0x74
 8019022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019026:	89ab      	ldrh	r3, [r5, #12]
 8019028:	0598      	lsls	r0, r3, #22
 801902a:	d4f7      	bmi.n	801901c <_vfiprintf_r+0x44>
 801902c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801902e:	f7fe fd83 	bl	8017b38 <__retarget_lock_release_recursive>
 8019032:	e7f3      	b.n	801901c <_vfiprintf_r+0x44>
 8019034:	2300      	movs	r3, #0
 8019036:	9309      	str	r3, [sp, #36]	@ 0x24
 8019038:	2320      	movs	r3, #32
 801903a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801903e:	f8cd 800c 	str.w	r8, [sp, #12]
 8019042:	2330      	movs	r3, #48	@ 0x30
 8019044:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80191f4 <_vfiprintf_r+0x21c>
 8019048:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801904c:	f04f 0901 	mov.w	r9, #1
 8019050:	4623      	mov	r3, r4
 8019052:	469a      	mov	sl, r3
 8019054:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019058:	b10a      	cbz	r2, 801905e <_vfiprintf_r+0x86>
 801905a:	2a25      	cmp	r2, #37	@ 0x25
 801905c:	d1f9      	bne.n	8019052 <_vfiprintf_r+0x7a>
 801905e:	ebba 0b04 	subs.w	fp, sl, r4
 8019062:	d00b      	beq.n	801907c <_vfiprintf_r+0xa4>
 8019064:	465b      	mov	r3, fp
 8019066:	4622      	mov	r2, r4
 8019068:	4629      	mov	r1, r5
 801906a:	4630      	mov	r0, r6
 801906c:	f7ff ffa2 	bl	8018fb4 <__sfputs_r>
 8019070:	3001      	adds	r0, #1
 8019072:	f000 80a7 	beq.w	80191c4 <_vfiprintf_r+0x1ec>
 8019076:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019078:	445a      	add	r2, fp
 801907a:	9209      	str	r2, [sp, #36]	@ 0x24
 801907c:	f89a 3000 	ldrb.w	r3, [sl]
 8019080:	2b00      	cmp	r3, #0
 8019082:	f000 809f 	beq.w	80191c4 <_vfiprintf_r+0x1ec>
 8019086:	2300      	movs	r3, #0
 8019088:	f04f 32ff 	mov.w	r2, #4294967295
 801908c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019090:	f10a 0a01 	add.w	sl, sl, #1
 8019094:	9304      	str	r3, [sp, #16]
 8019096:	9307      	str	r3, [sp, #28]
 8019098:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801909c:	931a      	str	r3, [sp, #104]	@ 0x68
 801909e:	4654      	mov	r4, sl
 80190a0:	2205      	movs	r2, #5
 80190a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80190a6:	4853      	ldr	r0, [pc, #332]	@ (80191f4 <_vfiprintf_r+0x21c>)
 80190a8:	f7e7 f932 	bl	8000310 <memchr>
 80190ac:	9a04      	ldr	r2, [sp, #16]
 80190ae:	b9d8      	cbnz	r0, 80190e8 <_vfiprintf_r+0x110>
 80190b0:	06d1      	lsls	r1, r2, #27
 80190b2:	bf44      	itt	mi
 80190b4:	2320      	movmi	r3, #32
 80190b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80190ba:	0713      	lsls	r3, r2, #28
 80190bc:	bf44      	itt	mi
 80190be:	232b      	movmi	r3, #43	@ 0x2b
 80190c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80190c4:	f89a 3000 	ldrb.w	r3, [sl]
 80190c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80190ca:	d015      	beq.n	80190f8 <_vfiprintf_r+0x120>
 80190cc:	9a07      	ldr	r2, [sp, #28]
 80190ce:	4654      	mov	r4, sl
 80190d0:	2000      	movs	r0, #0
 80190d2:	f04f 0c0a 	mov.w	ip, #10
 80190d6:	4621      	mov	r1, r4
 80190d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80190dc:	3b30      	subs	r3, #48	@ 0x30
 80190de:	2b09      	cmp	r3, #9
 80190e0:	d94b      	bls.n	801917a <_vfiprintf_r+0x1a2>
 80190e2:	b1b0      	cbz	r0, 8019112 <_vfiprintf_r+0x13a>
 80190e4:	9207      	str	r2, [sp, #28]
 80190e6:	e014      	b.n	8019112 <_vfiprintf_r+0x13a>
 80190e8:	eba0 0308 	sub.w	r3, r0, r8
 80190ec:	fa09 f303 	lsl.w	r3, r9, r3
 80190f0:	4313      	orrs	r3, r2
 80190f2:	9304      	str	r3, [sp, #16]
 80190f4:	46a2      	mov	sl, r4
 80190f6:	e7d2      	b.n	801909e <_vfiprintf_r+0xc6>
 80190f8:	9b03      	ldr	r3, [sp, #12]
 80190fa:	1d19      	adds	r1, r3, #4
 80190fc:	681b      	ldr	r3, [r3, #0]
 80190fe:	9103      	str	r1, [sp, #12]
 8019100:	2b00      	cmp	r3, #0
 8019102:	bfbb      	ittet	lt
 8019104:	425b      	neglt	r3, r3
 8019106:	f042 0202 	orrlt.w	r2, r2, #2
 801910a:	9307      	strge	r3, [sp, #28]
 801910c:	9307      	strlt	r3, [sp, #28]
 801910e:	bfb8      	it	lt
 8019110:	9204      	strlt	r2, [sp, #16]
 8019112:	7823      	ldrb	r3, [r4, #0]
 8019114:	2b2e      	cmp	r3, #46	@ 0x2e
 8019116:	d10a      	bne.n	801912e <_vfiprintf_r+0x156>
 8019118:	7863      	ldrb	r3, [r4, #1]
 801911a:	2b2a      	cmp	r3, #42	@ 0x2a
 801911c:	d132      	bne.n	8019184 <_vfiprintf_r+0x1ac>
 801911e:	9b03      	ldr	r3, [sp, #12]
 8019120:	1d1a      	adds	r2, r3, #4
 8019122:	681b      	ldr	r3, [r3, #0]
 8019124:	9203      	str	r2, [sp, #12]
 8019126:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801912a:	3402      	adds	r4, #2
 801912c:	9305      	str	r3, [sp, #20]
 801912e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8019204 <_vfiprintf_r+0x22c>
 8019132:	7821      	ldrb	r1, [r4, #0]
 8019134:	2203      	movs	r2, #3
 8019136:	4650      	mov	r0, sl
 8019138:	f7e7 f8ea 	bl	8000310 <memchr>
 801913c:	b138      	cbz	r0, 801914e <_vfiprintf_r+0x176>
 801913e:	9b04      	ldr	r3, [sp, #16]
 8019140:	eba0 000a 	sub.w	r0, r0, sl
 8019144:	2240      	movs	r2, #64	@ 0x40
 8019146:	4082      	lsls	r2, r0
 8019148:	4313      	orrs	r3, r2
 801914a:	3401      	adds	r4, #1
 801914c:	9304      	str	r3, [sp, #16]
 801914e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019152:	4829      	ldr	r0, [pc, #164]	@ (80191f8 <_vfiprintf_r+0x220>)
 8019154:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019158:	2206      	movs	r2, #6
 801915a:	f7e7 f8d9 	bl	8000310 <memchr>
 801915e:	2800      	cmp	r0, #0
 8019160:	d03f      	beq.n	80191e2 <_vfiprintf_r+0x20a>
 8019162:	4b26      	ldr	r3, [pc, #152]	@ (80191fc <_vfiprintf_r+0x224>)
 8019164:	bb1b      	cbnz	r3, 80191ae <_vfiprintf_r+0x1d6>
 8019166:	9b03      	ldr	r3, [sp, #12]
 8019168:	3307      	adds	r3, #7
 801916a:	f023 0307 	bic.w	r3, r3, #7
 801916e:	3308      	adds	r3, #8
 8019170:	9303      	str	r3, [sp, #12]
 8019172:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019174:	443b      	add	r3, r7
 8019176:	9309      	str	r3, [sp, #36]	@ 0x24
 8019178:	e76a      	b.n	8019050 <_vfiprintf_r+0x78>
 801917a:	fb0c 3202 	mla	r2, ip, r2, r3
 801917e:	460c      	mov	r4, r1
 8019180:	2001      	movs	r0, #1
 8019182:	e7a8      	b.n	80190d6 <_vfiprintf_r+0xfe>
 8019184:	2300      	movs	r3, #0
 8019186:	3401      	adds	r4, #1
 8019188:	9305      	str	r3, [sp, #20]
 801918a:	4619      	mov	r1, r3
 801918c:	f04f 0c0a 	mov.w	ip, #10
 8019190:	4620      	mov	r0, r4
 8019192:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019196:	3a30      	subs	r2, #48	@ 0x30
 8019198:	2a09      	cmp	r2, #9
 801919a:	d903      	bls.n	80191a4 <_vfiprintf_r+0x1cc>
 801919c:	2b00      	cmp	r3, #0
 801919e:	d0c6      	beq.n	801912e <_vfiprintf_r+0x156>
 80191a0:	9105      	str	r1, [sp, #20]
 80191a2:	e7c4      	b.n	801912e <_vfiprintf_r+0x156>
 80191a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80191a8:	4604      	mov	r4, r0
 80191aa:	2301      	movs	r3, #1
 80191ac:	e7f0      	b.n	8019190 <_vfiprintf_r+0x1b8>
 80191ae:	ab03      	add	r3, sp, #12
 80191b0:	9300      	str	r3, [sp, #0]
 80191b2:	462a      	mov	r2, r5
 80191b4:	4b12      	ldr	r3, [pc, #72]	@ (8019200 <_vfiprintf_r+0x228>)
 80191b6:	a904      	add	r1, sp, #16
 80191b8:	4630      	mov	r0, r6
 80191ba:	f3af 8000 	nop.w
 80191be:	4607      	mov	r7, r0
 80191c0:	1c78      	adds	r0, r7, #1
 80191c2:	d1d6      	bne.n	8019172 <_vfiprintf_r+0x19a>
 80191c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80191c6:	07d9      	lsls	r1, r3, #31
 80191c8:	d405      	bmi.n	80191d6 <_vfiprintf_r+0x1fe>
 80191ca:	89ab      	ldrh	r3, [r5, #12]
 80191cc:	059a      	lsls	r2, r3, #22
 80191ce:	d402      	bmi.n	80191d6 <_vfiprintf_r+0x1fe>
 80191d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80191d2:	f7fe fcb1 	bl	8017b38 <__retarget_lock_release_recursive>
 80191d6:	89ab      	ldrh	r3, [r5, #12]
 80191d8:	065b      	lsls	r3, r3, #25
 80191da:	f53f af1f 	bmi.w	801901c <_vfiprintf_r+0x44>
 80191de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80191e0:	e71e      	b.n	8019020 <_vfiprintf_r+0x48>
 80191e2:	ab03      	add	r3, sp, #12
 80191e4:	9300      	str	r3, [sp, #0]
 80191e6:	462a      	mov	r2, r5
 80191e8:	4b05      	ldr	r3, [pc, #20]	@ (8019200 <_vfiprintf_r+0x228>)
 80191ea:	a904      	add	r1, sp, #16
 80191ec:	4630      	mov	r0, r6
 80191ee:	f000 f879 	bl	80192e4 <_printf_i>
 80191f2:	e7e4      	b.n	80191be <_vfiprintf_r+0x1e6>
 80191f4:	0801a344 	.word	0x0801a344
 80191f8:	0801a34e 	.word	0x0801a34e
 80191fc:	00000000 	.word	0x00000000
 8019200:	08018fb5 	.word	0x08018fb5
 8019204:	0801a34a 	.word	0x0801a34a

08019208 <_printf_common>:
 8019208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801920c:	4616      	mov	r6, r2
 801920e:	4698      	mov	r8, r3
 8019210:	688a      	ldr	r2, [r1, #8]
 8019212:	690b      	ldr	r3, [r1, #16]
 8019214:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019218:	4293      	cmp	r3, r2
 801921a:	bfb8      	it	lt
 801921c:	4613      	movlt	r3, r2
 801921e:	6033      	str	r3, [r6, #0]
 8019220:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019224:	4607      	mov	r7, r0
 8019226:	460c      	mov	r4, r1
 8019228:	b10a      	cbz	r2, 801922e <_printf_common+0x26>
 801922a:	3301      	adds	r3, #1
 801922c:	6033      	str	r3, [r6, #0]
 801922e:	6823      	ldr	r3, [r4, #0]
 8019230:	0699      	lsls	r1, r3, #26
 8019232:	bf42      	ittt	mi
 8019234:	6833      	ldrmi	r3, [r6, #0]
 8019236:	3302      	addmi	r3, #2
 8019238:	6033      	strmi	r3, [r6, #0]
 801923a:	6825      	ldr	r5, [r4, #0]
 801923c:	f015 0506 	ands.w	r5, r5, #6
 8019240:	d106      	bne.n	8019250 <_printf_common+0x48>
 8019242:	f104 0a19 	add.w	sl, r4, #25
 8019246:	68e3      	ldr	r3, [r4, #12]
 8019248:	6832      	ldr	r2, [r6, #0]
 801924a:	1a9b      	subs	r3, r3, r2
 801924c:	42ab      	cmp	r3, r5
 801924e:	dc26      	bgt.n	801929e <_printf_common+0x96>
 8019250:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019254:	6822      	ldr	r2, [r4, #0]
 8019256:	3b00      	subs	r3, #0
 8019258:	bf18      	it	ne
 801925a:	2301      	movne	r3, #1
 801925c:	0692      	lsls	r2, r2, #26
 801925e:	d42b      	bmi.n	80192b8 <_printf_common+0xb0>
 8019260:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019264:	4641      	mov	r1, r8
 8019266:	4638      	mov	r0, r7
 8019268:	47c8      	blx	r9
 801926a:	3001      	adds	r0, #1
 801926c:	d01e      	beq.n	80192ac <_printf_common+0xa4>
 801926e:	6823      	ldr	r3, [r4, #0]
 8019270:	6922      	ldr	r2, [r4, #16]
 8019272:	f003 0306 	and.w	r3, r3, #6
 8019276:	2b04      	cmp	r3, #4
 8019278:	bf02      	ittt	eq
 801927a:	68e5      	ldreq	r5, [r4, #12]
 801927c:	6833      	ldreq	r3, [r6, #0]
 801927e:	1aed      	subeq	r5, r5, r3
 8019280:	68a3      	ldr	r3, [r4, #8]
 8019282:	bf0c      	ite	eq
 8019284:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019288:	2500      	movne	r5, #0
 801928a:	4293      	cmp	r3, r2
 801928c:	bfc4      	itt	gt
 801928e:	1a9b      	subgt	r3, r3, r2
 8019290:	18ed      	addgt	r5, r5, r3
 8019292:	2600      	movs	r6, #0
 8019294:	341a      	adds	r4, #26
 8019296:	42b5      	cmp	r5, r6
 8019298:	d11a      	bne.n	80192d0 <_printf_common+0xc8>
 801929a:	2000      	movs	r0, #0
 801929c:	e008      	b.n	80192b0 <_printf_common+0xa8>
 801929e:	2301      	movs	r3, #1
 80192a0:	4652      	mov	r2, sl
 80192a2:	4641      	mov	r1, r8
 80192a4:	4638      	mov	r0, r7
 80192a6:	47c8      	blx	r9
 80192a8:	3001      	adds	r0, #1
 80192aa:	d103      	bne.n	80192b4 <_printf_common+0xac>
 80192ac:	f04f 30ff 	mov.w	r0, #4294967295
 80192b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80192b4:	3501      	adds	r5, #1
 80192b6:	e7c6      	b.n	8019246 <_printf_common+0x3e>
 80192b8:	18e1      	adds	r1, r4, r3
 80192ba:	1c5a      	adds	r2, r3, #1
 80192bc:	2030      	movs	r0, #48	@ 0x30
 80192be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80192c2:	4422      	add	r2, r4
 80192c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80192c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80192cc:	3302      	adds	r3, #2
 80192ce:	e7c7      	b.n	8019260 <_printf_common+0x58>
 80192d0:	2301      	movs	r3, #1
 80192d2:	4622      	mov	r2, r4
 80192d4:	4641      	mov	r1, r8
 80192d6:	4638      	mov	r0, r7
 80192d8:	47c8      	blx	r9
 80192da:	3001      	adds	r0, #1
 80192dc:	d0e6      	beq.n	80192ac <_printf_common+0xa4>
 80192de:	3601      	adds	r6, #1
 80192e0:	e7d9      	b.n	8019296 <_printf_common+0x8e>
	...

080192e4 <_printf_i>:
 80192e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80192e8:	7e0f      	ldrb	r7, [r1, #24]
 80192ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80192ec:	2f78      	cmp	r7, #120	@ 0x78
 80192ee:	4691      	mov	r9, r2
 80192f0:	4680      	mov	r8, r0
 80192f2:	460c      	mov	r4, r1
 80192f4:	469a      	mov	sl, r3
 80192f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80192fa:	d807      	bhi.n	801930c <_printf_i+0x28>
 80192fc:	2f62      	cmp	r7, #98	@ 0x62
 80192fe:	d80a      	bhi.n	8019316 <_printf_i+0x32>
 8019300:	2f00      	cmp	r7, #0
 8019302:	f000 80d2 	beq.w	80194aa <_printf_i+0x1c6>
 8019306:	2f58      	cmp	r7, #88	@ 0x58
 8019308:	f000 80b9 	beq.w	801947e <_printf_i+0x19a>
 801930c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019310:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019314:	e03a      	b.n	801938c <_printf_i+0xa8>
 8019316:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801931a:	2b15      	cmp	r3, #21
 801931c:	d8f6      	bhi.n	801930c <_printf_i+0x28>
 801931e:	a101      	add	r1, pc, #4	@ (adr r1, 8019324 <_printf_i+0x40>)
 8019320:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019324:	0801937d 	.word	0x0801937d
 8019328:	08019391 	.word	0x08019391
 801932c:	0801930d 	.word	0x0801930d
 8019330:	0801930d 	.word	0x0801930d
 8019334:	0801930d 	.word	0x0801930d
 8019338:	0801930d 	.word	0x0801930d
 801933c:	08019391 	.word	0x08019391
 8019340:	0801930d 	.word	0x0801930d
 8019344:	0801930d 	.word	0x0801930d
 8019348:	0801930d 	.word	0x0801930d
 801934c:	0801930d 	.word	0x0801930d
 8019350:	08019491 	.word	0x08019491
 8019354:	080193bb 	.word	0x080193bb
 8019358:	0801944b 	.word	0x0801944b
 801935c:	0801930d 	.word	0x0801930d
 8019360:	0801930d 	.word	0x0801930d
 8019364:	080194b3 	.word	0x080194b3
 8019368:	0801930d 	.word	0x0801930d
 801936c:	080193bb 	.word	0x080193bb
 8019370:	0801930d 	.word	0x0801930d
 8019374:	0801930d 	.word	0x0801930d
 8019378:	08019453 	.word	0x08019453
 801937c:	6833      	ldr	r3, [r6, #0]
 801937e:	1d1a      	adds	r2, r3, #4
 8019380:	681b      	ldr	r3, [r3, #0]
 8019382:	6032      	str	r2, [r6, #0]
 8019384:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019388:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801938c:	2301      	movs	r3, #1
 801938e:	e09d      	b.n	80194cc <_printf_i+0x1e8>
 8019390:	6833      	ldr	r3, [r6, #0]
 8019392:	6820      	ldr	r0, [r4, #0]
 8019394:	1d19      	adds	r1, r3, #4
 8019396:	6031      	str	r1, [r6, #0]
 8019398:	0606      	lsls	r6, r0, #24
 801939a:	d501      	bpl.n	80193a0 <_printf_i+0xbc>
 801939c:	681d      	ldr	r5, [r3, #0]
 801939e:	e003      	b.n	80193a8 <_printf_i+0xc4>
 80193a0:	0645      	lsls	r5, r0, #25
 80193a2:	d5fb      	bpl.n	801939c <_printf_i+0xb8>
 80193a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80193a8:	2d00      	cmp	r5, #0
 80193aa:	da03      	bge.n	80193b4 <_printf_i+0xd0>
 80193ac:	232d      	movs	r3, #45	@ 0x2d
 80193ae:	426d      	negs	r5, r5
 80193b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80193b4:	4859      	ldr	r0, [pc, #356]	@ (801951c <_printf_i+0x238>)
 80193b6:	230a      	movs	r3, #10
 80193b8:	e011      	b.n	80193de <_printf_i+0xfa>
 80193ba:	6821      	ldr	r1, [r4, #0]
 80193bc:	6833      	ldr	r3, [r6, #0]
 80193be:	0608      	lsls	r0, r1, #24
 80193c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80193c4:	d402      	bmi.n	80193cc <_printf_i+0xe8>
 80193c6:	0649      	lsls	r1, r1, #25
 80193c8:	bf48      	it	mi
 80193ca:	b2ad      	uxthmi	r5, r5
 80193cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80193ce:	4853      	ldr	r0, [pc, #332]	@ (801951c <_printf_i+0x238>)
 80193d0:	6033      	str	r3, [r6, #0]
 80193d2:	bf14      	ite	ne
 80193d4:	230a      	movne	r3, #10
 80193d6:	2308      	moveq	r3, #8
 80193d8:	2100      	movs	r1, #0
 80193da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80193de:	6866      	ldr	r6, [r4, #4]
 80193e0:	60a6      	str	r6, [r4, #8]
 80193e2:	2e00      	cmp	r6, #0
 80193e4:	bfa2      	ittt	ge
 80193e6:	6821      	ldrge	r1, [r4, #0]
 80193e8:	f021 0104 	bicge.w	r1, r1, #4
 80193ec:	6021      	strge	r1, [r4, #0]
 80193ee:	b90d      	cbnz	r5, 80193f4 <_printf_i+0x110>
 80193f0:	2e00      	cmp	r6, #0
 80193f2:	d04b      	beq.n	801948c <_printf_i+0x1a8>
 80193f4:	4616      	mov	r6, r2
 80193f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80193fa:	fb03 5711 	mls	r7, r3, r1, r5
 80193fe:	5dc7      	ldrb	r7, [r0, r7]
 8019400:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019404:	462f      	mov	r7, r5
 8019406:	42bb      	cmp	r3, r7
 8019408:	460d      	mov	r5, r1
 801940a:	d9f4      	bls.n	80193f6 <_printf_i+0x112>
 801940c:	2b08      	cmp	r3, #8
 801940e:	d10b      	bne.n	8019428 <_printf_i+0x144>
 8019410:	6823      	ldr	r3, [r4, #0]
 8019412:	07df      	lsls	r7, r3, #31
 8019414:	d508      	bpl.n	8019428 <_printf_i+0x144>
 8019416:	6923      	ldr	r3, [r4, #16]
 8019418:	6861      	ldr	r1, [r4, #4]
 801941a:	4299      	cmp	r1, r3
 801941c:	bfde      	ittt	le
 801941e:	2330      	movle	r3, #48	@ 0x30
 8019420:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019424:	f106 36ff 	addle.w	r6, r6, #4294967295
 8019428:	1b92      	subs	r2, r2, r6
 801942a:	6122      	str	r2, [r4, #16]
 801942c:	f8cd a000 	str.w	sl, [sp]
 8019430:	464b      	mov	r3, r9
 8019432:	aa03      	add	r2, sp, #12
 8019434:	4621      	mov	r1, r4
 8019436:	4640      	mov	r0, r8
 8019438:	f7ff fee6 	bl	8019208 <_printf_common>
 801943c:	3001      	adds	r0, #1
 801943e:	d14a      	bne.n	80194d6 <_printf_i+0x1f2>
 8019440:	f04f 30ff 	mov.w	r0, #4294967295
 8019444:	b004      	add	sp, #16
 8019446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801944a:	6823      	ldr	r3, [r4, #0]
 801944c:	f043 0320 	orr.w	r3, r3, #32
 8019450:	6023      	str	r3, [r4, #0]
 8019452:	4833      	ldr	r0, [pc, #204]	@ (8019520 <_printf_i+0x23c>)
 8019454:	2778      	movs	r7, #120	@ 0x78
 8019456:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801945a:	6823      	ldr	r3, [r4, #0]
 801945c:	6831      	ldr	r1, [r6, #0]
 801945e:	061f      	lsls	r7, r3, #24
 8019460:	f851 5b04 	ldr.w	r5, [r1], #4
 8019464:	d402      	bmi.n	801946c <_printf_i+0x188>
 8019466:	065f      	lsls	r7, r3, #25
 8019468:	bf48      	it	mi
 801946a:	b2ad      	uxthmi	r5, r5
 801946c:	6031      	str	r1, [r6, #0]
 801946e:	07d9      	lsls	r1, r3, #31
 8019470:	bf44      	itt	mi
 8019472:	f043 0320 	orrmi.w	r3, r3, #32
 8019476:	6023      	strmi	r3, [r4, #0]
 8019478:	b11d      	cbz	r5, 8019482 <_printf_i+0x19e>
 801947a:	2310      	movs	r3, #16
 801947c:	e7ac      	b.n	80193d8 <_printf_i+0xf4>
 801947e:	4827      	ldr	r0, [pc, #156]	@ (801951c <_printf_i+0x238>)
 8019480:	e7e9      	b.n	8019456 <_printf_i+0x172>
 8019482:	6823      	ldr	r3, [r4, #0]
 8019484:	f023 0320 	bic.w	r3, r3, #32
 8019488:	6023      	str	r3, [r4, #0]
 801948a:	e7f6      	b.n	801947a <_printf_i+0x196>
 801948c:	4616      	mov	r6, r2
 801948e:	e7bd      	b.n	801940c <_printf_i+0x128>
 8019490:	6833      	ldr	r3, [r6, #0]
 8019492:	6825      	ldr	r5, [r4, #0]
 8019494:	6961      	ldr	r1, [r4, #20]
 8019496:	1d18      	adds	r0, r3, #4
 8019498:	6030      	str	r0, [r6, #0]
 801949a:	062e      	lsls	r6, r5, #24
 801949c:	681b      	ldr	r3, [r3, #0]
 801949e:	d501      	bpl.n	80194a4 <_printf_i+0x1c0>
 80194a0:	6019      	str	r1, [r3, #0]
 80194a2:	e002      	b.n	80194aa <_printf_i+0x1c6>
 80194a4:	0668      	lsls	r0, r5, #25
 80194a6:	d5fb      	bpl.n	80194a0 <_printf_i+0x1bc>
 80194a8:	8019      	strh	r1, [r3, #0]
 80194aa:	2300      	movs	r3, #0
 80194ac:	6123      	str	r3, [r4, #16]
 80194ae:	4616      	mov	r6, r2
 80194b0:	e7bc      	b.n	801942c <_printf_i+0x148>
 80194b2:	6833      	ldr	r3, [r6, #0]
 80194b4:	1d1a      	adds	r2, r3, #4
 80194b6:	6032      	str	r2, [r6, #0]
 80194b8:	681e      	ldr	r6, [r3, #0]
 80194ba:	6862      	ldr	r2, [r4, #4]
 80194bc:	2100      	movs	r1, #0
 80194be:	4630      	mov	r0, r6
 80194c0:	f7e6 ff26 	bl	8000310 <memchr>
 80194c4:	b108      	cbz	r0, 80194ca <_printf_i+0x1e6>
 80194c6:	1b80      	subs	r0, r0, r6
 80194c8:	6060      	str	r0, [r4, #4]
 80194ca:	6863      	ldr	r3, [r4, #4]
 80194cc:	6123      	str	r3, [r4, #16]
 80194ce:	2300      	movs	r3, #0
 80194d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80194d4:	e7aa      	b.n	801942c <_printf_i+0x148>
 80194d6:	6923      	ldr	r3, [r4, #16]
 80194d8:	4632      	mov	r2, r6
 80194da:	4649      	mov	r1, r9
 80194dc:	4640      	mov	r0, r8
 80194de:	47d0      	blx	sl
 80194e0:	3001      	adds	r0, #1
 80194e2:	d0ad      	beq.n	8019440 <_printf_i+0x15c>
 80194e4:	6823      	ldr	r3, [r4, #0]
 80194e6:	079b      	lsls	r3, r3, #30
 80194e8:	d413      	bmi.n	8019512 <_printf_i+0x22e>
 80194ea:	68e0      	ldr	r0, [r4, #12]
 80194ec:	9b03      	ldr	r3, [sp, #12]
 80194ee:	4298      	cmp	r0, r3
 80194f0:	bfb8      	it	lt
 80194f2:	4618      	movlt	r0, r3
 80194f4:	e7a6      	b.n	8019444 <_printf_i+0x160>
 80194f6:	2301      	movs	r3, #1
 80194f8:	4632      	mov	r2, r6
 80194fa:	4649      	mov	r1, r9
 80194fc:	4640      	mov	r0, r8
 80194fe:	47d0      	blx	sl
 8019500:	3001      	adds	r0, #1
 8019502:	d09d      	beq.n	8019440 <_printf_i+0x15c>
 8019504:	3501      	adds	r5, #1
 8019506:	68e3      	ldr	r3, [r4, #12]
 8019508:	9903      	ldr	r1, [sp, #12]
 801950a:	1a5b      	subs	r3, r3, r1
 801950c:	42ab      	cmp	r3, r5
 801950e:	dcf2      	bgt.n	80194f6 <_printf_i+0x212>
 8019510:	e7eb      	b.n	80194ea <_printf_i+0x206>
 8019512:	2500      	movs	r5, #0
 8019514:	f104 0619 	add.w	r6, r4, #25
 8019518:	e7f5      	b.n	8019506 <_printf_i+0x222>
 801951a:	bf00      	nop
 801951c:	0801a355 	.word	0x0801a355
 8019520:	0801a366 	.word	0x0801a366

08019524 <__swbuf_r>:
 8019524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019526:	460e      	mov	r6, r1
 8019528:	4614      	mov	r4, r2
 801952a:	4605      	mov	r5, r0
 801952c:	b118      	cbz	r0, 8019536 <__swbuf_r+0x12>
 801952e:	6a03      	ldr	r3, [r0, #32]
 8019530:	b90b      	cbnz	r3, 8019536 <__swbuf_r+0x12>
 8019532:	f7fe f9ef 	bl	8017914 <__sinit>
 8019536:	69a3      	ldr	r3, [r4, #24]
 8019538:	60a3      	str	r3, [r4, #8]
 801953a:	89a3      	ldrh	r3, [r4, #12]
 801953c:	071a      	lsls	r2, r3, #28
 801953e:	d501      	bpl.n	8019544 <__swbuf_r+0x20>
 8019540:	6923      	ldr	r3, [r4, #16]
 8019542:	b943      	cbnz	r3, 8019556 <__swbuf_r+0x32>
 8019544:	4621      	mov	r1, r4
 8019546:	4628      	mov	r0, r5
 8019548:	f000 f82a 	bl	80195a0 <__swsetup_r>
 801954c:	b118      	cbz	r0, 8019556 <__swbuf_r+0x32>
 801954e:	f04f 37ff 	mov.w	r7, #4294967295
 8019552:	4638      	mov	r0, r7
 8019554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019556:	6823      	ldr	r3, [r4, #0]
 8019558:	6922      	ldr	r2, [r4, #16]
 801955a:	1a98      	subs	r0, r3, r2
 801955c:	6963      	ldr	r3, [r4, #20]
 801955e:	b2f6      	uxtb	r6, r6
 8019560:	4283      	cmp	r3, r0
 8019562:	4637      	mov	r7, r6
 8019564:	dc05      	bgt.n	8019572 <__swbuf_r+0x4e>
 8019566:	4621      	mov	r1, r4
 8019568:	4628      	mov	r0, r5
 801956a:	f7ff fc81 	bl	8018e70 <_fflush_r>
 801956e:	2800      	cmp	r0, #0
 8019570:	d1ed      	bne.n	801954e <__swbuf_r+0x2a>
 8019572:	68a3      	ldr	r3, [r4, #8]
 8019574:	3b01      	subs	r3, #1
 8019576:	60a3      	str	r3, [r4, #8]
 8019578:	6823      	ldr	r3, [r4, #0]
 801957a:	1c5a      	adds	r2, r3, #1
 801957c:	6022      	str	r2, [r4, #0]
 801957e:	701e      	strb	r6, [r3, #0]
 8019580:	6962      	ldr	r2, [r4, #20]
 8019582:	1c43      	adds	r3, r0, #1
 8019584:	429a      	cmp	r2, r3
 8019586:	d004      	beq.n	8019592 <__swbuf_r+0x6e>
 8019588:	89a3      	ldrh	r3, [r4, #12]
 801958a:	07db      	lsls	r3, r3, #31
 801958c:	d5e1      	bpl.n	8019552 <__swbuf_r+0x2e>
 801958e:	2e0a      	cmp	r6, #10
 8019590:	d1df      	bne.n	8019552 <__swbuf_r+0x2e>
 8019592:	4621      	mov	r1, r4
 8019594:	4628      	mov	r0, r5
 8019596:	f7ff fc6b 	bl	8018e70 <_fflush_r>
 801959a:	2800      	cmp	r0, #0
 801959c:	d0d9      	beq.n	8019552 <__swbuf_r+0x2e>
 801959e:	e7d6      	b.n	801954e <__swbuf_r+0x2a>

080195a0 <__swsetup_r>:
 80195a0:	b538      	push	{r3, r4, r5, lr}
 80195a2:	4b29      	ldr	r3, [pc, #164]	@ (8019648 <__swsetup_r+0xa8>)
 80195a4:	4605      	mov	r5, r0
 80195a6:	6818      	ldr	r0, [r3, #0]
 80195a8:	460c      	mov	r4, r1
 80195aa:	b118      	cbz	r0, 80195b4 <__swsetup_r+0x14>
 80195ac:	6a03      	ldr	r3, [r0, #32]
 80195ae:	b90b      	cbnz	r3, 80195b4 <__swsetup_r+0x14>
 80195b0:	f7fe f9b0 	bl	8017914 <__sinit>
 80195b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80195b8:	0719      	lsls	r1, r3, #28
 80195ba:	d422      	bmi.n	8019602 <__swsetup_r+0x62>
 80195bc:	06da      	lsls	r2, r3, #27
 80195be:	d407      	bmi.n	80195d0 <__swsetup_r+0x30>
 80195c0:	2209      	movs	r2, #9
 80195c2:	602a      	str	r2, [r5, #0]
 80195c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80195c8:	81a3      	strh	r3, [r4, #12]
 80195ca:	f04f 30ff 	mov.w	r0, #4294967295
 80195ce:	e033      	b.n	8019638 <__swsetup_r+0x98>
 80195d0:	0758      	lsls	r0, r3, #29
 80195d2:	d512      	bpl.n	80195fa <__swsetup_r+0x5a>
 80195d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80195d6:	b141      	cbz	r1, 80195ea <__swsetup_r+0x4a>
 80195d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80195dc:	4299      	cmp	r1, r3
 80195de:	d002      	beq.n	80195e6 <__swsetup_r+0x46>
 80195e0:	4628      	mov	r0, r5
 80195e2:	f7fe fac1 	bl	8017b68 <_free_r>
 80195e6:	2300      	movs	r3, #0
 80195e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80195ea:	89a3      	ldrh	r3, [r4, #12]
 80195ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80195f0:	81a3      	strh	r3, [r4, #12]
 80195f2:	2300      	movs	r3, #0
 80195f4:	6063      	str	r3, [r4, #4]
 80195f6:	6923      	ldr	r3, [r4, #16]
 80195f8:	6023      	str	r3, [r4, #0]
 80195fa:	89a3      	ldrh	r3, [r4, #12]
 80195fc:	f043 0308 	orr.w	r3, r3, #8
 8019600:	81a3      	strh	r3, [r4, #12]
 8019602:	6923      	ldr	r3, [r4, #16]
 8019604:	b94b      	cbnz	r3, 801961a <__swsetup_r+0x7a>
 8019606:	89a3      	ldrh	r3, [r4, #12]
 8019608:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801960c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019610:	d003      	beq.n	801961a <__swsetup_r+0x7a>
 8019612:	4621      	mov	r1, r4
 8019614:	4628      	mov	r0, r5
 8019616:	f000 f883 	bl	8019720 <__smakebuf_r>
 801961a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801961e:	f013 0201 	ands.w	r2, r3, #1
 8019622:	d00a      	beq.n	801963a <__swsetup_r+0x9a>
 8019624:	2200      	movs	r2, #0
 8019626:	60a2      	str	r2, [r4, #8]
 8019628:	6962      	ldr	r2, [r4, #20]
 801962a:	4252      	negs	r2, r2
 801962c:	61a2      	str	r2, [r4, #24]
 801962e:	6922      	ldr	r2, [r4, #16]
 8019630:	b942      	cbnz	r2, 8019644 <__swsetup_r+0xa4>
 8019632:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8019636:	d1c5      	bne.n	80195c4 <__swsetup_r+0x24>
 8019638:	bd38      	pop	{r3, r4, r5, pc}
 801963a:	0799      	lsls	r1, r3, #30
 801963c:	bf58      	it	pl
 801963e:	6962      	ldrpl	r2, [r4, #20]
 8019640:	60a2      	str	r2, [r4, #8]
 8019642:	e7f4      	b.n	801962e <__swsetup_r+0x8e>
 8019644:	2000      	movs	r0, #0
 8019646:	e7f7      	b.n	8019638 <__swsetup_r+0x98>
 8019648:	24000260 	.word	0x24000260

0801964c <_raise_r>:
 801964c:	291f      	cmp	r1, #31
 801964e:	b538      	push	{r3, r4, r5, lr}
 8019650:	4605      	mov	r5, r0
 8019652:	460c      	mov	r4, r1
 8019654:	d904      	bls.n	8019660 <_raise_r+0x14>
 8019656:	2316      	movs	r3, #22
 8019658:	6003      	str	r3, [r0, #0]
 801965a:	f04f 30ff 	mov.w	r0, #4294967295
 801965e:	bd38      	pop	{r3, r4, r5, pc}
 8019660:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8019662:	b112      	cbz	r2, 801966a <_raise_r+0x1e>
 8019664:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019668:	b94b      	cbnz	r3, 801967e <_raise_r+0x32>
 801966a:	4628      	mov	r0, r5
 801966c:	f000 f830 	bl	80196d0 <_getpid_r>
 8019670:	4622      	mov	r2, r4
 8019672:	4601      	mov	r1, r0
 8019674:	4628      	mov	r0, r5
 8019676:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801967a:	f000 b817 	b.w	80196ac <_kill_r>
 801967e:	2b01      	cmp	r3, #1
 8019680:	d00a      	beq.n	8019698 <_raise_r+0x4c>
 8019682:	1c59      	adds	r1, r3, #1
 8019684:	d103      	bne.n	801968e <_raise_r+0x42>
 8019686:	2316      	movs	r3, #22
 8019688:	6003      	str	r3, [r0, #0]
 801968a:	2001      	movs	r0, #1
 801968c:	e7e7      	b.n	801965e <_raise_r+0x12>
 801968e:	2100      	movs	r1, #0
 8019690:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8019694:	4620      	mov	r0, r4
 8019696:	4798      	blx	r3
 8019698:	2000      	movs	r0, #0
 801969a:	e7e0      	b.n	801965e <_raise_r+0x12>

0801969c <raise>:
 801969c:	4b02      	ldr	r3, [pc, #8]	@ (80196a8 <raise+0xc>)
 801969e:	4601      	mov	r1, r0
 80196a0:	6818      	ldr	r0, [r3, #0]
 80196a2:	f7ff bfd3 	b.w	801964c <_raise_r>
 80196a6:	bf00      	nop
 80196a8:	24000260 	.word	0x24000260

080196ac <_kill_r>:
 80196ac:	b538      	push	{r3, r4, r5, lr}
 80196ae:	4d07      	ldr	r5, [pc, #28]	@ (80196cc <_kill_r+0x20>)
 80196b0:	2300      	movs	r3, #0
 80196b2:	4604      	mov	r4, r0
 80196b4:	4608      	mov	r0, r1
 80196b6:	4611      	mov	r1, r2
 80196b8:	602b      	str	r3, [r5, #0]
 80196ba:	f7eb f80d 	bl	80046d8 <_kill>
 80196be:	1c43      	adds	r3, r0, #1
 80196c0:	d102      	bne.n	80196c8 <_kill_r+0x1c>
 80196c2:	682b      	ldr	r3, [r5, #0]
 80196c4:	b103      	cbz	r3, 80196c8 <_kill_r+0x1c>
 80196c6:	6023      	str	r3, [r4, #0]
 80196c8:	bd38      	pop	{r3, r4, r5, pc}
 80196ca:	bf00      	nop
 80196cc:	2400591c 	.word	0x2400591c

080196d0 <_getpid_r>:
 80196d0:	f7ea bffa 	b.w	80046c8 <_getpid>

080196d4 <__swhatbuf_r>:
 80196d4:	b570      	push	{r4, r5, r6, lr}
 80196d6:	460c      	mov	r4, r1
 80196d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80196dc:	2900      	cmp	r1, #0
 80196de:	b096      	sub	sp, #88	@ 0x58
 80196e0:	4615      	mov	r5, r2
 80196e2:	461e      	mov	r6, r3
 80196e4:	da0d      	bge.n	8019702 <__swhatbuf_r+0x2e>
 80196e6:	89a3      	ldrh	r3, [r4, #12]
 80196e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80196ec:	f04f 0100 	mov.w	r1, #0
 80196f0:	bf14      	ite	ne
 80196f2:	2340      	movne	r3, #64	@ 0x40
 80196f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80196f8:	2000      	movs	r0, #0
 80196fa:	6031      	str	r1, [r6, #0]
 80196fc:	602b      	str	r3, [r5, #0]
 80196fe:	b016      	add	sp, #88	@ 0x58
 8019700:	bd70      	pop	{r4, r5, r6, pc}
 8019702:	466a      	mov	r2, sp
 8019704:	f000 f848 	bl	8019798 <_fstat_r>
 8019708:	2800      	cmp	r0, #0
 801970a:	dbec      	blt.n	80196e6 <__swhatbuf_r+0x12>
 801970c:	9901      	ldr	r1, [sp, #4]
 801970e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8019712:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8019716:	4259      	negs	r1, r3
 8019718:	4159      	adcs	r1, r3
 801971a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801971e:	e7eb      	b.n	80196f8 <__swhatbuf_r+0x24>

08019720 <__smakebuf_r>:
 8019720:	898b      	ldrh	r3, [r1, #12]
 8019722:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019724:	079d      	lsls	r5, r3, #30
 8019726:	4606      	mov	r6, r0
 8019728:	460c      	mov	r4, r1
 801972a:	d507      	bpl.n	801973c <__smakebuf_r+0x1c>
 801972c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8019730:	6023      	str	r3, [r4, #0]
 8019732:	6123      	str	r3, [r4, #16]
 8019734:	2301      	movs	r3, #1
 8019736:	6163      	str	r3, [r4, #20]
 8019738:	b003      	add	sp, #12
 801973a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801973c:	ab01      	add	r3, sp, #4
 801973e:	466a      	mov	r2, sp
 8019740:	f7ff ffc8 	bl	80196d4 <__swhatbuf_r>
 8019744:	9f00      	ldr	r7, [sp, #0]
 8019746:	4605      	mov	r5, r0
 8019748:	4639      	mov	r1, r7
 801974a:	4630      	mov	r0, r6
 801974c:	f7fe fdb2 	bl	80182b4 <_malloc_r>
 8019750:	b948      	cbnz	r0, 8019766 <__smakebuf_r+0x46>
 8019752:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019756:	059a      	lsls	r2, r3, #22
 8019758:	d4ee      	bmi.n	8019738 <__smakebuf_r+0x18>
 801975a:	f023 0303 	bic.w	r3, r3, #3
 801975e:	f043 0302 	orr.w	r3, r3, #2
 8019762:	81a3      	strh	r3, [r4, #12]
 8019764:	e7e2      	b.n	801972c <__smakebuf_r+0xc>
 8019766:	89a3      	ldrh	r3, [r4, #12]
 8019768:	6020      	str	r0, [r4, #0]
 801976a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801976e:	81a3      	strh	r3, [r4, #12]
 8019770:	9b01      	ldr	r3, [sp, #4]
 8019772:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8019776:	b15b      	cbz	r3, 8019790 <__smakebuf_r+0x70>
 8019778:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801977c:	4630      	mov	r0, r6
 801977e:	f000 f81d 	bl	80197bc <_isatty_r>
 8019782:	b128      	cbz	r0, 8019790 <__smakebuf_r+0x70>
 8019784:	89a3      	ldrh	r3, [r4, #12]
 8019786:	f023 0303 	bic.w	r3, r3, #3
 801978a:	f043 0301 	orr.w	r3, r3, #1
 801978e:	81a3      	strh	r3, [r4, #12]
 8019790:	89a3      	ldrh	r3, [r4, #12]
 8019792:	431d      	orrs	r5, r3
 8019794:	81a5      	strh	r5, [r4, #12]
 8019796:	e7cf      	b.n	8019738 <__smakebuf_r+0x18>

08019798 <_fstat_r>:
 8019798:	b538      	push	{r3, r4, r5, lr}
 801979a:	4d07      	ldr	r5, [pc, #28]	@ (80197b8 <_fstat_r+0x20>)
 801979c:	2300      	movs	r3, #0
 801979e:	4604      	mov	r4, r0
 80197a0:	4608      	mov	r0, r1
 80197a2:	4611      	mov	r1, r2
 80197a4:	602b      	str	r3, [r5, #0]
 80197a6:	f7ea fff7 	bl	8004798 <_fstat>
 80197aa:	1c43      	adds	r3, r0, #1
 80197ac:	d102      	bne.n	80197b4 <_fstat_r+0x1c>
 80197ae:	682b      	ldr	r3, [r5, #0]
 80197b0:	b103      	cbz	r3, 80197b4 <_fstat_r+0x1c>
 80197b2:	6023      	str	r3, [r4, #0]
 80197b4:	bd38      	pop	{r3, r4, r5, pc}
 80197b6:	bf00      	nop
 80197b8:	2400591c 	.word	0x2400591c

080197bc <_isatty_r>:
 80197bc:	b538      	push	{r3, r4, r5, lr}
 80197be:	4d06      	ldr	r5, [pc, #24]	@ (80197d8 <_isatty_r+0x1c>)
 80197c0:	2300      	movs	r3, #0
 80197c2:	4604      	mov	r4, r0
 80197c4:	4608      	mov	r0, r1
 80197c6:	602b      	str	r3, [r5, #0]
 80197c8:	f7ea fff6 	bl	80047b8 <_isatty>
 80197cc:	1c43      	adds	r3, r0, #1
 80197ce:	d102      	bne.n	80197d6 <_isatty_r+0x1a>
 80197d0:	682b      	ldr	r3, [r5, #0]
 80197d2:	b103      	cbz	r3, 80197d6 <_isatty_r+0x1a>
 80197d4:	6023      	str	r3, [r4, #0]
 80197d6:	bd38      	pop	{r3, r4, r5, pc}
 80197d8:	2400591c 	.word	0x2400591c
 80197dc:	00000000 	.word	0x00000000

080197e0 <log>:
 80197e0:	b4f0      	push	{r4, r5, r6, r7}
 80197e2:	ee10 0a90 	vmov	r0, s1
 80197e6:	ee10 3a10 	vmov	r3, s0
 80197ea:	f04f 34ff 	mov.w	r4, #4294967295
 80197ee:	429c      	cmp	r4, r3
 80197f0:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 80197f4:	4c70      	ldr	r4, [pc, #448]	@ (80199b8 <log+0x1d8>)
 80197f6:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 80197fa:	418c      	sbcs	r4, r1
 80197fc:	ed2d 8b02 	vpush	{d8}
 8019800:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8019804:	d35a      	bcc.n	80198bc <log+0xdc>
 8019806:	4a6d      	ldr	r2, [pc, #436]	@ (80199bc <log+0x1dc>)
 8019808:	4290      	cmp	r0, r2
 801980a:	bf08      	it	eq
 801980c:	2b00      	cmpeq	r3, #0
 801980e:	f000 80c4 	beq.w	801999a <log+0x1ba>
 8019812:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8019816:	ee30 0b47 	vsub.f64	d0, d0, d7
 801981a:	4b69      	ldr	r3, [pc, #420]	@ (80199c0 <log+0x1e0>)
 801981c:	ee20 2b00 	vmul.f64	d2, d0, d0
 8019820:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8019824:	ee20 4b02 	vmul.f64	d4, d0, d2
 8019828:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 801982c:	eea6 7b00 	vfma.f64	d7, d6, d0
 8019830:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 8019834:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 8019838:	eea6 7b02 	vfma.f64	d7, d6, d2
 801983c:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 8019840:	eea5 6b00 	vfma.f64	d6, d5, d0
 8019844:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 8019848:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 801984c:	eea5 6b02 	vfma.f64	d6, d5, d2
 8019850:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 8019854:	eea3 5b00 	vfma.f64	d5, d3, d0
 8019858:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 801985c:	eea3 5b02 	vfma.f64	d5, d3, d2
 8019860:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 8019864:	eea3 5b04 	vfma.f64	d5, d3, d4
 8019868:	eea5 6b04 	vfma.f64	d6, d5, d4
 801986c:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8019870:	eea6 7b04 	vfma.f64	d7, d6, d4
 8019874:	eeb0 2b47 	vmov.f64	d2, d7
 8019878:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 80199a0 <log+0x1c0>
 801987c:	eeb0 6b40 	vmov.f64	d6, d0
 8019880:	eeb0 3b40 	vmov.f64	d3, d0
 8019884:	eea0 6b07 	vfma.f64	d6, d0, d7
 8019888:	eea0 6b47 	vfms.f64	d6, d0, d7
 801988c:	ee30 8b46 	vsub.f64	d8, d0, d6
 8019890:	ee26 1b06 	vmul.f64	d1, d6, d6
 8019894:	eea1 3b05 	vfma.f64	d3, d1, d5
 8019898:	ee30 7b43 	vsub.f64	d7, d0, d3
 801989c:	ee30 0b06 	vadd.f64	d0, d0, d6
 80198a0:	eea1 7b05 	vfma.f64	d7, d1, d5
 80198a4:	ee25 5b08 	vmul.f64	d5, d5, d8
 80198a8:	eea5 7b00 	vfma.f64	d7, d5, d0
 80198ac:	eea2 7b04 	vfma.f64	d7, d2, d4
 80198b0:	ee33 0b07 	vadd.f64	d0, d3, d7
 80198b4:	ecbd 8b02 	vpop	{d8}
 80198b8:	bcf0      	pop	{r4, r5, r6, r7}
 80198ba:	4770      	bx	lr
 80198bc:	f1a2 0410 	sub.w	r4, r2, #16
 80198c0:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 80198c4:	428c      	cmp	r4, r1
 80198c6:	d923      	bls.n	8019910 <log+0x130>
 80198c8:	18d9      	adds	r1, r3, r3
 80198ca:	eb40 0400 	adc.w	r4, r0, r0
 80198ce:	4321      	orrs	r1, r4
 80198d0:	d105      	bne.n	80198de <log+0xfe>
 80198d2:	ecbd 8b02 	vpop	{d8}
 80198d6:	2001      	movs	r0, #1
 80198d8:	bcf0      	pop	{r4, r5, r6, r7}
 80198da:	f000 b885 	b.w	80199e8 <__math_divzero>
 80198de:	4939      	ldr	r1, [pc, #228]	@ (80199c4 <log+0x1e4>)
 80198e0:	4288      	cmp	r0, r1
 80198e2:	bf08      	it	eq
 80198e4:	2b00      	cmpeq	r3, #0
 80198e6:	d0e5      	beq.n	80198b4 <log+0xd4>
 80198e8:	0413      	lsls	r3, r2, #16
 80198ea:	d403      	bmi.n	80198f4 <log+0x114>
 80198ec:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80198f0:	4393      	bics	r3, r2
 80198f2:	d104      	bne.n	80198fe <log+0x11e>
 80198f4:	ecbd 8b02 	vpop	{d8}
 80198f8:	bcf0      	pop	{r4, r5, r6, r7}
 80198fa:	f000 b88d 	b.w	8019a18 <__math_invalid>
 80198fe:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80199a8 <log+0x1c8>
 8019902:	ee20 7b07 	vmul.f64	d7, d0, d7
 8019906:	ec53 2b17 	vmov	r2, r3, d7
 801990a:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 801990e:	4613      	mov	r3, r2
 8019910:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 8019914:	492a      	ldr	r1, [pc, #168]	@ (80199c0 <log+0x1e0>)
 8019916:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 801991a:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 801991e:	f3c2 3446 	ubfx	r4, r2, #13, #7
 8019922:	0d15      	lsrs	r5, r2, #20
 8019924:	eb01 1c04 	add.w	ip, r1, r4, lsl #4
 8019928:	052d      	lsls	r5, r5, #20
 801992a:	ed9c 7b24 	vldr	d7, [ip, #144]	@ 0x90
 801992e:	1e1e      	subs	r6, r3, #0
 8019930:	1b47      	subs	r7, r0, r5
 8019932:	ec47 6b16 	vmov	d6, r6, r7
 8019936:	1512      	asrs	r2, r2, #20
 8019938:	eea7 5b06 	vfma.f64	d5, d7, d6
 801993c:	ee07 2a90 	vmov	s15, r2
 8019940:	ee25 2b05 	vmul.f64	d2, d5, d5
 8019944:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8019948:	ed91 4b00 	vldr	d4, [r1]
 801994c:	ee25 1b02 	vmul.f64	d1, d5, d2
 8019950:	ed9c 7b26 	vldr	d7, [ip, #152]	@ 0x98
 8019954:	eea4 7b06 	vfma.f64	d7, d4, d6
 8019958:	ee35 4b07 	vadd.f64	d4, d5, d7
 801995c:	ee37 0b44 	vsub.f64	d0, d7, d4
 8019960:	ed91 7b02 	vldr	d7, [r1, #8]
 8019964:	ee30 0b05 	vadd.f64	d0, d0, d5
 8019968:	eea7 0b06 	vfma.f64	d0, d7, d6
 801996c:	ed91 7b04 	vldr	d7, [r1, #16]
 8019970:	ed91 6b08 	vldr	d6, [r1, #32]
 8019974:	eea7 0b02 	vfma.f64	d0, d7, d2
 8019978:	ed91 7b06 	vldr	d7, [r1, #24]
 801997c:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 8019980:	eea6 7b05 	vfma.f64	d7, d6, d5
 8019984:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 8019988:	eea3 6b05 	vfma.f64	d6, d3, d5
 801998c:	eea6 7b02 	vfma.f64	d7, d6, d2
 8019990:	eea1 0b07 	vfma.f64	d0, d1, d7
 8019994:	ee30 0b04 	vadd.f64	d0, d0, d4
 8019998:	e78c      	b.n	80198b4 <log+0xd4>
 801999a:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 80199b0 <log+0x1d0>
 801999e:	e789      	b.n	80198b4 <log+0xd4>
 80199a0:	00000000 	.word	0x00000000
 80199a4:	41a00000 	.word	0x41a00000
 80199a8:	00000000 	.word	0x00000000
 80199ac:	43300000 	.word	0x43300000
	...
 80199b8:	000308ff 	.word	0x000308ff
 80199bc:	3ff00000 	.word	0x3ff00000
 80199c0:	0801a378 	.word	0x0801a378
 80199c4:	7ff00000 	.word	0x7ff00000

080199c8 <with_errno>:
 80199c8:	b510      	push	{r4, lr}
 80199ca:	ed2d 8b02 	vpush	{d8}
 80199ce:	eeb0 8b40 	vmov.f64	d8, d0
 80199d2:	4604      	mov	r4, r0
 80199d4:	f7fe f884 	bl	8017ae0 <__errno>
 80199d8:	eeb0 0b48 	vmov.f64	d0, d8
 80199dc:	ecbd 8b02 	vpop	{d8}
 80199e0:	6004      	str	r4, [r0, #0]
 80199e2:	bd10      	pop	{r4, pc}
 80199e4:	0000      	movs	r0, r0
	...

080199e8 <__math_divzero>:
 80199e8:	b082      	sub	sp, #8
 80199ea:	2800      	cmp	r0, #0
 80199ec:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 80199f0:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 80199f4:	fe07 7b06 	vseleq.f64	d7, d7, d6
 80199f8:	ed8d 7b00 	vstr	d7, [sp]
 80199fc:	ed9d 0b00 	vldr	d0, [sp]
 8019a00:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 8019a10 <__math_divzero+0x28>
 8019a04:	2022      	movs	r0, #34	@ 0x22
 8019a06:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8019a0a:	b002      	add	sp, #8
 8019a0c:	f7ff bfdc 	b.w	80199c8 <with_errno>
	...

08019a18 <__math_invalid>:
 8019a18:	eeb0 7b40 	vmov.f64	d7, d0
 8019a1c:	eeb4 7b47 	vcmp.f64	d7, d7
 8019a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a24:	ee30 6b40 	vsub.f64	d6, d0, d0
 8019a28:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8019a2c:	d602      	bvs.n	8019a34 <__math_invalid+0x1c>
 8019a2e:	2021      	movs	r0, #33	@ 0x21
 8019a30:	f7ff bfca 	b.w	80199c8 <with_errno>
 8019a34:	4770      	bx	lr
	...

08019a38 <_init>:
 8019a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a3a:	bf00      	nop
 8019a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019a3e:	bc08      	pop	{r3}
 8019a40:	469e      	mov	lr, r3
 8019a42:	4770      	bx	lr

08019a44 <_fini>:
 8019a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a46:	bf00      	nop
 8019a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019a4a:	bc08      	pop	{r3}
 8019a4c:	469e      	mov	lr, r3
 8019a4e:	4770      	bx	lr
